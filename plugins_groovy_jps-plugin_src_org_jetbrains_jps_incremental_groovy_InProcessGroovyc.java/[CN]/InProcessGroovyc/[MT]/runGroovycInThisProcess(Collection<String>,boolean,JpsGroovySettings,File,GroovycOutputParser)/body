{
  ClassLoader parent=obtainParentLoader(compilationClassPath);
  UrlClassLoader loader=UrlClassLoader.build().urls(toUrls(compilationClassPath)).parent(parent).useCache(ourLoaderCachePool,new UrlClassLoader.CachingCondition(){
    @Override public boolean shouldCacheData(    @NotNull URL url){
      try {
        String file=FileUtil.toCanonicalPath(new File(url.toURI()).getPath());
        for (        String output : myOutputs) {
          if (FileUtil.startsWith(output,file)) {
            return false;
          }
        }
        return true;
      }
 catch (      URISyntaxException e) {
        LOG.info(e);
        return false;
      }
    }
  }
).get();
  PrintStream oldOut=System.out;
  PrintStream oldErr=System.err;
  ClassLoader oldLoader=Thread.currentThread().getContextClassLoader();
  System.setOut(createStream(parser,ProcessOutputTypes.STDOUT,oldOut));
  System.setErr(createStream(parser,ProcessOutputTypes.STDERR,oldErr));
  Thread.currentThread().setContextClassLoader(loader);
  try {
    Class<?> runnerClass=loader.loadClass("org.jetbrains.groovy.compiler.rt.GroovycRunner");
    Method intMain=runnerClass.getDeclaredMethod("intMain2",boolean.class,boolean.class,boolean.class,String.class);
    Integer exitCode=(Integer)intMain.invoke(null,settings.invokeDynamic,false,forStubs,tempFile.getPath());
    parser.notifyFinished(exitCode);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    System.out.flush();
    System.err.flush();
    System.setOut(oldOut);
    System.setErr(oldErr);
    Thread.currentThread().setContextClassLoader(oldLoader);
  }
}
