{
  if (!"true".equals(System.getProperty("groovyc.reuse.compiler.classes","true"))) {
    return null;
  }
  String groovyAll=ContainerUtil.find(compilationClassPath,new Condition<String>(){
    @Override public boolean value(    String s){
      return GROOVY_ALL_JAR_PATTERN.matcher(StringUtil.getShortName(s,'/')).matches();
    }
  }
);
  if (groovyAll == null) {
    return null;
  }
  Pair<String,ClassLoader> pair=SoftReference.dereference(ourParentLoaderCache);
  if (pair != null && pair.first.equals(groovyAll)) {
    return pair.second;
  }
  final ClassDependencyLoader checkWellFormed=new ClassDependencyLoader(){
    @Override protected void loadClassDependencies(    Class aClass) throws ClassNotFoundException {
      if (!isCompilerCoreClass(aClass.getName()) || !(aClass.getClassLoader() instanceof UrlClassLoader)) {
        super.loadClassDependencies(aClass);
      }
    }
    private boolean isCompilerCoreClass(    String name){
      if (name.startsWith("groovyjarjar")) {
        return true;
      }
      if (name.startsWith("org.codehaus.groovy.")) {
        String tail=name.substring("org.codehaus.groovy.".length());
        if (tail.startsWith("ast") || tail.startsWith("classgen") || tail.startsWith("tools.javac")|| tail.startsWith("antlr")|| tail.startsWith("vmplugin")|| tail.startsWith("reflection")|| tail.startsWith("control")) {
          return true;
        }
        if (tail.startsWith("runtime") && name.contains("GroovyMethods")) {
          return true;
        }
      }
      return false;
    }
  }
;
  UrlClassLoader groovyAllLoader=UrlClassLoader.build().urls(toUrls(ContainerUtil.concat(GroovyBuilder.getGroovyRtRoots(),Collections.singletonList(groovyAll)))).allowLock().useCache(ourLoaderCachePool,new UrlClassLoader.CachingCondition(){
    @Override public boolean shouldCacheData(    @NotNull URL url){
      return true;
    }
  }
).get();
  ClassLoader wrapper=new URLClassLoader(new URL[0],groovyAllLoader){
    @Override protected Class<?> loadClass(    String name,    boolean resolve) throws ClassNotFoundException {
      try {
        return checkWellFormed.loadDependencies(super.loadClass(name,resolve));
      }
 catch (      NoClassDefFoundError e) {
        throw new ClassNotFoundException(name,e);
      }
    }
  }
;
  ourParentLoaderCache=new SoftReference<Pair<String,ClassLoader>>(Pair.create(groovyAll,wrapper));
  return wrapper;
}
