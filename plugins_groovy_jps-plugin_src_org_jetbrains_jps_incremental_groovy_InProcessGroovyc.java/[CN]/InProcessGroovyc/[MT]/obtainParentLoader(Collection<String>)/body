{
  if (!"true".equals(System.getProperty("groovyc.reuse.compiler.classes","true"))) {
    return null;
  }
  String groovyAll=ContainerUtil.find(compilationClassPath,new Condition<String>(){
    @Override public boolean value(    String s){
      return GROOVY_ALL_JAR_PATTERN.matcher(StringUtil.getShortName(s,'/')).matches();
    }
  }
);
  if (groovyAll == null) {
    return null;
  }
  Pair<String,ClassLoader> pair=SoftReference.dereference(ourParentLoaderCache);
  if (pair != null && pair.first.equals(groovyAll)) {
    return pair.second;
  }
  ClassLoader result=UrlClassLoader.build().urls(toUrls(Arrays.asList(GroovyBuilder.getGroovyRtRoot().getPath(),groovyAll))).useCache().get();
  ourParentLoaderCache=new SoftReference<Pair<String,ClassLoader>>(Pair.create(groovyAll,result));
  return result;
}
