{
  ClassLoader parent=obtainParentLoader(compilationClassPath);
  UrlClassLoader loader=UrlClassLoader.build().urls(toUrls(compilationClassPath)).parent(parent).useCache(ourLoaderCachePool,new UrlClassLoader.CachingCondition(){
    @Override public boolean shouldCacheData(    @NotNull URL url){
      String file=url.getFile();
      for (      String output : outputs) {
        if (FileUtil.startsWith(output + "/",file)) {
          return false;
        }
      }
      return true;
    }
  }
).get();
  PrintStream oldOut=System.out;
  PrintStream oldErr=System.err;
  ClassLoader oldLoader=Thread.currentThread().getContextClassLoader();
  System.setOut(createStream(parser,ProcessOutputTypes.STDOUT,oldOut));
  System.setErr(createStream(parser,ProcessOutputTypes.STDERR,oldErr));
  Thread.currentThread().setContextClassLoader(loader);
  try {
    Class<?> runnerClass=loader.loadClass("org.jetbrains.groovy.compiler.rt.GroovycRunner");
    Method intMain=runnerClass.getDeclaredMethod("intMain",String[].class);
    Integer exitCode=(Integer)intMain.invoke(null,new Object[]{ArrayUtil.toStringArray(programParams)});
    parser.notifyFinished(exitCode);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    System.out.flush();
    System.err.flush();
    System.setOut(oldOut);
    System.setErr(oldErr);
    Thread.currentThread().setContextClassLoader(oldLoader);
  }
}
