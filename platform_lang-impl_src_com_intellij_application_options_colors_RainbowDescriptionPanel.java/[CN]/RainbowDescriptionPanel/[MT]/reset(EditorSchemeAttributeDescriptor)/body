{
  if (!(attributeDescriptor instanceof RainbowAttributeDescriptor))   return;
  RainbowAttributeDescriptor descriptor=(RainbowAttributeDescriptor)attributeDescriptor;
  List<Pair<Boolean,Color>> rainbowState=descriptor.getRainbowColorsInSchemaState();
  if (rainbowState.size() < myCbStops.length)   return;
  Boolean rainbowOn=descriptor.getColorAndFontGlobalState().isRainbowOn(descriptor.getLanguage());
  boolean isInherited=false;
  if (rainbowOn == null) {
    isInherited=true;
    rainbowOn=descriptor.getColorAndFontGlobalState().isRainbowOn(null);
  }
  myRainbow.setEnabled(!isInherited);
  myRainbow.setSelected(rainbowOn);
  boolean isDefaultLanguage=descriptor.getLanguage() == null;
  boolean isEnable=!ColorAndFontOptions.isReadOnly(attributeDescriptor.getScheme()) && isDefaultLanguage;
  for (int i=0; i < myCbStops.length; ++i) {
    Pair<Boolean,Color> state=rainbowState.get(i);
    myCbStops[i].setEnabled(isEnable);
    boolean isOverride=state.first;
    myCbStops[i].setSelected(isOverride);
    myStops[i].setEditable(isEnable && isOverride);
    myStops[i].setSelectedColor(state.second);
  }
  myInheritanceLabel.setVisible(!isDefaultLanguage);
  myInheritAttributesBox.setSelected(isInherited);
  myInheritAttributesBox.setVisible(!isDefaultLanguage);
  myGradientLabel.setText(isDefaultLanguage ? myOverrideMessage : myInheritedMessage);
  myGradientLabel.setToolTipText(isDefaultLanguage ? null : myInheritedMessageTooltip);
}
