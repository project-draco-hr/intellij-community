{
  final Callable<Object> taskCallable=new Callable<Object>(){
    @Override public Object call(){
      try {
        return method.invoke(myTarget,args);
      }
 catch (      IllegalAccessException e) {
        LOG.error(e);
        return null;
      }
catch (      InvocationTargetException e) {
        LOG.error(e);
        return null;
      }
    }
  }
;
  try {
    boolean immediateCall=method.getAnnotation(ImmediateCall.class) != null;
    boolean childCall=method.getAnnotation(ChildCall.class) != null;
    if (childCall) {
      Object child=immediateCall ? taskCallable.call() : execute(taskCallable);
      if (child == null) {
        return null;
      }
      Object result;
      Class<?> childClass=child.getClass();
      if (childClass.isArray()) {
        Class<?> componentType=childClass.getComponentType();
        int length=Array.getLength(child);
        result=Array.newInstance(componentType,length);
        for (int i=0; i < length; i++) {
          Array.set(result,i,createChildProxy(Array.get(child,i)));
        }
      }
 else {
        result=createChildProxy(child);
      }
      return result;
    }
    if (immediateCall || StringUtil.equals(method.getName(),"toString")) {
      return taskCallable.call();
    }
    boolean asyncCall=method.getAnnotation(AsyncCall.class) != null;
    if (asyncCall) {
      myTaskExecutor.submit(new Runnable(){
        @Override public void run(){
          try {
            taskCallable.call();
          }
 catch (          Exception e) {
            LOG.error(e);
          }
        }
      }
);
      return null;
    }
 else {
      return execute(taskCallable);
    }
  }
  finally {
    boolean finalCall=method.getAnnotation(FinalCall.class) != null;
    if (finalCall) {
      myTaskExecutor.shutdownNow();
    }
  }
}
