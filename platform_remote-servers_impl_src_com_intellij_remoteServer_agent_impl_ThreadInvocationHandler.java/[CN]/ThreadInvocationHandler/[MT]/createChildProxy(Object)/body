{
  Class<?> childClass=child.getClass();
  Class<?>[] childInterfaces=childClass.getInterfaces();
  LOG.assertTrue(childInterfaces.length == 1,"Child class is expected to implement single child interface");
  Class<?> childInterface=childInterfaces[0];
  Class<?> callerChildInterface;
  try {
    callerChildInterface=myCallerClassLoader.loadClass(childInterface.getName());
  }
 catch (  ClassNotFoundException e) {
    LOG.error(e);
    return null;
  }
  Object preWrappedChild;
  if (myPreWrapperFactory == null) {
    preWrappedChild=child;
  }
 else {
    preWrappedChild=Proxy.newProxyInstance(myCallerClassLoader,new Class[]{callerChildInterface},myPreWrapperFactory.createWrapperInvocationHandler(child));
  }
  return Proxy.newProxyInstance(myCallerClassLoader,new Class[]{callerChildInterface},new ThreadInvocationHandler(myCallerClassLoader,preWrappedChild,myPreWrapperFactory));
}
