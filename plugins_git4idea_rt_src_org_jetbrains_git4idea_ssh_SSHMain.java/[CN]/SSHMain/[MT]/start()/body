{
  Connection c=new Connection(myHost.getHostName(),myHost.getPort());
  try {
    configureKnownHosts(c);
    boolean useHttpProxy=Boolean.valueOf(System.getenv(GitSSHHandler.SSH_USE_PROXY_ENV));
    if (useHttpProxy) {
      String proxyHost=System.getenv(GitSSHHandler.SSH_PROXY_HOST_ENV);
      Integer proxyPort=Integer.valueOf(System.getenv(GitSSHHandler.SSH_PROXY_PORT_ENV));
      boolean proxyAuthentication=Boolean.valueOf(System.getenv(GitSSHHandler.SSH_PROXY_AUTHENTICATION_ENV));
      String proxyUser=null;
      String proxyPassword=null;
      if (proxyAuthentication) {
        proxyUser=System.getenv(GitSSHHandler.SSH_PROXY_USER_ENV);
        proxyPassword=System.getenv(GitSSHHandler.SSH_PROXY_PASSWORD_ENV);
      }
      c.setProxyData(new HTTPProxyData(proxyHost,proxyPort,proxyUser,proxyPassword));
    }
    c.connect(new HostKeyVerifier());
    authenticate(c);
    final Session s=c.openSession();
    try {
      s.execCommand(myCommand);
      forward("stdin",s.getStdin(),System.in,false);
      forward("stdout",System.out,s.getStdout(),true);
      forward("stderr",System.err,s.getStderr(),true);
      myForwardCompleted.acquire(2);
      s.waitForCondition(ChannelCondition.EXIT_STATUS,Long.MAX_VALUE);
      Integer exitStatus=s.getExitStatus();
      if (exitStatus == null) {
        exitStatus=1;
      }
      System.exit(exitStatus.intValue() == 0 ? myExitCode : exitStatus.intValue());
    }
  finally {
      s.close();
    }
  }
  finally {
    c.close();
  }
}
