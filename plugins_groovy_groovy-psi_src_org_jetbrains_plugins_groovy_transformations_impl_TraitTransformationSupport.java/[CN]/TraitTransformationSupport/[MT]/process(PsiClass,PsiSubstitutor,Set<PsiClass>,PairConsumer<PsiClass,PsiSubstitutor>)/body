{
  consumer.consume(trait,substitutor);
  List<PsiClassType.ClassResolveResult> traits=getSuperTraitsByCorrectOrder(Arrays.asList(trait.getSuperTypes()));
  for (  PsiClassType.ClassResolveResult resolveResult : traits) {
    PsiClass superClass=resolveResult.getElement();
    if (superClass != null && visited.add(superClass)) {
      final PsiSubstitutor superSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(superClass,trait,substitutor);
      process(superClass,superSubstitutor,visited,consumer);
    }
  }
}
