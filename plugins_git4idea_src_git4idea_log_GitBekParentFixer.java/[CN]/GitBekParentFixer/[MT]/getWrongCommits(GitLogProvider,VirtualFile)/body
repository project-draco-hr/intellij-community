{
  List<TimedVcsCommit> ideaPulls=provider.getCommitsMatchingFilter(root,MAGIC_IDEA_PULLS_FILTER,-1);
  List<TimedVcsCommit> commandLinePullCandidates=provider.getCommitsMatchingFilter(root,MAGIC_COMMAND_LINE_PULLS_FILTER,-1);
  Set<Hash> result=new HashSet<Hash>();
  Function<TimedVcsCommit,Hash> function=new Function<TimedVcsCommit,Hash>(){
    @Override public Hash fun(    TimedVcsCommit timedVcsCommit){
      return timedVcsCommit.getId();
    }
  }
;
  result.addAll(ContainerUtil.map2Set(ideaPulls,function));
  Set<Hash> commandLinePulls=new HashSet<Hash>();
  for (  TimedVcsCommit candidate : commandLinePullCandidates) {
    List<Hash> parents=candidate.getParents();
    if (parents.size() < 2)     continue;
    ArrayList<String> hashes=new ArrayList<String>(3);
    hashes.add(candidate.getId().asString());
    for (    Hash parent : parents) {
      hashes.add(parent.asString());
    }
    List<? extends VcsShortCommitDetails> shortDetails=provider.readShortDetails(root,hashes);
    VcsUser mergeCommitter=null;
    VcsUser firstParentCommitter=null;
    for (    VcsShortCommitDetails detail : shortDetails) {
      if (detail.getId().equals(candidate.getId())) {
        mergeCommitter=detail.getCommitter();
      }
 else       if (detail.getId().equals(parents.get(0))) {
        firstParentCommitter=detail.getCommitter();
      }
    }
    if (mergeCommitter != null && mergeCommitter.equals(firstParentCommitter)) {
      commandLinePulls.add(candidate.getId());
    }
  }
  result.addAll(commandLinePulls);
  return result;
}
