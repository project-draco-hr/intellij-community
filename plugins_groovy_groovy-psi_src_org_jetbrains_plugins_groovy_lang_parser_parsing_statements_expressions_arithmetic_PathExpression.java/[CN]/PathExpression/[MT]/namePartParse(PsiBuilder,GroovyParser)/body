{
  ParserUtils.getToken(builder,GroovyTokenTypes.mAT);
  if (ParserUtils.getToken(builder,GroovyTokenTypes.mIDENT) || ParserUtils.getToken(builder,GroovyTokenTypes.mSTRING_LITERAL) || ParserUtils.getToken(builder,GroovyTokenTypes.mGSTRING_LITERAL)) {
    return GroovyElementTypes.REFERENCE_EXPRESSION;
  }
  final IElementType tokenType=builder.getTokenType();
  if (tokenType == GroovyTokenTypes.mGSTRING_BEGIN) {
    final boolean result=CompoundStringExpression.parse(builder,parser,true,GroovyTokenTypes.mGSTRING_BEGIN,GroovyTokenTypes.mGSTRING_CONTENT,GroovyTokenTypes.mGSTRING_END,null,GroovyElementTypes.GSTRING,GroovyBundle.message("string.end.expected"));
    return result ? GroovyElementTypes.PATH_PROPERTY_REFERENCE : GroovyElementTypes.REFERENCE_EXPRESSION;
  }
  if (tokenType == GroovyTokenTypes.mREGEX_BEGIN) {
    final boolean result=CompoundStringExpression.parse(builder,parser,true,GroovyTokenTypes.mREGEX_BEGIN,GroovyTokenTypes.mREGEX_CONTENT,GroovyTokenTypes.mREGEX_END,GroovyTokenTypes.mREGEX_LITERAL,GroovyElementTypes.REGEX,GroovyBundle.message("regex.end.expected"));
    return result ? GroovyElementTypes.PATH_PROPERTY_REFERENCE : GroovyElementTypes.REFERENCE_EXPRESSION;
  }
  if (tokenType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_BEGIN) {
    final boolean result=CompoundStringExpression.parse(builder,parser,true,GroovyTokenTypes.mDOLLAR_SLASH_REGEX_BEGIN,GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT,GroovyTokenTypes.mDOLLAR_SLASH_REGEX_END,GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL,GroovyElementTypes.REGEX,GroovyBundle.message("dollar.slash.end.expected"));
    return result ? GroovyElementTypes.PATH_PROPERTY_REFERENCE : GroovyElementTypes.REFERENCE_EXPRESSION;
  }
  if (tokenType == GroovyTokenTypes.mLCURLY) {
    OpenOrClosableBlock.parseOpenBlock(builder,parser);
    return GroovyElementTypes.PATH_PROPERTY_REFERENCE;
  }
  if (tokenType == GroovyTokenTypes.mLPAREN) {
    PrimaryExpression.parenthesizedExprParse(builder,parser);
    return GroovyElementTypes.PATH_PROPERTY_REFERENCE;
  }
  if (TokenSets.KEYWORDS.contains(builder.getTokenType())) {
    builder.advanceLexer();
    return GroovyElementTypes.REFERENCE_EXPRESSION;
  }
  return GroovyElementTypes.WRONGWAY;
}
