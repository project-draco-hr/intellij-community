{
  boolean guiTestMode=Boolean.getBoolean("idea.test.guimode");
  if (!guiTestMode) {
    UIUtil.invokeAndWaitIfNeeded(new Runnable(){
      @Override public void run(){
        try {
          LightPlatformTestCase.initApplication();
        }
 catch (        RuntimeException e) {
          throw e;
        }
catch (        Exception e) {
          throw new RuntimeException(e);
        }
        PlatformTestUtil.cleanupAllProjects();
        ApplicationImpl application=(ApplicationImpl)ApplicationManager.getApplication();
        System.out.println(application.writeActionStatistics());
        System.out.println(ActionUtil.ActionPauses.STAT.statistics());
        System.out.println(((AppScheduledExecutorService)AppExecutorUtil.getAppScheduledExecutorService()).statistics());
        System.out.println("ProcessIOExecutorService threads created: " + ((ProcessIOExecutorService)ProcessIOExecutorService.INSTANCE).getThreadCounter());
        application.setDisposeInProgress(true);
        LightPlatformTestCase.disposeApplication();
        UIUtil.dispatchAllInvocationEvents();
      }
    }
);
    try {
      LeakHunter.checkProjectLeak();
      Disposer.assertIsEmpty(true);
    }
 catch (    AssertionError|Exception e) {
      captureMemorySnapshot();
      throw e;
    }
    try {
      Disposer.assertIsEmpty(true);
    }
 catch (    AssertionError e) {
      captureMemorySnapshot();
      throw e;
    }
catch (    Exception e) {
      captureMemorySnapshot();
      throw e;
    }
  }
 else {
    final Application application=ApplicationManager.getApplication();
    application.invokeAndWait(new Runnable(){
      @Override public void run(){
        IdeEventQueue.getInstance().flushQueue();
        ((ApplicationImpl)application).exit(true,true,false,false);
      }
    }
,ModalityState.any());
    ShutDownTracker.getInstance().waitFor(100,TimeUnit.SECONDS);
  }
}
