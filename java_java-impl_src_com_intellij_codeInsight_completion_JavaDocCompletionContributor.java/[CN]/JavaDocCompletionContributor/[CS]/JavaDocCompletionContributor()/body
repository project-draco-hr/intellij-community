{
  extend(CompletionType.BASIC,PsiJavaPatterns.psiElement(JavaDocTokenType.DOC_TAG_NAME),new TagChooser());
  extend(CompletionType.BASIC,PsiJavaPatterns.psiElement().inside(PsiDocComment.class),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement position=parameters.getPosition();
      boolean isArg=PsiJavaPatterns.psiElement().afterLeaf("(").accepts(position);
      PsiDocTag tag=PsiTreeUtil.getParentOfType(position,PsiDocTag.class);
      boolean onlyConstants=!isArg && tag != null && tag.getName().equals(VALUE_TAG);
      final PsiReference ref=position.getContainingFile().findReferenceAt(parameters.getOffset());
      if (ref instanceof PsiJavaReference) {
        result.stopHere();
        for (        LookupElement item : completeJavadocReference(position,(PsiJavaReference)ref)) {
          if (onlyConstants) {
            Object o=item.getObject();
            if (!(o instanceof PsiField))             continue;
            PsiField field=(PsiField)o;
            if (!(field.hasModifierProperty(PsiModifier.STATIC) && field.getInitializer() != null && JavaConstantExpressionEvaluator.computeConstantExpression(field.getInitializer(),false) != null))             continue;
          }
          if (isArg) {
            item=AutoCompletionPolicy.NEVER_AUTOCOMPLETE.applyPolicy(item);
          }
          result.addElement(item);
        }
        JavaCompletionContributor.addAllClasses(parameters,result,new JavaCompletionSession(result));
      }
      if (tag != null && "author".equals(tag.getName())) {
        result.addElement(LookupElementBuilder.create(SystemProperties.getUserName()));
      }
    }
  }
);
  extend(CompletionType.SMART,psiElement().inside(psiElement(PsiDocTag.class).withName(string().oneOf(PsiKeyword.THROWS,"exception"))),new CompletionProvider<CompletionParameters>(){
    @Override public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement element=parameters.getPosition();
      final Set<PsiClass> throwsSet=new HashSet<>();
      final PsiMethod method=PsiTreeUtil.getContextOfType(element,PsiMethod.class,true);
      if (method != null) {
        for (        PsiClassType ref : method.getThrowsList().getReferencedTypes()) {
          final PsiClass exception=ref.resolve();
          if (exception != null && throwsSet.add(exception)) {
            result.addElement(TailTypeDecorator.withTail(new JavaPsiClassReferenceElement(exception),TailType.HUMBLE_SPACE_BEFORE_WORD));
          }
        }
      }
    }
  }
);
}
