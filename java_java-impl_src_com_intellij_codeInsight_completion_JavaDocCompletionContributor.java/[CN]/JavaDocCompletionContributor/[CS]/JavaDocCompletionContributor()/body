{
  extend(CompletionType.BASIC,PsiJavaPatterns.psiElement(JavaDocTokenType.DOC_TAG_NAME),new TagChooser());
  extend(CompletionType.BASIC,PsiJavaPatterns.psiElement().inside(PsiDocComment.class),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement position=parameters.getPosition();
      boolean isArg=PsiJavaPatterns.psiElement().afterLeaf("(").accepts(position);
      PsiDocTag tag=PsiTreeUtil.getParentOfType(position,PsiDocTag.class);
      boolean onlyConstants=!isArg && tag != null && tag.getName().equals(VALUE_TAG);
      final PsiReference ref=position.getContainingFile().findReferenceAt(parameters.getOffset());
      if (ref instanceof PsiJavaReference) {
        result.stopHere();
        final JavaCompletionProcessor processor=new JavaCompletionProcessor(position,TrueFilter.INSTANCE,JavaCompletionProcessor.Options.CHECK_NOTHING,Conditions.<String>alwaysTrue());
        ((PsiJavaReference)ref).processVariants(processor);
        for (        final CompletionElement _item : processor.getResults()) {
          final Object element=_item.getElement();
          LookupElement item=createLookupItem(element);
          if (onlyConstants) {
            Object o=item.getObject();
            if (!(o instanceof PsiField))             continue;
            PsiField field=(PsiField)o;
            if (!(field.hasModifierProperty(PsiModifier.STATIC) && field.getInitializer() != null && JavaConstantExpressionEvaluator.computeConstantExpression(field.getInitializer(),false) != null))             continue;
          }
          item.putUserData(LookupItem.FORCE_SHOW_SIGNATURE_ATTR,Boolean.TRUE);
          if (isArg) {
            item=AutoCompletionPolicy.NEVER_AUTOCOMPLETE.applyPolicy(item);
          }
          result.addElement(item);
        }
        JavaCompletionContributor.addAllClasses(parameters,result,new InheritorsHolder(result));
      }
      if (tag != null && "author".equals(tag.getName())) {
        result.addElement(LookupElementBuilder.create(SystemProperties.getUserName()));
      }
    }
    private LookupElement createLookupItem(    final Object element){
      if (element instanceof PsiMethod) {
        return new JavaMethodCallElement((PsiMethod)element){
          @Override public void handleInsert(          InsertionContext context){
            new MethodSignatureInsertHandler().handleInsert(context,this);
          }
        }
;
      }
      if (element instanceof PsiClass) {
        JavaPsiClassReferenceElement classElement=new JavaPsiClassReferenceElement((PsiClass)element);
        classElement.setInsertHandler(JavaClassNameInsertHandler.JAVA_CLASS_INSERT_HANDLER);
        return classElement;
      }
      return LookupItemUtil.objectToLookupItem(element);
    }
  }
);
}
