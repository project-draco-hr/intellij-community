{
  final Module module=getModuleForElement(docString);
  final DocStringFormat format=PyDocumentationSettings.getInstance(module).getFormatForFile(docString.getContainingFile());
  DocStringUpdater updater;
switch (format) {
case EPYTEXT:
    final EpydocString epyParsed=(EpydocString)parseDocString(format,docString);
  updater=new TagBasedDocStringUpdater(epyParsed,"@",PyIndentUtil.getElementIndent(docString));
break;
case REST:
final SphinxDocString restParsed=(SphinxDocString)parseDocString(format,docString);
updater=new TagBasedDocStringUpdater(restParsed,":",PyIndentUtil.getElementIndent(docString));
break;
case GOOGLE:
final GoogleCodeStyleDocString googleParsed=(GoogleCodeStyleDocString)parseDocString(format,docString);
updater=new GoogleCodeStyleDocStringUpdater(googleParsed,PyIndentUtil.getElementIndent(docString));
break;
case NUMPY:
final NumpyDocString numpyParsed=(NumpyDocString)parseDocString(format,docString);
updater=new NumpyDocStringUpdater(numpyParsed,PyIndentUtil.getElementIndent(docString));
break;
default :
return docString;
}
for (String name : paramNames) {
updater.removeParameter(name);
}
final String newText=updater.getDocStringText();
final PyExpressionStatement replacement=PyElementGenerator.getInstance(docString.getProject()).createDocstring(newText);
return (PyStringLiteralExpression)docString.replace(replacement.getExpression());
}
