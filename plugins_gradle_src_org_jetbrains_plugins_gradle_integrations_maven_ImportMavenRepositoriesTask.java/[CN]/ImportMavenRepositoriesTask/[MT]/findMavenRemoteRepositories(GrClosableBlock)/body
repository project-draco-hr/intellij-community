{
  Set<MavenRemoteRepository> myRemoteRepositories=ContainerUtil.newHashSet();
  for (  GrMethodCall repo : PsiTreeUtil.getChildrenOfTypeAsList(repositoriesBlock,GrMethodCall.class)) {
    if (repo.getInvokedExpression() == null)     continue;
    final String expressionText=repo.getInvokedExpression().getText();
    if ("mavenCentral".equals(expressionText)) {
      myRemoteRepositories.add(mavenCentralRemoteRepository);
    }
 else     if ("mavenRepo".equals(expressionText)) {
      for (      GrNamedArgument namedArgument : repo.getNamedArguments()) {
        if ("url".equals(namedArgument.getLabelName())) {
          URI urlArgumentValue=resolveUriFromSimpleExpression(namedArgument.getExpression());
          if (urlArgumentValue != null) {
            String textUri=urlArgumentValue.toString();
            myRemoteRepositories.add(new MavenRemoteRepository(textUri,null,textUri,null,null,null));
          }
          break;
        }
      }
    }
 else     if ("maven".equals(expressionText)) {
      List<GrApplicationStatement> list=PsiTreeUtil.getChildrenOfTypeAsList(repo.getClosureArguments()[0],GrApplicationStatement.class);
      if (!list.isEmpty()) {
        GrApplicationStatement statement=list.get(0);
        if (statement == null)         continue;
        GrExpression expression=statement.getInvokedExpression();
        if (expression == null)         continue;
        if ("url".equals(expression.getText())) {
          URI urlArgumentValue=resolveUriFromSimpleExpression(statement.getExpressionArguments()[0]);
          if (urlArgumentValue != null) {
            String textUri=urlArgumentValue.toString();
            myRemoteRepositories.add(new MavenRemoteRepository(textUri,null,textUri,null,null,null));
          }
        }
      }
    }
  }
  return myRemoteRepositories;
}
