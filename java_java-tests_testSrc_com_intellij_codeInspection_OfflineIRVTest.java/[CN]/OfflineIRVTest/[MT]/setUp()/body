{
  super.setUp();
  HighlightDisplayKey.register(DefUseInspectionBase.SHORT_NAME);
  myToolWrapper=new LocalInspectionToolWrapper(new DefUseInspection());
  myView=ViewOfflineResultsAction.showOfflineView(getProject(),parse(),new InspectionProfileImpl("test"){
    @Override public boolean isToolEnabled(    final HighlightDisplayKey key,    PsiElement element){
      return Comparing.strEqual(key.toString(),DefUseInspectionBase.SHORT_NAME);
    }
    @Override @NotNull public InspectionToolWrapper[] getInspectionTools(    PsiElement element){
      return new InspectionToolWrapper[]{myToolWrapper};
    }
    @Override @NotNull public ModifiableModel getModifiableModel(){
      return new InspectionProfileImpl("test"){
        @Override @NotNull public InspectionToolWrapper[] getInspectionTools(        PsiElement element){
          return new InspectionToolWrapper[]{myToolWrapper};
        }
        @Override public boolean isToolEnabled(        final HighlightDisplayKey key,        PsiElement element){
          return Comparing.strEqual(key.toString(),DefUseInspectionBase.SHORT_NAME);
        }
      }
;
    }
  }
,null);
  myView.getGlobalInspectionContext().getTools().put(myToolWrapper.getShortName(),new ToolsImpl(myToolWrapper,myToolWrapper.getDefaultLevel(),true));
  myToolWrapper.initialize(myView.getGlobalInspectionContext());
}
