{
  if (logicalColumn <= startLogicalColumn)   return startOffset;
  if (logicalColumn >= endLogicalColumn)   return endOffset;
  int currentOffset=startOffset;
  int currentLogicalColumn=startLogicalColumn;
  int startFragment=0;
  if (offsetIndex != null) {
    int pos=Arrays.binarySearch(logicalColumnIndex == null ? offsetIndex : logicalColumnIndex,logicalColumn);
    if (pos >= 0)     return offsetIndex[pos];
    int beforeInsertPosition=-pos - 2;
    currentOffset=beforeInsertPosition < 0 ? startOffset : offsetIndex[beforeInsertPosition];
    currentLogicalColumn=beforeInsertPosition < 0 ? startLogicalColumn : logicalColumnIndex == null ? currentOffset : logicalColumnIndex[beforeInsertPosition];
    startFragment=INDEX_FREQUENCY * (beforeInsertPosition + 1);
  }
  for (int i=startFragment; i < fragments.size(); i++) {
    LineFragment fragment=fragments.get(i);
    int endLogicalColumn=currentLogicalColumn + fragment.getLogicalColumnCount(currentLogicalColumn);
    if (logicalColumn <= endLogicalColumn)     return currentOffset + fragment.logicalColumnToOffset(currentLogicalColumn,logicalColumn);
    currentOffset+=fragment.getLength();
    currentLogicalColumn=endLogicalColumn;
  }
  throw new IllegalStateException();
}
