{
  if (offset <= startOffset)   return startLogicalColumn;
  if (offset >= endOffset)   return endLogicalColumn;
  int currentOffset=startOffset;
  int currentLogicalColumn=startLogicalColumn;
  int startFragment=0;
  if (offsetIndex != null) {
    int pos=Arrays.binarySearch(offsetIndex,offset);
    if (pos >= 0)     return logicalColumnIndex == null ? offset : logicalColumnIndex[pos];
    int beforeInsertPosition=-pos - 2;
    currentOffset=beforeInsertPosition < 0 ? startOffset : offsetIndex[beforeInsertPosition];
    currentLogicalColumn=beforeInsertPosition < 0 ? startLogicalColumn : logicalColumnIndex == null ? currentOffset : logicalColumnIndex[beforeInsertPosition];
    startFragment=INDEX_FREQUENCY * (beforeInsertPosition + 1);
  }
  for (int i=startFragment; i < fragments.size(); i++) {
    LineFragment fragment=fragments.get(i);
    int endOffset=currentOffset + fragment.getLength();
    if (offset <= endOffset)     return fragment.offsetToLogicalColumn(currentLogicalColumn,offset - currentOffset);
    currentOffset=endOffset;
    currentLogicalColumn+=fragment.getLogicalColumnCount(currentLogicalColumn);
  }
  throw new IllegalStateException();
}
