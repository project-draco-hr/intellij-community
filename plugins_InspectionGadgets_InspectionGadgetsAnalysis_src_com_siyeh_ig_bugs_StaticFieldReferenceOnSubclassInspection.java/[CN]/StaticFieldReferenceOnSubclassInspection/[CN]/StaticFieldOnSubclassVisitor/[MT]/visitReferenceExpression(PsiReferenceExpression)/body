{
  super.visitReferenceExpression(expression);
  final PsiElement qualifier=expression.getQualifier();
  if (!(qualifier instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiElement referent=expression.resolve();
  if (!(referent instanceof PsiField)) {
    return;
  }
  final PsiField field=(PsiField)referent;
  if (!field.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  final PsiElement qualifierReferent=((PsiReference)qualifier).resolve();
  if (!(qualifierReferent instanceof PsiClass)) {
    return;
  }
  final PsiClass referencedClass=(PsiClass)qualifierReferent;
  final PsiClass declaringClass=field.getContainingClass();
  if (declaringClass == null) {
    return;
  }
  if (declaringClass.equals(referencedClass)) {
    return;
  }
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(expression.getProject()).getResolveHelper();
  if (!resolveHelper.isAccessible(declaringClass,expression,null)) {
    return;
  }
  final PsiElement identifier=expression.getReferenceNameElement();
  if (identifier == null) {
    return;
  }
  registerError(identifier,declaringClass,referencedClass);
}
