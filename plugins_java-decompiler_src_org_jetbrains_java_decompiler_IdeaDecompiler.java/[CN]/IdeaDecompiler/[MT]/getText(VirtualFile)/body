{
  if (!canHandle(file)) {
    return ClsFileImpl.decompile(file);
  }
  try {
    Map<String,VirtualFile> files=ContainerUtil.newLinkedHashMap();
    files.put(file.getPath(),file);
    String mask=file.getNameWithoutExtension() + "$";
    for (    VirtualFile child : file.getParent().getChildren()) {
      if (child.getNameWithoutExtension().startsWith(mask) && file.getFileType() == StdFileTypes.CLASS) {
        files.put(child.getPath(),child);
      }
    }
    MyByteCodeProvider provider=new MyByteCodeProvider(files);
    MyResultSaver saver=new MyResultSaver();
    IdeDecompiler decompiler=new IdeDecompiler(provider,saver,myLogger,myOptions);
    for (    String path : files.keySet()) {
      decompiler.addSpace(new File(path),true);
    }
    decompiler.decompileContext();
    return BANNER + saver.myResult;
  }
 catch (  Exception e) {
    Logger.getInstance(IdeaDecompiler.class).error(file.getPath(),e);
    return ClsFileImpl.decompile(file);
  }
}
