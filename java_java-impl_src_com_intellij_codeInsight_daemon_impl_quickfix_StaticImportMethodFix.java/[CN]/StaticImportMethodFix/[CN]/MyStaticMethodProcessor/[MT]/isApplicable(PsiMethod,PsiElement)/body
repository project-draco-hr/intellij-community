{
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(place.getProject()).getResolveHelper();
  final PsiExpressionList argumentList=((PsiMethodCallExpression)place).getArgumentList();
  PsiSubstitutor substitutorForMethod=resolveHelper.inferTypeArguments(method.getTypeParameters(),method.getParameterList().getParameters(),argumentList.getExpressions(),PsiSubstitutor.EMPTY,place.getParent(),DefaultParameterTypeInferencePolicy.INSTANCE);
  if (PsiUtil.isApplicable(method,substitutorForMethod,argumentList)) {
    final PsiType returnType=substitutorForMethod.substitute(method.getReturnType());
    final PsiType expectedType=getExpectedType();
    return expectedType == null || returnType == null || TypeConversionUtil.isAssignable(expectedType,returnType);
  }
  return false;
}
