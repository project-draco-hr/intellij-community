{
  if (myDocstringFormatComboBox.getSelectedItem() != myDocumentationSettings.getFormat()) {
    DaemonCodeAnalyzer.getInstance(myProject).restart();
  }
  if (analyzeDoctest.isSelected() != myDocumentationSettings.isAnalyzeDoctest()) {
    final List<VirtualFile> files=Lists.newArrayList();
    ProjectRootManager.getInstance(myProject).getFileIndex().iterateContent(new ContentIterator(){
      @Override public boolean processFile(      VirtualFile fileOrDir){
        if (!fileOrDir.isDirectory() && PythonFileType.INSTANCE.getDefaultExtension().equals(fileOrDir.getExtension())) {
          files.add(fileOrDir);
        }
        return true;
      }
    }
);
    FileContentUtil.reparseFiles(myProject,Lists.newArrayList(files),false);
  }
  myModel.apply();
  myDocumentationSettings.setFormat((DocStringFormat)myDocstringFormatComboBox.getSelectedItem());
  final ReSTService reSTService=ReSTService.getInstance(myModule);
  reSTService.setWorkdir(myWorkDir.getText());
  if (txtIsRst.isSelected() != reSTService.txtIsRst()) {
    reSTService.setTxtIsRst(txtIsRst.isSelected());
    reparseFiles(Collections.singletonList(PlainTextFileType.INSTANCE.getDefaultExtension()));
  }
  myDocumentationSettings.setAnalyzeDoctest(analyzeDoctest.isSelected());
  PyPackageRequirementsSettings.getInstance(myModule).setRequirementsPath(myRequirementsPathField.getText());
  DaemonCodeAnalyzer.getInstance(myProject).restart();
}
