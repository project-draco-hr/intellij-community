{
  final Project project=getProject();
  final Sdk sdk=createTempSdk(sdkHome,SdkCreationType.EMPTY_SDK);
  setProcessCanTerminate(false);
  PydevConsoleRunner consoleRunner=new PydevConsoleRunnerImpl(project,sdk,PyConsoleType.PYTHON,myFixture.getTempDirPath(),Maps.newHashMap(),PyConsoleOptions.getInstance(project).getPythonConsoleSettings(),new String[]{});
  before();
  myConsoleInitSemaphore=new Semaphore(0);
  consoleRunner.addConsoleListener(new PydevConsoleRunnerImpl.ConsoleListener(){
    @Override public void handleConsoleInitialized(    LanguageConsoleView consoleView){
      myConsoleInitSemaphore.release();
    }
  }
);
  consoleRunner.run();
  waitFor(myConsoleInitSemaphore);
  myCommandSemaphore=new Semaphore(1);
  myConsoleView=consoleRunner.getConsoleView();
  myProcessHandler=consoleRunner.getProcessHandler();
  myExecuteHandler=consoleRunner.getConsoleExecuteActionHandler();
  myCommunication=consoleRunner.getPydevConsoleCommunication();
  myCommunication.addCommunicationListener(new ConsoleCommunicationListener(){
    @Override public void commandExecuted(    boolean more){
      myCommandSemaphore.release();
    }
    @Override public void inputRequested(){
    }
  }
);
  myProcessHandler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    ProcessEvent event){
      if (event.getExitCode() != 0 && !myProcessCanTerminate) {
        Assert.fail("Process terminated unexpectedly\n" + output());
      }
    }
  }
);
  OutputPrinter myOutputPrinter=null;
  if (shouldPrintOutput) {
    myOutputPrinter=new OutputPrinter();
    myOutputPrinter.start();
  }
  waitForOutput("PyDev console");
  try {
    testing();
    after();
  }
  finally {
    setProcessCanTerminate(true);
    if (myOutputPrinter != null) {
      myOutputPrinter.stop();
    }
    disposeConsole();
  }
}
