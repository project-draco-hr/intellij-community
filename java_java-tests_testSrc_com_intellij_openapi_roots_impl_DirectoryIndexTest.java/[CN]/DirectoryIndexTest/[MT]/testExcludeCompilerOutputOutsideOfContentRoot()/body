{
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  assertTrue(fileIndex.isIgnored(myOutputDir));
  assertTrue(fileIndex.isIgnored(myModule1OutputDir));
  assertFalse(fileIndex.isIgnored(myOutputDir.getParent()));
  assertExcludedFromProject(myOutputDir);
  assertExcludedFromProject(myModule1OutputDir);
  String moduleOutputUrl=myModule1OutputDir.getUrl();
  myOutputDir.delete(this);
  PsiTestUtil.setCompilerOutputPath(myModule,moduleOutputUrl,false);
  myOutputDir=myRootVFile.createChildDirectory(this,"out");
  myModule1OutputDir=myOutputDir.createChildDirectory(this,"module1");
  assertExcludedFromProject(myOutputDir);
  assertExcludedFromProject(myModule1OutputDir);
  assertTrue(fileIndex.isIgnored(myModule1OutputDir));
  PsiTestUtil.setCompilerOutputPath(myModule,moduleOutputUrl,true);
  PsiTestUtil.setCompilerOutputPath(myModule2,moduleOutputUrl,false);
  PsiTestUtil.setCompilerOutputPath(myModule2,moduleOutputUrl,true);
  PsiTestUtil.setCompilerOutputPath(myModule3,moduleOutputUrl,false);
  PsiTestUtil.setCompilerOutputPath(myModule3,moduleOutputUrl,true);
  assertExcludedFromProject(myOutputDir);
  VirtualFile projectOutputUnderContent=myModule1Dir.createChildDirectory(this,"projectOutputUnderContent");
  getCompilerProjectExtension().setCompilerOutputUrl(projectOutputUnderContent.getUrl());
  fireRootsChanged();
  assertNotExcluded(myOutputDir);
  assertExcluded(projectOutputUnderContent,myModule);
  projectOutputUnderContent.delete(this);
  projectOutputUnderContent=myModule1Dir.createChildDirectory(this,"projectOutputUnderContent");
  assertNotExcluded(myOutputDir);
  assertExcluded(projectOutputUnderContent,myModule);
}
