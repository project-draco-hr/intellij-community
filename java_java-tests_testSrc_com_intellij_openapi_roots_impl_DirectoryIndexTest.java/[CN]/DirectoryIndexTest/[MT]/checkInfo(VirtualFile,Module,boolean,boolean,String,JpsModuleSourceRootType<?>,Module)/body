{
  DirectoryInfo info=assertInProject(file);
  assertEquals(module,info.getModule());
  if (moduleSourceRootType != null) {
    assertTrue("isInModuleSource",info.isInModuleSource());
    assertEquals(moduleSourceRootType,myIndex.getSourceRootType(info));
  }
 else {
    assertFalse("isInModuleSource",info.isInModuleSource());
  }
  assertEquals(isInLibrary,info.hasLibraryClassRoot());
  assertEquals(isInLibrarySource,info.isInLibrarySource());
  if (file.isDirectory()) {
    assertEquals(packageName,myFileIndex.getPackageNameByDirectory(file));
  }
  assertEquals(Arrays.toString(toArray(myIndex.getOrderEntries(info))),modulesOfOrderEntries.length,toArray(myIndex.getOrderEntries(info)).length);
  for (  Module aModule : modulesOfOrderEntries) {
    OrderEntry found=ModuleFileIndexImpl.findOrderEntryWithOwnerModule(aModule,myIndex.getOrderEntries(info));
    assertNotNull("not found: " + aModule + " in "+ Arrays.toString(toArray(myIndex.getOrderEntries(info))),found);
  }
}
