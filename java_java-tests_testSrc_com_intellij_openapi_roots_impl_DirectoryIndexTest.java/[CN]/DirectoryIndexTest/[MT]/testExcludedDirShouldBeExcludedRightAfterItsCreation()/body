{
  VirtualFile excluded=myModule1Dir.createChildDirectory(this,"excluded");
  VirtualFile projectOutput=myModule1Dir.createChildDirectory(this,"projectOutput");
  VirtualFile module2Output=myModule1Dir.createChildDirectory(this,"module2Output");
  VirtualFile module2TestOutput=myModule2Dir.createChildDirectory(this,"module2TestOutput");
  checkInProject(excluded);
  checkInProject(projectOutput);
  checkInProject(module2Output);
  checkInProject(module2TestOutput);
  getCompilerProjectExtension().setCompilerOutputUrl(projectOutput.getUrl());
  PsiTestUtil.addExcludedRoot(myModule,excluded);
  PsiTestUtil.setCompilerOutputPath(myModule2,module2Output.getUrl(),false);
  PsiTestUtil.setCompilerOutputPath(myModule2,module2TestOutput.getUrl(),true);
  PsiTestUtil.setExcludeCompileOutput(myModule2,true);
  checkExcluded(excluded,myModule);
  checkExcluded(projectOutput,myModule);
  checkExcluded(module2Output,myModule);
  checkExcluded(module2TestOutput,myModule2);
  assertFalse(myIndex.isProjectExcludeRoot(excluded));
  assertFalse(myIndex.isProjectExcludeRoot(projectOutput));
  assertFalse(myIndex.isProjectExcludeRoot(module2Output));
  assertFalse(myIndex.isProjectExcludeRoot(module2TestOutput));
  excluded.delete(this);
  projectOutput.delete(this);
  module2Output.delete(this);
  module2TestOutput.delete(this);
  final List<VirtualFile> created=new ArrayList<VirtualFile>();
  VirtualFileListener l=new VirtualFileAdapter(){
    @Override public void fileCreated(    @NotNull VirtualFileEvent e){
      VirtualFile file=e.getFile();
      String fileName=e.getFileName();
      checkExcluded(file,fileName.contains("module2TestOutput") ? myModule2 : myModule);
      created.add(file);
      if (fileName.equals("projectOutput")) {
        assertFalse(myIndex.isProjectExcludeRoot(file));
      }
      if (fileName.equals("module2Output")) {
        assertFalse(myIndex.isProjectExcludeRoot(file));
      }
      if (fileName.equals("module2TestOutput")) {
        assertFalse(myIndex.isProjectExcludeRoot(file));
      }
    }
  }
;
  VirtualFileManager.getInstance().addVirtualFileListener(l,getTestRootDisposable());
  excluded=myModule1Dir.createChildDirectory(this,excluded.getName());
  assertFalse(myIndex.isProjectExcludeRoot(excluded));
  projectOutput=myModule1Dir.createChildDirectory(this,projectOutput.getName());
  assertFalse(myIndex.isProjectExcludeRoot(projectOutput));
  module2Output=myModule1Dir.createChildDirectory(this,module2Output.getName());
  assertFalse(myIndex.isProjectExcludeRoot(module2Output));
  module2TestOutput=myModule2Dir.createChildDirectory(this,module2TestOutput.getName());
  assertFalse(myIndex.isProjectExcludeRoot(module2TestOutput));
  checkExcluded(excluded,myModule);
  checkExcluded(projectOutput,myModule);
  checkExcluded(module2Output,myModule);
  checkExcluded(module2TestOutput,myModule2);
  assertEquals(created.toString(),4,created.size());
  assertFalse(myIndex.isProjectExcludeRoot(excluded));
  assertFalse(myIndex.isProjectExcludeRoot(projectOutput));
  assertFalse(myIndex.isProjectExcludeRoot(module2Output));
  assertFalse(myIndex.isProjectExcludeRoot(module2TestOutput));
}
