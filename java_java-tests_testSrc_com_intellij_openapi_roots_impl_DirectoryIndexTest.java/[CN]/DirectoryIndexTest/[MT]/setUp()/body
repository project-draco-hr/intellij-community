{
  super.setUp();
  final File root=createTempDirectory();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      myRootVFile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(root);
      assertNotNull(myRootVFile);
      myFileLibDir=createChildDirectory(myRootVFile,"lib");
      myFileLibSrc=createChildData(myFileLibDir,"file.src");
      myFileLibCls=createChildData(myFileLibDir,"file.cls");
      myModule1Dir=createChildDirectory(myRootVFile,"module1");
      mySrcDir1=createChildDirectory(myModule1Dir,"src1");
      myPack1Dir=createChildDirectory(mySrcDir1,"pack1");
      myTestSrc1=createChildDirectory(mySrcDir1,"testSrc");
      myPack2Dir=createChildDirectory(myTestSrc1,"pack2");
      myResDir=createChildDirectory(myModule1Dir,"res");
      myTestResDir=createChildDirectory(myModule1Dir,"testRes");
      myLibDir=createChildDirectory(myModule1Dir,"lib");
      myLibSrcDir=createChildDirectory(myLibDir,"src");
      myExcludedLibSrcDir=createChildDirectory(myLibSrcDir,"exc");
      myLibClsDir=createChildDirectory(myLibDir,"cls");
      myExcludedLibClsDir=createChildDirectory(myLibClsDir,"exc");
      myModule2Dir=createChildDirectory(myModule1Dir,"module2");
      mySrcDir2=createChildDirectory(myModule2Dir,"src2");
      myCvsDir=createChildDirectory(mySrcDir2,"CVS");
      myExcludeDir=createChildDirectory(mySrcDir2,"excluded");
      myModule3Dir=createChildDirectory(myRootVFile,"module3");
      myOutputDir=createChildDirectory(myRootVFile,"out");
      myModule1OutputDir=createChildDirectory(myOutputDir,"module1");
      getCompilerProjectExtension().setCompilerOutputUrl(myOutputDir.getUrl());
      ModuleManager moduleManager=ModuleManager.getInstance(myProject);
{
        ModuleRootModificationUtil.setModuleSdk(myModule,null);
        PsiTestUtil.addContentRoot(myModule,myModule1Dir);
        PsiTestUtil.addSourceRoot(myModule,mySrcDir1);
        PsiTestUtil.addSourceRoot(myModule,myTestSrc1,true);
        PsiTestUtil.addSourceRoot(myModule,myResDir,JavaResourceRootType.RESOURCE);
        PsiTestUtil.addSourceRoot(myModule,myTestResDir,JavaResourceRootType.TEST_RESOURCE);
        ModuleRootModificationUtil.addModuleLibrary(myModule,"lib.js",singletonList(myFileLibCls.getUrl()),singletonList(myFileLibSrc.getUrl()));
        PsiTestUtil.addExcludedRoot(myModule,myExcludedLibClsDir);
        PsiTestUtil.addExcludedRoot(myModule,myExcludedLibSrcDir);
      }
{
        VirtualFile moduleFile=createChildData(myModule2Dir,"module2.iml");
        myModule2=moduleManager.newModule(moduleFile.getPath(),StdModuleTypes.JAVA.getId());
        PsiTestUtil.addContentRoot(myModule2,myModule2Dir);
        PsiTestUtil.addSourceRoot(myModule2,mySrcDir2);
        PsiTestUtil.addExcludedRoot(myModule2,myExcludeDir);
        ModuleRootModificationUtil.addModuleLibrary(myModule2,"lib",singletonList(myLibClsDir.getUrl()),singletonList(myLibSrcDir.getUrl()),Arrays.asList(myExcludedLibClsDir.getUrl(),myExcludedLibSrcDir.getUrl()),DependencyScope.COMPILE,true);
      }
{
        VirtualFile moduleFile=createChildData(myModule3Dir,"module3.iml");
        myModule3=moduleManager.newModule(moduleFile.getPath(),StdModuleTypes.JAVA.getId());
        PsiTestUtil.addContentRoot(myModule3,myModule3Dir);
        ModuleRootModificationUtil.addDependency(myModule3,myModule2);
      }
    }
  }
);
  myIndex=(DirectoryIndexImpl)DirectoryIndex.getInstance(myProject);
  myFileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  VirtualFileManager.getInstance().syncRefresh();
}
