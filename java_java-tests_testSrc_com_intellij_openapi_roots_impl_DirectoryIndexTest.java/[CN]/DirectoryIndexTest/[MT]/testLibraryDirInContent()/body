{
  ModuleRootModificationUtil.addModuleLibrary(myModule,myModule1Dir.getUrl());
  myIndex.checkConsistency();
  checkInfo(myModule1Dir,myModule,true,false,"",null,myModule);
  checkInfo(mySrcDir1,myModule,true,false,"",JavaSourceRootType.SOURCE,myModule);
  checkInfo(myModule2Dir,myModule2,true,false,"module2",null,myModule);
  checkInfo(mySrcDir2,myModule2,true,false,"",JavaSourceRootType.SOURCE,myModule2,myModule3);
  checkInfo(myExcludeDir,null,true,false,"module2.src2.excluded",null,myModule3);
  checkInfo(myLibDir,myModule,true,false,"lib",null,myModule);
  checkInfo(myLibClsDir,myModule,true,false,"",null,myModule2,myModule3);
  checkInfo(myLibSrcDir,myModule,true,true,"",null,myModule,myModule3);
  checkInfo(myResDir,myModule,true,false,"",JavaResourceRootType.RESOURCE,myModule);
  assertInstanceOf(assertOneElement(myIndex.getOrderEntries(assertInProject(myResDir))),ModuleSourceOrderEntry.class);
  checkInfo(myExcludedLibSrcDir,null,true,false,"lib.src.exc",null,myModule3,myModule);
  checkInfo(myExcludedLibClsDir,null,true,false,"lib.cls.exc",null,myModule3);
  checkPackage("lib.src.exc",true,myExcludedLibSrcDir);
  checkPackage("lib.cls.exc",true,myExcludedLibClsDir);
  checkPackage("lib.src",true);
  checkPackage("lib.cls",true);
  checkPackage("exc",false);
  checkPackage("exc",true);
}
