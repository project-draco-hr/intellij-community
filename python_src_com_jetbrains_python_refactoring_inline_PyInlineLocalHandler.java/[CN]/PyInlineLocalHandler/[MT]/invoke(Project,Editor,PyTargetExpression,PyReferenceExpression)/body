{
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,local))   return;
  final HighlightManager highlightManager=HighlightManager.getInstance(project);
  final TextAttributes writeAttributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.WRITE_SEARCH_RESULT_ATTRIBUTES);
  final String localName=local.getName();
  final ScopeOwner containerBlock=getContext(local);
  LOG.assertTrue(containerBlock != null);
  final Pair<PyStatement,Boolean> defPair=getAssignmentToInline(containerBlock,refExpr,local,project);
  final PyStatement def=defPair.first;
  if (def == null || getValue(def) == null) {
    final String key=defPair.second ? "variable.has.no.dominating.definition" : "variable.has.no.initializer";
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message(key,localName));
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HELP_ID);
    return;
  }
  if (def instanceof PyAssignmentStatement && ((PyAssignmentStatement)def).getTargets().length > 1) {
    highlightManager.addOccurrenceHighlights(editor,new PsiElement[]{def},writeAttributes,true,null);
    String message=RefactoringBundle.getCannotRefactorMessage(PyBundle.message("refactoring.inline.local.multiassignment",localName));
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HELP_ID);
    return;
  }
  final PsiElement[] refsToInline=PyDefUseUtil.getPostRefs(containerBlock,local,getObject(def));
  if (refsToInline.length == 0) {
    String message=RefactoringBundle.message("variable.is.never.used",localName);
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HELP_ID);
    return;
  }
  final TextAttributes attributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES);
  if (editor != null && !ApplicationManager.getApplication().isUnitTestMode()) {
    highlightManager.addOccurrenceHighlights(editor,refsToInline,attributes,true,null);
    int occurrencesCount=refsToInline.length;
    String occurencesString=RefactoringBundle.message("occurences.string",occurrencesCount);
    final String promptKey="inline.local.variable.prompt";
    final String question=RefactoringBundle.message(promptKey,localName) + " " + occurencesString;
    RefactoringMessageDialog dialog=new RefactoringMessageDialog(REFACTORING_NAME,question,HELP_ID,"OptionPane.questionIcon",true,project);
    dialog.show();
    if (!dialog.isOK()) {
      WindowManager.getInstance().getStatusBar(project).setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
      return;
    }
  }
  PsiFile workingFile=local.getContainingFile();
  for (  PsiElement ref : refsToInline) {
    final PsiFile otherFile=ref.getContainingFile();
    if (!otherFile.equals(workingFile)) {
      String message=RefactoringBundle.message("variable.is.referenced.in.multiple.files",localName);
      CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HELP_ID);
      return;
    }
  }
  for (  final PsiElement ref : refsToInline) {
    final List<PsiElement> elems=new ArrayList<PsiElement>();
    final List<ReadWriteInstruction> latestDefs=PyDefUseUtil.getLatestDefs(containerBlock,local.getName(),ref);
    for (    ReadWriteInstruction i : latestDefs) {
      elems.add(i.getElement());
    }
    final PsiElement[] defs=elems.toArray(new PsiElement[elems.size()]);
    boolean isSameDefinition=true;
    for (    PsiElement otherDef : defs) {
      isSameDefinition&=isSameDefinition(def,otherDef);
    }
    if (!isSameDefinition) {
      if (editor != null) {
        highlightManager.addOccurrenceHighlights(editor,defs,writeAttributes,true,null);
        highlightManager.addOccurrenceHighlights(editor,new PsiElement[]{ref},attributes,true,null);
        String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("variable.is.accessed.for.writing.and.used.with.inlined",localName));
        CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HELP_ID);
      }
      WindowManager.getInstance().getStatusBar(project).setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
      return;
    }
  }
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          PsiElement[] exprs=new PsiElement[refsToInline.length];
          final PyExpression value=prepareValue(def,localName,project);
          final PyExpression withParent=PyElementGenerator.getInstance(project).createExpressionFromText("(" + value.getText() + ")");
          for (int i=0, refsToInlineLength=refsToInline.length; i < refsToInlineLength; i++) {
            PsiElement element=refsToInline[i];
            if (PyReplaceExpressionUtil.isNeedParenthesis((PyExpression)element,value)) {
              exprs[i]=element.replace(withParent);
            }
 else {
              exprs[i]=element.replace(value);
            }
          }
          final PsiElement next=def.getNextSibling();
          if (next instanceof PsiWhiteSpace) {
            PyPsiUtils.removeElements(next);
          }
          PyPsiUtils.removeElements(def);
          if (editor != null && !ApplicationManager.getApplication().isUnitTestMode()) {
            highlightManager.addOccurrenceHighlights(editor,exprs,attributes,true,null);
            WindowManager.getInstance().getStatusBar(project).setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
          }
        }
      }
);
    }
  }
,RefactoringBundle.message("inline.command",localName),null);
}
