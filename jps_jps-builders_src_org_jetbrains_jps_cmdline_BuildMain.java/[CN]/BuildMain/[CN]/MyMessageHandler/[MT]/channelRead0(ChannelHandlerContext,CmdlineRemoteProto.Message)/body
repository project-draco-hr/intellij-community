{
  final CmdlineRemoteProto.Message.Type type=message.getType();
  final Channel channel=context.channel();
  if (type == CmdlineRemoteProto.Message.Type.CONTROLLER_MESSAGE) {
    final CmdlineRemoteProto.Message.ControllerMessage controllerMessage=message.getControllerMessage();
switch (controllerMessage.getType()) {
case BUILD_PARAMETERS:
{
        if (mySession == null) {
          final CmdlineRemoteProto.Message.ControllerMessage.FSEvent delta=controllerMessage.hasFsEvent() ? controllerMessage.getFsEvent() : null;
          final BuildSession session=new BuildSession(mySessionId,channel,controllerMessage.getParamsMessage(),delta,ourPreloadedData);
          mySession=session;
          SharedThreadPool.getInstance().executeOnPooledThread(new Runnable(){
            @Override public void run(){
              try {
                try {
                  session.run();
                }
  finally {
                  channel.close();
                }
              }
  finally {
                System.exit(0);
              }
            }
          }
);
        }
 else {
          LOG.info("Cannot start another build session because one is already running");
        }
        return;
      }
case FS_EVENT:
{
      final BuildSession session=mySession;
      if (session != null) {
        session.processFSEvent(controllerMessage.getFsEvent());
      }
      return;
    }
case CONSTANT_SEARCH_RESULT:
{
    final BuildSession session=mySession;
    if (session != null) {
      session.processConstantSearchResult(controllerMessage.getConstantSearchResult());
    }
    return;
  }
case CANCEL_BUILD_COMMAND:
{
  final BuildSession session=mySession;
  if (session != null) {
    session.cancel();
  }
 else {
    try {
      LOG.info("Build canceled, but no build session is running. Exiting.");
      Thread.interrupted();
      channel.close();
      final PreloadedData preloaded=ourPreloadedData;
      final ProjectDescriptor pd=preloaded != null ? preloaded.getProjectDescriptor() : null;
      if (pd != null) {
        pd.release();
      }
    }
  finally {
      System.exit(0);
    }
  }
  return;
}
}
}
channel.writeAndFlush(CmdlineProtoUtil.toMessage(mySessionId,CmdlineProtoUtil.createFailure("Unsupported message type: " + type.name(),null)));
}
