{
  final long processStart=System.currentTimeMillis();
  System.out.println("Build process started. Classpath: " + System.getProperty("java.class.path"));
  final String host=args[HOST_ARG];
  final int port=Integer.parseInt(args[PORT_ARG]);
  final UUID sessionId=UUID.fromString(args[SESSION_ID_ARG]);
  @SuppressWarnings("ConstantConditions") final File systemDir=new File(FileUtil.toCanonicalPath(args[SYSTEM_DIR_ARG]));
  Utils.setSystemRoot(systemDir);
  for (int attempt=0; attempt < 3; attempt++) {
    try {
      ourEventLoopGroup=new NioEventLoopGroup(1,SharedThreadPool.getInstance());
      break;
    }
 catch (    IllegalStateException e) {
      if (attempt == 2) {
        printErrorAndExit(host,port,e);
        return;
      }
 else {
        LOG.warn("Cannot create event loop, attempt #" + attempt,e);
        try {
          Thread.sleep(10 * (attempt + 1));
        }
 catch (        InterruptedException ignored) {
        }
      }
    }
  }
  final Bootstrap bootstrap=new Bootstrap().group(ourEventLoopGroup).channel(NioSocketChannel.class).handler(new ChannelInitializer(){
    @Override protected void initChannel(    Channel channel) throws Exception {
      channel.pipeline().addLast(new ProtobufVarint32FrameDecoder(),new ProtobufDecoder(CmdlineRemoteProto.Message.getDefaultInstance()),new ProtobufVarint32LengthFieldPrepender(),new ProtobufEncoder(),new MyMessageHandler(sessionId));
    }
  }
).option(ChannelOption.TCP_NODELAY,true).option(ChannelOption.SO_KEEPALIVE,true);
  final ChannelFuture future=bootstrap.connect(new InetSocketAddress(host,port)).awaitUninterruptibly();
  final boolean success=future.isSuccess();
  if (success) {
    final String projectPathToPreload=System.getProperty(PRELOAD_PROJECT_PATH,null);
    final String globalsPathToPreload=System.getProperty(PRELOAD_CONFIG_PATH,null);
    if (projectPathToPreload != null && globalsPathToPreload != null) {
      final PreloadedData data=new PreloadedData();
      ourPreloadedData=data;
      try {
        FileSystemUtil.getAttributes(projectPathToPreload);
        final BuildRunner runner=new BuildRunner(new JpsModelLoaderImpl(projectPathToPreload,globalsPathToPreload,null));
        data.setRunner(runner);
        final File dataStorageRoot=Utils.getDataStorageRoot(projectPathToPreload);
        final BuildFSState fsState=new BuildFSState(false);
        final ProjectDescriptor pd=runner.load(new MessageHandler(){
          @Override public void processMessage(          BuildMessage msg){
            data.addMessage(msg);
          }
        }
,dataStorageRoot,fsState);
        data.setProjectDescriptor(pd);
        try {
          final File fsStateFile=new File(dataStorageRoot,BuildSession.FS_STATE_FILE);
          final DataInputStream in=new DataInputStream(new BufferedInputStream(new FileInputStream(fsStateFile)));
          try {
            final int version=in.readInt();
            if (version == FSState.VERSION) {
              final long savedOrdinal=in.readLong();
              in.readBoolean();
              fsState.load(in,pd.getModel(),pd.getBuildRootIndex());
              data.setFsEventOrdinal(savedOrdinal);
            }
          }
  finally {
            in.close();
          }
        }
 catch (        FileNotFoundException ignored) {
        }
catch (        IOException e) {
          LOG.info("Error pre-loading FS state",e);
          fsState.clearAll();
        }
        final BuildTargetsState targetsState=pd.getTargetsState();
        for (        BuildTarget<?> target : pd.getBuildTargetIndex().getAllTargets()) {
          targetsState.getTargetConfiguration(target);
        }
        BuilderRegistry.getInstance();
        LOG.info("Pre-loaded process ready in " + (System.currentTimeMillis() - processStart) + " ms");
      }
 catch (      Throwable e) {
        LOG.info("Failed to pre-load project " + projectPathToPreload,e);
      }
    }
 else     if (projectPathToPreload != null || globalsPathToPreload != null) {
      LOG.info("Skipping project pre-loading step: both paths to project configuration files and path to global settings must be specified");
    }
    future.channel().writeAndFlush(CmdlineProtoUtil.toMessage(sessionId,CmdlineProtoUtil.createParamRequest()));
  }
 else {
    printErrorAndExit(host,port,future.cause());
  }
}
