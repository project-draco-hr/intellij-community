{
  System.out.println("Build process started. Classpath: " + System.getProperty("java.class.path"));
  final String host=args[HOST_ARG];
  final int port=Integer.parseInt(args[PORT_ARG]);
  final UUID sessionId=UUID.fromString(args[SESSION_ID_ARG]);
  @SuppressWarnings("ConstantConditions") final File systemDir=new File(FileUtil.toCanonicalPath(args[SYSTEM_DIR_ARG]));
  Utils.setSystemRoot(systemDir);
  for (int attempt=0; attempt < 3; attempt++) {
    try {
      ourEventLoopGroup=new NioEventLoopGroup(1,SharedThreadPool.getInstance());
      break;
    }
 catch (    IllegalStateException e) {
      if (attempt == 2) {
        printErrorAndExit(host,port,e);
        return;
      }
 else {
        LOG.warn("Cannot create event loop, attempt #" + attempt,e);
        try {
          Thread.sleep(10 * (attempt + 1));
        }
 catch (        InterruptedException ignored) {
        }
      }
    }
  }
  final Bootstrap bootstrap=new Bootstrap().group(ourEventLoopGroup).channel(NioSocketChannel.class).handler(new ChannelInitializer(){
    @Override protected void initChannel(    Channel channel) throws Exception {
      channel.pipeline().addLast(new ProtobufVarint32FrameDecoder(),new ProtobufDecoder(CmdlineRemoteProto.Message.getDefaultInstance()),new ProtobufVarint32LengthFieldPrepender(),new ProtobufEncoder(),new MyMessageHandler(sessionId));
    }
  }
).option(ChannelOption.TCP_NODELAY,true).option(ChannelOption.SO_KEEPALIVE,true);
  final ChannelFuture future=bootstrap.connect(new InetSocketAddress(host,port)).awaitUninterruptibly();
  final boolean success=future.isSuccess();
  if (success) {
    future.channel().writeAndFlush(CmdlineProtoUtil.toMessage(sessionId,CmdlineProtoUtil.createParamRequest()));
  }
 else {
    printErrorAndExit(host,port,future.cause());
  }
}
