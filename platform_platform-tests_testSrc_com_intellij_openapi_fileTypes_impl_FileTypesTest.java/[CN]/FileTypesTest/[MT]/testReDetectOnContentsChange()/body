{
  FileType fileType=FileTypeRegistry.getInstance().getFileTypeByFileName("x" + ModuleFileType.DOT_DEFAULT_EXTENSION);
  assertTrue(fileType.toString(),fileType instanceof ModuleFileType);
  fileType=FileTypeRegistry.getInstance().getFileTypeByFileName("x" + ProjectFileType.DOT_DEFAULT_EXTENSION);
  assertTrue(fileType.toString(),fileType instanceof ProjectFileType);
  FileType module=FileTypeRegistry.getInstance().findFileTypeByName("IDEA_MODULE");
  assertNotNull(module);
  assertFalse(module.equals(PlainTextFileType.INSTANCE));
  FileType project=FileTypeRegistry.getInstance().findFileTypeByName("IDEA_PROJECT");
  assertNotNull(project);
  assertFalse(project.equals(PlainTextFileType.INSTANCE));
  final Set<VirtualFile> detectorCalled=new ConcurrentHashSet<VirtualFile>();
  FileTypeRegistry.FileTypeDetector detector=new FileTypeRegistry.FileTypeDetector(){
    @Nullable @Override public FileType detect(    @NotNull VirtualFile file,    @NotNull ByteSequence firstBytes,    @Nullable CharSequence firstCharsIfText){
      detectorCalled.add(file);
      String text=firstCharsIfText.toString();
      if (text.startsWith("TYPE:"))       return FileTypeRegistry.getInstance().findFileTypeByName(StringUtil.trimStart(text,"TYPE:"));
      return null;
    }
    @Override public int getVersion(){
      return 0;
    }
  }
;
  Extensions.getRootArea().getExtensionPoint(FileTypeRegistry.FileTypeDetector.EP_NAME).registerExtension(detector);
  try {
    File d=createTempDirectory();
    File f=new File(d,"xx.asfdasdfas");
    FileUtil.writeToFile(f,"akjdhfksdjgf");
    VirtualFile vFile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(f);
    ((NewVirtualFile)vFile).markDirty();
    vFile.refresh(false,false);
    UIUtil.dispatchAllInvocationEvents();
    myFileTypeManager.drainReDetectQueue();
    UIUtil.dispatchAllInvocationEvents();
    assertTrue(vFile.getFileType().toString(),vFile.getFileType() instanceof PlainTextFileType);
    assertTrue(detectorCalled.contains(vFile));
    detectorCalled.clear();
    VfsUtil.saveText(vFile,"TYPE:IDEA_MODULE");
    PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
    UIUtil.dispatchAllInvocationEvents();
    myFileTypeManager.drainReDetectQueue();
    UIUtil.dispatchAllInvocationEvents();
    assertTrue(detectorCalled.contains(vFile));
    detectorCalled.clear();
    assertTrue(vFile.getFileType().toString(),vFile.getFileType() instanceof ModuleFileType);
    VfsUtil.saveText(vFile,"TYPE:IDEA_PROJECT");
    PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
    UIUtil.dispatchAllInvocationEvents();
    myFileTypeManager.drainReDetectQueue();
    UIUtil.dispatchAllInvocationEvents();
    assertTrue(detectorCalled.contains(vFile));
    detectorCalled.clear();
    assertTrue(vFile.getFileType().toString(),vFile.getFileType() instanceof ProjectFileType);
  }
  finally {
    Extensions.getRootArea().getExtensionPoint(FileTypeRegistry.FileTypeDetector.EP_NAME).unregisterExtension(detector);
  }
}
