{
  final FileType typeFromPlugin=new FileType(){
    @NotNull @Override public String getName(){
      return "Foo files";
    }
    @NotNull @Override public String getDescription(){
      return "";
    }
    @NotNull @Override public String getDefaultExtension(){
      return "fromPlugin";
    }
    @Nullable @Override public Icon getIcon(){
      return null;
    }
    @Override public boolean isBinary(){
      return false;
    }
    @Override public boolean isReadOnly(){
      return false;
    }
    @Nullable @Override public String getCharset(    @NotNull VirtualFile file,    @NotNull byte[] content){
      return null;
    }
  }
;
  FileTypeFactory factory=new FileTypeFactory(){
    @Override public void createFileTypes(    @NotNull FileTypeConsumer consumer){
      consumer.consume(typeFromPlugin);
    }
  }
;
  Element element=myFileTypeManager.getState();
  try {
    myFileTypeManager.clearForTests();
    Extensions.getRootArea().getExtensionPoint(FileTypeFactory.FILE_TYPE_FACTORY_EP).registerExtension(factory);
    myFileTypeManager.initStandardFileTypes();
    myFileTypeManager.loadState(element);
    myFileTypeManager.initComponent();
    myFileTypeManager.associatePattern(typeFromPlugin,"*.foo");
    element=myFileTypeManager.getState();
    log(JDOMUtil.writeElement(element));
    Extensions.getRootArea().getExtensionPoint(FileTypeFactory.FILE_TYPE_FACTORY_EP).unregisterExtension(factory);
    myFileTypeManager.clearForTests();
    myFileTypeManager.initStandardFileTypes();
    myFileTypeManager.loadState(element);
    myFileTypeManager.initComponent();
    element=myFileTypeManager.getState();
    log(JDOMUtil.writeElement(element));
    Extensions.getRootArea().getExtensionPoint(FileTypeFactory.FILE_TYPE_FACTORY_EP).registerExtension(factory);
    myFileTypeManager.clearForTests();
    myFileTypeManager.initStandardFileTypes();
    myFileTypeManager.loadState(element);
    myFileTypeManager.initComponent();
    element=myFileTypeManager.getState();
    log(JDOMUtil.writeElement(element));
    assertEquals(typeFromPlugin,myFileTypeManager.getFileTypeByFileName("foo.foo"));
  }
  finally {
    Extensions.getRootArea().getExtensionPoint(FileTypeFactory.FILE_TYPE_FACTORY_EP).unregisterExtension(factory);
  }
}
