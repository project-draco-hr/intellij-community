{
  if (module == null) {
    return Collections.emptySet();
  }
  final Set<VirtualFile> classFiles=new HashSet<VirtualFile>();
  final VirtualFile outputpath=CompilerModuleExtension.getInstance(module).getCompilerOutputPath();
  final VirtualFile testOutputpath=CompilerModuleExtension.getInstance(module).getCompilerOutputPathForTests();
  for (  JavaCoverageEngineExtension extension : Extensions.getExtensions(JavaCoverageEngineExtension.EP_NAME)) {
    if (extension.collectOutputFiles(srcFile,outputpath,testOutputpath,suite,classFiles))     return classFiles;
  }
  final String packageFQName=getPackageName(srcFile);
  final String packageVmName=packageFQName.replace('.','/');
  final List<VirtualFile> children=new ArrayList<VirtualFile>();
  final VirtualFile vDir=packageVmName.length() > 0 && outputpath != null ? outputpath.findFileByRelativePath(packageVmName) : outputpath;
  if (vDir != null) {
    Collections.addAll(children,vDir.getChildren());
  }
  if (suite.isTrackTestFolders()) {
    final VirtualFile testDir=packageVmName.length() > 0 && testOutputpath != null ? testOutputpath.findFileByRelativePath(packageVmName) : testOutputpath;
    if (testDir != null) {
      Collections.addAll(children,testDir.getChildren());
    }
  }
  final PsiClass[] classes=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass[]>(){
    public PsiClass[] compute(){
      return ((PsiClassOwner)srcFile).getClasses();
    }
  }
);
  for (  final PsiClass psiClass : classes) {
    final String className=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
      public String compute(){
        return psiClass.getName();
      }
    }
);
    for (    VirtualFile child : children) {
      if (child.getFileType().equals(StdFileTypes.CLASS)) {
        final String childName=child.getNameWithoutExtension();
        if (childName.equals(className) || childName.startsWith(className) && childName.charAt(className.length()) == '$') {
          classFiles.add(child);
        }
      }
    }
  }
  return classFiles;
}
