{
  DataNode<ModuleData> moduleNode;
  final String taskName;
  if (StringUtil.startsWith(taskPath,":")) {
    final int i=taskPath.lastIndexOf(':');
    String path=taskPath.substring(0,i);
    moduleNode=findModuleById(projectNode,path);
    if (moduleNode == null || !FileUtil.isAncestor(moduleNode.getData().getLinkedExternalProjectPath(),modulePath,false)) {
      moduleNode=findModule(projectNode,modulePath);
    }
    taskName=(i + 1) <= taskPath.length() ? taskPath.substring(i + 1) : taskPath;
  }
 else {
    moduleNode=findModule(projectNode,modulePath);
    taskName=taskPath;
  }
  if (moduleNode == null)   return null;
  return ExternalSystemApiUtil.find(moduleNode,ProjectKeys.TASK,new BooleanFunction<DataNode<TaskData>>(){
    @Override public boolean fun(    DataNode<TaskData> node){
      return node.getData().getName().equals(taskName);
    }
  }
);
}
