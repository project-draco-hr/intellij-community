{
  final String moduleName=gradleModule.getName();
  if (moduleName == null) {
    throw new IllegalStateException("Module with undefined name detected: " + gradleModule);
  }
  final ProjectData projectData=projectDataNode.getData();
  final String mainModuleConfigPath=getModuleConfigPath(resolverCtx,gradleModule,projectData.getLinkedExternalProjectPath());
  final String ideProjectPath=resolverCtx.getIdeProjectPath();
  final String relativePath;
  if (FileUtil.isAncestor(projectData.getLinkedExternalProjectPath(),mainModuleConfigPath,false)) {
    relativePath=FileUtil.getRelativePath(projectData.getLinkedExternalProjectPath(),mainModuleConfigPath,'/');
  }
 else {
    relativePath=String.valueOf(FileUtil.pathHashCode(mainModuleConfigPath));
  }
  final String mainModuleFileDirectoryPath=ideProjectPath == null ? mainModuleConfigPath : ideProjectPath + "/.idea/modules/" + (relativePath == null || relativePath.equals(".") ? "" : relativePath);
  if (ExternalSystemDebugEnvironment.DEBUG_ORPHAN_MODULES_PROCESSING) {
    LOG.info(String.format("Creating module data ('%s') with the external config path: '%s'",gradleModule.getGradleProject().getPath(),mainModuleConfigPath));
  }
  String gradlePath=gradleModule.getGradleProject().getPath();
  final boolean isRootModule=StringUtil.isEmpty(gradlePath) || ":".equals(gradlePath);
  String mainModuleId=isRootModule ? moduleName : gradlePath;
  final ModuleData moduleData=new ModuleData(mainModuleId,GradleConstants.SYSTEM_ID,StdModuleTypes.JAVA.getId(),moduleName,mainModuleFileDirectoryPath,mainModuleConfigPath);
  ExternalProject externalProject=resolverCtx.getExtraProject(gradleModule,ExternalProject.class);
  if (externalProject != null) {
    moduleData.setGroup(externalProject.getGroup());
    moduleData.setVersion(externalProject.getVersion());
    moduleData.setDescription(externalProject.getDescription());
    moduleData.setArtifacts(externalProject.getArtifacts());
  }
  return projectDataNode.createChild(ProjectKeys.MODULE,moduleData);
}
