{
  PsiBuilder.Marker startMarker=builder.mark();
  PsiBuilder.Marker expr=parsePrimaryExpressionStart(builder);
  if (expr == null) {
    startMarker.drop();
    return null;
  }
  while (true) {
    final IElementType tokenType=builder.getTokenType();
    if (tokenType == JavaTokenType.DOT) {
      final PsiBuilder.Marker dotPos=builder.mark();
      final int dotOffset=builder.getCurrentOffset();
      builder.advanceLexer();
      IElementType dotTokenType=builder.getTokenType();
      if (dotTokenType == JavaTokenType.AT) {
        myParser.getDeclarationParser().parseAnnotations(builder);
        dotTokenType=builder.getTokenType();
      }
      if (dotTokenType == JavaTokenType.CLASS_KEYWORD && exprType(expr) == JavaElementType.REFERENCE_EXPRESSION) {
        if (breakPoint == BreakPoint.P1 && builder.getCurrentOffset() == breakOffset) {
          error(builder,JavaErrorMessages.message("expected.identifier"));
          drop(startMarker,dotPos);
          return expr;
        }
        final PsiBuilder.Marker copy=startMarker.precede();
        final int offset=builder.getCurrentOffset();
        startMarker.rollbackTo();
        final PsiBuilder.Marker classObjAccess=parseClassAccessOrMethodReference(builder);
        if (classObjAccess == null || builder.getCurrentOffset() < offset) {
          copy.rollbackTo();
          return parsePrimary(builder,BreakPoint.P1,offset);
        }
        startMarker=copy;
        expr=classObjAccess;
      }
 else       if (dotTokenType == JavaTokenType.NEW_KEYWORD) {
        dotPos.drop();
        expr=parseNew(builder,expr);
      }
 else       if (dotTokenType == JavaTokenType.SUPER_KEYWORD && builder.lookAhead(1) == JavaTokenType.LPARENTH) {
        dotPos.drop();
        PsiBuilder.Marker refExpr=expr.precede();
        builder.mark().done(JavaElementType.REFERENCE_PARAMETER_LIST);
        builder.advanceLexer();
        refExpr.done(JavaElementType.REFERENCE_EXPRESSION);
        expr=refExpr;
      }
 else       if (THIS_OR_SUPER.contains(dotTokenType) && exprType(expr) == JavaElementType.REFERENCE_EXPRESSION) {
        if (breakPoint == BreakPoint.P2 && builder.getCurrentOffset() == breakOffset) {
          dotPos.rollbackTo();
          startMarker.drop();
          return expr;
        }
        PsiBuilder.Marker copy=startMarker.precede();
        int offset=builder.getCurrentOffset();
        startMarker.rollbackTo();
        PsiBuilder.Marker ref=myParser.getReferenceParser().parseJavaCodeReference(builder,false,true,false,false);
        if (ref == null || builder.getTokenType() != JavaTokenType.DOT || builder.getCurrentOffset() != dotOffset) {
          copy.rollbackTo();
          return parsePrimary(builder,BreakPoint.P2,offset);
        }
        builder.advanceLexer();
        if (builder.getTokenType() != dotTokenType) {
          copy.rollbackTo();
          return parsePrimary(builder,BreakPoint.P2,offset);
        }
        builder.advanceLexer();
        startMarker=copy;
        expr=ref.precede();
        expr.done(dotTokenType == JavaTokenType.THIS_KEYWORD ? JavaElementType.THIS_EXPRESSION : JavaElementType.SUPER_EXPRESSION);
      }
 else {
        PsiBuilder.Marker refExpr=expr.precede();
        myParser.getReferenceParser().parseReferenceParameterList(builder,false,false);
        if (!expect(builder,ID_OR_SUPER)) {
          dotPos.rollbackTo();
          builder.advanceLexer();
          myParser.getReferenceParser().parseReferenceParameterList(builder,false,false);
          error(builder,JavaErrorMessages.message("expected.identifier"));
          refExpr.done(JavaElementType.REFERENCE_EXPRESSION);
          startMarker.drop();
          return refExpr;
        }
        dotPos.drop();
        refExpr.done(JavaElementType.REFERENCE_EXPRESSION);
        expr=refExpr;
      }
    }
 else     if (tokenType == JavaTokenType.LPARENTH) {
      if (exprType(expr) != JavaElementType.REFERENCE_EXPRESSION) {
        startMarker.drop();
        return expr;
      }
      PsiBuilder.Marker callExpr=expr.precede();
      parseArgumentList(builder);
      callExpr.done(JavaElementType.METHOD_CALL_EXPRESSION);
      expr=callExpr;
    }
 else     if (tokenType == JavaTokenType.LBRACKET) {
      if (breakPoint == BreakPoint.P4) {
        startMarker.drop();
        return expr;
      }
      builder.advanceLexer();
      if (builder.getTokenType() == JavaTokenType.RBRACKET && exprType(expr) == JavaElementType.REFERENCE_EXPRESSION) {
        final int pos=builder.getCurrentOffset();
        final PsiBuilder.Marker copy=startMarker.precede();
        startMarker.rollbackTo();
        final PsiBuilder.Marker classObjAccess=parseClassAccessOrMethodReference(builder);
        if (classObjAccess == null || builder.getCurrentOffset() <= pos) {
          copy.rollbackTo();
          return parsePrimary(builder,BreakPoint.P4,-1);
        }
        startMarker=copy;
        expr=classObjAccess;
      }
 else {
        final PsiBuilder.Marker arrayAccess=expr.precede();
        final PsiBuilder.Marker index=parse(builder);
        if (index == null) {
          error(builder,JavaErrorMessages.message("expected.expression"));
          arrayAccess.done(JavaElementType.ARRAY_ACCESS_EXPRESSION);
          startMarker.drop();
          return arrayAccess;
        }
        if (builder.getTokenType() != JavaTokenType.RBRACKET) {
          error(builder,JavaErrorMessages.message("expected.rbracket"));
          arrayAccess.done(JavaElementType.ARRAY_ACCESS_EXPRESSION);
          startMarker.drop();
          return arrayAccess;
        }
        builder.advanceLexer();
        arrayAccess.done(JavaElementType.ARRAY_ACCESS_EXPRESSION);
        expr=arrayAccess;
      }
    }
 else     if (tokenType == JavaTokenType.DOUBLE_COLON) {
      return parseMethodReference(builder,startMarker);
    }
 else {
      startMarker.drop();
      return expr;
    }
  }
}
