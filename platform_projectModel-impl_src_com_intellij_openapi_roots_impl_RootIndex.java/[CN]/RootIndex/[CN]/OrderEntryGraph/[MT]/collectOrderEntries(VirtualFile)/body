{
  List<VirtualFile> roots=getHierarchy(file,myAllRoots,myRootInfo);
  if (roots == null) {
    return Collections.emptyList();
  }
  List<OrderEntry> result=new ArrayList<OrderEntry>();
  Stack<Node> stack=new Stack<Node>();
  for (  VirtualFile root : roots) {
    Collection<Node> nodes=myRoots.get(root);
    for (    Node node : nodes) {
      stack.push(node);
    }
  }
  Set<Node> seen=new HashSet<Node>();
  while (!stack.isEmpty()) {
    Node node=stack.pop();
    if (seen.contains(node)) {
      continue;
    }
    seen.add(node);
    for (    Edge edge : node.myEdges) {
      result.add(edge.myOrderEntry);
      if (edge.myRecursive) {
        Node targetNode=myGraph.myNodes.get(edge.myKey);
        if (targetNode != null) {
          stack.push(targetNode);
        }
      }
    }
  }
  @Nullable VirtualFile libraryClassRoot=myRootInfo.findLibraryRootInfo(roots,false);
  @Nullable VirtualFile librarySourceRoot=myRootInfo.findLibraryRootInfo(roots,true);
  result.addAll(myRootInfo.getLibraryOrderEntries(roots,libraryClassRoot,librarySourceRoot,myLibClassRootEntries,myLibSourceRootEntries));
  VirtualFile moduleContentRoot=myRootInfo.findModuleRootInfo(roots);
  if (moduleContentRoot != null) {
    ContainerUtil.addIfNotNull(result,myRootInfo.getModuleSourceEntry(roots,moduleContentRoot,myLibClassRootEntries));
  }
  Collections.sort(result,BY_OWNER_MODULE);
  return result;
}
