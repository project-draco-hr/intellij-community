{
  Collection<Module> sourceRootOwners=null;
  boolean underExcludedSourceRoot=false;
  for (  VirtualFile root : hierarchy) {
    Module module=contentRootOf.get(root);
    Module excludedFrom=excludedFromModule.get(root);
    if (module != null && (excludedFrom != module || underExcludedSourceRoot && sourceRootOwners.contains(module))) {
      return root;
    }
    if (excludedFrom != null || excludedFromProject.contains(root)) {
      if (sourceRootOwners != null) {
        underExcludedSourceRoot=true;
      }
 else {
        return null;
      }
    }
    if (!underExcludedSourceRoot && sourceRootOf.containsKey(root)) {
      Collection<Module> modulesForSourceRoot=sourceRootOf.get(root);
      if (!modulesForSourceRoot.isEmpty()) {
        if (sourceRootOwners == null) {
          sourceRootOwners=modulesForSourceRoot;
        }
 else {
          sourceRootOwners=ContainerUtil.union(sourceRootOwners,modulesForSourceRoot);
        }
      }
    }
  }
  return null;
}
