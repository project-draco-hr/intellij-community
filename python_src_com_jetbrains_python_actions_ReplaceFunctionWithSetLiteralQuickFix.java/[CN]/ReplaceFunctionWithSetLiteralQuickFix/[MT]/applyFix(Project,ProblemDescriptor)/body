{
  PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
  PsiElement functionCall=descriptor.getPsiElement();
  StringBuilder str=new StringBuilder("{");
  if (functionCall instanceof PyCallExpression) {
    PyExpression[] arguments=((PyCallExpression)functionCall).getArguments();
    if (arguments.length > 0) {
      PyExpression argument=arguments[0];
      PyElement[] elements={};
      if (argument instanceof PySequenceExpression)       elements=((PySequenceExpression)argument).getElements();
      if (argument instanceof PyParenthesizedExpression) {
        PyExpression tuple=((PyParenthesizedExpression)argument).getContainedExpression();
        if (tuple instanceof PyTupleExpression)         elements=((PyTupleExpression)(tuple)).getElements();
      }
      for (int i=0; i != elements.length; ++i) {
        PyElement e=elements[i];
        str.append(e.getText());
        if (i != elements.length - 1)         str.append(", ");
      }
    }
    str.append("}");
    functionCall.replace(elementGenerator.createFromText(LanguageLevel.forElement(functionCall),PyExpressionStatement.class,str.toString()).getExpression());
  }
}
