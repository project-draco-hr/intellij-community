{
  final List<IProperty> properties=new ArrayList<IProperty>(file.getProperties());
  Collections.sort(properties,new Comparator<IProperty>(){
    @Override public int compare(    @NotNull IProperty p1,    @NotNull IProperty p2){
      return Comparing.compare(p1.getKey(),p2.getKey(),String.CASE_INSENSITIVE_ORDER);
    }
  }
);
  final char delimiter=PropertiesCodeStyleSettings.getInstance(file.getProject()).getDelimiter();
  final StringBuilder rawText=new StringBuilder();
  for (int i=0; i < properties.size(); i++) {
    IProperty property=properties.get(i);
    final String value=property.getValue();
    final String commentAboveProperty=property.getDocCommentText();
    if (commentAboveProperty != null) {
      rawText.append(commentAboveProperty).append("\n");
    }
    final String propertyText=PropertiesElementFactory.getPropertyText(property.getKey(),value != null ? value : "",delimiter,null,false);
    rawText.append(propertyText);
    if (i != properties.size() - 1) {
      rawText.append("\n");
    }
  }
  final PropertiesFile fakeFile=PropertiesElementFactory.createPropertiesFile(file.getProject(),rawText.toString());
  final PropertiesList propertiesList=PsiTreeUtil.findChildOfType(file.getContainingFile(),PropertiesList.class);
  LOG.assertTrue(propertiesList != null);
  final PropertiesList fakePropertiesList=PsiTreeUtil.findChildOfType(fakeFile.getContainingFile(),PropertiesList.class);
  LOG.assertTrue(fakePropertiesList != null);
  propertiesList.replace(fakePropertiesList);
}
