{
  final GitMockRepositoryManager manager=new GitMockRepositoryManager();
  manager.add(new MockGitRepository(){
    @NotNull @Override public Collection<GitBranchTrackInfo> getBranchTrackInfos(){
      List<GitBranchTrackInfo> infos=new ArrayList<GitBranchTrackInfo>();
      List<VcsRef> remoteRefs=ContainerUtil.findAll(refs,new Condition<VcsRef>(){
        @Override public boolean value(        VcsRef ref){
          return isRemoteBranch(ref.getName());
        }
      }
);
      List<VcsRef> localRefs=ContainerUtil.findAll(refs,new Condition<VcsRef>(){
        @Override public boolean value(        VcsRef ref){
          return isLocalBranch(ref.getName());
        }
      }
);
      for (      final VcsRef localRef : localRefs) {
        final VcsRef trackedRef=ContainerUtil.find(remoteRefs,new Condition<VcsRef>(){
          @Override public boolean value(          VcsRef remoteRef){
            return localRef.getName().equals(remoteRef.getName().substring("origin/".length()));
          }
        }
);
        if (trackedRef != null) {
          infos.add(new GitBranchTrackInfo(new GitLocalBranch(localRef.getName(),HashImpl.build(randomHash())),new GitRemoteBranch(trackedRef.getName(),HashImpl.build(randomHash())){
            @NotNull @Override public String getNameForRemoteOperations(){
              return trackedRef.getName().substring("origin/".length());
            }
            @NotNull @Override public String getNameForLocalOperations(){
              return trackedRef.getName();
            }
            @NotNull @Override public GitRemote getRemote(){
              return GitRemote.DOT;
            }
            @Override public boolean isRemote(){
              return true;
            }
          }
,true));
        }
      }
      return infos;
    }
  }
);
  return ContainerUtil.sorted(refs,new GitRefManager(manager).getComparator());
}
