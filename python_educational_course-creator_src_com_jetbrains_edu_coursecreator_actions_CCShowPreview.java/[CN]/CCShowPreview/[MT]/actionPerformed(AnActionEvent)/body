{
  final Project project=e.getProject();
  if (project == null) {
    return;
  }
  final PsiFile file=CommonDataKeys.PSI_FILE.getData(e.getDataContext());
  if (file == null || !file.getName().contains(".answer")) {
    return;
  }
  final PsiDirectory taskDir=file.getContainingDirectory();
  if (taskDir == null) {
    return;
  }
  PsiDirectory lessonDir=taskDir.getParentDirectory();
  if (lessonDir == null) {
    return;
  }
  final CCProjectService service=CCProjectService.getInstance(project);
  Course course=service.getCourse();
  if (course == null) {
    return;
  }
  TaskFile taskFile=service.getTaskFile(file.getVirtualFile());
  if (taskFile == null) {
    return;
  }
  if (taskFile.getAnswerPlaceholders().isEmpty()) {
    Messages.showInfoMessage("Preview is available for task files with answer placeholders only","No Preview for This File");
  }
  final TaskFile taskFileCopy=new TaskFile();
  TaskFile.copy(taskFile,taskFileCopy);
  final String taskFileName=CCProjectService.getRealTaskFileName(file.getVirtualFile().getName());
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      EduUtils.createStudentFileFromAnswer(project,taskDir.getVirtualFile(),taskDir.getVirtualFile(),taskFileName,taskFileCopy);
    }
  }
);
  String userFileName=CCProjectService.getRealTaskFileName(file.getName());
  if (userFileName == null) {
    return;
  }
  VirtualFile userFile=taskDir.getVirtualFile().findChild(userFileName);
  if (userFile == null) {
    LOG.info("Generated file " + userFileName + "was not found");
    return;
  }
  final FrameWrapper showPreviewFrame=new FrameWrapper(project);
  showPreviewFrame.setTitle(userFileName);
  LabeledEditor labeledEditor=new LabeledEditor(null);
  final EditorFactory factory=EditorFactory.getInstance();
  Document document=FileDocumentManager.getInstance().getDocument(userFile);
  if (document == null) {
    return;
  }
  final EditorEx createdEditor=(EditorEx)factory.createEditor(document,project,userFile,true);
  Disposer.register(project,new Disposable(){
    public void dispose(){
      factory.releaseEditor(createdEditor);
    }
  }
);
  for (  AnswerPlaceholder answerPlaceholder : taskFileCopy.getAnswerPlaceholders()) {
    EduAnswerPlaceholderPainter.drawAnswerPlaceholder(createdEditor,answerPlaceholder,true,JBColor.BLUE);
  }
  JPanel header=new JPanel();
  header.setLayout(new BoxLayout(header,BoxLayout.Y_AXIS));
  header.setBorder(new EmptyBorder(10,10,10,10));
  header.add(new JLabel("Read-only preview."));
  String timeStamp=new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(Calendar.getInstance().getTime());
  header.add(new JLabel(String.format("Created %s.",timeStamp)));
  JComponent editorComponent=createdEditor.getComponent();
  labeledEditor.setComponent(editorComponent,header);
  createdEditor.setCaretVisible(false);
  createdEditor.setCaretEnabled(false);
  showPreviewFrame.setComponent(labeledEditor);
  showPreviewFrame.setSize(new Dimension(500,500));
  DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND,new Runnable(){
    @Override public void run(){
      showPreviewFrame.show();
    }
  }
);
}
