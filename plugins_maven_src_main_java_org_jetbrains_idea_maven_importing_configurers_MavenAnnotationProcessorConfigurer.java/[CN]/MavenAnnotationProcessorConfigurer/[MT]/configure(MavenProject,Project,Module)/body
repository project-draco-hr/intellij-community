{
  if (module == null)   return;
  Sdk sdk=ModuleRootManager.getInstance(module).getSdk();
  if (sdk != null) {
    String versionString=sdk.getVersionString();
    if (versionString != null) {
      if (versionString.contains("1.5") || versionString.contains("1.4") || versionString.contains("1.3")|| versionString.contains("1.2")) {
        return;
      }
    }
  }
  final CompilerConfigurationImpl compilerConfiguration=(CompilerConfigurationImpl)CompilerConfiguration.getInstance(project);
  final MavenProject rootProject=ObjectUtils.notNull(MavenProjectsManager.getInstance(project).findRootProject(mavenProject),mavenProject);
  if (shouldEnableAnnotationProcessors(mavenProject)) {
    final String moduleProfileName;
    String annotationProcessorDirectory=getRelativeAnnotationProcessorDirectory(mavenProject,false);
    if (annotationProcessorDirectory == null) {
      annotationProcessorDirectory=DEFAULT_ANNOTATION_PATH_OUTPUT;
    }
    String testAnnotationProcessorDirectory=getRelativeAnnotationProcessorDirectory(mavenProject,true);
    if (testAnnotationProcessorDirectory == null) {
      testAnnotationProcessorDirectory=DEFAULT_TEST_ANNOTATION_OUTPUT;
    }
    final boolean isDefault;
    if (isMavenDefaultAnnotationProcessorConfiguration(annotationProcessorDirectory,testAnnotationProcessorDirectory,mavenProject)) {
      moduleProfileName=MAVEN_DEFAULT_ANNOTATION_PROFILE;
      isDefault=true;
    }
 else     if (isMavenProcessorPluginDefaultConfiguration(annotationProcessorDirectory,testAnnotationProcessorDirectory,mavenProject)) {
      moduleProfileName=MAVEN_BSC_DEFAULT_ANNOTATION_PROFILE;
      isDefault=true;
    }
 else {
      moduleProfileName=PROFILE_PREFIX + module.getName();
      isDefault=false;
    }
    ProcessorConfigProfile moduleProfile=compilerConfiguration.findModuleProcessorProfile(moduleProfileName);
    if (moduleProfile == null) {
      moduleProfile=new ProcessorConfigProfileImpl(moduleProfileName);
      compilerConfiguration.addModuleProcessorProfile(moduleProfile);
    }
    moduleProfile.setOutputRelativeToContentRoot(true);
    moduleProfile.setEnabled(true);
    moduleProfile.setObtainProcessorsFromClasspath(true);
    moduleProfile.setGeneratedSourcesDirectoryName(annotationProcessorDirectory,false);
    moduleProfile.setGeneratedSourcesDirectoryName(testAnnotationProcessorDirectory,true);
    moduleProfile.clearProcessorOptions();
    for (    Map.Entry<String,String> entry : mavenProject.getAnnotationProcessorOptions().entrySet()) {
      moduleProfile.setOption(entry.getKey(),entry.getValue());
    }
    moduleProfile.clearProcessors();
    final List<String> processors=mavenProject.getDeclaredAnnotationProcessors();
    if (processors != null) {
      for (      String processor : processors) {
        moduleProfile.addProcessor(processor);
      }
    }
    moduleProfile.addModuleName(module.getName());
    cleanAndMergeModuleProfiles(rootProject,compilerConfiguration,moduleProfile,isDefault,module);
  }
 else {
    cleanAndMergeModuleProfiles(rootProject,compilerConfiguration,null,false,module);
  }
}
