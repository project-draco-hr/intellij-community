{
  List<ProcessorConfigProfile> profiles=ContainerUtil.newArrayList(compilerConfiguration.getModuleProcessorProfiles());
  for (  ProcessorConfigProfile p : profiles) {
    if (p != moduleProfile) {
      p.removeModuleName(module.getName());
      if (p.getModuleNames().isEmpty()) {
        compilerConfiguration.removeModuleProcessorProfile(p);
      }
    }
    if (!isDefault && moduleProfile != null && isSimilarProfiles(p,moduleProfile)) {
      final String mavenProjectRootProfileName=PROFILE_PREFIX + rootProject.getDisplayName();
      ProcessorConfigProfile mergedProfile=compilerConfiguration.findModuleProcessorProfile(mavenProjectRootProfileName);
      if (mergedProfile == null) {
        mergedProfile=new ProcessorConfigProfileImpl(moduleProfile);
        mergedProfile.setName(mavenProjectRootProfileName);
        compilerConfiguration.addModuleProcessorProfile(mergedProfile);
        mergedProfile.addModuleNames(p.getModuleNames());
        p.clearModuleNames();
        compilerConfiguration.removeModuleProcessorProfile(p);
        moduleProfile.clearModuleNames();
        compilerConfiguration.removeModuleProcessorProfile(moduleProfile);
      }
 else       if (p == mergedProfile || isSimilarProfiles(mergedProfile,moduleProfile)) {
        if (moduleProfile != mergedProfile) {
          mergedProfile.addModuleNames(moduleProfile.getModuleNames());
          moduleProfile.clearModuleNames();
          compilerConfiguration.removeModuleProcessorProfile(moduleProfile);
        }
        if (p != mergedProfile) {
          mergedProfile.addModuleNames(p.getModuleNames());
          p.clearModuleNames();
          compilerConfiguration.removeModuleProcessorProfile(p);
        }
      }
    }
  }
}
