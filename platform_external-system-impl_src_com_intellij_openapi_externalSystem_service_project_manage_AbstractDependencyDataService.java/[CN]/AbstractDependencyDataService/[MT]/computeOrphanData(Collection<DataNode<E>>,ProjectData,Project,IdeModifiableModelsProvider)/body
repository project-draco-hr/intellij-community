{
  return new Computable<Collection<I>>(){
    @Override public Collection<I> compute(){
      MultiMap<String,String> byModuleName=MultiMap.create();
      for (      DataNode<E> node : toImport) {
        final AbstractDependencyData data=node.getData();
        byModuleName.putValue(data.getOwnerModule().getInternalName(),getInternalName(data));
      }
      final ModifiableModuleModel modifiableModuleModel=modelsProvider.getModifiableModuleModel();
      List<I> orphanEntries=ContainerUtil.newSmartList();
      for (      Module module : modelsProvider.getModules(projectData)) {
        for (        OrderEntry entry : modelsProvider.getOrderEntries(module)) {
          if (entry instanceof LibraryOrderEntry && ((LibraryOrderEntry)entry).getLibraryName() == null && entry.getUrls(OrderRootType.CLASSES).length == 0) {
            continue;
          }
          if (getOrderEntryType().isInstance(entry)) {
            final String moduleName=ObjectUtils.chooseNotNull(modifiableModuleModel.getNewName(entry.getOwnerModule()),entry.getOwnerModule().getName());
            if (!byModuleName.get(moduleName).contains(getOrderEntryName(modelsProvider,(I)entry))) {
              orphanEntries.add((I)entry);
            }
          }
        }
      }
      return orphanEntries;
    }
  }
;
}
