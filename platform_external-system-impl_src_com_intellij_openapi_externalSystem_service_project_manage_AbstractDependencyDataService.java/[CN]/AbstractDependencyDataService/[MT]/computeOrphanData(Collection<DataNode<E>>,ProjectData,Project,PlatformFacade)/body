{
  return new Computable<Collection<I>>(){
    @Override public Collection<I> compute(){
      MultiMap<String,String> byModuleName=MultiMap.create();
      for (      DataNode<E> node : toImport) {
        final AbstractDependencyData data=node.getData();
        byModuleName.putValue(data.getOwnerModule().getInternalName(),data.getInternalName());
      }
      List<I> orphanEntries=ContainerUtil.newSmartList();
      for (      Module module : platformFacade.getModules(project,projectData)) {
        for (        OrderEntry entry : platformFacade.getOrderEntries(module)) {
          if (getOrderEntryType().isInstance(entry) && !byModuleName.get(entry.getOwnerModule().getName()).contains(getOrderEntryName((I)entry))) {
            orphanEntries.add((I)entry);
          }
        }
      }
      return orphanEntries;
    }
  }
;
}
