{
  return new ChooseRunConfigurationPopup.ItemWrapper<Void>(null){
    @Override public Icon getIcon(){
      return IconUtil.getAddIcon();
    }
    @Override public String getText(){
      return UIUtil.removeMnemonic(ExecutionBundle.message("add.new.run.configuration.acrtion.name"));
    }
    @Override public void perform(    @NotNull final Project project,    @NotNull final Executor executor,    @NotNull DataContext context){
      final RunManagerEx runManager=RunManagerImpl.getInstanceEx(project);
      final ConfigurationType[] factories=runManager.getConfigurationFactories();
      final List<ConfigurationType> factoriesList=Arrays.asList(factories);
      final ListPopup popup=NewRunConfigurationPopup.createAddPopup(factoriesList,"",new Consumer<ConfigurationFactory>(){
        @Override public void consume(        final ConfigurationFactory factory){
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              final EditConfigurationsDialog dialog=new EditConfigurationsDialog(project,factory);
              if (dialog.showAndGet()) {
                ApplicationManager.getApplication().invokeLater(new Runnable(){
                  @Override public void run(){
                    RunnerAndConfigurationSettings configuration=RunManager.getInstance(project).getSelectedConfiguration();
                    if (configuration != null) {
                      myModel.addConfiguration(configuration);
                      selectPathOrFirst(configuration);
                    }
                  }
                }
,ModalityState.any(),project.getDisposed());
              }
            }
          }
,ModalityState.any(),project.getDisposed());
        }
      }
,null,EmptyRunnable.getInstance(),false);
      showPopup(button,popup);
    }
    @Override public boolean available(    Executor executor){
      return true;
    }
  }
;
}
