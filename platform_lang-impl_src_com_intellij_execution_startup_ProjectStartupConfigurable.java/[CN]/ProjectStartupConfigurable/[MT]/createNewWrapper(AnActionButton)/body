{
  return new ChooseRunConfigurationPopup.ItemWrapper<Void>(null){
    @Override public Icon getIcon(){
      return IconUtil.getAddIcon();
    }
    @Override public String getText(){
      return UIUtil.removeMnemonic(ExecutionBundle.message("add.new.run.configuration.acrtion.name"));
    }
    @Override public void perform(    @NotNull final Project project,    @NotNull final Executor executor,    @NotNull DataContext context){
      final RunManagerImpl runManager=RunManagerImpl.getInstanceImpl(project);
      final ConfigurationType[] factories=runManager.getConfigurationFactories();
      final Condition<ConfigurationType> filter=new Condition<ConfigurationType>(){
        private final RunnerRegistry myRegistry=RunnerRegistry.getInstance();
        @Override public boolean value(        ConfigurationType configurationType){
          ConfigurationFactory factory;
          return !UnknownConfigurationType.INSTANCE.equals(configurationType) && ((factory=runManager.getFactory(configurationType.getId(),null)) != null) && myRegistry.getRunner(executor.getId(),runManager.getConfigurationTemplate(factory).getConfiguration()) != null;
        }
      }
;
      final List<ConfigurationType> factoriesList=ContainerUtil.filter(Arrays.asList(factories),filter);
      final ListPopup popup=NewRunConfigurationPopup.createAddPopup(factoriesList,"",new Consumer<ConfigurationFactory>(){
        @Override public void consume(        final ConfigurationFactory factory){
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              final EditConfigurationsDialog dialog=new EditConfigurationsDialog(project,factory);
              if (dialog.showAndGet()) {
                ApplicationManager.getApplication().invokeLater(new Runnable(){
                  @Override public void run(){
                    RunnerAndConfigurationSettings configuration=RunManager.getInstance(project).getSelectedConfiguration();
                    if (configuration != null) {
                      addConfiguration(configuration);
                    }
                  }
                }
,ModalityState.any(),project.getDisposed());
              }
            }
          }
,ModalityState.any(),project.getDisposed());
        }
      }
,null,EmptyRunnable.getInstance(),false);
      showPopup(button,popup);
    }
    @Override public boolean available(    Executor executor){
      return true;
    }
  }
;
}
