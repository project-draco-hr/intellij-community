{
  myTree=new Tree();
  installRenderer();
  final JPanel tasksPanel=ToolbarDecorator.createDecorator(myTree).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final RunnerAndConfigurationSettings load=((RunManagerEx)RunManager.getInstance(myProject)).findConfigurationByName("Load");
      if (load != null) {
        final ProjectStartupTasksTreeModel oldModel=(ProjectStartupTasksTreeModel)myTree.getModel();
        final List<RunnerAndConfigurationSettings> configurations=oldModel.getConfigurations();
        if (!configurations.contains(load)) {
          configurations.add(load);
        }
        Collections.sort(configurations,new Comparator<RunnerAndConfigurationSettings>(){
          @Override public int compare(          RunnerAndConfigurationSettings o1,          RunnerAndConfigurationSettings o2){
            return o1.getName().compareToIgnoreCase(o2.getName());
          }
        }
);
        setModel(new ProjectStartupTasksTreeModel(configurations));
      }
    }
  }
).setEditAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
    }
  }
).createPanel();
  return FormBuilder.createFormBuilder().addLabeledComponentFillVertically("Tasks to be executed right after opening the project.",tasksPanel).getPanel();
}
