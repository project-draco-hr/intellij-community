{
  if (!(element instanceof PsiIdentifier)) {
    return false;
  }
  if (!PsiUtil.isLanguageLevel7OrHigher(element)) {
    return false;
  }
  final PsiElement referenceExpression=element.getParent();
  if (!(referenceExpression instanceof PsiReferenceExpression)) {
    return false;
  }
  if (!"equals".equals(((PsiReferenceExpression)referenceExpression).getReferenceName())) {
    return false;
  }
  final PsiElement methodCallExpression=referenceExpression.getParent();
  if (!(methodCallExpression instanceof PsiMethodCallExpression)) {
    return false;
  }
  final int argumentsCount=((PsiMethodCallExpression)methodCallExpression).getArgumentList().getExpressions().length;
  if (argumentsCount != 1) {
    return false;
  }
  final PsiMethod method=((PsiMethodCallExpression)methodCallExpression).resolveMethod();
  if (method == null) {
    return false;
  }
  PsiClass javaLangObject=JavaPsiFacade.getInstance(project).findClass(CommonClassNames.JAVA_LANG_OBJECT,element.getResolveScope());
  if (javaLangObject == null) {
    return false;
  }
  if (javaLangObject.isEquivalentTo(method.getContainingClass())) {
    return true;
  }
  final PsiMethod[] superMethods=method.findSuperMethods(javaLangObject);
  return superMethods.length == 1;
}
