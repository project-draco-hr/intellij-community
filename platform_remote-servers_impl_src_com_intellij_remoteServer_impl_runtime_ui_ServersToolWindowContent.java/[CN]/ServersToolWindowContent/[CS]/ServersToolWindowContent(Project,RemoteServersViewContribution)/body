{
  super(new BorderLayout());
  myProject=project;
  myContribution=contribution;
  myTreeModel=new DefaultTreeModel(new DefaultMutableTreeNode());
  myTree=new Tree(myTreeModel);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setCellRenderer(new NodeRenderer());
  myTree.setLineStyleAngled();
  getMainPanel().add(createToolbar(),BorderLayout.WEST);
  Splitter splitter=new Splitter(false,0.3f);
  splitter.setFirstComponent(ScrollPaneFactory.createScrollPane(myTree,SideBorder.LEFT));
  myPropertiesPanelLayout=new CardLayout();
  myPropertiesPanel=new JPanel(myPropertiesPanelLayout);
  myMessageLabel=new JLabel(EMPTY_SELECTION_MESSAGE,SwingConstants.CENTER);
  myPropertiesPanel.add(MESSAGE_CARD,new Wrapper(myMessageLabel));
  splitter.setSecondComponent(myPropertiesPanel);
  getMainPanel().add(splitter,BorderLayout.CENTER);
  setupBuilder(project);
  contribution.setupTree(myProject,myTree,myBuilder);
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      onSelectionChanged();
    }
  }
);
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent event){
      AnAction connectAction=ActionManager.getInstance().getAction("RemoteServers.ConnectServer");
      AnActionEvent actionEvent=AnActionEvent.createFromInputEvent(connectAction,event,ActionPlaces.UNKNOWN);
      connectAction.actionPerformed(actionEvent);
      return true;
    }
  }
.installOn(myTree);
  myTree.addTreeExpansionListener(new TreeExpansionListener(){
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object value=getNodeValue(event);
      if (value != null) {
        myCollapsedTreeNodeValues.remove(value);
      }
    }
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object value=getNodeValue(event);
      if (value != null) {
        myCollapsedTreeNodeValues.add(value);
      }
    }
    private Object getNodeValue(    TreeExpansionEvent event){
      DefaultMutableTreeNode treeNode=ObjectUtils.tryCast(event.getPath().getLastPathComponent(),DefaultMutableTreeNode.class);
      if (treeNode == null) {
        return null;
      }
      AbstractTreeNode nodeDescriptor=ObjectUtils.tryCast(treeNode.getUserObject(),AbstractTreeNode.class);
      if (nodeDescriptor == null) {
        return null;
      }
      return nodeDescriptor.getValue();
    }
  }
);
  DefaultActionGroup popupActionGroup=new DefaultActionGroup();
  popupActionGroup.add(ActionManager.getInstance().getAction(SERVERS_TOOL_WINDOW_TOOLBAR));
  popupActionGroup.add(ActionManager.getInstance().getAction(SERVERS_TOOL_WINDOW_POPUP));
  PopupHandler.installPopupHandler(myTree,popupActionGroup,ActionPlaces.UNKNOWN,ActionManager.getInstance());
  new TreeSpeedSearch(myTree,TreeSpeedSearch.NODE_DESCRIPTOR_TOSTRING,true);
}
