{
  final String homePath=mySdk.getHomePath();
  if (homePath == null) {
    throw new ExecutionException("Cannot find Python interpreter for SDK " + mySdk.getName());
  }
  final SdkAdditionalData sdkData=mySdk.getSdkAdditionalData();
  if (sdkData instanceof PyRemoteSdkAdditionalDataBase) {
    RemoteSdkCredentials remoteSdkCredentials;
    try {
      remoteSdkCredentials=((RemoteSdkAdditionalData)sdkData).getRemoteSdkCredentials(false);
    }
 catch (    InterruptedException e) {
      LOG.error(e);
      remoteSdkCredentials=null;
    }
catch (    ExecutionException e) {
      throw analyzeException(e,helperPath,args);
    }
    final PythonRemoteInterpreterManager manager=PythonRemoteInterpreterManager.getInstance();
    if (manager != null && remoteSdkCredentials != null) {
      final List<String> cmdline=new ArrayList<String>();
      cmdline.add(homePath);
      cmdline.add(RemoteFile.detectSystemByPath(homePath).createRemoteFile(helperPath).getPath());
      cmdline.addAll(Collections2.transform(args,new Function<String,String>(){
        @Override public String apply(        @Nullable String input){
          return quoteIfNeeded(input);
        }
      }
));
      try {
        if (askForSudo) {
          askForSudo=!manager.ensureCanWrite(null,remoteSdkCredentials,remoteSdkCredentials.getInterpreterPath());
        }
        ProcessOutput processOutput;
        do {
          PathMappingSettings mappings=manager.setupMappings(null,(PyRemoteSdkAdditionalDataBase)sdkData,null);
          processOutput=manager.runRemoteProcess(null,remoteSdkCredentials,mappings,ArrayUtil.toStringArray(cmdline),workingDir,askForSudo);
          if (askForSudo && processOutput.getStderr().contains("sudo: 3 incorrect password attempts")) {
            continue;
          }
          break;
        }
 while (true);
        return processOutput;
      }
 catch (      ExecutionException e) {
        throw new PyExecutionException(helperPath,args,"Error running SDK: " + e.getMessage());
      }
    }
 else {
      throw new PyExecutionException(helperPath,args,PythonRemoteInterpreterManager.WEB_DEPLOYMENT_PLUGIN_IS_DISABLED);
    }
  }
 else {
    throw new PyExecutionException(helperPath,args,"Invalid remote SDK");
  }
}
