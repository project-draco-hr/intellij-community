{
  final String homePath=mySdk.getHomePath();
  if (homePath == null) {
    throw new ExecutionException("Cannot find Python interpreter for SDK " + mySdk.getName());
  }
  final SdkAdditionalData sdkData=mySdk.getSdkAdditionalData();
  if (sdkData instanceof PyRemoteSdkAdditionalDataBase) {
    boolean docker=false;
    RemoteSdkCredentials remoteSdkCredentials;
    try {
      remoteSdkCredentials=((RemoteSdkAdditionalData)sdkData).getRemoteSdkCredentials(false);
    }
 catch (    InterruptedException e) {
      LOG.error(e);
      remoteSdkCredentials=null;
    }
catch (    ExecutionException e) {
      if (e.getCause() instanceof UnsupportedDockerRemoteSdkCredentialsProductionException) {
        docker=true;
        remoteSdkCredentials=null;
      }
 else {
        throw analyzeException(e,helperPath,args);
      }
    }
    final PythonRemoteInterpreterManager manager=PythonRemoteInterpreterManager.getInstance();
    if (manager != null && (docker || remoteSdkCredentials != null)) {
      final List<String> cmdline=new ArrayList<String>();
      cmdline.add(homePath);
      cmdline.add(RemoteFile.detectSystemByPath(homePath).createRemoteFile(helperPath).getPath());
      cmdline.addAll(Collections2.transform(args,new Function<String,String>(){
        @Override public String apply(        @Nullable String input){
          return quoteIfNeeded(input);
        }
      }
));
      if (askForSudo && !docker) {
        askForSudo=!manager.ensureCanWrite(null,remoteSdkCredentials,remoteSdkCredentials.getInterpreterPath());
      }
      ProcessOutput processOutput;
      do {
        final PyRemoteSdkAdditionalDataBase remoteSdkAdditionalData=(PyRemoteSdkAdditionalDataBase)sdkData;
        final PyRemotePathMapper pathMapper=manager.setupMappings(null,remoteSdkAdditionalData,null);
        final boolean finalAskForSudo=askForSudo;
        processOutput=PyRemoteProcessStarterManagerUtil.execute(remoteSdkAdditionalData,new PyRemoteProcessStarterManagerUtil.ProcessManagerTask<ProcessOutput>(){
          @Override public ProcessOutput execute(          PyRemoteProcessStarterManager processManager) throws ExecutionException, InterruptedException {
            return processManager.executeRemoteProcess(null,ArrayUtil.toStringArray(cmdline),workingDir,manager,remoteSdkAdditionalData,pathMapper,finalAskForSudo);
          }
        }
);
        if (askForSudo && processOutput.getStderr().contains("sudo: 3 incorrect password attempts")) {
          continue;
        }
        break;
      }
 while (true);
      return processOutput;
    }
 else {
      throw new PyExecutionException(PythonRemoteInterpreterManager.WEB_DEPLOYMENT_PLUGIN_IS_DISABLED,helperPath,args);
    }
  }
 else {
    throw new PyExecutionException("Invalid remote SDK",helperPath,args);
  }
}
