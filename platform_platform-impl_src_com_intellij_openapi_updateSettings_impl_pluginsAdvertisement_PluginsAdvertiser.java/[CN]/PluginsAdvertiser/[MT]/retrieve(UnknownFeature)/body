{
  final String featureType=unknownFeature.getFeatureType();
  final String implementationName=unknownFeature.getImplementationName();
  final String buildNumber=ApplicationInfo.getInstance().getApiVersion();
  final String pluginRepositoryUrl=FEATURE_IMPLEMENTATIONS_URL + "featureType=" + featureType+ "&implementationName="+ implementationName.replaceAll("#","%23")+ "&build="+ buildNumber;
  try {
    HttpURLConnection connection=HttpConfigurable.getInstance().openHttpConnection(pluginRepositoryUrl);
    connection.connect();
    final InputStreamReader streamReader=new InputStreamReader(connection.getInputStream());
    try {
      final JsonReader jsonReader=new JsonReader(streamReader);
      jsonReader.setLenient(true);
      final JsonElement jsonRootElement=new JsonParser().parse(jsonReader);
      final List<Plugin> result=new ArrayList<Plugin>();
      for (      JsonElement jsonElement : jsonRootElement.getAsJsonArray()) {
        final JsonObject jsonObject=jsonElement.getAsJsonObject();
        final JsonElement pluginId=jsonObject.get("pluginId");
        final JsonElement pluginName=jsonObject.get("pluginName");
        final JsonElement bundled=jsonObject.get("bundled");
        result.add(new Plugin(PluginId.getId(StringUtil.unquoteString(pluginId.toString())),pluginName != null ? StringUtil.unquoteString(pluginName.toString()) : null,Boolean.parseBoolean(StringUtil.unquoteString(bundled.toString()))));
      }
      return result;
    }
  finally {
      streamReader.close();
    }
  }
 catch (  IOException e) {
    LOG.info(e);
    return null;
  }
}
