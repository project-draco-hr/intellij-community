{
  final PsiExpression condition=forStatement.getCondition();
  final PsiBinaryExpression strippedCondition=(PsiBinaryExpression)ParenthesesUtils.stripParentheses(condition);
  if (strippedCondition == null) {
    return null;
  }
  final PsiExpression lhs=ParenthesesUtils.stripParentheses(strippedCondition.getLOperand());
  if (lhs == null) {
    return null;
  }
  final PsiExpression rhs=ParenthesesUtils.stripParentheses(strippedCondition.getROperand());
  if (rhs == null) {
    return null;
  }
  final IElementType tokenType=strippedCondition.getOperationTokenType();
  final PsiReferenceExpression arrayLengthExpression;
  final String indexName;
  if (tokenType.equals(JavaTokenType.LT)) {
    arrayLengthExpression=(PsiReferenceExpression)ParenthesesUtils.stripParentheses(rhs);
    indexName=lhs.getText();
  }
 else   if (tokenType.equals(JavaTokenType.GT)) {
    arrayLengthExpression=(PsiReferenceExpression)ParenthesesUtils.stripParentheses(lhs);
    indexName=rhs.getText();
  }
 else {
    return null;
  }
  if (arrayLengthExpression == null) {
    return null;
  }
  PsiReferenceExpression arrayReference=(PsiReferenceExpression)arrayLengthExpression.getQualifierExpression();
  if (arrayReference == null) {
    final PsiElement target=arrayLengthExpression.resolve();
    if (!(target instanceof PsiVariable)) {
      return null;
    }
    final PsiVariable variable=(PsiVariable)target;
    final PsiExpression initializer=variable.getInitializer();
    if (!(initializer instanceof PsiReferenceExpression)) {
      return null;
    }
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)initializer;
    arrayReference=(PsiReferenceExpression)referenceExpression.getQualifierExpression();
    if (arrayReference == null) {
      return null;
    }
  }
  final PsiType type=arrayReference.getType();
  if (!(type instanceof PsiArrayType)) {
    return null;
  }
  final PsiArrayType arrayType=(PsiArrayType)type;
  final PsiType componentType=arrayType.getComponentType();
  final String typeText=componentType.getCanonicalText();
  final PsiElement target=arrayReference.resolve();
  if (!(target instanceof PsiVariable)) {
    return null;
  }
  final PsiVariable arrayVariable=(PsiVariable)target;
  final PsiStatement body=forStatement.getBody();
  final PsiStatement firstStatement=getFirstStatement(body);
  final boolean isDeclaration=isArrayElementDeclaration(firstStatement,arrayVariable,indexName);
  final String contentVariableName;
  @NonNls final String finalString;
  final PsiStatement statementToSkip;
  if (isDeclaration) {
    final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)firstStatement;
    final PsiElement[] declaredElements=declarationStatement.getDeclaredElements();
    final PsiElement declaredElement=declaredElements[0];
    if (!(declaredElement instanceof PsiVariable)) {
      return null;
    }
    final PsiVariable variable=(PsiVariable)declaredElement;
    if (VariableAccessUtils.variableIsAssigned(variable,forStatement)) {
      final String collectionName=arrayReference.getReferenceName();
      contentVariableName=createNewVariableName(forStatement,componentType,collectionName);
      final Project project=forStatement.getProject();
      final CodeStyleSettings codeStyleSettings=CodeStyleSettingsManager.getSettings(project);
      if (codeStyleSettings.GENERATE_FINAL_LOCALS) {
        finalString="final ";
      }
 else {
        finalString="";
      }
      statementToSkip=null;
    }
 else {
      contentVariableName=variable.getName();
      statementToSkip=declarationStatement;
      if (variable.hasModifierProperty(PsiModifier.FINAL)) {
        finalString="final ";
      }
 else {
        finalString="";
      }
    }
  }
 else {
    final String collectionName=arrayReference.getReferenceName();
    contentVariableName=createNewVariableName(forStatement,componentType,collectionName);
    final Project project=forStatement.getProject();
    final CodeStyleSettings codeStyleSettings=CodeStyleSettingsManager.getSettings(project);
    if (codeStyleSettings.GENERATE_FINAL_LOCALS) {
      finalString="final ";
    }
 else {
      finalString="";
    }
    statementToSkip=null;
  }
  @NonNls final StringBuilder out=new StringBuilder();
  out.append("for(");
  out.append(finalString);
  out.append(typeText);
  out.append(' ');
  out.append(contentVariableName);
  out.append(": ");
  final String arrayName=arrayReference.getText();
  out.append(arrayName);
  out.append(')');
  if (body != null) {
    replaceArrayAccess(body,contentVariableName,arrayVariable,indexName,statementToSkip,out);
  }
  return out.toString();
}
