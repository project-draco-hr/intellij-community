{
  final PsiStatement body=forStatement.getBody();
  final PsiStatement firstStatement=getFirstStatement(body);
  final PsiStatement initialization=forStatement.getInitialization();
  if (!(initialization instanceof PsiDeclarationStatement)) {
    return null;
  }
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  final PsiElement declaredIterator=declaration.getDeclaredElements()[0];
  if (!(declaredIterator instanceof PsiVariable)) {
    return null;
  }
  final PsiVariable iteratorVariable=(PsiVariable)declaredIterator;
  final PsiMethodCallExpression initializer=(PsiMethodCallExpression)iteratorVariable.getInitializer();
  if (initializer == null) {
    return null;
  }
  final PsiType iteratorType=initializer.getType();
  if (iteratorType == null) {
    return null;
  }
  final PsiType iteratorContentType=extractContentTypeFromType(iteratorType);
  final PsiType iteratorVariableType=iteratorVariable.getType();
  final PsiType contentType;
  final PsiClassType javaLangObject=TypeUtils.getObjectType(forStatement);
  if (iteratorContentType == null) {
    final PsiType iteratorVariableContentType=extractContentTypeFromType(iteratorVariableType);
    if (iteratorVariableContentType == null) {
      contentType=javaLangObject;
    }
 else {
      contentType=iteratorVariableContentType;
    }
  }
 else {
    contentType=iteratorContentType;
  }
  final PsiReferenceExpression methodExpression=initializer.getMethodExpression();
  final PsiExpression collection=methodExpression.getQualifierExpression();
  final boolean isDeclaration=isIteratorNextDeclaration(firstStatement,iteratorVariable,contentType);
  final PsiStatement statementToSkip;
  @NonNls final String finalString;
  final String contentVariableName;
  if (isDeclaration) {
    final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)firstStatement;
    final PsiElement[] declaredElements=declarationStatement.getDeclaredElements();
    final PsiElement declaredElement=declaredElements[0];
    if (!(declaredElement instanceof PsiVariable)) {
      return null;
    }
    final PsiVariable variable=(PsiVariable)declaredElement;
    contentVariableName=variable.getName();
    statementToSkip=declarationStatement;
    if (variable.hasModifierProperty(PsiModifier.FINAL)) {
      finalString="final ";
    }
 else {
      finalString="";
    }
  }
 else {
    if (collection instanceof PsiReferenceExpression) {
      final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)collection;
      final String collectionName=referenceExpression.getReferenceName();
      contentVariableName=createNewVariableName(forStatement,contentType,collectionName);
    }
 else {
      contentVariableName=createNewVariableName(forStatement,contentType,null);
    }
    final Project project=forStatement.getProject();
    final CodeStyleSettings codeStyleSettings=CodeStyleSettingsManager.getSettings(project);
    if (codeStyleSettings.GENERATE_FINAL_LOCALS) {
      finalString="final ";
    }
 else {
      finalString="";
    }
    statementToSkip=null;
  }
  final String contentTypeString=contentType.getCanonicalText();
  @NonNls final StringBuilder out=new StringBuilder();
  out.append("for(");
  out.append(finalString);
  out.append(contentTypeString);
  out.append(' ');
  out.append(contentVariableName);
  out.append(": ");
  if (!contentType.equals(javaLangObject)) {
    @NonNls final String iterableTypeString="java.lang.Iterable<" + contentTypeString + '>';
    if (iteratorContentType == null) {
      out.append('(');
      out.append(iterableTypeString);
      out.append(')');
    }
  }
  if (collection == null) {
    out.append("this");
  }
 else {
    out.append(collection.getText());
  }
  out.append(')');
  replaceIteratorNext(body,contentVariableName,iteratorVariable,contentType,statementToSkip,out);
  return out.toString();
}
