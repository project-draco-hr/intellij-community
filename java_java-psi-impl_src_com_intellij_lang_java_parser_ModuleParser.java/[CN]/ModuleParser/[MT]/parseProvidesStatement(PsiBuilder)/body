{
  PsiBuilder.Marker statement=builder.mark();
  boolean hasError=false;
  mapAndAdvance(builder,JavaTokenType.PROVIDES_KEYWORD);
  if (parseClassOrPackageRef(builder) == null) {
    error(builder,JavaErrorMessages.message("expected.class.reference"));
    hasError=true;
  }
  if (PsiKeyword.WITH.equals(builder.getTokenText())) {
    mapAndAdvance(builder,JavaTokenType.WITH_KEYWORD);
    if (parseClassOrPackageRef(builder) == null) {
      error(builder,JavaErrorMessages.message("expected.class.reference"));
      hasError=true;
    }
  }
 else   if (!hasError) {
    IElementType next=builder.getTokenType();
    if (next == JavaTokenType.IDENTIFIER && !STATEMENT_KEYWORDS.contains(builder.getTokenText())) {
      PsiBuilder.Marker marker=builder.mark();
      builder.advanceLexer();
      marker.error(JavaErrorMessages.message("expected.with"));
    }
 else {
      error(builder,JavaErrorMessages.message("expected.with"));
    }
    hasError=true;
  }
  if (!hasError) {
    semicolon(builder);
  }
 else {
    expect(builder,JavaTokenType.SEMICOLON);
  }
  statement.done(JavaElementType.PROVIDES_STATEMENT);
  return statement;
}
