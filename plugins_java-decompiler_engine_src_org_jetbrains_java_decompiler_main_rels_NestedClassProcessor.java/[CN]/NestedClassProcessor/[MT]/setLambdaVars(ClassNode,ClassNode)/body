{
  if (child.lambda_information.is_method_reference) {
    return;
  }
  final MethodWrapper meth=parent.wrapper.getMethods().getWithKey(child.lambda_information.content_method_key);
  final MethodWrapper encmeth=parent.wrapper.getMethods().getWithKey(child.enclosingMethod);
  MethodDescriptor md_lambda=MethodDescriptor.parseDescriptor(child.lambda_information.method_descriptor);
  final MethodDescriptor md_content=MethodDescriptor.parseDescriptor(child.lambda_information.content_method_descriptor);
  final int vars_count=md_content.params.length - md_lambda.params.length;
  final boolean is_static_lambda_content=child.lambda_information.is_content_method_static;
  final String parent_class_name=parent.wrapper.getClassStruct().qualifiedName;
  final String lambda_class_name=child.simpleName;
  final VarType lambda_class_type=new VarType(lambda_class_name,true);
  if (!is_static_lambda_content && DecompilerContext.getOption(IFernflowerPreferences.LAMBDA_TO_ANONYMOUS_CLASS)) {
    meth.varproc.getThisvars().put(new VarVersionPaar(0,0),parent_class_name);
    meth.varproc.setVarName(new VarVersionPaar(0,0),parent.simpleName + ".this");
  }
  DirectGraph graph=encmeth.getOrBuildGraph();
  final HashMap<VarVersionPaar,String> mapNewNames=new HashMap<VarVersionPaar,String>();
  graph.iterateExprents(new DirectGraph.ExprentIterator(){
    public int processExprent(    Exprent exprent){
      List<Exprent> lst=exprent.getAllExprents(true);
      lst.add(exprent);
      for (      Exprent expr : lst) {
        if (expr.type == Exprent.EXPRENT_NEW) {
          NewExprent new_expr=(NewExprent)expr;
          if (new_expr.isLambda() && lambda_class_type.equals(new_expr.getNewtype())) {
            InvocationExprent inv_dynamic=new_expr.getConstructor();
            int param_index=is_static_lambda_content ? 0 : 1;
            int varindex=is_static_lambda_content ? 0 : 1;
            for (int i=0; i < vars_count; ++i) {
              Exprent param=inv_dynamic.getLstParameters().get(param_index + i);
              if (param.type == Exprent.EXPRENT_VAR) {
                VarVersionPaar enc_varpaar=new VarVersionPaar((VarExprent)param);
                String enc_varname=encmeth.varproc.getVarName(enc_varpaar);
                mapNewNames.put(new VarVersionPaar(varindex,0),enc_varname);
              }
              varindex+=md_content.params[i].stack_size;
            }
          }
        }
      }
      return 0;
    }
  }
);
  HashSet<String> setNewOuterNames=new HashSet<String>(mapNewNames.values());
  setNewOuterNames.removeAll(meth.setOuterVarNames);
  meth.varproc.refreshVarNames(new VarNamesCollector(setNewOuterNames));
  meth.setOuterVarNames.addAll(setNewOuterNames);
  for (  Entry<VarVersionPaar,String> entr : mapNewNames.entrySet()) {
    meth.varproc.setVarName(entr.getKey(),entr.getValue());
  }
}
