{
  if (child.lambdaInformation.is_method_reference) {
    return;
  }
  MethodWrapper method=parent.getWrapper().getMethods().getWithKey(child.lambdaInformation.content_method_key);
  final MethodWrapper enclosingMethod=parent.getWrapper().getMethods().getWithKey(child.enclosingMethod);
  MethodDescriptor md_lambda=MethodDescriptor.parseDescriptor(child.lambdaInformation.method_descriptor);
  final MethodDescriptor md_content=MethodDescriptor.parseDescriptor(child.lambdaInformation.content_method_descriptor);
  final int vars_count=md_content.params.length - md_lambda.params.length;
  final boolean is_static_lambda_content=child.lambdaInformation.is_content_method_static;
  String parent_class_name=parent.getWrapper().getClassStruct().qualifiedName;
  String lambda_class_name=child.simpleName;
  final VarType lambda_class_type=new VarType(lambda_class_name,true);
  if (!is_static_lambda_content && DecompilerContext.getOption(IFernflowerPreferences.LAMBDA_TO_ANONYMOUS_CLASS)) {
    method.varproc.getThisVars().put(new VarVersionPair(0,0),parent_class_name);
    method.varproc.setVarName(new VarVersionPair(0,0),parent.simpleName + ".this");
  }
  final Map<VarVersionPair,String> mapNewNames=new HashMap<VarVersionPair,String>();
  enclosingMethod.getOrBuildGraph().iterateExprents(new DirectGraph.ExprentIterator(){
    @Override public int processExprent(    Exprent exprent){
      List<Exprent> lst=exprent.getAllExprents(true);
      lst.add(exprent);
      for (      Exprent expr : lst) {
        if (expr.type == Exprent.EXPRENT_NEW) {
          NewExprent new_expr=(NewExprent)expr;
          if (new_expr.isLambda() && lambda_class_type.equals(new_expr.getNewType())) {
            InvocationExprent inv_dynamic=new_expr.getConstructor();
            int param_index=is_static_lambda_content ? 0 : 1;
            int varIndex=is_static_lambda_content ? 0 : 1;
            for (int i=0; i < vars_count; ++i) {
              Exprent param=inv_dynamic.getLstParameters().get(param_index + i);
              if (param.type == Exprent.EXPRENT_VAR) {
                VarVersionPair pair=new VarVersionPair((VarExprent)param);
                String name=enclosingMethod.varproc.getVarName(pair);
                mapNewNames.put(new VarVersionPair(varIndex,0),name);
              }
              varIndex+=md_content.params[i].stackSize;
            }
          }
        }
      }
      return 0;
    }
  }
);
  Set<String> setNewOuterNames=new HashSet<String>(mapNewNames.values());
  setNewOuterNames.removeAll(method.setOuterVarNames);
  method.varproc.refreshVarNames(new VarNamesCollector(setNewOuterNames));
  method.setOuterVarNames.addAll(setNewOuterNames);
  for (  Entry<VarVersionPair,String> entry : mapNewNames.entrySet()) {
    method.varproc.setVarName(entry.getKey(),entry.getValue());
  }
}
