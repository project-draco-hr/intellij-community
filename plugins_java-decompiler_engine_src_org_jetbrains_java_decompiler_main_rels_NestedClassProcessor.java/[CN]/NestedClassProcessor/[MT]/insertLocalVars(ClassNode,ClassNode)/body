{
  MethodWrapper encmeth=parent.wrapper.getMethods().getWithKey(child.enclosingMethod);
  for (  final MethodWrapper meth : child.wrapper.getMethods()) {
    if (meth.root != null) {
      HashMap<VarVersionPair,String> mapNewNames=new HashMap<VarVersionPair,String>();
      HashMap<VarVersionPair,VarType> mapNewTypes=new HashMap<VarVersionPair,VarType>();
      final HashMap<Integer,VarVersionPair> mapParamsToNewVars=new HashMap<Integer,VarVersionPair>();
      if (meth.signatureFields != null) {
        int index=0;
        int varindex=1;
        MethodDescriptor md=MethodDescriptor.parseDescriptor(meth.methodStruct.getDescriptor());
        for (        VarVersionPair paar : meth.signatureFields) {
          if (paar != null) {
            VarVersionPair newvar=new VarVersionPair(meth.counter.getCounterAndIncrement(CounterContainer.VAR_COUNTER),0);
            mapParamsToNewVars.put(varindex,newvar);
            String varname=null;
            VarType vartype=null;
            if (child.type != ClassNode.CLASS_MEMBER) {
              varname=encmeth.varproc.getVarName(paar);
              vartype=encmeth.varproc.getVarType(paar);
              encmeth.varproc.setVarFinal(paar,VarTypeProcessor.VAR_EXPLICIT_FINAL);
            }
            if (paar.var == -1 || "this".equals(varname)) {
              if (parent.simpleName == null) {
                varname=VarExprent.VAR_NAMELESS_ENCLOSURE;
              }
 else {
                varname=parent.simpleName + ".this";
              }
              meth.varproc.getThisVars().put(newvar,parent.classStruct.qualifiedName);
            }
            mapNewNames.put(newvar,varname);
            mapNewTypes.put(newvar,vartype);
          }
          varindex+=md.params[index++].stackSize;
        }
      }
      final HashMap<String,VarVersionPair> mapFieldsToNewVars=new HashMap<String,VarVersionPair>();
      for (ClassNode clnode=child; clnode != null; clnode=clnode.parent) {
        for (        Entry<String,VarVersionPair> entr : clnode.mapFieldsToVars.entrySet()) {
          VarVersionPair newvar=new VarVersionPair(meth.counter.getCounterAndIncrement(CounterContainer.VAR_COUNTER),0);
          mapFieldsToNewVars.put(InterpreterUtil.makeUniqueKey(clnode.classStruct.qualifiedName,entr.getKey()),newvar);
          String varname=null;
          VarType vartype=null;
          if (clnode.type != ClassNode.CLASS_MEMBER) {
            MethodWrapper enclosing_method=clnode.parent.wrapper.getMethods().getWithKey(clnode.enclosingMethod);
            varname=enclosing_method.varproc.getVarName(entr.getValue());
            vartype=enclosing_method.varproc.getVarType(entr.getValue());
            enclosing_method.varproc.setVarFinal(entr.getValue(),VarTypeProcessor.VAR_EXPLICIT_FINAL);
          }
          if (entr.getValue().var == -1 || "this".equals(varname)) {
            if (clnode.parent.simpleName == null) {
              varname=VarExprent.VAR_NAMELESS_ENCLOSURE;
            }
 else {
              varname=clnode.parent.simpleName + ".this";
            }
            meth.varproc.getThisVars().put(newvar,clnode.parent.classStruct.qualifiedName);
          }
          mapNewNames.put(newvar,varname);
          mapNewTypes.put(newvar,vartype);
          if (clnode == child) {
            StructField fd=child.classStruct.getFields().getWithKey(entr.getKey());
            child.wrapper.getHiddenMembers().add(InterpreterUtil.makeUniqueKey(fd.getName(),fd.getDescriptor()));
          }
        }
      }
      HashSet<String> setNewOuterNames=new HashSet<String>(mapNewNames.values());
      setNewOuterNames.removeAll(meth.setOuterVarNames);
      meth.varproc.refreshVarNames(new VarNamesCollector(setNewOuterNames));
      meth.setOuterVarNames.addAll(setNewOuterNames);
      for (      Entry<VarVersionPair,String> entr : mapNewNames.entrySet()) {
        VarVersionPair varpaar=entr.getKey();
        VarType vartype=mapNewTypes.get(varpaar);
        meth.varproc.setVarName(varpaar,entr.getValue());
        if (vartype != null) {
          meth.varproc.setVarType(varpaar,vartype);
        }
      }
      DirectGraph graph=meth.getOrBuildGraph();
      graph.iterateExprents(new DirectGraph.ExprentIterator(){
        public int processExprent(        Exprent exprent){
          if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
            AssignmentExprent asexpr=(AssignmentExprent)exprent;
            if (asexpr.getLeft().type == Exprent.EXPRENT_FIELD) {
              FieldExprent fexpr=(FieldExprent)asexpr.getLeft();
              if (fexpr.getClassname().equals(child.classStruct.qualifiedName) && mapFieldsToNewVars.containsKey(InterpreterUtil.makeUniqueKey(child.classStruct.qualifiedName,InterpreterUtil.makeUniqueKey(fexpr.getName(),fexpr.getDescriptor().descriptorString)))) {
                return 2;
              }
            }
          }
          if (child.type == ClassNode.CLASS_ANONYMOUS && "<init>".equals(meth.methodStruct.getName()) && exprent.type == Exprent.EXPRENT_INVOCATION) {
            InvocationExprent invexpr=(InvocationExprent)exprent;
            if (invexpr.getFunctype() == InvocationExprent.TYP_INIT) {
              child.superInvocation=invexpr;
              return 2;
            }
          }
          replaceExprent(exprent);
          return 0;
        }
        private Exprent replaceExprent(        Exprent exprent){
          if (exprent.type == Exprent.EXPRENT_VAR) {
            int varindex=((VarExprent)exprent).getIndex();
            if (mapParamsToNewVars.containsKey(varindex)) {
              VarVersionPair newvar=mapParamsToNewVars.get(varindex);
              meth.varproc.getExternalVars().add(newvar);
              return new VarExprent(newvar.var,meth.varproc.getVarType(newvar),meth.varproc);
            }
          }
 else           if (exprent.type == Exprent.EXPRENT_FIELD) {
            FieldExprent fexpr=(FieldExprent)exprent;
            String keyField=InterpreterUtil.makeUniqueKey(fexpr.getClassname(),InterpreterUtil.makeUniqueKey(fexpr.getName(),fexpr.getDescriptor().descriptorString));
            if (mapFieldsToNewVars.containsKey(keyField)) {
              VarVersionPair newvar=mapFieldsToNewVars.get(keyField);
              meth.varproc.getExternalVars().add(newvar);
              return new VarExprent(newvar.var,meth.varproc.getVarType(newvar),meth.varproc);
            }
          }
          boolean replaced=true;
          while (replaced) {
            replaced=false;
            for (            Exprent expr : exprent.getAllExprents()) {
              Exprent retexpr=replaceExprent(expr);
              if (retexpr != null) {
                exprent.replaceExprent(expr,retexpr);
                replaced=true;
                break;
              }
            }
          }
          return null;
        }
      }
);
    }
  }
}
