{
  if (node.type == ClassNode.CLASS_LAMBDA && !node.lambdaInformation.is_method_reference) {
    ClassNode node_content=DecompilerContext.getClassProcessor().getMapRootClasses().get(node.classStruct.qualifiedName);
    if (node_content != null && node_content.getWrapper() != null) {
      node_content.getWrapper().getHiddenMembers().add(node.lambdaInformation.content_method_key);
    }
  }
  if (node.nested.isEmpty()) {
    return;
  }
  if (node.type != ClassNode.CLASS_LAMBDA) {
    computeLocalVarsAndDefinitions(node);
    checkNotFoundClasses(root,node);
  }
  int nameless=0, synthetics=0;
  for (  ClassNode child : node.nested) {
    if ((child.type == ClassNode.CLASS_LOCAL || child.type == ClassNode.CLASS_MEMBER) && child.simpleName == null) {
      StructClass cl=child.classStruct;
      if ((child.access & CodeConstants.ACC_SYNTHETIC) != 0 || cl.isSynthetic()) {
        child.simpleName="SyntheticClass_" + (++synthetics);
      }
 else {
        String message="Nameless local or member class " + cl.qualifiedName + "!";
        DecompilerContext.getLogger().writeMessage(message,IFernflowerLogger.Severity.WARN);
        child.simpleName="NamelessClass_" + (++nameless);
      }
      child.namelessConstructorStub=!cl.hasModifier(CodeConstants.ACC_STATIC) && cl.getMethods().size() + cl.getFields().size() == 0;
    }
  }
  for (  ClassNode child : node.nested) {
    if (child.type == ClassNode.CLASS_LAMBDA) {
      setLambdaVars(node,child);
    }
 else     if (child.type != ClassNode.CLASS_MEMBER || (child.access & CodeConstants.ACC_STATIC) == 0) {
      insertLocalVars(node,child);
      if (child.type == ClassNode.CLASS_LOCAL) {
        setLocalClassDefinition(node.getWrapper().getMethods().getWithKey(child.enclosingMethod),child);
      }
    }
  }
  for (  ClassNode child : node.nested) {
    processClass(root,child);
  }
}
