{
  final List<PyElement> elements=ContainerUtil.map(myMembers,new Function<PyMemberInfo<PyElement>,PyElement>(){
    public PyElement fun(    PyMemberInfo<PyElement> pyMemberInfo){
      return pyMemberInfo.getMember();
    }
  }
);
  for (  PyFunction pyFunction : myClass.getMethods()) {
    final UsedMembersCollector collector=new UsedMembersCollector(elements);
    pyFunction.accept(collector);
    final List<PyElement> conflicts=collector.getCollection();
    for (    PyElement conflict : conflicts) {
      final String message=RefactoringBundle.message("0.uses.1.which.is.pushed.down",RefactoringUIUtil.getDescription(pyFunction,false),RefactoringUIUtil.getDescription(conflict,false));
      myConflicts.putValue(pyFunction,message);
    }
  }
}
