{
  PsiElement firstElement=file.findElementAt(startOffset);
  PsiElement lastElement=file.findElementAt(endOffset - 1);
  while (firstElement != null && (firstElement instanceof PsiWhiteSpace || firstElement.getNode().getElementType() == JsonElementTypes.COMMA)) {
    firstElement=firstElement.getNextSibling();
  }
  while (lastElement != null && (lastElement instanceof PsiWhiteSpace || lastElement.getNode().getElementType() == JsonElementTypes.COMMA)) {
    lastElement=lastElement.getPrevSibling();
  }
  if (firstElement != null) {
    startOffset=firstElement.getTextRange().getStartOffset();
  }
  if (lastElement != null) {
    endOffset=lastElement.getTextRange().getEndOffset();
  }
  final JsonElement property=PsiTreeUtil.findElementOfClassAtRange(file,startOffset,endOffset,JsonProperty.class);
  if (property != null) {
    final List<JsonElement> properties=ContainerUtil.newArrayList(property);
    PsiElement nextSibling=property.getNextSibling();
    while (nextSibling != null && nextSibling.getTextRange().getEndOffset() <= endOffset) {
      if (nextSibling instanceof JsonProperty) {
        properties.add((JsonProperty)nextSibling);
      }
      nextSibling=nextSibling.getNextSibling();
    }
    return properties.toArray(new PsiElement[properties.size()]);
  }
  final JsonValue value=PsiTreeUtil.findElementOfClassAtRange(file,startOffset,endOffset,JsonValue.class);
  if (value != null) {
    return new PsiElement[]{value};
  }
  return PsiElement.EMPTY_ARRAY;
}
