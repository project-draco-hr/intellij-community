{
  LOG.assertTrue(modifyLevel || modifyName);
  String profileDefaultName=getProfilePanel(selectedProfile).getCurrentProfileName();
  final boolean isProjectLevel=getProfilePanel(selectedProfile).isProjectLevel() ^ modifyLevel;
  if (modifyName) {
    final Matcher matcher=COPIED_PROFILE_SUFFIX_PATTERN.matcher(profileDefaultName);
    int nextIdx;
    if (matcher.matches()) {
      profileDefaultName=matcher.group(1);
      nextIdx=matcher.group(2).isEmpty() ? 1 : Integer.valueOf(matcher.group(2));
    }
 else {
      profileDefaultName+=" copy";
      nextIdx=1;
    }
    if (hasName(profileDefaultName,isProjectLevel)) {
      String currentProfileDefaultName;
      do {
        currentProfileDefaultName=profileDefaultName + " " + String.valueOf(nextIdx);
        nextIdx++;
      }
 while (hasName(currentProfileDefaultName,isProjectLevel));
      profileDefaultName=currentProfileDefaultName;
    }
  }
  ProfileManager profileManager=isProjectLevel ? myProjectProfileManager : myApplicationProfileManager;
  InspectionProfileImpl inspectionProfile=new InspectionProfileImpl(profileDefaultName,InspectionToolRegistrar.getInstance(),profileManager);
  inspectionProfile.copyFrom(selectedProfile);
  inspectionProfile.setName(profileDefaultName);
  inspectionProfile.initInspectionTools(project);
  inspectionProfile.setModified(true);
  inspectionProfile.setProjectLevel(profileManager == myProjectProfileManager);
  final InspectionProfileImpl modifiableModel=(InspectionProfileImpl)inspectionProfile.getModifiableModel();
  modifiableModel.setModified(true);
  addProfile(modifiableModel,inspectionProfile);
  return modifiableModel;
}
