{
  manager.addPsiTreeChangeListener(new PsiTreeChangeAdapter(){
    @Override public void childMoved(    @NotNull final PsiTreeChangeEvent event){
      final PsiElement child=event.getChild();
      if (!(child instanceof PsiFile)) {
        if (child instanceof PsiDirectory) {
          if (event.getOldParent() instanceof PsiDirectory && event.getNewParent() instanceof PsiDirectory) {
            final String fromDirUrl=((PsiDirectory)event.getOldParent()).getVirtualFile().getUrl() + "/";
            final NotNullLazyValue<String> toDirUrl=new NotNullLazyValue<String>(){
              @NotNull @Override protected String compute(){
                return ((PsiDirectory)event.getNewParent()).getVirtualFile().getUrl() + "/";
              }
            }
;
            for (            String dissociatedFileUrl : new SmartList<>(myState.getDissociatedFiles())) {
              if (dissociatedFileUrl.startsWith(fromDirUrl)) {
                myState.getDissociatedFiles().remove(dissociatedFileUrl);
                myState.getDissociatedFiles().add(toDirUrl.getValue() + dissociatedFileUrl.substring(fromDirUrl.length()));
              }
            }
            for (            CustomResourceBundleState customResourceBundleState : myState.getCustomResourceBundles()) {
              for (              String fileUrl : new SmartList<>(customResourceBundleState.getFileUrls())) {
                if (fileUrl.startsWith(fromDirUrl)) {
                  customResourceBundleState.getFileUrls().remove(fileUrl);
                  customResourceBundleState.getFileUrls().add(toDirUrl.getValue() + fileUrl.substring(fromDirUrl.length()));
                }
              }
            }
          }
        }
        return;
      }
      final PropertiesFile propertiesFile=PropertiesImplUtil.getPropertiesFile((PsiFile)child);
      if (propertiesFile == null) {
        return;
      }
      final String oldParentUrl=getUrl(event.getOldParent());
      if (oldParentUrl == null) {
        return;
      }
      final String newParentUrl=getUrl(event.getNewParent());
      if (newParentUrl == null) {
        return;
      }
      final NotNullLazyValue<Pair<String,String>> oldAndNewUrls=new NotNullLazyValue<Pair<String,String>>(){
        @NotNull @Override protected Pair<String,String> compute(){
          final String newUrl=propertiesFile.getVirtualFile().getUrl();
          return Pair.create(oldParentUrl + newUrl.substring(newParentUrl.length()),newUrl);
        }
      }
;
      if (!myState.getDissociatedFiles().isEmpty()) {
        if (myState.getDissociatedFiles().remove(oldAndNewUrls.getValue().getFirst())) {
          myState.getDissociatedFiles().add(oldAndNewUrls.getValue().getSecond());
        }
      }
      for (      CustomResourceBundleState customResourceBundleState : myState.getCustomResourceBundles()) {
        if (customResourceBundleState.getFileUrls().remove(oldAndNewUrls.getValue().getFirst())) {
          customResourceBundleState.getFileUrls().add(oldAndNewUrls.getValue().getSecond());
          break;
        }
      }
    }
    @Nullable private String getUrl(    PsiElement element){
      return !(element instanceof PsiDirectory) ? null : ((PsiDirectory)element).getVirtualFile().getUrl();
    }
    @Override public void beforeChildRemoval(    @NotNull PsiTreeChangeEvent event){
      final PsiElement child=event.getChild();
      if (!(child instanceof PsiFile)) {
        if (child instanceof PsiDirectory) {
          final String deletedDirUrl=((PsiDirectory)child).getVirtualFile().getUrl() + "/";
          for (          String dissociatedFileUrl : new SmartList<>(myState.getDissociatedFiles())) {
            if (dissociatedFileUrl.startsWith(deletedDirUrl)) {
              myState.getDissociatedFiles().remove(dissociatedFileUrl);
            }
          }
          for (          CustomResourceBundleState customResourceBundleState : new SmartList<>(myState.getCustomResourceBundles())) {
            for (            String fileUrl : new ArrayList<>(customResourceBundleState.getFileUrls())) {
              if (fileUrl.startsWith(deletedDirUrl)) {
                customResourceBundleState.getFileUrls().remove(fileUrl);
              }
            }
            if (customResourceBundleState.getFileUrls().size() < 2) {
              myState.getCustomResourceBundles().remove(customResourceBundleState);
            }
          }
        }
        return;
      }
      ;
      PsiFile psiFile=(PsiFile)child;
      if (!PropertiesImplUtil.canBePropertyFile(psiFile))       return;
      final VirtualFile virtualFile=psiFile.getVirtualFile();
      final NotNullLazyValue<String> url=new NotNullLazyValue<String>(){
        @NotNull @Override protected String compute(){
          return virtualFile.getUrl();
        }
      }
;
      if (!myState.getDissociatedFiles().isEmpty()) {
        myState.getDissociatedFiles().remove(url.getValue());
      }
      for (      CustomResourceBundleState customResourceBundleState : new SmartList<>(myState.getCustomResourceBundles())) {
        final Set<String> urls=customResourceBundleState.getFileUrls();
        if (urls.remove(url.getValue())) {
          if (urls.size() < 2) {
            myState.getCustomResourceBundles().remove(customResourceBundleState);
          }
          break;
        }
      }
    }
  }
);
}
