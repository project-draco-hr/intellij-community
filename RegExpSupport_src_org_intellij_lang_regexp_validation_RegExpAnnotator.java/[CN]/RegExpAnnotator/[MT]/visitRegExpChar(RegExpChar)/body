{
  final Character value=ch.getValue();
  if (value == null || (value == '\b' && !myLanguageHosts.supportsLiteralBackspace(ch))) {
switch (ch.getType()) {
case CHAR:
      myHolder.createErrorAnnotation(ch,"Illegal/unsupported escape sequence");
    break;
case HEX:
  myHolder.createErrorAnnotation(ch,"Illegal hexadecimal escape sequence");
break;
case OCT:
myHolder.createErrorAnnotation(ch,"Illegal octal escape sequence");
break;
case UNICODE:
myHolder.createErrorAnnotation(ch,"Illegal unicode escape sequence");
break;
case INVALID:
break;
}
}
 else {
final String text=ch.getUnescapedText();
if (text.startsWith("\\") && myLanguageHosts.isRedundantEscape(ch,text)) {
final ASTNode astNode=ch.getNode().getFirstChildNode();
if (astNode != null && astNode.getElementType() == RegExpTT.REDUNDANT_ESCAPE) {
final Annotation a=myHolder.createWeakWarningAnnotation(ch,"Redundant character escape");
registerFix(a,new RemoveRedundantEscapeAction(ch));
}
}
if (ch.getType() == RegExpChar.Type.HEX) {
if (text.charAt(text.length() - 1) == '}') {
if (!myLanguageHosts.supportsExtendedHexCharacter(ch)) {
myHolder.createErrorAnnotation(ch,"This hex character syntax is not supported");
}
}
}
}
}
