{
  String indstr=InterpreterUtil.getIndentString(indent);
  StringBuffer buf=new StringBuffer();
  String new_line_separator=DecompilerContext.getNewLineSeparator();
  buf.append(ExprProcessor.listToJava(varDefinitions,indent));
  if (isLabeled()) {
    buf.append(indstr + "label" + this.id+ ":"+ new_line_separator);
  }
switch (looptype) {
case LOOP_DO:
    buf.append(indstr + "while(true) {" + new_line_separator);
  buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true));
buf.append(indstr + "}" + new_line_separator);
break;
case LOOP_DOWHILE:
buf.append(indstr + "do {" + new_line_separator);
buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true));
buf.append(indstr + "} while(" + conditionExprent.get(0).toJava(indent)+ ");"+ new_line_separator);
break;
case LOOP_WHILE:
buf.append(indstr + "while(" + conditionExprent.get(0).toJava(indent)+ ") {"+ new_line_separator);
buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true));
buf.append(indstr + "}" + new_line_separator);
break;
case LOOP_FOR:
buf.append(indstr + "for(" + (initExprent.get(0) == null ? "" : initExprent.get(0).toJava(indent))+ "; "+ conditionExprent.get(0).toJava(indent)+ "; "+ incExprent.get(0).toJava(indent)+ ") {"+ new_line_separator);
buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true));
buf.append(indstr + "}" + new_line_separator);
}
return buf.toString();
}
