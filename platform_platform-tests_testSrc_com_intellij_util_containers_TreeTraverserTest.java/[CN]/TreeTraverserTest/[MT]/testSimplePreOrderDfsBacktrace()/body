{
  List<Integer> backDfs=Collections.emptyList();
  for (TreeTraversal.TracingIt<Integer> it=numTraverser2(TreeTraversal.PRE_ORDER_DFS).fun(1).typedIterator(); it.hasNext(); ) {
    if (it.next().equals(37))     backDfs=it.backtrace().toList();
  }
  List<Integer> backBfs=Collections.emptyList();
  for (TreeTraversal.TracingIt<Integer> it=numTraverser2(TreeTraversal.TRACING_BFS).fun(1).typedIterator(); it.hasNext(); ) {
    if (it.next().equals(37))     backBfs=it.backtrace().toList();
  }
  assertEquals(Arrays.asList(37,12,4,1),backDfs);
  assertEquals(Arrays.asList(37,12,4,1),backBfs);
}
