{
  List<Integer> result=ContainerUtil.newArrayList();
  TreeTraversal.TracingIt<List<Integer>> it=TreeTraversal.TRACING_BFS.traversal(new Function<List<Integer>,Iterable<List<Integer>>>(){
    @Override public Iterable<List<Integer>> fun(    List<Integer> integers){
      return JBIterable.from(integers).skip(1).transform(WRAP_TO_LIST);
    }
  }
).fun(ContainerUtil.newArrayList(1)).typedIterator();
  while (it.advance()) {
    Integer cur=it.current().get(0);
    result.add(cur);
    assertEquals(JBIterable.generate(cur,DIV_2).takeWhile(IS_POSITIVE).toList(),it.backtrace().transform(new Function<List<Integer>,Integer>(){
      @Override public Integer fun(      List<Integer> integers){
        return integers.get(0);
      }
    }
).toList());
    if (cur > 4)     continue;
    it.current().add(cur * 2);
    it.current().add(cur * 2);
  }
  assertEquals(JBIterable.of(1,2,2,4,4,4,4,8,8,8,8,8,8,8,8).toList(),result);
}
