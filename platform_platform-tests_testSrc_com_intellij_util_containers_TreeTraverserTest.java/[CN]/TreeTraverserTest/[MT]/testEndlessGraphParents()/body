{
  FilteredTraverser<Integer> t=new FilteredTraverser<Integer>(new Function<Integer,Iterable<Integer>>(){
    @Override public Iterable<Integer> fun(    Integer k){
      return JBIterable.generate(1,k,FIBONACCI).skip(2).take(3);
    }
  }
);
  TreeTraverser.TracingIt<Integer> it=t.withRoot(1).preOrderDfsTraversal().skip(20).typedIterator();
  TreeTraverser.TracingIt<Integer> cursor=JBIterator.cursor(it).first();
  assertNotNull(cursor);
  assertSame(cursor,it);
  assertEquals(Arrays.asList(20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1),cursor.backtrace().toList());
}
