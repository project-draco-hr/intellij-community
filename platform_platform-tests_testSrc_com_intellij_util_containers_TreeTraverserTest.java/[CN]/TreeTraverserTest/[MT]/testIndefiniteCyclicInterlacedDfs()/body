{
  Function<Integer,JBIterable<Integer>> traversal=TreeTraversal.INTERLEAVED_DFS.traversal(new Function<Integer,Iterable<Integer>>(){
    @Override public Iterable<Integer> fun(    Integer integer){
      JBIterable<Integer> it=JBIterable.generate(1,INCREMENT).takeWhile(UP_TO(integer + 1));
      return it;
    }
  }
);
  JBIterable<Integer> counts=JBIterable.generate(1,INCREMENT).transform(new Function<Integer,Integer>(){
    @Override public Integer fun(    Integer integer){
      return traversal.fun(1).takeWhile(UP_TO(integer)).size();
    }
  }
);
  assertEquals(Arrays.asList(1,4,13,39,117,359,1134,3686,12276,41708),counts.take(10).toList());
}
