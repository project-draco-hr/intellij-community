{
  if (!new File(stubsRoot).exists())   return;
  if (indicator != null) {
    indicator.setText("Generating skeletons of binary libs");
  }
  try {
    final int RUN_TIMEOUT=10000;
    final String bin_path=getInterpreterPath(sdkPath);
    String text;
    FileWriter out;
    text=FileUtil.loadTextAndClose(new InputStreamReader(PythonSdkType.class.getResourceAsStream("find_binaries.py")));
    final File find_bin_file=FileUtil.createTempFile("find_bin","");
    out=new FileWriter(find_bin_file);
    out.write(text);
    out.close();
    text=FileUtil.loadTextAndClose(new InputStreamReader(PythonSdkType.class.getResourceAsStream("generator3.py")));
    final File gen3_file=FileUtil.createTempFile("gen3","");
    out=new FileWriter(gen3_file);
    out.write(text);
    out.close();
    try {
      final SdkUtil.ProcessCallInfo run_result=SdkUtil.getProcessOutput(sdkPath,new String[]{bin_path,find_bin_file.getPath()});
      if (run_result.getExitValue() == 0) {
        for (        String line : run_result.getStdout()) {
          int cutpos=line.indexOf(' ');
          String modname=line.substring(0,cutpos);
          String mod_fname=modname.replace(".",File.separator);
          String fname=line.substring(cutpos + 1);
          File f_orig=new File(fname);
          File f_skel=new File(stubsRoot + File.separator + mod_fname+ ".py");
          if (f_orig.lastModified() >= f_skel.lastModified()) {
            if (indicator != null) {
              indicator.setText2(modname);
            }
            LOG.info("Skeleton for " + modname);
            final SdkUtil.ProcessCallInfo gen_result=SdkUtil.getProcessOutput(sdkPath,new String[]{bin_path,gen3_file.getPath(),"-d",stubsRoot,modname},RUN_TIMEOUT);
            if (gen_result.getExitValue() != 0) {
              StringBuffer sb=new StringBuffer();
              for (              String err_line : gen_result.getStderr()) {
                sb.append(err_line).append("\n");
              }
              LOG.error(sb.toString());
            }
          }
        }
      }
    }
  finally {
      FileUtil.delete(find_bin_file);
      FileUtil.delete(gen3_file);
    }
  }
 catch (  IOException e) {
    LOG.error(e);
  }
}
