{
  if (!new File(stubsRoot).exists())   return;
  if (indicator != null) {
    indicator.setText("Generating skeletons of binary libs");
  }
  final int RUN_TIMEOUT=10 * 1000;
  final String bin_path=getInterpreterPath(sdkPath);
  final ProcessOutput run_result=SdkUtil.getProcessOutput(sdkPath,new String[]{bin_path,PythonHelpersLocator.getHelperPath(FIND_BINARIES)});
  if (run_result.getExitCode() == 0) {
    for (    String line : run_result.getStdoutLines()) {
      int cutpos=line.indexOf(' ');
      String modname=line.substring(0,cutpos);
      String mod_fname=modname.replace(".",File.separator);
      String fname=line.substring(cutpos + 1);
      File f_orig=new File(fname);
      File f_skel=new File(stubsRoot + File.separator + mod_fname+ ".py");
      if (f_orig.lastModified() >= f_skel.lastModified()) {
        if (indicator != null) {
          indicator.setText2(modname);
        }
        LOG.info("Skeleton for " + modname);
        final ProcessOutput gen_result=SdkUtil.getProcessOutput(sdkPath,new String[]{bin_path,PythonHelpersLocator.getHelperPath(GENERATOR3),"-d",stubsRoot,modname},RUN_TIMEOUT);
        if (gen_result.getExitCode() != 0) {
          StringBuffer sb=new StringBuffer("Skeleton for ");
          sb.append(modname).append(" failed. stderr: --");
          for (          String err_line : gen_result.getStderrLines())           sb.append(err_line).append("\n");
          sb.append("--");
          LOG.warn(sb.toString());
        }
      }
    }
  }
 else {
    StringBuffer sb=new StringBuffer();
    for (    String err_line : run_result.getStderrLines())     sb.append(err_line).append("\n");
    LOG.error("failed to run " + FIND_BINARIES + ", exit code "+ run_result.getExitCode()+ ", stderr '"+ sb.toString()+ "'");
  }
}
