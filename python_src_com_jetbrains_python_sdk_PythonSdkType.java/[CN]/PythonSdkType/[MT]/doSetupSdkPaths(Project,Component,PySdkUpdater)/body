{
  if (isRemote(sdkUpdater.getSdk()) && project == null && ownerComponent == null) {
    LOG.error("For refreshing skeletons of remote SDK, either project or owner component must be specified");
  }
  final ProgressManager progressManager=ProgressManager.getInstance();
  boolean sdkPathsUpdated=UIUtil.<Boolean>invokeAndWaitIfNeeded(new Computable<Boolean>(){
    @Override public Boolean compute(){
      return updateSdkPaths(sdkUpdater);
    }
  }
);
  final Application application=ApplicationManager.getApplication();
  if (sdkPathsUpdated && !application.isUnitTestMode()) {
    application.invokeLater(new Runnable(){
      @Override public void run(){
        progressManager.run(new Task.Backgroundable(project,PyBundle.message("sdk.gen.updating.skels"),false){
          @Override public void run(          @NotNull ProgressIndicator indicator){
            try {
              PythonSdkUpdater.updateSdk(project,ownerComponent,sdkUpdater);
            }
 catch (            InvalidSdkException e) {
              if (isVagrant(sdkUpdater.getSdk())) {
                notifyRemoteSdkSkeletonsFail(e,new Runnable(){
                  @Override public void run(){
                    setupSdkPaths(sdkUpdater.getSdk(),project,ownerComponent);
                  }
                }
);
              }
 else               if (!isInvalid(sdkUpdater.getSdk())) {
                LOG.error(e);
              }
            }
          }
        }
);
      }
    }
);
  }
  return sdkPathsUpdated;
}
