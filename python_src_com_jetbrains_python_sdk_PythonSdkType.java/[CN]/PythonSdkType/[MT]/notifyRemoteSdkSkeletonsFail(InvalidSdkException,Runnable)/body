{
  NotificationListener notificationListener;
  String notificationMessage;
  if (e.getCause() instanceof VagrantNotStartedException) {
    notificationListener=new NotificationListener(){
      @Override public void hyperlinkUpdate(      @NotNull Notification notification,      @NotNull HyperlinkEvent event){
        final PythonRemoteInterpreterManager manager=PythonRemoteInterpreterManager.getInstance();
        if (manager != null) {
          try {
            VagrantNotStartedException cause=(VagrantNotStartedException)e.getCause();
            manager.runVagrant(cause.getVagrantFolder(),cause.getMachineName());
          }
 catch (          ExecutionException e1) {
            throw new RuntimeException(e1);
          }
        }
        if (restartAction != null) {
          restartAction.run();
        }
      }
    }
;
    notificationMessage=e.getMessage() + "\n<a href=\"#\">Launch vagrant and refresh skeletons</a>";
  }
 else   if (ExceptionUtil.causedBy(e,DockerMachineNotStartedException.class)) {
    DockerMachineNotStartedException cause=ExceptionUtil.findCause(e,DockerMachineNotStartedException.class);
    final String machineName=cause.getMachineName();
    notificationListener=new NotificationListener(){
      @Override public void hyperlinkUpdate(      @NotNull Notification notification,      @NotNull HyperlinkEvent event){
        final DockerSupport dockerSupport=DockerSupport.getInstance();
        if (dockerSupport != null) {
          dockerSupport.startMachineWithProgressIndicator(null,machineName);
        }
        if (restartAction != null) {
          restartAction.run();
        }
      }
    }
;
    notificationMessage=e.getMessage() + "\n<a href=\"#\">Start Docker Machine '" + machineName+ "' and refresh skeletons</a>";
  }
 else {
    notificationListener=null;
    notificationMessage=e.getMessage();
  }
  Notifications.Bus.notify(new Notification(SKELETONS_TOPIC,"Couldn't refresh skeletons for remote interpreter",notificationMessage,NotificationType.WARNING,notificationListener));
}
