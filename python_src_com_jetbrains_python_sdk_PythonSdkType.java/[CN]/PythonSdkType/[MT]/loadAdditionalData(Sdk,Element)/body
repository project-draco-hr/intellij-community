{
  String sdk_path=currentSdk.getHomePath();
  boolean sdk_updated=false;
  if (sdk_path != null) {
    if (!isValidSdkHome(sdk_path)) {
      if (SystemInfo.isWindows) {
        sdk_updated=switchPathToInterpreter(currentSdk,"python.exe","jython.bat");
      }
 else       if (SystemInfo.isMac) {
        sdk_updated=switchPathToInterpreter(currentSdk,"bin/python","bin/jython","jython");
      }
 else       if (SystemInfo.isUnix) {
        String sdk_name=currentSdk.getName().toLowerCase();
        if (sdk_name.contains("jython")) {
          sdk_updated=switchPathToInterpreter(currentSdk,"jython","/usr/bin/jython","/usr/local/bin/jython");
        }
 else         if (sdk_name.contains("python")) {
          String sdk_home=new File(sdk_path).getName().toLowerCase();
          String version=sdk_home.substring("python".length());
          sdk_updated=switchPathToInterpreter(currentSdk,"python" + version,"/usr/bin/python" + version,"/usr/local/bin/python" + version);
        }
      }
    }
  }
  String url=findSkeletonsUrl(currentSdk);
  if (url != null) {
    final String path=VfsUtil.urlToPath(url);
    File stubs_dir=new File(path);
    if (!stubs_dir.exists()) {
      final ProgressManager progman=ProgressManager.getInstance();
      final Project project=PlatformDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext());
      final Task.Modal setup_task=new Task.Modal(project,"Setting up library files",false){
        public void run(        @NotNull final ProgressIndicator indicator){
          generateBuiltinStubs(currentSdk.getHomePath(),path);
          generateBinaryStubs(currentSdk.getHomePath(),path,indicator);
        }
      }
;
      progman.run(setup_task);
    }
  }
  return null;
}
