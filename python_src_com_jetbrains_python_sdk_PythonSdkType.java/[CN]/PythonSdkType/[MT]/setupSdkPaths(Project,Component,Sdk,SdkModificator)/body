{
  if (isRemote(sdk) && project == null && ownerComponent == null) {
    LOG.error("For refreshing skeletons of remote SDK, either project or owner component must be specified");
  }
  final ProgressManager progressManager=ProgressManager.getInstance();
  final Ref<Boolean> success=new Ref<Boolean>();
  success.set(true);
  final Task.Modal setupTask=new Task.Modal(project,"Setting up library files for " + sdk.getName(),false){
    public void run(    @NotNull final ProgressIndicator indicator){
      sdkModificator.removeAllRoots();
      try {
        updateSdkRootsFromSysPath(sdk,sdkModificator,indicator);
        updateUserAddedPaths(sdk,sdkModificator,indicator);
        if (!ApplicationManager.getApplication().isUnitTestMode()) {
          PySkeletonRefresher.refreshSkeletonsOfSdk(project,ownerComponent,getSkeletonsPath(PathManager.getSystemPath(),sdk.getHomePath()),null,sdk);
          PythonSdkUpdater.getInstance().markAlreadyUpdated(sdk.getHomePath());
        }
      }
 catch (      InvalidSdkException e) {
        if (!isInvalid(sdk)) {
          LOG.warn(e);
          final Notification notification=createInvalidSdkNotification(project);
          notification.notify(project);
        }
      }
    }
  }
;
  progressManager.run(setupTask);
  return success.get();
}
