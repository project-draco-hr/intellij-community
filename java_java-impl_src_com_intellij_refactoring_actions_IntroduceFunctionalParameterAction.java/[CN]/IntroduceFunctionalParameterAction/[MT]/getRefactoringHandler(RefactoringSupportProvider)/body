{
  return new IntroduceParameterHandler(){
    @Override public void invoke(    @NotNull Project project,    @NotNull PsiElement[] elements,    DataContext dataContext){
      if (dataContext != null) {
        final PsiFile file=CommonDataKeys.PSI_FILE.getData(dataContext);
        final Editor editor=CommonDataKeys.EDITOR.getData(dataContext);
        if (file != null && editor != null && !introduceStrategy(project,editor,file,elements)) {
          showErrorMessage(project,editor);
        }
      }
    }
    @Override public void invoke(    @NotNull final Project project,    final Editor editor,    final PsiFile file,    DataContext dataContext){
      ExtractMethodHandler.selectAndPass(project,editor,file,new Pass<PsiElement[]>(){
        @Override public void pass(        PsiElement[] elements){
          if (!introduceStrategy(project,editor,file,elements)) {
            showErrorMessage(project,editor);
          }
        }
      }
);
    }
    private void showErrorMessage(    @NotNull Project project,    Editor editor){
      String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("is.not.supported.in.the.current.context",REFACTORING_NAME));
      CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INTRODUCE_PARAMETER);
    }
  }
;
}
