{
  notification.hideBalloon();
  if (e.getDescription().equals(UNDO_LINK)) {
    new Task.Backgroundable(myProject,"Restoring Branch " + myBranchName + "..."){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        rollbackBranchDeletion();
      }
    }
.queue();
  }
 else   if (e.getDescription().equals(DELETE_REMOTE_LINK)) {
    new Task.Backgroundable(myProject,"Deleting Remote Branch " + myBranchName + "..."){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        GitBrancher brancher=ServiceManager.getService(getProject(),GitBrancher.class);
        for (        String remoteBranch : myTrackedBranches.keySet()) {
          brancher.deleteRemoteBranch(remoteBranch,new ArrayList<>(myTrackedBranches.get(remoteBranch)));
        }
      }
    }
.queue();
  }
 else   if (e.getDescription().equals(VIEW_UNMERGED_LINK)) {
    new Task.Backgroundable(myProject,"Collecting Unmerged Commits..."){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        boolean restore=showNotFullyMergedDialog(myUnmergedToBranches);
        if (restore) {
          rollback();
        }
      }
    }
.queue();
  }
}
