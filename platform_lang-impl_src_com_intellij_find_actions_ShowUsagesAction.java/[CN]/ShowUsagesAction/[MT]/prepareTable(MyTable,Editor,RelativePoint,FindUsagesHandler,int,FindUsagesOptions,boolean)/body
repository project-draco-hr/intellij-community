{
  SpeedSearchBase<JTable> speedSearch=new MySpeedSearch(table);
  speedSearch.setComparator(new SpeedSearchComparator(false));
  table.setRowHeight(Math.max(PlatformIcons.CLASS_ICON.getIconHeight(),table.getFontMetrics(table.getFont()).getHeight()) + 2);
  table.setShowGrid(false);
  table.setShowVerticalLines(false);
  table.setShowHorizontalLines(false);
  table.setTableHeader(null);
  table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  table.setIntercellSpacing(new Dimension(0,0));
  final AtomicReference<List<Object>> selectedUsages=new AtomicReference<List<Object>>();
  final AtomicBoolean moreUsagesSelected=new AtomicBoolean();
  final AtomicBoolean outsideScopeUsagesSelected=new AtomicBoolean();
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      selectedUsages.set(null);
      outsideScopeUsagesSelected.set(false);
      moreUsagesSelected.set(false);
      List<Object> usages=null;
      for (      int i : table.getSelectedRows()) {
        Object value=table.getValueAt(i,0);
        if (value instanceof UsageNode) {
          Usage usage=((UsageNode)value).getUsage();
          if (usage == USAGES_OUTSIDE_SCOPE_SEPARATOR) {
            outsideScopeUsagesSelected.set(true);
            usages=null;
            break;
          }
 else           if (usage == MORE_USAGES_SEPARATOR) {
            moreUsagesSelected.set(true);
            usages=null;
            break;
          }
 else {
            if (usages == null)             usages=new ArrayList<Object>();
            usages.add(usage instanceof UsageInfo2UsageAdapter ? ((UsageInfo2UsageAdapter)usage).getUsageInfo().copy() : usage);
          }
        }
      }
      selectedUsages.set(usages);
    }
  }
);
  final Runnable itemChosenCallback=new Runnable(){
    @Override public void run(){
      if (moreUsagesSelected.get()) {
        appendMoreUsages(editor,popupPosition,handler,maxUsages,options);
        return;
      }
      if (outsideScopeUsagesSelected.get()) {
        options.searchScope=GlobalSearchScope.projectScope(handler.getProject());
        showElementUsages(editor,popupPosition,handler,maxUsages,options);
        return;
      }
      List<Object> usages=selectedUsages.get();
      if (usages != null) {
        for (        Object usage : usages) {
          if (usage instanceof UsageInfo) {
            UsageViewUtil.navigateTo((UsageInfo)usage,true);
          }
 else           if (usage instanceof Navigatable) {
            ((Navigatable)usage).navigate(true);
          }
        }
      }
    }
  }
;
  if (previewMode) {
    table.addMouseListener(new MouseAdapter(){
      @Override public void mouseReleased(      MouseEvent e){
        if (UIUtil.isActionClick(e,MouseEvent.MOUSE_RELEASED) && !UIUtil.isSelectionButtonDown(e) && !e.isConsumed()) {
          itemChosenCallback.run();
        }
      }
    }
);
    table.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
          itemChosenCallback.run();
        }
      }
    }
);
  }
  return itemChosenCallback;
}
