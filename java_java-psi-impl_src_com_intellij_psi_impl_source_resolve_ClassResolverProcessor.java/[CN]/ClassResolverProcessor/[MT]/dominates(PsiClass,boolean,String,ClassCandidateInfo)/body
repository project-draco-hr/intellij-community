{
  final PsiClass otherClass=info.getElement();
  String otherQName=otherClass.getQualifiedName();
  if (fqName.equals(otherQName)) {
    return Domination.DOMINATED_BY;
  }
  final PsiClass containingClass1=aClass.getContainingClass();
  final PsiClass containingClass2=otherClass.getContainingClass();
  if (myAccessClass != null && !Comparing.equal(containingClass1,containingClass2)) {
    if (myAccessClass.equals(containingClass1))     return Domination.DOMINATES;
    if (myAccessClass.equals(containingClass2))     return Domination.DOMINATED_BY;
  }
  if (containingClass1 != null && containingClass2 != null && containingClass2.isInheritor(containingClass1,true) && !isImported(myCurrentFileContext)) {
    if (!isAmbiguousInherited(containingClass1)) {
      return Domination.DOMINATED_BY;
    }
  }
  boolean infoAccessible=info.isAccessible() && isAccessible(otherClass);
  if (infoAccessible && !accessible) {
    return Domination.DOMINATED_BY;
  }
  if (!infoAccessible && accessible) {
    return Domination.DOMINATES;
  }
  boolean isDefault=StringUtil.getPackageName(fqName).isEmpty();
  boolean otherDefault=otherQName != null && StringUtil.getPackageName(otherQName).isEmpty();
  if (isDefault && !otherDefault) {
    return Domination.DOMINATED_BY;
  }
  if (!isDefault && otherDefault) {
    return Domination.DOMINATES;
  }
  boolean myOnDemand=isOnDemand(myCurrentFileContext,aClass);
  boolean otherOnDemand=isOnDemand(info.getCurrentFileResolveScope(),otherClass);
  if (myOnDemand && !otherOnDemand) {
    return Domination.DOMINATED_BY;
  }
  if (!myOnDemand && otherOnDemand) {
    return Domination.DOMINATES;
  }
  return Domination.EQUAL;
}
