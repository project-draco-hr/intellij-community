{
  final JPanel panel=new JPanel(new GridBagLayout());
  myCbSkipSyntheticMethods=new JCheckBox(DebuggerBundle.message("label.debugger.general.configurable.skip.synthetic.methods"));
  myCbSkipConstructors=new JCheckBox(DebuggerBundle.message("label.debugger.general.configurable.skip.constructors"));
  myCbSkipClassLoaders=new JCheckBox(DebuggerBundle.message("label.debugger.general.configurable.skip.classLoaders"));
  myCbSkipSimpleGetters=new JCheckBox(DebuggerBundle.message("label.debugger.general.configurable.skip.simple.getters"));
  myCbStepInfoFiltersEnabled=new JCheckBox(DebuggerBundle.message("label.debugger.general.configurable.step.filters.list.header"));
  panel.add(myCbSkipSyntheticMethods,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  panel.add(myCbSkipConstructors,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  panel.add(myCbSkipClassLoaders,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  panel.add(myCbSkipSimpleGetters,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  panel.add(myCbStepInfoFiltersEnabled,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(8,0,0,0),0,0));
  mySteppingFilterEditor=new ClassFilterEditor(JavaDebuggerSupport.getContextProjectForEditorFieldsInDebuggerConfigurables(),null,"reference.viewBreakpoints.classFilters.newPattern");
  panel.add(mySteppingFilterEditor,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,1.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(0,5,0,0),0,0));
  myCbStepInfoFiltersEnabled.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      mySteppingFilterEditor.setEnabled(myCbStepInfoFiltersEnabled.isSelected());
    }
  }
);
  myRbEvaluateFinallyAlways=new JRadioButton(DebuggerBundle.message("label.debugger.general.configurable.evaluate.finally.always"));
  myRbEvaluateFinallyNever=new JRadioButton(DebuggerBundle.message("label.debugger.general.configurable.evaluate.finally.never"));
  myRbEvaluateFinallyAsk=new JRadioButton(DebuggerBundle.message("label.debugger.general.configurable.evaluate.finally.ask"));
  int cbLeftOffset=0;
  final Border border=myCbSkipSimpleGetters.getBorder();
  if (border != null) {
    final Insets insets=border.getBorderInsets(myCbSkipSimpleGetters);
    if (insets != null) {
      cbLeftOffset=insets.left;
    }
  }
  final ButtonGroup group=new ButtonGroup();
  group.add(myRbEvaluateFinallyAlways);
  group.add(myRbEvaluateFinallyNever);
  group.add(myRbEvaluateFinallyAsk);
  final Box box=Box.createHorizontalBox();
  box.add(myRbEvaluateFinallyAlways);
  box.add(myRbEvaluateFinallyNever);
  box.add(myRbEvaluateFinallyAsk);
  final JPanel evalFinallyPanel=new JPanel(new BorderLayout());
  evalFinallyPanel.add(box,BorderLayout.CENTER);
  evalFinallyPanel.add(new JLabel(DebuggerBundle.message("label.debugger.general.configurable.evaluate.finally.on.pop")),BorderLayout.WEST);
  panel.add(evalFinallyPanel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(4,cbLeftOffset,0,0),0,0));
  return panel;
}
