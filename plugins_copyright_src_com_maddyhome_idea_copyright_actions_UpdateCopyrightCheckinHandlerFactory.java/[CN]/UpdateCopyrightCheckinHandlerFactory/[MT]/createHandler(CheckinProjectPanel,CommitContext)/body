{
  return new CheckinHandler(){
    @Override public RefreshableOnComponent getBeforeCheckinConfigurationPanel(){
      final JCheckBox updateCopyrightCb=new JCheckBox("Update copyright");
      return new RefreshableOnComponent(){
        public JComponent getComponent(){
          return JBUI.Panels.simplePanel().addToLeft(updateCopyrightCb);
        }
        public void refresh(){
        }
        public void saveState(){
          UpdateCopyrightCheckinHandlerState.getInstance(panel.getProject()).UPDATE_COPYRIGHT=updateCopyrightCb.isSelected();
        }
        public void restoreState(){
          updateCopyrightCb.setSelected(UpdateCopyrightCheckinHandlerState.getInstance(panel.getProject()).UPDATE_COPYRIGHT);
        }
      }
;
    }
    @Override public ReturnResult beforeCheckin(    @Nullable CommitExecutor executor,    PairConsumer<Object,Object> additionalDataConsumer){
      if (UpdateCopyrightCheckinHandlerState.getInstance(panel.getProject()).UPDATE_COPYRIGHT) {
        new UpdateCopyrightProcessor(panel.getProject(),null,getPsiFiles()).run();
        FileDocumentManager.getInstance().saveAllDocuments();
      }
      return super.beforeCheckin();
    }
    private PsiFile[] getPsiFiles(){
      Project project=panel.getProject();
      final Collection<VirtualFile> files=panel.getVirtualFiles();
      final List<PsiFile> psiFiles=new ArrayList<PsiFile>();
      final PsiManager manager=PsiManager.getInstance(project);
      for (      final VirtualFile file : files) {
        if (!GeneratedSourcesFilter.isGeneratedSourceByAnyFilter(file,project)) {
          ContainerUtil.addIfNotNull(manager.findFile(file),psiFiles);
        }
      }
      return PsiUtilCore.toPsiFileArray(psiFiles);
    }
  }
;
}
