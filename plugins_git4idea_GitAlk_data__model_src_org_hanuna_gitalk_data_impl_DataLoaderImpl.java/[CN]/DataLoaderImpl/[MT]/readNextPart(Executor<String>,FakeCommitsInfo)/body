{
switch (state) {
case ALL_LOG_READER:
    throw new IllegalStateException("data was read");
case UNINITIALIZED:
  List<Ref> allRefs=new ArrayList<Ref>();
allRefs.addAll(new RefReader(myProject).readAllRefs());
if (fakeCommits.resultRef != null) {
allRefs.add(0,fakeCommits.resultRef);
allRefs.remove(fakeCommits.subjectRef);
}
Set<Hash> visible=new HashSet<Hash>();
for (Ref ref : allRefs) {
if (ref.getType() != Ref.RefType.HEAD) {
visible.add(ref.getCommitHash());
}
}
System.out.println("=== readNextPart() called with " + fakeCommits.commits.size() + " fake commits");
List<CommitParents> commitParentsList=new ArrayList<CommitParents>();
List<CommitParents> commits=partReader.readNextBlock(statusUpdater);
for (int i=0; i < commits.size(); i++) {
CommitParents commit=commits.get(i);
if (fakeCommits.base != null && i == fakeCommits.insertAbove) {
commitParentsList.addAll(fakeCommits.commits);
for (CommitParents fakeCommit : fakeCommits.commits) {
visible.addAll(fakeCommit.getParentHashes());
}
}
if (visible.contains(commit.getCommitHash())) {
commitParentsList.add(commit);
visible.addAll(commit.getParentHashes());
}
 else {
System.out.println("Hidden: " + commit.getCommitHash());
}
}
state=State.PART_LOG_READER;
dataPack=DataPackImpl.buildDataPack(commitParentsList,allRefs,statusUpdater,myProject);
break;
case PART_LOG_READER:
List<CommitParents> nextPart=partReader.readNextBlock(statusUpdater);
dataPack.appendCommits(nextPart,statusUpdater);
break;
default :
throw new IllegalStateException();
}
}
