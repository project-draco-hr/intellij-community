{
  myProject=project;
  myTableView=new TableView<JsonSchemaMappingsConfigurationBase.Item>();
  myTableView.getTableHeader().setVisible(false);
  myDecorator=ToolbarDecorator.createDecorator(myTableView);
  myDecorator.setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final int[] rows=myTableView.getSelectedRows();
      if (rows != null && rows.length > 0) {
        int cnt=0;
        for (        int row : rows) {
          myTableView.getListTableModel().removeRow(row - cnt);
          ++cnt;
        }
        myTableView.getListTableModel().fireTableDataChanged();
        myTreeUpdater.run();
      }
    }
  }
).setAddAction(new MyAddActionButtonRunnable(project)).disableUpDownActions();
  mySchemaField=new TextFieldWithBrowseButton();
  SwingHelper.installFileCompletionAndBrowseDialog(myProject,mySchemaField,JsonBundle.message("json.schema.add.schema.chooser.title"),FileChooserDescriptorFactory.createSingleFileDescriptor());
  attachNavigateToSchema();
  myError=SwingHelper.createHtmlLabel("Warning: conflicting mappings. <a href=\"#\">Show details</a>",null,new Consumer<String>(){
    @Override public void consume(    String s){
      final BalloonBuilder builder=JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(myErrorText,UIUtil.getBalloonWarningIcon(),MessageType.WARNING.getPopupBackground(),null);
      builder.setDisposable(JsonSchemaMappingsView.this);
      builder.setHideOnClickOutside(true);
      builder.setCloseButtonEnabled(true);
      builder.createBalloon().showInCenterOf(myError);
    }
  }
);
  final FormBuilder builder=FormBuilder.createFormBuilder();
  final JBLabel label=new JBLabel("JSON schema file:");
  builder.addLabeledComponent(label,mySchemaField);
  label.setBorder(JBUI.Borders.empty(0,10,0,10));
  mySchemaField.setBorder(JBUI.Borders.empty(0,0,0,10));
  final JPanel wrapper=new JPanel(new BorderLayout());
  wrapper.setBorder(JBUI.Borders.empty(0,10,0,10));
  myErrorIcon=new JBLabel(UIUtil.getBalloonWarningIcon());
  wrapper.add(myErrorIcon,BorderLayout.WEST);
  wrapper.add(myError,BorderLayout.CENTER);
  builder.addComponent(wrapper);
  builder.addComponentFillVertically(myDecorator.createPanel(),5);
  myComponent=builder.getPanel();
}
