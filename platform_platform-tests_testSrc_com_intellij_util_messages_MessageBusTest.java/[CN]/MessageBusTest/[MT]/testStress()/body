{
  final int threadsNumber=10;
  final int iterationsNumber=100;
  final AtomicReference<Throwable> exception=new AtomicReference<>();
  final CountDownLatch latch=new CountDownLatch(threadsNumber);
  final MessageBus parentBus=MessageBusFactory.newMessageBus("parent");
  List<Thread> threads=new ArrayList<>();
  for (int i=0; i < threadsNumber; i++) {
    Thread thread=new Thread(String.valueOf(i)){
      @Override public void run(){
        try {
          int remains=iterationsNumber;
          while (remains-- > 0) {
            if (exception.get() != null) {
              break;
            }
            new MessageBusImpl(String.format("child-%s-%s",Thread.currentThread().getName(),remains),parentBus);
          }
        }
 catch (        Throwable e) {
          exception.set(e);
        }
 finally {
          latch.countDown();
        }
      }
    }
;
    thread.start();
    threads.add(thread);
  }
  latch.await();
  final Throwable e=exception.get();
  if (e != null) {
    throw e;
  }
  for (  Thread thread : threads) {
    thread.join();
  }
}
