{
  final StringNodeInfo hostInfo=new StringNodeInfo(host.getStringNodes().get(0));
  final char hostQuote=hostInfo.getSingleQuote();
  final PyElementGenerator generator=PyElementGenerator.getInstance(host.getProject());
  final Collection<PyStringLiteralExpression> innerStrings=PsiTreeUtil.collectElementsOfType(element,PyStringLiteralExpression.class);
  for (  PyStringLiteralExpression literal : innerStrings) {
    final List<ASTNode> nodes=literal.getStringNodes();
    if (nodes.size() > 1) {
      return null;
    }
    final StringNodeInfo info=new StringNodeInfo(nodes.get(0));
    final String content=info.getContent();
    if (content.indexOf(hostQuote) >= 0) {
      return null;
    }
    if (!info.isTerminated()) {
      return null;
    }
    if (info.getSingleQuote() == hostQuote) {
      final char targetSingleQuote=hostQuote == '"' ? '\'' : '"';
      final String targetQuote=info.getQuote().replace(hostQuote,targetSingleQuote);
      final String stringWithSwappedQuotes=info.getPrefix() + targetQuote + content+ targetQuote;
      final PsiElement replaced=literal.replace(generator.createStringLiteralAlreadyEscaped(stringWithSwappedQuotes));
      if (literal == element) {
        return replaced;
      }
    }
  }
  return element;
}
