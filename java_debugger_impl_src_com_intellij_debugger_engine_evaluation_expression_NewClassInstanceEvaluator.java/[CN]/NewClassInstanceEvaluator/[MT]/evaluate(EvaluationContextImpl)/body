{
  DebugProcessImpl debugProcess=context.getDebugProcess();
  Object obj=myClassTypeEvaluator.evaluate(context);
  if (!(obj instanceof ClassType)) {
    throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.cannot.evaluate.class.type"));
  }
  ClassType classType=(ClassType)obj;
  Method method=DebuggerUtils.findMethod(classType,JVMNameUtil.CONSTRUCTOR_NAME,myConstructorSignature.getName(debugProcess));
  if (method == null) {
    throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.cannot.resolve.constructor",myConstructorSignature.getDisplayName(debugProcess)));
  }
  List<Value> arguments;
  if (!ArrayUtil.isEmpty(myParamsEvaluators)) {
    arguments=new ArrayList<>(myParamsEvaluators.length);
    for (    Evaluator evaluator : myParamsEvaluators) {
      Object res=evaluator.evaluate(context);
      if (!(res instanceof Value) && res != null) {
        LOG.error("Unable to call newInstance, evaluator " + evaluator + " result is not Value, but "+ res);
      }
      arguments.add((Value)res);
    }
  }
 else {
    arguments=Collections.emptyList();
  }
  ObjectReference objRef;
  try {
    objRef=debugProcess.newInstance(context,classType,method,arguments);
  }
 catch (  EvaluateException e) {
    throw EvaluateExceptionUtil.createEvaluateException(e);
  }
  return objRef;
}
