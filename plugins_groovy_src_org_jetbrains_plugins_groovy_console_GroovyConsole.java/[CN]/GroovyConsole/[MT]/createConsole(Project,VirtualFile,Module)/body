{
  final ProcessHandler processHandler=createProcessHandler(module);
  if (processHandler == null)   return null;
  final String title=GroovyConsoleUtil.getTitle(module);
  final ConsoleViewImpl consoleView=new ConsoleViewImpl(project,true);
  final RunContentDescriptor descriptor=new RunContentDescriptor(consoleView,processHandler,new JPanel(new BorderLayout()),title);
  try {
    final CloseAction closeAction=new CloseAction(defaultExecutor,descriptor,project);
    consoleView.addCustomConsoleAction(closeAction);
    final JComponent consoleViewComponent=consoleView.getComponent();
    final ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,new DefaultActionGroup(consoleView.createConsoleActions()),false);
    toolbar.setTargetComponent(consoleViewComponent);
    final JComponent ui=descriptor.getComponent();
    ui.add(consoleViewComponent,BorderLayout.CENTER);
    ui.add(toolbar.getComponent(),BorderLayout.WEST);
    final GroovyConsole console=new GroovyConsole(project,descriptor,consoleView,processHandler);
    contentFile.putUserData(GROOVY_CONSOLE_TITLE,title);
    contentFile.putUserData(GROOVY_CONSOLE,console);
    contentFile.putUserData(KEY_MODULE,module);
    contentFile.putUserData(MODULE_NAME,module.getName());
    return console;
  }
  finally {
    consoleView.attachToProcess(processHandler);
    processHandler.startNotify();
    processHandler.addProcessListener(new ProcessAdapter(){
      @Override public void processTerminated(      ProcessEvent event){
        contentFile.putUserData(GROOVY_CONSOLE,null);
      }
    }
);
    ExecutionManager.getInstance(project).getContentManager().showRunContent(defaultExecutor,descriptor);
  }
}
