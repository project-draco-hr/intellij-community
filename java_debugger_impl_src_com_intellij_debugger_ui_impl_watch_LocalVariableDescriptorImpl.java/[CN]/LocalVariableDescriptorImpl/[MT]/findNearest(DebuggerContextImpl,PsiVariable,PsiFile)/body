{
  final DebuggerSession session=context.getDebuggerSession();
  if (session != null) {
    try {
      final XDebugSession debugSession=session.getXDebugSession();
      if (debugSession != null) {
        final XSourcePosition position=debugSession.getCurrentPosition();
        final Editor editor=PsiUtilBase.findEditor(psi);
        if (editor != null && position != null && file.getVirtualFile().equals(position.getFile())) {
          final Couple<Collection<TextRange>> usages=IdentifierHighlighterPass.getHighlightUsages(psi,file);
          final List<TextRange> ranges=new ArrayList<TextRange>();
          ranges.addAll(usages.first);
          ranges.addAll(usages.second);
          final int breakPointLine=position.getLine();
          int bestLine=-1;
          boolean hasSameLine=false;
          for (          TextRange range : ranges) {
            final int line=editor.offsetToLogicalPosition(range.getStartOffset()).line;
            if (line > bestLine && line < breakPointLine) {
              bestLine=line;
            }
 else             if (line == breakPointLine) {
              hasSameLine=true;
            }
          }
          if (bestLine > 0) {
            if (hasSameLine && breakPointLine - bestLine > 4) {
              return SourcePosition.createFromLine(file,breakPointLine);
            }
            return SourcePosition.createFromLine(file,bestLine);
          }
        }
      }
    }
 catch (    Exception ignore) {
    }
  }
  return SourcePosition.createFromOffset(file,psi.getTextOffset());
}
