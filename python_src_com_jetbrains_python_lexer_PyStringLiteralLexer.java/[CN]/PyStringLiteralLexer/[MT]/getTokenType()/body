{
  if (myStart >= myEnd)   return null;
  if (myBuffer.charAt(myStart) != '\\' || (myIsRaw && (!isUnicodeMode() || !nextIsUnicodeEscape()))) {
    mySeenEscapedSpacesOnly=false;
    return myOriginalLiteralToken;
  }
  if (myStart + 1 >= myEnd)   return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
  char nextChar=myBuffer.charAt(myStart + 1);
  mySeenEscapedSpacesOnly&=nextChar == ' ';
  if ((nextChar == '\n' || nextChar == ' ' && (mySeenEscapedSpacesOnly || isTrailingSpace(myStart + 2)))) {
    return StringEscapesTokenTypes.VALID_STRING_ESCAPE_TOKEN;
  }
  if (nextChar == 'u' || nextChar == 'U') {
    if (isUnicodeMode()) {
      final int width=nextChar == 'u' ? 4 : 8;
      for (int i=myStart + 2; i < myStart + width + 2; i++) {
        if (i >= myEnd || !StringUtil.isHexDigit(myBuffer.charAt(i)))         return StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;
      }
      return StringEscapesTokenTypes.VALID_STRING_ESCAPE_TOKEN;
    }
 else     return myOriginalLiteralToken;
  }
  if (nextChar == 'x') {
    for (int i=myStart + 2; i < myStart + 4; i++) {
      if (i >= myEnd || !StringUtil.isHexDigit(myBuffer.charAt(i)))       return StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;
    }
    return StringEscapesTokenTypes.VALID_STRING_ESCAPE_TOKEN;
  }
  if (nextChar == 'N' && isUnicodeMode()) {
    int i=myStart + 2;
    if (i >= myEnd || myBuffer.charAt(i) != '{')     return StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;
    i++;
    while (i < myEnd && myBuffer.charAt(i) != '}')     i++;
    if (i >= myEnd)     return StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;
    return StringEscapesTokenTypes.VALID_STRING_ESCAPE_TOKEN;
  }
switch (nextChar) {
case 'a':
case 'b':
case 'f':
case 'n':
case 'r':
case 't':
case 'v':
case '\'':
case '\"':
case '\\':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
    return StringEscapesTokenTypes.VALID_STRING_ESCAPE_TOKEN;
}
return myOriginalLiteralToken;
}
