{
  PsiElement element=PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PyBinaryExpression.class,false);
  if (element == null) {
    return false;
  }
  while (element.getParent() instanceof PyBinaryExpression) {
    element=element.getParent();
  }
  if (((PyBinaryExpression)element).getOperator() != PyTokenTypes.PLUS) {
    return false;
  }
  final Collection<PyExpression> expressions=getSimpleExpressions((PyBinaryExpression)element);
  if (expressions.size() == 0) {
    return false;
  }
  final PyBuiltinCache cache=PyBuiltinCache.getInstance(element);
  for (  PyExpression expression : expressions) {
    if (expression == null) {
      return false;
    }
    final boolean isStringLiteral=expression instanceof PyStringLiteralExpression;
    final boolean isStringReference=PyTypeChecker.match(cache.getStringType(LanguageLevel.forElement(expression)),expression.getType(TypeEvalContext.fast()),TypeEvalContext.fast());
    if (!(isStringLiteral || ((expression instanceof PyReferenceExpression || expression instanceof PyCallExpression) && isStringReference))) {
      return false;
    }
  }
  setText(PyBundle.message("INTN.replace.plus.with.format.operator"));
  return true;
}
