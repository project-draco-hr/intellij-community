{
  int size=cfg.transitions.length;
  boolean[] loopEnters=dfs.loopEnters;
  TIntHashSet[] cycleIncomings=new TIntHashSet[size];
  TIntArrayList[] nonCycleIncomings=new TIntArrayList[size];
  int[] collapsedTo=new int[size];
  int[] queue=new int[size];
  int top;
  for (int i=0; i < size; i++) {
    if (loopEnters[i]) {
      cycleIncomings[i]=new TIntHashSet();
    }
    nonCycleIncomings[i]=new TIntArrayList();
    collapsedTo[i]=i;
  }
  for (  Edge edge : dfs.back) {
    cycleIncomings[edge.to].add(edge.from);
  }
  for (  Edge edge : dfs.nonBack) {
    nonCycleIncomings[edge.to].add(edge.from);
  }
  for (int w=size - 1; w >= 0; w--) {
    top=0;
    TIntHashSet p=cycleIncomings[w];
    if (p == null) {
      continue;
    }
    TIntIterator iter=p.iterator();
    while (iter.hasNext()) {
      queue[top++]=iter.next();
    }
    while (top > 0) {
      int x=queue[--top];
      TIntArrayList incoming=nonCycleIncomings[x];
      for (int i=0; i < incoming.size(); i++) {
        int y1=collapsedTo[incoming.getQuick(i)];
        if (!dfs.isDescendant(y1,w)) {
          return false;
        }
        if (y1 != w && p.add(y1)) {
          queue[top++]=y1;
        }
      }
    }
    iter=p.iterator();
    while (iter.hasNext()) {
      collapsedTo[iter.next()]=w;
    }
  }
  return true;
}
