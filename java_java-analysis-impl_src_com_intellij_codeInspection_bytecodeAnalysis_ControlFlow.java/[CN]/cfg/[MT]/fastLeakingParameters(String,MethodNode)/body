{
  Frame<IParamsValue>[] frames=new Analyzer<IParamsValue>(new IParametersUsage(methodNode)).analyze(className,methodNode);
  InsnList insns=methodNode.instructions;
  ILeakingParametersCollector collector=new ILeakingParametersCollector(methodNode);
  for (int i=0; i < frames.length; i++) {
    AbstractInsnNode insnNode=insns.get(i);
    Frame<IParamsValue> frame=frames[i];
    if (frame != null) {
switch (insnNode.getType()) {
case AbstractInsnNode.LABEL:
case AbstractInsnNode.LINE:
case AbstractInsnNode.FRAME:
        break;
default :
      frame.execute(insnNode,collector);
  }
}
}
int leakingMask=collector.leaking;
boolean[] result=new boolean[collector.arity];
for (int i=0; i < result.length; i++) {
result[i]=(leakingMask & (1 << i)) != 0;
}
return result;
}
