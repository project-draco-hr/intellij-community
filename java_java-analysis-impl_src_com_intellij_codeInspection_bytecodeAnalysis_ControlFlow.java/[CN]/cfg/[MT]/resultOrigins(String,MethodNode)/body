{
  Frame<SourceValue>[] frames=new Analyzer<SourceValue>(new MinimalOriginInterpreter()).analyze(className,methodNode);
  InsnList insns=methodNode.instructions;
  TIntHashSet result=new TIntHashSet();
  for (int i=0; i < frames.length; i++) {
    AbstractInsnNode insnNode=insns.get(i);
    Frame<SourceValue> frame=frames[i];
    if (frame != null) {
switch (insnNode.getOpcode()) {
case ARETURN:
case IRETURN:
case LRETURN:
case FRETURN:
case DRETURN:
        for (        AbstractInsnNode sourceInsn : frame.pop().insns) {
          result.add(insns.indexOf(sourceInsn));
        }
      break;
default :
    break;
}
}
}
return result;
}
