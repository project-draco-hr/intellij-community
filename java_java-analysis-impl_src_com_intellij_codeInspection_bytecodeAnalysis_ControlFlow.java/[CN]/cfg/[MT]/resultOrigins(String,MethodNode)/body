{
  Type returnType=Type.getReturnType(methodNode.desc);
  Frame<SourceValue>[] frames=new Analyzer<SourceValue>(new MinimalOriginInterpreter(isReferenceType(returnType))).analyze(className,methodNode);
  InsnList insns=methodNode.instructions;
  boolean[] result=new boolean[insns.size()];
  for (int i=0; i < frames.length; i++) {
    AbstractInsnNode insnNode=insns.get(i);
    Frame<SourceValue> frame=frames[i];
    if (frame != null) {
switch (insnNode.getOpcode()) {
case ARETURN:
case IRETURN:
case LRETURN:
case FRETURN:
case DRETURN:
        for (        AbstractInsnNode sourceInsn : frame.pop().insns) {
          result[insns.indexOf(sourceInsn)]=true;
        }
      break;
default :
    break;
}
}
}
return result;
}
