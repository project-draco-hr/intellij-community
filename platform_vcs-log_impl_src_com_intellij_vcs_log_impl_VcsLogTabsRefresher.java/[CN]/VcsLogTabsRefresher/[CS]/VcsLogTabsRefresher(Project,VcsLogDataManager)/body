{
  myDataManager=dataManager;
  myToolWindowManager=(ToolWindowManagerImpl)ToolWindowManager.getInstance(project);
  myToolWindow=ObjectUtils.assertNotNull((ToolWindowImpl)myToolWindowManager.getToolWindow(TOOLWINDOW_ID));
  Disposer.register(dataManager,this);
  myPostponedEventsListener=new MyRefreshPostponedEventsListener();
  myToolWindow.getContentManager().addContentManagerListener(myPostponedEventsListener);
  myToolWindowManager.addToolWindowManagerListener(myPostponedEventsListener);
  myDataManager.addConsumer(new Consumer<DataPack>(){
    @Override public void consume(    DataPack dataPack){
      for (      Map.Entry<String,VcsLogFilterer> tabAndFilterer : myTabToFiltererMap.entrySet()) {
        boolean visible=isOneOfTabsVisible(Collections.singleton(tabAndFilterer.getKey()));
        refreshFilterer(tabAndFilterer.getValue(),visible);
      }
    }
  }
);
}
