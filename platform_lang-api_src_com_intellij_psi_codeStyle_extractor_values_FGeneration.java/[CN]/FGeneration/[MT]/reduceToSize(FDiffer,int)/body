{
  List<Pair<Integer,Integer>> ranges=new ArrayList<Pair<Integer,Integer>>(myGensPool.size());
  int i=0;
  for (  final FGens gens : myGensPool) {
    int range=differ.getDifference(gens);
    ranges.add(Pair.create(range,i++));
    if (range == 0) {
      myAge=GEN_COUNT;
      newPoolSize=1;
      break;
    }
  }
  Collections.sort(ranges,new Comparator<Pair<Integer,Integer>>(){
    @Override public int compare(    Pair<Integer,Integer> o1,    Pair<Integer,Integer> o2){
      return o1.first - o2.first;
    }
  }
);
  final ArrayList<FGens> gensPool=new ArrayList<FGens>(newPoolSize);
  int count=0;
  int worseForward=0;
  for (  final Pair<Integer,Integer> pair : ranges) {
    if (count >= newPoolSize) {
      break;
    }
    FGens gens=myGensPool.get(pair.second);
    gensPool.add(gens);
    ++count;
    worseForward=pair.first;
  }
  myGensPool=gensPool;
  return worseForward;
}
