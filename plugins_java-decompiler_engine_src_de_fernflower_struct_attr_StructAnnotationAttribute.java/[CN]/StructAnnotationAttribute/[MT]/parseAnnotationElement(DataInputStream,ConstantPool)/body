{
  try {
    int tag=data.readUnsignedByte();
switch (tag) {
case 'e':
      String classname=pool.getPrimitiveConstant(data.readUnsignedShort()).getString();
    String constname=pool.getPrimitiveConstant(data.readUnsignedShort()).getString();
  FieldDescriptor descr=FieldDescriptor.parseDescriptor(classname);
return new FieldExprent(constname,descr.type.value,true,null,descr);
case 'c':
String descriptor=pool.getPrimitiveConstant(data.readUnsignedShort()).getString();
VarType type=FieldDescriptor.parseDescriptor(descriptor).type;
String value;
switch (type.type) {
case CodeConstants.TYPE_OBJECT:
value=type.value;
break;
case CodeConstants.TYPE_BYTE:
case CodeConstants.TYPE_CHAR:
case CodeConstants.TYPE_DOUBLE:
case CodeConstants.TYPE_FLOAT:
case CodeConstants.TYPE_INT:
case CodeConstants.TYPE_LONG:
case CodeConstants.TYPE_SHORT:
case CodeConstants.TYPE_BOOLEAN:
case CodeConstants.TYPE_VOID:
default :
throw new RuntimeException("invalid class type!");
}
return new ConstExprent(VarType.VARTYPE_CLASS,value);
case '[':
int len=data.readUnsignedShort();
List<Exprent> lst=new ArrayList<Exprent>();
for (int i=0; i < len; i++) {
lst.add(parseAnnotationElement(data,pool));
}
VarType newtype;
if (lst.isEmpty()) {
newtype=new VarType(CodeConstants.TYPE_OBJECT,1,"java/lang/Object");
}
 else {
VarType eltype=lst.get(0).getExprType();
newtype=new VarType(eltype.type,1,eltype.value);
}
NewExprent newexpr=new NewExprent(newtype,new ArrayList<Exprent>());
newexpr.setDirectArrayInit(true);
newexpr.setLstArrayElements(lst);
return newexpr;
case '@':
return parseAnnotation(data,pool);
default :
PrimitiveConstant cn=pool.getPrimitiveConstant(data.readUnsignedShort());
switch (tag) {
case 'B':
return new ConstExprent(VarType.VARTYPE_BYTE,cn.value);
case 'C':
return new ConstExprent(VarType.VARTYPE_CHAR,cn.value);
case 'D':
return new ConstExprent(VarType.VARTYPE_DOUBLE,cn.value);
case 'F':
return new ConstExprent(VarType.VARTYPE_FLOAT,cn.value);
case 'I':
return new ConstExprent(VarType.VARTYPE_INT,cn.value);
case 'J':
return new ConstExprent(VarType.VARTYPE_LONG,cn.value);
case 'S':
return new ConstExprent(VarType.VARTYPE_SHORT,cn.value);
case 'Z':
return new ConstExprent(VarType.VARTYPE_BOOLEAN,cn.value);
case 's':
return new ConstExprent(VarType.VARTYPE_STRING,cn.value);
default :
throw new RuntimeException("invalid element type!");
}
}
}
 catch (IOException ex) {
throw new RuntimeException(ex);
}
}
