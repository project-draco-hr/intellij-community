{
  final Collection<VirtualFile> readonly=new THashSet<VirtualFile>();
  final Collection<VirtualFile> failed=new THashSet<VirtualFile>();
  boolean seenNonWritablePsiFilesWithoutVirtualFile=false;
  for (  PsiElement element : elements) {
    if (element instanceof PsiDirectory) {
      final PsiDirectory dir=(PsiDirectory)element;
      final VirtualFile vFile=dir.getVirtualFile();
      if (vFile.getFileSystem().isReadOnly()) {
        failed.add(vFile);
      }
 else       if (recursively) {
        collectReadOnlyFiles(vFile,readonly);
      }
 else {
        readonly.add(vFile);
      }
    }
 else     if (element instanceof PsiDirectoryContainer) {
      final PsiDirectory[] directories=((PsiDirectoryContainer)element).getDirectories();
      for (      PsiDirectory directory : directories) {
        VirtualFile virtualFile=directory.getVirtualFile();
        if (recursively) {
          if (virtualFile.getFileSystem().isReadOnly()) {
            failed.add(virtualFile);
          }
 else {
            collectReadOnlyFiles(virtualFile,readonly);
          }
        }
 else         if (virtualFile.getFileSystem().isReadOnly()) {
          failed.add(virtualFile);
        }
 else {
          readonly.add(virtualFile);
        }
      }
    }
 else {
      PsiFile file=element.getContainingFile();
      if (file == null) {
        if (!element.isWritable()) {
          seenNonWritablePsiFilesWithoutVirtualFile=true;
        }
      }
 else {
        final VirtualFile vFile=file.getVirtualFile();
        if (vFile != null) {
          readonly.add(vFile);
        }
 else         if (!element.isWritable()) {
          seenNonWritablePsiFilesWithoutVirtualFile=true;
        }
      }
    }
  }
  ReadonlyStatusHandler.OperationStatus status=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(readonly);
  ContainerUtil.addAll(failed,status.getReadonlyFiles());
  if (notifyOnFail && (!failed.isEmpty() || seenNonWritablePsiFilesWithoutVirtualFile && readonly.isEmpty())) {
    StringBuilder message=new StringBuilder(messagePrefix).append('\n');
    int i=0;
    for (    VirtualFile virtualFile : failed) {
      String subj=RefactoringBundle.message(virtualFile.isDirectory() ? "directory.description" : "file.description",virtualFile.getPresentableUrl());
      if (virtualFile.getFileSystem().isReadOnly()) {
        message.append(RefactoringBundle.message("0.is.located.in.a.jar.file",subj)).append('\n');
      }
 else {
        message.append(RefactoringBundle.message("0.is.read.only",subj)).append('\n');
      }
      if (i++ > 20) {
        message.append("...\n");
        break;
      }
    }
    showErrorMessage(RefactoringBundle.message("error.title"),message.toString(),null,project);
    return false;
  }
  return failed.isEmpty();
}
