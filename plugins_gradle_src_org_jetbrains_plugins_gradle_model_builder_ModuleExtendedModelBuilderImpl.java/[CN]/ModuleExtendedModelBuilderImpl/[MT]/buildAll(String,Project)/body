{
  final String moduleName=project.getName();
  final String moduleGroup=project.getGroup().toString();
  final String moduleVersion=project.getVersion().toString();
  final ModuleExtendedModelImpl moduleVersionModel=new ModuleExtendedModelImpl(moduleName,moduleGroup,moduleVersion);
  final List<File> artifacts=new ArrayList<File>();
  for (  Task task : project.getTasks()) {
    if (task instanceof Jar) {
      Jar jar=(Jar)task;
      artifacts.add(jar.getArchivePath());
    }
  }
  moduleVersionModel.setArtifacts(artifacts);
  final Set<String> testDirectories=new HashSet<String>();
  for (  Task task : project.getTasks()) {
    if (task instanceof Test) {
      Test test=(Test)task;
      if (test.hasProperty(TEST_SRC_DIRS_PROPERTY)) {
        Object testSrcDirs=test.property(TEST_SRC_DIRS_PROPERTY);
        if (testSrcDirs instanceof Iterable) {
          for (          Object dir : Iterable.class.cast(testSrcDirs)) {
            addFilePath(testDirectories,dir);
          }
        }
      }
    }
  }
  final Set<String> javaDirectories=new HashSet<String>();
  final Set<String> resourceDirectories=new HashSet<String>();
  if (project.hasProperty(SOURCE_SETS_PROPERTY)) {
    Object sourceSets=project.property(SOURCE_SETS_PROPERTY);
    if (sourceSets instanceof SourceSetContainer) {
      SourceSetContainer sourceSetContainer=(SourceSetContainer)sourceSets;
      for (      SourceSet sourceSet : sourceSetContainer) {
        for (        File javaSrcDir : sourceSet.getAllJava().getSrcDirs()) {
          addFilePath(javaDirectories,javaSrcDir);
        }
        for (        File resourcesSrcDir : sourceSet.getResources().getSrcDirs()) {
          addFilePath(resourceDirectories,resourcesSrcDir);
        }
      }
    }
  }
  File projectDir=project.getProjectDir();
  IdeaContentRootImpl contentRoot=new IdeaContentRootImpl(projectDir);
  enrichDataFromIdeaPlugin(project,contentRoot,javaDirectories,testDirectories);
  javaDirectories.removeAll(testDirectories);
  javaDirectories.removeAll(resourceDirectories);
  final Set<String> testResourceDirectories=new HashSet<String>(resourceDirectories);
  testResourceDirectories.retainAll(testDirectories);
  testDirectories.removeAll(resourceDirectories);
  resourceDirectories.removeAll(testResourceDirectories);
  for (  String javaDir : javaDirectories) {
    contentRoot.addSourceDirectory(new IdeaSourceDirectoryImpl(new File(javaDir)));
  }
  for (  String testDir : testDirectories) {
    contentRoot.addTestDirectory(new IdeaSourceDirectoryImpl(new File(testDir)));
  }
  for (  String resourceDir : resourceDirectories) {
    contentRoot.addResourceDirectory(new IdeaSourceDirectoryImpl(new File(resourceDir)));
  }
  for (  String testResourceDir : testResourceDirectories) {
    contentRoot.addTestResourceDirectory(new IdeaSourceDirectoryImpl(new File(testResourceDir)));
  }
  moduleVersionModel.setContentRoots(Collections.<ExtIdeaContentRoot>singleton(contentRoot));
  return moduleVersionModel;
}
