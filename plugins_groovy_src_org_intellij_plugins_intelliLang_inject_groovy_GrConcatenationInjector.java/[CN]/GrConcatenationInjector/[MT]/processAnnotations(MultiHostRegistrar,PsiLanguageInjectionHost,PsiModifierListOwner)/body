{
  final Pair<String,? extends Set<String>> pair=Configuration.getInstance().getAdvancedConfiguration().getLanguageAnnotationPair();
  final PsiAnnotation[] annotations=getAnnotationFrom(annotationOwner,pair,true,true);
  if (annotations.length > 0) {
    final String id=AnnotationUtilEx.calcAnnotationValue(annotations,"value");
    final String prefix=AnnotationUtilEx.calcAnnotationValue(annotations,"prefix");
    final String suffix=AnnotationUtilEx.calcAnnotationValue(annotations,"suffix");
    final BaseInjection injection=new BaseInjection(GroovyLanguageInjectionSupport.GROOVY_SUPPORT_ID);
    if (prefix != null)     injection.setPrefix(prefix);
    if (suffix != null)     injection.setSuffix(suffix);
    if (id != null)     injection.setInjectedLanguageId(id);
    final Language language=InjectedLanguage.findLanguageById(injection.getInjectedLanguageId());
    Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange> info=Trinity.create(host,InjectedLanguage.create(injection.getInjectedLanguageId(),prefix,suffix,true),ElementManipulators.getManipulator(host).getRangeInElement(host));
    InjectorUtils.registerInjection(language,Collections.singletonList(info),host.getContainingFile(),registrar);
  }
}
