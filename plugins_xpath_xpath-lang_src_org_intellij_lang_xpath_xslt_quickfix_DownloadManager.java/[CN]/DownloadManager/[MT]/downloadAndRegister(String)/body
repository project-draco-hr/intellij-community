{
  final ExternalResourceManager resourceManager=ExternalResourceManager.getInstance();
  File file=null;
  try {
    final URLConnection urlConnection=HttpConfigurable.getInstance().openConnection(location);
    urlConnection.connect();
    final InputStream in=urlConnection.getInputStream();
    final OutputStream out;
    try {
      final int total=urlConnection.getContentLength();
      final String name=Integer.toHexString(System.identityHashCode(this)) + "_" + Integer.toHexString(location.hashCode())+ "_"+ location.substring(location.lastIndexOf('/') + 1);
      file=new File(myResourcePath,name.lastIndexOf('.') == -1 ? name + ".xml" : name);
      out=new FileOutputStream(file);
      try {
        NetUtils.copyStreamContent(myProgress,in,out,total);
      }
  finally {
        out.close();
      }
    }
  finally {
      in.close();
    }
    try {
      final File _file=file;
      final Set<String>[] resourceDependencies=new Set[1];
      new WriteAction(){
        @Override protected void run(        Result result) throws Throwable {
          final VirtualFile vf=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(_file);
          if (vf != null) {
            final PsiFile psiFile=PsiManager.getInstance(myProject).findFile(vf);
            if (psiFile != null && isAccepted(psiFile)) {
              resourceDependencies[0]=getResourceDependencies(psiFile);
              resourceManager.addResource(location,_file.getAbsolutePath());
            }
 else {
              ApplicationManager.getApplication().invokeLater(new Runnable(){
                @Override public void run(){
                  Messages.showErrorDialog(myProject,"Not a valid file: " + vf.getPresentableUrl(),"Download Problem");
                }
              }
,myProject.getDisposed());
            }
          }
        }
      }
.execute();
      if (resourceDependencies[0] != null) {
        for (        String s : resourceDependencies[0]) {
          myProgress.checkCanceled();
          myProgress.setFraction(0);
          fetch(s);
        }
      }
    }
 catch (    Error err) {
      Throwable e=err.getCause();
      if (e instanceof InterruptedException) {
      }
 else       if (e instanceof InvocationTargetException) {
        final Throwable targetException=((InvocationTargetException)e).getTargetException();
        if (targetException instanceof RuntimeException) {
          throw (RuntimeException)targetException;
        }
 else         if (targetException instanceof IOException) {
          throw (IOException)targetException;
        }
 else         if (targetException instanceof InterruptedException) {
        }
 else {
          Logger.getInstance(getClass().getName()).error(e);
        }
      }
 else {
        throw err;
      }
    }
  }
 catch (  IOException e) {
    throw new DownloadException(location,e);
  }
 finally {
    if (file != null && resourceManager.getResourceLocation(location) == location) {
      file.delete();
    }
  }
}
