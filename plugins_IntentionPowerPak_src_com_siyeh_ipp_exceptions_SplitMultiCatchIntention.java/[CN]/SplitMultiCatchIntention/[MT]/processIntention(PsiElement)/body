{
  final PsiElement parent=element.getParent();
  if (!(parent instanceof PsiCatchSection)) {
    return;
  }
  final PsiCatchSection catchSection=(PsiCatchSection)parent;
  final PsiElement grandParent=catchSection.getParent();
  if (!(grandParent instanceof PsiTryStatement)) {
    return;
  }
  final PsiParameter parameter=catchSection.getParameter();
  if (parameter == null) {
    return;
  }
  final PsiType type=parameter.getType();
  if (!(type instanceof PsiDisjunctionType)) {
    return;
  }
  final PsiElementFactory factory=JavaPsiFacade.getElementFactory(element.getProject());
  final List<PsiTypeElement> disjunctions=PsiTreeUtil.getChildrenOfTypeAsList(parameter.getTypeElement(),PsiTypeElement.class);
  for (int i=0; i < disjunctions.size(); i++) {
    final PsiCatchSection copy=(PsiCatchSection)catchSection.copy();
    final PsiTypeElement typeElement=assertNotNull(assertNotNull(copy.getParameter()).getTypeElement());
    final PsiTypeElement newTypeElement=factory.createTypeElementFromText(disjunctions.get(i).getText(),catchSection);
    typeElement.replace(newTypeElement);
    grandParent.addBefore(copy,catchSection);
    if (i == 0) {
      final PsiModifierList modifierList=parameter.getModifierList();
      if (modifierList != null) {
        for (        PsiAnnotation annotation : modifierList.getAnnotations()) {
          if (PsiImplUtil.findApplicableTarget(annotation,PsiAnnotation.TargetType.TYPE_USE) == PsiAnnotation.TargetType.TYPE_USE) {
            annotation.delete();
          }
        }
      }
    }
  }
  catchSection.delete();
}
