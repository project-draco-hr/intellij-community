{
  if (!PsiUtil.isLanguageLevel7OrHigher(element)) {
    return false;
  }
  if (!(element instanceof PsiReferenceExpression)) {
    return false;
  }
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)element;
  if (PsiUtil.isAccessedForWriting(referenceExpression)) {
    return false;
  }
  final PsiElement target=referenceExpression.resolve();
  if (!(target instanceof PsiVariable)) {
    return false;
  }
  final PsiVariable variable=(PsiVariable)target;
  if (ClassUtils.findClass("java.util.Objects",element) == null) {
    return false;
  }
  final PsiAnnotation annotation=NullableNotNullManager.getInstance(variable.getProject()).getNotNullAnnotation(variable,true);
  if (annotation != null && annotation.isWritable()) {
    return true;
  }
  final PsiStatement referenceStatement=PsiTreeUtil.getParentOfType(referenceExpression,PsiStatement.class);
  final PsiElement parent=referenceStatement != null ? referenceStatement.getParent() : null;
  if (!(parent instanceof PsiCodeBlock)) {
    return false;
  }
  final PsiCodeBlock codeBlock=(PsiCodeBlock)parent;
  final PsiStatement[] statements=codeBlock.getStatements();
  for (  PsiStatement statement : statements) {
    if (statement == referenceStatement) {
      return false;
    }
    if (isNotNullAssertion(statement,variable) || isIfStatementNullCheck(statement,variable)) {
      return true;
    }
  }
  return false;
}
