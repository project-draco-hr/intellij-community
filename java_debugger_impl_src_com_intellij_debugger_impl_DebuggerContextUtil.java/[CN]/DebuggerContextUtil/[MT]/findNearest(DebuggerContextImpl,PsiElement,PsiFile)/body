{
  final DebuggerSession session=context.getDebuggerSession();
  if (session != null) {
    try {
      final XDebugSession debugSession=session.getXDebugSession();
      if (debugSession != null) {
        final XSourcePosition position=debugSession.getCurrentPosition();
        Editor editor=((FileEditorManagerImpl)FileEditorManager.getInstance(file.getProject())).getSelectedTextEditor(true);
        if (editor != null && position != null && file.getVirtualFile().equals(position.getFile())) {
          PsiMethod method=PsiTreeUtil.getParentOfType(PositionUtil.getContextElement(context),PsiMethod.class,false);
          final Couple<Collection<TextRange>> usages=IdentifierHighlighterPass.getHighlightUsages(psi,method != null ? method : file,false);
          final List<TextRange> ranges=new ArrayList<TextRange>();
          ranges.addAll(usages.first);
          ranges.addAll(usages.second);
          final int breakPointLine=position.getLine();
          int bestLine=-1;
          boolean hasSameLine=false;
          for (          TextRange range : ranges) {
            final int line=editor.offsetToLogicalPosition(range.getStartOffset()).line;
            if (line > bestLine && line < breakPointLine) {
              bestLine=line;
            }
 else             if (line == breakPointLine) {
              hasSameLine=true;
            }
          }
          if (bestLine > -1) {
            return SourcePosition.createFromLine(file,hasSameLine ? breakPointLine : bestLine);
          }
        }
      }
    }
 catch (    Exception ignore) {
    }
  }
  return null;
}
