{
  ApplicationManager.getApplication().assertIsDispatchThread();
  final DebuggerContextImpl context=manager.getContext();
  final DebuggerSession session=context.getDebuggerSession();
  if (session != null) {
    session.getProcess().getManagerThread().schedule(new DebuggerCommandImpl(){
      @Override public Priority getPriority(){
        return Priority.HIGH;
      }
      @Override protected void action() throws Exception {
        SuspendContextImpl threadSuspendContext=SuspendManagerUtil.getSuspendContextForThread(context.getSuspendContext(),stackFrame.threadProxy());
        final DebuggerContextImpl newContext=DebuggerContextImpl.createDebuggerContext(session,threadSuspendContext,stackFrame.threadProxy(),stackFrame);
        DebuggerInvocationUtil.swingInvokeLater(session.getProject(),new Runnable(){
          @Override public void run(){
            manager.setState(newContext,session.getState(),DebuggerSession.Event.REFRESH,null);
          }
        }
);
      }
    }
);
  }
 else {
    manager.setState(DebuggerContextImpl.EMPTY_CONTEXT,DebuggerSession.State.DISPOSED,DebuggerSession.Event.REFRESH,null);
  }
}
