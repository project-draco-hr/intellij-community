{
  return new CompiledPattern(){
    @Override protected SubstitutionHandler doCreateSubstitutionHandler(    String name,    boolean target,    int minOccurs,    int maxOccurs,    boolean greedy){
      return new MySubstitutionHandler(name,target,minOccurs,maxOccurs,greedy);
    }
    @Override public String[] getTypedVarPrefixes(){
      return getVarPrefixes();
    }
    @Override public boolean isTypedVar(    String str){
      for (      String prefix : getVarPrefixes()) {
        if (str.startsWith(prefix)) {
          return true;
        }
      }
      return false;
    }
    @Override public String getTypedVarString(    PsiElement element){
      final PsiElement initialElement=element;
      PsiElement child=SkippingHandler.getOnlyNonWhitespaceChild(element);
      while (child != element && child != null && !(child instanceof LeafElement)) {
        element=child;
        child=SkippingHandler.getOnlyNonWhitespaceChild(element);
      }
      return child instanceof LeafElement ? element.getText() : initialElement.getText();
    }
  }
;
}
