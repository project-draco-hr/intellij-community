{
  final boolean[] result={true};
  root.accept(new PsiRecursiveElementWalkingVisitor(){
    @Override public void visitElement(    PsiElement element){
      super.visitElement(element);
      if (element instanceof LeafElement) {
        return;
      }
      final EquivalenceDescriptorProvider provider=EquivalenceDescriptorProvider.getInstance(element);
      if (provider == null) {
        return;
      }
      final EquivalenceDescriptor descriptor=provider.buildDescriptor(element);
      if (descriptor == null) {
        return;
      }
      for (      SingleChildDescriptor childDescriptor : descriptor.getSingleChildDescriptors()) {
        if (childDescriptor.getType() == SingleChildDescriptor.MyType.OPTIONALLY_IN_PATTERN && childDescriptor.getElement() == null) {
          result[0]=false;
        }
      }
      for (      MultiChildDescriptor childDescriptor : descriptor.getMultiChildDescriptors()) {
        if (childDescriptor.getType() == MultiChildDescriptor.MyType.OPTIONALLY_IN_PATTERN) {
          PsiElement[] elements=childDescriptor.getElements();
          if (elements == null || elements.length == 0) {
            result[0]=false;
          }
        }
      }
    }
  }
);
  return result[0];
}
