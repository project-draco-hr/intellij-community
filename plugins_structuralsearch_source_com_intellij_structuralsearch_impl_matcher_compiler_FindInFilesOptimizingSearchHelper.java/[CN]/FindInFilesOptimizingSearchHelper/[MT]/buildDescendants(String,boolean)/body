{
  if (!doOptimizing())   return Collections.emptyList();
  PsiShortNamesCache cache=JavaPsiFacade.getInstance(context.getProject()).getShortNamesCache();
  SearchScope scope=context.getOptions().getScope();
  PsiClass[] classes=cache.getClassesByName(className,(GlobalSearchScope)scope);
  final List<PsiElement> results=new ArrayList<PsiElement>();
  PsiElementProcessor<PsiClass> processor=new PsiElementProcessor<PsiClass>(){
    public boolean execute(    PsiClass element){
      results.add(element);
      return true;
    }
  }
;
  for (  PsiClass aClass : classes) {
    ClassInheritorsSearch.search(aClass,scope,true).forEach(new PsiElementProcessorAdapter<PsiClass>(processor));
  }
  if (includeSelf) {
    for (    PsiClass aClass : classes) {
      results.add(aClass);
    }
  }
  return results;
}
