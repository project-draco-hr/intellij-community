{
  return new Iterator<V>(){
    private final Iterator<T> subClassIterator=subClasses.iterator();
{
synchronized (lock) {
        subClassIterator.next();
      }
    }
    @Override public boolean hasNext(){
synchronized (lock) {
        if (subClassIterator.hasNext())         return true;
      }
      processMoreSubclasses(subClassIterator);
synchronized (lock) {
        return subClassIterator.hasNext();
      }
    }
    @Override public V next(){
      T next;
synchronized (lock) {
        next=subClassIterator.next();
      }
      return myAnchorToValueConvertor.fun(next);
    }
  }
;
}
