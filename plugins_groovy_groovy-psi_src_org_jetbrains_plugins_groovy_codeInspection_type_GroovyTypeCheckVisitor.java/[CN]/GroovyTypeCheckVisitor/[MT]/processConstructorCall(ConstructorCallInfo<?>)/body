{
  if (hasErrorElements(info.getArgumentList()))   return;
  if (!checkCannotInferArgumentTypes(info))   return;
  final GroovyResolveResult constructorResolveResult=info.advancedResolve();
  final PsiElement constructor=constructorResolveResult.getElement();
  if (constructor != null) {
    if (!checkConstructorApplicability(constructorResolveResult,info,true))     return;
  }
 else {
    final GroovyResolveResult[] results=info.multiResolve();
    if (results.length > 0) {
      for (      GroovyResolveResult result : results) {
        PsiElement resolved=result.getElement();
        if (resolved instanceof PsiMethod) {
          if (!checkConstructorApplicability(result,info,false))           return;
        }
      }
      registerError(info.getElementToHighlight(),GroovyBundle.message("constructor.call.is.ambiguous"),null,ProblemHighlightType.GENERIC_ERROR);
    }
 else {
      final GrExpression[] expressionArguments=info.getExpressionArguments();
      final boolean hasClosureArgs=info.getClosureArguments().length > 0;
      final boolean hasNamedArgs=info.getNamedArguments().length > 0;
      if (hasClosureArgs || hasNamedArgs && expressionArguments.length > 0 || !hasNamedArgs && expressionArguments.length > 0 && !isOnlyOneMapParam(expressionArguments)) {
        final GroovyResolveResult[] resolveResults=info.multiResolveClass();
        if (resolveResults.length == 1) {
          final PsiElement element=resolveResults[0].getElement();
          if (element instanceof PsiClass) {
            registerError(info.getElementToHighlight(),GroovyBundle.message("cannot.apply.default.constructor",((PsiClass)element).getName()),null,ProblemHighlightType.GENERIC_ERROR);
            return;
          }
        }
      }
    }
  }
  checkNamedArgumentsType(info);
}
