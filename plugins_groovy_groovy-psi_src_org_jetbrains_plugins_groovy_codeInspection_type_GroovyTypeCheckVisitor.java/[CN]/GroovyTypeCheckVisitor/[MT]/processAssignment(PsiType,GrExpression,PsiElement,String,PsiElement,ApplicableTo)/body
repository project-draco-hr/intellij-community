{
{
    final GrListOrMap initializer=getTupleInitializer(expression);
    if (initializer != null) {
      processConstructorCall(new GrListOrMapInfo(initializer));
      return;
    }
  }
  if (PsiUtil.isRawClassMemberAccess(expression))   return;
  if (checkForImplicitEnumAssigning(expectedType,expression,expression))   return;
  final PsiType actualType=expression.getType();
  if (actualType == null)   return;
  final ConversionResult result=TypesUtil.canAssign(expectedType,actualType,context,position);
  if (result == ConversionResult.OK)   return;
  final List<LocalQuickFix> fixes=ContainerUtil.newArrayList();
{
    fixes.add(new GrCastFix(expectedType,expression));
    final String varName=getLValueVarName(toHighlight);
    if (varName != null) {
      fixes.add(new GrChangeVariableType(actualType,varName));
    }
  }
  final String message=GroovyBundle.message(messageKey,actualType.getPresentableText(),expectedType.getPresentableText());
  registerError(toHighlight,message,fixes.toArray(new LocalQuickFix[fixes.size()]),result == ConversionResult.ERROR ? ProblemHighlightType.GENERIC_ERROR : ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
}
