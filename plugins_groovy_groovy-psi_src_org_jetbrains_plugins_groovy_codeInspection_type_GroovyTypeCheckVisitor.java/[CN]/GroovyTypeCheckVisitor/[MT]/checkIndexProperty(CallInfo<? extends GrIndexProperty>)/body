{
  if (hasErrorElements(info.getArgumentList()))   return;
  if (!checkCannotInferArgumentTypes(info))   return;
  final PsiType type=info.getQualifierInstanceType();
  final PsiType[] types=info.getArgumentTypes();
  if (checkSimpleArrayAccess(info,type,types))   return;
  final GroovyResolveResult[] results=info.multiResolve();
  final GroovyResolveResult resolveResult=info.advancedResolve();
  if (resolveResult.getElement() != null) {
    PsiElement resolved=resolveResult.getElement();
    if (resolved instanceof PsiMethod && !resolveResult.isInvokedOnProperty()) {
      checkMethodApplicability(resolveResult,true,info);
    }
 else     if (resolved instanceof GrField) {
      checkCallApplicability(((GrField)resolved).getTypeGroovy(),true,info);
    }
 else     if (resolved instanceof PsiField) {
      checkCallApplicability(((PsiField)resolved).getType(),true,info);
    }
  }
 else   if (results.length > 0) {
    for (    GroovyResolveResult result : results) {
      PsiElement resolved=result.getElement();
      if (resolved instanceof PsiMethod && !result.isInvokedOnProperty()) {
        if (!checkMethodApplicability(result,false,info))         return;
      }
 else       if (resolved instanceof GrField) {
        if (!checkCallApplicability(((GrField)resolved).getTypeGroovy(),false,info))         return;
      }
 else       if (resolved instanceof PsiField) {
        if (!checkCallApplicability(((PsiField)resolved).getType(),false,info))         return;
      }
    }
    registerError(info.getElementToHighlight(),ProblemHighlightType.GENERIC_ERROR,GroovyBundle.message("method.call.is.ambiguous"));
  }
 else {
    final String typesString=buildArgTypesList(types);
    registerError(info.getElementToHighlight(),ProblemHighlightType.GENERIC_ERROR,GroovyBundle.message("cannot.find.operator.overload.method",typesString));
  }
}
