{
  super.visitAssignmentExpression(assignment);
  final GrExpression lValue=assignment.getLValue();
  if (lValue instanceof GrIndexProperty)   return;
  if (!PsiUtil.mightBeLValue(lValue))   return;
  final IElementType opToken=assignment.getOperationTokenType();
  if (opToken != GroovyTokenTypes.mASSIGN)   return;
  final GrExpression rValue=assignment.getRValue();
  if (rValue == null)   return;
  if (lValue instanceof GrReferenceExpression && ((GrReferenceExpression)lValue).resolve() instanceof GrReferenceExpression) {
    return;
  }
  if (lValue instanceof GrTupleExpression) {
    processTupleAssignment(((GrTupleExpression)lValue),rValue);
  }
 else {
    final PsiType targetType;
    if (PsiImplUtil.isSpreadAssignment(lValue)) {
      final PsiType lType=lValue.getNominalType();
      targetType=extractIterableArg(lType);
    }
 else {
      targetType=lValue.getNominalType();
    }
    if (targetType != null) {
      processAssignment(targetType,rValue,lValue,"cannot.assign",assignment,ApplicableTo.ASSIGNMENT);
    }
  }
}
