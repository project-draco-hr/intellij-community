{
  super.visitVariable(variable);
  final PsiType varType=variable.getType();
  final PsiElement parent=variable.getParent();
  if (variable instanceof GrParameter && ((GrParameter)variable).getDeclarationScope() instanceof GrMethod || parent instanceof GrForInClause) {
    return;
  }
 else   if (parent instanceof GrVariableDeclaration && ((GrVariableDeclaration)parent).isTuple()) {
    final GrVariableDeclaration tuple=(GrVariableDeclaration)parent;
    final GrExpression initializer=tuple.getTupleInitializer();
    if (initializer == null)     return;
    if (!(initializer instanceof GrListOrMap)) {
      PsiType type=initializer.getType();
      if (type == null)       return;
      PsiType valueType=extractIterableTypeParameter(type,false);
      processAssignment(varType,valueType,tuple,variable.getNameIdentifierGroovy());
      return;
    }
  }
  GrExpression initializer=variable.getInitializerGroovy();
  if (initializer == null)   return;
  processAssignment(varType,initializer,variable.getNameIdentifierGroovy(),"cannot.assign",variable,ApplicableTo.ASSIGNMENT);
}
