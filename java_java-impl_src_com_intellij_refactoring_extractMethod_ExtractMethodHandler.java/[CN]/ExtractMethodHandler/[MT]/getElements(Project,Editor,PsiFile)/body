{
  final SelectionModel selectionModel=editor.getSelectionModel();
  if (selectionModel.hasSelection()) {
    int startOffset=selectionModel.getSelectionStart();
    int endOffset=selectionModel.getSelectionEnd();
    PsiElement[] elements;
    PsiExpression expr=CodeInsightUtil.findExpressionInRange(file,startOffset,endOffset);
    if (expr != null) {
      elements=new PsiElement[]{expr};
    }
 else {
      elements=CodeInsightUtil.findStatementsInRange(file,startOffset,endOffset);
      if (elements.length == 0) {
        final PsiExpression expression=IntroduceVariableBase.getSelectedExpression(project,file,startOffset,endOffset);
        if (expression != null && IntroduceVariableBase.getErrorMessage(expression) == null) {
          final PsiType originalType=RefactoringUtil.getTypeByExpressionWithExpectedType(expression);
          if (originalType != null) {
            elements=new PsiElement[]{expression};
          }
        }
      }
    }
    return elements;
  }
  final List<PsiExpression> expressions=IntroduceVariableBase.collectExpressions(file,editor,editor.getCaretModel().getOffset());
  return expressions.toArray(new PsiElement[expressions.size()]);
}
