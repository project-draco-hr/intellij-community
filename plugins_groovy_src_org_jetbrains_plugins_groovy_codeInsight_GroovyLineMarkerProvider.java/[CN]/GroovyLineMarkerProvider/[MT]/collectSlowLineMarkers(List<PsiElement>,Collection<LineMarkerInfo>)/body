{
  Set<PsiMethod> methods=new HashSet<>();
  Map<PsiClass,PsiClass> subClassCache=FindSuperElementsHelper.createSubClassCache();
  for (  PsiElement element : elements) {
    ProgressManager.checkCanceled();
    if (element instanceof GrField) {
      methods.addAll(GroovyPropertyUtils.getFieldAccessors((GrField)element));
    }
 else     if (element instanceof GrMethod) {
      GrReflectedMethod[] reflected=((GrMethod)element).getReflectedMethods();
      if (reflected.length != 0) {
        Collections.addAll(methods,reflected);
      }
 else {
        methods.add((PsiMethod)element);
      }
    }
 else     if (element instanceof PsiClass && !(element instanceof PsiTypeParameter)) {
      collectInheritingClasses((PsiClass)element,result,subClassCache);
    }
  }
  collectOverridingMethods(methods,result);
}
