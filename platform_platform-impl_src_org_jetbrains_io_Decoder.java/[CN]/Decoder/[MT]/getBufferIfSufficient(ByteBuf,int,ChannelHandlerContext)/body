{
  if (!input.isReadable()) {
    return null;
  }
  if (cumulation == null) {
    if (input.readableBytes() < requiredLength) {
      cumulation=input;
      input.retain();
      input.touch();
      return null;
    }
 else {
      return input;
    }
  }
 else {
    int currentAccumulatedByteCount=cumulation.readableBytes();
    if ((currentAccumulatedByteCount + input.readableBytes()) < requiredLength) {
      CompositeByteBuf compositeByteBuf;
      if ((cumulation instanceof CompositeByteBuf)) {
        compositeByteBuf=(CompositeByteBuf)cumulation;
      }
 else {
        compositeByteBuf=context.alloc().compositeBuffer(DEFAULT_MAX_COMPOSITE_BUFFER_COMPONENTS);
        compositeByteBuf.addComponent(cumulation);
        cumulation=compositeByteBuf;
      }
      compositeByteBuf.addComponent(input);
      input.retain();
      input.touch();
      return null;
    }
 else {
      CompositeByteBuf buffer;
      if (cumulation instanceof CompositeByteBuf) {
        buffer=(CompositeByteBuf)cumulation;
        buffer.addComponent(input);
      }
 else {
        buffer=context.alloc().compositeBuffer(DEFAULT_MAX_COMPOSITE_BUFFER_COMPONENTS);
        buffer.addComponents(cumulation,input);
      }
      buffer.writerIndex(requiredLength);
      input.skipBytes(requiredLength - currentAccumulatedByteCount);
      input.retain();
      input.touch();
      cumulation=null;
      return buffer;
    }
  }
}
