{
  if (element instanceof PyLambdaExpression) {
    String message=RefactoringBundle.getCannotRefactorMessage("Caret is positioned on lambda call.");
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,REFACTORING_NAME);
    return;
  }
  if (!(element instanceof PyFunction)) {
    String message=RefactoringBundle.getCannotRefactorMessage(PyBundle.message("refactoring.change.signature.error.wrong.caret.position.method.name"));
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,REFACTORING_NAME);
    return;
  }
  if (isNotUnderSourceRoot(project,element.getContainingFile(),editor))   return;
  final PyFunction superMethod=getSuperMethod((PyFunction)element);
  if (superMethod == null)   return;
  if (!superMethod.equals(element)) {
    element=superMethod;
    if (isNotUnderSourceRoot(project,superMethod.getContainingFile(),editor))     return;
  }
  final PyFunction function=(PyFunction)element;
  final PyParameter[] parameters=function.getParameterList().getParameters();
  for (  PyParameter p : parameters) {
    if (p instanceof PyTupleParameter) {
      String message=RefactoringBundle.getCannotRefactorMessage("Function contains tuple parameters");
      CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,REFACTORING_NAME);
      return;
    }
  }
  final PyMethodDescriptor method=new PyMethodDescriptor((PyFunction)element);
  PyChangeSignatureDialog dialog=new PyChangeSignatureDialog(project,method);
  dialog.show();
}
