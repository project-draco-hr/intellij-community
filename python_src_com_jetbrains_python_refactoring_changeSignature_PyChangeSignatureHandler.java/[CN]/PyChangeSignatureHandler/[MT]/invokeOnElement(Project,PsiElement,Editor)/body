{
  if (!(element instanceof PyFunction))   return;
  final PyFunction newFunction=getSuperMethod((PyFunction)element);
  if (newFunction == null)   return;
  if (!newFunction.equals(element)) {
    invokeOnElement(project,newFunction,editor);
  }
 else {
    final PyFunction function=(PyFunction)element;
    final PyParameter[] parameters=function.getParameterList().getParameters();
    for (    PyParameter p : parameters) {
      if (p instanceof PyTupleParameter) {
        String message=RefactoringBundle.getCannotRefactorMessage("Function contains tuple parameters");
        CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,REFACTORING_NAME);
        return;
      }
    }
    final PyMethodDescriptor method=new PyMethodDescriptor((PyFunction)element);
    PyChangeSignatureDialog dialog=new PyChangeSignatureDialog(project,method);
    dialog.show();
  }
}
