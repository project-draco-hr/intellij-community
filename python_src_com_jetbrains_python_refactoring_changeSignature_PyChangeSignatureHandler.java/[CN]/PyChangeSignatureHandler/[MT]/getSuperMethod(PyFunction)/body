{
  if (function == null) {
    return null;
  }
  final PyClass containingClass=function.getContainingClass();
  if (containingClass == null) {
    return function;
  }
  final PyFunction deepestSuperMethod=PySuperMethodsSearch.findDeepestSuperMethod(function);
  if (!deepestSuperMethod.equals(function)) {
    final PyClass baseClass=deepestSuperMethod.getContainingClass();
    final PyBuiltinCache cache=PyBuiltinCache.getInstance(baseClass);
    final String baseClassName=baseClass == null ? "" : baseClass.getName();
    if (cache.isBuiltin(baseClass)) {
      return function;
    }
    final String message=PyBundle.message("refactoring.change.signature.find.usages.of.base.class",function.getName(),containingClass.getName(),baseClassName);
    final int choice;
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      choice=Messages.YES;
    }
 else {
      choice=Messages.showYesNoCancelDialog(function.getProject(),message,REFACTORING_NAME,Messages.getQuestionIcon());
    }
switch (choice) {
case Messages.YES:
      return deepestSuperMethod;
case Messages.NO:
    return function;
default :
  return null;
}
}
return function;
}
