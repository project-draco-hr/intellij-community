{
  setText(DebuggerBundle.message("editor.notification.alternative.source",aClass.getQualifiedName()));
  final ComboBox switcher=new ComboBox(alternatives);
  switcher.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final DebuggerContextImpl context=DebuggerManagerEx.getInstanceEx(project).getContext();
      final DebuggerSession session=context.getDebuggerSession();
      final PsiClass item=((ComboBoxClassElement)switcher.getSelectedItem()).myClass;
      final VirtualFile vFile=item.getContainingFile().getVirtualFile();
      if (session != null && vFile != null) {
        session.getProcess().getManagerThread().schedule(new DebuggerCommandImpl(){
          @Override protected void action() throws Exception {
            StackFrameProxyImpl proxy=context.getFrameProxy();
            Location location=proxy != null ? proxy.location() : null;
            if (location != null) {
              DebuggerUtilsEx.setAlternativeSourceUrl(location.declaringType().name(),vFile.getUrl(),project);
            }
            DebuggerUIUtil.invokeLater(new Runnable(){
              @Override public void run(){
                FileEditorManager.getInstance(project).closeFile(file);
                session.refresh(true);
              }
            }
);
          }
        }
);
      }
 else {
        FileEditorManager.getInstance(project).closeFile(file);
        item.navigate(true);
      }
    }
  }
);
  myLinksPanel.add(switcher);
  createActionLabel(DebuggerBundle.message("action.disable.text"),new Runnable(){
    @Override public void run(){
      DebuggerSettings.getInstance().SHOW_ALTERNATIVE_SOURCE=false;
      FILE_PROCESSED_KEY.set(file,null);
      FileEditorManager fileEditorManager=FileEditorManager.getInstance(project);
      FileEditor editor=fileEditorManager.getSelectedEditor(file);
      if (editor != null) {
        fileEditorManager.removeTopComponent(editor,AlternativeSourceNotificationPanel.this);
      }
    }
  }
);
}
