{
  if (!CodeInsightUtilBase.prepareFileForWrite(file))   return;
  final PsiElement element=file.findElementAt(editor.getCaretModel().getOffset());
  final PsiVariable psiVariable=PsiTreeUtil.getParentOfType(element,PsiVariable.class);
  LOG.assertTrue(psiVariable != null);
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  final PsiType fromType=psiVariable.getType();
  PsiClassType toType;
  final String atomicQualifiedName=myFromToMap.get(fromType);
  if (atomicQualifiedName != null) {
    final PsiClass atomicClass=psiFacade.findClass(atomicQualifiedName,GlobalSearchScope.allScope(project));
    if (atomicClass == null) {
      return;
    }
    toType=elementFactory.createType(atomicClass);
  }
 else   if (fromType instanceof PsiArrayType) {
    final PsiClass atomicReferenceArrayClass=psiFacade.findClass(AtomicReferenceArray.class.getName(),GlobalSearchScope.allScope(project));
    if (atomicReferenceArrayClass == null) {
      return;
    }
    final HashMap<PsiTypeParameter,PsiType> substitutor=new HashMap<PsiTypeParameter,PsiType>();
    final PsiTypeParameter[] typeParameters=atomicReferenceArrayClass.getTypeParameters();
    if (typeParameters.length == 1) {
      final PsiType componentType=((PsiArrayType)fromType).getComponentType();
      substitutor.put(typeParameters[0],componentType instanceof PsiPrimitiveType ? ((PsiPrimitiveType)componentType).getBoxedType(file) : componentType);
    }
    toType=elementFactory.createType(atomicReferenceArrayClass,elementFactory.createSubstitutor(substitutor));
  }
 else {
    final PsiClass atomicReferenceClass=psiFacade.findClass(AtomicReference.class.getName(),GlobalSearchScope.allScope(project));
    if (atomicReferenceClass == null) {
      return;
    }
    final HashMap<PsiTypeParameter,PsiType> substitutor=new HashMap<PsiTypeParameter,PsiType>();
    final PsiTypeParameter[] typeParameters=atomicReferenceClass.getTypeParameters();
    if (typeParameters.length == 1) {
      substitutor.put(typeParameters[0],fromType instanceof PsiPrimitiveType ? ((PsiPrimitiveType)fromType).getBoxedType(file) : fromType);
    }
    toType=elementFactory.createType(atomicReferenceClass,elementFactory.createSubstitutor(substitutor));
  }
  try {
    psiVariable.getTypeElement().replace(elementFactory.createTypeElement(toType));
    final PsiExpression initializer=psiVariable.getInitializer();
    if (initializer != null) {
      final TypeConversionDescriptor directConversion=AtomicConversionRule.wrapWithNewExpression(toType,fromType);
      if (directConversion != null) {
        TypeMigrationReplacementUtil.replaceExpression(initializer,project,directConversion);
      }
    }
    for (    PsiReference reference : ReferencesSearch.search(psiVariable)) {
      PsiElement psiElement=reference.getElement();
      if (psiElement instanceof PsiExpression) {
        final PsiElement parent=psiElement.getParent();
        if (parent instanceof PsiExpression && !(parent instanceof PsiReferenceExpression)) {
          psiElement=parent;
        }
        if (psiElement instanceof PsiBinaryExpression) {
          PsiBinaryExpression binaryExpression=(PsiBinaryExpression)psiElement;
          if (TypeConversionUtil.isBinaryOperatorApplicable(binaryExpression.getOperationTokenType(),binaryExpression.getLOperand(),binaryExpression.getROperand(),true)) {
            continue;
          }
        }
 else         if (psiElement instanceof PsiAssignmentExpression) {
          final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)psiElement;
          IElementType opSign=TypeConversionUtil.convertEQtoOperation(assignmentExpression.getOperationTokenType());
          if (opSign != null && TypeConversionUtil.isBinaryOperatorApplicable(opSign,assignmentExpression.getLExpression(),assignmentExpression.getRExpression(),true)) {
            continue;
          }
        }
        final TypeConversionDescriptor directConversion=AtomicConversionRule.findDirectConversion(psiElement,toType,fromType);
        if (directConversion != null) {
          TypeMigrationReplacementUtil.replaceExpression((PsiExpression)psiElement,project,directConversion);
        }
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
