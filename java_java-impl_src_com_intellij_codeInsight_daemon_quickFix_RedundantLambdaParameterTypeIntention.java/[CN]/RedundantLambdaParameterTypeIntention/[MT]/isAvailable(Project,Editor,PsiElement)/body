{
  final PsiParameterList parameterList=PsiTreeUtil.getParentOfType(element,PsiParameterList.class);
  if (parameterList == null)   return false;
  final PsiElement parent=parameterList.getParent();
  if (!(parent instanceof PsiLambdaExpression))   return false;
  final PsiLambdaExpression expression=(PsiLambdaExpression)parent;
  final PsiParameter[] parameters=parameterList.getParameters();
  for (  PsiParameter parameter : parameters) {
    if (parameter.getTypeElement() == null)     return false;
  }
  if (parameters.length == 0)   return false;
  final PsiType functionalInterfaceType=LambdaUtil.getFunctionalInterfaceType(expression,true);
  if (functionalInterfaceType != null) {
    final PsiElement lambdaParent=expression.getParent();
    if (lambdaParent instanceof PsiExpressionList) {
      final PsiElement gParent=lambdaParent.getParent();
      if (gParent instanceof PsiCallExpression && ((PsiCallExpression)gParent).getTypeArguments().length == 0) {
        final JavaResolveResult resolveResult=((PsiCallExpression)gParent).resolveMethodGenerics();
        final PsiMethod method=(PsiMethod)resolveResult.getElement();
        if (method == null)         return false;
        final int idx=LambdaUtil.getLambdaIdx((PsiExpressionList)lambdaParent,expression);
        if (idx < 0)         return false;
        final PsiTypeParameter[] typeParameters=method.getTypeParameters();
        final PsiExpression[] arguments=((PsiExpressionList)lambdaParent).getExpressions();
        final JavaPsiFacade javaPsiFacade=JavaPsiFacade.getInstance(project);
        arguments[idx]=javaPsiFacade.getElementFactory().createExpressionFromText("(" + StringUtil.join(expression.getParameterList().getParameters(),new Function<PsiParameter,String>(){
          @Override public String fun(          PsiParameter parameter){
            return parameter.getName();
          }
        }
,", ") + ") -> {}",expression);
        final PsiParameter[] methodParams=method.getParameterList().getParameters();
        final PsiSubstitutor substitutor=javaPsiFacade.getResolveHelper().inferTypeArguments(typeParameters,methodParams,arguments,((MethodCandidateInfo)resolveResult).getSiteSubstitutor(),gParent,DefaultParameterTypeInferencePolicy.INSTANCE);
        for (        PsiTypeParameter parameter : typeParameters) {
          final PsiType psiType=substitutor.substitute(parameter);
          if (psiType == null || dependsOnTypeParams(psiType,expression,parameter))           return false;
        }
        final PsiType paramType;
        if (idx < methodParams.length) {
          paramType=methodParams[idx].getType();
        }
 else {
          final PsiParameter lastParam=methodParams[methodParams.length - 1];
          if (!lastParam.isVarArgs())           return false;
          paramType=((PsiEllipsisType)lastParam.getType()).getComponentType();
        }
        return functionalInterfaceType.isAssignableFrom(substitutor.substitute(paramType));
      }
    }
    if (!LambdaUtil.isLambdaFullyInferred(expression,functionalInterfaceType)) {
      return false;
    }
    return true;
  }
  return false;
}
