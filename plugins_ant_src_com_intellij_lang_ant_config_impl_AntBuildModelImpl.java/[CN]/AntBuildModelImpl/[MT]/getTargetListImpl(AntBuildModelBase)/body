{
  final List<AntBuildTargetBase> list=new ArrayList<>();
  final Set<Object> dependencies=new HashSet<>();
  final AntDomProject project=model.getAntProject();
  if (project != null) {
    final AntBuildFile buildFile=model.getBuildFile();
    final XmlFile xmlFile=buildFile.getAntFile();
    dependencies.add(xmlFile != null ? xmlFile : PsiModificationTracker.MODIFICATION_COUNT);
    final VirtualFile sourceFile=buildFile.getVirtualFile();
    new Object(){
      private boolean myIsImported=false;
      private final Set<VirtualFile> myProcessed=new HashSet<>();
      private AntDomTarget myDefaultTarget=null;
      private void fillTargets(      List<AntBuildTargetBase> list,      AntBuildModelBase model,      AntDomProject project,      VirtualFile sourceFile){
        if (myProcessed.contains(sourceFile)) {
          return;
        }
        myProcessed.add(sourceFile);
        if (!myIsImported) {
          final TargetResolver.Result result=project.getDefaultTarget().getValue();
          if (result != null) {
            final Pair<AntDomTarget,String> targetWithName=result.getResolvedTarget(project.getDefaultTarget().getRawText());
            myDefaultTarget=targetWithName != null ? targetWithName.getFirst() : null;
          }
        }
        for (        final AntDomTarget target : project.getDeclaredTargets()) {
          list.add(new AntBuildTargetImpl(target,model,sourceFile,myIsImported,target.equals(myDefaultTarget)));
        }
        myIsImported=true;
        final Iterable<AntDomIncludingDirective> allIncludes=ContainerUtil.concat((Iterable<AntDomImport>)project.getDeclaredImports(),(Iterable<? extends AntDomInclude>)project.getDeclaredIncludes());
        for (        AntDomIncludingDirective incl : allIncludes) {
          final PsiFileSystemItem includedFile=incl.getFile().getValue();
          if (includedFile instanceof PsiFile) {
            final PsiFile included=includedFile.getContainingFile().getOriginalFile();
            dependencies.add(included);
            final AntDomProject includedProject=AntSupport.getAntDomProject((PsiFile)includedFile);
            if (includedProject != null) {
              fillTargets(list,model,includedProject,included.getVirtualFile());
            }
          }
 else {
            if (includedFile == null) {
              dependencies.add(PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);
            }
          }
        }
      }
    }
.fillTargets(list,model,project,sourceFile);
  }
  if (dependencies.isEmpty()) {
    dependencies.add(PsiModificationTracker.MODIFICATION_COUNT);
  }
  return new Pair<>(list,dependencies);
}
