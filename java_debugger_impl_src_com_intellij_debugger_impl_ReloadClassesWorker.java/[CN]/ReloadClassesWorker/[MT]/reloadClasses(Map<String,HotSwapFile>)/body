{
  DebuggerManagerThreadImpl.assertIsManagerThread();
  if (modifiedClasses == null || modifiedClasses.size() == 0) {
    myProgress.addMessage(myDebuggerSession,MessageCategory.INFORMATION,DebuggerBundle.message("status.hotswap.loaded.classes.up.to.date"));
    return;
  }
  final DebugProcessImpl debugProcess=getDebugProcess();
  final VirtualMachineProxyImpl virtualMachineProxy=debugProcess.getVirtualMachineProxy();
  if (virtualMachineProxy == null) {
    return;
  }
  final Project project=debugProcess.getProject();
  final BreakpointManager breakpointManager=(DebuggerManagerEx.getInstanceEx(project)).getBreakpointManager();
  breakpointManager.disableBreakpoints(debugProcess);
  try {
    RedefineProcessor redefineProcessor=new RedefineProcessor(virtualMachineProxy);
    int processedEntriesCount=0;
    for (    final Map.Entry<String,HotSwapFile> entry : modifiedClasses.entrySet()) {
      if (redefineProcessor.getProcessedClassesCount() == 0 && myProgress.isCancelled()) {
        break;
      }
      processedEntriesCount++;
      final String qualifiedName=entry.getKey();
      if (qualifiedName != null) {
        myProgress.setText(qualifiedName);
        myProgress.setFraction(processedEntriesCount / (double)modifiedClasses.size());
      }
      try {
        redefineProcessor.processClass(qualifiedName,entry.getValue().file);
      }
 catch (      IOException e) {
        reportProblem(qualifiedName,e);
      }
    }
    if (redefineProcessor.getProcessedClassesCount() == 0 && myProgress.isCancelled()) {
      return;
    }
    redefineProcessor.processPending();
    myProgress.setFraction(1);
    final int partiallyRedefinedClassesCount=redefineProcessor.getPartiallyRedefinedClassesCount();
    if (partiallyRedefinedClassesCount == 0) {
      myProgress.addMessage(myDebuggerSession,MessageCategory.INFORMATION,DebuggerBundle.message("status.classes.reloaded",redefineProcessor.getProcessedClassesCount()));
    }
 else {
      final String message=DebuggerBundle.message("status.classes.not.all.versions.reloaded",partiallyRedefinedClassesCount,redefineProcessor.getProcessedClassesCount());
      myProgress.addMessage(myDebuggerSession,MessageCategory.WARNING,message);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("classes reloaded");
    }
  }
 catch (  Throwable e) {
    processException(e);
  }
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    public void run(){
      if (project.isDisposed()) {
        return;
      }
      final BreakpointManager breakpointManager=(DebuggerManagerEx.getInstanceEx(project)).getBreakpointManager();
      breakpointManager.reloadBreakpoints();
      debugProcess.getRequestsManager().clearWarnings();
      if (LOG.isDebugEnabled()) {
        LOG.debug("requests updated");
        LOG.debug("time stamp set");
      }
      myDebuggerSession.refresh(false);
    }
  }
);
  try {
    breakpointManager.enableBreakpoints(debugProcess);
  }
 catch (  Exception e) {
    processException(e);
  }
}
