{
  return new BaseInspectionVisitor(){
    @Override public void visitTypeDefinition(    GrTypeDefinition typeDefinition){
      super.visitTypeDefinition(typeDefinition);
      List<PsiClass> superTraits=collectImplementedTraits(typeDefinition);
      if (superTraits.size() < 2)       return;
      List<ClashingMethod> clashingMethods=collectClassingMethods(typeDefinition);
      for (      ClashingMethod clashing : clashingMethods) {
        registerError(typeDefinition.getNameIdentifierGroovy(),buildWarning(clashing),new LocalQuickFix[]{getFix()},ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
      }
    }
    @NotNull private String buildWarning(    @NotNull ClashingMethod entry){
      return "Traits " + buildTraitString(entry) + " contain clashing methods with signature "+ buildSignatureString(entry);
    }
    @NotNull private String buildSignatureString(    @NotNull ClashingMethod entry){
      HierarchicalMethodSignature signature=entry.getSignature();
      return PsiFormatUtil.formatMethod(signature.getMethod(),signature.getSubstitutor(),PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_PARAMETERS,PsiFormatUtilBase.SHOW_TYPE);
    }
    @NotNull private String buildTraitString(    @NotNull ClashingMethod entry){
      return StringUtil.join(entry.getSuperTraits(),new Function<GrTypeDefinition,String>(){
        @Override public String fun(        GrTypeDefinition tr){
          return tr.getName();
        }
      }
,", ");
    }
  }
;
}
