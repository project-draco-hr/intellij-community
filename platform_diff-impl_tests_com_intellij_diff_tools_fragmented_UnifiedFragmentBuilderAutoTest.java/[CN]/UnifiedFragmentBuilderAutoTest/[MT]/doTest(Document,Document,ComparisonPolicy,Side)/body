{
  CharSequence sequence1=document1.getCharsSequence();
  CharSequence sequence2=document2.getCharsSequence();
  List<LineFragment> fragments=myComparisonManager.compareLinesInner(sequence1,sequence2,policy,DumbProgressIndicator.INSTANCE);
  UnifiedFragmentBuilder builder=new UnifiedFragmentBuilder(fragments,document1,document2,masterSide);
  builder.exec();
  boolean ignoreWhitespaces=policy != ComparisonPolicy.DEFAULT;
  CharSequence text=builder.getText();
  List<ChangedBlock> blocks=builder.getBlocks();
  LineNumberConvertor convertor=builder.getConvertor();
  List<LineRange> changedLines=builder.getChangedLines();
  List<HighlightRange> ranges=builder.getRanges();
  assertTrue(isSubsequence(text,sequence1,ignoreWhitespaces));
  assertTrue(isSubsequence(text,sequence2,ignoreWhitespaces));
  for (  LineFragment fragment : fragments) {
    int startLine1=fragment.getStartLine1();
    int endLine1=fragment.getEndLine1();
    int startLine2=fragment.getStartLine2();
    int endLine2=fragment.getEndLine2();
    for (int i=startLine1; i < endLine1; i++) {
      int targetLine=convertor.convertInv1(i);
      assertTrue(targetLine != -1);
      assertTrue(isLineChanged(targetLine,changedLines));
    }
    for (int i=startLine2; i < endLine2; i++) {
      int targetLine=convertor.convertInv2(i);
      assertTrue(targetLine != -1);
      assertTrue(isLineChanged(targetLine,changedLines));
    }
  }
  assertEquals(blocks.size(),fragments.size());
  for (int i=0; i < fragments.size(); i++) {
    LineFragment fragment=fragments.get(i);
    ChangedBlock block=blocks.get(i);
    CharSequence fragment1=sequence1.subSequence(fragment.getStartOffset1(),fragment.getEndOffset1());
    CharSequence fragment2=sequence2.subSequence(fragment.getStartOffset2(),fragment.getEndOffset2());
    CharSequence block1=text.subSequence(block.getStartOffset1(),block.getEndOffset1());
    CharSequence block2=text.subSequence(block.getStartOffset2(),block.getEndOffset2());
    assertEqualsCharSequences(fragment1,block1,ignoreWhitespaces,true);
    assertEqualsCharSequences(fragment2,block2,ignoreWhitespaces,true);
  }
  for (  HighlightRange range : ranges) {
    CharSequence sideSequence=range.getSide().select(sequence1,sequence2);
    CharSequence baseRange=text.subSequence(range.getBase().getStartOffset(),range.getBase().getEndOffset());
    CharSequence sideRange=sideSequence.subSequence(range.getChanged().getStartOffset(),range.getChanged().getEndOffset());
    assertTrue(StringUtil.equals(baseRange,sideRange));
  }
}
