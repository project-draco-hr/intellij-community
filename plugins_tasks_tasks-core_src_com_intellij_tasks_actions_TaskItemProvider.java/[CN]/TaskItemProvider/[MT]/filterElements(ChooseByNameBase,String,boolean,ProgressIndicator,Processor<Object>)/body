{
  GotoTaskAction.CREATE_NEW_TASK_ACTION.setTaskName(pattern);
  if (!consumer.process(GotoTaskAction.CREATE_NEW_TASK_ACTION))   return false;
  TaskManager taskManager=TaskManager.getManager(myProject);
  List<Task> allCachedAndLocalTasks=ContainerUtil.concat(taskManager.getCachedIssues(),taskManager.getLocalTasks());
  List<Task> filteredCachedAndLocalTasks=TaskSearchSupport.getLocalAndCachedTasks(taskManager,pattern,everywhere);
  if (!processTasks(filteredCachedAndLocalTasks,consumer,cancelled))   return false;
  if (filteredCachedAndLocalTasks.size() >= base.getMaximumListSizeLimit()) {
    return true;
  }
  FutureTask<List<Task>> future=new FutureTask<List<Task>>(new Callable<List<Task>>(){
    @Override public List<Task> call() throws Exception {
      return fetchFromServer(pattern,everywhere,cancelled);
    }
  }
);
  Future<List<Task>> oldFuture=myFutureReference.getAndSet(future);
  if (oldFuture != null) {
    LOG.debug("Cancelling existing task");
    oldFuture.cancel(true);
  }
  if (myAlarm.isDisposed()) {
    return false;
  }
  myAlarm.addRequest(future,DELAY_PERIOD);
  try {
    List<Task> tasks=future.get();
    myFutureReference.compareAndSet(future,null);
    tasks.removeAll(allCachedAndLocalTasks);
    return processTasks(tasks,consumer,cancelled);
  }
 catch (  InterruptedException interrupted) {
    Thread.interrupted();
  }
catch (  CancellationException e) {
    LOG.debug("Task cancelled");
  }
catch (  ExecutionException e) {
    Throwable cause=e.getCause();
    if (cause instanceof ProcessCanceledException) {
      LOG.debug("Task cancelled via progress indicator");
    }
 else     if (cause instanceof RuntimeException) {
      throw (RuntimeException)cause;
    }
 else     if (cause instanceof Error) {
      throw (Error)cause;
    }
 else {
      throw new RuntimeException("Unknown checked exception",cause);
    }
  }
  return false;
}
