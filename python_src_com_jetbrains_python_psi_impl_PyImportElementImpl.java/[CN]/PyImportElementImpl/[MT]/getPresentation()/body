{
  return new ItemPresentation(){
    @NotNull private String getRefName(    String default_name){
      PyReferenceExpression ref=getImportReference();
      if (ref != null) {
        String refname=ref.getName();
        if (refname != null)         return refname;
      }
      return default_name;
    }
    public String getPresentableText(){
      return getRefName("<none>");
    }
    public String getLocationString(){
      PyElement elt=PsiTreeUtil.getParentOfType(PyImportElementImpl.this,PyImportStatement.class,PyFromImportStatement.class);
      StringBuffer buf=new StringBuffer("| ");
      if (elt != null) {
        if (elt instanceof PyFromImportStatement) {
          buf.append("from ");
          PyReferenceExpression imp_src=((PyFromImportStatement)elt).getImportSource();
          if (imp_src != null) {
            buf.append(PyResolveUtil.toPath(imp_src,"."));
          }
 else           buf.append("<?>");
          buf.append(" import ");
        }
 else {
          buf.append("import ");
        }
        buf.append(getRefName("<?>"));
      }
 else {
        buf.append("import?.. ");
      }
      PyTargetExpression as_part=getAsName();
      if (as_part != null) {
        buf.append(" as ").append(as_part.getName());
      }
      return buf.toString();
    }
    public Icon getIcon(    final boolean open){
      return null;
    }
    public TextAttributesKey getTextAttributesKey(){
      return null;
    }
  }
;
}
