{
  node.setAlreadySorted(true);
  int bucketThreshold=XCompositeNode.MAX_CHILDREN_TO_SHOW;
  int size=end - start;
  if (!sparse && size > bucketThreshold) {
    node.addChildren(XValueChildrenList.topGroups(computeNotSparseGroups(value,context,start,end,bucketThreshold)),true);
    return;
  }
  value.getIndexedProperties(start,end + 1,bucketThreshold,new VariableView.ObsolescentIndexedVariablesConsumer(node){
    @Override public void consumeRanges(    @Nullable int[] ranges){
      if (ranges == null) {
        XValueChildrenList groupList=new XValueChildrenList();
        addGroups(value,GROUP_FACTORY,groupList,start,end,XCompositeNode.MAX_CHILDREN_TO_SHOW,context);
        node.addChildren(groupList,true);
      }
 else {
        addRanges(value,ranges,node,context,true);
      }
    }
    @Override public void consumeVariables(    @NotNull List<Variable> variables){
      node.addChildren(Variables.createVariablesList(variables,context),true);
    }
  }
,componentType);
}
