{
  if (project != null) {
    for (    VcsDescriptor descriptor : ProjectLevelVcsManager.getInstance(project).getAllVcss()) {
      if ("Git".equals(descriptor.getDisplayName())) {
        final GitVcsSettings settings=GitVcsSettings.getInstance(project);
        ArrayList<BooleanOptionDescription> options=new ArrayList<>();
        options.add(option(project,"Git: Commit automatically on cherry-pick","isAutoCommitOnCherryPick","setAutoCommitOnCherryPick"));
        options.add(option(project,"Git: Auto-update if push of the current branch was rejected","autoUpdateIfPushRejected","setAutoUpdateIfPushRejected"));
        GitRepositoryManager manager=ServiceManager.getService(project,GitRepositoryManager.class);
        if (manager != null && manager.moreThanOneRoot()) {
          options.add(new BooleanOptionDescription("Git: Control repositories synchronously","vcs.Git"){
            @Override public boolean isOptionEnabled(){
              return settings.getSyncSetting() == DvcsSyncSettings.Value.SYNC;
            }
            @Override public void setOptionState(            boolean enabled){
              settings.setSyncSetting(enabled ? DvcsSyncSettings.Value.SYNC : DvcsSyncSettings.Value.DONT_SYNC);
            }
          }
);
        }
        options.add(option(project,"Git: Warn if CRLF line separators are about to be committed","warnAboutCrlf","setWarnAboutCrlf"));
        options.add(option(project,"Git: Warn when committing in detached HEAD or during rebase","warnAboutDetachedHead","setWarnAboutDetachedHead"));
        options.add(option(project,"Git: Allow force push","isForcePushAllowed","setForcePushAllowed"));
        return Collections.unmodifiableCollection(options);
      }
    }
  }
  return Collections.emptyList();
}
