{
  PsiFile file=PsiManager.getInstance(project).findFile(position.getFile());
  if (file == null) {
    return Collections.emptyList();
  }
  SourcePosition pos=SourcePosition.createFromLine(file,position.getLine());
  List<PsiLambdaExpression> lambdas=DebuggerUtilsEx.collectLambdas(pos,true);
  if (lambdas.isEmpty()) {
    return Collections.emptyList();
  }
  PsiElement startMethod=DebuggerUtilsEx.getContainingMethod(pos);
  if (lambdas.contains(startMethod) && lambdas.size() == 1) {
    return Collections.emptyList();
  }
  Document document=PsiDocumentManager.getInstance(file.getProject()).getDocument(file);
  if (document == null) {
    return Collections.emptyList();
  }
  List<JavaBreakpointVariant> res=new SmartList<>();
  res.add(new JavaBreakpointVariant(position));
  if (!(startMethod instanceof PsiLambdaExpression)) {
    res.add(new ExactJavaBreakpointVariant(position,startMethod,-1));
  }
  int ordinal=0;
  for (  PsiLambdaExpression lambda : lambdas) {
    PsiElement firstElem=DebuggerUtilsEx.getFirstElementOnTheLine(lambda,document,position.getLine());
    XSourcePositionImpl elementPosition=XSourcePositionImpl.createByElement(firstElem);
    if (elementPosition != null) {
      res.add(new ExactJavaBreakpointVariant(elementPosition,lambda,ordinal++));
    }
  }
  return res;
}
