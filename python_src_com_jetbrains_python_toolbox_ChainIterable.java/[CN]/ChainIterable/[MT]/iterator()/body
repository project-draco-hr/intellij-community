{
class IterMixedIn extends ChainIterationMixin<T,Iterable<T>> {
    IterMixedIn(    ChainedListBase<Iterable<T>> link){
      super(link);
    }
    @Override public Iterator<T> toIterator(    Iterable<T> first){
      return first.iterator();
    }
  }
  final IterMixedIn mixin=new IterMixedIn(this);
class Iter extends ChainedListBase<Iterable<T>> implements Iterator<T> {
    Iter(    ChainedListBase<Iterable<T>> piggybacked){
      super(piggybacked.myPayload);
      myNext=piggybacked.myNext;
    }
    public boolean hasNext(){
      return mixin.hasNext();
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
    public T next(){
      return (T)mixin.next();
    }
  }
  return new Iter(this);
}
