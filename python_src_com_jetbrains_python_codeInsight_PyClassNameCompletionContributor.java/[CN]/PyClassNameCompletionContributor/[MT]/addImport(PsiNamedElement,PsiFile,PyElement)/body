{
  final boolean useQualified=!PyCodeInsightSettings.getInstance().PREFER_FROM_IMPORT;
  final String path=ResolveImportUtil.findShortestImportableName(element,target.getContainingFile().getVirtualFile());
  final PyElementGenerator elementGenerator=PyElementGenerator.getInstance(file.getProject());
  if (useQualified) {
    AddImportHelper.addImportStatement(file,path,null);
    element.replace(elementGenerator.createExpressionFromText(path + "." + target.getName()));
  }
 else {
    final List<PyFromImportStatement> existingImports=((PyFile)file).getFromImports();
    for (    PyFromImportStatement existingImport : existingImports) {
      final PyQualifiedName qName=existingImport.getImportSourceQName();
      if (qName != null && qName.toString().equals(path)) {
        PyImportElement importElement=elementGenerator.createImportElement(target.getName());
        existingImport.add(importElement);
        return;
      }
    }
    AddImportHelper.addImportFromStatement(file,path,target.getName(),null);
  }
}
