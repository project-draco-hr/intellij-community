{
  final String packageName=configuration.getPackage();
  if (packageName == null)   return false;
  final Project project=configuration.getProject();
  final PsiPackage aPackage=JavaPsiFacade.getInstance(project).findPackage(packageName);
  if (aPackage == null)   return false;
  final Module module=configuration.getConfigurationModule().getModule();
  if (module == null)   return false;
  final Set<Module> modulesWithPackage=new HashSet<Module>();
  final PsiDirectory[] directories=aPackage.getDirectories();
  for (  PsiDirectory directory : directories) {
    final Module currentModule=ModuleUtilCore.findModuleForFile(directory.getVirtualFile(),project);
    if (module != currentModule && currentModule != null) {
      modulesWithPackage.add(currentModule);
    }
  }
  if (!modulesWithPackage.isEmpty()) {
    final String testRunDebugId=isDebug ? ToolWindowId.DEBUG : ToolWindowId.RUN;
    final ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(project);
    final Function<Module,String> moduleNameRef=new Function<Module,String>(){
      @Override public String fun(      Module module){
        final String moduleName=module.getName();
        return "<a href=\"" + moduleName + "\">"+ moduleName+ "</a>";
      }
    }
;
    String message="Tests were not found in module \"" + module.getName() + "\".\n"+ "Use ";
    if (modulesWithPackage.size() == 1) {
      message+="module \"" + moduleNameRef.fun(modulesWithPackage.iterator().next()) + "\" ";
    }
 else {
      message+="one of\n" + StringUtil.join(modulesWithPackage,moduleNameRef,"\n") + "\n";
    }
    message+="instead";
    toolWindowManager.notifyByBalloon(testRunDebugId,MessageType.WARNING,message,null,new ResetConfigurationModuleAdapter(configuration,project,isDebug,toolWindowManager,testRunDebugId));
    return true;
  }
  return false;
}
