{
  final PsiType type=element.getType();
  if (type instanceof PsiDisjunctionType) {
    tokenizeComplexType(element,consumer);
    return;
  }
  final PsiClass psiClass=PsiUtil.resolveClassInType(type);
  if (psiClass == null || psiClass.getContainingFile() == null || psiClass.getContainingFile().getVirtualFile() == null) {
    return;
  }
  final String name=psiClass.getName();
  if (name == null) {
    return;
  }
  final VirtualFile virtualFile=psiClass.getContainingFile().getVirtualFile();
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(element.getProject()).getFileIndex();
  final boolean isInSource=(virtualFile != null) && fileIndex.isInContent(virtualFile);
  if (isInSource) {
    final String elementText=element.getText();
    if (elementText.contains(name)) {
      consumer.consumeToken(element,elementText,true,0,getRangeToCheck(elementText,name),IdentifierSplitter.getInstance());
    }
  }
}
