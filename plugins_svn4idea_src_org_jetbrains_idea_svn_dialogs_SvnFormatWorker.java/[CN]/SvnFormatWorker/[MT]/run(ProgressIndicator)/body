{
  ProjectLevelVcsManager.getInstanceChecked(myProject).startBackgroundVcsOperation();
  indicator.setIndeterminate(true);
  final boolean supportsChangelists=myNewFormat.supportsChangelists();
  if (supportsChangelists) {
    myBeforeChangeLists=ChangeListManager.getInstance(myProject).getChangeListsCopy();
  }
  try {
    for (    WCInfo wcInfo : myWcInfos) {
      File path=new File(wcInfo.getPath());
      if (!wcInfo.isIsWcRoot()) {
        path=SvnUtil.getWorkingCopyRoot(path);
      }
      try {
        String cleanupMessage=SvnBundle.message("action.Subversion.cleanup.progress.text",path.getAbsolutePath());
        String upgradeMessage=SvnBundle.message("action.change.wcopy.format.task.progress.text",path.getAbsolutePath(),wcInfo.getFormat(),myNewFormat);
        ProgressTracker handler=createUpgradeHandler(indicator,cleanupMessage,upgradeMessage);
        getFactory(path,myNewFormat).createUpgradeClient().upgrade(path,myNewFormat,handler);
      }
 catch (      Throwable e) {
        myExceptions.add(e);
      }
    }
  }
  finally {
    ProjectLevelVcsManager.getInstance(myProject).stopBackgroundVcsOperation();
    if (supportsChangelists) {
      SvnVcs.getInstance(myProject).processChangeLists(myBeforeChangeLists);
    }
    ApplicationManager.getApplication().getMessageBus().syncPublisher(SvnVcs.WC_CONVERTED).run();
  }
}
