{
  super.visitMethod(method);
  if (!method.hasModifierProperty(PsiModifier.PUBLIC)) {
    final PsiClass aClass=method.getContainingClass();
    if (aClass == null || !aClass.isInterface()) {
      return;
    }
  }
  if (PropertyUtil.isSimpleSetter(method) || LibraryUtil.isOverrideOfLibraryMethod(method)) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  int count=0;
  for (  PsiParameter parameter : parameters) {
    final PsiType type=parameter.getType();
    if (!PsiPrimitiveType.BOOLEAN.equals(type)) {
      continue;
    }
    count++;
    if (count > 1) {
      break;
    }
  }
  if (count == 0 || onlyReportMultiple && count == 1) {
    return;
  }
  registerMethodError(method,method,Integer.valueOf(count));
}
