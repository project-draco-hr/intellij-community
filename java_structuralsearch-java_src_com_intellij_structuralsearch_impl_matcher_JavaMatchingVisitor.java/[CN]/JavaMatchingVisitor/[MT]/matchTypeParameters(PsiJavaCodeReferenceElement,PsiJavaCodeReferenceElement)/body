{
  final PsiReferenceParameterList patternParameterList=mcallRef1.getParameterList();
  if (patternParameterList == null) {
    return true;
  }
  final PsiTypeElement[] patternTypeElements=patternParameterList.getTypeParameterElements();
  if (patternTypeElements.length == 0) {
    return true;
  }
  PsiReferenceParameterList matchedParameterList=mcallRef2.getParameterList();
  if (matchedParameterList == null) {
    return false;
  }
  if (matchedParameterList.getFirstChild() == null) {
    final JavaResolveResult resolveResult=mcallRef2.advancedResolve(false);
    final PsiMethod targetMethod=(PsiMethod)resolveResult.getElement();
    if (targetMethod == null) {
      return false;
    }
    final PsiTypeParameterList typeParameterList=targetMethod.getTypeParameterList();
    if (typeParameterList == null) {
      return false;
    }
    final PsiTypeParameter[] typeParameters=typeParameterList.getTypeParameters();
    final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
    matchedParameterList=(PsiReferenceParameterList)matchedParameterList.copy();
    for (    final PsiTypeParameter typeParameter : typeParameters) {
      final PsiType type=substitutor.substitute(typeParameter);
      if (type == null) {
        return false;
      }
      final PsiTypeElement matchedTypeElement=JavaPsiFacade.getElementFactory(mcallRef1.getProject()).createTypeElement(type);
      matchedParameterList.add(matchedTypeElement);
    }
  }
  final PsiTypeElement[] matchedTypeElements=matchedParameterList.getTypeParameterElements();
  return myMatchingVisitor.matchSequentially(patternTypeElements,matchedTypeElements);
}
