{
  final PsiElement other=myMatchingVisitor.getElement();
  final PsiJavaCodeReferenceElement classReference=new1.getClassReference();
  if (other instanceof PsiArrayInitializerExpression && other.getParent() instanceof PsiVariable && new1.getArrayDimensions().length == 0 && new1.getArrayInitializer() != null) {
    final boolean looseMatching=myMatchingVisitor.getMatchContext().getOptions().isLooseMatching();
    final boolean typedVar=myMatchingVisitor.getMatchContext().getPattern().isTypedVar(classReference);
    if ((typedVar || !looseMatching) && !allowsAbsenceOfMatch(classReference)) {
      myMatchingVisitor.setResult(false);
      return;
    }
    final PsiElementFactory factory=JavaPsiFacade.getElementFactory(other.getProject());
    final PsiType otherType=((PsiVariable)other.getParent()).getType();
    final PsiTypeElement otherTypeElement=factory.createTypeElement(otherType.getDeepComponentType());
    final MatchContext matchContext=myMatchingVisitor.getMatchContext();
    final MatchingHandler handler=matchContext.getPattern().getHandler(classReference);
    if (handler instanceof SubstitutionHandler) {
      final SubstitutionHandler substitutionHandler=(SubstitutionHandler)handler;
      myMatchingVisitor.setResult(substitutionHandler.handle(otherTypeElement,matchContext));
    }
 else {
      final PsiType type=new1.getType();
      myMatchingVisitor.setResult(type != null && type.equals(otherType));
    }
    if (myMatchingVisitor.getResult()) {
      myMatchingVisitor.matchSons(new1.getArrayInitializer(),other);
    }
    return;
  }
  if (!(other instanceof PsiNewExpression)) {
    myMatchingVisitor.setResult(false);
    return;
  }
  final PsiNewExpression new2=(PsiNewExpression)other;
  if (classReference != null) {
    if (new2.getClassReference() != null) {
      myMatchingVisitor.setResult(myMatchingVisitor.match(classReference,new2.getClassReference()) && myMatchingVisitor.matchSons(new1.getArrayInitializer(),new2.getArrayInitializer()));
      if (myMatchingVisitor.getResult()) {
        matchArrayDims(new1,new2);
      }
      return;
    }
 else {
      final PsiKeyword newKeyword=PsiTreeUtil.getChildOfType(new2,PsiKeyword.class);
      final PsiElement element=PsiTreeUtil.getNextSiblingOfType(newKeyword,PsiWhiteSpace.class);
      if (element != null && element.getNextSibling() instanceof PsiKeyword) {
        ((LexicalNodesFilter)LexicalNodesFilter.getInstance()).setCareKeyWords(true);
        myMatchingVisitor.setResult(myMatchingVisitor.match(classReference,element.getNextSibling()) && myMatchingVisitor.matchSons(new1.getArrayInitializer(),new2.getArrayInitializer()));
        ((LexicalNodesFilter)LexicalNodesFilter.getInstance()).setCareKeyWords(false);
        if (myMatchingVisitor.getResult()) {
          matchArrayDims(new1,new2);
        }
        return;
      }
    }
  }
  if (classReference == new2.getClassReference()) {
    ((LexicalNodesFilter)LexicalNodesFilter.getInstance()).setCareKeyWords(true);
    myMatchingVisitor.setResult(myMatchingVisitor.matchSons(new1,new2));
    ((LexicalNodesFilter)LexicalNodesFilter.getInstance()).setCareKeyWords(false);
  }
 else   if (new1.getAnonymousClass() == null && classReference != null && new2.getAnonymousClass() != null) {
    myMatchingVisitor.setResult(myMatchingVisitor.match(classReference,new2.getAnonymousClass().getBaseClassReference()) && myMatchingVisitor.matchSons(new1.getArgumentList(),new2.getArgumentList()));
  }
 else {
    myMatchingVisitor.setResult(false);
  }
}
