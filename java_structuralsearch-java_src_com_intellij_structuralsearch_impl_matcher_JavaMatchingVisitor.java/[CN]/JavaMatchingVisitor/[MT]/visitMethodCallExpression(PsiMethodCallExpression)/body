{
  final PsiElement element=myMatchingVisitor.getElement();
  if (!(element instanceof PsiMethodCallExpression)) {
    myMatchingVisitor.setResult(false);
    return;
  }
  final PsiMethodCallExpression mcall2=(PsiMethodCallExpression)element;
  final PsiReferenceExpression mcallRef1=mcall.getMethodExpression();
  final PsiReferenceExpression mcallRef2=mcall2.getMethodExpression();
  final PsiElement patternMethodName=mcallRef1.getReferenceNameElement();
  final boolean isTypedVar=myMatchingVisitor.getMatchContext().getPattern().isTypedVar(patternMethodName);
  if (!isTypedVar && !myMatchingVisitor.matchText(patternMethodName,mcallRef2.getReferenceNameElement())) {
    myMatchingVisitor.setResult(false);
    return;
  }
  final PsiExpression patternQualifier=mcallRef1.getQualifierExpression();
  final PsiExpression matchedQualifier=mcallRef2.getQualifierExpression();
  if (patternQualifier != null) {
    if (matchedQualifier != null) {
      myMatchingVisitor.setResult(myMatchingVisitor.match(patternQualifier,matchedQualifier));
      if (!myMatchingVisitor.getResult())       return;
    }
 else {
      final PsiMethod method=mcall2.resolveMethod();
      if (method != null) {
        if (patternQualifier instanceof PsiThisExpression) {
          myMatchingVisitor.setResult(!method.hasModifierProperty(PsiModifier.STATIC));
          return;
        }
      }
      final MatchingHandler handler=myMatchingVisitor.getMatchContext().getPattern().getHandler(patternQualifier);
      matchImplicitQualifier(handler,method,myMatchingVisitor.getMatchContext());
      if (!myMatchingVisitor.getResult()) {
        return;
      }
    }
  }
 else   if (matchedQualifier != null) {
    myMatchingVisitor.setResult(false);
    return;
  }
  myMatchingVisitor.setResult(myMatchingVisitor.matchSons(mcall.getArgumentList(),mcall2.getArgumentList()));
  if (myMatchingVisitor.getResult()) {
    myMatchingVisitor.setResult(matchTypeParameters(mcallRef1,mcallRef2));
  }
  if (myMatchingVisitor.getResult() && isTypedVar) {
    boolean res=myMatchingVisitor.getResult();
    res&=myMatchingVisitor.handleTypedElement(patternMethodName,mcallRef2.getReferenceNameElement());
    myMatchingVisitor.setResult(res);
  }
}
