{
  PsiElement patternElement=getInnermostComponent(patternType);
  PsiElement matchedElement=getInnermostComponent(matchedType);
  PsiElement[] typeParameters=null;
  if (matchedElement instanceof PsiJavaCodeReferenceElement) {
    final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)matchedElement;
    typeParameters=getTypeParameters(referenceElement,!hasDiamondTypeParameter(patternElement));
  }
 else   if (matchedElement instanceof PsiTypeParameter) {
    matchedElement=((PsiTypeParameter)matchedElement).getNameIdentifier();
  }
 else   if (matchedElement instanceof PsiClass && ((PsiClass)matchedElement).hasTypeParameters()) {
    typeParameters=((PsiClass)matchedElement).getTypeParameters();
    matchedElement=((PsiClass)matchedElement).getNameIdentifier();
  }
 else   if (matchedElement instanceof PsiMethod && ((PsiMethod)matchedElement).hasTypeParameters()) {
    typeParameters=((PsiMethod)matchedType).getTypeParameters();
    matchedElement=((PsiMethod)matchedType).getNameIdentifier();
  }
  if (patternElement instanceof PsiJavaCodeReferenceElement) {
    final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)patternElement;
    final PsiReferenceParameterList list=referenceElement.getParameterList();
    if (list != null) {
      final PsiTypeElement[] elements=list.getTypeParameterElements();
      if (elements.length > 0 && (typeParameters == null || !myMatchingVisitor.matchSequentially(elements,typeParameters))) {
        return false;
      }
    }
    patternElement=referenceElement.getReferenceNameElement();
  }
  final int matchedArrayDimensions=getArrayDimensions(matchedType);
  final int patternArrayDimensions=getArrayDimensions(patternType);
  if (myMatchingVisitor.getMatchContext().getPattern().isTypedVar(patternElement)) {
    final SubstitutionHandler handler=(SubstitutionHandler)myMatchingVisitor.getMatchContext().getPattern().getHandler(patternElement);
    RegExpPredicate regExpPredicate=null;
    if (patternArrayDimensions != 0) {
      if (patternArrayDimensions != matchedArrayDimensions) {
        return false;
      }
    }
 else     if (matchedArrayDimensions != 0) {
      regExpPredicate=MatchingHandler.getSimpleRegExpPredicate(handler);
      if (regExpPredicate != null) {
        regExpPredicate.setNodeTextGenerator(new RegExpPredicate.NodeTextGenerator(){
          public String getText(          PsiElement element){
            StringBuilder builder=new StringBuilder(RegExpPredicate.getMeaningfulText(element));
            for (int i=0; i < matchedArrayDimensions; ++i)             builder.append("[]");
            return builder.toString();
          }
        }
);
      }
    }
    try {
      if (handler.isSubtype() || handler.isStrictSubtype()) {
        return checkMatchWithingHierarchy(matchedElement,handler,patternElement);
      }
 else {
        return handler.handle(matchedElement,myMatchingVisitor.getMatchContext());
      }
    }
  finally {
      if (regExpPredicate != null)       regExpPredicate.setNodeTextGenerator(null);
    }
  }
  if (matchedArrayDimensions != patternArrayDimensions) {
    return false;
  }
  if (patternElement instanceof PsiIdentifier) {
    final PsiElement parent=patternElement.getParent();
    if (parent instanceof PsiJavaCodeReferenceElement) {
      patternElement=parent;
    }
  }
  if (matchedElement instanceof PsiIdentifier) {
    final PsiElement parent=matchedElement.getParent();
    if (parent instanceof PsiJavaCodeReferenceElement) {
      matchedElement=parent;
    }
  }
  final String text=getText(patternElement);
  final String text2=getText(matchedElement);
  final boolean caseSensitive=myMatchingVisitor.getMatchContext().getOptions().isCaseSensitiveMatch();
  final boolean equalsIgnorePackage=MatchUtils.compareWithNoDifferenceToPackage(text,text2,!caseSensitive);
  if (equalsIgnorePackage || !(matchedElement instanceof PsiJavaReference)) {
    return equalsIgnorePackage;
  }
 else {
    final PsiElement element2=((PsiJavaReference)matchedElement).resolve();
    if (!(element2 instanceof PsiClass)) {
      return false;
    }
    final String name=((PsiClass)element2).getQualifiedName();
    return caseSensitive ? text.equals(name) : text.equalsIgnoreCase(name);
  }
}
