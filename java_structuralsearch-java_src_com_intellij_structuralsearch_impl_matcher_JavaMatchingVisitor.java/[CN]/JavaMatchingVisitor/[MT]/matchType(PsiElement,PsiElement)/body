{
  PsiElement patternElement=patternType;
  PsiElement matchedElement=matchedType;
  PsiType type1=null;
  PsiType type2=null;
  if (patternType instanceof PsiTypeElement && ((PsiTypeElement)patternType).getInnermostComponentReferenceElement() != null) {
    patternElement=((PsiTypeElement)patternType).getInnermostComponentReferenceElement();
    type1=((PsiTypeElement)patternType).getType();
  }
  if (matchedType instanceof PsiTypeElement && ((PsiTypeElement)matchedType).getInnermostComponentReferenceElement() != null) {
    matchedElement=((PsiTypeElement)matchedType).getInnermostComponentReferenceElement();
    type2=((PsiTypeElement)matchedType).getType();
  }
  PsiElement[] typeParameters=null;
  if (matchedElement instanceof PsiJavaCodeReferenceElement) {
    final PsiReferenceParameterList parameterList=((PsiJavaCodeReferenceElement)matchedElement).getParameterList();
    if (parameterList != null) {
      typeParameters=parameterList.getTypeParameterElements();
    }
  }
 else   if (matchedElement instanceof PsiTypeParameter) {
    matchedElement=((PsiTypeParameter)matchedElement).getNameIdentifier();
  }
 else   if (matchedElement instanceof PsiClass && ((PsiClass)matchedElement).hasTypeParameters()) {
    typeParameters=((PsiClass)matchedElement).getTypeParameters();
    matchedElement=((PsiClass)matchedElement).getNameIdentifier();
  }
 else   if (matchedElement instanceof PsiMethod && ((PsiMethod)matchedElement).hasTypeParameters()) {
    typeParameters=((PsiMethod)matchedType).getTypeParameters();
    matchedElement=((PsiMethod)matchedType).getNameIdentifier();
  }
  PsiReferenceParameterList list=null;
  if (patternElement instanceof PsiJavaCodeReferenceElement) {
    list=((PsiJavaCodeReferenceElement)patternElement).getParameterList();
    patternElement=((PsiJavaCodeReferenceElement)patternElement).getReferenceNameElement();
  }
  if (list != null && list.getTypeParameterElements().length > 0) {
    boolean result=typeParameters != null && myMatchingVisitor.matchSequentially(list.getTypeParameterElements(),typeParameters);
    if (!result)     return false;
  }
 else {
    if (matchedType instanceof PsiTypeElement) {
      type2=((PsiTypeElement)matchedType).getType();
      if (typeParameters == null || typeParameters.length == 0) {
        final PsiJavaCodeReferenceElement innermostComponentReferenceElement=((PsiTypeElement)matchedType).getInnermostComponentReferenceElement();
        if (innermostComponentReferenceElement != null)         matchedElement=innermostComponentReferenceElement;
      }
 else {
        matchedElement=matchedType;
      }
    }
  }
  final int patternArrayDimensions=(type1 != null ? type1.getArrayDimensions() : 0) + countCStyleArrayDeclarationDims(patternType);
  final int matchedArrayDimensions=(type2 != null ? type2.getArrayDimensions() : 0) + countCStyleArrayDeclarationDims(matchedType);
  if (myMatchingVisitor.getMatchContext().getPattern().isTypedVar(patternElement)) {
    final SubstitutionHandler handler=(SubstitutionHandler)myMatchingVisitor.getMatchContext().getPattern().getHandler(patternElement);
    RegExpPredicate regExpPredicate=null;
    if (patternArrayDimensions != 0) {
      if (patternArrayDimensions != matchedArrayDimensions) {
        return false;
      }
    }
 else     if (matchedArrayDimensions != 0) {
      regExpPredicate=MatchingHandler.getSimpleRegExpPredicate(handler);
      if (regExpPredicate != null) {
        regExpPredicate.setNodeTextGenerator(new RegExpPredicate.NodeTextGenerator(){
          public String getText(          PsiElement element){
            StringBuilder builder=new StringBuilder(RegExpPredicate.getMeaningfulText(element));
            for (int i=0; i < matchedArrayDimensions; ++i)             builder.append("[]");
            return builder.toString();
          }
        }
);
      }
    }
    try {
      if (handler.isSubtype() || handler.isStrictSubtype()) {
        return checkMatchWithingHierarchy(matchedElement,handler,patternElement);
      }
 else {
        return handler.handle(matchedElement,myMatchingVisitor.getMatchContext());
      }
    }
  finally {
      if (regExpPredicate != null)       regExpPredicate.setNodeTextGenerator(null);
    }
  }
  if (matchedArrayDimensions != patternArrayDimensions) {
    return false;
  }
  if (patternElement instanceof PsiIdentifier) {
    final PsiElement parent=patternElement.getParent();
    if (parent instanceof PsiJavaCodeReferenceElement) {
      patternElement=parent;
    }
  }
  if (matchedElement instanceof PsiIdentifier) {
    final PsiElement parent=matchedElement.getParent();
    if (parent instanceof PsiJavaCodeReferenceElement) {
      matchedElement=parent;
    }
  }
  final String text=getText(patternElement);
  final String text2=getText(matchedElement);
  final boolean caseSensitive=myMatchingVisitor.getMatchContext().getOptions().isCaseSensitiveMatch();
  final boolean equalsIgnorePackage=MatchUtils.compareWithNoDifferenceToPackage(text,text2,!caseSensitive);
  if (equalsIgnorePackage || !(matchedElement instanceof PsiJavaReference)) {
    return equalsIgnorePackage;
  }
 else {
    final PsiElement element2=((PsiJavaReference)matchedElement).resolve();
    if (element2 instanceof PsiClass) {
      final String name=((PsiClass)element2).getQualifiedName();
      return caseSensitive ? text.equals(name) : text.equalsIgnoreCase(name);
    }
 else {
      return MatchUtils.compareWithNoDifferenceToPackage(text,text2,!caseSensitive);
    }
  }
}
