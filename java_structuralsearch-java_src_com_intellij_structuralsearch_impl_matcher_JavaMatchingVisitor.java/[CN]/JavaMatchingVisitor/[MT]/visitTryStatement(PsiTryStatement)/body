{
  final PsiTryStatement try2=(PsiTryStatement)myMatchingVisitor.getElement();
  myMatchingVisitor.setResult(myMatchingVisitor.matchSons(try1.getTryBlock(),try2.getTryBlock()));
  if (!myMatchingVisitor.getResult())   return;
  final PsiResourceList resourceList1=try1.getResourceList();
  final PsiCatchSection[] catches1=try1.getCatchSections();
  final PsiCodeBlock finally1=try1.getFinallyBlock();
  final PsiResourceList resourceList2=try2.getResourceList();
  final PsiCatchSection[] catches2=try2.getCatchSections();
  final PsiCodeBlock finally2=try2.getFinallyBlock();
  if (!myMatchingVisitor.getMatchContext().getOptions().isLooseMatching() && ((catches1.length == 0 && catches2.length != 0) || (finally1 == null && finally2 != null) || (resourceList1 == null && resourceList2 != null)) || catches2.length < catches1.length) {
    myMatchingVisitor.setResult(false);
  }
 else {
    if (resourceList1 != null) {
      if (resourceList2 == null) {
        myMatchingVisitor.setResult(false);
        return;
      }
      final List<PsiResourceVariable> resourceVariables1=resourceList1.getResourceVariables();
      final List<PsiResourceVariable> resourceVariables2=resourceList2.getResourceVariables();
      myMatchingVisitor.setResult(myMatchingVisitor.matchInAnyOrder(resourceVariables1.toArray(new PsiResourceVariable[resourceVariables1.size()]),resourceVariables2.toArray(new PsiResourceVariable[resourceVariables2.size()])));
      if (!myMatchingVisitor.getResult())       return;
    }
    final List<PsiCatchSection> unmatchedCatchSections=new ArrayList<PsiCatchSection>();
    ContainerUtil.addAll(unmatchedCatchSections,catches2);
    for (    PsiCatchSection catchSection : catches1) {
      final MatchingHandler handler=myMatchingVisitor.getMatchContext().getPattern().getHandler(catchSection);
      final PsiElement pinnedNode=handler.getPinnedNode(null);
      if (pinnedNode != null) {
        myMatchingVisitor.setResult(handler.match(catchSection,pinnedNode,myMatchingVisitor.getMatchContext()));
        if (!myMatchingVisitor.getResult())         return;
      }
 else {
        int j;
        for (j=0; j < unmatchedCatchSections.size(); ++j) {
          if (handler.match(catchSection,unmatchedCatchSections.get(j),myMatchingVisitor.getMatchContext())) {
            unmatchedCatchSections.remove(j);
            break;
          }
        }
        if (j == catches2.length) {
          myMatchingVisitor.setResult(false);
          return;
        }
      }
    }
    if (finally1 != null) {
      myMatchingVisitor.setResult(myMatchingVisitor.matchSons(finally1,finally2));
    }
    if (myMatchingVisitor.getResult() && unmatchedCatchSections.size() > 0) {
      try2.putUserData(UNMATCHED_CATCH_SECTION_CONTENT_VAR_KEY,unmatchedCatchSections);
    }
  }
}
