{
  final PsiIdentifier methodNameNode=method.getNameIdentifier();
  final boolean isTypedVar=myMatchingVisitor.getMatchContext().getPattern().isTypedVar(methodNameNode);
  final PsiMethod method2=(PsiMethod)myMatchingVisitor.getElement();
  myMatchingVisitor.getMatchContext().pushResult();
  try {
    final PsiDocComment docComment=method.getDocComment();
    if (docComment != null) {
      myMatchingVisitor.setResult(myMatchingVisitor.match(docComment,method2));
      if (!myMatchingVisitor.getResult())       return;
    }
    if (method.hasTypeParameters()) {
      myMatchingVisitor.setResult(myMatchingVisitor.match(method.getTypeParameterList(),((PsiMethod)myMatchingVisitor.getElement()).getTypeParameterList()));
      if (!myMatchingVisitor.getResult())       return;
    }
    if (!checkHierarchy(method2,method)) {
      myMatchingVisitor.setResult(false);
      return;
    }
    myMatchingVisitor.setResult((myMatchingVisitor.matchText(method.getNameIdentifier(),method2.getNameIdentifier()) || isTypedVar) && myMatchingVisitor.match(method.getModifierList(),method2.getModifierList()) && myMatchingVisitor.matchSons(method.getParameterList(),method2.getParameterList())&& myMatchingVisitor.match(method.getReturnTypeElement(),method2.getReturnTypeElement())&& matchInAnyOrder(method.getThrowsList(),method2.getThrowsList())&& myMatchingVisitor.matchSonsOptionally(method.getBody(),method2.getBody()));
  }
  finally {
    saveOrDropResult(methodNameNode,isTypedVar,method2.getNameIdentifier());
  }
}
