{
  return new ParametersListTable(){
    private final EditorTextFieldJBTableRowRenderer myRowRenderer=new EditorTextFieldJBTableRowRenderer(getProject(),JavaChangeSignatureDialog.this.getFileType(),myDisposable){
      @Override protected String getText(      JTable table,      int row){
        ParameterTableModelItemBase<ParameterInfoImpl> item=getRowItem(row);
        final String typeText=item.typeCodeFragment.getText();
        final String separator=StringUtil.repeatSymbol(' ',getTypesMaxLength() - typeText.length() + 1);
        String text=typeText + separator + item.parameter.getName();
        final String defaultValue=item.defaultValueCodeFragment.getText();
        String tail="";
        if (StringUtil.isNotEmpty(defaultValue)) {
          tail+=" default value = " + defaultValue;
        }
        if (item.parameter.isUseAnySingleVariable()) {
          if (StringUtil.isNotEmpty(defaultValue)) {
            tail+=";";
          }
          tail+=" Use any var.";
        }
        if (!StringUtil.isEmpty(tail)) {
          text+=" //" + tail;
        }
        return " " + text;
      }
    }
;
    @Override protected JBTableRowRenderer getRowRenderer(    int row){
      return myRowRenderer;
    }
    @NotNull @Override protected JBTableRowEditor getRowEditor(    final ParameterTableModelItemBase<ParameterInfoImpl> item){
      return new JBTableRowEditor(){
        private EditorTextField myTypeEditor;
        private EditorTextField myNameEditor;
        private EditorTextField myDefaultValueEditor;
        private JCheckBox myAnyVar;
        @Override public void prepareEditor(        JTable table,        int row){
          setLayout(new BorderLayout());
          final Document document=PsiDocumentManager.getInstance(getProject()).getDocument(item.typeCodeFragment);
          myTypeEditor=new EditorTextField(document,getProject(),getFileType());
          myTypeEditor.addDocumentListener(mySignatureUpdater);
          myTypeEditor.setPreferredWidth(getTable().getWidth() / 2);
          myTypeEditor.addDocumentListener(new RowEditorChangeListener(0));
          add(createLabeledPanel("Type:",myTypeEditor),BorderLayout.WEST);
          myNameEditor=new EditorTextField(item.parameter.getName(),getProject(),getFileType());
          myNameEditor.addDocumentListener(mySignatureUpdater);
          myNameEditor.addDocumentListener(new RowEditorChangeListener(1));
          add(createLabeledPanel("Name:",myNameEditor),BorderLayout.CENTER);
          new TextFieldCompletionProvider(){
            @Override protected void addCompletionVariants(            @NotNull String text,            int offset,            @NotNull String prefix,            @NotNull CompletionResultSet result){
              final PsiCodeFragment fragment=item.typeCodeFragment;
              if (fragment instanceof PsiTypeCodeFragment) {
                final PsiType type;
                try {
                  type=((PsiTypeCodeFragment)fragment).getType();
                }
 catch (                Exception e) {
                  return;
                }
                final SuggestedNameInfo info=JavaCodeStyleManager.getInstance(myProject).suggestVariableName(VariableKind.PARAMETER,null,null,type);
                for (                String completionVariant : info.names) {
                  final LookupElementBuilder element=LookupElementBuilder.create(completionVariant);
                  result.addElement(element.withLookupString(completionVariant.toLowerCase(Locale.ENGLISH)));
                }
              }
            }
          }
.apply(myNameEditor,item.parameter.getName());
          if (!item.isEllipsisType() && item.parameter.getOldIndex() == -1) {
            final JPanel additionalPanel=new JPanel(new BorderLayout());
            final Document doc=PsiDocumentManager.getInstance(getProject()).getDocument(item.defaultValueCodeFragment);
            myDefaultValueEditor=new EditorTextField(doc,getProject(),getFileType());
            ((PsiExpressionCodeFragment)item.defaultValueCodeFragment).setExpectedType(getRowType(item));
            myDefaultValueEditor.setPreferredWidth(getTable().getWidth() / 2);
            myDefaultValueEditor.addDocumentListener(new RowEditorChangeListener(2));
            additionalPanel.add(createLabeledPanel("Default value:",myDefaultValueEditor),BorderLayout.WEST);
            if (!isGenerateDelegate()) {
              myAnyVar=new JCheckBox("&Use Any Var");
              UIUtil.applyStyle(UIUtil.ComponentStyle.SMALL,myAnyVar);
              DialogUtil.registerMnemonic(myAnyVar,'&');
              myAnyVar.addActionListener(new ActionListener(){
                @Override public void actionPerformed(                ActionEvent e){
                  item.parameter.setUseAnySingleVariable(myAnyVar.isSelected());
                }
              }
);
              final JPanel anyVarPanel=new JPanel(new BorderLayout());
              anyVarPanel.add(myAnyVar,BorderLayout.SOUTH);
              UIUtil.addInsets(anyVarPanel,JBUI.insetsBottom(8));
              additionalPanel.add(anyVarPanel,BorderLayout.CENTER);
            }
            add(additionalPanel,BorderLayout.SOUTH);
          }
        }
        @Override public JBTableRow getValue(){
          return new JBTableRow(){
            @Override public Object getValueAt(            int column){
switch (column) {
case 0:
                return item.typeCodeFragment;
case 1:
              return myNameEditor.getText().trim();
case 2:
            return item.defaultValueCodeFragment;
case 3:
          return myAnyVar != null && myAnyVar.isSelected();
      }
      return null;
    }
  }
;
}
@Override public JComponent getPreferredFocusedComponent(){
  final MouseEvent me=getMouseEvent();
  if (me == null) {
    return myTypeEditor.getFocusTarget();
  }
  final double x=me.getPoint().getX();
  return x <= getTypesColumnWidth() ? myTypeEditor.getFocusTarget() : myDefaultValueEditor == null || x <= getNamesColumnWidth() ? myNameEditor.getFocusTarget() : myDefaultValueEditor.getFocusTarget();
}
@Override public JComponent[] getFocusableComponents(){
  final List<JComponent> focusable=new ArrayList<JComponent>();
  focusable.add(myTypeEditor.getFocusTarget());
  focusable.add(myNameEditor.getFocusTarget());
  if (myDefaultValueEditor != null) {
    focusable.add(myDefaultValueEditor.getFocusTarget());
  }
  if (myAnyVar != null) {
    focusable.add(myAnyVar);
  }
  return focusable.toArray(new JComponent[focusable.size()]);
}
}
;
}
@Override protected boolean isRowEmpty(int row){
ParameterInfoImpl parameter=getRowItem(row).parameter;
return StringUtil.isEmpty(parameter.getName()) && StringUtil.isEmpty(parameter.getTypeText());
}
}
;
}
