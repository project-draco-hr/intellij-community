{
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  if (method.isVarArgs()) {
    if (!isInsideEqualsOrHashCode(expression)) {
      return;
    }
    registerError(expression,expression,"varargs call");
  }
 else {
    final String name=methodExpression.getReferenceName();
    if (!"valueOf".equals(name)) {
      return;
    }
    final PsiExpressionList argumentList=expression.getArgumentList();
    final PsiExpression[] expressions=argumentList.getExpressions();
    if (expressions.length != 1) {
      return;
    }
    final PsiClass aClass=method.getContainingClass();
    if (aClass == null) {
      return;
    }
    final String qualifiedName=aClass.getQualifiedName();
    if (!CommonClassNames.JAVA_LANG_SHORT.equals(qualifiedName) && !CommonClassNames.JAVA_LANG_INTEGER.equals(qualifiedName) && !CommonClassNames.JAVA_LANG_LONG.equals(qualifiedName)&& !CommonClassNames.JAVA_LANG_DOUBLE.equals(qualifiedName)&& !CommonClassNames.JAVA_LANG_FLOAT.equals(qualifiedName)&& !CommonClassNames.JAVA_LANG_CHARACTER.equals(qualifiedName)) {
      return;
    }
    if (!isInsideEqualsOrHashCode(expression)) {
      return;
    }
    registerError(expression,expression);
  }
}
