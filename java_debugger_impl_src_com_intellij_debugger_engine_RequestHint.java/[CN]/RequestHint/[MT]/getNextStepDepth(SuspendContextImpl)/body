{
  int res=STOP;
  try {
    final StackFrameProxyImpl frameProxy=context.getFrameProxy();
    if (myMethodFilter != null && frameProxy != null && !(myMethodFilter instanceof BreakpointStepMethodFilter) && myMethodFilter.locationMatches(context.getDebugProcess(),frameProxy.location())) {
      myTargetMethodMatched=true;
      return STOP;
    }
    if ((myDepth == StepRequest.STEP_OVER || myDepth == StepRequest.STEP_INTO) && myPosition != null) {
      final Integer resultDepth=ApplicationManager.getApplication().runReadAction(new Computable<Integer>(){
        public Integer compute(){
          final SourcePosition locationPosition=ContextUtil.getSourcePosition(context);
          if (locationPosition == null) {
            return null;
          }
          int frameCount=-1;
          final ThreadReferenceProxyImpl contextThread=context.getThread();
          if (contextThread != null) {
            try {
              frameCount=contextThread.frameCount();
            }
 catch (            EvaluateException ignored) {
            }
          }
          final boolean filesEqual=myPosition.getFile().equals(locationPosition.getFile());
          if (filesEqual && isOnTheSameLine(locationPosition) && myFrameCount == frameCount) {
            return myDepth;
          }
          if (myDepth == StepRequest.STEP_INTO) {
            if (filesEqual) {
              if (myFrameCount > frameCount) {
                return STOP;
              }
              if (myFrameCount == frameCount && !isOnTheSameLine(locationPosition)) {
                return STOP;
              }
            }
          }
          return null;
        }
      }
);
      if (resultDepth != null) {
        res=resultDepth.intValue();
      }
    }
    final DebuggerSettings settings=DebuggerSettings.getInstance();
    if ((settings.SKIP_SYNTHETIC_METHODS || myMethodFilter != null) && frameProxy != null) {
      final Location location=frameProxy.location();
      if (location != null) {
        if (DebuggerUtils.isSynthetic(location.method())) {
          return myDepth;
        }
      }
    }
    if (!myIgnoreFilters) {
      if (settings.SKIP_GETTERS) {
        boolean isGetter=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
          public Boolean compute(){
            final PsiMethod psiMethod=PsiTreeUtil.getParentOfType(PositionUtil.getContextElement(context),PsiMethod.class);
            return (psiMethod != null && DebuggerUtils.isSimpleGetter(psiMethod)) ? Boolean.TRUE : Boolean.FALSE;
          }
        }
).booleanValue();
        if (isGetter) {
          return StepRequest.STEP_OUT;
        }
      }
      if (frameProxy != null) {
        if (settings.SKIP_CONSTRUCTORS) {
          final Location location=frameProxy.location();
          if (location != null) {
            final Method method=location.method();
            if (method != null && method.isConstructor()) {
              return StepRequest.STEP_OUT;
            }
          }
        }
        if (settings.SKIP_CLASSLOADERS) {
          final Location location=frameProxy.location();
          if (location != null && DebuggerUtilsEx.isAssignableFrom("java.lang.ClassLoader",location.declaringType())) {
            return StepRequest.STEP_OUT;
          }
        }
      }
    }
    if (res == STOP && myMethodFilter != null) {
      return StepRequest.STEP_OUT;
    }
  }
 catch (  VMDisconnectedException ignored) {
  }
catch (  EvaluateException e) {
    LOG.error(e);
  }
  return res;
}
