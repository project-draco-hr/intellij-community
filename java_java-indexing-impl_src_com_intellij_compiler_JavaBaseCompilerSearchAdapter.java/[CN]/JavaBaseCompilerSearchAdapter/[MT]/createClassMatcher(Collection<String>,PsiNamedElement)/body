{
  boolean matcherBySuperNameAdded=false;
  final List<InternalClassMatcher> matchers=new ArrayList<>(internalNames.size());
  for (  String internalName : internalNames) {
    int curLast=internalName.length() - 1;
    while (true) {
      int lastIndex=internalName.lastIndexOf('$',curLast);
      if (lastIndex > -1 && lastIndex < internalName.length() - 1) {
        final boolean anonymousSign=Character.isDigit(internalName.charAt(lastIndex + 1));
        if (anonymousSign) {
          if (curLast == internalName.length() - 1) {
            if (matcherBySuperNameAdded) {
              break;
            }
            matcherBySuperNameAdded=true;
            matchers.add(new InternalClassMatcher.BySuperName(baseClass.getName()));
            break;
          }
 else {
            matchers.add(new InternalClassMatcher.ByName(StringUtil.getShortName(internalName,'$')));
            break;
          }
        }
      }
 else {
        matchers.add(new InternalClassMatcher.ByQualifiedName(StringUtil.replace(internalName,"$",".")));
        break;
      }
      curLast=lastIndex - 1;
    }
  }
  return matchers;
}
