{
  PsiElement parent=expression.getParent();
  while (parent instanceof PsiParenthesizedExpression) {
    parent=parent.getParent();
  }
  if (parent instanceof PsiExpressionStatement || parent instanceof PsiReferenceExpression) {
    return false;
  }
 else   if (parent instanceof PsiTypeCastExpression) {
    final PsiTypeCastExpression castExpression=(PsiTypeCastExpression)parent;
    if (TypeUtils.isTypeParameter(castExpression.getType())) {
      return false;
    }
  }
 else   if (parent instanceof PsiConditionalExpression) {
    final PsiConditionalExpression conditionalExpression=(PsiConditionalExpression)parent;
    final PsiExpression thenExpression=conditionalExpression.getThenExpression();
    final PsiExpression elseExpression=conditionalExpression.getElseExpression();
    if (elseExpression == null || thenExpression == null) {
      return false;
    }
    if (PsiTreeUtil.isAncestor(thenExpression,expression,false)) {
      final PsiType type=elseExpression.getType();
      return type instanceof PsiPrimitiveType;
    }
 else     if (PsiTreeUtil.isAncestor(elseExpression,expression,false)) {
      final PsiType type=thenExpression.getType();
      return type instanceof PsiPrimitiveType;
    }
 else {
      return true;
    }
  }
 else   if (parent instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)parent;
    final PsiExpression lhs=binaryExpression.getLOperand();
    final PsiExpression rhs=binaryExpression.getROperand();
    if (rhs == null) {
      return false;
    }
    return PsiTreeUtil.isAncestor(rhs,expression,false) ? canBinaryExpressionBeUnboxed(lhs,rhs) : canBinaryExpressionBeUnboxed(rhs,lhs);
  }
  final PsiCallExpression containingMethodCallExpression=getParentMethodCallExpression(expression);
  return containingMethodCallExpression == null || isSameMethodCalledWithoutBoxing(containingMethodCallExpression,expression);
}
