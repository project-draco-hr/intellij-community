{
  PsiElement parent=expression.getParent();
  while (parent instanceof PsiParenthesizedExpression) {
    expression=(PsiExpression)parent;
    parent=parent.getParent();
  }
  if (parent instanceof PsiExpressionStatement || parent instanceof PsiReferenceExpression) {
    return false;
  }
 else   if (parent instanceof PsiTypeCastExpression) {
    final PsiTypeCastExpression castExpression=(PsiTypeCastExpression)parent;
    return !TypeUtils.isTypeParameter(castExpression.getType());
  }
 else   if (parent instanceof PsiConditionalExpression) {
    final PsiConditionalExpression conditionalExpression=(PsiConditionalExpression)parent;
    final PsiExpression thenExpression=conditionalExpression.getThenExpression();
    final PsiExpression elseExpression=conditionalExpression.getElseExpression();
    if (elseExpression == null || thenExpression == null) {
      return false;
    }
    if (PsiTreeUtil.isAncestor(thenExpression,expression,false)) {
      final PsiType type=elseExpression.getType();
      return type instanceof PsiPrimitiveType;
    }
 else     if (PsiTreeUtil.isAncestor(elseExpression,expression,false)) {
      final PsiType type=thenExpression.getType();
      return type instanceof PsiPrimitiveType;
    }
 else {
      return true;
    }
  }
 else   if (parent instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)parent;
    return !isPossibleObjectComparison(expression,polyadicExpression);
  }
  final PsiElement grandParent=parent.getParent();
  if (!(grandParent instanceof PsiCallExpression)) {
    return true;
  }
  final PsiCallExpression containingCallExpression=(PsiCallExpression)grandParent;
  return isSameMethodCalledWithoutBoxing(containingCallExpression,expression,boxedExpression);
}
