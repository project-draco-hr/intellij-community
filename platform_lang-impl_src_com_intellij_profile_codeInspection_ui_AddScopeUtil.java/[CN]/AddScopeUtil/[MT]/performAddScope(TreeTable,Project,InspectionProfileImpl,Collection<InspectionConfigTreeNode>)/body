{
  final List<InspectionConfigTreeNode> nodes=new ArrayList<InspectionConfigTreeNode>();
  final List<Descriptor> descriptors=new ArrayList<Descriptor>();
  for (  final InspectionConfigTreeNode node : selectedNodes) {
    collect(descriptors,nodes,node);
  }
  final List<String> availableScopes=getAvailableScopes(descriptors,project,inspectionProfile);
  final int idx=Messages.showChooseDialog(treeTable,"Scope:","Choose Scope",ArrayUtil.toStringArray(availableScopes),availableScopes.get(0),Messages.getQuestionIcon());
  if (idx == -1)   return;
  final String scopeName=availableScopes.get(idx);
  final NamedScope chosenScope=NamedScopesHolder.getScope(project,scopeName);
  final Tree tree=treeTable.getTree();
  for (  final InspectionConfigTreeNode node : nodes) {
    final Descriptor descriptor=node.getDefaultDescriptor();
    final InspectionToolWrapper toolWrapper=descriptor.getToolWrapper().createCopy();
    final HighlightDisplayLevel level=inspectionProfile.getErrorLevel(descriptor.getKey(),chosenScope,project);
    final boolean enabled=inspectionProfile.isToolEnabled(descriptor.getKey());
    inspectionProfile.addScope(toolWrapper,chosenScope,level,enabled,project);
    node.dropCache();
    ((DefaultTreeModel)tree.getModel()).reload(node);
    tree.expandPath(new TreePath(node.getPath()));
  }
  tree.revalidate();
}
