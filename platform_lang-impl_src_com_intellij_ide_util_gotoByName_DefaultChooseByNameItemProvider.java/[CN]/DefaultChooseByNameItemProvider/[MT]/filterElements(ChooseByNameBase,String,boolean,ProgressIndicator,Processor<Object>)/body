{
  String namePattern=getNamePattern(base,pattern);
  String qualifierPattern=getQualifierPattern(base,pattern);
  if (removeModelSpecificMarkup(base,pattern).isEmpty() && !base.canShowListForEmptyPattern())   return true;
  ChooseByNameModel model=base.getModel();
  String matchingPattern=convertToMatchingPattern(base,namePattern);
  List<String> namesList=getNamesByPattern(base,base.getNames(everywhere),matchingPattern);
  sortNamesList(matchingPattern,namesList);
  indicator.checkCanceled();
  List<Object> sameNameElements=new SmartList<Object>();
  final TObjectIntHashMap<Object> sameNameWeights=new TObjectIntHashMap<Object>();
  Comparator<Object> weightComparator=new Comparator<Object>(){
    @Override public int compare(    Object o1,    Object o2){
      return sameNameWeights.get(o2) - sameNameWeights.get(o1);
    }
  }
;
  List<Pair<String,MinusculeMatcher>> patternsAndMatchers=getPatternsAndMatchers(qualifierPattern,base);
  MinusculeMatcher matcher=buildPatternMatcher(matchingPattern,NameUtil.MatchingCaseSensitivity.NONE);
  boolean sortedByMatchingDegree=!(base.getModel() instanceof CustomMatcherModel);
  boolean afterStartMatch=false;
  for (  String name : namesList) {
    indicator.checkCanceled();
    boolean isStartMatch=matcher.isStartMatch(name);
    boolean needSeparator=sortedByMatchingDegree && !isStartMatch && afterStartMatch;
    Object[] elements=model instanceof ContributorsBasedGotoByModel ? ((ContributorsBasedGotoByModel)model).getElementsByName(name,everywhere,namePattern,indicator) : model.getElementsByName(name,everywhere,namePattern);
    if (elements.length > 1) {
      sameNameElements.clear();
      sameNameWeights.clear();
      for (      final Object element : elements) {
        indicator.checkCanceled();
        Integer degree=matchQualifier(element,base,patternsAndMatchers);
        if (degree != null) {
          sameNameElements.add(element);
          sameNameWeights.put(element,degree);
        }
      }
      sortByProximity(base,sameNameElements);
      Collections.sort(sameNameElements,weightComparator);
      for (      Object element : sameNameElements) {
        if (needSeparator && !consumer.process(ChooseByNameBase.NON_PREFIX_SEPARATOR))         return false;
        if (!consumer.process(element))         return false;
        needSeparator=false;
        afterStartMatch=isStartMatch;
      }
    }
 else     if (elements.length == 1 && matchQualifier(elements[0],base,patternsAndMatchers) != null) {
      if (needSeparator && !consumer.process(ChooseByNameBase.NON_PREFIX_SEPARATOR))       return false;
      if (!consumer.process(elements[0]))       return false;
      afterStartMatch=isStartMatch;
    }
  }
  return true;
}
