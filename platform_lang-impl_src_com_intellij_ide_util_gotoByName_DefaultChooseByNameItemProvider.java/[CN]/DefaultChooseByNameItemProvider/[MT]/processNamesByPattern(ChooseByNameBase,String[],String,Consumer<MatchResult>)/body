{
  final MinusculeMatcher matcher=buildPatternMatcher(pattern,NameUtil.MatchingCaseSensitivity.NONE);
  int chunks=Math.min(Runtime.getRuntime().availableProcessors(),4);
  final AtomicReferenceArray<ArrayList<MatchResult>> arr=new AtomicReferenceArray<ArrayList<MatchResult>>(chunks);
  Future<?>[] futures=new Future[arr.length() - 1];
  for (int i=0; i < futures.length; ++i) {
    final int finalI=i;
    futures[i]=ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
      @Override public void run(){
        arr.set(finalI,matchNamesByPatternInChunk(base,finalI,arr.length(),names,pattern,matcher));
      }
    }
);
  }
  arr.set(futures.length,matchNamesByPatternInChunk(base,futures.length,arr.length(),names,pattern,matcher));
  for (int i=arr.length() - 1; i >= 0; --i) {
    if (i < futures.length) {
      try {
        futures[i].get();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    for (    MatchResult result : arr.get(i))     consumer.consume(result);
  }
}
