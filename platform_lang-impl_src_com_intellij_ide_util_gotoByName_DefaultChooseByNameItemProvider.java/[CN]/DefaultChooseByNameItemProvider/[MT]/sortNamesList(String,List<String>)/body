{
  final MinusculeMatcher matcher=buildPatternMatcher(namePattern,NameUtil.MatchingCaseSensitivity.NONE);
  final Set<String> startMatches=ContainerUtil.newHashSet();
  final TObjectIntHashMap<String> matchingDegrees=new TObjectIntHashMap<String>();
  for (  String name : namesList) {
    if (matcher.isStartMatch(name)) {
      startMatches.add(name);
    }
    matchingDegrees.put(name,matcher.matchingDegree(name));
  }
  Collections.sort(namesList,new Comparator<String>(){
    @Override public int compare(    String o1,    String o2){
      boolean start1=startMatches.contains(o1);
      boolean start2=startMatches.contains(o2);
      if (start1 != start2)       return start1 ? -1 : 1;
      int degree1=matchingDegrees.get(o1);
      int degree2=matchingDegrees.get(o2);
      if (degree2 < degree1)       return -1;
      if (degree2 > degree1)       return 1;
      return o1.compareToIgnoreCase(o2);
    }
  }
);
}
