{
  LighterASTNode scope=skipExpressionsUp(tree,funExpr,TokenSet.create(LOCAL_VARIABLE,FIELD,TYPE_CAST_EXPRESSION,RETURN_STATEMENT));
  if (scope != null) {
    if (scope.getTokenType() == RETURN_STATEMENT) {
      scope=LightTreeUtil.getParentOfType(tree,scope,TokenSet.create(METHOD),TokenSet.orSet(ElementType.MEMBER_BIT_SET,TokenSet.create(LAMBDA_EXPRESSION)));
    }
    LighterASTNode typeElement=LightTreeUtil.firstChildOfType(tree,scope,TYPE);
    String typeText=getNameIdentifierText(tree,LightTreeUtil.firstChildOfType(tree,typeElement,JAVA_CODE_REFERENCE));
    if (typeText != null) {
      return new FunctionalExpressionKey.TypedLocation(typeText);
    }
  }
  return FunctionalExpressionKey.Location.UNKNOWN;
}
