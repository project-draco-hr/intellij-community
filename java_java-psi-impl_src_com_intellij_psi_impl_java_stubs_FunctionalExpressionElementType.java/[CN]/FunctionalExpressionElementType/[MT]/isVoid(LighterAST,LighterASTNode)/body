{
  if (funExpr.getTokenType() == METHOD_REF_EXPRESSION)   return ThreeState.UNSURE;
  LighterASTNode block=LightTreeUtil.firstChildOfType(tree,funExpr,CODE_BLOCK);
  if (block == null)   return ThreeState.UNSURE;
  final Ref<ThreeState> isVoid=Ref.create(ThreeState.UNSURE);
  new RecursiveLighterASTNodeWalkingVisitor(tree){
    @Override public void visitNode(    @NotNull LighterASTNode element){
      IElementType type=element.getTokenType();
      if (type == LAMBDA_EXPRESSION || ElementType.MEMBER_BIT_SET.contains(type) || isVoid.get() != ThreeState.UNSURE) {
        return;
      }
      if (type == RETURN_STATEMENT) {
        boolean noExpr=LightTreeUtil.firstChildOfType(tree,element,ElementType.EXPRESSION_BIT_SET) == null;
        isVoid.set(ThreeState.fromBoolean(noExpr));
        return;
      }
      super.visitNode(element);
    }
  }
.visitNode(block);
  return isVoid.get();
}
