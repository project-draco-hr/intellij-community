{
  LOG.assertTrue(needEquals || needHashCode);
  clazz=aClass;
  classFields=MemberInfo.extractClassMembers(clazz,MEMBER_INFO_FILTER,false);
  for (  MemberInfo myClassField : classFields) {
    myClassField.setChecked(true);
  }
  if (needEquals) {
    equalsPanel=new MemberSelectionPanel(CodeInsightBundle.message("generate.equals.hashcode.equals.fields.chooser.title"),classFields,null);
    equalsPanel.getTable().setMemberInfoModel(new EqualsMemberInfoModel());
  }
 else {
    equalsPanel=null;
  }
  if (needHashCode) {
    final List<MemberInfo> hashCodeMemberInfos;
    if (needEquals) {
      fieldsToHashCode=createFieldToMemberInfoMap(true);
      hashCodeMemberInfos=Collections.emptyList();
    }
 else {
      hashCodeMemberInfos=classFields;
      fieldsToHashCode=null;
    }
    hashCodePanel=new MemberSelectionPanel(CodeInsightBundle.message("generate.equals.hashcode.hashcode.fields.chooser.title"),hashCodeMemberInfos,null);
    hashCodePanel.getTable().setMemberInfoModel(new HashCodeMemberInfoModel());
    if (needEquals) {
      updateHashCodeMemberInfos(classFields);
    }
  }
 else {
    hashCodePanel=null;
    fieldsToHashCode=null;
  }
  nonNullPanel=new MemberSelectionPanel(CodeInsightBundle.message("generate.equals.hashcode.non.null.fields.chooser.title"),Collections.<MemberInfo>emptyList(),null);
  fieldsToNonNull=createFieldToMemberInfoMap(false);
  for (  final Map.Entry<PsiMember,MemberInfo> entry : fieldsToNonNull.entrySet()) {
    entry.getValue().setChecked(entry.getKey().getModifierList().findAnnotation(NotNull.class.getName()) != null);
  }
}
