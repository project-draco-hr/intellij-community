{
  LOG.assertTrue(needEquals || needHashCode);
  myClass=aClass;
  myClassFields=MemberInfo.extractClassMembers(myClass,MEMBER_INFO_FILTER,false);
  for (  MemberInfo myClassField : myClassFields) {
    myClassField.setChecked(true);
  }
  if (needEquals) {
    myEqualsPanel=new MemberSelectionPanel(CodeInsightBundle.message("generate.equals.hashcode.equals.fields.chooser.title"),myClassFields,null);
    myEqualsPanel.getTable().setMemberInfoModel(new EqualsMemberInfoModel());
  }
 else {
    myEqualsPanel=null;
  }
  if (needHashCode) {
    final List<MemberInfo> hashCodeMemberInfos;
    if (needEquals) {
      myFieldsToHashCode=createFieldToMemberInfoMap(true);
      hashCodeMemberInfos=Collections.emptyList();
    }
 else {
      hashCodeMemberInfos=myClassFields;
      myFieldsToHashCode=null;
    }
    myHashCodePanel=new MemberSelectionPanel(CodeInsightBundle.message("generate.equals.hashcode.hashcode.fields.chooser.title"),hashCodeMemberInfos,null);
    myHashCodePanel.getTable().setMemberInfoModel(new HashCodeMemberInfoModel());
    if (needEquals) {
      updateHashCodeMemberInfos(myClassFields);
    }
  }
 else {
    myHashCodePanel=null;
    myFieldsToHashCode=null;
  }
  myNonNullPanel=new MemberSelectionPanel(CodeInsightBundle.message("generate.equals.hashcode.non.null.fields.chooser.title"),Collections.<MemberInfo>emptyList(),null);
  myFieldsToNonNull=createFieldToMemberInfoMap(false);
  for (  final Map.Entry<PsiMember,MemberInfo> entry : myFieldsToNonNull.entrySet()) {
    entry.getValue().setChecked(entry.getKey().getModifierList().findAnnotation(NotNull.class.getName()) != null);
  }
}
