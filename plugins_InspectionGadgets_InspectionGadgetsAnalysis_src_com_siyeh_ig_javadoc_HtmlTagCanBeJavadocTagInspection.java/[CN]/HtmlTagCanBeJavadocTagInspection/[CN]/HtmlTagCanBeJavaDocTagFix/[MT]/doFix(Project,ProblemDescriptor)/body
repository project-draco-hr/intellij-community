{
  final TextRange range=descriptor.getTextRangeInElement();
  PsiElement element=descriptor.getPsiElement();
  final PsiFile file=PsiTreeUtil.getParentOfType(element,PsiFile.class);
  if (file == null) {
    return;
  }
  final Document document=PsiDocumentManager.getInstance(project).getDocument(file);
  if (document == null) {
    return;
  }
  final int startOffset=range.getStartOffset();
  final int replaceStartOffset=element.getTextOffset() + startOffset;
  int startTag=range.getEndOffset();
  @NonNls String text=element.getText();
  if (!"<code>".equals(text.substring(startOffset,startTag))) {
    return;
  }
  @NonNls final StringBuilder newCommentText=new StringBuilder("{@code");
  int endTag=text.indexOf("</code>",startTag);
  while (endTag < 0) {
    appendElementText(text,startTag,text.length(),newCommentText);
    element=element.getNextSibling();
    if (element == null)     return;
    startTag=0;
    text=element.getText();
    endTag=text.indexOf("</code>");
  }
  appendElementText(text,startTag,endTag,newCommentText);
  newCommentText.append('}');
  final int replaceEndOffset=element.getTextOffset() + endTag + 7;
  final String oldText=document.getText(new TextRange(replaceStartOffset,replaceEndOffset));
  if (!oldText.startsWith("<code>") || !oldText.endsWith("</code>")) {
    return;
  }
  document.replaceString(replaceStartOffset,replaceEndOffset,newCommentText);
}
