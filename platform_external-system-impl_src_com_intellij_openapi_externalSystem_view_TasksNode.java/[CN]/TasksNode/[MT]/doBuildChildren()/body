{
  final List<ExternalSystemNode<?>> result=ContainerUtil.newArrayList();
  final boolean isGroup=getExternalProjectsView().getGroupTasks();
  if (isGroup) {
    for (    Map.Entry<String,Collection<TaskNode>> collectionEntry : myTasksMap.entrySet()) {
      final String group=ObjectUtils.notNull(collectionEntry.getKey(),"other");
      final ExternalSystemNode tasksGroupNode=new ExternalSystemNode(getExternalProjectsView(),null,null){
        @Override protected void update(        PresentationData presentation){
          super.update(presentation);
          presentation.setIcon(ExternalSystemIcons.TaskGroup);
        }
        @Override public String getName(){
          return group;
        }
        @Override public boolean isVisible(){
          return hasChildren() && super.isVisible();
        }
        @Override public int compareTo(        @NotNull ExternalSystemNode node){
          return "other".equals(group) ? 1 : super.compareTo(node);
        }
      }
;
      tasksGroupNode.addAll(collectionEntry.getValue());
      result.add(tasksGroupNode);
    }
  }
 else {
    result.addAll(myTasksMap.values());
  }
  return result;
}
