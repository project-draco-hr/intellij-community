{
  registrar.registerReferenceProvider(PlatformPatterns.psiElement(GrLiteral.class),new PropertiesReferenceProvider());
  registrar.registerReferenceProvider(GroovyPatterns.stringLiteral().withParent(GrAnnotationNameValuePair.class),new SpockUnrollReferenceProvider());
  registrar.registerReferenceProvider(GroovyPatterns.stringLiteral().methodCallParameter(0,JavaCharsetReferenceContributor.CHARSET_METHOD),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext context){
      GrLiteral literal=(GrLiteral)element;
      Object value=literal.getValue();
      if (value instanceof String) {
        return new PsiReference[]{new EncodingReference(element,(String)value,GroovyStringLiteralManipulator.getLiteralRange(literal.getText()))};
      }
      return PsiReference.EMPTY_ARRAY;
    }
  }
);
}
