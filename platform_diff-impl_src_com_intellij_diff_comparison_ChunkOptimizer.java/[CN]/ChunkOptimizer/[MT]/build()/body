{
  List<Range> newRanges=new ArrayList<Range>();
  for (  Range range2 : myIterable.iterateUnchanged()) {
    Range range1=ContainerUtil.getLastItem(newRanges);
    if (range1 == null || (range1.end1 != range2.start1 && range1.end2 != range2.start2)) {
      newRanges.add(range2);
      continue;
    }
    int count1=range1.end1 - range1.start1;
    int count2=range2.end1 - range2.start1;
    int equalForward=expandForward(myData1,myData2,range1.end1,range1.end2,range1.end1 + count2,range1.end2 + count2);
    int equalBackward=expandBackward(myData1,myData2,range2.start1 - count1,range2.start2 - count1,range2.start1,range2.start2);
    if (equalForward == count2) {
      newRanges.remove(newRanges.size() - 1);
      newRanges.add(new Range(range1.start1,range1.end1 + count2,range1.start2,range1.end2 + count2));
      continue;
    }
    if (equalBackward == count1) {
      newRanges.remove(newRanges.size() - 1);
      newRanges.add(new Range(range2.start1 - count1,range2.end1,range2.start2 - count1,range2.end2));
      continue;
    }
    Side touchSide=Side.fromLeft(range1.end1 == range2.start1);
    int shift=getShift(touchSide,equalForward,equalBackward,range1,range2);
    if (shift == 0) {
      newRanges.add(range2);
    }
 else {
      newRanges.remove(newRanges.size() - 1);
      newRanges.add(new Range(range1.start1,range1.end1 + shift,range1.start2,range1.end2 + shift));
      newRanges.add(new Range(range2.start1 + shift,range2.end1,range2.start2 + shift,range2.end2));
    }
  }
  return fair(createUnchanged(newRanges,myData1.size(),myData2.size()));
}
