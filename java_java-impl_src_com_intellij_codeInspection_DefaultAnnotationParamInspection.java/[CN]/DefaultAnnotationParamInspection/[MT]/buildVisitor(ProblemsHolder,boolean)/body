{
  return new JavaElementVisitor(){
    @Override public void visitNameValuePair(    final PsiNameValuePair pair){
      PsiAnnotationMemberValue value=pair.getValue();
      if (!(value instanceof PsiLiteralExpression) && !(value instanceof PsiArrayInitializerMemberValue))       return;
      PsiReference reference=pair.getReference();
      if (reference == null)       return;
      PsiElement element=reference.resolve();
      if (!(element instanceof PsiAnnotationMethod))       return;
      PsiAnnotationMemberValue defaultValue=((PsiAnnotationMethod)element).getDefaultValue();
      if (defaultValue == null)       return;
      if (areEqual(value,defaultValue)) {
        holder.registerProblem(value,"Redundant default parameter value assignment",ProblemHighlightType.LIKE_UNUSED_SYMBOL,new LocalQuickFix(){
          @Nls @NotNull @Override public String getFamilyName(){
            return "Remove redundant parameter";
          }
          @Override public void applyFix(          @NotNull Project project,          @NotNull ProblemDescriptor descriptor){
            PsiElement parent=descriptor.getPsiElement().getParent();
            FileModificationService.getInstance().preparePsiElementsForWrite(parent);
            parent.delete();
          }
        }
);
      }
    }
  }
;
}
