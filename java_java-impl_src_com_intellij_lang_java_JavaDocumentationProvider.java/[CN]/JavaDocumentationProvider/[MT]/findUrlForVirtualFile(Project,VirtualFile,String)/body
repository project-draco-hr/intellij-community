{
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  Module module=fileIndex.getModuleForFile(virtualFile);
  if (module == null) {
    final VirtualFileSystem fs=virtualFile.getFileSystem();
    if (fs instanceof JarFileSystem) {
      final VirtualFile jar=((JarFileSystem)fs).getVirtualFileForJar(virtualFile);
      if (jar != null) {
        module=fileIndex.getModuleForFile(jar);
      }
    }
  }
  if (module != null) {
    String[] javadocPaths=JavaModuleExternalPaths.getInstance(module).getJavadocUrls();
    final List<String> httpRoots=PlatformDocumentationUtil.getHttpRoots(javadocPaths,relPath);
    if (httpRoots != null || !fileIndex.isInLibraryClasses(virtualFile)) {
      return ContainerUtil.isEmpty(httpRoots) ? null : new ClassInfo(false,httpRoots);
    }
  }
  for (  OrderEntry orderEntry : fileIndex.getOrderEntriesForFile(virtualFile)) {
    boolean isJdk=orderEntry instanceof JdkOrderEntry;
    for (    VirtualFile root : orderEntry.getFiles(JavadocOrderRootType.getInstance())) {
      if (root.getFileSystem() == JarFileSystem.getInstance()) {
        VirtualFile file=root.findFileByRelativePath(relPath);
        List<Url> urls=file == null ? null : BuiltInWebBrowserUrlProvider.getUrls(file,project,null);
        if (!ContainerUtil.isEmpty(urls)) {
          List<String> result=new SmartList<String>();
          for (          Url url : urls) {
            result.add(url.toExternalForm());
          }
          return new ClassInfo(isJdk,result);
        }
      }
    }
    List<String> httpRoot=PlatformDocumentationUtil.getHttpRoots(JavadocOrderRootType.getUrls(orderEntry),relPath);
    if (!ContainerUtil.isEmpty(httpRoot)) {
      return new ClassInfo(isJdk,httpRoot);
    }
  }
  return null;
}
