{
  StringBuilder buffer=new StringBuilder();
  PsiClass parentClass=method.getContainingClass();
  if (parentClass != null) {
    if (method.isConstructor() && !(parentClass instanceof PsiAnonymousClass)) {
      generatePackageInfo(buffer,parentClass);
    }
    buffer.append(JavaDocUtil.getShortestClassName(parentClass,method));
    newLine(buffer);
  }
  generateModifiers(buffer,method);
  generateTypeParameters(method,buffer);
  if (method.getReturnType() != null) {
    JavaDocInfoGenerator.generateType(buffer,substitutor.substitute(method.getReturnType()),method,false);
    buffer.append(" ");
  }
  buffer.append(method.getName());
  buffer.append(" (");
  PsiParameter[] parms=method.getParameterList().getParameters();
  for (int i=0; i < parms.length; i++) {
    PsiParameter parm=parms[i];
    JavaDocInfoGenerator.generateType(buffer,substitutor.substitute(parm.getType()),method,false);
    buffer.append(" ");
    if (parm.getName() != null) {
      buffer.append(parm.getName());
    }
    if (i < parms.length - 1) {
      buffer.append(", ");
    }
  }
  buffer.append(")");
  PsiClassType[] refs=method.getThrowsList().getReferencedTypes();
  if (refs.length > 0) {
    newLine(buffer);
    buffer.append(" throws ");
    for (int i=0; i < refs.length; i++) {
      PsiClass throwsClass=refs[i].resolve();
      if (throwsClass != null) {
        buffer.append(JavaDocUtil.getShortestClassName(throwsClass,method));
      }
 else {
        buffer.append(refs[i].getPresentableText());
      }
      if (i < refs.length - 1) {
        buffer.append(", ");
      }
    }
  }
  return buffer.toString();
}
