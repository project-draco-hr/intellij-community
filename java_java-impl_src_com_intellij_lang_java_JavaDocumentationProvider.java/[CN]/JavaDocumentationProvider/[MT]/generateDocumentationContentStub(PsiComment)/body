{
  final PsiDocCommentOwner commentOwner=((PsiDocComment)_comment).getOwner();
  final Project project=commentOwner.getProject();
  final StringBuilder builder=new StringBuilder();
  final CodeDocumentationAwareCommenter commenter=(CodeDocumentationAwareCommenter)LanguageCommenters.INSTANCE.forLanguage(commentOwner.getLanguage());
  if (commentOwner instanceof PsiMethod) {
    PsiMethod psiMethod=(PsiMethod)commentOwner;
    generateParametersTakingDocFromSuperMethods(project,builder,commenter,psiMethod);
    final PsiTypeParameterList typeParameterList=psiMethod.getTypeParameterList();
    if (typeParameterList != null) {
      createTypeParamsListComment(builder,project,commenter,typeParameterList);
    }
    if (psiMethod.getReturnType() != null && psiMethod.getReturnType() != PsiType.VOID) {
      builder.append(CodeDocumentationUtil.createDocCommentLine(RETURN_TAG,project,commenter));
      builder.append(LINE_SEPARATOR);
    }
    final PsiJavaCodeReferenceElement[] references=psiMethod.getThrowsList().getReferenceElements();
    for (    PsiJavaCodeReferenceElement reference : references) {
      builder.append(CodeDocumentationUtil.createDocCommentLine(THROWS_TAG,project,commenter));
      builder.append(reference.getText());
      builder.append(LINE_SEPARATOR);
    }
  }
 else   if (commentOwner instanceof PsiClass) {
    final PsiTypeParameterList typeParameterList=((PsiClass)commentOwner).getTypeParameterList();
    if (typeParameterList != null) {
      createTypeParamsListComment(builder,project,commenter,typeParameterList);
    }
  }
  return builder.length() > 0 ? builder.toString() : null;
}
