{
  List<String> urls=null;
  if (element instanceof PsiClass) {
    urls=findUrlForClass((PsiClass)element);
  }
 else   if (element instanceof PsiField) {
    PsiField field=(PsiField)element;
    PsiClass aClass=field.getContainingClass();
    if (aClass != null) {
      urls=findUrlForClass(aClass);
      if (urls != null) {
        for (int i=0; i < urls.size(); i++) {
          urls.set(i,urls.get(i) + "#" + field.getName());
        }
      }
    }
  }
 else   if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    PsiClass aClass=method.getContainingClass();
    if (aClass != null) {
      List<String> classUrls=findUrlForClass(aClass);
      if (classUrls != null) {
        urls=ContainerUtil.newSmartList();
        final boolean useJava8Format=PsiUtil.isLanguageLevel8OrHigher(method);
        final Set<String> signatures=getHtmlMethodSignatures(method,useJava8Format);
        for (        String signature : signatures) {
          for (          String classUrl : classUrls) {
            urls.add(classUrl + "#" + signature);
          }
        }
      }
    }
  }
 else   if (element instanceof PsiPackage) {
    urls=findUrlForPackage((PsiPackage)element);
  }
 else   if (element instanceof PsiDirectory) {
    PsiPackage aPackage=JavaDirectoryService.getInstance().getPackage(((PsiDirectory)element));
    if (aPackage != null) {
      urls=findUrlForPackage(aPackage);
    }
  }
  if (urls == null || urls.isEmpty()) {
    return null;
  }
 else {
    for (int i=0; i < urls.size(); i++) {
      urls.set(i,FileUtil.toSystemIndependentName(urls.get(i)));
    }
    return urls;
  }
}
