{
  LOG.assertTrue(ApplicationManager.getApplication().isUnitTestMode() || !ApplicationManager.getApplication().isDispatchThread());
  List<String> urls=null;
  if (element instanceof PsiClass) {
    ClassInfo info=findUrlForClass((PsiClass)element);
    urls=info == null ? null : info.externalDocUrls;
  }
 else   if (element instanceof PsiField) {
    PsiField field=(PsiField)element;
    PsiClass aClass=field.getContainingClass();
    if (aClass != null) {
      ClassInfo info=findUrlForClass(aClass);
      if (info != null) {
        urls=info.externalDocUrls;
        for (int i=0; i < urls.size(); i++) {
          urls.set(i,urls.get(i) + "#" + field.getName());
        }
      }
    }
  }
 else   if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    PsiClass aClass=method.getContainingClass();
    if (aClass != null) {
      ClassInfo info=findUrlForClass(aClass);
      if (info != null) {
        urls=ContainerUtil.newSmartList();
        for (int i=0; i < info.externalDocUrls.size(); i++) {
          LanguageLevel languageLevel=info.isInJdk ? PsiUtil.getLanguageLevel(method) : detectLanguageLevel(info.internalDocUrls.get(i));
          String signature=formatMethodSignature(method,languageLevel.isAtLeast(LanguageLevel.JDK_1_5),languageLevel.isAtLeast(LanguageLevel.JDK_1_8));
          urls.add(info.externalDocUrls.get(i) + "#" + signature);
        }
      }
    }
  }
 else   if (element instanceof PsiPackage) {
    urls=findUrlForPackage((PsiPackage)element);
  }
 else   if (element instanceof PsiDirectory) {
    PsiPackage aPackage=JavaDirectoryService.getInstance().getPackage(((PsiDirectory)element));
    if (aPackage != null) {
      urls=findUrlForPackage(aPackage);
    }
  }
  if (urls == null || urls.isEmpty()) {
    return null;
  }
 else {
    for (int i=0; i < urls.size(); i++) {
      urls.set(i,FileUtil.toSystemIndependentName(urls.get(i)));
    }
    return urls;
  }
}
