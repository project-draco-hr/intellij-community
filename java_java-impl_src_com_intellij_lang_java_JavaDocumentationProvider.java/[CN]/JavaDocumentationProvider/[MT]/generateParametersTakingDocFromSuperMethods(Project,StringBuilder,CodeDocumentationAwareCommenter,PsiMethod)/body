{
  final PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
  final Map<String,String> param2Description=new HashMap<>();
  final PsiMethod[] superMethods=psiMethod.findSuperMethods();
  for (  PsiMethod superMethod : superMethods) {
    final PsiDocComment comment=superMethod.getDocComment();
    if (comment != null) {
      final PsiDocTag[] params=comment.findTagsByName("param");
      for (      PsiDocTag param : params) {
        final PsiElement[] dataElements=param.getDataElements();
        if (dataElements != null) {
          String paramName=null;
          for (          PsiElement dataElement : dataElements) {
            if (dataElement instanceof PsiDocParamRef) {
              paramName=dataElement.getReference().getCanonicalText();
              break;
            }
          }
          if (paramName != null) {
            param2Description.put(paramName,param.getText());
          }
        }
      }
    }
  }
  for (  PsiParameter parameter : parameters) {
    String description=param2Description.get(parameter.getName());
    if (description != null) {
      builder.append(CodeDocumentationUtil.createDocCommentLine("",project,commenter));
      if (description.indexOf('\n') > -1)       description=description.substring(0,description.lastIndexOf('\n'));
      builder.append(description);
    }
 else {
      builder.append(CodeDocumentationUtil.createDocCommentLine(PARAM_TAG,project,commenter));
      builder.append(parameter.getName());
    }
    builder.append(LINE_SEPARATOR);
  }
}
