{
  StringBuilder buffer=new StringBuilder();
  if (aClass instanceof PsiAnonymousClass)   return LangBundle.message("java.terms.anonymous.class");
  generatePackageInfo(buffer,aClass);
  generateModifiers(buffer,aClass);
  final String classString=aClass.isAnnotationType() ? "java.terms.annotation.interface" : aClass.isInterface() ? "java.terms.interface" : aClass instanceof PsiTypeParameter ? "java.terms.type.parameter" : aClass.isEnum() ? "java.terms.enum" : "java.terms.class";
  buffer.append(LangBundle.message(classString)).append(" ");
  buffer.append(JavaDocUtil.getShortestClassName(aClass,aClass));
  generateTypeParameters(aClass,buffer);
  if (!aClass.isEnum() && !aClass.isAnnotationType()) {
    PsiReferenceList extendsList=aClass.getExtendsList();
    writeExtends(aClass,buffer,extendsList == null ? PsiClassType.EMPTY_ARRAY : extendsList.getReferencedTypes());
  }
  writeImplements(aClass,buffer,aClass.getImplementsListTypes());
  return buffer.toString();
}
