{
  GithubAuthData auth=authHolder.getAuthData();
  try {
    final GithubConnection connection=new GithubConnection(auth,true);
    ScheduledFuture<?> future=null;
    try {
      future=addCancellationListener(indicator,connection);
      return task.convert(connection);
    }
  finally {
      connection.close();
      if (future != null)       future.cancel(true);
    }
  }
 catch (  GithubTwoFactorAuthenticationException e) {
    getTwoFactorAuthData(project,authHolder,indicator,auth);
    return runTask(project,authHolder,indicator,task);
  }
catch (  GithubAuthenticationException e) {
    getValidAuthData(project,authHolder,indicator,auth);
    return runTask(project,authHolder,indicator,task);
  }
}
