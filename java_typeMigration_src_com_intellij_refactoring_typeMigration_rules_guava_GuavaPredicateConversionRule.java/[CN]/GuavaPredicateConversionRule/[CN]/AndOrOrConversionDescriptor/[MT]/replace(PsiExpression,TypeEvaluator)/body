{
  final PsiMethodCallExpression methodCall=(PsiMethodCallExpression)expression;
  final String methodName=methodCall.getMethodExpression().getReferenceName();
  final PsiExpression[] arguments=methodCall.getArgumentList().getExpressions();
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(expression.getProject());
  if (arguments.length == 1) {
    return (PsiExpression)expression.replace(elementFactory.createExpressionFromText(adjust(arguments[0],true,myTargetType,evaluator),expression));
  }
  LOG.assertTrue(arguments.length != 0);
  StringBuilder replaceBy=new StringBuilder();
  for (int i=1; i < arguments.length; i++) {
    PsiExpression argument=arguments[i];
    replaceBy.append(".").append(methodName).append("(").append(adjust(argument,false,myTargetType,evaluator)).append(")");
  }
  replaceBy.insert(0,adjust(arguments[0],true,myTargetType,evaluator));
  final PsiElement parent=expression.getParent();
  if (parent instanceof PsiMethodReferenceExpression) {
    expression=replaceTypeCast(expression,parent);
  }
 else   if (!isJavaPredicate(parent,evaluator)) {
    replaceBy.append("::test");
  }
  return (PsiExpression)expression.replace(elementFactory.createExpressionFromText(replaceBy.toString(),expression));
}
