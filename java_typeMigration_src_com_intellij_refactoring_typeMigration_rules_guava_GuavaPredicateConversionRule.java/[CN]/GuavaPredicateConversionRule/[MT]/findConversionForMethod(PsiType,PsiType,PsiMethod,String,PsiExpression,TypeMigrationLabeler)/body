{
  if (!(context instanceof PsiMethodCallExpression)) {
    return null;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass != null && GUAVA_PREDICATES_UTILITY.equals(aClass.getQualifiedName())) {
    if (!isConvertablePredicatesMethod(method))     return null;
    if (PREDICATES_AND_OR.contains(methodName) && canMigrateAndOrOr((PsiMethodCallExpression)context)) {
      return new AndOrOrConversionDescriptor(GuavaConversionUtil.addTypeParameters(JAVA_PREDICATE,context.getType(),context));
    }
 else     if (PREDIACTES_NOT.equals(methodName)) {
      return new NotConversionDescriptor(GuavaConversionUtil.addTypeParameters(JAVA_PREDICATE,context.getType(),context));
    }
  }
  return new TypeConversionDescriptorBase(){
    @Override public PsiExpression replace(    PsiExpression expression) throws IncorrectOperationException {
      return (PsiExpression)expression.replace(JavaPsiFacade.getElementFactory(expression.getProject()).createExpressionFromText(expression.getText() + "::test",expression));
    }
  }
;
}
