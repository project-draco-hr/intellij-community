{
  int offset=0;
  int index=0;
  while (!iterator.atEnd() && index < ranges.size()) {
    TextRange range=ranges.get(index);
    if (range.getStartOffset() >= iterator.getEnd()) {
      iterator.advance();
      continue;
    }
    if (range.getEndOffset() >= iterator.getStart()) {
      int relativeStart=Math.max(iterator.getStart() - range.getStartOffset(),0);
      int relativeEnd=Math.min(iterator.getEnd() - range.getStartOffset(),range.getLength());
      boolean merged=false;
      if (myMergeByTextAttributes && !myPieces.isEmpty()) {
        Map.Entry<Integer,Element> entry=myPieces.lastEntry();
        final Integer key=entry.getKey();
        final Element element=entry.getValue();
        if (element.getEnd() >= offset + relativeStart && element.getAttributes().equals(iterator.getTextAttributes()) && element.getElementType().equals(iterator.getTokenType())) {
          merged=true;
          myPieces.put(key,new Element(key,offset + relativeEnd,iterator.getTokenType(),iterator.getTextAttributes()));
        }
      }
      if (!merged) {
        myPieces.put(offset + relativeStart,new Element(offset + relativeStart,offset + relativeEnd,iterator.getTokenType(),iterator.getTextAttributes()));
      }
    }
    if (range.getEndOffset() < iterator.getEnd()) {
      offset+=range.getLength() + 1 + myAdditionalOffset;
      index++;
      continue;
    }
    iterator.advance();
  }
}
