{
  final PropertiesFile propertiesFile=PropertiesImplUtil.getPropertiesFile(file);
  if (propertiesFile == null) {
    return null;
  }
  final ResourceBundle resourceBundle=propertiesFile.getResourceBundle();
  final List<PropertiesFile> files=resourceBundle.getPropertiesFiles();
  if (files.isEmpty()) {
    return null;
  }
  List<Locale> bundleLocales=ContainerUtil.mapNotNull(files,new Function<PropertiesFile,Locale>(){
    @Override public Locale fun(    PropertiesFile propertiesFile){
      final Locale locale=propertiesFile.getLocale();
      return locale == ResourceBundleManager.DEFAULT_LOCALE ? null : locale;
    }
  }
);
  bundleLocales=ContainerUtil.filter(bundleLocales,new Condition<Locale>(){
    @Override public boolean value(    Locale locale){
      return !JAVA_LOCALES.getValue().contains(locale.getLanguage()) && !myAdditionalLanguages.contains(locale.getLanguage());
    }
  }
);
  if (bundleLocales.isEmpty()) {
    return null;
  }
  final ProblemDescriptor descriptor=manager.createProblemDescriptor(file,PropertiesBundle.message("resource.bundle.contains.locales.with.suspicious.locale.languages.desciptor"),new DissociateResourceBundleQuickFix(resourceBundle),ProblemHighlightType.WEAK_WARNING,true);
  return new ProblemDescriptor[]{descriptor};
}
