{
  if (qualifier == null || expression == null)   return null;
  if (qualifier instanceof PsiMethodCallExpression)   return null;
  try {
    final List<LocalQuickFix> fixes=new SmartList<LocalQuickFix>();
    if (!(qualifier instanceof PsiLiteralExpression && ((PsiLiteralExpression)qualifier).getValue() == null)) {
      if (PsiUtil.getLanguageLevel(qualifier).isAtLeast(LanguageLevel.JDK_1_4)) {
        final Project project=qualifier.getProject();
        final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(project).getElementFactory();
        final PsiBinaryExpression binary=(PsiBinaryExpression)elementFactory.createExpressionFromText("a != null",null);
        binary.getLOperand().replace(qualifier);
        ContainerUtil.addIfNotNull(fixes,createAssertFix(binary,expression));
      }
      addSurroundWithIfFix(qualifier,fixes,onTheFly);
      if (ReplaceWithTernaryOperatorFix.isAvailable(qualifier,expression)) {
        fixes.add(new ReplaceWithTernaryOperatorFix(qualifier));
      }
    }
    ContainerUtil.addIfNotNull(fixes,DfaOptionalSupport.registerReplaceOptionalOfWithOfNullableFix(qualifier));
    return fixes.isEmpty() ? null : fixes.toArray(new LocalQuickFix[fixes.size()]);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
    return null;
  }
}
