{
  Pair<Set<Instruction>,Set<Instruction>> constConditions=runner.getConstConditionalExpressions();
  Set<Instruction> trueSet=constConditions.getFirst();
  Set<Instruction> falseSet=constConditions.getSecond();
  ArrayList<Instruction> allProblems=new ArrayList<Instruction>();
  allProblems.addAll(trueSet);
  allProblems.addAll(falseSet);
  allProblems.addAll(runner.getNPEInstructions());
  allProblems.addAll(runner.getCCEInstructions());
  allProblems.addAll(StandardDataFlowRunner.getRedundantInstanceofs(runner,visitor));
  Collections.sort(allProblems,new Comparator<Instruction>(){
    @Override public int compare(    Instruction i1,    Instruction i2){
      return i1.getIndex() - i2.getIndex();
    }
  }
);
  HashSet<PsiElement> reportedAnchors=new HashSet<PsiElement>();
  for (  Instruction instruction : allProblems) {
    if (instruction instanceof MethodCallInstruction) {
      reportCallMayProduceNpe(holder,(MethodCallInstruction)instruction,reportedAnchors);
    }
 else     if (instruction instanceof FieldReferenceInstruction && reportedAnchors.add(((FieldReferenceInstruction)instruction).getElementToAssert())) {
      reportFieldAccessMayProduceNpe(holder,(FieldReferenceInstruction)instruction);
    }
 else     if (instruction instanceof TypeCastInstruction && reportedAnchors.add(((TypeCastInstruction)instruction).getCastExpression().getCastType())) {
      reportCastMayFail(holder,(TypeCastInstruction)instruction);
    }
 else     if (instruction instanceof BranchingInstruction) {
      handleBranchingInstruction(holder,visitor,trueSet,falseSet,reportedAnchors,(BranchingInstruction)instruction);
    }
  }
  reportNullableArguments(runner,holder,reportedAnchors);
  reportNullableAssignments(runner,holder,reportedAnchors);
  reportUnboxedNullables(runner,holder,reportedAnchors);
  reportNullableReturns(runner,holder,reportedAnchors);
  reportNullableArgumentsPassedToNonAnnotated(runner,holder,reportedAnchors);
  if (REPORT_CONSTANT_REFERENCE_VALUES) {
    reportConstantReferenceValues(holder,visitor,reportedAnchors);
  }
}
