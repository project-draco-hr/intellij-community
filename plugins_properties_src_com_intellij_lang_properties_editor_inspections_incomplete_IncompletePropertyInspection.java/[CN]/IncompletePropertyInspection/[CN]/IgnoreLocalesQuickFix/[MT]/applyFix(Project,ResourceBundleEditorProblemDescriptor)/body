{
  final PsiElement element=myElementPointer.getElement();
  if (element == null) {
    return;
  }
  final IProperty property=PropertiesImplUtil.getProperty(element);
  if (property == null) {
    return;
  }
  final IncompletePropertyInspection inspection=getInstance(element);
  final List<PropertiesFile> allFilesWithoutTranslation=inspection.getPropertiesFilesWithoutTranslation(myResourceBundle,property.getKey());
  if (allFilesWithoutTranslation.isEmpty()) {
    return;
  }
  final TreeSet<String> suffixesToIgnore=new TreeSet<String>(ContainerUtil.map(allFilesWithoutTranslation,new Function<PropertiesFile,String>(){
    @Override public String fun(    PropertiesFile file){
      return PropertiesUtil.getSuffix(file);
    }
  }
));
  if (new IncompletePropertyInspectionOptionsPanel(suffixesToIgnore).showDialogAndGet(project)) {
    DisableInspectionToolAction.modifyAndCommitProjectProfile(new Consumer<ModifiableModel>(){
      @Override public void consume(      ModifiableModel modifiableModel){
        ((IncompletePropertyInspection)modifiableModel.getInspectionTool(TOOL_KEY,element).getTool()).addSuffixes(suffixesToIgnore);
      }
    }
,project);
  }
}
