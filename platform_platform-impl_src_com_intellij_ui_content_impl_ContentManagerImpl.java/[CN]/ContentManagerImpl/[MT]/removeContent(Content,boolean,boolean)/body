{
  ApplicationManager.getApplication().assertIsDispatchThread();
  int indexToBeRemoved=getIndexOfContent(content);
  if (indexToBeRemoved == -1)   return ActionCallback.REJECTED;
  try {
    Content selection=mySelection.isEmpty() ? null : mySelection.get(mySelection.size() - 1);
    int selectedIndex=selection != null ? myContents.indexOf(selection) : -1;
    if (!fireContentRemoveQuery(content,indexToBeRemoved,ContentManagerEvent.ContentOperation.undefined)) {
      return ActionCallback.REJECTED;
    }
    if (!content.isValid()) {
      return ActionCallback.REJECTED;
    }
    boolean wasSelected=isSelected(content);
    if (wasSelected) {
      removeFromSelection(content);
    }
    int indexToSelect=-1;
    if (wasSelected) {
      int i=indexToBeRemoved - 1;
      if (i >= 0) {
        indexToSelect=i;
      }
 else       if (getContentCount() > 1) {
        indexToSelect=0;
      }
    }
 else     if (selectedIndex > indexToBeRemoved) {
      indexToSelect=selectedIndex - 1;
    }
    mySelectionHistory.remove(content);
    myContents.remove(content);
    content.removePropertyChangeListener(this);
    fireContentRemoved(content,indexToBeRemoved);
    ((ContentImpl)content).setManager(null);
    if (dispose) {
      Disposer.dispose(content);
    }
    int newSize=myContents.size();
    if (newSize > 0 && trackSelection) {
      ActionCallback result=new ActionCallback();
      if (indexToSelect > -1) {
        final Content toSelect=mySelectionHistory.size() > 0 ? mySelectionHistory.get(0) : myContents.get(indexToSelect);
        if (!isSelected(toSelect)) {
          if (myUI.isSingleSelection()) {
            setSelectedContentCB(toSelect).notify(result);
          }
 else {
            addSelectedContent(toSelect);
            result.setDone();
          }
        }
      }
      return result;
    }
 else {
      mySelection.clear();
      return ActionCallback.DONE;
    }
  }
  finally {
    if (ApplicationManager.getApplication().isDispatchThread()) {
      if (!myDisposed) {
        myUI.getComponent().updateUI();
      }
    }
  }
}
