{
  final List<AbstractTreeNode> topLevelNodes=new ArrayList<AbstractTreeNode>();
  final LinkedHashSet<PsiPackage> packages=new LinkedHashSet<PsiPackage>();
  final LinkedHashSet<PsiClass> classes=new LinkedHashSet<PsiClass>();
  for (  CoverageSuite suite : mySuitesBundle.getSuites()) {
    packages.addAll(((JavaCoverageSuite)suite).getCurrentSuitePackages(myProject));
    classes.addAll(((JavaCoverageSuite)suite).getCurrentSuiteClasses(myProject));
  }
  final Set<PsiPackage> packs=new HashSet<PsiPackage>();
  for (  PsiPackage aPackage : packages) {
    final String qualifiedName=aPackage.getQualifiedName();
    for (    PsiPackage psiPackage : packages) {
      if (psiPackage.getQualifiedName().startsWith(qualifiedName + ".")) {
        packs.add(psiPackage);
        break;
      }
    }
  }
  packages.removeAll(packs);
  for (  PsiPackage aPackage : packages) {
    final GlobalSearchScope searchScope=mySuitesBundle.getSearchScope(myProject);
    if (aPackage.getClasses(searchScope).length != 0) {
      final CoverageListNode node=new CoverageListNode(myProject,aPackage,mySuitesBundle,myStateBean);
      topLevelNodes.add(node);
    }
    collectSubPackages(topLevelNodes,aPackage);
  }
  for (  PsiClass aClass : classes) {
    if (getClassCoverageInfo(aClass) == null)     continue;
    topLevelNodes.add(new CoverageListNode(myProject,aClass,mySuitesBundle,myStateBean));
  }
  return topLevelNodes;
}
