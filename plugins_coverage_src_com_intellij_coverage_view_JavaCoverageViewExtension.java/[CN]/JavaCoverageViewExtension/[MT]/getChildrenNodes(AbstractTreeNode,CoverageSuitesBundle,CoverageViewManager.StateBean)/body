{
  List<AbstractTreeNode> children=new ArrayList<AbstractTreeNode>();
  if (node instanceof CoverageListNode) {
    Object val=node.getValue();
    if (val instanceof PsiClass)     return Collections.emptyList();
    if (val instanceof PsiPackage) {
      boolean found=isInCoverageScope((PsiPackage)val,suitesBundle);
      if (!stateBean.myFlattenPackages) {
        collectSubPackages(children,(PsiPackage)val,suitesBundle,stateBean);
      }
      if (found) {
        final PsiClass[] classes=((PsiPackage)val).getClasses();
        for (        PsiClass aClass : classes) {
          children.add(new CoverageListNode(aClass,suitesBundle,stateBean));
        }
      }
 else {
        final PsiClass[] classes=((PsiPackage)val).getClasses();
        for (        PsiClass aClass : classes) {
          final String classFQName=aClass.getQualifiedName();
          for (          CoverageSuite suite : suitesBundle.getSuites()) {
            if (((JavaCoverageSuite)suite).isClassFiltered(classFQName)) {
              children.add(new CoverageListNode(aClass,suitesBundle,stateBean));
            }
          }
        }
      }
    }
    for (    AbstractTreeNode childNode : children) {
      childNode.setParent(node);
    }
  }
  return children;
}
