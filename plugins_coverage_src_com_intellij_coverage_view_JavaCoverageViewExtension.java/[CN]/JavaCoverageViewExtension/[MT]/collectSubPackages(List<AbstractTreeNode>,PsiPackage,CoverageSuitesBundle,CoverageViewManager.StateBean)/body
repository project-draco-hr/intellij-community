{
  final GlobalSearchScope searchScope=getSearchScope(data,rootPackage.getProject());
  final PsiPackage[] subPackages=ApplicationManager.getApplication().runReadAction(new Computable<PsiPackage[]>(){
    public PsiPackage[] compute(){
      return rootPackage.getSubPackages(searchScope);
    }
  }
);
  for (  final PsiPackage aPackage : subPackages) {
    final PsiDirectory[] directories=ApplicationManager.getApplication().runReadAction(new Computable<PsiDirectory[]>(){
      public PsiDirectory[] compute(){
        return aPackage.getDirectories(searchScope);
      }
    }
);
    if (directories.length == 0 && !ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
      public Boolean compute(){
        return JavaPsiFacade.getInstance(aPackage.getProject()).isPartOfPackagePrefix(aPackage.getQualifiedName());
      }
    }
))     continue;
    if (ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
      public Boolean compute(){
        return isInCoverageScope(aPackage,data);
      }
    }
)) {
      final CoverageListNode node=new CoverageListNode(rootPackage.getProject(),aPackage,data,stateBean);
      children.add(node);
    }
 else     if (!stateBean.myFlattenPackages) {
      collectSubPackages(children,aPackage,data,stateBean);
    }
    if (stateBean.myFlattenPackages) {
      collectSubPackages(children,aPackage,data,stateBean);
    }
  }
}
