{
  List<AbstractTreeNode> children=new ArrayList<AbstractTreeNode>();
  if (node instanceof CoverageListNode) {
    final Object val=node.getValue();
    if (val instanceof PsiClass)     return Collections.emptyList();
    if (val instanceof PsiPackage) {
      final PsiPackage psiPackage=(PsiPackage)val;
      if (ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
        public Boolean compute(){
          return isInCoverageScope(psiPackage);
        }
      }
)) {
        final PsiPackage[] subPackages=ApplicationManager.getApplication().runReadAction(new Computable<PsiPackage[]>(){
          public PsiPackage[] compute(){
            return psiPackage.isValid() ? psiPackage.getSubPackages(mySuitesBundle.getSearchScope(node.getProject())) : PsiPackage.EMPTY_ARRAY;
          }
        }
);
        for (        PsiPackage subPackage : subPackages) {
          processSubPackage(subPackage,children);
        }
        final PsiFile[] childFiles=ApplicationManager.getApplication().runReadAction(new Computable<PsiFile[]>(){
          public PsiFile[] compute(){
            return psiPackage.isValid() ? psiPackage.getFiles(mySuitesBundle.getSearchScope(node.getProject())) : PsiFile.EMPTY_ARRAY;
          }
        }
);
        for (        PsiFile file : childFiles) {
          if (file instanceof PsiJavaFile) {
            PsiClass[] classes=((PsiJavaFile)file).getClasses();
            if (classes.length > 0) {
              PsiClass aClass=classes[0];
              if (!(node instanceof CoverageListRootNode) && getClassCoverageInfo(aClass) == null)               continue;
              children.add(new CoverageListNode(myProject,aClass,mySuitesBundle,myStateBean));
            }
          }
 else           if (file instanceof PsiClassOwner) {
            children.add(new CoverageListNode(myProject,file,mySuitesBundle,myStateBean));
          }
        }
      }
 else       if (!myStateBean.myFlattenPackages) {
        collectSubPackages(children,(PsiPackage)val);
      }
    }
    if (node instanceof CoverageListRootNode) {
      for (      CoverageSuite suite : mySuitesBundle.getSuites()) {
        final List<PsiClass> classes=((JavaCoverageSuite)suite).getCurrentSuiteClasses(myProject);
        for (        PsiClass aClass : classes) {
          children.add(new CoverageListNode(myProject,aClass,mySuitesBundle,myStateBean));
        }
      }
    }
    for (    AbstractTreeNode childNode : children) {
      childNode.setParent(node);
    }
  }
  return children;
}
