{
  List<AbstractTreeNode> children=new ArrayList<AbstractTreeNode>();
  if (node instanceof CoverageListNode) {
    final Object val=node.getValue();
    if (val instanceof PsiClass)     return Collections.emptyList();
    if (val instanceof PsiPackage) {
      final PsiPackage psiPackage=(PsiPackage)val;
      if (ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
        public Boolean compute(){
          return isInCoverageScope(psiPackage);
        }
      }
)) {
        final PsiElement[] childElements=ApplicationManager.getApplication().runReadAction(new Computable<PsiElement[]>(){
          public PsiElement[] compute(){
            return psiPackage.getChildren(mySuitesBundle.getSearchScope(node.getProject()));
          }
        }
);
        for (        PsiElement element : childElements) {
          if (element instanceof PsiClass) {
            PsiClass aClass=(PsiClass)element;
            if (!(node instanceof CoverageListRootNode) && getClassCoverageInfo(aClass) == null)             continue;
            children.add(new CoverageListNode(myProject,aClass,mySuitesBundle,myStateBean));
          }
 else           if (element instanceof PsiPackage) {
            processSubPackage((PsiPackage)element,children);
          }
 else           if (element instanceof PsiNamedElement) {
            children.add(new CoverageListNode(myProject,(PsiNamedElement)element,mySuitesBundle,myStateBean));
          }
        }
      }
 else       if (!myStateBean.myFlattenPackages) {
        collectSubPackages(children,(PsiPackage)val);
      }
    }
    if (node instanceof CoverageListRootNode) {
      for (      CoverageSuite suite : mySuitesBundle.getSuites()) {
        final List<PsiClass> classes=((JavaCoverageSuite)suite).getCurrentSuiteClasses(myProject);
        for (        PsiClass aClass : classes) {
          children.add(new CoverageListNode(myProject,aClass,mySuitesBundle,myStateBean));
        }
      }
    }
    for (    AbstractTreeNode childNode : children) {
      childNode.setParent(node);
    }
  }
  return children;
}
