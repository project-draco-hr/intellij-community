{
  final Object value=childNode.getValue();
  String coverageInformationString=myAnnotator.getPackageCoverageInformationString((PsiPackage)value,null,myCoverageDataManager);
  if (coverageInformationString == null) {
    if (!myCoverageViewManager.isReady())     return "Loading...";
    PackageAnnotator.PackageCoverageInfo info=new PackageAnnotator.PackageCoverageInfo();
    final Collection children=childNode.getChildren();
    for (    Object child : children) {
      final Object childValue=((CoverageListNode)child).getValue();
      if (childValue instanceof PsiPackage) {
        final PackageAnnotator.PackageCoverageInfo coverageInfo=myAnnotator.getPackageCoverageInfo((PsiPackage)childValue,myStateBean.myFlattenPackages);
        if (coverageInfo != null) {
          info=JavaCoverageAnnotator.merge(info,coverageInfo);
        }
      }
 else {
        final PackageAnnotator.ClassCoverageInfo classCoverageInfo=myAnnotator.getClassCoverageInfo(((PsiClass)childValue).getQualifiedName());
        if (classCoverageInfo != null) {
          info.coveredClassCount+=classCoverageInfo.coveredMethodCount > 0 ? 1 : 0;
          info.totalClassCount++;
          info.coveredMethodCount+=classCoverageInfo.coveredMethodCount;
          info.totalMethodCount+=classCoverageInfo.totalMethodCount;
          info.coveredLineCount+=classCoverageInfo.partiallyCoveredLineCount + classCoverageInfo.fullyCoveredLineCount;
          info.totalLineCount+=classCoverageInfo.totalLineCount;
        }
      }
    }
    coverageInformationString=JavaCoverageAnnotator.getCoverageInformationString(info,false);
  }
  return "Coverage Summary for \'all classes in scope\': " + getNotCoveredMessage(coverageInformationString);
}
