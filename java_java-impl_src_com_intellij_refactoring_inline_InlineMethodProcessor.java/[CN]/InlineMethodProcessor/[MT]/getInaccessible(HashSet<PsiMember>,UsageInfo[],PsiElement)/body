{
  final Map<PsiMember,Set<PsiMember>> result=new HashMap<PsiMember,Set<PsiMember>>();
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(elementToInline.getProject()).getResolveHelper();
  for (  UsageInfo usage : usages) {
    final PsiElement usageElement=usage.getElement();
    if (usageElement == null)     continue;
    final PsiElement container=ConflictsUtil.getContainer(usageElement);
    if (!(container instanceof PsiMember))     continue;
    PsiMember memberContainer=(PsiMember)container;
    Set<PsiMember> inaccessibleReferenced=result.get(memberContainer);
    if (inaccessibleReferenced == null) {
      inaccessibleReferenced=new HashSet<PsiMember>();
      result.put(memberContainer,inaccessibleReferenced);
      for (      PsiMember member : referencedElements) {
        if (PsiTreeUtil.isAncestor(elementToInline,member,false))         continue;
        if (elementToInline instanceof PsiClass && InheritanceUtil.isInheritorOrSelf((PsiClass)elementToInline,member.getContainingClass(),true))         continue;
        PsiElement resolveScope=usageElement instanceof PsiReferenceExpression ? ((PsiReferenceExpression)usageElement).advancedResolve(false).getCurrentFileResolveScope() : null;
        if (!resolveHelper.isAccessible(member,member.getModifierList(),usageElement,null,resolveScope)) {
          inaccessibleReferenced.add(member);
        }
      }
    }
  }
  return result;
}
