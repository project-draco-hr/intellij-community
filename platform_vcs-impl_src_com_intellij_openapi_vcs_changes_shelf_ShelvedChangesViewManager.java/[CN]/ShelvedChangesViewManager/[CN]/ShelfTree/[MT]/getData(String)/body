{
  if (SHELVED_CHANGELIST_KEY.is(dataId)) {
    final Set<ShelvedChangeList> changeLists=getSelectedLists(false);
    if (changeLists.size() > 0) {
      return changeLists.toArray(new ShelvedChangeList[changeLists.size()]);
    }
  }
 else   if (SHELVED_RECYCLED_CHANGELIST_KEY.is(dataId)) {
    final Set<ShelvedChangeList> changeLists=getSelectedLists(true);
    if (changeLists.size() > 0) {
      return changeLists.toArray(new ShelvedChangeList[changeLists.size()]);
    }
  }
 else   if (SHELVED_CHANGE_KEY.is(dataId)) {
    return TreeUtil.collectSelectedObjectsOfType(this,ShelvedChange.class);
  }
 else   if (SHELVED_BINARY_FILE_KEY.is(dataId)) {
    return TreeUtil.collectSelectedObjectsOfType(this,ShelvedBinaryFile.class);
  }
 else   if (VcsDataKeys.HAVE_SELECTED_CHANGES.is(dataId)) {
    return getSelectionCount() > 0;
  }
 else   if (VcsDataKeys.CHANGES.is(dataId)) {
    List<ShelvedChange> shelvedChanges=TreeUtil.collectSelectedObjectsOfType(this,ShelvedChange.class);
    final List<ShelvedBinaryFile> shelvedBinaryFiles=TreeUtil.collectSelectedObjectsOfType(this,ShelvedBinaryFile.class);
    if (!shelvedChanges.isEmpty() || !shelvedBinaryFiles.isEmpty()) {
      final List<Change> changes=new ArrayList<>(shelvedChanges.size() + shelvedBinaryFiles.size());
      for (      ShelvedChange shelvedChange : shelvedChanges) {
        changes.add(shelvedChange.getChange(myProject));
      }
      for (      ShelvedBinaryFile binaryFile : shelvedBinaryFiles) {
        changes.add(binaryFile.createChange(myProject));
      }
      return changes.toArray(new Change[changes.size()]);
    }
 else {
      final List<ShelvedChangeList> changeLists=TreeUtil.collectSelectedObjectsOfType(this,ShelvedChangeList.class);
      final List<Change> changes=new ArrayList<>();
      for (      ShelvedChangeList changeList : changeLists) {
        shelvedChanges=changeList.getChanges(myProject);
        for (        ShelvedChange shelvedChange : shelvedChanges) {
          changes.add(shelvedChange.getChange(myProject));
        }
        final List<ShelvedBinaryFile> binaryFiles=changeList.getBinaryFiles();
        for (        ShelvedBinaryFile file : binaryFiles) {
          changes.add(file.createChange(myProject));
        }
      }
      return changes.toArray(new Change[changes.size()]);
    }
  }
 else   if (PlatformDataKeys.DELETE_ELEMENT_PROVIDER.is(dataId)) {
    return myDeleteProvider;
  }
 else   if (CommonDataKeys.NAVIGATABLE_ARRAY.is(dataId)) {
    List<ShelvedChange> shelvedChanges=new ArrayList<>(TreeUtil.collectSelectedObjectsOfType(this,ShelvedChange.class));
    final ArrayDeque<Navigatable> navigatables=new ArrayDeque<>();
    final List<ShelvedChangeList> changeLists=TreeUtil.collectSelectedObjectsOfType(this,ShelvedChangeList.class);
    for (    ShelvedChangeList changeList : changeLists) {
      shelvedChanges.addAll(changeList.getChanges(myProject));
    }
    for (    final ShelvedChange shelvedChange : shelvedChanges) {
      if (shelvedChange.getBeforePath() != null && !FileStatus.ADDED.equals(shelvedChange.getFileStatus())) {
        final NavigatableAdapter navigatable=new NavigatableAdapter(){
          @Override public void navigate(          boolean requestFocus){
            final VirtualFile vf=shelvedChange.getBeforeVFUnderProject(myProject);
            if (vf != null) {
              navigate(myProject,vf,true);
            }
          }
        }
;
        navigatables.add(navigatable);
      }
    }
    return navigatables.toArray(new Navigatable[navigatables.size()]);
  }
  return null;
}
