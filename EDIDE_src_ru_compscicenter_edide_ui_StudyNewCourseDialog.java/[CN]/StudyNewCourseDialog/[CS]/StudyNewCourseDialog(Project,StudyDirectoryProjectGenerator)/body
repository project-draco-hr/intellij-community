{
  super(project,true);
  setTitle("Select The Course");
  init();
  myGenerator=generator;
  myErrorLabel.setVisible(false);
  myErrorIconLabel.setVisible(false);
  myOKAction.setEnabled(false);
  Map<String,File> downloadedDefaultCourses=myGenerator.getDefaultCourses();
  myGenerator.setMyDefaultCourseFiles(downloadedDefaultCourses);
  Set<String> availableDefaultCourses=downloadedDefaultCourses.keySet();
  if (availableDefaultCourses.size() == 0) {
    myErrorLabel.setText(CONNECTION_ERROR);
    myErrorLabel.setVisible(true);
    myErrorIconLabel.setVisible(true);
    if (myGenerator.downloadCoursesFromGithub()) {
      downloadedDefaultCourses=myGenerator.getDefaultCourses();
      myGenerator.setMyDefaultCourseFiles(downloadedDefaultCourses);
      availableDefaultCourses=myGenerator.getDefaultCourses().keySet();
      if (availableDefaultCourses.size() != 0) {
        myErrorIconLabel.setVisible(false);
        myErrorLabel.setVisible(false);
        myOKAction.setEnabled(true);
      }
    }
  }
 else {
    myOKAction.setEnabled(true);
  }
  for (  String courseName : availableDefaultCourses) {
    myDefaultCoursesComboBox.addItem(courseName);
  }
  final FileChooserDescriptor fileChooser=FileChooserDescriptorFactory.createSingleLocalFileDescriptor();
  myCourseLocationField.addBrowseFolderListener("Select course archive",null,project,fileChooser);
  myCourseLocationField.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      String fileName=myCourseLocationField.getText();
      if (!fileName.contains("course.json")) {
        myErrorLabel.setText(INVALID_COURSE_ERROR);
        myErrorLabel.setVisible(true);
        myErrorIconLabel.setVisible(true);
      }
 else {
        myGenerator.setMyLocalCourseBaseFileName(fileName);
        myErrorLabel.setVisible(false);
        myErrorIconLabel.setVisible(false);
        myOKAction.setEnabled(true);
      }
    }
  }
);
  myDefaultCoursesComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JComboBox cb=(JComboBox)e.getSource();
      String selectedFileName=(String)cb.getSelectedItem();
      myGenerator.setMyDefaultSelectedCourseName(selectedFileName);
      myOKAction.setEnabled(true);
    }
  }
);
  myRefreshButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myGenerator.downloadCoursesFromGithub();
      Map<String,File> newCourses=myGenerator.getDefaultCourses();
      if (newCourses.size() != myGenerator.getMyDefaultCourseFiles().size() && newCourses.size() != 0) {
        myGenerator.setMyDefaultCourseFiles(newCourses);
        myErrorLabel.setVisible(false);
        myErrorIconLabel.setVisible(false);
        myDefaultCoursesComboBox.removeAllItems();
        for (        String course : newCourses.keySet()) {
          myDefaultCoursesComboBox.addItem(course);
        }
        myOKAction.setEnabled(true);
      }
 else {
        if (newCourses.size() == 0) {
          myErrorLabel.setText(CONNECTION_ERROR);
          myErrorIconLabel.setVisible(true);
          myErrorLabel.setVisible(true);
          myOKAction.setEnabled(false);
        }
      }
    }
  }
);
  myRefreshButton.setVisible(true);
}
