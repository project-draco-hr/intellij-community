{
  myIsCoverageEnabled=element.getAttributeValue(COVERAGE_ENABLED_ATTRIBUTE_NAME) != null && Boolean.valueOf(element.getAttributeValue(COVERAGE_ENABLED_ATTRIBUTE_NAME)).booleanValue();
  final String mergeAttribute=element.getAttributeValue(COVERAGE_MERGE_ATTRIBUTE_NAME);
  myIsMergeWithPreviousResults=mergeAttribute != null && Boolean.valueOf(mergeAttribute).booleanValue();
  mySuiteToMergeWith=element.getAttributeValue(COVERAGE_MERGE_SUITE_ATT_NAME);
  final String collectLineInfoAttribute=element.getAttributeValue(TRACK_PER_TEST_COVERAGE_ATTRIBUTE_NAME);
  myTrackPerTestCoverage=collectLineInfoAttribute == null || Boolean.valueOf(collectLineInfoAttribute).booleanValue();
  final String sampling=element.getAttributeValue(SAMPLING_COVERAGE_ATTRIBUTE_NAME);
  mySampling=sampling != null && Boolean.valueOf(sampling).booleanValue();
  final String trackTestFolders=element.getAttributeValue(TRACK_TEST_FOLDERS);
  myTrackTestFolders=trackTestFolders != null && Boolean.valueOf(trackTestFolders).booleanValue();
  final List children=element.getChildren(COVERAGE_PATTERN_ELEMENT_NAME);
  if (children.size() > 0) {
    myCoveragePatterns=new ClassFilter[children.size()];
    for (int i=0; i < children.size(); i++) {
      myCoveragePatterns[i]=new ClassFilter();
      @NonNls final Element e=(Element)children.get(i);
      myCoveragePatterns[i].readExternal(e);
      final String val=e.getAttributeValue("value");
      if (val != null) {
        myCoveragePatterns[i].setPattern(val);
      }
    }
  }
  myRunnerId=element.getAttributeValue(COVERAGE_RUNNER);
  myCoverageRunner=null;
  for (  AbstractCoverageRunner coverageRunner : Extensions.getExtensions(AbstractCoverageRunner.EP_NAME)) {
    if (Comparing.strEqual(coverageRunner.getId(),myRunnerId)) {
      myCoverageRunner=coverageRunner;
      break;
    }
  }
}
