{
  return new ForwardDependenciesBuilder(myProject,scope){
    @Override public void analyze(){
      super.analyze();
      final Map<PsiFile,Set<PsiFile>> dependencies=getDependencies();
      for (Iterator<PsiFile> leftTreeIterator=dependencies.keySet().iterator(); leftTreeIterator.hasNext(); ) {
        final PsiFile leftTreeFile=leftTreeIterator.next();
        final Set<PsiFile> files=dependencies.get(leftTreeFile);
        final Iterator<PsiFile> iterator=files.iterator();
        while (iterator.hasNext()) {
          PsiFile next=iterator.next();
          final VirtualFile virtualFile=next.getVirtualFile();
          if (virtualFile == null || !myTargetScope.contains(virtualFile)) {
            iterator.remove();
          }
        }
        if (files.isEmpty()) {
          leftTreeIterator.remove();
        }
      }
    }
  }
;
}
