{
  try {
    int attemptCount=0;
    if (bootstrap.group() instanceof NioEventLoop) {
      while (true) {
        ChannelFuture future=bootstrap.connect(remoteAddress).awaitUninterruptibly();
        if (future.isSuccess()) {
          return future.channel();
        }
 else         if (++attemptCount < maxAttemptCount) {
          Thread.sleep(attemptCount * MIN_START_TIME);
        }
 else {
          @SuppressWarnings("ThrowableResultOfMethodCallIgnored") Throwable cause=future.cause();
          if (promise != null) {
            promise.reject("Cannot connect: " + (cause == null ? "unknown error" : cause.getMessage()));
          }
          return null;
        }
      }
    }
    Socket socket;
    while (true) {
      try {
        socket=new Socket(remoteAddress.getAddress(),remoteAddress.getPort());
        break;
      }
 catch (      IOException e) {
        if (++attemptCount < maxAttemptCount) {
          Thread.sleep(attemptCount * MIN_START_TIME);
        }
 else {
          if (promise != null) {
            promise.reject("Cannot connect: " + e.getMessage());
          }
          return null;
        }
      }
    }
    OioSocketChannel channel=new OioSocketChannel(socket);
    BootstrapUtil.initAndRegister(channel,bootstrap).awaitUninterruptibly();
    return channel;
  }
 catch (  Throwable e) {
    if (promise != null) {
      promise.reject("Cannot connect: " + e.getMessage());
    }
    return null;
  }
}
