{
  super.visitComment(comment);
  final IElementType tokenType=comment.getTokenType();
  if (!tokenType.equals(JavaTokenType.END_OF_LINE_COMMENT) && !tokenType.equals(JavaTokenType.C_STYLE_COMMENT)) {
    return;
  }
  final String commentText=comment.getText();
  if (commentText.length() <= 2) {
    return;
  }
  @NonNls final String strippedComment=commentText.substring(2).trim();
  if (!strippedComment.startsWith(SuppressionUtilCore.SUPPRESS_INSPECTIONS_TAG_NAME)) {
    return;
  }
  final String suppressedIds=JavaSuppressionUtil.getSuppressedInspectionIdsIn(comment);
  if (suppressedIds == null) {
    registerError(comment,comment,Boolean.FALSE);
    return;
  }
  final Iterable<String> ids=StringUtil.tokenize(suppressedIds,",");
  for (  String id : ids) {
    if (!myAllowedSuppressions.contains(id)) {
      registerError(comment,comment,Boolean.TRUE);
      break;
    }
  }
}
