{
  if (action.getAffectedElement() != null) {
    if (action.getType() == GraphAction.Type.MOUSE_CLICK) {
      GraphElement graphElement=action.getAffectedElement().getGraphElement();
      if (graphElement instanceof GraphEdge) {
        GraphEdge edge=(GraphEdge)graphElement;
        if (edge.getType() == GraphEdgeType.DOTTED) {
          return new LinearGraphAnswer(GraphChangesUtil.edgesReplaced(Collections.singleton(edge),myCompiledGraph.expandEdge(edge),getDelegateGraph()),null,null,null);
        }
      }
 else       if (graphElement instanceof GraphNode) {
        LinearBekGraphBuilder.MergeFragment fragment=myLinearBekGraphBuilder.collapseFragment(((GraphNode)graphElement).getNodeIndex());
        if (fragment != null) {
          return new LinearGraphAnswer(GraphChangesUtil.SOME_CHANGES,null,null,null);
        }
      }
    }
 else     if (action.getType() == GraphAction.Type.MOUSE_OVER) {
      GraphElement graphElement=action.getAffectedElement().getGraphElement();
      if (graphElement instanceof GraphEdge) {
        GraphEdge edge=(GraphEdge)graphElement;
        if (edge.getType() == GraphEdgeType.DOTTED) {
          return LinearGraphUtils.createSelectedAnswer(myCompiledGraph,ContainerUtil.set(edge.getUpNodeIndex(),edge.getDownNodeIndex()));
        }
      }
 else       if (graphElement instanceof GraphNode) {
        LinearBekGraphBuilder.MergeFragment fragment=myLinearBekGraphBuilder.getFragment(((GraphNode)graphElement).getNodeIndex());
        if (fragment != null) {
          return LinearGraphUtils.createSelectedAnswer(myCompiledGraph,fragment.getAllNodes());
        }
      }
    }
  }
 else   if (action.getType() == GraphAction.Type.BUTTON_COLLAPSE) {
    final LinearBekGraph.WorkingLinearBekGraph workingGraph=new LinearBekGraph.WorkingLinearBekGraph(getDelegateGraph());
    new LinearBekGraphBuilder(workingGraph,myBekGraphLayout).collapseAll();
    return new LinearGraphAnswer(GraphChangesUtil.edgesReplaced(workingGraph.getRemovedEdges(),workingGraph.getAddedEdges(),getDelegateGraph()),null,null,null){
      @Nullable @Override public Runnable getGraphUpdater(){
        return new Runnable(){
          @Override public void run(){
            workingGraph.applyTo(myCompiledGraph);
          }
        }
;
      }
    }
;
  }
 else   if (action.getType() == GraphAction.Type.BUTTON_EXPAND) {
    return new LinearGraphAnswer(GraphChangesUtil.SOME_CHANGES,null,null,null){
      @Nullable @Override public Runnable getGraphUpdater(){
        return new Runnable(){
          @Override public void run(){
            myCompiledGraph.myDottedEdges.removeAll();
            myCompiledGraph.myHiddenEdges.removeAll();
          }
        }
;
      }
    }
;
  }
  return null;
}
