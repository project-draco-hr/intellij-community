{
  SortedSet<Integer> toCollapse=new TreeSet<Integer>(new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      return o2.compareTo(o1);
    }
  }
);
  int mergesCount=0;
  LinkedHashSet<Integer> toProcess=ContainerUtil.newLinkedHashSet();
  toProcess.add(node.getNodeIndex());
  while (!toProcess.isEmpty()) {
    Integer i=ContainerUtil.getFirstItem(toProcess);
    toProcess.remove(i);
    LinearBekGraphBuilder.MergeFragment fragment=myLinearBekGraphBuilder.getFragment(i);
    if (fragment == null)     continue;
    toCollapse.add(i);
    toCollapse.addAll(fragment.getTailsAndBody());
    toProcess.addAll(fragment.getTailsAndBody());
    mergesCount++;
    if (mergesCount > 10)     break;
  }
  return toCollapse;
}
