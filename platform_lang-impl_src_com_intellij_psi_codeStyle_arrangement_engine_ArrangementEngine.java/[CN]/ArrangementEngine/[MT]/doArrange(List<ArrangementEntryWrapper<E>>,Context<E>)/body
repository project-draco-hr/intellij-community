{
  if (wrappers.isEmpty()) {
    return;
  }
  Map<E,ArrangementEntryWrapper<E>> map=ContainerUtilRt.newHashMap();
  List<E> arranged=ContainerUtilRt.newArrayList();
  List<E> toArrange=ContainerUtilRt.newArrayList();
  for (  ArrangementEntryWrapper<E> wrapper : wrappers) {
    E entry=wrapper.getEntry();
    map.put(wrapper.getEntry(),wrapper);
    if (!entry.canBeMatched()) {
      if (toArrange.isEmpty()) {
        arranged.addAll(arrange(toArrange,context.rules,context.rulesByPriority));
      }
      arranged.add(entry);
      toArrange.clear();
    }
 else {
      toArrange.add(entry);
    }
  }
  if (!toArrange.isEmpty()) {
    arranged.addAll(arrange(toArrange,context.rules,context.rulesByPriority));
  }
  context.changer.prepare(wrappers,context);
  for (int i=arranged.size() - 1; i >= 0; i--) {
    ArrangementEntryWrapper<E> arrangedWrapper=map.get(arranged.get(i));
    ArrangementEntryWrapper<E> initialWrapper=wrappers.get(i);
    ArrangementEntryWrapper<E> previous=i > 0 ? map.get(arranged.get(i - 1)) : null;
    ArrangementEntryWrapper<E> previousInitial=i > 0 ? wrappers.get(i - 1) : null;
    if (arrangedWrapper.equals(initialWrapper)) {
      if (previous != null && previous.equals(previousInitial) || previous == null && previousInitial == null) {
        continue;
      }
    }
    context.changer.replace(arrangedWrapper,initialWrapper,previous,context);
  }
}
