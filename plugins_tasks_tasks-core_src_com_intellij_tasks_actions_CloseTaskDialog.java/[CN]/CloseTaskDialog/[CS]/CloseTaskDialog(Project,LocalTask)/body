{
  super(project,false);
  setTitle("Close Task");
  myTaskLabel.setText(TaskUtil.getTrimmedSummary(task));
  myTaskLabel.setIcon(task.getIcon());
  final TaskRepository repository=task.getRepository();
  myStateComboBox.setRenderer(new ListCellRendererWrapper<CustomTaskState>(){
    @Override public void customize(    JList list,    CustomTaskState value,    int index,    boolean selected,    boolean hasFocus){
      if (value != null) {
        setText(value.getPresentableName());
      }
 else {
        setText("-- no states available --");
      }
    }
  }
);
  if (task.isIssue() && repository != null && repository.isSupported(TaskRepository.STATE_UPDATING)) {
    new TaskUiUtil.ComboBoxUpdater<CustomTaskState>(project,"Fetching available task states...",myStateComboBox){
      @NotNull @Override protected Set<CustomTaskState> fetch(      @NotNull ProgressIndicator indicator) throws Exception {
        return repository.getAvailableTaskStates(task);
      }
      @Nullable @Override public CustomTaskState getSelectedItem(){
        return repository.getPreferredCloseTaskState();
      }
      @Nullable @Override public CustomTaskState getExtraItem(){
        return DO_NOT_UPDATE_STATE;
      }
    }
.queue();
  }
 else {
    myStateComboBoxLabel.setVisible(false);
    myStateComboBox.setVisible(false);
  }
  myTaskManager=(TaskManagerImpl)TaskManager.getManager(project);
  if (myTaskManager.isVcsEnabled()) {
    myCommitChanges.setEnabled(!task.getChangeLists().isEmpty());
    myCommitChanges.setSelected(myTaskManager.getState().commitChanges);
    if (myTaskManager.getActiveVcs().getType() == VcsType.distributed) {
      boolean enabled=!task.getBranches(true).isEmpty() && !task.getBranches(false).isEmpty();
      myMergeBranches.setEnabled(enabled);
      myMergeBranches.setSelected(enabled && myTaskManager.getState().mergeBranch);
    }
 else {
      myMergeBranches.setVisible(false);
    }
  }
 else {
    myVcsPanel.setVisible(false);
  }
  init();
}
