{
  super(project,false);
  myProject=project;
  myTask=task;
  setTitle("Close Task");
  myTaskLabel.setText(TaskUtil.getTrimmedSummary(task));
  myTaskLabel.setIcon(task.getIcon());
  if (!TaskStateCombo.stateUpdatesSupportedFor(task)) {
    myStateCombo.setVisible(false);
  }
  final boolean stateUpdatesEnabled=PropertiesComponent.getInstance(myProject).getBoolean(UPDATE_STATE_ENABLED,false);
  myUpdateState.setSelected(stateUpdatesEnabled);
  myStateCombo.setEnabled(stateUpdatesEnabled);
  myUpdateState.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final boolean selected=myUpdateState.isSelected();
      myStateCombo.setEnabled(selected);
      PropertiesComponent.getInstance(myProject).setValue(UPDATE_STATE_ENABLED,String.valueOf(selected));
      if (selected) {
        myStateCombo.scheduleUpdateOnce();
      }
    }
  }
);
  myTaskManager=(TaskManagerImpl)TaskManager.getManager(project);
  if (myTaskManager.isVcsEnabled()) {
    boolean hasChanges=!task.getChangeLists().isEmpty();
    myCommitChanges.setEnabled(hasChanges);
    myCommitChanges.setSelected(hasChanges && myTaskManager.getState().commitChanges);
    if (myTaskManager.getActiveVcs().getType() == VcsType.distributed) {
      boolean enabled=!task.getBranches(true).isEmpty() && !task.getBranches(false).isEmpty();
      myMergeBranches.setEnabled(enabled);
      myMergeBranches.setSelected(enabled && myTaskManager.getState().mergeBranch);
    }
 else {
      myMergeBranches.setVisible(false);
    }
  }
 else {
    myVcsPanel.setVisible(false);
  }
  final JComponent preferredFocusedComponent=getPreferredFocusedComponent();
  if (preferredFocusedComponent != null) {
    myStateCombo.registerUpDownAction(preferredFocusedComponent);
  }
  if (myUpdateState.isSelected()) {
    myStateCombo.scheduleUpdateOnce();
  }
  init();
}
