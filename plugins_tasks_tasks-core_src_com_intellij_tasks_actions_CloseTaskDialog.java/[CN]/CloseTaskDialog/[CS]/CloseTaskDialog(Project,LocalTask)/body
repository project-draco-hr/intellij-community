{
  super(project,false);
  myProject=project;
  myTask=task;
  setTitle("Close Task");
  myTaskLabel.setText(TaskUtil.getTrimmedSummary(task));
  myTaskLabel.setIcon(task.getIcon());
  myStateComboBoxLabel.setLabelFor(myStateCombo);
  if (!TaskStateCombo.isStateSupportedFor(task)) {
    myStateComboBoxLabel.setVisible(false);
    myStateCombo.setVisible(false);
  }
  myTaskManager=(TaskManagerImpl)TaskManager.getManager(project);
  if (myTaskManager.isVcsEnabled()) {
    myCommitChanges.setEnabled(!task.getChangeLists().isEmpty());
    myCommitChanges.setSelected(myTaskManager.getState().commitChanges);
    if (myTaskManager.getActiveVcs().getType() == VcsType.distributed) {
      boolean enabled=!task.getBranches(true).isEmpty() && !task.getBranches(false).isEmpty();
      myMergeBranches.setEnabled(enabled);
      myMergeBranches.setSelected(enabled && myTaskManager.getState().mergeBranch);
    }
 else {
      myMergeBranches.setVisible(false);
    }
  }
 else {
    myVcsPanel.setVisible(false);
  }
  final JComponent preferredFocusedComponent=getPreferredFocusedComponent();
  if (preferredFocusedComponent != null) {
    myStateCombo.registerUpDownAction(preferredFocusedComponent);
  }
  myStateCombo.scheduleUpdate();
  init();
}
