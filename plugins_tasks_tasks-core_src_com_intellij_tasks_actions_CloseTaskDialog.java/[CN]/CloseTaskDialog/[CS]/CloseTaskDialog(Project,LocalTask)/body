{
  super(project,false);
  myProject=project;
  myTask=task;
  setTitle("Close Task");
  myTaskLabel.setText(TaskUtil.getTrimmedSummary(task));
  myTaskLabel.setIcon(task.getIcon());
  if (!TaskStateCombo.stateUpdatesSupportedFor(task)) {
    myUpdateState.setVisible(false);
    myStateCombo.setVisible(false);
  }
  final boolean stateUpdatesEnabled=PropertiesComponent.getInstance(myProject).getBoolean(UPDATE_STATE_ENABLED);
  myUpdateState.setSelected(stateUpdatesEnabled);
  myStateCombo.setEnabled(stateUpdatesEnabled);
  myUpdateState.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final boolean selected=myUpdateState.isSelected();
      myStateCombo.setEnabled(selected);
      PropertiesComponent.getInstance(myProject).setValue(UPDATE_STATE_ENABLED,String.valueOf(selected));
      if (selected) {
        myStateCombo.scheduleUpdateOnce();
      }
    }
  }
);
  myStateCombo.showHintLabel(false);
  if (myUpdateState.isSelected()) {
    myStateCombo.scheduleUpdateOnce();
  }
  myAdditionalPanel.setLayout(new BoxLayout(myAdditionalPanel,BoxLayout.Y_AXIS));
  myPanels=TaskDialogPanelProvider.getCloseTaskPanels(project,task);
  for (  TaskDialogPanel panel : myPanels) {
    myAdditionalPanel.add(panel.getPanel());
  }
  init();
}
