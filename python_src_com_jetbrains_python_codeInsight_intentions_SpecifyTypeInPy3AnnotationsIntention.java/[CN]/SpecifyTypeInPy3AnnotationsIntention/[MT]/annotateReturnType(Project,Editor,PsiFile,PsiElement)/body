{
  PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
  Callable callable=null;
  if (resolvedReference instanceof PyTargetExpression) {
    final PyExpression assignedValue=((PyTargetExpression)resolvedReference).findAssignedValue();
    if (assignedValue instanceof PyCallExpression) {
      callable=((PyCallExpression)assignedValue).resolveCalleeFunction(PyResolveContext.defaultContext());
    }
  }
 else {
    int offset=editor.getCaretModel().getOffset();
    PsiElement elementAt=file.findElementAt(offset - 1);
    PyCallExpression callExpression=PyUtil.findProblemElement(editor,file,PyCallExpression.class);
    if (elementAt != null && !(elementAt.getNode().getElementType() == PyTokenTypes.IDENTIFIER))     elementAt=file.findElementAt(offset);
    if (callExpression != null) {
      callable=callExpression.resolveCalleeFunction(PyResolveContext.defaultContext());
    }
 else     callable=PsiTreeUtil.getParentOfType(elementAt,PyFunction.class);
  }
  if (callable instanceof PyFunction && ((PyFunction)callable).getAnnotation() == null) {
    final String functionSignature="def " + callable.getName() + callable.getParameterList().getText();
    String functionText=functionSignature + " -> object:";
    for (    PyStatement st : ((PyFunction)callable).getStatementList().getStatements()) {
      functionText=functionText + "\n\t" + st.getText();
    }
    final PyFunction function=elementGenerator.createFromText(LanguageLevel.forElement(callable),PyFunction.class,functionText);
    callable=(PyFunction)callable.replace(function);
    callable=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(callable);
    final PyExpression value=((PyFunction)callable).getAnnotation().getValue();
    final int offset=value.getTextOffset();
    final TemplateBuilder builder=TemplateBuilderFactory.getInstance().createTemplateBuilder(value);
    builder.replaceRange(TextRange.create(0,PyNames.OBJECT.length()),PyNames.OBJECT);
    Template template=((TemplateBuilderImpl)builder).buildInlineTemplate();
    OpenFileDescriptor descriptor=new OpenFileDescriptor(project,value.getContainingFile().getVirtualFile(),offset);
    Editor targetEditor=FileEditorManager.getInstance(project).openTextEditor(descriptor,true);
    if (targetEditor != null) {
      targetEditor.getCaretModel().moveToOffset(offset);
      TemplateManager.getInstance(project).startTemplate(targetEditor,template);
    }
  }
}
