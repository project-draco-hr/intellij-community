{
  final PsiNameIdentifierOwner elementToRename=CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(nameIdentifierOwner);
  final Editor editor=FileEditorManager.getInstance(nameIdentifierOwner.getProject()).getSelectedTextEditor();
  if (editor == null) {
    return;
  }
  final PsiElement identifier=elementToRename.getNameIdentifier();
  if (identifier == null) {
    return;
  }
  editor.getCaretModel().moveToOffset(identifier.getTextOffset());
  final RenamePsiElementProcessor processor=RenamePsiElementProcessor.forElement(elementToRename);
  if (!processor.isInplaceRenameSupported()) {
    return;
  }
  processor.substituteElementToRename(elementToRename,editor,new Pass<PsiElement>(){
    @Override public void pass(    PsiElement substitutedElement){
      final MemberInplaceRenamer renamer=new MemberInplaceRenamer(elementToRename,substitutedElement,editor);
      final LinkedHashSet<String> nameSuggestions=new LinkedHashSet<String>(Arrays.asList(suggestedNames));
      renamer.performInplaceRefactoring(nameSuggestions);
    }
  }
);
}
