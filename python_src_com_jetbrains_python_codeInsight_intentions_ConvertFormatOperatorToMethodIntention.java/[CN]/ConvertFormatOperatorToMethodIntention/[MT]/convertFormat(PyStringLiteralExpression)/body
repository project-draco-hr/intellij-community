{
  List<StringBuilder> constants=new ArrayList<StringBuilder>();
  final List<ASTNode> text_nodes=stringLiteralExpression.getStringNodes();
  sure(text_nodes);
  sure(text_nodes.size() > 0);
  for (  ASTNode text_node : text_nodes) {
    CharSequence text=text_node.getChars();
    int open_pos=0;
    if ("uUbB".indexOf(text.charAt(open_pos)) >= 0)     open_pos+=1;
    if ("rR".indexOf(text.charAt(open_pos)) >= 0)     open_pos+=1;
    char quote=text.charAt(open_pos);
    sure("\"'".indexOf(quote) >= 0);
    if (text.length() - open_pos >= 6) {
      if (text.charAt(open_pos + 1) == quote && text.charAt(open_pos + 2) == quote) {
        open_pos+=2;
      }
    }
    int index=open_pos + 1;
    StringBuilder out=new StringBuilder(text.subSequence(0,open_pos + 1));
    int position_count=0;
    Matcher scanner=FORMAT_PATTERN.matcher(text);
    while (scanner.find(index)) {
      appendDoublingBraces(text.subSequence(index,scanner.start()),out);
      final String f_key=scanner.group(1);
      final String f_modifier=scanner.group(2);
      final String f_width=scanner.group(3);
      String f_conversion=scanner.group(4);
      if ("%%".equals(scanner.group(0))) {
        out.append("%");
      }
 else {
        sure(f_conversion);
        sure(!"%".equals(f_conversion));
        out.append("{");
        if (f_key != null)         out.append(f_key);
 else {
          out.append(position_count);
          position_count+=1;
        }
        if ("r".equals(f_conversion))         out.append("!r");
        out.append(":");
        if (f_modifier != null)         out.append(f_modifier);
        if (f_width != null)         out.append(f_width);
        if ("i".equals(f_conversion) || "u".equals(f_conversion))         out.append("d");
 else         if ("r".equals(f_conversion))         out.append("s");
 else         out.append(f_conversion);
        out.append("}");
      }
      index=scanner.end();
    }
    appendDoublingBraces(text.subSequence(index,text.length()),out);
    constants.add(out);
  }
  TextRange full_range=stringLiteralExpression.getTextRange();
  int full_start=full_range.getStartOffset();
  CharSequence full_text=stringLiteralExpression.getNode().getChars();
  TextRange prev_range=text_nodes.get(0).getTextRange();
  int fragment_no=1;
  while (fragment_no < text_nodes.size()) {
    TextRange next_range=text_nodes.get(fragment_no).getTextRange();
    int left=prev_range.getEndOffset() - full_start;
    int right=next_range.getStartOffset() - full_start;
    if (left < right) {
      constants.get(fragment_no - 1).append(full_text.subSequence(left,right));
    }
    fragment_no+=1;
    prev_range=next_range;
  }
  final int left=prev_range.getEndOffset() - full_start;
  final int right=full_range.getEndOffset() - full_start;
  if (left < right) {
    constants.get(constants.size() - 1).append(full_text.subSequence(left,right));
  }
  StringBuilder result=new StringBuilder();
  for (  StringBuilder one : constants)   result.append(one);
  return result;
}
