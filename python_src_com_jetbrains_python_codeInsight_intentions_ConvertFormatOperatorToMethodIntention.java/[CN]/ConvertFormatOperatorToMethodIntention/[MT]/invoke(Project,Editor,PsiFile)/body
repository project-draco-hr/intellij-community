{
  PyBinaryExpression element=PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PyBinaryExpression.class,false);
  PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
  final PyExpression rightExpression=sure(element).getRightExpression();
  if (rightExpression == null) {
    return;
  }
  PyExpression rhs=rightExpression;
  while (rhs instanceof PyParenthesizedExpression)   rhs=((PyParenthesizedExpression)rhs).getContainedExpression();
  String param_text=sure(rhs).getText();
  final PyStringLiteralExpression leftExpression=(PyStringLiteralExpression)element.getLeftExpression();
  Pair<StringBuilder,Boolean> converted=convertFormat(leftExpression);
  StringBuilder target=converted.getFirst();
  String separator="";
  Pair<String,PsiElement> crop=collectWhitespace(leftExpression);
  String maybe_separator=crop.getFirst();
  if (!"".equals(maybe_separator) && !" ".equals(maybe_separator))   separator=maybe_separator;
 else {
    crop=collectWhitespace(crop.getSecond());
    maybe_separator=crop.getFirst();
    if (!"".equals(maybe_separator) && !" ".equals(maybe_separator))     separator=maybe_separator;
  }
  target.append(separator).append(".format");
  if (rhs instanceof PyDictLiteralExpression)   target.append("(**").append(param_text).append(")");
 else   if (rhs instanceof PyCallExpression) {
    final PyCallExpression call_expression=(PyCallExpression)rhs;
    final PyExpression callee=call_expression.getCallee();
    if (callee instanceof PyReferenceExpression) {
      PsiElement maybe_dict=((PyReferenceExpression)callee).getReference().resolve();
      if (maybe_dict instanceof PyFunction) {
        PyFunction dict_init=(PyFunction)maybe_dict;
        if (PyNames.INIT.equals(dict_init.getName())) {
          final PyClassType dict_type=PyBuiltinCache.getInstance(file).getDictType();
          if (dict_type != null && dict_type.getPyClass() == dict_init.getContainingClass()) {
            target.append(sure(sure(call_expression.getArgumentList()).getNode()).getChars());
          }
        }
 else {
          target.append("(");
          if (converted.getSecond())           target.append("**");
          target.append(param_text).append(")");
        }
      }
    }
  }
 else   target.append("(").append(param_text).append(")");
  element.replace(elementGenerator.createExpressionFromText(target.toString()));
}
