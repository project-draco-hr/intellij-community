{
  PyBinaryExpression element=PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PyBinaryExpression.class,false);
  PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
  final PyExpression rightExpression=sure(element).getRightExpression();
  if (rightExpression == null) {
    return;
  }
  PyExpression rhs=rightExpression;
  while (rhs instanceof PyParenthesizedExpression)   rhs=((PyParenthesizedExpression)rhs).getContainedExpression();
  String param_text=sure(rhs).getText();
  final PyStringLiteralExpression leftExpression=(PyStringLiteralExpression)element.getLeftExpression();
  StringBuilder target=convertFormat(leftExpression);
  String separator="";
  Pair<String,PsiElement> crop=collectWhitespace(leftExpression);
  String maybe_separator=crop.getFirst();
  if (!"".equals(maybe_separator) && !" ".equals(maybe_separator))   separator=maybe_separator;
 else {
    crop=collectWhitespace(crop.getSecond());
    maybe_separator=crop.getFirst();
    if (!"".equals(maybe_separator) && !" ".equals(maybe_separator))     separator=maybe_separator;
  }
  target.append(separator).append(".format(").append(param_text).append(")");
  element.replace(elementGenerator.createExpressionFromText(target.toString()));
}
