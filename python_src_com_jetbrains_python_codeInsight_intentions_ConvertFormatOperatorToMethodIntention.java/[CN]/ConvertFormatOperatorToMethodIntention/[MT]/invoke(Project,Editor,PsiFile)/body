{
  final PsiElement elementAt=file.findElementAt(editor.getCaretModel().getOffset());
  final PyBinaryExpression element=PsiTreeUtil.getParentOfType(elementAt,PyBinaryExpression.class,false);
  if (element == null)   return;
  final PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
  final PyExpression rightExpression=sure(element).getRightExpression();
  if (rightExpression == null) {
    return;
  }
  final PyExpression rhs=PyPsiUtils.flattenParens(rightExpression);
  if (rhs == null)   return;
  final String paramText=sure(rhs).getText();
  final TypeEvalContext context=TypeEvalContext.userInitiated(file);
  final PyType rhsType=context.getType(rhs);
  String prefix="";
  if (PyTypeChecker.match(PyBuiltinCache.getInstance(rhs).getObjectType("unicode"),rhsType,context)) {
    prefix="u";
  }
  final PyStringLiteralExpression leftExpression=(PyStringLiteralExpression)element.getLeftExpression();
  final Pair<StringBuilder,Boolean> converted=convertFormat(leftExpression,prefix);
  final StringBuilder target=converted.getFirst();
  final String separator=getSeparator(leftExpression);
  target.append(separator).append(".format");
  if (rhs instanceof PyDictLiteralExpression)   target.append("(**").append(paramText).append(")");
 else   if (rhs instanceof PyCallExpression) {
    final PyCallExpression callExpression=(PyCallExpression)rhs;
    final PyExpression callee=callExpression.getCallee();
    if (callee instanceof PyReferenceExpression) {
      PsiElement maybeDict=((PyReferenceExpression)callee).getReference().resolve();
      if (maybeDict instanceof PyFunction) {
        PyFunction dictInit=(PyFunction)maybeDict;
        if (PyNames.INIT.equals(dictInit.getName())) {
          final PyClassType dictType=PyBuiltinCache.getInstance(file).getDictType();
          if (dictType != null && dictType.getPyClass() == dictInit.getContainingClass()) {
            target.append(sure(sure(callExpression.getArgumentList()).getNode()).getChars());
          }
        }
 else {
          target.append("(");
          if (converted.getSecond())           target.append("**");
          target.append(paramText).append(")");
        }
      }
    }
  }
 else   target.append("(").append(paramText).append(")");
  target.insert(0,'(').append(')');
  final PyExpression parenthesized=elementGenerator.createExpressionFromText(LanguageLevel.forElement(element),target.toString());
  element.replace(sure(((PyParenthesizedExpression)parenthesized).getContainedExpression()));
}
