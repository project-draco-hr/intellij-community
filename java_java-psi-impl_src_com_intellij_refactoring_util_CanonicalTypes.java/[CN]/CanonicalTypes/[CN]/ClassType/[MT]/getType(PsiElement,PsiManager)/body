{
  JavaPsiFacade facade=JavaPsiFacade.getInstance(manager.getProject());
  PsiElementFactory factory=facade.getElementFactory();
  PsiClass aClass=facade.getResolveHelper().resolveReferencedClass(myClassQName,context);
  if (aClass == null) {
    return factory.createTypeFromText(myClassQName,context);
  }
  Map<PsiTypeParameter,PsiType> substitutionMap=ContainerUtil.newHashMap();
  for (  PsiTypeParameter typeParameter : PsiUtil.typeParametersIterable(aClass)) {
    Type substitute=mySubstitutor.get(typeParameter.getName());
    substitutionMap.put(typeParameter,substitute != null ? substitute.getType(context,manager) : null);
  }
  return factory.createType(aClass,factory.createSubstitutor(substitutionMap),null).annotate(myProvider);
}
