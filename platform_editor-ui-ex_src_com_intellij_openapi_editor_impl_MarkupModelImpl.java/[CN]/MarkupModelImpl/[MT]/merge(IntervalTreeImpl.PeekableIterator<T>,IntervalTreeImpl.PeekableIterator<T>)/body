{
  return new DisposableIterator<T>(){
    @Override public void dispose(){
      iterator1.dispose();
      iterator2.dispose();
    }
    @Override public boolean hasNext(){
      return iterator1.hasNext() || iterator2.hasNext();
    }
    @Override public T next(){
      T t1=iterator1.hasNext() ? iterator1.peek() : null;
      T t2=iterator2.hasNext() ? iterator2.peek() : null;
      if (t1 == null) {
        return iterator2.next();
      }
      if (t2 == null) {
        return iterator1.next();
      }
      int compare=RangeHighlighterEx.BY_AFFECTED_START_OFFSET.compare(t1,t2);
      return (compare < 0 ? iterator1 : iterator2).next();
    }
    @Override public void remove(){
      throw new NoSuchElementException();
    }
  }
;
}
