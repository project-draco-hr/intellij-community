{
  if (!session.collectDependencies(myS,dependencies) && !session.collectDependencies(myT,dependencies)) {
    if (myT == null)     return myS == null || myS.equalsToText(CommonClassNames.JAVA_LANG_OBJECT);
    if (myS == null)     return true;
    return TypeConversionUtil.isAssignable(myT,myS);
  }
  if (PsiType.NULL.equals(myT) || myT == null)   return false;
  if (PsiType.NULL.equals(myS) || myS == null || myT.equalsToText(CommonClassNames.JAVA_LANG_OBJECT))   return true;
  if (PsiType.VOID.equals(myS) ^ PsiType.VOID.equals(myT))   return false;
  InferenceVariable inferenceVariable=session.getInferenceVariable(myS);
  if (inferenceVariable != null) {
    inferenceVariable.addBound(myT,InferenceBound.UPPER);
    return true;
  }
  inferenceVariable=session.getInferenceVariable(myT);
  if (inferenceVariable != null) {
    inferenceVariable.addBound(myS,InferenceBound.LOWER);
    return true;
  }
  if (myT instanceof PsiArrayType) {
    if (!(myS instanceof PsiArrayType))     return false;
    final PsiType tComponentType=((PsiArrayType)myT).getComponentType();
    final PsiType sComponentType=((PsiArrayType)myS).getComponentType();
    if (!(tComponentType instanceof PsiPrimitiveType) && !(sComponentType instanceof PsiPrimitiveType)) {
      constraints.add(new StrictSubtypingConstraint(tComponentType,sComponentType));
      return true;
    }
    return sComponentType instanceof PsiPrimitiveType && sComponentType.equals(tComponentType);
  }
  if (myT instanceof PsiClassType) {
    final PsiClassType.ClassResolveResult TResult=((PsiClassType)myT).resolveGenerics();
    final PsiClass CClass=TResult.getElement();
    if (CClass != null) {
      if (CClass instanceof PsiTypeParameter) {
        if (myS instanceof PsiIntersectionType) {
          for (          PsiType conjunct : ((PsiIntersectionType)myS).getConjuncts()) {
            if (myT.equals(conjunct))             return true;
          }
        }
        final PsiType lowerBound=CClass.getUserData(InferenceSession.LOWER_BOUND);
        if (lowerBound != null) {
          constraints.add(new StrictSubtypingConstraint(lowerBound,myS));
          return true;
        }
        return false;
      }
      PsiClassType.ClassResolveResult SResult=null;
      if (myS instanceof PsiIntersectionType) {
        for (        PsiType conjunct : ((PsiIntersectionType)myS).getConjuncts()) {
          if (conjunct instanceof PsiClassType) {
            final PsiClassType.ClassResolveResult conjunctResult=((PsiClassType)conjunct).resolveGenerics();
            if (InheritanceUtil.isInheritorOrSelf(conjunctResult.getElement(),CClass,true)) {
              SResult=conjunctResult;
              break;
            }
          }
        }
      }
 else       if (myS instanceof PsiClassType) {
        SResult=((PsiClassType)myS).resolveGenerics();
      }
 else       if (myS instanceof PsiArrayType) {
        return myT.isAssignableFrom(myS);
      }
 else       if (myS instanceof PsiCapturedWildcardType) {
        final PsiType upperBound=((PsiCapturedWildcardType)myS).getUpperBound();
        if (upperBound instanceof PsiClassType) {
          SResult=((PsiClassType)upperBound).resolveGenerics();
        }
      }
      if (SResult == null)       return false;
      PsiClass SClass=SResult.getElement();
      if (((PsiClassType)myT).isRaw()) {
        return SClass != null && InheritanceUtil.isInheritorOrSelf(SClass,CClass,true);
      }
      final PsiSubstitutor tSubstitutor=TResult.getSubstitutor();
      final PsiSubstitutor sSubstitutor=SClass != null ? TypeConversionUtil.getClassSubstitutor(CClass,SClass,SResult.getSubstitutor()) : null;
      if (sSubstitutor != null) {
        for (        PsiTypeParameter parameter : CClass.getTypeParameters()) {
          final PsiType tSubstituted=tSubstitutor.substitute(parameter);
          final PsiType sSubstituted=sSubstitutor.substituteWithBoundsPromotion(parameter);
          if (tSubstituted == null ^ sSubstituted == null) {
            return false;
          }
          constraints.add(new SubtypingConstraint(tSubstituted,sSubstituted));
        }
        return true;
      }
    }
    return false;
  }
  if (myT instanceof PsiIntersectionType) {
    for (    PsiType conjunct : ((PsiIntersectionType)myT).getConjuncts()) {
      constraints.add(new StrictSubtypingConstraint(conjunct,myS));
    }
    return true;
  }
  return true;
}
