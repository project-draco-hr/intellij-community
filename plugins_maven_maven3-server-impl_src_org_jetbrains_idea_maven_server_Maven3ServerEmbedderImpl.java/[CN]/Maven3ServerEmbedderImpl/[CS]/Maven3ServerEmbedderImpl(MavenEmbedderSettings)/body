{
  super(settings.getSettings());
  if (settings.getWorkingDirectory() != null) {
    System.setProperty("user.dir",settings.getWorkingDirectory());
  }
  if (settings.getMultiModuleProjectDirectory() != null) {
    System.setProperty("maven.multiModuleProjectDirectory",settings.getMultiModuleProjectDirectory());
  }
 else {
    System.setProperty("maven.multiModuleProjectDirectory","");
  }
  MavenServerSettings serverSettings=settings.getSettings();
  File mavenHome=serverSettings.getMavenHome();
  if (mavenHome != null) {
    System.setProperty("maven.home",mavenHome.getPath());
  }
  myConsoleWrapper=new Maven3ServerConsoleLogger();
  myConsoleWrapper.setThreshold(serverSettings.getLoggingLevel());
  ClassWorld classWorld=new ClassWorld("plexus.core",Thread.currentThread().getContextClassLoader());
  MavenCli cli=new MavenCli(classWorld){
    @Override protected void customizeContainer(    PlexusContainer container){
      ((DefaultPlexusContainer)container).setLoggerManager(new BaseLoggerManager(){
        @Override protected Logger createLogger(        String s){
          return myConsoleWrapper;
        }
      }
);
    }
  }
;
  SettingsBuilder settingsBuilder=null;
  Class cliRequestClass;
  try {
    cliRequestClass=MavenCli.class.getClassLoader().loadClass("org.apache.maven.cli.MavenCli$CliRequest");
  }
 catch (  ClassNotFoundException e) {
    try {
      cliRequestClass=MavenCli.class.getClassLoader().loadClass("org.apache.maven.cli.CliRequest");
      settingsBuilder=new DefaultSettingsBuilderFactory().newInstance();
    }
 catch (    ClassNotFoundException e1) {
      throw new RuntimeException("unable to find maven CliRequest class");
    }
  }
  Object cliRequest;
  try {
    List<String> commandLineOptions=new ArrayList<String>(serverSettings.getUserProperties().size());
    for (    Map.Entry<Object,Object> each : serverSettings.getUserProperties().entrySet()) {
      commandLineOptions.add("-D" + each.getKey() + "="+ each.getValue());
    }
    if (serverSettings.getLoggingLevel() == MavenServerConsole.LEVEL_DEBUG) {
      commandLineOptions.add("-X");
      commandLineOptions.add("-e");
    }
 else     if (serverSettings.getLoggingLevel() == MavenServerConsole.LEVEL_DISABLED) {
      commandLineOptions.add("-q");
    }
    String mavenEmbedderCliOptions=System.getProperty(MavenServerEmbedder.MAVEN_EMBEDDER_CLI_ADDITIONAL_ARGS);
    if (mavenEmbedderCliOptions != null) {
      commandLineOptions.addAll(StringUtil.splitHonorQuotes(mavenEmbedderCliOptions,' '));
    }
    if (commandLineOptions.contains("-U") || commandLineOptions.contains("--update-snapshots")) {
      myAlwaysUpdateSnapshots=true;
    }
    Constructor constructor=cliRequestClass.getDeclaredConstructor(String[].class,ClassWorld.class);
    constructor.setAccessible(true);
    cliRequest=constructor.newInstance(commandLineOptions.toArray(new String[commandLineOptions.size()]),classWorld);
    for (    String each : new String[]{"initialize","cli","logging","properties"}) {
      Method m=MavenCli.class.getDeclaredMethod(each,cliRequestClass);
      m.setAccessible(true);
      m.invoke(cli,cliRequest);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    Method m=MavenCli.class.getDeclaredMethod("container",cliRequestClass);
    m.setAccessible(true);
    myContainer=(DefaultPlexusContainer)m.invoke(cli,cliRequest);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  myContainer.getLoggerManager().setThreshold(serverSettings.getLoggingLevel());
  mySystemProperties=FieldAccessor.get(cliRequestClass,cliRequest,"systemProperties");
  if (serverSettings.getProjectJdk() != null) {
    mySystemProperties.setProperty("java.home",serverSettings.getProjectJdk());
  }
  if (settingsBuilder == null) {
    settingsBuilder=FieldAccessor.get(MavenCli.class,cli,"settingsBuilder");
  }
  myMavenSettings=buildSettings(settingsBuilder,serverSettings,mySystemProperties,FieldAccessor.<Properties>get(cliRequestClass,cliRequest,"userProperties"));
  myLocalRepository=createLocalRepository();
}
