{
  ClassLoader originalClassLoader=Thread.currentThread().getContextClassLoader();
  Collection<AbstractMavenLifecycleParticipant> lifecycleParticipants=getLifecycleParticipants(Arrays.asList(project));
  if (!lifecycleParticipants.isEmpty()) {
    LegacySupport legacySupport=getComponent(LegacySupport.class);
    MavenSession session=legacySupport.getSession();
    session.setCurrentProject(project);
    session.setProjects(Arrays.asList(project));
    try {
      for (      AbstractMavenLifecycleParticipant listener : lifecycleParticipants) {
        Thread.currentThread().setContextClassLoader(listener.getClass().getClassLoader());
        listener.afterProjectsRead(session);
      }
    }
 catch (    MavenExecutionException e) {
      throw new RuntimeException(e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(originalClassLoader);
    }
  }
}
