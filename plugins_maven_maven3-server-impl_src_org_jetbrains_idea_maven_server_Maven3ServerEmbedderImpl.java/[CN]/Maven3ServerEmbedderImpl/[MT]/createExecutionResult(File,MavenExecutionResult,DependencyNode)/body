{
  Collection<MavenProjectProblem> problems=MavenProjectProblem.createProblemsList();
  THashSet<MavenId> unresolvedArtifacts=new THashSet<MavenId>();
  validate(file,result.getExceptions(),problems,unresolvedArtifacts);
  MavenProject mavenProject=result.getMavenProject();
  if (mavenProject == null)   return new MavenServerExecutionResult(null,problems,unresolvedArtifacts);
  MavenModel model=null;
  try {
    if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) {
      final List<DependencyNode> dependencyNodes=rootNode == null ? Collections.emptyList() : rootNode.getChildren();
      model=MavenModelConverter.convertModel(mavenProject.getModel(),mavenProject.getCompileSourceRoots(),mavenProject.getTestCompileSourceRoots(),mavenProject.getArtifacts(),dependencyNodes,mavenProject.getExtensionArtifacts(),getLocalRepositoryFile());
    }
 else {
      final DependencyResolutionResult dependencyResolutionResult=result.getDependencyResolutionResult();
      final org.sonatype.aether.graph.DependencyNode dependencyGraph=dependencyResolutionResult != null ? dependencyResolutionResult.getDependencyGraph() : null;
      final List<org.sonatype.aether.graph.DependencyNode> dependencyNodes=dependencyGraph != null ? dependencyGraph.getChildren() : Collections.<org.sonatype.aether.graph.DependencyNode>emptyList();
      model=AetherModelConverter.convertModelWithAetherDependencyTree(mavenProject.getModel(),mavenProject.getCompileSourceRoots(),mavenProject.getTestCompileSourceRoots(),mavenProject.getArtifacts(),dependencyNodes,mavenProject.getExtensionArtifacts(),getLocalRepositoryFile());
    }
  }
 catch (  Exception e) {
    validate(mavenProject.getFile(),Collections.singleton(e),problems,null);
  }
  RemoteNativeMavenProjectHolder holder=new RemoteNativeMavenProjectHolder(mavenProject);
  try {
    UnicastRemoteObject.exportObject(holder,0);
  }
 catch (  RemoteException e) {
    throw new RuntimeException(e);
  }
  Collection<String> activatedProfiles=collectActivatedProfiles(mavenProject);
  MavenServerExecutionResult.ProjectData data=new MavenServerExecutionResult.ProjectData(model,MavenModelConverter.convertToMap(mavenProject.getModel()),holder,activatedProfiles);
  return new MavenServerExecutionResult(data,problems,unresolvedArtifacts);
}
