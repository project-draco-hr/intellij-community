{
  final MavenExecutionRequest request=createRequest(file,activeProfiles,Collections.<String>emptyList(),Collections.<String>emptyList());
  final AtomicReference<MavenExecutionResult> ref=new AtomicReference<MavenExecutionResult>();
  executeWithMavenSession(request,new Runnable(){
    @Override public void run(){
      try {
        ProjectBuilder builder=getComponent(ProjectBuilder.class);
        List<ProjectBuildingResult> results=builder.build(Collections.singletonList(new File(file.getPath())),false,request.getProjectBuildingRequest());
        ProjectBuildingResult buildingResult=results.get(0);
        MavenProject project=buildingResult.getProject();
        RepositorySystemSession repositorySession=getComponent(LegacySupport.class).getRepositorySession();
        if (repositorySession instanceof DefaultRepositorySystemSession) {
          ((DefaultRepositorySystemSession)repositorySession).setTransferListener(new TransferListenerAdapter(myCurrentIndicator));
          if (myWorkspaceMap != null) {
            ((DefaultRepositorySystemSession)repositorySession).setWorkspaceReader(new Maven3WorkspaceReader(myWorkspaceMap));
          }
        }
        List<Exception> exceptions=new ArrayList<Exception>();
        loadExtensions(project,exceptions);
        project.setDependencyArtifacts(project.createArtifacts(getComponent(ArtifactFactory.class),null,null));
        ArtifactResolutionRequest resolutionRequest=new ArtifactResolutionRequest();
        resolutionRequest.setArtifactDependencies(project.getDependencyArtifacts());
        resolutionRequest.setArtifact(project.getArtifact());
        resolutionRequest.setManagedVersionMap(project.getManagedVersionMap());
        resolutionRequest.setLocalRepository(myLocalRepository);
        resolutionRequest.setRemoteRepositories(project.getRemoteArtifactRepositories());
        resolutionRequest.setListeners(listeners);
        resolutionRequest.setResolveRoot(false);
        resolutionRequest.setResolveTransitively(true);
        ArtifactResolver resolver=getComponent(ArtifactResolver.class);
        ArtifactResolutionResult result=resolver.resolve(resolutionRequest);
        project.setArtifacts(result.getArtifacts());
        ref.set(new MavenExecutionResult(project,exceptions));
      }
 catch (      Exception e) {
        ref.set(handleException(e));
      }
    }
  }
);
  return ref.get();
}
