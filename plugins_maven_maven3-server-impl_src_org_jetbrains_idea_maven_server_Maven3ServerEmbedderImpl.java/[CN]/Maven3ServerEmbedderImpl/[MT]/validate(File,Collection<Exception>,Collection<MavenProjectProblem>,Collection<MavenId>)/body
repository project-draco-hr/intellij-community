{
  for (  Throwable each : exceptions) {
    if (each == null)     continue;
    Maven3ServerGlobals.getLogger().info(each);
    if (each instanceof IllegalStateException && each.getCause() != null) {
      each=each.getCause();
    }
    String path=file == null ? "" : file.getPath();
    if (path.isEmpty() && each instanceof ProjectBuildingException) {
      File pomFile=((ProjectBuildingException)each).getPomFile();
      path=pomFile == null ? "" : pomFile.getPath();
    }
    if (each instanceof InvalidProjectModelException) {
      ModelValidationResult modelValidationResult=((InvalidProjectModelException)each).getValidationResult();
      if (modelValidationResult != null) {
        for (        Object eachValidationProblem : modelValidationResult.getMessages()) {
          problems.add(MavenProjectProblem.createStructureProblem(path,(String)eachValidationProblem));
        }
      }
 else {
        problems.add(MavenProjectProblem.createStructureProblem(path,each.getCause().getMessage()));
      }
    }
 else     if (each instanceof ProjectBuildingException) {
      String causeMessage=each.getCause() != null ? each.getCause().getMessage() : each.getMessage();
      problems.add(MavenProjectProblem.createStructureProblem(path,causeMessage));
    }
 else {
      problems.add(MavenProjectProblem.createStructureProblem(path,each.getMessage()));
    }
  }
  if (unresolvedArtifacts != null) {
    unresolvedArtifacts.addAll(retrieveUnresolvedArtifactIds());
  }
}
