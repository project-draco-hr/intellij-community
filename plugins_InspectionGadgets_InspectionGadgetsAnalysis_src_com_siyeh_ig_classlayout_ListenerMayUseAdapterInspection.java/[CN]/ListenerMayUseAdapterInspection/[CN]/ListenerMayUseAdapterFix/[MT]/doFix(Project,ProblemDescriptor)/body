{
  final PsiJavaCodeReferenceElement element=(PsiJavaCodeReferenceElement)descriptor.getPsiElement();
  final PsiClass aClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
  if (aClass == null) {
    return;
  }
  final PsiReferenceList extendsList=aClass.getExtendsList();
  if (extendsList == null) {
    return;
  }
  final PsiMethod[] methods=aClass.getMethods();
  if (methods.length > 0) {
    final PsiElement target=element.resolve();
    if (!(target instanceof PsiClass)) {
      return;
    }
    final PsiClass interfaceClass=(PsiClass)target;
    for (    PsiMethod method : methods) {
      if (!ControlFlowUtils.isEmptyCodeBlock(method.getBody())) {
        continue;
      }
      final PsiMethod[] superMethods=method.findSuperMethods(interfaceClass);
      if (superMethods.length > 0) {
        method.delete();
      }
    }
  }
  element.delete();
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
  final PsiElementFactory elementFactory=psiFacade.getElementFactory();
  final PsiJavaCodeReferenceElement referenceElement=elementFactory.createClassReferenceElement(adapterClass);
  extendsList.add(referenceElement);
}
