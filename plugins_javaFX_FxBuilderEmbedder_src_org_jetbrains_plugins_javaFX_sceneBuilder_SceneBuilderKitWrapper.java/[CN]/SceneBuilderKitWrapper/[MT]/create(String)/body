{
  Field identifier=DataFormat.class.getDeclaredField("identifier");
  identifier.setAccessible(true);
  identifier.set(AbstractDragSource.INTERNAL_DATA_FORMAT,Collections.unmodifiableSet(new HashSet<String>(Arrays.asList("application/scene.builder.internal"))));
  FXMLLoader.setDefaultClassLoader(SceneBuilderKitWrapper.class.getClassLoader());
  final JFXPanel panel=new JFXPanel();
  Platform.runLater(new Runnable(){
    @Override public void run(){
      EditorController editor=new EditorController();
      HierarchyTreeViewController componentTree=new HierarchyTreeViewController(editor);
      ContentPanelController canvas=new ContentPanelController(editor);
      InspectorPanelController propertyTable=new InspectorPanelController(editor);
      LibraryPanelController palette=new LibraryPanelController(editor);
      try {
        URL fxmlURL=new File(path).toURI().toURL();
        String fxmlText=FXOMDocument.readContentFromURL(fxmlURL);
        editor.setFxmlTextAndLocation(fxmlText,fxmlURL);
      }
 catch (      Throwable e) {
        LOG.error(e);
      }
      SplitPane leftPane=new SplitPane();
      leftPane.setOrientation(Orientation.VERTICAL);
      leftPane.getItems().addAll(palette.getPanelRoot(),componentTree.getPanelRoot());
      leftPane.setDividerPositions(0.5,0.5);
      SplitPane mainPane=new SplitPane();
      mainPane.getItems().addAll(leftPane,canvas.getPanelRoot(),propertyTable.getPanelRoot());
      mainPane.setDividerPositions(0,0.5,1);
      panel.setScene(new Scene(mainPane,900,600));
    }
  }
);
  return panel;
}
