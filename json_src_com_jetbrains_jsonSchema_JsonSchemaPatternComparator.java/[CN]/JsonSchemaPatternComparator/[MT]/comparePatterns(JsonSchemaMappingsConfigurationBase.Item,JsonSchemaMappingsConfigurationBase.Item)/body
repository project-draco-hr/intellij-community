{
  if (left.getPath().equals(right.getPath()))   return ThreeState.YES;
  final BeforeAfter<String> beforeAfterLeft=getBeforeAfterAroundWildCards(left.getPath());
  final BeforeAfter<String> beforeAfterRight=getBeforeAfterAroundWildCards(right.getPath());
  if (beforeAfterLeft == null || beforeAfterRight == null) {
    if (beforeAfterLeft == null && beforeAfterRight == null)     return left.getPath().equals(right.getPath()) ? ThreeState.YES : ThreeState.NO;
    if (beforeAfterLeft == null) {
      return checkOneSideWithoutWildcard(left,beforeAfterRight);
    }
    return checkOneSideWithoutWildcard(right,beforeAfterLeft);
  }
  if (!StringUtil.isEmptyOrSpaces(beforeAfterLeft.getBefore()) && !StringUtil.isEmptyOrSpaces(beforeAfterRight.getBefore())) {
    if (beforeAfterLeft.getBefore().startsWith(beforeAfterRight.getBefore()) || beforeAfterRight.getBefore().startsWith(beforeAfterLeft.getBefore())) {
      return ThreeState.YES;
    }
    return ThreeState.NO;
  }
  if (!StringUtil.isEmptyOrSpaces(beforeAfterLeft.getAfter()) && !StringUtil.isEmptyOrSpaces(beforeAfterRight.getAfter())) {
    if (beforeAfterLeft.getAfter().endsWith(beforeAfterRight.getAfter()) || beforeAfterRight.getAfter().endsWith(beforeAfterLeft.getAfter())) {
      return ThreeState.YES;
    }
    return ThreeState.NO;
  }
  return ThreeState.UNSURE;
}
