{
  CodeInsightUtil.sortIdenticalShortNameClasses(myTargetClasses,myReference);
  final BaseListPopupStep<PsiClass> step=new BaseListPopupStep<PsiClass>(QuickFixBundle.message("class.to.import.chooser.title"),myTargetClasses){
    @Override public boolean isAutoSelectionEnabled(){
      return false;
    }
    @Override public boolean isSpeedSearchEnabled(){
      return true;
    }
    @Override public PopupStep onChosen(    PsiClass selectedValue,    boolean finalChoice){
      if (selectedValue == null) {
        return FINAL_CHOICE;
      }
      if (finalChoice) {
        PsiDocumentManager.getInstance(myProject).commitAllDocuments();
        addImport(myReference,selectedValue);
        return FINAL_CHOICE;
      }
      return getExcludesStep(selectedValue.getQualifiedName(),myProject);
    }
    @Override public boolean hasSubstep(    PsiClass selectedValue){
      return true;
    }
    @NotNull @Override public String getTextFor(    PsiClass value){
      return ObjectUtils.assertNotNull(value.getQualifiedName());
    }
    @Override public Icon getIconFor(    PsiClass aValue){
      return aValue.getIcon(0);
    }
  }
;
  ListPopupImpl popup=new ListPopupImpl(step){
    @Override protected ListCellRenderer getListElementRenderer(){
      final PopupListElementRenderer baseRenderer=(PopupListElementRenderer)super.getListElementRenderer();
      final DefaultPsiElementCellRenderer psiRenderer=new DefaultPsiElementCellRenderer();
      return new ListCellRenderer(){
        @Override public Component getListCellRendererComponent(        JList list,        Object value,        int index,        boolean isSelected,        boolean cellHasFocus){
          JPanel panel=new JPanel(new BorderLayout());
          baseRenderer.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
          panel.add(baseRenderer.getNextStepLabel(),BorderLayout.EAST);
          panel.add(psiRenderer.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus));
          return panel;
        }
      }
;
    }
  }
;
  popup.showInBestPositionFor(myEditor);
}
