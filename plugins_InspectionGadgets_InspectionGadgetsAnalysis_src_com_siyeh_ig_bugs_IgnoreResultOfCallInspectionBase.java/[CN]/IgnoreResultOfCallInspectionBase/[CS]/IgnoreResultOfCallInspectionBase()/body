{
  myMethodMatcher=new MethodMatcher(true,"callCheckString").add("java.io.File",".*").add("java.io.InputStream","read|skip|available|markSupported").add("java.io.Reader","read|skip|ready|markSupported").add("java.lang.Boolean",".*").add("java.lang.Byte",".*").add("java.lang.Character",".*").add("java.lang.Double",".*").add("java.lang.Float",".*").add("java.lang.Integer",".*").add("java.lang.Long",".*").add("java.lang.Math",".*").add("java.lang.Object","equals|hashCode|toString").add("java.lang.Short",".*").add("java.lang.StrictMath",".*").add("java.lang.String",".*").add("java.math.BigInteger",".*").add("java.math.BigDecimal",".*").add("java.net.InetAddress",".*").add("java.net.URI",".*").add("java.util.UUID",".*").add("java.util.regex.Matcher","pattern|toMatchResult|start|end|group|groupCount|matches|find|lookingAt|quoteReplacement|replaceAll|replaceFirst|regionStart|regionEnd|hasTransparantBounds|hasAnchoringBounds|hitEnd|requireEnd").add("java.util.regex.Pattern",".*").add("java.util.stream.BaseStream",".*").finishDefault();
}
