{
  super.visitExpressionStatement(statement);
  final PsiExpression expression=statement.getExpression();
  if (!(expression instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression call=(PsiMethodCallExpression)expression;
  final PsiMethod method=call.resolveMethod();
  if (method == null || method.isConstructor()) {
    return;
  }
  final PsiType returnType=method.getReturnType();
  if (PsiType.VOID.equals(returnType)) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  if (PsiUtilCore.hasErrorElementChild(statement)) {
    return;
  }
  if (PropertyUtil.isSimpleGetter(method)) {
    registerMethodCallError(call,aClass);
    return;
  }
  if (m_reportAllNonLibraryCalls && !LibraryUtil.classIsInLibrary(aClass)) {
    registerMethodCallError(call,aClass);
    return;
  }
  final PsiAnnotation anno=ControlFlowAnalyzer.findContractAnnotation(method);
  final boolean honorInferred=Registry.is("ide.ignore.call.result.inspection.honor.inferred.pure");
  if (anno != null && (honorInferred || !AnnotationUtil.isInferredAnnotation(anno)) && Boolean.TRUE.equals(AnnotationUtil.getBooleanAttributeValue(anno,"pure"))) {
    registerMethodCallError(call,aClass);
    return;
  }
  if (!myMethodMatcher.matches(method) && findAnnotationInTree(method,Collections.singleton("javax.annotation.CheckReturnValue")) == null) {
    return;
  }
  registerMethodCallError(call,aClass);
}
