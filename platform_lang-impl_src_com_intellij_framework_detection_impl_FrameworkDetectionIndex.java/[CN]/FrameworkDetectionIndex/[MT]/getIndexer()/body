{
  final MultiMap<FileType,Pair<ElementPattern<FileContent>,Integer>> detectors=new MultiMap<>();
  FrameworkDetectorRegistry registry=FrameworkDetectorRegistry.getInstance();
  for (  FrameworkDetector detector : FrameworkDetector.EP_NAME.getExtensions()) {
    detectors.putValue(detector.getFileType(),Pair.create(detector.createSuitableFilePattern(),registry.getDetectorId(detector)));
  }
  return new DataIndexer<Integer,Void,FileContent>(){
    @NotNull @Override public Map<Integer,Void> map(    @NotNull FileContent inputData){
      final FileType fileType=inputData.getFileType();
      if (!detectors.containsKey(fileType)) {
        return Collections.emptyMap();
      }
      Map<Integer,Void> result=null;
      for (      Pair<ElementPattern<FileContent>,Integer> pair : detectors.get(fileType)) {
        if (pair.getFirst().accepts(inputData)) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(inputData.getFile() + " accepted by detector " + pair.getSecond());
          }
          if (result == null) {
            result=new HashMap<>();
          }
          myDispatcher.getMulticaster().fileUpdated(inputData.getFile(),pair.getSecond());
          result.put(pair.getSecond(),null);
        }
      }
      return result != null ? result : Collections.<Integer,Void>emptyMap();
    }
  }
;
}
