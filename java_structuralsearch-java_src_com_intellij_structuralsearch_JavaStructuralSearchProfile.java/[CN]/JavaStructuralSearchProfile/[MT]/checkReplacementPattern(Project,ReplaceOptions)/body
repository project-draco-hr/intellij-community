{
  MatchOptions matchOptions=options.getMatchOptions();
  FileType fileType=matchOptions.getFileType();
  PsiElement[] statements=MatcherImplUtil.createTreeFromText(matchOptions.getSearchPattern(),PatternTreeContext.Block,fileType,project);
  final boolean searchIsExpression=statements.length == 1 && statements[0].getLastChild() instanceof PsiErrorElement;
  PsiElement[] statements2=MatcherImplUtil.createTreeFromText(options.getReplacement(),PatternTreeContext.Block,fileType,project);
  final boolean replaceIsExpression=statements2.length == 1 && statements2[0].getLastChild() instanceof PsiErrorElement;
  if (searchIsExpression && statements[0].getFirstChild() instanceof PsiModifierList && statements2.length == 0) {
    return;
  }
  boolean targetFound=false;
  for (  final String name : matchOptions.getVariableConstraintNames()) {
    final MatchVariableConstraint constraint=matchOptions.getVariableConstraint(name);
    if (constraint.isPartOfSearchResults()) {
      targetFound=true;
      break;
    }
  }
  if (!targetFound && searchIsExpression != replaceIsExpression) {
    throw new UnsupportedPatternException(searchIsExpression ? SSRBundle.message("replacement.template.is.not.expression.error.message") : SSRBundle.message("search.template.is.not.expression.error.message"));
  }
}
