{
  final String templateText=TemplateManager.getInstance(node.getProject()).createTemplate("","",options.getReplacement()).getTemplateText();
  node.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      visitElement(expression);
    }
    @Override public void visitVariable(    PsiVariable field){
      super.visitVariable(field);
      final PsiExpression initializer=field.getInitializer();
      if (initializer != null) {
        final String initText=initializer.getText();
        if (StructuralSearchUtil.isTypedVariable(initText)) {
          final ParameterInfo initInfo=builder.findParameterization(Replacer.stripTypedVariableDecoration(initText));
          if (initInfo != null) {
            initInfo.setVariableInitializerContext(true);
          }
        }
      }
    }
    @Override public void visitClass(    PsiClass aClass){
      super.visitClass(aClass);
      MatchVariableConstraint constraint=options.getMatchOptions().getVariableConstraint(CompiledPattern.ALL_CLASS_UNMATCHED_CONTENT_VAR_ARTIFICIAL_NAME);
      if (constraint != null) {
        ParameterInfo e=new ParameterInfo();
        e.setName(CompiledPattern.ALL_CLASS_UNMATCHED_CONTENT_VAR_ARTIFICIAL_NAME);
        e.setStartIndex(templateText.lastIndexOf('}'));
        builder.addParametrization(e);
      }
    }
    @Override public void visitParameter(    PsiParameter parameter){
      super.visitParameter(parameter);
      String name=parameter.getName();
      String type=parameter.getType().getCanonicalText();
      if (StructuralSearchUtil.isTypedVariable(name)) {
        name=Replacer.stripTypedVariableDecoration(name);
        if (StructuralSearchUtil.isTypedVariable(type)) {
          type=Replacer.stripTypedVariableDecoration(type);
        }
        ParameterInfo nameInfo=builder.findParameterization(name);
        ParameterInfo typeInfo=builder.findParameterization(type);
        if (nameInfo != null && typeInfo != null && !(parameter.getParent() instanceof PsiCatchSection)) {
          nameInfo.setArgumentContext(false);
          typeInfo.setArgumentContext(false);
          typeInfo.setMethodParameterContext(true);
          nameInfo.setMethodParameterContext(true);
          typeInfo.setElement(parameter.getTypeElement());
        }
      }
    }
  }
);
}
