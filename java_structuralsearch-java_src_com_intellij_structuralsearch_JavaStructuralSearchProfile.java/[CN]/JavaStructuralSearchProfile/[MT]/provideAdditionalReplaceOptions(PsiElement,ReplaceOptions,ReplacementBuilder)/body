{
  node.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      visitElement(expression);
    }
    @Override public void visitParameter(    PsiParameter parameter){
      super.visitParameter(parameter);
      String name=parameter.getName();
      String type=parameter.getType().getCanonicalText();
      if (StructuralSearchUtil.isTypedVariable(name)) {
        name=Replacer.stripTypedVariableDecoration(name);
        if (StructuralSearchUtil.isTypedVariable(type)) {
          type=Replacer.stripTypedVariableDecoration(type);
        }
        ParameterInfo nameInfo=builder.findParameterization(name);
        ParameterInfo typeInfo=builder.findParameterization(type);
        final PsiElement scope=parameter.getDeclarationScope();
        if (nameInfo != null && typeInfo != null && !(scope instanceof PsiCatchSection) && !(scope instanceof PsiForeachStatement)) {
          nameInfo.setArgumentContext(false);
          typeInfo.setArgumentContext(false);
          typeInfo.setMethodParameterContext(true);
          nameInfo.setMethodParameterContext(true);
          typeInfo.setElement(parameter.getTypeElement());
        }
      }
    }
  }
);
}
