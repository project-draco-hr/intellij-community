{
  myStatusPanel.setBusy(true);
  setInitialOutputContent();
  List<DiffContent> contents=myRequest.getContents();
  final List<CharSequence> sequences=ContainerUtil.map(contents,new Function<DiffContent,CharSequence>(){
    @Override public CharSequence fun(    DiffContent diffContent){
      return ((DocumentContent)diffContent).getDocument().getImmutableCharSequence();
    }
  }
);
  final long outputModificationStamp=myMergeRequest.getOutputContent().getDocument().getModificationStamp();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      ProgressManager.getInstance().run(new Task.Modal(getProject(),"Computing differences...",true){
        private Runnable myCallback;
        @Override public void run(        @NotNull ProgressIndicator indicator){
          myCallback=performRediff(sequences,outputModificationStamp,indicator);
        }
        @Override public void onCancel(){
          markConflictResolved();
          myMergeRequest.applyResult(MergeResult.CANCEL);
          myMergeContext.closeDialog();
        }
        @Override public void onSuccess(){
          myCallback.run();
        }
      }
);
    }
  }
);
}
