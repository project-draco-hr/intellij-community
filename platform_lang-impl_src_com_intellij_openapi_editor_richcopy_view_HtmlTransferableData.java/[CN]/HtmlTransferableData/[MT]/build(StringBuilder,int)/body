{
  myResultBuffer=holder;
  myColorRegistry=mySyntaxInfo.getColorRegistry();
  myFontNameRegistry=mySyntaxInfo.getFontNameRegistry();
  try {
    buildColorMap();
    myResultBuffer.append("<div style=\"border:1px inset;padding:2%;\">").append("<pre style=\"margin:0;padding:6px;background-color:");
    appendColor(myResultBuffer,mySyntaxInfo.getDefaultBackground());
    myResultBuffer.append(';');
    if (myFontNameRegistry.size() == 1) {
      appendFontFamilyRule(myResultBuffer,myFontNameRegistry.getAllIds()[0]);
      myFontNameRegistry=null;
    }
    appendFontSizeRule(myResultBuffer,mySyntaxInfo.getSingleFontSize());
    myResultBuffer.append("\" bgcolor=\"");
    appendColor(myResultBuffer,mySyntaxInfo.getDefaultBackground());
    myResultBuffer.append("\">");
    SyntaxInfo.MarkupIterator it=mySyntaxInfo.new MarkupIterator();
    try {
      while (it.hasNext()) {
        it.processNext(this);
        if (myResultBuffer.length() > maxLength) {
          myResultBuffer.append("... truncated ...");
          break;
        }
      }
    }
  finally {
      it.dispose();
    }
    myResultBuffer.append("</pre></div>");
  }
  finally {
    myResultBuffer=null;
    myColorRegistry=null;
    myFontNameRegistry=null;
    myColors.clear();
  }
}
