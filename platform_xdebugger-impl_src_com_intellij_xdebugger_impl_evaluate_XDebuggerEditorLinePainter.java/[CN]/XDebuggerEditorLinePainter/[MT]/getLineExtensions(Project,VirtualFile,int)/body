{
  if (!Registry.is("ide.debugger.inline")) {
    return null;
  }
  Map<Pair<VirtualFile,Integer>,Set<XValueNodeImpl>> map=project.getUserData(XVariablesView.DEBUG_VARIABLES);
  Map<Variable,VariableValue> oldValues=project.getUserData(CACHE);
  if (oldValues == null) {
    oldValues=new HashMap<Variable,VariableValue>();
    project.putUserData(CACHE,oldValues);
  }
  if (map != null) {
    Set<XValueNodeImpl> values=map.get(Pair.create(file,lineNumber));
    if (values != null && !values.isEmpty()) {
      ArrayList<LineExtensionInfo> result=new ArrayList<LineExtensionInfo>();
      for (      XValueNodeImpl value : values) {
        SimpleColoredText text=new SimpleColoredText();
        XValueTextRendererImpl renderer=new XValueTextRendererImpl(text);
        final XValuePresentation presentation=value.getValuePresentation();
        if (presentation == null)         continue;
        if (presentation instanceof XValueCompactPresentation) {
          ((XValueCompactPresentation)presentation).renderValue(renderer,value);
        }
 else {
          presentation.renderValue(renderer);
        }
        final Color color=new JBColor(new Color(61,128,101),new Color(61,128,101));
        final String name=value.getName();
        result.add(new LineExtensionInfo("  " + name + ": ",color,null,null,Font.PLAIN));
        Variable var=new Variable(name,lineNumber);
        VariableValue variableValue=oldValues.get(var);
        if (variableValue == null) {
          variableValue=new VariableValue(text.toString(),null,value.hashCode());
          oldValues.put(var,variableValue);
        }
        if (variableValue.valueNodeHashCode != value.hashCode()) {
          variableValue.old=variableValue.actual;
          variableValue.actual=text.toString();
          variableValue.valueNodeHashCode=value.hashCode();
        }
        if (!variableValue.isChanged()) {
          for (          String s : text.getTexts()) {
            result.add(new LineExtensionInfo(s,color,null,null,Font.PLAIN));
          }
        }
 else {
          for (          String s : text.getTexts()) {
            result.add(new LineExtensionInfo(s,new JBColor(new Color(202,128,33),new Color(116,114,4)),null,null,Font.BOLD));
          }
        }
      }
      return result;
    }
  }
  return null;
}
