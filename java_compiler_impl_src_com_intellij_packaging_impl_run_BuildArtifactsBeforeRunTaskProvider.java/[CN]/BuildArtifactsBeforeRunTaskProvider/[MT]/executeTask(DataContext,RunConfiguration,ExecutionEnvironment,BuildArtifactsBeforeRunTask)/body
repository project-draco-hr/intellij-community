{
  final Ref<Boolean> result=Ref.create(false);
  final Semaphore finished=new Semaphore();
  final List<Artifact> artifacts=new ArrayList<Artifact>();
  new ReadAction(){
    protected void run(    @NotNull final Result result){
      for (      ArtifactPointer pointer : task.getArtifactPointers()) {
        ContainerUtil.addIfNotNull(pointer.getArtifact(),artifacts);
      }
    }
  }
.execute();
  final CompileStatusNotification callback=new CompileStatusNotification(){
    public void finished(    boolean aborted,    int errors,    int warnings,    CompileContext compileContext){
      result.set(!aborted && errors == 0);
      finished.up();
    }
  }
;
  ApplicationManager.getApplication().invokeAndWait(new Runnable(){
    public void run(){
      if (myProject.isDisposed()) {
        return;
      }
      final CompilerManager manager=CompilerManager.getInstance(myProject);
      final CompileScope scope=ArtifactCompileScope.createArtifactsScope(myProject,artifacts);
      ExecutionManagerImpl.EXECUTION_SESSION_ID_KEY.set(scope,ExecutionManagerImpl.EXECUTION_SESSION_ID_KEY.get(env));
      finished.down();
      manager.make(scope,CompilerFilter.ALL,callback);
    }
  }
,ModalityState.NON_MODAL);
  finished.waitFor();
  return result.get();
}
