{
  PyFunction pyFunction=PsiTreeUtil.getParentOfType(element,PyFunction.class,false);
  if (pyFunction == null || !PythonUnitTestUtil.isTestCaseFunction(pyFunction))   return null;
  final PyClass containingClass=pyFunction.getContainingClass();
  final RunnerAndConfigurationSettings settings=makeConfigurationSettings(location,"tests from function");
  final PythonNoseTestRunConfiguration configuration=(PythonNoseTestRunConfiguration)settings.getConfiguration();
  configuration.setMethodName(pyFunction.getName());
  if (containingClass != null) {
    configuration.setClassName(containingClass.getName());
    configuration.setTestType(PythonNoseTestRunConfiguration.TestType.TEST_METHOD);
  }
 else {
    configuration.setTestType(PythonNoseTestRunConfiguration.TestType.TEST_FUNCTION);
  }
  if (!setupConfigurationScript(configuration,pyFunction))   return null;
  configuration.setName(configuration.suggestedName());
  myPsiElement=pyFunction;
  return settings;
}
