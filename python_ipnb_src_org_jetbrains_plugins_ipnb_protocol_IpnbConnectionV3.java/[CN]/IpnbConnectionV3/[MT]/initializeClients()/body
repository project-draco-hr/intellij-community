{
  final Draft draft=new Draft17WithOrigin();
  myChannelsClient=new WebSocketClient(getChannelsURI(),draft){
    private ArrayList<IpnbOutputCell> myOutput=new ArrayList<IpnbOutputCell>();
    private Integer myExecCount=null;
    @Override public void onOpen(    ServerHandshake handshakeData){
      send(authMessage);
      notifyOpen();
    }
    @Override public void onMessage(    String message){
      final Gson gson=new Gson();
      final Message msg=gson.fromJson(message,Message.class);
      final Header header=msg.getHeader();
      final Header parentHeader=gson.fromJson(msg.getParentHeader(),Header.class);
      final String messageType=header.getMessageType();
      if ("pyout".equals(messageType) || "display_data".equals(messageType)) {
        final PyOutContent content=gson.fromJson(msg.getContent(),PyOutContent.class);
        addCellOutput(content,myOutput);
      }
 else       if ("pyerr".equals(messageType) || "error".equals(messageType)) {
        final PyErrContent content=gson.fromJson(msg.getContent(),PyErrContent.class);
        addCellOutput(content,myOutput);
      }
 else       if ("stream".equals(messageType)) {
        final PyStreamContent content=gson.fromJson(msg.getContent(),PyStreamContent.class);
        addCellOutput(content,myOutput);
      }
 else       if ("pyin".equals(messageType) || "execute_input".equals(messageType)) {
        final JsonElement executionCount=msg.getContent().get("execution_count");
        if (executionCount != null) {
          myExecCount=executionCount.getAsInt();
        }
      }
 else       if ("status".equals(messageType)) {
        final PyStatusContent content=gson.fromJson(msg.getContent(),PyStatusContent.class);
        if (content.getExecutionState().equals("idle")) {
          myListener.onOutput(IpnbConnectionV3.this,parentHeader.getMessageId(),(List<IpnbOutputCell>)myOutput.clone(),myExecCount);
          myOutput.clear();
        }
      }
    }
    @Override public void onClose(    int code,    String reason,    boolean remote){
    }
    @Override public void onError(    Exception ex){
    }
  }
;
  myChannelsThread=new Thread(myChannelsClient);
  myChannelsThread.start();
}
