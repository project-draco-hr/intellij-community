{
  try {
    final Project project=aClass.getProject();
    EncapsulateFieldsProcessor processor=new EncapsulateFieldsProcessor(project,new EncapsulateFieldsDescriptor(){
      @Override public FieldDescriptor[] getSelectedFields(){
        return new FieldDescriptor[]{new FieldDescriptorImpl(field,GenerateMembersUtil.suggestGetterName(field),GenerateMembersUtil.suggestSetterName(field),isToEncapsulateGet() ? GenerateMembersUtil.generateGetterPrototype(field) : null,isToEncapsulateSet() ? GenerateMembersUtil.generateSetterPrototype(field) : null)};
      }
      @Override public boolean isToEncapsulateGet(){
        return generateGetters;
      }
      @Override public boolean isToEncapsulateSet(){
        return generateSetters;
      }
      @Override public boolean isToUseAccessorsWhenAccessible(){
        return true;
      }
      @Override public String getFieldsVisibility(){
        return null;
      }
      @Override public String getAccessorsVisibility(){
        return PsiModifier.PUBLIC;
      }
      @Override public int getJavadocPolicy(){
        return DocCommentPolicy.MOVE;
      }
      @Override public PsiClass getTargetClass(){
        return aClass;
      }
    }
);
    processor.run();
    LocalFileSystem.getInstance().refresh(false);
    FileDocumentManager.getInstance().saveAllDocuments();
  }
 catch (  BaseRefactoringProcessor.ConflictsInTestsException e) {
    if (conflicts != null) {
      Assert.assertEquals(conflicts,e.getMessage());
      return;
    }
 else {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
  if (conflicts != null) {
    fail("Conflicts were not detected: " + conflicts);
  }
}
