{
  final Editor editor=operation.getEditor();
  if (editor.getSettings().isVariableInplaceRenameEnabled() && !ApplicationManager.getApplication().isUnitTestMode()) {
    if (operation.getName() == null) {
      final Collection<String> suggestedNames=operation.getSuggestedNames();
      if (suggestedNames.size() > 0) {
        operation.setName(suggestedNames.iterator().next());
      }
 else {
        operation.setName("x");
      }
    }
    new OccurrencesChooser<PsiElement>(editor).showChooser(operation.getElement(),operation.getOccurrences(),new Pass<OccurrencesChooser.ReplaceChoice>(){
      @Override public void pass(      OccurrencesChooser.ReplaceChoice replaceChoice){
        operation.setReplaceAll(replaceChoice == OccurrencesChooser.ReplaceChoice.ALL);
        final PyAssignmentStatement statement=performRefactoring(operation);
        PyTargetExpression target=(PyTargetExpression)statement.getTargets()[0];
        final List<PsiElement> occurrences=operation.getOccurrences();
        final InplaceVariableIntroducer<PsiElement> introducer=new PyInplaceVariableIntroducer(target,operation,occurrences);
        introducer.performInplaceRename(false,new LinkedHashSet<String>(operation.getSuggestedNames()));
      }
    }
);
  }
 else {
    super.performActionOnElementOccurrences(operation);
  }
}
