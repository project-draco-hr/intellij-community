{
  if (listOrMap.isMap())   return;
  final TypeConstraint[] constraints=calculateTypeConstraints(listOrMap);
  List<PsiType> result=new ArrayList<>(constraints.length);
  for (  TypeConstraint constraint : constraints) {
    if (constraint instanceof SubtypeConstraint) {
      final PsiType type=constraint.getType();
      final PsiType iterable=com.intellij.psi.util.PsiUtil.extractIterableTypeParameter(type,true);
      if (iterable != null) {
        result.add(iterable);
      }
    }
  }
  if (result.isEmpty()) {
    myResult=TypeConstraint.EMPTY_ARRAY;
  }
 else {
    myResult=new TypeConstraint[result.size()];
    for (int i=0; i < result.size(); i++) {
      final PsiType type=result.get(i);
      if (type != null) {
        myResult[i]=SubtypeConstraint.create(type);
      }
    }
  }
}
