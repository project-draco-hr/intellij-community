{
  final Pattern pattern=Pattern.compile(regexp,Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
  return new PyElementPattern.Capture<PyStringLiteralExpression>(new InitialPatternCondition<PyStringLiteralExpression>(PyStringLiteralExpression.class){
    @Override public boolean accepts(    @Nullable Object o,    ProcessingContext context){
      if (o instanceof PyStringLiteralExpression) {
        final PyStringLiteralExpression expr=(PyStringLiteralExpression)o;
        if (!DocStringUtil.isDocStringExpression(expr)) {
          final String value=expr.getStringValue();
          return pattern.matcher(value).matches();
        }
      }
      return false;
    }
  }
);
}
