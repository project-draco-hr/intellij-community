{
  super.visitTryStatement(statement);
  final PsiCodeBlock tryBlock=statement.getTryBlock();
  if (tryBlock == null) {
    return;
  }
  final Set<PsiClassType> thrownTypes=ExceptionUtils.calculateExceptionsThrown(tryBlock);
  final Set<PsiType> caughtTypes=new HashSet<PsiType>(thrownTypes.size());
  final PsiCatchSection[] catchSections=statement.getCatchSections();
  for (  final PsiCatchSection catchSection : catchSections) {
    final PsiParameter parameter=catchSection.getParameter();
    if (parameter == null) {
      continue;
    }
    final PsiType caughtType=parameter.getType();
    if (caughtType instanceof PsiDisjunctionType) {
      final PsiDisjunctionType disjunctionType=(PsiDisjunctionType)caughtType;
      final List<PsiType> types=disjunctionType.getDisjunctions();
      for (      PsiType type : types) {
        check(thrownTypes,caughtTypes,parameter,type);
      }
    }
 else {
      if (thrownTypes.isEmpty()) {
        if (CommonClassNames.JAVA_LANG_EXCEPTION.equals(caughtType.getCanonicalText())) {
          final PsiTypeElement typeElement=parameter.getTypeElement();
          if (typeElement == null) {
            continue;
          }
          final PsiClass runtimeExceptionClass=ClassUtils.findClass(CommonClassNames.JAVA_LANG_RUNTIME_EXCEPTION,parameter);
          registerError(typeElement,Collections.singletonList(runtimeExceptionClass),typeElement);
        }
      }
 else {
        check(thrownTypes,caughtTypes,parameter,caughtType);
      }
    }
  }
}
