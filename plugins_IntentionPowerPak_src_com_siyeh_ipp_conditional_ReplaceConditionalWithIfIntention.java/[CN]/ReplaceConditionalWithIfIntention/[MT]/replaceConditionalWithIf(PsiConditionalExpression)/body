{
  final PsiElement expressionParent=expression.getParent();
  if (expressionParent instanceof PsiLambdaExpression) {
    final PsiElement codeBlock=((PsiLambdaExpression)RefactoringUtil.expandExpressionLambdaToCodeBlock(expression)).getBody();
    LOG.assertTrue(codeBlock instanceof PsiCodeBlock,codeBlock);
    final PsiStatement statement=((PsiCodeBlock)codeBlock).getStatements()[0];
    expression=(PsiConditionalExpression)(statement instanceof PsiReturnStatement ? ((PsiReturnStatement)statement).getReturnValue() : ((PsiExpressionStatement)statement).getExpression());
  }
  final PsiStatement statement=PsiTreeUtil.getParentOfType(expression,PsiStatement.class);
  if (statement == null) {
    return;
  }
  final PsiVariable variable;
  if (statement instanceof PsiDeclarationStatement) {
    variable=PsiTreeUtil.getParentOfType(expression,PsiVariable.class);
  }
 else {
    variable=null;
  }
  PsiExpression thenExpression=expression.getThenExpression();
  PsiExpression elseExpression=expression.getElseExpression();
  final PsiExpression condition=expression.getCondition();
  final PsiExpression strippedCondition=ParenthesesUtils.stripParentheses(condition);
  final StringBuilder newStatement=new StringBuilder();
  newStatement.append("if(");
  if (strippedCondition != null) {
    newStatement.append(strippedCondition.getText());
  }
  newStatement.append(')');
  if (variable != null) {
    final String name=variable.getName();
    newStatement.append(name);
    newStatement.append('=');
    PsiExpression initializer=variable.getInitializer();
    if (initializer == null) {
      return;
    }
    if (initializer instanceof PsiArrayInitializerExpression) {
      final int conditionIdx=ArrayUtilRt.find(((PsiArrayInitializerExpression)initializer).getInitializers(),expression);
      if (conditionIdx >= 0) {
        initializer=(PsiExpression)initializer.replace(RefactoringUtil.convertInitializerToNormalExpression(initializer,variable.getType()));
        final PsiArrayInitializerExpression arrayInitializer=((PsiNewExpression)initializer).getArrayInitializer();
        LOG.assertTrue(arrayInitializer != null,initializer.getText());
        expression=(PsiConditionalExpression)arrayInitializer.getInitializers()[conditionIdx];
        thenExpression=expression.getThenExpression();
        elseExpression=expression.getElseExpression();
      }
    }
    appendElementTextWithoutParentheses(initializer,expression,thenExpression,newStatement);
    newStatement.append("; else ");
    newStatement.append(name);
    newStatement.append('=');
    appendElementTextWithoutParentheses(initializer,expression,elseExpression,newStatement);
    newStatement.append(';');
    initializer.delete();
    final PsiManager manager=statement.getManager();
    final Project project=manager.getProject();
    final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
    final PsiElementFactory factory=facade.getElementFactory();
    final PsiStatement ifStatement=factory.createStatementFromText(newStatement.toString(),statement);
    final PsiElement parent=statement.getParent();
    final PsiElement addedElement=parent.addAfter(ifStatement,statement);
    final CodeStyleManager styleManager=CodeStyleManager.getInstance(manager.getProject());
    styleManager.reformat(addedElement);
  }
 else {
    final boolean addBraces=PsiTreeUtil.getParentOfType(expression,PsiIfStatement.class,true,PsiStatement.class) != null;
    if (addBraces || thenExpression == null) {
      newStatement.append('{');
    }
    appendElementTextWithoutParentheses(statement,expression,thenExpression,newStatement);
    if (addBraces) {
      newStatement.append("} else {");
    }
 else {
      if (thenExpression == null) {
        newStatement.append('}');
      }
      newStatement.append(" else ");
      if (elseExpression == null) {
        newStatement.append('{');
      }
    }
    appendElementTextWithoutParentheses(statement,expression,elseExpression,newStatement);
    if (addBraces || elseExpression == null) {
      newStatement.append('}');
    }
    PsiReplacementUtil.replaceStatement(statement,newStatement.toString());
  }
}
