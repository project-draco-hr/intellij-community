{
  ExportableApplicationComponent[] components1=ApplicationManager.getApplication().getComponents(ExportableApplicationComponent.class);
  List<ExportableComponent> components2=ServiceBean.loadServicesFromBeans(ExportableComponent.EXTENSION_POINT,ExportableComponent.class);
  MultiMap<File,ExportableComponent> result=MultiMap.createSet();
  for (  ExportableComponent component : ContainerUtil.concat(Arrays.asList(components1),components2)) {
    for (    File exportFile : component.getExportFiles()) {
      result.putValue(exportFile,component);
    }
  }
  if (onlyExisting) {
    for (Iterator<File> it=result.keySet().iterator(); it.hasNext(); ) {
      if (!it.next().exists()) {
        it.remove();
      }
    }
  }
  ApplicationImpl application=(ApplicationImpl)ApplicationManager.getApplication();
  StateStorageManager storageManager=application.getStateStore().getStateStorageManager();
  List<Class<?>> classes=ServiceManagerImpl.getAllImplementationClasses(application);
  for (  Class<?> aClass : classes) {
    final State stateAnnotation=aClass.getAnnotation(State.class);
    if (stateAnnotation != null && stateAnnotation.storages().length == 1 && !StringUtil.isEmpty(stateAnnotation.name())) {
      if (ExportableComponent.class.isAssignableFrom(aClass)) {
        continue;
      }
      Storage storage=stateAnnotation.storages()[0];
      if (storage.roamingType() != RoamingType.DISABLED && storage.storageClass().equals(StateStorage.class) && storage.scheme() == StorageScheme.DEFAULT && !StringUtil.isEmpty(storage.file()) && storage.file().startsWith(StoragePathMacros.APP_CONFIG)) {
        final File file=new File(storageManager.expandMacros(storage.file()));
        if (!onlyExisting || file.exists()) {
          result.putValue(file,new ExportableComponent(){
            @NotNull @Override public File[] getExportFiles(){
              return new File[]{file};
            }
            @NotNull @Override public String getPresentableName(){
              return stateAnnotation.name();
            }
          }
);
        }
      }
    }
  }
  return result;
}
