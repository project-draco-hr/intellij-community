{
  if (!processed.add(method) || method.hasModifierProperty(PsiModifier.STATIC))   return false;
  final PsiCodeBlock body=method.getBody();
  if (body == null)   return false;
  if (isContextDependentType(method.getReturnType())) {
    return true;
  }
  final Collection<PsiJavaCodeReferenceElement> referenceIterator=PsiTreeUtil.findChildrenOfType(body,PsiJavaCodeReferenceElement.class);
  for (  PsiJavaCodeReferenceElement reference : referenceIterator) {
    final PsiElement resolved=reference.resolve();
    if (resolved instanceof PsiVariable) {
      if (!(resolved instanceof PsiField && ((PsiField)resolved).hasModifierProperty(PsiModifier.STATIC)) && isContextDependentType(((PsiVariable)resolved).getType())) {
        return true;
      }
    }
    if (resolved instanceof PsiMethod) {
      final PsiMethod resolvedMethod=(PsiMethod)resolved;
      final PsiClass resolvedContainingClass=resolvedMethod.getContainingClass();
      final PsiClass methodContainingClass=method.getContainingClass();
      if (resolvedContainingClass != null && methodContainingClass != null && (methodContainingClass == resolvedContainingClass || methodContainingClass.isInheritor(resolvedContainingClass,true))) {
        if (doesMethodViolate(resolvedMethod,processed)) {
          return true;
        }
      }
    }
  }
  return false;
}
