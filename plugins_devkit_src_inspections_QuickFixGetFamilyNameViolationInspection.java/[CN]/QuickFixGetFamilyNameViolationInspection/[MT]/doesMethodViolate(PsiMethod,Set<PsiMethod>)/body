{
  if (!processed.add(method) || method.hasModifierProperty(PsiModifier.STATIC))   return false;
  final PsiCodeBlock body=method.getBody();
  if (body == null)   return false;
  final Collection<PsiJavaCodeReferenceElement> referenceIterator=PsiTreeUtil.findChildrenOfType(body,PsiJavaCodeReferenceElement.class);
  for (  PsiJavaCodeReferenceElement reference : referenceIterator) {
    final PsiElement resolved=reference.resolve();
    if (resolved instanceof PsiVariable) {
      if ((resolved instanceof PsiLocalVariable || resolved instanceof PsiParameter) && !PsiTreeUtil.isAncestor(body,resolved,false)) {
        return true;
      }
      if (resolved instanceof PsiField && !((PsiField)resolved).hasModifierProperty(PsiModifier.STATIC)) {
        return true;
      }
    }
    if (resolved instanceof PsiMethod && !((PsiMethod)resolved).hasModifierProperty(PsiModifier.STATIC)) {
      final PsiClass resolvedContainingClass=((PsiMethod)resolved).getContainingClass();
      final PsiClass methodContainingClass=method.getContainingClass();
      if (resolvedContainingClass != null && methodContainingClass != null && (methodContainingClass == resolvedContainingClass || methodContainingClass.isInheritor(resolvedContainingClass,true))) {
        if (doesMethodViolate((PsiMethod)resolved,processed)) {
          return true;
        }
      }
    }
  }
  return false;
}
