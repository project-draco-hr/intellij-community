{
  boolean hasReturns;
  if (callable instanceof PyFunction) {
    final PsiElement[] returnStatements=PsiTreeUtil.collectElements(callable,new PsiElementFilter(){
      @Override public boolean isAccepted(      PsiElement element){
        return element instanceof PyReturnStatement;
      }
    }
);
    hasReturns=returnStatements.length > 0;
  }
 else {
    PyReferenceExpression callSite=being_checked instanceof PyReferenceExpression ? (PyReferenceExpression)being_checked : null;
    hasReturns=!(callable.getReturnType(myTypeEvalContext,callSite) instanceof PyNoneType);
  }
  if (allowed ^ hasReturns) {
    registerProblem(being_checked,message);
  }
}
