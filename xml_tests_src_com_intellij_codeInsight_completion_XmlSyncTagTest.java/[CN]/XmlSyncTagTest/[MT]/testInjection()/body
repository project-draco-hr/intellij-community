{
  final MultiHostInjector injector=new MultiHostInjector(){
    @Override public void getLanguagesToInject(    @NotNull MultiHostRegistrar registrar,    @NotNull PsiElement context){
      if (context instanceof XmlAttributeValue) {
        registrar.startInjecting(XMLLanguage.INSTANCE).addPlace(null,null,(PsiLanguageInjectionHost)context,new TextRange(1,context.getTextLength() - 1)).doneInjecting();
      }
    }
    @NotNull @Override public List<? extends Class<? extends PsiElement>> elementsToInjectIn(){
      return Collections.singletonList(XmlAttributeValue.class);
    }
  }
;
  InjectedLanguageManager.getInstance(getProject()).registerMultiHostInjector(injector);
  try {
    doTest("<div injected='<div<caret>></div>'></div>","v","<div injected='<divv></divv>'></div>");
  }
  finally {
    InjectedLanguageManager.getInstance(getProject()).unregisterMultiHostInjector(injector);
  }
}
