{
  final RowOfNode row=rows.get(rowIndex);
  return new CommitRow(){
    @Override public int count(){
      return row.size();
    }
    @Override public int getIndexCommit(    int position){
      return row.getNode(position).getCommitIndex();
    }
    @Override public int getMainPosition(){
      return row.getMainPosition();
    }
    @Override public List<Edge> getUpEdges(    int position){
      if (rowIndex == 0) {
        return Collections.emptyList();
      }
      List<Edge> edges=new ArrayList<Edge>();
      int searchCommitIndex=getIndexCommit(position);
      RowOfNode prevRow=rows.get(rowIndex - 1);
      for (int pos=0; pos < prevRow.size(); pos++) {
        Node node=prevRow.getNode(pos);
        if (node.getCommitIndex() == searchCommitIndex) {
          edges.add(new SimpleEdge(pos,node.getColorIndex()));
          continue;
        }
        if (node.getCommitIndex() == rowIndex - 1) {
          Commit commit=listOfCommits.get(node.getCommitIndex());
          ReadOnlyList<Commit> parents=commit.getParents();
          if (parents.size() > 0 && parents.get(0).index() == searchCommitIndex) {
            edges.add(new SimpleEdge(pos,node.getColorIndex()));
          }
          for (int i=1; i < parents.size(); i++) {
            if (parents.get(i).index() == searchCommitIndex) {
              edges.add(new SimpleEdge(pos,prevRow.getStartIndexColor() + i - 1));
            }
          }
        }
      }
      return edges;
    }
    @Override public List<Edge> getDownEdges(    int position){
      if (rowIndex == rows.size() - 1) {
        return Collections.emptyList();
      }
      List<Edge> edges=new ArrayList<Edge>();
      RowOfNode nextRow=rows.get(rowIndex + 1);
      Node node=row.getNode(position);
      if (node.getCommitIndex() == rowIndex) {
        Commit commit=listOfCommits.get(node.getCommitIndex());
        ReadOnlyList<Commit> parents=commit.getParents();
        if (parents.size() > 0) {
          int pos=nextRow.getPositionOfCommit(parents.get(0).index());
          edges.add(new SimpleEdge(pos,node.getColorIndex()));
        }
        for (int i=1; i < parents.size(); i++) {
          int startColor=row.getStartIndexColor();
          int pos=nextRow.getPositionOfCommit(parents.get(i).index());
          edges.add(new SimpleEdge(pos,startColor + i - 1));
        }
      }
 else {
        int pos=nextRow.getPositionOfCommit(node.getCommitIndex());
        edges.add(new SimpleEdge(pos,node.getColorIndex()));
      }
      return edges;
    }
  }
;
}
