{
  final JPanel panel=new JPanel(new BorderLayout());
  panel.add(new JLabel(SSRBundle.message("SSRInspection.selected.templates")));
  panel.add(ToolbarDecorator.createDecorator(myTemplatesList).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final AnAction[] children=new AnAction[]{new AnAction(SSRBundle.message("SSRInspection.add.search.template.button")){
        @Override public void actionPerformed(        AnActionEvent e){
          addTemplate(new SearchDialogFactory(){
            public SearchDialog createDialog(            SearchContext searchContext){
              return new SearchDialog(searchContext,false,false);
            }
          }
);
        }
      }
,new AnAction(SSRBundle.message("SSRInspection.add.replace.template.button")){
        @Override public void actionPerformed(        AnActionEvent e){
          addTemplate(new SearchDialogFactory(){
            public SearchDialog createDialog(            SearchContext searchContext){
              return new ReplaceDialog(searchContext,false,false);
            }
          }
);
        }
      }
};
      JBPopupFactory.getInstance().createActionGroupPopup(null,new DefaultActionGroup(children),DataManager.getInstance().getDataContext(button.getContextComponent()),JBPopupFactory.ActionSelectionAid.SPEEDSEARCH,true).show(button.getPreferredPopupPoint());
    }
  }
).setEditAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      performEditAction();
    }
  }
).setEditActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      final Project project=e.getProject();
      return project != null && !DumbService.isDumb(project);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      Object[] selected=myTemplatesList.getSelectedValues();
      for (      Object o : selected) {
        Configuration configuration=(Configuration)o;
        Iterator<Configuration> iterator=myConfigurations.iterator();
        while (iterator.hasNext()) {
          Configuration configuration1=iterator.next();
          if (configuration1.getName().equals(configuration.getName())) {
            iterator.remove();
          }
        }
      }
      configurationsChanged(createSearchContext());
    }
  }
).setRemoveActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      final Project project=e.getProject();
      return project != null && !DumbService.isDumb(project);
    }
  }
).setMoveUpAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      performMoveUpDown(false);
    }
  }
).setMoveDownAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      performMoveUpDown(true);
    }
  }
).setPreferredSize(new Dimension(-1,100)).createPanel());
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      final Project project=CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(panel));
      if (project != null && !DumbService.isDumb(project)) {
        performEditAction();
      }
      return true;
    }
  }
.installOn(myTemplatesList);
  return panel;
}
