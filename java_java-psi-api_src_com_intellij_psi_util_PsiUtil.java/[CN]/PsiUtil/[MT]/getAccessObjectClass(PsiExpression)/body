{
  if (expression instanceof PsiSuperExpression)   return JavaResolveResult.EMPTY;
  PsiType type=expression.getType();
  if (type instanceof PsiClassType) {
    return ((PsiClassType)type).resolveGenerics();
  }
  if (type instanceof PsiDisjunctionType) {
    final PsiType lub=((PsiDisjunctionType)type).getLeastUpperBound();
    if (lub instanceof PsiClassType) {
      return ((PsiClassType)lub).resolveGenerics();
    }
  }
  if (type instanceof PsiCapturedWildcardType) {
    final PsiType upperBound=((PsiCapturedWildcardType)type).getUpperBound();
    if (upperBound instanceof PsiClassType) {
      final PsiClass resolved=((PsiClassType)upperBound).resolve();
      final PsiFile containingFile=resolved != null ? resolved.getContainingFile() : null;
      final String packageName=containingFile instanceof PsiClassOwner ? ((PsiClassOwner)containingFile).getPackageName() : null;
      String classText=StringUtil.isEmptyOrSpaces(packageName) ? "" : "package " + packageName + ";\n ";
      classText+="class I<T extends " + upperBound.getCanonicalText() + "> {}";
      final PsiJavaFile file=(PsiJavaFile)PsiFileFactory.getInstance(expression.getProject()).createFileFromText("inference_dummy.java",JavaLanguage.INSTANCE,classText);
      final PsiTypeParameter freshParameter=file.getClasses()[0].getTypeParameters()[0];
      return new ClassCandidateInfo(freshParameter,PsiSubstitutor.EMPTY);
    }
  }
  if (type == null && expression instanceof PsiReferenceExpression) {
    JavaResolveResult resolveResult=((PsiReferenceExpression)expression).advancedResolve(false);
    if (resolveResult.getElement() instanceof PsiClass) {
      return resolveResult;
    }
  }
  return JavaResolveResult.EMPTY;
}
