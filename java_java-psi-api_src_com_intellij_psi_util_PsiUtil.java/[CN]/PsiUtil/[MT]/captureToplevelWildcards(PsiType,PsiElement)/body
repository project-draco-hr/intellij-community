{
  if (type instanceof PsiClassType) {
    final PsiClassType.ClassResolveResult result=((PsiClassType)type).resolveGenerics();
    final PsiClass aClass=result.getElement();
    if (aClass != null) {
      final PsiSubstitutor substitutor=result.getSubstitutor();
      PsiSubstitutor captureSubstitutor=substitutor;
      for (      PsiTypeParameter typeParameter : typeParametersIterable(aClass)) {
        final PsiType substituted=substitutor.substitute(typeParameter);
        if (substituted instanceof PsiWildcardType) {
          captureSubstitutor=captureSubstitutor.put(typeParameter,PsiCapturedWildcardType.create((PsiWildcardType)substituted,context,typeParameter));
        }
      }
      if (captureSubstitutor != substitutor) {
        Map<PsiTypeParameter,PsiType> substitutionMap=null;
        for (        PsiTypeParameter typeParameter : typeParametersIterable(aClass)) {
          final PsiType substituted=substitutor.substitute(typeParameter);
          if (substituted instanceof PsiWildcardType) {
            if (substitutionMap == null)             substitutionMap=new HashMap<PsiTypeParameter,PsiType>(substitutor.getSubstitutionMap());
            final PsiCapturedWildcardType capturedWildcard=(PsiCapturedWildcardType)captureSubstitutor.substitute(typeParameter);
            LOG.assertTrue(capturedWildcard != null);
            final PsiType upperBound=PsiCapturedWildcardType.captureUpperBound(typeParameter,(PsiWildcardType)substituted,captureSubstitutor);
            if (upperBound != null) {
              capturedWildcard.setUpperBound(upperBound);
            }
            substitutionMap.put(typeParameter,capturedWildcard);
          }
        }
        if (substitutionMap != null) {
          final PsiElementFactory factory=JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory();
          final PsiSubstitutor newSubstitutor=factory.createSubstitutor(substitutionMap);
          return factory.createType(aClass,newSubstitutor);
        }
      }
    }
  }
 else   if (type instanceof PsiArrayType) {
    return captureToplevelWildcards(((PsiArrayType)type).getComponentType(),context).createArrayType();
  }
  return type;
}
