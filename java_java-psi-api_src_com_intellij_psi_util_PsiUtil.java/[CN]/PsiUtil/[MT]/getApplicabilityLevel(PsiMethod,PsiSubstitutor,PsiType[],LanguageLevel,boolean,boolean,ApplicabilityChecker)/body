{
  final PsiParameter[] parms=method.getParameterList().getParameters();
  if (args.length < parms.length - 1)   return ApplicabilityLevel.NOT_APPLICABLE;
  final PsiClass containingClass=method.getContainingClass();
  final boolean isRaw=containingClass != null && isRawSubstitutor(method,substitutorForMethod) && isRawSubstitutor(containingClass,substitutorForMethod);
  if (!areFirstArgumentsApplicable(args,parms,languageLevel,substitutorForMethod,isRaw,allowUncheckedConversion,function))   return ApplicabilityLevel.NOT_APPLICABLE;
  if (args.length == parms.length) {
    if (parms.length == 0)     return ApplicabilityLevel.FIXED_ARITY;
    PsiType parmType=getParameterType(parms[parms.length - 1],languageLevel,substitutorForMethod);
    PsiType argType=args[args.length - 1];
    if (argType == null)     return ApplicabilityLevel.NOT_APPLICABLE;
    if (function.isApplicable(parmType,argType,allowUncheckedConversion,parms.length - 1))     return ApplicabilityLevel.FIXED_ARITY;
    if (isRaw) {
      final PsiType erasedParamType=TypeConversionUtil.erasure(parmType);
      final PsiType erasedArgType=TypeConversionUtil.erasure(argType);
      if (erasedArgType != null && erasedParamType != null && function.isApplicable(erasedParamType,erasedArgType,allowUncheckedConversion,parms.length - 1)) {
        return ApplicabilityLevel.FIXED_ARITY;
      }
    }
  }
  if (checkVarargs && method.isVarArgs() && languageLevel.compareTo(LanguageLevel.JDK_1_5) >= 0) {
    if (args.length < parms.length)     return ApplicabilityLevel.VARARGS;
    PsiParameter lastParameter=parms.length == 0 ? null : parms[parms.length - 1];
    if (lastParameter == null || !lastParameter.isVarArgs())     return ApplicabilityLevel.NOT_APPLICABLE;
    PsiType lastParmType=getParameterType(lastParameter,languageLevel,substitutorForMethod);
    if (!(lastParmType instanceof PsiArrayType))     return ApplicabilityLevel.NOT_APPLICABLE;
    lastParmType=((PsiArrayType)lastParmType).getComponentType();
    if (lastParmType instanceof PsiCapturedWildcardType && !JavaVersionService.getInstance().isAtLeast(((PsiCapturedWildcardType)lastParmType).getContext(),JavaSdkVersion.JDK_1_8)) {
      lastParmType=((PsiCapturedWildcardType)lastParmType).getWildcard();
    }
    for (int i=parms.length - 1; i < args.length; i++) {
      PsiType argType=args[i];
      if (argType == null || !function.isApplicable(lastParmType,argType,allowUncheckedConversion,i)) {
        return ApplicabilityLevel.NOT_APPLICABLE;
      }
    }
    return ApplicabilityLevel.VARARGS;
  }
  return ApplicabilityLevel.NOT_APPLICABLE;
}
