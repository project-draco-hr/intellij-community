{
  if (exprent.type == Exprent.EXPRENT_FUNCTION) {
    FunctionExprent fexpr=(FunctionExprent)exprent;
    if (fexpr.getFunctype() == FunctionExprent.FUNCTION_BOOLNOT) {
      Exprent param=fexpr.getLstOperands().get(0);
      if (param.type == Exprent.EXPRENT_FUNCTION) {
        FunctionExprent fparam=(FunctionExprent)param;
        int ftype=fparam.getFunctype();
switch (ftype) {
case FunctionExprent.FUNCTION_BOOLNOT:
          Exprent newexpr=fparam.getLstOperands().get(0);
        Exprent retexpr=propagateBoolNot(newexpr);
      return retexpr == null ? newexpr : retexpr;
case FunctionExprent.FUNCTION_CADD:
case FunctionExprent.FUNCTION_COR:
    List<Exprent> operands=fparam.getLstOperands();
  for (int i=0; i < operands.size(); i++) {
    Exprent newparam=new FunctionExprent(FunctionExprent.FUNCTION_BOOLNOT,Arrays.asList(new Exprent[]{operands.get(i)}));
    Exprent retparam=propagateBoolNot(newparam);
    operands.set(i,retparam == null ? newparam : retparam);
  }
case FunctionExprent.FUNCTION_EQ:
case FunctionExprent.FUNCTION_NE:
case FunctionExprent.FUNCTION_LT:
case FunctionExprent.FUNCTION_GE:
case FunctionExprent.FUNCTION_GT:
case FunctionExprent.FUNCTION_LE:
fparam.setFunctype(funcsnot[ftype - FunctionExprent.FUNCTION_EQ]);
return fparam;
}
}
}
}
return null;
}
