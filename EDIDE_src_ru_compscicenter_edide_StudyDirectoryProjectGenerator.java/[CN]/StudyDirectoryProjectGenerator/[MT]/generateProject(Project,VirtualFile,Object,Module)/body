{
  File outputFile=new File(PathManager.getLibPath() + "/courses.zip");
  try {
    GithubDownloadUtil.downloadAtomically(null,"https://github.com/medvector/initial-python-course/archive/master.zip",outputFile,"medvector","initial-python-course");
    myDefaultCoursesBaseDir=new File(PathManager.getLibPath() + "/courses");
    ZipUtil.unzip(null,myDefaultCoursesBaseDir,outputFile,null,null,true);
    File[] files=myDefaultCoursesBaseDir.listFiles();
    for (    File f : files) {
      if (f.isDirectory()) {
        File[] filesInCourse=f.listFiles();
        for (        File courseFile : filesInCourse) {
          if (courseFile.getName().equals("course.json")) {
            String name=getCourseName(courseFile);
            int i=1;
            if (name != null) {
              File item=myCourseFiles.get(name);
              while (item != null && !FileUtil.filesEqual(item,courseFile)) {
                name=name + "1";
                i++;
              }
              myBaseCouseFile=courseFile;
              myCourseFiles.put(name,courseFile);
            }
          }
        }
      }
    }
    files.toString();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  StudyNewCourseDialog dlg=new StudyNewCourseDialog(project);
  dlg.show();
  InputStream file=null;
  try {
    file=new FileInputStream(myBaseCouseFile);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  Reader reader=new InputStreamReader(file);
  Gson gson=new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
  Course course=gson.fromJson(reader,Course.class);
  System.out.println();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          try {
            TaskManager taskManager=TaskManager.getInstance(project);
            int tasksNumber=taskManager.getTasksNum();
            for (int task=0; task < tasksNumber; task++) {
              VirtualFile taskDirectory=baseDir.createChildDirectory(this,"task" + (task + 1));
              for (int file=0; file < taskManager.getTaskFileNum(task); file++) {
                final String curFileName=taskManager.getFileName(task,file);
                createFile(curFileName,taskDirectory);
              }
              final VirtualFile ideaDir=baseDir.findChild(".idea");
              if (ideaDir != null) {
                createFile(taskManager.getTest(task),ideaDir);
              }
 else {
                LOG.error("Could not find .idea directory");
              }
            }
          }
 catch (          IOException e) {
            Log.print("Problems with creating files");
            Log.print(e.toString());
            Log.flush();
          }
          LocalFileSystem.getInstance().refresh(false);
        }
      }
);
    }
  }
);
}
