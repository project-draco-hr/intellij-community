{
  try {
    InputStream metaIS=StudyDirectoryProjectGenerator.class.getResourceAsStream("tasks.meta");
    BufferedReader reader=new BufferedReader(new InputStreamReader(metaIS));
    final int tasksNumber=Integer.parseInt(reader.readLine());
    final Task[] tasks=new Task[tasksNumber];
    for (int task=0; task < tasksNumber; task++) {
      int n=Integer.parseInt(reader.readLine());
      tasks[task]=new Task(n);
      for (int h=0; h < n; h++) {
        tasks[task].setFileName(reader.readLine());
      }
    }
    reader.close();
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      @Override public void run(){
        try {
          for (int task=0; task < tasksNumber; task++) {
            VirtualFile taskDirectory=baseDir.createChildDirectory(this,"task" + (task + 1));
            for (int file=0; file < tasks[task].getFileNum(); file++) {
              final String curFileName=tasks[task].fileNames.get(file);
              createFile(curFileName,taskDirectory);
            }
          }
        }
 catch (        IOException e) {
          Log.print("Problems with creating files");
          Log.print(e.toString());
          Log.flush();
        }
      }
    }
);
    EditorFactory.getInstance().addEditorFactoryListener(new StudyEditorFactoryListener(),project);
    runManager=RunManager.getInstance(project);
    StudyConfigurationType configurationType=ConfigurationTypeUtil.findConfigurationType(StudyConfigurationType.class);
    ConfigurationFactory[] factories=configurationType.getConfigurationFactories();
    runConfiguration=runManager.createRunConfiguration("Study test configuration",factories[0]);
    runManager.addConfiguration(runConfiguration,true);
    runManager.setSelectedConfiguration(runConfiguration);
  }
 catch (  IOException e) {
    Log.print("Problems with metadata file");
    Log.print(e.toString());
    Log.flush();
  }
}
