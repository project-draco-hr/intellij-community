{
  List<String> specs=new ArrayList<String>();
  List<AbstractTestProxy> failedTests=getFailedTests(myProject);
  for (  AbstractTestProxy failedTest : failedTests) {
    if (failedTest.isLeaf()) {
      final Location location=failedTest.getLocation(myProject,myConsoleProperties.getScope());
      if (location != null) {
        final PsiElement element=location.getPsiElement();
        if (getConfiguration() instanceof DjangoTestsRunConfiguration) {
          final Module module=location.getModule();
          final String appName=DjangoTestUtil.getAppNameForLocation(module,location.getPsiElement());
          final String target=DjangoTestUtil.buildTargetFromLocation(module,appName,element);
          if (target != null)           specs.add(target);
        }
 else {
          PyClass pyClass=PsiTreeUtil.getParentOfType(element,PyClass.class,false);
          PyFunction pyFunction=PsiTreeUtil.getParentOfType(element,PyFunction.class,false);
          final VirtualFile virtualFile=location.getVirtualFile();
          if (virtualFile != null) {
            String path=virtualFile.getCanonicalPath();
            if (pyClass != null)             path+="::" + pyClass.getName();
            if (pyFunction != null)             path+="::" + pyFunction.getName();
            if (!specs.contains(path))             specs.add(path);
          }
        }
      }
    }
  }
  return specs;
}
