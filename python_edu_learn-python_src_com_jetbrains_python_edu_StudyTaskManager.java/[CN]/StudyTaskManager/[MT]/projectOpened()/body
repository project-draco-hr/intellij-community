{
  ApplicationManager.getApplication().invokeLater(new DumbAwareRunnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new DumbAwareRunnable(){
        @Override public void run(){
          if (myCourse != null) {
            StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){
              @Override public void run(){
                ToolWindowManager.getInstance(myProject).getToolWindow(ToolWindowId.PROJECT_VIEW).show(new Runnable(){
                  @Override public void run(){
                    FileEditor[] editors=FileEditorManager.getInstance(myProject).getSelectedEditors();
                    if (editors.length > 0) {
                      final JComponent focusedComponent=editors[0].getPreferredFocusedComponent();
                      if (focusedComponent != null) {
                        ApplicationManager.getApplication().invokeLater(new Runnable(){
                          @Override public void run(){
                            IdeFocusManager.getInstance(myProject).requestFocus(focusedComponent,true);
                          }
                        }
);
                      }
                    }
                  }
                }
);
              }
            }
);
            UISettings.getInstance().HIDE_TOOL_STRIPES=false;
            UISettings.getInstance().fireUISettingsChanged();
            ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(myProject);
            String toolWindowId=StudyToolWindowFactory.STUDY_TOOL_WINDOW;
            try {
              Method method=toolWindowManager.getClass().getDeclaredMethod("registerToolWindow",String.class,JComponent.class,ToolWindowAnchor.class,boolean.class,boolean.class,boolean.class);
              method.setAccessible(true);
              method.invoke(toolWindowManager,toolWindowId,null,ToolWindowAnchor.LEFT,true,true,true);
            }
 catch (            Exception e) {
              final ToolWindow toolWindow=toolWindowManager.getToolWindow(toolWindowId);
              if (toolWindow == null)               toolWindowManager.registerToolWindow(toolWindowId,true,ToolWindowAnchor.RIGHT,myProject,true);
            }
            final ToolWindow studyToolWindow=toolWindowManager.getToolWindow(toolWindowId);
class UrlOpeningListener implements NotificationListener {
              private final boolean myExpireNotification;
              public UrlOpeningListener(              boolean expireNotification){
                myExpireNotification=expireNotification;
              }
              protected void hyperlinkActivated(              @NotNull Notification notification,              @NotNull HyperlinkEvent event){
                URL url=event.getURL();
                if (url == null) {
                  BrowserUtil.browse(event.getDescription());
                }
 else {
                  BrowserUtil.browse(url);
                }
                if (myExpireNotification) {
                  notification.expire();
                }
              }
              @Override public void hyperlinkUpdate(              @NotNull Notification notification,              @NotNull HyperlinkEvent event){
                if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                  hyperlinkActivated(notification,event);
                }
              }
            }
            if (studyToolWindow != null) {
              StudyUtils.updateStudyToolWindow(myProject);
              studyToolWindow.show(null);
              UiNotifyConnector.doWhenFirstShown(studyToolWindow.getComponent(),new Runnable(){
                @Override public void run(){
                  if (PropertiesComponent.getInstance().getBoolean("StudyShowPopup",true)) {
                    String content="<html>If you'd like to learn" + " more about PyCharm " + "Educational Edition, "+ "click <a href=\"https://www.jetbrains.com/pycharm-educational/quickstart/\">here</a> to watch a tutorial</html>";
                    final Notification notification=new Notification("Watch Tutorials!","",content,NotificationType.INFORMATION,new UrlOpeningListener(true));
                    Notifications.Bus.notify(notification);
                    Balloon balloon=notification.getBalloon();
                    if (balloon != null) {
                      balloon.addListener(new JBPopupAdapter(){
                        @Override public void onClosed(                        LightweightWindowEvent event){
                          notification.expire();
                        }
                      }
);
                    }
                    notification.whenExpired(new Runnable(){
                      @Override public void run(){
                        PropertiesComponent.getInstance().setValue("StudyShowPopup",String.valueOf(false));
                      }
                    }
);
                  }
                }
              }
);
            }
            addShortcut(StudyNextWindowAction.SHORTCUT,StudyNextWindowAction.ACTION_ID,false);
            addShortcut(StudyPrevWindowAction.SHORTCUT,StudyPrevWindowAction.ACTION_ID,false);
            addShortcut(StudyShowHintAction.SHORTCUT,StudyShowHintAction.ACTION_ID,false);
            addShortcut(StudyNextWindowAction.SHORTCUT2,StudyNextWindowAction.ACTION_ID,true);
            addShortcut(StudyCheckAction.SHORTCUT,StudyCheckAction.ACTION_ID,false);
            addShortcut(StudyNextStudyTaskAction.SHORTCUT,StudyNextStudyTaskAction.ACTION_ID,false);
            addShortcut(StudyPreviousStudyTaskAction.SHORTCUT,StudyPreviousStudyTaskAction.ACTION_ID,false);
            addShortcut(StudyRefreshTaskFileAction.SHORTCUT,StudyRefreshTaskFileAction.ACTION_ID,false);
          }
        }
      }
);
    }
  }
);
}
