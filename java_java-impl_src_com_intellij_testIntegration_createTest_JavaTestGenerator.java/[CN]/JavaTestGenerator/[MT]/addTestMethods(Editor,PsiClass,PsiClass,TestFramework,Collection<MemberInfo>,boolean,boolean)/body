{
  final Set<String> existingNames=new HashSet<String>();
  if (generateBefore && descriptor.findSetUpMethod(targetClass) == null) {
    generateMethod(TestIntegrationUtils.MethodKind.SET_UP,descriptor,targetClass,sourceClass,editor,null,existingNames);
  }
  if (generateAfter && descriptor.findTearDownMethod(targetClass) == null) {
    generateMethod(TestIntegrationUtils.MethodKind.TEAR_DOWN,descriptor,targetClass,sourceClass,editor,null,existingNames);
  }
  final Template template=TestIntegrationUtils.createTestMethodTemplate(TestIntegrationUtils.MethodKind.TEST,descriptor,targetClass,sourceClass,null,true,existingNames);
  final String prefix=JavaPsiFacade.getElementFactory(targetClass.getProject()).createMethodFromText(template.getTemplateText(),targetClass).getName();
  existingNames.addAll(ContainerUtil.map(targetClass.getMethods(),new Function<PsiMethod,String>(){
    @Override public String fun(    PsiMethod method){
      return StringUtil.decapitalize(StringUtil.trimStart(method.getName(),prefix));
    }
  }
));
  for (  MemberInfo m : methods) {
    generateMethod(TestIntegrationUtils.MethodKind.TEST,descriptor,targetClass,sourceClass,editor,m.getMember().getName(),existingNames);
  }
}
