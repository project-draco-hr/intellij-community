{
  final List<Configurable> result=new ArrayList<Configurable>();
  for (  Configurable component : components) {
    if (!isSuppressed(component,filter)) {
      result.add(component);
    }
  }
  final Map<String,ConfigurableWrapper> idToConfigurable=ContainerUtil.newHashMap();
  List<String> idsInEpOrder=ContainerUtil.newArrayList();
  for (  ConfigurableEP<Configurable> ep : extensions) {
    final Configurable configurable=ConfigurableWrapper.wrapConfigurable(ep);
    if (isSuppressed(configurable,filter))     continue;
    if (configurable instanceof ConfigurableWrapper) {
      final ConfigurableWrapper wrapper=(ConfigurableWrapper)configurable;
      idToConfigurable.put(wrapper.getId(),wrapper);
      idsInEpOrder.add(wrapper.getId());
    }
 else {
      ContainerUtil.addIfNotNull(configurable,result);
    }
  }
  Set<String> visited=ContainerUtil.newHashSet();
  Map<String,List<String>> idTree=buildIdTree(idToConfigurable,idsInEpOrder);
  for (  final String id : idsInEpOrder) {
    addChildrenRec(id,idToConfigurable,visited,idTree);
  }
  for (  String id : idsInEpOrder) {
    ConfigurableWrapper wrapper=idToConfigurable.get(id);
    String parentId=wrapper.getParentId();
    if (parentId == null || !idToConfigurable.containsKey(parentId)) {
      result.add(wrapper);
    }
  }
  return result;
}
