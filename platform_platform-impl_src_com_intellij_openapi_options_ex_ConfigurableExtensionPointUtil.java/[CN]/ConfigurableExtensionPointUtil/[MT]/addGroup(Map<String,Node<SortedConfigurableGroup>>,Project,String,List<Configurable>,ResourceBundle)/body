{
  String id="configurable.group." + groupId;
  ResourceBundle bundle=getBundle(id + ".settings.display.name",configurables,alternative);
  if (bundle == null) {
    if ("root".equals(groupId)) {
      LOG.error("OptionsBundle does not contain root group");
    }
 else {
      LOG.warn("use other group instead of unexpected one: " + groupId);
      groupId="other";
      id="configurable.group." + groupId;
    }
    bundle=OptionsBundle.getBundle();
  }
  Node<SortedConfigurableGroup> node=Node.get(tree,groupId);
  if (node.myValue == null) {
    int weight=getInt(bundle,id + ".settings.weight");
    String help=getString(bundle,id + ".settings.help.topic");
    String name=getString(bundle,id + ".settings.display.name");
    if (name != null && project != null) {
      if (!project.isDefault() && !name.contains("{")) {
        String named=getString(bundle,id + ".named.settings.display.name");
        name=named != null ? named : name;
      }
      if (name.contains("{")) {
        name=StringUtil.first(MessageFormat.format(name,project.getName()),30,true);
      }
    }
    node.myValue=new SortedConfigurableGroup(id,name,help,weight);
  }
  if (configurables != null) {
    node.myValue.myList.addAll(configurables);
  }
  if (node.myParent == null && !groupId.equals("root")) {
    String parentId=getString(bundle,id + ".settings.parent");
    parentId=Node.cyclic(tree,parentId,"root",groupId,node);
    node.myParent=Node.add(tree,parentId,groupId);
    addGroup(tree,project,parentId,null,bundle);
  }
}
