{
  final PsiMethod method=data.getMethodToReplaceIn();
  final int parametersCount=method.getParameterList().getParametersCount();
  for (  UsageInfo usage : usages) {
    final PsiElement element=usage.getElement();
    if (element instanceof PsiMethodReferenceExpression && !ApplicationManager.getApplication().isUnitTestMode()) {
      conflicts.putValue(element,RefactoringBundle.message("expand.method.reference.warning"));
    }
    if (!isMethodUsage(usage))     continue;
    final PsiCall call=RefactoringUtil.getCallExpressionByMethodReference(element);
    final PsiExpressionList argList=call.getArgumentList();
    if (argList != null) {
      final int actualParamLength=argList.getExpressions().length;
      if ((method.isVarArgs() && actualParamLength + 1 < parametersCount) || (!method.isVarArgs() && actualParamLength < parametersCount)) {
        conflicts.putValue(call,"Incomplete call(" + call.getText() + "): "+ parametersCount+ " parameters expected but only "+ actualParamLength+ " found");
      }
      data.getParametersToRemove().forEach(new TIntProcedure(){
        public boolean execute(        int paramNum){
          if (paramNum >= actualParamLength) {
            conflicts.putValue(call,"Incomplete call(" + call.getText() + "): expected to delete the "+ paramNum+ " parameter but only "+ actualParamLength+ " parameters found");
          }
          return true;
        }
      }
);
    }
  }
}
