{
  final AsyncPromise<List<Module>> result=new AsyncPromise<List<Module>>();
  runWhenFullyOpen(new Runnable(){
    public void run(){
      LinkedHashSet<MavenProject> toResolve;
synchronized (myImportingDataLock) {
        toResolve=new LinkedHashSet<MavenProject>(myProjectsToResolve);
        myProjectsToResolve.clear();
      }
      if (toResolve.isEmpty())       return;
      final ResolveContext context=new ResolveContext();
      Runnable onCompletion=new Runnable(){
        @Override public void run(){
          if (hasScheduledProjects()) {
            scheduleImport().processed(result);
          }
 else {
            result.setResult(Collections.<Module>emptyList());
          }
        }
      }
;
      final boolean useSinglePomResolver=Boolean.getBoolean("idea.maven.use.single.pom.resolver");
      if (useSinglePomResolver) {
        Iterator<MavenProject> it=toResolve.iterator();
        while (it.hasNext()) {
          MavenProject each=it.next();
          myResolvingProcessor.scheduleTask(new MavenProjectsProcessorResolvingTask(Collections.singleton(each),myProjectsTree,getGeneralSettings(),it.hasNext() ? null : onCompletion,context));
        }
      }
 else {
        myResolvingProcessor.scheduleTask(new MavenProjectsProcessorResolvingTask(toResolve,myProjectsTree,getGeneralSettings(),onCompletion,context));
      }
    }
  }
);
  return result;
}
