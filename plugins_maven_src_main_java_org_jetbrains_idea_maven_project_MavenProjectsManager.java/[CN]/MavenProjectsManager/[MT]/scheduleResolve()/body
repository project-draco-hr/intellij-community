{
  final AsyncPromise<List<Module>> result=new AsyncPromise<List<Module>>();
  runWhenFullyOpen(new Runnable(){
    public void run(){
      LinkedHashSet<MavenProject> toResolve;
synchronized (myImportingDataLock) {
        toResolve=new LinkedHashSet<MavenProject>(myProjectsToResolve);
        myProjectsToResolve.clear();
      }
      final ResolveContext context=new ResolveContext();
      Iterator<MavenProject> it=toResolve.iterator();
      while (it.hasNext()) {
        MavenProject each=it.next();
        Runnable onCompletion=it.hasNext() ? null : new Runnable(){
          @Override public void run(){
            if (hasScheduledProjects()) {
              scheduleImport().processed(result);
            }
          }
        }
;
        myResolvingProcessor.scheduleTask(new MavenProjectsProcessorResolvingTask(each,myProjectsTree,getGeneralSettings(),onCompletion,context));
      }
    }
  }
);
  return result;
}
