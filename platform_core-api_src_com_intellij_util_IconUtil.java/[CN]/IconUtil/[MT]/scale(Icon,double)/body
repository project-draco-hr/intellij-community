{
  final int hiDPIscale;
  if (source instanceof ImageIcon) {
    Image image=((ImageIcon)source).getImage();
    hiDPIscale=RetinaImage.isAppleHiDPIScaledImage(image) || image instanceof JBHiDPIScaledImage ? 2 : 1;
  }
 else {
    hiDPIscale=1;
  }
  final double scale=Math.min(32,Math.max(.1,_scale));
  return new Icon(){
    @Override public void paintIcon(    Component c,    Graphics g,    int x,    int y){
      Graphics2D g2d=(Graphics2D)g.create();
      try {
        AffineTransform transform=AffineTransform.getScaleInstance(scale,scale);
        transform.preConcatenate(g2d.getTransform());
        g2d.setTransform(transform);
        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);
        source.paintIcon(c,g2d,x,y);
      }
  finally {
        g2d.dispose();
      }
    }
    @Override public int getIconWidth(){
      return (int)(source.getIconWidth() * scale) / hiDPIscale;
    }
    @Override public int getIconHeight(){
      return (int)(source.getIconHeight() * scale) / hiDPIscale;
    }
  }
;
}
