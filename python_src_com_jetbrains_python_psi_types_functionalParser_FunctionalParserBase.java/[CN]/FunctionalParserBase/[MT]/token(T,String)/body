{
  return new FunctionalParserBase<Token<T>,T>(){
    @NotNull @Override public Pair<Token<T>,State> parse(    @NotNull List<Token<T>> tokens,    @NotNull State state) throws ParserException {
      final int pos=state.getPos();
      if (pos >= tokens.size()) {
        throw new ParserException("No tokens left",state);
      }
      final Token<T> token=tokens.get(pos);
      if (token.getType().equals(type) && (text == null || token.getText().equals(text))) {
        final int newPos=pos + 1;
        final State newState=new State(state,newPos,Math.max(newPos,state.getMax()));
        return Pair.create(token,newState);
      }
      final String expected=text != null ? String.format("Token(<%s>, \"%s\")",type,text) : String.format("Token(<%s>)",type);
      throw new ParserException(String.format("Expected %s, found %s",expected,token),state);
    }
  }
;
}
