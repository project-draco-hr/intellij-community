{
  myFixture.configureByFile(getTestName(true) + ".yml");
  final int offset=myFixture.getCaretOffset();
  final PsiElement elementAtCaret=myFixture.getFile().findElementAt(offset);
  final YAMLScalar scalarElement=PsiTreeUtil.getNonStrictParentOfType(elementAtCaret,YAMLScalar.class);
  assertNotNull(scalarElement);
  final LiteralTextEscaper<? extends PsiLanguageInjectionHost> elementLiteralEscaper=scalarElement.createLiteralTextEscaper();
  assertNotNull(elementLiteralEscaper);
  final StringBuilder builder=new StringBuilder();
  assertTrue(elementLiteralEscaper.decode(scalarElement.getTextRange(),builder));
  assertEquals(scalarElement.getTextValue(),builder.toString());
  int[] offsets=new int[builder.length() + 1];
  for (int i=0; i < builder.length() + 1; ++i) {
    offsets[i]=elementLiteralEscaper.getOffsetInHost(i,TextRange.from(0,scalarElement.getTextLength()));
  }
  final String elementText=scalarElement.getText();
  StringBuilder description=new StringBuilder();
  for (int i=0; i < builder.length(); ++i) {
    description.append(builder.charAt(i)).append("->").append(elementText.subSequence(offsets[i],offsets[i + 1])).append('\n');
  }
  assertSameLinesWithFile(getTestDataPath() + getTestName(true) + ".positions.txt",Arrays.toString(offsets) + "\n" + description,false);
}
