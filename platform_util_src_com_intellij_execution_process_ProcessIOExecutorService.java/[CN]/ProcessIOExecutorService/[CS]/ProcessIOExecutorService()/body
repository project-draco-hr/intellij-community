{
  super(CORE_POOL_SIZE,Integer.MAX_VALUE,1,TimeUnit.MINUTES,new SynchronousQueue<Runnable>(),new ThreadFactory(){
    private final AtomicInteger counter=new AtomicInteger();
    @NotNull @Override public Thread newThread(    @NotNull final Runnable r){
      Thread thread=new Thread(r,"Process I/O pool " + counter.incrementAndGet());
      thread.setPriority(Thread.NORM_PRIORITY - 1);
      return thread;
    }
  }
);
}
