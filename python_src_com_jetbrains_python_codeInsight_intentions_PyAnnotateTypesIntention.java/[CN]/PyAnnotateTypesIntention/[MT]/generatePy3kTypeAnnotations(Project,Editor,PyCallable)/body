{
  final TemplateBuilder builder=TemplateBuilderFactory.getInstance().createTemplateBuilder(callable);
  if (callable instanceof PyFunction) {
    PyExpression returnType=annotateReturnType(project,(PyFunction)callable,false);
    if (returnType != null) {
      builder.replaceElement(returnType,returnType.getText());
    }
  }
  if (callable instanceof PyFunction) {
    PyFunction function=(PyFunction)callable;
    PyParameter[] params=function.getParameterList().getParameters();
    for (int i=params.length - 1; i >= 0; i--) {
      if (params[i] instanceof PyNamedParameter) {
        params[i]=annotateParameter(project,editor,(PyNamedParameter)params[i],false);
      }
    }
    for (int i=params.length - 1; i >= 0; i--) {
      if (params[i] instanceof PyNamedParameter) {
        params[i]=CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(params[i]);
        PyAnnotation annotation=((PyNamedParameter)params[i]).getAnnotation();
        if (annotation != null) {
          PyExpression annotationValue=annotation.getValue();
          if (annotationValue != null) {
            builder.replaceElement(annotationValue,annotationValue.getText());
          }
        }
      }
    }
  }
  if (callable != null) {
    startTemplate(project,callable,builder);
  }
}
