{
  final PsiElement elementAt=PyUtil.findNonWhitespaceAtOffset(file,editor.getCaretModel().getOffset());
  final PyCallable callable=getCallable(elementAt);
  final TemplateBuilder builder=TemplateBuilderFactory.getInstance().createTemplateBuilder(callable);
  PyExpression returnType=annotateReturnType(project,editor.getDocument(),elementAt,false);
  if (returnType != null) {
    builder.replaceElement(returnType,returnType.getText());
  }
  if (callable instanceof PyFunction) {
    PyFunction function=(PyFunction)callable;
    PyParameter[] params=function.getParameterList().getParameters();
    for (int i=params.length - 1; i >= 0; i--) {
      if (params[i] instanceof PyNamedParameter) {
        params[i]=annotateParameter(project,editor,(PyNamedParameter)params[i],false);
      }
    }
    for (int i=params.length - 1; i >= 0; i--) {
      if (params[i] instanceof PyNamedParameter) {
        params[i]=CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(params[i]);
        PyAnnotation annotation=((PyNamedParameter)params[i]).getAnnotation();
        if (annotation != null) {
          PyExpression annotationValue=annotation.getValue();
          if (annotationValue != null) {
            builder.replaceElement(annotationValue,annotationValue.getText());
          }
        }
      }
    }
  }
  if (callable != null) {
    final Template template=((TemplateBuilderImpl)builder).buildInlineTemplate();
    int offset=callable.getTextRange().getStartOffset();
    final OpenFileDescriptor descriptor=new OpenFileDescriptor(project,callable.getContainingFile().getVirtualFile(),offset);
    final Editor targetEditor=FileEditorManager.getInstance(project).openTextEditor(descriptor,true);
    if (targetEditor != null) {
      targetEditor.getCaretModel().moveToOffset(offset);
      TemplateManager.getInstance(project).startTemplate(targetEditor,template);
    }
  }
}
