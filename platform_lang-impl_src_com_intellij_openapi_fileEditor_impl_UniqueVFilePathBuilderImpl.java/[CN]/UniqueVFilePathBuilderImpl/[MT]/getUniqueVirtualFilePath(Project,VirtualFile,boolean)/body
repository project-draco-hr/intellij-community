{
  Key<CachedValue<ConcurrentFactoryMap<String,UniqueNameBuilder<VirtualFile>>>> key=skipNonOpenedFiles ? ourShortNameOpenedBuilderCacheKey : ourShortNameBuilderCacheKey;
  CachedValue<ConcurrentFactoryMap<String,UniqueNameBuilder<VirtualFile>>> data=project.getUserData(key);
  if (data == null) {
    project.putUserData(key,data=CachedValuesManager.getManager(project).createCachedValue(new CachedValueProvider<ConcurrentFactoryMap<String,UniqueNameBuilder<VirtualFile>>>(){
      @Nullable @Override public Result<ConcurrentFactoryMap<String,UniqueNameBuilder<VirtualFile>>> compute(){
        return new Result<ConcurrentFactoryMap<String,UniqueNameBuilder<VirtualFile>>>(new ConcurrentFactoryMap<String,UniqueNameBuilder<VirtualFile>>(){
          @Nullable @Override protected UniqueNameBuilder<VirtualFile> create(          String key){
            final UniqueNameBuilder<VirtualFile> builder=filesWithTheSameName(key,project,skipNonOpenedFiles,ProjectScope.getProjectScope(project));
            return builder != null ? builder : ourEmptyBuilder;
          }
        }
,PsiModificationTracker.MODIFICATION_COUNT,ProjectRootManager.getInstance(project),FileEditorManagerImpl.OPEN_FILE_SET_MODIFICATION_COUNT);
      }
    }
,false));
  }
  UniqueNameBuilder<VirtualFile> uniqueNameBuilderForShortName=data.getValue().get(file.getName());
  if (uniqueNameBuilderForShortName == ourEmptyBuilder)   uniqueNameBuilderForShortName=null;
  if (uniqueNameBuilderForShortName != null && uniqueNameBuilderForShortName.contains(file)) {
    if (file instanceof VirtualFilePathWrapper) {
      return ((VirtualFilePathWrapper)file).getPresentablePath();
    }
    return getEditorTabText(file,uniqueNameBuilderForShortName,UISettings.getInstance().HIDE_KNOWN_EXTENSION_IN_TABS);
  }
  return file.getPresentableName();
}
