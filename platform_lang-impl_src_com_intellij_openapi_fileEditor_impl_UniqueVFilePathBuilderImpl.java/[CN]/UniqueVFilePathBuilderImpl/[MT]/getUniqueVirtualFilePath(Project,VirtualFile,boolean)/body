{
  Key<CachedValue<ConcurrentMap<String,UniqueNameBuilder<VirtualFile>>>> key=skipNonOpenedFiles ? ourShortNameOpenedBuilderCacheKey : ourShortNameBuilderCacheKey;
  CachedValue<ConcurrentMap<String,UniqueNameBuilder<VirtualFile>>> data=project.getUserData(key);
  if (data == null) {
    project.putUserData(key,data=CachedValuesManager.getManager(project).createCachedValue(new CachedValueProvider<ConcurrentMap<String,UniqueNameBuilder<VirtualFile>>>(){
      @Nullable @Override public Result<ConcurrentMap<String,UniqueNameBuilder<VirtualFile>>> compute(){
        return new Result<ConcurrentMap<String,UniqueNameBuilder<VirtualFile>>>(ContainerUtil.<String,UniqueNameBuilder<VirtualFile>>createConcurrentSoftValueMap(),PsiModificationTracker.MODIFICATION_COUNT,FileEditorManagerImpl.OPEN_FILE_SET_MODIFICATION_COUNT);
      }
    }
,false));
  }
  final ConcurrentMap<String,UniqueNameBuilder<VirtualFile>> valueMap=data.getValue();
  final String fileName=file.getName();
  UniqueNameBuilder<VirtualFile> uniqueNameBuilderForShortName=valueMap.get(fileName);
  if (uniqueNameBuilderForShortName == null) {
    final UniqueNameBuilder<VirtualFile> builder=filesWithTheSameName(fileName,project,skipNonOpenedFiles,ProjectScope.getProjectScope(project));
    valueMap.put(fileName,builder != null ? builder : ourEmptyBuilder);
    uniqueNameBuilderForShortName=builder;
  }
 else   if (uniqueNameBuilderForShortName == ourEmptyBuilder) {
    uniqueNameBuilderForShortName=null;
  }
  if (uniqueNameBuilderForShortName != null && uniqueNameBuilderForShortName.contains(file)) {
    if (file instanceof VirtualFilePathWrapper) {
      return ((VirtualFilePathWrapper)file).getPresentablePath();
    }
    return getEditorTabText(file,uniqueNameBuilderForShortName,UISettings.getInstance().HIDE_KNOWN_EXTENSION_IN_TABS);
  }
  return file.getPresentableName();
}
