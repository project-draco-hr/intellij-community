{
  final TypeEvalContext context=TypeEvalContext.deepCodeInsight(pyClass.getProject());
  final PyClassLikeType type=PyUtil.as(context.getType(pyClass),PyClassLikeType.class);
  if (type == null) {
    return PyFunction.EMPTY_ARRAY;
  }
  final List<PyFunction> result=new ArrayList<PyFunction>();
  for (  Object completion : type.getCompletionVariants("",null,new ProcessingContext())) {
    if (completion instanceof PyFunction) {
      result.add((PyFunction)completion);
    }
 else     if (completion instanceof LookupElement) {
      final PyFunction element=PyUtil.as(((LookupElement)completion).getPsiElement(),PyFunction.class);
      if (element != null) {
        result.add(element);
      }
    }
  }
  return result.toArray(new PyFunction[result.size()]);
}
