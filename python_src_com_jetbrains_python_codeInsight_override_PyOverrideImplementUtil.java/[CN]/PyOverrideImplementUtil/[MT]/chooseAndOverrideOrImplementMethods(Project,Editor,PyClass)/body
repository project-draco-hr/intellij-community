{
  LOG.assertTrue(pyClass.isValid());
  ApplicationManager.getApplication().assertReadAccessAllowed();
  final Collection<PyFunction> superFunctions=getAllSuperFunctions(pyClass);
  List<PyMethodMember> elements=new ArrayList<PyMethodMember>();
  for (  PyFunction function : superFunctions) {
    final String name=function.getName();
    if (name == null || PyUtil.isClassPrivateName(name)) {
      continue;
    }
    if (pyClass.findMethodByName(name,false) == null) {
      elements.add(new PyMethodMember(function));
    }
  }
  if (elements.size() == 0) {
    return;
  }
  final MemberChooser<PyMethodMember> chooser=new MemberChooser<PyMethodMember>(elements.toArray(new PyMethodMember[elements.size()]),false,true,project){
    @Override protected SpeedSearchComparator getSpeedSearchComparator(){
      return new SpeedSearchComparator(false){
        @Nullable @Override public Iterable<TextRange> matchingFragments(        String pattern,        String text){
          return super.matchingFragments(PyMethodMember.trimUnderscores(pattern),text);
        }
      }
;
    }
  }
;
  chooser.setTitle("Select Methods to Override");
  chooser.setCopyJavadocVisible(false);
  chooser.show();
  if (chooser.getExitCode() != DialogWrapper.OK_EXIT_CODE) {
    return;
  }
  List<PyMethodMember> membersToOverride=chooser.getSelectedElements();
  overrideMethods(editor,pyClass,membersToOverride);
}
