{
  LOG.assertTrue(pyClass.isValid());
  ApplicationManager.getApplication().assertReadAccessAllowed();
  final Collection<PyFunction> superFunctions=getAllSuperFunctions(pyClass);
  List<PyMethodMember> elements=new ArrayList<PyMethodMember>();
  for (  PyFunction function : superFunctions) {
    final String name=function.getName();
    if (name == null) {
      continue;
    }
    if (pyClass.findMethodByName(name,false) == null) {
      elements.add(new PyMethodMember(function,name,function.getIcon(0)));
    }
  }
  if (elements.size() == 0) {
    return;
  }
  final MemberChooser<PyMethodMember> chooser=new MemberChooser<PyMethodMember>(elements.toArray(new PyMethodMember[elements.size()]),false,true,project);
  chooser.setTitle("Select Methods to Override");
  chooser.setCopyJavadocVisible(false);
  chooser.show();
  if (chooser.getExitCode() != DialogWrapper.OK_EXIT_CODE) {
    return;
  }
  final List<String> newMembers=generateCode(chooser.getSelectedElements());
  if (newMembers.isEmpty()) {
    return;
  }
  new WriteCommandAction(project,pyClass.getContainingFile()){
    protected void run(    final Result result) throws Throwable {
      write(pyClass,newMembers,project,editor);
    }
  }
.execute();
}
