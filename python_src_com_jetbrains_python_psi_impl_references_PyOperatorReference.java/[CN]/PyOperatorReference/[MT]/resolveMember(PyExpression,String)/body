{
  final ArrayList<RatedResolveResult> results=new ArrayList<RatedResolveResult>();
  if (object != null && name != null) {
    final TypeEvalContext typeEvalContext=myContext.getTypeEvalContext();
    PyType type=typeEvalContext.getType(object);
    typeEvalContext.trace("Side text is %s, type is %s",object.getText(),type);
    if (type instanceof PyClassLikeType) {
      if (((PyClassLikeType)type).isDefinition()) {
        type=((PyClassLikeType)type).getMetaClassType(typeEvalContext,true);
      }
    }
    if (type != null) {
      List<? extends RatedResolveResult> res=type.resolveMember(name,object,AccessDirection.of(myElement),myContext);
      if (res != null && res.size() > 0) {
        results.addAll(res);
      }
 else       if (typeEvalContext.tracing()) {
        VirtualFile vFile=null;
        if (type instanceof PyClassType) {
          final PyClass pyClass=((PyClassType)type).getPyClass();
          vFile=pyClass.getContainingFile().getVirtualFile();
        }
        type.resolveMember(name,object,AccessDirection.of(myElement),myContext);
        typeEvalContext.trace("Could not resolve member %s in type %s from file %s",name,type,vFile);
      }
    }
  }
  return results;
}
