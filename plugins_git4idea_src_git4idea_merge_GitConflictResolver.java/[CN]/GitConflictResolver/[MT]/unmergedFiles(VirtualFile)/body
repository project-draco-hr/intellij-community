{
  GitRepository repository=myRepositoryManager.getRepositoryForRoot(root);
  if (repository == null) {
    LOG.error("Repository not found for root " + root);
    return Collections.emptyList();
  }
  GitCommandResult result=myGit.getUnmergedFiles(repository);
  if (!result.success()) {
    throw new VcsException(result.getErrorOutputAsJoinedString());
  }
  String output=StringUtil.join(result.getOutput(),"\n");
  HashSet<String> unmergedPaths=ContainerUtil.newHashSet();
  for (StringScanner s=new StringScanner(output); s.hasMoreData(); ) {
    if (s.isEol()) {
      s.nextLine();
      continue;
    }
    s.boundedToken('\t');
    String relative=s.line();
    unmergedPaths.add(GitUtil.unescapePath(relative));
  }
  if (unmergedPaths.size() == 0) {
    return Collections.emptyList();
  }
 else {
    List<File> files=ContainerUtil.map(unmergedPaths,new Function<String,File>(){
      @Override public File fun(      String path){
        return new File(root.getPath(),path);
      }
    }
);
    return sortVirtualFilesByPresentation(findVirtualFilesWithRefresh(files));
  }
}
