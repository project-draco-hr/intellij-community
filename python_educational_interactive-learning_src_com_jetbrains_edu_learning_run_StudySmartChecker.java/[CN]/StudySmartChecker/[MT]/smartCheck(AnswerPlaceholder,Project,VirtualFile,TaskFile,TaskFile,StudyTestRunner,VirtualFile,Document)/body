{
  try {
    final int index=placeholder.getIndex();
    String windowCopyName=answerFile.getNameWithoutExtension() + index + EduNames.WINDOW_POSTFIX+ answerFile.getExtension();
    final VirtualFile windowCopy=answerFile.copy(project,answerFile.getParent(),windowCopyName);
    final FileDocumentManager documentManager=FileDocumentManager.getInstance();
    final Document windowDocument=documentManager.getDocument(windowCopy);
    if (windowDocument != null) {
      final File resourceFile=StudyUtils.copyResourceFile(virtualFile.getName(),windowCopy.getName(),project,usersTaskFile.getTask());
      final TaskFile windowTaskFile=new TaskFile();
      TaskFile.copy(answerTaskFile,windowTaskFile);
      EduDocumentListener listener=new EduDocumentListener(windowTaskFile);
      windowDocument.addDocumentListener(listener);
      int start=placeholder.getRealStartOffset(windowDocument);
      int end=start + placeholder.getLength();
      final AnswerPlaceholder userAnswerPlaceholder=usersTaskFile.getAnswerPlaceholders().get(placeholder.getIndex());
      int userStart=userAnswerPlaceholder.getRealStartOffset(usersDocument);
      int userEnd=userStart + userAnswerPlaceholder.getLength();
      String text=usersDocument.getText(new TextRange(userStart,userEnd));
      windowDocument.replaceString(start,end,text);
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          documentManager.saveDocument(windowDocument);
        }
      }
);
      VirtualFile fileWindows=EduUtils.flushWindows(windowTaskFile,windowCopy,true);
      Process smartTestProcess=testRunner.createCheckProcess(project,windowCopy.getPath());
      final CapturingProcessHandler handler=new CapturingProcessHandler(smartTestProcess,null,windowCopy.getPath());
      final ProcessOutput output=handler.runProcess();
      boolean res=testRunner.getTestsOutput(output).isSuccess();
      StudyTaskManager.getInstance(project).setStatus(userAnswerPlaceholder,res ? StudyStatus.Solved : StudyStatus.Failed);
      StudyUtils.deleteFile(windowCopy);
      if (fileWindows != null) {
        StudyUtils.deleteFile(fileWindows);
      }
      if (!resourceFile.delete()) {
        LOG.error("failed to delete",resourceFile.getPath());
      }
    }
  }
 catch (  ExecutionException e) {
    LOG.error(e);
  }
catch (  IOException e) {
    LOG.error(e);
  }
}
