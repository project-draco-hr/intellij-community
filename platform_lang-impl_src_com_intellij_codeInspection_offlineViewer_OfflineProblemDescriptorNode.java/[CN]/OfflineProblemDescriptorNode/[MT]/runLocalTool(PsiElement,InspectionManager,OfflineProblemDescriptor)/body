{
  PsiFile containingFile=psiElement.getContainingFile();
  final ProblemsHolder holder=new ProblemsHolder(inspectionManager,containingFile,false);
  final LocalInspectionTool localTool=((LocalInspectionToolWrapper)myToolWrapper).getTool();
  final int startOffset=psiElement.getTextRange().getStartOffset();
  final int endOffset=psiElement.getTextRange().getEndOffset();
  LocalInspectionToolSession session=new LocalInspectionToolSession(containingFile,startOffset,endOffset);
  final PsiElementVisitor visitor=localTool.buildVisitor(holder,false,session);
  localTool.inspectionStarted(session,false);
  final PsiElement[] elementsInRange=getElementsIntersectingRange(containingFile,startOffset,endOffset);
  for (  PsiElement element : elementsInRange) {
    element.accept(visitor);
  }
  localTool.inspectionFinished(session,holder);
  if (holder.hasResults()) {
    final List<ProblemDescriptor> list=holder.getResults();
    final int idx=offlineProblemDescriptor.getProblemIndex();
    int curIdx=0;
    for (    ProblemDescriptor descriptor : list) {
      final PsiNamedElement member=localTool.getProblemElement(descriptor.getPsiElement());
      if (psiElement instanceof PsiFile || member != null && member.equals(psiElement)) {
        if (curIdx == idx) {
          setValue(descriptor);
          return descriptor;
        }
        curIdx++;
      }
    }
  }
  return null;
}
