{
  final InspectionManager inspectionManager=InspectionManager.getInstance(presentation.getContext().getProject());
  final OfflineProblemDescriptor offlineProblemDescriptor=offlineDescriptor;
  if (element instanceof RefElement) {
    final PsiElement psiElement=((RefElement)element).getElement();
    if (psiElement != null) {
      ProblemDescriptor descriptor=ProgressManager.getInstance().runProcess(new Computable<ProblemDescriptor>(){
        @Override public ProblemDescriptor compute(){
          return runLocalTool(psiElement,inspectionManager,offlineProblemDescriptor,toolWrapper);
        }
      }
,new DaemonProgressIndicator());
      if (descriptor != null)       return descriptor;
    }
    return null;
  }
  final List<String> hints=offlineProblemDescriptor.getHints();
  CommonProblemDescriptor descriptor=inspectionManager.createProblemDescriptor(offlineProblemDescriptor.getDescription(),(QuickFix)null);
  final QuickFix[] quickFixes=getFixes(descriptor,hints,presentation);
  if (quickFixes != null) {
    descriptor=inspectionManager.createProblemDescriptor(offlineProblemDescriptor.getDescription(),quickFixes);
  }
  return descriptor;
}
