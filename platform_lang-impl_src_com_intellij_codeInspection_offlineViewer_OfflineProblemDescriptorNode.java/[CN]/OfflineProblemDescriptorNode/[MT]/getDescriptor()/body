{
  if (userObject == null)   return null;
  if (userObject instanceof CommonProblemDescriptor) {
    return (CommonProblemDescriptor)userObject;
  }
  final InspectionManager inspectionManager=InspectionManager.getInstance(myPresentation.getContext().getProject());
  final OfflineProblemDescriptor offlineProblemDescriptor=(OfflineProblemDescriptor)userObject;
  final RefEntity element=getElement();
  if (myToolWrapper instanceof LocalInspectionToolWrapper) {
    if (element instanceof RefElement) {
      final PsiElement psiElement=((RefElement)element).getElement();
      if (psiElement != null) {
        ProblemDescriptor descriptor=ProgressManager.getInstance().runProcess(new Computable<ProblemDescriptor>(){
          @Override public ProblemDescriptor compute(){
            return runLocalTool(psiElement,inspectionManager,offlineProblemDescriptor);
          }
        }
,new DaemonProgressIndicator());
        if (descriptor != null)         return descriptor;
      }
    }
    setUserObject(null);
    return null;
  }
  final List<String> hints=offlineProblemDescriptor.getHints();
  if (element instanceof RefElement) {
    final PsiElement psiElement=((RefElement)element).getElement();
    if (psiElement == null)     return null;
    ProblemDescriptor descriptor=inspectionManager.createProblemDescriptor(psiElement,offlineProblemDescriptor.getDescription(),(LocalQuickFix)null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false);
    final LocalQuickFix[] quickFixes=getFixes(descriptor,hints);
    if (quickFixes != null) {
      descriptor=inspectionManager.createProblemDescriptor(psiElement,offlineProblemDescriptor.getDescription(),false,quickFixes,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
    }
    setUserObject(descriptor);
    return descriptor;
  }
  CommonProblemDescriptor descriptor=inspectionManager.createProblemDescriptor(offlineProblemDescriptor.getDescription(),(QuickFix)null);
  final QuickFix[] quickFixes=getFixes(descriptor,hints);
  if (quickFixes != null) {
    descriptor=inspectionManager.createProblemDescriptor(offlineProblemDescriptor.getDescription(),quickFixes);
  }
  setUserObject(descriptor);
  return descriptor;
}
