{
  super.visitReturnStatement(statement);
  final PsiElement method=PsiTreeUtil.getParentOfType(statement,PsiMethod.class,PsiLambdaExpression.class);
  final PsiExpression value=statement.getReturnValue();
  if (method != null && value != null) {
    if (method instanceof PsiLambdaExpression) {
      return;
    }
    final PsiType returnType=((PsiMethod)method).getReturnType();
    final PsiType valueType=myTypeEvaluator.evaluateType(value);
    if (returnType != null && valueType != null) {
      if (!myLabeler.addMigrationRoot(method,valueType,myStatement,TypeConversionUtil.isAssignable(returnType,valueType),true,true) && TypeMigrationLabeler.typeContainsTypeParameters(returnType)) {
        value.accept(this);
      }
    }
  }
}
