{
  final TypeView right=new TypeView(value);
  final TypeView left=new TypeView(variable,varSubstitutor,evalSubstitutor);
  final PsiType declarationType=left.getType();
switch (TypeInfection.getInfection(left,right)) {
case TypeInfection.NONE_INFECTED:
    break;
case TypeInfection.LEFT_INFECTED:
  final PsiType valueType=right.getType();
if (valueType != null && declarationType != null) {
  myLabeler.migrateExpressionType(value,adjustMigrationTypeIfGenericArrayCreation(declarationType,value),myStatement,TypeConversionUtil.isAssignable(declarationType,valueType),true);
}
break;
case TypeInfection.RIGHT_INFECTED:
PsiType psiType=migrationType != null ? migrationType : right.getType();
if (psiType != null && declarationType != null && !myLabeler.addMigrationRoot(variable,psiType,myStatement,TypeConversionUtil.isAssignable(declarationType,psiType),true) && !TypeConversionUtil.isAssignable(left.getType(),psiType)) {
PsiType initialType=left.getType();
if (initialType instanceof PsiEllipsisType) {
initialType=((PsiEllipsisType)initialType).getComponentType();
}
myLabeler.convertExpression(value,psiType,initialType,isCovariantPosition);
}
break;
case TypeInfection.BOTH_INFECTED:
addTypeUsage(variable);
break;
default :
LOG.error("Must not happen.");
}
}
