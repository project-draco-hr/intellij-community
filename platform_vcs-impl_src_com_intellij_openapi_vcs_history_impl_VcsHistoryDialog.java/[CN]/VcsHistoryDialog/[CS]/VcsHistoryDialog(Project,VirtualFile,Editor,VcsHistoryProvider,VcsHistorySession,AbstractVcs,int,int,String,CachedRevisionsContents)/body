{
  super(project,true);
  myProject=project;
  myFile=file;
  myEditor=editor;
  myActiveVcs=vcs;
  myCachedContents=cachedContents;
  mySelectionStart=selectionStart;
  mySelectionEnd=selectionEnd;
  myHelpId=ObjectUtils.notNull(vcsHistoryProvider.getHelpId(),"reference.dialogs.vcs.selection.history");
  setTitle(title);
  final VcsDependentHistoryComponents components=vcsHistoryProvider.getUICustomization(session,getRootPane());
  ColumnInfo[] additionalColumns=ObjectUtils.notNull(components.getColumns(),ColumnInfo.EMPTY_ARRAY);
  myListModel=new ListTableModel<VcsFileRevision>(ArrayUtil.mergeArrays(COLUMNS,additionalColumns));
  myListModel.setSortable(false);
  myList=new TableView<VcsFileRevision>(myListModel);
  myList.getEmptyText().setText(VcsBundle.message("history.empty"));
  myDiffPanel=DiffManager.getInstance().createRequestPanel(myProject,getDisposable(),getWindow());
  final VcsRevisionNumber currentRevisionNumber=session.getCurrentRevisionNumber();
  if (currentRevisionNumber != null) {
    myRevisions.add(new CurrentRevision(file,currentRevisionNumber));
  }
  myRevisions.addAll(session.getRevisionList());
  final VcsConfiguration configuration=VcsConfiguration.getInstance(myProject);
  mySplitter=new JBSplitter(true,DIFF_SPLITTER_PROPORTION_KEY,DIFF_SPLITTER_PROPORTION);
  mySplitter.setFirstComponent(myDiffPanel.getComponent());
  mySplitter.setSecondComponent(createBottomPanel(components.getDetailsComponent()));
  final ListSelectionListener selectionListener=new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      final VcsFileRevision revision;
      if (myList.getSelectedRowCount() == 1 && !myList.isEmpty()) {
        revision=myList.getItems().get(myList.getSelectedRow());
        myComments.setText(revision.getCommitMessage());
        myComments.setCaretPosition(0);
      }
 else {
        revision=null;
        myComments.setText("");
      }
      if (components.getRevisionListener() != null) {
        components.getRevisionListener().consume(revision);
      }
      updateDiff();
    }
  }
;
  myList.getSelectionModel().addListSelectionListener(selectionListener);
  myChangesOnlyCheckBox.setSelected(configuration.SHOW_ONLY_CHANGED_IN_SELECTION_DIFF);
  try {
    updateRevisionsList();
  }
 catch (  final VcsException e) {
    canNotLoadRevisionMessage(e);
  }
  myChangesOnlyCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      configuration.SHOW_ONLY_CHANGED_IN_SELECTION_DIFF=myChangesOnlyCheckBox.isSelected();
      try {
        updateRevisionsList();
      }
 catch (      VcsException e1) {
        canNotLoadRevisionMessage(e1);
      }
    }
  }
);
  init();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      if (!VcsHistoryDialog.this.isShowing())       return;
      myList.getSelectionModel().addSelectionInterval(0,0);
    }
  }
);
}
