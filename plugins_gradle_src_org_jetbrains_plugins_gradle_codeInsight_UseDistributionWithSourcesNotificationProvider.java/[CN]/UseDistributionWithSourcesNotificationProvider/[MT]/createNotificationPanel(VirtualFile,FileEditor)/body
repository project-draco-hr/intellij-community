{
  try {
    if (GradleConstants.DEFAULT_SCRIPT_NAME.equals(file.getName()) || GradleConstants.SETTINGS_FILE_NAME.equals(file.getName())) {
      final Module module=ModuleUtilCore.findModuleForFile(file,myProject);
      if (module == null)       return null;
      final String rootProjectPath=getRootProjectPath(module);
      if (rootProjectPath == null)       return null;
      final GradleProjectSettings settings=GradleSettings.getInstance(module.getProject()).getLinkedProjectSettings(rootProjectPath);
      if (settings == null || settings.getDistributionType() != DistributionType.DEFAULT_WRAPPED)       return null;
      if (settings.isDisableWrapperSourceDistributionNotification())       return null;
      if (isWrapperDistributionWithSourcesUsed(rootProjectPath))       return null;
      final EditorNotificationPanel panel=new EditorNotificationPanel();
      panel.setText(GradleBundle.message("gradle.notifications.use.distribution.with.sources"));
      panel.createActionLabel(GradleBundle.message("gradle.notifications.hide.tip"),new Runnable(){
        @Override public void run(){
          settings.setDisableWrapperSourceDistributionNotification(true);
          EditorNotifications.getInstance(module.getProject()).updateAllNotifications();
        }
      }
);
      panel.createActionLabel(GradleBundle.message("gradle.notifications.apply.suggestion"),new Runnable(){
        @Override public void run(){
          updateDefaultWrapperConfiguration(rootProjectPath);
          EditorNotifications.getInstance(module.getProject()).updateAllNotifications();
          final ProjectDataManager projectDataManager=ServiceManager.getService(ProjectDataManager.class);
          ExternalSystemUtil.refreshProject(module.getProject(),GradleConstants.SYSTEM_ID,settings.getExternalProjectPath(),new ExternalProjectRefreshCallback(){
            @Override public void onSuccess(            @Nullable final DataNode<ProjectData> externalProject){
              if (externalProject == null) {
                return;
              }
              ExternalSystemApiUtil.executeProjectChangeAction(true,new Runnable(){
                @Override public void run(){
                  ProjectRootManagerEx.getInstanceEx(module.getProject()).mergeRootsChangesDuring(new Runnable(){
                    @Override public void run(){
                      projectDataManager.importData(externalProject.getKey(),Collections.singleton(externalProject),module.getProject(),true);
                    }
                  }
);
                }
              }
);
            }
            @Override public void onFailure(            @NotNull String errorMessage,            @Nullable String errorDetails){
            }
          }
,true,true);
        }
      }
);
      return panel;
    }
  }
 catch (  ProcessCanceledException ignored) {
  }
catch (  IndexNotReadyException ignored) {
  }
  return null;
}
