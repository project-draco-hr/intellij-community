{
  try {
    if (GradleConstants.DEFAULT_SCRIPT_NAME.equals(file.getName()) || GradleConstants.SETTINGS_FILE_NAME.equals(file.getName())) {
      final Module module=ModuleUtilCore.findModuleForFile(file,myProject);
      if (module == null)       return null;
      final String rootProjectPath=getRootProjectPath(module);
      if (rootProjectPath == null)       return null;
      final GradleProjectSettings settings=GradleSettings.getInstance(module.getProject()).getLinkedProjectSettings(rootProjectPath);
      if (settings == null || settings.getDistributionType() != DistributionType.DEFAULT_WRAPPED)       return null;
      if (settings.isDisableWrapperSourceDistributionNotification())       return null;
      if (isWrapperDistributionWithSourcesUsed(rootProjectPath))       return null;
      final EditorNotificationPanel panel=new EditorNotificationPanel();
      panel.setText(GradleBundle.message("gradle.notifications.use.distribution.with.sources"));
      panel.createActionLabel(GradleBundle.message("gradle.notifications.hide.tip"),new Runnable(){
        @Override public void run(){
          settings.setDisableWrapperSourceDistributionNotification(true);
          EditorNotifications.getInstance(module.getProject()).updateAllNotifications();
        }
      }
);
      panel.createActionLabel(GradleBundle.message("gradle.notifications.apply.suggestion"),new Runnable(){
        @Override public void run(){
          updateWrapperConfiguration(rootProjectPath);
          EditorNotifications.getInstance(module.getProject()).updateAllNotifications();
        }
      }
);
      return panel;
    }
  }
 catch (  ProcessCanceledException ignored) {
  }
catch (  IndexNotReadyException ignored) {
  }
  return null;
}
