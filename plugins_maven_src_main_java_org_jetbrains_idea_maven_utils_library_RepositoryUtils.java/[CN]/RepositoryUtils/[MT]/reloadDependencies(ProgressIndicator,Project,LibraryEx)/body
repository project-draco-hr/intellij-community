{
  indicator.setText(ProjectBundle.message("maven.loading.library.hint",library.getName()));
  @NotNull final RepositoryLibraryProperties libraryProperties=(RepositoryLibraryProperties)library.getProperties();
  RepositoryAttachHandler.doResolveInner(project,Collections.singletonList(new MavenId(libraryProperties.getGroupId(),libraryProperties.getArtifactId(),resolveEffectiveVersion(project,libraryProperties))),new SmartList<MavenExtraArtifactType>(),RepositoryLibraryDescription.findDescription(libraryProperties).getRemoteRepositories(),new Processor<List<MavenArtifact>>(){
    @Override public boolean process(    List<MavenArtifact> artifacts){
      if (artifacts == null || artifacts.isEmpty()) {
        return true;
      }
      final List<OrderRoot> roots=RepositoryAttachHandler.createRoots(artifacts,null);
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          AccessToken token=WriteAction.start();
          try {
            final NewLibraryEditor editor=new NewLibraryEditor(null,libraryProperties);
            editor.removeAllRoots();
            editor.addRoots(roots);
            final Library.ModifiableModel model=library.getModifiableModel();
            editor.applyTo((LibraryEx.ModifiableModelEx)model);
            model.commit();
          }
  finally {
            token.finish();
          }
        }
      }
);
      return true;
    }
  }
,indicator);
}
