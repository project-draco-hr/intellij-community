{
  final String[] urls=library.getUrls(OrderRootType.CLASSES);
  if (urls.length == 0) {
    return null;
  }
  final String localRepositoryPath=FileUtil.toSystemIndependentName(MavenProjectsManager.getInstance(project).getLocalRepository().getPath());
  List<String> roots=JBIterable.of(urls).transform(new Function<String,String>(){
    @Override public String fun(    String urlWithPrefix){
      String url=StringUtil.trimStart(urlWithPrefix,JarFileSystem.PROTOCOL_PREFIX);
      return url.startsWith(localRepositoryPath) ? null : FileUtil.toSystemDependentName(PathUtil.getParentPath(url));
    }
  }
).toList();
  Map<String,Integer> counts=new HashMap<String,Integer>();
  for (  String root : roots) {
    int count=counts.get(root) != null ? counts.get(root) : 0;
    counts.put(root,count + 1);
  }
  return Collections.max(counts.entrySet(),new Comparator<Map.Entry<String,Integer>>(){
    @Override public int compare(    Map.Entry<String,Integer> o1,    Map.Entry<String,Integer> o2){
      return o1.getValue().compareTo(o2.getValue());
    }
  }
).getKey();
}
