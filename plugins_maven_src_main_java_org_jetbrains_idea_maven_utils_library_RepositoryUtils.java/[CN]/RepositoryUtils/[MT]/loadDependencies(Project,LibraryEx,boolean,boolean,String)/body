{
  if (library.getKind() != RepositoryLibraryType.REPOSITORY_LIBRARY_KIND) {
    return;
  }
  final RepositoryLibraryProperties properties=(RepositoryLibraryProperties)library.getProperties();
  MavenDependenciesRemoteManager.getInstance(project).downloadDependenciesAsync(properties,downloadSources,downloadJavaDocs,copyTo,new MavenRemoteTask.ResultProcessor<List<OrderRoot>>(){
    @Override public void process(    final List<OrderRoot> roots){
      if (roots == null || roots.isEmpty()) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            Messages.showErrorDialog(project,ProjectBundle.message("maven.downloading.failed",properties.getMavenId()),CommonBundle.getErrorTitle());
          }
        }
);
        return;
      }
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          if (library.isDisposed()) {
            return;
          }
          AccessToken token=WriteAction.start();
          try {
            final NewLibraryEditor editor=new NewLibraryEditor(null,properties);
            editor.removeAllRoots();
            editor.addRoots(roots);
            final Library.ModifiableModel model=library.getModifiableModel();
            editor.applyTo((LibraryEx.ModifiableModelEx)model);
            model.commit();
          }
  finally {
            token.finish();
          }
        }
      }
);
    }
  }
);
}
