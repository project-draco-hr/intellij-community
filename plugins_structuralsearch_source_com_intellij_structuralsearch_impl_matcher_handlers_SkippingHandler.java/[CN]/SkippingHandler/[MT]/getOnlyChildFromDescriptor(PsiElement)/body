{
  final EquivalenceDescriptorProvider provider=EquivalenceDescriptorProvider.getInstance(element);
  if (provider == null) {
    return null;
  }
  final EquivalenceDescriptor equivalenceDescriptor=provider.buildDescriptor(element);
  if (equivalenceDescriptor == null) {
    return null;
  }
  if (equivalenceDescriptor.getConstants().size() > 0) {
    return null;
  }
  final List<SingleChildDescriptor> singleChildren=equivalenceDescriptor.getSingleChildDescriptors();
  final List<MultiChildDescriptor> multiChildren=equivalenceDescriptor.getMultiChildDescriptors();
  if (singleChildren.size() + multiChildren.size() != 1) {
    return null;
  }
  if (singleChildren.size() > 0) {
    final SingleChildDescriptor descriptor=singleChildren.get(0);
    final PsiElement child=descriptor.getElement();
    if (child != null) {
      final SingleChildDescriptor.MyType type=descriptor.getType();
      if (type == SingleChildDescriptor.MyType.DEFAULT) {
        return child;
      }
 else       if (type == SingleChildDescriptor.MyType.CHILDREN || type == SingleChildDescriptor.MyType.CHILDREN_IN_ANY_ORDER) {
        return getOnlyNonLexicalChild(child);
      }
    }
  }
 else {
    final MultiChildDescriptor descriptor=multiChildren.get(0);
    final PsiElement[] children=descriptor.getElements();
    if (children != null && children.length == 1 && descriptor.getType() != MultiChildDescriptor.MyType.OPTIONALLY) {
      return children[0];
    }
  }
  return null;
}
