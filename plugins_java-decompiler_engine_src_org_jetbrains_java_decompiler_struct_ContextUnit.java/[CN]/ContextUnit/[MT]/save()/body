{
switch (type) {
case TYPE_FOLDER:
    resultSaver.saveFolder(filename);
  for (  String[] pair : otherEntries) {
    resultSaver.copyFile(pair[0],filename,pair[1]);
  }
for (int i=0; i < classes.size(); i++) {
  StructClass cl=classes.get(i);
  String entryName=decompiledData.getClassEntryName(cl,classEntries.get(i));
  if (entryName != null) {
    TextBuffer content=decompiledData.getClassContent(cl);
    if (content != null) {
      resultSaver.saveClassFile(filename,cl.qualifiedName,entryName,content);
    }
  }
}
break;
case TYPE_JAR:
case TYPE_ZIP:
resultSaver.saveFolder(archivePath);
resultSaver.createArchive(archivePath,filename,manifest);
for (String dirEntry : dirEntries) {
resultSaver.saveDirEntry(archivePath,filename,dirEntry);
}
for (String[] pair : otherEntries) {
if (type != TYPE_JAR || !JarFile.MANIFEST_NAME.equalsIgnoreCase(pair[1])) {
resultSaver.copyEntry(pair[0],archivePath,filename,pair[1]);
}
}
for (int i=0; i < classes.size(); i++) {
StructClass cl=classes.get(i);
String entryName=decompiledData.getClassEntryName(cl,classEntries.get(i));
if (entryName != null) {
TextBuffer content=decompiledData.getClassContent(cl);
resultSaver.saveClassEntry(archivePath,filename,cl.qualifiedName,entryName,content.toString());
}
}
resultSaver.closeArchive(archivePath,filename);
}
}
