{
  List<HashSet<VarVersionPaar>> lst=new ArrayList<HashSet<VarVersionPaar>>();
  for (  Entry<VarVersionPaar,FastSparseSet<Integer>> ent : ssa.getPhi().entrySet()) {
    HashSet<VarVersionPaar> set=new HashSet<VarVersionPaar>();
    set.add(ent.getKey());
    for (    Integer vers : ent.getValue()) {
      set.add(new VarVersionPaar(ent.getKey().var,vers.intValue()));
    }
    for (int i=lst.size() - 1; i >= 0; i--) {
      HashSet<VarVersionPaar> tset=lst.get(i);
      HashSet<VarVersionPaar> intersection=new HashSet<VarVersionPaar>(set);
      intersection.retainAll(tset);
      if (!intersection.isEmpty()) {
        set.addAll(tset);
        lst.remove(i);
      }
    }
    lst.add(set);
  }
  final HashMap<VarVersionPaar,Integer> phivers=new HashMap<VarVersionPaar,Integer>();
  for (  HashSet<VarVersionPaar> set : lst) {
    int min=Integer.MAX_VALUE;
    for (    VarVersionPaar paar : set) {
      if (paar.version < min) {
        min=paar.version;
      }
    }
    for (    VarVersionPaar paar : set) {
      phivers.put(new VarVersionPaar(paar.var,paar.version),min);
    }
  }
  dgraph.iterateExprents(new DirectGraph.ExprentIterator(){
    public int processExprent(    Exprent exprent){
      List<Exprent> lst=exprent.getAllExprents(true);
      lst.add(exprent);
      for (      Exprent expr : lst) {
        if (expr.type == Exprent.EXPRENT_VAR) {
          VarExprent var=(VarExprent)expr;
          Integer vers=phivers.get(new VarVersionPaar(var));
          if (vers != null) {
            var.setVersion(vers);
          }
        }
      }
      return 0;
    }
  }
);
}
