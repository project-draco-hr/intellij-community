{
  ProjectFileIndex fileIndex=ProjectRootManager.getInstance(psiClass.getProject()).getFileIndex();
  GotoFileModel gotoModel=new GotoFileModel(psiClass.getProject());
  Set<TestLocationDescriptor> descriptors=new HashSet<TestLocationDescriptor>();
  Collection<String> fileNames=getAllFileNames(test,gotoModel);
  for (  String name : fileNames) {
    ProgressManager.checkCanceled();
    boolean currentNameProcessed=false;
    final Object[] elements=gotoModel.getElementsByName(name,false,name);
    for (    Object element : elements) {
      if (!(element instanceof PsiFile)) {
        continue;
      }
      final VirtualFile file=((PsiFile)element).getVirtualFile();
      if (file == null || fileIndex.isInSource(file) && !fileIndex.isUnderSourceRootOfType(file,JavaModuleSourceRootTypes.RESOURCES)) {
        continue;
      }
      final String filePath=PathUtil.getFileName(file.getPath()).toLowerCase();
      int i=filePath.indexOf(test.toLowerCase());
      if (i < 0 || (i + test.length() < filePath.length()) && Character.isDigit(filePath.charAt(i + test.length()))) {
        continue;
      }
      TestLocationDescriptor current=new TestLocationDescriptor();
      current.populate(test,file);
      if (!current.isComplete()) {
        continue;
      }
      currentNameProcessed=true;
      if (descriptors.isEmpty() || (descriptors.iterator().next().dir.equals(current.dir) && !descriptors.contains(current))) {
        descriptors.add(current);
        continue;
      }
      if (moreRelevantPath(current,descriptors,psiClass)) {
        descriptors.clear();
        descriptors.add(current);
      }
    }
    if (currentNameProcessed) {
      break;
    }
  }
  return new TestDataDescriptor(descriptors);
}
