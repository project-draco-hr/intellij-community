{
  final String version=getVersion();
  if (version == null) {
    throw new IllegalStateException("Package has no version");
  }
  Preconditions.checkArgument(expectedVersionParts.length > 0,"At least one version part should be provided");
  final String[] versionParts=VERSION_PART_SEPARATOR.split(version);
  for (int i=0; i < expectedVersionParts.length; i++) {
    if ((versionParts.length - 1) < i) {
      return false;
    }
    final Matcher matcher=DIGITS.matcher(versionParts[i]);
    if (!(matcher.find() && (matcher.groupCount() == 1))) {
      throw new IllegalArgumentException("Can't parse " + versionParts[i]);
    }
    final int versionPart=Integer.parseInt(matcher.group(1));
    if (versionPart < expectedVersionParts[i]) {
      return false;
    }
  }
  return true;
}
