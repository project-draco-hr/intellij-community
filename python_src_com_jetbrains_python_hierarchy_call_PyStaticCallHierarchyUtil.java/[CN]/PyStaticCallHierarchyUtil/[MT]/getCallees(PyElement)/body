{
  final List<PsiElement> callees=Lists.newArrayList();
  final PyRecursiveElementVisitor visitor=new PyRecursiveElementVisitor(){
    @Override public void visitPyParameterList(    PyParameterList node){
    }
    @Override public void visitPyLambdaExpression(    PyLambdaExpression node){
    }
    @Override public void visitPyFunction(    PyFunction innerFunction){
      for (      PyParameter parameter : innerFunction.getParameterList().getParameters()) {
        PsiElement defaultValue=parameter.getDefaultValue();
        if (defaultValue != null) {
          defaultValue.accept(this);
        }
      }
    }
    @Override public void visitPyCallExpression(    PyCallExpression callExpression){
      super.visitPyCallExpression(callExpression);
      PsiElement calleeFunction=callExpression.resolveCalleeFunction(PyResolveContext.defaultContext());
      if (calleeFunction instanceof PyFunction) {
        callees.add(calleeFunction);
      }
    }
  }
;
  visitor.visitElement(element);
  return callees;
}
