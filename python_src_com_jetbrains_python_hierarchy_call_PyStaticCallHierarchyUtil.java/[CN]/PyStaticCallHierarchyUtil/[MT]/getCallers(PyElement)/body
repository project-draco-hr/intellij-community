{
  final List<PsiElement> callers=Lists.newArrayList();
  final Collection<UsageInfo> usages=findUsages(pyElement);
  for (  UsageInfo usage : usages) {
    PsiElement element=usage.getElement();
    if (element == null) {
      continue;
    }
    element=element.getParent();
    while (element instanceof PyParenthesizedExpression) {
      element=element.getParent();
    }
    if (element instanceof PyCallExpression) {
      PsiElement caller=PsiTreeUtil.getParentOfType(element,PyParameterList.class,PyFunction.class);
      if (caller instanceof PyFunction) {
        callers.add(caller);
      }
 else       if (caller instanceof PyParameterList) {
        PsiElement innerFunction=PsiTreeUtil.getParentOfType(caller,PyFunction.class);
        PsiElement outerFunction=PsiTreeUtil.getParentOfType(innerFunction,PyFunction.class);
        if (innerFunction != null && outerFunction != null) {
          callers.add(outerFunction);
        }
      }
    }
  }
  return callers;
}
