{
  ProgressManager.getInstance().run(new Task.Backgroundable(myProject,IdeBundle.message("progress.indexing"),false){
    @Override public void run(    @NotNull final ProgressIndicator indicator){
      if (indicator instanceof ProgressIndicatorEx) {
        ((ProgressIndicatorEx)indicator).addStateDelegate(new AppIconProgress());
      }
      final ProgressIndicator proxy=new DelegatingProgressIndicator(indicator);
      final ShutDownTracker shutdownTracker=ShutDownTracker.getInstance();
      final Thread self=Thread.currentThread();
      try {
        HeavyProcessLatch.INSTANCE.processStarted();
        shutdownTracker.registerStopperThread(self);
        runTasks(proxy);
      }
 catch (      RuntimeException e) {
        LOG.error(e);
        throw e;
      }
 finally {
        shutdownTracker.unregisterStopperThread(self);
        HeavyProcessLatch.INSTANCE.processFinished();
      }
    }
    private void runTasks(    ProgressIndicator indicator){
      while (true) {
        DumbModeTask task=getNextTask();
        if (task == null)         break;
        try {
          if (ApplicationManager.getApplication().isInternal())           LOG.info("Running dumb mode task: " + task);
          indicator.checkCanceled();
          indicator.setIndeterminate(true);
          indicator.setText(IdeBundle.message("progress.indexing.scanning"));
          task.performInDumbMode(indicator);
        }
 catch (        ProcessCanceledException ignored) {
        }
catch (        Throwable unexpected) {
          LOG.error(unexpected);
        }
      }
    }
  }
);
}
