{
  final Throwable trace=new Throwable();
  if (LOG.isDebugEnabled())   LOG.debug("Scheduling task " + task,trace);
  final Application application=ApplicationManager.getApplication();
  if (application.isUnitTestMode() || application.isHeadlessEnvironment() || !forceDumbMode && !myDumb && application.isReadAccessAllowed()) {
    final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
    if (indicator != null) {
      indicator.pushState();
    }
    AccessToken token=HeavyProcessLatch.INSTANCE.processStarted("Performing indexing task");
    try {
      task.performInDumbMode(indicator != null ? indicator : new EmptyProgressIndicator());
    }
  finally {
      token.finish();
      if (indicator != null) {
        indicator.popState();
      }
      Disposer.dispose(task);
    }
    return;
  }
  UIUtil.invokeLaterIfNeeded(new DumbAwareRunnable(){
    @Override public void run(){
      if (myProject.isDisposed()) {
        return;
      }
      ModalityState modality=ModalityState.current();
      final DumbModePermission permission=getDumbModePermission(modality);
      myProgresses.put(task,new ProgressIndicatorBase());
      Disposer.register(task,new Disposable(){
        @Override public void dispose(){
          application.assertIsDispatchThread();
          myProgresses.remove(task);
        }
      }
);
      myUpdatesQueue.addLast(task);
      if (!myDumb) {
        if (permission == null) {
          LOG.error("Dumb mode not permitted in modal environment; see DumbService.allowStartingDumbModeInside documentation." + "\n Current modality: " + modality + "\n all permissions: "+ myPermissions,trace);
        }
        application.runWriteAction(new Runnable(){
          @Override public void run(){
            myDumb=true;
            myModificationCount++;
            try {
              myPublisher.enteredDumbMode();
            }
 catch (            Throwable e) {
              LOG.error(e);
            }
          }
        }
);
        application.invokeLater(new Runnable(){
          @Override public void run(){
            boolean modal=permission != DumbModePermission.MAY_START_BACKGROUND;
            boolean shouldFinish=modal;
            try {
              startBackgroundProcess(modal);
            }
 catch (            Throwable e) {
              shouldFinish=true;
              LOG.error("Failed to start background index update task",e);
            }
 finally {
              if (shouldFinish) {
                updateFinished();
              }
            }
          }
        }
,modality,myProject.getDisposed());
      }
    }
  }
);
}
