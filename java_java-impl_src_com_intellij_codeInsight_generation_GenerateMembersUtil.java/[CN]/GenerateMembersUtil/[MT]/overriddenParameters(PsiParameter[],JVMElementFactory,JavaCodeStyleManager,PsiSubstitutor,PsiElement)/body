{
  PsiParameter[] result=new PsiParameter[parameters.length];
  UniqueNameGenerator generator=new UniqueNameGenerator();
  for (int i=0; i < parameters.length; i++) {
    PsiParameter parameter=parameters[i];
    final PsiType parameterType=parameter.getType();
    final PsiType substituted=substituteType(substitutor,parameterType,(PsiMethod)parameter.getDeclarationScope());
    @NonNls String paramName=parameter.getName();
    boolean isBaseNameGenerated=true;
    final boolean isSubstituted=substituted.equals(parameterType);
    if (!isSubstituted && isBaseNameGenerated(codeStyleManager,TypeConversionUtil.erasure(parameterType),paramName)) {
      isBaseNameGenerated=false;
    }
    if (paramName == null || isBaseNameGenerated && !isSubstituted && isBaseNameGenerated(codeStyleManager,parameterType,paramName) || !factory.isValidParameterName(paramName)) {
      String[] names=codeStyleManager.suggestVariableName(VariableKind.PARAMETER,null,null,substituted).names;
      if (names.length > 0) {
        paramName=generator.generateUniqueName(names[0]);
      }
 else {
        paramName=generator.generateUniqueName("p");
      }
    }
 else     if (!generator.value(paramName)) {
      paramName=generator.generateUniqueName(paramName);
    }
    generator.addExistingName(paramName);
    result[i]=factory.createParameter(paramName,substituted,target);
  }
  return result;
}
