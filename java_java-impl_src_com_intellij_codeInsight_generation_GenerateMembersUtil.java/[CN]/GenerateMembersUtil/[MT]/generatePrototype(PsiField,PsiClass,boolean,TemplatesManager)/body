{
  Project project=field.getProject();
  PsiElementFactory factory=JavaPsiFacade.getInstance(project).getElementFactory();
  final String methodText=GenerationUtil.velocityGenerateCode(psiClass,Collections.singletonList(field),new HashMap<String,String>(),templatesManager.getDefaultTemplate().getTemplate(),0,false);
  PsiMethod result;
  try {
    result=factory.createMethodFromText(methodText,psiClass);
  }
 catch (  IncorrectOperationException e) {
    if (ignoreInvalidTemplate) {
      LOG.info(e);
      result=templatesManager instanceof GetterTemplatesManager ? PropertyUtil.generateGetterPrototype(field) : PropertyUtil.generateSetterPrototype(field);
    }
 else {
      throw new GenerateCodeException(e);
    }
  }
  result=(PsiMethod)CodeStyleManager.getInstance(project).reformat(result);
  PsiModifierListOwner listOwner=null;
  if (templatesManager instanceof GetterTemplatesManager) {
    listOwner=result;
  }
 else {
    final PsiParameter[] parameters=result.getParameterList().getParameters();
    if (parameters.length == 1) {
      listOwner=parameters[0];
    }
  }
  if (listOwner != null) {
    PropertyUtil.annotateWithNullableStuff(field,listOwner);
  }
  return generatePrototype(field,result);
}
