{
  PsiClass containingClass=method.getContainingClass();
  PsiClass base=containingClass == null ? null : containingClass.getSuperClass();
  PsiMethod overridden=base == null ? null : base.findMethodBySignature(method,true);
  boolean emptyTemplate=true;
  PsiCodeBlock body=method.getBody();
  if (body != null) {
    PsiJavaToken lBrace=body.getLBrace();
    int left=lBrace != null ? lBrace.getStartOffsetInParent() + 1 : 0;
    PsiJavaToken rBrace=body.getRBrace();
    int right=rBrace != null ? rBrace.getStartOffsetInParent() : body.getTextLength();
    emptyTemplate=StringUtil.isEmptyOrSpaces(body.getText().substring(left,right));
  }
  if (overridden == null) {
    if (emptyTemplate) {
      CreateFromUsageUtils.setupMethodBody(method,containingClass);
    }
    return;
  }
  if (emptyTemplate) {
    OverrideImplementUtil.setupMethodBody(method,overridden,containingClass);
  }
  OverrideImplementUtil.annotateOnOverrideImplement(method,base,overridden);
}
