{
  final Project project=sourceMethod.getProject();
  final JVMElementFactory factory=getFactory(sourceMethod.getProject(),target);
  final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(project);
  try {
    final PsiMethod resultMethod=createMethod(factory,sourceMethod,target);
    copyModifiers(sourceMethod.getModifierList(),resultMethod.getModifierList());
    final PsiSubstitutor collisionResolvedSubstitutor=substituteTypeParameters(factory,target,sourceMethod.getTypeParameterList(),resultMethod.getTypeParameterList(),substitutor,sourceMethod);
    substituteReturnType(PsiManager.getInstance(project),resultMethod,sourceMethod.getReturnType(),collisionResolvedSubstitutor);
    substituteParameters(factory,codeStyleManager,sourceMethod.getParameterList(),resultMethod.getParameterList(),collisionResolvedSubstitutor,target);
    copyDocComment(sourceMethod,resultMethod,factory);
    GlobalSearchScope scope=sourceMethod.getResolveScope();
    final List<PsiClassType> thrownTypes=ExceptionUtil.collectSubstituted(collisionResolvedSubstitutor,sourceMethod.getThrowsList().getReferencedTypes(),scope);
    if (target instanceof PsiClass) {
      final PsiMethod[] methods=((PsiClass)target).findMethodsBySignature(sourceMethod,true);
      for (      PsiMethod psiMethod : methods) {
        if (psiMethod != null && psiMethod != sourceMethod) {
          PsiClass aSuper=psiMethod.getContainingClass();
          if (aSuper != null && aSuper != target) {
            PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(aSuper,(PsiClass)target,PsiSubstitutor.EMPTY);
            ExceptionUtil.retainExceptions(thrownTypes,ExceptionUtil.collectSubstituted(superClassSubstitutor,psiMethod.getThrowsList().getReferencedTypes(),scope));
          }
        }
      }
    }
    substituteThrows(factory,resultMethod.getThrowsList(),collisionResolvedSubstitutor,sourceMethod,thrownTypes);
    return resultMethod;
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
    return sourceMethod;
  }
}
