{
  JPanel result=new JPanel(new VerticalFlowLayout());
  myCoverageEnabledCheckbox=new JCheckBox(ExecutionBundle.message("enable.coverage.with.emma"));
  result.add(myCoverageEnabledCheckbox);
  final DefaultComboBoxModel runnersModel=new DefaultComboBoxModel();
  myCoverageRunnerCb=new JComboBox(runnersModel);
  final JavaCoverageEnabledConfiguration javaCoverageEnabledConfiguration=JavaCoverageEnabledConfiguration.getFrom(myConfig);
  LOG.assertTrue(javaCoverageEnabledConfiguration != null);
  final JavaCoverageEngine provider=javaCoverageEnabledConfiguration.getCoverageProvider();
  for (  CoverageRunner runner : Extensions.getExtensions(CoverageRunner.EP_NAME)) {
    if (runner.acceptsCoverageEngine(provider)) {
      runnersModel.addElement(new CoverageRunnerItem(runner));
    }
  }
  myCoverageRunnerCb.setRenderer(new ListCellRendererWrapper<CoverageRunnerItem>(myCoverageRunnerCb.getRenderer()){
    @Override public void customize(    JList list,    CoverageRunnerItem value,    int index,    boolean selected,    boolean hasFocus){
      if (value != null) {
        setText(value.getPresentableName());
      }
    }
  }
);
  myCoverageRunnerCb.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final CoverageRunner runner=getSelectedRunner();
      enableTracingPanel(runner != null && runner.isCoverageByTestApplicable());
      myTrackPerTestCoverageCb.setEnabled(myTracingRb.isSelected() && canHavePerTestCoverage() && runner != null && runner.isCoverageByTestApplicable());
    }
  }
);
  myRunnerPanel=new JPanel(new BorderLayout());
  myRunnerPanel.setBorder(BorderFactory.createEmptyBorder(0,8,0,0));
  myRunnerPanel.add(new JLabel("Choose coverage runner:"),BorderLayout.NORTH);
  myRunnerPanel.add(myCoverageRunnerCb,BorderLayout.CENTER);
  final JPanel cPanel=new JPanel(new VerticalFlowLayout());
  mySamplingRb=new JRadioButton("Sampling");
  cPanel.add(mySamplingRb);
  myTracingRb=new JRadioButton("Tracing");
  cPanel.add(myTracingRb);
  final ButtonGroup group=new ButtonGroup();
  group.add(mySamplingRb);
  group.add(myTracingRb);
  ActionListener samplingListener=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final CoverageRunner runner=getSelectedRunner();
      myTrackPerTestCoverageCb.setEnabled(canHavePerTestCoverage() && myTracingRb.isSelected() && runner != null && runner.isCoverageByTestApplicable());
    }
  }
;
  mySamplingRb.addActionListener(samplingListener);
  myTracingRb.addActionListener(samplingListener);
  myTrackPerTestCoverageCb=new JCheckBox("Track per test coverage");
  final JPanel tracingPanel=new JPanel(new BorderLayout());
  tracingPanel.setBorder(BorderFactory.createEmptyBorder(0,15,0,0));
  tracingPanel.add(myTrackPerTestCoverageCb,BorderLayout.CENTER);
  cPanel.add(tracingPanel);
  myRunnerPanel.add(cPanel,BorderLayout.SOUTH);
  result.add(myRunnerPanel);
  JPanel panel=new JPanel(new VerticalFlowLayout());
  panel.setBorder(IdeBorderFactory.createTitledBorderSimpleWithoutIndent(ExecutionBundle.message("record.coverage.filters.title")));
  myClassFilterEditor=new MyClassFilterEditor(myProject);
  panel.add(myClassFilterEditor);
  myTrackTestSourcesCb=new JCheckBox("Enable coverage in test folders");
  panel.add(myTrackTestSourcesCb);
  result.add(panel);
  myCoverageEnabledCheckbox.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final boolean isCoverageEnabled=myCoverageEnabledCheckbox.isSelected();
      myClassFilterEditor.setEnabled(isCoverageEnabled);
      UIUtil.setEnabled(myRunnerPanel,isCoverageEnabled,true);
      final CoverageRunner runner=getSelectedRunner();
      enableTracingPanel(isCoverageEnabled && runner != null && runner.isCoverageByTestApplicable());
      myTrackPerTestCoverageCb.setEnabled(myTracingRb.isSelected() && isCoverageEnabled && canHavePerTestCoverage()&& runner != null && runner.isCoverageByTestApplicable());
    }
  }
);
  myCoverageNotSupportedLabel=new JLabel(CodeInsightBundle.message("code.coverage.is.not.supported"));
  myCoverageNotSupportedLabel.setIcon(UIUtil.getOptionPanelWarningIcon());
  result.add(myCoverageNotSupportedLabel);
  return result;
}
