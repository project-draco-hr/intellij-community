{
  Arrays.fill(index,-1);
  for (int i=0; i < myAllNodes.length; i++) {
    Node node=myAllNodes[i];
    nodeIndex.put(node,i);
  }
  for (int i=0; i < index.length; i++) {
    if (index[i] == -1) {
      frames.push(new Frame(i));
      List<List<Node>> sccs=new ArrayList<List<Node>>();
      strongConnect(sccs);
      for (      List<Node> scc : sccs) {
        int sccSize=scc.size();
        mySCCs.add(sccSize);
        int sccBase=index.length - sccsSizeCombined - sccSize;
        Node rootNode=myAllNodes[i];
        int rIndex=scc.indexOf(rootNode);
        if (rIndex != -1) {
          ContainerUtil.swapElements(scc,rIndex,0);
        }
        for (int j=0; j < scc.size(); j++) {
          Node sccNode=scc.get(j);
          int tIndex=sccBase + j;
          myInvT[tIndex]=sccNode;
          myNodeToTNumber.put(sccNode,tIndex);
        }
        sccsSizeCombined+=sccSize;
      }
    }
  }
  for (int i=0; i < topo.size(); i++) {
    int nodeI=topo.get(i);
    Node node=myAllNodes[nodeI];
    myNodeToNNumber.put(node,index.length - 1 - i);
    myInvN[index.length - 1 - i]=node;
  }
  mySCCs.reverse();
}
