{
  if (elem instanceof PsiClass) {
    final PsiClass clazz=(PsiClass)elem;
    final NonCodeMembersHolder holder=new NonCodeMembersHolder();
    if (clazz instanceof GrTypeDefinition) {
      final PsiClassType type=JavaPsiFacade.getElementFactory(consumer.getProject()).createType(clazz);
      final ResolverProcessor processor=CompletionProcessor.createPropertyCompletionProcessor(clazz);
      final GroovyPsiElement context=(GroovyPsiElement)clazz;
      ResolveUtil.processAllDeclarations(type,processor,ResolveState.initial(),context);
      for (      GroovyResolveResult result : processor.getCandidates()) {
        final PsiElement element=result.getElement();
        if (element instanceof PsiMethod && !((PsiMethod)element).isConstructor() || element instanceof PsiField) {
          holder.addDeclaration(element);
        }
      }
    }
 else {
      for (      PsiMethod method : clazz.getAllMethods()) {
        if (!method.isConstructor())         holder.addDeclaration(method);
      }
      for (      PsiField field : clazz.getAllFields()) {
        holder.addDeclaration(field);
      }
    }
    consumer.addMemberHolder(holder);
  }
 else   if (elem instanceof GrExpression) {
    GrExpression expr=(GrExpression)elem;
    final PsiType type=expr.getType();
    if (type instanceof PsiClassType) {
      PsiClassType ctype=(PsiClassType)type;
      delegatesTo(ctype.resolve(),consumer);
    }
  }
}
