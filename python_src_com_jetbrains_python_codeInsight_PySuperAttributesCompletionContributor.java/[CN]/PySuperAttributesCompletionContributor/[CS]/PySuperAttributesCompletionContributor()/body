{
  extend(CompletionType.BASIC,PlatformPatterns.psiElement().withParents(PyReferenceExpression.class,PyExpressionStatement.class,PyStatementList.class,PyClass.class),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      PsiElement position=parameters.getOriginalPosition();
      PyClass containingClass=PsiTreeUtil.getParentOfType(position,PyClass.class);
      if (containingClass == null) {
        return;
      }
      List<String> seenNames=Lists.newArrayList();
      for (      PyTargetExpression expr : containingClass.getClassAttributes()) {
        seenNames.add(expr.getName());
      }
      for (      PyClass ancestor : containingClass.iterateAncestorClasses()) {
        for (        PyTargetExpression expr : ancestor.getClassAttributes()) {
          if (!seenNames.contains(expr.getName())) {
            result.addElement(LookupElementBuilder.create(expr,expr.getName() + " = "));
            seenNames.add(expr.getName());
          }
        }
      }
    }
  }
);
}
