{
  Set<Thread> underIndicator;
  boolean alreadyUnder;
  boolean addedToPerverse;
synchronized (threadsUnderIndicator) {
    underIndicator=threadsUnderIndicator.get(progress);
    if (underIndicator == null) {
      underIndicator=new SmartHashSet<Thread>();
      threadsUnderIndicator.put(progress,underIndicator);
    }
    alreadyUnder=!underIndicator.add(currentThread);
    addedToPerverse=!(progress instanceof StandardProgressIndicator) && nonStandardIndicators.add(progress);
  }
  try {
    if (progress instanceof WrappedProgressIndicator) {
      registerIndicatorAndRun(((WrappedProgressIndicator)progress).getOriginalProgressIndicator(),currentThread,process);
    }
 else {
      process.run();
    }
  }
  finally {
synchronized (threadsUnderIndicator) {
      boolean removed=alreadyUnder || underIndicator.remove(currentThread);
      if (removed && underIndicator.isEmpty()) {
        threadsUnderIndicator.remove(progress);
      }
      threadsUnderCanceledIndicator.remove(currentThread);
      if (addedToPerverse) {
        nonStandardIndicators.remove(progress);
      }
    }
  }
}
