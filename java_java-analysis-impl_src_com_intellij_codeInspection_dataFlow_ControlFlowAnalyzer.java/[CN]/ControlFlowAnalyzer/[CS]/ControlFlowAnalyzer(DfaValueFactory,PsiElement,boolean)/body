{
  myFactory=valueFactory;
  myCodeFragment=codeFragment;
  myProject=codeFragment.getProject();
  myIgnoreAssertions=ignoreAssertions;
  GlobalSearchScope scope=codeFragment.getResolveScope();
  myRuntimeException=myFactory.createTypeValue(createClassType(scope,JAVA_LANG_RUNTIME_EXCEPTION),Nullness.NOT_NULL);
  myError=myFactory.createTypeValue(createClassType(scope,JAVA_LANG_ERROR),Nullness.NOT_NULL);
  myNpe=createClassType(scope,JAVA_LANG_NULL_POINTER_EXCEPTION);
  myAssertionError=createClassType(scope,JAVA_LANG_ASSERTION_ERROR);
  myString=myFactory.createTypeValue(createClassType(scope,JAVA_LANG_STRING),Nullness.NOT_NULL);
  myExceptionHolders=new FactoryMap<PsiTryStatement,DfaVariableValue>(){
    @Nullable @Override protected DfaVariableValue create(    PsiTryStatement key){
      String text="java.lang.Object $exception" + myExceptionHolders.size() + "$";
      PsiParameter mockVar=JavaPsiFacade.getElementFactory(myProject).createParameterFromText(text,null);
      return myFactory.getVarFactory().createVariableValue(mockVar,false);
    }
  }
;
}
