{
  int nextI=0;
  int curI=-1;
  all:   while (true) {
    boolean backTrack=false;
    if (!visited[nextI]) {
      inLoop[nextI]|=curI != -1 && inLoop[curI];
      visited[nextI]=true;
      path.add(nextI);
    }
 else {
      if (path.contains(nextI)) {
        for (int k=path.size() - 1; k >= 0; k--) {
          int v=path.get(k);
          inLoop[v]=true;
          if (v == nextI)           break;
        }
      }
      backTrack=true;
    }
    int[] next=backTrack ? new int[]{} : next(nextI,myInstructions);
    if (next.length != 0) {
      curI=nextI;
      nextI=next[0];
      continue;
    }
    if (!backTrack) {
      path.remove(path.size() - 1);
    }
    while (true) {
      if (path.isEmpty())       break all;
      int last=path.get(path.size() - 1);
      int[] lastNext=next(last,myInstructions);
      int ni=ArrayUtil.lastIndexOf(lastNext,nextI) + 1;
      curI=nextI=last;
      if (ni != lastNext.length) {
        nextI=lastNext[ni];
        break;
      }
      path.remove(path.size() - 1);
    }
  }
}
