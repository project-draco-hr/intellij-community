{
  final PsiAnnotation contractAnno=findContractAnnotation(method);
  final int paramCount=method.getParameterList().getParametersCount();
  if (contractAnno != null) {
    if (AnnotationUtil.isInferredAnnotation(contractAnno) && PsiUtil.canBeOverriden(method)) {
      return Collections.emptyList();
    }
    return CachedValuesManager.getCachedValue(contractAnno,new CachedValueProvider<List<MethodContract>>(){
      @Nullable @Override public Result<List<MethodContract>> compute(){
        String text=AnnotationUtil.getStringAttributeValue(contractAnno,null);
        if (text != null) {
          try {
            List<MethodContract> applicable=ContainerUtil.filter(MethodContract.parseContract(text),new Condition<MethodContract>(){
              @Override public boolean value(              MethodContract contract){
                return contract.arguments.length == paramCount;
              }
            }
);
            return Result.create(applicable,contractAnno);
          }
 catch (          Exception ignored) {
          }
        }
        return Result.create(Collections.<MethodContract>emptyList(),contractAnno,method);
      }
    }
);
  }
  return Collections.emptyList();
}
