{
  final PsiAnnotation contractAnno=findContractAnnotation(method);
  final int paramCount=method.getParameterList().getParametersCount();
  if (contractAnno != null) {
    return CachedValuesManager.getCachedValue(contractAnno,new CachedValueProvider<List<MethodContract>>(){
      @Nullable @Override public Result<List<MethodContract>> compute(){
        String text=AnnotationUtil.getStringAttributeValue(contractAnno,null);
        if (text != null) {
          try {
            List<MethodContract> applicable=ContainerUtil.filter(MethodContract.parseContract(text),new Condition<MethodContract>(){
              @Override public boolean value(              MethodContract contract){
                return contract.arguments.length == paramCount;
              }
            }
);
            return Result.create(applicable,contractAnno);
          }
 catch (          Exception ignored) {
          }
        }
        return Result.create(Collections.<MethodContract>emptyList(),contractAnno);
      }
    }
);
  }
  @NonNls String methodName=method.getName();
  PsiClass owner=method.getContainingClass();
  if (owner != null) {
    final String className=owner.getQualifiedName();
    if ("java.lang.System".equals(className)) {
      if ("exit".equals(methodName)) {
        return Collections.singletonList(new MethodContract(MethodContract.createConstraintArray(paramCount),ValueConstraint.THROW_EXCEPTION));
      }
    }
 else     if ("junit.framework.Assert".equals(className) || "org.junit.Assert".equals(className) || "junit.framework.TestCase".equals(className)|| "org.testng.Assert".equals(className)|| "org.testng.AssertJUnit".equals(className)) {
      boolean testng=className.startsWith("org.testng.");
      if ("fail".equals(methodName)) {
        return Collections.singletonList(new MethodContract(MethodContract.createConstraintArray(paramCount),ValueConstraint.THROW_EXCEPTION));
      }
      int checkedParam=testng ? 0 : paramCount - 1;
      ValueConstraint[] constraints=MethodContract.createConstraintArray(paramCount);
      if ("assertTrue".equals(methodName)) {
        constraints[checkedParam]=ValueConstraint.FALSE_VALUE;
        return Collections.singletonList(new MethodContract(constraints,ValueConstraint.THROW_EXCEPTION));
      }
      if ("assertFalse".equals(methodName)) {
        constraints[checkedParam]=ValueConstraint.TRUE_VALUE;
        return Collections.singletonList(new MethodContract(constraints,ValueConstraint.THROW_EXCEPTION));
      }
      if ("assertNull".equals(methodName)) {
        constraints[checkedParam]=ValueConstraint.NOT_NULL_VALUE;
        return Collections.singletonList(new MethodContract(constraints,ValueConstraint.THROW_EXCEPTION));
      }
      if ("assertNotNull".equals(methodName)) {
        constraints[checkedParam]=ValueConstraint.NULL_VALUE;
        return Collections.singletonList(new MethodContract(constraints,ValueConstraint.THROW_EXCEPTION));
      }
      return Collections.emptyList();
    }
  }
  return Collections.emptyList();
}
