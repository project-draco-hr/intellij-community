{
  op=substituteBinaryOperation(op,type);
  PsiExpression lExpr=operands[0];
  lExpr.accept(this);
  PsiType lType=lExpr.getType();
  boolean hasAssignment=containsAssignments(lExpr);
  for (int i=1; i < operands.length; i++) {
    PsiExpression rExpr=operands[i];
    PsiType rType=rExpr.getType();
    acceptBinaryRightOperand(op,type,lExpr,lType,rExpr,rType);
    if (hasAssignment || containsAssignments(rExpr)) {
      addInstruction(new PopInstruction());
      addInstruction(new PopInstruction());
      pushUnknown();
      hasAssignment=false;
    }
 else {
      addInstruction(new BinopInstruction(op,expression.isPhysical() ? expression : null,expression.getProject()));
    }
    lExpr=rExpr;
    lType=rType;
  }
}
