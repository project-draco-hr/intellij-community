{
  startElement(statement);
  PsiResourceList resourceList=statement.getResourceList();
  PsiCodeBlock tryBlock=statement.getTryBlock();
  PsiCodeBlock finallyBlock=statement.getFinallyBlock();
  if (finallyBlock != null) {
    myCatchStack.push(new CatchDescriptor(finallyBlock));
  }
  PsiCatchSection[] sections=statement.getCatchSections();
  for (int i=sections.length - 1; i >= 0; i--) {
    PsiCatchSection section=sections[i];
    PsiCodeBlock catchBlock=section.getCatchBlock();
    PsiParameter parameter=section.getParameter();
    if (parameter != null && catchBlock != null) {
      PsiType type=parameter.getType();
      if (type instanceof PsiClassType || type instanceof PsiDisjunctionType) {
        myCatchStack.push(new CatchDescriptor(parameter,catchBlock));
        continue;
      }
    }
    throw new CannotAnalyzeException();
  }
  ControlFlow.ControlFlowOffset endOffset=finallyBlock == null ? getEndOffset(statement) : getStartOffset(finallyBlock);
  if (resourceList != null) {
    resourceList.accept(this);
  }
  if (tryBlock != null) {
    tryBlock.accept(this);
  }
  addInstruction(new GotoInstruction(endOffset));
  for (  PsiCatchSection section : sections) {
    section.accept(this);
    addInstruction(new GotoInstruction(endOffset));
    myCatchStack.pop();
  }
  if (finallyBlock != null) {
    CatchDescriptor finallyDescriptor=myCatchStack.pop();
    finallyBlock.accept(this);
    addInstruction(new PushInstruction(getExceptionHolder(finallyDescriptor),null));
    addInstruction(new PushInstruction(myFactory.getConstFactory().getNull(),null));
    addInstruction(new BinopInstruction(JavaTokenType.EQEQ,null,myProject));
    addInstruction(new ConditionalGotoInstruction(getEndOffset(statement),false,null));
    rethrowException(finallyDescriptor,false);
  }
  finishElement(statement);
}
