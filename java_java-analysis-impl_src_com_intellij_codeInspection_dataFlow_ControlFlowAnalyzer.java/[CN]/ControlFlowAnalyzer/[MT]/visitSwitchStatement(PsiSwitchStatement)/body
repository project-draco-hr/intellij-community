{
  startElement(switchStmt);
  PsiExpression caseExpression=switchStmt.getExpression();
  Set<PsiEnumConstant> enumValues=null;
  if (caseExpression != null) {
    caseExpression.accept(this);
    generateBoxingUnboxingInstructionFor(caseExpression,PsiType.INT);
    final PsiClass psiClass=PsiUtil.resolveClassInType(caseExpression.getType());
    if (psiClass != null) {
      addInstruction(new FieldReferenceInstruction(caseExpression,"switch statement expression"));
      if (psiClass.isEnum()) {
        enumValues=new HashSet<PsiEnumConstant>();
        for (        PsiField f : psiClass.getFields()) {
          if (f instanceof PsiEnumConstant) {
            enumValues.add((PsiEnumConstant)f);
          }
        }
      }
    }
 else {
      addInstruction(new PopInstruction());
    }
  }
  PsiCodeBlock body=switchStmt.getBody();
  if (body != null) {
    PsiStatement[] statements=body.getStatements();
    PsiSwitchLabelStatement defaultLabel=null;
    for (    PsiStatement statement : statements) {
      if (statement instanceof PsiSwitchLabelStatement) {
        PsiSwitchLabelStatement psiLabelStatement=(PsiSwitchLabelStatement)statement;
        if (psiLabelStatement.isDefaultCase()) {
          defaultLabel=psiLabelStatement;
        }
 else {
          try {
            ControlFlow.ControlFlowOffset offset=getStartOffset(statement);
            PsiExpression caseValue=psiLabelStatement.getCaseValue();
            if (enumValues != null && caseValue instanceof PsiReferenceExpression) {
              enumValues.remove(((PsiReferenceExpression)caseValue).resolve());
            }
            boolean alwaysTrue=enumValues != null && enumValues.isEmpty();
            if (alwaysTrue) {
              addInstruction(new PushInstruction(myFactory.getConstFactory().getTrue(),null));
            }
 else             if (caseValue != null && caseExpression instanceof PsiReferenceExpression && ((PsiReferenceExpression)caseExpression).getQualifierExpression() == null) {
              addInstruction(new PushInstruction(myFactory.createValue(caseExpression),caseExpression));
              caseValue.accept(this);
              addInstruction(new BinopInstruction(JavaTokenType.EQEQ,null,myProject));
            }
 else {
              pushUnknown();
            }
            addInstruction(new ConditionalGotoInstruction(offset,false,statement));
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
      }
    }
    if (enumValues == null || !enumValues.isEmpty()) {
      ControlFlow.ControlFlowOffset offset=defaultLabel != null ? getStartOffset(defaultLabel) : getEndOffset(body);
      addInstruction(new GotoInstruction(offset));
    }
    body.accept(this);
  }
  finishElement(switchStmt);
}
