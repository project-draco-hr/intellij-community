{
  if (PsiTreeUtil.findChildOfType(codeFragment,OuterLanguageElement.class) != null) {
    return null;
  }
  myIgnoreAssertions=ignoreAssertions;
  final PsiManager manager=codeFragment.getManager();
  GlobalSearchScope scope=codeFragment.getResolveScope();
  myRuntimeException=myFactory.createTypeValue(createClassType(manager,scope,JAVA_LANG_RUNTIME_EXCEPTION),Nullness.NOT_NULL);
  myError=myFactory.createTypeValue(createClassType(manager,scope,JAVA_LANG_ERROR),Nullness.NOT_NULL);
  myNpe=createClassType(manager,scope,JAVA_LANG_NULL_POINTER_EXCEPTION);
  myAssertionError=createClassType(manager,scope,JAVA_LANG_ASSERTION_ERROR);
  myString=myFactory.createTypeValue(createClassType(manager,scope,JAVA_LANG_STRING),Nullness.NOT_NULL);
  myExceptionHolders=new FactoryMap<PsiTryStatement,DfaVariableValue>(){
    @Nullable @Override protected DfaVariableValue create(    PsiTryStatement key){
      String text="java.lang.Object $exception" + myExceptionHolders.size() + "$";
      PsiParameter mockVar=JavaPsiFacade.getElementFactory(manager.getProject()).createParameterFromText(text,null);
      return myFactory.getVarFactory().createVariableValue(mockVar,false);
    }
  }
;
  myCatchStack=new Stack<CatchDescriptor>();
  myCurrentFlow=new ControlFlow(myFactory);
  try {
    codeFragment.accept(this);
  }
 catch (  CannotAnalyzeException e) {
    return null;
  }
  PsiElement parent=codeFragment.getParent();
  if (parent instanceof PsiLambdaExpression && codeFragment instanceof PsiExpression) {
    generateBoxingUnboxingInstructionFor((PsiExpression)codeFragment,LambdaUtil.getFunctionalInterfaceReturnType((PsiLambdaExpression)parent));
    addInstruction(new CheckReturnValueInstruction(codeFragment));
  }
  addInstruction(new ReturnInstruction(false,null));
  if (Registry.is("idea.dfa.live.variables.analysis")) {
    new LiveVariablesAnalyzer(myCurrentFlow,myFactory).flushDeadVariablesOnStatementFinish();
  }
  return myCurrentFlow;
}
