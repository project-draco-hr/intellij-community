{
  startElement(expression);
  PsiReferenceExpression methodExpression=expression.getMethodExpression();
  PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
  if (qualifierExpression != null) {
    qualifierExpression.accept(this);
  }
 else {
    pushUnknown();
  }
  PsiExpression[] expressions=expression.getArgumentList().getExpressions();
  PsiElement method=methodExpression.resolve();
  PsiParameter[] parameters=method instanceof PsiMethod ? ((PsiMethod)method).getParameterList().getParameters() : null;
  boolean isEqualsCall=expressions.length == 1 && method instanceof PsiMethod && "equals".equals(((PsiMethod)method).getName()) && parameters.length == 1 && parameters[0].getType().equalsToText(JAVA_LANG_OBJECT) && PsiType.BOOLEAN.equals(((PsiMethod)method).getReturnType());
  for (int i=0; i < expressions.length; i++) {
    PsiExpression paramExpr=expressions[i];
    paramExpr.accept(this);
    if (parameters != null && i < parameters.length) {
      generateBoxingUnboxingInstructionFor(paramExpr,parameters[i].getType());
    }
    if (i == 0 && isEqualsCall) {
      addInstruction(new SwapInstruction());
      addInstruction(new DupInstruction(2,1));
      addInstruction(new PopInstruction());
    }
  }
  addConditionalRuntimeThrow();
  List<MethodContract> contracts=method instanceof PsiMethod ? getMethodCallContracts((PsiMethod)method,expression) : Collections.<MethodContract>emptyList();
  addInstruction(new MethodCallInstruction(expression,myFactory.createValue(expression),contracts));
  if (!contracts.isEmpty()) {
    addInstruction(new DupInstruction());
    addInstruction(new PushInstruction(myFactory.getConstFactory().getContractFail(),null));
    addInstruction(new BinopInstruction(JavaTokenType.EQEQ,null,myProject));
    ConditionalGotoInstruction ifNotFail=new ConditionalGotoInstruction(null,true,null);
    addInstruction(ifNotFail);
    returnCheckingFinally(true,expression);
    ifNotFail.setOffset(myCurrentFlow.getInstructionCount());
  }
  if (!myCatchStack.isEmpty()) {
    addMethodThrows(expression.resolveMethod(),expression);
  }
  if (isEqualsCall) {
    ConditionalGotoInstruction ifFalse=addInstruction(new ConditionalGotoInstruction(null,true,null));
    addInstruction(new ApplyNotNullInstruction(expression));
    addInstruction(new PushInstruction(myFactory.getConstFactory().getTrue(),null));
    addInstruction(new GotoInstruction(getEndOffset(expression)));
    ifFalse.setOffset(myCurrentFlow.getInstructionCount());
    addInstruction(new PopInstruction());
    addInstruction(new PushInstruction(myFactory.getConstFactory().getFalse(),null));
  }
  finishElement(expression);
}
