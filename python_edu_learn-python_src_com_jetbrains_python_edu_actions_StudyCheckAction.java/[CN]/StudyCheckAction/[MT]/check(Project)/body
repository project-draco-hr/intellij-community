{
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      CommandProcessor.getInstance().runUndoTransparentAction(new Runnable(){
        @Override public void run(){
          final StudyEditor selectedEditor=StudyEditor.getSelectedStudyEditor(project);
          if (selectedEditor == null)           return;
          final StudyState studyState=new StudyState(selectedEditor);
          if (!studyState.isValid()) {
            LOG.error("StudyCheckAction was invokes outside study editor");
            return;
          }
          final IdeFrame frame=((WindowManagerEx)WindowManager.getInstance()).findFrameFor(project);
          final StatusBarEx statusBar=frame == null ? null : (StatusBarEx)frame.getStatusBar();
          if (statusBar != null) {
            final List<Pair<TaskInfo,ProgressIndicator>> processes=statusBar.getBackgroundProcesses();
            if (!processes.isEmpty())             return;
          }
          final Task task=studyState.getTask();
          final VirtualFile taskDir=studyState.getTaskDir();
          flushWindows(task,taskDir);
          Sdk sdk=StudyUtils.findPythonSdk(project);
          if (sdk == null) {
            createNoPythonInterpreterPopUp(project);
            return;
          }
          final StudyRunAction runAction=(StudyRunAction)ActionManager.getInstance().getAction(StudyRunAction.ACTION_ID);
          if (runAction == null) {
            return;
          }
          runAction.run(project,sdk);
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              IdeFocusManager.getInstance(project).requestFocus(studyState.getEditor().getComponent(),true);
            }
          }
);
          final StudyTestRunner testRunner=new StudyTestRunner(task,taskDir);
          Process testProcess=null;
          try {
            final VirtualFile executablePath=getTaskVirtualFile(studyState,task,taskDir);
            testProcess=testRunner.createCheckProcess(project,executablePath.getPath());
          }
 catch (          ExecutionException e) {
            LOG.error(e);
          }
          if (testProcess == null) {
            return;
          }
          selectedEditor.getCheckButton().setEnabled(false);
          ProgressManager.getInstance().run(getCheckTask(studyState,testRunner,testProcess,project,selectedEditor));
        }
      }
);
    }
    private VirtualFile getTaskVirtualFile(    @NotNull final StudyState studyState,    @NotNull final Task task,    @NotNull final VirtualFile taskDir){
      VirtualFile taskVirtualFile=studyState.getVirtualFile();
      for (      Map.Entry<String,TaskFile> entry : task.getTaskFiles().entrySet()) {
        String name=entry.getKey();
        TaskFile taskFile=entry.getValue();
        VirtualFile virtualFile=taskDir.findChild(name);
        if (virtualFile != null) {
          if (!taskFile.getTaskWindows().isEmpty()) {
            taskVirtualFile=virtualFile;
          }
        }
      }
      return taskVirtualFile;
    }
  }
);
}
