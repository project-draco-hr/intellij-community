{
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      CommandProcessor.getInstance().runUndoTransparentAction(new Runnable(){
        @Override public void run(){
          final StudyEditor selectedEditor=StudyEditor.getSelectedStudyEditor(project);
          final StudyState studyState=new StudyState(selectedEditor);
          if (!studyState.isValid()) {
            LOG.error("StudyCheckAction was invokes outside study editor");
            return;
          }
          Task task=studyState.getTask();
          StudyStatus oldStatus=task.getStatus();
          Map<String,TaskFile> taskFiles=task.getTaskFiles();
          VirtualFile taskDir=studyState.getTaskDir();
          flushWindows(task,taskDir);
          StudyRunAction runAction=(StudyRunAction)ActionManager.getInstance().getAction(StudyRunAction.ACTION_ID);
          if (runAction == null) {
            return;
          }
          Sdk sdk=StudyUtils.findPythonSdk(project);
          if (sdk == null) {
            createNoPythonInterpreterPopUp(project);
            return;
          }
          runAction.run(project,sdk);
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              IdeFocusManager.getInstance(project).requestFocus(studyState.getEditor().getComponent(),true);
            }
          }
);
          final StudyTestRunner testRunner=new StudyTestRunner(task,taskDir);
          Process testProcess=null;
          try {
            testProcess=testRunner.launchTests(project,studyState.getVirtualFile().getPath());
          }
 catch (          ExecutionException e) {
            LOG.error(e);
          }
          if (testProcess == null) {
            return;
          }
          String failedMessage=testRunner.getPassedTests(testProcess);
          if (failedMessage != null && failedMessage.equals(StudyTestRunner.TEST_OK)) {
            task.setStatus(StudyStatus.Solved,oldStatus);
            createTestResultPopUp("Congratulations!",MessageType.INFO.getPopupBackground(),project);
          }
 else {
            task.setStatus(StudyStatus.Failed,oldStatus);
            for (            Map.Entry<String,TaskFile> entry : taskFiles.entrySet()) {
              String name=entry.getKey();
              TaskFile taskFile=entry.getValue();
              if (taskFile.getTaskWindows().size() < 2) {
                taskFile.setStatus(StudyStatus.Failed,StudyStatus.Unchecked);
                continue;
              }
              runSmartTestProcess(taskDir,testRunner,name,taskFile,project);
            }
            createTestResultPopUp(failedMessage,MessageType.ERROR.getPopupBackground(),project);
            navigateToFailedTaskWindow(studyState,task,taskDir,project);
          }
          StudyUtils.updateStudyToolWindow(project);
          drawAllTaskWindows(project,task,taskDir);
          ProjectView.getInstance(project).refresh();
          deleteWindowDescriptions(task,taskDir);
        }
      }
);
    }
  }
);
}
