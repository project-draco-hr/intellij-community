{
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      CommandProcessor.getInstance().runUndoTransparentAction(new Runnable(){
        @Override public void run(){
          final Editor selectedEditor=StudyEditor.getSelectedEditor(project);
          if (selectedEditor != null) {
            final FileDocumentManager fileDocumentManager=FileDocumentManager.getInstance();
            final VirtualFile openedFile=fileDocumentManager.getFile(selectedEditor.getDocument());
            if (openedFile != null) {
              StudyTaskManager taskManager=StudyTaskManager.getInstance(project);
              final TaskFile selectedTaskFile=taskManager.getTaskFile(openedFile);
              List<VirtualFile> filesToDelete=new ArrayList<VirtualFile>();
              if (selectedTaskFile != null) {
                final VirtualFile taskDir=openedFile.getParent();
                Task currentTask=selectedTaskFile.getTask();
                StudyStatus oldStatus=currentTask.getStatus();
                Map<String,TaskFile> taskFiles=selectedTaskFile.getTask().getTaskFiles();
                for (                Map.Entry<String,TaskFile> entry : taskFiles.entrySet()) {
                  String name=entry.getKey();
                  TaskFile taskFile=entry.getValue();
                  VirtualFile virtualFile=taskDir.findChild(name);
                  if (virtualFile == null) {
                    continue;
                  }
                  VirtualFile windowFile=StudyUtils.flushWindows(FileDocumentManager.getInstance().getDocument(virtualFile),taskFile,virtualFile);
                  filesToDelete.add(windowFile);
                  FileDocumentManager.getInstance().saveAllDocuments();
                }
                StudyRunAction runAction=(StudyRunAction)ActionManager.getInstance().getAction(StudyRunAction.ACTION_ID);
                if (runAction != null && currentTask.getTaskFiles().size() == 1) {
                  runAction.run(project);
                }
                final StudyTestRunner testRunner=new StudyTestRunner(currentTask,taskDir);
                Process testProcess=null;
                try {
                  testProcess=testRunner.launchTests(project,openedFile.getPath());
                }
 catch (                ExecutionException e) {
                  LOG.error(e);
                }
                if (testProcess != null) {
                  String failedMessage=testRunner.getPassedTests(testProcess);
                  if (failedMessage.equals(StudyTestRunner.TEST_OK)) {
                    currentTask.setStatus(StudyStatus.Solved,oldStatus);
                    StudyUtils.updateStudyToolWindow(project);
                    selectedTaskFile.drawAllWindows(selectedEditor);
                    ProjectView.getInstance(project).refresh();
                    for (                    VirtualFile file : filesToDelete) {
                      try {
                        file.delete(this);
                      }
 catch (                      IOException e) {
                        LOG.error(e);
                      }
                    }
                    createTestResultPopUp("Congratulations!",MessageType.INFO.getPopupBackground(),project);
                    return;
                  }
                  currentTask.setStatus(StudyStatus.Failed,oldStatus);
                  for (                  Map.Entry<String,TaskFile> entry : taskFiles.entrySet()) {
                    String name=entry.getKey();
                    TaskFile taskFile=entry.getValue();
                    TaskFile answerTaskFile=new TaskFile();
                    VirtualFile virtualFile=taskDir.findChild(name);
                    if (virtualFile == null) {
                      continue;
                    }
                    VirtualFile answerFile=getCopyWithAnswers(taskDir,virtualFile,taskFile,answerTaskFile);
                    for (                    TaskWindow taskWindow : answerTaskFile.getTaskWindows()) {
                      Document document=FileDocumentManager.getInstance().getDocument(virtualFile);
                      if (document == null) {
                        continue;
                      }
                      if (!taskWindow.isValid(document)) {
                        continue;
                      }
                      check(project,taskWindow,answerFile,answerTaskFile,taskFile,document,testRunner,virtualFile);
                    }
                    FileEditor fileEditor=FileEditorManager.getInstance(project).getSelectedEditor(virtualFile);
                    Editor editor=null;
                    if (fileEditor instanceof StudyEditor) {
                      StudyEditor studyEditor=(StudyEditor)fileEditor;
                      editor=studyEditor.getEditor();
                    }
                    if (editor != null) {
                      taskFile.drawAllWindows(editor);
                      StudyUtils.synchronize();
                    }
                    try {
                      answerFile.delete(this);
                    }
 catch (                    IOException e) {
                      LOG.error(e);
                    }
                  }
                  for (                  VirtualFile file : filesToDelete) {
                    try {
                      file.delete(this);
                    }
 catch (                    IOException e) {
                      LOG.error(e);
                    }
                  }
                  StudyUtils.updateStudyToolWindow(project);
                  createTestResultPopUp(failedMessage,MessageType.ERROR.getPopupBackground(),project);
                }
              }
            }
          }
        }
      }
);
    }
  }
);
}
