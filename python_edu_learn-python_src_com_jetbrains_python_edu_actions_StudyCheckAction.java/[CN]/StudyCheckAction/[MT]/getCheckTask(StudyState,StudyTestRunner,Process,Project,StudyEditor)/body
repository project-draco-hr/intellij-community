{
  final Task task=studyState.getTask();
  final VirtualFile taskDir=studyState.getTaskDir();
  return new com.intellij.openapi.progress.Task.Backgroundable(project,"Checking task",true){
    @Override public void onSuccess(){
      StudyUtils.updateStudyToolWindow(project);
      drawAllTaskWindows(project,task,taskDir);
      ProjectView.getInstance(project).refresh();
      deleteWindowDescriptions(task,taskDir);
      selectedEditor.getCheckButton().setEnabled(true);
    }
    @Override public void onCancel(){
      deleteWindowDescriptions(task,taskDir);
      selectedEditor.getCheckButton().setEnabled(true);
    }
    @Override public void run(    @NotNull ProgressIndicator indicator){
      final StudyStatus oldStatus=task.getStatus();
      final Map<String,TaskFile> taskFiles=task.getTaskFiles();
      final CapturingProcessHandler handler=new CapturingProcessHandler(testProcess);
      final ProcessOutput output=handler.runProcessWithProgressIndicator(indicator);
      if (indicator.isCanceled()) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            showTestResultPopUp("Tests check cancelled.",MessageType.WARNING.getPopupBackground(),project);
          }
        }
);
        return;
      }
      final String failedMessage=testRunner.getTestsOutput(output);
      if (StudyTestRunner.TEST_OK.equals(failedMessage)) {
        task.setStatus(StudyStatus.Solved,oldStatus);
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            showTestResultPopUp("Congratulations!",MessageType.INFO.getPopupBackground(),project);
          }
        }
);
      }
 else {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            if (taskDir == null)             return;
            task.setStatus(StudyStatus.Failed,oldStatus);
            for (            Map.Entry<String,TaskFile> entry : taskFiles.entrySet()) {
              final String name=entry.getKey();
              final TaskFile taskFile=entry.getValue();
              if (taskFile.getTaskWindows().size() < 2) {
                taskFile.setStatus(StudyStatus.Failed,StudyStatus.Unchecked);
                continue;
              }
              CommandProcessor.getInstance().runUndoTransparentAction(new Runnable(){
                @Override public void run(){
                  ApplicationManager.getApplication().runWriteAction(new Runnable(){
                    @Override public void run(){
                      runSmartTestProcess(taskDir,testRunner,name,taskFile,project);
                    }
                  }
);
                }
              }
);
            }
            showTestResultPopUp(failedMessage,MessageType.ERROR.getPopupBackground(),project);
            navigateToFailedTaskWindow(studyState,task,taskDir,project);
          }
        }
);
      }
    }
  }
;
}
