{
  List<Pair<TextRange,String>> result=literal.getUserData(STRING_FRAGMENTS);
  if (result == null) {
    result=new ArrayList<>();
    final String text=literal.getText();
    final int length=text.length();
    int pos=1, unescapedSequenceStart=1;
    while (pos < length) {
      if (text.charAt(pos) == '\\') {
        if (unescapedSequenceStart != pos) {
          result.add(Pair.create(new TextRange(unescapedSequenceStart,pos),text.substring(unescapedSequenceStart,pos)));
        }
        if (pos == length - 1) {
          result.add(Pair.create(new TextRange(pos,pos + 1),"\\"));
          break;
        }
        final char next=text.charAt(pos + 1);
switch (next) {
case '"':
case '\\':
case '/':
case 'b':
case 'f':
case 'n':
case 'r':
case 't':
          final int idx=ourEscapesTable.indexOf(next);
        result.add(Pair.create(new TextRange(pos,pos + 2),ourEscapesTable.substring(idx + 1,idx + 2)));
      pos+=2;
    break;
case 'u':
  int i=pos + 2;
for (; i < pos + 6; i++) {
  if (i == length || !StringUtil.isHexDigit(text.charAt(i))) {
    break;
  }
}
result.add(Pair.create(new TextRange(pos,i),text.substring(pos,i)));
pos=i;
break;
default :
result.add(Pair.create(new TextRange(pos,pos + 2),text.substring(pos,pos + 2)));
pos+=2;
}
unescapedSequenceStart=pos;
}
 else {
pos++;
}
}
final int contentEnd=text.charAt(0) == text.charAt(length - 1) ? length - 1 : length;
if (unescapedSequenceStart < contentEnd) {
result.add(Pair.create(new TextRange(unescapedSequenceStart,length),text.substring(unescapedSequenceStart,contentEnd)));
}
result=Collections.unmodifiableList(result);
literal.putUserData(STRING_FRAGMENTS,result);
}
return result;
}
