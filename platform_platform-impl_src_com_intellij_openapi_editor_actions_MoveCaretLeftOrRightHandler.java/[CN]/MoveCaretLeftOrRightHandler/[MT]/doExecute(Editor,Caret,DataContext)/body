{
  final SelectionModel selectionModel=editor.getSelectionModel();
  final CaretModel caretModel=editor.getCaretModel();
  ScrollingModel scrollingModel=editor.getScrollingModel();
  if (selectionModel.hasSelection() && (!(editor instanceof EditorEx) || !((EditorEx)editor).isStickySelection())) {
    if (editor.getIndentsModel().getCaretIndentGuide() != null) {
      selectionModel.removeSelection();
    }
 else {
      int start=selectionModel.getSelectionStart();
      int end=selectionModel.getSelectionEnd();
      int caretOffset=caretModel.getOffset();
      boolean gotoSelectionEnd=myDirection == Direction.RIGHT ^ caret.isAtRtlLocation();
      VisualPosition targetPosition=gotoSelectionEnd ? selectionModel.getSelectionEndPosition() : selectionModel.getSelectionStartPosition();
      if (start <= caretOffset && end >= caretOffset) {
        selectionModel.removeSelection();
        if (caretModel.supportsMultipleCarets() && editor.isColumnMode() && targetPosition != null) {
          caretModel.moveToVisualPosition(targetPosition);
        }
 else {
          caretModel.moveToOffset(gotoSelectionEnd ? end : start);
        }
        if (caret == editor.getCaretModel().getPrimaryCaret()) {
          scrollingModel.scrollToCaret(ScrollType.RELATIVE);
        }
        return;
      }
    }
  }
  VisualPosition currentPosition=caret.getVisualPosition();
  if (caret.isAtDirectionBoundary() && (myDirection == Direction.RIGHT ^ currentPosition.leansRight)) {
    caret.moveToVisualPosition(currentPosition.leanRight(!currentPosition.leansRight));
  }
 else {
    final boolean scrollToCaret=(!(editor instanceof EditorImpl) || ((EditorImpl)editor).isScrollToCaret()) && caret == editor.getCaretModel().getPrimaryCaret();
    caretModel.moveCaretRelatively(myDirection == Direction.RIGHT ? 1 : -1,0,false,false,scrollToCaret);
  }
}
