{
  ArrayValueProvider valueProvider;
  if (node.getValuePresentation() != null && node.getValuePresentation().getType() != null && node.getValuePresentation().getType().equals("ndarray")) {
    valueProvider=new NumpyArrayValueProvider();
    int[] shape=((NumpyArrayValueProvider)valueProvider).getShape(node);
    final Object[][] data=valueProvider.parseValues(evaluateFullValue(node));
    double min=Double.MAX_VALUE;
    double max=Double.MIN_VALUE;
    if (data.length > 0) {
      try {
        for (int i=0; i < data.length; i++) {
          for (int j=0; j < data[0].length; j++) {
            double d=Double.parseDouble(data[i][j].toString());
            min=min > d ? d : min;
            max=max < d ? d : max;
          }
        }
      }
 catch (      NumberFormatException e) {
        min=0;
        max=0;
      }
    }
 else {
      min=0;
      max=0;
    }
    DefaultTableModel model=new DefaultTableModel(data,range(0,data[0].length - 1));
    myTable.setModel(model);
    myTable.setDefaultEditor(myTable.getColumnClass(0),new MyTableCellEditor(myProject));
    myTable.setDefaultRenderer(myTable.getColumnClass(0),new MyTableCellRenderer(min,max));
  }
}
