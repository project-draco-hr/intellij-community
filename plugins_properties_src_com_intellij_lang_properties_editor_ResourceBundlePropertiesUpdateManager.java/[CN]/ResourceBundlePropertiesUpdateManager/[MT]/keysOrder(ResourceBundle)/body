{
  final boolean[] isEdgesProperlyDirection=new boolean[]{true};
  final GraphGenerator<String> generator=GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<String>(){
    @Override public Collection<String> getNodes(){
      final Set<String> nodes=new LinkedHashSet<String>();
      for (      PropertiesFile propertiesFile : resourceBundle.getPropertiesFiles()) {
        for (        IProperty property : propertiesFile.getProperties()) {
          final String key=property.getKey();
          if (key != null) {
            nodes.add(key);
          }
        }
      }
      return nodes;
    }
    @Override public Iterator<String> getIn(    String n){
      final Collection<String> siblings=new LinkedHashSet<String>();
      for (      PropertiesFile propertiesFile : resourceBundle.getPropertiesFiles()) {
        for (        IProperty property : propertiesFile.findPropertiesByKey(n)) {
          PsiElement sibling=property.getPsiElement().getNextSibling();
          while (sibling instanceof PsiWhiteSpace || sibling instanceof PsiComment) {
            sibling=sibling.getNextSibling();
          }
          if (sibling instanceof IProperty) {
            final String key=((IProperty)sibling).getKey();
            if (key != null) {
              if (isEdgesProperlyDirection[0] && n.compareTo(key) > 0) {
                isEdgesProperlyDirection[0]=false;
              }
              siblings.add(key);
            }
          }
        }
      }
      return siblings.iterator();
    }
  }
));
  DFSTBuilder<String> dfstBuilder=new DFSTBuilder<String>(generator);
  final boolean acyclic=dfstBuilder.isAcyclic();
  if (acyclic) {
    if (isEdgesProperlyDirection[0]) {
      final List<String> sortedNodes=new ArrayList<String>(generator.getNodes());
      Collections.sort(sortedNodes);
      return Pair.create(sortedNodes,true);
    }
 else {
      final List<String> dfsNodes=dfstBuilder.getSortedNodes();
      Collections.reverse(dfsNodes);
      return Pair.create(dfsNodes,false);
    }
  }
 else {
    return null;
  }
}
