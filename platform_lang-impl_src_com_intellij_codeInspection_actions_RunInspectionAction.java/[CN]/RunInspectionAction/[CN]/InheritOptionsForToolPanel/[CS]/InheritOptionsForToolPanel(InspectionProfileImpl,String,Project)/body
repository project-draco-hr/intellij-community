{
  myProfile2ModifiedWrapper=new FactoryMap<InspectionProfile,Pair<InspectionToolWrapper,JComponent>>(){
    @Nullable @Override protected Pair<InspectionToolWrapper,JComponent> create(    InspectionProfile profile){
      InspectionToolWrapper tool=profile.getInspectionTool(toolShortName,project);
      LOGGER.assertTrue(tool != null);
      final Element options=new Element("copy");
      tool.getTool().writeSettings(options);
      tool=tool.createCopy();
      try {
        tool.getTool().readSettings(options);
      }
 catch (      InvalidDataException e) {
        throw new RuntimeException(e);
      }
      return Pair.create(tool,tool.getTool().createOptionsPanel());
    }
  }
;
  JPanel settingsAnchor=new JPanel(new BorderLayout());
  myProfilesComboBox=new ProfilesComboBox(){
    @Override protected void onProfileChosen(    InspectionProfileImpl inspectionProfile){
      settingsAnchor.removeAll();
      settingsAnchor.add(myProfile2ModifiedWrapper.get(inspectionProfile).getSecond(),BorderLayout.CENTER);
      settingsAnchor.invalidate();
      settingsAnchor.validate();
      settingsAnchor.repaint();
    }
    @Override protected boolean isProjectLevel(    InspectionProfileImpl p){
      return p.isProjectLevel();
    }
    @NotNull @Override protected String getProfileName(    InspectionProfileImpl p){
      return p.getName();
    }
  }
;
  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));
  add(new TitledSeparator(IdeBundle.message("goto.inspection.action.choose.inherit.settings.from")));
  add(LabeledComponent.create(myProfilesComboBox,"Profile:",BorderLayout.WEST));
  add(Box.createVerticalStrut(JBUI.scale(10)));
  add(settingsAnchor);
  final List<Profile> profiles=new ArrayList<>();
  profiles.addAll(InspectionProfileManager.getInstance().getProfiles());
  profiles.addAll(InspectionProjectProfileManager.getInstance(project).getProfiles());
  myProfilesComboBox.reset(profiles);
  myProfilesComboBox.selectProfile(initial);
}
