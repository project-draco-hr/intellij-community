{
  myPlace.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      visitElement(expression);
    }
    @Override public void visitThrowStatement(    PsiThrowStatement statement){
      super.visitThrowStatement(statement);
      List<PsiClassType> actualTypes=ExceptionUtil.getUnhandledExceptions(statement,myPlace);
      for (      PsiClassType actualType : actualTypes) {
        if (actualType != null && type.isAssignableFrom(actualType) && myTypeFilter.value(actualType)) {
          PsiExpression psiExpression=statement.getException();
          if (psiExpression instanceof PsiReferenceExpression) {
            addOccurrence(psiExpression);
          }
 else           if (psiExpression instanceof PsiNewExpression) {
            PsiJavaCodeReferenceElement ref=((PsiNewExpression)psiExpression).getClassReference();
            if (ref != null) {
              addOccurrence(ref);
            }
          }
 else {
            PsiExpression exception=statement.getException();
            if (exception != null) {
              addOccurrence(exception);
            }
          }
        }
      }
    }
    @Override public void visitMethodCallExpression(    PsiMethodCallExpression expression){
      super.visitMethodCallExpression(expression);
      PsiReference reference=expression.getMethodExpression().getReference();
      if (reference != null) {
        List<PsiClassType> exceptionTypes=ExceptionUtil.getUnhandledExceptions(expression,myPlace);
        for (        final PsiClassType actualType : exceptionTypes) {
          if (type.isAssignableFrom(actualType) && myTypeFilter.value(actualType)) {
            addOccurrence(expression.getMethodExpression());
            break;
          }
        }
      }
    }
    @Override public void visitNewExpression(    PsiNewExpression expression){
      super.visitNewExpression(expression);
      PsiJavaCodeReferenceElement classReference=expression.getClassOrAnonymousClassReference();
      if (classReference != null) {
        List<PsiClassType> exceptionTypes=ExceptionUtil.getUnhandledExceptions(expression,myPlace);
        for (        PsiClassType actualType : exceptionTypes) {
          if (type.isAssignableFrom(actualType) && myTypeFilter.value(actualType)) {
            addOccurrence(classReference);
            break;
          }
        }
      }
    }
  }
);
}
