{
  PsiClass originalClass=data.getOriginalClass();
  PsiMethod method=data.getMethod();
  Set<PsiMethod> methodsToFind=data.getMethodsToFind();
  PsiMethod methodToFind=data.getMethodToFind();
  PsiClassType originalType=data.getOriginalType();
  Map<PsiMember,NodeDescriptor> methodToDescriptorMap=data.getResultMap();
  Project myProject=data.getProject();
  if (reference instanceof PsiReferenceExpression) {
    final PsiExpression qualifier=((PsiReferenceExpression)reference).getQualifierExpression();
    if (qualifier instanceof PsiSuperExpression) {
      final PsiClass superClass=PsiUtil.resolveClassInType(qualifier.getType());
      if (superClass == null || originalClass.isInheritor(superClass,true)) {
        return true;
      }
    }
    if (qualifier != null && !methodToFind.hasModifierProperty(PsiModifier.STATIC)) {
      final PsiType qualifierType=qualifier.getType();
      if (qualifierType instanceof PsiClassType && !TypeConversionUtil.isAssignable(qualifierType,originalType) && methodToFind != method) {
        final PsiClass psiClass=((PsiClassType)qualifierType).resolve();
        if (psiClass != null) {
          final PsiMethod callee=psiClass.findMethodBySignature(methodToFind,true);
          if (callee != null && !methodsToFind.contains(callee)) {
            return true;
          }
        }
      }
    }
  }
 else {
    if (!(reference instanceof PsiElement)) {
      return true;
    }
    final PsiElement parent=((PsiElement)reference).getParent();
    if (parent instanceof PsiNewExpression) {
      if (((PsiNewExpression)parent).getClassReference() != reference) {
        return true;
      }
    }
 else     if (parent instanceof PsiAnonymousClass) {
      if (((PsiAnonymousClass)parent).getBaseClassReference() != reference) {
        return true;
      }
    }
 else     if (!(reference instanceof LightMemberReference)) {
      return true;
    }
  }
  final PsiElement element=reference.getElement();
  final PsiMember key=CallHierarchyNodeDescriptor.getEnclosingElement(element);
synchronized (methodToDescriptorMap) {
    CallHierarchyNodeDescriptor d=(CallHierarchyNodeDescriptor)methodToDescriptorMap.get(key);
    if (d == null) {
      d=new CallHierarchyNodeDescriptor(myProject,(CallHierarchyNodeDescriptor)data.getNodeDescriptor(),element,false,true);
      methodToDescriptorMap.put(key,d);
    }
 else     if (!d.hasReference(reference)) {
      d.incrementUsageCount();
    }
    d.addReference(reference);
  }
  return false;
}
