{
  if (queried)   return;
  final String methodName=expression.getReferenceName();
  if (!isQueryMethodName(methodName)) {
    final PsiElement target=expression.resolve();
    if (!(target instanceof PsiMethod)) {
      return;
    }
    final PsiMethod method=(PsiMethod)target;
    final PsiType returnType=method.getReturnType();
    if (PsiType.VOID.equals(returnType)) {
      return;
    }
    final PsiType expectedType=ExpectedTypeUtils.findExpectedType(expression,false);
    if (!(expectedType instanceof PsiClassType)) {
      return;
    }
    final PsiClassType classType=(PsiClassType)expectedType;
    final PsiClass aClass=classType.resolve();
    if (aClass == null || LambdaHighlightingUtil.checkInterfaceFunctional(aClass) != null) {
      return;
    }
    final List<HierarchicalMethodSignature> candidates=LambdaUtil.findFunctionCandidates(aClass);
    if (candidates == null || candidates.size() != 1) {
      return;
    }
    final HierarchicalMethodSignature signature=candidates.get(0);
    final PsiMethod functionalMethod=signature.getMethod();
    if (PsiType.VOID.equals(functionalMethod.getReturnType())) {
      return;
    }
  }
  checkExpression(expression.getQualifierExpression());
}
