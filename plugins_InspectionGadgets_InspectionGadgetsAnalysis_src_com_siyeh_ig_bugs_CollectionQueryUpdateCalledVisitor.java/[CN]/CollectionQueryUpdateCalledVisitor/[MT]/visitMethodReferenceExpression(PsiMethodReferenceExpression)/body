{
  super.visitMethodReferenceExpression(expression);
  if (myQueriedUpdated) {
    return;
  }
  final String methodName=expression.getReferenceName();
  if (!isQueryUpdateMethodName(methodName)) {
    if (myCheckForQuery) {
      final PsiElement target=expression.resolve();
      if (!(target instanceof PsiMethod)) {
        return;
      }
      final PsiMethod method=(PsiMethod)target;
      final PsiType returnType=method.getReturnType();
      if (PsiType.VOID.equals(returnType)) {
        return;
      }
      final PsiType expectedType=ExpectedTypeUtils.findExpectedType(expression,false);
      if (!(expectedType instanceof PsiClassType)) {
        return;
      }
      final PsiClassType classType=(PsiClassType)expectedType;
      final PsiClass aClass=classType.resolve();
      if (aClass == null || LambdaHighlightingUtil.checkInterfaceFunctional(aClass) != null) {
        return;
      }
      PsiMethod functionalMethod=LambdaUtil.getFunctionalInterfaceMethod(aClass);
      if (functionalMethod == null || PsiType.VOID.equals(functionalMethod.getReturnType())) {
        return;
      }
    }
 else {
      return;
    }
  }
  checkExpression(expression.getQualifierExpression());
}
