{
  int[] never={-1,0,14,22,23,999};
  for (int i=-1; i < 17; i++) {
    for (    int j : never) {
      if ((j == 14 || j == 21) && i == j) {
        continue;
      }
      assertCannot(j,i,ABOVE);
      assertCannot(j,i,INTO);
      assertCannot(j,i,BELOW);
    }
  }
  assertCan(3,3,BELOW);
  assertCan(3,3,ABOVE);
  assertCannot(3,2,BELOW);
  assertCan(3,2,ABOVE);
  assertCannot(3,1,BELOW);
  assertCannot(3,0,BELOW);
  assertCan(2,14,ABOVE);
  assertCan(1,14,ABOVE);
  assertCan(1,11,ABOVE);
  assertCannot(1,10,ABOVE);
  assertCannot(1,10,BELOW);
  assertCannot(8,6,ABOVE);
  assertCan(8,6,BELOW);
  assertCannot(5,7,BELOW);
  assertCan(5,7,ABOVE);
  assertCannot(15,11,INTO);
  assertCannot(18,21,ABOVE);
  assertCan(15,21,ABOVE);
  assertTrue(myModel.isDropInto(myTree,2,9));
  assertTrue(myModel.isDropInto(myTree,2,1));
  assertTrue(myModel.isDropInto(myTree,12,9));
  assertTrue(myModel.isDropInto(myTree,12,1));
  assertFalse(myModel.isDropInto(myTree,999,9));
  assertFalse(myModel.isDropInto(myTree,999,1));
  assertFalse(myModel.isDropInto(myTree,2,999));
  assertFalse(myModel.isDropInto(myTree,2,-1));
}
