{
  final CCProjectService service=CCProjectService.getInstance(project);
  final Course course=service.getCourse();
  if (course == null)   return;
  CreateCourseArchiveDialog dlg=new CreateCourseArchiveDialog(project,this);
  dlg.show();
  if (dlg.getExitCode() != DialogWrapper.OK_EXIT_CODE) {
    return;
  }
  final VirtualFile baseDir=project.getBaseDir();
  for (  Map.Entry<String,Task> task : service.getTasksMap().entrySet()) {
    final VirtualFile taskDir=LocalFileSystem.getInstance().findFileByPath(task.getKey());
    if (taskDir == null)     continue;
    for (    final Map.Entry<String,TaskFile> entry : task.getValue().getTaskFiles().entrySet()) {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          TaskFile taskFileCopy=new TaskFile();
          TaskFile.copy(entry.getValue(),taskFileCopy);
          createUserFile(project,taskDir,taskDir,new AbstractMap.SimpleEntry<String,TaskFile>(entry.getKey(),taskFileCopy));
        }
      }
);
    }
  }
  generateJson(project);
  packCourse(baseDir,course);
  synchronize(project);
}
