{
  final CCProjectService service=CCProjectService.getInstance(project);
  final Course course=service.getCourse();
  if (course == null)   return;
  CreateCourseArchiveDialog dlg=new CreateCourseArchiveDialog(project,this);
  dlg.show();
  if (dlg.getExitCode() != DialogWrapper.OK_EXIT_CODE) {
    return;
  }
  final VirtualFile baseDir=project.getBaseDir();
  final List<Lesson> lessons=course.getLessons();
  for (  Lesson lesson : lessons) {
    final VirtualFile lessonDir=baseDir.findChild(EduNames.LESSON + String.valueOf(lesson.getIndex()));
    if (lessonDir == null)     continue;
    for (    Task task : lesson.getTaskList()) {
      final VirtualFile taskDir=lessonDir.findChild(EduNames.TASK + String.valueOf(task.getIndex()));
      if (taskDir == null)       continue;
      for (      final Map.Entry<String,TaskFile> entry : task.getTaskFiles().entrySet()) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            EduUtils.createStudentFileFromAnswer(project,taskDir,taskDir,entry);
          }
        }
);
      }
    }
  }
  generateJson(project);
  VirtualFileManager.getInstance().refreshWithoutFileWatcher(false);
  packCourse(baseDir,course);
  synchronize(project);
}
