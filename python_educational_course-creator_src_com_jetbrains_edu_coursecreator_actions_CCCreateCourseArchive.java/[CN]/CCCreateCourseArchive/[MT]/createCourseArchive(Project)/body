{
  final CCProjectService service=CCProjectService.getInstance(project);
  final Course course=service.getCourse();
  if (course == null)   return;
  CreateCourseArchiveDialog dlg=new CreateCourseArchiveDialog(project,this);
  dlg.show();
  if (dlg.getExitCode() != DialogWrapper.OK_EXIT_CODE) {
    return;
  }
  final VirtualFile baseDir=project.getBaseDir();
  final Map<String,Lesson> lessons=course.getLessonsMap();
  final Map<TaskFile,TaskFile> taskFiles=new HashMap<TaskFile,TaskFile>();
  for (  Map.Entry<String,Lesson> lesson : lessons.entrySet()) {
    final VirtualFile lessonDir=baseDir.findChild(lesson.getKey());
    if (lessonDir == null)     continue;
    for (    Map.Entry<String,Task> task : lesson.getValue().myTasksMap.entrySet()) {
      final VirtualFile taskDir=lessonDir.findChild(task.getKey());
      if (taskDir == null)       continue;
      for (      final Map.Entry<String,TaskFile> entry : task.getValue().task_files.entrySet()) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            createUserFile(project,taskFiles,taskDir,taskDir,entry);
          }
        }
);
      }
    }
  }
  generateJson(project);
  packCourse(baseDir,lessons,course);
  resetTaskFiles(taskFiles);
  synchronize(project);
}
