{
  InstructionSequence seqPattern=pattern.getSeq();
  InstructionSequence seqSample=sample.getSeq();
  if (type != 0) {
    seqPattern=seqPattern.clone();
    if ((type & 1) > 0) {
      if (finallytype > 0) {
        seqPattern.removeInstruction(0);
      }
    }
    if ((type & 2) > 0) {
      if (finallytype == 0 || finallytype == 2) {
        seqPattern.removeLast();
      }
      if (finallytype == 2) {
        seqPattern.removeLast();
      }
    }
  }
  if (seqPattern.length() > seqSample.length()) {
    return false;
  }
  for (int i=0; i < seqPattern.length(); i++) {
    Instruction instrPattern=seqPattern.getInstr(i);
    Instruction instrSample=seqSample.getInstr(i);
    if (!equalInstructions(instrPattern,instrSample,lstStoreVars)) {
      return false;
    }
  }
  if (seqPattern.length() < seqSample.length()) {
    SimpleInstructionSequence seq=new SimpleInstructionSequence();
    LinkedList<Integer> oldOffsets=new LinkedList<Integer>();
    for (int i=seqSample.length() - 1; i >= seqPattern.length(); i--) {
      seq.addInstruction(0,seqSample.getInstr(i),-1);
      oldOffsets.addFirst(sample.getOldOffset(i));
      seqSample.removeInstruction(i);
    }
    BasicBlock newblock=new BasicBlock(++graph.last_id);
    newblock.setSeq(seq);
    newblock.getInstrOldOffsets().addAll(oldOffsets);
    List<BasicBlock> lstTemp=new ArrayList<BasicBlock>();
    lstTemp.addAll(sample.getSuccs());
    for (    BasicBlock suc : lstTemp) {
      sample.removeSuccessor(suc);
      newblock.addSuccessor(suc);
    }
    sample.addSuccessor(newblock);
    graph.getBlocks().addWithKey(newblock,newblock.id);
    Set<BasicBlock> setFinallyExits=graph.getFinallyExits();
    if (setFinallyExits.contains(sample)) {
      setFinallyExits.remove(sample);
      setFinallyExits.add(newblock);
    }
    for (int j=0; j < sample.getSuccExceptions().size(); j++) {
      BasicBlock hd=sample.getSuccExceptions().get(j);
      newblock.addSuccessorException(hd);
      ExceptionRangeCFG range=graph.getExceptionRange(hd,sample);
      range.getProtectedRange().add(newblock);
    }
  }
  return true;
}
