{
  int bytecode_version=mt.getClassStruct().getBytecodeVersion();
  LinkedList<Statement> stack=new LinkedList<Statement>();
  stack.add(root);
  while (!stack.isEmpty()) {
    Statement stat=stack.removeLast();
    Statement parent=stat.getParent();
    if (parent != null && parent.type == Statement.TYPE_CATCHALL && stat == parent.getFirst() && !parent.isCopied()) {
      CatchAllStatement fin=(CatchAllStatement)parent;
      BasicBlock head=fin.getBasichead().getBlock();
      BasicBlock handler=fin.getHandler().getBasichead().getBlock();
      if (catchallBlockIDs.containsKey(handler.id)) {
      }
 else       if (finallyBlockIDs.containsKey(handler.id)) {
        fin.setFinally(true);
        Integer var=finallyBlockIDs.get(handler.id);
        fin.setMonitor(var == null ? null : new VarExprent(var.intValue(),VarType.VARTYPE_INT,varProcessor));
      }
 else {
        Record inf=getFinallyInformation(mt,root,fin);
        if (inf == null) {
          catchallBlockIDs.put(handler.id,null);
        }
 else {
          if (DecompilerContext.getOption(IFernflowerPreferences.FINALLY_DEINLINE) && verifyFinallyEx(graph,fin,inf)) {
            finallyBlockIDs.put(handler.id,null);
          }
 else {
            int varindex=DecompilerContext.getCounterContainer().getCounterAndIncrement(CounterContainer.VAR_COUNTER);
            insertSemaphore(graph,getAllBasicBlocks(fin.getFirst()),head,handler,varindex,inf,bytecode_version);
            finallyBlockIDs.put(handler.id,varindex);
          }
          DeadCodeHelper.removeDeadBlocks(graph);
          DeadCodeHelper.removeEmptyBlocks(graph);
          DeadCodeHelper.mergeBasicBlocks(graph);
        }
        return true;
      }
    }
    stack.addAll(stat.getStats());
  }
  return false;
}
