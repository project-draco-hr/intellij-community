{
  BasicBlock next=null;
  boolean multiple=false;
  for (  BasicBlock[] arr : setNext) {
    if (arr[2] != null) {
      next=arr[1];
      multiple=false;
      break;
    }
 else {
      if (next == null) {
        next=arr[1];
      }
 else       if (next != arr[1]) {
        multiple=true;
      }
      if (arr[1].getPreds().size() == 1) {
        next=arr[1];
      }
    }
  }
  if (multiple) {
    for (    BasicBlock[] arr : setNext) {
      BasicBlock block=arr[1];
      if (block != next) {
        if (InterpreterUtil.equalSets(next.getSuccs(),block.getSuccs())) {
          InstructionSequence seqNext=next.getSeq();
          InstructionSequence seqBlock=block.getSeq();
          if (seqNext.length() == seqBlock.length()) {
            for (int i=0; i < seqNext.length(); i++) {
              Instruction instrNext=seqNext.getInstr(i);
              Instruction instrBlock=seqBlock.getInstr(i);
              if (instrNext.opcode != instrBlock.opcode || instrNext.wide != instrBlock.wide || instrNext.operandsCount() != instrBlock.operandsCount()) {
                return null;
              }
              for (int j=0; i < instrNext.getOperands().length; j++) {
                if (instrNext.getOperand(j) != instrBlock.getOperand(j)) {
                  return null;
                }
              }
            }
          }
 else {
            return null;
          }
        }
 else {
          return null;
        }
      }
    }
    for (    BasicBlock[] arr : setNext) {
      if (arr[1] != next) {
        arr[0].removeSuccessor(arr[1]);
        arr[0].addSuccessor(next);
      }
    }
    DeadCodeHelper.removeDeadBlocks(graph);
  }
  return next;
}
