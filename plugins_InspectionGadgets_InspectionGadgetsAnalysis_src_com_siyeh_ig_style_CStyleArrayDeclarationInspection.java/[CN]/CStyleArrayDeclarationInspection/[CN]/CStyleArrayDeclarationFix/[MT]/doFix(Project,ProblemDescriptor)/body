{
  final PsiElement element=descriptor.getPsiElement().getParent();
  if (element instanceof PsiVariable) {
    final PsiVariable variable=(PsiVariable)element;
    variable.normalizeDeclaration();
    CodeStyleManager.getInstance(project).reformat(variable);
  }
 else   if (element instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)element;
    final PsiTypeElement returnTypeElement=method.getReturnTypeElement();
    if (returnTypeElement == null) {
      return;
    }
    final PsiType returnType=method.getReturnType();
    if (returnType == null) {
      return;
    }
    PsiElement child=method.getParameterList();
    while (!(child instanceof PsiCodeBlock)) {
      final PsiElement element1=child;
      child=child.getNextSibling();
      if (element1 instanceof PsiJavaToken) {
        final PsiJavaToken token=(PsiJavaToken)element1;
        final IElementType tokenType=token.getTokenType();
        if (JavaTokenType.LBRACKET.equals(tokenType) || JavaTokenType.RBRACKET.equals(tokenType)) {
          token.delete();
        }
      }
    }
    final PsiTypeElement typeElement=JavaPsiFacade.getElementFactory(project).createTypeElement(returnType);
    returnTypeElement.replace(typeElement);
  }
}
