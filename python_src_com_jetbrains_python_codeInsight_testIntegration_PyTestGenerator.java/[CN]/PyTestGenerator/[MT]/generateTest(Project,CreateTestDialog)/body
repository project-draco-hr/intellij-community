{
  return PostprocessReformattingAspect.getInstance(project).postponeFormattingInside(new Computable<PsiElement>(){
    public PsiElement compute(){
      return ApplicationManager.getApplication().runWriteAction(new Computable<PsiElement>(){
        public PsiElement compute(){
          try {
            IdeDocumentHistory.getInstance(project).includeCurrentPlaceAsChangePlace();
            String fileName=dialog.getFileName();
            if (!fileName.endsWith(".py"))             fileName=fileName + "." + PythonFileType.INSTANCE.getDefaultExtension();
            StringBuilder fileText=new StringBuilder();
            fileText.append("class ").append(dialog.getClassName()).append("(TestCase):\n  ");
            List<String> methods=dialog.getMethods();
            if (methods.size() == 0)             fileText.append("pass\n");
            for (            String method : methods)             fileText.append("def ").append(method).append("(self):\n    self.fail()\n\n");
            PsiFile psiFile=PyUtil.getOrCreateFile(dialog.getTargetDir() + "/" + fileName,project);
            AddImportHelper.addImportFrom(psiFile,"unittest","TestCase",null,AddImportHelper.ImportPriority.BUILTIN);
            PyElement createdClass=PyElementGenerator.getInstance(project).createFromText(LanguageLevel.forElement(psiFile),PyClass.class,fileText.toString());
            createdClass=(PyElement)psiFile.addAfter(createdClass,psiFile.getLastChild());
            CodeStyleManager.getInstance(project).reformat(psiFile);
            createdClass.navigate(false);
            return psiFile;
          }
 catch (          IncorrectOperationException e) {
            LOG.warn(e);
            return null;
          }
        }
      }
);
    }
  }
);
}
