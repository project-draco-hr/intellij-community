{
  if (v1 instanceof LabeledNull) {
    return lNull;
  }
 else   if (v2 instanceof LabeledNull) {
    final TIntHashSet v2Origins=((LabeledNull)v2).origins;
    final TIntHashSet constraintOrigins=constraint.nulls;
    final boolean[] missed={false};
    v2Origins.forEach(new TIntProcedure(){
      @Override public boolean execute(      int value){
        if (!constraintOrigins.contains(value)) {
          missed[0]=true;
          return false;
        }
        return true;
      }
    }
);
    if (missed[0]) {
      return lNull;
    }
 else {
      return v1;
    }
  }
 else   if (v1 instanceof Calls) {
    if (v2 instanceof Calls) {
      Set<Key> keys=new HashSet<Key>(((Calls)v2).keys);
      keys.removeAll(constraint.calls);
      keys.addAll(((Calls)v1).keys);
      return new Calls(keys);
    }
 else {
      return v1;
    }
  }
 else   if (v2 instanceof Calls) {
    Set<Key> keys=new HashSet<Key>(((Calls)v2).keys);
    keys.removeAll(constraint.calls);
    return new Calls(keys);
  }
  return BasicValue.REFERENCE_VALUE;
}
