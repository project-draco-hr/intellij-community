{
  final String qualifiedName;
  final String packageName;
  final PsiClass containingClass=member.getContainingClass();
  if (member instanceof PsiClass) {
    final PsiClass referencedClass=(PsiClass)member;
    qualifiedName=referencedClass.getQualifiedName();
    packageName=qualifiedName != null ? StringUtil.getPackageName(qualifiedName) : null;
  }
 else {
    if (!member.hasModifierProperty(PsiModifier.STATIC) || containingClass == null) {
      return null;
    }
    packageName=containingClass.getQualifiedName();
    qualifiedName=packageName + '.' + member.getName();
  }
  if (packageName == null) {
    return null;
  }
  final boolean hasOnDemandImportConflict=ImportUtils.hasOnDemandImportConflict(qualifiedName,myFile);
  for (  PsiImportStatementBase importStatement : importStatements) {
    if (!importStatement.isOnDemand()) {
      final PsiJavaCodeReferenceElement reference=importStatement.getImportReference();
      if (reference == null) {
        continue;
      }
      final JavaResolveResult[] targets=reference.multiResolve(false);
      for (      JavaResolveResult target : targets) {
        if (member.equals(target.getElement())) {
          return importStatement;
        }
      }
    }
 else {
      if (hasOnDemandImportConflict) {
        continue;
      }
      final PsiElement target=importStatement.resolve();
      if (target instanceof PsiPackage) {
        final PsiPackage aPackage=(PsiPackage)target;
        if (packageName.equals(aPackage.getQualifiedName())) {
          return importStatement;
        }
      }
 else       if (target instanceof PsiClass) {
        final PsiClass aClass=(PsiClass)target;
        if (importStatement instanceof PsiImportStaticStatement) {
          if (member.hasModifierProperty(PsiModifier.STATIC) && InheritanceUtil.isInheritorOrSelf(aClass,containingClass,true)) {
            return importStatement;
          }
        }
 else         if (importStatement instanceof PsiImportStatement && member instanceof PsiClass && aClass.equals(containingClass)) {
          return importStatement;
        }
      }
    }
  }
  return null;
}
