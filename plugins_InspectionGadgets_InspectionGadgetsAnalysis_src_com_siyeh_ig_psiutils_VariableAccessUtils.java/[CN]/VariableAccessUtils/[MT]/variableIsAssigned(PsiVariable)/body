{
  if (variable instanceof PsiField) {
    if (variable.hasModifierProperty(PsiModifier.PRIVATE)) {
      final PsiClass aClass=PsiUtil.getTopLevelClass(variable);
      return variableIsAssigned(variable,aClass);
    }
    return !ReferencesSearch.search(variable,variable.getUseScope()).forEach(new Processor<PsiReference>(){
      @Override public boolean process(      PsiReference reference){
        final PsiElement element=reference.getElement();
        if (!(element instanceof PsiExpression)) {
          return true;
        }
        final PsiExpression expression=(PsiExpression)element;
        return !PsiUtil.isAccessedForWriting(expression);
      }
    }
);
  }
  final PsiElement context=PsiTreeUtil.getParentOfType(variable,PsiCodeBlock.class,PsiMethod.class,PsiLambdaExpression.class,PsiCatchSection.class,PsiForStatement.class,PsiForeachStatement.class);
  return variableIsAssigned(variable,context);
}
