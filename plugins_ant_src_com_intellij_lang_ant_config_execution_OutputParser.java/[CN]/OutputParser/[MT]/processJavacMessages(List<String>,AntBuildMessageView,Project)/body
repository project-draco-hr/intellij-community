{
  if (javacMessages == null) {
    return;
  }
  final com.intellij.compiler.OutputParser outputParser=new JavacOutputParser(project);
  com.intellij.compiler.OutputParser.Callback callback=new com.intellij.compiler.OutputParser.Callback(){
    private int myIndex=-1;
    @Nullable public String getCurrentLine(){
      if (myIndex >= javacMessages.size()) {
        return null;
      }
      return javacMessages.get(myIndex);
    }
    public String getNextLine(){
      final int size=javacMessages.size();
      final int next=Math.min(myIndex + 1,javacMessages.size());
      myIndex=next;
      if (next >= size) {
        return null;
      }
      return javacMessages.get(next);
    }
    @Override public void pushBack(    String line){
      myIndex--;
    }
    public void message(    final CompilerMessageCategory category,    final String message,    final String url,    final int lineNum,    final int columnNum){
      StringTokenizer tokenizer=new StringTokenizer(message,"\n",false);
      final String[] strings=new String[tokenizer.countTokens()];
      for (int idx=0; tokenizer.hasMoreTokens(); idx++) {
        strings[idx]=tokenizer.nextToken();
      }
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          VirtualFile file=url == null ? null : VirtualFileManager.getInstance().findFileByUrl(url);
          messageView.outputJavacMessage(convertCategory(category),strings,file,url,lineNum,columnNum);
          if (file != null && category == CompilerMessageCategory.ERROR) {
            final WolfTheProblemSolver wolf=WolfTheProblemSolver.getInstance(project);
            final Problem problem=wolf.convertToProblem(file,lineNum,columnNum,strings);
            wolf.weHaveGotNonIgnorableProblems(file,Collections.singletonList(problem));
          }
        }
      }
);
    }
    public void setProgressText(    String text){
    }
    public void fileProcessed(    String path){
    }
    public void fileGenerated(    String path){
    }
  }
;
  try {
    while (true) {
      if (!outputParser.processMessageLine(callback)) {
        break;
      }
    }
  }
 catch (  Exception e) {
  }
}
