{
  this.ast=ast;
  myWalkingState=new WalkingState<IndexedLighterASTNode>(new LighterASTGuide()){
    @Override public void elementFinished(    @NotNull IndexedLighterASTNode element){
      RecursiveLighterASTNodeWalkingVisitor.this.elementFinished(element.node);
      if (parentStack.peek() == element) {
        IndexedLighterASTNode[] children=childrenStack.pop();
        List<LighterASTNode> list=children.length == 0 ? Collections.<LighterASTNode>emptyList() : ContainerUtil.map(children,new Function<IndexedLighterASTNode,LighterASTNode>(){
          @Override public LighterASTNode fun(          IndexedLighterASTNode node){
            return node.node;
          }
        }
);
        ast.disposeChildren(list);
        parentStack.pop();
      }
    }
    @Override public void visit(    @NotNull IndexedLighterASTNode iNode){
      LighterASTNode element=iNode.node;
      RecursiveLighterASTNodeWalkingVisitor visitor=RecursiveLighterASTNodeWalkingVisitor.this;
      if (element instanceof LighterLazyParseableNode) {
        visitor.visitLazyParseableNode((LighterLazyParseableNode)element);
      }
 else       if (element instanceof LighterASTTokenNode) {
        visitor.visitTokenNode((LighterASTTokenNode)element);
      }
 else {
        visitor.visitNode(element);
      }
    }
  }
;
}
