{
  if (node.isCalleeText(PyNames.ISINSTANCE)) {
    final PyExpression[] args=node.getArguments();
    if (args.length == 2 && args[0] instanceof PyReferenceExpression) {
      final PyReferenceExpression target=(PyReferenceExpression)args[0];
      final PyExpression typeElement=args[1];
      final boolean positive=myPositive;
      if (!processTuple(target,typeElement)) {
        pushAssertion(target,new Function<TypeEvalContext,PyType>(){
          @Override public PyType fun(          TypeEvalContext context){
            final List<PyType> types=new ArrayList<PyType>();
            types.add(context.getType(typeElement));
            return createAssertionType(context.getType(target),types,positive,context);
          }
        }
);
      }
    }
  }
}
