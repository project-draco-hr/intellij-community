{
  if (node.isOperator("isnot")) {
    final PyExpression lhs=node.getLeftExpression();
    final PyExpression rhs=node.getRightExpression();
    if (lhs instanceof PyReferenceExpression && rhs instanceof PyReferenceExpression) {
      final PyReferenceExpression target=(PyReferenceExpression)lhs;
      if (PyNames.NONE.equals(rhs.getName())) {
        pushAssertion(target,new Function<TypeEvalContext,PyType>(){
          @Override public PyType fun(          TypeEvalContext context){
            final List<PyType> types=new ArrayList<PyType>();
            types.add(PyNoneType.INSTANCE);
            return createAssertionType(context.getType(target),types,false,context);
          }
        }
);
        return;
      }
    }
  }
  super.visitPyBinaryExpression(node);
}
