{
  final InstructionTypeCallback typeCallback=new InstructionTypeCallback(){
    @Override public PyType getType(    TypeEvalContext context,    @Nullable PsiElement anchor){
      final PyType initial=context.getType(target);
      final PyType suggested=suggestedType.apply(context);
      if (!PyUnionType.class.isInstance(initial) && !PyTypeChecker.isUnknown(initial) && PyTypeChecker.match(suggested,initial,context)) {
        return initial;
      }
 else {
        return createAssertionType(initial,suggested,positive,context);
      }
    }
  }
;
  myStack.push(new Assertion(target,typeCallback));
}
