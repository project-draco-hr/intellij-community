{
  if (node.getParent() instanceof PyIfPart) {
    final boolean positive=myPositive;
    pushAssertion(node,new InstructionTypeCallback(){
      @Override public PyType getType(      TypeEvalContext context,      PsiElement anchor){
        final List<PyType> types=new ArrayList<PyType>();
        types.add(PyNoneType.INSTANCE);
        return createAssertionType(context.getType(node),types,!positive,context);
      }
    }
);
    return;
  }
  super.visitPyReferenceExpression(node);
}
