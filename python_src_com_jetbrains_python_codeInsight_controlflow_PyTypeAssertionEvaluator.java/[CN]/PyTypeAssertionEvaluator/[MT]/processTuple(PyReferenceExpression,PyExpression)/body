{
  boolean pushed=false;
  if (typeElement instanceof PyParenthesizedExpression) {
    final PyExpression contained=((PyParenthesizedExpression)typeElement).getContainedExpression();
    if (contained instanceof PyTupleExpression) {
      final PyTupleExpression tuple=(PyTupleExpression)contained;
      pushAssertion(target,new Function<TypeEvalContext,PyType>(){
        @Override public PyType fun(        TypeEvalContext context){
          final List<PyType> types=new ArrayList<PyType>();
          for (          PyExpression e : tuple.getElements()) {
            final PyType t=context.getType(e);
            types.add(t instanceof PyClassType ? ((PyClassType)t).toInstance() : t);
          }
          return PyUnionType.union(types);
        }
      }
);
      pushed=true;
    }
  }
  return pushed;
}
