{
  boolean pushed=false;
  if (typeElement instanceof PyParenthesizedExpression) {
    final PyExpression contained=((PyParenthesizedExpression)typeElement).getContainedExpression();
    if (contained instanceof PyTupleExpression) {
      final PyTupleExpression tuple=(PyTupleExpression)contained;
      final boolean positive=myPositive;
      pushAssertion(target,new Function<TypeEvalContext,PyType>(){
        @Override public PyType fun(        TypeEvalContext context){
          final List<PyType> types=new ArrayList<PyType>();
          for (          PyExpression e : tuple.getElements()) {
            types.add(context.getType(e));
          }
          return createAssertionType(context.getType(target),types,positive,context);
        }
      }
);
      pushed=true;
    }
  }
  return pushed;
}
