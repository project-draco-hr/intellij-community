{
  final IdeView view=e.getData(LangDataKeys.IDE_VIEW);
  final Project project=e.getData(CommonDataKeys.PROJECT);
  if (view == null || project == null) {
    return;
  }
  final PsiDirectory directory=DirectoryChooserUtil.getOrChooseDirectory(view);
  if (directory == null)   return;
  final String lessonDirName="lesson";
  final CCProjectService service=CCProjectService.getInstance(project);
  final Course course=service.getCourse();
  if (course == null) {
    return;
  }
  if (directory.getVirtualFile().equals(project.getBaseDir())) {
    final int size=course.getLessons().size();
    createLesson(project,size + 1,view,course);
    return;
  }
  Lesson lesson=service.getLesson(directory.getName());
  if (lesson != null) {
    int index=lesson.getIndex();
    List<Lesson> lessons=course.getLessons();
    int lessonNum=lessons.size();
    for (int i=lessonNum; i >= index + 1; i--) {
      updateLesson(project,lessonDirName,course,i);
    }
    final PsiDirectory parent=directory.getParent();
    if (parent == null) {
      return;
    }
    createLesson(project,index + 1,view,course);
  }
}
