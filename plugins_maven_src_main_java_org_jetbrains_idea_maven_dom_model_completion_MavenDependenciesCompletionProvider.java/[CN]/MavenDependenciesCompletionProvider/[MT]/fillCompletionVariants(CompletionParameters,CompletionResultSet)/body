{
  PsiElement xmlText=parameters.getPosition().getParent();
  if (!(xmlText instanceof XmlText))   return;
  PsiElement eDependencyTag=xmlText.getParent();
  if (!(eDependencyTag instanceof XmlTag))   return;
  XmlTag dependencyTag=(XmlTag)eDependencyTag;
  if (!"dependency".equals(dependencyTag.getName()))   return;
  if (!PsiImplUtil.isLeafElementOfType(xmlText.getPrevSibling(),XmlTokenType.XML_TAG_END) || !PsiImplUtil.isLeafElementOfType(xmlText.getNextSibling(),XmlTokenType.XML_END_TAG_START)) {
    return;
  }
  Project project=dependencyTag.getProject();
  DomElement domElement=DomManager.getDomManager(project).getDomElement(dependencyTag);
  if (!(domElement instanceof MavenDomDependency)) {
    return;
  }
  MavenProjectIndicesManager indicesManager=MavenProjectIndicesManager.getInstance(project);
  for (  String groupId : indicesManager.getGroupIds()) {
    for (    String artifactId : indicesManager.getArtifactIds(groupId)) {
      LookupElement builder=LookupElementBuilder.create(groupId + ':' + artifactId).withIcon(AllIcons.Nodes.PpLib).withInsertHandler(MavenDependencyInsertHandler.INSTANCE);
      result.addElement(builder);
    }
  }
}
