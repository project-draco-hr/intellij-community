{
  FileChooserDescriptor descriptor=new FileChooserDescriptor(true,true,true,true,true,false);
  final VirtualFile virtualFile=FileChooser.chooseFile(descriptor,project,null);
  if (virtualFile == null) {
    return;
  }
  final String basePath=project.getBasePath();
  if (basePath == null)   return;
  final CCProjectService service=CCProjectService.getInstance(project);
  Reader reader=null;
  try {
    ZipUtil.unzip(null,new File(basePath),new File(virtualFile.getPath()),null,null,true);
    reader=new InputStreamReader(new FileInputStream(new File(basePath,EduNames.COURSE_META_FILE)));
    Gson gson=new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
    Course course=gson.fromJson(reader,Course.class);
    if (course == null || course.getLessons().isEmpty() || StringUtil.isEmptyOrSpaces(course.getLessons().get(0).getName())) {
      try {
        reader.close();
      }
 catch (      IOException e) {
        LOG.error(e.getMessage());
      }
      reader=new InputStreamReader(new FileInputStream(new File(basePath,EduNames.COURSE_META_FILE)));
      OldCourse oldCourse=gson.fromJson(reader,OldCourse.class);
      course=transformOldCourse(oldCourse);
    }
    service.setCourse(course);
    project.getBaseDir().refresh(false,true);
    int index=1;
    int taskIndex=1;
    for (    Lesson lesson : course.getLessons()) {
      final VirtualFile lessonDir=project.getBaseDir().findChild(EduNames.LESSON + String.valueOf(index));
      lesson.setIndex(index);
      if (lessonDir == null)       continue;
      for (      Task task : lesson.getTaskList()) {
        final VirtualFile taskDir=lessonDir.findChild(EduNames.TASK + String.valueOf(taskIndex));
        task.setIndex(taskIndex);
        task.setLesson(lesson);
        if (taskDir == null)         continue;
        for (        final Map.Entry<String,TaskFile> entry : task.getTaskFiles().entrySet()) {
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            @Override public void run(){
              createAnswerFile(project,taskDir,taskDir,entry);
            }
          }
);
        }
        taskIndex+=1;
      }
      index+=1;
      taskIndex=1;
    }
  }
 catch (  FileNotFoundException e) {
    LOG.error(e.getMessage());
  }
catch (  IOException e) {
    LOG.error(e.getMessage());
  }
catch (  JsonSyntaxException e) {
    LOG.error(e.getMessage());
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
        LOG.error(e.getMessage());
      }
    }
  }
  synchronize(project);
}
