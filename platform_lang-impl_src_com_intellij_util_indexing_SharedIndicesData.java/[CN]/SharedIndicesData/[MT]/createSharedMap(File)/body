{
  return IOUtil.openCleanOrResetBroken(new ThrowableComputable<PersistentHashMap<Integer,byte[]>,IOException>(){
    @Override public PersistentHashMap<Integer,byte[]> compute() throws IOException {
      return new PersistentHashMap<Integer,byte[]>(indexFile,EnumeratorIntegerDescriptor.INSTANCE,new DataExternalizer<byte[]>(){
        @Override public void save(        @NotNull DataOutput out,        byte[] value) throws IOException {
          out.write(value);
        }
        @Override public byte[] read(        @NotNull DataInput in) throws IOException {
          int available=((InputStream)in).available();
          byte[] result=new byte[available];
          in.readFully(result);
          return result;
        }
      }
);
    }
  }
,indexFile);
}
