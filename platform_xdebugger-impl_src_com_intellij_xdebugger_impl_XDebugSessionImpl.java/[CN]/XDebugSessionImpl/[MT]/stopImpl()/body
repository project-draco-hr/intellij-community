{
  if (!myStopped.compareAndSet(false,true)) {
    return;
  }
  myDebugProcess.stopAsync().done(new Consumer<Void>(){
    @Override public void consume(    Void aVoid){
      if (!myProject.isDisposed()) {
        myProject.getMessageBus().syncPublisher(XDebuggerManager.TOPIC).processStopped(myDebugProcess);
      }
      if (mySessionTab != null) {
        ((XWatchesViewImpl)mySessionTab.getWatchesView()).updateSessionData();
        mySessionTab.detachFromSession();
      }
 else       if (myConsoleView != null) {
        Disposer.dispose(myConsoleView);
      }
      myTopFramePosition=null;
      myCurrentExecutionStack=null;
      myCurrentStackFrame=null;
      mySuspendContext=null;
      if (myDebuggerManager.getCurrentSession() == XDebugSessionImpl.this) {
        myDebuggerManager.updateExecutionPoint(null,false,null);
      }
      if (breakpointsInitialized) {
        XBreakpointManagerImpl breakpointManager=myDebuggerManager.getBreakpointManager();
        if (myBreakpointListener != null) {
          breakpointManager.removeBreakpointListener(myBreakpointListener);
        }
        if (myDependentBreakpointListener != null) {
          breakpointManager.getDependentBreakpointManager().removeListener(myDependentBreakpointListener);
        }
      }
      if (myValueMarkers != null) {
        myValueMarkers.clear();
      }
      if (XDebuggerSettingsManager.getInstanceImpl().getGeneralSettings().isUnmuteOnStop()) {
        mySessionData.setBreakpointsMuted(false);
      }
      myDebuggerManager.removeSession(XDebugSessionImpl.this);
      myDispatcher.getMulticaster().sessionStopped();
      myProject.putUserData(XDebuggerEditorLinePainter.CACHE,null);
    }
  }
);
}
