{
  final PsiFile file=element.getContainingFile();
  if (file == null)   return null;
  final VirtualFile vFile=file.getVirtualFile();
  if (vFile == null)   return null;
  ElementPlace place=ElementPlace.get(vFile,myProjectFileIndex);
  if (place == null) {
    return null;
  }
  if (!myChangedModules.isEmpty()) {
    final Module module=myProjectFileIndex.getModuleForFile(vFile);
    if (module == null || areDependenciesOrSelfChanged(module,new THashSet<>())) {
      return null;
    }
  }
  final FileType type=vFile.getFileType();
  CompilerElement[] compilerElements=null;
  if (place == ElementPlace.SRC) {
    for (    CompilerReferenceConverter converter : BYTECODE_CONVERTERS) {
      if (converter.getAvailabilitySrcFileType().equals(type)) {
        final CompilerElement compilerElement=converter.sourceElementAsCompilerElement(element);
        compilerElements=compilerElement == null ? CompilerElement.EMPTY_ARRAY : new CompilerElement[]{compilerElement};
        break;
      }
    }
  }
 else {
    for (    CompilerReferenceConverter converter : BYTECODE_CONVERTERS) {
      compilerElements=converter.libraryElementAsCompilerElements(element);
      if (compilerElements.length != 0) {
        break;
      }
    }
  }
  if (compilerElements == null || compilerElements.length == 0)   return null;
synchronized (myLock) {
    if (myReader == null)     return null;
    TIntHashSet referentFileIds=new TIntHashSet();
    for (    CompilerElement compilerElement : compilerElements) {
      referentFileIds.addAll(myReader.findReferentFileIds(compilerElement).toArray());
    }
    return referentFileIds;
  }
}
