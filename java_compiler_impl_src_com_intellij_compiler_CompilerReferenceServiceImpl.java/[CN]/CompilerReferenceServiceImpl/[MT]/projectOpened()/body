{
  if (isEnabled()) {
    myProject.getMessageBus().connect(myProject).subscribe(BuildManagerListener.TOPIC,new BuildManagerListener(){
      @Override public void beforeBuildProcessStarted(      Project project,      UUID sessionId){
      }
      @Override public void buildStarted(      Project project,      UUID sessionId,      boolean isAutomake){
        closeReaderIfNeed();
      }
      @Override public void buildFinished(      Project project,      UUID sessionId,      boolean isAutomake){
        myChangedModules.clear();
        myDirtyScope=EMPTY_SCOPE;
        openReaderIfNeed();
      }
    }
);
    VirtualFileManager.getInstance().addVirtualFileListener(new VirtualFileAdapter(){
      @Override public void fileCreated(      @NotNull VirtualFileEvent event){
        processChange(event.getFile());
      }
      @Override public void fileCopied(      @NotNull VirtualFileCopyEvent event){
        processChange(event.getFile());
      }
      @Override public void fileMoved(      @NotNull VirtualFileMoveEvent event){
        processChange(event.getFile());
      }
      @Override public void beforePropertyChange(      @NotNull VirtualFilePropertyEvent event){
        if (VirtualFile.PROP_NAME.equals(event.getPropertyName()) || VirtualFile.PROP_SYMLINK_TARGET.equals(event.getPropertyName())) {
          processChange(event.getFile());
        }
      }
      @Override public void beforeContentsChange(      @NotNull VirtualFileEvent event){
        processChange(event.getFile());
      }
      @Override public void beforeFileDeletion(      @NotNull VirtualFileEvent event){
        processChange(event.getFile());
      }
      @Override public void beforeFileMovement(      @NotNull VirtualFileMoveEvent event){
        processChange(event.getFile());
      }
      private void processChange(      VirtualFile file){
        if (myReader != null && myProjectFileIndex.isInSourceContent(file) && myFileTypes.contains(file.getFileType())) {
          final Module module=myProjectFileIndex.getModuleForFile(file);
          if (module != null) {
            if (myChangedModules.add(module)) {
              myDirtyScope=myDirtyScope.union(module.getModuleWithDependentsScope());
            }
          }
        }
      }
    }
,myProject);
  }
}
