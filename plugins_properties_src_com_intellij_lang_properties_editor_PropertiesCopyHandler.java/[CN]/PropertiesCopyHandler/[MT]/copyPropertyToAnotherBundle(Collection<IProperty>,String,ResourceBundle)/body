{
  final Map<IProperty,PropertiesFile> propertiesFileMapping=new HashMap<IProperty,PropertiesFile>();
  for (  IProperty property : properties) {
    final PropertiesFile containingFile=property.getPropertiesFile();
    final PropertiesFile matched=findWithMatchedSuffix(containingFile,targetResourceBundle);
    if (matched != null) {
      propertiesFileMapping.put(property,matched);
    }
  }
  final Project project=targetResourceBundle.getProject();
  if (properties.size() != propertiesFileMapping.size() && Messages.NO == Messages.showYesNoDialog(project,"Source and target resource bundles properties files are not matched correctly. Copy properties anyway?","Resource Bundles Are not Matched",null)) {
    return;
  }
  if (!propertiesFileMapping.isEmpty()) {
    WriteCommandAction.runWriteCommandAction(project,new Runnable(){
      @Override public void run(){
        if (!FileModificationService.getInstance().preparePsiElementsForWrite(ContainerUtil.map(propertiesFileMapping.values(),new Function<PropertiesFile,PsiElement>(){
          @Override public PsiElement fun(          PropertiesFile file){
            return file.getContainingFile();
          }
        }
)))         return;
        for (        Map.Entry<IProperty,PropertiesFile> entry : propertiesFileMapping.entrySet()) {
          final String value=entry.getKey().getValue();
          final PropertiesFile target=entry.getValue();
          target.addProperty(newName,value);
        }
      }
    }
);
    final IProperty representativeFromSourceBundle=ContainerUtil.getFirstItem(properties);
    LOG.assertTrue(representativeFromSourceBundle != null);
    final ResourceBundle sourceResourceBundle=representativeFromSourceBundle.getPropertiesFile().getResourceBundle();
    if (sourceResourceBundle.equals(targetResourceBundle)) {
      DataManager.getInstance().getDataContextFromFocus().doWhenDone(new Consumer<DataContext>(){
        @Override public void consume(        DataContext context){
          final FileEditor fileEditor=PlatformDataKeys.FILE_EDITOR.getData(context);
          if (fileEditor instanceof ResourceBundleEditor) {
            final ResourceBundleEditor resourceBundleEditor=(ResourceBundleEditor)fileEditor;
            resourceBundleEditor.updateTreeRoot();
            resourceBundleEditor.selectProperty(newName);
          }
        }
      }
);
    }
 else {
      for (      FileEditor editor : FileEditorManager.getInstance(project).openFile(new ResourceBundleAsVirtualFile(targetResourceBundle),true)) {
        ((ResourceBundleEditor)editor).updateTreeRoot();
        ((ResourceBundleEditor)editor).selectProperty(newName);
      }
    }
  }
}
