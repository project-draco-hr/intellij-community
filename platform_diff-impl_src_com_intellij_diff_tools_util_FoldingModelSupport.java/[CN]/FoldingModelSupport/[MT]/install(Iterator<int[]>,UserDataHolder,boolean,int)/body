{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (changedLines == null)   return;
  if (range == -1)   return;
  runBatchOperation(new Runnable(){
    @Override public void run(){
      ExpandSuggester expandSuggester=new ExpandSuggester(context.getUserData(CACHE_KEY),defaultExpanded);
      int[] lineCount=new int[myCount];
      for (int i=0; i < myCount; i++) {
        lineCount[i]=myEditors[i].getDocument().getLineCount();
      }
      int[] starts=new int[myCount];
      int[] ends=new int[myCount];
      int[] last=new int[myCount];
      for (int i=0; i < myCount; i++) {
        last[i]=Integer.MIN_VALUE;
      }
      while (changedLines.hasNext()) {
        int[] offsets=changedLines.next();
        for (int i=0; i < myCount; i++) {
          starts[i]=bound(last[i] + range,0,lineCount[i]);
          ends[i]=bound(offsets[i * 2] - range,0,lineCount[i]);
        }
        addRange(starts,ends,expandSuggester.isExpanded(starts,ends));
        for (int i=0; i < myCount; i++) {
          last[i]=offsets[i * 2 + 1];
        }
      }
      for (int i=0; i < myCount; i++) {
        starts[i]=bound(last[i] + range,0,lineCount[i]);
        ends[i]=bound(Integer.MAX_VALUE - range,0,lineCount[i]);
      }
      addRange(starts,ends,expandSuggester.isExpanded(starts,ends));
    }
  }
);
  updateLineNumbers(true);
}
