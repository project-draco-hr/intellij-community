{
  long now=System.currentTimeMillis();
  if (now - myLastTime < IDLE_THRESHOLD || myPoint == null || !myAlarm.isEmpty() || !myInitialized.get()) {
    return;
  }
  Window window=SwingUtilities.getWindowAncestor(this);
  if (window == null || !window.isActive()) {
    myPoint=null;
    return;
  }
  if (myLastPaintTime == -1)   myLastPaintTime=now - REPAINT_INTERVAL;
  if (myStartPaintTime == -1)   myStartPaintTime=now;
  long passedTime=now - myLastPaintTime;
  for (int i=0; i < LAYER_NUMBER; i++) {
    myTextureAngle[i]+=(myTextureRate[i] * passedTime) / REPAINT_INTERVAL;
    myCenterAngle[i]+=(myCenterRate[i] * passedTime) / REPAINT_INTERVAL;
  }
  double linearProgress=(double)(myLastPaintTime - myStartPaintTime) / FADE_CYCLE;
  if (linearProgress > 1) {
    myPoint=null;
    repaint();
    return;
  }
  double progress=(1 - Math.cos(2 * Math.PI * linearProgress)) / 2;
  Graphics2D g2d=(Graphics2D)g.create();
  try {
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    g2d.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
    AffineTransform pointTransform=AffineTransform.getTranslateInstance(myPoint.x,myPoint.y);
    AffineTransform oldTransform=g2d.getTransform();
    pointTransform.concatenate(oldTransform);
    float textureProgress=(float)(progress < 1 ? Math.sqrt(progress) * (LAYER_NUMBER + 1) : LAYER_NUMBER);
    int textureNumber=(int)textureProgress;
    float localProgress=textureProgress - textureNumber;
    for (int i=0; i < textureNumber; i++) {
      AffineTransform t=AffineTransform.getRotateInstance(myTextureAngle[i]);
      t.concatenate(AffineTransform.getTranslateInstance(EYE_SIZE * Math.cos(myCenterAngle[i]),-EYE_SIZE * Math.sin(myCenterAngle[i])));
      t.preConcatenate(pointTransform);
      g2d.setTransform(t);
      if (i == textureNumber - 1 && progress < 1) {
        g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,localProgress));
      }
      g2d.drawImage(myTexture,-myEffectiveRadius,-myEffectiveRadius,this);
    }
  }
  finally {
    g2d.dispose();
  }
  myLastPaintTime=now;
}
