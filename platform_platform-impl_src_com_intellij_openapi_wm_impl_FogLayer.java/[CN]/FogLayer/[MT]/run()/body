{
  if (myPoint == null || myDisposed.get())   return;
  if (Runtime.getRuntime().maxMemory() - Runtime.getRuntime().totalMemory() + Runtime.getRuntime().freeMemory() < 1L << 25)   return;
  int width=getWidth();
  int height=getHeight();
  myEffectiveRadius=(int)(Math.max(Math.max(myPoint.distance(0,0),myPoint.distance(width,0)),Math.max(myPoint.distance(0,height),myPoint.distance(width,height)))) + 2 * EYE_SIZE;
  for (int i=0; i < LAYER_NUMBER; i++) {
    myTextureAngle[i]=getRandomDouble(0,2 * Math.PI);
    myTextureRate[i]=getRandomDouble(MIN_ROTATION_RATE,MAX_ROTATION_RATE) * ((myEffectiveRadius < 1000) ? 2 : 1);
    myCenterAngle[i]=getRandomDouble(0,2 * Math.PI);
    myCenterRate[i]=-getRandomDouble(MIN_SUBROTATION_RATE,MAX_SUBROTATION_RATE) * (myRandom.nextDouble() > .5 ? 1 : -1);
  }
  myTexture=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration().createCompatibleImage(2 * myEffectiveRadius,2 * myEffectiveRadius,Transparency.TRANSLUCENT);
  myLastPaintTime=-1;
  Graphics2D graphics=(Graphics2D)myTexture.getGraphics();
  for (int j=0; j < MAX_SPOT_NUMBER; j++) {
    double v=(1 + Math.cos(myRandom.nextDouble() * Math.PI)) / 2;
    v=Math.pow(v,.18);
    double spotDistance=2 * EYE_SIZE + (myEffectiveRadius - 2 * EYE_SIZE) * v;
    double distanceRatio=spotDistance / myEffectiveRadius;
    double minR=30;
    double maxR=Math.max(Math.sqrt(distanceRatio) * SPOT_RADIUS_FACTOR,minR);
    int spotSize=(int)getRandomDouble(minR,maxR);
    spotSize-=spotSize % 4;
    double spotPhi=getRandomDouble(0,2 * Math.PI);
    BufferedImage ellipseImage=myCache.get(spotSize);
    if (ellipseImage == null) {
      myCache.put(spotSize,ellipseImage=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration().createCompatibleImage(spotSize,spotSize,Transparency.TRANSLUCENT));
      Graphics2D g2d=(Graphics2D)ellipseImage.getGraphics();
      g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
      g2d.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
      g2d.setColor(FOG);
      g2d.fill(new Ellipse2D.Double(0,0,spotSize,spotSize));
    }
    graphics.drawImage(ellipseImage,(int)(myEffectiveRadius + spotDistance * Math.cos(spotPhi) - spotSize / 2),(int)(myEffectiveRadius - spotDistance * Math.sin(spotPhi) - spotSize / 2),this);
  }
  myCache.clear();
  myStartPaintTime=-1;
  myInitialized.set(true);
}
