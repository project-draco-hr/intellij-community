{
  final PsiExpression qualifier=reference.getQualifierExpression();
  final PsiElement nameElement=reference.getReferenceNameElement();
  final MatchContext context=myMatchingVisitor.getMatchContext();
  MatchingHandler _handler=nameElement != null ? context.getPattern().getHandlerSimple(nameElement) : null;
  if (!(_handler instanceof SubstitutionHandler))   _handler=context.getPattern().getHandlerSimple(reference);
  final PsiElement element=myMatchingVisitor.getElement();
  PsiElement other=element instanceof PsiExpression && context.getOptions().isLooseMatching() ? PsiUtil.skipParenthesizedExprDown((PsiExpression)element) : element;
  if (_handler instanceof SubstitutionHandler && !(context.getPattern().getHandlerSimple(qualifier) instanceof SubstitutionHandler) && !(qualifier instanceof PsiThisExpression)) {
    if (other instanceof PsiReferenceExpression) {
      final PsiReferenceExpression psiReferenceExpression=(PsiReferenceExpression)other;
      final PsiExpression qualifier2=psiReferenceExpression.getQualifierExpression();
      if (qualifier2 == null || (context.getOptions().isLooseMatching() && qualifier2 instanceof PsiThisExpression)) {
        other=psiReferenceExpression.getReferenceNameElement();
      }
    }
    final SubstitutionHandler handler=(SubstitutionHandler)_handler;
    if (handler.isSubtype() || handler.isStrictSubtype()) {
      myMatchingVisitor.setResult(checkMatchWithingHierarchy(other,handler,reference));
    }
 else {
      myMatchingVisitor.setResult(handler.handle(other,context));
    }
    return;
  }
  if (!(other instanceof PsiReferenceExpression)) {
    myMatchingVisitor.setResult(false);
    return;
  }
  final PsiReferenceExpression reference2=(PsiReferenceExpression)other;
  final PsiExpression reference2Qualifier=reference2.getQualifierExpression();
  if (qualifier == null && reference2Qualifier == null) {
    myMatchingVisitor.setResult(reference.getReferenceNameElement().textMatches(reference2.getReferenceNameElement()));
    return;
  }
  if (!(other.getParent() instanceof PsiMethodCallExpression) && qualifier != null) {
    final PsiElement referenceElement=reference.getReferenceNameElement();
    final PsiElement referenceElement2=reference2.getReferenceNameElement();
    if (context.getPattern().isTypedVar(referenceElement)) {
      myMatchingVisitor.setResult(myMatchingVisitor.handleTypedElement(referenceElement,referenceElement2));
    }
 else {
      myMatchingVisitor.setResult((referenceElement2 != null && referenceElement != null && referenceElement.textMatches(referenceElement2)) || referenceElement == referenceElement2);
    }
    if (!myMatchingVisitor.getResult()) {
      return;
    }
    if (reference2Qualifier != null) {
      myMatchingVisitor.setResult(myMatchingVisitor.match(qualifier,reference2Qualifier));
    }
 else {
      final PsiElement referencedElement=MatchUtils.getReferencedElement(other);
      if (referencedElement instanceof PsiField) {
        final PsiField field=(PsiField)referencedElement;
        if (qualifier instanceof PsiThisExpression) {
          myMatchingVisitor.setResult(!field.hasModifierProperty(PsiModifier.STATIC));
          return;
        }
      }
      final MatchingHandler handler=context.getPattern().getHandler(qualifier);
      matchImplicitQualifier(handler,referencedElement,context);
    }
    return;
  }
  myMatchingVisitor.setResult(false);
}
