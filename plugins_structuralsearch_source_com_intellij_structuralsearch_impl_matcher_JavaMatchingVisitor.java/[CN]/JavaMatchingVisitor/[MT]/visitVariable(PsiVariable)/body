{
  myMatchingVisitor.getMatchContext().pushResult();
  final PsiIdentifier nameIdentifier=var.getNameIdentifier();
  boolean isTypedVar=myMatchingVisitor.getMatchContext().getPattern().isTypedVar(nameIdentifier);
  boolean isTypedInitializer=var.getInitializer() != null && myMatchingVisitor.getMatchContext().getPattern().isTypedVar(var.getInitializer()) && var.getInitializer() instanceof PsiReferenceExpression;
  final PsiVariable var2=(PsiVariable)myMatchingVisitor.getElement();
  try {
    myMatchingVisitor.setResult((var.getName().equals(var2.getName()) || isTypedVar) && ((var.getParent() instanceof PsiClass && ((PsiClass)var.getParent()).isInterface()) || myMatchingVisitor.match(var.getModifierList(),var2.getModifierList())) && myMatchingVisitor.match(var.getTypeElement(),var2.getTypeElement()));
    if (myMatchingVisitor.getResult()) {
      final PsiExpression var2Initializer=var2.getInitializer();
      myMatchingVisitor.setResult(myMatchingVisitor.match(var.getInitializer(),var2Initializer) || (isTypedInitializer && var2Initializer == null && allowsAbsenceOfMatch(var.getInitializer())));
    }
    if (myMatchingVisitor.getResult() && var instanceof PsiParameter && var.getParent() instanceof PsiCatchSection) {
      myMatchingVisitor.setResult(myMatchingVisitor.match(((PsiCatchSection)var.getParent()).getCatchBlock(),((PsiCatchSection)var2.getParent()).getCatchBlock()));
    }
    if (myMatchingVisitor.getResult() && isTypedVar) {
      myMatchingVisitor.setResult(myMatchingVisitor.handleTypedElement(nameIdentifier,var2.getNameIdentifier()));
    }
  }
  finally {
    saveOrDropResult(nameIdentifier,isTypedVar,var2.getNameIdentifier());
  }
}
