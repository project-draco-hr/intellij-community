{
  boolean includeInterfaces=true;
  boolean includeClasses=true;
  final PsiElement contextParent=context.getParent();
  if (contextParent instanceof PsiReferenceList) {
    final PsiElement grandParentContext=contextParent.getParent();
    if (grandParentContext instanceof PsiClass) {
      final PsiClass psiClass=((PsiClass)grandParentContext);
      if (contextParent == psiClass.getExtendsList()) {
        includeInterfaces=psiClass.isInterface();
      }
 else       if (contextParent == psiClass.getImplementsList()) {
        includeClasses=false;
      }
    }
  }
  final NodeIterator node=new HierarchyNodeIterator(el2,includeClasses,includeInterfaces);
  if (handler.isStrictSubtype()) {
    node.advance();
  }
  final boolean notPredicate=handler.getPredicate() instanceof NotPredicate;
  while (node.hasNext() && !handler.validate(node.current(),0,-1,myMatchingVisitor.getMatchContext())) {
    if (notPredicate)     return false;
    node.advance();
  }
  if (node.hasNext()) {
    handler.addResult(el2,0,-1,myMatchingVisitor.getMatchContext());
    return true;
  }
 else {
    return false;
  }
}
