{
  final PsiElement element=myMatchingVisitor.getElement();
  if (!(element instanceof PsiMethodCallExpression)) {
    myMatchingVisitor.setResult(false);
    return;
  }
  final PsiMethodCallExpression mcall2=(PsiMethodCallExpression)element;
  final PsiReferenceExpression mcallRef1=mcall.getMethodExpression();
  final PsiReferenceExpression mcallRef2=mcall2.getMethodExpression();
  final String mcallname1=mcallRef1.getReferenceName();
  final String mcallname2=mcallRef2.getReferenceName();
  final boolean isTypedVar=myMatchingVisitor.getMatchContext().getPattern().isTypedVar(mcallRef1.getReferenceNameElement());
  if (mcallname1 != null && !mcallname1.equals(mcallname2) && !isTypedVar) {
    myMatchingVisitor.setResult(false);
    return;
  }
  final PsiExpression qualifier=mcallRef1.getQualifierExpression();
  final PsiExpression elementQualifier=mcallRef2.getQualifierExpression();
  if (qualifier != null) {
    if (elementQualifier != null) {
      myMatchingVisitor.setResult(myMatchingVisitor.match(qualifier,elementQualifier));
      if (!myMatchingVisitor.getResult())       return;
    }
 else {
      final MatchingHandler handler=myMatchingVisitor.getMatchContext().getPattern().getHandler(qualifier);
      if (!(handler instanceof SubstitutionHandler) || ((SubstitutionHandler)handler).getMinOccurs() != 0) {
        myMatchingVisitor.setResult(false);
        return;
      }
 else {
        final SubstitutionHandler substitutionHandler=(SubstitutionHandler)handler;
        MatchPredicate predicate=substitutionHandler.getPredicate();
        if (predicate != null) {
          boolean isNot=false;
          if (predicate instanceof NotPredicate) {
            isNot=true;
            predicate=((NotPredicate)predicate).getHandler();
          }
          boolean isStatic=false;
          if (predicate instanceof RegExpPredicate) {
            isStatic=true;
          }
 else           if (!(predicate instanceof ExprTypePredicate)) {
            predicate=null;
          }
          if (predicate != null) {
            final PsiMethod method=(PsiMethod)mcallRef2.resolve();
            if (method != null) {
              final PsiClass aClass=method.getContainingClass();
              if (isStatic) {
                myMatchingVisitor.setResult(predicate.match(null,aClass,myMatchingVisitor.getMatchContext()));
              }
 else {
                myMatchingVisitor.setResult(((ExprTypePredicate)predicate).checkClass(aClass,myMatchingVisitor.getMatchContext()));
              }
            }
 else {
              myMatchingVisitor.setResult(false);
            }
            if (isNot)             myMatchingVisitor.setResult(!myMatchingVisitor.getResult());
            if (!myMatchingVisitor.getResult())             return;
          }
        }
      }
    }
  }
 else   if (elementQualifier != null) {
    myMatchingVisitor.setResult(false);
    return;
  }
  myMatchingVisitor.setResult(myMatchingVisitor.matchSons(mcall.getArgumentList(),mcall2.getArgumentList()));
  if (myMatchingVisitor.getResult() && isTypedVar) {
    boolean res=myMatchingVisitor.getResult();
    res&=myMatchingVisitor.handleTypedElement(mcallRef1.getReferenceNameElement(),mcallRef2.getReferenceNameElement());
    myMatchingVisitor.setResult(res);
  }
}
