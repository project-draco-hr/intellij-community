{
  final AtomicReference<Throwable> exception=new AtomicReference<Throwable>();
  JobLauncher.getInstance().invokeConcurrentlyUnderProgress(objects,progress,runInReadAction,new Processor<Object>(){
    @Override public boolean process(    Object o){
      try {
        if (objects.size() <= 1 || JobSchedulerImpl.CORES_COUNT <= JobLauncherImpl.CORES_FORK_THRESHOLD) {
          assertTrue(ApplicationManager.getApplication().isDispatchThread());
        }
 else {
        }
        ProgressIndicator actualIndicator=ProgressManager.getInstance().getProgressIndicator();
        if (progress == null) {
          assertNotNull(actualIndicator);
          assertTrue(actualIndicator instanceof AbstractProgressIndicatorBase);
        }
 else {
          assertTrue(actualIndicator instanceof SensitiveProgressWrapper);
          ProgressIndicator original=((SensitiveProgressWrapper)actualIndicator).getOriginalProgressIndicator();
          assertSame(progress,original);
        }
        assertTrue(!runInReadAction || ApplicationManager.getApplication().isReadAccessAllowed());
      }
 catch (      Throwable e) {
        exception.set(e);
      }
      return true;
    }
  }
);
  if (exception.get() != null)   throw exception.get();
}
