{
  final Processor<String> processor=new Processor<String>(){
    @Override public boolean process(    String s){
      busySleep(1);
      return true;
    }
  }
;
  for (int i=0; i < 10; i++) {
    System.out.println("i = " + i);
    final ProgressIndicator indicator=new EmptyProgressIndicator();
    Future<?> future=ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
      @Override public void run(){
        JobLauncher.getInstance().invokeConcurrentlyUnderProgress(Collections.nCopies(10000,""),indicator,true,false,processor);
        assertFalse(indicator.isCanceled());
      }
    }
);
    for (int k=0; k < 10000; k++) {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          busySleep(1);
        }
      }
);
    }
    future.get();
  }
}
