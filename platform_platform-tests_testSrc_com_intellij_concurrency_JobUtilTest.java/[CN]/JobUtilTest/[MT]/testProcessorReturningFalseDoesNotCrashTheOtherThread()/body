{
  final AtomicInteger delay=new AtomicInteger(0);
  final Runnable checkCanceled=new Runnable(){
    @Override public void run(){
      ProgressManager.checkCanceled();
    }
  }
;
  Processor<String> processor=new Processor<String>(){
    @Override public boolean process(    String s){
      busySleep(delay.incrementAndGet() % 10 + 10,checkCanceled);
      return delay.get() % 100 != 0;
    }
  }
;
  for (int i=0; i < 100; i++) {
    ProgressIndicator indicator=new EmptyProgressIndicator();
    boolean result=JobLauncher.getInstance().invokeConcurrentlyUnderProgress(Collections.nCopies(10000,""),indicator,false,false,processor);
    assertFalse(indicator.isCanceled());
    assertFalse(result);
  }
}
