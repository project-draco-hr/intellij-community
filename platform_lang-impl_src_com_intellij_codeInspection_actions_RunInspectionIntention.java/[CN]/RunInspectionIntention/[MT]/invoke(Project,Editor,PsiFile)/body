{
  final InspectionManagerEx managerEx=(InspectionManagerEx)InspectionManager.getInstance(project);
  final Module module=file != null ? ModuleUtilCore.findModuleForPsiElement(file) : null;
  AnalysisScope analysisScope=new AnalysisScope(project);
  if (file != null) {
    final VirtualFile virtualFile=file.getVirtualFile();
    if (file.isPhysical() && virtualFile != null && virtualFile.isInLocalFileSystem()) {
      analysisScope=new AnalysisScope(file);
    }
  }
  final BaseAnalysisActionDialog dlg=new BaseAnalysisActionDialog(AnalysisScopeBundle.message("specify.analysis.scope",InspectionsBundle.message("inspection.action.title")),AnalysisScopeBundle.message("analysis.scope.title",InspectionsBundle.message("inspection.action.noun")),project,analysisScope,module != null ? module.getName() : null,true,AnalysisUIOptions.getInstance(project),file);
  if (!dlg.showAndGet()) {
    return;
  }
  final AnalysisUIOptions uiOptions=AnalysisUIOptions.getInstance(project);
  analysisScope=dlg.getScope(uiOptions,analysisScope,project,module);
  final InspectionToolWrapper wrapper=LocalInspectionToolWrapper.findTool2RunInBatch(project,file,myShortName);
  LOG.assertTrue(wrapper != null,"Can't find tool with name = \"" + myShortName + "\"");
  rerunInspection(wrapper,managerEx,analysisScope,file);
}
