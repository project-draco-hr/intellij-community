{
  final String methodName=expression.getMethodExpression().getReferenceName();
  String fromTemplate=null;
  String toLeftPart=null;
  String toRightPart=null;
  if ("contains".equals(methodName)) {
    final PsiMethod method=expression.resolveMethod();
    final PsiClass containingClass;
    if (method != null && (containingClass=method.getContainingClass()) != null) {
      if (CommonClassNames.JAVA_LANG_STRING.equals(containingClass.getQualifiedName())) {
        fromTemplate="$str$.contains($sub$)";
        toLeftPart="$str$, ";
        toRightPart="org.hamcrest.CoreMatchers.containsString($sub$)";
      }
 else       if (InheritanceUtil.isInheritor(containingClass,CommonClassNames.JAVA_UTIL_COLLECTION)) {
        fromTemplate="$collection$.contains($element$)";
        toLeftPart="$element$, ";
        toRightPart="org.hamcrest.CoreMatchers.anyOf($collection$)";
      }
    }
  }
 else   if ("equals".equals(methodName)) {
    final PsiMethod method=expression.resolveMethod();
    if (method != null && isUniqueObjectParameter(method.getParameterList())) {
      fromTemplate="$left$.equals($right$)";
      toLeftPart="$left$, ";
      toRightPart="org.hamcrest.CoreMatchers.is($right$)";
    }
  }
  if (fromTemplate == null) {
    return null;
  }
  if (negate) {
    toRightPart="org.hamcrest.CoreMatchers.not(" + toRightPart + ")";
  }
  return Pair.create(fromTemplate,toLeftPart + toRightPart);
}
