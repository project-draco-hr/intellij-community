{
  final PsiJavaToken sign=expression.getOperationSign();
  IElementType tokenType=sign.getTokenType();
  if (negate) {
    tokenType=negate(tokenType);
  }
  final String fromTemplate="$left$ " + sign.getText() + "  $right$";
  if (JavaTokenType.EQEQ.equals(tokenType) || JavaTokenType.NE.equals(tokenType)) {
    boolean isEqEqForPrimitives=true;
    for (    PsiExpression operand : ContainerUtil.list(expression.getLOperand(),expression.getROperand())) {
      if (!(operand.getType() instanceof PsiPrimitiveType)) {
        isEqEqForPrimitives=false;
        break;
      }
    }
    String rightPartOfAfterTemplate=isEqEqForPrimitives ? "org.hamcrest.CoreMatchers.is($right$)" : "org.hamcrest.CoreMatchers.sameInstance($right$)";
    if (JavaTokenType.NE.equals(tokenType)) {
      rightPartOfAfterTemplate="org.hamcrest.CoreMatchers.not(" + rightPartOfAfterTemplate + ")";
    }
    return Pair.create(fromTemplate,"$left$, " + rightPartOfAfterTemplate);
  }
  String replaceTemplate=null;
  if (JavaTokenType.GT.equals(tokenType)) {
    replaceTemplate="greaterThan($right$)";
  }
 else   if (JavaTokenType.LT.equals(tokenType)) {
    replaceTemplate="lessThan($right$)";
  }
 else   if (JavaTokenType.GE.equals(tokenType)) {
    replaceTemplate="greaterThanOrEqualTo($right$)";
  }
 else   if (JavaTokenType.LE.equals(tokenType)) {
    replaceTemplate="lessThanOrEqualTo($right$)";
  }
  if (replaceTemplate == null) {
    return null;
  }
  replaceTemplate="org.hamcrest.number.OrderingComparison." + replaceTemplate;
  return Pair.create(fromTemplate,"$left$, " + replaceTemplate);
}
