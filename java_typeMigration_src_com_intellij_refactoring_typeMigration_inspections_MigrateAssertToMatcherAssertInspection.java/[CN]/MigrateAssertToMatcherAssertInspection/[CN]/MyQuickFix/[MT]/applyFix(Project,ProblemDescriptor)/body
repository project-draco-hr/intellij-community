{
  final PsiElement element=descriptor.getPsiElement();
  if (element == null || !element.isValid() || !(element.getParent() instanceof PsiMethodCallExpression))   return;
  final PsiMethodCallExpression methodCall=(PsiMethodCallExpression)element.getParent();
  final PsiMethod method=methodCall.resolveMethod();
  if (method == null) {
    return;
  }
  final String methodName=method.getName();
  Pair<String,String> templatePair=null;
  if ("assertFalse".equals(methodName) || "assertTrue".equals(methodName)) {
    final PsiExpression[] expressions=methodCall.getArgumentList().getExpressions();
    final PsiExpression conditionExpression=expressions[expressions.length - 1];
    final boolean negate=methodName.contains("False");
    if (conditionExpression instanceof PsiBinaryExpression) {
      templatePair=getSuitableMatcherForBinaryExpressionInsideBooleanAssert((PsiBinaryExpression)conditionExpression,negate);
    }
 else     if (conditionExpression instanceof PsiMethodCallExpression) {
      templatePair=getSuitableMatcherForMethodCallInsideBooleanAssert((PsiMethodCallExpression)conditionExpression,negate);
    }
  }
  if (templatePair == null) {
    templatePair=ASSERT_METHODS.get(methodName);
  }
  LOG.assertTrue(templatePair != null);
  templatePair=buildFullTemplate(templatePair,method);
  final PsiExpression replaced;
  try {
    replaced=TypeConversionDescriptor.replaceExpression(methodCall,templatePair.getFirst(),templatePair.getSecond());
  }
 catch (  IncorrectOperationException e) {
    LOG.error("Replacer can't match expression:\n" + methodCall.getText() + "\nwith replacement template:\n("+ templatePair.getFirst()+ ", "+ templatePair.getSecond()+ ")");
    throw e;
  }
  if (myStaticallyImportMatchers) {
    for (    PsiJavaCodeReferenceElement ref : ContainerUtil.reverse(new ArrayList<>(PsiTreeUtil.findChildrenOfType(replaced,PsiJavaCodeReferenceElement.class)))) {
      if (!ref.isValid())       continue;
      final PsiElement resolvedElement=ref.resolve();
      if (resolvedElement instanceof PsiClass) {
        final String qName=((PsiClass)resolvedElement).getQualifiedName();
        if (qName != null && qName.startsWith("org.hamcrest")) {
          final PsiIdentifier identifier=PsiTreeUtil.getChildOfType(ref,PsiIdentifier.class);
          if (identifier != null) {
            AddOnDemandStaticImportAction.invoke(project,replaced.getContainingFile(),null,identifier);
          }
        }
      }
    }
  }
}
