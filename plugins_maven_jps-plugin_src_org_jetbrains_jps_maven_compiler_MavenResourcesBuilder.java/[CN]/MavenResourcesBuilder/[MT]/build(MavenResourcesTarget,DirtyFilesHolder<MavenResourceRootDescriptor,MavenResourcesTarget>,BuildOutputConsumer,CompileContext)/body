{
  final BuildDataPaths dataPaths=context.getProjectDescriptor().dataManager.getDataPaths();
  final MavenProjectConfiguration projectConfig=JpsMavenExtensionService.getInstance().getMavenProjectConfiguration(dataPaths);
  final MavenModuleResourceConfiguration config=target.getModuleResourcesConfiguration(dataPaths);
  if (config == null) {
    return;
  }
  final JpsEncodingProjectConfiguration encodingConfig=JpsEncodingConfigurationService.getInstance().getEncodingConfiguration(target.getModule().getProject());
  final MavenResourceFileProcessor fileProcessor=new MavenResourceFileProcessor(projectConfig,encodingConfig,config);
  holder.processDirtyFiles(new FileProcessor<MavenResourceRootDescriptor,MavenResourcesTarget>(){
    @Override public boolean apply(    MavenResourcesTarget target,    File file,    MavenResourceRootDescriptor rd) throws IOException {
      final String relPath=FileUtil.getRelativePath(rd.getRootFile(),file);
      if (relPath == null) {
        return true;
      }
      final File outputDir=MavenResourcesTarget.getOutputDir(target.getModuleOutputDir(),rd.getConfiguration());
      if (outputDir == null) {
        return true;
      }
      final File outputFile=new File(outputDir,relPath);
      final String sourcePath=file.getPath();
      try {
        context.processMessage(new ProgressMessage("Copying resources... [" + target.getModule().getName() + "]"));
        fileProcessor.copyFile(file,outputFile,rd.getConfiguration(),context);
        outputConsumer.registerOutputFile(outputFile,Collections.singleton(sourcePath));
      }
 catch (      UnsupportedEncodingException e) {
        context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.INFO,"Resource was not copied: " + e.getMessage(),sourcePath));
      }
      return !context.getCancelStatus().isCanceled();
    }
  }
);
  context.checkCanceled();
  context.processMessage(new ProgressMessage(""));
}
