{
  if ("or".equals(methodName)) {
    PsiMethodCallExpression methodCallExpression=null;
    if (context instanceof PsiMethodCallExpression) {
      final PsiParameter[] parameters=method.getParameterList().getParameters();
      if (parameters.length != 1) {
        return null;
      }
      final PsiClass aClass=PsiTypesUtil.getPsiClass(parameters[0].getType());
      if (aClass != null) {
        final String qName=aClass.getQualifiedName();
        String pattern=GUAVA_OPTIONAL.equals(qName) ? "java.util.Optional.ofNullable($expr$.get())" : "com.google.common.bas.Supplier".equals(qName) ? "java.util.Optional.ofNullable($expr$)" : "java.util.Optional.ofNullable($expr$)";
        return new TypeConversionDescriptor("$expr$",pattern);
      }
      return null;
    }
 else     if (context.getParent() instanceof PsiMethodCallExpression) {
      methodCallExpression=(PsiMethodCallExpression)context.getParent();
    }
    if (methodCallExpression == null) {
      return null;
    }
    final PsiParameter[] parameters=method.getParameterList().getParameters();
    if (parameters.length != 1) {
      return null;
    }
    final PsiClass aClass=PsiTypesUtil.getPsiClass(parameters[0].getType());
    if (aClass != null) {
      final String qName=aClass.getQualifiedName();
      if (GUAVA_OPTIONAL.equals(qName)) {
        return new TypeConversionDescriptor("$val$.or($other$)","java.util.Optional.ofNullable($val$.orElseGet($other$::get))",to);
      }
      String pattern="com.google.common.bas.Supplier".equals(qName) ? "$val$.orElseGet($other$::get)" : "$val$.orElse($other$)";
      return new TypeConversionDescriptor("$val$.or($other$)",pattern);
    }
    return null;
  }
  return null;
}
