{
  File targetDirectory=compilationUnit.getConfiguration().getTargetDirectory();
  if (forStubs) {
    return getStubOutputItems(compilationUnit,targetDirectory);
  }
  final SortedSet<String> allClasses=new TreeSet<String>();
  List<GroovyClass> listOfClasses=compilationUnit.getClasses();
  for (  GroovyClass listOfClass : listOfClasses) {
    allClasses.add(listOfClass.getName());
  }
  List<OutputItem> compiledFiles=new ArrayList<OutputItem>();
  for (Iterator iterator=compilationUnit.iterator(); iterator.hasNext(); ) {
    SourceUnit sourceUnit=(SourceUnit)iterator.next();
    String fileName=sourceUnit.getName();
    final ModuleNode ast=sourceUnit.getAST();
    final List<ClassNode> topLevelClasses=ast.getClasses();
    for (    ClassNode classNode : topLevelClasses) {
      final String topLevel=classNode.getName();
      final String nested=topLevel + "$";
      final SortedSet<String> tail=allClasses.tailSet(topLevel);
      for (Iterator<String> tailItr=tail.iterator(); tailItr.hasNext(); ) {
        String className=tailItr.next();
        if (className.equals(topLevel) || className.startsWith(nested)) {
          tailItr.remove();
          compiledFiles.add(new OutputItem(targetDirectory,className.replace('.','/') + ".class",fileName));
        }
 else {
          break;
        }
      }
    }
  }
  return compiledFiles;
}
