{
  if (refEntity instanceof RefModule) {
    final RefModule refModule=(RefModule)refEntity;
    final Module module=refModule.getModule();
    if (module.isDisposed() || !scope.containsModule(module))     return CommonProblemDescriptor.EMPTY_ARRAY;
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    final OrderEntry[] declaredDependencies=moduleRootManager.getOrderEntries();
    final Module[] declaredModuleDependencies=moduleRootManager.getDependencies();
    List<CommonProblemDescriptor> descriptors=new ArrayList<CommonProblemDescriptor>();
    final Set<Module> modules=refModule.getUserData(UnnecessaryModuleDependencyAnnotator.DEPENDENCIES);
    Graph<Module> graph=myGraph.get();
    if (graph == null) {
      graph=ModuleManager.getInstance(globalContext.getProject()).moduleGraph();
      myGraph=new SoftReference<Graph<Module>>(graph);
    }
    final RefManager refManager=globalContext.getRefManager();
    for (    final OrderEntry entry : declaredDependencies) {
      if (entry instanceof ModuleOrderEntry) {
        final Module dependency=((ModuleOrderEntry)entry).getModule();
        if (dependency != null) {
          if (modules == null || !modules.contains(dependency)) {
            List<String> dependenciesThroughExported=null;
            if (((ModuleOrderEntry)entry).isExported()) {
              final Iterator<Module> iterator=graph.getOut(module);
              while (iterator.hasNext()) {
                final Module dep=iterator.next();
                final RefModule depRefModule=refManager.getRefModule(dep);
                if (depRefModule != null) {
                  final Set<Module> neededModules=depRefModule.getUserData(UnnecessaryModuleDependencyAnnotator.DEPENDENCIES);
                  if (neededModules != null && neededModules.contains(dependency)) {
                    if (dependenciesThroughExported == null) {
                      dependenciesThroughExported=new ArrayList<String>();
                    }
                    dependenciesThroughExported.add(dep.getName());
                  }
                }
              }
            }
            if (modules != null) {
              List<String> transitiveDependencies=new ArrayList<String>();
              final OrderEntry[] dependenciesOfDependencies=ModuleRootManager.getInstance(dependency).getOrderEntries();
              for (              OrderEntry secondDependency : dependenciesOfDependencies) {
                if (secondDependency instanceof ModuleOrderEntry && ((ModuleOrderEntry)secondDependency).isExported()) {
                  final Module mod=((ModuleOrderEntry)secondDependency).getModule();
                  if (mod != null && modules.contains(mod) && ArrayUtil.find(declaredModuleDependencies,mod) < 0) {
                    transitiveDependencies.add(mod.getName());
                  }
                }
              }
              if (!transitiveDependencies.isEmpty()) {
                final String exported=StringUtil.join(transitiveDependencies,", ");
                descriptors.add(manager.createProblemDescriptor(InspectionsBundle.message("unnecessary.module.dependency.exported.problem.descriptor1",module.getName(),dependency.getName(),exported)));
                continue;
              }
            }
            descriptors.add(createDescriptor(scope,manager,module,dependency,dependenciesThroughExported));
          }
        }
      }
    }
    return descriptors.isEmpty() ? null : descriptors.toArray(new CommonProblemDescriptor[descriptors.size()]);
  }
  return null;
}
