{
  return new JavaElementVisitor(){
    @Override public void visitMethodReferenceExpression(    final PsiMethodReferenceExpression expression){
      doCheckMethodCallOnFunctionalExpression(expression,new Condition<PsiElement>(){
        @Override public boolean value(        PsiElement element){
          return expression.resolve() != null;
        }
      }
);
    }
    @Override public void visitLambdaExpression(    final PsiLambdaExpression expression){
      doCheckMethodCallOnFunctionalExpression(expression,new Condition<PsiElement>(){
        @Override public boolean value(        PsiElement ggParent){
          final PsiElement body=expression.getBody();
          if (!(body instanceof PsiCodeBlock) || ((PsiCodeBlock)body).getStatements().length == 1) {
            return true;
          }
          final List<PsiExpression> returnExpressions=LambdaUtil.getReturnExpressions(expression);
          if (returnExpressions.size() > 1) {
            return false;
          }
          final PsiElement callParent=ggParent.getParent();
          if (returnExpressions.isEmpty()) {
            return callParent instanceof PsiStatement;
          }
          return callParent instanceof PsiStatement || callParent instanceof PsiLocalVariable || callParent instanceof PsiExpression && PsiTreeUtil.getParentOfType(callParent,PsiStatement.class) != null;
        }
      }
);
    }
    @Override public void visitAnonymousClass(    final PsiAnonymousClass aClass){
      if (AnonymousCanBeLambdaInspection.canBeConvertedToLambda(aClass,false,Collections.emptySet())) {
        final PsiElement newExpression=aClass.getParent();
        doCheckMethodCallOnFunctionalExpression(new Condition<PsiElement>(){
          @Override public boolean value(          PsiElement ggParent){
            final PsiMethod method=aClass.getMethods()[0];
            final PsiCodeBlock body=method.getBody();
            final PsiReturnStatement[] returnStatements=PsiUtil.findReturnStatements(body);
            if (returnStatements.length > 1) {
              return false;
            }
            final PsiElement callParent=ggParent.getParent();
            return callParent instanceof PsiStatement || callParent instanceof PsiLocalVariable;
          }
        }
,newExpression,aClass.getBaseClassType(),"Replace call with method body");
      }
    }
    private void doCheckMethodCallOnFunctionalExpression(    PsiElement expression,    Condition<PsiElement> elementContainerCondition){
      final PsiElement parent=PsiUtil.skipParenthesizedExprUp(expression.getParent());
      if (parent instanceof PsiTypeCastExpression) {
        final PsiType interfaceType=((PsiTypeCastExpression)parent).getType();
        doCheckMethodCallOnFunctionalExpression(elementContainerCondition,parent,interfaceType,"Replace method call " + (expression instanceof PsiLambdaExpression ? "on lambda with lambda body" : "on method reference with corresponding method call"));
      }
    }
    private void doCheckMethodCallOnFunctionalExpression(    Condition<PsiElement> elementContainerCondition,    PsiElement parent,    PsiType interfaceType,    String quickFixName){
      final PsiElement gParent=PsiUtil.skipParenthesizedExprUp(parent.getParent());
      if (gParent instanceof PsiReferenceExpression) {
        final PsiElement ggParent=gParent.getParent();
        if (ggParent instanceof PsiMethodCallExpression) {
          final PsiMethod resolveMethod=((PsiMethodCallExpression)ggParent).resolveMethod();
          final PsiElement referenceNameElement=((PsiMethodCallExpression)ggParent).getMethodExpression().getReferenceNameElement();
          if (resolveMethod != null && !resolveMethod.isVarArgs() && ((PsiMethodCallExpression)ggParent).getArgumentList().getExpressions().length == resolveMethod.getParameterList().getParametersCount() && referenceNameElement != null && elementContainerCondition.value(ggParent)) {
            final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(interfaceType);
            if (resolveMethod == interfaceMethod || interfaceMethod != null && MethodSignatureUtil.isSuperMethod(interfaceMethod,resolveMethod)) {
              final ReplaceWithLambdaBodyFix fix=new ReplaceWithLambdaBodyFix(quickFixName);
              holder.registerProblem(referenceNameElement,"Method call can be simplified",fix);
            }
          }
        }
      }
    }
  }
;
}
