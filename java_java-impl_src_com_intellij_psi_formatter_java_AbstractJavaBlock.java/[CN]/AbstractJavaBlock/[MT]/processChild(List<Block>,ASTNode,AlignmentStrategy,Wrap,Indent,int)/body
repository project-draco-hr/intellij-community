{
  final IElementType childType=child.getElementType();
  if (childType == JavaTokenType.CLASS_KEYWORD || childType == JavaTokenType.INTERFACE_KEYWORD) {
    myIsAfterClassKeyword=true;
  }
  if (childType == JavaElementType.METHOD_CALL_EXPRESSION) {
    result.add(createMethodCallExpressionBlock(child,arrangeChildWrap(child,defaultWrap),arrangeChildAlignment(child,alignmentStrategy),childIndent));
  }
 else {
    IElementType nodeType=myNode.getElementType();
    if (nodeType == JavaElementType.POLYADIC_EXPRESSION)     nodeType=JavaElementType.BINARY_EXPRESSION;
    if (childType == JavaTokenType.LBRACE && nodeType == JavaElementType.ARRAY_INITIALIZER_EXPRESSION) {
      final Wrap wrap=Wrap.createWrap(getWrapType(mySettings.ARRAY_INITIALIZER_WRAP),false);
      child=processParenthesisBlock(JavaTokenType.LBRACE,JavaTokenType.RBRACE,result,child,WrappingStrategy.createDoNotWrapCommaStrategy(wrap),mySettings.ALIGN_MULTILINE_ARRAY_INITIALIZER_EXPRESSION);
    }
 else     if (childType == JavaTokenType.LBRACE && nodeType == JavaElementType.ANNOTATION_ARRAY_INITIALIZER) {
      final Wrap wrap=Wrap.createWrap(getWrapType(mySettings.ARRAY_INITIALIZER_WRAP),false);
      child=processParenthesisBlock(JavaTokenType.LBRACE,JavaTokenType.RBRACE,result,child,WrappingStrategy.createDoNotWrapCommaStrategy(wrap),mySettings.ALIGN_MULTILINE_ARRAY_INITIALIZER_EXPRESSION);
    }
 else     if (childType == JavaTokenType.LPARENTH && nodeType == JavaElementType.EXPRESSION_LIST) {
      final Wrap wrap=Wrap.createWrap(getWrapType(mySettings.CALL_PARAMETERS_WRAP),false);
      if (mySettings.PREFER_PARAMETERS_WRAP) {
        wrap.ignoreParentWraps();
      }
      child=processParenthesisBlock(result,child,WrappingStrategy.createDoNotWrapCommaStrategy(wrap),mySettings.ALIGN_MULTILINE_PARAMETERS_IN_CALLS);
    }
 else     if (childType == JavaTokenType.LPARENTH && nodeType == JavaElementType.PARAMETER_LIST) {
      Wrap wrap=Wrap.createWrap(getWrapType(mySettings.METHOD_PARAMETERS_WRAP),false);
      child=processParenthesisBlock(result,child,WrappingStrategy.createDoNotWrapCommaStrategy(wrap),mySettings.ALIGN_MULTILINE_PARAMETERS);
    }
 else     if (childType == JavaTokenType.LPARENTH && nodeType == JavaElementType.RESOURCE_LIST) {
      Wrap wrap=Wrap.createWrap(getWrapType(mySettings.RESOURCE_LIST_WRAP),false);
      child=processParenthesisBlock(result,child,WrappingStrategy.createDoNotWrapCommaStrategy(wrap),mySettings.ALIGN_MULTILINE_RESOURCES);
    }
 else     if (childType == JavaTokenType.LPARENTH && nodeType == JavaElementType.ANNOTATION_PARAMETER_LIST) {
      Wrap wrap=Wrap.createWrap(getWrapType(mySettings.CALL_PARAMETERS_WRAP),false);
      child=processParenthesisBlock(result,child,WrappingStrategy.createDoNotWrapCommaStrategy(wrap),mySettings.ALIGN_MULTILINE_PARAMETERS_IN_CALLS);
    }
 else     if (childType == JavaTokenType.LPARENTH && nodeType == JavaElementType.PARENTH_EXPRESSION) {
      child=processParenthesisBlock(result,child,WrappingStrategy.DO_NOT_WRAP,mySettings.ALIGN_MULTILINE_PARENTHESIZED_EXPRESSION);
    }
 else     if (childType == JavaElementType.ENUM_CONSTANT && myNode instanceof ClassElement) {
      child=processEnumBlock(result,child,((ClassElement)myNode).findEnumConstantListDelimiterPlace());
    }
 else     if (mySettings.TERNARY_OPERATION_SIGNS_ON_NEXT_LINE && isTernaryOperationSign(child)) {
      child=processTernaryOperationRange(result,child,defaultWrap,childIndent);
    }
 else     if (childType == JavaElementType.FIELD) {
      child=processField(result,child,alignmentStrategy,defaultWrap,childIndent);
    }
 else     if (childType == JavaElementType.LOCAL_VARIABLE || childType == JavaElementType.DECLARATION_STATEMENT && myNode.getElementType() == JavaElementType.METHOD) {
      result.add(new SimpleJavaBlock(child,defaultWrap,alignmentStrategy,childIndent,mySettings,myJavaSettings));
    }
 else {
      AlignmentStrategy alignmentStrategyToUse=AlignmentStrategy.wrap(arrangeChildAlignment(child,alignmentStrategy));
      if (myAlignmentStrategy.getAlignment(nodeType,childType) != null && (nodeType == JavaElementType.IMPLEMENTS_LIST || nodeType == JavaElementType.CLASS)) {
        alignmentStrategyToUse=myAlignmentStrategy;
      }
      Wrap wrap=arrangeChildWrap(child,defaultWrap);
      Block block=createJavaBlock(child,mySettings,myJavaSettings,childIndent,wrap,alignmentStrategyToUse,childOffset);
      if (block instanceof AbstractJavaBlock) {
        final AbstractJavaBlock javaBlock=(AbstractJavaBlock)block;
        if (nodeType == JavaElementType.METHOD_CALL_EXPRESSION && childType == JavaElementType.REFERENCE_EXPRESSION || nodeType == JavaElementType.REFERENCE_EXPRESSION && childType == JavaElementType.METHOD_CALL_EXPRESSION) {
          javaBlock.setReservedWrap(getReservedWrap(nodeType),nodeType);
          javaBlock.setReservedWrap(getReservedWrap(childType),childType);
        }
 else         if (nodeType == JavaElementType.BINARY_EXPRESSION) {
          javaBlock.setReservedWrap(defaultWrap,nodeType);
        }
      }
      result.add(block);
    }
  }
  return child;
}
