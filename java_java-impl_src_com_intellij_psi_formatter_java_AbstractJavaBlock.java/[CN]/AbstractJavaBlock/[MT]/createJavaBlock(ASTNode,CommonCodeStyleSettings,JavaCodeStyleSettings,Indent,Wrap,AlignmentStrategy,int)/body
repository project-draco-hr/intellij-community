{
  Indent actualIndent=indent == null ? getDefaultSubtreeIndent(child,getJavaIndentOptions(settings)) : indent;
  IElementType elementType=child.getElementType();
  Alignment alignment=alignmentStrategy.getAlignment(elementType);
  PsiElement childPsi=child.getPsi();
  if (childPsi instanceof PsiWhiteSpace) {
    String text=child.getText();
    int start=CharArrayUtil.shiftForward(text,0," \t\n");
    int end=CharArrayUtil.shiftBackward(text,text.length() - 1," \t\n") + 1;
    LOG.assertTrue(start < end);
    TextRange range=new TextRange(start + child.getStartOffset(),end + child.getStartOffset());
    return new PartialWhitespaceBlock(child,range,wrap,alignment,actualIndent,settings,javaSettings);
  }
  if (childPsi instanceof PsiClass) {
    return new CodeBlockBlock(child,wrap,alignment,actualIndent,settings,javaSettings);
  }
  if (child.getElementType() == JavaElementType.METHOD) {
    return new BlockContainingJavaBlock(child,actualIndent,alignmentStrategy,mySettings,myJavaSettings);
  }
  if (isBlockType(elementType)) {
    return new BlockContainingJavaBlock(child,wrap,alignment,actualIndent,settings,javaSettings);
  }
  if (isStatement(child,child.getTreeParent())) {
    return new CodeBlockBlock(child,wrap,alignment,actualIndent,settings,javaSettings);
  }
  if (!isBuildIndentsOnly() && child instanceof PsiComment && child instanceof PsiLanguageInjectionHost&& InjectedLanguageUtil.hasInjections((PsiLanguageInjectionHost)child)) {
    return new CommentWithInjectionBlock(child,wrap,alignment,indent,settings,javaSettings);
  }
  if (child instanceof LeafElement) {
    final LeafBlock block=new LeafBlock(child,wrap,alignment,actualIndent);
    block.setStartOffset(startOffset);
    return block;
  }
 else   if (isLikeExtendsList(elementType)) {
    return new ExtendsListBlock(child,wrap,alignmentStrategy,settings,javaSettings);
  }
 else   if (elementType == JavaElementType.CODE_BLOCK) {
    return new CodeBlockBlock(child,wrap,alignment,actualIndent,settings,javaSettings);
  }
 else   if (elementType == JavaElementType.LABELED_STATEMENT) {
    return new LabeledJavaBlock(child,wrap,alignment,actualIndent,settings,javaSettings);
  }
 else   if (elementType == JavaDocElementType.DOC_COMMENT) {
    return new DocCommentBlock(child,wrap,alignment,actualIndent,settings,javaSettings);
  }
 else {
    final SimpleJavaBlock simpleJavaBlock=new SimpleJavaBlock(child,wrap,alignmentStrategy,actualIndent,settings,javaSettings);
    simpleJavaBlock.setStartOffset(startOffset);
    return simpleJavaBlock;
  }
}
