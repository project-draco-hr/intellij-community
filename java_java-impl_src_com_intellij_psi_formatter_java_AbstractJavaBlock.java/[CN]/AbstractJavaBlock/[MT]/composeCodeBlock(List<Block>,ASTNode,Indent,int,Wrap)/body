{
  final ArrayList<Block> localResult=new ArrayList<Block>();
  processChild(localResult,child,AlignmentStrategy.getNullStrategy(),null,Indent.getNoneIndent());
  child=child.getTreeNext();
  AlignmentStrategy varDeclarationAlignmentStrategy=AlignmentStrategy.createAlignmentPerTypeStrategy(VAR_DECLARATION_ELEMENT_TYPES_TO_ALIGN,JavaElementType.FIELD,true);
  while (child != null) {
    if (FormatterUtil.containsWhiteSpacesOnly(child)) {
      child=child.getTreeNext();
      continue;
    }
    if (!ElementType.JAVA_COMMENT_BIT_SET.contains(child.getElementType()) && !shouldUseVarDeclarationAlignment(child)) {
      varDeclarationAlignmentStrategy=AlignmentStrategy.createAlignmentPerTypeStrategy(VAR_DECLARATION_ELEMENT_TYPES_TO_ALIGN,JavaElementType.FIELD,true);
    }
    Indent childIndent=getIndentForCodeBlock(child,childrenIndent);
    AlignmentStrategy alignmentStrategyToUse=getAlignmentStrategy(child,varDeclarationAlignmentStrategy);
    final boolean isRBrace=isRBrace(child);
    child=processChild(localResult,child,alignmentStrategyToUse,childWrap,childIndent);
    if (isRBrace) {
      result.add(createCodeBlockBlock(localResult,indent,childrenIndent));
      return child;
    }
    if (child != null) {
      child=child.getTreeNext();
    }
  }
  result.add(createCodeBlockBlock(localResult,indent,childrenIndent));
  return null;
}
