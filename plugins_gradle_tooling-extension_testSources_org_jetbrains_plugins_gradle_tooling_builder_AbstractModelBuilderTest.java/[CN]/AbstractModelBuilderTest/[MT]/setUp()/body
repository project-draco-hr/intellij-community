{
  File distHome=null;
  if (UsefulTestCase.IS_UNDER_TEAMCITY) {
    distHome=new File(PathManagerEx.findFileUnderCommunityHome("plugins/gradle"),"_dist/gradle-" + gradleVersion);
    assumeTrue("Missing: " + distHome.getPath(),distHome.isDirectory());
  }
  ensureTempDirCreated();
  String methodName=name.getMethodName();
  Matcher m=TEST_METHOD_NAME_PATTERN.matcher(methodName);
  if (m.matches()) {
    methodName=m.group(1);
  }
  testDir=new File(ourTempDir,methodName);
  FileUtil.ensureExists(testDir);
  FileUtil.writeToFile(new File(testDir,GradleConstants.DEFAULT_SCRIPT_NAME),FileUtil.loadTextAndClose(getClass().getResourceAsStream("/" + methodName + "/"+ GradleConstants.DEFAULT_SCRIPT_NAME)));
  FileUtil.writeToFile(new File(testDir,GradleConstants.SETTINGS_FILE_NAME),FileUtil.loadTextAndClose(getClass().getResourceAsStream("/" + methodName + "/"+ GradleConstants.SETTINGS_FILE_NAME)));
  GradleConnector connector=GradleConnector.newConnector();
  if (distHome != null) {
    connector.useInstallation(distHome);
  }
 else {
    connector.useGradleVersion(gradleVersion);
  }
  connector.forProjectDirectory(testDir);
  ((DefaultGradleConnector)connector).daemonMaxIdleTime(1,TimeUnit.SECONDS);
  ProjectConnection connection=connector.connect();
  final ProjectImportAction projectImportAction=new ProjectImportAction(false);
  projectImportAction.addExtraProjectModelClasses(getModels());
  BuildActionExecuter<ProjectImportAction.AllModels> buildActionExecutor=connection.action(projectImportAction);
  File initScript=GradleExecutionHelper.generateInitScript(false);
  assertNotNull(initScript);
  buildActionExecutor.withArguments(GradleConstants.INIT_SCRIPT_CMD_OPTION,initScript.getAbsolutePath());
  allModels=buildActionExecutor.run();
  assertNotNull(allModels);
}
