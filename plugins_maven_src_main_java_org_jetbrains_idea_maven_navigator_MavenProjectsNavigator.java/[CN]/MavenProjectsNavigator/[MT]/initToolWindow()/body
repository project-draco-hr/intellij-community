{
  initTree();
  JPanel panel=new MavenProjectsNavigatorPanel(myProject,myTree);
  AnAction removeAction=ActionManager.getInstance().getAction("Maven.RemoveRunConfiguration");
  removeAction.registerCustomShortcutSet(CommonShortcuts.getDelete(),myTree,myProject);
  AnAction editSource=ActionManager.getInstance().getAction("Maven.EditRunConfiguration");
  editSource.registerCustomShortcutSet(CommonShortcuts.getEditSource(),myTree,myProject);
  final ToolWindowManagerEx manager=ToolWindowManagerEx.getInstanceEx(myProject);
  myToolWindow=(ToolWindowEx)manager.registerToolWindow(TOOL_WINDOW_ID,panel,ToolWindowAnchor.RIGHT,myProject,true);
  myToolWindow.setIcon(MavenIcons.ToolWindowMaven);
  final ToolWindowManagerAdapter listener=new ToolWindowManagerAdapter(){
    boolean wasVisible=false;
    @Override public void stateChanged(){
      if (myToolWindow.isDisposed())       return;
      boolean visible=myToolWindow.isVisible();
      if (!visible || visible == wasVisible)       return;
      scheduleStructureUpdate();
      wasVisible=visible;
    }
  }
;
  manager.addToolWindowManagerListener(listener);
  ActionManager actionManager=ActionManager.getInstance();
  DefaultActionGroup group=new DefaultActionGroup();
  group.add(actionManager.getAction("Maven.GroupProjects"));
  group.add(actionManager.getAction("Maven.ShowIgnored"));
  group.add(actionManager.getAction("Maven.ShowBasicPhasesOnly"));
  group.add(actionManager.getAction("Maven.AlwaysShowArtifactId"));
  group.add(actionManager.getAction("Maven.ShowVersions"));
  myToolWindow.setAdditionalGearActions(group);
  Disposer.register(myProject,new Disposable(){
    public void dispose(){
      manager.removeToolWindowManagerListener(listener);
    }
  }
);
}
