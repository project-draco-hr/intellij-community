{
  super.setUp();
  HighlightDisplayKey key=HighlightDisplayKey.find(DefUseInspectionBase.SHORT_NAME);
  if (key == null) {
    HighlightDisplayKey.register(DefUseInspectionBase.SHORT_NAME);
  }
  final InspectionProfileImpl profile=new InspectionProfileImpl("test"){
    @Override public boolean isToolEnabled(    final HighlightDisplayKey key,    PsiElement element){
      return Comparing.strEqual(key.toString(),DefUseInspectionBase.SHORT_NAME);
    }
    @Override @NotNull public InspectionToolWrapper[] getInspectionTools(    PsiElement element){
      return new InspectionToolWrapper[]{myUnusedToolWrapper};
    }
    @Override @NotNull public ModifiableModel getModifiableModel(){
      return new InspectionProfileImpl("test"){
        @Override @NotNull public InspectionToolWrapper[] getInspectionTools(        PsiElement element){
          return new InspectionToolWrapper[]{myUnusedToolWrapper};
        }
        @Override public boolean isToolEnabled(        final HighlightDisplayKey key,        PsiElement element){
          return Comparing.strEqual(key.toString(),DefUseInspectionBase.SHORT_NAME);
        }
      }
;
    }
  }
;
  myView=ViewOfflineResultsAction.showOfflineView(getProject(),parse(),profile,"");
  myUnusedToolWrapper=new LocalInspectionToolWrapper(new DefUseInspection());
  myDataFlowToolWrapper=new LocalInspectionToolWrapper(new EqualsWithItselfInspection());
  final Map<String,Tools> tools=myView.getGlobalInspectionContext().getTools();
  for (  LocalInspectionToolWrapper tool : ContainerUtil.ar(myUnusedToolWrapper,myDataFlowToolWrapper)) {
    profile.addTool(getProject(),tool,new THashMap<>());
    tools.put(tool.getShortName(),new ToolsImpl(tool,tool.getDefaultLevel(),true));
    tool.initialize(myView.getGlobalInspectionContext());
  }
}
