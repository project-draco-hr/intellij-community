{
  myView.getGlobalInspectionContext().getUIOptions().SHOW_STRUCTURE=true;
  InspectionTree tree=updateTree();
  TreeUtil.expandAll(tree);
  PlatformTestUtil.assertTreeEqual(tree,"-" + getProject() + "\n"+ " -Probable bugs\n"+ "  -"+ myToolWrapper+ "\n"+ "   -"+ getModule().toString()+ "\n"+ "    -<default>\n"+ "     -Test\n"+ "      -foo()\n"+ "       "+ varMessage("j")+ "\n"+ "      -f()\n"+ "       -D\n"+ "        -b()\n"+ "         "+ varMessage("r")+ "\n"+ "         -anonymous (java.lang.Runnable)\n"+ "          -run()\n"+ "           "+ varMessage("i")+ "\n"+ "      -ff()\n"+ "       "+ varMessage("d")+ "\n"+ "       "+ varMessage("a")+ "\n"+ "      -main(String[])\n"+ "       "+ varMessage("test")+ "\n");
  myView.getGlobalInspectionContext().getUIOptions().SHOW_STRUCTURE=false;
  tree=updateTree();
  PlatformTestUtil.assertTreeEqual(tree,"-" + getProject() + "\n"+ " -Probable bugs\n"+ "  -"+ myToolWrapper+ "\n"+ "   -Test\n"+ "    "+ varMessage("j")+ "\n"+ "    "+ varMessage("r")+ "\n"+ "    "+ varMessage("i")+ "\n"+ "    "+ varMessage("d")+ "\n"+ "    "+ varMessage("a")+ "\n"+ "    "+ varMessage("test")+ "\n");
  TreeUtil.selectFirstNode(tree);
  final InspectionTreeNode root=(InspectionTreeNode)tree.getLastSelectedPathComponent();
  root.excludeElement(myView.getExcludedManager());
  TreeUtil.traverse(root,new TreeUtil.Traverse(){
    @Override public boolean accept(    final Object node){
      assertTrue(((InspectionTreeNode)node).isExcluded(myView.getExcludedManager()));
      return true;
    }
  }
);
  myView.getGlobalInspectionContext().getUIOptions().FILTER_RESOLVED_ITEMS=true;
  tree=updateTree();
  PlatformTestUtil.assertTreeEqual(tree,getProject() + "\n");
  myView.getGlobalInspectionContext().getUIOptions().FILTER_RESOLVED_ITEMS=false;
  tree=updateTree();
  PlatformTestUtil.assertTreeEqual(tree,"-" + getProject() + "\n"+ " -Probable bugs\n"+ "  -"+ myToolWrapper+ "\n"+ "   -Test\n"+ "    "+ varMessage("j")+ "\n"+ "    "+ varMessage("r")+ "\n"+ "    "+ varMessage("i")+ "\n"+ "    "+ varMessage("d")+ "\n"+ "    "+ varMessage("a")+ "\n"+ "    "+ varMessage("test")+ "\n");
}
