{
  myView.getGlobalInspectionContext().getUIOptions().SHOW_STRUCTURE=true;
  InspectionTree tree=updateTree();
  TreeUtil.expandAll(tree);
  PlatformTestUtil.assertTreeEqual(tree,"-" + getProject() + "\n"+ " -Declaration redundancy\n"+ "  -"+ myUnusedToolWrapper+ "\n"+ "   -"+ getModule().toString()+ "\n"+ "    -<default>\n"+ "     -Test\n"+ "      -foo()\n"+ "       "+ varMessage()+ "\n"+ "      -main(String[])\n"+ "       "+ varMessage()+ "\n"+ "      -f()\n"+ "       -D\n"+ "        -b()\n"+ "         "+ varMessage()+ "\n"+ "         -anonymous (java.lang.Runnable)\n"+ "          -run()\n"+ "           "+ varMessage()+ "\n"+ "      -ff()\n"+ "       "+ varMessage()+ "\n"+ "       "+ varMessage()+ "\n"+ " -Probable bugs\n"+ "  -"+ myDataFlowToolWrapper+ "\n"+ "   -Module: 'testOfflineView'\n"+ "    -<default>\n"+ "     -Test\n"+ "      -m()\n"+ "       'equals()' called on itself\n"+ "     -Test2\n"+ "      -m123()\n"+ "       'equals()' called on itself\n");
  myView.getGlobalInspectionContext().getUIOptions().SHOW_STRUCTURE=false;
  tree=updateTree();
  PlatformTestUtil.assertTreeEqual(tree,"-" + getProject() + "\n"+ " -Declaration redundancy\n"+ "  -"+ myUnusedToolWrapper+ "\n"+ "   -Test\n"+ "    -foo()\n"+ "     "+ varMessage()+ "\n"+ "    -main(String[])\n"+ "     "+ varMessage()+ "\n"+ "    -f()\n"+ "     -D\n"+ "      -b()\n"+ "       "+ varMessage()+ "\n"+ "       -anonymous (java.lang.Runnable)\n"+ "        -run()\n"+ "         "+ varMessage()+ "\n"+ "    -ff()\n"+ "     "+ varMessage()+ "\n"+ "     "+ varMessage()+ "\n"+ " -Probable bugs\n"+ "  -"+ myDataFlowToolWrapper+ "\n"+ "   -Test\n"+ "    'equals()' called on itself\n"+ "   -Test2\n"+ "    'equals()' called on itself\n");
  TreeUtil.selectNode(tree,tree.getRoot());
  final InspectionTreeNode root=tree.getRoot();
  root.excludeElement(myView.getExcludedManager());
  TreeUtil.traverse(root,new TreeUtil.Traverse(){
    @Override public boolean accept(    final Object node){
      assertTrue(((InspectionTreeNode)node).isExcluded(myView.getExcludedManager()));
      return true;
    }
  }
);
  myView.getGlobalInspectionContext().getUIOptions().FILTER_RESOLVED_ITEMS=true;
  tree=updateTree();
  PlatformTestUtil.assertTreeEqual(tree,getProject() + "\n");
  myView.getGlobalInspectionContext().getUIOptions().FILTER_RESOLVED_ITEMS=false;
  tree=updateTree();
  PlatformTestUtil.assertTreeEqual(tree,"-" + getProject() + "\n"+ " -Declaration redundancy\n"+ "  -"+ myUnusedToolWrapper+ "\n"+ "   -Test\n"+ "    -foo()\n"+ "     "+ varMessage()+ "\n"+ "    -main(String[])\n"+ "     "+ varMessage()+ "\n"+ "    -f()\n"+ "     -D\n"+ "      -b()\n"+ "       "+ varMessage()+ "\n"+ "       -anonymous (java.lang.Runnable)\n"+ "        -run()\n"+ "         "+ varMessage()+ "\n"+ "    -ff()\n"+ "     "+ varMessage()+ "\n"+ "     "+ varMessage()+ "\n"+ " -Probable bugs\n"+ "  -"+ myDataFlowToolWrapper+ "\n"+ "   -Test\n"+ "    'equals()' called on itself\n"+ "   -Test2\n"+ "    'equals()' called on itself\n");
}
