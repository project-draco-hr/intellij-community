{
  String name=method.getName();
  if (inheritor.findMethodsByName(name,false).length > 0) {
    PsiMethod found=MethodSignatureUtil.findMethodBySuperSignature(inheritor,getSuperSignature(inheritor,parentClass,method),false);
    if (found != null && isAcceptable(found,method)) {
      return found;
    }
  }
  if (parentClass.isInterface() && !inheritor.isInterface()) {
    final PsiClass superClass=inheritor.getSuperClass();
    if (superClass != null && !superClass.isInheritor(parentClass,true) && superClass.findMethodsByName(name,true).length > 0) {
      MethodSignature signature=getSuperSignature(inheritor,parentClass,method);
      PsiMethod derived=MethodSignatureUtil.findMethodInSuperClassBySignatureInDerived(inheritor,superClass,signature,true);
      if (derived != null && isAcceptable(derived,method)) {
        return derived;
      }
    }
  }
  return null;
}
