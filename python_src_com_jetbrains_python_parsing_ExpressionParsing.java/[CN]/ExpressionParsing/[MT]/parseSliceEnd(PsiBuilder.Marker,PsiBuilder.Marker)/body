{
  myBuilder.advanceLexer();
  if (myBuilder.getTokenType() == PyTokenTypes.RBRACKET) {
    PsiBuilder.Marker sliceMarker=myBuilder.mark();
    sliceMarker.done(PyElementTypes.EMPTY_EXPRESSION);
    sliceItemStart.done(PyElementTypes.SLICE_ITEM);
    myBuilder.advanceLexer();
    exprStart.done(PyElementTypes.SLICE_EXPRESSION);
    return;
  }
 else {
    if (myBuilder.getTokenType() == PyTokenTypes.COLON) {
      PsiBuilder.Marker sliceMarker=myBuilder.mark();
      sliceMarker.done(PyElementTypes.EMPTY_EXPRESSION);
    }
 else {
      parseExpression();
    }
    if (!BRACKET_COLON_COMMA.contains(myBuilder.getTokenType())) {
      myBuilder.error(message("PARSE.expected.colon.or.rbracket"));
    }
    if (myBuilder.getTokenType() == PyTokenTypes.COLON) {
      myBuilder.advanceLexer();
      parseTestExpression(false,false);
    }
    sliceItemStart.done(PyElementTypes.SLICE_ITEM);
    if (!BRACKET_OR_COMMA.contains(myBuilder.getTokenType())) {
      myBuilder.error("']' or ',' expected");
    }
  }
  while (atToken(PyTokenTypes.COMMA)) {
    nextToken();
    sliceItemStart=myBuilder.mark();
    parseTestExpression(false,false);
    if (matchToken(PyTokenTypes.COLON)) {
      parseTestExpression(false,false);
      if (matchToken(PyTokenTypes.COLON)) {
        parseTestExpression(false,false);
      }
    }
    sliceItemStart.done(PyElementTypes.SLICE_ITEM);
    if (!BRACKET_OR_COMMA.contains(myBuilder.getTokenType())) {
      myBuilder.error("']' or ',' expected");
      break;
    }
  }
  checkMatches(PyTokenTypes.RBRACKET,message("PARSE.expected.rbracket"));
  exprStart.done(PyElementTypes.SLICE_EXPRESSION);
}
