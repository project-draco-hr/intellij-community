{
  assertCurrentToken(PyTokenTypes.FOR_KEYWORD);
  while (true) {
    myBuilder.advanceLexer();
    parseExpression(true,true);
    checkMatches(PyTokenTypes.IN_KEYWORD,message("PARSE.expected.in"));
    if (!parseTupleExpression(false,false,true)) {
      myBuilder.error(message("PARSE.expected.expression"));
    }
    while (myBuilder.getTokenType() == PyTokenTypes.IF_KEYWORD) {
      myBuilder.advanceLexer();
      parseOldExpression();
    }
    if (atToken(endToken)) {
      if (leaveEndTokenOutside) {
        expr.done(exprType);
        nextToken();
        return;
      }
      nextToken();
      break;
    }
    if (myBuilder.getTokenType() == PyTokenTypes.FOR_KEYWORD) {
      expr.done(exprType);
      expr=expr.precede();
      continue;
    }
    myBuilder.error(message("PARSE.expected.for.or.bracket"));
    break;
  }
  expr.done(exprType);
}
