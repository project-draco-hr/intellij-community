{
  LOG.assertTrue(myBuilder.getTokenType() == PyTokenTypes.LPAR);
  final PsiBuilder.Marker expr=myBuilder.mark();
  myBuilder.advanceLexer();
  if (myBuilder.getTokenType() == PyTokenTypes.RPAR) {
    myBuilder.advanceLexer();
    expr.done(PyElementTypes.TUPLE_EXPRESSION);
  }
 else {
    parseYieldOrTupleExpression(isTargetExpression);
    if (myBuilder.getTokenType() == PyTokenTypes.FOR_KEYWORD) {
      parseComprehension(expr,PyTokenTypes.RPAR,PyElementTypes.GENERATOR_EXPRESSION);
    }
 else {
      checkMatches(PyTokenTypes.RPAR,message("PARSE.expected.rpar"));
      expr.done(PyElementTypes.PARENTHESIZED_EXPRESSION);
    }
  }
}
