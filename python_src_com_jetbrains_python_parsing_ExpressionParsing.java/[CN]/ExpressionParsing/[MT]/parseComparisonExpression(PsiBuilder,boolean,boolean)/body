{
  PsiBuilder.Marker expr=builder.mark();
  if (!parseBitwiseORExpression(builder,isTargetExpression)) {
    expr.drop();
    return false;
  }
  if (stopOnIn && builder.getTokenType() == PyTokenTypes.IN_KEYWORD) {
    expr.drop();
    return true;
  }
  while (PyTokenTypes.COMPARISON_OPERATIONS.contains(builder.getTokenType())) {
    if (builder.getTokenType() == PyTokenTypes.NOT_KEYWORD) {
      PsiBuilder.Marker notMarker=builder.mark();
      builder.advanceLexer();
      if (builder.getTokenType() != PyTokenTypes.IN_KEYWORD) {
        notMarker.rollbackTo();
        break;
      }
      notMarker.drop();
      builder.advanceLexer();
    }
 else     if (builder.getTokenType() == PyTokenTypes.IS_KEYWORD) {
      builder.advanceLexer();
      if (builder.getTokenType() == PyTokenTypes.NOT_KEYWORD) {
        builder.advanceLexer();
      }
    }
 else {
      builder.advanceLexer();
    }
    if (!parseBitwiseORExpression(builder,isTargetExpression)) {
      builder.error("expression expected");
    }
    expr.done(PyElementTypes.BINARY_EXPRESSION);
    expr=expr.precede();
  }
  expr.drop();
  return true;
}
