{
  LOG.assertTrue(myBuilder.getTokenType() == PyTokenTypes.LBRACE);
  final PsiBuilder.Marker expr=myBuilder.mark();
  myBuilder.advanceLexer();
  if (matchToken(PyTokenTypes.RBRACE)) {
    expr.done(PyElementTypes.DICT_LITERAL_EXPRESSION);
    return;
  }
  if (atToken(PyTokenTypes.EXP)) {
    if (!parseDoubleStarExpression(false)) {
      myBuilder.error("expression expected");
      expr.done(PyElementTypes.DICT_LITERAL_EXPRESSION);
      return;
    }
    parseDictLiteralContentTail(expr);
    return;
  }
  final PsiBuilder.Marker firstExprMarker=myBuilder.mark();
  if (!parseSingleExpression(false)) {
    myBuilder.error("expression expected");
    firstExprMarker.drop();
    expr.done(PyElementTypes.DICT_LITERAL_EXPRESSION);
    return;
  }
  if (matchToken(PyTokenTypes.COLON)) {
    parseDictLiteralTail(expr,firstExprMarker);
  }
 else   if (atToken(PyTokenTypes.COMMA) || atToken(PyTokenTypes.RBRACE)) {
    firstExprMarker.drop();
    parseSetLiteralTail(expr);
  }
 else   if (atToken(PyTokenTypes.FOR_KEYWORD)) {
    firstExprMarker.drop();
    parseComprehension(expr,PyTokenTypes.RBRACE,PyElementTypes.SET_COMP_EXPRESSION);
  }
 else {
    myBuilder.error("expression expected");
    firstExprMarker.drop();
    expr.done(PyElementTypes.DICT_LITERAL_EXPRESSION);
  }
}
