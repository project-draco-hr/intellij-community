{
  LOG.assertTrue(myBuilder.getTokenType() == PyTokenTypes.LBRACE);
  final PsiBuilder.Marker expr=myBuilder.mark();
  myBuilder.advanceLexer();
  if (myBuilder.getTokenType() == PyTokenTypes.RBRACE) {
    myBuilder.advanceLexer();
    expr.done(PyElementTypes.DICT_LITERAL_EXPRESSION);
    return;
  }
  final PsiBuilder.Marker firstExprMarker=myBuilder.mark();
  if (!parseSingleExpression(false)) {
    myBuilder.error("expression expected");
    firstExprMarker.drop();
    expr.done(PyElementTypes.DICT_LITERAL_EXPRESSION);
    return;
  }
  if (myBuilder.getTokenType() == PyTokenTypes.COLON) {
    myBuilder.advanceLexer();
    parseDictLiteralTail(expr,firstExprMarker);
  }
 else   if (myBuilder.getTokenType() == PyTokenTypes.COMMA || myBuilder.getTokenType() == PyTokenTypes.RBRACE) {
    firstExprMarker.drop();
    parseSetLiteralTail(expr);
  }
 else {
    myBuilder.error("expression expected");
    firstExprMarker.drop();
    expr.done(PyElementTypes.DICT_LITERAL_EXPRESSION);
  }
}
