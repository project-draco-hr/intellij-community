{
  boolean recast_first_identifier=false;
  do {
    boolean first_identifier_is_target=isTargetExpression && !recast_first_identifier;
    PsiBuilder.Marker expr=builder.mark();
    if (!parsePrimaryExpression(builder,first_identifier_is_target)) {
      expr.drop();
      return false;
    }
    while (true) {
      final IElementType tokenType=builder.getTokenType();
      if (tokenType == PyTokenTypes.DOT) {
        if (first_identifier_is_target) {
          recast_first_identifier=true;
          expr.rollbackTo();
          break;
        }
 else         recast_first_identifier=false;
        builder.advanceLexer();
        checkMatches(PyTokenTypes.IDENTIFIER,message("PARSE.expected.name"));
        if (isTargetExpression && builder.getTokenType() != PyTokenTypes.DOT) {
          expr.done(PyElementTypes.TARGET_EXPRESSION);
        }
 else {
          expr.done(PyElementTypes.REFERENCE_EXPRESSION);
        }
        expr=expr.precede();
      }
 else       if (tokenType == PyTokenTypes.LPAR) {
        parseArgumentList(builder);
        expr.done(PyElementTypes.CALL_EXPRESSION);
        expr=expr.precede();
      }
 else       if (tokenType == PyTokenTypes.LBRACKET) {
        builder.advanceLexer();
        if (builder.getTokenType() == PyTokenTypes.COLON) {
          PsiBuilder.Marker sliceMarker=builder.mark();
          sliceMarker.done(PyElementTypes.EMPTY_EXPRESSION);
          parseSliceEnd(builder,expr);
        }
 else {
          parseExpressionOptional();
          if (builder.getTokenType() == PyTokenTypes.COLON) {
            parseSliceEnd(builder,expr);
          }
 else {
            checkMatches(PyTokenTypes.RBRACKET,message("PARSE.expected.rbracket"));
            expr.done(PyElementTypes.SUBSCRIPTION_EXPRESSION);
            if (first_identifier_is_target) {
              recast_first_identifier=true;
              expr.rollbackTo();
              break;
            }
          }
        }
        expr=expr.precede();
      }
 else {
        expr.drop();
        break;
      }
      recast_first_identifier=false;
    }
  }
 while (recast_first_identifier);
  return true;
}
