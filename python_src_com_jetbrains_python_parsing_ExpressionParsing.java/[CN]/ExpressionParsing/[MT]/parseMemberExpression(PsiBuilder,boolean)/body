{
  PsiBuilder.Marker expr=builder.mark();
  if (!parsePrimaryExpression(builder,false)) {
    expr.drop();
    return false;
  }
  while (true) {
    final IElementType tokenType=builder.getTokenType();
    if (tokenType == PyTokenTypes.DOT) {
      builder.advanceLexer();
      checkMatches(builder,PyTokenTypes.IDENTIFIER,"name expected");
      if (isTargetExpression && builder.getTokenType() != PyTokenTypes.DOT) {
        expr.done(PyElementTypes.TARGET_EXPRESSION);
      }
 else {
        expr.done(PyElementTypes.REFERENCE_EXPRESSION);
      }
      expr=expr.precede();
    }
 else     if (tokenType == PyTokenTypes.LPAR) {
      parseArgumentList(builder);
      expr.done(PyElementTypes.CALL_EXPRESSION);
      expr=expr.precede();
    }
 else     if (tokenType == PyTokenTypes.LBRACKET) {
      builder.advanceLexer();
      if (builder.getTokenType() == PyTokenTypes.COLON) {
        PsiBuilder.Marker sliceMarker=builder.mark();
        sliceMarker.done(PyElementTypes.EMPTY_EXPRESSION);
        parseSliceEnd(builder,expr);
      }
 else {
        parseExpressionOptional(builder);
        if (builder.getTokenType() == PyTokenTypes.COLON) {
          parseSliceEnd(builder,expr);
        }
 else {
          checkMatches(builder,PyTokenTypes.RBRACKET,"] expected");
          expr.done(PyElementTypes.SUBSCRIPTION_EXPRESSION);
        }
      }
      expr=expr.precede();
    }
 else {
      expr.drop();
      break;
    }
  }
  return true;
}
