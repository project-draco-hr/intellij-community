{
  cd(myBro);
  String broHash=GitTestUtil.makeCommit("bro.txt");
  git("push");
  cd(myBroCommunity);
  String broCommunityHash=GitTestUtil.makeCommit("bro_com.txt");
  git("push");
  cd(myRepository);
  GitTestUtil.makeCommit("file.txt");
  PushSpec<GitPushSource,GitPushTarget> mainSpec=makePushSpec(myRepository,"master","origin/master");
  agreeToUpdate(GitRejectedPushUpdateDialog.MERGE_EXIT_CODE);
  GitPushResult result=new GitPushOperation(myProject,Collections.singletonMap(myRepository,mainSpec),null,false).execute();
  GitPushRepoResult result1=result.getResults().get(myRepository);
  GitPushRepoResult result2=result.getResults().get(myCommunity);
  assertResult(GitPushRepoResult.Type.SUCCESS,2,"master","origin/master",GitUpdateResult.SUCCESS,result1);
  assertNull(result2);
  cd(myCommunity);
  String lastHash=last();
  assertEquals("Update in community didn't happen",broCommunityHash,lastHash);
  cd(myRepository);
  String[] lastCommitParents=git("log -1 --pretty=%P").split(" ");
  assertEquals("Merge didn't happen in main repository",2,lastCommitParents.length);
  assertEquals("Commit from bro repository didn't arrive",broHash,git("log --no-walk HEAD^2 --pretty=%H"));
}
