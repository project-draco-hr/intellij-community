{
  FailingPushGit failingPushGit=GitTestUtil.overrideService(Git.class,FailingPushGit.class);
  failingPushGit.myPushShouldFail=new Condition<GitRepository>(){
    @Override public boolean value(    GitRepository repository){
      return repository.equals(myRepository);
    }
  }
;
  cd(myRepository);
  makeCommit("file.txt");
  cd(myCommunity);
  makeCommit("com.txt");
  PushSpec<GitPushSource,GitPushTarget> spec1=makePushSpec(myRepository,"master","origin/master");
  PushSpec<GitPushSource,GitPushTarget> spec2=makePushSpec(myCommunity,"master","origin/master");
  Map<GitRepository,PushSpec<GitPushSource,GitPushTarget>> map=ContainerUtil.newHashMap();
  map.put(myRepository,spec1);
  map.put(myCommunity,spec2);
  GitPushResult result=new GitPushOperation(myProject,map,null,false).execute();
  GitPushRepoResult result1=result.getResults().get(myRepository);
  GitPushRepoResult result2=result.getResults().get(myCommunity);
  assertResult(GitPushRepoResult.Type.ERROR,-1,"master","origin/master",null,result1);
  assertEquals("Error text is incorrect","Failed to push to origin/master",result1.getError());
  assertResult(GitPushRepoResult.Type.SUCCESS,1,"master","origin/master",null,result2);
}
