{
  if (byteContents.size() != 3)   throw new IllegalArgumentException();
  if (contentTitles.size() != 3)   throw new IllegalArgumentException();
  FileType fileType=output.getFileType();
  if (fileType.isBinary()) {
    try {
      FileContent content=new FileContentImpl(project,output);
      byte[] originalContent=output.contentsToByteArray();
      List<DiffContent> contents=new ArrayList<DiffContent>(3);
      for (      byte[] bytes : byteContents) {
        contents.add(myContentFactory.createFromBytes(project,output,bytes));
      }
      return new BinaryMergeRequestImpl(content,originalContent,contents,byteContents,title,contentTitles,applyCallback);
    }
 catch (    IOException e) {
      LOG.error("Can't create binary merge request",e);
      return null;
    }
  }
 else {
    final Document outputDocument=FileDocumentManager.getInstance().getDocument(output);
    if (outputDocument == null || !DiffUtil.canMakeWritable(outputDocument)) {
      LOG.warn("Can't create text merge request: " + (outputDocument != null ? outputDocument.getText() : "null"));
      return null;
    }
    DocumentContent outputContent=myContentFactory.create(project,outputDocument);
    CharSequence originalContent=outputDocument.getImmutableCharSequence();
    List<DocumentContent> contents=new ArrayList<DocumentContent>(3);
    for (    byte[] bytes : byteContents) {
      contents.add(FileAwareDocumentContent.create(project,bytes,output));
    }
    return new TextMergeRequestImpl(outputContent,originalContent,contents,title,contentTitles,applyCallback);
  }
}
