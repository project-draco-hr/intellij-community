{
  PostfixTemplatesSettings settings=PostfixTemplatesSettings.getInstance();
  if (settings == null) {
    throw new RuntimeException("Can't retrieve postfix template settings");
  }
  myTemplatesSettings=settings;
  LanguageExtensionPoint[] extensions=new ExtensionPointName<LanguageExtensionPoint>(LanguagePostfixTemplate.EP_NAME).getExtensions();
  List<PostfixTemplate> templates=ContainerUtil.newArrayList();
  for (  LanguageExtensionPoint extension : extensions) {
    templates.addAll(((PostfixTemplateProvider)extension.getInstance()).getTemplates());
  }
  ContainerUtil.sort(templates,new Comparator<PostfixTemplate>(){
    @Override public int compare(    PostfixTemplate o1,    PostfixTemplate o2){
      return o1.getKey().compareTo(o2.getKey());
    }
  }
);
  myTemplatesListPanel=new PostfixTemplatesListPanel(templates);
  myTemplatesListPanelContainer.setLayout(new BorderLayout());
  myTemplatesListPanelContainer.add(myTemplatesListPanel.getComponent());
  myPostfixTemplatesEnabled.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      updateComponents();
    }
  }
);
  myShortcutComboBox.addItem(TAB);
  myShortcutComboBox.addItem(SPACE);
  myShortcutComboBox.addItem(ENTER);
  myDescriptionPanel.setLayout(new BorderLayout());
  myDescriptionPanel.add(myInnerPostfixDescriptionPanel.getComponent());
  myTemplatesListPanel.addSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      resetDescriptionPanel();
    }
  }
);
}
