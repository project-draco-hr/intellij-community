{
  final List<PsiClass> classes=super.getTargetClasses(element);
  PsiClass enumClass=null;
  for (  PsiClass aClass : classes) {
    if (aClass.isEnum()) {
      if (enumClass == null) {
        enumClass=aClass;
      }
 else {
        enumClass=null;
        break;
      }
    }
  }
  if (enumClass != null) {
    return Collections.singletonList(enumClass);
  }
  if (myReferenceExpression.isQualified()) {
    final PsiClass aClass=getTargetClassByExpectedTypes(myReferenceExpression.getQualifierExpression());
    if (aClass != null) {
      return Collections.singletonList(aClass);
    }
  }
 else {
    final PsiClass targetClass=getTargetClassByExpectedTypes(myReferenceExpression);
    if (targetClass != null) {
      final PsiFile containingFile=myReferenceExpression.getContainingFile();
      if (containingFile instanceof PsiJavaFile) {
        final PsiImportList importList=((PsiJavaFile)containingFile).getImportList();
        if (importList != null) {
          for (          PsiImportStaticStatement statement : importList.getImportStaticStatements()) {
            if (statement.isOnDemand() && targetClass.equals(statement.resolveTargetClass())) {
              return Collections.singletonList(targetClass);
            }
          }
        }
      }
    }
  }
  return Collections.emptyList();
}
