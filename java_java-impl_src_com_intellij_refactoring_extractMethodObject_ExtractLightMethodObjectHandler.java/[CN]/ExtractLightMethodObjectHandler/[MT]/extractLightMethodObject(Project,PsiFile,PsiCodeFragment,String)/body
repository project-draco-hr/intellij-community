{
  final PsiElement[] elements=fragment.getChildren();
  if (elements.length == 0) {
    return null;
  }
  final PsiFile copy=PsiFileFactory.getInstance(project).createFileFromText(file.getName(),file.getFileType(),file.getText(),file.getModificationStamp(),false);
  final PsiElement originalContext=fragment.getContext();
  if (originalContext == null) {
    return null;
  }
  final TextRange range=originalContext.getTextRange();
  final PsiElement originalAnchor=CodeInsightUtil.findElementInRange(copy,range.getStartOffset(),range.getEndOffset(),originalContext.getClass());
  final PsiElement anchor=RefactoringUtil.getParentStatement(originalAnchor,false);
  final PsiElement[] elementsCopy=new PsiElement[elements.length];
  final PsiElement container=anchor.getParent();
  elementsCopy[0]=container.addRangeBefore(elements[0],elements[elements.length - 1],anchor);
  for (int i=1; i < elements.length; i++) {
    elementsCopy[i]=elementsCopy[i - 1].getNextSibling();
  }
  final int start=elementsCopy[0].getTextRange().getStartOffset();
  final ControlFlow controlFlow;
  try {
    controlFlow=ControlFlowFactory.getInstance(project).getControlFlow(container,LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance());
  }
 catch (  AnalysisCanceledException e) {
    return null;
  }
  final List<PsiVariable> variables=ControlFlowUtil.getUsedVariables(controlFlow,controlFlow.getStartOffset(elementsCopy[0]),controlFlow.getEndOffset(elementsCopy[elementsCopy.length - 1]));
  final String outputVariables=StringUtil.join(variables,new Function<PsiVariable,String>(){
    @Override public String fun(    PsiVariable variable){
      return "\"variable: \" + " + variable.getName();
    }
  }
," +");
  PsiStatement outStatement=JavaPsiFacade.getElementFactory(project).createStatementFromText("System.out.println(" + outputVariables + ");",anchor);
  outStatement=(PsiStatement)container.addAfter(outStatement,elementsCopy[elementsCopy.length - 1]);
  final ExtractMethodObjectProcessor extractMethodObjectProcessor=new ExtractMethodObjectProcessor(project,null,elementsCopy,""){
    @Override protected AbstractExtractDialog createExtractMethodObjectDialog(    MyExtractMethodProcessor processor){
      return new LightExtractMethodObjectDialog(this,methodName);
    }
  }
;
  extractMethodObjectProcessor.getExtractProcessor().setShowErrorDialogs(false);
  ExtractMethodObjectHandler.extractMethodObject(project,null,extractMethodObjectProcessor);
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final String generatedCall=copy.getText().substring(start,outStatement.getTextOffset());
  return new ExtractedData(generatedCall,(PsiClass)CodeStyleManager.getInstance(project).reformat(extractMethodObjectProcessor.getInnerClass()),anchor);
}
