{
  PsiExpression expression=CodeInsightUtil.findExpressionInRange(fragment,0,fragment.getTextLength());
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  final PsiElement[] elements;
  if (expression != null) {
    elements=new PsiElement[]{elementFactory.createStatementFromText(expression.getText() + ";",expression)};
  }
 else {
    elements=CodeInsightUtil.findStatementsInRange(fragment,0,fragment.getTextLength());
  }
  if (elements.length == 0) {
    return null;
  }
  final PsiFile copy=PsiFileFactory.getInstance(project).createFileFromText(file.getName(),file.getFileType(),file.getText(),file.getModificationStamp(),false);
  final PsiElement originalContext=fragment.getContext();
  if (originalContext == null) {
    return null;
  }
  final TextRange range=originalContext.getTextRange();
  final PsiElement originalAnchor=CodeInsightUtil.findElementInRange(copy,range.getStartOffset(),range.getEndOffset(),originalContext.getClass());
  final PsiElement anchor=RefactoringUtil.getParentStatement(originalAnchor,false);
  if (anchor == null) {
    return null;
  }
  final PsiElement container=anchor.getParent();
  final PsiElement firstElementCopy=container.addRangeBefore(elements[0],elements[elements.length - 1],anchor);
  final PsiElement[] elementsCopy=CodeInsightUtil.findStatementsInRange(copy,firstElementCopy.getTextRange().getStartOffset(),anchor.getTextRange().getStartOffset());
  if (elementsCopy[elementsCopy.length - 1] instanceof PsiExpressionStatement) {
    final PsiExpression expr=((PsiExpressionStatement)elementsCopy[elementsCopy.length - 1]).getExpression();
    if (!(expr instanceof PsiAssignmentExpression)) {
      PsiType expressionType=GenericsUtil.getVariableTypeByExpressionType(expr.getType());
      if (expressionType instanceof PsiDisjunctionType) {
        expressionType=((PsiDisjunctionType)expressionType).getLeastUpperBound();
      }
      if (isValidVariableType(expressionType)) {
        final String uniqueResultName=JavaCodeStyleManager.getInstance(project).suggestUniqueVariableName("result",elementsCopy[0],true);
        final String statementText=expressionType.getCanonicalText() + " " + uniqueResultName+ " = "+ expr.getText()+ ";";
        elementsCopy[elementsCopy.length - 1]=elementsCopy[elementsCopy.length - 1].replace(elementFactory.createStatementFromText(statementText,elementsCopy[elementsCopy.length - 1]));
      }
    }
  }
  LOG.assertTrue(elementsCopy[0].getParent() == container,"element: " + elementsCopy[0].getText() + "; container: "+ container.getText());
  final int startOffsetInContainer=elementsCopy[0].getStartOffsetInParent();
  final ControlFlow controlFlow;
  try {
    controlFlow=ControlFlowFactory.getInstance(project).getControlFlow(container,LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance());
  }
 catch (  AnalysisCanceledException e) {
    return null;
  }
  List<PsiVariable> variables=ControlFlowUtil.getUsedVariables(controlFlow,controlFlow.getStartOffset(elementsCopy[0]),controlFlow.getEndOffset(elementsCopy[elementsCopy.length - 1]));
  variables=ContainerUtil.filter(variables,new Condition<PsiVariable>(){
    @Override public boolean value(    PsiVariable variable){
      final PsiElement variableScope=variable instanceof PsiParameter ? ((PsiParameter)variable).getDeclarationScope() : PsiTreeUtil.getParentOfType(variable,PsiCodeBlock.class,PsiForStatement.class);
      return variableScope != null && PsiTreeUtil.isAncestor(variableScope,elementsCopy[elementsCopy.length - 1],false);
    }
  }
);
  final String outputVariables=StringUtil.join(variables,new Function<PsiVariable,String>(){
    @Override public String fun(    PsiVariable variable){
      return "\"variable: \" + " + variable.getName();
    }
  }
," +");
  PsiStatement outStatement=elementFactory.createStatementFromText("System.out.println(" + outputVariables + ");",anchor);
  outStatement=(PsiStatement)container.addAfter(outStatement,elementsCopy[elementsCopy.length - 1]);
  copy.accept(new JavaRecursiveElementWalkingVisitor(){
    private void makePublic(    PsiMember method){
      if (method.hasModifierProperty(PsiModifier.PRIVATE)) {
        VisibilityUtil.setVisibility(method.getModifierList(),PsiModifier.PUBLIC);
      }
    }
    @Override public void visitMethod(    PsiMethod method){
      super.visitMethod(method);
      makePublic(method);
    }
    @Override public void visitField(    PsiField field){
      super.visitField(field);
      makePublic(field);
    }
  }
);
  final ExtractMethodObjectProcessor extractMethodObjectProcessor=new ExtractMethodObjectProcessor(project,null,elementsCopy,""){
    @Override protected AbstractExtractDialog createExtractMethodObjectDialog(    MyExtractMethodProcessor processor){
      return new LightExtractMethodObjectDialog(this,methodName);
    }
  }
;
  extractMethodObjectProcessor.getExtractProcessor().setShowErrorDialogs(false);
  final ExtractMethodObjectProcessor.MyExtractMethodProcessor extractProcessor=extractMethodObjectProcessor.getExtractProcessor();
  if (extractProcessor.prepare()) {
    if (extractProcessor.showDialog()) {
      try {
        extractProcessor.doExtract();
        final UsageInfo[] usages=extractMethodObjectProcessor.findUsages();
        extractMethodObjectProcessor.performRefactoring(usages);
        extractMethodObjectProcessor.runChangeSignature();
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
      if (extractMethodObjectProcessor.isCreateInnerClass()) {
        extractMethodObjectProcessor.changeInstanceAccess(project);
      }
      final PsiElement method=extractMethodObjectProcessor.getMethod();
      LOG.assertTrue(method != null);
      method.delete();
    }
  }
 else {
    return null;
  }
  final int startOffset=startOffsetInContainer + container.getTextRange().getStartOffset();
  final String generatedCall=copy.getText().substring(startOffset,outStatement.getTextOffset());
  return new ExtractedData(generatedCall,(PsiClass)CodeStyleManager.getInstance(project).reformat(extractMethodObjectProcessor.getInnerClass()),originalAnchor);
}
