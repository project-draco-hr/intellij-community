{
  StringBuilder buffer=new StringBuilder();
  if (BitUtil.isSet(options,SHOW_MODIFIERS) && !BitUtil.isSet(options,MODIFIERS_AFTER)) {
    formatModifiers(aClass,options,buffer);
  }
  if (BitUtil.isSet(options,SHOW_NAME)) {
    if (aClass instanceof PsiAnonymousClass && BitUtil.isSet(options,SHOW_ANONYMOUS_CLASS_VERBOSE)) {
      final PsiClassType baseClassReference=((PsiAnonymousClass)aClass).getBaseClassType();
      PsiClass baseClass=baseClassReference.resolve();
      String name=baseClass == null ? baseClassReference.getPresentableText() : formatClass(baseClass,options);
      buffer.append(PsiBundle.message("anonymous.class.derived.display",name));
    }
 else {
      String name=aClass.getName();
      if (name != null) {
        appendSpaceIfNeeded(buffer);
        if (BitUtil.isSet(options,SHOW_FQ_NAME)) {
          String qName=aClass.getQualifiedName();
          if (qName != null) {
            buffer.append(qName);
          }
 else {
            buffer.append(aClass.getName());
          }
        }
 else {
          buffer.append(aClass.getName());
        }
      }
    }
  }
  if (BitUtil.isSet(options,SHOW_MODIFIERS) && BitUtil.isSet(options,MODIFIERS_AFTER)) {
    formatModifiers(aClass,options,buffer);
  }
  if (BitUtil.isSet(options,SHOW_EXTENDS_IMPLEMENTS)) {
    String extendsText=formatReferenceList(aClass.getExtendsList(),options);
    if (!extendsText.isEmpty()) {
      appendSpaceIfNeeded(buffer);
      buffer.append("extends ");
      buffer.append(extendsText);
    }
    String implementsText=formatReferenceList(aClass.getImplementsList(),options);
    if (!implementsText.isEmpty()) {
      appendSpaceIfNeeded(buffer);
      buffer.append("implements ");
      buffer.append(implementsText);
    }
  }
  return buffer.toString();
}
