{
  final PsiElement hostParent=host.getParent();
  if (host instanceof PyStringLiteralExpression && hostParent instanceof PyArgumentList) {
    final PyExpression[] args=((PyArgumentList)hostParent).getArguments();
    int index=ArrayUtil.indexOf(args,host);
    PyCallExpression call=PsiTreeUtil.getParentOfType(host,PyCallExpression.class);
    if (call != null) {
      final PyExpression callee=call.getCallee();
      if (callee instanceof PyReferenceExpression && canBeRegexpCall(callee)) {
        final PsiPolyVariantReference ref=((PyReferenceExpression)callee).getReference(PyResolveContext.noImplicits());
        if (ref != null) {
          final PsiElement element=ref.resolve();
          if (element != null && element.getContainingFile().getName().equals("re.py") && isRegexpMethod(element,index)) {
            List<TextRange> ranges=((PyStringLiteralExpression)host).getStringValueTextRanges();
            if (ranges.size() == 1) {
              injectionPlacesRegistrar.addPlace(isVerbose(call) ? PythonVerboseRegexpLanguage.INSTANCE : PythonRegexpLanguage.INSTANCE,ranges.get(0),null,null);
            }
          }
        }
      }
    }
  }
}
