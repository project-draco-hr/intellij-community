{
  for (int i=0, len=list.size(); i < len; i+=2) {
    ProgressManager.checkCanceled();
    if (list.getQuick(i + 1) != myHash2)     continue;
    int offset=list.getQuick(i);
    if (myProjectFileIndex.isInSource(virtualFile) && !myProjectFileIndex.isInSource(file))     return true;
    if (!myProjectFileIndex.isInSource(virtualFile) && myProjectFileIndex.isInSource(file))     return true;
    final int startOffset=getStartOffset(myNode);
    final int endOffset=getEndOffset(myNode);
    if (file.equals(virtualFile) && offset >= startOffset && offset < endOffset)     continue;
    PsiElement target=getPsi(myNode);
    TextRange rangeInElement=getRangeInElement(myNode);
    Integer fragmentStartOffsetInteger=startOffset;
    SortedMap<Integer,TextRange> map=reportedRanges.subMap(fragmentStartOffsetInteger,endOffset);
    int newFragmentSize=!map.isEmpty() ? 0 : 1;
    Iterator<Integer> iterator=map.keySet().iterator();
    while (iterator.hasNext()) {
      Integer next=iterator.next();
      iterator.remove();
      reportedFiles.remove(next);
      reportedOffsetInOtherFiles.remove(next);
      reportedPsi.remove(next);
      newFragmentSize+=fragmentSize.remove(next);
    }
    reportedRanges.put(fragmentStartOffsetInteger,rangeInElement);
    reportedFiles.put(fragmentStartOffsetInteger,file);
    reportedOffsetInOtherFiles.put(fragmentStartOffsetInteger,offset);
    reportedPsi.put(fragmentStartOffsetInteger,target);
    fragmentSize.put(fragmentStartOffsetInteger,newFragmentSize);
    if (newFragmentSize >= MIN_FRAGMENT_SIZE || isLightProfile()) {
      fragmentHash.put(fragmentStartOffsetInteger,(myHash & 0xFFFFFFFFL) | ((long)myHash2 << 32));
    }
    return false;
  }
  return true;
}
