{
  final VirtualFile virtualFile=psiFile.getVirtualFile();
  if (!(virtualFile instanceof VirtualFileWithId) || !DuplicatesIndex.ourEnabled)   return ProblemDescriptor.EMPTY_ARRAY;
  final DuplicatesProfile profile=DuplicatesIndex.findDuplicatesProfile(psiFile.getFileType());
  if (profile == null)   return ProblemDescriptor.EMPTY_ARRAY;
  final Ref<DuplicatedCodeProcessor> myProcessorRef=new Ref<DuplicatedCodeProcessor>();
  if (profile instanceof LightDuplicateProfile && DuplicatesIndex.ourEnabledLightProfiles) {
    ((LightDuplicateProfile)profile).process(psiFile,new LightDuplicateProfile.Callback(){
      DuplicatedCodeProcessor<LighterASTNode> myProcessor;
      @Override public void process(      final LighterAST ast,      final LighterASTNode node,      int hash){
class LightDuplicatedCodeProcessor extends DuplicatedCodeProcessor<LighterASTNode> {
          LightDuplicatedCodeProcessor(          VirtualFile file,          Project project){
            super(file,project);
          }
          @Override protected TextRange getRangeInElement(          LighterASTNode node){
            return null;
          }
          @Override protected PsiElement getPsi(          LighterASTNode node){
            return ((TreeBackedLighterAST)ast).unwrap(node).getPsi();
          }
          @Override protected int getStartOffset(          LighterASTNode node){
            return node.getStartOffset();
          }
          @Override protected int getEndOffset(          LighterASTNode node){
            return node.getEndOffset();
          }
        }
        if (myProcessor == null) {
          myProcessor=new LightDuplicatedCodeProcessor(virtualFile,psiFile.getProject());
          myProcessorRef.set(myProcessor);
        }
        myProcessor.process(hash,node);
      }
    }
);
  }
 else {
    final DuplocatorState state=profile.getDuplocatorState(psiFile.getLanguage());
    profile.createVisitor(new FragmentsCollector(){
      DuplicatedCodeProcessor<PsiFragment> myProcessor;
      @Override public void add(      int hash,      final int cost,      @Nullable final PsiFragment frag){
        if (!DuplicatesIndex.isIndexedFragment(frag,cost,profile,state)) {
          return;
        }
class OldDuplicatedCodeProcessor extends DuplicatedCodeProcessor<PsiFragment> {
          OldDuplicatedCodeProcessor(          VirtualFile file,          Project project){
            super(file,project);
          }
          @Override protected TextRange getRangeInElement(          PsiFragment node){
            PsiElement[] elements=node.getElements();
            TextRange rangeInElement=null;
            if (elements.length > 1) {
              PsiElement lastElement=elements[elements.length - 1];
              rangeInElement=new TextRange(elements[0].getStartOffsetInParent(),lastElement.getStartOffsetInParent() + lastElement.getTextLength());
            }
            return rangeInElement;
          }
          @Override protected PsiElement getPsi(          PsiFragment node){
            PsiElement[] elements=node.getElements();
            return elements.length > 1 ? elements[0].getParent() : elements[0];
          }
          @Override protected int getStartOffset(          PsiFragment node){
            return node.getStartOffset();
          }
          @Override protected int getEndOffset(          PsiFragment node){
            return node.getEndOffset();
          }
        }
        if (myProcessor == null) {
          myProcessor=new OldDuplicatedCodeProcessor(virtualFile,psiFile.getProject());
          myProcessorRef.set(myProcessor);
        }
        myProcessor.process(hash,frag);
      }
    }
,true).visitNode(psiFile);
  }
  DuplicatedCodeProcessor<?> processor=myProcessorRef.get();
  final SmartList<ProblemDescriptor> descriptors=new SmartList<ProblemDescriptor>();
  if (processor != null) {
    for (    Map.Entry<Integer,TextRange> entry : processor.reportedRanges.entrySet()) {
      final Integer offset=entry.getKey();
      if (processor.fragmentSize.get(offset) < 3)       continue;
      final VirtualFile file=processor.reportedFiles.get(offset);
      String message="Found duplicated code in " + file.getPath();
      PsiElement targetElement=processor.reportedPsi.get(offset);
      TextRange rangeInElement=entry.getValue();
      final int offsetInOtherFile=processor.reportedOffsetInOtherFiles.get(offset);
      LocalQuickFix fix=createNavigateToDupeFix(file,offsetInOtherFile);
      ProblemDescriptor descriptor=manager.createProblemDescriptor(targetElement,rangeInElement,message,ProblemHighlightType.WEAK_WARNING,isOnTheFly,fix);
      descriptors.add(descriptor);
    }
  }
  return descriptors.isEmpty() ? null : descriptors.toArray(new ProblemDescriptor[descriptors.size()]);
}
