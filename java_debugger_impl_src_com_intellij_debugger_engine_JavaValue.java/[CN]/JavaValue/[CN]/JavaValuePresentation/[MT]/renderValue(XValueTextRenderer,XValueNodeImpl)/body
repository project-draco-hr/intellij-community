{
  boolean compact=node != null;
  if (myError != null) {
    if (myValue.endsWith(myError)) {
      renderer.renderValue(myValue.substring(0,myValue.length() - myError.length()));
    }
    renderer.renderError(myError);
  }
 else {
    if (compact && node.getValueContainer() instanceof JavaValue) {
      final JavaValue container=(JavaValue)node.getValueContainer();
      if (container.getDescriptor().isArray()) {
        final ArrayReference value=(ArrayReference)container.getDescriptor().getValue();
        final ArrayType type=(ArrayType)container.getDescriptor().getType();
        if (type != null) {
          final String typeName=type.componentTypeName();
          if (TypeConversionUtil.isPrimitive(typeName) || CommonClassNames.JAVA_LANG_STRING.equals(typeName)) {
            int size=value.length();
            int max=Math.min(size,CommonClassNames.JAVA_LANG_STRING.equals(typeName) ? 5 : 10);
            final List<Value> values=value.getValues(0,max);
            int i=0;
            final List<String> vals=new ArrayList<>(max);
            while (i < values.size()) {
              vals.add(StringUtil.first(values.get(i).toString(),15,true));
              i++;
            }
            String more="";
            if (vals.size() < size) {
              more=", + " + (size - vals.size()) + " more";
            }
            renderer.renderValue("{" + StringUtil.join(vals,", ") + more+ "}");
            return;
          }
        }
      }
    }
    if (myValueDescriptor.isString()) {
      renderer.renderStringValue(myValue,"\"",XValueNode.MAX_VALUE_LENGTH);
      return;
    }
    String value=truncateToMaxLength(myValue);
    Renderer lastRenderer=myValueDescriptor.getLastRenderer();
    if (lastRenderer instanceof CompoundTypeRenderer) {
      lastRenderer=((CompoundTypeRenderer)lastRenderer).getLabelRenderer();
    }
    if (lastRenderer instanceof ToStringRenderer) {
      value=StringUtil.wrapWithDoubleQuote(value);
    }
    renderer.renderValue(value);
  }
}
