{
  if (node.isObsolete()) {
    return;
  }
  scheduleCommand(myEvaluationContext,node,new SuspendContextCommandImpl(myEvaluationContext.getSuspendContext()){
    @Override public Priority getPriority(){
      return Priority.NORMAL;
    }
    @Override public void contextAction() throws Exception {
      if (node.isObsolete()) {
        return;
      }
      final XValueChildrenList children=new XValueChildrenList();
      final NodeRenderer renderer=myValueDescriptor.getRenderer(myEvaluationContext.getDebugProcess());
      final Ref<Integer> remainingNum=new Ref<Integer>(0);
      renderer.buildChildren(myValueDescriptor.getValue(),new ChildrenBuilder(){
        @Override public NodeDescriptorFactory getDescriptorManager(){
          return myNodeManager;
        }
        @Override public NodeManager getNodeManager(){
          return myNodeManager;
        }
        @Override public ValueDescriptor getParentDescriptor(){
          return myValueDescriptor;
        }
        @Override public void setRemaining(        int remaining){
          remainingNum.set(remaining);
        }
        @Override public void initChildrenArrayRenderer(        ArrayRenderer renderer){
          renderer.START_INDEX=myCurrentChildrenStart;
          renderer.END_INDEX=myCurrentChildrenStart + XCompositeNode.MAX_CHILDREN_TO_SHOW - 1;
          myCurrentChildrenStart+=XCompositeNode.MAX_CHILDREN_TO_SHOW;
        }
        @Override public void setChildren(        List<DebuggerTreeNode> nodes){
          for (          DebuggerTreeNode node : nodes) {
            final NodeDescriptor descriptor=node.getDescriptor();
            if (descriptor instanceof ValueDescriptorImpl) {
              children.add(create(JavaValue.this,(ValueDescriptorImpl)descriptor,myEvaluationContext,myNodeManager,false));
            }
 else             if (descriptor instanceof MessageDescriptor) {
              children.add(new JavaStackFrame.DummyMessageValueNode(descriptor.getLabel(),null));
            }
          }
        }
      }
,myEvaluationContext);
      node.addChildren(children,true);
      if (remainingNum.get() > 0) {
        node.tooManyChildren(remainingNum.get());
      }
    }
  }
);
}
