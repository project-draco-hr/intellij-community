{
  if (myEvaluationContext.getSuspendContext().isResumed())   return;
  myEvaluationContext.getDebugProcess().getManagerThread().schedule(new SuspendContextCommandImpl(myEvaluationContext.getSuspendContext()){
    @Override public void contextAction() throws Exception {
      final XValueChildrenList children=new XValueChildrenList();
      final NodeRenderer renderer=myValueDescriptor.getRenderer(myEvaluationContext.getDebugProcess());
      if (renderer instanceof ArrayRenderer) {
        ((ArrayRenderer)renderer).START_INDEX=currentStart;
        ((ArrayRenderer)renderer).END_INDEX=currentStart + XCompositeNode.MAX_CHILDREN_TO_SHOW - 1;
        currentStart+=XCompositeNode.MAX_CHILDREN_TO_SHOW;
      }
      final Ref<Integer> remainingNum=new Ref<Integer>(0);
      renderer.buildChildren(myValueDescriptor.getValue(),new ChildrenBuilder(){
        @Override public NodeDescriptorFactory getDescriptorManager(){
          return myNodeManager;
        }
        @Override public NodeManager getNodeManager(){
          return myNodeManager;
        }
        @Override public ValueDescriptor getParentDescriptor(){
          return myValueDescriptor;
        }
        @Override public void setRemaining(        int remaining){
          remainingNum.set(remaining);
        }
        @Override public void setChildren(        List<DebuggerTreeNode> nodes){
          for (          DebuggerTreeNode node : nodes) {
            final NodeDescriptor descriptor=node.getDescriptor();
            if (descriptor instanceof ValueDescriptorImpl) {
              children.add(create(JavaValue.this,(ValueDescriptorImpl)descriptor,myEvaluationContext,myNodeManager));
            }
 else             if (descriptor instanceof MessageDescriptor) {
              children.add("",new XValue(){
                @Override public void computePresentation(                @NotNull XValueNode node,                @NotNull XValuePlace place){
                  node.setPresentation(null,new XValuePresentation(){
                    @NotNull @Override public String getSeparator(){
                      return "";
                    }
                    @Override public void renderValue(                    @NotNull XValueTextRenderer renderer){
                      renderer.renderValue(descriptor.getLabel());
                    }
                  }
,false);
                }
              }
);
            }
          }
        }
      }
,myEvaluationContext);
      node.addChildren(children,true);
      if (remainingNum.get() > 0) {
        node.tooManyChildren(remainingNum.get());
      }
    }
  }
);
}
