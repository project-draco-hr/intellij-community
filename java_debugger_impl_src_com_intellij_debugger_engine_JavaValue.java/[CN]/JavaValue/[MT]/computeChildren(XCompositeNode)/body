{
  myEvaluationContext.getDebugProcess().getManagerThread().schedule(new DebuggerCommandImpl(){
    @Override protected void action() throws Exception {
      final XValueChildrenList children=new XValueChildrenList();
      final NodeRenderer renderer=myValueDescriptor.getRenderer(myEvaluationContext.getDebugProcess());
      renderer.buildChildren(myValueDescriptor.getValue(),new ChildrenBuilder(){
        @Override public NodeDescriptorFactory getDescriptorManager(){
          return myNodeManager;
        }
        @Override public NodeManager getNodeManager(){
          return new NodeManagerImpl(myEvaluationContext.getDebugProcess().getProject(),null){
            @Override public DebuggerTreeNodeImpl createMessageNode(            String s){
              return null;
            }
            @Override public DebuggerTreeNodeImpl createNode(            NodeDescriptor nodeDescriptor,            EvaluationContext evaluationContext){
              if (nodeDescriptor instanceof ValueDescriptorImpl) {
                children.add(new JavaValue((ValueDescriptorImpl)nodeDescriptor,(EvaluationContextImpl)evaluationContext));
              }
              return null;
            }
          }
;
        }
        @Override public ValueDescriptor getParentDescriptor(){
          return null;
        }
        @Override public void setChildren(        List<DebuggerTreeNode> children){
        }
      }
,myEvaluationContext);
      node.addChildren(children,true);
    }
  }
);
}
