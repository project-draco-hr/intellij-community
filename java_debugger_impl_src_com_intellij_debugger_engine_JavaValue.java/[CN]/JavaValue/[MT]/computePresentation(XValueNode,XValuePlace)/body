{
  final SuspendContextImpl suspendContext=myEvaluationContext.getSuspendContext();
  if (suspendContext.isResumed())   return;
  myEvaluationContext.getDebugProcess().getManagerThread().schedule(new SuspendContextCommandImpl(suspendContext){
    @Override public Priority getPriority(){
      return Priority.NORMAL;
    }
    @Override public void contextAction() throws Exception {
      if (!myContextSet) {
        myValueDescriptor.setContext(myEvaluationContext);
      }
      myValueDescriptor.updateRepresentation(myEvaluationContext,new DescriptorLabelListener(){
        @Override public void labelChanged(){
          Icon nodeIcon=DebuggerTreeRenderer.getValueIcon(myValueDescriptor);
          final String[] strings=splitValue(myValueDescriptor.getValueLabel());
          final String value=StringUtil.notNullize(strings[1]);
          String type=strings[0];
          XValuePresentation presentation;
          if (myValueDescriptor.isString()) {
            presentation=new TypedStringValuePresentation(value,type);
          }
 else {
            @SuppressWarnings("ThrowableResultOfMethodCallIgnored") EvaluateException exception=myValueDescriptor.getEvaluateException();
            if (myValueDescriptor.getLastRenderer() instanceof ToStringRenderer && exception == null) {
              presentation=new XRegularValuePresentation(StringUtil.wrapWithDoubleQuote(truncateToMaxLength(value)),type);
            }
 else             if (myValueDescriptor.getLastRenderer() instanceof CompoundReferenceRenderer && exception == null) {
              presentation=new XRegularValuePresentation(truncateToMaxLength(value),type);
            }
 else {
              presentation=new JavaValuePresentation(value,type,exception != null ? exception.getMessage() : null);
            }
          }
          if (myValueDescriptor.getLastRenderer() instanceof FullValueEvaluatorProvider) {
            node.setFullValueEvaluator(((FullValueEvaluatorProvider)myValueDescriptor.getLastRenderer()).getFullValueEvaluator(myEvaluationContext,myValueDescriptor));
          }
 else           if (value.length() > XValueNode.MAX_VALUE_LENGTH) {
            node.setFullValueEvaluator(new XFullValueEvaluator(){
              @Override public void startEvaluation(              @NotNull final XFullValueEvaluationCallback callback){
                myEvaluationContext.getDebugProcess().getManagerThread().schedule(new SuspendContextCommandImpl(suspendContext){
                  @Override public Priority getPriority(){
                    return Priority.NORMAL;
                  }
                  @Override public void contextAction() throws Exception {
                    final String valueAsString=myValueDescriptor.getValueText();
                    DebuggerInvocationUtil.invokeLater(getProject(),new Runnable(){
                      @Override public void run(){
                        callback.evaluated(valueAsString);
                      }
                    }
);
                  }
                }
);
              }
            }
);
          }
          node.setPresentation(nodeIcon,presentation,myValueDescriptor.isExpandable());
        }
      }
);
    }
  }
);
}
