{
  final SuspendContextImpl suspendContext=myEvaluationContext.getSuspendContext();
  myEvaluationContext.getManagerThread().schedule(new SuspendContextCommandImpl(suspendContext){
    @Override public Priority getPriority(){
      return Priority.NORMAL;
    }
    @Override protected void commandCancelled(){
      node.setPresentation(null,new JavaValuePresentation("",null,DebuggerBundle.message("error.context.has.changed"),myValueDescriptor),false);
    }
    @Override public void contextAction() throws Exception {
      if (!myContextSet) {
        myValueDescriptor.setContext(myEvaluationContext);
      }
      myValueDescriptor.updateRepresentation(myEvaluationContext,new DescriptorLabelListener(){
        @Override public void labelChanged(){
          Icon nodeIcon=DebuggerTreeRenderer.getValueIcon(myValueDescriptor);
          final String value=getValueString();
          XValuePresentation presentation;
          @SuppressWarnings("ThrowableResultOfMethodCallIgnored") EvaluateException exception=myValueDescriptor.getEvaluateException();
          presentation=new JavaValuePresentation(value,myValueDescriptor.getIdLabel(),exception != null ? exception.getMessage() : null,myValueDescriptor);
          if (myValueDescriptor.getLastRenderer() instanceof FullValueEvaluatorProvider) {
            XFullValueEvaluator evaluator=((FullValueEvaluatorProvider)myValueDescriptor.getLastRenderer()).getFullValueEvaluator(myEvaluationContext,myValueDescriptor);
            if (evaluator != null) {
              node.setFullValueEvaluator(evaluator);
            }
          }
 else           if (value.length() > XValueNode.MAX_VALUE_LENGTH) {
            node.setFullValueEvaluator(new JavaFullValueEvaluator(myEvaluationContext){
              @Override public void evaluate(              @NotNull final XFullValueEvaluationCallback callback) throws Exception {
                final ValueDescriptorImpl fullValueDescriptor=myValueDescriptor.getFullValueDescriptor();
                fullValueDescriptor.updateRepresentation(myEvaluationContext,new DescriptorLabelListener(){
                  @Override public void labelChanged(){
                    callback.evaluated(fullValueDescriptor.getValueText());
                  }
                }
);
              }
            }
);
          }
          node.setPresentation(nodeIcon,presentation,myValueDescriptor.isExpandable());
        }
      }
);
    }
  }
);
}
