{
  if (from instanceof PsiPrimitiveType) {
    final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(to);
    final PsiClass threadLocalClass=resolveResult.getElement();
    LOG.assertTrue(threadLocalClass != null);
    final PsiTypeParameter[] typeParameters=threadLocalClass.getTypeParameters();
    if (typeParameters.length == 1) {
      final PsiType initial=resolveResult.getSubstitutor().substitute(typeParameters[0]);
      final PsiPrimitiveType unboxedInitialType=PsiPrimitiveType.getUnboxedType(initial);
      if (unboxedInitialType != null) {
        LOG.assertTrue(initial != null);
        if (tryType != null) {
          final PsiType exprType=labeler.getTypeEvaluator().evaluateType(JavaPsiFacade.getElementFactory(threadLocalClass.getProject()).createExpressionFromText(tryType,context));
          if (exprType != null && unboxedInitialType.isAssignableFrom(exprType)) {
            return toBoxed(arg,from,context);
          }
        }
        return "new " + initial.getCanonicalText() + "(("+ unboxedInitialType.getCanonicalText()+ ")("+ arg+ "))";
      }
    }
  }
  return toBoxed(arg,from,context);
}
