{
  PyExpression qualifier=myElement.getQualifier();
  if (qualifier != null) {
    PyType type=qualifier.getType(TypeEvalContext.fast());
    if (type != null)     return type.getCompletionVariants(myElement,new ProcessingContext());
 else     return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
 else {
    List<Object> variants=new ArrayList<Object>();
    PsiFile current_file=myElement.getContainingFile();
    if (current_file != null)     current_file=current_file.getOriginalFile();
    int relative_level=0;
    final Set<String> names_already=new HashSet<String>();
    String ref_name=myElement.getName();
    Condition<PsiElement> node_filter=new PyResolveUtil.FilterNameNotIn(names_already);
    Condition<String> underscore_filter=new PyUtil.UnderscoreFilter(PyUtil.getInitialUnderscores(ref_name));
    boolean is_importing_from_a_module=false;
    PyFromImportStatement from_import=PsiTreeUtil.getParentOfType(myElement,PyFromImportStatement.class);
    if (from_import != null && myElement.getParent() != from_import) {
      PyReferenceExpression src=from_import.getImportSource();
      if (src != null) {
        PsiElement mod_candidate=src.getReference().resolve();
        if (mod_candidate instanceof PyExpression) {
          addImportedNames(from_import.getImportElements(),names_already,underscore_filter);
          final VariantsProcessor processor=new VariantsProcessor(myElement,node_filter,underscore_filter);
          processor.setPlainNamesOnly(true);
          PyResolveUtil.treeCrawlUp(processor,true,mod_candidate);
          variants.addAll(processor.getResultList());
          PyExpression module=(PyExpression)mod_candidate;
          PyType qualifierType=module.getType(TypeEvalContext.fast());
          if (qualifierType != null) {
            ProcessingContext ctx=new ProcessingContext();
            for (            Object ex : variants) {
              if (ex instanceof PyReferenceExpression) {
                names_already.add(((PyReferenceExpression)ex).getReferencedName());
              }
            }
            ctx.put(PyType.CTX_NAMES,names_already);
            Collections.addAll(variants,qualifierType.getCompletionVariants(myElement,ctx));
          }
          return variants.toArray();
        }
      }
 else {
        relative_level=from_import.getRelativeLevel();
        if (relative_level > 0) {
          PsiDirectory relative_dir=ResolveImportUtil.stepBackFrom(current_file,relative_level);
          if (relative_dir != null) {
            addImportedNames(from_import.getImportElements(),names_already,underscore_filter);
            fillFromDir(relative_dir,current_file,underscore_filter,variants,null);
          }
        }
      }
    }
 else {
      ASTNode n=myElement.getNode().getTreePrev();
      while (n != null && n.getElementType() == PyTokenTypes.DOT) {
        relative_level+=1;
        n=n.getTreePrev();
      }
      if (from_import != null) {
        addImportedNames(from_import.getImportElements(),names_already,underscore_filter);
        is_importing_from_a_module=true;
      }
 else {
        names_already.add(PyNames.FUTURE_MODULE);
        PyImportStatement import_stmt=PsiTreeUtil.getParentOfType(myElement,PyImportStatement.class);
        if (import_stmt != null) {
          addImportedNames(import_stmt.getImportElements(),names_already,underscore_filter);
        }
      }
      if (current_file != null && (relative_level > 0 || !ResolveImportUtil.isAbsoluteImportEnabledFor(current_file))) {
        fillFromDir(ResolveImportUtil.stepBackFrom(current_file,relative_level),current_file,underscore_filter,variants,is_importing_from_a_module ? ImportKeywordHandler.INSTANCE : null);
      }
    }
    if (relative_level == 0) {
      final CollectingRootVisitor visitor=new CollectingRootVisitor(((PyReferenceExpression)myElement).getManager());
      final Module module=ModuleUtil.findModuleForPsiElement(myElement);
      if (module != null) {
        ModuleRootManager.getInstance(module).processOrder(new ResolveImportUtil.SdkRootVisitingPolicy(visitor),null);
        for (        ModuleResult result : visitor.getResult()) {
          String name=result.getName();
          if (PyNames.isIdentifier(name) && underscore_filter.value(name)) {
            if (is_importing_from_a_module) {
              LookupElementBuilder lookup_item=LookupElementBuilder.create(name);
              if (!result.hasSubmodules())               lookup_item=lookup_item.setInsertHandler(ImportKeywordHandler.INSTANCE);
              variants.add(lookup_item);
            }
 else             variants.add(name);
          }
        }
      }
    }
    return ArrayUtil.toObjectArray(variants);
  }
}
