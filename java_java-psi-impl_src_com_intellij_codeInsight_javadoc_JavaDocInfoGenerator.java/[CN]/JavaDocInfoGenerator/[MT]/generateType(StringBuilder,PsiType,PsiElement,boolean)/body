{
  if (type instanceof PsiPrimitiveType) {
    String text=StringUtil.escapeXml(type.getCanonicalText());
    buffer.append(text);
    return text.length();
  }
  if (type instanceof PsiArrayType) {
    int rest=generateType(buffer,((PsiArrayType)type).getComponentType(),context,generateLink);
    if (type instanceof PsiEllipsisType) {
      buffer.append("...");
      return rest + 3;
    }
 else {
      buffer.append("[]");
      return rest + 2;
    }
  }
  if (type instanceof PsiCapturedWildcardType) {
    type=((PsiCapturedWildcardType)type).getWildcard();
  }
  if (type instanceof PsiWildcardType) {
    PsiWildcardType wt=(PsiWildcardType)type;
    buffer.append("?");
    PsiType bound=wt.getBound();
    if (bound != null) {
      final String keyword=wt.isExtends() ? " extends " : " super ";
      buffer.append(keyword);
      return generateType(buffer,bound,context,generateLink) + 1 + keyword.length();
    }
    return 1;
  }
  if (type instanceof PsiClassType) {
    PsiClassType.ClassResolveResult result=((PsiClassType)type).resolveGenerics();
    PsiClass psiClass=result.getElement();
    PsiSubstitutor psiSubst=result.getSubstitutor();
    if (psiClass == null) {
      String text="<font color=red>" + StringUtil.escapeXml(type.getCanonicalText()) + "</font>";
      buffer.append(text);
      return text.length();
    }
    String qName=psiClass.getQualifiedName();
    if (qName == null || psiClass instanceof PsiTypeParameter) {
      String text=StringUtil.escapeXml(type.getCanonicalText());
      buffer.append(text);
      return text.length();
    }
    int length;
    if (generateLink) {
      length=generateLink(buffer,qName,null,context,false);
    }
 else {
      buffer.append(qName);
      length=buffer.length();
    }
    if (psiClass.hasTypeParameters()) {
      StringBuilder subst=new StringBuilder();
      PsiTypeParameter[] params=psiClass.getTypeParameters();
      subst.append("&lt;");
      boolean goodSubst=true;
      for (int i=0; i < params.length; i++) {
        PsiType t=psiSubst.substitute(params[i]);
        if (t == null) {
          goodSubst=false;
          break;
        }
        length+=generateType(subst,t,context,generateLink);
        if (i < params.length - 1) {
          subst.append(", ");
        }
      }
      subst.append("&gt;");
      if (goodSubst) {
        String text=subst.toString();
        buffer.append(text);
      }
    }
    return length;
  }
  if (type instanceof PsiDisjunctionType || type instanceof PsiIntersectionType) {
    if (!generateLink) {
      final String text=StringUtil.escapeXml(type.getCanonicalText());
      buffer.append(text);
      return text.length();
    }
 else {
      final String separator=type instanceof PsiDisjunctionType ? " | " : " & ";
      final List<PsiType> componentTypes;
      if (type instanceof PsiIntersectionType) {
        componentTypes=Arrays.asList(((PsiIntersectionType)type).getConjuncts());
      }
 else {
        componentTypes=((PsiDisjunctionType)type).getDisjunctions();
      }
      int length=0;
      for (      PsiType psiType : componentTypes) {
        if (length > 0) {
          buffer.append(separator);
          length+=3;
        }
        length+=generateType(buffer,psiType,context,generateLink);
      }
      return length;
    }
  }
  return 0;
}
