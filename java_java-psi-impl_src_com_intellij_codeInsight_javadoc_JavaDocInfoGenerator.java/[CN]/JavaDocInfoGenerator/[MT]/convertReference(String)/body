{
  final String originalReference=href;
  String fragment=null;
  int hashPosition=href.indexOf('#');
  if (hashPosition >= 0) {
    fragment=href.substring(hashPosition + 1);
    href=href.substring(0,hashPosition);
  }
  if (href.isEmpty()) {
    PsiElement containingClass=myElement instanceof PsiMember ? ((PsiMember)myElement).getContainingClass() : null;
    PsiElement rootElement=containingClass == null ? myElement : containingClass;
    return createLinkWithRef(rootElement,fragment);
  }
  if (!href.toLowerCase().endsWith(".htm") && !href.toLowerCase().endsWith(".html")) {
    return originalReference;
  }
  href=href.substring(0,href.lastIndexOf('.'));
  String packageName=null;
  if (myElement instanceof PsiPackage) {
    packageName=((PsiPackage)myElement).getQualifiedName();
  }
 else {
    PsiFile file=myElement.getContainingFile();
    if (file instanceof PsiClassOwner) {
      packageName=((PsiClassOwner)file).getPackageName();
    }
  }
  if (packageName == null)   return originalReference;
  while (href.startsWith("../")) {
    if (packageName.isEmpty())     return originalReference;
    int dotPos=packageName.lastIndexOf('.');
    packageName=dotPos < 0 ? "" : packageName.substring(0,dotPos);
    href=href.substring(3);
  }
  href=href.replace('/','.');
  String qualifiedName=packageName.isEmpty() ? href : packageName + "." + href;
  PsiClass target=JavaPsiFacade.getInstance(myProject).findClass(qualifiedName,myElement.getResolveScope());
  if (target == null)   return originalReference;
  return createLinkWithRef(target,fragment);
}
