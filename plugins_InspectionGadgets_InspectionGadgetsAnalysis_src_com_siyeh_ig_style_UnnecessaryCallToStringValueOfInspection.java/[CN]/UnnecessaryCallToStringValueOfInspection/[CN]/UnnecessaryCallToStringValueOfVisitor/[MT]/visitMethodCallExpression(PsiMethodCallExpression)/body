{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String referenceName=methodExpression.getReferenceName();
  if (!"valueOf".equals(referenceName)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiExpression argument=ParenthesesUtils.stripParentheses(arguments[0]);
  if (argument == null) {
    return;
  }
  final PsiType argumentType=argument.getType();
  if (argumentType instanceof PsiArrayType) {
    final PsiArrayType arrayType=(PsiArrayType)argumentType;
    final PsiType componentType=arrayType.getComponentType();
    if (PsiType.CHAR.equals(componentType)) {
      return;
    }
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final String qualifiedName=aClass.getQualifiedName();
  if (!CommonClassNames.JAVA_LANG_STRING.equals(qualifiedName)) {
    return;
  }
  if (!TypeUtils.isJavaLangString(argumentType)) {
    final boolean throwable=TypeUtils.expressionHasTypeOrSubtype(argument,"java.lang.Throwable");
    if (ExpressionUtils.isConversionToStringNecessary(expression,throwable)) {
      return;
    }
  }
  if (argument instanceof PsiReferenceExpression) {
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)argument;
    final PsiElement target=referenceExpression.resolve();
    if (!(target instanceof PsiModifierListOwner) || !NullableNotNullManager.isNotNull((PsiModifierListOwner)target)) {
      return;
    }
  }
 else   if (argument instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)argument;
    final PsiMethod method1=methodCallExpression.resolveMethod();
    if (method1 == null || !NullableNotNullManager.isNotNull(method1)) {
      return;
    }
  }
  registerError(expression,calculateReplacementText(argument));
}
