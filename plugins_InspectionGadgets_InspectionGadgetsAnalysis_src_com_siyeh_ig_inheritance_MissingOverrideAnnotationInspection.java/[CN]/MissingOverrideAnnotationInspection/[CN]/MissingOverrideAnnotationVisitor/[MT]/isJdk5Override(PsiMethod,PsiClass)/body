{
  final PsiMethod[] superMethods=method.findSuperMethods();
  for (  PsiMethod superMethod : superMethods) {
    final PsiClass superClass=superMethod.getContainingClass();
    if (superClass == null || !InheritanceUtil.isInheritorOrSelf(methodClass,superClass,true)) {
      continue;
    }
    if (superClass.isInterface()) {
      continue;
    }
    if (methodClass.isInterface() && superMethod.hasModifierProperty(PsiModifier.PROTECTED)) {
      continue;
    }
    return true;
  }
  return false;
}
