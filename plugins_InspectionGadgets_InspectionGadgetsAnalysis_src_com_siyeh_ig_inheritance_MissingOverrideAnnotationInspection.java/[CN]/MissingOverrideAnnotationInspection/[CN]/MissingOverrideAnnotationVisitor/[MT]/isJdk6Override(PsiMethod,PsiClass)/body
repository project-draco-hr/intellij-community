{
  final PsiMethod[] superMethods=method.findSuperMethods();
  boolean hasSupers=false;
  for (  PsiMethod superMethod : superMethods) {
    final PsiClass superClass=superMethod.getContainingClass();
    if (!InheritanceUtil.isInheritorOrSelf(methodClass,superClass,true)) {
      continue;
    }
    hasSupers=true;
    if (!superMethod.hasModifierProperty(PsiModifier.PROTECTED)) {
      return true;
    }
  }
  return hasSupers && !methodClass.isInterface();
}
