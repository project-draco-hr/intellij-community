{
  final GlobalSearchScope scope=consumer.getResolveScope();
  final PsiClass categoryClass=GroovyPsiManager.getInstance(consumer.getProject()).findClassWithCache(className,scope);
  if (categoryClass == null) {
    return;
  }
  final VolatileNotNullLazyValue<GdkMethodHolder> methodsMap=new VolatileNotNullLazyValue<GdkMethodHolder>(){
    @NotNull @Override protected GdkMethodHolder compute(){
      return GdkMethodHolder.getHolderForClass(categoryClass,isStatic,scope);
    }
  }
;
  consumer.addMemberHolder(new CustomMembersHolder(){
    @Override public boolean processMembers(    GroovyClassDescriptor descriptor,    PsiScopeProcessor _processor,    ResolveState state){
      for (      PsiScopeProcessor each : GroovyResolverProcessor.allProcessors(_processor)) {
        if (ResolveUtil.shouldProcessMethods(each.getHint(ElementClassHint.KEY)) && !methodsMap.getValue().processMethods(each,state,descriptor.getPsiType(),descriptor.getProject())) {
          return false;
        }
      }
      return true;
    }
  }
);
}
