{
  PsiFile file=ObjectUtils.tryCast(element,PsiFile.class);
  if (file == null) {
    return;
  }
  final Project project=file.getProject();
  final CodeStyleSettings settings=CodeStyleSettingsManager.getInstance(project).getCurrentSettings();
  if (!Utils.isEnabled(settings) || PropertiesComponent.getInstance(project).getBoolean(EDITOR_CONFIG_ACCEPTED,false))   return;
  final List<EditorConfig.OutPair> pairs=SettingsProviderComponent.getInstance().getOutPairs(project,Utils.getFilePath(project,file.getVirtualFile()));
  if (!pairs.isEmpty()) {
    final Annotation annotation=holder.createInfoAnnotation(file,"EditorConfig is overriding Code Style settings for this file");
    annotation.setFileLevelAnnotation(true);
    annotation.setGutterIconRenderer(new MyGutterIconRenderer());
    annotation.registerFix(new IntentionAction(){
      @NotNull @Override public String getText(){
        return "Disable EditorConfig support";
      }
      @NotNull @Override public String getFamilyName(){
        return "EditorConfig";
      }
      @Override public boolean isAvailable(      @NotNull Project project,      Editor editor,      PsiFile file){
        return true;
      }
      @Override public void invoke(      @NotNull Project project,      Editor editor,      PsiFile file) throws IncorrectOperationException {
        settings.getCustomSettings(EditorConfigSettings.class).ENABLED=false;
        DaemonCodeAnalyzer.getInstance(project).restart();
      }
      @Override public boolean startInWriteAction(){
        return false;
      }
    }
);
    annotation.registerFix(new IntentionAction(){
      @NotNull @Override public String getText(){
        return "Dismiss";
      }
      @NotNull @Override public String getFamilyName(){
        return "EditorConfig";
      }
      @Override public boolean isAvailable(      @NotNull Project project,      Editor editor,      PsiFile file){
        return true;
      }
      @Override public void invoke(      @NotNull Project project,      Editor editor,      PsiFile file) throws IncorrectOperationException {
        PropertiesComponent.getInstance(project).setValue(EDITOR_CONFIG_ACCEPTED,"true");
        DaemonCodeAnalyzer.getInstance(project).restart();
      }
      @Override public boolean startInWriteAction(){
        return false;
      }
    }
);
  }
}
