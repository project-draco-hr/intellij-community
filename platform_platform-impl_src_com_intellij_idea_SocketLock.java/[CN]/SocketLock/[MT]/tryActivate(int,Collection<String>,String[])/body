{
  log("trying: port=%s",portNumber);
  args=checkForJetBrainsProtocolCommand(args);
  try {
    Socket socket=new Socket(InetAddress.getLoopbackAddress(),portNumber);
    try {
      socket.setSoTimeout(1000);
      boolean result=false;
      @SuppressWarnings("IOResourceOpenedButNotSafelyClosed") DataInputStream in=new DataInputStream(socket.getInputStream());
      while (true) {
        try {
          String path=in.readUTF();
          log("read: path=%s",path);
          if (PATHS_EOT_RESPONSE.equals(path)) {
            break;
          }
 else           if (paths.contains(path)) {
            result=true;
          }
        }
 catch (        IOException e) {
          log("read: %s",e.getMessage());
          break;
        }
      }
      if (result) {
        try {
          String token=FileUtil.loadFile(new File(mySystemPath,TOKEN_FILE));
          @SuppressWarnings("IOResourceOpenedButNotSafelyClosed") DataOutputStream out=new DataOutputStream(socket.getOutputStream());
          out.writeUTF(ACTIVATE_COMMAND + token + "\0"+ new File(".").getAbsolutePath()+ "\0"+ StringUtil.join(args,"\0"));
          out.flush();
          String response=in.readUTF();
          log("read: response=%s",response);
          if (response.equals(OK_RESPONSE)) {
            if (isShutdownCommand()) {
              printPID(portNumber);
            }
            return ActivateStatus.ACTIVATED;
          }
        }
 catch (        IOException e) {
          log(e);
        }
        return ActivateStatus.CANNOT_ACTIVATE;
      }
    }
  finally {
      socket.close();
    }
  }
 catch (  ConnectException e) {
    log("%s (stale port file?)",e.getMessage());
  }
catch (  IOException e) {
    log(e);
  }
  return ActivateStatus.NO_INSTANCE;
}
