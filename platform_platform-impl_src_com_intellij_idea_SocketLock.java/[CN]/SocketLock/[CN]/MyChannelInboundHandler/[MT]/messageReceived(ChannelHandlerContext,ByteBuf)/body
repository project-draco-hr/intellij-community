{
  while (true) {
switch (myState) {
case HEADER:
{
        ByteBuf buffer=getBufferIfSufficient(input,2,context);
        if (buffer == null) {
          return;
        }
        contentLength=buffer.readUnsignedShort();
        if (contentLength > 8192) {
          context.close();
          return;
        }
        myState=State.CONTENT;
      }
    break;
case CONTENT:
{
    CharSequence command=readChars(input);
    if (command == null) {
      return;
    }
    if (StringUtil.startsWith(command,PID_COMMAND)) {
      ByteBuf buffer=context.alloc().ioBuffer();
      ByteBufOutputStream out=new ByteBufOutputStream(buffer);
      String name=ManagementFactory.getRuntimeMXBean().getName();
      out.writeUTF(name);
      out.close();
      context.writeAndFlush(buffer);
    }
    if (StringUtil.startsWith(command,ACTIVATE_COMMAND)) {
      List<String> args=StringUtil.split(command.subSequence(ACTIVATE_COMMAND.length(),command.length()).toString(),"\0");
      boolean tokenOK=!args.isEmpty() && myToken.equals(args.get(0));
      if (!tokenOK) {
        log(new UnsupportedOperationException("unauthorized request: " + command));
        Notifications.Bus.notify(new Notification(Notifications.SYSTEM_MESSAGES_GROUP_ID,IdeBundle.message("activation.auth.title"),IdeBundle.message("activation.auth.message"),NotificationType.WARNING));
      }
 else {
        Consumer<List<String>> listener=myActivateListener.get();
        if (listener != null) {
          listener.consume(args.subList(1,args.size()));
        }
      }
      ByteBuf buffer=context.alloc().ioBuffer(4);
      ByteBufOutputStream out=new ByteBufOutputStream(buffer);
      out.writeUTF(OK_RESPONSE);
      out.close();
      context.writeAndFlush(buffer);
    }
    context.close();
  }
break;
}
}
}
