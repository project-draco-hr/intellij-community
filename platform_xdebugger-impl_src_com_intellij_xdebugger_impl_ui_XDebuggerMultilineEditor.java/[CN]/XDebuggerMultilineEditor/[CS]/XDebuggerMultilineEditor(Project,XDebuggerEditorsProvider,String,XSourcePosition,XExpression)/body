{
  super(project,debuggerEditorsProvider,EvaluationMode.CODE_FRAGMENT,historyId,sourcePosition);
  myExpression=XExpressionImpl.changeMode(text,getMode());
  myEditorTextField=new EditorTextField(createDocument(myExpression),project,debuggerEditorsProvider.getFileType()){
    @Override protected EditorEx createEditor(){
      final EditorEx editor=super.createEditor();
      editor.setVerticalScrollbarVisible(true);
      return editor;
    }
    @Override public Object getData(    String dataId){
      if (LangDataKeys.CONTEXT_LANGUAGES.is(dataId)) {
        return new Language[]{myExpression.getLanguage()};
      }
 else       if (CommonDataKeys.PSI_FILE.is(dataId)) {
        return PsiDocumentManager.getInstance(getProject()).getPsiFile(getDocument());
      }
      return super.getData(dataId);
    }
    @Override protected boolean isOneLineMode(){
      return false;
    }
  }
;
  myEditorTextField.setFontInheritedFromLAF(false);
  myComponent=addChooseFactoryLabel(myEditorTextField,true);
}
