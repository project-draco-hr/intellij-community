{
  myProject=file.getProject();
  myFile=file;
  myDocument=document;
  myCurrentEntryIndex=-1;
  myLanguageLevel=PsiUtil.getLanguageLevel(file);
  final FileViewProvider viewProvider=myFile.getViewProvider();
  ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  VirtualFile virtualFile=viewProvider.getVirtualFile();
  myInLibrary=fileIndex.isInLibraryClasses(virtualFile) || fileIndex.isInLibrarySource(virtualFile);
  myRefCountHolder=refCountHolder;
  ApplicationManager.getApplication().assertReadAccessAllowed();
  InspectionProfile profile=InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile();
  myDeadCodeKey=HighlightDisplayKey.find(UnusedDeclarationInspectionBase.SHORT_NAME);
  myDeadCodeInspection=(UnusedDeclarationInspectionBase)profile.getUnwrappedTool(UnusedDeclarationInspectionBase.SHORT_NAME,myFile);
  LOG.assertTrue(ApplicationManager.getApplication().isUnitTestMode() || myDeadCodeInspection != null);
  myUnusedSymbolInspection=myDeadCodeInspection != null ? myDeadCodeInspection.getSharedLocalInspectionTool() : null;
  myDeadCodeInfoType=myDeadCodeKey == null ? HighlightInfoType.UNUSED_SYMBOL : new HighlightInfoType.HighlightInfoTypeImpl(profile.getErrorLevel(myDeadCodeKey,myFile).getSeverity(),HighlightInfoType.UNUSED_SYMBOL.getAttributesKey());
}
