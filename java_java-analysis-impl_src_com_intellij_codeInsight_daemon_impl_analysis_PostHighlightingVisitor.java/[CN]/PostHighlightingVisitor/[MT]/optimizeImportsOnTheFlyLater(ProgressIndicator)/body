{
  if ((myHasRedundantImports || myHasMissortedImports) && !progress.isCanceled()) {
    Disposable invokeFixLater=new Disposable(){
      @Override public void dispose(){
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            if (myProject.isDisposed() || !myFile.isValid())             return;
            IntentionAction optimizeImportsFix=QuickFixFactory.getInstance().createOptimizeImportsFix(true);
            if (optimizeImportsFix.isAvailable(myProject,null,myFile) && myFile.isWritable()) {
              optimizeImportsFix.invoke(myProject,null,myFile);
            }
          }
        }
);
      }
    }
;
    Disposer.register(myHighlightingSession,invokeFixLater);
    if (progress.isCanceled()) {
      Disposer.dispose(invokeFixLater);
      Disposer.dispose(myHighlightingSession);
      progress.checkCanceled();
    }
  }
}
