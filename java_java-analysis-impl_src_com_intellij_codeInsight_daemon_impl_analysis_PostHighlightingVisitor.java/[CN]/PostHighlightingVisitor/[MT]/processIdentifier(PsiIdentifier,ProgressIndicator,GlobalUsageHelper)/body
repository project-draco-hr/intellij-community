{
  if (SuppressionUtil.inspectionResultSuppressed(identifier,myUnusedSymbolInspection))   return null;
  PsiElement parent=identifier.getParent();
  if (parent instanceof PsiLocalVariable && myUnusedSymbolInspection.LOCAL_VARIABLE) {
    return processLocalVariable((PsiLocalVariable)parent,identifier,progress);
  }
  if (parent instanceof PsiField && compareVisibilities((PsiModifierListOwner)parent,myUnusedSymbolInspection.getFieldVisibility())) {
    return processField(myProject,(PsiField)parent,identifier,progress,helper);
  }
  if (parent instanceof PsiParameter) {
    final PsiElement declarationScope=((PsiParameter)parent).getDeclarationScope();
    if (declarationScope instanceof PsiMethod ? compareVisibilities((PsiModifierListOwner)declarationScope,myUnusedSymbolInspection.getParameterVisibility()) : myUnusedSymbolInspection.LOCAL_VARIABLE) {
      if (SuppressionUtil.isSuppressed(identifier,UnusedSymbolLocalInspectionBase.UNUSED_PARAMETERS_SHORT_NAME))       return null;
      return processParameter(myProject,(PsiParameter)parent,identifier,progress);
    }
  }
  if (parent instanceof PsiMethod) {
    if (myUnusedSymbolInspection.isIgnoreAccessors() && PropertyUtil.isSimplePropertyAccessor((PsiMethod)parent)) {
      return null;
    }
    if (compareVisibilities((PsiModifierListOwner)parent,myUnusedSymbolInspection.getMethodVisibility())) {
      return processMethod(myProject,(PsiMethod)parent,identifier,progress,helper);
    }
  }
  if (parent instanceof PsiClass && compareVisibilities((PsiModifierListOwner)parent,myUnusedSymbolInspection.getClassVisibility())) {
    return processClass(myProject,(PsiClass)parent,identifier,progress,helper);
  }
  return null;
}
