{
  runInBackground(new ThrowableConsumer<ProgressIndicator,VcsException>(){
    @Override public void consume(    ProgressIndicator indicator) throws VcsException {
      boolean initialization=myLogData == null;
      boolean isFullLogReady=!initialization && myLogData.isFullLogReady();
      boolean fairRefresh=invalidateWholeLog || !isFullLogReady;
      Map<VirtualFile,List<TimedVcsCommit>> logsToBuild=ContainerUtil.newHashMap();
      Map<VirtualFile,Collection<VcsRef>> refsByRoot=ContainerUtil.newHashMap();
      for (      Map.Entry<VirtualFile,VcsLogProvider> entry : myLogProviders.entrySet()) {
        VirtualFile root=entry.getKey();
        VcsLogProvider logProvider=entry.getValue();
        List<? extends VcsFullCommitDetails> firstBlockDetails=logProvider.readFirstBlock(root,fairRefresh);
        Collection<VcsRef> newRefs=logProvider.readAllRefs(root);
        myDetailsGetter.saveInCache(firstBlockDetails);
        myMiniDetailsGetter.saveInCache(firstBlockDetails);
        List<TimedVcsCommit> firstBlockCommits=ContainerUtil.map(firstBlockDetails,new Function<VcsFullCommitDetails,TimedVcsCommit>(){
          @Override public TimedVcsCommit fun(          VcsFullCommitDetails details){
            return myFactory.createTimedCommit(details.getHash(),details.getParents(),details.getAuthorTime());
          }
        }
);
        List<TimedVcsCommit> refreshedLog;
        int newCommitsCount;
        if (fairRefresh) {
          refreshedLog=firstBlockCommits;
          newCommitsCount=-1;
        }
 else {
          Pair<List<TimedVcsCommit>,Integer> joinResult=myLogJoiner.addCommits(myLogData.getLog(root),myLogData.getRefs(root),firstBlockCommits,newRefs);
          refreshedLog=joinResult.getFirst();
          newCommitsCount=joinResult.getSecond();
        }
        logsToBuild.put(root,refreshedLog);
        refsByRoot.put(root,newRefs);
      }
      List<TimedVcsCommit> compoundLog=myMultiRepoJoiner.join(logsToBuild.values());
      Collection<VcsRef> allRefs=new ArrayList<VcsRef>();
      for (      Collection<VcsRef> refs : refsByRoot.values()) {
        allRefs.addAll(refs);
      }
      final DataPack dataPack=DataPack.build(compoundLog,allRefs,indicator);
      myLogData=new LogData(logsToBuild,refsByRoot,dataPack,isFullLogReady);
      UIUtil.invokeAndWaitIfNeeded(new Runnable(){
        @Override public void run(){
          onSuccess.consume(dataPack);
        }
      }
);
    }
  }
);
}
