{
  super(project,true);
  setTitle(PyBundle.message("sdk.edit.dialog.title"));
  myNameTextField.setText(sdk.getName());
  myNameTextField.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      String nameError=nameValidator.fun(getName());
      setErrorText(nameError);
      setOKActionEnabled(nameError == null);
    }
  }
);
  myInterpreterPathTextField.setText(sdk.getHomePath());
  myInterpreterPathTextField.addBrowseFolderListener(PyBundle.message("sdk.edit.dialog.specify.interpreter.path"),null,project,PythonSdkType.getInstance().getHomeChooserDescriptor());
  myRemoveAssociationLabel.setVisible(false);
  if (PythonSdkType.getVirtualEnvRoot(sdk.getHomePath()) == null) {
    myAssociateCheckbox.setVisible(false);
  }
 else {
    PythonSdkAdditionalData data=(PythonSdkAdditionalData)sdk.getSdkAdditionalData();
    if (data != null) {
      final String path=data.getAssociatedProjectPath();
      if (path != null) {
        myAssociateCheckbox.setSelected(true);
        final String basePath=project.getBasePath();
        if (basePath != null && !path.equals(FileUtil.toSystemIndependentName(basePath))) {
          myAssociateCheckbox.setEnabled(false);
          myAssociateCheckbox.setText(PyBundle.message("sdk.edit.dialog.associate.virtual.env.with.path",FileUtil.toSystemDependentName(path)));
          myRemoveAssociationLabel.setVisible(true);
        }
      }
    }
  }
  myWasAssociated=myAssociateCheckbox.isSelected();
  init();
  new ClickListener(){
    @Override public boolean onClick(    @NotNull MouseEvent e,    int clickCount){
      myAssociateCheckbox.setSelected(false);
      myAssociateCheckbox.setEnabled(true);
      myAssociateCheckbox.setText(PyBundle.message("sdk.edit.dialog.associate.virtual.env.current.project"));
      myRemoveAssociationLabel.setVisible(false);
      myAssociationRemoved=true;
      return true;
    }
  }
.installOn(myRemoveAssociationLabel);
}
