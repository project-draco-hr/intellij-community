{
  super.visitMethodCallExpression(expression);
  final String methodName=MethodCallUtils.getMethodName(expression);
  if (!HardcodedMethodConstants.PRINT_STACK_TRACE.equals(methodName)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  if (argumentList.getExpressions().length != 0) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  if (!InheritanceUtil.isInheritor(containingClass,false,CommonClassNames.JAVA_LANG_THROWABLE)) {
    return;
  }
  registerMethodCallError(expression,expression);
}
