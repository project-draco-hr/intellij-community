{
  if (path == null || path.isEmpty()) {
    return path;
  }
  if (".".equals(path)) {
    return "";
  }
  path=path.replace(separatorChar,'/');
  if (path.indexOf('/') == -1) {
    return path;
  }
  final String finalPath=path;
  NotNullProducer<String> realCanonicalPath=!resolveSymlinksIfNecessary ? null : new NotNullProducer<String>(){
    @NotNull @Override public String produce(){
      try {
        return new File(finalPath).getCanonicalPath().replace(separatorChar,'/');
      }
 catch (      IOException ignore) {
        return toCanonicalPath(finalPath,separatorChar,removeLastSlash,false);
      }
    }
  }
;
  StringBuilder result=new StringBuilder(path.length());
  int start=processRoot(path,result);
  int dots=0;
  boolean separator=true;
  for (int i=start; i < path.length(); ++i) {
    char c=path.charAt(i);
    if (c == '/') {
      if (!separator) {
        if (!processDots(result,dots,start,resolveSymlinksIfNecessary)) {
          return realCanonicalPath.produce();
        }
        dots=0;
      }
      separator=true;
    }
 else     if (c == '.') {
      if (separator || dots > 0) {
        ++dots;
      }
 else {
        result.append('.');
      }
      separator=false;
    }
 else {
      if (dots > 0) {
        StringUtil.repeatSymbol(result,'.',dots);
        dots=0;
      }
      result.append(c);
      separator=false;
    }
  }
  if (dots > 0) {
    if (!processDots(result,dots,start,resolveSymlinksIfNecessary)) {
      return realCanonicalPath.produce();
    }
  }
  int lastChar=result.length() - 1;
  if (removeLastSlash && lastChar >= 0 && result.charAt(lastChar) == '/' && lastChar > start) {
    result.deleteCharAt(lastChar);
  }
  return result.toString();
}
