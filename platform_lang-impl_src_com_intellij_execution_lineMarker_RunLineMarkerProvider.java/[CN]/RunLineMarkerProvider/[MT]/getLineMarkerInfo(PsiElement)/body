{
  List<RunLineMarkerContributor> contributors=RunLineMarkerContributor.EXTENSION.allForLanguage(element.getLanguage());
  DefaultActionGroup actionGroup=null;
  Icon icon=null;
  final List<RunLineMarkerContributor.Info> infos=new ArrayList<RunLineMarkerContributor.Info>();
  for (  RunLineMarkerContributor contributor : contributors) {
    RunLineMarkerContributor.Info info=contributor.getInfo(element);
    if (info == null) {
      continue;
    }
    if (icon == null) {
      icon=info.icon;
    }
    if (actionGroup == null) {
      actionGroup=new DefaultActionGroup();
    }
    infos.add(info);
    for (    AnAction action : info.actions) {
      actionGroup.add(new LineMarkerActionWrapper(element,action));
    }
    actionGroup.add(new Separator());
  }
  if (icon == null)   return null;
  final DefaultActionGroup finalActionGroup=actionGroup;
  Function<PsiElement,String> tooltipProvider=new Function<PsiElement,String>(){
    @Override public String fun(    PsiElement element){
      final StringBuilder tooltip=new StringBuilder();
      for (      RunLineMarkerContributor.Info info : infos) {
        if (info.tooltipProvider != null) {
          if (tooltip.length() != 0) {
            tooltip.append("\n");
          }
          tooltip.append(info.tooltipProvider.fun(element));
        }
      }
      return tooltip.length() == 0 ? null : tooltip.toString();
    }
  }
;
  return new LineMarkerInfo<PsiElement>(element,element.getTextRange(),icon,Pass.UPDATE_ALL,tooltipProvider,null,GutterIconRenderer.Alignment.CENTER){
    @Nullable @Override public GutterIconRenderer createGutterRenderer(){
      return new LineMarkerGutterIconRenderer<PsiElement>(this){
        @Override public AnAction getClickAction(){
          return null;
        }
        @Override public boolean isNavigateAction(){
          return true;
        }
        @Nullable @Override public ActionGroup getPopupMenuActions(){
          return finalActionGroup;
        }
      }
;
    }
  }
;
}
