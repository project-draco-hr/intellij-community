{
  return new ClassResolveResult(){
    private final PsiClass myBaseClass=resolve();
    private final NotNullLazyValue<PsiSubstitutor> mySubstitutor=new NotNullLazyValue<PsiSubstitutor>(){
      @NotNull @Override protected PsiSubstitutor compute(){
        return inferSubstitutor(myBaseClass);
      }
    }
;
    @Override public PsiClass getElement(){
      return myBaseClass;
    }
    @Override @NotNull public PsiSubstitutor getSubstitutor(){
      return mySubstitutor.getValue();
    }
    @Override public boolean isPackagePrefixPackageReference(){
      return false;
    }
    @Override public boolean isAccessible(){
      return true;
    }
    @Override public boolean isStaticsScopeCorrect(){
      return true;
    }
    @Override @Nullable public PsiElement getCurrentFileResolveScope(){
      return null;
    }
    @Override public boolean isValidResult(){
      return isStaticsScopeCorrect() && isAccessible();
    }
  }
;
}
