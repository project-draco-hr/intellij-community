{
  SearchScope customScope=myFindModel.getCustomScope();
  final GlobalSearchScope globalCustomScope=toGlobal(customScope);
class EnumContentIterator implements ContentIterator {
    final Set<PsiFile> myFiles=new LinkedHashSet<PsiFile>();
    @Override public boolean processFile(    @NotNull final VirtualFile virtualFile){
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          ProgressManager.checkCanceled();
          if (virtualFile.isDirectory() || !virtualFile.isValid() || !myFileMask.value(virtualFile)|| (globalCustomScope != null && !globalCustomScope.contains(virtualFile))) {
            return;
          }
          if (skipIndexed && isCoveredByIdIndex(virtualFile)) {
            return;
          }
          PsiFile psiFile=myPsiManager.findFile(virtualFile);
          if (psiFile != null && !(psiFile instanceof PsiBinaryFile) && !alreadySearched.contains(psiFile)) {
            PsiFile sourceFile=(PsiFile)psiFile.getNavigationElement();
            if (sourceFile != null)             psiFile=sourceFile;
            myFiles.add(psiFile);
          }
        }
      }
);
      return true;
    }
    @NotNull private Collection<PsiFile> getFiles(){
      return myFiles;
    }
  }
  EnumContentIterator iterator=new EnumContentIterator();
  if (customScope instanceof LocalSearchScope) {
    for (    VirtualFile file : getLocalScopeFiles((LocalSearchScope)customScope)) {
      iterator.processFile(file);
    }
  }
 else   if (myPsiDirectory != null) {
    myFileIndex.iterateContentUnderDirectory(myPsiDirectory.getVirtualFile(),iterator);
  }
 else {
    boolean success=myFileIndex.iterateContent(iterator);
    if (success && globalCustomScope != null && globalCustomScope.isSearchInLibraries()) {
      final VirtualFile[] librarySources=ApplicationManager.getApplication().runReadAction(new Computable<VirtualFile[]>(){
        @Override public VirtualFile[] compute(){
          OrderEnumerator enumerator=myModule == null ? OrderEnumerator.orderEntries(myProject) : OrderEnumerator.orderEntries(myModule);
          return enumerator.withoutModuleSourceEntries().withoutDepModules().getSourceRoots();
        }
      }
);
      iterateAll(librarySources,globalCustomScope,iterator);
    }
  }
  return iterator.getFiles();
}
