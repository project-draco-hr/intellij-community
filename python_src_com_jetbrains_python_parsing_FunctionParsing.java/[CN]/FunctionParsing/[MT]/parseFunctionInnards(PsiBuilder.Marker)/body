{
  myBuilder.advanceLexer();
  if (myBuilder.getTokenType() == PyTokenTypes.IDENTIFIER) {
    myBuilder.advanceLexer();
  }
 else {
    myBuilder.error(message("PARSE.expected.func.name"));
  }
  parseParameterList();
  if (myContext.getLanguageLevel().isPy3K() && myBuilder.getTokenType() == PyTokenTypes.MINUS) {
    PsiBuilder.Marker maybeReturnAnnotation=myBuilder.mark();
    nextToken();
    if (matchToken(PyTokenTypes.GT)) {
      if (!myContext.getExpressionParser().parseSingleExpression(false)) {
        myBuilder.error(message("PARSE.expected.expression"));
      }
      maybeReturnAnnotation.done(PyElementTypes.ANNOTATION);
    }
 else {
      maybeReturnAnnotation.rollbackTo();
    }
  }
  checkMatches(PyTokenTypes.COLON,message("PARSE.expected.colon"));
  getStatementParser().parseSuite(functionMarker,PyElementTypes.FUNCTION_DECLARATION);
}
