{
  LOG.assertTrue(builder.getTokenType() == PyTokenTypes.AT);
  final PsiBuilder.Marker functionMarker=builder.mark();
  builder.advanceLexer();
  getStatementParser().parseDottedName();
  if (builder.getTokenType() == PyTokenTypes.LPAR) {
    getExpressionParser().parseArgumentList(builder);
  }
  checkMatches(PyTokenTypes.STATEMENT_BREAK,"statement break expected");
  if (builder.getTokenType() == PyTokenTypes.AT) {
    parseDecoratedFunctionDeclaration(builder);
  }
 else   if (builder.getTokenType() == PyTokenTypes.DEF_KEYWORD) {
    parseFunctionDeclaration(builder);
  }
 else {
    builder.error("'def' or '@' expected");
  }
  functionMarker.done(PyElementTypes.DECORATED_FUNCTION_DECLARATION);
}
