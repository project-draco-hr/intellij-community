{
  assertCurrentToken(PyTokenTypes.AT);
  final PsiBuilder.Marker functionMarker=myBuilder.mark();
  myBuilder.advanceLexer();
  getStatementParser().parseDottedName();
  if (myBuilder.getTokenType() == PyTokenTypes.LPAR) {
    getExpressionParser().parseArgumentList(myBuilder);
  }
  checkMatches(PyTokenTypes.STATEMENT_BREAK,"statement break expected");
  if (myBuilder.getTokenType() == PyTokenTypes.AT) {
    parseDecoratedFunctionDeclaration();
  }
 else   if (myBuilder.getTokenType() == PyTokenTypes.DEF_KEYWORD) {
    parseFunctionDeclaration();
  }
 else {
    myBuilder.error("'def' or '@' expected");
  }
  functionMarker.done(PyElementTypes.DECORATED_FUNCTION_DECLARATION);
}
