{
  PsiBuilder.Marker parameterList;
  parameterList=myBuilder.mark();
  if (advanceLexer) {
    myBuilder.advanceLexer();
  }
  boolean first=true;
  while (myBuilder.getTokenType() != endToken) {
    if (first) {
      first=false;
    }
 else {
      if (myBuilder.getTokenType() == PyTokenTypes.COMMA) {
        myBuilder.advanceLexer();
      }
 else       if (myBuilder.getTokenType() == PyTokenTypes.LPAR) {
        parseParameterSubList();
      }
 else {
        myBuilder.error(", or ( or ) expected");
        break;
      }
    }
    final PsiBuilder.Marker parameter=myBuilder.mark();
    boolean isStarParameter=false;
    if (myBuilder.getTokenType() == PyTokenTypes.MULT || myBuilder.getTokenType() == PyTokenTypes.EXP) {
      myBuilder.advanceLexer();
      isStarParameter=true;
    }
    if (myBuilder.getTokenType() == PyTokenTypes.IDENTIFIER) {
      myBuilder.advanceLexer();
      if (myBuilder.getTokenType() == PyTokenTypes.EQ && !isStarParameter) {
        myBuilder.advanceLexer();
        getExpressionParser().parseSingleExpression(false);
      }
      parameter.done(PyElementTypes.FORMAL_PARAMETER);
    }
 else {
      myBuilder.error("formal parameter name expected");
      parameter.rollbackTo();
    }
  }
  if (myBuilder.getTokenType() == endToken) {
    myBuilder.advanceLexer();
  }
  parameterList.done(PyElementTypes.PARAMETER_LIST);
}
