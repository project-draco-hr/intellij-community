{
  final PsiMethod psiMethod=location.getPsiElement();
  final PsiClass aClass=location instanceof MethodLocation ? ((MethodLocation)location).getContainingClass() : psiMethod.getContainingClass();
  if (aClass == null || !isTestClass(aClass,checkAbstract,true))   return false;
  if (isTestAnnotated(psiMethod))   return true;
  if (psiMethod.isConstructor())   return false;
  if (!psiMethod.hasModifierProperty(PsiModifier.PUBLIC))   return false;
  if (psiMethod.hasModifierProperty(PsiModifier.ABSTRACT))   return false;
  if (AnnotationUtil.isAnnotated(psiMethod,CONFIGURATIONS_ANNOTATION_NAME,false))   return false;
  if (checkRunWith) {
    PsiAnnotation annotation=AnnotationUtil.findAnnotation(aClass,RUN_WITH);
    if (annotation != null) {
      return !isParameterized(annotation);
    }
  }
  if (psiMethod.getParameterList().getParametersCount() > 0)   return false;
  if (psiMethod.hasModifierProperty(PsiModifier.STATIC))   return false;
  if (!psiMethod.getName().startsWith("test"))   return false;
  PsiClass testCaseClass=getTestCaseClassOrNull(location);
  return testCaseClass != null && psiMethod.getContainingClass().isInheritor(testCaseClass,true) && PsiType.VOID.equals(psiMethod.getReturnType());
}
