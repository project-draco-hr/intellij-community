{
  final String policyAgreement="Privacy Policy Agreement";
  try {
    pause(new Condition("Waiting for " + policyAgreement + " dialog"){
      @Override public boolean test(){
        try {
          robot.finder().find(new GenericTypeMatcher<JDialog>(JDialog.class){
            @Override protected boolean isMatching(            @NotNull JDialog dialog){
              if (dialog.getTitle() == null)               return false;
              return dialog.getTitle().contains(policyAgreement) && dialog.isShowing();
            }
          }
);
        }
 catch (        ComponentLookupException e) {
          return false;
        }
        return true;
      }
    }
,MINUTE_TIMEOUT);
  }
 catch (  WaitTimedOutError timedOutError) {
    LOG.info(policyAgreement + " dialog wasn't found. Skipped to next step");
    return;
  }
  try {
    final DialogFixture privacyDialogFixture=findDialog(new GenericTypeMatcher<JDialog>(JDialog.class){
      @Override protected boolean isMatching(      @NotNull JDialog dialog){
        if (dialog.getTitle() == null)         return false;
        return dialog.getTitle().contains(policyAgreement) && dialog.isShowing();
      }
    }
).withTimeout(LONG_TIMEOUT.duration()).using(robot);
    String buttonText="Accept";
    JButton acceptButton=privacyDialogFixture.button(new GenericTypeMatcher<JButton>(JButton.class){
      @Override protected boolean isMatching(      @Nonnull JButton button){
        if (button.getText() == null)         return false;
        return button.getText().equals(buttonText);
      }
    }
).target();
    execute(new GuiTask(){
      @Override protected void executeInEDT() throws Throwable {
        EdtInvocationManager.getInstance().invokeLater(new Runnable(){
          @Override public void run(){
            acceptButton.doClick();
          }
        }
);
      }
    }
);
  }
 catch (  WaitTimedOutError we) {
    System.out.println("Timed out waiting for \"" + policyAgreement + "\" JDialog. Continue...");
  }
}
