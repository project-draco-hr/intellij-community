{
  GuiActionRunner.executeInEDT(false);
  Robot robot=null;
  try {
    robot=BasicRobot.robotWithCurrentAwtHierarchy();
    final MyProjectManagerListener listener=new MyProjectManagerListener();
    acceptAgreement(robot);
    findFrame(new GenericTypeMatcher<Frame>(Frame.class){
      @Override protected boolean isMatching(      @NotNull Frame frame){
        if (frame instanceof IdeFrame) {
          if (frame instanceof IdeFrameImpl) {
            listener.myActive=true;
            ProjectManager.getInstance().addProjectManagerListener(listener);
          }
          return true;
        }
        return false;
      }
    }
).withTimeout(LONG_TIMEOUT.duration()).using(robot);
    if (listener.myActive) {
      pause(new Condition("Project to be opened"){
        @Override public boolean test(){
          boolean notified=listener.myNotified;
          if (notified) {
            ProgressManager progressManager=ProgressManager.getInstance();
            boolean isIdle=!progressManager.hasModalProgressIndicator() && !progressManager.hasProgressIndicator() && !progressManager.hasUnsafeProgressIndicator();
            if (isIdle) {
              ProjectManager.getInstance().removeProjectManagerListener(listener);
            }
            return isIdle;
          }
          return false;
        }
      }
,LONG_TIMEOUT);
    }
  }
  finally {
    GuiActionRunner.executeInEDT(true);
    if (robot != null) {
      robot.cleanUpWithoutDisposingWindows();
    }
  }
}
