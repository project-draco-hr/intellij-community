{
  JqlFieldType operandType;
  boolean listFunctionExpected;
  PsiElement pos=parameters.getPosition();
  JqlHistoryPredicate predicate=PsiTreeUtil.getParentOfType(pos,JqlHistoryPredicate.class);
  if (predicate != null) {
    listFunctionExpected=false;
    JqlHistoryPredicate.Type predicateType=predicate.getType();
switch (predicateType) {
case BEFORE:
case AFTER:
case DURING:
case ON:
      operandType=JqlFieldType.DATE;
    break;
case BY:
  operandType=JqlFieldType.USER;
break;
default :
operandType=findTypeOfField(pos);
}
}
 else {
operandType=findTypeOfField(pos);
listFunctionExpected=insideClauseWithListOperator(pos);
}
for (String functionName : JqlStandardFunction.allOfType(operandType,listFunctionExpected)) {
result.addElement(LookupElementBuilder.create(functionName + "()"));
}
}
