{
  final IElementType tokenType=builder.getTokenType();
  if (TokenSets.BUILT_IN_TYPES.contains(tokenType)) {
    ParserUtils.eatElement(builder,GroovyElementTypes.BUILT_IN_TYPE_EXPRESSION);
    return GroovyElementTypes.BUILT_IN_TYPE_EXPRESSION;
  }
  if (GroovyTokenTypes.kNEW == tokenType) {
    PsiBuilder.Marker marker=builder.mark();
    final GroovyElementType type=newExprParse(builder,parser);
    marker.done(type);
    return type;
  }
  if (GroovyTokenTypes.mIDENT == tokenType || GroovyTokenTypes.kSUPER == tokenType || GroovyTokenTypes.kTHIS == tokenType) {
    ParserUtils.eatElement(builder,GroovyElementTypes.REFERENCE_EXPRESSION);
    return GroovyElementTypes.REFERENCE_EXPRESSION;
  }
  if (GroovyTokenTypes.mGSTRING_BEGIN == tokenType) {
    final boolean result=CompoundStringExpression.parse(builder,parser,false,GroovyTokenTypes.mGSTRING_BEGIN,GroovyTokenTypes.mGSTRING_CONTENT,GroovyTokenTypes.mGSTRING_END,null,GroovyElementTypes.GSTRING,GroovyBundle.message("string.end.expected"));
    return result ? GroovyElementTypes.GSTRING : GroovyElementTypes.LITERAL;
  }
  if (GroovyTokenTypes.mREGEX_BEGIN == tokenType) {
    CompoundStringExpression.parse(builder,parser,false,GroovyTokenTypes.mREGEX_BEGIN,GroovyTokenTypes.mREGEX_CONTENT,GroovyTokenTypes.mREGEX_END,GroovyTokenTypes.mREGEX_LITERAL,GroovyElementTypes.REGEX,GroovyBundle.message("regex.end.expected"));
    return GroovyElementTypes.REGEX;
  }
  if (GroovyTokenTypes.mDOLLAR_SLASH_REGEX_BEGIN == tokenType) {
    CompoundStringExpression.parse(builder,parser,false,GroovyTokenTypes.mDOLLAR_SLASH_REGEX_BEGIN,GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT,GroovyTokenTypes.mDOLLAR_SLASH_REGEX_END,GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL,GroovyElementTypes.REGEX,GroovyBundle.message("dollar.slash.end.expected"));
    return GroovyElementTypes.REGEX;
  }
  if (GroovyTokenTypes.mLBRACK == tokenType) {
    return ListOrMapConstructorExpression.parse(builder,parser);
  }
  if (GroovyTokenTypes.mLPAREN == tokenType) {
    return parenthesizedExprParse(builder,parser);
  }
  if (GroovyTokenTypes.mLCURLY == tokenType) {
    return OpenOrClosableBlock.parseClosableBlock(builder,parser);
  }
  if (tokenType == GroovyTokenTypes.mSTRING_LITERAL || tokenType == GroovyTokenTypes.mGSTRING_LITERAL) {
    return ParserUtils.eatElement(builder,literalsAsRefExprs ? GroovyElementTypes.REFERENCE_EXPRESSION : GroovyElementTypes.LITERAL);
  }
  if (TokenSets.CONSTANTS.contains(tokenType)) {
    return ParserUtils.eatElement(builder,GroovyElementTypes.LITERAL);
  }
  return GroovyElementTypes.WRONGWAY;
}
