{
  return new ChangeGoToChangePopupAction<ChangeRequestChainWrapper>(this,onSelected){
    @NotNull @Override protected List<Change> getChanges(){
      return ContainerUtil.mapNotNull(myChain.getRequests(),new Function<MyProducerWrapper,Change>(){
        @Override @Nullable public Change fun(        MyProducerWrapper wrapper){
          return getChange(wrapper.getPresentable());
        }
      }
);
    }
    @Nullable @Override protected Change getCurrentSelection(){
      return getChange(myChain.getRequests().get(myIndex).getPresentable());
    }
    @Override protected int findSelectedStep(    @Nullable Change change){
      if (change == null)       return -1;
      for (int i=0; i < myRequests.size(); i++) {
        Change c=getChange(myRequests.get(i).getPresentable());
        if (c != null && change.equals(c)) {
          return i;
        }
      }
      return -1;
    }
  }
;
}
