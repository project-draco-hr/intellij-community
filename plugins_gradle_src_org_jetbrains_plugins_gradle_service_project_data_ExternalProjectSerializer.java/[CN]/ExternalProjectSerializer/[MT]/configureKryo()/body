{
  myKryo.setAutoReset(true);
  myKryo.setRegistrationRequired(true);
  Log.set(Log.LEVEL_WARN);
  myKryo.register(ArrayList.class,new CollectionSerializer(){
    @Override protected Collection create(    Kryo kryo,    Input input,    Class<Collection> type){
      return new ArrayList();
    }
  }
);
  myKryo.register(HashMap.class,new MapSerializer(){
    @Override protected Map create(    Kryo kryo,    Input input,    Class<Map> type){
      return new HashMap();
    }
  }
);
  myKryo.register(HashSet.class,new CollectionSerializer(){
    @Override protected Collection create(    Kryo kryo,    Input input,    Class<Collection> type){
      return new HashSet();
    }
  }
);
  myKryo.register(File.class,new FileSerializer());
  myKryo.register(DefaultExternalProject.class,new FieldSerializer<DefaultExternalProject>(myKryo,DefaultExternalProject.class){
    @Override protected DefaultExternalProject create(    Kryo kryo,    Input input,    Class<DefaultExternalProject> type){
      return new DefaultExternalProject();
    }
  }
);
  myKryo.register(DefaultExternalTask.class,new FieldSerializer<DefaultExternalTask>(myKryo,DefaultExternalTask.class){
    @Override protected DefaultExternalTask create(    Kryo kryo,    Input input,    Class<DefaultExternalTask> type){
      return new DefaultExternalTask();
    }
  }
);
  myKryo.register(DefaultExternalPlugin.class,new FieldSerializer<DefaultExternalPlugin>(myKryo,DefaultExternalPlugin.class){
    @Override protected DefaultExternalPlugin create(    Kryo kryo,    Input input,    Class<DefaultExternalPlugin> type){
      return new DefaultExternalPlugin();
    }
  }
);
  myKryo.register(DefaultExternalSourceSet.class,new FieldSerializer<DefaultExternalSourceSet>(myKryo,DefaultExternalSourceSet.class){
    @Override protected DefaultExternalSourceSet create(    Kryo kryo,    Input input,    Class<DefaultExternalSourceSet> type){
      return new DefaultExternalSourceSet();
    }
  }
);
  myKryo.register(DefaultExternalSourceDirectorySet.class,new FieldSerializer<DefaultExternalSourceDirectorySet>(myKryo,DefaultExternalSourceDirectorySet.class){
    @Override protected DefaultExternalSourceDirectorySet create(    Kryo kryo,    Input input,    Class<DefaultExternalSourceDirectorySet> type){
      return new DefaultExternalSourceDirectorySet();
    }
  }
);
  myKryo.register(DefaultExternalFilter.class,new FieldSerializer<DefaultExternalFilter>(myKryo,DefaultExternalFilter.class){
    @Override protected DefaultExternalFilter create(    Kryo kryo,    Input input,    Class<DefaultExternalFilter> type){
      return new DefaultExternalFilter();
    }
  }
);
  myKryo.register(ExternalSystemSourceType.class,new DefaultSerializers.EnumSerializer(ExternalSystemSourceType.class));
  myKryo.register(LinkedHashSet.class,new CollectionSerializer(){
    @Override protected Collection create(    Kryo kryo,    Input input,    Class<Collection> type){
      return new LinkedHashSet();
    }
  }
);
  myKryo.register(HashSet.class,new CollectionSerializer(){
    @Override protected Collection create(    Kryo kryo,    Input input,    Class<Collection> type){
      return new HashSet();
    }
  }
);
  myKryo.register(THashSet.class,new CollectionSerializer(){
    @Override protected Collection create(    Kryo kryo,    Input input,    Class<Collection> type){
      return new THashSet();
    }
  }
);
  myKryo.register(Set.class,new CollectionSerializer(){
    @Override protected Collection create(    Kryo kryo,    Input input,    Class<Collection> type){
      return new HashSet();
    }
  }
);
  myKryo.register(THashMap.class,new MapSerializer(){
    @Override protected Map create(    Kryo kryo,    Input input,    Class<Map> type){
      return new THashMap();
    }
  }
);
}
