{
  final XmlAttribute xmlns=getXmlnsDeclaration(element);
  if (xmlns == null)   return;
  SchemaPrefixReference prefixRef=null;
  for (  PsiReference ref : xmlns.getReferences()) {
    if (ref instanceof SchemaPrefixReference) {
      prefixRef=(SchemaPrefixReference)ref;
      break;
    }
  }
  if (prefixRef == null)   return;
  final SchemaPrefix prefix=prefixRef.resolve();
  final String ns=prefixRef.getNamespacePrefix();
  final ArrayList<XmlTag> tags=new ArrayList<XmlTag>();
  final ArrayList<XmlAttribute> attrs=new ArrayList<XmlAttribute>();
  xmlns.getParent().accept(new XmlRecursiveElementVisitor(){
    @Override public void visitXmlTag(    XmlTag tag){
      if (ns.equals(tag.getNamespacePrefix())) {
        tags.add(tag);
      }
      super.visitXmlTag(tag);
    }
    @Override public void visitXmlAttributeValue(    XmlAttributeValue value){
      if (value.getValue().startsWith(ns + ":")) {
        for (        PsiReference ref : value.getReferences()) {
          if (ref instanceof SchemaPrefixReference && ref.isReferenceTo(prefix)) {
            attrs.add((XmlAttribute)value.getParent());
          }
        }
      }
    }
  }
);
  if (!FileModificationService.getInstance().preparePsiElementsForWrite(xmlns.getContainingFile()))   return;
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    @Override public void run(){
      convertTagsAndAttributes(ns,tags,attrs,project);
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          xmlns.setName("xmlns");
        }
      }
);
    }
  }
,NAME,null);
  new WriteCommandAction(project,NAME,xmlns.getContainingFile()){
    @Override protected void run(    @NotNull Result result) throws Throwable {
      xmlns.setName("xmlns");
    }
  }
.execute();
}
