{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  final PsiTypeElement typeElement;
  if (parent instanceof PsiVariable) {
    final PsiVariable variable=(PsiVariable)parent;
    typeElement=variable.getTypeElement();
  }
 else   if (parent instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)parent;
    typeElement=method.getReturnTypeElement();
  }
 else {
    return;
  }
  if (typeElement == null) {
    return;
  }
  final PsiJavaCodeReferenceElement componentReferenceElement=typeElement.getInnermostComponentReferenceElement();
  if (componentReferenceElement == null) {
    return;
  }
  final PsiType oldType=typeElement.getType();
  if (!(oldType instanceof PsiClassType)) {
    return;
  }
  final PsiClassType oldClassType=(PsiClassType)oldType;
  final PsiType[] parameterTypes=oldClassType.getParameters();
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  final PsiElementFactory factory=facade.getElementFactory();
  final PsiType type=factory.createTypeFromText(fqClassName,element);
  if (!(type instanceof PsiClassType)) {
    return;
  }
  PsiClassType classType=(PsiClassType)type;
  final PsiClass aClass=classType.resolve();
  if (aClass != null) {
    final PsiTypeParameter[] typeParameters=aClass.getTypeParameters();
    if (typeParameters.length != 0 && typeParameters.length == parameterTypes.length) {
      final Map<PsiTypeParameter,PsiType> typeParameterMap=new HashMap();
      for (int i=0; i < typeParameters.length; i++) {
        final PsiTypeParameter typeParameter=typeParameters[i];
        final PsiType parameterType=parameterTypes[i];
        typeParameterMap.put(typeParameter,parameterType);
      }
      final PsiSubstitutor substitutor=factory.createSubstitutor(typeParameterMap);
      classType=factory.createType(aClass,substitutor);
    }
  }
  final PsiJavaCodeReferenceElement referenceElement=factory.createReferenceElementByType(classType);
  final PsiElement replacement=componentReferenceElement.replace(referenceElement);
  final JavaCodeStyleManager javaCodeStyleManager=JavaCodeStyleManager.getInstance(project);
  javaCodeStyleManager.shortenClassReferences(replacement);
}
