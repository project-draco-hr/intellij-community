{
  PsiFile file=parameters.getOriginalFile();
  if (!(file instanceof GroovyShellCodeFragment))   return;
  PsiElement position=parameters.getPosition();
  PsiElement parent=position.getParent();
  if (!(parent instanceof GrReferenceExpression && !((GrReferenceExpression)parent).isQualified()))   return;
  if (PsiUtil.isExpressionStatement(parent)) {
    addAllCommands(result);
  }
 else   if (parent.getParent() instanceof GrCommandArgumentList) {
    PsiElement ppparent=parent.getParent().getParent();
    if (ppparent instanceof GrMethodCall && isFirstArg((GrMethodCall)ppparent,parent)) {
      GrExpression invokedExpression=((GrMethodCall)ppparent).getInvokedExpression();
      if (invokedExpression instanceof GrReferenceExpression && !((GrReferenceExpression)invokedExpression).isQualified()) {
        String name=((GrReferenceExpression)invokedExpression).getReferenceName();
        if ("help".equals(name)) {
          addAllCommands(result);
        }
 else         if ("show".equals(name)) {
          add(result,"classes");
          add(result,"imports");
          add(result,"preferences");
          add(result,"all");
        }
 else         if ("purge".equals(name)) {
          add(result,"variables");
          add(result,"classes");
          add(result,"imports");
          add(result,"preferences");
          add(result,"all");
        }
 else         if ("record".equals(name)) {
          add(result,"start");
          add(result,"stop");
          add(result,"status");
        }
 else         if ("history".equals(name)) {
          add(result,"show");
          add(result,"recall");
          add(result,"flush");
          add(result,"clear");
        }
      }
    }
  }
}
