{
  installedDependant.add(pluginNode);
  if (pluginNode.getDepends() != null && pluginNode.getDepends().size() > 0) {
    final PluginId[] optionalDependentPluginIds=pluginNode.getOptionalDependentPluginIds();
    final List<PluginNode> depends=new ArrayList<PluginNode>();
    final List<PluginNode> optionalDeps=new ArrayList<PluginNode>();
    for (int i=0; i < pluginNode.getDepends().size(); i++) {
      PluginId depPluginId=pluginNode.getDepends().get(i);
      if (PluginManager.isPluginInstalled(depPluginId) || PluginManagerCore.isModuleDependency(depPluginId) || ourState.wasInstalled(depPluginId)|| (pluginIds != null && pluginIds.contains(depPluginId))) {
        continue;
      }
      PluginNode depPlugin=new PluginNode(depPluginId);
      depPlugin.setSize("-1");
      depPlugin.setName(depPluginId.getIdString());
      if (isPluginInRepo(depPluginId,allPlugins)) {
        if (ArrayUtil.indexOf(optionalDependentPluginIds,depPluginId) != -1) {
          optionalDeps.add(depPlugin);
        }
 else {
          depends.add(depPlugin);
        }
      }
    }
    if (depends.size() > 0) {
      final boolean[] proceed=new boolean[1];
      try {
        GuiUtils.runOrInvokeAndWait(new Runnable(){
          @Override public void run(){
            String title=IdeBundle.message("plugin.manager.dependencies.detected.title");
            String deps=StringUtil.join(depends,new Function<PluginNode,String>(){
              @Override public String fun(              PluginNode node){
                return node.getName();
              }
            }
,", ");
            String message=IdeBundle.message("plugin.manager.dependencies.detected.message",depends.size(),deps);
            proceed[0]=Messages.showYesNoDialog(message,title,Messages.getWarningIcon()) == Messages.YES;
          }
        }
);
      }
 catch (      Exception e) {
        return false;
      }
      if (!proceed[0] || !prepareToInstall(depends,allPlugins,installedDependant,indicator)) {
        return false;
      }
    }
    if (optionalDeps.size() > 0) {
      final boolean[] proceed=new boolean[1];
      try {
        GuiUtils.runOrInvokeAndWait(new Runnable(){
          @Override public void run(){
            String title=IdeBundle.message("plugin.manager.dependencies.detected.title");
            String deps=StringUtil.join(optionalDeps,new Function<PluginNode,String>(){
              @Override public String fun(              PluginNode node){
                return node.getName();
              }
            }
,", ");
            String message=IdeBundle.message("plugin.manager.optional.dependencies.detected.message",optionalDeps.size(),deps);
            proceed[0]=Messages.showYesNoDialog(message,title,Messages.getWarningIcon()) == Messages.YES;
          }
        }
);
      }
 catch (      Exception e) {
        return false;
      }
      if (proceed[0] && !prepareToInstall(optionalDeps,allPlugins,installedDependant,indicator)) {
        return false;
      }
    }
  }
  PluginDownloader downloader=PluginDownloader.createDownloader(pluginNode,pluginNode.getRepositoryName(),null);
  if (downloader.prepareToInstall(indicator)) {
synchronized (ourLock) {
      downloader.install();
    }
    pluginNode.setStatus(PluginNode.STATUS_DOWNLOADED);
  }
 else {
    return false;
  }
  return true;
}
