{
  PsiMethod superMethod=superSignatureHierarchical.getMethod();
  PsiClass superClass=superMethod.getContainingClass();
  PsiMethod method=hierarchicalMethodSignature.getMethod();
  PsiClass containingClass=method.getContainingClass();
  if (!superMethod.isConstructor() && !aClass.equals(superClass) && PsiUtil.isAccessible(aClass.getProject(),superMethod,aClass,aClass)&& MethodSignatureUtil.isSubsignature(superSignatureHierarchical,hierarchicalMethodSignature)&& superClass != null) {
    if (superClass.isInterface() || CommonClassNames.JAVA_LANG_OBJECT.equals(superClass.getQualifiedName())) {
      if (superMethod.hasModifierProperty(PsiModifier.STATIC) || superMethod.hasModifierProperty(PsiModifier.DEFAULT) && method.hasModifierProperty(PsiModifier.STATIC) && !InheritanceUtil.isInheritorOrSelf(containingClass,superClass,true)) {
        return false;
      }
      if (superMethod.hasModifierProperty(PsiModifier.DEFAULT) || method.hasModifierProperty(PsiModifier.DEFAULT)) {
        return superMethod.equals(method) || !InheritanceUtil.isInheritorOrSelf(superClass,containingClass,true);
      }
      return true;
    }
    if (containingClass != null) {
      if (containingClass.isInterface()) {
        return false;
      }
      if (!aClass.isInterface() && !InheritanceUtil.isInheritorOrSelf(superClass,containingClass,true)) {
        return true;
      }
    }
  }
  return false;
}
