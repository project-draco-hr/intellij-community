{
  if (method == superMethod)   return false;
  PsiClass aClass=method.getContainingClass();
  PsiClass superClass=superMethod.getContainingClass();
  if (aClass == null || superClass == null || superClass == aClass)   return false;
  if (!canHaveSuperMethod(method,true,false))   return false;
  Map<MethodSignature,HierarchicalMethodSignature> cachedMap=SIGNATURES_BY_NAME_KEY.getValue(aClass).get(method.getName());
  HierarchicalMethodSignature signature=cachedMap.get(method.getSignature(PsiSubstitutor.EMPTY));
  for (  PsiMethod superCandidate : MethodSignatureUtil.convertMethodSignaturesToMethods(signature.getSuperSignatures())) {
    if (superMethod.equals(superCandidate) || isSuperMethodSmart(superCandidate,superMethod))     return true;
  }
  return false;
}
