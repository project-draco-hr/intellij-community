{
  List<Pair<File,GroovyDslExecutor>> result=derefStandardScripts();
  if (result != null) {
    return result;
  }
  final GroovyFrameworkConfigNotification[] extensions=GroovyFrameworkConfigNotification.EP_NAME.getExtensions();
  Callable<List<Pair<File,GroovyDslExecutor>>> action=new Callable<List<Pair<File,GroovyDslExecutor>>>(){
    @Override public List<Pair<File,GroovyDslExecutor>> call() throws Exception {
      if (GdslUtil.ourGdslStopped) {
        return null;
      }
      try {
        List<Pair<File,GroovyDslExecutor>> pairs=derefStandardScripts();
        if (pairs != null) {
          return pairs;
        }
        Set<Class> classes=new HashSet<Class>(ContainerUtil.map2Set(extensions,new Function<GroovyFrameworkConfigNotification,Class>(){
          @Override public Class fun(          GroovyFrameworkConfigNotification notification){
            return notification.getClass();
          }
        }
));
        classes.add(GroovyFrameworkConfigNotification.class);
        Set<File> scriptFolders=new LinkedHashSet<File>();
        for (        Class aClass : classes) {
          File jarPath=new File(PathUtil.getJarPathForClass(aClass));
          if (jarPath.isFile()) {
            jarPath=jarPath.getParentFile();
          }
          scriptFolders.add(new File(jarPath,"standardDsls"));
        }
        List<Pair<File,GroovyDslExecutor>> executors=new ArrayList<Pair<File,GroovyDslExecutor>>();
        for (        File file : scriptFolders) {
          if (file.exists()) {
            File[] children=file.listFiles();
            if (children != null) {
              for (              File child : children) {
                final String fileName=child.getName();
                if (fileName.endsWith(".gdsl")) {
                  try {
                    final String text=new String(FileUtil.loadFileText(child));
                    executors.add(Pair.create(child,new GroovyDslExecutor(text,fileName)));
                  }
 catch (                  IOException e) {
                    LOG.error("Error while parsing gdsl file " + fileName,e);
                  }
                }
              }
            }
          }
        }
        ourStandardScripts=new SoftReference<List<Pair<File,GroovyDslExecutor>>>(executors);
        return executors;
      }
 catch (      Throwable e) {
        if (e instanceof Error) {
          GdslUtil.stopGdsl();
        }
        LOG.error(e);
        return null;
      }
    }
  }
;
  try {
    if (ApplicationManager.getApplication().isDispatchThread()) {
      return action.call();
    }
    return ApplicationUtil.runWithCheckCanceled(action,new EmptyProgressIndicator(),ourPool);
  }
 catch (  Exception e) {
    ExceptionUtil.rethrowUnchecked(e);
    LOG.error(e);
    return null;
  }
}
