{
  setupEditorDefault(myConsoleEditor);
  setupEditorDefault(myHistoryViewer);
  myHistoryViewer.getComponent().setMinimumSize(JBUI.emptySize());
  myHistoryViewer.getComponent().setPreferredSize(JBUI.emptySize());
  myHistoryViewer.setCaretEnabled(false);
  myConsoleEditor.setHorizontalScrollbarVisible(true);
  myConsoleEditor.addEditorMouseListener(EditorActionUtil.createEditorPopupHandler(IdeActions.GROUP_CONSOLE_EDITOR_POPUP));
  myConsoleEditor.setHighlighter(EditorHighlighterFactory.getInstance().createEditorHighlighter(myVirtualFile,myConsoleEditor.getColorsScheme(),myProject));
  myConsoleEditor.getScrollingModel().addVisibleAreaListener(new VisibleAreaListener(){
    @Override public void visibleAreaChanged(    VisibleAreaEvent e){
      final int offset=myConsoleEditor.getScrollingModel().getHorizontalScrollOffset();
      final ScrollingModel model=myHistoryViewer.getScrollingModel();
      final int historyOffset=model.getHorizontalScrollOffset();
      if (historyOffset != offset) {
        try {
          model.disableAnimation();
          model.scrollHorizontally(offset);
        }
  finally {
          model.enableAnimation();
        }
      }
    }
  }
);
  myHistoryViewer.getContentComponent().addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    KeyEvent event){
      if (isConsoleEditorEnabled() && UIUtil.isReallyTypedEvent(event)) {
        myConsoleEditor.getContentComponent().requestFocus();
        myConsoleEditor.processKeyTyped(event);
      }
    }
  }
);
  EmptyAction.registerActionShortcuts(myHistoryViewer.getComponent(),myConsoleEditor.getComponent());
}
