{
  myProgress.setIndeterminate(true);
  final Map<File,ModuleDescriptor> contentRootToModules=new HashMap<>();
  try {
    myProgress.pushState();
    List<DetectedSourceRoot> processedRoots=new ArrayList<>();
    for (    DetectedSourceRoot root : getSourceRootsToScan()) {
      final File sourceRoot=root.getDirectory();
      if (isIgnoredName(sourceRoot)) {
        continue;
      }
      myProgress.setText("Scanning " + sourceRoot.getPath());
      final HashSet<String> usedPackages=new HashSet<>();
      mySourceRootToReferencedPackagesMap.put(sourceRoot,usedPackages);
      final HashSet<String> selfPackages=new HashSet<>();
      addExportedPackages(sourceRoot,selfPackages);
      scanSources(sourceRoot,ProjectFromSourcesBuilderImpl.getPackagePrefix(root),usedPackages,selfPackages);
      usedPackages.removeAll(selfPackages);
      processedRoots.add(root);
    }
    myProgress.popState();
    myProgress.pushState();
    myProgress.setText("Building modules layout...");
    for (    DetectedSourceRoot sourceRoot : processedRoots) {
      final File srcRoot=sourceRoot.getDirectory();
      final File moduleContentRoot=isEntryPointRoot(srcRoot) ? srcRoot : srcRoot.getParentFile();
      ModuleDescriptor moduleDescriptor=contentRootToModules.get(moduleContentRoot);
      if (moduleDescriptor != null) {
        moduleDescriptor.addSourceRoot(moduleContentRoot,sourceRoot);
      }
 else {
        moduleDescriptor=createModuleDescriptor(moduleContentRoot,Collections.singletonList(sourceRoot));
        contentRootToModules.put(moduleContentRoot,moduleDescriptor);
      }
    }
    buildModuleDependencies(contentRootToModules);
    myProgress.popState();
  }
 catch (  ProcessCanceledException ignored) {
  }
  addModules(contentRootToModules.values());
}
