{
  myDefaultColorSchemesManager=defaultColorSchemesManager;
  mySchemesManager=schemesManagerFactory.createSchemesManager(FILE_SPEC,new BaseSchemeProcessor<EditorColorsSchemeImpl>(){
    @NotNull @Override public EditorColorsSchemeImpl readScheme(    @NotNull Element element) throws InvalidDataException {
      return loadSchemeFromDocument(element,true);
    }
    @Override public Element writeScheme(    @NotNull final EditorColorsSchemeImpl scheme){
      Element root=new Element(SCHEME_NODE_NAME);
      try {
        scheme.writeExternal(root);
      }
 catch (      WriteExternalException e) {
        LOG.error(e);
        return null;
      }
      return root;
    }
    @NotNull @Override public State getState(    @NotNull EditorColorsSchemeImpl scheme){
      return scheme instanceof ReadOnlyColorsScheme ? State.NON_PERSISTENT : State.POSSIBLY_CHANGED;
    }
    @Override public void onCurrentSchemeChanged(    final Scheme newCurrentScheme){
      fireChanges(mySchemesManager.getCurrentScheme());
    }
    @NotNull @Override public String getSchemeExtension(){
      return FILE_EXT;
    }
    @Override public boolean isUpgradeNeeded(){
      return true;
    }
  }
,RoamingType.PER_USER);
  addDefaultSchemes();
  if (!isUnitTestOrHeadlessMode()) {
    loadSchemesFromBeans();
  }
  mySchemesManager.loadSchemes();
  loadAdditionalTextAttributes();
  String wizardEditorScheme=WelcomeWizardUtil.getWizardEditorScheme();
  EditorColorsScheme scheme=null;
  if (wizardEditorScheme != null) {
    scheme=getScheme(wizardEditorScheme);
    LOG.assertTrue(scheme != null,"Wizard scheme " + wizardEditorScheme + " not found");
  }
  if (scheme == null)   scheme=myDefaultColorSchemesManager.getAllSchemes()[0];
  setGlobalSchemeInner(scheme);
}
