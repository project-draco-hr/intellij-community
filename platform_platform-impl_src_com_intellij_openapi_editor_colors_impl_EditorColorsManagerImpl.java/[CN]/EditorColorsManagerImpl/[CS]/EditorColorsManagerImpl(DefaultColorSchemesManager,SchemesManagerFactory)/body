{
  myDefaultColorSchemeManager=defaultColorSchemeManager;
  mySchemeManager=schemeManagerFactory.create(FILE_SPEC,new BaseSchemeProcessor<EditorColorsSchemeImpl>(){
    @NotNull @Override public EditorColorsSchemeImpl readScheme(    @NotNull Element element){
      EditorColorsSchemeImpl scheme=new EditorColorsSchemeImpl(null);
      scheme.readExternal(element);
      return scheme;
    }
    @Override public Element writeScheme(    @NotNull final EditorColorsSchemeImpl scheme){
      Element root=new Element(SCHEME_NODE_NAME);
      try {
        scheme.writeExternal(root);
      }
 catch (      WriteExternalException e) {
        LOG.error(e);
        return null;
      }
      return root;
    }
    @NotNull @Override public State getState(    @NotNull EditorColorsSchemeImpl scheme){
      return scheme instanceof ReadOnlyColorsScheme ? State.NON_PERSISTENT : State.POSSIBLY_CHANGED;
    }
    @Override public void onCurrentSchemeChanged(    @Nullable Scheme oldScheme){
      LafManager.getInstance().updateUI();
      schemeChangedOrSwitched();
      fireChanges(mySchemeManager.getCurrentScheme());
    }
    @NotNull @NonNls @Override public String getSchemeExtension(){
      return ".icls";
    }
    @Override public boolean isUpgradeNeeded(){
      return true;
    }
  }
);
  initDefaultSchemes();
  loadBundledSchemes();
  mySchemeManager.loadSchemes();
  String wizardEditorScheme=WelcomeWizardUtil.getWizardEditorScheme();
  EditorColorsScheme scheme=null;
  if (wizardEditorScheme != null) {
    scheme=getScheme(wizardEditorScheme);
    LOG.assertTrue(scheme != null,"Wizard scheme " + wizardEditorScheme + " not found");
  }
  setGlobalSchemeInner(scheme == null ? getDefaultScheme() : scheme);
}
