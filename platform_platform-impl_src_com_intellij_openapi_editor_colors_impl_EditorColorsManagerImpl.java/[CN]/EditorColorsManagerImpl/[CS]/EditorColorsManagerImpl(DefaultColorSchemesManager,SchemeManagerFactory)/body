{
  myDefaultColorSchemeManager=defaultColorSchemeManager;
class EditorColorSchemeProcessor extends LazySchemeProcessor<EditorColorsScheme,EditorColorsSchemeImpl> implements SchemeExtensionProvider {
    @NotNull @Override public EditorColorsSchemeImpl createScheme(    @NotNull SchemeDataHolder<? super EditorColorsSchemeImpl> dataHolder,    @NotNull String name,    @NotNull Function<String,String> attributeProvider,    boolean isBundled){
      EditorColorsSchemeImpl scheme=isBundled ? new BundledScheme() : new EditorColorsSchemeImpl(null);
      scheme.readExternal(dataHolder.read());
      dataHolder.updateDigest(scheme);
      return scheme;
    }
    @NotNull @Override public SchemeState getState(    @NotNull EditorColorsScheme scheme){
      if (scheme instanceof EditorColorsSchemeImpl && !(scheme instanceof ReadOnlyColorsScheme)) {
        return ((EditorColorsSchemeImpl)scheme).isSaveNeeded() ? SchemeState.POSSIBLY_CHANGED : SchemeState.UNCHANGED;
      }
 else {
        return SchemeState.NON_PERSISTENT;
      }
    }
    @Override public void onCurrentSchemeSwitched(    @Nullable EditorColorsScheme oldScheme,    @Nullable EditorColorsScheme newScheme){
      LafManager.getInstance().updateUI();
      schemeChangedOrSwitched(newScheme);
    }
    @NotNull @NonNls @Override public String getSchemeExtension(){
      return ".icls";
    }
  }
  mySchemeManager=schemeManagerFactory.create(FILE_SPEC,new EditorColorSchemeProcessor());
  initDefaultSchemes();
  loadBundledSchemes();
  mySchemeManager.loadSchemes();
  String wizardEditorScheme=WelcomeWizardUtil.getWizardEditorScheme();
  EditorColorsScheme scheme=null;
  if (wizardEditorScheme != null) {
    scheme=getScheme(wizardEditorScheme);
    LOG.assertTrue(scheme != null,"Wizard scheme " + wizardEditorScheme + " not found");
  }
  initEditableDefaultSchemesCopies();
  initEditableBundledSchemesCopies();
  setGlobalSchemeInner(scheme == null ? getDefaultScheme() : scheme);
}
