{
  return new RunnableState(){
    @Nullable @Override public ExecutionResult execute(    Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      ConsoleView console=new TextConsoleBuilderImpl(getProject()).getConsole();
      final MyProcessHandler processHandler=new MyProcessHandler();
      console.attachToProcess(processHandler);
      final List<ExternalTaskPojo> tasks=ContainerUtilRt.newArrayList();
      for (      String taskName : mySettings.getTaskNames()) {
        tasks.add(new ExternalTaskPojo(taskName,mySettings.getExternalProjectPath(),null));
      }
      if (tasks.isEmpty()) {
        throw new ExecutionException(ExternalSystemBundle.message("run.error.undefined.task"));
      }
      final ExternalSystemExecuteTaskTask task=new ExternalSystemExecuteTaskTask(mySettings.getExternalSystemId(),getProject(),tasks,mySettings.getVmOptions());
      ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
        @Override public void run(){
          String greeting=ExternalSystemBundle.message("run.text.starting",StringUtil.join(mySettings.getTaskNames()," "));
          processHandler.notifyTextAvailable(greeting,ProcessOutputTypes.SYSTEM);
          task.execute(new ExternalSystemTaskNotificationListenerAdapter(){
            private boolean myResetGreeting=true;
            @Override public void onTaskOutput(            @NotNull ExternalSystemTaskId id,            @NotNull String text,            boolean stdOut){
              if (myResetGreeting) {
                processHandler.notifyTextAvailable("\r",ProcessOutputTypes.SYSTEM);
                myResetGreeting=false;
              }
              processHandler.notifyTextAvailable(text,stdOut ? ProcessOutputTypes.STDOUT : ProcessOutputTypes.STDERR);
            }
            @Override public void onEnd(            @NotNull ExternalSystemTaskId id){
              processHandler.notifyProcessTerminated(0);
            }
          }
);
        }
      }
);
      return new DefaultExecutionResult(console,processHandler);
    }
    @Override public RunnerSettings getRunnerSettings(){
      return null;
    }
    @Override public ConfigurationPerRunnerSettings getConfigurationSettings(){
      return null;
    }
  }
;
}
