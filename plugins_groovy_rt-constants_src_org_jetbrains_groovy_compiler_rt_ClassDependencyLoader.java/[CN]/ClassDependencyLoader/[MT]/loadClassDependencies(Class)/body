{
  String name=aClass.getName();
  if (myVisited.add(aClass)) {
    try {
      for (      Method method : aClass.getDeclaredMethods()) {
        loadTypeDependencies(method.getGenericReturnType());
        for (        Type type : method.getGenericExceptionTypes()) {
          loadTypeDependencies(type);
        }
        for (        Type type : method.getGenericParameterTypes()) {
          loadTypeDependencies(type);
        }
      }
      for (      Constructor method : aClass.getDeclaredConstructors()) {
        for (        Type type : method.getGenericExceptionTypes()) {
          loadTypeDependencies(type);
        }
        for (        Type type : method.getGenericParameterTypes()) {
          loadTypeDependencies(type);
        }
      }
      for (      Field field : aClass.getDeclaredFields()) {
        loadTypeDependencies(field.getGenericType());
      }
      Type superclass=aClass.getGenericSuperclass();
      if (superclass != null) {
        loadClassDependencies(aClass);
      }
      for (      Type intf : aClass.getGenericInterfaces()) {
        loadTypeDependencies(intf);
      }
      aClass.getAnnotations();
      Package aPackage=aClass.getPackage();
      if (aPackage != null) {
        aPackage.getAnnotations();
      }
    }
 catch (    LinkageError e) {
      throw new ClassNotFoundException(name);
    }
catch (    TypeNotPresentException e) {
      throw new ClassNotFoundException(name);
    }
  }
}
