{
  final MultiMap<JpsModuleSourceRootType<?>,String> roots=new LinkedMultiMap<JpsModuleSourceRootType<?>,String>();
  roots.putValues(JavaSourceRootType.SOURCE,myMavenProject.getSources());
  roots.putValues(JavaSourceRootType.TEST_SOURCE,myMavenProject.getTestSources());
  for (  MavenImporter each : MavenImporter.getSuitableImporters(myMavenProject)) {
    each.collectSourceRoots(myMavenProject,new PairConsumer<String,JpsModuleSourceRootType<?>>(){
      @Override public void consume(      String s,      JpsModuleSourceRootType<?> type){
        roots.putValue(type,s);
      }
    }
);
  }
  for (  MavenResource each : myMavenProject.getResources()) {
    roots.putValue(JavaResourceRootType.RESOURCE,each.getDirectory());
  }
  for (  MavenResource each : myMavenProject.getTestResources()) {
    roots.putValue(JavaResourceRootType.TEST_RESOURCE,each.getDirectory());
  }
  addBuilderHelperPaths("add-source",roots.getModifiable(JavaSourceRootType.SOURCE));
  addBuilderHelperPaths("add-test-source",roots.getModifiable(JavaSourceRootType.TEST_SOURCE));
  List<String> addedPaths=new ArrayList<String>();
  for (  JpsModuleSourceRootType<?> type : roots.keySet()) {
    for (    String path : roots.get(type)) {
      addSourceFolderIfNotOverlap(path,type,addedPaths);
    }
  }
}
