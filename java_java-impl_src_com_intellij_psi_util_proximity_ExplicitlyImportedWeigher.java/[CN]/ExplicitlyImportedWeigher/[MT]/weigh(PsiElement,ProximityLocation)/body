{
  final PsiElement position=location.getPosition();
  if (position == null) {
    return 0;
  }
  PsiUtilCore.ensureValid(position);
  final PsiFile elementFile=element.getContainingFile();
  final PsiFile positionFile=position.getContainingFile();
  if (positionFile != null && elementFile != null && positionFile.getOriginalFile().equals(elementFile.getOriginalFile())) {
    return 300;
  }
  if (element instanceof PsiClass) {
    final String qname=((PsiClass)element).getQualifiedName();
    if (qname != null) {
      List<String> importedNames=PLACE_IMPORTED_NAMES.getValue(location);
      if (importedNames.contains(qname)) {
        return 100;
      }
      String pkg=StringUtil.getPackageName(qname);
      while (!pkg.isEmpty()) {
        if (containsImport(importedNames,pkg)) {
          return StringUtil.countChars(pkg,'.') + 1;
        }
        pkg=StringUtil.getPackageName(pkg);
      }
    }
  }
  if (element instanceof PsiMember) {
    String qname=PsiUtil.getMemberQualifiedName((PsiMember)element);
    if (qname != null && PLACE_IMPORTED_NAMES.getValue(location).contains(qname)) {
      return 400;
    }
    final PsiPackage placePackage=PLACE_PACKAGE.getValue(location);
    if (placePackage != null) {
      Module elementModule=ModuleUtilCore.findModuleForPsiElement(element);
      if (location.getPositionModule() == elementModule && placePackage.equals(getContextPackage(element))) {
        return 200;
      }
    }
  }
  return 0;
}
