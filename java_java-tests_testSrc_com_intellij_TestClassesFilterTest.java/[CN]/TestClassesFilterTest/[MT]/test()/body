{
  LOG.info("test");
  String filterText="[Group1]\n" + "com.intellij.package1.*\n" + "com.intellij.package2.ExcludedTest\n"+ "com.intellij.package3.*package4\n"+ "[Group2]\n"+ "com.intellij.package5.*\n"+ "com.intellij.package6.ExcludedTest\n"+ "com.intellij.package7.*package8";
  TestClassesFilter classesFilter=GroupBasedTestClassFilter.createOn(getReader(filterText),Collections.singletonList("Group1"));
  assertTrue(classesFilter.matches("com.intellij.package1.Test"));
  assertTrue(classesFilter.matches("com.intellij.package1.Test2"));
  assertFalse(classesFilter.matches("com.intellij.package2.Test"));
  assertTrue(classesFilter.matches("com.intellij.package2.ExcludedTest"));
  assertTrue(classesFilter.matches("com.intellij.package3.package4"));
  assertTrue(classesFilter.matches("com.intellij.package3.package5.package4"));
  assertFalse(classesFilter.matches("com.intellij.package3"));
  assertFalse(classesFilter.matches("com.intellij"));
  assertFalse(classesFilter.matches("com.intellij.Test"));
  assertFalse(classesFilter.matches("com.intellij.package5.Test"));
  assertFalse(classesFilter.matches("com.intellij.package5.Test2"));
  assertFalse(classesFilter.matches("com.intellij.package6.Test"));
  assertFalse(classesFilter.matches("com.intellij.package6.ExcludedTest"));
  assertFalse(classesFilter.matches("com.intellij.package7.package8"));
  assertFalse(classesFilter.matches("com.intellij.package7.package5.package8"));
  assertFalse(classesFilter.matches("com.intellij.package7"));
  classesFilter=GroupBasedTestClassFilter.createOn(getReader(filterText),Collections.singletonList("Group2"));
  assertFalse(classesFilter.matches("com.intellij.package1.Test"));
  assertFalse(classesFilter.matches("com.intellij.package1.Test2"));
  assertFalse(classesFilter.matches("com.intellij.package2.Test"));
  assertFalse(classesFilter.matches("com.intellij.package2.ExcludedTest"));
  assertFalse(classesFilter.matches("com.intellij.package3.package4"));
  assertFalse(classesFilter.matches("com.intellij.package3.package5.package4"));
  assertFalse(classesFilter.matches("com.intellij.package3"));
  assertFalse(classesFilter.matches("com.intellij"));
  assertFalse(classesFilter.matches("com.intellij.Test"));
  assertTrue(classesFilter.matches("com.intellij.package5.Test"));
  assertTrue(classesFilter.matches("com.intellij.package5.Test2"));
  assertFalse(classesFilter.matches("com.intellij.package6.Test"));
  assertTrue(classesFilter.matches("com.intellij.package6.ExcludedTest"));
  assertTrue(classesFilter.matches("com.intellij.package7.package8"));
  assertTrue(classesFilter.matches("com.intellij.package7.package5.package8"));
  assertFalse(classesFilter.matches("com.intellij.package7"));
  classesFilter=GroupBasedTestClassFilter.createOn(getReader(filterText),Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED));
  checkForAllExcludedDefinedGroup(classesFilter);
  classesFilter=GroupBasedTestClassFilter.createOn(getReader(filterText),Collections.<String>emptyList());
  checkForAllExcludedDefinedGroup(classesFilter);
  classesFilter=GroupBasedTestClassFilter.createOn(getReader(filterText),Arrays.asList("Group1","Group2"));
  assertTrue(classesFilter.matches("com.intellij.package1.Test"));
  assertTrue(classesFilter.matches("com.intellij.package5.Test"));
  assertFalse(classesFilter.matches("com.intellij.package4.Test"));
  classesFilter=GroupBasedTestClassFilter.createOn(getReader(filterText),Arrays.asList("Group1",GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED));
  assertTrue(classesFilter.matches("com.intellij.package1.Test"));
  assertFalse(classesFilter.matches("com.intellij.package5.Test"));
  assertTrue(classesFilter.matches("com.intellij.package4.Test"));
}
