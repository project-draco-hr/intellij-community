{
  SchemeDataHolder dataHolder=myDataHolder;
  if (dataHolder != null) {
    myDataHolder=null;
    Element element=dataHolder.read();
    if (element.getName().equals("component")) {
      element=element.getChild("profile");
    }
    readExternal(element);
  }
  if (myBaseProfile != null) {
    myBaseProfile.initInspectionTools(project);
  }
  final List<InspectionToolWrapper> tools;
  try {
    tools=createTools(project);
  }
 catch (  ProcessCanceledException ignored) {
    return;
  }
  final Map<String,List<String>> dependencies=new THashMap<>();
  for (  InspectionToolWrapper toolWrapper : tools) {
    addTool(project,toolWrapper,dependencies);
  }
  DFSTBuilder<String> builder=new DFSTBuilder<>(GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<String>(){
    @Override public Collection<String> getNodes(){
      return dependencies.keySet();
    }
    @Override public Iterator<String> getIn(    String n){
      return dependencies.get(n).iterator();
    }
  }
)));
  if (builder.isAcyclic()) {
    myScopesOrder=ArrayUtil.toStringArray(builder.getSortedNodes());
  }
  if (mySource != null) {
    copyToolsConfigurations(mySource,project);
  }
  myInitialized=true;
  if (dataHolder != null) {
    dataHolder.updateDigest();
  }
}
