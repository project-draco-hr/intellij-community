{
  if (myBaseProfile != null) {
    myBaseProfile.initInspectionTools(project);
  }
  final List<InspectionToolWrapper> tools;
  try {
    tools=createTools(project);
  }
 catch (  ProcessCanceledException ignored) {
    return false;
  }
  final Map<String,List<String>> dependencies=new HashMap<>();
  for (  InspectionToolWrapper toolWrapper : tools) {
    addTool(project,toolWrapper,dependencies);
  }
  final GraphGenerator<String> graphGenerator=GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<String>(){
    @Override public Collection<String> getNodes(){
      return dependencies.keySet();
    }
    @Override public Iterator<String> getIn(    String n){
      return dependencies.get(n).iterator();
    }
  }
));
  DFSTBuilder<String> builder=new DFSTBuilder<>(graphGenerator);
  if (builder.isAcyclic()) {
    final List<String> scopes=builder.getSortedNodes();
    myScopesOrder=ArrayUtil.toStringArray(scopes);
  }
  if (mySource != null) {
    copyToolsConfigurations(mySource,project);
  }
  return true;
}
