{
  PsiElement qualifier=expression.getQualifier();
  if (qualifier == null)   return Collections.emptyList();
  final List<ResolveResult[]> qualifiers=new SmartList<ResolveResult[]>();
  final ResolveCache resolveCache=ResolveCache.getInstance(containingFile.getProject());
  qualifier.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      if (!(expression instanceof PsiReferenceExpressionImpl)) {
        return;
      }
      ResolveResult[] cachedResults=resolveCache.getCachedResults(expression,true,false,true);
      if (cachedResults != null) {
        return;
      }
      visitElement(expression);
    }
    @Override protected void elementFinished(    @NotNull PsiElement element){
      if (!(element instanceof PsiReferenceExpressionImpl))       return;
      PsiReferenceExpressionImpl expression=(PsiReferenceExpressionImpl)element;
      qualifiers.add(resolveCache.resolveWithCaching(expression,INSTANCE,false,false,containingFile));
    }
  }
);
  return qualifiers;
}
