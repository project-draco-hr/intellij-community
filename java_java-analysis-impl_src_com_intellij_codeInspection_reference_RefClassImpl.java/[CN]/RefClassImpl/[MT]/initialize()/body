{
  myDefaultConstructor=null;
  final PsiClass psiClass=getElement();
  LOG.assertTrue(psiClass != null);
  PsiElement psiParent=psiClass.getParent();
  if (psiParent instanceof PsiFile) {
    if (isSyntheticJSP()) {
      final RefFileImpl refFile=(RefFileImpl)getRefManager().getReference(getJspFile(psiClass));
      LOG.assertTrue(refFile != null);
      refFile.add(this);
    }
 else     if (psiParent instanceof PsiJavaFile) {
      PsiJavaFile psiFile=(PsiJavaFile)psiParent;
      String packageName=psiFile.getPackageName();
      if (!"".equals(packageName)) {
        ((RefPackageImpl)getRefJavaManager().getPackage(packageName)).add(this);
      }
 else {
        ((RefPackageImpl)getRefJavaManager().getDefaultPackage()).add(this);
      }
    }
    final Module module=ModuleUtilCore.findModuleForPsiElement(psiClass);
    LOG.assertTrue(module != null);
    final RefModuleImpl refModule=(RefModuleImpl)getRefManager().getRefModule(module);
    LOG.assertTrue(refModule != null);
    refModule.add(this);
  }
 else {
    while (!(psiParent instanceof PsiClass || psiParent instanceof PsiMethod || psiParent instanceof PsiField)) {
      psiParent=psiParent.getParent();
    }
    RefElement refParent=getRefManager().getReference(psiParent);
    LOG.assertTrue(refParent != null);
    ((RefElementImpl)refParent).add(this);
  }
  setAbstract(psiClass.hasModifierProperty(PsiModifier.ABSTRACT));
  setAnonymous(psiClass instanceof PsiAnonymousClass);
  setIsLocal(!(isAnonymous() || psiParent instanceof PsiClass || psiParent instanceof PsiFile));
  setInterface(psiClass.isInterface());
  initializeSuperReferences(psiClass);
  PsiMethod[] psiMethods=psiClass.getMethods();
  PsiField[] psiFields=psiClass.getFields();
  setUtilityClass(psiMethods.length > 0 || psiFields.length > 0);
  for (  PsiField psiField : psiFields) {
    getRefManager().getReference(psiField);
  }
  RefMethod varargConstructor=null;
  for (  PsiMethod psiMethod : psiMethods) {
    RefMethod refMethod=(RefMethod)getRefManager().getReference(psiMethod);
    if (refMethod != null) {
      if (psiMethod.isConstructor()) {
        final PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
        if (parameters.length > 0 || !psiMethod.hasModifierProperty(PsiModifier.PRIVATE)) {
          setUtilityClass(false);
        }
        addConstructor(refMethod);
        if (parameters.length == 0) {
          setDefaultConstructor((RefMethodImpl)refMethod);
        }
 else         if (parameters.length == 1 && parameters[0].isVarArgs()) {
          varargConstructor=refMethod;
        }
      }
 else {
        if (!psiMethod.hasModifierProperty(PsiModifier.STATIC)) {
          setUtilityClass(false);
        }
      }
    }
  }
  if (varargConstructor != null && getDefaultConstructor() == null) {
    setDefaultConstructor((RefMethodImpl)varargConstructor);
  }
  if (getConstructors().isEmpty() && !isInterface() && !isAnonymous()) {
    RefImplicitConstructorImpl refImplicitConstructor=new RefImplicitConstructorImpl(this);
    setDefaultConstructor(refImplicitConstructor);
    addConstructor(refImplicitConstructor);
  }
  if (isInterface()) {
    for (int i=0; i < psiFields.length && isUtilityClass(); i++) {
      PsiField psiField=psiFields[i];
      if (!psiField.hasModifierProperty(PsiModifier.STATIC)) {
        setUtilityClass(false);
      }
    }
  }
  PsiManager psiManager=getRefManager().getPsiManager();
  psiManager.dropResolveCaches();
  PsiFile file=psiClass.getContainingFile();
  if (file != null) {
    InjectedLanguageManager.getInstance(file.getProject()).dropFileCaches(file);
  }
}
