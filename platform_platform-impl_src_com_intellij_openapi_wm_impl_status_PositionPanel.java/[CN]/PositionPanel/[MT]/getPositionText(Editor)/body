{
  if (!editor.isDisposed() && myStatusBar != null) {
    StringBuilder message=new StringBuilder();
    SelectionModel selectionModel=editor.getSelectionModel();
    if (selectionModel.hasBlockSelection()) {
      LogicalPosition start=selectionModel.getBlockStart();
      LogicalPosition end=selectionModel.getBlockEnd();
      if (start == null || end == null) {
        throw new IllegalStateException(String.format("Invalid selection model state detected: 'blockSelection' property is 'true' but selection start position (%s) or " + "selection end position (%s) is undefined",start,end));
      }
      appendLogicalPosition(start,message);
      message.append("-");
      appendLogicalPosition(new LogicalPosition(Math.abs(end.line - start.line),Math.max(0,Math.abs(end.column - start.column) - 1)),message);
    }
 else {
      List<Caret> carets=editor.getCaretModel().getAllCarets();
      if (carets.size() > 1) {
        message.append(carets.size()).append(" carets (");
        appendLogicalPosition(carets.get(0).getLogicalPosition(),message);
        message.append('-');
        appendLogicalPosition(carets.get(carets.size() - 1).getLogicalPosition(),message);
        message.append(')');
      }
 else {
        Caret caret=carets.get(0);
        LogicalPosition caretPosition=caret.getLogicalPosition();
        appendLogicalPosition(caretPosition,message);
        if (caret.hasSelection()) {
          int len=Math.abs(caret.getSelectionStart() - caret.getSelectionEnd());
          if (len != 0)           message.append("/").append(len);
        }
      }
    }
    return message.toString();
  }
 else {
    return "";
  }
}
