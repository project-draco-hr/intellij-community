{
  if (!(element instanceof PsiJavaToken && SUITABLE_TYPES.contains(((PsiJavaToken)element).getTokenType()))) {
    return false;
  }
  final PsiElement literalExpression=element.getParent();
  if (literalExpression == null) {
    return false;
  }
  final PsiElement nameValuePair=literalExpression.getParent();
  if (!(nameValuePair instanceof PsiNameValuePair)) {
    return false;
  }
  final PsiAnnotation annotation=PsiTreeUtil.getParentOfType(nameValuePair,PsiAnnotation.class);
  if (annotation == null) {
    return false;
  }
  final PsiJavaCodeReferenceElement nameRef=annotation.getNameReferenceElement();
  if (nameRef == null) {
    return false;
  }
  final PsiElement resolved=nameRef.resolve();
  if (!(resolved instanceof PsiClass)) {
    return false;
  }
  final String parameterName=((PsiNameValuePair)nameValuePair).getName();
  final PsiMethod[] methods=((PsiClass)resolved).findMethodsByName(parameterName == null ? PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME : parameterName,false);
  if (methods.length != 1) {
    return false;
  }
  final PsiType methodReturnType=methods[0].getReturnType();
  if (!(methodReturnType instanceof PsiClassType)) {
    return false;
  }
  final PsiClass returnTypeClass=((PsiClassType)methodReturnType).resolve();
  return returnTypeClass != null && CommonClassNames.JAVA_LANG_STRING.equals(returnTypeClass.getQualifiedName());
}
