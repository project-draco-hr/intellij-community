{
  List<BuildTarget<?>> targets=new ArrayList<BuildTarget<?>>(pd.getBuildTargetIndex().getAllTargets());
  Collections.sort(targets,new Comparator<BuildTarget<?>>(){
    @Override public int compare(    BuildTarget<?> o1,    BuildTarget<?> o2){
      return StringUtil.comparePairs(o1.getTargetType().getTypeId(),o1.getId(),o2.getTargetType().getTypeId(),o2.getId(),false);
    }
  }
);
  final TIntObjectHashMap<BuildTarget<?>> id2Target=new TIntObjectHashMap<BuildTarget<?>>();
  for (  BuildTarget<?> target : targets) {
    id2Target.put(pd.dataManager.getTargetsState().getBuildTargetId(target),target);
  }
  TIntObjectHashMap<String> hashCodeToOutputPath=new TIntObjectHashMap<String>();
  for (  BuildTarget<?> target : targets) {
    stream.println("Begin Of SourceToOutput (target " + getTargetIdWithTypeId(target) + ")");
    SourceToOutputMapping map=pd.dataManager.getSourceToOutputMap(target);
    List<String> sourcesList=new ArrayList<String>(map.getSources());
    Collections.sort(sourcesList);
    for (    String source : sourcesList) {
      List<String> outputs=new ArrayList<String>(ObjectUtils.notNull(map.getOutputs(source),Collections.<String>emptySet()));
      Collections.sort(outputs);
      for (      String output : outputs) {
        hashCodeToOutputPath.put(FileUtil.pathHashCode(output),output);
      }
      String sourceToCompare=SystemInfo.isFileSystemCaseSensitive ? source : source.toLowerCase(Locale.US);
      stream.println(" " + sourceToCompare + " -> "+ StringUtil.join(outputs,","));
    }
    stream.println("End Of SourceToOutput (target " + getTargetIdWithTypeId(target) + ")");
  }
  OutputToTargetRegistry registry=pd.dataManager.getOutputToTargetRegistry();
  List<Integer> keys=new ArrayList<Integer>(registry.getKeys());
  Collections.sort(keys);
  stream.println("Begin Of OutputToTarget");
  for (  Integer key : keys) {
    TIntHashSet targetsIds=registry.getState(key);
    if (targetsIds == null)     continue;
    final List<String> targetsNames=new ArrayList<String>();
    targetsIds.forEach(new TIntProcedure(){
      @Override public boolean execute(      int value){
        BuildTarget<?> target=id2Target.get(value);
        targetsNames.add(target != null ? getTargetIdWithTypeId(target) : "<unknown " + value + ">");
        return true;
      }
    }
);
    Collections.sort(targetsNames);
    stream.println(hashCodeToOutputPath.get(key) + " -> " + targetsNames);
  }
  stream.println("End Of OutputToTarget");
}
