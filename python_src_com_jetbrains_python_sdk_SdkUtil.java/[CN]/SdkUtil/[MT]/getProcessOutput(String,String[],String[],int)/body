{
  final ProcessOutput failure_output=new ProcessOutput();
  if (homePath == null || !new File(homePath).exists()) {
    return failure_output;
  }
  try {
    List<String> commands=new ArrayList<String>();
    if (SystemInfo.isWindows && StringUtil.endsWithIgnoreCase(command[0],".bat")) {
      commands.add("cmd");
      commands.add("/c");
    }
    Collections.addAll(commands,command);
    String[] new_env=null;
    if (addEnv != null) {
      Map<String,String> env_map=new HashMap<String,String>(System.getenv());
      Map<String,String> add_map=new HashMap<String,String>();
      for (      String env_item : addEnv) {
        int pos=env_item.indexOf('=');
        if (pos > 0) {
          String key=env_item.substring(0,pos);
          String value=env_item.substring(pos + 1,env_item.length());
          add_map.put(key,value);
        }
 else         LOG.warn(String.format("Invalid env value: '%s'",env_item));
      }
      for (      Map.Entry<String,String> entry : add_map.entrySet()) {
        final String key=entry.getKey();
        final String value=entry.getValue();
        final String old_value=env_map.get(key);
        if (old_value != null)         env_map.put(key,value + old_value);
 else         env_map.put(key,value);
      }
      new_env=new String[env_map.size()];
      int i=0;
      for (      Map.Entry<String,String> entry : env_map.entrySet()) {
        new_env[i]=entry.getKey() + "=" + entry.getValue();
        i+=1;
      }
    }
    Process process=Runtime.getRuntime().exec(ArrayUtil.toStringArray(commands),new_env,new File(homePath));
    CapturingProcessHandler processHandler=new CapturingProcessHandler(process);
    return processHandler.runProcess(timeout);
  }
 catch (  IOException ex) {
    LOG.warn(ex);
    return failure_output;
  }
}
