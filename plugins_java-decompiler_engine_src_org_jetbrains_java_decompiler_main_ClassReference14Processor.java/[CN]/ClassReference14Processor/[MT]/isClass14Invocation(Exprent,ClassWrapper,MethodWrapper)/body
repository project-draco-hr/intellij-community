{
  if (exprent.type == Exprent.EXPRENT_FUNCTION) {
    FunctionExprent fexpr=(FunctionExprent)exprent;
    if (fexpr.getFunctype() == FunctionExprent.FUNCTION_IIF) {
      if (fexpr.getLstOperands().get(0).type == Exprent.EXPRENT_FUNCTION) {
        FunctionExprent headexpr=(FunctionExprent)fexpr.getLstOperands().get(0);
        if (headexpr.getFunctype() == FunctionExprent.FUNCTION_EQ) {
          if (headexpr.getLstOperands().get(0).type == Exprent.EXPRENT_FIELD && headexpr.getLstOperands().get(1).type == Exprent.EXPRENT_CONST && ((ConstExprent)headexpr.getLstOperands().get(1)).getConsttype().equals(VarType.VARTYPE_NULL)) {
            FieldExprent field=(FieldExprent)headexpr.getLstOperands().get(0);
            ClassNode fieldnode=DecompilerContext.getClassProcessor().getMapRootClasses().get(field.getClassname());
            if (fieldnode != null && fieldnode.classStruct.qualifiedName.equals(wrapper.getClassStruct().qualifiedName)) {
              StructField fd=wrapper.getClassStruct().getField(field.getName(),field.getDescriptor().descriptorString);
              if (fd != null && fd.hasModifier(CodeConstants.ACC_STATIC) && (fd.isSynthetic() || DecompilerContext.getOption(IFernflowerPreferences.SYNTHETIC_NOT_SET))) {
                if (fexpr.getLstOperands().get(1).type == Exprent.EXPRENT_ASSIGNMENT && fexpr.getLstOperands().get(2).equals(field)) {
                  AssignmentExprent asexpr=(AssignmentExprent)fexpr.getLstOperands().get(1);
                  if (asexpr.getLeft().equals(field) && asexpr.getRight().type == Exprent.EXPRENT_INVOCATION) {
                    InvocationExprent invexpr=(InvocationExprent)asexpr.getRight();
                    if (invexpr.getClassname().equals(wrapper.getClassStruct().qualifiedName) && invexpr.getName().equals(meth.methodStruct.getName()) && invexpr.getStringDescriptor().equals(meth.methodStruct.getDescriptor())) {
                      if (invexpr.getLstParameters().get(0).type == Exprent.EXPRENT_CONST) {
                        wrapper.getHideMembers().add(InterpreterUtil.makeUniqueKey(fd.getName(),fd.getDescriptor()));
                        return ((ConstExprent)invexpr.getLstParameters().get(0)).getValue().toString();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return null;
}
