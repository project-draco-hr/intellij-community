{
  boolean nosynthflag=DecompilerContext.getOption(IFernflowerPreferences.SYNTHETIC_NOT_SET);
  ClassWrapper wrapper=node.wrapper;
  for (  MethodWrapper meth : wrapper.getMethods()) {
    StructMethod mt=meth.methodStruct;
    if (((mt.getAccessFlags() & CodeConstants.ACC_SYNTHETIC) != 0 || mt.getAttributes().containsKey("Synthetic") || nosynthflag) && mt.getDescriptor().equals("(Ljava/lang/String;)Ljava/lang/Class;") && (mt.getAccessFlags() & CodeConstants.ACC_STATIC) != 0) {
      RootStatement root=meth.root;
      if (root != null) {
        if (root.getFirst().type == Statement.TYPE_TRYCATCH) {
          CatchStatement cst=(CatchStatement)root.getFirst();
          if (cst.getStats().size() == 2 && cst.getFirst().type == Statement.TYPE_BASICBLOCK && cst.getStats().get(1).type == Statement.TYPE_BASICBLOCK && cst.getVars().get(0).getVartype().equals(new VarType(CodeConstants.TYPE_OBJECT,0,"java/lang/ClassNotFoundException"))) {
            BasicBlockStatement body=(BasicBlockStatement)cst.getFirst();
            BasicBlockStatement handler=(BasicBlockStatement)cst.getStats().get(1);
            if (body.getExprents().size() == 1 && handler.getExprents().size() == 1) {
              if (bodyexprent.equals(body.getExprents().get(0)) && handlerexprent.equals(handler.getExprents().get(0))) {
                mapClassMeths.put(wrapper,meth);
                break;
              }
            }
          }
        }
      }
    }
  }
  for (  ClassNode nd : node.nested) {
    findClassMethod(nd,mapClassMeths);
  }
}
