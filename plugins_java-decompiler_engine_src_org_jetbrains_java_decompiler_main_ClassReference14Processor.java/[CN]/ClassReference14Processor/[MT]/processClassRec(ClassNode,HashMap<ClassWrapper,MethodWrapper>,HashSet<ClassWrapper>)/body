{
  final ClassWrapper wrapper=node.wrapper;
  for (  MethodWrapper meth : wrapper.getMethods()) {
    RootStatement root=meth.root;
    if (root != null) {
      DirectGraph graph=meth.getOrBuildGraph();
      graph.iterateExprents(new DirectGraph.ExprentIterator(){
        public int processExprent(        Exprent exprent){
          for (          Entry<ClassWrapper,MethodWrapper> ent : mapClassMeths.entrySet()) {
            if (replaceInvocations(exprent,ent.getKey(),ent.getValue())) {
              setFound.add(ent.getKey());
            }
          }
          return 0;
        }
      }
);
    }
  }
  for (int j=0; j < 2; j++) {
    VBStyleCollection<Exprent,String> initializers=j == 0 ? wrapper.getStaticFieldInitializers() : wrapper.getDynamicFieldInitializers();
    for (int i=0; i < initializers.size(); i++) {
      for (      Entry<ClassWrapper,MethodWrapper> ent : mapClassMeths.entrySet()) {
        Exprent exprent=initializers.get(i);
        if (replaceInvocations(exprent,ent.getKey(),ent.getValue())) {
          setFound.add(ent.getKey());
        }
        String cl=isClass14Invocation(exprent,ent.getKey(),ent.getValue());
        if (cl != null) {
          initializers.set(i,new ConstExprent(VarType.VARTYPE_CLASS,cl.replace('.','/')));
          setFound.add(ent.getKey());
        }
      }
    }
  }
  for (  ClassNode nd : node.nested) {
    processClassRec(nd,mapClassMeths,setFound);
  }
}
