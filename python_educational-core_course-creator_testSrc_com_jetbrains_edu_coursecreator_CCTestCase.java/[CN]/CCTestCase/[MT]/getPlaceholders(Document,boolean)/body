{
  final List<AnswerPlaceholder> placeholders=new ArrayList<>();
  new WriteCommandAction(null){
    @Override protected void run(    @NotNull Result result){
      final String openingTagRx="<placeholder( taskText=\"(.+?)\")?( possibleAnswer=\"(.+?)\")?>";
      final String closingTagRx="</placeholder>";
      CharSequence text=document.getCharsSequence();
      final Matcher openingMatcher=Pattern.compile(openingTagRx).matcher(text);
      final Matcher closingMatcher=Pattern.compile(closingTagRx).matcher(text);
      int pos=0;
      while (openingMatcher.find(pos)) {
        AnswerPlaceholder answerPlaceholder=new AnswerPlaceholder();
        answerPlaceholder.setUseLength(useLength);
        String taskText=openingMatcher.group(2);
        if (taskText != null) {
          answerPlaceholder.setTaskText(taskText);
          answerPlaceholder.setLength(taskText.length());
        }
        String possibleAnswer=openingMatcher.group(4);
        if (possibleAnswer != null) {
          answerPlaceholder.setPossibleAnswer(possibleAnswer);
        }
        answerPlaceholder.setOffset(openingMatcher.start());
        if (!closingMatcher.find(openingMatcher.end())) {
          LOG.error("No matching closing tag found");
        }
        if (useLength) {
          answerPlaceholder.setLength(closingMatcher.start() - openingMatcher.end());
        }
 else {
          if (possibleAnswer == null) {
            answerPlaceholder.setPossibleAnswer(document.getText(TextRange.create(openingMatcher.end(),closingMatcher.start())));
          }
        }
        document.deleteString(closingMatcher.start(),closingMatcher.end());
        document.deleteString(openingMatcher.start(),openingMatcher.end());
        placeholders.add(answerPlaceholder);
        pos=answerPlaceholder.getOffset() + answerPlaceholder.getRealLength();
      }
    }
  }
.execute();
  return placeholders;
}
