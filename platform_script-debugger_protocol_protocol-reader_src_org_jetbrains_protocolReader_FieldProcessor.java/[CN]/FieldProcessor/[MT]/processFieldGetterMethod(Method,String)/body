{
  Type genericReturnType=method.getGenericReturnType();
  boolean nullable;
  if (method.getAnnotation(JsonNullable.class) != null) {
    nullable=true;
  }
 else   if (genericReturnType == String.class || genericReturnType == Enum.class || (genericReturnType instanceof Class && !((Class)genericReturnType).isPrimitive())) {
    JsonField jsonField=method.getAnnotation(JsonField.class);
    if (jsonField != null) {
      nullable=jsonField.optional() && !jsonField.allowAnyPrimitiveValue() && !jsonField.allowAnyPrimitiveValueAndMap();
    }
 else {
      nullable=method.getAnnotation(JsonOptionalField.class) != null;
    }
  }
 else {
    nullable=false;
  }
  ValueReader fieldTypeParser=reader.getFieldTypeParser(genericReturnType,nullable,false,method);
  if (fieldTypeParser != InterfaceReader.VOID_PARSER) {
    fieldLoaders.add(new FieldLoader(fieldName,fieldTypeParser));
  }
  final String effectiveFieldName=fieldTypeParser == InterfaceReader.VOID_PARSER ? null : fieldName;
  return new MethodHandler(){
    @Override void writeMethodImplementationJava(    @NotNull ClassScope scope,    @NotNull Method method,    @NotNull TextOutput out){
      if (!nullable) {
        out.append("@NotNull").newLine();
      }
      writeMethodDeclarationJava(out,method);
      out.openBlock();
      if (effectiveFieldName != null) {
        out.append("return ").append(FieldLoader.FIELD_PREFIX).append(effectiveFieldName).semi();
      }
      out.closeBlock();
    }
  }
;
}
