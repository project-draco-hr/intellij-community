{
  Type genericReturnType=method.getGenericReturnType();
  boolean addNotNullAnnotation;
  boolean isPrimitive=genericReturnType instanceof Class ? ((Class)genericReturnType).isPrimitive() : !(genericReturnType instanceof ParameterizedType);
  if (isPrimitive) {
    addNotNullAnnotation=false;
  }
 else {
    JsonField jsonField=method.getAnnotation(JsonField.class);
    if (jsonField != null) {
      addNotNullAnnotation=!jsonField.optional() && !jsonField.allowAnyPrimitiveValue() && !jsonField.allowAnyPrimitiveValueAndMap();
    }
 else {
      addNotNullAnnotation=method.getAnnotation(JsonOptionalField.class) == null;
    }
  }
  ValueReader fieldTypeParser;
  try {
    fieldTypeParser=reader.getFieldTypeParser(genericReturnType,false,method);
  }
 catch (  Exception e) {
    throw new RuntimeException("Cannot create field type parser for method " + method,e);
  }
  if (fieldTypeParser != InterfaceReader.VOID_PARSER) {
    fieldLoaders.add(new FieldLoader(fieldName,fieldTypeParser));
  }
  final String effectiveFieldName=fieldTypeParser == InterfaceReader.VOID_PARSER ? null : fieldName;
  return new MethodHandler(){
    @Override void writeMethodImplementationJava(    @NotNull ClassScope scope,    @NotNull Method method,    @NotNull TextOutput out){
      if (addNotNullAnnotation) {
        out.append("@NotNull").newLine();
      }
      writeMethodDeclarationJava(out,method);
      out.openBlock();
      if (effectiveFieldName != null) {
        out.append("return ").append(FieldLoader.FIELD_PREFIX).append(effectiveFieldName).semi();
      }
      out.closeBlock();
    }
  }
;
}
