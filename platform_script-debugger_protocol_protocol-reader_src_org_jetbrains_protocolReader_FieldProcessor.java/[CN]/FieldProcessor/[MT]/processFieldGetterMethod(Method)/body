{
  String jsonName=method.getName();
  JsonField fieldAnnotation=method.getAnnotation(JsonField.class);
  if (fieldAnnotation != null && !fieldAnnotation.name().isEmpty()) {
    jsonName=fieldAnnotation.name();
  }
  Type genericReturnType=method.getGenericReturnType();
  boolean addNotNullAnnotation;
  boolean isPrimitive=genericReturnType instanceof Class ? ((Class)genericReturnType).isPrimitive() : !(genericReturnType instanceof ParameterizedType);
  if (isPrimitive) {
    addNotNullAnnotation=false;
  }
 else   if (fieldAnnotation != null) {
    addNotNullAnnotation=!fieldAnnotation.optional() && !fieldAnnotation.allowAnyPrimitiveValue() && !fieldAnnotation.allowAnyPrimitiveValueAndMap();
  }
 else {
    addNotNullAnnotation=method.getAnnotation(JsonOptionalField.class) == null;
  }
  ValueReader fieldTypeParser=reader.getFieldTypeParser(genericReturnType,false,method);
  if (fieldTypeParser != InterfaceReader.VOID_PARSER) {
    fieldLoaders.add(new FieldLoader(method.getName(),jsonName,fieldTypeParser));
  }
  final String effectiveFieldName=fieldTypeParser == InterfaceReader.VOID_PARSER ? null : method.getName();
  return new MethodHandler(){
    @Override void writeMethodImplementationJava(    @NotNull ClassScope scope,    @NotNull Method method,    @NotNull TextOutput out){
      if (addNotNullAnnotation) {
        out.append("@NotNull").newLine();
      }
      writeMethodDeclarationJava(out,method);
      out.openBlock();
      if (effectiveFieldName != null) {
        out.append("return ").append(TypeWriter.FIELD_PREFIX).append(effectiveFieldName).semi();
      }
      out.closeBlock();
    }
  }
;
}
