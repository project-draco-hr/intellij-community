{
  this.reader=reader;
  Method[] methods=typeClass.getMethods();
  Arrays.sort(methods,new Comparator<Method>(){
    @Override public int compare(    @NotNull Method o1,    @NotNull Method o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  Package aPackage=typeClass.getPackage();
  for (  Method method : methods) {
    Class<?> methodClass=method.getDeclaringClass();
    if (methodClass != typeClass && methodClass.getPackage() != aPackage) {
      continue;
    }
    if (method.getParameterTypes().length != 0) {
      throw new JsonProtocolModelParseException("No parameters expected in " + method);
    }
    try {
      String fieldName=checkAndGetJsonFieldName(method);
      MethodHandler methodHandler;
      JsonSubtypeCasting jsonSubtypeCaseAnnotation=method.getAnnotation(JsonSubtypeCasting.class);
      if (jsonSubtypeCaseAnnotation != null) {
        methodHandler=processManualSubtypeMethod(method,jsonSubtypeCaseAnnotation);
        lazyRead=true;
      }
 else {
        methodHandler=processFieldGetterMethod(method,fieldName);
      }
      methodHandlerMap.put(method,methodHandler);
    }
 catch (    JsonProtocolModelParseException e) {
      throw new JsonProtocolModelParseException("Problem with method " + method,e);
    }
  }
}
