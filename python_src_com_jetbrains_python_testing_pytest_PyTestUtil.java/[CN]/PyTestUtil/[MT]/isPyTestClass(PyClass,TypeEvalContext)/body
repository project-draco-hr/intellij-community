{
  final TypeEvalContext contextToUse=(context != null ? context : TypeEvalContext.codeInsightFallback(pyClass.getProject()));
  for (  PyClassLikeType type : pyClass.getAncestorTypes(contextToUse)) {
    if (type != null && PYTHON_TEST_QUALIFIED_CLASSES.contains(type.getClassQName())) {
      return true;
    }
  }
  final String className=pyClass.getName();
  if (className == null)   return false;
  final String name=className.toLowerCase();
  if (name.startsWith("test")) {
    for (    PyFunction cls : pyClass.getMethods()) {
      if (isPyTestFunction(cls)) {
        return true;
      }
    }
  }
  return false;
}
