{
  return new SearchingForTestsTask(myServerSocket,getConfiguration(),myTempFile){
    @Override protected void search() throws CantRunException {
      myClasses.clear();
      final TestData data=getConfiguration().getPersistantData();
      final Pair<String,String> position=data.TEST_OBJECT.equals(TestType.SOURCE.getType()) ? Pair.create(data.getMainClassName(),data.getMethodName()) : null;
      final Set<String> patterns=TestDiscoverySearchHelper.search(getProject(),position,data.getChangeList(),getConfiguration().getFrameworkPrefix());
      final Module module=getConfiguration().getConfigurationModule().getModule();
      final GlobalSearchScope searchScope=module != null ? GlobalSearchScope.moduleWithDependenciesScope(module) : GlobalSearchScope.projectScope(getProject());
      TestNGTestPattern.fillTestObjects(myClasses,patterns,TestSearchScope.MODULE_WITH_DEPENDENCIES,getConfiguration(),searchScope);
    }
    @Override protected void onFound(){
      super.onFound();
      writeClassesPerModule(myClasses);
    }
  }
;
}
