{
  if (!FileModificationService.getInstance().prepareFileForWrite(file))   return;
  final PsiJavaCodeReferenceElement refExpr=(PsiJavaCodeReferenceElement)element.getParent();
  final PsiClass aClass=(PsiClass)refExpr.resolve();
  if (aClass == null) {
    return;
  }
  final PsiClass containingClass=PsiUtil.getTopLevelClass(refExpr);
  if (aClass != containingClass) {
    PsiImportList importList=((PsiJavaFile)file).getImportList();
    if (importList == null) {
      return;
    }
    boolean alreadyImported=false;
    for (    PsiImportStaticStatement statement : importList.getImportStaticStatements()) {
      if (!statement.isOnDemand())       continue;
      PsiClass staticResolve=statement.resolveTargetClass();
      if (aClass == staticResolve) {
        alreadyImported=true;
        break;
      }
    }
    if (!alreadyImported) {
      PsiImportStaticStatement importStaticStatement=JavaPsiFacade.getInstance(file.getProject()).getElementFactory().createImportStaticStatement(aClass,"*");
      importList.add(importStaticStatement);
    }
  }
  List<PsiFile> roots=file.getViewProvider().getAllFiles();
  for (  final PsiFile root : roots) {
    PsiElement copy=root.copy();
    final PsiManager manager=root.getManager();
    final TIntArrayList expressionToDequalifyOffsets=new TIntArrayList();
    copy.accept(new JavaRecursiveElementWalkingVisitor(){
      int delta;
      @Override public void visitReferenceElement(      PsiJavaCodeReferenceElement expression){
        if (isParameterizedReference(expression))         return;
        PsiElement qualifierExpression=expression.getQualifier();
        if (qualifierExpression instanceof PsiJavaCodeReferenceElement && ((PsiJavaCodeReferenceElement)qualifierExpression).isReferenceTo(aClass)) {
          try {
            PsiElement resolved=expression.resolve();
            int end=expression.getTextRange().getEndOffset();
            qualifierExpression.delete();
            delta+=end - expression.getTextRange().getEndOffset();
            PsiElement after=expression.resolve();
            if (manager.areElementsEquivalent(after,resolved)) {
              expressionToDequalifyOffsets.add(expression.getTextRange().getStartOffset() + delta);
            }
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
        super.visitElement(expression);
      }
    }
);
    expressionToDequalifyOffsets.forEachDescending(new TIntProcedure(){
      @Override public boolean execute(      int offset){
        PsiJavaCodeReferenceElement expression=PsiTreeUtil.findElementOfClassAtOffset(root,offset,PsiJavaCodeReferenceElement.class,false);
        if (expression == null) {
          return false;
        }
        PsiElement qualifierExpression=expression.getQualifier();
        if (qualifierExpression instanceof PsiJavaCodeReferenceElement && ((PsiJavaCodeReferenceElement)qualifierExpression).isReferenceTo(aClass)) {
          qualifierExpression.delete();
          if (editor != null) {
            HighlightManager.getInstance(project).addRangeHighlight(editor,expression.getTextRange().getStartOffset(),expression.getTextRange().getEndOffset(),EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES),false,null);
          }
        }
        return true;
      }
    }
);
  }
}
