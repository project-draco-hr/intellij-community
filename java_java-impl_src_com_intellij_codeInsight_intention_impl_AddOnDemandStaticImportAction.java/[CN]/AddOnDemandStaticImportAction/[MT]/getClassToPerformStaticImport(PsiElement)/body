{
  if (!PsiUtil.isLanguageLevel5OrHigher(element))   return null;
  if (!(element instanceof PsiIdentifier) || !(element.getParent() instanceof PsiJavaCodeReferenceElement)) {
    return null;
  }
  PsiJavaCodeReferenceElement refExpr=(PsiJavaCodeReferenceElement)element.getParent();
  if (refExpr instanceof PsiMethodReferenceExpression)   return null;
  final PsiElement gParent=refExpr.getParent();
  if (gParent instanceof PsiMethodReferenceExpression)   return null;
  if (!(gParent instanceof PsiJavaCodeReferenceElement) || isParameterizedReference((PsiJavaCodeReferenceElement)gParent))   return null;
  PsiElement resolved=refExpr.resolve();
  if (!(resolved instanceof PsiClass)) {
    return null;
  }
  PsiClass psiClass=(PsiClass)resolved;
  if (PsiUtil.isFromDefaultPackage(psiClass) || psiClass.hasModifierProperty(PsiModifier.PRIVATE) || psiClass.getQualifiedName() == null)   return null;
  final PsiElement ggParent=gParent.getParent();
  if (ggParent instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression call=(PsiMethodCallExpression)ggParent.copy();
    final PsiElement qualifier=call.getMethodExpression().getQualifier();
    if (qualifier == null)     return null;
    qualifier.delete();
    final PsiMethod method=call.resolveMethod();
    if (method != null && method.getContainingClass() != psiClass)     return null;
  }
 else {
    final PsiJavaCodeReferenceElement copy=(PsiJavaCodeReferenceElement)gParent.copy();
    final PsiElement qualifier=copy.getQualifier();
    if (qualifier == null)     return null;
    qualifier.delete();
    final PsiElement target=copy.resolve();
    if (target != null && PsiTreeUtil.getParentOfType(target,PsiClass.class) != psiClass)     return null;
  }
  PsiFile file=refExpr.getContainingFile();
  if (!(file instanceof PsiJavaFile))   return null;
  PsiImportList importList=((PsiJavaFile)file).getImportList();
  if (importList == null)   return null;
  return psiClass;
}
