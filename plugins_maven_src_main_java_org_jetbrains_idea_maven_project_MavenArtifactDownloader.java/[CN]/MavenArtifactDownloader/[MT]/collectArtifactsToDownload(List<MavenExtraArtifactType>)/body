{
  Map<MavenId,DownloadData> result=new THashMap<MavenId,DownloadData>();
  THashSet<String> dependencyTypesFromSettings=new THashSet<String>();
  AccessToken accessToken=ReadAction.start();
  try {
    if (myProject.isDisposed())     return result;
    dependencyTypesFromSettings.addAll(MavenProjectsManager.getInstance(myProject).getImportingSettings().getDependencyTypesAsSet());
  }
  finally {
    accessToken.finish();
  }
  for (  MavenProject eachProject : myMavenProjects) {
    List<MavenRemoteRepository> repositories=eachProject.getRemoteRepositories();
    for (    MavenArtifact eachDependency : eachProject.getDependencies()) {
      if (myArtifacts != null && !myArtifacts.contains(eachDependency))       continue;
      if (MavenConstants.SCOPE_SYSTEM.equalsIgnoreCase(eachDependency.getScope()))       continue;
      if (myProjectsTree.findProject(eachDependency.getMavenId()) != null)       continue;
      String dependencyType=eachDependency.getType();
      if (!dependencyTypesFromSettings.contains(dependencyType) && !eachProject.getDependencyTypesFromImporters(SupportedRequestType.FOR_IMPORT).contains(dependencyType)) {
        continue;
      }
      MavenId id=eachDependency.getMavenId();
      DownloadData data=result.get(id);
      if (data == null) {
        data=new DownloadData();
        result.put(id,data);
      }
      data.repositories.addAll(repositories);
      for (      MavenExtraArtifactType eachType : types) {
        Pair<String,String> classifierAndExtension=eachProject.getClassifierAndExtension(eachDependency,eachType);
        String classifier=eachDependency.getFullClassifier(classifierAndExtension.first);
        String extension=classifierAndExtension.second;
        data.classifiersWithExtensions.add(new DownloadElement(classifier,extension,eachType));
      }
    }
  }
  return result;
}
