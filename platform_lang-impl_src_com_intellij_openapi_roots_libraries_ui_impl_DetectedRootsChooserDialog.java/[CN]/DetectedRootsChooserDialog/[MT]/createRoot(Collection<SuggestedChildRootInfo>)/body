{
  SuggestedChildRootInfo[] sortedRoots=suggestedRoots.toArray(new SuggestedChildRootInfo[suggestedRoots.size()]);
  Arrays.sort(sortedRoots,new Comparator<SuggestedChildRootInfo>(){
    @Override public int compare(    @NotNull SuggestedChildRootInfo o1,    @NotNull SuggestedChildRootInfo o2){
      return o1.getDetectedRoot().getFile().getPresentableUrl().compareTo(o2.getDetectedRoot().getFile().getPresentableUrl());
    }
  }
);
  CheckedTreeNode root=new CheckedTreeNode(null);
  Map<VirtualFile,CheckedTreeNode> rootCandidateNodes=new HashMap<VirtualFile,CheckedTreeNode>();
  for (  SuggestedChildRootInfo rootInfo : sortedRoots) {
    final VirtualFile rootCandidate=rootInfo.getRootCandidate();
    CheckedTreeNode parent=rootCandidateNodes.get(rootCandidate);
    if (parent == null) {
      parent=new VirtualFileCheckedTreeNode(rootCandidate);
      rootCandidateNodes.put(rootCandidate,parent);
      root.add(parent);
    }
    parent.add(new VirtualFileCheckedTreeNode(rootInfo));
  }
  return root;
}
