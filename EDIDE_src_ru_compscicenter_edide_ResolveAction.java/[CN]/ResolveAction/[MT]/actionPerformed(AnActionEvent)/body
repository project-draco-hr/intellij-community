{
  Editor selectedEditor=null;
  Project project=e.getProject();
  FileEditor fileEditor=FileEditorManagerImpl.getInstanceEx(project).getSplitters().getCurrentWindow().getSelectedEditor().getSelectedEditorWithProvider().getFirst();
  if (fileEditor instanceof StudyEditor) {
    FileEditor defaultEditor=((StudyEditor)fileEditor).getDefaultEditor();
    if (defaultEditor instanceof PsiAwareTextEditorImpl) {
      selectedEditor=((PsiAwareTextEditorImpl)defaultEditor).getEditor();
    }
  }
  if (selectedEditor == null) {
    return;
  }
  VirtualFile openedFile=FileDocumentManager.getInstance().getFile(selectedEditor.getDocument());
  if (openedFile != null) {
    try {
      TaskFile selectedTaskFile=StudyTaskManager.getInstance(project).getTaskFile(openedFile);
      if (selectedTaskFile != null) {
        Window selectedTaskWindow=StudyTaskManager.getInstance(project).getSelectedWindow();
        if (selectedTaskWindow != null) {
          RangeHighlighter selectedRangeHighlighter=selectedTaskWindow.getRangeHighlighter();
          int lineChange=selectedEditor.getDocument().getLineCount() - selectedTaskFile.getLineNum();
          if (lineChange != 0) {
            int newStartLine=getLineNumByOffset(selectedEditor,selectedRangeHighlighter.getStartOffset());
            int newEndLine=getLineNumByOffset(selectedEditor,selectedRangeHighlighter.getEndOffset());
            selectedTaskFile.increment(newStartLine,lineChange);
            selectedTaskWindow.setLine(selectedTaskWindow.getLine() - lineChange);
            selectedTaskFile.incrementAfterOffset(newEndLine,0,selectedRangeHighlighter.getEndOffset() - selectedEditor.getDocument().getLineStartOffset(newEndLine));
          }
 else {
            int oldEnd=selectedTaskWindow.getRealStartOffset(selectedEditor) + selectedTaskWindow.getOffsetInLine();
            int endChange=selectedRangeHighlighter.getEndOffset() - oldEnd;
            selectedTaskFile.incrementAfterOffset(selectedTaskWindow.getLine(),selectedTaskWindow.getStart(),endChange);
          }
          int newLength=selectedRangeHighlighter.getEndOffset() - selectedRangeHighlighter.getStartOffset();
          selectedTaskWindow.setOffsetInLine(newLength);
          selectedTaskWindow.setResolveStatus(true);
          selectedEditor.getMarkupModel().removeAllHighlighters();
          selectedTaskWindow.draw(selectedEditor,false);
          FileDocumentManager.getInstance().saveAllDocuments();
          FileDocumentManager.getInstance().reloadFiles(openedFile);
        }
      }
    }
 catch (    NullPointerException exp) {
      LOG.error(exp.getStackTrace());
    }
  }
}
