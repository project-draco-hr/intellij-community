{
  editor.getGutter().closeAllAnnotations();
  fileAnnotation.setCloser(new Runnable(){
    @Override public void run(){
      if (project.isDisposed())       return;
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          if (project.isDisposed())           return;
          editor.getGutter().closeAllAnnotations();
        }
      }
);
    }
  }
);
  if (onCurrentRevision) {
    ProjectLevelVcsManager.getInstance(project).getAnnotationLocalChangesListener().registerAnnotation(file,fileAnnotation);
  }
  final EditorGutterComponentEx editorGutter=(EditorGutterComponentEx)editor.getGutter();
  final List<AnnotationFieldGutter> gutters=new ArrayList<AnnotationFieldGutter>();
  final AnnotationSourceSwitcher switcher=fileAnnotation.getAnnotationSourceSwitcher();
  final UpToDateLineNumberProvider getUpToDateLineNumber=new UpToDateLineNumberProviderImpl(editor.getDocument(),project);
  final AnnotationPresentation presentation=new AnnotationPresentation(fileAnnotation,getUpToDateLineNumber,switcher);
  if (vcs.getCommittedChangesProvider() != null) {
    presentation.addAction(new ShowDiffFromAnnotation(fileAnnotation,vcs,file));
  }
  presentation.addAction(new CopyRevisionNumberFromAnnotateAction(fileAnnotation));
  presentation.addAction(Separator.getInstance());
  final Couple<Map<VcsRevisionNumber,Color>> bgColorMap=Registry.is("vcs.show.colored.annotations") ? computeBgColors(fileAnnotation) : null;
  final Map<VcsRevisionNumber,Integer> historyIds=Registry.is("vcs.show.history.numbers") ? computeLineNumbers(fileAnnotation) : null;
  if (switcher != null) {
    switcher.switchTo(switcher.getDefaultSource());
    final LineAnnotationAspect revisionAspect=switcher.getRevisionAspect();
    final CurrentRevisionAnnotationFieldGutter currentRevisionGutter=new CurrentRevisionAnnotationFieldGutter(fileAnnotation,editor,revisionAspect,presentation,bgColorMap);
    final MergeSourceAvailableMarkerGutter mergeSourceGutter=new MergeSourceAvailableMarkerGutter(fileAnnotation,editor,null,presentation,bgColorMap);
    presentation.addAction(new SwitchAnnotationSourceAction(switcher,editorGutter));
    presentation.addSourceSwitchListener(currentRevisionGutter);
    presentation.addSourceSwitchListener(mergeSourceGutter);
    currentRevisionGutter.consume(switcher.getDefaultSource());
    mergeSourceGutter.consume(switcher.getDefaultSource());
    gutters.add(currentRevisionGutter);
    gutters.add(mergeSourceGutter);
  }
  final LineAnnotationAspect[] aspects=fileAnnotation.getAspects();
  for (  LineAnnotationAspect aspect : aspects) {
    gutters.add(new AnnotationFieldGutter(fileAnnotation,editor,aspect,presentation,bgColorMap));
  }
  if (historyIds != null) {
    gutters.add(new HistoryIdColumn(fileAnnotation,editor,presentation,bgColorMap,historyIds));
  }
  gutters.add(new HighlightedAdditionalColumn(fileAnnotation,editor,null,presentation,bgColorMap));
  final AnnotateActionGroup actionGroup=new AnnotateActionGroup(gutters,editorGutter);
  presentation.addAction(actionGroup,1);
  gutters.add(new ExtraFieldGutter(fileAnnotation,editor,presentation,bgColorMap,actionGroup));
  presentation.addAction(new AnnotateCurrentRevisionAction(fileAnnotation,vcs));
  presentation.addAction(new AnnotatePreviousRevisionAction(fileAnnotation,vcs));
  addActionsFromExtensions(presentation,fileAnnotation);
  for (  AnnotationFieldGutter gutter : gutters) {
    final AnnotationGutterLineConvertorProxy proxy=new AnnotationGutterLineConvertorProxy(getUpToDateLineNumber,gutter);
    if (gutter.isGutterAction()) {
      editor.getGutter().registerTextAnnotation(proxy,proxy);
    }
 else {
      editor.getGutter().registerTextAnnotation(proxy);
    }
  }
}
