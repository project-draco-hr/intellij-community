{
  Map<String,Color> commitOrderColors=new HashMap<String,Color>();
  Map<String,Color> commitAuthorColors=new HashMap<String,Color>();
  Map<String,Color> authorColors=new HashMap<String,Color>();
  final List<VcsFileRevision> fileRevisionList=fileAnnotation.getRevisions();
  final boolean darcula=UIUtil.isUnderDarcula();
  if (fileRevisionList != null) {
    final int colorsNumber=BG_COLORS.length;
    final int revisionsNumber=fileRevisionList.size();
    for (int i=0; i < fileRevisionList.size(); i++) {
      VcsFileRevision revision=fileRevisionList.get(i);
      final String number=revision.getRevisionNumber().asString();
      final String author=revision.getAuthor();
      if (author != null && !authorColors.containsKey(author)) {
        final int size=authorColors.size();
        Color color=BG_COLORS[size < colorsNumber ? size : size % colorsNumber];
        if (darcula) {
          color=ColorUtil.shift(color,0.3);
        }
        authorColors.put(author,color);
      }
      if (number != null && !commitOrderColors.containsKey(number)) {
        Color color=BG_COLORS[colorsNumber * i / revisionsNumber];
        if (darcula) {
          color=ColorUtil.shift(color,0.3);
        }
        commitOrderColors.put(number,color);
      }
      if (number != null && !commitAuthorColors.containsKey(number)) {
        commitAuthorColors.put(number,authorColors.get(author));
      }
    }
  }
  commitOrderColors=commitOrderColors.size() > 1 ? commitOrderColors : null;
  commitAuthorColors=commitAuthorColors.size() > 1 ? commitAuthorColors : null;
  return Couple.of(commitOrderColors,commitAuthorColors);
}
