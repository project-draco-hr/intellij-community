{
  DebuggerManagerThreadImpl.assertIsManagerThread();
  qName=reformatArrayName(qName);
  ReferenceType refType=null;
  VirtualMachineProxyImpl virtualMachine=getVirtualMachineProxy();
  ClassType classClassType=(ClassType)ContainerUtil.getFirstItem(virtualMachine.classesByName(CommonClassNames.JAVA_LANG_CLASS));
  if (classClassType != null) {
    final Method forNameMethod;
    List<Value> args=new ArrayList<>();
    args.add(virtualMachine.mirrorOf(qName));
    if (classLoader != null) {
      forNameMethod=DebuggerUtils.findMethod(classClassType,"forName","(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;");
      args.add(virtualMachine.mirrorOf(true));
      args.add(classLoader);
    }
 else {
      forNameMethod=DebuggerUtils.findMethod(classClassType,"forName","(Ljava/lang/String;)Ljava/lang/Class;");
    }
    Value classReference=invokeMethod(evaluationContext,classClassType,forNameMethod,args);
    if (classReference instanceof ClassObjectReference) {
      refType=((ClassObjectReference)classReference).reflectedType();
    }
  }
  return refType;
}
