{
  final ThreadReference thread=getEvaluationThread(evaluationContext);
  return new InvokeCommand<Value>(method,args){
    @Override protected Value invokeMethod(    int invokePolicy,    Method method,    List args) throws InvocationException, ClassNotLoadedException, IncompatibleThreadStateException, InvalidTypeException {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Invoke " + method.name());
      }
      java.lang.reflect.Method invokeMethod=ReflectionUtil.getMethod(InterfaceType.class,"invokeMethod",ThreadReference.class,Method.class,List.class,int.class);
      if (invokeMethod == null) {
        throw new IllegalStateException("Unable to evaluate static interface method, needs to run IDEA on java 1.8.0_45 at least");
      }
      try {
        return (Value)invokeMethod.invoke(interfaceType,thread,method,args,invokePolicy);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
.start((EvaluationContextImpl)evaluationContext,false);
}
