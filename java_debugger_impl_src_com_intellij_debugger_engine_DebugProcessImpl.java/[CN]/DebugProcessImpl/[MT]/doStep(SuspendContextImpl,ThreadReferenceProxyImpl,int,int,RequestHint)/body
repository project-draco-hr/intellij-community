{
  if (stepThread == null) {
    return;
  }
  try {
    final ThreadReference stepThreadReference=stepThread.getThreadReference();
    if (LOG.isDebugEnabled()) {
      LOG.debug("DO_STEP: creating step request for " + stepThreadReference);
    }
    deleteStepRequests(stepThreadReference);
    EventRequestManager requestManager=getVirtualMachineProxy().eventRequestManager();
    StepRequest stepRequest=requestManager.createStepRequest(stepThreadReference,size,depth);
    if (!(hint != null && hint.isIgnoreFilters())) {
      List<ClassFilter> activeFilters=getActiveFilters();
      if (!activeFilters.isEmpty()) {
        final String currentClassName=getCurrentClassName(stepThread);
        if (currentClassName == null || !DebuggerUtilsEx.isFiltered(currentClassName,activeFilters)) {
          for (          ClassFilter filter : activeFilters) {
            stepRequest.addClassExclusionFilter(filter.getPattern());
          }
        }
      }
    }
    stepRequest.setSuspendPolicy(Registry.is("debugger.step.resumes.one.thread") ? EventRequest.SUSPEND_EVENT_THREAD : suspendContext.getSuspendPolicy());
    if (hint != null) {
      stepRequest.putProperty("hint",hint);
    }
    stepRequest.enable();
  }
 catch (  ObjectCollectedException ignored) {
  }
}
