{
  showStatusText(DebuggerBundle.message("status.run.to.cursor"));
  cancelRunToCursorBreakpoint();
  if (myRunToCursorBreakpoint == null) {
    return;
  }
  if (myIgnoreBreakpoints) {
    final BreakpointManager breakpointManager=DebuggerManagerEx.getInstanceEx(myProject).getBreakpointManager();
    breakpointManager.disableBreakpoints(DebugProcessImpl.this);
  }
  applyThreadFilter(getContextThread());
  final SuspendContextImpl context=getSuspendContext();
  myRunToCursorBreakpoint.setSuspendPolicy(context.getSuspendPolicy() == EventRequest.SUSPEND_EVENT_THREAD ? DebuggerSettings.SUSPEND_THREAD : DebuggerSettings.SUSPEND_ALL);
  final DebugProcessImpl debugProcess=context.getDebugProcess();
  myRunToCursorBreakpoint.createRequest(debugProcess);
  DebugProcessImpl.this.myRunToCursorBreakpoint=myRunToCursorBreakpoint;
  if (debugProcess.getRequestsManager().getWarning(myRunToCursorBreakpoint) == null) {
    super.contextAction();
  }
 else {
    DebuggerInvocationUtil.swingInvokeLater(myProject,new Runnable(){
      @Override public void run(){
        Messages.showErrorDialog(DebuggerBundle.message("error.running.to.cursor.no.executable.code",myRunToCursorBreakpoint.getSourcePosition().getFile().getName(),myRunToCursorBreakpoint.getLineIndex() + 1),UIUtil.removeMnemonic(ActionsBundle.actionText(XDebuggerActions.RUN_TO_CURSOR)));
        DebuggerSession session=debugProcess.getSession();
        session.getContextManager().setState(DebuggerContextUtil.createDebuggerContext(session,context),DebuggerSession.State.PAUSED,DebuggerSession.Event.CONTEXT,null);
      }
    }
);
  }
}
