{
  if (!iterator.hasNext())   return;
  final Map.Entry<String,JsonElement> entry=iterator.next();
  String key=entry.getKey();
  ProjectSetProcessor processor=processors.get(key);
  if (processor == null) {
    LOG.error("Processor not found for " + key);
    return;
  }
  List<Pair<String,String>> list;
  if (entry.getValue().isJsonObject()) {
    JsonObject object=entry.getValue().getAsJsonObject();
    if (object.entrySet().size() == 1 && object.entrySet().iterator().next().getValue().isJsonArray()) {
      final Map.Entry<String,JsonElement> next=object.entrySet().iterator().next();
      list=ContainerUtil.map(next.getValue().getAsJsonArray(),new Function<JsonElement,Pair<String,String>>(){
        @Override public Pair<String,String> fun(        JsonElement o){
          return Pair.create(next.getKey(),getString(o));
        }
      }
);
    }
 else {
      list=ContainerUtil.map(object.entrySet(),new Function<Map.Entry<String,JsonElement>,Pair<String,String>>(){
        @Override public Pair<String,String> fun(        Map.Entry<String,JsonElement> entry){
          JsonElement value=entry.getValue();
          return Pair.create(entry.getKey(),getString(value));
        }
      }
);
    }
  }
 else {
    list=Collections.singletonList(Pair.create(entry.getKey(),entry.getValue().getAsString()));
  }
  processor.processEntries(list,context,new Runnable(){
    @Override public void run(){
      runProcessor(processors,context,iterator);
    }
  }
);
}
