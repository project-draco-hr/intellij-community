{
  if (!iterator.hasNext())   return;
  Map.Entry<String,JsonElement> entry=iterator.next();
  String key=entry.getKey();
  ProjectSetProcessor processor=processors.get(key);
  if (processor == null) {
    LOG.error("Processor not found for " + key);
    return;
  }
  JsonObject object=entry.getValue().getAsJsonObject();
  List<Pair<String,String>> list=ContainerUtil.map(object.entrySet(),new Function<Map.Entry<String,JsonElement>,Pair<String,String>>(){
    @Override public Pair<String,String> fun(    Map.Entry<String,JsonElement> entry){
      JsonElement value=entry.getValue();
      return Pair.create(entry.getKey(),value instanceof JsonPrimitive ? value.getAsString() : value.toString());
    }
  }
);
  processor.processEntries(list,param,new Consumer<Object>(){
    @Override public void consume(    Object o){
      runProcessor(processors,o,iterator);
    }
  }
);
}
