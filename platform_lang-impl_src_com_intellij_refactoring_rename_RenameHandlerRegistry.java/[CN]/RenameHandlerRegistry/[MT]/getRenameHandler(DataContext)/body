{
  final Map<String,RenameHandler> availableHandlers=new TreeMap<String,RenameHandler>();
  for (  RenameHandler renameHandler : Extensions.getExtensions(RenameHandler.EP_NAME)) {
    if (renameHandler.isRenaming(dataContext)) {
      availableHandlers.put(getHandlerTitle(renameHandler),renameHandler);
    }
  }
  for (  RenameHandler renameHandler : myHandlers) {
    if (renameHandler.isRenaming(dataContext)) {
      availableHandlers.put(getHandlerTitle(renameHandler),renameHandler);
    }
  }
  if (availableHandlers.size() == 1)   return availableHandlers.values().iterator().next();
  for (Iterator<Map.Entry<String,RenameHandler>> iterator=availableHandlers.entrySet().iterator(); iterator.hasNext(); ) {
    Map.Entry<String,RenameHandler> entry=iterator.next();
    if (entry.getValue() instanceof MemberInplaceRenameHandler) {
      iterator.remove();
      break;
    }
  }
  if (availableHandlers.size() == 1)   return availableHandlers.values().iterator().next();
  if (availableHandlers.size() > 1) {
    if (ApplicationManager.getApplication().isUnitTestMode())     return availableHandlers.values().iterator().next();
    final String[] strings=ArrayUtil.toStringArray(availableHandlers.keySet());
    final HandlersChooser chooser=new HandlersChooser(CommonDataKeys.PROJECT.getData(dataContext),strings);
    if (chooser.showAndGet()) {
      return availableHandlers.get(chooser.getSelection());
    }
    throw new ProcessCanceledException();
  }
  return myDefaultElementRenameHandler.isRenaming(dataContext) ? myDefaultElementRenameHandler : null;
}
