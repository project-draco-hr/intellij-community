{
  final ScopeOwner firstOwner=getScopeOwner(element);
  if (firstOwner == null) {
    return null;
  }
  final ScopeOwner nextOwner=getScopeOwner(firstOwner);
  final PyElement decoratorOrParameterAncestor=PsiTreeUtil.getParentOfType(element,PyDecorator.class,PyParameter.class);
  if (decoratorOrParameterAncestor != null && !PsiTreeUtil.isAncestor(decoratorOrParameterAncestor,firstOwner,true)) {
    return nextOwner;
  }
  final PyClass containingClass=PsiTreeUtil.getParentOfType(element,PyClass.class);
  if (containingClass != null && PsiTreeUtil.isAncestor(containingClass.getSuperClassExpressionList(),element,false)) {
    return nextOwner;
  }
  return firstOwner;
}
