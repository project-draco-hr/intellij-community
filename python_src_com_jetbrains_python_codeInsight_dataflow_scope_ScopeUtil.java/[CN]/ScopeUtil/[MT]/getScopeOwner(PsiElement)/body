{
  if (element instanceof StubBasedPsiElement) {
    final StubElement stub=((StubBasedPsiElement)element).getStub();
    if (stub != null) {
      StubElement parentStub=stub.getParentStub();
      while (parentStub != null) {
        final PsiElement parent=parentStub.getPsi();
        if (parent instanceof ScopeOwner) {
          return (ScopeOwner)parent;
        }
        parentStub=parentStub.getParentStub();
      }
      return null;
    }
  }
  final ScopeOwner firstOwner=getParentOfType(element,ScopeOwner.class);
  if (firstOwner == null) {
    return null;
  }
  final ScopeOwner nextOwner=getParentOfType(firstOwner,ScopeOwner.class);
  final PyElement decoratorAncestor=getParentOfType(element,PyDecorator.class);
  if (decoratorAncestor != null && !isAncestor(decoratorAncestor,firstOwner,true)) {
    return nextOwner;
  }
  final PyNamedParameter parameterAncestor=getParentOfType(element,PyNamedParameter.class);
  if (parameterAncestor != null && !isAncestor(parameterAncestor,firstOwner,true)) {
    final PyExpression defaultValue=parameterAncestor.getDefaultValue();
    final PyAnnotation annotation=parameterAncestor.getAnnotation();
    if (isAncestor(defaultValue,element,false) || isAncestor(annotation,element,false)) {
      return nextOwner;
    }
  }
  final PyClass containingClass=getParentOfType(element,PyClass.class);
  if (containingClass != null && isAncestor(containingClass.getSuperClassExpressionList(),element,false)) {
    return nextOwner;
  }
  if (firstOwner instanceof PyFunction) {
    final PyFunction function=(PyFunction)firstOwner;
    final PyAnnotation annotation=function.getAnnotation();
    if (isAncestor(annotation,element,false)) {
      return nextOwner;
    }
  }
  return firstOwner;
}
