{
  mySuffixesManager=IgnoredPropertiesFilesSuffixesManager.getInstance(project);
  final JBList list=new JBList();
  final List<String> suffixes=new ArrayList<String>(mySuffixesManager.getIgnoredSuffixes());
  mySuffixesModel=new CollectionListModel<String>(suffixes);
  mySuffixesModel.sort(String.CASE_INSENSITIVE_ORDER);
  list.setModel(mySuffixesModel);
  myPanel=ToolbarDecorator.createDecorator(list).disableUpDownActions().setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final String result=Messages.showInputDialog(CommonDataKeys.PROJECT.getData(button.getDataContext()),"Suffixes to ignore (use comma to separate suffixes):","Add Ignored Suffixes",null);
      if (result != null) {
        final List<String> suffixes=StringUtil.split(result,",");
        for (        String suffix : suffixes) {
          if (mySuffixesModel.getElementIndex(suffix) == -1) {
            mySuffixesModel.add(suffix);
          }
        }
        updateModifiedStatus();
        mySuffixesModel.sort(String.CASE_INSENSITIVE_ORDER);
      }
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      for (      Object toDelete : list.getSelectedValues()) {
        mySuffixesModel.remove((String)toDelete);
      }
      updateModifiedStatus();
    }
  }
).createPanel();
  list.setCellRenderer(new ColoredListCellRenderer<String>(){
    @Override protected void customizeCellRenderer(    JList list,    String suffix,    int index,    boolean selected,    boolean hasFocus){
      append(suffix);
      final Locale locale=PropertiesUtil.getLocale("_" + suffix + ".properties");
      if (locale != PropertiesUtil.DEFAULT_LOCALE && PropertiesUtil.hasDefaultLanguage(locale)) {
        append(" ");
        append(PropertiesUtil.getPresentableLocale(locale),SimpleTextAttributes.GRAY_ATTRIBUTES);
      }
    }
  }
);
  myPanel.setBorder(IdeBorderFactory.createTitledBorder("Ignored properties file suffixes:"));
}
