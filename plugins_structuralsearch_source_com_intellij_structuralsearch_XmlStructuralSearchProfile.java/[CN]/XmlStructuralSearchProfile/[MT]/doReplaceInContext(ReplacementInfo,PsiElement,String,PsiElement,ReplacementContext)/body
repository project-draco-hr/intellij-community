{
  PsiElement[] statements=ReplacerUtil.createTreeForReplacement(replacementToMake,PatternTreeContext.Block,context);
  if (statements.length > 1) {
    elementParent.addRangeBefore(statements[0],statements[statements.length - 1],elementToReplace);
  }
 else   if (statements.length == 1) {
    PsiElement replacement=statements[0];
    ReplacerImpl.handleComments(elementToReplace,replacement,context);
    try {
      elementParent.addBefore(replacement,elementToReplace);
    }
 catch (    IncorrectOperationException e) {
      elementToReplace.replace(replacement);
    }
  }
  final int matchSize=info.getMatchesCount();
  for (int i=0; i < matchSize; ++i) {
    PsiElement element=info.getMatch(i);
    if (element == null)     continue;
    PsiElement firstToDelete=element;
    PsiElement lastToDelete=element;
    PsiElement prevSibling=element.getPrevSibling();
    PsiElement nextSibling=element.getNextSibling();
    if (prevSibling instanceof PsiWhiteSpace) {
      firstToDelete=prevSibling;
    }
 else     if (prevSibling == null && nextSibling instanceof PsiWhiteSpace) {
      lastToDelete=nextSibling;
    }
    if (nextSibling instanceof XmlText && i + 1 < matchSize) {
      final PsiElement next=info.getMatch(i + 1);
      if (next != null && next == nextSibling.getNextSibling()) {
        lastToDelete=nextSibling;
      }
    }
    element.getParent().deleteChildRange(firstToDelete,lastToDelete);
  }
}
