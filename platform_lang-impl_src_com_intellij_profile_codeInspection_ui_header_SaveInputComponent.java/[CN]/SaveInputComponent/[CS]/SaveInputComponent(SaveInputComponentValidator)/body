{
  myButton=new JButton(){
    @Override public void paint(    Graphics g){
      super.paint(g);
    }
  }
;
  myButton.setText("Save");
  myButton.setDefaultCapable(false);
  myButton.setFocusable(false);
  myButton.putClientProperty("JButton.buttonType","square");
  myButton.setBorder(new DarculaButtonPainter(){
    @Override public void paintBorder(    Component c,    Graphics g,    int x,    int y,    int width,    int height){
      final Graphics2D g2d=(Graphics2D)g;
      final GraphicsConfig config=new GraphicsConfig(g);
      g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
      g2d.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_DEFAULT);
      ((Graphics2D)g).setPaint(Gray._100.withAlpha(180));
      if (SystemInfo.isMac) {
        g.drawRoundRect(x + 2,y + 3,width - 8,height - 7,5,5);
      }
 else {
        g.drawRoundRect(x + 2,y,width - 8,height - 2,5,5);
      }
      config.restore();
    }
    @Override protected int getOffset(){
      return 5;
    }
    @Override public Insets getBorderInsets(    Component c){
      return new Insets(2,10,2,10);
    }
  }
);
  myTextField=new JBTextField();
  myTextField.setFocusable(true);
  setFocusable(false);
  setLayout(new BorderLayout());
  add(myTextField,BorderLayout.CENTER);
  add(myButton,BorderLayout.EAST);
  myInputValidator=inputValidator;
  myTextField.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void insertUpdate(    DocumentEvent e){
      changedUpdate(e);
    }
    @Override public void removeUpdate(    DocumentEvent e){
      changedUpdate(e);
    }
    @Override public void changedUpdate(    DocumentEvent e){
      final boolean isValid=myInputValidator.checkValid(myTextField.getText());
      myButton.setEnabled(isValid);
      final Color color=isValid ? UIUtil.getTextAreaForeground() : JBColor.RED;
      if (!color.equals(myTextField.getForeground())) {
        myTextField.setForeground(color);
      }
    }
  }
);
  myTextField.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      checkAndApply();
    }
  }
);
  myTextField.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        e.consume();
      }
    }
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        checkAndApply();
        e.consume();
      }
    }
  }
);
  new ClickListener(){
    @Override public boolean onClick(    @NotNull MouseEvent event,    int clickCount){
      checkAndApply();
      return true;
    }
  }
.installOn(myButton);
}
