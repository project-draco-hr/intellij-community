{
  final PyElementGenerator generator=PyElementGenerator.getInstance(oldExpression.getProject());
  final LanguageLevel languageLevel=LanguageLevel.forElement(oldExpression);
  final String newLiteralText=prefix + "%(" + newText+ ")s"+ suffix;
  final PyStringLiteralExpression newLiteralExpression=generator.createStringLiteralAlreadyEscaped(newLiteralText);
  oldExpression.replace(newLiteralExpression);
  final PyDictLiteralExpression dict=(PyDictLiteralExpression)formatValue;
  final StringBuilder builder=new StringBuilder();
  builder.append("{");
  final PyKeyValueExpression[] elements=dict.getElements();
  builder.append(StringUtil.join(elements,new Function<PyKeyValueExpression,String>(){
    @Override public String fun(    PyKeyValueExpression expression){
      return expression.getText();
    }
  }
,","));
  if (elements.length > 0) {
    builder.append(",");
  }
  builder.append(quotes.getSecond());
  builder.append(newText);
  builder.append(quotes.getSecond());
  builder.append(":");
  final int pos=builder.toString().length();
  builder.append(newText);
  builder.append("}");
  final PyExpression newDictLiteral=generator.createExpressionFromText(languageLevel,builder.toString());
  final PsiElement newElement=formatValue.replace(newDictLiteral);
  return newElement.findElementAt(pos);
}
