{
  final String fullText=oldExpression.getText();
  final Pair<String,String> detectedQuotes=PythonStringUtil.getQuotes(fullText);
  final Pair<String,String> quotes=detectedQuotes != null ? detectedQuotes : Pair.create("'","'");
  final String prefix=fullText.substring(0,textRange.getStartOffset());
  final String suffix=fullText.substring(textRange.getEndOffset(),oldExpression.getTextLength());
  final PyExpression valueExpression=PyStringFormatParser.getFormatValueExpression(oldExpression);
  final String newText=newExpression.getText();
  final PyElementGenerator generator=PyElementGenerator.getInstance(oldExpression.getProject());
  final LanguageLevel languageLevel=LanguageLevel.forElement(oldExpression);
  final List<PyStringFormatParser.SubstitutionChunk> substitutions=new PyStringFormatParser(fullText).parseSubstitutions();
  if (valueExpression != null && !containsStringFormatting(fullText,textRange)) {
    if (valueExpression instanceof PyTupleExpression) {
      final String newLiteralText=prefix + "%s" + suffix;
      final PyStringLiteralExpression newLiteralExpression=generator.createStringLiteralAlreadyEscaped(newLiteralText);
      oldExpression.replace(newLiteralExpression);
      final PyTupleExpression tuple=(PyTupleExpression)valueExpression;
      final PyExpression[] members=tuple.getElements();
      final List<PyStringFormatParser.SubstitutionChunk> positional=PyStringFormatParser.getPositionalSubstitutions(substitutions);
      final int i=getPositionInRanges(PyStringFormatParser.substitutionsToRanges(positional),textRange);
      final int n=members.length;
      if (n > 0 && i <= n) {
        final boolean last=i == n;
        final ASTNode trailingComma=PyPsiUtils.getNextComma(members[n - 1].getNode());
        if (trailingComma != null) {
          tuple.getNode().removeChild(trailingComma);
        }
        final PyExpression before=last ? null : members[i];
        PyUtil.addListNode(tuple,newExpression,before != null ? before.getNode() : null,i == 0 || !last,last,!last);
        return newExpression;
      }
    }
 else     if (valueExpression instanceof PyDictLiteralExpression) {
      final String newLiteralText=prefix + "%(" + newText+ ")s"+ suffix;
      final PyStringLiteralExpression newLiteralExpression=generator.createStringLiteralAlreadyEscaped(newLiteralText);
      oldExpression.replace(newLiteralExpression);
      final PyDictLiteralExpression dict=(PyDictLiteralExpression)valueExpression;
      final StringBuilder builder=new StringBuilder();
      builder.append("{");
      final PyKeyValueExpression[] elements=dict.getElements();
      builder.append(StringUtil.join(elements,new Function<PyKeyValueExpression,String>(){
        @Override public String fun(        PyKeyValueExpression expression){
          return expression.getText();
        }
      }
,","));
      if (elements.length > 0) {
        builder.append(",");
      }
      builder.append(quotes.getSecond());
      builder.append(newText);
      builder.append(quotes.getSecond());
      builder.append(":");
      final int pos=builder.toString().length();
      builder.append(newText);
      builder.append("}");
      final PyExpression newDictLiteral=generator.createExpressionFromText(languageLevel,builder.toString());
      final PsiElement newElement=valueExpression.replace(newDictLiteral);
      return newElement.findElementAt(pos);
    }
 else {
      final TypeEvalContext context=TypeEvalContext.slow();
      final PyType valueType=valueExpression.getType(context);
      final PyBuiltinCache builtinCache=PyBuiltinCache.getInstance(oldExpression);
      final PyType tupleType=builtinCache.getTupleType();
      final PyType mappingType=PyTypeParser.getTypeByName(null,"collections.Mapping");
      if (!PyTypeChecker.match(tupleType,valueType,context) || (mappingType != null && !PyTypeChecker.match(mappingType,valueType,context))) {
        final String newLiteralText=prefix + "%s" + suffix;
        final PyStringLiteralExpression newLiteralExpression=generator.createStringLiteralAlreadyEscaped(newLiteralText);
        oldExpression.replace(newLiteralExpression);
        final StringBuilder builder=new StringBuilder();
        builder.append("(");
        final List<PyStringFormatParser.SubstitutionChunk> positional=PyStringFormatParser.getPositionalSubstitutions(substitutions);
        final int i=getPositionInRanges(PyStringFormatParser.substitutionsToRanges(positional),textRange);
        final int pos;
        if (i == 0) {
          pos=builder.toString().length();
          builder.append(newText);
          builder.append(",");
          builder.append(valueExpression.getText());
        }
 else {
          builder.append(valueExpression.getText());
          builder.append(",");
          pos=builder.toString().length();
          builder.append(newText);
        }
        builder.append(")");
        final PsiElement newElement=valueExpression.replace(generator.createExpressionFromText(languageLevel,builder.toString()));
        return newElement.findElementAt(pos);
      }
    }
  }
  if (isConcatFormatting(oldExpression) || substitutions.size() > 0) {
    final String leftQuote=quotes.getFirst();
    final String rightQuote=quotes.getSecond();
    final StringBuilder builder=new StringBuilder();
    if (valueExpression != null) {
      builder.append("(");
    }
    if (!leftQuote.endsWith(prefix)) {
      builder.append(prefix + rightQuote + " + ");
    }
    final int pos=builder.toString().length();
    builder.append(newText);
    if (!rightQuote.startsWith(suffix)) {
      builder.append(" + " + leftQuote + suffix);
    }
    if (valueExpression != null) {
      builder.append(")");
    }
    final PsiElement expression=generator.createExpressionFromText(languageLevel,builder.toString());
    final PsiElement newElement=oldExpression.replace(expression);
    return newElement.findElementAt(pos);
  }
 else {
    final PsiElement parent=oldExpression.getParent();
    final boolean parensNeeded=parent instanceof PyExpression && !(parent instanceof PyParenthesizedExpression);
    final StringBuilder builder=new StringBuilder();
    if (parensNeeded) {
      builder.append("(");
    }
    builder.append(prefix);
    builder.append("%s");
    builder.append(suffix);
    builder.append(" % ");
    final int pos=builder.toString().length();
    builder.append(newText);
    if (parensNeeded) {
      builder.append(")");
    }
    final PyExpression expression=generator.createExpressionFromText(languageLevel,builder.toString());
    final PsiElement newElement=oldExpression.replace(expression);
    return newElement.findElementAt(pos);
  }
}
