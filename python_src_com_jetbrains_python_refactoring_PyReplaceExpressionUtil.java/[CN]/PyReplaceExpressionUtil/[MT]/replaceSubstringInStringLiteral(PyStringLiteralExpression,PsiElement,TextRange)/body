{
  final String fullText=oldExpression.getText();
  final String prefix=fullText.substring(0,textRange.getStartOffset());
  final String suffix=fullText.substring(textRange.getEndOffset(),oldExpression.getTextLength());
  final PyExpression valueExpression=PyStringFormatParser.getFormatValueExpression(oldExpression);
  final PyElementGenerator generator=PyElementGenerator.getInstance(oldExpression.getProject());
  final LanguageLevel languageLevel=LanguageLevel.forElement(oldExpression);
  final List<PyStringFormatParser.SubstitutionChunk> substitutions=new PyStringFormatParser(fullText).parseSubstitutions();
  if (isConcatFormatting(oldExpression) || substitutions.size() > 0) {
    final Pair<String,String> detectedQuotes=PythonStringUtil.getQuotes(fullText);
    final Pair<String,String> quotes=detectedQuotes != null ? detectedQuotes : Pair.create("'","'");
    final String leftQuote=quotes.getFirst();
    final String rightQuote=quotes.getSecond();
    final StringBuilder builder=new StringBuilder();
    if (valueExpression != null) {
      builder.append("(");
    }
    if (!leftQuote.endsWith(prefix)) {
      builder.append(prefix + rightQuote + " + ");
    }
    final int pos=builder.toString().length();
    builder.append(newExpression.getText());
    if (!rightQuote.startsWith(suffix)) {
      builder.append(" + " + leftQuote + suffix);
    }
    if (valueExpression != null) {
      builder.append(")");
    }
    final PsiElement expression=generator.createExpressionFromText(languageLevel,builder.toString());
    final PsiElement newElement=oldExpression.replace(expression);
    return newElement.findElementAt(pos);
  }
 else {
    final PsiElement parent=oldExpression.getParent();
    final boolean parensNeeded=parent instanceof PyExpression && !(parent instanceof PyParenthesizedExpression);
    final StringBuilder builder=new StringBuilder();
    if (parensNeeded) {
      builder.append("(");
    }
    builder.append(prefix);
    builder.append("%s");
    builder.append(suffix);
    builder.append(" % ");
    final int pos=builder.toString().length();
    builder.append(newExpression.getText());
    if (parensNeeded) {
      builder.append(")");
    }
    final PyExpression expression=generator.createExpressionFromText(languageLevel,builder.toString());
    final PsiElement newElement=oldExpression.replace(expression);
    return newElement.findElementAt(pos);
  }
}
