{
  final String fullText=oldExpression.getText();
  final String prefix=fullText.substring(0,textRange.getStartOffset());
  final String suffix=fullText.substring(textRange.getEndOffset(),oldExpression.getTextLength());
  final PyExpression valueExpression=PyStringFormatParser.getFormatValueExpression(oldExpression);
  final PyElementGenerator generator=PyElementGenerator.getInstance(oldExpression.getProject());
  final LanguageLevel languageLevel=LanguageLevel.forElement(oldExpression);
  final List<PyStringFormatParser.SubstitutionChunk> substitutions=new PyStringFormatParser(fullText).parseSubstitutions();
  if (valueExpression instanceof PyTupleExpression && !containsStringFormatting(fullText,textRange)) {
    final String newLiteralText=prefix + "%s" + suffix;
    final PyStringLiteralExpression newLiteralExpression=generator.createStringLiteralAlreadyEscaped(newLiteralText);
    oldExpression.replace(newLiteralExpression);
    final PyTupleExpression tuple=(PyTupleExpression)valueExpression;
    final PyExpression[] members=tuple.getElements();
    final List<PyStringFormatParser.SubstitutionChunk> positional=PyStringFormatParser.getPositionalSubstitutions(substitutions);
    final int i=getPositionInRanges(PyStringFormatParser.substitutionsToRanges(positional),textRange);
    final int n=members.length;
    if (n > 0 && i <= n) {
      final boolean last=i == n;
      final ASTNode trailingComma=PyPsiUtils.getNextComma(members[n - 1].getNode());
      if (trailingComma != null) {
        tuple.getNode().removeChild(trailingComma);
      }
      final PyExpression before=last ? null : members[i];
      PyUtil.addListNode(tuple,newExpression,before != null ? before.getNode() : null,i == 0 || !last,last,!last);
      return newExpression;
    }
    return null;
  }
 else   if (isConcatFormatting(oldExpression) || substitutions.size() > 0) {
    final Pair<String,String> detectedQuotes=PythonStringUtil.getQuotes(fullText);
    final Pair<String,String> quotes=detectedQuotes != null ? detectedQuotes : Pair.create("'","'");
    final String leftQuote=quotes.getFirst();
    final String rightQuote=quotes.getSecond();
    final StringBuilder builder=new StringBuilder();
    if (valueExpression != null) {
      builder.append("(");
    }
    if (!leftQuote.endsWith(prefix)) {
      builder.append(prefix + rightQuote + " + ");
    }
    final int pos=builder.toString().length();
    builder.append(newExpression.getText());
    if (!rightQuote.startsWith(suffix)) {
      builder.append(" + " + leftQuote + suffix);
    }
    if (valueExpression != null) {
      builder.append(")");
    }
    final PsiElement expression=generator.createExpressionFromText(languageLevel,builder.toString());
    final PsiElement newElement=oldExpression.replace(expression);
    return newElement.findElementAt(pos);
  }
 else {
    final PsiElement parent=oldExpression.getParent();
    final boolean parensNeeded=parent instanceof PyExpression && !(parent instanceof PyParenthesizedExpression);
    final StringBuilder builder=new StringBuilder();
    if (parensNeeded) {
      builder.append("(");
    }
    builder.append(prefix);
    builder.append("%s");
    builder.append(suffix);
    builder.append(" % ");
    final int pos=builder.toString().length();
    builder.append(newExpression.getText());
    if (parensNeeded) {
      builder.append(")");
    }
    final PyExpression expression=generator.createExpressionFromText(languageLevel,builder.toString());
    final PsiElement newElement=oldExpression.replace(expression);
    return newElement.findElementAt(pos);
  }
}
