{
  element.accept(new JqlElementVisitor(){
    @Override public void visitEmptyValue(    JqlEmptyValue emptyValue){
      JqlSimpleClause clause=PsiTreeUtil.getParentOfType(emptyValue,JqlSimpleClause.class);
      if (clause != null && !isEmptyClause(clause)) {
        holder.createErrorAnnotation(emptyValue,String.format("Not expecting '%s' here",emptyValue.getText()));
      }
    }
    @Override public void visitJqlList(    JqlList list){
      JqlSimpleClause clause=PsiTreeUtil.getParentOfType(list,JqlSimpleClause.class);
      if (clause != null && !isListClause(clause)) {
        holder.createErrorAnnotation(list,String.format("Not expecting list of values here"));
      }
    }
    @Override public void visitJqlSimpleClause(    JqlSimpleClause clause){
      JqlOperand operand=clause.getOperand();
      if (operand == null) {
        return;
      }
      boolean operandIsListLiteral=operand instanceof JqlList;
      boolean operandIsListFunction=false;
      if (operand instanceof JqlFunctionCall) {
        JqlFunctionCall functionCall=(JqlFunctionCall)operand;
        JqlStandardFunction standardFunction=JqlStandardFunction.byName(functionCall.getFunctionName().getText());
        operandIsListFunction=standardFunction != null && standardFunction.hasMultipleResults();
      }
      boolean hasListOperand=operandIsListLiteral || operandIsListFunction;
      if (isListClause(clause) && !hasListOperand) {
        holder.createErrorAnnotation(operand,"Expecting list of values here");
      }
      boolean hasEmptyOperand=operand instanceof JqlEmptyValue;
      if (isEmptyClause(clause) && !hasEmptyOperand) {
        holder.createErrorAnnotation(operand,"Expecting 'empty' or 'null' here");
      }
    }
  }
);
}
