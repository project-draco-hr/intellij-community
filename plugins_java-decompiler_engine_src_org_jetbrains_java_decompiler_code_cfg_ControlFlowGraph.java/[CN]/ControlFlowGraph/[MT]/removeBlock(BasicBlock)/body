{
  while (block.getSuccs().size() > 0) {
    block.removeSuccessor((BasicBlock)block.getSuccs().get(0));
  }
  while (block.getSuccExceptions().size() > 0) {
    block.removeSuccessorException((BasicBlock)block.getSuccExceptions().get(0));
  }
  while (block.getPreds().size() > 0) {
    ((BasicBlock)block.getPreds().get(0)).removeSuccessor(block);
  }
  while (block.getPredExceptions().size() > 0) {
    ((BasicBlock)block.getPredExceptions().get(0)).removeSuccessorException(block);
  }
  last.removePredecessor(block);
  blocks.removeWithKey(block.id);
  for (int i=exceptions.size() - 1; i >= 0; i--) {
    ExceptionRangeCFG range=(ExceptionRangeCFG)exceptions.get(i);
    if (range.getHandler() == block) {
      exceptions.remove(i);
    }
 else {
      List<BasicBlock> lstRange=range.getProtectedRange();
      lstRange.remove(block);
      if (lstRange.isEmpty()) {
        exceptions.remove(i);
      }
    }
  }
  Iterator<Entry<BasicBlock,BasicBlock>> it=subroutines.entrySet().iterator();
  while (it.hasNext()) {
    Entry<BasicBlock,BasicBlock> ent=it.next();
    if (ent.getKey() == block || ent.getValue() == block) {
      it.remove();
    }
  }
}
