{
  List<JsrRecord> lstJsrAll=new ArrayList<>();
  for (  Entry<BasicBlock,BasicBlock> ent : subroutines.entrySet()) {
    BasicBlock jsr=ent.getKey();
    BasicBlock ret=ent.getValue();
    lstJsrAll.add(new JsrRecord(jsr,getJsrRange(jsr,ret),ret));
  }
  List<JsrRecord> lstJsr=new ArrayList<>();
  for (  JsrRecord arr : lstJsrAll) {
    int i=0;
    for (; i < lstJsr.size(); i++) {
      JsrRecord arrJsr=lstJsr.get(i);
      if (arrJsr.range.contains(arr.jsr)) {
        break;
      }
    }
    lstJsr.add(i,arr);
  }
  for (int i=0; i < lstJsr.size(); i++) {
    JsrRecord arr=lstJsr.get(i);
    Set<BasicBlock> set=arr.range;
    for (int j=i + 1; j < lstJsr.size(); j++) {
      JsrRecord arr1=lstJsr.get(j);
      Set<BasicBlock> set1=arr1.range;
      if (!set.contains(arr1.jsr) && !set1.contains(arr.jsr)) {
        Set<BasicBlock> setc=new HashSet<>(set);
        setc.retainAll(set1);
        if (!setc.isEmpty()) {
          splitJsrRange(arr.jsr,arr.ret,setc);
          return 1;
        }
      }
    }
  }
  return 0;
}
