{
  ListStack<VarType> stack=data.getStack();
  InstructionSequence seq=block.getSeq();
  for (int i=0; i < seq.length(); i++) {
    Instruction instr=seq.getInstr(i);
    VarType var=null;
    if (instr.opcode == CodeConstants.opc_astore || instr.opcode == CodeConstants.opc_pop) {
      var=stack.getByOffset(-1);
    }
    InstructionImpact.stepTypes(data,instr,pool);
switch (instr.opcode) {
case CodeConstants.opc_jsr:
case CodeConstants.opc_ret:
      seq.removeInstruction(i);
    i--;
  break;
case CodeConstants.opc_astore:
case CodeConstants.opc_pop:
if (var.type == CodeConstants.TYPE_ADDRESS) {
  seq.removeInstruction(i);
  i--;
}
}
}
block.mark=1;
for (int i=0; i < block.getSuccs().size(); i++) {
BasicBlock suc=(BasicBlock)block.getSuccs().get(i);
if (suc.mark != 1) {
removeJsrInstructions(pool,suc,data.copy());
}
}
for (int i=0; i < block.getSuccExceptions().size(); i++) {
BasicBlock suc=(BasicBlock)block.getSuccExceptions().get(i);
if (suc.mark != 1) {
DataPoint point=new DataPoint();
point.setLocalVariables(new ArrayList<VarType>(data.getLocalVariables()));
point.getStack().push(new VarType(CodeConstants.TYPE_OBJECT,0,null));
removeJsrInstructions(pool,suc,point);
}
}
}
