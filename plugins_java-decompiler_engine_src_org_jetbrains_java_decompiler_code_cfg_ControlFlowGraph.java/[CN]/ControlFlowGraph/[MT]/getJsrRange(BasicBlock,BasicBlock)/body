{
  Set<BasicBlock> blocks=new HashSet<BasicBlock>();
  List<BasicBlock> lstNodes=new LinkedList<BasicBlock>();
  lstNodes.add(jsr);
  BasicBlock dom=jsr.getSuccs().get(0);
  while (!lstNodes.isEmpty()) {
    BasicBlock node=lstNodes.remove(0);
    for (int j=0; j < 2; j++) {
      List<BasicBlock> lst;
      if (j == 0) {
        if (node.getLastInstruction().opcode == CodeConstants.opc_ret) {
          if (node.getSuccs().contains(ret)) {
            continue;
          }
        }
        lst=node.getSuccs();
      }
 else {
        if (node == jsr) {
          continue;
        }
        lst=node.getSuccExceptions();
      }
      CHILD:       for (int i=lst.size() - 1; i >= 0; i--) {
        BasicBlock child=lst.get(i);
        if (!blocks.contains(child)) {
          if (node != jsr) {
            for (int k=0; k < child.getPreds().size(); k++) {
              if (!DeadCodeHelper.isDominator(this,child.getPreds().get(k),dom)) {
                continue CHILD;
              }
            }
            for (int k=0; k < child.getPredExceptions().size(); k++) {
              if (!DeadCodeHelper.isDominator(this,child.getPredExceptions().get(k),dom)) {
                continue CHILD;
              }
            }
          }
          if (child != last) {
            blocks.add(child);
          }
          lstNodes.add(child);
        }
      }
    }
  }
  return blocks;
}
