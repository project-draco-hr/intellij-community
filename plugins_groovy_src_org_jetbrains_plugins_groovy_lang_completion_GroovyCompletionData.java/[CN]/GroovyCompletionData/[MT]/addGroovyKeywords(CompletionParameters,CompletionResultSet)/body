{
  PsiElement position=parameters.getPosition();
  PsiElement parent=position.getParent();
  if (parent instanceof GrLiteral) {
    return;
  }
  final String[] extendsImplements=addExtendsImplements(position);
  for (  String keyword : extendsImplements) {
    result.addElement(keyword(keyword,TailType.HUMBLE_SPACE_BEFORE_WORD));
  }
  if (extendsImplements.length > 0) {
    return;
  }
  if (parent instanceof GrExpression && parent.getParent() instanceof GrAnnotationNameValuePair) {
    addKeywords(result,false,PsiKeyword.TRUE,PsiKeyword.FALSE,PsiKeyword.NULL);
    return;
  }
  if (afterAtInType(position)) {
    result.addElement(keyword(PsiKeyword.INTERFACE,TailType.HUMBLE_SPACE_BEFORE_WORD));
  }
  if (!PlatformPatterns.psiElement().afterLeaf(".",".&","@","*.","?.").accepts(position)) {
    if (afterAbstractMethod(position,false,true)) {
      result.addElement(keyword(PsiKeyword.THROWS,TailType.HUMBLE_SPACE_BEFORE_WORD));
      if (afterAbstractMethod(position,false,false))       return;
    }
    if (suggestPackage(position)) {
      result.addElement(keyword(PsiKeyword.PACKAGE,TailType.HUMBLE_SPACE_BEFORE_WORD));
    }
    if (suggestImport(position)) {
      result.addElement(keyword(PsiKeyword.IMPORT,TailType.HUMBLE_SPACE_BEFORE_WORD));
    }
    addTypeDefinitionKeywords(result,position);
    if (isAfterAnnotationMethodIdentifier(position)) {
      result.addElement(keyword(PsiKeyword.DEFAULT,TailType.HUMBLE_SPACE_BEFORE_WORD));
    }
    addExtendsForTypeParams(position,result);
    registerControlCompletion(position,result);
    if (parent instanceof GrExpression || isInfixOperatorPosition(position)) {
      addKeywords(result,false,PsiKeyword.TRUE,PsiKeyword.FALSE,PsiKeyword.NULL,PsiKeyword.SUPER,PsiKeyword.THIS);
      result.addElement(keyword(PsiKeyword.NEW,TailType.HUMBLE_SPACE_BEFORE_WORD));
    }
    if (isAfterForParameter(position)) {
      result.addElement(keyword("in",TailType.HUMBLE_SPACE_BEFORE_WORD));
    }
    if (isInfixOperatorPosition(position)) {
      addKeywords(result,true,"as","in",PsiKeyword.INSTANCEOF);
    }
    if (suggestPrimitiveTypes(position)) {
      final boolean addSpace=!IN_CAST_TYPE_ELEMENT.accepts(position) && !GroovySmartCompletionContributor.AFTER_NEW.accepts(position) && !isInExpression(position);
      addKeywords(result,addSpace,BUILT_IN_TYPES);
    }
    if (PsiJavaPatterns.psiElement(GrReferenceExpression.class).inside(StandardPatterns.or(PsiJavaPatterns.psiElement(GrWhileStatement.class),PsiJavaPatterns.psiElement(GrForStatement.class))).accepts(parent)) {
      addKeywords(result,false,PsiKeyword.BREAK,PsiKeyword.CONTINUE);
    }
 else     if (PsiJavaPatterns.psiElement(GrReferenceExpression.class).inside(GrCaseSection.class).accepts(parent)) {
      addKeywords(result,false,PsiKeyword.BREAK);
    }
    if (PsiJavaPatterns.psiElement().withSuperParent(2,GrImportStatement.class).accepts(position)) {
      if (PsiJavaPatterns.psiElement().afterLeaf(PsiKeyword.IMPORT).accepts(position)) {
        addKeywords(result,true,PsiKeyword.STATIC);
      }
    }
 else {
      if (suggestModifiers(position)) {
        addModifiers(position,result);
      }
      if (PsiJavaPatterns.psiElement().afterLeaf(MODIFIERS).accepts(position) || GroovyCompletionUtil.isInTypeDefinitionBody(position) && GroovyCompletionUtil.isNewStatement(position,true)) {
        addKeywords(result,true,PsiKeyword.SYNCHRONIZED);
      }
      if (suggestFinalDef(position) || PsiJavaPatterns.psiElement().afterLeaf(PsiJavaPatterns.psiElement().withText("(").withParent(GrForStatement.class)).accepts(position)) {
        addKeywords(result,true,PsiKeyword.FINAL,"def");
      }
    }
  }
}
