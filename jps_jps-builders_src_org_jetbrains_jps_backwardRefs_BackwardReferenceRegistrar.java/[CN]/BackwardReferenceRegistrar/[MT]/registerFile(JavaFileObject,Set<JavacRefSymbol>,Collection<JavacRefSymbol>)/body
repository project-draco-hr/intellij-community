{
  final int fileId=myWriter.enumerateFile(file);
  final List<LightUsage> definedClasses=new ArrayList<LightUsage>(defs.size());
  for (  JavacRefSymbol def : defs) {
    Tree.Kind kind=def.getPlaceKind();
    if (kind == Tree.Kind.CLASS) {
      Symbol.ClassSymbol sym=(Symbol.ClassSymbol)def.getSymbol();
      Type superclass=sym.getSuperclass();
      List<Type> interfaces=sym.getInterfaces();
      final Symbol[] supers;
      if (superclass != Type.noType) {
        supers=new Symbol[interfaces.size() + 1];
        supers[interfaces.size()]=superclass.asElement();
      }
 else {
        supers=interfaces.isEmpty() ? EMPTY_SYMBOL_ARRAY : new Symbol[interfaces.size()];
      }
      int i=0;
      for (      Type anInterface : interfaces) {
        supers[i++]=anInterface.asElement();
      }
      final LightUsage.LightClassUsage aClass=myWriter.asClassUsage(sym);
      definedClasses.add(aClass);
      if (supers.length != 0) {
        final LightUsage.LightClassUsage[] superIds=new LightUsage.LightClassUsage[supers.length];
        for (int j=0; j < supers.length; j++) {
          superIds[j]=myWriter.asClassUsage(supers[j]);
        }
        myWriter.writeHierarchy(fileId,aClass,superIds);
      }
    }
  }
  myWriter.writeClassDefinitions(fileId,definedClasses);
  myWriter.writeReferences(fileId,refs);
}
