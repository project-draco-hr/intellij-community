{
  ApplicationInfo appInfo=ApplicationInfo.getInstance();
  String majorVersion=appInfo.getMajorVersion();
  String versionNumber="";
  if (majorVersion != null && majorVersion.trim().length() > 0) {
    String minorVersion=appInfo.getMinorVersion();
    if (minorVersion != null && minorVersion.trim().length() > 0) {
      versionNumber=majorVersion + "." + minorVersion;
    }
 else {
      versionNumber=majorVersion + ".0";
    }
  }
  myVersionNumber.setText(appInfo.getVersionName() + " " + versionNumber);
  myBuildNumber.setText(appInfo.getBuild().asString());
  myCheckNow.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Project project=CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(myCheckNow));
      UpdateSettings settings=new UpdateSettings();
      settings.loadState(UpdateSettings.getInstance().getState());
      settings.UPDATE_CHANNEL_TYPE=getSelectedChannelType().getCode();
      settings.SECURE_CONNECTION=myUseSecureConnection.isSelected();
      UpdateChecker.updateAndShowResult(project,settings);
      updateLastCheckedLabel();
    }
  }
);
  LabelTextReplacingUtil.replaceText(myPanel);
  UpdateSettings settings=UpdateSettings.getInstance();
  myUpdateChannels.setModel(new CollectionComboBoxModel(ChannelStatus.all(),ChannelStatus.fromCode(settings.UPDATE_CHANNEL_TYPE)));
  if (!NetUtils.isSniEnabled()) {
    myUseSecureConnection.setEnabled(false);
    boolean tooOld=!SystemInfo.isJavaVersionAtLeast("1.7");
    String message=IdeBundle.message(tooOld ? "update.sni.not.available.notification" : "update.sni.disabled.notification");
    myUseSecureConnection.setToolTipText(message);
  }
}
