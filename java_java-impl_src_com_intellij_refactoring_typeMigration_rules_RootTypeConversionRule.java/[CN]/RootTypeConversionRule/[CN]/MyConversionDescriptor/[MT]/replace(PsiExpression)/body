{
  if (myReplacer.hasModifierProperty(PsiModifier.STATIC)) {
    final PsiClass containingClass=myReplacer.getContainingClass();
    if (containingClass != null && containingClass.getQualifiedName() != null) {
      final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
      final PsiExpression qualifierExpression=methodCallExpression.getMethodExpression().getQualifierExpression();
      final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(expression.getProject());
      if (qualifierExpression != null) {
        qualifierExpression.replace(elementFactory.createExpressionFromText(containingClass.getQualifiedName(),expression));
        return expression;
      }
 else {
        final PsiElement replacedExpression=expression.replace(elementFactory.createExpressionFromText(containingClass.getQualifiedName() + "." + expression.getText(),expression));
        return (PsiExpression)JavaCodeStyleManager.getInstance(expression.getProject()).shortenClassReferences(replacedExpression);
      }
    }
  }
  return expression;
}
