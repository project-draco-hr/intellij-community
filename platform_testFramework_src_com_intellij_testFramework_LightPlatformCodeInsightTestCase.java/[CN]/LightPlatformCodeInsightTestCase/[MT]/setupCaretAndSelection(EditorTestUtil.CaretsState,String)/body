{
  List<EditorTestUtil.Caret> carets=caretsState.carets;
  if (myEditor.getCaretModel().supportsMultipleCarets()) {
    List<LogicalPosition> caretPositions=new ArrayList<LogicalPosition>();
    List<Segment> selections=new ArrayList<Segment>();
    for (    EditorTestUtil.Caret caret : carets) {
      LogicalPosition pos=null;
      if (caret.offset != null) {
        int caretLine=StringUtil.offsetToLineNumber(fileText,caret.offset);
        int caretCol=EditorUtil.calcColumnNumber(null,myEditor.getDocument().getText(),myEditor.getDocument().getLineStartOffset(caretLine),caret.offset,CodeStyleSettingsManager.getSettings(getProject()).getIndentOptions(StdFileTypes.JAVA).TAB_SIZE);
        pos=new LogicalPosition(caretLine,caretCol);
      }
      caretPositions.add(pos);
      selections.add(caret.selection == null ? null : caret.selection);
    }
    myEditor.getCaretModel().setCarets(caretPositions,selections);
  }
 else {
    assertEquals("Caret model doesn't support multiple carets",1,carets.size());
    EditorTestUtil.Caret caret=carets.get(0);
    if (caret.offset != null) {
      int caretLine=StringUtil.offsetToLineNumber(fileText,caret.offset);
      int caretCol=EditorUtil.calcColumnNumber(null,myEditor.getDocument().getText(),myEditor.getDocument().getLineStartOffset(caretLine),caret.offset,CodeStyleSettingsManager.getSettings(getProject()).getIndentOptions(StdFileTypes.JAVA).TAB_SIZE);
      LogicalPosition pos=new LogicalPosition(caretLine,caretCol);
      myEditor.getCaretModel().moveToLogicalPosition(pos);
    }
    if (caret.selection != null) {
      myEditor.getSelectionModel().setSelection(caret.selection.getStartOffset(),caret.selection.getEndOffset());
    }
  }
}
