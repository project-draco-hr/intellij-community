{
  final LightPlatformCodeInsightTestCase testCase=(LightPlatformCodeInsightTestCase)klass.newInstance();
  if (!(testCase instanceof FileBasedTestCaseHelper)) {
    fail("Parameterized test should implement FileBasedTestCaseHelper");
  }
  final FileBasedTestCaseHelper fileBasedTestCase=(FileBasedTestCaseHelper)testCase;
  final String path=fileBasedTestCase.getRelativeBasePath();
  assertNotNull("getBasePath() should not return null!",path);
  PathManagerEx.replaceLookupStrategy(klass,LightPlatformCodeInsightTestCase.class,com.intellij.testFramework.Parameterized.class);
  String testDataPath=testCase.getTestDataPath();
  final String testDirPath=testDataPath.replace(File.separatorChar,'/') + path;
  File testDir=new File(testDirPath);
  final File[] files=testDir.listFiles();
  if (files == null) {
    fail("Test files not found in " + testDirPath);
  }
  final List<Object[]> result=new ArrayList<Object[]>();
  for (  File file : files) {
    final String fileSuffix=fileBasedTestCase.getFileSuffix(file.getName());
    if (fileSuffix != null) {
      result.add(new Object[]{fileSuffix,testDataPath});
    }
  }
  return result;
}
