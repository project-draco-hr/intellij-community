{
  final Project project=CommonDataKeys.PROJECT.getData(dataContext);
  if (project == null)   return;
  PsiDirectory[] psiDirectory=new PsiDirectory[1];
  PsiElement psiElement=CommonDataKeys.PSI_ELEMENT.getData(dataContext);
  if (psiElement instanceof PsiDirectory) {
    psiDirectory[0]=(PsiDirectory)psiElement;
  }
  PsiFile psiFile=CommonDataKeys.PSI_FILE.getData(dataContext);
  String[] shortFileName=new String[1];
  String[] directoryName=new String[1];
  if (psiFile != null || psiDirectory[0] != null) {
    if (psiFile != null) {
      shortFileName[0]=psiFile.getName();
      if (psiDirectory[0] == null) {
        psiDirectory[0]=psiFile.getContainingDirectory();
      }
    }
    if (psiDirectory[0] != null) {
      directoryName[0]=psiDirectory[0].getVirtualFile().getPresentableUrl();
    }
  }
  Editor editor=CommonDataKeys.EDITOR.getData(dataContext);
  String text=null;
  if (editor != null) {
    if (editor.getSelectionModel().hasSelection()) {
      text=CodeEditorBundle.message("print.selected.text.radio");
    }
 else {
      text=psiFile == null ? "Console text" : null;
    }
  }
  PrintDialog printDialog=new PrintDialog(shortFileName[0],directoryName[0],text,project);
  printDialog.reset();
  printDialog.show();
  if (!printDialog.isOK()) {
    return;
  }
  printDialog.apply();
  final PageFormat pageFormat=createPageFormat();
  final BasePainter painter;
  PrintSettings printSettings=PrintSettings.getInstance();
  if (printSettings.getPrintScope() != PrintSettings.PRINT_DIRECTORY) {
    if (psiFile == null && editor == null)     return;
    TextPainter textPainter=psiFile != null ? initTextPainter(psiFile,editor) : initTextPainter((DocumentEx)editor.getDocument(),project);
    if (textPainter == null)     return;
    if (printSettings.getPrintScope() == PrintSettings.PRINT_SELECTED_TEXT && editor != null && editor.getSelectionModel().hasSelection()) {
      textPainter.setSegment(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd());
    }
    painter=textPainter;
  }
 else {
    List<Pair<PsiFile,Editor>> filesList=ContainerUtil.newArrayList();
    boolean isRecursive=printSettings.isIncludeSubdirectories();
    addToPsiFileList(psiDirectory[0],filesList,isRecursive);
    painter=new MultiFilePainter(filesList);
  }
  Pageable document=new Pageable(){
    @Override public int getNumberOfPages(){
      return Pageable.UNKNOWN_NUMBER_OF_PAGES;
    }
    @Override public PageFormat getPageFormat(    int pageIndex) throws IndexOutOfBoundsException {
      return pageFormat;
    }
    @Override public Printable getPrintable(    int pageIndex) throws IndexOutOfBoundsException {
      return painter;
    }
  }
;
  final PrinterJob printerJob=PrinterJob.getPrinterJob();
  try {
    printerJob.setPageable(document);
    printerJob.setPrintable(painter,pageFormat);
    if (!printerJob.printDialog()) {
      return;
    }
  }
 catch (  Exception e) {
    LOG.warn(e);
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  ProgressManager.getInstance().run(new Task.Backgroundable(project,CodeEditorBundle.message("print.progress"),true,PerformInBackgroundOption.ALWAYS_BACKGROUND){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        painter.setProgress(indicator);
        printerJob.print();
      }
 catch (      ProcessCanceledException e) {
        LOG.info("Cancelled");
        printerJob.cancel();
      }
catch (      PrinterException e) {
        Notifications.Bus.notify(new Notification("Print",CommonBundle.getErrorTitle(),e.getMessage(),NotificationType.ERROR));
        LOG.warn(e);
      }
catch (      Exception e) {
        LOG.error(e);
      }
 finally {
        painter.dispose();
      }
    }
  }
);
}
