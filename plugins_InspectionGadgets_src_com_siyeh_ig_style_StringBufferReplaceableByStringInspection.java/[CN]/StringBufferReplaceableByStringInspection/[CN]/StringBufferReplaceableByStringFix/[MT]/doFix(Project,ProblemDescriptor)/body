{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  if (!(parent instanceof PsiVariable)) {
    if (parent instanceof PsiNewExpression) {
      final PsiExpression stringBuilderExpression=getCompleteExpression(parent);
      collectComments(stringBuilderExpression);
      final StringBuilder stringExpression=buildStringExpression(stringBuilderExpression,new StringBuilder());
      if (stringExpression != null && stringBuilderExpression != null) {
        addLeadingCommentsBefore(stringBuilderExpression);
        addTrailingCommentsAfter(stringBuilderExpression);
        PsiReplacementUtil.replaceExpression(stringBuilderExpression,stringExpression.toString());
      }
    }
    return;
  }
  final PsiVariable variable=(PsiVariable)parent;
  final String variableName=variable.getName();
  if (variableName == null) {
    return;
  }
  final PsiTypeElement originalTypeElement=variable.getTypeElement();
  if (originalTypeElement == null) {
    return;
  }
  final PsiExpression initializer=variable.getInitializer();
  if (initializer == null) {
    return;
  }
  final StringBuilder builder;
  if (isAppendCall(initializer)) {
    collectComments(parent);
    builder=buildStringExpression(initializer,new StringBuilder());
    if (builder == null) {
      return;
    }
  }
 else   if (initializer instanceof PsiNewExpression) {
    final PsiNewExpression newExpression=(PsiNewExpression)initializer;
    final PsiExpressionList argumentList=newExpression.getArgumentList();
    if (argumentList == null) {
      return;
    }
    final PsiExpression[] arguments=argumentList.getExpressions();
    if (arguments.length == 0 || PsiType.INT.equals(arguments[0].getType())) {
      builder=new StringBuilder();
    }
 else {
      builder=new StringBuilder(arguments[0].getText());
    }
  }
 else {
    return;
  }
  final PsiCodeBlock codeBlock=PsiTreeUtil.getParentOfType(variable,PsiCodeBlock.class);
  if (codeBlock == null) {
    return;
  }
  final StringBuildingVisitor visitor=new StringBuildingVisitor(variable,builder);
  codeBlock.accept(visitor);
  if (visitor.hadProblem()) {
    return;
  }
  final List<PsiMethodCallExpression> expressions=visitor.getExpressions();
  final String expressionText=builder.toString().trim();
  final PsiMethodCallExpression lastExpression=expressions.get(expressions.size() - 1);
  final boolean useVariable=expressionText.contains("\n") && !isVariableInitializer(lastExpression);
  if (useVariable) {
    final PsiStatement statement=PsiTreeUtil.getParentOfType(variable,PsiStatement.class);
    if (statement == null) {
      return;
    }
    final String modifier=CodeStyleSettingsManager.getSettings(project).GENERATE_FINAL_LOCALS ? "final " : "";
    final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
    final StringBuilder statementText=new StringBuilder(modifier).append(CommonClassNames.JAVA_LANG_STRING).append(' ').append(variableName).append("=");
    for (    PsiComment comment : leadingComments) {
      statementText.append(comment.getText());
      final PsiElement sibling=comment.getNextSibling();
      if (sibling instanceof PsiWhiteSpace) {
        statementText.append(sibling.getText());
      }
    }
    statementText.append(expressionText).append(';');
    final PsiStatement newStatement=factory.createStatementFromText(statementText.toString(),variable);
    codeBlock.addBefore(newStatement,statement);
    addTrailingCommentsAfter(lastExpression);
    PsiReplacementUtil.replaceExpression(lastExpression,variableName);
  }
 else {
    final PsiStatement statement=PsiTreeUtil.getParentOfType(lastExpression,PsiStatement.class);
    if (statement == null) {
      return;
    }
    addLeadingCommentsBefore(statement);
    addTrailingCommentsAfter(statement);
    PsiReplacementUtil.replaceExpression(lastExpression,expressionText);
  }
  variable.delete();
  for (int i=0, size=expressions.size() - 1; i < size; i++) {
    expressions.get(i).getParent().delete();
  }
}
