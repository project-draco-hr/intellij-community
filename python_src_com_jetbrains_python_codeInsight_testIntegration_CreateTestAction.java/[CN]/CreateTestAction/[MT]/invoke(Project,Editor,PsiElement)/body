{
  final PyFunction srcFunction=PsiTreeUtil.getParentOfType(element,PyFunction.class);
  final PyClass srcClass=PsiTreeUtil.getParentOfType(element,PyClass.class);
  if (srcClass == null && srcFunction == null)   return;
  final PsiDirectory dir=element.getContainingFile().getContainingDirectory();
  final CreateTestDialog d=new CreateTestDialog(project);
  if (srcClass != null) {
    d.setClassName("Test" + StringUtil.capitalize(srcClass.getName()));
    d.setFileName("test_" + StringUtil.decapitalize(srcClass.getName()) + ".py");
    if (dir != null)     d.setTargetDir(dir.getVirtualFile().getPath());
    if (srcFunction != null) {
      d.methodsSize(1);
      d.addMethod("test_" + srcFunction.getName(),0);
    }
 else {
      final List<PyFunction> methods=Lists.newArrayList();
      srcClass.visitMethods(new Processor<PyFunction>(){
        @Override public boolean process(        PyFunction pyFunction){
          if (pyFunction.getName() != null && !pyFunction.getName().startsWith("__"))           methods.add(pyFunction);
          return true;
        }
      }
,false,null);
      d.methodsSize(methods.size());
      int i=0;
      for (      PyFunction f : methods) {
        d.addMethod("test_" + f.getName(),i);
        ++i;
      }
    }
  }
 else {
    d.setClassName("Test" + StringUtil.capitalize(srcFunction.getName()));
    d.setFileName("test_" + StringUtil.decapitalize(srcFunction.getName()) + ".py");
    if (dir != null)     d.setTargetDir(dir.getVirtualFile().getPath());
    d.methodsSize(1);
    d.addMethod("test_" + srcFunction.getName(),0);
  }
  if (!d.showAndGet()) {
    return;
  }
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    @Override public void run(){
      PsiFile e=PyTestCreator.generateTestAndNavigate(project,d);
      final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
      documentManager.commitAllDocuments();
    }
  }
,CodeInsightBundle.message("intention.create.test"),this);
}
