{
  if (psiType instanceof PsiArrayType) {
    return Pair.create(".length","int");
  }
  if (psiType instanceof PsiClassType) {
    PsiClass psiClass=((PsiClassType)psiType).resolve();
    if (psiClass == null)     return null;
    JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(accessContext.getProject());
    PsiClass containingType=PsiTreeUtil.getParentOfType(accessContext,PsiClass.class);
    PsiResolveHelper resolveHelper=psiFacade.getResolveHelper();
    for (    PsiMethod psiMethod : psiClass.getAllMethods()) {
      String methodName=psiMethod.getName();
      if (methodName.equals("size") || methodName.equals("length") || methodName.equals("count")) {
        if (psiMethod.hasModifierProperty(PsiModifier.STATIC))         continue;
        if (psiMethod.getParameterList().getParametersCount() != 0)         continue;
        PsiType returnType=psiMethod.getReturnType();
        if (returnType == null)         continue;
        String integralType=isIntegralType(returnType);
        if (integralType == null)         continue;
        if (resolveHelper.isAccessible(psiMethod,accessContext,containingType)) {
          return Pair.create("." + methodName + "()",integralType);
        }
      }
    }
  }
  if (psiType != null) {
    String integralType=isIntegralType(psiType);
    if (integralType != null) {
      return Pair.create("",integralType);
    }
  }
  return null;
}
