{
  final RefElementNode nodeToBeAdded=container.createNode(presentation);
  final Ref<Boolean> firstLevel=new Ref<Boolean>(true);
  RefElementNode prevNode=null;
  final Ref<RefElementNode> result=new Ref<RefElementNode>();
  while (true) {
    final RefElementNode currentNode=firstLevel.get() ? nodeToBeAdded : container.createNode(presentation);
    final UserObjectContainer finalContainer=container;
    final RefElementNode finalPrevNode=prevNode;
    traverseDepth(parentNode,new Predicate<InspectionTreeNode>(){
      @Override public boolean test(      InspectionTreeNode node){
        if (node instanceof RefElementNode) {
          final RefElementNode refElementNode=(RefElementNode)node;
          final Object userObject=finalContainer.getUserObject();
          final Object object=refElementNode.getValue();
          if ((object == null || userObject.getClass().equals(object.getClass())) && finalContainer.areEqual(object,userObject)) {
            if (firstLevel.get()) {
              result.set(refElementNode);
              return false;
            }
 else {
              refElementNode.add(finalPrevNode);
              result.set(nodeToBeAdded);
              return false;
            }
          }
        }
        return true;
      }
    }
);
    if (!result.isNull())     return result.get();
    if (!firstLevel.get()) {
      currentNode.add(prevNode);
    }
    final UserObjectContainer owner=container.getOwner();
    if (owner == null) {
      parentNode.add(currentNode);
      return nodeToBeAdded;
    }
    container=owner;
    prevNode=currentNode;
    firstLevel.set(false);
  }
}
