{
  final Map<String,Map<String,InspectionPackageNode>> module2PackageMap=new HashMap<String,Map<String,InspectionPackageNode>>();
  boolean supportStructure=showStructure;
  final MultiMap<InspectionPackageNode,UserObjectContainer<T>> packageDescriptors=new MultiMap<>();
  for (  String packageName : packageContents.keySet()) {
    final Set<T> elements=packageContents.get(packageName);
    for (    T userObject : elements) {
      final UserObjectContainer<T> container=computeContainer.fun(userObject);
      supportStructure&=container.supportStructure();
      final String moduleName=showStructure ? container.getModule() : null;
      Map<String,InspectionPackageNode> packageNodes=module2PackageMap.get(moduleName);
      if (packageNodes == null) {
        packageNodes=new HashMap<String,InspectionPackageNode>();
        module2PackageMap.put(moduleName,packageNodes);
      }
      InspectionPackageNode pNode=packageNodes.get(packageName);
      if (pNode == null) {
        pNode=new InspectionPackageNode(packageName);
        packageNodes.put(packageName,pNode);
      }
      packageDescriptors.putValue(pNode,container);
    }
  }
  if (supportStructure) {
    final HashMap<String,InspectionModuleNode> moduleNodes=new HashMap<String,InspectionModuleNode>();
    for (    final String moduleName : module2PackageMap.keySet()) {
      final Map<String,InspectionPackageNode> packageNodes=module2PackageMap.get(moduleName);
      InspectionModuleNode moduleNode=moduleNodes.get(moduleName);
      if (moduleNode == null) {
        if (moduleName != null) {
          final Module module=ModuleManager.getInstance(myProject).findModuleByName(moduleName);
          if (module != null) {
            moduleNode=new InspectionModuleNode(module);
            moduleNodes.put(moduleName,moduleNode);
            moduleNode=(InspectionModuleNode)createdNodesConsumer.apply(moduleNode);
          }
 else {
            continue;
          }
        }
 else {
          for (          InspectionPackageNode packageNode : packageNodes.values()) {
            createdNodesConsumer.apply(packageNode);
            for (            UserObjectContainer<T> container : packageDescriptors.get(packageNode)) {
              appendDescriptor(context,toolWrapper,container,packageNode,canPackageRepeat);
            }
          }
          continue;
        }
      }
 else {
        moduleNode=(InspectionModuleNode)createdNodesConsumer.apply(moduleNode);
      }
      for (      InspectionPackageNode packageNode : packageNodes.values()) {
        if (packageNode.getPackageName() != null) {
          moduleNode.insertByOrder(packageNode,false);
          for (          UserObjectContainer<T> container : packageDescriptors.get(packageNode)) {
            appendDescriptor(context,toolWrapper,container,packageNode,canPackageRepeat);
          }
        }
 else {
          for (          UserObjectContainer<T> container : packageDescriptors.get(packageNode)) {
            appendDescriptor(context,toolWrapper,container,moduleNode,canPackageRepeat);
          }
        }
      }
    }
  }
 else {
    for (    Map<String,InspectionPackageNode> packageNodes : module2PackageMap.values()) {
      for (      InspectionPackageNode pNode : packageNodes.values()) {
        for (        UserObjectContainer<T> container : packageDescriptors.get(pNode)) {
          appendDescriptor(context,toolWrapper,container,pNode,canPackageRepeat);
        }
        final int count=pNode.getChildCount();
        final ArrayList<TreeNode> childNodes=new ArrayList<>(count);
        for (int i=0; i < count; i++) {
          childNodes.add(pNode.getChildAt(i));
        }
        for (        TreeNode childNode : childNodes) {
          if (childNode instanceof ProblemDescriptionNode) {
            createdNodesConsumer.apply(pNode);
            break;
          }
          LOG.assertTrue(childNode instanceof RefElementNode,childNode.getClass().getName());
          final RefElementNode elementNode=(RefElementNode)childNode;
          final Set<RefElementNode> parentNodes=new LinkedHashSet<RefElementNode>();
          if (pNode.getPackageName() != null) {
            parentNodes.add(elementNode);
          }
 else {
            boolean hasElementNodeUnder=true;
            for (int e=0; e < elementNode.getChildCount(); e++) {
              final TreeNode grandChildNode=elementNode.getChildAt(e);
              if (grandChildNode instanceof ProblemDescriptionNode) {
                hasElementNodeUnder=false;
                break;
              }
              LOG.assertTrue(grandChildNode instanceof RefElementNode);
              parentNodes.add((RefElementNode)grandChildNode);
            }
            if (!hasElementNodeUnder) {
              createdNodesConsumer.apply(elementNode);
              continue;
            }
          }
          for (          RefElementNode parentNode : parentNodes) {
            final List<ProblemDescriptionNode> nodes=new ArrayList<ProblemDescriptionNode>();
            TreeUtil.traverse(parentNode,new TreeUtil.Traverse(){
              @Override public boolean accept(              final Object node){
                if (node instanceof ProblemDescriptionNode) {
                  nodes.add((ProblemDescriptionNode)node);
                }
                return true;
              }
            }
);
            if (nodes.isEmpty())             continue;
            parentNode.removeAllChildren();
            for (            ProblemDescriptionNode node : nodes) {
              parentNode.add(node);
            }
          }
          for (          RefElementNode node : parentNodes) {
            createdNodesConsumer.apply(node);
          }
        }
      }
    }
  }
}
