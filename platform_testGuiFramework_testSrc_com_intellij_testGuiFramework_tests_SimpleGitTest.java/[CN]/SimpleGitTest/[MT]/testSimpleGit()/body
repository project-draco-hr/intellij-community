{
  try {
    IdeFrameFixture ideFrameFixture=importSimpleApplication();
    ProjectViewFixture.PaneFixture projectPane=ideFrameFixture.getProjectView().selectProjectPane();
    ideFrameFixture.waitForBackgroundTasksToFinish();
    final String projectName=ideFrameFixture.getProject().getName();
    ProjectViewFixture.NodeFixture src=projectPane.selectByPath(projectName,"src");
    GuiTestUtil.invokeAction(myRobot,"NewElement");
    myRobot.pressAndReleaseKey(KeyEvent.VK_ENTER);
    DialogFixture createNewClassFixture=DialogFixture.find(myRobot,IdeBundle.message("action.create.new.class"));
    myRobot.enterText("MyClass");
    myRobot.pressAndReleaseKey(KeyEvent.VK_ENTER);
    ideFrameFixture.invokeMenuPath("VCS",ActionsBundle.message("group.Vcs.Import.text"),"Create Git Repository...");
    FileChooserDialogFixture fileChooserDialogFixture=FileChooserDialogFixture.findDialog(myRobot,withTitleMatcher(GitBundle.message("init.destination.directory.title")));
    fileChooserDialogFixture.select(ideFrameFixture.getProject().getBaseDir()).clickOk();
    Pause.pause(GuiTestUtil.THIRTY_SEC_TIMEOUT.duration());
    GuiTestUtil.invokeAction(myRobot,"ChangesView.AddUnversioned");
    waitForIdle();
    GuiTestUtil.invokeAction(myRobot,"CheckinProject");
    DialogFixture commitDialogFixture=DialogFixture.find(myRobot,VcsBundle.message("commit.dialog.title"));
    myRobot.enterText("initial commit");
    GuiTestUtil.findAndClickButton(commitDialogFixture,"Commit");
    MessagesFixture.findByTitle(myRobot,commitDialogFixture.target(),VcsBundle.message("code.smells.error.messages.tab.name")).click("Commit");
    Pause.pause(GuiTestUtil.THIRTY_SEC_TIMEOUT.duration());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
