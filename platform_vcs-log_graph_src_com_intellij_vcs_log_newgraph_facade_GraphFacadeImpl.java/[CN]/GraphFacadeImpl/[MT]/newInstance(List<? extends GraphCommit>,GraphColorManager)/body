{
  GraphFlags flags=new GraphFlags(commits.size());
  final PermanentGraphImpl permanentGraph=PermanentGraphBuilder.build(flags.getSimpleNodeFlags(),commits);
  DfsUtil dfsUtil=new DfsUtil(commits.size());
  final PermanentGraphLayout graphLayout=PermanentGraphLayoutBuilder.build(dfsUtil,permanentGraph,new Comparator<Integer>(){
    @Override public int compare(    @NotNull Integer o1,    @NotNull Integer o2){
      int hashIndex1=permanentGraph.getHashIndex(o1);
      int hashIndex2=permanentGraph.getHashIndex(o2);
      return colorManager.compareHeads(hashIndex1,hashIndex2);
    }
  }
);
  ElementColorManager elementColorManager=new ElementColorManager(){
    @NotNull @Override public JBColor getColor(    @NotNull GraphElement element){
      int headNodeIndex=graphLayout.getHeadNodeIndex(element.getLayoutIndex());
      int headHashIndex=permanentGraph.getHashIndex(headNodeIndex);
      int baseLayoutIndex=graphLayout.getStartLayout(element.getLayoutIndex());
      if (baseLayoutIndex == element.getLayoutIndex()) {
        return colorManager.getColorOfBranch(headHashIndex);
      }
 else {
        return colorManager.getColorOfFragment(headHashIndex,element.getLayoutIndex());
      }
    }
  }
;
  GraphData graphData=new GraphData(flags,permanentGraph,graphLayout,elementColorManager,dfsUtil);
  return new GraphFacadeImpl(graphData);
}
