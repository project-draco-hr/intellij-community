{
  PyClass containingClass=node.getContainingClass();
  if (containingClass != null)   return;
  PyDecoratorList decorators=node.getDecoratorList();
  if (decorators == null)   return;
  for (  PyDecorator decorator : decorators.getDecorators()) {
    String name=decorator.getText();
    if (name.equals("@classmethod") || name.equals("@staticmethod"))     registerProblem(decorator,"Decorator " + name + " on method outside class",new RemoveDecoratorQuickFix());
  }
}
