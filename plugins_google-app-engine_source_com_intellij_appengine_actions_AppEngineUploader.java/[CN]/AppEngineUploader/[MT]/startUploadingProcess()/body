{
  final Process process;
  final GeneralCommandLine commandLine;
  try {
    JavaParameters parameters=new JavaParameters();
    parameters.configureByModule(myAppEngineFacet.getModule(),JavaParameters.JDK_ONLY);
    parameters.setMainClass("com.google.appengine.tools.admin.AppCfg");
    parameters.getClassPath().add(mySdk.getToolsApiJarFile().getAbsolutePath());
    final List<KeyValue<String,String>> list=HttpConfigurable.getJvmPropertiesList(false,null);
    if (!list.isEmpty()) {
      final ParametersList parametersList=parameters.getVMParametersList();
      for (      KeyValue<String,String> value : list) {
        parametersList.defineProperty(value.getKey(),value.getValue());
      }
    }
    final ParametersList programParameters=parameters.getProgramParametersList();
    programParameters.add("--email=" + myEmail);
    programParameters.add("update");
    programParameters.add(FileUtil.toSystemDependentName(myArtifact.getOutputPath()));
    commandLine=CommandLineBuilder.createFromJavaParameters(parameters);
    process=commandLine.createProcess();
  }
 catch (  ExecutionException e) {
    myCallback.errorOccurred("Cannot start uploading: " + e.getMessage());
    return;
  }
  final ProcessHandler processHandler=new OSProcessHandler(process,commandLine.getCommandLineString());
  if (myLoggingHandler == null) {
    final Executor executor=DefaultRunExecutor.getRunExecutorInstance();
    final ConsoleView console=TextConsoleBuilderFactory.getInstance().createBuilder(myProject).getConsole();
    final RunnerLayoutUi ui=RunnerLayoutUi.Factory.getInstance(myProject).create("Upload","Upload Application","Upload Application",myProject);
    final DefaultActionGroup group=new DefaultActionGroup();
    ui.getOptions().setLeftToolbar(group,ActionPlaces.UNKNOWN);
    ui.addContent(ui.createContent("upload",console.getComponent(),"Upload Application",null,console.getPreferredFocusableComponent()));
    processHandler.addProcessListener(new MyProcessListener(processHandler,console,null));
    console.attachToProcess(processHandler);
    final RunContentDescriptor contentDescriptor=new RunContentDescriptor(console,processHandler,ui.getComponent(),"Upload Application");
    group.add(ActionManager.getInstance().getAction(IdeActions.ACTION_STOP_PROGRAM));
    group.add(new CloseAction(executor,contentDescriptor,myProject));
    ExecutionManager.getInstance(myProject).getContentManager().showRunContent(executor,contentDescriptor);
  }
 else {
    processHandler.addProcessListener(new MyProcessListener(processHandler,null,myLoggingHandler));
    myLoggingHandler.attachToProcess(processHandler);
  }
  processHandler.startNotify();
}
