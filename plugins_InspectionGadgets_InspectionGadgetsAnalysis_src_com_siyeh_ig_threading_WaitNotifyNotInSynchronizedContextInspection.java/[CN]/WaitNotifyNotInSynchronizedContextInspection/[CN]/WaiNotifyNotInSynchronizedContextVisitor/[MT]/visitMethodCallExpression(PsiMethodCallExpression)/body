{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!HardcodedMethodConstants.WAIT.equals(methodName) && !HardcodedMethodConstants.NOTIFY.equals(methodName) && !HardcodedMethodConstants.NOTIFY_ALL.equals(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final String qualifiedName=aClass.getQualifiedName();
  if (!CommonClassNames.JAVA_LANG_OBJECT.equals(qualifiedName)) {
    return;
  }
  final PsiExpression qualifier=ParenthesesUtils.stripParentheses(methodExpression.getQualifierExpression());
  if (qualifier == null || qualifier instanceof PsiThisExpression || qualifier instanceof PsiSuperExpression) {
    if (isSynchronizedOnThis(expression)) {
      return;
    }
    registerError(expression,PsiKeyword.THIS);
  }
 else   if (qualifier instanceof PsiReferenceExpression) {
    if (isSynchronizedOn(expression,qualifier)) {
      return;
    }
    registerError(expression,qualifier.getText());
  }
}
