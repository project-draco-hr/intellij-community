{
  if (from != null && to != null && !canConvert(from,to,ruleFromClass(),ruleToClass())) {
    return null;
  }
  if (member instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)member;
    final String methodName=method.getName();
    final TypeConversionDescriptorBase descriptor=mySimpleDescriptors.getValue().get(methodName);
    if (descriptor != null) {
      return descriptor;
    }
    return findConversionForMethod(from,to,method,methodName,context,labeler);
  }
 else   if (context instanceof PsiNewExpression) {
    final PsiAnonymousClass anonymousClass=((PsiNewExpression)context).getAnonymousClass();
    if (anonymousClass != null && AnonymousCanBeLambdaInspection.canBeConvertedToLambda(anonymousClass,false)) {
      return new TypeConversionDescriptorBase(){
        @Override public PsiExpression replace(        PsiExpression expression) throws IncorrectOperationException {
          return AnonymousCanBeLambdaInspection.replacePsiElementWithLambda(expression,false,true);
        }
      }
;
    }
  }
 else   if (context instanceof PsiReferenceExpression) {
    final PsiElement resolvedElement=((PsiReferenceExpression)context).resolve();
    if (resolvedElement instanceof PsiVariable) {
      return findConversionForVariableReference((PsiReferenceExpression)context,(PsiVariable)resolvedElement,context);
    }
  }
  return null;
}
