{
  Interner<FilePath> pathInterner=new Interner<>();
  try {
    List<LineInfo> lines=new ArrayList<>();
    HashMap<String,LineInfo> commits=new HashMap<>();
    for (StringScanner s=new StringScanner(output); s.hasMoreData(); ) {
      String commitHash=s.spaceToken();
      if (commitHash.equals(GitRevisionNumber.NOT_COMMITTED_HASH)) {
        commitHash=null;
      }
      s.spaceToken();
      String s1=s.spaceToken();
      int lineNum=Integer.parseInt(s1);
      s.nextLine();
      LineInfo commit=commits.get(commitHash);
      if (commit != null || commitHash == null) {
        while (s.hasMoreData() && !s.startsWith('\t')) {
          s.nextLine();
        }
      }
 else {
        Date committerDate=null;
        FilePath filePath=null;
        String subject=null;
        String authorName=null;
        String authorEmail=null;
        String previousRevision=null;
        FilePath previousFilePath=null;
        while (s.hasMoreData() && !s.startsWith('\t')) {
          String key=s.spaceToken();
          String value=s.line();
          if (SUBJECT_KEY.equals(key)) {
            subject=value;
          }
 else           if (AUTHOR_KEY.equals(key)) {
            authorName=value;
          }
 else           if (COMMITTER_TIME_KEY.equals(key)) {
            committerDate=GitUtil.parseTimestamp(value);
          }
 else           if (FILENAME_KEY.equals(key)) {
            filePath=VcsUtil.getFilePath(root,value);
          }
 else           if (AUTHOR_EMAIL_KEY.equals(key)) {
            authorEmail=value;
            if (authorEmail.startsWith("<") && authorEmail.endsWith(">")) {
              authorEmail=authorEmail.substring(1,authorEmail.length() - 1);
            }
          }
 else           if (PREVIOUS_KEY.equals(key)) {
            int index=value.indexOf(' ');
            if (index != -1) {
              previousRevision=value.substring(0,index);
              previousFilePath=VcsUtil.getFilePath(root,value.substring(index + 1,value.length()));
            }
          }
        }
        if (committerDate == null || filePath == null || authorName == null || authorEmail == null || subject == null) {
          throw new VcsException("Output for line " + lineNum + " lacks necessary data");
        }
        GitRevisionNumber revisionNumber=new GitRevisionNumber(commitHash,committerDate);
        VcsUser author=myUserRegistry.createUser(authorName,authorEmail);
        GitRevisionNumber previousRevisionNumber=previousRevision != null ? new GitRevisionNumber(previousRevision) : null;
        filePath=pathInterner.intern(filePath);
        if (previousFilePath != null)         previousFilePath=pathInterner.intern(previousFilePath);
        commit=new LineInfo(myProject,revisionNumber,filePath,committerDate,author,subject,previousRevisionNumber,previousFilePath);
        commits.put(commitHash,commit);
      }
      s.nextLine();
      int expectedLineNum=lines.size() + 1;
      if (lineNum != expectedLineNum) {
        throw new VcsException("Adding for info for line " + lineNum + " but we are expecting it to be for "+ expectedLineNum);
      }
      lines.add(commit);
    }
    return new GitFileAnnotation(myProject,file,revision,lines);
  }
 catch (  Exception e) {
    LOG.error("Couldn't parse annotation: " + e,new Attachment("output.txt",output));
    throw new VcsException(e);
  }
}
