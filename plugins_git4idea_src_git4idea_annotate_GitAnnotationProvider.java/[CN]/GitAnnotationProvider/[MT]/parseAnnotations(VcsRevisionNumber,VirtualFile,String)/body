{
  GitFileAnnotation annotation=new GitFileAnnotation(myProject,file,revision == null ? null : revision);
class CommitInfo {
    Date date;
    String author;
    GitRevisionNumber revision;
  }
  try {
    HashMap<String,CommitInfo> commits=new HashMap<String,CommitInfo>();
    for (StringScanner s=new StringScanner(output); s.hasMoreData(); ) {
      String commitHash=s.spaceToken();
      if (commitHash.equals(GitRevisionNumber.NOT_COMMITTED_HASH)) {
        commitHash=null;
      }
      s.spaceToken();
      String s1=s.spaceToken();
      int lineNum=Integer.parseInt(s1);
      s.nextLine();
      CommitInfo commit=commits.get(commitHash);
      if (commit != null) {
        while (s.hasMoreData() && !s.startsWith('\t')) {
          s.nextLine();
        }
      }
 else {
        commit=new CommitInfo();
        while (s.hasMoreData() && !s.startsWith('\t')) {
          String key=s.spaceToken();
          String value=s.line();
          if (commitHash != null && AUTHOR_KEY.equals(key)) {
            commit.author=value;
          }
          if (commitHash != null && COMMITTER_TIME_KEY.equals(key)) {
            commit.date=GitUtil.parseTimestamp(value);
            commit.revision=new GitRevisionNumber(commitHash,commit.date);
          }
        }
        commits.put(commitHash,commit);
      }
      if (!s.hasMoreData()) {
        continue;
      }
      s.skipChars(1);
      String line=s.line(true);
      annotation.appendLineInfo(commit.date,commit.revision,commit.author,line,lineNum);
    }
  }
 catch (  Exception e) {
    LOG.error("Couldn't parse annotation: " + e,new Attachment("output.txt",output));
  }
  return annotation;
}
