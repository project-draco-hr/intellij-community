{
  final Set<PsiFile> updatedFiles=new HashSet<PsiFile>();
  for (  UsageInfo usage : usages) {
    final PsiElement element=usage.getElement();
    if (element != null) {
      final PsiNamedElement newElement=element.getCopyableUserData(REFERENCED_ELEMENT);
      element.putCopyableUserData(REFERENCED_ELEMENT,null);
      if (newElement != null) {
        final PsiFile file=element.getContainingFile();
        final PyImportStatementBase importStmt=PsiTreeUtil.getParentOfType(element,PyImportStatementBase.class);
        if (importStmt != null) {
          updatedFiles.add(file);
          PyClassRefactoringUtil.updateImportOfElement(importStmt,newElement);
          if (importStmt instanceof PyFromImportStatement && PsiTreeUtil.getParentOfType(element,PyImportElement.class) != null) {
            continue;
          }
          final PyQualifiedName newElementName=ResolveImportUtil.findCanonicalImportPath(newElement,element);
          replaceWithQualifiedExpression(element,newElementName);
        }
 else         if (element instanceof PyReferenceExpression) {
          updatedFiles.add(file);
          final PyQualifiedName newElementName=PyQualifiedName.fromComponents(PyClassRefactoringUtil.getOriginalName(newElement));
          replaceWithQualifiedExpression(element,newElementName);
          PyClassRefactoringUtil.insertImport(element,newElement,null);
        }
      }
    }
  }
  if (!updatedFiles.isEmpty()) {
    final PyImportOptimizer optimizer=new PyImportOptimizer();
    for (    PsiFile file : updatedFiles) {
      optimizer.processFile(file).run();
    }
  }
}
