{
  if (!FileUtilRt.extensionEquals(file.getName(),GradleConstants.EXTENSION))   return baseScope;
  final Collection<VirtualFile> files;
  GlobalSearchScope result=GlobalSearchScope.EMPTY_SCOPE;
  final Module module=ModuleUtilCore.findModuleForPsiElement(file);
  if (module != null) {
    String externalSystemId=module.getOptionValue(ExternalSystemConstants.EXTERNAL_SYSTEM_ID_KEY);
    if (!GradleConstants.SYSTEM_ID.toString().equals(externalSystemId))     return baseScope;
    for (    OrderEntry entry : ModuleRootManager.getInstance(module).getOrderEntries()) {
      if (entry instanceof JdkOrderEntry) {
        GlobalSearchScope scopeForSdk=LibraryScopeCache.getInstance(module.getProject()).getScopeForSdk((JdkOrderEntry)entry);
        result=result.uniteWith(scopeForSdk);
      }
    }
    String modulePath=module.getOptionValue(ExternalSystemConstants.LINKED_PROJECT_PATH_KEY);
    if (modulePath == null)     return result;
    files=GradleBuildClasspathManager.getInstance(file.getProject()).getModuleClasspathEntries(modulePath);
    result=new ExternalModuleBuildGlobalSearchScope(module.getProject(),result.uniteWith(new NonClasspathDirectoriesScope(files)),modulePath);
  }
  return result;
}
