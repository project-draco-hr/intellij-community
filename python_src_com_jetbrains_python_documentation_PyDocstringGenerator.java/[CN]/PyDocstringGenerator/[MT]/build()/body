{
  myDocStringExpression=myFunction.getDocStringExpression();
  final Pair<String,Integer> replacementToOffset=addParamToDocstring();
  PyElementGenerator elementGenerator=PyElementGenerator.getInstance(myProject);
  if (myDocStringExpression != null) {
    PyExpression str=elementGenerator.createDocstring(replacementToOffset.getFirst()).getExpression();
    myDocStringExpression.replace(str);
    myFunction=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(myFunction);
    myDocStringExpression=myFunction.getDocStringExpression();
  }
 else {
    final PyStatementList list=myFunction.getStatementList();
    final Document document=PsiDocumentManager.getInstance(myProject).getDocument(getFile());
    if (list != null && list.getStatements().length != 0) {
      if (document.getLineNumber(list.getTextOffset()) == document.getLineNumber(myFunction.getTextOffset())) {
        PyFunction func=elementGenerator.createFromText(LanguageLevel.forElement(myFunction),PyFunction.class,"def " + myFunction.getName() + myFunction.getParameterList().getText()+ ":\n\t"+ replacementToOffset.getFirst()+ "\n\t"+ list.getText());
        myFunction=(PyFunction)myFunction.replace(func);
      }
 else {
        PyExpressionStatement str=elementGenerator.createDocstring(replacementToOffset.getFirst());
        list.addBefore(str,list.getStatements()[0]);
      }
    }
    myFunction=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(myFunction);
    myDocStringExpression=myFunction.getDocStringExpression();
  }
}
