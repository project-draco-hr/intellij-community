{
  myDocStringExpression=myDocStringOwner.getDocStringExpression();
  final String replacement=addParamToDocstring();
  PyElementGenerator elementGenerator=PyElementGenerator.getInstance(myProject);
  if (myDocStringExpression != null) {
    PyExpression str=elementGenerator.createDocstring(replacement).getExpression();
    myDocStringExpression.replace(str);
    if (myFunction != null) {
      myFunction=CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(myFunction);
    }
    PyDocStringOwner owner=CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(myDocStringOwner);
    if (owner != null) {
      myDocStringOwner=owner;
    }
    myDocStringExpression=myDocStringOwner.getDocStringExpression();
  }
 else {
    if (myFunction == null) {
      throw new IllegalStateException("Should be a function");
    }
    final PyStatementList list=myFunction.getStatementList();
    final Document document=PsiDocumentManager.getInstance(myProject).getDocument(getFile());
    if (document != null && list != null) {
      if (document.getLineNumber(list.getTextOffset()) == document.getLineNumber(myFunction.getTextOffset()) || list.getStatements().length == 0) {
        PyFunction func=elementGenerator.createFromText(LanguageLevel.forElement(myFunction),PyFunction.class,"def " + myFunction.getName() + myFunction.getParameterList().getText()+ ":\n"+ StringUtil.repeat(" ",getIndentSize(myFunction))+ replacement+ "\n"+ StringUtil.repeat(" ",getIndentSize(myFunction))+ list.getText());
        myFunction=(PyFunction)myFunction.replace(func);
      }
 else {
        PyExpressionStatement str=elementGenerator.createDocstring(replacement);
        list.addBefore(str,list.getStatements()[0]);
      }
    }
    myFunction=CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(myFunction);
    if (myFunction != null) {
      myDocStringExpression=myFunction.getDocStringExpression();
    }
  }
}
