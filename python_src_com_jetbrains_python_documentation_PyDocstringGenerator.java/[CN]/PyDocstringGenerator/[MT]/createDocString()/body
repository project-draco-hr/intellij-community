{
  if (myDocStringFormat == DocStringFormat.EPYTEXT || myDocStringFormat == DocStringFormat.REST) {
    final TagBasedDocStringBuilder builder=new TagBasedDocStringBuilder(myDocStringFormat == DocStringFormat.EPYTEXT ? "@" : ":");
    builder.addEmptyLine();
    String indentation=getDocStringIndentation();
    boolean addedReturn=false;
    for (    DocstringParam param : myParams) {
      if (param.isReturnValue()) {
        if (param.getType() != null) {
          builder.addReturnValueType(param.getType());
        }
 else {
          builder.addReturnValueDescription("");
        }
        addedReturn=true;
      }
 else {
        if (param.getType() != null) {
          builder.addParameterType(param.getName(),param.getType());
        }
 else {
          builder.addParameterDescription(param.getName(),"");
        }
      }
    }
    if (myGenerateReturn && myDocStringOwner instanceof PyFunction) {
      final RaiseVisitor visitor=new RaiseVisitor();
      final PyStatementList statementList=((PyFunction)myDocStringOwner).getStatementList();
      statementList.accept(visitor);
      if (!addedReturn && visitor.myHasReturn) {
        builder.addReturnValueDescription("");
      }
      if (visitor.myHasRaise) {
        builder.addExceptionDescription(visitor.getRaiseTargetText(),"");
      }
    }
    if (builder.getLines().size() > 1) {
      return myQuotes + '\n' + builder.buildContent(indentation,true)+ '\n'+ indentation+ myQuotes;
    }
 else {
      return myQuotes + builder.buildContent(indentation,false) + myQuotes;
    }
  }
 else {
    return "";
  }
}
