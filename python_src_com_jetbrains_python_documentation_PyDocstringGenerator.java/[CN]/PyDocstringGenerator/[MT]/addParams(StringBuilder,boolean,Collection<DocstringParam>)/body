{
  final String ws=getWhitespace();
  if (!StringUtil.containsAlphaCharacters(replacementText.toString())) {
    replacementText.append("\n");
  }
  replacementText.append(ws);
  final Module module=ModuleUtilCore.findModuleForPsiElement(myDocStringOwner);
  if (module != null) {
    PyDocumentationSettings documentationSettings=PyDocumentationSettings.getInstance(module);
    if (documentationSettings.isPlain(getFile()))     return replacementText.length() - 1;
  }
  int i=0;
  for (  DocstringParam param : paramsToAdd) {
    replacementText.append(getPrefix());
    replacementText.append(param.getKind());
    replacementText.append(" ");
    replacementText.append(param.getName());
    replacementText.append(": ");
    int startOffset=replacementText.length();
    int endOffset=startOffset;
    if (param.getType() != null) {
      replacementText.append(param.getType());
      endOffset+=param.getType().length();
    }
    myParamTypesOffset.put(param.getName(),Pair.create(startOffset,endOffset));
    i++;
    if (i < paramsToAdd.size()) {
      replacementText.append(ws);
    }
  }
  if (myGenerateReturn && myDocStringOwner instanceof PyFunction) {
    PyFunction function=(PyFunction)myDocStringOwner;
    String returnType=PythonDocumentationProvider.generateRaiseOrReturn(function," ",getPrefix(),true);
    if (!returnType.isEmpty()) {
      replacementText.append(ws).append(returnType);
    }
  }
  int offset=replacementText.length();
  if (addWS) {
    replacementText.append(ws);
  }
 else {
    replacementText.append("\n");
  }
  return offset;
}
