{
  final String nodeName=node.getName();
  if (nodeName != null) {
    final ScopeOwner owner=ScopeUtil.getDeclarationScopeOwner(node,nodeName);
    PyElement e=PsiTreeUtil.getParentOfType(node,PyConditionalStatementPart.class,PyConditionalExpression.class);
    while (e != null && PsiTreeUtil.isAncestor(owner,e,true)) {
      final ArrayList<PyCallExpression> calls=new ArrayList<>();
      PyExpression cond=null;
      if (e instanceof PyConditionalStatementPart) {
        cond=((PyConditionalStatementPart)e).getCondition();
      }
 else       if (e instanceof PyConditionalExpression && PsiTreeUtil.isAncestor(((PyConditionalExpression)e).getTruePart(),node,true)) {
        cond=((PyConditionalExpression)e).getCondition();
      }
      if (cond instanceof PyCallExpression) {
        calls.add((PyCallExpression)cond);
      }
      if (cond != null) {
        final PyCallExpression[] callExpressions=PsiTreeUtil.getChildrenOfType(cond,PyCallExpression.class);
        if (callExpressions != null) {
          calls.addAll(Arrays.asList(callExpressions));
        }
        for (        PyCallExpression call : calls) {
          final PyExpression callee=call.getCallee();
          final PyExpression[] args=call.getArguments();
          if (callee != null && "hasattr".equals(callee.getName()) && args.length == 2 && nodeName.equals(args[0].getName()) && args[1] instanceof PyStringLiteralExpression && ((PyStringLiteralExpression)args[1]).getStringValue().equals(name)) {
            return true;
          }
        }
      }
      e=PsiTreeUtil.getParentOfType(e,PyConditionalStatementPart.class);
    }
  }
  return false;
}
