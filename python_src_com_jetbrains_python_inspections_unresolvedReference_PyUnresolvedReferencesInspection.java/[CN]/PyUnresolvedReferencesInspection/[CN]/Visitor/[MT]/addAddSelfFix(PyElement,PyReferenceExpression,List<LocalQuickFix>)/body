{
  final PyClass containedClass=PsiTreeUtil.getParentOfType(node,PyClass.class);
  final PyFunction function=PsiTreeUtil.getParentOfType(node,PyFunction.class);
  if (containedClass != null && function != null) {
    final PyParameter[] parameters=function.getParameterList().getParameters();
    if (parameters.length == 0)     return;
    final String qualifier=parameters[0].getText();
    final PyDecoratorList decoratorList=function.getDecoratorList();
    boolean isClassMethod=false;
    if (decoratorList != null) {
      for (      PyDecorator decorator : decoratorList.getDecorators()) {
        final PyExpression callee=decorator.getCallee();
        if (callee != null && PyNames.CLASSMETHOD.equals(callee.getText())) {
          isClassMethod=true;
        }
      }
    }
    for (    PyTargetExpression target : containedClass.getInstanceAttributes()) {
      if (!isClassMethod && Comparing.strEqual(node.getName(),target.getName())) {
        actions.add(new UnresolvedReferenceAddSelfQuickFix(expr,qualifier));
      }
    }
    for (    PyStatement statement : containedClass.getStatementList().getStatements()) {
      if (statement instanceof PyAssignmentStatement) {
        PyExpression lhsExpression=((PyAssignmentStatement)statement).getLeftHandSideExpression();
        if (lhsExpression != null && lhsExpression.getText().equals(expr.getText())) {
          PyExpression assignedValue=((PyAssignmentStatement)statement).getAssignedValue();
          if (assignedValue instanceof PyCallExpression) {
            PyType type=myTypeEvalContext.getType(assignedValue);
            if (type != null && type instanceof PyClassTypeImpl) {
              if (((PyCallExpression)assignedValue).isCalleeText(PyNames.PROPERTY)) {
                actions.add(new UnresolvedReferenceAddSelfQuickFix(expr,qualifier));
              }
            }
          }
        }
      }
    }
    for (    PyFunction method : containedClass.getMethods()) {
      if (expr.getText().equals(method.getName())) {
        actions.add(new UnresolvedReferenceAddSelfQuickFix(expr,qualifier));
      }
    }
  }
}
