{
  if (reference instanceof DocStringTypeReference) {
    return;
  }
  String description=null;
  PsiElement element=reference.getElement();
  final String text=element.getText();
  TextRange rangeInElement=reference.getRangeInElement();
  String refText=text;
  if (rangeInElement.getStartOffset() > 0 && rangeInElement.getEndOffset() > 0) {
    refText=rangeInElement.substring(text);
  }
  final List<LocalQuickFix> actions=new ArrayList<>(2);
  final String refName=(element instanceof PyQualifiedExpression) ? ((PyQualifiedExpression)element).getReferencedName() : refText;
  if (refName == null || refName.length() <= 0) {
    return;
  }
  final List<QualifiedName> qualifiedNames=getCanonicalNames(reference,myTypeEvalContext);
  for (  QualifiedName name : qualifiedNames) {
    final String canonicalName=name.toString();
    for (    String ignored : myIgnoredIdentifiers) {
      if (ignored.endsWith(END_WILDCARD)) {
        final String prefix=ignored.substring(0,ignored.length() - END_WILDCARD.length());
        if (canonicalName.startsWith(prefix)) {
          return;
        }
      }
 else       if (canonicalName.equals(ignored)) {
        return;
      }
    }
  }
  if (myIgnoredIdentifiers.contains(refName)) {
    return;
  }
  if (element instanceof PyReferenceExpression) {
    PyReferenceExpression expr=(PyReferenceExpression)element;
    if (PyNames.COMPARISON_OPERATORS.contains(refName)) {
      return;
    }
    if (!expr.isQualified()) {
      if (PyUnreachableCodeInspection.hasAnyInterruptedControlFlowPaths(expr)) {
        return;
      }
      if (LanguageLevel.forElement(node).isOlderThan(LanguageLevel.PYTHON26)) {
        if ("with".equals(refName)) {
          actions.add(new UnresolvedRefAddFutureImportQuickFix());
        }
      }
      if (refText.equals("true") || refText.equals("false")) {
        actions.add(new UnresolvedRefTrueFalseQuickFix(element));
      }
      addAddSelfFix(node,expr,actions);
      PyCallExpression callExpression=PsiTreeUtil.getParentOfType(element,PyCallExpression.class);
      if (callExpression != null && (!(callExpression.getCallee() instanceof PyQualifiedExpression) || ((PyQualifiedExpression)callExpression.getCallee()).getQualifier() == null)) {
        actions.add(new UnresolvedRefCreateFunctionQuickFix(callExpression,expr));
      }
      final PyFunction parentFunction=PsiTreeUtil.getParentOfType(element,PyFunction.class);
      final PyDecorator decorator=PsiTreeUtil.getParentOfType(element,PyDecorator.class);
      final PyAnnotation annotation=PsiTreeUtil.getParentOfType(element,PyAnnotation.class);
      final PyImportStatement importStatement=PsiTreeUtil.getParentOfType(element,PyImportStatement.class);
      if (parentFunction != null && decorator == null && annotation == null && importStatement == null) {
        actions.add(new UnresolvedReferenceAddParameterQuickFix(refName));
      }
      actions.add(new PyRenameUnresolvedRefQuickFix());
    }
    if (PyModuleType.getPossibleInstanceMembers().contains(refName)) {
      return;
    }
    if ((PsiTreeUtil.getParentOfType(PsiTreeUtil.getParentOfType(node,PyImportElement.class),PyTryExceptStatement.class,PyIfStatement.class) != null)) {
      severity=HighlightSeverity.WEAK_WARNING;
      description=PyBundle.message("INSP.module.$0.not.found",refText);
    }
  }
  if (reference instanceof PsiReferenceEx && description == null) {
    description=((PsiReferenceEx)reference).getUnresolvedDescription();
  }
  if (description == null) {
    boolean markedQualified=false;
    if (element instanceof PyQualifiedExpression) {
      if ("__qualname__".equals(refText) && LanguageLevel.forElement(element).isAtLeast(LanguageLevel.PYTHON33)) {
        return;
      }
      final PyQualifiedExpression expr=(PyQualifiedExpression)element;
      if (PyNames.COMPARISON_OPERATORS.contains(expr.getReferencedName())) {
        return;
      }
      final PyExpression qualifier=expr.getQualifier();
      if (qualifier != null) {
        PyType type=myTypeEvalContext.getType(qualifier);
        if (type != null) {
          if (ignoreUnresolvedMemberForType(type,reference,refName)) {
            return;
          }
          addCreateMemberFromUsageFixes(type,reference,refText,actions);
          if (type instanceof PyClassType) {
            final PyClassType classType=(PyClassType)type;
            if (reference instanceof PyOperatorReference) {
              String className=type.getName();
              if (classType.isDefinition()) {
                final PyClassLikeType metaClassType=classType.getMetaClassType(myTypeEvalContext,true);
                if (metaClassType != null) {
                  className=metaClassType.getName();
                }
              }
              description=PyBundle.message("INSP.unresolved.operator.ref",className,refName,((PyOperatorReference)reference).getReadableOperatorName());
            }
 else {
              final List<String> slots=classType.getPyClass().getOwnSlots();
              if (slots != null && slots.contains(refName)) {
                return;
              }
              description=PyBundle.message("INSP.unresolved.ref.$0.for.class.$1",refText,type.getName());
            }
            markedQualified=true;
          }
 else           if (isHasCustomMember(refName,type)) {
            return;
          }
 else {
            description=PyBundle.message("INSP.cannot.find.$0.in.$1",refText,type.getName());
            markedQualified=true;
          }
        }
      }
    }
    if (!markedQualified) {
      description=PyBundle.message("INSP.unresolved.ref.$0",refText);
      if (PythonImportUtils.isImportable(element)) {
        addAutoImportFix(node,reference,actions);
      }
      addCreateClassFix(refText,element,actions);
    }
  }
  ProblemHighlightType hl_type;
  if (severity == HighlightSeverity.WARNING) {
    hl_type=ProblemHighlightType.GENERIC_ERROR_OR_WARNING;
  }
 else   if (severity == HighlightSeverity.ERROR) {
    hl_type=ProblemHighlightType.GENERIC_ERROR;
  }
 else {
    hl_type=ProblemHighlightType.LIKE_UNKNOWN_SYMBOL;
  }
  PyImportStatementBase importStatementBase=PsiTreeUtil.getParentOfType(element,PyImportStatementBase.class);
  if ((importStatementBase != null) && GenerateBinaryStubsFix.isApplicable(importStatementBase)) {
    actions.addAll(GenerateBinaryStubsFix.generateFixes(importStatementBase));
  }
  if (qualifiedNames.size() == 1) {
    final QualifiedName qualifiedName=qualifiedNames.get(0);
    actions.add(new AddIgnoredIdentifierQuickFix(qualifiedName,false));
    if (qualifiedName.getComponentCount() > 1) {
      actions.add(new AddIgnoredIdentifierQuickFix(qualifiedName.removeLastComponent(),true));
    }
  }
  addPluginQuickFixes(reference,actions);
  if (reference instanceof PyImportReference) {
    final QualifiedName qname=QualifiedName.fromDottedString(refName);
    final List<String> components=qname.getComponents();
    if (!components.isEmpty()) {
      final String packageName=components.get(0);
      final Module module=ModuleUtilCore.findModuleForPsiElement(node);
      final Sdk sdk=PythonSdkType.findPythonSdk(module);
      if (module != null && sdk != null && PyPackageUtil.packageManagementEnabled(sdk)) {
        if (PyPIPackageUtil.INSTANCE.isInPyPI(packageName)) {
          addInstallPackageAction(actions,packageName,module,sdk);
        }
 else {
          if (PyPIPackageUtil.PACKAGES_TOPLEVEL.containsKey(packageName)) {
            final String suggestedPackage=PyPIPackageUtil.PACKAGES_TOPLEVEL.get(packageName);
            addInstallPackageAction(actions,suggestedPackage,module,sdk);
          }
        }
      }
    }
  }
  registerProblem(node,description,hl_type,null,rangeInElement,actions.toArray(new LocalQuickFix[actions.size()]));
}
