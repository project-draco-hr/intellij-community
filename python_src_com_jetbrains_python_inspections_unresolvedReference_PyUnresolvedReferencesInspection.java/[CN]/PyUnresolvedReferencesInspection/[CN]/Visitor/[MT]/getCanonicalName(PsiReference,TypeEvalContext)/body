{
  final PsiElement element=reference.getElement();
  if (reference instanceof PyOperatorReference && element instanceof PyQualifiedExpression) {
    final PyExpression receiver=((PyOperatorReference)reference).getReceiver();
    if (receiver != null) {
      final PyType type=context.getType(receiver);
      if (type instanceof PyClassType) {
        final String name=((PyClassType)type).getClassQName();
        if (name != null) {
          return QualifiedName.fromDottedString(name).append(((PyQualifiedExpression)element).getReferencedName());
        }
      }
    }
  }
 else   if (element instanceof PyReferenceExpression) {
    final PyReferenceExpression expr=(PyReferenceExpression)element;
    final PyExpression qualifier=expr.getQualifier();
    final String exprName=expr.getName();
    if (exprName != null) {
      if (qualifier != null) {
        final PyType type=context.getType(qualifier);
        if (type instanceof PyClassType) {
          final String name=((PyClassType)type).getClassQName();
          if (name != null) {
            return QualifiedName.fromDottedString(name).append(exprName);
          }
        }
 else         if (type instanceof PyModuleType) {
          final PyFile file=((PyModuleType)type).getModule();
          final QualifiedName name=QualifiedNameFinder.findCanonicalImportPath(file,element);
          if (name != null) {
            return name.append(exprName);
          }
        }
      }
 else {
        final PsiElement parent=element.getParent();
        if (parent instanceof PyImportElement) {
          final PyImportStatementBase importStmt=PsiTreeUtil.getParentOfType(parent,PyImportStatementBase.class);
          if (importStmt instanceof PyImportStatement) {
            return QualifiedName.fromComponents(exprName);
          }
 else           if (importStmt instanceof PyFromImportStatement) {
            final PsiElement resolved=((PyFromImportStatement)importStmt).resolveImportSource();
            if (resolved != null) {
              final QualifiedName path=QualifiedNameFinder.findCanonicalImportPath(resolved,element);
              if (path != null) {
                return path.append(exprName);
              }
            }
          }
        }
 else {
          final QualifiedName path=QualifiedNameFinder.findCanonicalImportPath(element,element);
          if (path != null) {
            return path.append(exprName);
          }
        }
      }
    }
  }
 else   if (reference instanceof DocStringParameterReference) {
    return QualifiedName.fromDottedString(reference.getCanonicalText());
  }
  return null;
}
