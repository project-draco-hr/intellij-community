{
  final Set<ReadWriteVariableInstruction> vars=ContainerUtil.newLinkedHashSet();
  typeDefinition.acceptChildren(new GroovyRecursiveElementVisitor(){
    private void collectVars(    Instruction[] flow){
      ReadWriteVariableInstruction[] reads=ControlFlowBuilderUtil.getReadsWithoutPriorWrites(flow,false);
      Collections.addAll(vars,reads);
    }
    @Override public void visitField(    GrField field){
      GrExpression initializer=field.getInitializerGroovy();
      if (initializer != null) {
        Instruction[] flow=new ControlFlowBuilder(field.getProject()).buildControlFlow(initializer);
        collectVars(flow);
      }
    }
    @Override public void visitMethod(    GrMethod method){
      GrOpenBlock block=method.getBlock();
      if (block != null) {
        collectVars(block.getControlFlow());
      }
    }
    @Override public void visitClassInitializer(    GrClassInitializer initializer){
      GrOpenBlock block=initializer.getBlock();
      collectVars(block.getControlFlow());
    }
  }
);
  return vars;
}
