{
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  Integer minimumParamCount=methodNameToParamCount.apply(methodName);
  if (minimumParamCount == null) {
    return null;
  }
  JavaResolveResult resolveResult=expression.resolveMethodGenerics();
  final PsiMethod method=(PsiMethod)resolveResult.getElement();
  if (method == null || method.hasModifierProperty(PsiModifier.PRIVATE) || !resolveResult.isValidResult()) {
    return null;
  }
  final boolean messageOnLastPosition=isMessageOnLastPosition(method,checkTestNG);
  final boolean messageOnFirstPosition=isMessageOnFirstPosition(method,checkTestNG);
  if (!messageOnFirstPosition && !messageOnLastPosition) {
    return null;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  if (parameters.length < minimumParamCount) {
    return null;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  final int argumentIndex;
  PsiExpression message=null;
  if (messageOnFirstPosition) {
    if (parameters.length > 0 && parameters[0].getType().equalsToText(CommonClassNames.JAVA_LANG_STRING) && parameters.length > minimumParamCount) {
      argumentIndex=1;
      message=arguments[0];
    }
 else {
      argumentIndex=0;
    }
  }
 else {
    argumentIndex=0;
    if (parameters.length > minimumParamCount && minimumParamCount > 0) {
      int lastParameterIdx=parameters.length - 1;
      if (parameters[lastParameterIdx].getType() instanceof PsiClassType) {
        message=arguments[lastParameterIdx];
      }
    }
  }
  return new AssertHint(argumentIndex,messageOnFirstPosition,message,method);
}
