{
  Collection<Module> modules=new SmartList<>();
  Collection<ModuleBuildTask> incrementalTasks=ContainerUtil.newSmartList();
  Collection<ModuleBuildTask> excludeDependentTasks=ContainerUtil.newSmartList();
  Collection<ModuleBuildTask> excludeRuntimeTasks=ContainerUtil.newSmartList();
  for (  ProjectTask buildProjectTask : buildTasks) {
    ModuleBuildTask moduleBuildTask=(ModuleBuildTask)buildProjectTask;
    modules.add(moduleBuildTask.getModule());
    if (moduleBuildTask.isIncrementalBuild()) {
      incrementalTasks.add(moduleBuildTask);
    }
    if (!moduleBuildTask.isIncludeDependentModules()) {
      excludeDependentTasks.add(moduleBuildTask);
    }
    if (!moduleBuildTask.isIncludeRuntimeDependencies()) {
      excludeRuntimeTasks.add(moduleBuildTask);
    }
  }
  boolean isIncrementalBuild=incrementalTasks.size() == buildTasks.size();
  boolean includeDependentModules=excludeDependentTasks.size() != buildTasks.size();
  boolean includeRuntimeDependencies=excludeRuntimeTasks.size() != buildTasks.size();
  if (!isIncrementalBuild && !incrementalTasks.isEmpty()) {
    assertModuleBuildSettingsConsistent(incrementalTasks,"will be built ignoring incremental build setting");
  }
  if (includeDependentModules && !excludeDependentTasks.isEmpty()) {
    assertModuleBuildSettingsConsistent(excludeDependentTasks,"will be built along with dependent modules");
  }
  if (includeRuntimeDependencies && !excludeRuntimeTasks.isEmpty()) {
    assertModuleBuildSettingsConsistent(excludeRuntimeTasks,"will be built along with runtime dependencies");
  }
  return new ModulesBuildSettings(isIncrementalBuild,includeDependentModules,includeRuntimeDependencies,modules);
}
