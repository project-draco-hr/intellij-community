{
  super(new BorderLayout());
  myModifiedPatterns=patterns;
  final JBTable table=createTableForPatterns();
  final ToolbarDecorator toolbarDecorator=ToolbarDecorator.createDecorator(table).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      myModifiedPatterns.add(new EntryPointsManagerBase.ClassPattern());
      AbstractTableModel model=(AbstractTableModel)table.getModel();
      final int row=myModifiedPatterns.size() - 1;
      model.fireTableRowsInserted(row,row);
      table.setRowSelectionInterval(row,row);
      table.editCellAt(row,1);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      TableUtil.removeSelectedItems(table);
      table.repaint();
    }
  }
).setRemoveActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      return table.getSelectedRow() >= 0;
    }
  }
).setButtonComparator("Add","Remove");
  add(SeparatorFactory.createSeparator("Mark class as entry point if name matches",null),BorderLayout.NORTH);
  add(toolbarDecorator.createPanel(),BorderLayout.CENTER);
  setPreferredSize(new JBDimension(-1,250));
}
