{
  if (!(refEntity instanceof RefJavaElement)) {
    return null;
  }
  final RefJavaElement refElement=(RefJavaElement)refEntity;
  if (refElement instanceof RefParameter)   return null;
  if (refElement.isSyntheticJSP())   return null;
  if (refElement.isEntry())   return null;
  if (refElement instanceof RefImplicitConstructor)   return null;
  if (refElement instanceof RefField) {
    final Boolean isEnumConstant=refElement.getUserData(RefField.ENUM_CONSTANT);
    if (isEnumConstant != null && isEnumConstant.booleanValue())     return null;
  }
  if (refElement instanceof RefMethod) {
    RefMethod refMethod=(RefMethod)refElement;
    if (refMethod.isExternalOverride())     return null;
  }
  if (refElement instanceof RefClass) {
    RefClass refClass=(RefClass)refElement;
    if (refClass.isAnonymous() || refClass.isTestCase() || refClass.isServlet()|| refClass.isApplet()|| refClass.isLocalClass())     return null;
    if (isTopLevelClass(refClass) && !SUGGEST_PACKAGE_LOCAL_FOR_TOP_CLASSES)     return null;
  }
  if (refElement.getInReferences().isEmpty())   return null;
  if (refElement.getOwner() instanceof RefClass) {
    RefClass refClass=(RefClass)refElement.getOwner();
    if (refClass.isInterface())     return null;
  }
  String access=getPossibleAccess(refElement);
  if (access != refElement.getAccessModifier() && access != null) {
    final PsiElement element=refElement.getElement();
    final PsiElement nameIdentifier=element != null ? IdentifierUtil.getNameIdentifier(element) : null;
    if (nameIdentifier != null) {
      final String message;
      String quickFixName="Make " + ElementDescriptionUtil.getElementDescription(element,UsageViewTypeLocation.INSTANCE) + " ";
      if (access.equals(PsiModifier.PRIVATE)) {
        message=CAN_BE_PRIVATE;
        quickFixName+=PsiModifier.PRIVATE;
      }
 else {
        if (access.equals(PsiModifier.PACKAGE_LOCAL)) {
          message=CAN_BE_PACKAGE_LOCAL;
          quickFixName+="package local";
        }
 else {
          message=CAN_BE_PROTECTED;
          quickFixName+=PsiModifier.PROTECTED;
        }
      }
      return new ProblemDescriptor[]{manager.createProblemDescriptor(nameIdentifier,message,new AcceptSuggestedAccess(globalContext.getRefManager(),access,quickFixName),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false)};
    }
  }
  return null;
}
