{
  if (myResolveData == null) {
    return null;
  }
  PsiElement module=ResolveImportUtil.resolveInRoots(clazz,myResolveData.getModuleName());
  if (module instanceof PsiDirectory) {
    module=PyUtil.turnDirIntoInit(module);
  }
  if (module == null)   return null;
  final PyFile file=(PyFile)module;
  for (  PyStatement statement : file.getStatements()) {
    final String name=statement.getName();
    if (myResolveData.getShortName().equals(name)) {
      PsiElement searchElement=statement;
      if (myResolveData.getFunctionName() != null) {
        PsiElement[] funcs=PsiTreeUtil.collectElements(statement,new PsiElementFilter(){
          public boolean isAccepted(          PsiElement element){
            return element instanceof PyFunction && myResolveData.getFunctionName().equals(((PyFunction)element).getName());
          }
        }
);
        if (funcs.length > 0) {
          searchElement=funcs[0];
        }
      }
      if (myResolveData.getString() != null) {
        PsiElement[] elements=PsiTreeUtil.collectElements(searchElement,new PsiElementFilter(){
          public boolean isAccepted(          PsiElement element){
            PyCallExpression call=PsiTreeUtil.getParentOfType(element,PyCallExpression.class);
            return element instanceof PyStringLiteralExpression && call != null && "add_to_class".equals(call.getCallee().getName()) && myResolveData.getString().equals(((PyStringLiteralExpression)element).getStringValue());
          }
        }
);
        if (elements.length > 0) {
          return elements[0];
        }
      }
      return statement;
    }
  }
  return module;
}
