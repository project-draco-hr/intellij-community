{
  StringBuilder sb=new StringBuilder("\n\n");
  sb.append(ApplicationInfoEx.getInstanceEx().getBuild().asString()).append(", ");
  String javaVersion=System.getProperty("java.runtime.version",System.getProperty("java.version","unknown"));
  sb.append("JRE ");
  sb.append(javaVersion);
  String archDataModel=System.getProperty("sun.arch.data.model");
  if (archDataModel != null) {
    sb.append("x").append(archDataModel);
  }
  String javaVendor=System.getProperty("java.vm.vendor");
  if (javaVendor != null) {
    sb.append(" ").append(javaVendor);
  }
  sb.append(", OS ").append(System.getProperty("os.name"));
  String osArch=System.getProperty("os.arch");
  if (osArch != null) {
    sb.append("(").append(osArch).append(")");
  }
  String osVersion=System.getProperty("os.version");
  String osPatchLevel=System.getProperty("sun.os.patch.level");
  if (osVersion != null) {
    sb.append(" v").append(osVersion);
    if (osPatchLevel != null) {
      sb.append(" ").append(osPatchLevel);
    }
  }
  if (!GraphicsEnvironment.isHeadless()) {
    sb.append(", screens ");
    GraphicsDevice[] devices=GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();
    for (int i=0; i < devices.length; i++) {
      if (i > 0)       sb.append(", ");
      GraphicsDevice device=devices[i];
      Rectangle bounds=device.getDefaultConfiguration().getBounds();
      sb.append(bounds.width).append("x").append(bounds.height);
    }
    if (UIUtil.isRetina())     sb.append(SystemInfo.isMac ? "; Retina" : "; HiDPI");
  }
  return sb.toString();
}
