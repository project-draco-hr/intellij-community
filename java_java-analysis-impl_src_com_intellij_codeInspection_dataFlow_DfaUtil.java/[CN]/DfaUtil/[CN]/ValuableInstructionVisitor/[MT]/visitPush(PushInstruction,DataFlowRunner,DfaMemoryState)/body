{
  if (myContext == instruction.getPlace()) {
    final Map<DfaVariableValue,DfaVariableState> map=((ValuableDataFlowRunner.MyDfaMemoryState)memState).getVariableStates();
    for (    Map.Entry<DfaVariableValue,DfaVariableState> entry : map.entrySet()) {
      ValuableDataFlowRunner.ValuableDfaVariableState state=(ValuableDataFlowRunner.ValuableDfaVariableState)entry.getValue();
      DfaVariableValue variableValue=entry.getKey();
      final FList<PsiExpression> concatenation=state.myConcatenation;
      if (!concatenation.isEmpty() && variableValue.getQualifier() == null) {
        PsiModifierListOwner element=variableValue.getPsiVariable();
        if (element instanceof PsiVariable) {
          PsiExpression psiExpression;
          if (concatenation.size() == 1) {
            psiExpression=concatenation.getHead();
          }
 else {
            String text=StringUtil.join(ContainerUtil.reverse(new ArrayList<PsiExpression>(concatenation)),new Function<PsiExpression,String>(){
              @Override public String fun(              PsiExpression expression){
                return expression.getText();
              }
            }
,"+");
            try {
              psiExpression=JavaPsiFacade.getElementFactory(element.getProject()).createExpressionFromText(text,concatenation.getHead());
            }
 catch (            IncorrectOperationException e) {
              psiExpression=concatenation.getHead();
            }
          }
          myValues.put((PsiVariable)element,psiExpression);
        }
      }
    }
    DfaValue value=instruction.getValue();
    if (value instanceof DfaVariableValue && ((DfaVariableValue)value).getQualifier() == null) {
      PsiModifierListOwner element=((DfaVariableValue)value).getPsiVariable();
      if (element instanceof PsiVariable) {
        if (memState.isNotNull((DfaVariableValue)value)) {
          myNotNulls.add((PsiVariable)element);
        }
        if (memState.isNull(value)) {
          myNulls.add((PsiVariable)element);
        }
      }
    }
  }
  return super.visitPush(instruction,runner,memState);
}
