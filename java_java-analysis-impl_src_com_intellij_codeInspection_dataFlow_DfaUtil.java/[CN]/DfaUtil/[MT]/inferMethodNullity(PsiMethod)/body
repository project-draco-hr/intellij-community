{
  final PsiCodeBlock body=method.getBody();
  if (body == null || PsiUtil.resolveClassInType(method.getReturnType()) == null) {
    return Nullness.UNKNOWN;
  }
  final AtomicBoolean hasNulls=new AtomicBoolean();
  final AtomicBoolean hasNotNulls=new AtomicBoolean();
  final AtomicBoolean hasUnknowns=new AtomicBoolean();
  final StandardDataFlowRunner dfaRunner=new StandardDataFlowRunner();
  final RunnerResult rc=dfaRunner.analyzeMethod(body,new StandardInstructionVisitor(){
    @Override public DfaInstructionState[] visitCheckReturnValue(    CheckReturnValueInstruction instruction,    DataFlowRunner runner,    DfaMemoryState memState){
      DfaValue returned=memState.peek();
      if (memState.isNull(returned)) {
        hasNulls.set(true);
      }
 else       if (memState.isNotNull(returned)) {
        hasNotNulls.set(true);
      }
 else {
        hasUnknowns.set(true);
      }
      return super.visitCheckReturnValue(instruction,runner,memState);
    }
  }
);
  if (rc == RunnerResult.OK) {
    if (hasNulls.get()) {
      return Nullness.NULLABLE;
    }
    if (hasNotNulls.get() && !hasUnknowns.get()) {
      return Nullness.NOT_NULL;
    }
  }
  return Nullness.UNKNOWN;
}
