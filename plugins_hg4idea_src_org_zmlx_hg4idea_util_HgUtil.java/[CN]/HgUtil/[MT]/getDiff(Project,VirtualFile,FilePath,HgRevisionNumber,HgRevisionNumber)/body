{
  HgStatusCommand statusCommand;
  if (revNum1 != null) {
    statusCommand=new HgStatusCommand.Builder(true).ignored(false).unknown(false).copySource(!path.isDirectory()).baseRevision(revNum1).targetRevision(revNum2).build(project);
  }
 else {
    LOG.assertTrue(revNum2 != null,"revision1 and revision2 can't both be null. Path: " + path);
    statusCommand=new HgStatusCommand.Builder(true).ignored(false).unknown(false).copySource(false).baseRevision(revNum2).build(project);
  }
  Collection<HgChange> hgChanges=statusCommand.executeInCurrentThread(root,Collections.singleton(path));
  List<Change> changes=new ArrayList<>();
  for (  HgChange hgChange : hgChanges) {
    FileStatus status=convertHgDiffStatus(hgChange.getStatus());
    if (status != FileStatus.UNKNOWN) {
      changes.add(HgHistoryUtil.createChange(project,root,hgChange.beforeFile().getRelativePath(),revNum1,hgChange.afterFile().getRelativePath(),revNum2,status));
    }
  }
  return changes;
}
