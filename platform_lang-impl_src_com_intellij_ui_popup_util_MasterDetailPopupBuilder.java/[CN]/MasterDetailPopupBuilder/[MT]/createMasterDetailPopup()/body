{
  if (myChooserComponent instanceof JList) {
    ((JList)myChooserComponent).setCellRenderer(new ListItemRenderer(myProject,myDelegate));
  }
  if (myDetailView == null) {
    myDetailView=new DetailViewImpl(myProject);
  }
  myPathLabel=new JLabel(" ");
  myPathLabel.setHorizontalAlignment(SwingConstants.RIGHT);
  myPathLabel.setFont(myPathLabel.getFont().deriveFont((float)10));
  JPanel footerPanel=new JPanel(new BorderLayout()){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      g.setColor(BORDER_COLOR);
      g.drawLine(0,0,getWidth(),0);
    }
  }
;
  footerPanel.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));
  footerPanel.add(myPathLabel);
  Runnable itemCallback=new Runnable(){
    @Override public void run(){
      IdeFocusManager.getInstance(myProject).doWhenFocusSettlesDown(new Runnable(){
        @Override public void run(){
          chooseItems(false);
        }
      }
);
    }
  }
;
  JComponent toolBar=null;
  if (myActions != null) {
    ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar("",myActions,true);
    actionToolbar.setReservePlaceAutoPopupIcon(false);
    actionToolbar.setMinimumButtonSize(new Dimension(20,20));
    toolBar=actionToolbar.getComponent();
    toolBar.setOpaque(false);
  }
  PopupChooserBuilder builder=createInnerBuilder().setMovable(true).setResizable(true).setAutoselectOnMouseMove(false).setMayBeParent(true).setDimensionServiceKey(myDimensionServiceKey).setSettingButton(toolBar).setSouthComponent(footerPanel).setItemChoosenCallback(itemCallback).setFilteringEnabled(new Function<Object,String>(){
    @Override public String fun(    Object o){
      return ((ItemWrapper)o).speedSearchText();
    }
  }
);
  if (myPopupTuner != null) {
    myPopupTuner.consume(builder);
  }
  if (myDoneRunnable != null) {
    ActionListener actionListener=new ActionListener(){
      @Override public void actionPerformed(      ActionEvent event){
        myDoneRunnable.run();
      }
    }
;
    if ((SystemInfo.isMacOSLion || SystemInfo.isMacOSMountainLion) && !UIUtil.isUnderDarcula()) {
      final JButton done=new JButton("Done");
      done.setMnemonic('o');
      done.addActionListener(actionListener);
      builder.setCommandButton(new ActiveComponent.Adapter(){
        @Override public JComponent getComponent(){
          return done;
        }
      }
);
    }
 else {
      IconButton close=new IconButton("Close",AllIcons.Actions.Close,AllIcons.Actions.CloseHovered);
      builder.setCommandButton(new InplaceButton(close,actionListener));
    }
  }
  String title=myDelegate.getTitle();
  if (title != null) {
    builder.setTitle(title);
  }
  myPopup=builder.createPopup();
  builder.getScrollPane().setBorder(IdeBorderFactory.createBorder(SideBorder.RIGHT));
  myPopup.addListener(new JBPopupListener.Adapter(){
    @Override public void onClosed(    LightweightWindowEvent event){
      myDetailView.clearEditor();
    }
  }
);
  if (myDoneRunnable != null) {
    new AnAction("Done"){
      @Override public void actionPerformed(      AnActionEvent e){
        myDoneRunnable.run();
      }
    }
.registerCustomShortcutSet(KeyEvent.VK_ENTER,InputEvent.CTRL_DOWN_MASK,myPopup.getContent());
  }
  return myPopup;
}
