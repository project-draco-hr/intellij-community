{
  if (expression instanceof PsiReferenceExpression) {
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)expression;
    final JavaResolveResult result=referenceExpression.advancedResolve(false);
    if (!result.isAccessible() || !result.isValidResult()) {
      return false;
    }
    final PsiElement target=result.getElement();
    final PsiElement parent=expression.getParent();
    if (!(parent instanceof DummyHolder)) {
      return target != null;
    }
    if (!(target instanceof PsiField)) {
      return false;
    }
    final PsiField field=(PsiField)target;
    final PsiType type=field.getType();
    if (type instanceof PsiPrimitiveType) {
      return false;
    }
    final PsiExpression qualifier=referenceExpression.getQualifierExpression();
    return qualifier == null || isValidGuard(qualifier,context);
  }
 else   if (expression instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
    final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
    if (argumentList.getExpressions().length != 0) {
      return false;
    }
    final JavaResolveResult result=methodCallExpression.resolveMethodGenerics();
    if (!result.isAccessible() || !result.isValidResult()) {
      return false;
    }
    final PsiElement element=result.getElement();
    if (!(element instanceof PsiMethod)) {
      return false;
    }
    final PsiMethod method=(PsiMethod)element;
    final PsiType type=method.getReturnType();
    if (type instanceof PsiPrimitiveType) {
      return false;
    }
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
    return qualifierExpression == null || isValidGuard(qualifierExpression,context);
  }
 else   if (expression instanceof PsiThisExpression) {
    final PsiThisExpression thisExpression=(PsiThisExpression)expression;
    final PsiJavaCodeReferenceElement qualifier=thisExpression.getQualifier();
    if (qualifier == null) {
      return true;
    }
    final JavaResolveResult result=qualifier.advancedResolve(false);
    if (!result.isValidResult() || !result.isAccessible()) {
      return false;
    }
    final PsiElement target=result.getElement();
    if (!(target instanceof PsiClass)) {
      return false;
    }
    final PsiClass aClass=(PsiClass)target;
    return InheritanceUtil.hasEnclosingInstanceInScope(aClass,context,false,false);
  }
 else   if (expression instanceof PsiClassObjectAccessExpression) {
    final PsiClassObjectAccessExpression classObjectAccessExpression=(PsiClassObjectAccessExpression)expression;
    final PsiTypeElement operand=classObjectAccessExpression.getOperand();
    final PsiType type=operand.getType();
    if (!(type instanceof PsiClassType)) {
      return false;
    }
    final PsiClassType classType=(PsiClassType)type;
    final PsiClass target=classType.resolve();
    return target != null;
  }
  return false;
}
