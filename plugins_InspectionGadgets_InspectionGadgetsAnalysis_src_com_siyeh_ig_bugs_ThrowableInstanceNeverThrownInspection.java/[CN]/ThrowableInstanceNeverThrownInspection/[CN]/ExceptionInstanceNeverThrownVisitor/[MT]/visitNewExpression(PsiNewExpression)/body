{
  super.visitNewExpression(expression);
  if (!TypeUtils.expressionHasTypeOrSubtype(expression,CommonClassNames.JAVA_LANG_THROWABLE)) {
    return;
  }
  final PsiElement parent=getParent(expression.getParent());
  if (parent instanceof PsiThrowStatement || parent instanceof PsiReturnStatement || parent instanceof PsiLambdaExpression) {
    return;
  }
  if (PsiTreeUtil.getParentOfType(parent,PsiCallExpression.class) != null) {
    return;
  }
  final PsiElement typedParent=PsiTreeUtil.getParentOfType(expression,PsiAssignmentExpression.class,PsiVariable.class);
  final PsiElement variable=ThrowableResultOfMethodCallIgnoredInspection.getVariable(typedParent,expression);
  if (typedParent != null && variable == null) {
    return;
  }
  if (variable instanceof PsiLocalVariable) {
    final Query<PsiReference> query=ReferencesSearch.search(variable,variable.getUseScope());
    for (    PsiReference reference : query) {
      final PsiElement usage=reference.getElement();
      PsiElement usageParent=usage.getParent();
      while (usageParent instanceof PsiParenthesizedExpression) {
        usageParent=usageParent.getParent();
      }
      if (usageParent instanceof PsiThrowStatement || usageParent instanceof PsiReturnStatement) {
        return;
      }
      if (PsiTreeUtil.getParentOfType(usageParent,PsiCallExpression.class) != null) {
        return;
      }
    }
  }
  registerError(expression,expression);
}
