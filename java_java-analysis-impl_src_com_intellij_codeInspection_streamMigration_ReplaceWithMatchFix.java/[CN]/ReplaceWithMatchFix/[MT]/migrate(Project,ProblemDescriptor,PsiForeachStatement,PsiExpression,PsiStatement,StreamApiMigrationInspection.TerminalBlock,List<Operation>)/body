{
  PsiReturnStatement returnStatement=(PsiReturnStatement)tb.getSingleStatement();
  PsiExpression value=returnStatement.getReturnValue();
  PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  restoreComments(foreachStatement,body);
  if (StreamApiMigrationInspection.isLiteral(value,Boolean.TRUE) || StreamApiMigrationInspection.isLiteral(value,Boolean.FALSE)) {
    boolean foundResult=(boolean)((PsiLiteralExpression)value).getValue();
    PsiReturnStatement nextReturnStatement=StreamApiMigrationInspection.getNextReturnStatement(foreachStatement);
    if (nextReturnStatement != null && StreamApiMigrationInspection.isLiteral(nextReturnStatement.getReturnValue(),!foundResult)) {
      String methodName=foundResult ? "anyMatch" : "noneMatch";
      String streamText=generateStream(iteratedValue,operations).toString();
      streamText=addTerminalOperation(streamText,methodName,foreachStatement,tb);
      boolean siblings=nextReturnStatement.getParent() == foreachStatement.getParent();
      PsiElement result=foreachStatement.replace(elementFactory.createStatementFromText("return " + streamText + ";",foreachStatement));
      if (siblings) {
        nextReturnStatement.delete();
      }
      simplifyAndFormat(project,result);
      return;
    }
  }
  if (!StreamApiMigrationInspection.isVariableReferenced(tb.getVariable(),value)) {
    String streamText=generateStream(iteratedValue,operations).toString();
    streamText=addTerminalOperation(streamText,"anyMatch",foreachStatement,tb);
    String replacement="if(" + streamText + "){"+ returnStatement.getText()+ "}";
    PsiElement result=foreachStatement.replace(elementFactory.createStatementFromText(replacement,foreachStatement));
    simplifyAndFormat(project,result);
  }
}
