{
  PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  if (tb.getSingleStatement() instanceof PsiReturnStatement) {
    PsiReturnStatement returnStatement=(PsiReturnStatement)tb.getSingleStatement();
    PsiExpression value=returnStatement.getReturnValue();
    if (StreamApiMigrationInspection.isLiteral(value,Boolean.TRUE) || StreamApiMigrationInspection.isLiteral(value,Boolean.FALSE)) {
      boolean foundResult=(boolean)((PsiLiteralExpression)value).getValue();
      PsiReturnStatement nextReturnStatement=StreamApiMigrationInspection.getNextReturnStatement(foreachStatement);
      if (nextReturnStatement != null && StreamApiMigrationInspection.isLiteral(nextReturnStatement.getReturnValue(),!foundResult)) {
        String methodName=foundResult ? "anyMatch" : "noneMatch";
        String streamText=generateStream(iteratedValue,operations).toString();
        streamText=addTerminalOperation(streamText,methodName,foreachStatement,tb);
        restoreComments(foreachStatement,body);
        boolean siblings=nextReturnStatement.getParent() == foreachStatement.getParent();
        PsiElement result=foreachStatement.replace(elementFactory.createStatementFromText("return " + streamText + ";",foreachStatement));
        if (siblings) {
          nextReturnStatement.delete();
        }
        simplifyAndFormat(project,result);
        return;
      }
    }
  }
  PsiStatement[] statements=tb.getStatements();
  if (statements.length == 1 || (statements.length == 2 && statements[1] instanceof PsiBreakStatement)) {
    restoreComments(foreachStatement,body);
    String streamText=generateStream(iteratedValue,operations).toString();
    streamText=addTerminalOperation(streamText,"anyMatch",foreachStatement,tb);
    PsiStatement statement=statements[0];
    PsiAssignmentExpression assignment=ExpressionUtils.getAssignment(statement);
    if (assignment != null) {
      PsiExpression lValue=assignment.getLExpression();
      PsiExpression rValue=assignment.getRExpression();
      if (!(lValue instanceof PsiReferenceExpression) || rValue == null)       return;
      PsiElement maybeVar=((PsiReferenceExpression)lValue).resolve();
      if (maybeVar instanceof PsiVariable) {
        PsiVariable var=(PsiVariable)maybeVar;
        PsiExpression initializer=var.getInitializer();
        if (initializer != null && StreamApiMigrationInspection.isDeclarationJustBefore(var,foreachStatement)) {
          String replacement;
          if (StreamApiMigrationInspection.isLiteral(initializer,Boolean.FALSE) && StreamApiMigrationInspection.isLiteral(rValue,Boolean.TRUE)) {
            replacement=streamText;
          }
 else           if (StreamApiMigrationInspection.isLiteral(initializer,Boolean.TRUE) && StreamApiMigrationInspection.isLiteral(rValue,Boolean.FALSE)) {
            replacement="!" + streamText;
          }
 else {
            replacement=streamText + "?" + rValue.getText()+ ":"+ initializer.getText();
          }
          PsiElement result=initializer.replace(elementFactory.createExpressionFromText(replacement,initializer));
          removeLoop(foreachStatement);
          simplifyAndFormat(project,result);
          return;
        }
      }
    }
    String replacement="if(" + streamText + "){"+ statement.getText()+ "}";
    PsiElement result=foreachStatement.replace(elementFactory.createStatementFromText(replacement,foreachStatement));
    simplifyAndFormat(project,result);
  }
}
