{
  final Project project=ProjectManager.getInstance().getDefaultProject();
  final ProjectSdksModel model=PyConfigurableInterpreterList.getInstance(project).getModel();
  final List<PythonSdkFlavor> flavors=PythonSdkFlavor.getApplicableFlavors(false);
  String baseSdk=null;
  for (  PythonSdkFlavor flavor : flavors) {
    final Collection<String> baseSdks=flavor.suggestHomePaths();
    if (!baseSdks.isEmpty()) {
      baseSdk=baseSdks.iterator().next();
    }
  }
  if (baseSdk != null) {
    final PyPackageManager packageManager=PyPackageManager.getInstance(new PyDetectedSdk(baseSdk));
    try {
      final String path=packageManager.createVirtualEnv(settingsStep.getProjectLocation() + "/.idea/VirtualEnvironment",false);
      AbstractCreateVirtualEnvDialog.setupVirtualEnvSdk(path,true,new AbstractCreateVirtualEnvDialog.VirtualEnvCallback(){
        @Override public void virtualEnvCreated(        Sdk createdSdk,        boolean associateWithProject){
          settingsStep.setSdk(createdSdk);
          model.addSdk(createdSdk);
          try {
            model.apply();
          }
 catch (          ConfigurationException exception) {
            LOG.error("Error adding created virtual env " + exception.getMessage());
          }
          if (associateWithProject) {
            SdkAdditionalData additionalData=createdSdk.getSdkAdditionalData();
            if (additionalData == null) {
              additionalData=new PythonSdkAdditionalData(PythonSdkFlavor.getFlavor(createdSdk.getHomePath()));
              ((ProjectJdkImpl)createdSdk).setSdkAdditionalData(additionalData);
            }
            ((PythonSdkAdditionalData)additionalData).associateWithNewProject();
          }
        }
      }
);
    }
 catch (    ExecutionException e) {
      LOG.warn("Failed to create virtual env " + e.getMessage());
    }
  }
}
