{
  if (!(step instanceof ProjectSpecificSettingsStep))   return;
  final ProjectSpecificSettingsStep settingsStep=(ProjectSpecificSettingsStep)step;
  final DirectoryProjectGenerator generator=settingsStep.getProjectGenerator();
  Sdk sdk=settingsStep.getSdk();
  if (sdk instanceof PyDetectedSdk) {
    addDetectedSdk(settingsStep,sdk);
  }
  if (generator instanceof PythonProjectGenerator) {
    final BooleanFunction<PythonProjectGenerator> beforeProjectGenerated=((PythonProjectGenerator)generator).beforeProjectGenerated(sdk);
    if (beforeProjectGenerated != null) {
      final boolean result=beforeProjectGenerated.fun((PythonProjectGenerator)generator);
      if (!result) {
        Messages.showWarningDialog("Project can not be generated","Error in Project Generation");
      }
    }
  }
  final Project newProject=generateProject(settingsStep);
  if (sdk == null) {
    createAndAddVirtualEnv(settingsStep);
  }
  sdk=settingsStep.getSdk();
  if (newProject != null && generator instanceof PythonProjectGenerator) {
    SdkConfigurationUtil.setDirectoryProjectSdk(newProject,sdk);
    final List<Sdk> sdks=PythonSdkType.getAllSdks();
    for (    Sdk s : sdks) {
      final SdkAdditionalData additionalData=s.getSdkAdditionalData();
      if (additionalData instanceof PythonSdkAdditionalData) {
        ((PythonSdkAdditionalData)additionalData).reassociateWithCreatedProject(newProject);
      }
    }
    if (((PythonProjectGenerator)generator).hideInterpreter()) {
      installRequirements(newProject);
    }
  }
}
