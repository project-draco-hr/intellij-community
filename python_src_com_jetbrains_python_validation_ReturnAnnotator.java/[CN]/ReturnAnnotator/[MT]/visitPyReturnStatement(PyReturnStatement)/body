{
  final PyFunction function=PsiTreeUtil.getParentOfType(node,PyFunction.class,false,PyClass.class);
  if (function == null) {
    getHolder().createErrorAnnotation(node,"'return' outside of function");
  }
  if (function != null && node.getExpression() != null) {
    final PyType returnType=TypeEvalContext.codeAnalysis(function.getProject(),function.getContainingFile()).getReturnType(function);
    if (returnType != null && PyNames.FAKE_ASYNC_GENERATOR.equals(returnType.getName())) {
      getHolder().createErrorAnnotation(node,"non-empty 'return' inside asynchronous generator");
    }
  }
}
