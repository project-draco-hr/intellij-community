{
  List<GrCallExpression> statements=MultipleRepositoryUrlsInspection.findUrlCallExpressions(myClosure);
  if (statements.size() <= 1)   return;
  statements.remove(0);
  List<PsiElement> elements=new ArrayList<>(statements);
  for (  GrCallExpression statement : statements) {
    PsiElement newLineCandidate=statement.getNextSibling();
    if (PsiUtil.isNewLine(newLineCandidate)) {
      elements.add(newLineCandidate);
    }
  }
  myClosure.removeElements(elements.toArray(new PsiElement[elements.size()]));
  GrClosableBlock closableBlock=PsiTreeUtil.getParentOfType(myClosure,GrClosableBlock.class);
  if (closableBlock == null)   return;
  GroovyPsiElementFactory elementFactory=GroovyPsiElementFactory.getInstance(project);
  for (  GrCallExpression statement : statements) {
    closableBlock.addStatementBefore(elementFactory.createStatementFromText(myRepoType + '{' + statement.getText()+ '}'),null);
  }
}
