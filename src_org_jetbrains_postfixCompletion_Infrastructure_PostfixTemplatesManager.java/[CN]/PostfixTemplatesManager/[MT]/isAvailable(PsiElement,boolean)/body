{
  if (positionElement instanceof PsiIdentifier) {
    final PsiReferenceExpression referenceExpression=PsiTreeUtil.getParentOfType(positionElement,PsiReferenceExpression.class);
    if (referenceExpression == null)     return null;
    final PsiExpression qualifier=referenceExpression.getQualifierExpression();
    if (qualifier != null) {
      return new PostfixTemplateAcceptanceContext(referenceExpression,qualifier,forceMode){
        @Override @NotNull public PrefixExpressionContext fixUpExpression(        final @NotNull PrefixExpressionContext context){
          final PsiElement parent=context.expression.getParent();
          if (parent instanceof PsiReferenceExpression && parent == this.referenceExpression) {
            final PsiExpression newExpression=(PsiExpression)this.referenceExpression.replace(context.expression);
            return new PrefixExpressionContext(this,newExpression);
          }
          return context;
        }
      }
;
    }
    if (referenceExpression.getFirstChild() instanceof PsiReferenceParameterList && referenceExpression.getLastChild() == positionElement) {
      final PsiExpressionStatement statement=PsiTreeUtil.getParentOfType(referenceExpression,PsiExpressionStatement.class);
      if (statement == null)       return null;
      final PsiStatement prevStatement=PsiTreeUtil.getPrevSiblingOfType(statement,PsiStatement.class);
      if (!(prevStatement instanceof PsiExpressionStatement))       return null;
      final PsiElement lastErrorChild=prevStatement.getLastChild();
      if (lastErrorChild instanceof PsiErrorElement) {
        PsiExpression expression=((PsiExpressionStatement)prevStatement).getExpression();
        if (prevStatement.getFirstChild() == expression && lastErrorChild.getPrevSibling() == expression) {
          PsiLiteralExpression brokenLiteral=null;
          do {
            if (expression instanceof PsiLiteralExpression) {
              final PsiJavaToken token=PsiTreeUtil.getChildOfType(expression,PsiJavaToken.class);
              if (token != null && token.getTokenType() == JavaTokenType.DOUBLE_LITERAL && token.getText().endsWith(".")) {
                brokenLiteral=(PsiLiteralExpression)expression;
                break;
              }
            }
            final PsiElement last=expression.getLastChild();
            if (last instanceof PsiExpression)             expression=(PsiExpression)last;
 else             expression=PsiTreeUtil.getPrevSiblingOfType(last,PsiExpression.class);
          }
 while (expression != null);
          if (brokenLiteral != null) {
            final PsiLiteralExpression finalBrokenLiteral=brokenLiteral;
            return new PostfixTemplateAcceptanceContext(referenceExpression,finalBrokenLiteral,forceMode){
              @Override @NotNull public PrefixExpressionContext fixUpExpression(              @NotNull final PrefixExpressionContext context){
                statement.delete();
                final JavaPsiFacade facade=JavaPsiFacade.getInstance(context.expression.getProject());
                final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(context.expression.getProject());
                final String text=finalBrokenLiteral.getText();
                final PsiLiteralExpression fixedLiteral=(PsiLiteralExpression)elementFactory.createExpressionFromText(text.substring(0,text.length() - 1),null);
                finalBrokenLiteral.replace(fixedLiteral);
                return context;
              }
            }
;
          }
        }
      }
    }
  }
  return null;
}
