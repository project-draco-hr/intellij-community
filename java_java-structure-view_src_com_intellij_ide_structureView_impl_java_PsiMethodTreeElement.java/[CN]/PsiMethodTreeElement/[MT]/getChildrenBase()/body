{
  final List<StructureViewTreeElement> emptyResult=Collections.emptyList();
  final PsiMethod element=getElement();
  if (element == null || element instanceof SyntheticElement)   return emptyResult;
  final PsiFile psiFile=element.getContainingFile();
  if (psiFile == null || psiFile instanceof PsiCompiledElement)   return emptyResult;
  final TextRange range=element.getTextRange();
  if (range == null)   return emptyResult;
  final String fileText=psiFile.getText();
  if (fileText == null)   return emptyResult;
  if (!range.substring(fileText).contains(PsiKeyword.CLASS))   return emptyResult;
  final ArrayList<StructureViewTreeElement> result=new ArrayList<>();
  element.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitClass(    PsiClass aClass){
      if (!(aClass instanceof PsiAnonymousClass) && !(aClass instanceof PsiTypeParameter)) {
        result.add(new JavaClassTreeElement(aClass,isInherited(),new HashSet<>(Arrays.asList(aClass.getSupers()))));
      }
    }
  }
);
  return result;
}
