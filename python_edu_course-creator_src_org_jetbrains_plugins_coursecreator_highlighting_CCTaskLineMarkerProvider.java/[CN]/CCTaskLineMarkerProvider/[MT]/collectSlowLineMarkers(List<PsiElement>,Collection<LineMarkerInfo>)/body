{
  for (  PsiElement element : elements) {
    if (element instanceof PsiFile) {
      final Project project=element.getProject();
      final Course course=CCProjectService.getInstance(project).getCourse();
      final String taskFileName=((PsiFile)element).getName();
      final PsiDirectory taskDir=((PsiFile)element).getParent();
      if (taskDir == null)       continue;
      final String taskDirName=taskDir.getName();
      final PsiDirectory lessonDir=taskDir.getParentDirectory();
      if (lessonDir == null)       continue;
      final String lessonDirName=lessonDir.getName();
      final Lesson lesson=course.getLesson(lessonDirName);
      if (lesson == null)       continue;
      final Task task=lesson.getTask(taskDirName);
      final TaskFile taskFile=task.getTaskFile(taskFileName);
      if (taskFile == null)       continue;
      final Document document=PsiDocumentManager.getInstance(project).getDocument((PsiFile)element);
      if (document == null)       continue;
      for (      final TaskWindow taskWindow : taskFile.getTaskWindows()) {
        if (taskWindow.line > document.getLineCount())         continue;
        final int lineStartOffset=document.getLineStartOffset(taskWindow.line);
        final int offset=lineStartOffset + taskWindow.start;
        if (offset > document.getTextLength())         continue;
        final TextRange textRange=TextRange.create(offset,offset + taskWindow.getReplacementLength());
        @SuppressWarnings("unchecked") final LineMarkerInfo info=new LineMarkerInfo(element,textRange,IconLoader.getIcon("/icons/gutter.png"),Pass.UPDATE_OVERRIDEN_MARKERS,null,null,GutterIconRenderer.Alignment.CENTER){
          @Nullable @Override public GutterIconRenderer createGutterRenderer(){
            return new TaskTextGutter(taskWindow,this);
          }
        }
;
        result.add(info);
      }
    }
  }
}
