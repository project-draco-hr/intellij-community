{
  String title="Delete Remote Branch";
  String message="Delete remote branch " + branchName;
  boolean delete;
  final boolean deleteTracking;
  if (trackingBranches.isEmpty()) {
    delete=Messages.showYesNoDialog(myProject,message,title,"Delete","Cancel",Messages.getQuestionIcon()) == Messages.YES;
    deleteTracking=false;
  }
 else {
    if (currentBranchTracksBranchToDelete) {
      message+="\n\nCurrent branch " + GitBranchUtil.getCurrentBranchOrRev(repositories) + " tracks "+ branchName+ " but won't be deleted.";
    }
    final String checkboxMessage;
    if (trackingBranches.size() == 1) {
      checkboxMessage="Delete tracking local branch " + trackingBranches.iterator().next() + " as well";
    }
 else {
      checkboxMessage="Delete tracking local branches " + StringUtil.join(trackingBranches,", ");
    }
    final AtomicBoolean deleteChoice=new AtomicBoolean();
    delete=MessageDialogBuilder.yesNo(title,message).project(myProject).yesText("Delete").noText("Cancel").doNotAsk(new DialogWrapper.DoNotAskOption.Adapter(){
      @Override public void rememberChoice(      boolean isSelected,      int exitCode){
        deleteChoice.set(isSelected);
      }
      @NotNull @Override public String getDoNotShowMessage(){
        return checkboxMessage;
      }
    }
).show() == Messages.YES;
    deleteTracking=deleteChoice.get();
  }
  return new DeleteRemoteBranchDecision(delete,deleteTracking);
}
