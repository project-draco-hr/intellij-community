{
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      final int[] selected=myPackagesTable.getSelectedRows();
      boolean isAvailabe=mySelectedSdk != null && selected.length != 0 && myHasPip;
      boolean upgradeAvailable=false;
      boolean isPipOrDistribute=false;
      boolean isInUserSite=true;
      final String userSite=PyPackageManagerImpl.getUserSite();
      if (isAvailabe) {
        for (int i=0; i != selected.length; ++i) {
          final int index=selected[i];
          if (index >= myPackagesTable.getRowCount())           continue;
          final Object value=myPackagesTable.getValueAt(index,0);
          if (value instanceof PyPackage) {
            final PyPackage pyPackage=(PyPackage)value;
            final String pyPackageName=pyPackage.getName();
            final String availableVersion=(String)myPackagesTable.getValueAt(index,2);
            upgradeAvailable=PyRequirement.VERSION_COMPARATOR.compare(pyPackage.getVersion(),availableVersion) < 0 && !currentlyInstalling.contains(pyPackageName);
            isPipOrDistribute="pip".equals(pyPackageName) || "distribute".equals(pyPackageName);
            isAvailabe=!isPipOrDistribute;
            final String location=pyPackage.getLocation();
            if (isInUserSite && location != null) {
              isInUserSite=location.startsWith(userSite);
            }
            if (!isAvailabe)             break;
          }
        }
      }
      final boolean isVEnv=PythonSdkType.isVirtualEnv(mySelectedSdk);
      myUninstallButton.setEnabled(isAvailabe && (!isVEnv || !isInUserSite));
      myUpgradeButton.setEnabled(upgradeAvailable && isAvailabe || isPipOrDistribute);
    }
  }
,ModalityState.any());
}
