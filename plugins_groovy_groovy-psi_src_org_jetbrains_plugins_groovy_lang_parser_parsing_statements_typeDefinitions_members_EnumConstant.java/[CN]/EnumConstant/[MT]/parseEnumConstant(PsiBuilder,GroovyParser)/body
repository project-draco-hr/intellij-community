{
  PsiBuilder.Marker ecMarker=builder.mark();
  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  Annotation.parseAnnotationOptional(builder,parser);
  if (!ParserUtils.getToken(builder,GroovyTokenTypes.mIDENT)) {
    ecMarker.rollbackTo();
    return false;
  }
  if (GroovyTokenTypes.mLPAREN.equals(builder.getTokenType())) {
    PsiBuilder.Marker marker=builder.mark();
    ParserUtils.getToken(builder,GroovyTokenTypes.mLPAREN);
    ArgumentList.parseArgumentList(builder,GroovyTokenTypes.mRPAREN,parser);
    ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
    ParserUtils.getToken(builder,GroovyTokenTypes.mRPAREN,GroovyBundle.message("rparen.expected"));
    marker.done(GroovyElementTypes.ARGUMENTS);
  }
  if (builder.getTokenType() == GroovyTokenTypes.mLCURLY) {
    final PsiBuilder.Marker enumInitializer=builder.mark();
    TypeDefinition.parseBody(builder,null,parser,false);
    enumInitializer.done(GroovyElementTypes.ENUM_CONSTANT_INITIALIZER);
  }
  ecMarker.done(GroovyElementTypes.ENUM_CONSTANT);
  return true;
}
