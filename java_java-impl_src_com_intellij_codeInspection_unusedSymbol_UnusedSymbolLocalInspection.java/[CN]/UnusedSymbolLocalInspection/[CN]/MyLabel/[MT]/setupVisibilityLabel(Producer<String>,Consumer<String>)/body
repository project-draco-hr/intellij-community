{
  setText(getPresentableText(visibilityProducer.produce()));
  new ClickListener(){
    @Override public boolean onClick(    @NotNull MouseEvent e,    int clickCount){
      @SuppressWarnings("UseOfObsoleteCollectionType") Hashtable<Integer,JComponent> sliderLabels=new Hashtable<>();
      for (int i=0; i < MODIFIERS.length; i++) {
        sliderLabels.put(i + 1,new JLabel(getPresentableText(MODIFIERS[i])));
      }
      JSlider slider=new JSlider(SwingConstants.VERTICAL,1,MODIFIERS.length,1);
      slider.setLabelTable(sliderLabels);
      slider.putClientProperty(UIUtil.JSLIDER_ISFILLED,Boolean.TRUE);
      slider.setPreferredSize(JBUI.size(150,100));
      slider.setPaintLabels(true);
      slider.setSnapToTicks(true);
      slider.setValue(ArrayUtil.find(MODIFIERS,visibilityProducer.produce()) + 1);
      final JBPopup popup=JBPopupFactory.getInstance().createComponentPopupBuilder(slider,null).setCancelOnClickOutside(true).createPopup();
      popup.addListener(new JBPopupAdapter(){
        @Override public void onClosed(        LightweightWindowEvent event){
          final String modifier=MODIFIERS[slider.getValue() - 1];
          setter.consume(modifier);
          setText(getPresentableText(modifier));
          fireStateChanged();
        }
      }
);
      popup.show(new RelativePoint(MyLabel.this,new Point(getWidth(),0)));
      return true;
    }
  }
.installOn(this);
}
