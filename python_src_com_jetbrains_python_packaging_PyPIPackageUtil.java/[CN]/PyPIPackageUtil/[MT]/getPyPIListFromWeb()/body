{
  final List<String> packages=new ArrayList<String>();
  HTMLEditorKit.ParserCallback callback=new HTMLEditorKit.ParserCallback(){
    HTML.Tag myTag;
    boolean inTable=false;
    @Override public void handleStartTag(    HTML.Tag tag,    MutableAttributeSet set,    int i){
      if ("table".equals(tag.toString()))       inTable=!inTable;
      if (inTable && "a".equals(tag.toString())) {
        packages.add(String.valueOf(set.getAttribute(HTML.Attribute.HREF)));
      }
    }
    @Override public void handleEndTag(    HTML.Tag tag,    int i){
      if ("table".equals(tag.toString()))       inTable=!inTable;
    }
  }
;
  try {
    URL repositoryUrl=new URL(PYPI_LIST_URL);
    TrustManager[] trustAllCerts=new TrustManager[]{new X509TrustManager(){
      public X509Certificate[] getAcceptedIssuers(){
        return null;
      }
      public void checkClientTrusted(      X509Certificate[] certs,      String authType){
      }
      public void checkServerTrusted(      X509Certificate[] certs,      String authType){
      }
    }
};
    try {
      SSLContext sslContext=SSLContext.getInstance("TLS");
      sslContext.init(null,trustAllCerts,new SecureRandom());
      HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());
    }
 catch (    Exception e) {
      LOG.warn(e);
    }
    InputStream is=repositoryUrl.openStream();
    Reader reader=new InputStreamReader(is);
    try {
      new ParserDelegator().parse(reader,callback,true);
    }
 catch (    IOException e) {
      LOG.warn(e);
    }
 finally {
      reader.close();
    }
  }
 catch (  MalformedURLException e) {
    LOG.warn(e);
  }
  return packages;
}
