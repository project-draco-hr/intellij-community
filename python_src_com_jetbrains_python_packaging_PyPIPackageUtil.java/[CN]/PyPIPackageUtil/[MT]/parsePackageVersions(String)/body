{
  return HttpRequests.request(repository).connect(new HttpRequests.RequestProcessor<List<String>>(){
    @Override public List<String> process(    @NotNull HttpRequests.Request request) throws IOException {
      final List<String> versions=new ArrayList<String>();
      Reader reader=request.getReader();
      new ParserDelegator().parse(reader,new HTMLEditorKit.ParserCallback(){
        HTML.Tag myTag;
        @Override public void handleStartTag(        HTML.Tag tag,        MutableAttributeSet set,        int i){
          myTag=tag;
        }
        @Override public void handleText(        char[] data,        int pos){
          if (myTag != null && "a".equals(myTag.toString())) {
            String packageVersion=String.valueOf(data);
            final String suffix=".tar.gz";
            if (!packageVersion.endsWith(suffix))             return;
            packageVersion=StringUtil.trimEnd(packageVersion,suffix);
            versions.add(splitNameVersion(packageVersion).second);
          }
        }
      }
,true);
      return versions;
    }
  }
,Collections.emptyList(),LOG);
}
