{
  final PsiElement psiElement=configuration.getSourceElement();
  if (psiElement instanceof PsiMethod || psiElement instanceof PsiClass) {
    final PsiMethod psiMethod;
    final PsiClass containingClass;
    if (psiElement instanceof PsiMethod) {
      psiMethod=(PsiMethod)psiElement;
      containingClass=psiMethod.getContainingClass();
    }
 else {
      psiMethod=null;
      containingClass=(PsiClass)psiElement;
    }
    final InheritorChooser inheritorChooser=new InheritorChooser(){
      @Override protected void runForClasses(      List<PsiClass> classes,      PsiMethod method,      ConfigurationContext context,      Runnable performRunnable){
        ((TestNGConfiguration)configuration.getConfiguration()).bePatternConfiguration(classes,method);
        super.runForClasses(classes,method,context,performRunnable);
      }
      @Override protected void runForClass(      PsiClass aClass,      PsiMethod psiMethod,      ConfigurationContext context,      Runnable performRunnable){
        if (psiElement instanceof PsiMethod) {
          final Project project=psiMethod.getProject();
          final MethodLocation methodLocation=new MethodLocation(project,psiMethod,PsiLocation.fromPsiElement(aClass));
          ((TestNGConfiguration)configuration.getConfiguration()).setMethodConfiguration(methodLocation);
        }
 else {
          ((TestNGConfiguration)configuration.getConfiguration()).setClassConfiguration(aClass);
        }
        super.runForClass(aClass,psiMethod,context,performRunnable);
      }
    }
;
    if (inheritorChooser.runMethodInAbstractClass(fromContext,performRunnable,psiMethod,containingClass,new Condition<PsiClass>(){
      @Override public boolean value(      PsiClass aClass){
        return aClass.hasModifierProperty(PsiModifier.ABSTRACT) && TestNGUtil.hasTest(aClass);
      }
    }
))     return;
  }
  super.onFirstRun(configuration,fromContext,performRunnable);
}
