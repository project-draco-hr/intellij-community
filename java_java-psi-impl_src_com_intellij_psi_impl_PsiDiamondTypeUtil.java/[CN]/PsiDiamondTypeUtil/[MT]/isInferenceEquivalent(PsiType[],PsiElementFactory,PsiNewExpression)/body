{
  final PsiJavaCodeReferenceElement collapsedClassReference=((PsiNewExpression)elementFactory.createExpressionFromText("new A<>()",null)).getClassOrAnonymousClassReference();
  LOG.assertTrue(collapsedClassReference != null);
  final PsiReferenceParameterList diamondParameterList=collapsedClassReference.getParameterList();
  LOG.assertTrue(diamondParameterList != null);
  final PsiJavaCodeReferenceElement classReference=exprCopy.getClassOrAnonymousClassReference();
  LOG.assertTrue(classReference != null);
  final PsiReferenceParameterList parameterList=classReference.getParameterList();
  LOG.assertTrue(parameterList != null);
  parameterList.replace(diamondParameterList);
  final PsiType[] inferredArgs=classReference.getParameterList().getTypeArguments();
  if (typeArguments.length != inferredArgs.length) {
    return false;
  }
  for (int i=0; i < typeArguments.length; i++) {
    PsiType typeArgument=typeArguments[i];
    if (inferredArgs[i] instanceof PsiWildcardType) {
      final PsiWildcardType wildcardType=(PsiWildcardType)inferredArgs[i];
      final PsiType bound=wildcardType.getBound();
      if (bound != null) {
        if (wildcardType.isExtends()) {
          if (bound.isAssignableFrom(typeArgument))           continue;
        }
 else {
          if (typeArgument.isAssignableFrom(bound))           continue;
        }
      }
    }
    if (!typeArgument.equals(inferredArgs[i])) {
      return false;
    }
  }
  return true;
}
