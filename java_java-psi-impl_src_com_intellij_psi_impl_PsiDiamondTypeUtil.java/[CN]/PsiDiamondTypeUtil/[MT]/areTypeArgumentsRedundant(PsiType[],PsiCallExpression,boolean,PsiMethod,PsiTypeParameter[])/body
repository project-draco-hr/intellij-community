{
  try {
    final PsiElement copy;
    final PsiType typeByParent=PsiTypesUtil.getExpectedTypeByParent(expression);
    if (typeByParent != null) {
      final String arrayInitializer="new " + typeByParent.getCanonicalText() + "[]{0}";
      final Project project=expression.getProject();
      final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(project).getElementFactory();
      PsiNewExpression newExpr=(PsiNewExpression)elementFactory.createExpressionFromText(arrayInitializer,expression);
      newExpr=(PsiNewExpression)JavaCodeStyleManager.getInstance(project).shortenClassReferences(newExpr);
      final PsiArrayInitializerExpression initializer=newExpr.getArrayInitializer();
      LOG.assertTrue(initializer != null);
      copy=initializer.getInitializers()[0].replace(expression);
    }
 else {
      final PsiExpressionList argumentList=expression.getArgumentList();
      final int offset=(argumentList != null ? argumentList : expression).getTextRange().getStartOffset();
      final PsiCall call=LambdaUtil.treeWalkUp(expression);
      if (call != null) {
        final PsiCall callCopy=LambdaUtil.copyTopLevelCall(call);
        copy=callCopy != null ? callCopy.findElementAt(offset - call.getTextRange().getStartOffset()) : null;
      }
 else {
        final InjectedLanguageManager injectedLanguageManager=InjectedLanguageManager.getInstance(expression.getProject());
        if (injectedLanguageManager.getInjectionHost(expression) != null) {
          return false;
        }
        final PsiFile containingFile=expression.getContainingFile();
        final PsiFile fileCopy=(PsiFile)containingFile.copy();
        copy=fileCopy.findElementAt(offset);
        if (method != null && method.getContainingFile() == containingFile) {
          final PsiElement startMethodElementInCopy=fileCopy.findElementAt(method.getTextOffset());
          method=PsiTreeUtil.getParentOfType(startMethodElementInCopy,PsiMethod.class);
          if (method == null) {
            return false;
          }
        }
      }
    }
    final PsiCallExpression exprCopy=PsiTreeUtil.getParentOfType(copy,PsiCallExpression.class,false);
    if (exprCopy != null) {
      final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(exprCopy.getProject()).getElementFactory();
      if (constructorRef) {
        if (!(exprCopy instanceof PsiNewExpression) || !isInferenceEquivalent(typeArguments,elementFactory,(PsiNewExpression)exprCopy)) {
          return false;
        }
      }
 else {
        LOG.assertTrue(method != null);
        if (!isInferenceEquivalent(typeArguments,elementFactory,exprCopy,method,typeParameters)) {
          return false;
        }
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.info(e);
    return false;
  }
  return true;
}
