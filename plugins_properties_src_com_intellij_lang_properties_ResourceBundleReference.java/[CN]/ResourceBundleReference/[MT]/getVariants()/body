{
  final ProjectFileIndex projectFileIndex=ProjectFileIndex.SERVICE.getInstance(getElement().getProject());
  final PropertiesReferenceManager referenceManager=PropertiesReferenceManager.getInstance(getElement().getProject());
  final Set<String> bundleNames=new HashSet<String>();
  final List<LookupElement> variants=new SmartList<LookupElement>();
  PropertiesFileProcessor processor=new PropertiesFileProcessor(){
    @Override public boolean process(    String baseName,    PropertiesFile propertiesFile){
      if (!bundleNames.add(baseName))       return true;
      final LookupElementBuilder builder=LookupElementBuilder.create(baseName).withIcon(AllIcons.Nodes.ResourceBundle);
      boolean isInContent=projectFileIndex.isInContent(propertiesFile.getVirtualFile());
      variants.add(isInContent ? PrioritizedLookupElement.withPriority(builder,Double.MAX_VALUE) : builder);
      return true;
    }
  }
;
  referenceManager.processPropertiesFiles(myElement.getResolveScope(),processor,this);
  return variants.toArray(new LookupElement[variants.size()]);
}
