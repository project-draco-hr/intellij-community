{
  for (  final ExternalSystemManager<?,?,?,?,?> manager : ExternalSystemApiUtil.getAllManagers()) {
    final AbstractExternalSystemSettings settings=manager.getSettingsProvider().fun(project);
    settings.subscribe(new ExternalSystemSettingsListenerAdapter(){
      @Override public void onProjectsLinked(      @NotNull Collection linked){
        if (settings.getLinkedProjectsSettings().size() != 1) {
          return;
        }
        ToolWindow toolWindow=getToolWindow(project,manager.getSystemId());
        if (toolWindow != null) {
          toolWindow.setAvailable(true,null);
        }
 else {
          StartupManager.getInstance(project).runWhenProjectIsInitialized(new DumbAwareRunnable(){
            @Override public void run(){
              if (project.isDisposed())               return;
              ExternalSystemUtil.ensureToolWindowInitialized(project,manager.getSystemId());
              ToolWindowManager.getInstance(project).invokeLater(new Runnable(){
                public void run(){
                  if (project.isDisposed())                   return;
                  ToolWindow toolWindow=getToolWindow(project,manager.getSystemId());
                  if (toolWindow != null) {
                    toolWindow.setAvailable(true,null);
                  }
                }
              }
);
            }
          }
);
        }
      }
      @Override public void onProjectsUnlinked(      @NotNull Set linkedProjectPaths){
        if (!settings.getLinkedProjectsSettings().isEmpty()) {
          return;
        }
        final ToolWindow toolWindow=getToolWindow(project,manager.getSystemId());
        if (toolWindow != null) {
          UIUtil.invokeLaterIfNeeded(new Runnable(){
            @Override public void run(){
              toolWindow.setAvailable(false,null);
            }
          }
);
        }
      }
    }
);
  }
}
