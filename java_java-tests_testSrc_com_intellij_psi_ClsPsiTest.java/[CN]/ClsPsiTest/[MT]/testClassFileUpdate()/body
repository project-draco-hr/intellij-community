{
  File testFile=IoTestUtil.createTestFile("TestClass.class");
  File file1=new File(PathManagerEx.getTestDataPath() + TEST_DATA_PATH + "/1_TestClass.class");
  FileUtil.copy(file1,testFile);
  VirtualFile vFile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(testFile);
  assertNotNull(testFile.getPath(),vFile);
  FileBasedIndex.getInstance().requestReindex(vFile);
  PsiFile file=PsiManager.getInstance(getProject()).findFile(vFile);
  assertNotNull(file);
  PsiClass aClass=((PsiJavaFile)file).getClasses()[0];
  assertTrue(aClass.isValid());
  assertEquals(2,aClass.getFields().length);
  assertEquals("field11",aClass.getFields()[0].getName());
  assertEquals("field12",aClass.getFields()[1].getName());
  assertEquals(2,aClass.getMethods().length);
  assertEquals("TestClass",aClass.getMethods()[0].getName());
  assertEquals("method1",aClass.getMethods()[1].getName());
  File file2=new File(PathManagerEx.getTestDataPath() + TEST_DATA_PATH + "/2_TestClass.class");
  FileUtil.copy(file2,testFile);
  assertTrue(testFile.setLastModified(System.currentTimeMillis() + 5000));
  vFile.refresh(false,false);
  aClass=((PsiJavaFile)file).getClasses()[0];
  assertTrue(aClass.isValid());
  assertTrue(aClass.isValid());
  assertEquals(1,aClass.getFields().length);
  assertEquals("field2",aClass.getFields()[0].getName());
  assertEquals(2,aClass.getMethods().length);
  assertEquals("TestClass",aClass.getMethods()[0].getName());
  assertEquals("method2",aClass.getMethods()[1].getName());
}
