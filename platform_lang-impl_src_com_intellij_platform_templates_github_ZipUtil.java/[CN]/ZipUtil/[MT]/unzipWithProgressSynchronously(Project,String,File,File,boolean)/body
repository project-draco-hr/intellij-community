{
  final Outcome<Boolean> outcome=DownloadUtil.provideDataWithProgressSynchronously(project,progressTitle,"Unpacking ...",new Callable<Boolean>(){
    @Override public Boolean call() throws IOException {
      ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
      ZipInputStream stream=new ZipInputStream(new FileInputStream(zipArchive));
      try {
        unzip(progress,extractToDir,stream,null,null,unwrapSingleTopLevelFolder);
      }
  finally {
        stream.close();
      }
      return true;
    }
  }
,new Producer<Boolean>(){
    @Override public Boolean produce(){
      return false;
    }
  }
);
  Boolean result=outcome.get();
  if (result == null) {
    @SuppressWarnings("ThrowableResultOfMethodCallIgnored") Exception e=outcome.getException();
    if (e != null) {
      throw new GeneratorException("Unpacking failed, downloaded archive is broken");
    }
    throw new GeneratorException("Unpacking was cancelled");
  }
}
