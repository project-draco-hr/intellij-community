{
  final PyExpression qualifier=element.getQualifier();
  if (qualifier != null) {
    qualifier.accept(this);
    return;
  }
  if (PyImportStatementNavigator.getImportStatementByElement(element) != null) {
    processDeclaration(element);
    return;
  }
  if (PyPsiUtils.isMethodContext(element) && "self".equals(element.getName())) {
    return;
  }
  final Position position=CodeFragmentUtil.getPosition(element,startOffset,endOffset);
  final String name=element.getName();
  if (position == Position.INSIDE) {
    for (    ResolveResult result : element.getReference().multiResolve(false)) {
      final PsiElement declaration=result.getElement();
      if ((declaration instanceof PyClass || declaration instanceof PyFunction) && (!PsiTreeUtil.isAncestor(myOwner,declaration,false) || CodeFragmentUtil.getPosition(declaration,startOffset,endOffset) != Position.INSIDE)) {
        continue;
      }
      if (declaration instanceof PyFile) {
        inElements.add(name);
        break;
      }
      if (declaration == null || !PsiTreeUtil.isAncestor(myOwner,declaration,false) || declaration instanceof PyImportElement) {
        continue;
      }
      final Position pos=CodeFragmentUtil.getPosition(declaration,startOffset,endOffset);
      if (pos == Position.BEFORE) {
        inElements.add(name);
        break;
      }
    }
  }
  if (position == Position.AFTER) {
    if (outElements.contains(name)) {
      return;
    }
    for (    ResolveResult result : element.getReference().multiResolve(false)) {
      final PsiElement declaration=result.getElement();
      if (declaration instanceof PyFile && modifiedInsideMap.containsKey(name)) {
        outElements.add(name);
        break;
      }
      if (declaration == null || !PsiTreeUtil.isAncestor(myOwner,declaration,false)) {
        continue;
      }
      final Position pos=CodeFragmentUtil.getPosition(declaration,startOffset,endOffset);
      if (pos == Position.INSIDE) {
        outElements.add(name);
        break;
      }
      if (pos == Position.BEFORE) {
        final List<PyElement> list=modifiedInsideMap.get(name);
        boolean modificationSeen=false;
        if (list != null) {
          for (          PyElement modification : list) {
            if (modification.getReference().isReferenceTo(declaration)) {
              outElements.add(name);
              modificationSeen=true;
              break;
            }
          }
          if (modificationSeen) {
            break;
          }
        }
      }
    }
  }
}
