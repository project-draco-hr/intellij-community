{
  TokenSet stmts=TokenSet.EMPTY;
  TokenSet exprs=TokenSet.EMPTY;
  TokenSet keywords=TokenSet.EMPTY;
  TokenSet parameters=TokenSet.EMPTY;
  TokenSet functionDeclarations=TokenSet.EMPTY;
  TokenSet recoveryTokens=TokenSet.EMPTY;
  TokenSet referenceExpressions=TokenSet.EMPTY;
  for (  PythonDialectsTokenSetContributor contributor : Extensions.getExtensions(PythonDialectsTokenSetContributor.EP_NAME)) {
    stmts=TokenSet.orSet(stmts,contributor.getStatementTokens());
    exprs=TokenSet.orSet(exprs,contributor.getExpressionTokens());
    keywords=TokenSet.orSet(keywords,contributor.getKeywordTokens());
    parameters=TokenSet.orSet(parameters,contributor.getParameterTokens());
    functionDeclarations=TokenSet.orSet(functionDeclarations,contributor.getFunctionDeclarationTokens());
    recoveryTokens=TokenSet.orSet(recoveryTokens,contributor.getUnbalancedBracesRecoveryTokens());
    referenceExpressions=TokenSet.orSet(referenceExpressions,contributor.getReferenceExpressionTokens());
  }
  myStatementTokens=stmts;
  myExpressionTokens=exprs;
  myKeywordTokens=keywords;
  myParameterTokens=parameters;
  myFunctionDeclarationTokens=functionDeclarations;
  myUnbalancedBracesRecoveryTokens=recoveryTokens;
  myReferenceExpressionTokens=referenceExpressions;
}
