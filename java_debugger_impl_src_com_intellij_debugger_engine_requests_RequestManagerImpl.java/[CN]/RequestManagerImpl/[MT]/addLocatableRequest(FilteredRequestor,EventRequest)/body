{
  if (DebuggerSettings.SUSPEND_ALL.equals(requestor.getSuspendPolicy())) {
    request.setSuspendPolicy(EventRequest.SUSPEND_ALL);
  }
 else {
    request.setSuspendPolicy(EventRequest.SUSPEND_EVENT_THREAD);
  }
  if (requestor.COUNT_FILTER_ENABLED && requestor.COUNT_FILTER > 0) {
    request.addCountFilter(requestor.COUNT_FILTER);
  }
  if (requestor.CLASS_FILTERS_ENABLED && !(request instanceof BreakpointRequest)) {
    ClassFilter[] classFilters=requestor.getClassFilters();
    if (DebuggerUtilsEx.getEnabledNumber(classFilters) == 1) {
      for (      final ClassFilter filter : classFilters) {
        if (!filter.isEnabled()) {
          continue;
        }
        final JVMName jvmClassName=ApplicationManager.getApplication().runReadAction(new Computable<JVMName>(){
          public JVMName compute(){
            PsiClass psiClass=DebuggerUtils.findClass(filter.getPattern(),myDebugProcess.getProject(),myDebugProcess.getSearchScope());
            if (psiClass == null) {
              return null;
            }
            return JVMNameUtil.getJVMQualifiedName(psiClass);
          }
        }
);
        String pattern=filter.getPattern();
        try {
          if (jvmClassName != null) {
            pattern=jvmClassName.getName(myDebugProcess);
          }
        }
 catch (        EvaluateException ignored) {
        }
        addClassFilter(request,pattern);
        break;
      }
    }
    for (    ClassFilter filter : requestor.getClassExclusionFilters()) {
      if (filter.isEnabled()) {
        addClassExclusionFilter(request,filter.getPattern());
      }
    }
  }
  registerRequestInternal(requestor,request);
}
