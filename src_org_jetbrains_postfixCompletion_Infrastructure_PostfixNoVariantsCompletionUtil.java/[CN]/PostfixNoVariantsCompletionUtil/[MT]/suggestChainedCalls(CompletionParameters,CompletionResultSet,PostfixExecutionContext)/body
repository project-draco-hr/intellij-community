{
  PsiElement position=parameters.getPosition(), parent=position.getParent();
  if ((!(parent instanceof PsiJavaCodeReferenceElement)))   return;
  PsiElement qualifier=((PsiJavaCodeReferenceElement)parent).getQualifier();
  if (!(qualifier instanceof PsiJavaCodeReferenceElement))   return;
  PsiJavaCodeReferenceElement qualifierReference=(PsiJavaCodeReferenceElement)qualifier;
  if (qualifierReference.isQualified())   return;
  PsiElement target=qualifierReference.resolve();
  if (target != null && !(target instanceof PsiPackage))   return;
  PsiFile file=position.getContainingFile();
  if (file instanceof PsiJavaCodeReferenceCodeFragment)   return;
  int startOffset=parent.getTextRange().getStartOffset();
  String fullPrefix=parent.getText().substring(0,parameters.getOffset() - startOffset);
  CompletionResultSet filteredResultSet=resultSet.withPrefixMatcher(fullPrefix);
  Application application=ApplicationManager.getApplication();
  PostfixTemplatesManager templatesManager=application.getComponent(PostfixTemplatesManager.class);
  for (  LookupElement qualifierElement : suggestQualifierItems(parameters,qualifierReference)) {
    PsiType type=JavaCompletionUtil.getLookupElementType(qualifierElement);
    if (type == null || PsiType.VOID.equals(type))     continue;
    final PsiReferenceExpression mockReference=ReferenceExpressionCompletionContributor.createMockReference(position,type,qualifierElement);
    if (mockReference == null)     continue;
    PostfixTemplateContext templateContext=new PostfixTemplateContext((PsiJavaCodeReferenceElement)parent,qualifierReference,executionContext){
      @NotNull @Override protected List<PrefixExpressionContext> buildExpressionContexts(      @NotNull PsiElement reference,      @NotNull PsiElement expression){
        final PsiReferenceExpression qualifier=(PsiReferenceExpression)mockReference.getQualifier();
        return Collections.<PrefixExpressionContext>singletonList(new PrefixExpressionContext(this,expression){
          @Nullable @Override protected PsiType calculateExpressionType(          @NotNull PsiElement expression){
            return super.calculateExpressionType(qualifier);
          }
          @Nullable @Override protected PsiElement calculateReferencedElement(          @NotNull PsiElement expression){
            return super.calculateReferencedElement(qualifier);
          }
        }
);
      }
      @NotNull @Override public PrefixExpressionContext fixExpression(      @NotNull PrefixExpressionContext context){
        return context;
      }
    }
;
    for (    LookupElement postfixElement : templatesManager.collectTemplates(templateContext)) {
      JavaChainLookupElement chainedPostfix=new JavaChainLookupElement(qualifierElement,postfixElement){
        @Override public PsiType getType(){
          return null;
        }
      }
;
      filteredResultSet.addElement(chainedPostfix);
    }
  }
}
