{
  StringBuffer result=new StringBuffer();
  result.append('<');
  for (int i=0; i < myEqClasses.size(); i++) {
    appendClass(result,i);
  }
  if (!myDistinctClasses.isEmpty()) {
    result.append("\n  distincts: ");
    List<String> distincs=new ArrayList<String>();
    long[] dclasses=myDistinctClasses.toArray();
    for (    long pair : dclasses) {
      StringBuffer one=new StringBuffer();
      one.append("{");
      appendClass(one,low(pair));
      one.append(", ");
      appendClass(one,high(pair));
      one.append("}");
      distincs.add(one.toString());
    }
    Collections.sort(distincs);
    result.append(StringUtil.join(distincs," "));
  }
  if (!myStack.isEmpty()) {
    result.append("\n  stack: ").append(StringUtil.join(myStack,","));
  }
  if (!myVariableStates.isEmpty()) {
    result.append("\n  vars: ");
    for (    Map.Entry<DfaVariableValue,DfaVariableState> entry : myVariableStates.entrySet()) {
      result.append("[").append(entry.getKey()).append("->").append(entry.getValue()).append("]");
    }
  }
  if (!myUnknownVariables.isEmpty()) {
    result.append("\n  unknowns: ").append(new HashSet<DfaVariableValue>(myUnknownVariables));
  }
  result.append('>');
  return result.toString();
}
