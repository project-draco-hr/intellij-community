{
  final JTextField remoteName=new JTextField(GitRemote.ORIGIN_NAME,20);
  final JTextField remoteUrl=new JTextField(20);
  final JBPopup popup=createDefineRemotePopup(remoteName,remoteUrl);
  popup.addListener(new JBPopupListener.Adapter(){
    @Override public void onClosed(    final LightweightWindowEvent popupEvent){
      if (popupEvent.isOk()) {
        ProgressManager.getInstance().run(new Task.Modal(myRepository.getProject(),"Adding remote",false){
          private GitCommandResult myResult;
          @Override public void run(          @NotNull ProgressIndicator indicator){
            myResult=myGit.addRemote(myRepository,remoteName.getText().trim(),remoteUrl.getText().trim());
            myRepository.update();
          }
          @Override public void onSuccess(){
            if (myResult.success()) {
              updateComponents(myPushSupport.getDefaultTarget(myRepository));
              if (myFireOnChangeAction != null) {
                myFireOnChangeAction.run();
              }
            }
 else {
              String message="Couldn't add remote: " + myResult.getErrorOutputAsHtmlString();
              LOG.warn(message);
              Balloon balloon=JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(message,MessageType.ERROR,null).createBalloon();
              balloon.show(new RelativePoint(event),Balloon.Position.above);
            }
          }
        }
);
      }
    }
  }
);
  popup.show(new RelativePoint(event));
}
