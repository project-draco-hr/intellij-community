{
  final PsiClass toTypeClass=PsiUtil.resolveClassInType(to);
  LOG.assertTrue(toTypeClass != null);
  if (context instanceof PsiArrayAccessExpression) {
    return new TypeConversionDescriptor("$qualifier$[$val$]","$qualifier$.get()[$val$]");
  }
  final PsiElement parent=context.getParent();
  if (parent instanceof PsiAssignmentExpression) {
    final IElementType operationSign=((PsiAssignmentExpression)parent).getOperationTokenType();
    if (operationSign == JavaTokenType.EQ) {
      return new TypeConversionDescriptor("$qualifier$ = $val$","$qualifier$.set(" + toBoxed("$val$",from,context) + ")",(PsiAssignmentExpression)parent);
    }
  }
  if (context instanceof PsiReferenceExpression) {
    final PsiExpression qualifierExpression=((PsiReferenceExpression)context).getQualifierExpression();
    final PsiExpression expression=context.getParent() instanceof PsiMethodCallExpression && qualifierExpression != null ? qualifierExpression : (PsiExpression)context;
    return new TypeConversionDescriptor("$qualifier$",toPrimitive("$qualifier$.get()",from,context),expression);
  }
 else   if (context instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)context;
    final String sign=binaryExpression.getOperationSign().getText();
    return new TypeConversionDescriptor("$qualifier$" + sign + "$val$",toPrimitive("$qualifier$.get()",from,context) + " " + sign+ " $val$");
  }
  if (parent instanceof PsiExpressionStatement) {
    if (context instanceof PsiPostfixExpression) {
      final PsiPostfixExpression postfixExpression=(PsiPostfixExpression)context;
      final String sign=postfixExpression.getOperationSign().getText();
      return new TypeConversionDescriptor("$qualifier$" + sign,"$qualifier$.set(" + getBoxedWrapper(from,to,toPrimitive("$qualifier$.get()",from,context) + " " + sign.charAt(0)+ " 1",labeler,context,postfixExpression.getOperand().getText() + sign.charAt(0) + " 1") + ")");
    }
 else     if (context instanceof PsiPrefixExpression) {
      final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)context;
      final PsiJavaToken operationSign=((PsiPrefixExpression)context).getOperationSign();
      if (operationSign.getTokenType() == JavaTokenType.EXCL) {
        return new TypeConversionDescriptor("!$qualifier$","!$qualifier$.get()");
      }
      final String sign=operationSign.getText();
      final PsiExpression operand=prefixExpression.getOperand();
      return new TypeConversionDescriptor(sign + "$qualifier$","$qualifier$.set(" + getBoxedWrapper(from,to,toPrimitive("$qualifier$.get()",from,context) + " " + sign.charAt(0)+ " 1",labeler,context,operand != null ? operand.getText() + sign.charAt(0) + " 1" : null) + ")");
    }
 else     if (context instanceof PsiAssignmentExpression) {
      final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)context;
      final PsiJavaToken signToken=assignmentExpression.getOperationSign();
      final IElementType operationSign=signToken.getTokenType();
      final String sign=signToken.getText();
      final PsiExpression lExpression=assignmentExpression.getLExpression();
      if (operationSign == JavaTokenType.EQ) {
        if (lExpression instanceof PsiReferenceExpression) {
          final PsiElement element=((PsiReferenceExpression)lExpression).resolve();
          if (element instanceof PsiVariable && ((PsiVariable)element).hasModifierProperty(PsiModifier.FINAL)) {
            return wrapWithNewExpression(to,from,((PsiAssignmentExpression)context).getRExpression());
          }
        }
        return new TypeConversionDescriptor("$qualifier$ = $val$","$qualifier$.set(" + toBoxed("$val$",from,context) + ")");
      }
 else {
        final PsiExpression rExpression=assignmentExpression.getRExpression();
        return new TypeConversionDescriptor("$qualifier$" + sign + "$val$","$qualifier$.set(" + getBoxedWrapper(from,to,toPrimitive("$qualifier$.get()",from,context) + " " + sign.charAt(0)+ " $val$",labeler,context,rExpression != null ? lExpression.getText() + sign.charAt(0) + rExpression.getText() : null) + ")");
      }
    }
  }
  return null;
}
