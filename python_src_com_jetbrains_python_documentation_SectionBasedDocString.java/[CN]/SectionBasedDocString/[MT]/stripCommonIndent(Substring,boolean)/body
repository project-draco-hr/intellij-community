{
  final List<Substring> lines=text.splitLines();
  if (lines.isEmpty()) {
    return "";
  }
  final String firstLine=lines.get(0).toString();
  final boolean skipFirstLine=ignoreFirstStringIfNonEmpty && !StringUtil.isEmptyOrSpaces(firstLine);
  final Iterable<Substring> workList=lines.subList(skipFirstLine ? 1 : 0,lines.size());
  int curMinIndent=Integer.MAX_VALUE;
  for (  Substring line : workList) {
    if (StringUtil.isEmptyOrSpaces(line)) {
      continue;
    }
    curMinIndent=Math.min(curMinIndent,getIndent(line));
  }
  final int minIndent=curMinIndent;
  final List<String> dedentedLines=ContainerUtil.map(workList,new Function<Substring,String>(){
    @Override public String fun(    Substring line){
      return line.substring(Math.min(line.length(),minIndent)).toString();
    }
  }
);
  return StringUtil.join(skipFirstLine ? ContainerUtil.prepend(dedentedLines,firstLine) : dedentedLines,"\n");
}
