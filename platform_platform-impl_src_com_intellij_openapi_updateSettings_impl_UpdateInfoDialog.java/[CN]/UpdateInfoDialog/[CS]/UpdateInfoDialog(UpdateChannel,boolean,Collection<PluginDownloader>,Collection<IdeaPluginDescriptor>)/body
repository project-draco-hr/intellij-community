{
  super(enableLink);
  myUpdatedChannel=channel;
  myUpdatedPlugins=updatedPlugins;
  myLatestBuild=channel.getLatestBuild();
  myPatch=myLatestBuild != null ? myLatestBuild.findPatchForCurrentBuild() : null;
  myWriteProtected=myPatch != null && !new File(PathManager.getHomePath()).canWrite();
  getCancelAction().putValue(DEFAULT_ACTION,Boolean.TRUE);
  if (myLatestBuild != null) {
    initLicensingInfo(myUpdatedChannel,myLatestBuild);
  }
  init();
  if (incompatiblePlugins != null && !incompatiblePlugins.isEmpty()) {
    final boolean onePluginFound=incompatiblePlugins.size() == 1;
    String incompatibilityError="Incompatible with new version plugin";
    incompatibilityError+=(onePluginFound ? " is" : "s are") + " detected: ";
    incompatibilityError+=onePluginFound ? "" : "<br>";
    incompatibilityError+=StringUtil.join(incompatiblePlugins,new Function<IdeaPluginDescriptor,String>(){
      @Override public String fun(      IdeaPluginDescriptor downloader){
        return downloader.getName();
      }
    }
,"<br/>");
    setErrorText(incompatibilityError);
  }
}
