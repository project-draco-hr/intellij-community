{
  if (settingsType == SettingsType.SPACING_SETTINGS) {
    consumer.showStandardOptions("SPACE_BEFORE_METHOD_CALL_PARENTHESES","SPACE_AROUND_ASSIGNMENT_OPERATORS","SPACE_AROUND_LOGICAL_OPERATORS","SPACE_AROUND_EQUALITY_OPERATORS","SPACE_AROUND_RELATIONAL_OPERATORS","SPACE_AROUND_BITWISE_OPERATORS","SPACE_AROUND_ADDITIVE_OPERATORS","SPACE_AROUND_MULTIPLICATIVE_OPERATORS","SPACE_AROUND_SHIFT_OPERATORS","SPACE_WITHIN_METHOD_CALL_PARENTHESES","SPACE_WITHIN_BRACKETS","SPACE_AFTER_COMMA","SPACE_BEFORE_COMMA","SPACE_BEFORE_SEMICOLON");
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_BEFORE_LBRACKET","Left bracket",SPACES_BEFORE_PARENTHESES);
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_AROUND_EQ_IN_NAMED_PARAMETER","Around = in named parameter",SPACES_AROUND_OPERATORS);
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT","Around = in keyword argument",SPACES_AROUND_OPERATORS);
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_WITHIN_BRACES","Within braces",SPACES_WITHIN);
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_BEFORE_COLON",ApplicationBundle.message("checkbox.spaces.before.colon"),SPACES_OTHER);
  }
 else   if (settingsType == SettingsType.BLANK_LINES_SETTINGS) {
    consumer.showStandardOptions("BLANK_LINES_AROUND_CLASS","BLANK_LINES_AROUND_METHOD","BLANK_LINES_AFTER_IMPORTS","KEEP_BLANK_LINES_IN_DECLARATIONS","KEEP_BLANK_LINES_IN_CODE");
  }
 else   if (settingsType == SettingsType.WRAPPING_AND_BRACES_SETTINGS) {
    consumer.showAllStandardOptions();
  }
}
