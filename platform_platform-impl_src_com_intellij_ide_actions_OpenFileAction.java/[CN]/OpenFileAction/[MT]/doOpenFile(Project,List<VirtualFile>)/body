{
  for (  VirtualFile file : result) {
    if (file.isDirectory()) {
      Project openedProject;
      if (ProjectAttachProcessor.canAttachToProject()) {
        openedProject=PlatformProjectOpenProcessor.doOpenProject(file,project,false,-1,null,false);
      }
 else {
        openedProject=ProjectUtil.openOrImport(file.getPath(),project,false);
      }
      FileChooserUtil.setLastOpenedFile(openedProject,file);
      return;
    }
    if ((project == null || !file.equals(project.getProjectFile())) && OpenProjectFileChooserDescriptor.isProjectFile(file)) {
      int answer=file.getFileType() instanceof ProjectFileType ? Messages.YES : Messages.showYesNoCancelDialog(project,IdeBundle.message("message.open.file.is.project",file.getName()),IdeBundle.message("title.open.project"),IdeBundle.message("message.open.file.is.project.open.as.project"),IdeBundle.message("message.open.file.is.project.open.as.file"),IdeBundle.message("button.cancel"),Messages.getQuestionIcon());
      if (answer == Messages.CANCEL)       return;
      if (answer == Messages.YES) {
        Project openedProject=ProjectUtil.openOrImport(file.getPath(),project,false);
        if (openedProject != null) {
          FileChooserUtil.setLastOpenedFile(openedProject,file);
          return;
        }
      }
    }
    FileType type=FileTypeChooser.getKnownFileTypeOrAssociate(file,project);
    if (type == null)     return;
    if (project != null) {
      openFile(file,project);
    }
 else {
      PlatformProjectOpenProcessor processor=PlatformProjectOpenProcessor.getInstanceIfItExists();
      if (processor != null) {
        processor.doOpenProject(file,null,false);
      }
    }
  }
}
