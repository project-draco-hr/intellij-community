{
  final Project project=e.getProject();
  final boolean showFiles=project != null || PlatformProjectOpenProcessor.getInstanceIfItExists() != null;
  final FileChooserDescriptor descriptor=showFiles ? new ProjectOrFileChooserDescriptor() : new ProjectOnlyFileChooserDescriptor();
  descriptor.putUserData(PathChooserDialog.PREFER_LAST_OVER_EXPLICIT,showFiles);
  FileChooser.chooseFiles(descriptor,project,VfsUtil.getUserHomeDir(),new Consumer<List<VirtualFile>>(){
    @Override public void consume(    final List<VirtualFile> files){
      for (      VirtualFile file : files) {
        if (!descriptor.isFileSelectable(file)) {
          String message=IdeBundle.message("error.dir.contains.no.project",file.getPresentableUrl());
          Messages.showInfoMessage(project,message,IdeBundle.message("title.cannot.open.project"));
          return;
        }
      }
      doOpenFile(project,files);
    }
  }
);
}
