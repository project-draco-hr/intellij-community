{
  configureByText(JavaFileType.INSTANCE,"class X { int f() { int gg<caret> = 11; return 0;} }");
  final AtomicBoolean run=new AtomicBoolean();
  final int SLEEP=20000;
  ExternalAnnotator<Integer,Integer> annotator=new ExternalAnnotator<Integer,Integer>(){
    @Nullable @Override public Integer collectInformation(    @NotNull PsiFile file){
      return 0;
    }
    @Nullable @Override public Integer doAnnotate(    final Integer collectedInfo){
      TimeoutUtil.sleep(SLEEP);
      return 0;
    }
    @Override public void apply(    @NotNull final PsiFile file,    final Integer annotationResult,    @NotNull final AnnotationHolder holder){
      run.set(true);
    }
  }
;
  ExternalLanguageAnnotators.INSTANCE.addExplicitExtension(JavaLanguage.INSTANCE,annotator);
  try {
    long start=System.currentTimeMillis();
    List<HighlightInfo> errors=filter(CodeInsightTestFixtureImpl.instantiateAndRun(getFile(),getEditor(),new int[0],false),HighlightSeverity.ERROR);
    long elapsed=System.currentTimeMillis() - start;
    assertEquals(0,errors.size());
    assertTrue("Elapsed: " + elapsed,elapsed >= SLEEP);
    assertTrue(run.get());
  }
  finally {
    ExternalLanguageAnnotators.INSTANCE.removeExplicitExtension(JavaLanguage.INSTANCE,annotator);
  }
}
