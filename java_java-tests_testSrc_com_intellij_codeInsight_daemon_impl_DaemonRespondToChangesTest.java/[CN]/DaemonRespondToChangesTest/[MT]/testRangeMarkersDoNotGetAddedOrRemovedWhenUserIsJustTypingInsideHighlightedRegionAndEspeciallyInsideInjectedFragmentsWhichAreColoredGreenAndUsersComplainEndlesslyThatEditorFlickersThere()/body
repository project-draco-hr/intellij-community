{
  configureByText(JavaFileType.INSTANCE,"class S { int f() {\n" + "    return <caret>hashCode();\n" + "}}");
  Collection<HighlightInfo> infos=doHighlighting(HighlightInfoType.SYMBOL_TYPE_SEVERITY);
  assertEquals(3,infos.size());
  final int[] count={0};
  MarkupModelEx modelEx=(MarkupModelEx)DocumentMarkupModel.forDocument(getDocument(getFile()),getProject(),true);
  modelEx.addMarkupModelListener(getTestRootDisposable(),new MarkupModelListener.Adapter(){
    @Override public void afterAdded(    @NotNull RangeHighlighterEx highlighter){
      count[0]++;
    }
    @Override public void beforeRemoved(    @NotNull RangeHighlighterEx highlighter){
      count[0]++;
    }
  }
);
  type(' ');
  highlightErrors();
  assertEquals(0,count[0]);
}
