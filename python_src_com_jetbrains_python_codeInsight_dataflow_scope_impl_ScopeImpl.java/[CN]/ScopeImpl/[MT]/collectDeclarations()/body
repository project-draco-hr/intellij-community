{
  final Map<String,Collection<PsiNamedElement>> namedElements=new HashMap<String,Collection<PsiNamedElement>>();
  final List<PyImportedNameDefiner> importedNameDefiners=new ArrayList<PyImportedNameDefiner>();
  final List<Scope> nestedScopes=new ArrayList<Scope>();
  final Set<String> globals=new HashSet<String>();
  final Set<String> nonlocals=new HashSet<String>();
  final Set<String> augAssignments=new HashSet<String>();
  final List<PyTargetExpression> targetExpressions=new ArrayList<PyTargetExpression>();
  myFlowOwner.acceptChildren(new PyRecursiveElementVisitor(){
    @Override public void visitPyTargetExpression(    PyTargetExpression node){
      targetExpressions.add(node);
      final PsiElement parent=node.getParent();
      if (!node.isQualified() && !(parent instanceof PyImportElement)) {
        super.visitPyTargetExpression(node);
      }
    }
    @Override public void visitPyReferenceExpression(    PyReferenceExpression node){
      if (PyAugAssignmentStatementNavigator.getStatementByTarget(node) != null) {
        augAssignments.add(node.getName());
      }
      super.visitPyReferenceExpression(node);
    }
    @Override public void visitPyGlobalStatement(    PyGlobalStatement node){
      for (      PyTargetExpression expression : node.getGlobals()) {
        final String name=expression.getReferencedName();
        globals.add(name);
      }
      super.visitPyGlobalStatement(node);
    }
    @Override public void visitPyNonlocalStatement(    PyNonlocalStatement node){
      for (      PyTargetExpression expression : node.getVariables()) {
        nonlocals.add(expression.getReferencedName());
      }
      super.visitPyNonlocalStatement(node);
    }
    @Override public void visitPyFunction(    PyFunction node){
      for (      PyParameter parameter : node.getParameterList().getParameters()) {
        final PyExpression defaultValue=parameter.getDefaultValue();
        if (defaultValue != null) {
          defaultValue.accept(this);
        }
      }
      super.visitPyFunction(node);
    }
    @Override public void visitPyElement(    PyElement node){
      if (node instanceof PsiNamedElement && !(node instanceof PyKeywordArgument)) {
        final String name=node.getName();
        if (!namedElements.containsKey(name)) {
          namedElements.put(name,Sets.<PsiNamedElement>newLinkedHashSet());
        }
        namedElements.get(name).add((PsiNamedElement)node);
      }
      if (node instanceof PyImportedNameDefiner) {
        importedNameDefiners.add((PyImportedNameDefiner)node);
      }
      if (node instanceof ScopeOwner) {
        final Scope scope=ControlFlowCache.getScope((ScopeOwner)node);
        nestedScopes.add(scope);
      }
 else {
        super.visitPyElement(node);
      }
    }
  }
);
  myNamedElements=namedElements;
  myImportedNameDefiners=importedNameDefiners;
  myNestedScopes=nestedScopes;
  myGlobals=globals;
  myNonlocals=nonlocals;
  myAugAssignments=augAssignments;
  myTargetExpressions=targetExpressions;
}
