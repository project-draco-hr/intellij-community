{
  Ref<PsiElement> targetElementRef=new Ref<>();
  QuickDocUtil.runInReadActionWithWriteActionPriorityWithRetries(new Runnable(){
    @Override public void run(){
      if (originalElement.isValid()) {
        targetElementRef.set(docManager.findTargetElement(editor,offset,originalElement.getContainingFile(),originalElement));
      }
    }
  }
,5000,100,myProgressIndicator);
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      myCurrentRequest=null;
      if (editor.isDisposed())       return;
      PsiElement targetElement=targetElementRef.get();
      if (targetElement == null) {
        closeQuickDocIfPossible();
        return;
      }
      myAlarm.cancelAllRequests();
      SmartPsiElementPointer<?> pointer=myActiveElements.get(editor);
      if (pointer == null || !originalElement.equals(pointer.getElement())) {
        return;
      }
      if (docManager.getDocInfoHint() != null && !docManager.isCloseOnSneeze()) {
        return;
      }
      if (!docManager.hasActiveDockedDocWindow() && myHintManager.hasShownHintsThatWillHideByOtherHint(false)) {
        myAlarm.addRequest(MyShowQuickDocRequest.this,EditorSettingsExternalizable.getInstance().getQuickDocOnMouseOverElementDelayMillis());
        return;
      }
      editor.putUserData(PopupFactoryImpl.ANCHOR_POPUP_POSITION,editor.offsetToVisualPosition(originalElement.getTextRange().getStartOffset()));
      try {
        docManager.showJavaDocInfo(editor,targetElement,originalElement,myHintCloseCallback,true);
        myDocumentationManager=new WeakReference<DocumentationManager>(docManager);
      }
  finally {
        editor.putUserData(PopupFactoryImpl.ANCHOR_POPUP_POSITION,null);
      }
    }
  }
,ApplicationManager.getApplication().getNoneModalityState());
}
