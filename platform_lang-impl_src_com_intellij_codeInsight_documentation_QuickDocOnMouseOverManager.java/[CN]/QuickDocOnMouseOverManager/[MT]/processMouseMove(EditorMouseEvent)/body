{
  if (!myApplicationActive || !myEnabled || e.getArea() != EditorMouseEventArea.EDITING_AREA) {
    closeQuickDocIfPossible();
    return;
  }
  if (e.getMouseEvent().getModifiers() != 0) {
    return;
  }
  Editor editor=e.getEditor();
  if (editor.getComponent().getClientProperty(EditorImpl.IGNORE_MOUSE_TRACKING) != null) {
    return;
  }
  if (editor.isOneLineMode()) {
    return;
  }
  Project project=editor.getProject();
  if (project == null) {
    return;
  }
  DocumentationManager documentationManager=DocumentationManager.getInstance(project);
  JBPopup hint=documentationManager.getDocInfoHint();
  if (hint != null) {
    DocumentationManager manager=getDocManager();
    if (manager == null || !manager.isCloseOnSneeze()) {
      return;
    }
    Point hintLocation=hint.getLocationOnScreen();
    Dimension hintSize=hint.getSize();
    int mouseX=e.getMouseEvent().getXOnScreen();
    int mouseY=e.getMouseEvent().getYOnScreen();
    if (mouseX >= hintLocation.x && mouseX <= hintLocation.x + hintSize.width && mouseY >= hintLocation.y && mouseY <= hintLocation.y + hintSize.height) {
      return;
    }
  }
  PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
  if (psiFile instanceof PsiCompiledFile)   psiFile=((PsiCompiledFile)psiFile).getDecompiledPsiFile();
  if (psiFile == null) {
    closeQuickDocIfPossible();
    return;
  }
  Point point=e.getMouseEvent().getPoint();
  if (editor instanceof EditorEx && ((EditorEx)editor).getFoldingModel().getFoldingPlaceholderAt(point) != null) {
    closeQuickDocIfPossible();
    return;
  }
  VisualPosition visualPosition=editor.xyToVisualPosition(point);
  if (editor.getSoftWrapModel().isInsideOrBeforeSoftWrap(visualPosition)) {
    closeQuickDocIfPossible();
    return;
  }
  int mouseOffset=editor.logicalPositionToOffset(editor.visualToLogicalPosition(visualPosition));
  PsiElement elementUnderMouse=psiFile.findElementAt(mouseOffset);
  if (elementUnderMouse == null || elementUnderMouse instanceof PsiWhiteSpace || elementUnderMouse instanceof PsiPlainText) {
    closeQuickDocIfPossible();
    return;
  }
  if (elementUnderMouse.equals(SoftReference.dereference(myActiveElements.get(editor))) && (!myAlarm.isEmpty() || hint != null)) {
    return;
  }
  allowUpdateFromContext(project,false);
  closeQuickDocIfPossible();
  myActiveElements.put(editor,new WeakReference<>(elementUnderMouse));
  myAlarm.cancelAllRequests();
  if (myCurrentRequest != null)   myCurrentRequest.cancel();
  myCurrentRequest=new MyShowQuickDocRequest(documentationManager,editor,mouseOffset,elementUnderMouse);
  myAlarm.addRequest(myCurrentRequest,EditorSettingsExternalizable.getInstance().getQuickDocOnMouseOverElementDelayMillis());
}
