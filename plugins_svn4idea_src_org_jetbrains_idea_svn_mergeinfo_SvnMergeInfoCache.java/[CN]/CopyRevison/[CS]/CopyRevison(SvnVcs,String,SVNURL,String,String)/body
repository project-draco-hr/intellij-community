{
  myPath=path;
  myRevision=-1;
  Task.Backgroundable task=new Task.Backgroundable(vcs.getProject(),"",false){
    private CopyData myData;
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        myData=new FirstInBranch(vcs,repositoryRoot,branchUrl,trunkUrl).run();
      }
 catch (      VcsException e) {
        logAndShow(e);
      }
    }
    @Override public void onSuccess(){
      if (!vcs.getProject().isDisposed() && myData != null && myData.getCopySourceRevision() != -1) {
        vcs.getProject().getMessageBus().syncPublisher(SVN_MERGE_INFO_CACHE).copyRevisionUpdated();
      }
    }
    @Override public void onThrowable(    @NotNull Throwable error){
      logAndShow(error);
    }
    private void logAndShow(    @NotNull Throwable error){
      LOG.info(error);
      VcsBalloonProblemNotifier.showOverChangesView(vcs.getProject(),error.getMessage(),MessageType.ERROR);
    }
  }
;
  ProgressManager.getInstance().runProcessWithProgressAsynchronously(task,new EmptyProgressIndicator());
}
