{
  final Application application=ApplicationManager.getApplication();
  final Runnable updateLanguageLevel=new Runnable(){
    @Override public void run(){
      final Set<Sdk> updatedSdks=new HashSet<Sdk>();
      final Module[] modules=ModuleManager.getInstance(project).getModules();
      boolean needReparseOpenFiles=false;
      for (      Module module : modules) {
        Sdk newSdk=PythonSdkType.findPythonSdk(module);
        if (myModuleSdks.containsKey(module)) {
          Sdk oldSdk=myModuleSdks.get(module);
          if ((newSdk != null || oldSdk != null) && newSdk != oldSdk) {
            needReparseOpenFiles=true;
          }
        }
        myModuleSdks.put(module,newSdk);
        if (newSdk != null && !updatedSdks.contains(newSdk)) {
          updatedSdks.add(newSdk);
          updateSdkLanguageLevel(project,newSdk);
        }
      }
      final boolean finalNeedReparseOpenFiles=needReparseOpenFiles;
      application.invokeLater(new Runnable(){
        @Override public void run(){
          if (finalNeedReparseOpenFiles) {
            FileContentUtil.reparseFiles(project,Collections.<VirtualFile>emptyList(),true);
          }
        }
      }
);
    }
  }
;
  application.executeOnPooledThread(new Runnable(){
    @Override public void run(){
      application.runReadAction(updateLanguageLevel);
    }
  }
);
}
