{
  final DefaultTreeModel treeModel=(DefaultTreeModel)myTree.getModel();
  final TreeNode root=(TreeNode)treeModel.getRoot();
  final List<TreePath> treeSelection=new ArrayList<TreePath>(changes.size());
  TreeUtil.traverse(root,new TreeUtil.Traverse(){
    @Override public boolean accept(    Object node){
      @SuppressWarnings("unchecked") final T change=(T)((DefaultMutableTreeNode)node).getUserObject();
      if (changes.contains(change)) {
        treeSelection.add(new TreePath(((DefaultMutableTreeNode)node).getPath()));
      }
      return true;
    }
  }
);
  myTree.setSelectionPaths(treeSelection.toArray(new TreePath[treeSelection.size()]));
  if (treeSelection.size() == 1)   myTree.scrollPathToVisible(treeSelection.get(0));
  final ListModel model=myList.getModel();
  final int size=model.getSize();
  final List<Integer> listSelection=new ArrayList<Integer>(changes.size());
  for (int i=0; i < size; i++) {
    @SuppressWarnings("unchecked") final T el=(T)model.getElementAt(i);
    if (changes.contains(el)) {
      listSelection.add(i);
    }
  }
  myList.setSelectedIndices(int2int(listSelection));
  if (listSelection.size() == 1)   myList.ensureIndexIsVisible(listSelection.get(0));
}
