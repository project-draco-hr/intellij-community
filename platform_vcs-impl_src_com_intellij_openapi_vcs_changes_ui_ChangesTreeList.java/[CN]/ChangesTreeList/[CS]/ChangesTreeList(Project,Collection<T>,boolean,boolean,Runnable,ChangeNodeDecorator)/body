{
  myProject=project;
  myShowCheckboxes=showCheckboxes;
  myHighlightProblems=highlightProblems;
  myInclusionListener=inclusionListener;
  myChangeDecorator=decorator;
  myIncludedChanges=new HashSet<T>(initiallyIncluded);
  myAlwaysExpandList=true;
  myNodeRenderer=new MyTreeCellRenderer(new ChangesBrowserNodeRenderer(myProject,false,myHighlightProblems));
  myShowFlattenNodeRenderer=new MyTreeCellRenderer(new ChangesBrowserNodeRenderer(myProject,true,myHighlightProblems));
  setLayout(new BorderLayout());
  final int checkboxWidth=new JCheckBox().getPreferredSize().width;
  myTree=new MyTree(project,checkboxWidth);
  myTree.setHorizontalAutoScrollingEnabled(false);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setOpaque(false);
  new TreeSpeedSearch(myTree,new Convertor<TreePath,String>(){
    @Override public String convert(    TreePath o){
      ChangesBrowserNode node=(ChangesBrowserNode)o.getLastPathComponent();
      return node.getTextPresentation();
    }
  }
);
  add(myTreeScrollPane=ScrollPaneFactory.createScrollPane(myTree),BorderLayout.CENTER);
  new MyToggleSelectionAction().registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0)),this);
  if (myShowCheckboxes) {
    registerKeyboardAction(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        includeChanges(getSelectedChangesOrAllIfNone());
      }
    }
,KeyStroke.getKeyStroke(KeyEvent.VK_INSERT,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    registerKeyboardAction(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        excludeChanges(getSelectedChangesOrAllIfNone());
      }
    }
,KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  }
  registerKeyboardAction(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myDoubleClickHandler.run();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  myTree.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (KeyEvent.VK_ENTER == e.getKeyCode() && e.getModifiers() == 0) {
        if (myTree.getSelectionCount() <= 1) {
          Object lastPathComponent=myTree.getLastSelectedPathComponent();
          if (!(lastPathComponent instanceof DefaultMutableTreeNode)) {
            return;
          }
          DefaultMutableTreeNode node=(DefaultMutableTreeNode)lastPathComponent;
          if (!node.isLeaf()) {
            return;
          }
        }
        myDoubleClickHandler.run();
        e.consume();
      }
    }
  }
);
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      final TreePath clickPath=myTree.getUI() instanceof WideSelectionTreeUI ? myTree.getClosestPathForLocation(e.getX(),e.getY()) : myTree.getPathForLocation(e.getX(),e.getY());
      if (clickPath == null)       return false;
      final int row=myTree.getRowForLocation(e.getPoint().x,e.getPoint().y);
      if (row >= 0) {
        if (myShowCheckboxes) {
          final Rectangle baseRect=myTree.getRowBounds(row);
          baseRect.setSize(checkboxWidth,baseRect.height);
          if (baseRect.contains(e.getPoint()))           return false;
        }
      }
      myDoubleClickHandler.run();
      return true;
    }
  }
.installOn(myTree);
  new TreeLinkMouseListener(myNodeRenderer.myTextRenderer){
    @Override protected int getRendererRelativeX(    @NotNull MouseEvent e,    @NotNull JTree tree,    @NotNull TreePath path){
      int x=super.getRendererRelativeX(e,tree,path);
      return !myShowCheckboxes ? x : x - myTree.myCheckboxWidth;
    }
  }
.installOn(myTree);
  setShowFlatten(PropertiesComponent.getInstance(myProject).isTrueValue(FLATTEN_OPTION_KEY));
  String emptyText=StringUtil.capitalize(DiffBundle.message("diff.count.differences.status.text",0));
  setEmptyText(emptyText);
  myTreeCopyProvider=new ChangesBrowserNodeCopyProvider(myTree);
}
