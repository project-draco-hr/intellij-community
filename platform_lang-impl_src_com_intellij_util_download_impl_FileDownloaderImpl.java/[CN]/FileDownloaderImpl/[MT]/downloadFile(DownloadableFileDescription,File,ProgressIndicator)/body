{
  final String presentableUrl=description.getPresentableDownloadUrl();
  indicator.setText2(IdeBundle.message("progress.connecting.to.download.file.text",presentableUrl));
  indicator.setIndeterminate(true);
  return HttpRequests.request(description.getDownloadUrl()).connect(new HttpRequests.RequestProcessor<File>(){
    @Override public File process(    @NotNull HttpRequests.Request request) throws IOException {
      int size=request.getConnection().getContentLength();
      if (existingFile.exists() && size == existingFile.length()) {
        return existingFile;
      }
      File tempFile=FileUtil.createTempFile("download.",".tmp");
      boolean deleteFile=true;
      OutputStream out=new BufferedOutputStream(new FileOutputStream(tempFile));
      try {
        indicator.setText2(IdeBundle.message("progress.download.file.text",description.getPresentableFileName(),presentableUrl));
        indicator.setIndeterminate(size == -1);
        NetUtils.copyStreamContent(indicator,request.getInputStream(),out,size);
        deleteFile=false;
        return tempFile;
      }
  finally {
        out.close();
        if (deleteFile) {
          FileUtil.delete(tempFile);
        }
      }
    }
  }
);
}
