{
  ClassMapCachingNulls<MultiHostInjector> cached=cachedInjectors;
  if (cached != null) {
    return cached;
  }
  Map<Class,MultiHostInjector[]> injectors=ContainerUtil.newHashMap();
  List<MultiHostInjector> allInjectors=ContainerUtil.newArrayList();
  allInjectors.addAll(myManualInjectors);
  Collections.addAll(allInjectors,MultiHostInjector.MULTIHOST_INJECTOR_EP_NAME.getExtensions(myProject));
  if (LanguageInjector.EXTENSION_POINT_NAME.getExtensions().length > 0) {
    allInjectors.add(PsiManagerRegisteredInjectorsAdapter.INSTANCE);
  }
  for (  MultiHostInjector injector : allInjectors) {
    for (    Class<? extends PsiElement> place : injector.elementsToInjectIn()) {
      LOG.assertTrue(place != null,injector);
      MultiHostInjector[] existing=injectors.get(place);
      injectors.put(place,existing == null ? new MultiHostInjector[]{injector} : ArrayUtil.append(existing,injector));
    }
  }
  ClassMapCachingNulls<MultiHostInjector> result=new ClassMapCachingNulls<>(injectors,new MultiHostInjector[0]);
  cachedInjectors=result;
  return result;
}
