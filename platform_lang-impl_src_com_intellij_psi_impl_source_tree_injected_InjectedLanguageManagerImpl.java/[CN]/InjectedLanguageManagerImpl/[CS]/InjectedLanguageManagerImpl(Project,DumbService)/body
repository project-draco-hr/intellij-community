{
  myProject=project;
  myDumbService=dumbService;
  final ExtensionPoint<MultiHostInjector> multiPoint=Extensions.getArea(project).getExtensionPoint(MultiHostInjector.MULTIHOST_INJECTOR_EP_NAME);
  ((ExtensionPointImpl<MultiHostInjector>)multiPoint).addExtensionPointListener(new ExtensionPointListener<MultiHostInjector>(){
    @Override public void extensionAdded(    @NotNull MultiHostInjector injector,    @Nullable PluginDescriptor pluginDescriptor){
      clearInjectorCache();
    }
    @Override public void extensionRemoved(    @NotNull MultiHostInjector injector,    @Nullable PluginDescriptor pluginDescriptor){
      clearInjectorCache();
    }
  }
,false,this);
  final ExtensionPointListener<LanguageInjector> myListener=new ExtensionPointListener<LanguageInjector>(){
    @Override public void extensionAdded(    @NotNull LanguageInjector extension,    @Nullable PluginDescriptor pluginDescriptor){
      clearInjectorCache();
    }
    @Override public void extensionRemoved(    @NotNull LanguageInjector extension,    @Nullable PluginDescriptor pluginDescriptor){
      clearInjectorCache();
    }
  }
;
  final ExtensionPoint<LanguageInjector> psiManagerPoint=Extensions.getRootArea().getExtensionPoint(LanguageInjector.EXTENSION_POINT_NAME);
  ((ExtensionPointImpl<LanguageInjector>)psiManagerPoint).addExtensionPointListener(myListener,false,this);
  myProgress=new DaemonProgressIndicator();
  project.getMessageBus().connect(this).subscribe(DaemonCodeAnalyzer.DAEMON_EVENT_TOPIC,new DaemonCodeAnalyzer.DaemonListenerAdapter(){
    @Override public void daemonCancelEventOccurred(    @NotNull String reason){
      myProgress.cancel();
    }
  }
);
}
