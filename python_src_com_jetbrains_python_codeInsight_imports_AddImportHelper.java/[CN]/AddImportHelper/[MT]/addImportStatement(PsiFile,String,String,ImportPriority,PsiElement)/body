{
  if (!(file instanceof PyFile)) {
    return false;
  }
  final List<PyImportElement> existingImports=((PyFile)file).getImportTargets();
  for (  PyImportElement element : existingImports) {
    final QualifiedName qName=element.getImportedQName();
    if (qName != null && name.equals(qName.toString())) {
      if ((asName != null && asName.equals(element.getAsName())) || (asName == null && element.getAsName() == null)) {
        return false;
      }
    }
  }
  final PyElementGenerator generator=PyElementGenerator.getInstance(file.getProject());
  final LanguageLevel languageLevel=LanguageLevel.forElement(file);
  final PyImportStatement importNodeToInsert=generator.createImportStatement(languageLevel,name,asName);
  final PyImportStatementBase importStatement=PsiTreeUtil.getParentOfType(anchor,PyImportStatementBase.class,false);
  final PsiElement insertParent=importStatement != null && importStatement.getContainingFile() == file ? importStatement.getParent() : file;
  try {
    if (anchor instanceof PyImportStatementBase) {
      insertParent.addAfter(importNodeToInsert,anchor);
    }
 else {
      insertParent.addBefore(importNodeToInsert,getInsertPosition(insertParent,importNodeToInsert,priority));
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return true;
}
