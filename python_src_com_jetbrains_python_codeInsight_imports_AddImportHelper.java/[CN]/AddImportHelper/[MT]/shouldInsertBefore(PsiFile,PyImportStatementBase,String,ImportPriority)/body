{
  QualifiedName relativeToName;
  PsiElement source;
  if (relativeTo instanceof PyFromImportStatement) {
    final PyFromImportStatement fromImportStatement=(PyFromImportStatement)relativeTo;
    if (fromImportStatement.isFromFuture()) {
      return false;
    }
    relativeToName=fromImportStatement.getImportSourceQName();
    source=fromImportStatement.resolveImportSource();
  }
 else {
    final PyImportElement[] importElements=relativeTo.getImportElements();
    if (importElements.length == 0) {
      return false;
    }
    relativeToName=importElements[0].getImportedQName();
    source=importElements[0].resolve();
  }
  if (relativeToName == null) {
    return false;
  }
  final PsiFileSystemItem containingFile;
  if (source instanceof PsiDirectory) {
    containingFile=(PsiDirectory)source;
  }
 else {
    containingFile=source != null ? source.getContainingFile() : null;
  }
  ImportPriority relativeToPriority=source == null || containingFile == null ? ImportPriority.BUILTIN : getImportPriority(file,containingFile);
  final int rc=priority.compareTo(relativeToPriority);
  if (rc < 0) {
    return true;
  }
  if (rc == 0) {
    return nameToImport.compareTo(relativeToName.toString()) < 0;
  }
  return false;
}
