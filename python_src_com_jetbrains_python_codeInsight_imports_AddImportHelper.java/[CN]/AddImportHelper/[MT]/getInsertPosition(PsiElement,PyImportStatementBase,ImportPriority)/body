{
  PsiElement feeler=insertParent.getFirstChild();
  if (feeler == null)   return null;
  boolean skippedOverImports=false;
  boolean skippedOverDoc=false;
  PsiElement seeker=feeler;
  final boolean isInjected=InjectedLanguageManager.getInstance(feeler.getProject()).isInjectedFragment(feeler.getContainingFile());
  PyImportStatementBase importAbove=null, importBelow=null;
  do {
    if (feeler instanceof PyImportStatementBase && !isInjected) {
      final PyImportStatementBase existingImport=(PyImportStatementBase)feeler;
      if (priority != null && newImport != null) {
        if (shouldInsertBefore(newImport,existingImport,priority)) {
          importBelow=existingImport;
          break;
        }
 else {
          importAbove=existingImport;
        }
      }
      seeker=feeler;
      feeler=feeler.getNextSibling();
      skippedOverImports=true;
    }
 else     if (PyUtil.instanceOf(feeler,PsiWhiteSpace.class,PsiComment.class)) {
      seeker=feeler;
      feeler=feeler.getNextSibling();
    }
 else     if (!skippedOverImports && !skippedOverDoc && insertParent instanceof PyFile) {
      final PsiElement docElem=DocStringUtil.findDocStringExpression((PyElement)insertParent);
      if (docElem != null && docElem.getParent() == feeler) {
        feeler=feeler.getNextSibling();
        seeker=feeler;
        skippedOverDoc=true;
      }
 else {
        break;
      }
    }
 else {
      break;
    }
  }
 while (feeler != null);
  final ImportPriority priorityAbove=importAbove != null ? getImportPriority(importAbove) : null;
  final ImportPriority priorityBelow=importBelow != null ? getImportPriority(importBelow) : null;
  if (priorityAbove != null && priority.compareTo(priorityAbove) > 0) {
    newImport.putCopyableUserData(PyBlock.IMPORT_GROUP_BEGIN,true);
    if (priorityBelow == priority) {
      importBelow.putCopyableUserData(PyBlock.IMPORT_GROUP_BEGIN,null);
    }
  }
  if (priorityBelow != null && priority.compareTo(priorityBelow) < 0) {
    importBelow.putCopyableUserData(PyBlock.IMPORT_GROUP_BEGIN,true);
  }
  return seeker;
}
