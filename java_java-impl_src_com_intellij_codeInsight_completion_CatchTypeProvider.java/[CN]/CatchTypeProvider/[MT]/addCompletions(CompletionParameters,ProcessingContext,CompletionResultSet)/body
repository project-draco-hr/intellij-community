{
  PsiTryStatement tryStatement=PsiTreeUtil.getParentOfType(parameters.getPosition(),PsiTryStatement.class);
  final PsiCodeBlock tryBlock=tryStatement == null ? null : tryStatement.getTryBlock();
  if (tryBlock == null)   return;
  final InheritorsHolder holder=new InheritorsHolder(result);
  for (  final PsiClassType type : ExceptionUtil.getThrownExceptions(tryBlock.getStatements())) {
    PsiClass typeClass=type.resolve();
    if (typeClass != null) {
      result.addElement(createCatchTypeVariant(tryBlock,type));
      holder.registerClass(typeClass);
    }
  }
  final Collection<PsiClassType> expectedClassTypes=Collections.singletonList(JavaPsiFacade.getElementFactory(tryBlock.getProject()).createTypeByFQClassName(CommonClassNames.JAVA_LANG_THROWABLE));
  JavaInheritorsGetter.processInheritors(parameters,expectedClassTypes,result.getPrefixMatcher(),new Consumer<PsiType>(){
    @Override public void consume(    PsiType type){
      final PsiClass psiClass=type instanceof PsiClassType ? ((PsiClassType)type).resolve() : null;
      if (psiClass == null || psiClass instanceof PsiTypeParameter)       return;
      if (!holder.alreadyProcessed(psiClass)) {
        result.addElement(createCatchTypeVariant(tryBlock,(PsiClassType)type));
      }
    }
  }
);
}
