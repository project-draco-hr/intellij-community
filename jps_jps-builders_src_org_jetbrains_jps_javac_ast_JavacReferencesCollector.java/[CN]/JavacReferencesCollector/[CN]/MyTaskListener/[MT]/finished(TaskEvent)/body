{
  try {
    if (e.getKind() == TaskEvent.Kind.ANALYZE) {
      if (myCurrentCompilationUnit != e.getCompilationUnit()) {
        myCurrentCompilationUnit=(JCTree.JCCompilationUnit)e.getCompilationUnit();
        myCurrentSize=myCurrentCompilationUnit.getTypeDecls().size() - 1;
      }
 else {
        myCurrentSize--;
      }
      if (myCurrentSize == 0) {
        final JavaFileObject sourceFile=e.getSourceFile();
        final Set<JavacRefSymbol> symbols=new THashSet<JavacRefSymbol>();
        scanImports(myCurrentCompilationUnit,symbols);
        for (        JavacFileReferencesRegistrar listener : myOnlyImportsListeners) {
          listener.registerFile(sourceFile,symbols,Collections.<JavacDefSymbol>emptySet());
        }
        if (myFullASTListeners.length != 0) {
          final Collection<JavacDefSymbol> defs=new ArrayList<JavacDefSymbol>();
          myAstScanner.scan(myCurrentCompilationUnit,new JavacTreeScannerSink(){
            @Override public void sinkReference(            JavacRefSymbol ref){
              symbols.add(ref);
            }
            @Override public void sinkDeclaration(            JavacDefSymbol def){
              defs.add(def);
            }
          }
);
          for (          JavacFileReferencesRegistrar listener : myFullASTListeners) {
            listener.registerFile(sourceFile,symbols,defs);
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    throw new ClientCodeException(ex);
  }
}
