{
  try {
    if (e.getKind() == TaskEvent.Kind.ANALYZE) {
      if (myCurrentCompilationUnit != e.getCompilationUnit()) {
        myCurrentCompilationUnit=(JCTree.JCCompilationUnit)e.getCompilationUnit();
        myCollectedDefinitions=new THashSet<JavacRefSymbol>();
        myCollectedReferences=new THashSet<JavacRefSymbol>();
        myRemainDecls=myCurrentCompilationUnit.getTypeDecls().size() - 1;
        scanImports(myCurrentCompilationUnit,myCollectedReferences);
        for (        JavacFileReferencesRegistrar r : myOnlyImportsListeners) {
          r.registerFile(e.getSourceFile(),myCollectedReferences,myCollectedDefinitions);
        }
      }
 else {
        myRemainDecls--;
      }
      JavacTreeScannerSink sink=new JavacTreeScannerSink(){
        @Override public void sinkReference(        JavacRefSymbol ref){
          myCollectedReferences.add(ref);
        }
        @Override public void sinkDeclaration(        JavacRefSymbol def){
          myCollectedDefinitions.add(def);
        }
      }
;
      if (myFullASTListeners.length != 0) {
        TypeElement analyzedElement=e.getTypeElement();
        for (        JCTree tree : myCurrentCompilationUnit.getTypeDecls()) {
          if (tree.type != null && tree.type.tsym == analyzedElement) {
            myAstScanner.scan(tree,sink);
          }
        }
      }
      if (myRemainDecls == 0) {
        if (myFullASTListeners.length != 0) {
          for (          JCTree.JCAnnotation annotation : myCurrentCompilationUnit.getPackageAnnotations()) {
            myAstScanner.scan(annotation,sink);
          }
        }
        for (        JavacFileReferencesRegistrar r : myFullASTListeners) {
          r.registerFile(e.getSourceFile(),myCollectedReferences,myCollectedDefinitions);
        }
        myCurrentCompilationUnit=null;
        myCollectedDefinitions=null;
        myCollectedReferences=null;
      }
    }
  }
 catch (  Exception ex) {
    throw new ClientCodeException(ex);
  }
}
