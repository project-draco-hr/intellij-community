{
  List<JavacFileReferencesRegistrar> fullASTListeners=new SmartList<JavacFileReferencesRegistrar>();
  List<JavacFileReferencesRegistrar> onlyImportsListeners=new SmartList<JavacFileReferencesRegistrar>();
  for (  JavacFileReferencesRegistrar listener : JpsServiceManager.getInstance().getExtensions(JavacFileReferencesRegistrar.class)) {
    if (!listener.initialize()) {
      continue;
    }
    (listener.onlyImports() ? onlyImportsListeners : fullASTListeners).add(listener);
  }
  final JavacFileReferencesRegistrar[] fullASTListenerArray=fullASTListeners.toArray(new JavacFileReferencesRegistrar[fullASTListeners.size()]);
  final JavacFileReferencesRegistrar[] onlyImportsListenerArray=onlyImportsListeners.toArray(new JavacFileReferencesRegistrar[onlyImportsListeners.size()]);
  if (fullASTListenerArray.length == 0 && onlyImportsListenerArray.length == 0) {
    return;
  }
  JavacTask javacTask=(JavacTask)task;
  Method addTaskMethod=ReflectionUtil.getMethod(JavacTask.class,"addTaskListener",TaskListener.class);
  final JavacReferenceCollectorListener taskListener=new JavacReferenceCollectorListener(fullASTListenerArray,onlyImportsListenerArray);
  if (addTaskMethod != null) {
    try {
      addTaskMethod.invoke(task,taskListener);
    }
 catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
catch (    InvocationTargetException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    javacTask.setTaskListener(taskListener);
  }
}
