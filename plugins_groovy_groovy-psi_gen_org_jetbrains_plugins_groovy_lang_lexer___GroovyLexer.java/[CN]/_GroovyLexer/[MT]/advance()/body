{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    int zzAttributes=zzAttrL[zzState];
    if ((zzAttributes & 1) == 1) {
      zzAction=zzState;
    }
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL) {
          zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL);
          zzCurrentPosL+=Character.charCount(zzInput);
        }
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL);
            zzCurrentPosL+=Character.charCount(zzInput);
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
      zzAtEOF=true;
      zzDoEOF();
      return null;
    }
 else {
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 1:
{
          return GroovyTokenTypes.mWRONG;
        }
case 175:
      break;
case 2:
{
      yybegin(NLS_AFTER_NLS);
      afterComment=WAIT_FOR_REGEX;
      return !braceCount.isEmpty() && GroovyTokenTypes.mLPAREN == braceCount.peek() ? TokenType.WHITE_SPACE : GroovyTokenTypes.mNLS;
    }
case 176:
  break;
case 3:
{
  return TokenType.WHITE_SPACE;
}
case 177:
break;
case 4:
{
if (zzStartRead == 0 || zzBuffer.subSequence(0,zzStartRead).toString().trim().length() == 0) {
yypushback(1);
yybegin(WAIT_FOR_REGEX);
}
 else {
return (GroovyTokenTypes.mDIV);
}
}
case 178:
break;
case 5:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mSTAR);
}
case 179:
break;
case 6:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mLNOT);
}
case 180:
break;
case 7:
{
return GroovyTokenTypes.mIDENT;
}
case 181:
break;
case 8:
{
return GroovyTokenTypes.mNUM_INT;
}
case 182:
break;
case 9:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mPLUS);
}
case 183:
break;
case 10:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mMINUS);
}
case 184:
break;
case 11:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mDOT);
}
case 185:
break;
case 12:
{
return GroovyTokenTypes.mSTRING_LITERAL;
}
case 186:
break;
case 13:
{
yybegin(IN_SINGLE_GSTRING);
gStringStack.push(GroovyTokenTypes.mLPAREN);
return GroovyTokenTypes.mGSTRING_BEGIN;
}
case 187:
break;
case 14:
{
yybegin(NLS_AFTER_LBRACE);
braceCount.push(GroovyTokenTypes.mLCURLY);
return (GroovyTokenTypes.mLCURLY);
}
case 188:
break;
case 15:
{
while (!braceCount.isEmpty() && GroovyTokenTypes.mLCURLY != braceCount.peek()) {
braceCount.pop();
}
if (!braceCount.isEmpty() && GroovyTokenTypes.mLCURLY == braceCount.peek()) {
braceCount.pop();
}
return GroovyTokenTypes.mRCURLY;
}
case 189:
break;
case 16:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mQUESTION);
}
case 190:
break;
case 17:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mASSIGN);
}
case 191:
break;
case 18:
{
yybegin(WAIT_FOR_REGEX);
braceCount.push(GroovyTokenTypes.mLPAREN);
return (GroovyTokenTypes.mLPAREN);
}
case 192:
break;
case 19:
{
if (!braceCount.isEmpty() && GroovyTokenTypes.mLPAREN == braceCount.peek()) {
braceCount.pop();
}
return (GroovyTokenTypes.mRPAREN);
}
case 193:
break;
case 20:
{
yybegin(WAIT_FOR_REGEX);
braceCount.push(GroovyTokenTypes.mLPAREN);
return (GroovyTokenTypes.mLBRACK);
}
case 194:
break;
case 21:
{
if (!braceCount.isEmpty() && GroovyTokenTypes.mLPAREN == braceCount.peek()) {
braceCount.pop();
}
return (GroovyTokenTypes.mRBRACK);
}
case 195:
break;
case 22:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mCOLON);
}
case 196:
break;
case 23:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mCOMMA);
}
case 197:
break;
case 24:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mLT);
}
case 198:
break;
case 25:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mGT);
}
case 199:
break;
case 26:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mBNOT);
}
case 200:
break;
case 27:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mMOD);
}
case 201:
break;
case 28:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mBXOR);
}
case 202:
break;
case 29:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mBOR);
}
case 203:
break;
case 30:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mBAND);
}
case 204:
break;
case 31:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mSEMI);
}
case 205:
break;
case 32:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mAT);
}
case 206:
break;
case 33:
{
yypushback(1);
yybegin(IN_SINGLE_GSTRING);
}
case 207:
break;
case 34:
{
yybegin(IN_SINGLE_DOT);
return GroovyTokenTypes.mIDENT;
}
case 208:
break;
case 35:
{
blockStack.push(GroovyTokenTypes.mLPAREN);
braceCount.push(GroovyTokenTypes.mLCURLY);
yybegin(NLS_AFTER_LBRACE);
return GroovyTokenTypes.mLCURLY;
}
case 209:
break;
case 36:
{
yypushback(1);
yybegin(IN_TRIPLE_GSTRING);
}
case 210:
break;
case 37:
{
yybegin(IN_TRIPLE_DOT);
return GroovyTokenTypes.mIDENT;
}
case 211:
break;
case 38:
{
blockStack.push(GroovyTokenTypes.mLBRACK);
braceCount.push(GroovyTokenTypes.mLCURLY);
yybegin(NLS_AFTER_LBRACE);
return GroovyTokenTypes.mLCURLY;
}
case 212:
break;
case 39:
{
return GroovyTokenTypes.mGSTRING_CONTENT;
}
case 213:
break;
case 40:
{
clearStacks();
yybegin(NLS_AFTER_NLS);
afterComment=YYINITIAL;
return GroovyTokenTypes.mNLS;
}
case 214:
break;
case 41:
{
yybegin(IN_SINGLE_GSTRING_DOLLAR);
return GroovyTokenTypes.mDOLLAR;
}
case 215:
break;
case 42:
{
if (!gStringStack.isEmpty()) {
gStringStack.pop();
}
if (blockStack.isEmpty()) {
yybegin(YYINITIAL);
}
 else {
yybegin(IN_INNER_BLOCK);
}
return GroovyTokenTypes.mGSTRING_END;
}
case 216:
break;
case 43:
{
int zzFState=24;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length()) {
zzFin=new boolean[zzBufferL.length() + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);
zzInput=Character.codePointAt(zzBufferL,zzFPos);
zzFPos+=Character.charCount(zzInput);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1) {
zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);
}
while (zzFPos <= zzMarkedPos) {
zzFinL[zzFPos++]=false;
}
zzFState=25;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=Character.codePointBefore(zzBufferL,zzFPos);
zzFPos-=Character.charCount(zzInput);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
return GroovyTokenTypes.mGSTRING_CONTENT;
}
case 217:
break;
case 44:
{
yybegin(IN_TRIPLE_GSTRING_DOLLAR);
return GroovyTokenTypes.mDOLLAR;
}
case 218:
break;
case 45:
{
yypushback(1);
yybegin(IN_TRIPLE_IDENT);
}
case 219:
break;
case 46:
{
yybegin(NLS_AFTER_NLS);
afterComment=IN_TRIPLE_IDENT;
return GroovyTokenTypes.mNLS;
}
case 220:
break;
case 47:
{
blockStack.push(GroovyTokenTypes.mLCURLY);
braceCount.push(GroovyTokenTypes.mLCURLY);
yybegin(NLS_AFTER_LBRACE);
return (GroovyTokenTypes.mLCURLY);
}
case 221:
break;
case 48:
{
if (!blockStack.isEmpty()) {
IElementType br=blockStack.pop();
if (br.equals(GroovyTokenTypes.mLPAREN)) yybegin(IN_SINGLE_GSTRING);
if (br.equals(GroovyTokenTypes.mLBRACK)) yybegin(IN_TRIPLE_GSTRING);
if (br.equals(GroovyTokenTypes.mDIV)) yybegin(IN_REGEX);
if (br.equals(GroovyTokenTypes.mDOLLAR)) yybegin(IN_DOLLAR_SLASH_REGEX);
}
while (!braceCount.isEmpty() && GroovyTokenTypes.mLCURLY != braceCount.peek()) {
braceCount.pop();
}
if (!braceCount.isEmpty() && GroovyTokenTypes.mLCURLY == braceCount.peek()) {
braceCount.pop();
}
return GroovyTokenTypes.mRCURLY;
}
case 222:
break;
case 49:
{
yypushback(1);
if (blockStack.isEmpty()) {
yybegin(YYINITIAL);
}
 else {
yybegin(IN_INNER_BLOCK);
}
}
case 223:
break;
case 50:
{
afterComment=YYINITIAL;
return (TokenType.WHITE_SPACE);
}
case 224:
break;
case 51:
{
yybegin(IN_REGEX);
gStringStack.push(GroovyTokenTypes.mDIV);
return GroovyTokenTypes.mREGEX_BEGIN;
}
case 225:
break;
case 52:
{
yypushback(1);
yybegin(IN_REGEX);
}
case 226:
break;
case 53:
{
yybegin(IN_REGEX_DOT);
return GroovyTokenTypes.mIDENT;
}
case 227:
break;
case 54:
{
blockStack.push(GroovyTokenTypes.mDIV);
braceCount.push(GroovyTokenTypes.mLCURLY);
yybegin(NLS_AFTER_LBRACE);
return GroovyTokenTypes.mLCURLY;
}
case 228:
break;
case 55:
{
return GroovyTokenTypes.mREGEX_CONTENT;
}
case 229:
break;
case 56:
{
if (!gStringStack.isEmpty()) {
gStringStack.pop();
}
if (blockStack.isEmpty()) {
yybegin(YYINITIAL);
}
 else {
yybegin(IN_INNER_BLOCK);
}
return GroovyTokenTypes.mREGEX_END;
}
case 230:
break;
case 57:
{
yybegin(IN_REGEX_DOLLAR);
return GroovyTokenTypes.mDOLLAR;
}
case 231:
break;
case 58:
{
yypushback(1);
yybegin(IN_DOLLAR_SLASH_REGEX);
}
case 232:
break;
case 59:
{
yybegin(IN_DOLLAR_SLASH_REGEX_DOT);
return GroovyTokenTypes.mIDENT;
}
case 233:
break;
case 60:
{
blockStack.push(GroovyTokenTypes.mDOLLAR);
braceCount.push(GroovyTokenTypes.mLCURLY);
yybegin(NLS_AFTER_LBRACE);
return GroovyTokenTypes.mLCURLY;
}
case 234:
break;
case 61:
{
return GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT;
}
case 235:
break;
case 62:
{
yybegin(IN_DOLLAR_SLASH_REGEX_DOLLAR);
return GroovyTokenTypes.mDOLLAR;
}
case 236:
break;
case 63:
{
yypushback(1);
yybegin(IN_DOLLAR_SLASH_REGEX);
}
case 237:
break;
case 64:
{
yypushback(1);
yybegin(afterComment);
}
case 238:
break;
case 65:
{
yypushback(1);
yybegin(WAIT_FOR_REGEX);
}
case 239:
break;
case 66:
{
yypushback(1);
yybegin(NLS_AFTER_COMMENT);
}
case 240:
break;
case 67:
{
return GroovyTokenTypes.mSL_COMMENT;
}
case 241:
break;
case 68:
{
return GroovyTokenTypes.mML_COMMENT;
}
case 242:
break;
case 69:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mDIV_ASSIGN);
}
case 243:
break;
case 70:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mSTAR_STAR);
}
case 244:
break;
case 71:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mSPREAD_DOT);
}
case 245:
break;
case 72:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mSTAR_ASSIGN);
}
case 246:
break;
case 73:
{
return GroovyTokenTypes.mSH_COMMENT;
}
case 247:
break;
case 74:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mNOT_EQUAL);
}
case 248:
break;
case 75:
{
return GroovyTokenTypes.mNUM_BIG_INT;
}
case 249:
break;
case 76:
{
return GroovyTokenTypes.mNUM_FLOAT;
}
case 250:
break;
case 77:
{
return GroovyTokenTypes.mNUM_LONG;
}
case 251:
break;
case 78:
{
return GroovyTokenTypes.mNUM_DOUBLE;
}
case 252:
break;
case 79:
{
return (GroovyTokenTypes.kIF);
}
case 253:
break;
case 80:
{
return (GroovyTokenTypes.kIN);
}
case 254:
break;
case 81:
{
return (GroovyTokenTypes.kDO);
}
case 255:
break;
case 82:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mINC);
}
case 256:
break;
case 83:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mPLUS_ASSIGN);
}
case 257:
break;
case 84:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mDEC);
}
case 258:
break;
case 85:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mMINUS_ASSIGN);
}
case 259:
break;
case 86:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mCLOSABLE_BLOCK_OP);
}
case 260:
break;
case 87:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mRANGE_INCLUSIVE);
}
case 261:
break;
case 88:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mMEMBER_POINTER);
}
case 262:
break;
case 89:
{
if (zzStartRead == 0 || zzBuffer.subSequence(0,zzStartRead).toString().trim().length() == 0) {
yypushback(2);
yybegin(WAIT_FOR_REGEX);
}
 else {
yypushback(1);
return (GroovyTokenTypes.mDOLLAR);
}
}
case 263:
break;
case 90:
{
return GroovyTokenTypes.mGSTRING_LITERAL;
}
case 264:
break;
case 91:
{
return (GroovyTokenTypes.kAS);
}
case 265:
break;
case 92:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mOPTIONAL_DOT);
}
case 266:
break;
case 93:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mELVIS);
}
case 267:
break;
case 94:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mEQUAL);
}
case 268:
break;
case 95:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mREGEX_FIND);
}
case 269:
break;
case 96:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mLE);
}
case 270:
break;
case 97:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mGE);
}
case 271:
break;
case 98:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mMOD_ASSIGN);
}
case 272:
break;
case 99:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mBXOR_ASSIGN);
}
case 273:
break;
case 100:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mBOR_ASSIGN);
}
case 274:
break;
case 101:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mLOR);
}
case 275:
break;
case 102:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mBAND_ASSIGN);
}
case 276:
break;
case 103:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mLAND);
}
case 277:
break;
case 104:
zzMarkedPos=Character.offsetByCodePoints(zzBufferL,zzStartRead,1);
{
yybegin(IN_SINGLE_IDENT);
return GroovyTokenTypes.mDOT;
}
case 278:
break;
case 105:
zzMarkedPos=Character.offsetByCodePoints(zzBufferL,zzStartRead,1);
{
yybegin(IN_TRIPLE_NLS);
return GroovyTokenTypes.mDOT;
}
case 279:
break;
case 106:
{
yybegin(IN_DOLLAR_SLASH_REGEX);
gStringStack.push(GroovyTokenTypes.mDOLLAR);
return GroovyTokenTypes.mDOLLAR_SLASH_REGEX_BEGIN;
}
case 280:
break;
case 107:
zzMarkedPos=Character.offsetByCodePoints(zzBufferL,zzMarkedPos,-1);
{
return GroovyTokenTypes.mREGEX_CONTENT;
}
case 281:
break;
case 108:
zzMarkedPos=Character.offsetByCodePoints(zzBufferL,zzStartRead,1);
{
yybegin(IN_REGEX_IDENT);
return GroovyTokenTypes.mDOT;
}
case 282:
break;
case 109:
{
if (!gStringStack.isEmpty()) {
gStringStack.pop();
}
if (blockStack.isEmpty()) {
yybegin(YYINITIAL);
}
 else {
yybegin(IN_INNER_BLOCK);
}
return GroovyTokenTypes.mDOLLAR_SLASH_REGEX_END;
}
case 283:
break;
case 110:
zzMarkedPos=Character.offsetByCodePoints(zzBufferL,zzMarkedPos,-1);
{
return GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT;
}
case 284:
break;
case 111:
zzMarkedPos=Character.offsetByCodePoints(zzBufferL,zzStartRead,1);
{
yybegin(IN_DOLLAR_SLASH_REGEX_IDENT);
return GroovyTokenTypes.mDOT;
}
case 285:
break;
case 112:
{
return GroovyDocElementTypes.GROOVY_DOC_COMMENT;
}
case 286:
break;
case 113:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mSTAR_STAR_ASSIGN);
}
case 287:
break;
case 114:
{
return GroovyTokenTypes.mNUM_BIG_DECIMAL;
}
case 288:
break;
case 115:
{
return (GroovyTokenTypes.kFOR);
}
case 289:
break;
case 116:
{
return (GroovyTokenTypes.kINT);
}
case 290:
break;
case 117:
{
return (GroovyTokenTypes.kDEF);
}
case 291:
break;
case 118:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mTRIPLE_DOT);
}
case 292:
break;
case 119:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mRANGE_EXCLUSIVE);
}
case 293:
break;
case 120:
{
yybegin(IN_TRIPLE_GSTRING);
gStringStack.push(GroovyTokenTypes.mLBRACK);
return GroovyTokenTypes.mGSTRING_BEGIN;
}
case 294:
break;
case 121:
{
return (GroovyTokenTypes.kTRY);
}
case 295:
break;
case 122:
{
return (GroovyTokenTypes.kNEW);
}
case 296:
break;
case 123:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mREGEX_MATCH);
}
case 297:
break;
case 124:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mCOMPARE_TO);
}
case 298:
break;
case 125:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mSL_ASSIGN);
}
case 299:
break;
case 126:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mSR_ASSIGN);
}
case 300:
break;
case 127:
{
if (!gStringStack.isEmpty()) {
gStringStack.pop();
}
if (blockStack.isEmpty()) {
yybegin(YYINITIAL);
}
 else {
yybegin(IN_INNER_BLOCK);
}
return GroovyTokenTypes.mGSTRING_END;
}
case 301:
break;
case 128:
{
return (GroovyTokenTypes.kLONG);
}
case 302:
break;
case 129:
{
return (GroovyTokenTypes.kELSE);
}
case 303:
break;
case 130:
{
return (GroovyTokenTypes.kENUM);
}
case 304:
break;
case 131:
{
return (GroovyTokenTypes.kBYTE);
}
case 305:
break;
case 132:
{
return (GroovyTokenTypes.kCASE);
}
case 306:
break;
case 133:
{
return (GroovyTokenTypes.kCHAR);
}
case 307:
break;
case 134:
{
return (GroovyTokenTypes.kTRUE);
}
case 308:
break;
case 135:
{
return (GroovyTokenTypes.kTHIS);
}
case 309:
break;
case 136:
{
return (GroovyTokenTypes.kNULL);
}
case 310:
break;
case 137:
{
return (GroovyTokenTypes.kVOID);
}
case 311:
break;
case 138:
{
yybegin(WAIT_FOR_REGEX);
return (GroovyTokenTypes.mBSR_ASSIGN);
}
case 312:
break;
case 139:
{
return (GroovyTokenTypes.kFLOAT);
}
case 313:
break;
case 140:
{
return (GroovyTokenTypes.kFINAL);
}
case 314:
break;
case 141:
{
return (GroovyTokenTypes.kFALSE);
}
case 315:
break;
case 142:
{
return (GroovyTokenTypes.kBREAK);
}
case 316:
break;
case 143:
{
return (GroovyTokenTypes.kCLASS);
}
case 317:
break;
case 144:
{
return (GroovyTokenTypes.kCATCH);
}
case 318:
break;
case 145:
{
return (GroovyTokenTypes.kSUPER);
}
case 319:
break;
case 146:
{
return (GroovyTokenTypes.kSHORT);
}
case 320:
break;
case 147:
{
return (GroovyTokenTypes.kTRAIT);
}
case 321:
break;
case 148:
{
return (GroovyTokenTypes.kTHROW);
}
case 322:
break;
case 149:
{
return (GroovyTokenTypes.kWHILE);
}
case 323:
break;
case 150:
{
return (GroovyTokenTypes.kIMPORT);
}
case 324:
break;
case 151:
{
return (GroovyTokenTypes.kDOUBLE);
}
case 325:
break;
case 152:
{
return (GroovyTokenTypes.kPUBLIC);
}
case 326:
break;
case 153:
{
return (GroovyTokenTypes.kASSERT);
}
case 327:
break;
case 154:
{
return (GroovyTokenTypes.kSTATIC);
}
case 328:
break;
case 155:
{
return (GroovyTokenTypes.kSWITCH);
}
case 329:
break;
case 156:
{
return (GroovyTokenTypes.kTHROWS);
}
case 330:
break;
case 157:
{
return (GroovyTokenTypes.kRETURN);
}
case 331:
break;
case 158:
{
return (GroovyTokenTypes.kNATIVE);
}
case 332:
break;
case 159:
{
return (GroovyTokenTypes.kFINALLY);
}
case 333:
break;
case 160:
{
return (GroovyTokenTypes.kDEFAULT);
}
case 334:
break;
case 161:
{
return (GroovyTokenTypes.kEXTENDS);
}
case 335:
break;
case 162:
{
return (GroovyTokenTypes.kBOOLEAN);
}
case 336:
break;
case 163:
{
return (GroovyTokenTypes.kPACKAGE);
}
case 337:
break;
case 164:
{
return (GroovyTokenTypes.kPRIVATE);
}
case 338:
break;
case 165:
{
return (GroovyTokenTypes.kABSTRACT);
}
case 339:
break;
case 166:
{
return (GroovyTokenTypes.kCONTINUE);
}
case 340:
break;
case 167:
{
return (GroovyTokenTypes.kSTRICTFP);
}
case 341:
break;
case 168:
{
return (GroovyTokenTypes.kVOLATILE);
}
case 342:
break;
case 169:
{
return (GroovyTokenTypes.kINTERFACE);
}
case 343:
break;
case 170:
{
return (GroovyTokenTypes.kPROTECTED);
}
case 344:
break;
case 171:
{
return (GroovyTokenTypes.kTRANSIENT);
}
case 345:
break;
case 172:
{
return (GroovyTokenTypes.kIMPLEMENTS);
}
case 346:
break;
case 173:
{
return (GroovyTokenTypes.kINSTANCEOF);
}
case 347:
break;
case 174:
{
return (GroovyTokenTypes.kSYNCHRONIZED);
}
case 348:
break;
default :
zzScanError(ZZ_NO_MATCH);
}
}
}
}
