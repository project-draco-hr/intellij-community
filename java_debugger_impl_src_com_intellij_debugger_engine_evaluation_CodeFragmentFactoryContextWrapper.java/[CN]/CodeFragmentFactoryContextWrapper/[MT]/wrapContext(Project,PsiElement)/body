{
  if (project.isDefault())   return originalContext;
  if (!(myDelegate instanceof DefaultCodeFragmentFactory)) {
    return originalContext;
  }
  PsiElement context=originalContext;
  XDebugSession session=XDebuggerManager.getInstance(project).getCurrentSession();
  if (session != null) {
    XValueMarkers<?,?> markers=((XDebugSessionImpl)session).getValueMarkers();
    Map<?,ValueMarkup> markupMap=markers != null ? markers.getAllMarkers() : null;
    if (ContainerUtil.isEmpty(markupMap)) {
      final Pair<String,Map<String,ObjectReference>> markupVariables=createMarkupVariablesText(markupMap);
      int offset=markupVariables.getFirst().length() - 1;
      final TextWithImportsImpl textWithImports=new TextWithImportsImpl(CodeFragmentKind.CODE_BLOCK,markupVariables.getFirst(),"",myDelegate.getFileType());
      final JavaCodeFragment codeFragment=myDelegate.createCodeFragment(textWithImports,context,project);
      codeFragment.accept(new JavaRecursiveElementVisitor(){
        public void visitLocalVariable(        PsiLocalVariable variable){
          final String name=variable.getName();
          variable.putUserData(LABEL_VARIABLE_VALUE_KEY,markupVariables.getSecond().get(name));
        }
      }
);
      final PsiElement newContext=codeFragment.findElementAt(offset);
      if (newContext != null) {
        context=newContext;
      }
    }
  }
  return context;
}
