{
  myRegistrar=registrar;
  registerProvidedSeverities();
  mySchemeManager=schemeManagerFactory.create(INSPECTION_DIR,new LazySchemeProcessor<Profile,InspectionProfileImpl>(){
    @NotNull @Override public String getName(    @NotNull Function<String,String> attributeProvider){
      return ObjectUtils.chooseNotNull(attributeProvider.apply(InspectionProfileLoadUtil.PROFILE_NAME_TAG),"unnamed");
    }
    @NotNull public InspectionProfileImpl createScheme(    @NotNull SchemeDataHolder dataHolder,    @NotNull String name,    @NotNull Function<String,String> attributeProvider,    boolean duringLoad){
      return new InspectionProfileImpl(name,myRegistrar,ApplicationInspectionProfileManagerImpl.this,getDefaultProfile(),dataHolder);
    }
    @NotNull @Override public SchemeState getState(    @NotNull Profile scheme){
      if (!(scheme instanceof InspectionProfileImpl) || scheme.isProjectLevel()) {
        return SchemeState.NON_PERSISTENT;
      }
 else {
        return ((InspectionProfileImpl)scheme).wasInitialized() ? SchemeState.POSSIBLY_CHANGED : SchemeState.UNCHANGED;
      }
    }
    @Override public void onSchemeAdded(    @NotNull final InspectionProfileImpl scheme){
      updateProfileImpl(scheme);
      fireProfileChanged(scheme);
      onProfilesChanged();
    }
    @Override public void onSchemeDeleted(    @NotNull final InspectionProfileImpl scheme){
      onProfilesChanged();
    }
    @Override public void onCurrentSchemeChanged(    @Nullable Scheme oldScheme){
      Profile current=mySchemeManager.getCurrentScheme();
      if (current != null) {
        fireProfileChanged((Profile)oldScheme,current,null);
      }
      onProfilesChanged();
    }
  }
);
  mySeverityRegistrar=new SeverityRegistrar(messageBus);
}
