{
  final PsiMethod psiMethod=(PsiMethod)fromContext.getSourceElement();
  final PsiClass containingClass=psiMethod.getContainingClass();
  final InheritorChooser inheritorChooser=new InheritorChooser(){
    @Override protected void runForClasses(    List<PsiClass> classes,    PsiMethod method,    ConfigurationContext context,    Runnable performRunnable){
      if (!StringUtil.equals(context.getModule().getOptionValue(ExternalSystemConstants.EXTERNAL_SYSTEM_ID),GradleConstants.SYSTEM_ID.toString())) {
        return;
      }
      ExternalSystemRunConfiguration configuration=(ExternalSystemRunConfiguration)fromContext.getConfiguration();
      if (!applyTestMethodConfiguration(configuration,context,psiMethod,ArrayUtil.toObjectArray(classes,PsiClass.class)))       return;
      super.runForClasses(classes,method,context,performRunnable);
    }
    @Override protected void runForClass(    PsiClass aClass,    PsiMethod psiMethod,    ConfigurationContext context,    Runnable performRunnable){
      if (!StringUtil.equals(context.getModule().getOptionValue(ExternalSystemConstants.EXTERNAL_SYSTEM_ID),GradleConstants.SYSTEM_ID.toString())) {
        return;
      }
      ExternalSystemRunConfiguration configuration=(ExternalSystemRunConfiguration)fromContext.getConfiguration();
      if (!applyTestMethodConfiguration(configuration,context,psiMethod,aClass))       return;
      super.runForClass(aClass,psiMethod,context,performRunnable);
    }
  }
;
  if (inheritorChooser.runMethodInAbstractClass(context,performRunnable,psiMethod,containingClass))   return;
  super.onFirstRun(fromContext,context,performRunnable);
}
