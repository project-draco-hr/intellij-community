{
  if (quick || !JavaCodeFoldingSettings.getInstance().isInlineParameterNamesForLiteralCallArguments()) {
    return;
  }
  PsiExpressionList callArgumentsList=expression.getArgumentList();
  if (callArgumentsList == null) {
    return;
  }
  PsiExpression[] callArguments=callArgumentsList.getExpressions();
  if (callArguments.length > 1) {
    PsiParameter[] parameters=null;
    boolean isResolved=false;
    for (int i=0; i < callArguments.length; i++) {
      PsiExpression callArgument=callArguments[i];
      if (isLiteralExpression(callArgument)) {
        if (!isResolved) {
          PsiMethod method=expression.resolveMethod();
          isResolved=true;
          if (method == null) {
            return;
          }
          parameters=method.getParameterList().getParameters();
          if (parameters.length != callArguments.length) {
            return;
          }
        }
        PsiParameter methodParam=parameters[i];
        if (PsiType.NULL.equals(callArgument.getType()) || methodParam.getType().equals(callArgument.getType())) {
          TextRange range=callArgument.getTextRange();
          String placeholderText=methodParam.getName() + ": " + callArgument.getText();
          foldElements.add(new NamedFoldingDescriptor(callArgument,range.getStartOffset(),range.getEndOffset(),null,placeholderText));
        }
      }
    }
  }
}
