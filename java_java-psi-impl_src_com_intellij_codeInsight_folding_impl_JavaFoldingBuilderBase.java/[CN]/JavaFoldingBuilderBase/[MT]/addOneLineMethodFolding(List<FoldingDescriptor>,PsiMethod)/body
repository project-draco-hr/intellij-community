{
  if (!JavaCodeFoldingSettings.getInstance().isCollapseOneLineMethods()) {
    return false;
  }
  PsiCodeBlock body=method.getBody();
  if (body == null) {
    return false;
  }
  PsiJavaToken lBrace=body.getLBrace();
  PsiJavaToken rBrace=body.getRBrace();
  PsiStatement[] statements=body.getStatements();
  if (lBrace == null || rBrace == null || statements.length != 1) {
    return false;
  }
  PsiStatement statement=statements[0];
  if (statement.textContains('\n')) {
    return false;
  }
  if (!areOnAdjacentLines(body.getLBrace(),statement) || !areOnAdjacentLines(statement,body.getRBrace())) {
    return false;
  }
  int leftStart=method.getParameterList().getTextRange().getEndOffset();
  int leftEnd=statement.getTextRange().getStartOffset();
  int rightStart=statement.getTextRange().getEndOffset();
  int rightEnd=body.getTextRange().getEndOffset();
  if (leftEnd <= leftStart + 1 || rightEnd <= rightStart + 1) {
    return false;
  }
  FoldingGroup group=FoldingGroup.newGroup("one-liner");
  descriptorList.add(new FoldingDescriptor(lBrace.getNode(),new TextRange(leftStart,leftEnd),group){
    @Nullable @Override public String getPlaceholderText(){
      return " { ";
    }
  }
);
  descriptorList.add(new FoldingDescriptor(rBrace.getNode(),new TextRange(rightStart,rightEnd),group){
    @Nullable @Override public String getPlaceholderText(){
      return " }";
    }
  }
);
  return true;
}
