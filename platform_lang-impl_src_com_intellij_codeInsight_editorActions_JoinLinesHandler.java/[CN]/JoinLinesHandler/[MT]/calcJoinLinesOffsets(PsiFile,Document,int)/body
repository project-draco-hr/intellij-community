{
  JoinLinesOffsets offsets=new JoinLinesOffsets();
  CharSequence text=doc.getCharsSequence();
  offsets.lineEndOffset=doc.getLineEndOffset(startLine);
  offsets.firstNonSpaceOffsetInNextLine=doc.getLineStartOffset(startLine + 1);
  while (offsets.firstNonSpaceOffsetInNextLine < text.length() - 1 && (text.charAt(offsets.firstNonSpaceOffsetInNextLine) == ' ' || text.charAt(offsets.firstNonSpaceOffsetInNextLine) == '\t')) {
    offsets.firstNonSpaceOffsetInNextLine++;
  }
  PsiElement elementAtNextLineStart=psiFile.findElementAt(offsets.firstNonSpaceOffsetInNextLine);
  offsets.isNextLineStartsWithComment=isCommentElement(elementAtNextLineStart);
  offsets.lastNonSpaceOffsetInStartLine=offsets.lineEndOffset;
  while (offsets.lastNonSpaceOffsetInStartLine > 0 && (text.charAt(offsets.lastNonSpaceOffsetInStartLine - 1) == ' ' || text.charAt(offsets.lastNonSpaceOffsetInStartLine - 1) == '\t')) {
    offsets.lastNonSpaceOffsetInStartLine--;
  }
  int elemOffset=offsets.lastNonSpaceOffsetInStartLine > doc.getLineStartOffset(startLine) ? offsets.lastNonSpaceOffsetInStartLine - 1 : -1;
  offsets.elementAtStartLineEnd=elemOffset == -1 ? null : psiFile.findElementAt(elemOffset);
  offsets.isStartLineEndsWithComment=isCommentElement(offsets.elementAtStartLineEnd);
  return offsets;
}
