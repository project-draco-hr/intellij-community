{
  Commenter commenter=LanguageCommenters.INSTANCE.forLanguage(commentElement.getLanguage());
  if (commenter instanceof CodeDocumentationAwareCommenter) {
    CodeDocumentationAwareCommenter docCommenter=(CodeDocumentationAwareCommenter)commenter;
    String lineCommentPrefix=commenter.getLineCommentPrefix();
    String blockCommentPrefix=commenter.getBlockCommentPrefix();
    String blockCommentSuffix=commenter.getBlockCommentSuffix();
    if (commentElement.getNode().getElementType() == docCommenter.getLineCommentTokenType() && blockCommentPrefix != null && blockCommentSuffix != null && lineCommentPrefix != null) {
      String commentText=StringUtil.trimStart(commentElement.getText(),lineCommentPrefix);
      try {
        Project project=commentElement.getProject();
        PsiParserFacade parserFacade=PsiParserFacade.SERVICE.getInstance(project);
        PsiComment newComment=parserFacade.createBlockCommentFromText(commentElement.getLanguage(),commentText);
        commentElement.replace(newComment);
        PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(doc);
      }
 catch (      IncorrectOperationException e) {
        LOG.info("Failed to replace line comment with block comment",e);
      }
    }
  }
}
