{
  int caretRestoreOffset=-1;
  for (int i=startLine; i < endLine; i++) {
    if (i >= doc.getLineCount() - 1)     break;
    docManager.doPostponedOperationsAndUnblockDocument(doc);
    docManager.commitDocument(doc);
    CharSequence text=doc.getCharsSequence();
    JoinLinesOffsets offsets=calcJoinLinesOffsets(psiFile,doc,startLine);
    if (offsets.isStartLineEndsWithComment && !offsets.isNextLineStartsWithComment) {
      tryConvertEndOfLineComment(doc,offsets.elementAtStartLineEnd);
      offsets=calcJoinLinesOffsets(psiFile,doc,startLine);
    }
    int rc=-1;
    int start;
    int end;
    TextRange limits=findStartAndEnd(text,offsets.lastNonSpaceOffsetInStartLine,offsets.firstNonSpaceOffsetInNextLine,doc.getTextLength());
    start=limits.getStartOffset();
    end=limits.getEndOffset();
    for (    JoinLinesHandlerDelegate delegate : Extensions.getExtensions(JoinLinesHandlerDelegate.EP_NAME)) {
      if (delegate instanceof JoinRawLinesHandlerDelegate) {
        rc=((JoinRawLinesHandlerDelegate)delegate).tryJoinRawLines(doc,psiFile,start,end);
        if (rc != CANNOT_JOIN) {
          caretRestoreOffset=rc;
          break;
        }
      }
    }
    if (rc == CANNOT_JOIN) {
      if (offsets.lastNonSpaceOffsetInStartLine == doc.getLineStartOffset(startLine)) {
        doc.deleteString(doc.getLineStartOffset(startLine),offsets.firstNonSpaceOffsetInNextLine);
        int indent=-1;
        try {
          docManager.commitDocument(doc);
          indent=CodeStyleManager.getInstance(project).adjustLineIndent(psiFile,startLine == 0 ? 0 : doc.getLineStartOffset(startLine));
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
        if (caretRestoreOffset == CANNOT_JOIN) {
          caretRestoreOffset=indent;
        }
        continue;
      }
      doc.deleteString(offsets.lineEndOffset,offsets.lineEndOffset + doc.getLineSeparatorLength(startLine));
      text=doc.getCharsSequence();
      limits=findStartAndEnd(text,offsets.lineEndOffset - 1,offsets.lineEndOffset,doc.getTextLength());
      start=limits.getStartOffset();
      end=limits.getEndOffset();
      docManager.commitDocument(doc);
      for (      JoinLinesHandlerDelegate delegate : Extensions.getExtensions(JoinLinesHandlerDelegate.EP_NAME)) {
        rc=delegate.tryJoinLines(doc,psiFile,start,end);
        if (rc != CANNOT_JOIN)         break;
      }
    }
    docManager.doPostponedOperationsAndUnblockDocument(doc);
    if (rc != CANNOT_JOIN) {
      if (caretRestoreOffset == CANNOT_JOIN)       caretRestoreOffset=rc;
      continue;
    }
    if (caretRestoreOffset == CANNOT_JOIN)     caretRestoreOffset=start == offsets.lineEndOffset ? start : start + 1;
    if (offsets.isStartLineEndsWithComment && offsets.isNextLineStartsWithComment) {
      if (text.charAt(end) == '*' && end < text.length() && text.charAt(end + 1) != '/') {
        end++;
        while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t'))         end++;
      }
 else       if (text.charAt(end) == '/') {
        end+=2;
        while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t'))         end++;
      }
      doc.replaceString(start == offsets.lineEndOffset ? start : start + 1,end," ");
      continue;
    }
    while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t'))     end++;
    doc.replaceString(start == offsets.lineEndOffset ? start : start + 1,end," ");
    if (start <= doc.getLineStartOffset(startLine)) {
      try {
        docManager.commitDocument(doc);
        CodeStyleManager.getInstance(project).adjustLineIndent(psiFile,doc.getLineStartOffset(startLine));
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
    int prevLineCount=doc.getLineCount();
    docManager.commitDocument(doc);
    try {
      CodeStyleManager.getInstance(project).reformatRange(psiFile,start + 1,end,true);
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
    if (prevLineCount < doc.getLineCount()) {
      docManager.doPostponedOperationsAndUnblockDocument(doc);
      end=doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine);
      start=end - doc.getLineSeparatorLength(startLine);
      int addedLinesCount=doc.getLineCount() - prevLineCount - 1;
      while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t' || text.charAt(end) == '\n' && addedLinesCount > 0)) {
        if (text.charAt(end) == '\n')         addedLinesCount--;
        end++;
      }
      doc.replaceString(start,end," ");
    }
    docManager.commitDocument(doc);
  }
  docManager.commitDocument(doc);
  if (caret.hasSelection()) {
    caret.moveToOffset(caret.getSelectionEnd());
  }
 else   if (caretRestoreOffset != CANNOT_JOIN) {
    caret.moveToOffset(caretRestoreOffset);
    if (caret == editor.getCaretModel().getPrimaryCaret()) {
      editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    }
    caret.removeSelection();
  }
}
