{
  final PsiPolyVariantReference reference=getReference(PyResolveContext.noImplicits().withTypeEvalContext(context));
  final List<PyType> members=new ArrayList<>();
  for (  PsiElement resolved : PyUtil.multiResolveTopPriority(reference)) {
    PyType res=null;
    if (resolved instanceof PyCallable) {
      res=((PyCallable)resolved).getCallType(context,this);
    }
    if (PyTypeChecker.isUnknown(res) || res instanceof PyNoneType) {
      final PyExpression indexExpression=getIndexExpression();
      if (indexExpression != null) {
        final PyType type=context.getType(getOperand());
        final PyClass cls=(type instanceof PyClassType) ? ((PyClassType)type).getPyClass() : null;
        if (cls != null && PyABCUtil.isSubclass(cls,PyNames.MAPPING,context)) {
          return res;
        }
        if (type instanceof PySubscriptableType) {
          res=((PySubscriptableType)type).getElementType(indexExpression,context);
        }
 else         if (type instanceof PyCollectionType) {
          final List<PyType> elementTypes=((PyCollectionType)type).getElementTypes(context);
          res=elementTypes.isEmpty() ? null : elementTypes.get(0);
        }
      }
    }
    members.add(res);
  }
  return PyUnionType.union(members);
}
