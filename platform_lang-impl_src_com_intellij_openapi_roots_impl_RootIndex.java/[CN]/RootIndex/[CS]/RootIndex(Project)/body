{
  for (  final Module module : ModuleManager.getInstance(project).getModules()) {
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    final OrderEntry[] orderEntries=moduleRootManager.getOrderEntries();
    final ContentEntry[] contentEntries=moduleRootManager.getContentEntries();
    final VirtualFile[] contentRoots=moduleRootManager.getContentRoots();
    for (    final VirtualFile contentRoot : contentRoots) {
      if (!myRoots.contentRootOf.containsKey(contentRoot)) {
        myRoots.contentRootOf.put(contentRoot,module);
      }
    }
    for (    ContentEntry contentEntry : contentEntries) {
      for (      VirtualFile excludeRoot : contentEntry.getExcludeFolderFiles()) {
        myRoots.excludedFromModule.put(excludeRoot,module);
      }
      for (      final SourceFolder sourceFolder : contentEntry.getSourceFolders()) {
        final VirtualFile sourceFolderRoot=sourceFolder.getFile();
        if (sourceFolderRoot != null) {
          myRoots.rootTypeId.put(sourceFolderRoot,getRootTypeId(sourceFolder.getRootType()));
          myRoots.classAndSourceRoots.add(sourceFolderRoot);
          myRoots.sourceRootOf.putValue(sourceFolderRoot,module);
          myRoots.packagePrefix.put(sourceFolderRoot,sourceFolder.getPackagePrefix());
        }
      }
    }
    for (    OrderEntry orderEntry : orderEntries) {
      if (orderEntry instanceof ModuleOrderEntry) {
        final Module depModule=((ModuleOrderEntry)orderEntry).getModule();
        if (depModule != null) {
          VirtualFile[] importedClassRoots=OrderEnumerator.orderEntries(depModule).exportedOnly().recursively().classes().usingCache().getRoots();
          for (          VirtualFile importedClassRoot : importedClassRoots) {
            myRoots.depEntries.putValue(importedClassRoot,orderEntry);
          }
        }
        for (        VirtualFile sourceRoot : orderEntry.getFiles(OrderRootType.SOURCES)) {
          myRoots.depEntries.putValue(sourceRoot,orderEntry);
        }
      }
 else       if (orderEntry instanceof LibraryOrSdkOrderEntry) {
        final LibraryOrSdkOrderEntry entry=(LibraryOrSdkOrderEntry)orderEntry;
        final VirtualFile[] sourceRoots=entry.getRootFiles(OrderRootType.SOURCES);
        final VirtualFile[] classRoots=entry.getRootFiles(OrderRootType.CLASSES);
        for (        final VirtualFile sourceRoot : sourceRoots) {
          myRoots.classAndSourceRoots.add(sourceRoot);
          myRoots.libSourceRootEntries.putValue(sourceRoot,orderEntry);
          myRoots.packagePrefix.put(sourceRoot,"");
        }
        for (        final VirtualFile classRoot : classRoots) {
          myRoots.classAndSourceRoots.add(classRoot);
          myRoots.libClassRootEntries.putValue(classRoot,orderEntry);
          myRoots.packagePrefix.put(classRoot,"");
        }
        if (orderEntry instanceof LibraryOrderEntry) {
          Library library=((LibraryOrderEntry)orderEntry).getLibrary();
          if (library != null) {
            for (            VirtualFile root : ((LibraryEx)library).getExcludedRoots()) {
              myRoots.excludedFromLibraries.putValue(root,library);
            }
            for (            VirtualFile root : sourceRoots) {
              myRoots.sourceOfLibraries.putValue(root,library);
            }
            for (            VirtualFile root : classRoots) {
              myRoots.classOfLibraries.putValue(root,library);
            }
          }
        }
      }
    }
  }
  for (  DirectoryIndexExcludePolicy policy : Extensions.getExtensions(DirectoryIndexExcludePolicy.EP_NAME,project)) {
    Collections.addAll(myRoots.excludedFromProject,policy.getExcludeRootsForProject());
  }
  Set<VirtualFile> allRoots=myRoots.getAllRoots();
  for (  VirtualFile root : allRoots) {
    List<VirtualFile> hierarchy=getHierarchy(root,allRoots);
    Pair<DirectoryInfo,String> pair=hierarchy == null ? new Pair<DirectoryInfo,String>(null,null) : calcDirectoryInfo(root,hierarchy);
    cacheInfos(root,root,pair.first);
    myPackagePrefixRoots.putValue(pair.second,root);
    if (shouldMarkAsProjectExcluded(root,hierarchy)) {
      myProjectExcludedRoots.add(root);
    }
  }
}
