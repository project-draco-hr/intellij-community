{
  Map<String,List<VirtualFile>> cacheMap=includeLibrarySources ? myDirectoriesByPackageNameCacheWithLibSrc : myDirectoriesByPackageNameCache;
  final List<VirtualFile> cachedResult=cacheMap.get(packageName);
  if (cachedResult != null) {
    return new CollectionQuery<VirtualFile>(cachedResult);
  }
  final ArrayList<VirtualFile> result=ContainerUtil.newArrayList();
  for (  Map.Entry<String,HashSet<VirtualFile>> entry : myPackagePrefixRoots.entrySet()) {
    if (!packageName.startsWith(entry.getKey())) {
      continue;
    }
    if (packageName.equals(entry.getKey())) {
      for (      VirtualFile file : entry.getValue()) {
        if (isValidPackageDirectory(includeLibrarySources,file)) {
          result.add(file);
        }
      }
      continue;
    }
    final String nestedPackageName=entry.getKey().isEmpty() ? packageName : packageName.substring(entry.getKey().length());
    final List<String> nestedPackages=StringUtil.split(nestedPackageName,".");
    for (    final VirtualFile root : entry.getValue()) {
      VirtualFile file=root;
      for (      String name : nestedPackages) {
        file=file.findChild(name);
        if (file == null) {
          break;
        }
      }
      if (isValidPackageDirectory(includeLibrarySources,file)) {
        result.add(file);
      }
    }
  }
  cacheMap.put(packageName,result);
  return new CollectionQuery<VirtualFile>(result);
}
