{
  final String oldClassName=aClass.getName();
  final Set<PsiFile> files=new HashSet<>();
  for (  final UsageInfo info : usages) {
    final PsiElement element=info.getElement();
    if (!(element instanceof PsiJavaCodeReferenceElement))     continue;
    files.add(element.getContainingFile());
    final PsiDeclarationStatement statement=PsiTreeUtil.getParentOfType(element,PsiDeclarationStatement.class);
    if (statement != null) {
      for (      PsiElement declaredElement : statement.getDeclaredElements()) {
        if (declaredElement instanceof PsiVariable) {
          checkRenameVariable(element,(PsiVariable)declaredElement,oldClassName);
        }
      }
    }
 else {
      PsiVariable variable=PsiTreeUtil.getParentOfType(element,PsiVariable.class);
      if (variable != null) {
        checkRenameVariable(element,variable,oldClassName);
        if (variable instanceof PsiField) {
          for (          PsiField field : getFieldsInSameDeclaration((PsiField)variable)) {
            checkRenameVariable(element,field,oldClassName);
          }
        }
      }
    }
  }
  if (files.size() < JavaFunctionalExpressionSearcher.SMART_SEARCH_THRESHOLD && oldClassName != null) {
    for (    PsiFile file : files) {
      for (      PsiLambdaExpression expression : SyntaxTraverser.psiTraverser().withRoot(file).filter(PsiLambdaExpression.class)) {
        final PsiParameter[] parameters=expression.getParameterList().getParameters();
        for (        PsiParameter parameter : parameters) {
          if (aClass.equals(PsiUtil.resolveClassInType(parameter.getType()))) {
            final String parameterName=parameter.getName();
            if (parameterName != null && StringUtil.containsIgnoreCase(parameterName,oldClassName)) {
              myElements.add(parameter);
            }
          }
        }
      }
    }
  }
  suggestAllNames(oldClassName,newClassName);
}
