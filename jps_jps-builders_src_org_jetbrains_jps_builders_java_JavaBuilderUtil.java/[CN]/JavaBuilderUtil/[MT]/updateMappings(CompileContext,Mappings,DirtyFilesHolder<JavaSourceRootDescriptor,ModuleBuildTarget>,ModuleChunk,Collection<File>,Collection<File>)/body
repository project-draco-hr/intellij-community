{
  try {
    boolean additionalPassRequired=false;
    final Set<String> removedPaths=getRemovedPaths(chunk,dirtyFilesHolder);
    final Mappings globalMappings=context.getProjectDescriptor().dataManager.getMappings();
    final boolean errorsDetected=Utils.errorsDetected(context);
    if (!isForcedRecompilationAllJavaModules(context)) {
      if (context.shouldDifferentiate(chunk)) {
        context.processMessage(new ProgressMessage("Checking dependencies... [" + chunk.getPresentableShortName() + "]"));
        final Set<File> allCompiledFiles=getFilesContainer(context,ALL_COMPILED_FILES_KEY);
        final Set<File> allAffectedFiles=getFilesContainer(context,ALL_AFFECTED_FILES_KEY);
        allAffectedFiles.addAll(filesToCompile);
        allCompiledFiles.addAll(successfullyCompiled);
        allAffectedFiles.removeAll(successfullyCompiled);
        final Set<File> affectedBeforeDif=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
        affectedBeforeDif.addAll(allAffectedFiles);
        final ModulesBasedFileFilter moduleBasedFilter=new ModulesBasedFileFilter(context,chunk);
        final boolean incremental=globalMappings.differentiateOnIncrementalMake(delta,removedPaths,filesToCompile,allCompiledFiles,allAffectedFiles,moduleBasedFilter,CONSTANT_SEARCH_SERVICE.get(context));
        if (LOG.isDebugEnabled()) {
          LOG.debug("Differentiate Results:");
          LOG.debug("   Compiled Files:");
          for (          final File c : allCompiledFiles) {
            LOG.debug("      " + c.getAbsolutePath());
          }
          LOG.debug("   Affected Files:");
          for (          final File c : allAffectedFiles) {
            LOG.debug("      " + c.getAbsolutePath());
          }
          LOG.debug("End Of Differentiate Results.");
        }
        if (incremental) {
          final Set<File> newlyAffectedFiles=new HashSet<File>(allAffectedFiles);
          newlyAffectedFiles.removeAll(affectedBeforeDif);
          final String infoMessage="Dependency analysis found " + newlyAffectedFiles.size() + " affected files";
          LOG.info(infoMessage);
          context.processMessage(new ProgressMessage(infoMessage));
          if (!newlyAffectedFiles.isEmpty()) {
            if (LOG.isDebugEnabled()) {
              for (              File file : newlyAffectedFiles) {
                LOG.debug("affected file: " + file.getPath());
              }
              final List<Pair<File,JpsModule>> wrongFiles=checkAffectedFilesInCorrectModules(context,newlyAffectedFiles,moduleBasedFilter);
              if (!wrongFiles.isEmpty()) {
                LOG.debug("Wrong affected files for module chunk " + chunk.getName() + ": ");
                for (                Pair<File,JpsModule> pair : wrongFiles) {
                  final String name=pair.second != null ? pair.second.getName() : "null";
                  LOG.debug("\t[" + name + "] "+ pair.first.getPath());
                }
              }
            }
            for (            File file : newlyAffectedFiles) {
              FSOperations.markDirtyIfNotDeleted(context,CompilationRound.NEXT,file);
            }
            additionalPassRequired=isCompileJavaIncrementally(context) && chunkContainsAffectedFiles(context,chunk,newlyAffectedFiles);
          }
        }
 else {
          final String messageText="Marking " + chunk.getPresentableShortName() + " and direct dependants for recompilation";
          LOG.info("Non-incremental mode: " + messageText);
          context.processMessage(new ProgressMessage(messageText));
          additionalPassRequired=isCompileJavaIncrementally(context);
          FSOperations.markDirtyRecursively(context,CompilationRound.NEXT,chunk);
        }
      }
 else {
        if (!errorsDetected) {
          globalMappings.differentiateOnNonIncrementalMake(delta,removedPaths,filesToCompile);
        }
      }
    }
 else {
      if (!errorsDetected) {
        globalMappings.differentiateOnRebuild(delta);
      }
    }
    if (errorsDetected) {
      return false;
    }
    context.processMessage(new ProgressMessage("Updating dependency information... [" + chunk.getPresentableShortName() + "]"));
    globalMappings.integrate(delta);
    return additionalPassRequired;
  }
 catch (  BuildDataCorruptedException e) {
    throw e.getCause();
  }
 finally {
    context.processMessage(new ProgressMessage(""));
  }
}
