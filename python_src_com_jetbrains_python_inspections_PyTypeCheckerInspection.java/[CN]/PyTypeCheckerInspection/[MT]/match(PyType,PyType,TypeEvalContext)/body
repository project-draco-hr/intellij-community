{
  if (superType == null || subType == null || superType instanceof PyUnknownType || subType instanceof PyUnknownType) {
    return true;
  }
  if (superType instanceof PyUnionType) {
    for (    PyType t : ((PyUnionType)superType).getMembers()) {
      if (match(t,subType,context)) {
        return true;
      }
    }
    return false;
  }
  if (subType instanceof PyUnionType) {
    for (    PyType t : ((PyUnionType)subType).getMembers()) {
      if (!match(superType,t,context)) {
        return false;
      }
    }
    return true;
  }
  if (superType instanceof PyClassType && subType instanceof PyClassType) {
    final PyClass superClass=((PyClassType)superType).getPyClass();
    final PyClass subClass=((PyClassType)subType).getPyClass();
    if (superType instanceof PyCollectionType && subType instanceof PyCollectionType) {
      if (!matchClasses(superClass,subClass)) {
        return false;
      }
      final PyType superElementType=((PyCollectionType)superType).getElementType(context);
      final PyType subElementType=((PyCollectionType)subType).getElementType(context);
      return match(superElementType,subElementType,context);
    }
 else     if (superType instanceof PyTupleType && subType instanceof PyTupleType) {
      final PyTupleType superTupleType=(PyTupleType)superType;
      final PyTupleType subTupleType=(PyTupleType)subType;
      if (superTupleType.getElementCount() != subTupleType.getElementCount()) {
        return false;
      }
 else {
        for (int i=0; i < superTupleType.getElementCount(); i++) {
          if (!match(superTupleType.getElementType(i),subTupleType.getElementType(i),context)) {
            return false;
          }
        }
        return true;
      }
    }
 else     if (matchClasses(superClass,subClass)) {
      return true;
    }
  }
  if (superType.equals(subType)) {
    return true;
  }
  final String superName=superType.getName();
  final String subName=subType.getName();
  final boolean subIsBool="bool".equals(subName);
  final boolean subIsInt="int".equals(subName);
  final boolean subIsLong="long".equals(subName);
  final boolean subIsFloat="float".equals(subName);
  if (superName == null || subName == null || superName.equals(subName) || ("int".equals(superName) && subIsBool) || ("long".equals(superName) && (subIsBool || subIsInt)) || ("float".equals(superName) && (subIsBool || subIsInt || subIsLong)) || ("complex".equals(superName) && (subIsBool || subIsInt || subIsLong|| subIsFloat))) {
    return true;
  }
  return false;
}
