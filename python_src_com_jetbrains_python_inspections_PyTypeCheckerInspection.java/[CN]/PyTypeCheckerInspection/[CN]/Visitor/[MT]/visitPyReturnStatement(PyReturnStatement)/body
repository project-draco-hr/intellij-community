{
  final PyExpression returnExpr=node.getExpression();
  if (returnExpr != null) {
    ScopeOwner owner=ScopeUtil.getScopeOwner(returnExpr);
    if (owner instanceof PyFunction) {
      final PyFunction function=(PyFunction)owner;
      final PyAnnotation annotation=function.getAnnotation();
      final String typeCommentAnnotation=function.getTypeCommentAnnotation();
      if (annotation != null || typeCommentAnnotation != null) {
        final PyType actual=myTypeEvalContext.getType(returnExpr);
        final PyType expected=myTypeEvalContext.getReturnType(function);
        if (!PyTypeChecker.match(expected,actual,myTypeEvalContext)) {
          final String expectedName=PythonDocumentationProvider.getTypeName(expected,myTypeEvalContext);
          final String actualName=PythonDocumentationProvider.getTypeName(actual,myTypeEvalContext);
          registerProblem(returnExpr,String.format("Expected type '%s', got '%s' instead",expectedName,actualName));
        }
      }
    }
  }
}
