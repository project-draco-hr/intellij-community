{
  final PyArgumentList args=node.getArgumentList();
  if (args != null) {
    final Map<PyGenericType,PyType> substitutions=new HashMap<PyGenericType,PyType>();
    final CallArgumentsMapping res=args.analyzeCall(resolveWithoutImplicits());
    final PyCallExpression.PyMarkedCallee markedCallee=res.getMarkedCallee();
    if (markedCallee != null) {
      final Callable callable=markedCallee.getCallable();
      final PyFunction function=callable.asMethod();
      if (function != null) {
        substitutions.putAll(PyTypeChecker.collectCallGenerics(function,node,myTypeEvalContext));
      }
    }
    for (    Map.Entry<PyExpression,PyNamedParameter> entry : res.getPlainMappedParams().entrySet()) {
      final PyNamedParameter p=entry.getValue();
      if (p.isPositionalContainer() || p.isKeywordContainer()) {
        continue;
      }
      final PyType argType=entry.getKey().getType(myTypeEvalContext);
      final PyType paramType=p.getType(myTypeEvalContext);
      checkTypes(paramType,argType,entry.getKey(),myTypeEvalContext,substitutions,true);
    }
  }
}
