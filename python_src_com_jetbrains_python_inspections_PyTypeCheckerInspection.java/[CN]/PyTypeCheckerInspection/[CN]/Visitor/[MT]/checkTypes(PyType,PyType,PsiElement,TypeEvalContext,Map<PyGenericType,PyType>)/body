{
  if (subType != null && superType != null) {
    if (!PyTypeChecker.match(superType,subType,context,substitutions)) {
      final String superName=PythonDocumentationProvider.getTypeName(superType,context);
      String expected=String.format("'%s'",superName);
      final boolean hasGenerics=PyTypeChecker.hasGenerics(superType,context);
      if (hasGenerics) {
        final Ref<PyType> subst=PyTypeChecker.substitute(superType,substitutions,context);
        if (subst != null) {
          expected=String.format("'%s' (matched generic type '%s')",PythonDocumentationProvider.getTypeName(subst.get(),context),superName);
        }
      }
      final String msg=String.format("Expected type %s, got '%s' instead",expected,PythonDocumentationProvider.getTypeName(subType,context));
      final ProblemHighlightType highlightType=hasGenerics ? ProblemHighlightType.WEAK_WARNING : ProblemHighlightType.GENERIC_ERROR_OR_WARNING;
      registerProblem(node,msg,highlightType,null);
      return msg;
    }
  }
  return null;
}
