{
  if (actual != null && expected != null) {
    if (!PyTypeChecker.match(expected,actual,context,substitutions)) {
      final String expectedName=PythonDocumentationProvider.getTypeName(expected,context);
      String quotedExpectedName=String.format("'%s'",expectedName);
      final boolean hasGenerics=PyTypeChecker.hasGenerics(expected,context);
      ProblemHighlightType highlightType=ProblemHighlightType.GENERIC_ERROR_OR_WARNING;
      if (hasGenerics) {
        final PyType substitute=PyTypeChecker.substitute(expected,substitutions,context);
        if (substitute != null) {
          quotedExpectedName=String.format("'%s' (matched generic type '%s')",PythonDocumentationProvider.getTypeName(substitute,context),expectedName);
          highlightType=ProblemHighlightType.WEAK_WARNING;
        }
      }
      final String actualName=PythonDocumentationProvider.getTypeName(actual,context);
      String msg=String.format("Expected type %s, got '%s' instead",quotedExpectedName,actualName);
      if (expected instanceof PyStructuralType) {
        final Set<String> expectedAttributes=((PyStructuralType)expected).getAttributeNames();
        final Set<String> actualAttributes=getAttributes(actual,context);
        if (actualAttributes != null) {
          final Sets.SetView<String> missingAttributes=Sets.difference(expectedAttributes,actualAttributes);
          if (missingAttributes.size() == 1) {
            msg=String.format("Type '%s' doesn't have expected attribute '%s'",actualName,missingAttributes.iterator().next());
          }
 else {
            msg=String.format("Type '%s' doesn't have expected attributes %s",actualName,StringUtil.join(missingAttributes,new Function<String,String>(){
              @Override public String fun(              String s){
                return String.format("'%s'",s);
              }
            }
,", "));
          }
        }
      }
      registerProblem(node,msg,highlightType);
      return msg;
    }
  }
  return null;
}
