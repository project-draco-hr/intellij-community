{
  final Map<PyGenericType,PyType> substitutions=new LinkedHashMap<PyGenericType,PyType>();
  final PyTypeChecker.AnalyzeCallResults results=PyTypeChecker.analyzeCallSite(callSite,myTypeEvalContext);
  if (results != null) {
    substitutions.putAll(PyTypeChecker.collectCallGenerics(results.getCallable(),results.getReceiver(),myTypeEvalContext));
    for (    Map.Entry<PyExpression,PyNamedParameter> entry : results.getArguments().entrySet()) {
      final PyNamedParameter p=entry.getValue();
      if (p.isPositionalContainer() || p.isKeywordContainer()) {
        continue;
      }
      final PyType argType=myTypeEvalContext.getType(entry.getKey());
      final PyType paramType=myTypeEvalContext.getType(p);
      checkTypes(paramType,argType,entry.getKey(),myTypeEvalContext,substitutions);
    }
  }
}
