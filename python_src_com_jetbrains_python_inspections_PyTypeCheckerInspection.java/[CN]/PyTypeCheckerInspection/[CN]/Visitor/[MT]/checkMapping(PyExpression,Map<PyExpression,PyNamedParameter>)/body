{
  final Map<PyExpression,Pair<String,ProblemHighlightType>> problems=new HashMap<PyExpression,Pair<String,ProblemHighlightType>>();
  final Map<PyGenericType,PyType> substitutions=new LinkedHashMap<PyGenericType,PyType>();
  boolean genericsCollected=false;
  for (  Map.Entry<PyExpression,PyNamedParameter> entry : mapping.entrySet()) {
    final PyNamedParameter param=entry.getValue();
    final PyExpression arg=entry.getKey();
    if (param.isPositionalContainer() || param.isKeywordContainer()) {
      continue;
    }
    final PyType paramType=myTypeEvalContext.getType(param);
    if (paramType == null) {
      continue;
    }
    final PyType argType=myTypeEvalContext.getType(arg);
    if (!genericsCollected) {
      substitutions.putAll(PyTypeChecker.unifyReceiver(receiver,myTypeEvalContext));
      genericsCollected=true;
    }
    final Pair<String,ProblemHighlightType> problem=checkTypes(paramType,argType,myTypeEvalContext,substitutions);
    if (problem != null) {
      problems.put(arg,problem);
    }
  }
  return problems;
}
