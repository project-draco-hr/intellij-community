{
  final PyExpression source=node.getForPart().getSource();
  if (source != null) {
    final PyType type=myTypeEvalContext.getType(source);
    final String iterableClassName=node.isAsync() ? PyNames.ASYNC_ITERABLE : PyNames.ITERABLE;
    if (type != null && !PyTypeChecker.isUnknown(type) && !PyABCUtil.isSubtype(type,iterableClassName,myTypeEvalContext)) {
      registerProblem(source,String.format("Expected 'collections.%s', got '%s' instead",iterableClassName,PythonDocumentationProvider.getTypeName(type,myTypeEvalContext)));
    }
  }
}
