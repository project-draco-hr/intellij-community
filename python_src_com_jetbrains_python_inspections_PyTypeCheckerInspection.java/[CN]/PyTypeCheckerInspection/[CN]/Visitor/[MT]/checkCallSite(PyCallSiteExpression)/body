{
  final Map<PyGenericType,PyType> substitutions=new LinkedHashMap<PyGenericType,PyType>();
  final List<PyTypeChecker.AnalyzeCallResults> resultsSet=PyTypeChecker.analyzeCallSite(callSite,myTypeEvalContext);
  if (!resultsSet.isEmpty()) {
    final PyTypeChecker.AnalyzeCallResults results=resultsSet.get(0);
    boolean genericsCollected=false;
    for (    Map.Entry<PyExpression,PyNamedParameter> entry : results.getArguments().entrySet()) {
      final PyNamedParameter p=entry.getValue();
      final PyExpression key=entry.getKey();
      if (p.isPositionalContainer() || p.isKeywordContainer()) {
        continue;
      }
      if (p.hasDefaultValue()) {
        final PyExpression value=p.getDefaultValue();
        String keyName=key.getName();
        if (key instanceof PyKeywordArgument) {
          final PyExpression valueExpression=((PyKeywordArgument)key).getValueExpression();
          keyName=valueExpression != null ? valueExpression.getName() : "";
        }
        if (value != null && keyName != null && keyName.equals(value.getName()))         continue;
      }
      final PyType paramType=myTypeEvalContext.getType(p);
      if (paramType == null) {
        continue;
      }
      final PyType argType=myTypeEvalContext.getType(key);
      if (!genericsCollected) {
        substitutions.putAll(PyTypeChecker.unifyReceiver(results.getReceiver(),myTypeEvalContext));
        genericsCollected=true;
      }
      checkTypes(paramType,argType,key,myTypeEvalContext,substitutions);
    }
  }
}
