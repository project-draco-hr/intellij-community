{
  final List<PyTypeChecker.AnalyzeCallResults> resultsSet=PyTypeChecker.analyzeCallSite(callSite,myTypeEvalContext);
  final List<Map<PyExpression,Pair<String,ProblemHighlightType>>> problemsSet=new ArrayList<Map<PyExpression,Pair<String,ProblemHighlightType>>>();
  for (  PyTypeChecker.AnalyzeCallResults results : resultsSet) {
    problemsSet.add(checkMapping(results.getReceiver(),results.getArguments()));
  }
  if (!problemsSet.isEmpty()) {
    Map<PyExpression,Pair<String,ProblemHighlightType>> minProblems=Collections.min(problemsSet,new Comparator<Map<PyExpression,Pair<String,ProblemHighlightType>>>(){
      @Override public int compare(      Map<PyExpression,Pair<String,ProblemHighlightType>> o1,      Map<PyExpression,Pair<String,ProblemHighlightType>> o2){
        return o1.size() - o2.size();
      }
    }
);
    for (    Map.Entry<PyExpression,Pair<String,ProblemHighlightType>> entry : minProblems.entrySet()) {
      registerProblem(entry.getKey(),entry.getValue().getFirst(),entry.getValue().getSecond());
    }
  }
}
