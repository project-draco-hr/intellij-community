{
  myFixture.configureByFile(getTestName(true) + ".py");
  final PyFunction function=assertInstanceOf(myFixture.getElementAtCaret(),PyFunction.class);
  final String destination=PyPsiUtils.getContainingFilePath(function);
  assertNotNull(destination);
  try {
    WriteCommandAction.runWriteCommandAction(myFixture.getProject(),new Runnable(){
      @Override public void run(){
        if (function.getContainingClass() != null) {
          new PyMakeMethodTopLevelProcessor(function,destination).run();
        }
 else {
          new PyMakeLocalFunctionTopLevelProcessor(function,destination).run();
        }
      }
    }
);
    myFixture.checkResultByFile(getTestName(true) + ".after.py");
  }
 catch (  IncorrectOperationException e) {
    if (message == null) {
      fail("Refactoring failed unexpectedly with message: " + e.getMessage());
    }
    assertEquals(message,e.getMessage());
  }
}
