{
  aClass.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitMethod(    PsiMethod method){
      if (method.isConstructor()) {
        final PsiCodeBlock body=method.getBody();
        if (body != null) {
          final PsiStatement[] statements=body.getStatements();
          if (statements.length > 0 && statements[0] instanceof PsiExpressionStatement) {
            final PsiExpression expression=((PsiExpressionStatement)statements[0]).getExpression();
            if (expression instanceof PsiMethodCallExpression) {
              final PsiMethod resolveMethod=((PsiMethodCallExpression)expression).resolveMethod();
              if (resolveMethod != null && resolveMethod.isConstructor()) {
                visitMethodCallExpression((PsiMethodCallExpression)expression);
              }
            }
          }
        }
      }
    }
    @Override public void visitClassInitializer(    PsiClassInitializer initializer){
    }
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      final PsiElement resolved=expression.resolve();
      if (resolved instanceof PsiField) {
        final PsiField field=(PsiField)resolved;
        if (aClass.equals(field.getContainingClass())) {
          candidates.remove(field);
        }
      }
      super.visitReferenceExpression(expression);
    }
  }
);
}
