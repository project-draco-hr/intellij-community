{
  final Set<PsiField> ignored=new HashSet<>();
  aClass.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitElement(    PsiElement element){
      if (!candidates.isEmpty())       super.visitElement(element);
    }
    @Override public void visitMethod(    PsiMethod method){
      super.visitMethod(method);
      final PsiCodeBlock body=method.getBody();
      if (body != null) {
        checkCodeBlock(body,candidates,usedFields,ignoreFieldsUsedInMultipleMethods,ignored);
      }
    }
    @Override public void visitLambdaExpression(    PsiLambdaExpression expression){
      super.visitLambdaExpression(expression);
      final PsiElement body=expression.getBody();
      if (body != null) {
        checkCodeBlock(body,candidates,usedFields,ignoreFieldsUsedInMultipleMethods,ignored);
      }
    }
    @Override public void visitClassInitializer(    PsiClassInitializer initializer){
      super.visitClassInitializer(initializer);
      checkCodeBlock(initializer.getBody(),candidates,usedFields,ignoreFieldsUsedInMultipleMethods,ignored);
    }
  }
);
}
