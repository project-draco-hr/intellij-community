{
  FileChooserDescriptor chooserDescriptor=FileChooserDescriptorFactory.createSingleLocalFileDescriptor();
  chooserDescriptor.setDescription(description);
  chooserDescriptor.setHideIgnored(false);
  chooserDescriptor.setTitle(title);
  VirtualFile initialDir;
  if (oldPath != null) {
    final File oldFile=new File(oldPath);
    initialDir=LocalFileSystem.getInstance().findFileByIoFile(oldFile);
    if (initialDir == null && oldFile.getParentFile() != null) {
      initialDir=LocalFileSystem.getInstance().findFileByIoFile(oldFile.getParentFile());
    }
  }
 else {
    initialDir=null;
  }
  final AsyncPromise<String> result=new AsyncPromise<String>();
  FileChooser.chooseFiles(chooserDescriptor,null,parent,initialDir,new FileChooser.FileChooserConsumer(){
    @Override public void consume(    List<VirtualFile> files){
      VirtualFile file=files.get(0);
      if (file.isDirectory()) {
        result.setResult(file.getPath() + '/' + new File(DEFAULT_PATH).getName());
      }
 else {
        result.setResult(file.getPath());
      }
    }
    @Override public void cancelled(){
      result.setError("");
    }
  }
);
  return result;
}
