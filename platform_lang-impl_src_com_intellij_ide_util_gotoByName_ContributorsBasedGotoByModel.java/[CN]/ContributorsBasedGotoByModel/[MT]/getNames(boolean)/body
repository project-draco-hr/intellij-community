{
  final THashSet<String> allNames=ContainerUtil.newTroveSet();
  long start=System.currentTimeMillis();
  List<ChooseByNameContributor> liveContribs=filterDumb(myContributors);
  ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  Processor<ChooseByNameContributor> processor=new ReadActionProcessor<ChooseByNameContributor>(){
    @Override public boolean processInReadAction(    ChooseByNameContributor contributor){
      try {
        if (!myProject.isDisposed()) {
          String[] names=contributor.getNames(myProject,checkBoxState);
synchronized (allNames) {
            allNames.ensureCapacity(names.length);
            ContainerUtil.addAll(allNames,names);
          }
        }
      }
 catch (      ProcessCanceledException ex) {
      }
catch (      IndexNotReadyException ex) {
      }
catch (      Exception ex) {
        LOG.error(ex);
      }
      return true;
    }
  }
;
  if (!JobLauncher.getInstance().invokeConcurrentlyUnderProgress(liveContribs,indicator,true,processor)) {
    throw new ProcessCanceledException();
  }
  if (indicator != null) {
    indicator.checkCanceled();
  }
  long finish=System.currentTimeMillis();
  if (LOG.isDebugEnabled()) {
    LOG.debug("getNames(): " + (finish - start) + "ms; (got "+ allNames.size()+ " elements)");
  }
  return ArrayUtil.toStringArray(allNames);
}
