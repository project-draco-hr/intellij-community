{
  final Set<String> superClasses=new HashSet<String>();
  final Set<PyClass> extractedClasses=new HashSet<PyClass>();
  final List<PyFunction> methods=new ArrayList<PyFunction>();
  for (  PyMemberInfo member : selectedMemberInfos) {
    final PyElement element=member.getMember();
    if (element instanceof PyFunction)     methods.add((PyFunction)element);
 else     if (element instanceof PyClass) {
      superClasses.add(element.getName());
      extractedClasses.add((PyClass)element);
    }
 else     LOG.error("unmatched member class " + element.getClass());
  }
  final Set<PyClass> rememberedSet=PyClassRefactoringUtil.rememberClassReferences(methods,extractedClasses);
  CommandProcessor.getInstance().executeCommand(clazz.getProject(),new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          PyClassRefactoringUtil.moveMethods(methods,superClass);
          PyClassRefactoringUtil.moveSuperclasses(clazz,superClasses,superClass);
          PyClassRefactoringUtil.insertPassIfNeeded(clazz);
          PyClassRefactoringUtil.restoreImports(superClass,clazz,rememberedSet);
        }
      }
);
    }
  }
,RefactoringBundle.message("pull.members.up.title"),null);
  return superClass;
}
