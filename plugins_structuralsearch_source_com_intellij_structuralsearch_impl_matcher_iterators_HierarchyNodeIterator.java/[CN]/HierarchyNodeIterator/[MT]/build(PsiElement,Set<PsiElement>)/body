{
  if (current != null) {
    final String str=current instanceof PsiClass ? ((PsiClass)current).getName() : current.getText();
    if (MatchUtils.compareWithNoDifferenceToPackage(str,"Object")) {
      if (objectTaken)       return;
      objectTaken=true;
    }
    PsiElement element=MatchUtils.getReferencedElement(current);
    if (element instanceof PsiClass) {
      if (visited.contains(element))       return;
      visited.add(element);
      final PsiClass clazz=(PsiClass)element;
      if (!firstElementTaken && acceptFirstElement || firstElementTaken)       remaining.add(clazz);
      firstElementTaken=true;
      if (clazz instanceof PsiAnonymousClass) {
        build(((PsiAnonymousClass)clazz).getBaseClassReference(),visited);
        return;
      }
      if (acceptClasses) {
        final PsiReferenceList clazzExtendsList=clazz.getExtendsList();
        final PsiElement[] extendsList=(clazzExtendsList != null) ? clazzExtendsList.getReferenceElements() : null;
        if (extendsList != null) {
          for (          PsiElement anExtendsList : extendsList) {
            build(anExtendsList,visited);
          }
          if (!objectTaken) {
            final Project project=clazz.getProject();
            final PsiClassType javaLangObject=PsiType.getJavaLangObject(PsiManager.getInstance(project),GlobalSearchScope.allScope(project));
            build(javaLangObject.resolve(),visited);
          }
        }
      }
      if (acceptInterfaces) {
        final PsiReferenceList implementsList=clazz.getImplementsList();
        if (implementsList != null) {
          final PsiElement[] implementsListElements=implementsList.getReferenceElements();
          for (          PsiElement anImplementsList : implementsListElements) {
            build(anImplementsList,visited);
          }
        }
      }
    }
 else {
      remaining.add(current);
    }
  }
}
