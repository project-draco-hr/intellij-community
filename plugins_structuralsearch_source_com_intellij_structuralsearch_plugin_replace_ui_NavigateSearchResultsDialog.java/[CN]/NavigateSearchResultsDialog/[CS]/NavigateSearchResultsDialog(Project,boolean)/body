{
  super((Frame)WindowManager.getInstance().suggestParentWindow(project),false);
  setTitle(SSRBundle.message(isReplace ? "structural.replace.title" : "structural.search.title"));
  setOKButtonText(SSRBundle.message("search.result.dialog.next.button"));
  this.project=project;
  index=-1;
  if (isReplace) {
    replaceButton=createJButtonForAction(new AbstractAction(){
      public void actionPerformed(      ActionEvent e){
        replacements.get(index).setReplacement(replacement.getDocument().getText());
        replaceCurrentResult();
        if (index + 1 < replacements.size() || !matchingProcess.isEnded())         doOKAction();
 else         setVisible(false);
      }
    }
);
    replaceAll=createJButtonForAction(new AbstractAction(){
      public void actionPerformed(      ActionEvent e){
        setVisible(false);
        doAll();
      }
    }
);
    replaceButton.setText(SSRBundle.message("replace.preview.oktext"));
    replaceAll.setText(SSRBundle.message("search.result.dialog.replace.all.button"));
  }
class PreviousMatchAction extends AbstractAction {
    PreviousMatchAction(){
      super(SSRBundle.message("search.result.dialog.previuos.button"));
      putValue(MNEMONIC_KEY,new Integer('P'));
    }
    public void actionPerformed(    ActionEvent e){
      if (index - 1 >= 0) {
        --index;
        navigateOne(index);
      }
    }
  }
  previousMatch=new PreviousMatchAction();
  setOKActionEnabled(false);
  previousMatch.setEnabled(false);
  statusBar=(StatusBarEx)WindowManagerEx.getInstanceEx().getStatusBar(project);
  myMatchingProcess=new ProgressIndicatorBase(){
    public void cancel(){
      super.cancel();
      matchingProcess.stop();
    }
  }
;
  statusBar.add(myMatchingProcess,new ProcessInfo());
  init();
}
