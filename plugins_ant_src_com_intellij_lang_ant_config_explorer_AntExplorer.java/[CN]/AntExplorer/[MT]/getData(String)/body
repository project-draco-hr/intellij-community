{
  if (CommonDataKeys.NAVIGATABLE.is(dataId)) {
    final AntBuildFile buildFile=getCurrentBuildFile();
    if (buildFile == null) {
      return null;
    }
    final VirtualFile file=buildFile.getVirtualFile();
    if (file == null) {
      return null;
    }
    final TreePath treePath=myTree.getLeadSelectionPath();
    if (treePath == null) {
      return null;
    }
    final DefaultMutableTreeNode node=(DefaultMutableTreeNode)treePath.getLastPathComponent();
    if (node == null) {
      return null;
    }
    if (node.getUserObject() instanceof AntTargetNodeDescriptor) {
      final AntTargetNodeDescriptor targetNodeDescriptor=(AntTargetNodeDescriptor)node.getUserObject();
      final AntBuildTargetBase buildTarget=targetNodeDescriptor.getTarget();
      final OpenFileDescriptor descriptor=buildTarget.getOpenFileDescriptor();
      if (descriptor != null) {
        final VirtualFile descriptorFile=descriptor.getFile();
        if (descriptorFile.isValid()) {
          return descriptor;
        }
      }
    }
    if (file.isValid()) {
      return new OpenFileDescriptor(myProject,file);
    }
  }
 else   if (PlatformDataKeys.HELP_ID.is(dataId)) {
    return HelpID.ANT;
  }
 else   if (PlatformDataKeys.TREE_EXPANDER.is(dataId)) {
    return myProject != null ? myTreeExpander : null;
  }
 else   if (CommonDataKeys.VIRTUAL_FILE_ARRAY.is(dataId)) {
    final List<VirtualFile> virtualFiles=collectAntFiles(new Function<AntBuildFile,VirtualFile>(){
      @Override public VirtualFile fun(      AntBuildFile buildFile){
        final VirtualFile virtualFile=buildFile.getVirtualFile();
        if (virtualFile != null && virtualFile.isValid()) {
          return virtualFile;
        }
        return null;
      }
    }
);
    return virtualFiles == null ? null : virtualFiles.toArray(new VirtualFile[virtualFiles.size()]);
  }
 else   if (LangDataKeys.PSI_ELEMENT_ARRAY.is(dataId)) {
    final List<PsiElement> elements=collectAntFiles(new Function<AntBuildFile,PsiElement>(){
      @Override public PsiElement fun(      AntBuildFile buildFile){
        return buildFile.getAntFile();
      }
    }
);
    return elements == null ? null : elements.toArray(new PsiElement[elements.size()]);
  }
  return super.getData(dataId);
}
