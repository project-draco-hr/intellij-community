{
  final PsiElement element=PyUtil.findNonWhitespaceAtOffset(file,editor.getCaretModel().getOffset());
  PyFunction problemFunction=PsiTreeUtil.getParentOfType(element,PyFunction.class);
  if (problemFunction == null)   return;
  final PyClass containingClass=problemFunction.getContainingClass();
  if (containingClass == null)   return;
  final PyDecoratorList decoratorList=problemFunction.getDecoratorList();
  if (decoratorList != null) {
    final PyDecorator decorator=decoratorList.findDecorator(PyNames.STATICMETHOD);
    if (decorator != null)     decorator.delete();
  }
  final PyElementGenerator generator=PyElementGenerator.getInstance(project);
  final PsiElement copy=problemFunction.copy();
  final PyStatementList classStatementList=containingClass.getStatementList();
  classStatementList.deleteChildRange(problemFunction,problemFunction);
  if (classStatementList.getStatements().length < 1) {
    classStatementList.add(generator.createPassStatement());
  }
  file.addAfter(copy,containingClass);
}
