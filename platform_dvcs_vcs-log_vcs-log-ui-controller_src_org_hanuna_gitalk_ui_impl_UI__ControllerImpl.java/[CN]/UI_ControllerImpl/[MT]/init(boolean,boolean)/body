{
  final Consumer<ProgressIndicator> doInit=new Consumer<ProgressIndicator>(){
    @Override public void consume(    final ProgressIndicator indicator){
      events.setState(ControllerListener.State.PROGRESS);
      dataLoader=new DataLoaderImpl(myProject,reusePreviousGitOutput,commitDataCache,myLogProvider);
      Consumer<String> statusUpdater=new Consumer<String>(){
        @Override public void consume(        String key){
          events.setUpdateProgressMessage(key);
          indicator.setText(key);
        }
      }
;
      try {
        dataLoader.readNextPart(statusUpdater,rebaseDelegate.getFakeCommitsInfo(),myRoot);
        dataInit();
        events.setState(ControllerListener.State.USUAL);
      }
 catch (      IOException e) {
        events.setState(ControllerListener.State.ERROR);
        events.setErrorMessage(e.getMessage());
      }
      ((GraphTableModel)getGraphTableModel()).addReworded(rebaseDelegate.reworded);
      ((GraphTableModel)getGraphTableModel()).addFixedUp(rebaseDelegate.fixedUp);
      UIUtil.invokeAndWaitIfNeeded(new Runnable(){
        @Override public void run(){
          updateUI();
          for (          Hash hash : rebaseDelegate.selected) {
            events.addToSelection(hash);
          }
        }
      }
);
    }
  }
;
  if (inBackground) {
    UIUtil.invokeAndWaitIfNeeded(new Runnable(){
      @Override public void run(){
        myDataLoaderQueue.run(new Task.Backgroundable(myProject,"Loading...",false){
          public void run(          @NotNull final ProgressIndicator indicator){
            doInit.consume(indicator);
          }
        }
);
      }
    }
);
  }
 else {
    doInit.consume(new EmptyProgressIndicator());
  }
}
