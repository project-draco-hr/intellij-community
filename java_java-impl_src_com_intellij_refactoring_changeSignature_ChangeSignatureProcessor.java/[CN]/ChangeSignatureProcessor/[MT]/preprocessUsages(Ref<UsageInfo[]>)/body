{
  for (  ChangeSignatureUsageProcessor processor : ChangeSignatureUsageProcessor.EP_NAME.getExtensions()) {
    if (!processor.setupDefaultValues(myChangeInfo,refUsages,myProject))     return false;
  }
  MultiMap<PsiElement,String> conflictDescriptions=new MultiMap<PsiElement,String>();
  collectConflictsFromExtensions(refUsages,conflictDescriptions,myChangeInfo);
  final UsageInfo[] usagesIn=refUsages.get();
  RenameUtil.addConflictDescriptions(usagesIn,conflictDescriptions);
  Set<UsageInfo> usagesSet=new HashSet<UsageInfo>(Arrays.asList(usagesIn));
  RenameUtil.removeConflictUsages(usagesSet);
  if (!conflictDescriptions.isEmpty()) {
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      if (ConflictsInTestsException.isTestIgnore())       return true;
      throw new ConflictsInTestsException(conflictDescriptions.values());
    }
    if (myPrepareSuccessfulSwingThreadCallback != null) {
      ConflictsDialog dialog=prepareConflictsDialog(conflictDescriptions,usagesIn);
      if (!dialog.showAndGet()) {
        if (dialog.isShowConflicts())         prepareSuccessful();
        return false;
      }
    }
  }
  if (myChangeInfo.isReturnTypeChanged()) {
    askToRemoveCovariantOverriders(usagesSet);
  }
  refUsages.set(usagesSet.toArray(new UsageInfo[usagesSet.size()]));
  prepareSuccessful();
  return true;
}
