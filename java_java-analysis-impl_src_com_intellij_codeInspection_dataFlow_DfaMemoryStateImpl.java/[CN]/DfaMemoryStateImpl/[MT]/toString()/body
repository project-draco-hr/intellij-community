{
  StringBuilder result=new StringBuilder();
  result.append('<');
  if (myEphemeral) {
    result.append("ephemeral, ");
  }
  for (  SortedIntSet set : getNonTrivialEqClasses()) {
    appendClass(result,set);
  }
  if (!myDistinctClasses.isEmpty()) {
    result.append("\n  distincts: ");
    List<String> distincts=new ArrayList<String>();
    for (    Set<SortedIntSet> pair : getDistinctClassPairs()) {
      ArrayList<SortedIntSet> list=new ArrayList<SortedIntSet>(pair);
      StringBuilder one=new StringBuilder();
      one.append("{");
      appendClass(one,list.get(0));
      one.append(", ");
      appendClass(one,list.get(1));
      one.append("}");
      distincts.add(one.toString());
    }
    Collections.sort(distincts);
    result.append(StringUtil.join(distincts," "));
  }
  if (!myStack.isEmpty()) {
    result.append("\n  stack: ").append(StringUtil.join(myStack,","));
  }
  if (!myVariableStates.isEmpty()) {
    result.append("\n  vars: ");
    for (    Map.Entry<DfaVariableValue,DfaVariableState> entry : myVariableStates.entrySet()) {
      result.append("\n[").append(entry.getKey()).append("->").append(entry.getValue()).append("]");
    }
  }
  if (!myUnknownVariables.isEmpty()) {
    result.append("\n  unknowns: ").append(new HashSet<DfaVariableValue>(myUnknownVariables));
  }
  result.append('>');
  return result.toString();
}
