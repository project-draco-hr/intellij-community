{
  DfaVariableValue varNegated=varPlain.getNegatedValue();
  final int idPlain=varPlain.getID();
  final int idNegated=varNegated == null ? -1 : varNegated.getID();
  int[] classes=myIdToEqClassesIndices.get(idPlain);
  int[] negatedClasses=myIdToEqClassesIndices.get(idNegated);
  int[] result=ArrayUtil.mergeArrays(ObjectUtils.notNull(classes,ArrayUtil.EMPTY_INT_ARRAY),ObjectUtils.notNull(negatedClasses,ArrayUtil.EMPTY_INT_ARRAY));
  int interruptCount=0;
  for (  int varClassIndex : result) {
    EqClass varClass=myEqClasses.get(varClassIndex);
    if ((++interruptCount & 0xf) == 0) {
      ProgressManager.checkCanceled();
    }
    varClass=new EqClass(varClass);
    myEqClasses.set(varClassIndex,varClass);
    for (    int id : varClass.toNativeArray()) {
      int idUnwrapped;
      if (id == idPlain || id == idNegated || (idUnwrapped=unwrap(myFactory.getValue(id)).getID()) == idPlain || idUnwrapped == idNegated) {
        varClass.removeValue(id);
      }
    }
    if (varClass.isEmpty()) {
      myEqClasses.set(varClassIndex,null);
      for (TLongIterator iterator=myDistinctClasses.iterator(); iterator.hasNext(); ) {
        long pair=iterator.next();
        if (low(pair) == varClassIndex || high(pair) == varClassIndex) {
          iterator.remove();
        }
      }
    }
 else     if (varClass.containsConstantsOnly()) {
      for (TLongIterator iterator=myDistinctClasses.iterator(); iterator.hasNext(); ) {
        long pair=iterator.next();
        if (low(pair) == varClassIndex && myEqClasses.get(high(pair)).containsConstantsOnly() || high(pair) == varClassIndex && myEqClasses.get(low(pair)).containsConstantsOnly()) {
          iterator.remove();
        }
      }
    }
  }
  removeAllFromMap(idPlain);
  removeAllFromMap(idNegated);
  myVariableStates.remove(varPlain);
  if (varNegated != null) {
    myVariableStates.remove(varNegated);
  }
  if (markUnknown) {
    myUnknownVariables.add(varPlain);
  }
  myCachedNonTrivialEqClasses=null;
  myCachedDistinctClassPairs=null;
  myCachedHash=null;
}
