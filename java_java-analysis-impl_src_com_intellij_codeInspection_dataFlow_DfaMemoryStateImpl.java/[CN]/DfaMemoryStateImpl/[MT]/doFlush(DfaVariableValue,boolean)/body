{
  DfaVariableValue varNegated=varPlain.getNegatedValue();
  final int idPlain=varPlain.getID();
  final int idNegated=varNegated == null ? -1 : varNegated.getID();
  int size=myEqClasses.size();
  int interruptCount=0;
  for (int varClassIndex=0; varClassIndex < size; varClassIndex++) {
    EqClass varClass=myEqClasses.get(varClassIndex);
    if (varClass == null)     continue;
    for (int i=0; i < varClass.size(); i++) {
      if ((++interruptCount & 0xf) == 0) {
        ProgressManager.checkCanceled();
      }
      int cl=varClass.get(i);
      DfaValue value=myFactory.getValue(cl);
      if (mine(idPlain,value) || idNegated >= 0 && mine(idNegated,value)) {
        myEqClasses.set(varClassIndex,varClass=new EqClass(varClass));
        varClass.remove(i);
        break;
      }
    }
    if (varClass.isEmpty()) {
      myEqClasses.set(varClassIndex,null);
      for (TLongIterator iterator=myDistinctClasses.iterator(); iterator.hasNext(); ) {
        long pair=iterator.next();
        if (low(pair) == varClassIndex || high(pair) == varClassIndex) {
          iterator.remove();
        }
      }
    }
 else     if (varClass.containsConstantsOnly()) {
      for (TLongIterator iterator=myDistinctClasses.iterator(); iterator.hasNext(); ) {
        long pair=iterator.next();
        if (low(pair) == varClassIndex && myEqClasses.get(high(pair)).containsConstantsOnly() || high(pair) == varClassIndex && myEqClasses.get(low(pair)).containsConstantsOnly()) {
          iterator.remove();
        }
      }
    }
  }
  myVariableStates.remove(varPlain);
  if (varNegated != null) {
    myVariableStates.remove(varNegated);
  }
  if (markUnknown) {
    myUnknownVariables.add(varPlain);
  }
  myCachedNonTrivialEqClasses=null;
  myCachedDistinctClassPairs=null;
  myCachedHash=null;
}
