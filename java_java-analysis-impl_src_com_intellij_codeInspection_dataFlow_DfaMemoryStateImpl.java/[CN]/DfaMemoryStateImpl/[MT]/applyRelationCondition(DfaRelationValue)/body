{
  DfaValue dfaLeft=dfaRelation.getLeftOperand();
  DfaValue dfaRight=dfaRelation.getRightOperand();
  if (dfaLeft instanceof DfaUnknownValue || dfaRight instanceof DfaUnknownValue)   return true;
  boolean isNegated=dfaRelation.isNegated();
  if (dfaLeft instanceof DfaTypeValue && ((DfaTypeValue)dfaLeft).isNotNull() && dfaRight == myFactory.getConstFactory().getNull()) {
    return isNegated;
  }
  if (dfaRight instanceof DfaTypeValue) {
    if (dfaLeft instanceof DfaVariableValue) {
      DfaVariableValue dfaVar=(DfaVariableValue)dfaLeft;
      if (isUnknownState(dfaVar))       return true;
      if (!dfaRelation.isInstanceOf()) {
        if (((DfaTypeValue)dfaRight).isNotNull() && isNull(dfaVar)) {
          return isNegated;
        }
        return true;
      }
      if (isNegated) {
        DfaVariableState newState=getVariableState(dfaVar).withNotInstanceofValue((DfaTypeValue)dfaRight);
        if (newState != null) {
          setVariableState(dfaVar,newState);
          return true;
        }
        return applyRelation(dfaVar,myFactory.getConstFactory().getNull(),false);
      }
      if (applyRelation(dfaVar,myFactory.getConstFactory().getNull(),true)) {
        DfaVariableState newState=getVariableState(dfaVar).withInstanceofValue((DfaTypeValue)dfaRight);
        if (newState != null) {
          setVariableState(dfaVar,newState);
          return true;
        }
      }
      return false;
    }
    return true;
  }
  if (isEffectivelyNaN(dfaLeft) || isEffectivelyNaN(dfaRight)) {
    applyEquivalenceRelation(dfaRelation,dfaLeft,dfaRight);
    return isNegated;
  }
  if (canBeNaN(dfaLeft) || canBeNaN(dfaRight)) {
    applyEquivalenceRelation(dfaRelation,dfaLeft,dfaRight);
    return true;
  }
  return applyEquivalenceRelation(dfaRelation,dfaLeft,dfaRight);
}
