{
  DfaValue dfaLeft=dfaRelation.getLeftOperand();
  DfaValue dfaRight=dfaRelation.getRightOperand();
  if (dfaLeft instanceof DfaUnknownValue || dfaRight instanceof DfaUnknownValue)   return true;
  boolean isNegated=dfaRelation.isNegated();
  if (dfaLeft instanceof DfaTypeValue && ((DfaTypeValue)dfaLeft).isNotNull() && dfaRight == myFactory.getConstFactory().getNull()) {
    return isNegated;
  }
  if (dfaRight instanceof DfaTypeValue) {
    if (dfaLeft instanceof DfaVariableValue) {
      DfaVariableState varState=getVariableState((DfaVariableValue)dfaLeft);
      DfaVariableValue dfaVar=(DfaVariableValue)dfaLeft;
      if (isNegated) {
        return varState.addNotInstanceofValue((DfaTypeValue)dfaRight) || applyCondition(compareToNull(dfaVar,false));
      }
      return applyCondition(compareToNull(dfaVar,true)) && varState.setInstanceofValue((DfaTypeValue)dfaRight);
    }
    return true;
  }
  if (isNull(dfaRight) && compareVariableWithNull(dfaLeft) || isNull(dfaLeft) && compareVariableWithNull(dfaRight)) {
    return isNegated;
  }
  if (isEffectivelyNaN(dfaLeft) || isEffectivelyNaN(dfaRight)) {
    applyEquivalenceRelation(dfaRelation,dfaLeft,dfaRight);
    return isNegated;
  }
  if (canBeNaN(dfaLeft) || canBeNaN(dfaRight)) {
    applyEquivalenceRelation(dfaRelation,dfaLeft,dfaRight);
    return true;
  }
  return applyEquivalenceRelation(dfaRelation,dfaLeft,dfaRight);
}
