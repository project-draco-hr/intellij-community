{
  int size=in.readUnsignedShort();
  pool=new ArrayList<PooledConstant>(size);
  BitSet[] nextPass={new BitSet(size),new BitSet(size),new BitSet(size)};
  pool.add(null);
  for (int i=1; i < size; i++) {
    byte tag=(byte)in.readUnsignedByte();
switch (tag) {
case CodeConstants.CONSTANT_Utf8:
      pool.add(new PrimitiveConstant(CodeConstants.CONSTANT_Utf8,in.readUTF()));
    break;
case CodeConstants.CONSTANT_Integer:
  pool.add(new PrimitiveConstant(CodeConstants.CONSTANT_Integer,new Integer(in.readInt())));
break;
case CodeConstants.CONSTANT_Float:
pool.add(new PrimitiveConstant(CodeConstants.CONSTANT_Float,new Float(in.readFloat())));
break;
case CodeConstants.CONSTANT_Long:
pool.add(new PrimitiveConstant(CodeConstants.CONSTANT_Long,new Long(in.readLong())));
pool.add(null);
i++;
break;
case CodeConstants.CONSTANT_Double:
pool.add(new PrimitiveConstant(CodeConstants.CONSTANT_Double,new Double(in.readDouble())));
pool.add(null);
i++;
break;
case CodeConstants.CONSTANT_Class:
case CodeConstants.CONSTANT_String:
case CodeConstants.CONSTANT_MethodType:
pool.add(new PrimitiveConstant(tag,in.readUnsignedShort()));
nextPass[0].set(i);
break;
case CodeConstants.CONSTANT_NameAndType:
pool.add(new LinkConstant(tag,in.readUnsignedShort(),in.readUnsignedShort()));
nextPass[0].set(i);
break;
case CodeConstants.CONSTANT_Fieldref:
case CodeConstants.CONSTANT_Methodref:
case CodeConstants.CONSTANT_InterfaceMethodref:
case CodeConstants.CONSTANT_InvokeDynamic:
pool.add(new LinkConstant(tag,in.readUnsignedShort(),in.readUnsignedShort()));
nextPass[1].set(i);
break;
case CodeConstants.CONSTANT_MethodHandle:
pool.add(new LinkConstant(tag,in.readUnsignedByte(),in.readUnsignedShort()));
nextPass[2].set(i);
break;
}
}
for (BitSet pass : nextPass) {
int idx=0;
while ((idx=pass.nextSetBit(idx + 1)) > 0) {
pool.get(idx).resolveConstant(this);
}
}
interceptor=DecompilerContext.getPoolInterceptor();
}
