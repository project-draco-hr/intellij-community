{
  final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  final MatchResultSink sink=new MatchResultSink(){
    int count;
    public void setMatchingProcess(    MatchingProcess _process){
      process=_process;
      findStarted();
    }
    public void processFile(    PsiFile element){
      final VirtualFile virtualFile=element.getVirtualFile();
      if (virtualFile != null)       progress.setText(SSRBundle.message("looking.in.progress.message",virtualFile.getPresentableName()));
    }
    public void matchingFinished(){
      if (mySearchContext.getProject().isDisposed())       return;
      findEnded();
      progress.setText(SSRBundle.message("found.progress.message",count));
    }
    public ProgressIndicator getProgressIndicator(){
      return progress;
    }
    public void newMatch(    MatchResult result){
      UsageInfo info;
      if (MatchResult.MULTI_LINE_MATCH.equals(result.getName())) {
        int start=-1;
        int end=-1;
        PsiElement parent=result.getMatchRef().getElement().getParent();
        for (        final MatchResult matchResult : ((MatchResultImpl)result).getMatches()) {
          PsiElement el=matchResult.getMatchRef().getElement();
          final int elementStart=el.getTextRange().getStartOffset();
          if (start == -1 || start > elementStart) {
            start=elementStart;
          }
          final int newend=elementStart + el.getTextLength();
          if (newend > end) {
            end=newend;
          }
        }
        final int parentStart=parent.getTextRange().getStartOffset();
        int startOffset=start - parentStart;
        info=new UsageInfo(parent,startOffset,end - parentStart);
      }
 else {
        info=new UsageInfo(result.getMatch());
      }
      Usage usage=new UsageInfo2UsageAdapter(info);
      processor.process(usage);
      foundUsage(result,usage);
      ++count;
    }
  }
;
  try {
    new Matcher(mySearchContext.getProject()).findMatches(sink,myConfiguration.getMatchOptions());
  }
 catch (  final StructuralSearchException e) {
    final Alarm alarm=new Alarm();
    alarm.addRequest(new Runnable(){
      @Override public void run(){
        NotificationGroup.toolWindowGroup("Structural Search",ToolWindowId.FIND).createNotification(SSRBundle.message("problem",e.getMessage()),MessageType.ERROR).notify(mySearchContext.getProject());
      }
    }
,100,ModalityState.NON_MODAL);
  }
}
