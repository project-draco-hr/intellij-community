{
  final PsiExpression condition=statement.getCondition();
  if (condition == null) {
    return;
  }
  final Collection<PsiComment> comments=ContainerUtil.map(PsiTreeUtil.findChildrenOfType(statement,PsiComment.class),new Function<PsiComment,PsiComment>(){
    @Override public PsiComment fun(    PsiComment comment){
      return (PsiComment)comment.copy();
    }
  }
);
  final String conditionText=condition.getText();
  final PsiStatement thenBranch=statement.getThenBranch();
  final PsiExpressionStatement assignmentStatement=(PsiExpressionStatement)ControlFlowUtils.stripBraces(thenBranch);
  final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)assignmentStatement.getExpression();
  final PsiJavaToken operator=assignmentExpression.getOperationSign();
  final String operand=operator.getText();
  final PsiExpression lhs=assignmentExpression.getLExpression();
  final String lhsText=lhs.getText();
  final PsiElement parent=statement.getParent();
  for (  PsiComment comment : comments) {
    parent.addBefore(comment,statement);
  }
  PsiReplacementUtil.replaceStatement(statement,lhsText + operand + conditionText+ ';');
}
