{
  browsersEditor=new TableModelEditor<ConfigurableWebBrowser>(WebBrowserManager.getInstance().getList(),new ColumnInfo[]{new EditableColumnInfo<ConfigurableWebBrowser,Boolean>(){
    @Override public Class getColumnClass(){
      return Boolean.class;
    }
    @Override public Boolean valueOf(    ConfigurableWebBrowser item){
      return browsersEditor.getEffective(item).isActive();
    }
    @Override public void setValue(    ConfigurableWebBrowser item,    Boolean value){
      if (value != item.isActive()) {
        browsersEditor.getMutable(item).setActive(value);
      }
    }
  }
,new EditableColumnInfo<ConfigurableWebBrowser,String>("Name"){
    @Override public String valueOf(    ConfigurableWebBrowser item){
      return browsersEditor.getEffective(item).getName();
    }
    @Override public void setValue(    ConfigurableWebBrowser item,    String value){
      if (!value.equals(item.getName())) {
        browsersEditor.getMutable(item).setName(value);
      }
    }
  }
,new EditableColumnInfo<ConfigurableWebBrowser,BrowserFamily>("Family"){
    @Override public Class getColumnClass(){
      return BrowserFamily.class;
    }
    @Override public BrowserFamily valueOf(    ConfigurableWebBrowser item){
      return browsersEditor.getEffective(item).getFamily();
    }
    @Override public void setValue(    ConfigurableWebBrowser item,    BrowserFamily value){
      if (value != item.getFamily()) {
        browsersEditor.getMutable(item).setFamily(value);
      }
    }
    @Nullable @Override public TableCellRenderer getRenderer(    ConfigurableWebBrowser item){
      return IconTableCellRenderer.ICONABLE;
    }
    @Nullable @Override public TableCellEditor getEditor(    ConfigurableWebBrowser item){
      return ComboBoxTableCellEditor.INSTANCE;
    }
  }
,new EditableColumnInfo<ConfigurableWebBrowser,String>("Path"){
    @Override public String valueOf(    ConfigurableWebBrowser info){
      return browsersEditor.getEffective(info).getPath();
    }
    @Override public void setValue(    ConfigurableWebBrowser item,    String value){
      String normalizedValue=StringUtil.nullize(value,true);
      if (!Comparing.equal(normalizedValue,item.getPath())) {
        browsersEditor.getMutable(item).setPath(normalizedValue);
      }
    }
    @Nullable @Override public TableCellEditor getEditor(    ConfigurableWebBrowser item){
      return new LocalPathCellEditor().fileChooserDescriptor(appFileChooserDescriptor);
    }
  }
},new Function<ConfigurableWebBrowser,ConfigurableWebBrowser>(){
    @Override public ConfigurableWebBrowser fun(    ConfigurableWebBrowser browser){
      return new ConfigurableWebBrowser(browser.getId(),browser.getFamily(),browser.getName(),browser.getPath(),browser.isActive(),browser.getSpecificSettings());
    }
  }
,ConfigurableWebBrowser.class);
  browsersTable=browsersEditor.createComponent();
}
