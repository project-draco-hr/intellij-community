{
  defaultBrowserPanel.setBorder(IdeBorderFactory.createTitledBorder("Default Browser",false));
  alternativeBrowserPathField.addBrowseFolderListener(IdeBundle.message("title.select.path.to.browser"),null,null,APP_FILE_CHOOSER_DESCRIPTOR);
  defaultBrowserComboBox.setModel(new EnumComboBoxModel<DefaultBrowser>(DefaultBrowser.class));
  if (BrowserUtil.canStartDefaultBrowser()) {
    defaultBrowserComboBox.addItemListener(new ItemListener(){
      @Override public void itemStateChanged(      ItemEvent e){
        boolean customPathEnabled=e.getItem() == DefaultBrowser.ALTERNATIVE;
        if (e.getStateChange() == ItemEvent.DESELECTED) {
          if (customPathEnabled) {
            customPathValue=alternativeBrowserPathField.getText();
          }
        }
 else         if (e.getStateChange() == ItemEvent.SELECTED) {
          alternativeBrowserPathField.setEnabled(customPathEnabled);
          updateCustomPathTextFieldValue((DefaultBrowser)e.getItem());
        }
      }
    }
);
    defaultBrowserComboBox.setRenderer(new ListCellRendererWrapper<DefaultBrowser>(){
      @Override public void customize(      JList list,      DefaultBrowser value,      int index,      boolean selected,      boolean hasFocus){
        String name;
switch (value) {
case SYSTEM:
          name="System default";
        break;
case FIRST:
      name="First listed";
    break;
case ALTERNATIVE:
  name="Custom path";
break;
default :
throw new IllegalStateException();
}
setText(name);
}
}
);
}
 else {
defaultBrowserComboBox.setVisible(false);
}
clearExtractedFiles.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
BrowserUtil.clearExtractedFiles();
}
}
);
}
