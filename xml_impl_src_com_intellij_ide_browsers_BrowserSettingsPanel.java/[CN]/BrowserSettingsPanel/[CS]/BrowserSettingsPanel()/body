{
  alternativeBrowserPathField.addBrowseFolderListener(IdeBundle.message("title.select.path.to.browser"),null,null,APP_FILE_CHOOSER_DESCRIPTOR);
  defaultBrowserPanel.setBorder(TitledSeparator.EMPTY_BORDER);
  ArrayList<DefaultBrowserPolicy> defaultBrowserPolicies=new ArrayList<DefaultBrowserPolicy>();
  if (BrowserLauncherAppless.canUseSystemDefaultBrowserPolicy()) {
    defaultBrowserPolicies.add(DefaultBrowserPolicy.SYSTEM);
  }
  defaultBrowserPolicies.add(DefaultBrowserPolicy.FIRST);
  defaultBrowserPolicies.add(DefaultBrowserPolicy.ALTERNATIVE);
  defaultBrowserPolicyComboBox.setModel(new ListComboBoxModel<DefaultBrowserPolicy>(defaultBrowserPolicies));
  defaultBrowserPolicyComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    @NotNull ItemEvent e){
      boolean customPathEnabled=e.getItem() == DefaultBrowserPolicy.ALTERNATIVE;
      if (e.getStateChange() == ItemEvent.DESELECTED) {
        if (customPathEnabled) {
          customPathValue=alternativeBrowserPathField.getText();
        }
      }
 else       if (e.getStateChange() == ItemEvent.SELECTED) {
        alternativeBrowserPathField.setEnabled(customPathEnabled);
        updateCustomPathTextFieldValue((DefaultBrowserPolicy)e.getItem());
      }
    }
  }
);
  defaultBrowserPolicyComboBox.setRenderer(new ListCellRendererWrapper<DefaultBrowserPolicy>(){
    @Override public void customize(    JList list,    DefaultBrowserPolicy value,    int index,    boolean selected,    boolean hasFocus){
      String name;
switch (value) {
case SYSTEM:
        name="System default";
      break;
case FIRST:
    name="First listed";
  break;
case ALTERNATIVE:
name="Custom path";
break;
default :
throw new IllegalStateException();
}
setText(name);
}
}
);
if (UIUtil.isUnderAquaLookAndFeel()) {
defaultBrowserPolicyComboBox.setBorder(new EmptyBorder(3,0,0,0));
}
}
