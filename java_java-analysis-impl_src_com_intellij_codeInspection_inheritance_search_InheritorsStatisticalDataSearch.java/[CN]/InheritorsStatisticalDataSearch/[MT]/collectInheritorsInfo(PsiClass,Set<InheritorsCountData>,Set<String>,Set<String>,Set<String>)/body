{
  final String className=aClass.getName();
  if (!processedElements.add(className))   return Couple.of(0,0);
  final MyInheritorsInfoProcessor processor=new MyInheritorsInfoProcessor(collector,disabledNames,processedElements);
  DirectClassInheritorsSearch.search(aClass).forEach(processor);
  allNotAnonymousInheritors.addAll(processor.getAllNotAnonymousInheritors());
  final int allInheritorsCount=processor.getAllNotAnonymousInheritors().size() + processor.getAnonymousInheritorsCount();
  if (!aClass.isInterface() && allInheritorsCount != 0 && !disabledNames.contains(className)) {
    collector.add(new InheritorsCountData(aClass,allInheritorsCount));
  }
  return Couple.of(allNotAnonymousInheritors.size(),processor.getAnonymousInheritorsCount());
}
