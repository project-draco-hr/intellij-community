{
  final String fileName=getTestName(true) + ".py";
  DuplicatesProfile[] profiles={new PyDuplicatesProfile()};
  myFixture.configureByFile(fileName);
  final String testName=FileUtil.getNameWithoutExtension(getTestName(true));
  int lowerBound=myDuplocatorSettings.LOWER_BOUND;
  DuplocatorHashCallback collector=new DuplocatorHashCallback(lowerBound);
  DuplocateManager.hash(myFixture.getProject(),new AnalysisScope(myFixture.getFile()),collector,profiles,DuplocatorSettings.getInstance());
  final DupInfo info=collector.getInfo();
  assertEquals(patternCount,info.getPatterns());
  final Set<String> expectedFiles=readExpectedFiles(testName,patternCount);
  for (int i=0; i < info.getPatterns(); i++) {
    String s=toString(info,i);
    s=reduceWhitespaces(s);
    assertTrue("Expected one of the \n" + merge(expectedFiles) + " but was\n"+ s,expectedFiles.contains(s));
  }
}
