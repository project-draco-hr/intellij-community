{
  if (myHasWriteAccess != null)   return myHasWriteAccess.booleanValue();
  myFile.accept(new GroovyRecursiveElementVisitor(){
    @Override public void visitAssignmentExpression(    @NotNull GrAssignmentExpression expression){
      final GrExpression lValue=expression.getLValue();
      if (lValue instanceof GrTupleExpression) {
        for (        GrExpression grExpression : ((GrTupleExpression)lValue).getExpressions()) {
          if (isRefToMe(grExpression)) {
            myHasWriteAccess=true;
            break;
          }
        }
      }
 else       if (isRefToMe(lValue)) {
        myHasWriteAccess=true;
      }
      super.visitAssignmentExpression(expression);
    }
    @Override public void visitTypeDefinition(    @NotNull GrTypeDefinition typeDefinition){
    }
    @Override public void visitElement(    @NotNull GroovyPsiElement element){
      if (myHasWriteAccess == null) {
        super.visitElement(element);
      }
    }
  }
);
  if (myHasWriteAccess == null)   myHasWriteAccess=false;
  return myHasWriteAccess.booleanValue();
}
