{
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  try {
    OSProcessHandler processHandler=isBinary ? new BinaryOSProcessHandler(myCommandLine) : new OSProcessHandler(myCommandLine);
    CapturingProcessAdapter outputAdapter=new CapturingProcessAdapter(){
      @Override public void onTextAvailable(      ProcessEvent event,      Key outputType){
        Iterator<String> lines=LineHandlerHelper.splitText(event.getText()).iterator();
        if (ProcessOutputTypes.STDOUT == outputType) {
          while (lines.hasNext()) {
            String line=lines.next();
            if (indicator != null && showTextOnIndicator) {
              indicator.setText2(line);
            }
            addToOutput(line,ProcessOutputTypes.STDOUT);
          }
        }
 else {
          super.onTextAvailable(event,outputType);
        }
      }
    }
;
    processHandler.addProcessListener(outputAdapter);
    processHandler.startNotify();
    while (!processHandler.waitFor(300)) {
      if (indicator != null && indicator.isCanceled()) {
        processHandler.destroyProcess();
        outputAdapter.getOutput().setExitCode(255);
        break;
      }
    }
    ProcessOutput output=outputAdapter.getOutput();
    return isBinary ? new HgCommandResult(output,((BinaryOSProcessHandler)processHandler).getOutput()) : new HgCommandResult(output);
  }
 catch (  ExecutionException e) {
    throw new ShellCommandException(e);
  }
}
