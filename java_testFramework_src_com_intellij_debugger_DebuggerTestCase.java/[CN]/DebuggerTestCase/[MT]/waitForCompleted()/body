{
  final SynchronizationBasedSemaphore s=new SynchronizationBasedSemaphore();
  s.down();
  final InvokeThread.WorkerThreadRequest request=getDebugProcess().getManagerThread().getCurrentRequest();
  final Thread thread=new Thread("Joining " + request){
    @Override public void run(){
      try {
        request.join();
      }
 catch (      Exception e) {
      }
    }
  }
;
  thread.start();
  if (request.isDone()) {
    thread.interrupt();
  }
  waitFor(new Runnable(){
    @Override public void run(){
      try {
        thread.join();
      }
 catch (      InterruptedException e) {
      }
    }
  }
);
  invokeRatherLater(new DebuggerCommandImpl(){
    @Override protected void action() throws Exception {
      LOG.assertTrue(false);
    }
    @Override protected void commandCancelled(){
      invokeRatherLater(new DebuggerCommandImpl(){
        @Override protected void action() throws Exception {
          LOG.assertTrue(false);
        }
        @Override protected void commandCancelled(){
          s.up();
        }
      }
);
    }
  }
);
  waitFor(new Runnable(){
    @Override public void run(){
      s.waitFor();
    }
  }
);
}
