{
  boolean useSockets=transport == DebuggerSettings.SOCKET_TRANSPORT;
  RemoteConnection remoteConnection=new RemoteConnection(useSockets,"127.0.0.1","3456",serverMode);
  String launchCommandLine=remoteConnection.getLaunchCommandLine();
  launchCommandLine=StringUtil.replace(launchCommandLine,RemoteConnection.ONTHROW,"");
  launchCommandLine=StringUtil.replace(launchCommandLine,RemoteConnection.ONUNCAUGHT,"");
  launchCommandLine=StringUtil.replace(launchCommandLine,"suspend=n","suspend=y");
  println(launchCommandLine,ProcessOutputTypes.SYSTEM);
  for (StringTokenizer tokenizer=new StringTokenizer(launchCommandLine); tokenizer.hasMoreTokens(); ) {
    String token=tokenizer.nextToken();
    javaParameters.getVMParametersList().add(token);
  }
  GeneralCommandLine commandLine=CommandLineBuilder.createFromJavaParameters(javaParameters);
  DebuggerSession debuggerSession;
  if (serverMode) {
    debuggerSession=attachVM(remoteConnection,false);
    commandLine.createProcess();
  }
 else {
    commandLine.createProcess();
    debuggerSession=attachVM(remoteConnection,true);
  }
  ExecutionResult executionResult=debuggerSession.getProcess().getExecutionResult();
  DebugProcessImpl process=(DebugProcessImpl)DebuggerManagerEx.getInstanceEx(myProject).getDebugProcess(executionResult.getProcessHandler());
  assertNotNull(process);
  return debuggerSession;
}
