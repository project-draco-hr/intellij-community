{
  super.visitMethod(method);
  final PsiParameterList parameterList=method.getParameterList();
  final int parametersCount=parameterList.getParametersCount();
  if (parametersCount == 0) {
    return;
  }
  final PsiParameter[] parameters=parameterList.getParameters();
  int functionalIndex=-1;
  for (int i=0; i < parameters.length; i++) {
    final PsiParameter parameter=parameters[i];
    if (LambdaUtil.isFunctionalType(parameter.getType())) {
      functionalIndex=i;
      break;
    }
  }
  if (functionalIndex < 0) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  final String name=method.getName();
  for (  PsiMethod sameNameMethod : containingClass.findMethodsByName(name,true)) {
    if (method.equals(sameNameMethod) || PsiSuperMethodUtil.isSuperMethod(method,sameNameMethod)) {
      continue;
    }
    final PsiParameterList otherParameterList=sameNameMethod.getParameterList();
    if (parametersCount != otherParameterList.getParametersCount()) {
      continue;
    }
    final PsiParameter[] otherParameters=otherParameterList.getParameters();
    final PsiType otherFunctionalType=otherParameters[functionalIndex].getType();
    final PsiType functionalType=parameters[functionalIndex].getType();
    if (!areOtherParameterTypesConvertible(parameters,otherParameters,functionalIndex) || !LambdaUtil.isFunctionalType(otherFunctionalType) || Objects.equals(functionalType,otherFunctionalType)) {
      continue;
    }
    if (areSameShapeFunctionalTypes(functionalType,otherFunctionalType)) {
      registerMethodError(method,method);
      return;
    }
  }
}
