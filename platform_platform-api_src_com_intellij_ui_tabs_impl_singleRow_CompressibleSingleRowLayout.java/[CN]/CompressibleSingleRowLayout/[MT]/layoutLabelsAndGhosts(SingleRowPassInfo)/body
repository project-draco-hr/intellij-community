{
  boolean layoutStopped=false;
  int lengthEstimation=0;
  boolean needCompression=false;
  if (myTabs.getPresentation().getTabsPosition() == JBTabsPosition.top || myTabs.getPresentation().getTabsPosition() == JBTabsPosition.bottom) {
    for (    TabInfo eachInfo : data.toLayout) {
      final TabLabel label=myTabs.myInfo2Label.get(eachInfo);
      lengthEstimation+=getStrategy().getLengthIncrement(label.getPreferredSize());
    }
    needCompression=lengthEstimation > data.toFitLength;
  }
  int spentLength=0;
  for (Iterator<TabInfo> iterator=data.toLayout.iterator(); iterator.hasNext(); ) {
    TabInfo eachInfo=iterator.next();
    final TabLabel label=myTabs.myInfo2Label.get(eachInfo);
    if (layoutStopped) {
      label.setActionPanelVisible(false);
      final Rectangle rec=getStrategy().getLayoutRect(data,0,0);
      myTabs.layout(label,rec);
      continue;
    }
    label.setActionPanelVisible(true);
    final Dimension eachSize=label.getPreferredSize();
    int length;
    if (needCompression) {
      length=iterator.hasNext() ? (int)(getStrategy().getLengthIncrement(label.getPreferredSize()) * (float)data.toFitLength / lengthEstimation) : data.toFitLength - spentLength - data.toLayout.size() / 2;
      spentLength+=length;
    }
 else {
      length=getStrategy().getLengthIncrement(eachSize);
    }
    boolean continueLayout=applyTabLayout(data,label,length,0);
    data.position=getStrategy().getMaxPosition(label.getBounds());
    data.position+=myTabs.getInterTabSpaceLength();
    if (!continueLayout) {
      layoutStopped=true;
    }
  }
  for (  TabInfo eachInfo : data.toDrop) {
    JBTabsImpl.resetLayout(myTabs.myInfo2Label.get(eachInfo));
  }
}
