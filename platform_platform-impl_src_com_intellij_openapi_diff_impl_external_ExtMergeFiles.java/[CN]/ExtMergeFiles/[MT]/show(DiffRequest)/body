{
  saveContents(request);
  int result=DialogWrapper.CANCEL_EXIT_CODE;
  GeneralCommandLine commandLine=new GeneralCommandLine();
  commandLine.setExePath(getToolPath());
  try {
    commandLine.addParameters(getParameters(request));
    commandLine.createProcess();
    ProgressManager.getInstance().run(new Task.Modal(request.getProject(),"Launching external tool",false){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        indicator.setIndeterminate(true);
        TimeoutUtil.sleep(1000);
      }
    }
);
    if (Messages.YES == Messages.showYesNoDialog(request.getProject(),"Press \"Mark as Resolved\" when you finish resolving conflicts in the external tool","Merge In External Tool","Mark as Resolved","Revert",null)) {
      result=DialogWrapper.OK_EXIT_CODE;
    }
    ((MergeRequestImpl)request).getResultContent().getFile().refresh(false,false);
  }
 catch (  Exception e) {
    ExecutionErrorDialog.show(new ExecutionException(e.getMessage()),DiffBundle.message("cant.launch.diff.tool.error.message"),request.getProject());
  }
 finally {
    ((MergeRequestImpl)request).setResult(result);
  }
}
