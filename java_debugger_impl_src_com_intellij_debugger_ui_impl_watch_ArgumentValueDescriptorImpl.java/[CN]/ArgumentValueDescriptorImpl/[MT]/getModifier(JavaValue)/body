{
  return new JavaValueModifier(value){
    @Override protected void setValueImpl(    @NotNull String expression,    @NotNull XModificationCallback callback){
      final DecompiledLocalVariable local=ArgumentValueDescriptorImpl.this.getVariable();
      if (local != null) {
        final DebuggerContextImpl debuggerContext=DebuggerManagerEx.getInstanceEx(getProject()).getContext();
        set(expression,callback,debuggerContext,new SetValueRunnable(){
          public void setValue(          EvaluationContextImpl evaluationContext,          Value newValue) throws ClassNotLoadedException, InvalidTypeException, EvaluateException {
            LocalVariablesUtil.setValue(debuggerContext.getFrameProxy().getStackFrame(),local.getSlot(),newValue);
            update(debuggerContext);
          }
          public ReferenceType loadClass(          EvaluationContextImpl evaluationContext,          String className) throws InvocationException, ClassNotLoadedException, IncompatibleThreadStateException, InvalidTypeException, EvaluateException {
            return evaluationContext.getDebugProcess().loadClass(evaluationContext,className,evaluationContext.getClassLoader());
          }
        }
);
      }
    }
  }
;
}
