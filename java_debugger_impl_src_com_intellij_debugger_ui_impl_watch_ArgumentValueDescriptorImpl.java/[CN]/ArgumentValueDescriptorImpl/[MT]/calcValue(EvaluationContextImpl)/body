{
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      final SourcePosition position=ContextUtil.getSourcePosition(evaluationContext);
      if (position != null) {
        final PsiMethod method=PsiTreeUtil.getParentOfType(position.getElementAt(),PsiMethod.class);
        if (method != null) {
          final PsiParameterList params=method.getParameterList();
          if (myIndex < params.getParametersCount()) {
            final PsiParameter param=params.getParameters()[myIndex];
            myName=param.getName();
            myParameterNameCalcutated=true;
          }
 else {
            final PsiCodeBlock body=method.getBody();
            if (body != null) {
              final StringBuilder nameBuilder=new StringBuilder();
              nameBuilder.append(myDefaultName);
              try {
                final int startSlot=params.getParametersCount() + (method.hasModifierProperty(PsiModifier.STATIC) ? 0 : 1);
                body.accept(new JavaRecursiveElementVisitor(){
                  private int myCurrentSlotIndex=startSlot;
                  private final Stack<Integer> myIndexStack=new Stack<Integer>();
                  @Override public void visitCodeBlock(                  PsiCodeBlock block){
                    myIndexStack.push(myCurrentSlotIndex);
                    try {
                      super.visitCodeBlock(block);
                    }
  finally {
                      myCurrentSlotIndex=myIndexStack.pop();
                    }
                  }
                  @Override public void visitLocalVariable(                  PsiLocalVariable variable){
                    if (myCurrentSlotIndex == myIndex) {
                      if (nameBuilder.length() == myDefaultName.length()) {
                        nameBuilder.append(": ");
                      }
 else {
                        nameBuilder.append("|");
                      }
                      nameBuilder.append(variable.getName());
                    }
                    final PsiType varType=variable.getType();
                    myCurrentSlotIndex+=(varType == PsiType.DOUBLE || varType == PsiType.LONG) ? 2 : 1;
                  }
                  @Override public void visitClass(                  PsiClass aClass){
                  }
                }
);
              }
  finally {
                myName=nameBuilder.toString();
              }
            }
          }
        }
      }
    }
  }
);
  return myValue;
}
