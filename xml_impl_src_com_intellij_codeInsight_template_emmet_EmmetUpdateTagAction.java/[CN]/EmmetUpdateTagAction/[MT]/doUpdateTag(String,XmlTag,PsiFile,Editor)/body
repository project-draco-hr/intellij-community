{
  if (tag.isValid()) {
    String templateText=expandTemplate(abbreviation,file,editor);
    final Collection<String> classNames=ContainerUtil.newLinkedHashSet();
    final String classAttribute=tag.getAttributeValue(HtmlUtil.CLASS_ATTRIBUTE_NAME);
    if (classAttribute != null) {
      ContainerUtil.addAll(classNames,StringUtil.tokenize(classAttribute," \t"));
    }
    final Map<String,String> attributes=ContainerUtil.newLinkedHashMap();
    final Ref<String> newTagName=Ref.create();
    processTags(file.getProject(),templateText,new PairProcessor<XmlTag,Boolean>(){
      @Override public boolean process(      XmlTag tag,      Boolean firstTag){
        if (firstTag && !abbreviation.isEmpty() && StringUtil.isJavaIdentifierPart(abbreviation.charAt(0))) {
          newTagName.set(tag.getName());
        }
        for (        String clazz : StringUtil.tokenize(StringUtil.notNullize(tag.getAttributeValue(HtmlUtil.CLASS_ATTRIBUTE_NAME))," \t")) {
          if (StringUtil.startsWithChar(clazz,'+')) {
            classNames.add(clazz.substring(1));
          }
 else           if (StringUtil.startsWithChar(clazz,'-')) {
            classNames.remove(clazz.substring(1));
          }
 else {
            classNames.clear();
            classNames.add(clazz);
          }
        }
        if (!firstTag) {
          classNames.add(tag.getName());
        }
        for (        XmlAttribute xmlAttribute : tag.getAttributes()) {
          if (!HtmlUtil.CLASS_ATTRIBUTE_NAME.equalsIgnoreCase(xmlAttribute.getName())) {
            attributes.put(xmlAttribute.getName(),StringUtil.notNullize(xmlAttribute.getValue()));
          }
        }
        return true;
      }
    }
);
    doUpdateTagAttributes(tag,file,newTagName.get(),classNames,attributes).execute();
  }
}
