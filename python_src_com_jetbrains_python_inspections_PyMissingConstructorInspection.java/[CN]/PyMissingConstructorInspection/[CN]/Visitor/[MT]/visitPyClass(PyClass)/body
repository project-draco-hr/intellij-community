{
  PsiElement[] superClasses=node.getSuperClassExpressions();
  if (superClasses.length == 0)   return;
  Set<String> superNames=new HashSet<String>();
  if (node.isNewStyleClass())   superNames.add(PyNames.SUPER);
  for (  PsiElement cl : superClasses) {
    if (!PyNames.OBJECT.equals(cl.getText()))     superNames.add(cl.getText());
  }
  if (superClasses.length == 1 && PyNames.OBJECT.equals(superClasses[0].getText()))   return;
  boolean superHasConstructor=false;
  PyClass[] supers=node.getSuperClasses();
  for (  PyClass cl : supers) {
    if (cl.findMethodByName(PyNames.INIT,false) != null) {
      superHasConstructor=true;
      break;
    }
  }
  if (!superHasConstructor)   return;
  PyFunction initMethod=node.findMethodByName(PyNames.INIT,false);
  if (initMethod != null) {
    if (hasConstructorCall(initMethod,superNames))     return;
    registerProblem(initMethod.getNameIdentifier(),"Call to constructor of super class is missed");
  }
}
