{
  MigLayout migLayout=new MigLayout("flowy,ins 0, fill");
  JPanel contentPane=new JPanel(migLayout);
  myPullCheckBox=new JBCheckBox("Pull",true);
  myPullCheckBox.setMnemonic('p');
  myPullCheckBox.setToolTipText("Pull from the default remote repository");
  myPullCheckBox.setSelected(true);
  myOnlyUpdateButton=new JRadioButton("Only Update",true);
  myOnlyUpdateButton.setMnemonic('u');
  myOnlyUpdateButton.setToolTipText("Update to the head of the current branch");
  myMergeRadioButton=new JRadioButton("Merge",false);
  myMergeRadioButton.setMnemonic('m');
  myMergeRadioButton.setToolTipText("Merge if pulling resulted in extra heads");
  myMergeRadioButton.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      updateEnabledStates();
    }
  }
);
  myCommitAfterMergeCheckBox=new JCheckBox("Commit after merge without conflicts",false);
  myCommitAfterMergeCheckBox.setMnemonic('c');
  myCommitAfterMergeCheckBox.setToolTipText("Commit automatically after the merge");
  myCommitAfterMergeCheckBox.setSelected(false);
  myRebaseRadioButton=new JRadioButton("Rebase",false);
  myRebaseRadioButton.setToolTipText("Rebase changesets to a branch tip as destination");
  myRebaseRadioButton.setMnemonic('r');
  contentPane.add(myPullCheckBox,"left");
  JPanel strategyPanel=new JPanel(migLayout);
  strategyPanel.setBorder(IdeBorderFactory.createTitledBorder("Update Strategy",false));
  strategyPanel.add(myOnlyUpdateButton,"left");
  strategyPanel.add(myMergeRadioButton,"left");
  strategyPanel.add(myCommitAfterMergeCheckBox,"gapx 5%");
  strategyPanel.add(myRebaseRadioButton,"left");
  contentPane.add(strategyPanel);
  ButtonGroup group=new ButtonGroup();
  group.add(myOnlyUpdateButton);
  group.add(myRebaseRadioButton);
  group.add(myMergeRadioButton);
  updateEnabledStates();
  return contentPane;
}
