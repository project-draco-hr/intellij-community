{
  final GitRepositoryManager repositoryManager=ServiceManager.getService(project,GitRepositoryManager.class);
  GitPlatformFacade facade=ServiceManager.getService(GitPlatformFacade.class);
  for (  VirtualFile root : roots) {
    repositoryManager.addExternalRepository(root,GitRepositoryImpl.getInstance(root,project,true));
  }
  VcsLogManager manager=new VcsLogManager(project,ServiceManager.getService(project,VcsLogSettings.class),ServiceManager.getService(project,VcsLogUiProperties.class));
  Collection<VcsRoot> vcsRoots=ContainerUtil.map(roots,new Function<VirtualFile,VcsRoot>(){
    @Override public VcsRoot fun(    VirtualFile root){
      return new VcsRoot(vcs,root);
    }
  }
);
  return new MyContentComponent(manager.initContent(vcsRoots,tabName),roots,new Disposable(){
    @Override public void dispose(){
      for (      VirtualFile root : roots) {
        repositoryManager.removeExternalRepository(root);
      }
    }
  }
);
}
