{
  final String path=project.getBaseDir().getPath() + relativePath;
  final File classpathFile=new File(path,EclipseXml.DOT_CLASSPATH_EXT);
  String fileText=FileUtil.loadFile(classpathFile).replaceAll("\\$ROOT\\$",project.getBaseDir().getPath());
  if (!SystemInfo.isWindows) {
    fileText=fileText.replaceAll(EclipseXml.FILE_PROTOCOL + "/",EclipseXml.FILE_PROTOCOL);
  }
  String communityLib=FileUtil.toSystemIndependentName(PathManagerEx.findFileUnderCommunityHome("lib").getAbsolutePath());
  fileText=fileText.replaceAll("\\$" + JUNIT + "\\$",communityLib);
  final Element classpathElement=JDOMUtil.loadDocument(fileText).getRootElement();
  final Module module=WriteCommandAction.runWriteCommandAction(null,new Computable<Module>(){
    @Override public Module compute(){
      return ModuleManager.getInstance(project).newModule(new File(path) + File.separator + EclipseProjectFinder.findProjectName(path)+ IdeaXml.IML_EXT,StdModuleTypes.JAVA.getId());
    }
  }
);
  final ModifiableRootModel rootModel=ModuleRootManager.getInstance(module).getModifiableModel();
  EclipseClasspathReader classpathReader=new EclipseClasspathReader(path,project,null);
  classpathReader.init(rootModel);
  classpathReader.readClasspath(rootModel,classpathElement);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      rootModel.commit();
    }
  }
);
  final Element actualImlElement=new Element("root");
  ((ModuleRootManagerImpl)ModuleRootManager.getInstance(module)).getState().writeExternal(actualImlElement);
  PathMacros.getInstance().setMacro(JUNIT,communityLib);
  PathMacroManager.getInstance(module).collapsePaths(actualImlElement);
  PathMacroManager.getInstance(project).collapsePaths(actualImlElement);
  PathMacros.getInstance().removeMacro(JUNIT);
  final Element expectedIml=JDOMUtil.loadDocument(new File(project.getBaseDir().getPath() + "/expected","expected.iml")).getRootElement();
  PlatformTestUtil.assertElementsEqual(expectedIml,actualImlElement);
}
