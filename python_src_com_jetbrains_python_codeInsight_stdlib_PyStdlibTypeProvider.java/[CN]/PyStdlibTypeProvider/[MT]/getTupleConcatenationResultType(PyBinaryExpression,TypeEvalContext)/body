{
  if (addition.getRightExpression() != null) {
    final PyTupleType leftTupleType=as(context.getType(addition.getLeftExpression()),PyTupleType.class);
    final PyTupleType rightTupleType=as(context.getType(addition.getRightExpression()),PyTupleType.class);
    if (leftTupleType != null && rightTupleType != null) {
      if (leftTupleType.isHomogeneous() || rightTupleType.isHomogeneous()) {
        return null;
      }
      final PyType[] elementTypes=new PyType[leftTupleType.getElementCount() + rightTupleType.getElementCount()];
      for (int i=0; i < leftTupleType.getElementCount(); i++) {
        elementTypes[i]=leftTupleType.getElementType(i);
      }
      for (int i=0; i < rightTupleType.getElementCount(); i++) {
        elementTypes[i + leftTupleType.getElementCount()]=rightTupleType.getElementType(i);
      }
      return Ref.create(PyTupleType.create(addition,elementTypes));
    }
  }
  return null;
}
