{
  final String qname=getQualifiedName(function,callSite);
  if (qname != null) {
    if (OPEN_FUNCTIONS.contains(qname) && callSite instanceof PyCallExpression) {
      final PyCallExpression callExpr=(PyCallExpression)callSite;
      final PyResolveContext resolveContext=PyResolveContext.noImplicits().withTypeEvalContext(context);
      final PyCallExpression.PyArgumentsMapping mapping=callExpr.mapArguments(resolveContext);
      if (mapping.getMarkedCallee() != null) {
        final PyType type=getOpenFunctionType(qname,mapping.getMappedParameters(),callSite);
        if (type != null) {
          return type;
        }
      }
    }
 else     if ("__builtin__.tuple.__add__".equals(qname) && callSite instanceof PyBinaryExpression) {
      return getTupleConcatenationResultType((PyBinaryExpression)callSite,context);
    }
 else     if ("__builtin__.tuple.__mul__".equals(qname) && callSite instanceof PyBinaryExpression) {
      return getTupleMultiplicationResultType((PyBinaryExpression)callSite,context);
    }
 else     if (callSite != null && isListGetItem(function)) {
      final PyExpression receiver=PyTypeChecker.getReceiver(callSite,function);
      final Map<PyExpression,PyNamedParameter> mapping=PyCallExpressionHelper.mapArguments(callSite,function,context);
      final Map<PyGenericType,PyType> substitutions=PyTypeChecker.unifyGenericCall(receiver,mapping,context);
      if (substitutions != null) {
        return analyzeListGetItemCallType(receiver,mapping,substitutions,context);
      }
    }
  }
  return null;
}
