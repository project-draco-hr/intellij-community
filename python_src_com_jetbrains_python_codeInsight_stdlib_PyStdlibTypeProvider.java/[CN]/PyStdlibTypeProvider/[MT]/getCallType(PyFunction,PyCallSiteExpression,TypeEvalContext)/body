{
  final String qname=getQualifiedName(function,callSite);
  if (qname != null) {
    if (OPEN_FUNCTIONS.contains(qname) && callSite != null) {
      final PyTypeChecker.AnalyzeCallResults results=PyTypeChecker.analyzeCallSite(callSite,context);
      if (results != null) {
        final PyType type=getOpenFunctionType(qname,results.getArguments(),callSite);
        if (type != null) {
          return type;
        }
      }
    }
 else     if ("__builtin__.tuple.__add__".equals(qname) && callSite instanceof PyBinaryExpression) {
      final PyBinaryExpression expression=(PyBinaryExpression)callSite;
      final PyTupleType leftTupleType=as(context.getType(expression.getLeftExpression()),PyTupleType.class);
      if (expression.getRightExpression() != null) {
        final PyTupleType rightTupleType=as(context.getType(expression.getRightExpression()),PyTupleType.class);
        if (leftTupleType != null && rightTupleType != null) {
          final PyType[] elementTypes=new PyType[leftTupleType.getElementCount() + rightTupleType.getElementCount()];
          for (int i=0; i < leftTupleType.getElementCount(); i++) {
            elementTypes[i]=leftTupleType.getElementType(i);
          }
          for (int i=0; i < rightTupleType.getElementCount(); i++) {
            elementTypes[i + leftTupleType.getElementCount()]=rightTupleType.getElementType(i);
          }
          return PyTupleType.create(function,elementTypes);
        }
      }
    }
  }
  return null;
}
