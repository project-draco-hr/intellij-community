{
  int i=1;
  PyType rtype;
  do {
    final String overloadedQName=String.format("%s.%d",qname,i);
    rtype=getReturnTypeByQName(overloadedQName,anchor);
    if (rtype != null) {
      boolean matched=true;
      boolean notNullParameterMatch=false;
      if (OPEN_FUNCTIONS.contains(qname)) {
        matched=matchOpenFunctionType(qname,overloadedQName,arguments,anchor,context);
        notNullParameterMatch=true;
      }
 else {
        for (        Map.Entry<PyExpression,PyNamedParameter> entry : arguments.entrySet()) {
          final PyNamedParameter p=entry.getValue();
          final String name=p.getName();
          if (p.isPositionalContainer() || p.isKeywordContainer() || name == null) {
            continue;
          }
          final PyType argType=entry.getKey().getType(context);
          final PyType paramType=getParameterTypeByQName(overloadedQName,name,anchor);
          if (PyTypeChecker.match(paramType,argType,context)) {
            if (paramType != null && !PyTypeChecker.isUnknown(argType)) {
              notNullParameterMatch=true;
            }
          }
 else {
            matched=false;
            break;
          }
        }
      }
      if (matched && notNullParameterMatch) {
        return rtype;
      }
    }
    i++;
  }
 while (rtype != null);
  return null;
}
