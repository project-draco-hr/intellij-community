{
  int i=1;
  PyType rtype;
  do {
    final String overloadedQName=String.format("%s.%d",qname,i);
    rtype=getReturnTypeByQName(overloadedQName,anchor);
    if (rtype != null) {
      boolean matched=true;
      for (      Map.Entry<PyExpression,PyNamedParameter> entry : arguments.entrySet()) {
        final PyNamedParameter p=entry.getValue();
        final String name=p.getName();
        if (p.isPositionalContainer() || p.isKeywordContainer() || name == null) {
          continue;
        }
        PyType argType=entry.getKey().getType(context);
        if (("__builtin__.open".equals(qname) || "io.open".equals(qname) || "os.fdopen".equals(qname)) && "mode".equals(name)) {
          final PyBuiltinCache cache=PyBuiltinCache.getInstance(anchor);
          final LanguageLevel level=LanguageLevel.forElement(anchor);
          argType=cache.getUnicodeType(level);
          final PyExpression modeExpr=entry.getKey();
          if (modeExpr instanceof PyStringLiteralExpression) {
            final String literal=((PyStringLiteralExpression)modeExpr).getStringValue();
            if (literal.contains("b")) {
              argType=cache.getBytesType(level);
            }
          }
        }
        final PyType paramType=getParameterTypeByQName(overloadedQName,name,anchor);
        if (!PyTypeChecker.match(paramType,argType,context)) {
          matched=false;
        }
      }
      if (matched) {
        return rtype;
      }
    }
    i++;
  }
 while (rtype != null);
  return null;
}
