{
  final PyTupleType leftTupleType=as(context.getType(multiplication.getLeftExpression()),PyTupleType.class);
  if (leftTupleType == null) {
    return null;
  }
  PyExpression rightExpression=multiplication.getRightExpression();
  if (rightExpression instanceof PyReferenceExpression) {
    final PsiElement target=((PyReferenceExpression)rightExpression).getReference().resolve();
    if (target instanceof PyTargetExpression) {
      rightExpression=((PyTargetExpression)target).findAssignedValue();
    }
  }
  if (rightExpression instanceof PyNumericLiteralExpression && ((PyNumericLiteralExpression)rightExpression).isIntegerLiteral()) {
    if (leftTupleType.isHomogeneous()) {
      return leftTupleType;
    }
    final int multiplier=((PyNumericLiteralExpression)rightExpression).getBigIntegerValue().intValue();
    final int originalSize=leftTupleType.getElementCount();
    if (originalSize * multiplier <= 20) {
      final PyType[] elementTypes=new PyType[leftTupleType.getElementCount() * multiplier];
      for (int i=0; i < multiplier; i++) {
        for (int j=0; j < originalSize; j++) {
          elementTypes[i * originalSize + j]=leftTupleType.getElementType(j);
        }
      }
      return PyTupleType.create(multiplication,elementTypes);
    }
  }
  return null;
}
