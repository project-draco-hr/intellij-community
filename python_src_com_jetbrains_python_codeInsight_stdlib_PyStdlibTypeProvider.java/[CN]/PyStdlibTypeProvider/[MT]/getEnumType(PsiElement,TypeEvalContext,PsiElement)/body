{
  if (referenceTarget instanceof PyTargetExpression) {
    final PyTargetExpression target=(PyTargetExpression)referenceTarget;
    final ScopeOwner owner=ScopeUtil.getScopeOwner(target);
    if (owner instanceof PyClass) {
      final PyClass cls=(PyClass)owner;
      final List<PyClassLikeType> types=cls.getAncestorTypes(context);
      for (      PyClassLikeType type : types) {
        if (type != null && "enum.Enum".equals(type.getClassQName())) {
          final PyType classType=context.getType(cls);
          if (classType instanceof PyClassType) {
            return ((PyClassType)classType).toInstance();
          }
        }
      }
    }
  }
  if (referenceTarget instanceof PyQualifiedNameOwner) {
    final PyQualifiedNameOwner qualifiedNameOwner=(PyQualifiedNameOwner)referenceTarget;
    final String name=qualifiedNameOwner.getQualifiedName();
    if ("enum.Enum.name".equals(name)) {
      return PyBuiltinCache.getInstance(referenceTarget).getStrType();
    }
 else     if ("enum.Enum.value".equals(name) && anchor instanceof PyReferenceExpression && context.maySwitchToAST(anchor)) {
      final PyReferenceExpression anchorExpr=(PyReferenceExpression)anchor;
      final PyExpression qualifier=anchorExpr.getQualifier();
      if (qualifier instanceof PyReferenceExpression) {
        final PyReferenceExpression qualifierExpr=(PyReferenceExpression)qualifier;
        final PsiElement resolvedQualifier=qualifierExpr.getReference().resolve();
        if (resolvedQualifier instanceof PyTargetExpression) {
          final PyTargetExpression qualifierTarget=(PyTargetExpression)resolvedQualifier;
          if (context.maySwitchToAST(qualifierTarget)) {
            final PyExpression value=qualifierTarget.findAssignedValue();
            if (value != null) {
              return context.getType(value);
            }
          }
        }
      }
    }
 else     if ("enum.EnumMeta.__members__".equals(name)) {
      return PyTypeParser.getTypeByName(referenceTarget,"dict[str, unknown]");
    }
  }
  return null;
}
