{
  if (psiElement instanceof PsiExpressionStatement || psiElement instanceof PsiDeclarationStatement || psiElement instanceof PsiDoWhileStatement|| psiElement instanceof PsiReturnStatement|| psiElement instanceof PsiThrowStatement|| psiElement instanceof PsiBreakStatement|| psiElement instanceof PsiContinueStatement|| psiElement instanceof PsiAssertStatement|| psiElement instanceof PsiField|| psiElement instanceof PsiImportStatementBase|| psiElement instanceof PsiMethod && (((PsiMethod)psiElement).getContainingClass().isInterface() || ((PsiMethod)psiElement).hasModifierProperty(PsiModifier.ABSTRACT) || ((PsiMethod)psiElement).hasModifierProperty(PsiModifier.NATIVE))) {
    int errorOffset=getErrorElementOffset(psiElement);
    int elementEndOffset=psiElement.getTextRange().getEndOffset();
    final CharSequence text=editor.getDocument().getCharsSequence();
    if (psiElement instanceof PsiEnumConstant) {
      final int commaOffset=CharArrayUtil.shiftForwardUntil(text,elementEndOffset,",");
      if (commaOffset < text.length()) {
        elementEndOffset=commaOffset + 1;
      }
    }
    if (errorOffset >= 0 && errorOffset < elementEndOffset) {
      if (text.charAt(errorOffset) == ' ' && text.charAt(errorOffset + 1) == ';') {
        errorOffset++;
      }
    }
    editor.getCaretModel().moveToOffset(errorOffset >= 0 ? errorOffset : elementEndOffset);
    if (errorOffset < 0 && isModified && (elementEndOffset == text.length() || text.charAt(elementEndOffset) == '\n') && (psiElement instanceof PsiExpressionStatement || psiElement instanceof PsiDeclarationStatement)) {
      JavaSmartEnterProcessor.plainEnter(editor);
    }
    return isModified;
  }
  return false;
}
