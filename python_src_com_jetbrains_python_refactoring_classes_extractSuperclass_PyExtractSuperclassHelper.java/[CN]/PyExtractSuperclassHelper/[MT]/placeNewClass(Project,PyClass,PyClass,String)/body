{
  VirtualFile file=VirtualFileManager.getInstance().findFileByUrl(ApplicationManagerEx.getApplicationEx().isUnitTestMode() ? targetFile : VfsUtil.pathToUrl(targetFile));
  if (file == clazz.getContainingFile().getVirtualFile()) {
    return (PyClass)clazz.getParent().addBefore(newClass,clazz);
  }
  PsiFile psiFile=null;
  final PsiDirectory psiDir;
  if (file == null) {
    final String filename;
    final String path;
    if (targetFile.endsWith(PythonFileType.INSTANCE.getDefaultExtension())) {
      path=PathUtil.getParentPath(targetFile);
      filename=PathUtil.getFileName(targetFile);
    }
 else {
      path=targetFile;
      filename=constructFilename(newClass);
    }
    try {
      final VirtualFile dir=VfsUtil.createDirectoryIfMissing(path);
      psiDir=dir != null ? PsiManager.getInstance(project).findDirectory(dir) : null;
      psiFile=psiDir != null ? psiDir.createFile(filename) : null;
    }
 catch (    IOException e) {
      LOG.error(e);
    }
  }
 else   if (file.isDirectory()) {
    psiDir=PsiManager.getInstance(project).findDirectory(file);
    final String filename=constructFilename(newClass);
    LOG.assertTrue(psiDir != null);
    psiFile=psiDir.findFile(filename);
    psiFile=psiFile != null ? psiFile : psiDir.createFile(filename);
  }
 else {
    psiFile=PsiManager.getInstance(project).findFile(file);
  }
  LOG.assertTrue(psiFile != null);
  newClass=(PyClass)psiFile.add(newClass);
  PyClassRefactoringUtil.insertImport(clazz,Collections.singleton(newClass));
  return newClass;
}
