{
  final Project project=clazz.getProject();
  selectedMemberInfos=new ArrayList<PyMemberInfo<PyElement>>(selectedMemberInfos);
  final RefactoringEventData beforeData=new RefactoringEventData();
  beforeData.addElements(FluentIterable.from(selectedMemberInfos).transform(new Function<PyMemberInfo<PyElement>,PsiElement>(){
    @Override public PsiElement fun(    PyMemberInfo<PyElement> info){
      return info.getMember();
    }
  }
).toList());
  project.getMessageBus().syncPublisher(RefactoringEventListener.REFACTORING_EVENT_TOPIC).refactoringStarted(getRefactoringId(),beforeData);
  final PyMemberInfo<PyElement> objectMember=MembersManager.findMember(selectedMemberInfos,ALLOW_OBJECT);
  if (LanguageLevel.forElement(clazz).isPy3K()) {
    if (objectMember != null) {
      selectedMemberInfos.remove(objectMember);
    }
  }
 else {
    if (objectMember == null) {
      final PyMemberInfo<PyElement> object=MembersManager.findMember(clazz,ALLOW_OBJECT);
      if (object != null) {
        selectedMemberInfos.add(object);
      }
    }
  }
  final String text="class " + superBaseName + ":\n  pass"+ "\n";
  PyClass newClass=PyElementGenerator.getInstance(project).createFromText(LanguageLevel.getDefault(),PyClass.class,text);
  newClass=placeNewClass(project,newClass,clazz,targetFile);
  MembersManager.moveAllMembers(selectedMemberInfos,clazz,newClass);
  if (!newClass.getContainingFile().equals(clazz.getContainingFile())) {
    PyClassRefactoringUtil.optimizeImports(clazz.getContainingFile());
  }
  PyClassRefactoringUtil.addSuperclasses(project,clazz,null,newClass);
  final RefactoringEventData afterData=new RefactoringEventData();
  afterData.addElement(newClass);
  project.getMessageBus().syncPublisher(RefactoringEventListener.REFACTORING_EVENT_TOPIC).refactoringDone(getRefactoringId(),afterData);
}
