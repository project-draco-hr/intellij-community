{
  final Set<String> superClasses=new HashSet<String>();
  final Set<PsiNamedElement> extractedClasses=new HashSet<PsiNamedElement>();
  final List<PyFunction> methods=new ArrayList<PyFunction>();
  for (  PyMemberInfo member : selectedMemberInfos) {
    final PyElement element=member.getMember();
    if (element instanceof PyFunction)     methods.add((PyFunction)element);
 else     if (element instanceof PyClass) {
      extractedClasses.add((PyClass)element);
      superClasses.add(element.getName());
    }
 else     LOG.error("unmatched member class " + element.getClass());
  }
  for (  PyExpression expr : clazz.getSuperClassExpressions()) {
    if (PyNames.OBJECT.equals(expr.getText()) && !superClasses.contains(PyNames.OBJECT)) {
      superClasses.add(PyNames.OBJECT);
    }
  }
  final Project project=clazz.getProject();
  final Ref<PyClass> newClassRef=new Ref<PyClass>();
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          final PyElement[] elements=methods.toArray(new PyElement[methods.size()]);
          final String text="class " + superBaseName + ":\n  pass"+ "\n";
          PyClass newClass=PyElementGenerator.getInstance(project).createFromText(LanguageLevel.getDefault(),PyClass.class,text);
          newClass=placeNewClass(project,newClass,clazz,targetFile);
          newClassRef.set(newClass);
          PyClassRefactoringUtil.moveMethods(methods,newClass);
          PyClassRefactoringUtil.moveSuperclasses(clazz,superClasses,newClass);
          PyClassRefactoringUtil.addSuperclasses(project,clazz,null,Collections.singleton(superBaseName));
          PyClassRefactoringUtil.insertImport(newClass,extractedClasses);
          if (elements.length > 0) {
            PyPsiUtils.removeElements(elements);
          }
          PyClassRefactoringUtil.insertPassIfNeeded(clazz);
        }
      }
);
    }
  }
,RefactoringBundle.message("extract.superclass.command.name",superBaseName,clazz.getName()),null);
  return newClassRef.get();
}
