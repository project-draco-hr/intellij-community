{
  recursiveMatching=new JCheckBox(SSRBundle.message("recursive.matching.checkbox"),true);
  if (isRecursiveSearchEnabled()) {
    searchOptions.add(UIUtil.createOptionLine(recursiveMatching));
  }
  caseSensitiveMatch=new JCheckBox(SSRBundle.message("case.sensitive.checkbox"),true);
  searchOptions.add(UIUtil.createOptionLine(caseSensitiveMatch));
  final List<FileType> types=new ArrayList<FileType>();
  for (  FileType fileType : StructuralSearchUtil.getSuitableFileTypes()) {
    if (StructuralSearchUtil.getProfileByFileType(fileType) != null) {
      types.add(fileType);
    }
  }
  Collections.sort(types,new Comparator<FileType>(){
    @Override public int compare(    FileType o1,    FileType o2){
      return o1.getName().compareToIgnoreCase(o2.getName());
    }
  }
);
  final DefaultComboBoxModel comboBoxModel=new DefaultComboBoxModel(types.toArray(new FileType[types.size()]));
  comboBoxModel.setSelectedItem(ourFtSearchVariant);
  fileTypes=new ComboBox(comboBoxModel);
  fileTypes.setRenderer(new FileTypeRenderer());
  new ComboboxSpeedSearch(fileTypes){
    @Override protected String getElementText(    Object element){
      return ((FileType)element).getName();
    }
  }
;
  fileTypes.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      updateDialectsAndContexts();
      updateEditor();
    }
  }
);
  contexts=new JComboBox(new DefaultComboBoxModel());
  contexts.setPreferredSize(new Dimension(60,-1));
  dialects=new JComboBox(new DefaultComboBoxModel());
  dialects.setRenderer(new ListCellRendererWrapper(){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value == null) {
        setText("None");
      }
 else       if (value instanceof Language) {
        setText(((Language)value).getDisplayName());
      }
    }
  }
);
  dialects.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      updateEditor();
    }
  }
);
  new ComboboxSpeedSearch(dialects);
  dialects.setPreferredSize(new Dimension(120,-1));
  final JLabel jLabel=new JLabel(SSRBundle.message("search.dialog.file.type.label"));
  final JLabel jLabel2=new JLabel(SSRBundle.message("search.dialog.context.label"));
  final JLabel jLabel3=new JLabel(SSRBundle.message("search.dialog.file.dialect.label"));
  searchOptions.add(UIUtil.createOptionLine(new JComponent[]{jLabel,fileTypes,(JComponent)Box.createHorizontalStrut(8),jLabel2,contexts,(JComponent)Box.createHorizontalStrut(8),jLabel3,dialects}));
  jLabel.setLabelFor(fileTypes);
  jLabel2.setLabelFor(contexts);
  jLabel3.setLabelFor(dialects);
  detectFileTypeAndDialect();
  fileTypes.setSelectedItem(ourFtSearchVariant);
  fileTypes.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED)       initiateValidation();
    }
  }
);
  dialects.setSelectedItem(ourDialect);
  contexts.setSelectedItem(ourContext);
  updateDialectsAndContexts();
}
