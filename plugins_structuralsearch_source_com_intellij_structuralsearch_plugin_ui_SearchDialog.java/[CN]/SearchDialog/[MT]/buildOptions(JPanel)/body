{
  searchIncrementally=new JCheckBox(SSRBundle.message("find.with.prompt.checkbox"),false);
  if (isSearchOnDemandEnabled()) {
    searchOptions.add(UIUtil.createOptionLine(searchIncrementally));
  }
  recursiveMatching=new JCheckBox(SSRBundle.message("recursive.matching.checkbox"),true);
  if (isRecursiveSearchEnabled()) {
    searchOptions.add(UIUtil.createOptionLine(recursiveMatching));
  }
  caseSensitiveMatch=new JCheckBox(SSRBundle.message("case.sensitive.checkbox"),true);
  searchOptions.add(UIUtil.createOptionLine(caseSensitiveMatch));
  searchOptions.add(UIUtil.createOptionLine(new JComponent[]{maxMatchesSwitch=new JCheckBox(SSRBundle.message("maximum.matches.checkbox"),false),maxMatches=new JTextField(Integer.toString(MatchOptions.DEFAULT_MAX_MATCHES_COUNT),3),(JComponent)Box.createHorizontalGlue()}));
  maxMatches.setMaximumSize(new Dimension(50,25));
  Set<String> typeNames=new HashSet<String>();
  for (  FileType fileType : StructuralSearchUtil.getSuitableFileTypes()) {
    if (StructuralSearchUtil.getProfileByFileType(fileType) != null) {
      typeNames.add(StructuralSearchProfile.getTypeName(fileType));
    }
  }
  fileTypes=new JComboBox(ArrayUtil.toStringArray(typeNames));
  fileTypes.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      updateDialectsAndContexts();
      updateEditor();
    }
  }
);
  contexts=new JComboBox(new DefaultComboBoxModel());
  contexts.setRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      return super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
    }
  }
);
  dialects=new JComboBox(new DefaultComboBoxModel());
  dialects.setRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      if (value == null) {
        value="<no dialect>";
      }
 else       if (value instanceof Language) {
        value=((Language)value).getDisplayName();
      }
      return super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
    }
  }
);
  dialects.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      updateEditor();
    }
  }
);
  final JLabel jLabel=new JLabel(SSRBundle.message("search.dialog.file.type.label"));
  final JLabel jLabel2=new JLabel(SSRBundle.message("search.dialog.context.label"));
  final JLabel jLabel3=new JLabel(SSRBundle.message("search.dialog.file.dialect.label"));
  searchOptions.add(UIUtil.createOptionLine(new JComponent[]{(JComponent)Box.createHorizontalStrut(8),jLabel,fileTypes,(JComponent)Box.createHorizontalStrut(8),jLabel2,contexts,(JComponent)Box.createHorizontalStrut(8),jLabel3,dialects,new Box.Filler(new Dimension(0,0),new Dimension(Short.MAX_VALUE,0),new Dimension(Short.MAX_VALUE,0))}));
  jLabel.setLabelFor(fileTypes);
  detectFileTypeAndDialect();
  fileTypes.setSelectedItem(ourFtSearchVariant);
  fileTypes.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED)       initiateValidation();
    }
  }
);
  dialects.setSelectedItem(ourDialect);
  contexts.setSelectedItem(ourContext);
  updateDialectsAndContexts();
}
