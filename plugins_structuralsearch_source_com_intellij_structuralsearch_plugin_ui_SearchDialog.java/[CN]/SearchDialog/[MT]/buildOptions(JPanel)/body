{
  searchIncrementally=new JCheckBox(SSRBundle.message("find.with.prompt.checkbox"),false);
  if (isSearchOnDemandEnabled()) {
    searchOptions.add(UIUtil.createOptionLine(searchIncrementally));
  }
  recursiveMatching=new JCheckBox(SSRBundle.message("recursive.matching.checkbox"),true);
  if (isRecursiveSearchEnabled()) {
    searchOptions.add(UIUtil.createOptionLine(recursiveMatching));
  }
  caseSensitiveMatch=new JCheckBox(SSRBundle.message("case.sensitive.checkbox"),true);
  searchOptions.add(UIUtil.createOptionLine(caseSensitiveMatch));
  searchOptions.add(UIUtil.createOptionLine(new JComponent[]{maxMatchesSwitch=new JCheckBox(SSRBundle.message("maximum.matches.checkbox"),false),maxMatches=new JTextField(Integer.toString(MatchOptions.DEFAULT_MAX_MATCHES_COUNT),3),(JComponent)Box.createHorizontalGlue()}));
  maxMatches.setMaximumSize(new Dimension(50,25));
  java.util.List<String> typeNames=new ArrayList<String>();
  for (  StructuralSearchProfile profile : StructuralSearchUtil.getAllProfiles()) {
    for (    FileType type : profile.getFileTypes()) {
      typeNames.add(getPresentableName(type));
    }
  }
  fileTypes=new JComboBox(ArrayUtil.toStringArray(typeNames));
  final JLabel jLabel=new JLabel(SSRBundle.message("search.dialog.file.type.label"));
  searchOptions.add(UIUtil.createOptionLine(new JComponent[]{jLabel,fileTypes,(JComponent)Box.createHorizontalGlue()}));
  jLabel.setLabelFor(fileTypes);
  detectFileType();
  fileTypes.setSelectedItem(ourFileType);
  fileTypes.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED)       initiateValidation();
    }
  }
);
}
