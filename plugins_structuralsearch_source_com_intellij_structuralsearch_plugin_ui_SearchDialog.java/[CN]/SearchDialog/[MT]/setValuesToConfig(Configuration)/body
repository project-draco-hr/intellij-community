{
  MatchOptions options=config.getMatchOptions();
  boolean searchWithinHierarchy=IdeBundle.message("scope.class.hierarchy").equals(myScopeChooserCombo.getSelectedScopeName());
  options.setScope(searchWithinHierarchy && !myDoingOkAction ? GlobalSearchScope.projectScope(getProject()) : myScopeChooserCombo.getSelectedScope());
  options.setLooseMatching(true);
  options.setRecursiveSearch(isRecursiveSearchEnabled() && recursiveMatching.isSelected());
  ourUseMaxCount=maxMatchesSwitch.isSelected();
  if (maxMatchesSwitch.isSelected()) {
    try {
      options.setMaxMatchesCount(Integer.parseInt(maxMatches.getText()));
    }
 catch (    NumberFormatException ex) {
      options.setMaxMatchesCount(MatchOptions.DEFAULT_MAX_MATCHES_COUNT);
    }
  }
 else {
    options.setMaxMatchesCount(Integer.MAX_VALUE);
  }
  ourFtSearchVariant=(String)fileTypes.getSelectedItem();
  ourDialect=(Language)dialects.getSelectedItem();
  FileType fileType=getFileTypeByName(ourFtSearchVariant);
  options.setFileType(fileType);
  options.setDialect(ourDialect);
  options.setSearchPattern(searchCriteriaEdit.getDocument().getText());
  options.setCaseSensitiveMatch(caseSensitiveMatch.isSelected());
  config.setSearchOnDemand(isSearchOnDemandEnabled() && searchIncrementally.isSelected());
}
