{
  final PsiClass psiClass=psiClassType.resolve();
  if (psiClass != null) {
    final PsiTypeParameter[] typeParameters=psiClass.getTypeParameters();
    final PsiType[] parameters=psiClassType.getParameters();
    final PsiType[] newParameters=new PsiType[parameters.length];
    if (parameters.length != typeParameters.length)     return null;
    final HashSet<PsiTypeParameter> typeParametersSet=ContainerUtil.newHashSet(typeParameters);
    for (int i=0; i < parameters.length; i++) {
      PsiType paramType=parameters[i];
      if (paramType instanceof PsiWildcardType) {
        final PsiClassType[] extendsListTypes=typeParameters[i].getExtendsListTypes();
        final PsiClassType Bi=extendsListTypes.length > 0 ? extendsListTypes[0] : PsiType.getJavaLangObject(psiClass.getManager(),GlobalSearchScope.allScope(psiClass.getProject()));
        if (PsiPolyExpressionUtil.mentionsTypeParameters(Bi,typeParametersSet))         return null;
        final PsiType bound=((PsiWildcardType)paramType).getBound();
        if (bound == null) {
          newParameters[i]=Bi;
        }
 else         if (((PsiWildcardType)paramType).isExtends()) {
          newParameters[i]=GenericsUtil.getGreatestLowerBound(Bi,GenericsUtil.eliminateWildcards(bound,false));
        }
 else {
          newParameters[i]=GenericsUtil.eliminateWildcards(bound,false);
        }
      }
 else {
        newParameters[i]=paramType;
      }
    }
    return JavaPsiFacade.getElementFactory(psiClass.getProject()).createType(psiClass,newParameters);
  }
  return null;
}
