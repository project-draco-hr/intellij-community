{
  final Project project=aClass.getProject();
  final PsiIdentifier nameIdentifier=aClass.getNameIdentifier();
  final Module module=ModuleUtilCore.findModuleForPsiElement(aClass);
  if (nameIdentifier == null || module == null || !PsiUtil.isInstantiable(aClass))   return null;
  final PsiClass base=JavaPsiFacade.getInstance(project).findClass(getClassName(),GlobalSearchScope.allScope(project));
  if (base == null || !aClass.isInheritor(base,true))   return null;
  String descriptionDir=getDescriptionDirName(aClass);
  if (StringUtil.isEmptyOrSpaces(descriptionDir)) {
    return null;
  }
  for (  PsiDirectory description : getDescriptionsDirs(module)) {
    PsiDirectory dir=description.findSubdirectory(descriptionDir);
    if (dir == null)     continue;
    final PsiFile descr=dir.findFile("description.html");
    if (descr != null) {
      if (!hasBeforeAndAfterTemplate(dir.getVirtualFile())) {
        PsiElement problem=aClass.getNameIdentifier();
        ProblemDescriptor problemDescriptor=manager.createProblemDescriptor(problem == null ? nameIdentifier : problem,getHasNotBeforeAfterError(),isOnTheFly,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false);
        return new ProblemDescriptor[]{problemDescriptor};
      }
      return null;
    }
  }
  final PsiElement problem=aClass.getNameIdentifier();
  final ProblemDescriptor problemDescriptor=manager.createProblemDescriptor(problem == null ? nameIdentifier : problem,getHasNotDescriptionError(),isOnTheFly,new LocalQuickFix[]{getFix(module,descriptionDir)},ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
  return new ProblemDescriptor[]{problemDescriptor};
}
