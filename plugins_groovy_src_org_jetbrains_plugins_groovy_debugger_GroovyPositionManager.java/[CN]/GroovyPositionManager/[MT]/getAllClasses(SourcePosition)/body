{
  List<ReferenceType> result=ApplicationManager.getApplication().runReadAction(new Computable<List<ReferenceType>>(){
    @Override public List<ReferenceType> compute(){
      GroovyPsiElement sourceImage=findReferenceTypeSourceImage(position);
      if (sourceImage instanceof GrTypeDefinition && !((GrTypeDefinition)sourceImage).isAnonymous()) {
        String qName=getClassNameForJvm((GrTypeDefinition)sourceImage);
        if (qName != null)         return myDebugProcess.getVirtualMachineProxy().classesByName(qName);
      }
 else       if (sourceImage == null) {
        final String scriptName=getScriptQualifiedName(position);
        if (scriptName != null)         return myDebugProcess.getVirtualMachineProxy().classesByName(scriptName);
      }
 else {
        String enclosingName=findEnclosingName(position);
        if (enclosingName == null)         return null;
        final List<ReferenceType> outers=myDebugProcess.getVirtualMachineProxy().classesByName(enclosingName);
        final List<ReferenceType> result=new ArrayList<ReferenceType>(outers.size());
        for (        ReferenceType outer : outers) {
          final ReferenceType nested=findNested(outer,sourceImage,position);
          if (nested != null) {
            result.add(nested);
          }
        }
        return result;
      }
      return null;
    }
  }
);
  if (result == null)   throw new NoDataException();
  return result;
}
