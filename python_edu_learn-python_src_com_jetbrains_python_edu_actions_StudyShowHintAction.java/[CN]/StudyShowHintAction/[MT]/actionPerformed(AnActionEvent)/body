{
  final Project project=e.getProject();
  if (project == null) {
    return;
  }
  Course course=StudyTaskManager.getInstance(project).getCourse();
  if (course == null) {
    return;
  }
  StudyState studyState=new StudyState(StudyEditor.getSelectedStudyEditor(project));
  if (!studyState.isValid()) {
    return;
  }
  PsiFile file=PsiManager.getInstance(project).findFile(studyState.getVirtualFile());
  final Editor editor=studyState.getEditor();
  LogicalPosition pos=editor.getCaretModel().getLogicalPosition();
  TaskWindow taskWindow=studyState.getTaskFile().getTaskWindow(editor.getDocument(),pos);
  if (file == null || taskWindow == null) {
    return;
  }
  String hint=taskWindow.getHint();
  if (hint == null) {
    return;
  }
  File resourceFile=new File(course.getResourcePath());
  File resourceRoot=resourceFile.getParentFile();
  if (resourceRoot == null || !resourceRoot.exists()) {
    return;
  }
  File hintsDir=new File(resourceRoot,Course.HINTS_DIR);
  if (hintsDir.exists()) {
    String hintText=StudyUtils.getFileText(hintsDir.getAbsolutePath(),hint,true);
    int offset=editor.getDocument().getLineStartOffset(pos.line) + pos.column;
    PsiElement element=file.findElementAt(offset);
    if (hintText == null || element == null) {
      return;
    }
    DocumentationManager documentationManager=DocumentationManager.getInstance(project);
    DocumentationComponent component=new DocumentationComponent(documentationManager);
    component.setData(element,hintText,true,null);
    final JBPopup popup=JBPopupFactory.getInstance().createComponentPopupBuilder(component,component).setDimensionServiceKey(project,DocumentationManager.JAVADOC_LOCATION_AND_SIZE,false).setResizable(true).setMovable(true).setRequestFocus(true).createPopup();
    component.setHint(popup);
    popup.showInBestPositionFor(editor);
    Disposer.dispose(component);
  }
}
