{
  final JavaCoverageSuite javaSuite=(JavaCoverageSuite)suite;
  final List<PsiPackage> packages=javaSuite.getCurrentSuitePackages(myProject);
  final List<PsiClass> classes=javaSuite.getCurrentSuiteClasses(myProject);
  if (!packages.isEmpty() || !classes.isEmpty()) {
    myAlarm.addRequest(new Runnable(){
      public void run(){
        if (myProject.isDisposed())         return;
        for (        PsiPackage aPackage : packages) {
          new PackageAnnotator(aPackage).annotate(javaSuite,new PackageAnnotator.Annotator(){
            public void annotatePackage(            String packageQualifiedName,            PackageAnnotator.PackageCoverageInfo packageCoverageInfo){
              myPackageCoverageInfos.put(packageQualifiedName,packageCoverageInfo);
            }
            public void annotateSourceDirectory(            String packageQualifiedName,            PackageAnnotator.PackageCoverageInfo dirCoverageInfo,            Module module){
              final Pair<String,Module> p=new Pair<String,Module>(packageQualifiedName,module);
              myDirCoverageInfos.put(p,dirCoverageInfo);
            }
            public void annotateTestDirectory(            String packageQualifiedName,            PackageAnnotator.PackageCoverageInfo packageCoverageInfo,            Module module){
              final Pair<String,Module> p=new Pair<String,Module>(packageQualifiedName,module);
              myTestDirCoverageInfos.put(p,packageCoverageInfo);
            }
            public void annotateClass(            String classQualifiedName,            PackageAnnotator.ClassCoverageInfo classCoverageInfo){
              myClassCoverageInfos.put(classQualifiedName,classCoverageInfo);
            }
          }
);
        }
        dataManager.triggerPresentationUpdate();
      }
    }
,100);
  }
}
