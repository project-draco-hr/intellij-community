{
  final Project project=getProject();
  final List<PsiPackage> packages=new ArrayList<PsiPackage>();
  final List<PsiClass> classes=new ArrayList<PsiClass>();
  for (  CoverageSuite coverageSuite : suite.getSuites()) {
    final JavaCoverageSuite javaSuite=(JavaCoverageSuite)coverageSuite;
    classes.addAll(javaSuite.getCurrentSuiteClasses(project));
    packages.addAll(javaSuite.getCurrentSuitePackages(project));
  }
  if (packages.isEmpty() && classes.isEmpty()) {
    return null;
  }
  return new Runnable(){
    public void run(){
      final PackageAnnotator.Annotator annotator=new PackageAnnotator.Annotator(){
        public void annotatePackage(        String packageQualifiedName,        PackageAnnotator.PackageCoverageInfo packageCoverageInfo){
          myPackageCoverageInfos.put(packageQualifiedName,packageCoverageInfo);
        }
        public void annotatePackage(        String packageQualifiedName,        PackageAnnotator.PackageCoverageInfo packageCoverageInfo,        boolean flatten){
          if (flatten) {
            myFlattenPackageCoverageInfos.put(packageQualifiedName,packageCoverageInfo);
          }
 else {
            annotatePackage(packageQualifiedName,packageCoverageInfo);
          }
        }
        public void annotateSourceDirectory(        VirtualFile dir,        PackageAnnotator.PackageCoverageInfo dirCoverageInfo,        Module module){
          myDirCoverageInfos.put(dir,dirCoverageInfo);
        }
        public void annotateTestDirectory(        VirtualFile virtualFile,        PackageAnnotator.PackageCoverageInfo packageCoverageInfo,        Module module){
          myTestDirCoverageInfos.put(virtualFile,packageCoverageInfo);
        }
        public void annotateClass(        String classQualifiedName,        PackageAnnotator.ClassCoverageInfo classCoverageInfo){
          myClassCoverageInfos.put(classQualifiedName,classCoverageInfo);
        }
      }
;
      for (      PsiPackage aPackage : packages) {
        new PackageAnnotator(aPackage).annotate(suite,annotator);
      }
      for (      final PsiClass aClass : classes) {
        Runnable runnable=new Runnable(){
          public void run(){
            final String packageName=((PsiClassOwner)aClass.getContainingFile()).getPackageName();
            final PsiPackage psiPackage=JavaPsiFacade.getInstance(project).findPackage(packageName);
            if (psiPackage == null)             return;
            new PackageAnnotator(psiPackage).annotateFilteredClass(aClass,suite,annotator);
          }
        }
;
        ApplicationManager.getApplication().runReadAction(runnable);
      }
      dataManager.triggerPresentationUpdate();
    }
  }
;
}
