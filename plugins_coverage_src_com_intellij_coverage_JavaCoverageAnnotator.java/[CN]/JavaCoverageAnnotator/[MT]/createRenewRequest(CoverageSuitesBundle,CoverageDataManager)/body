{
  final Project project=getProject();
  final List<PsiPackage> packages=new ArrayList<PsiPackage>();
  final List<PsiClass> classes=new ArrayList<PsiClass>();
  for (  CoverageSuite coverageSuite : suite.getSuites()) {
    final JavaCoverageSuite javaSuite=(JavaCoverageSuite)coverageSuite;
    classes.addAll(javaSuite.getCurrentSuiteClasses(project));
    packages.addAll(javaSuite.getCurrentSuitePackages(project));
  }
  if (packages.isEmpty() && classes.isEmpty()) {
    return null;
  }
  return new Runnable(){
    public void run(){
      for (      PsiPackage aPackage : packages) {
        new PackageAnnotator(aPackage).annotate(suite,new PackageAnnotator.Annotator(){
          public void annotatePackage(          String packageQualifiedName,          PackageAnnotator.PackageCoverageInfo packageCoverageInfo){
            myPackageCoverageInfos.put(packageQualifiedName,packageCoverageInfo);
          }
          public void annotateSourceDirectory(          String packageQualifiedName,          PackageAnnotator.PackageCoverageInfo dirCoverageInfo,          Module module){
            final Pair<String,Module> p=new Pair<String,Module>(packageQualifiedName,module);
            myDirCoverageInfos.put(p,dirCoverageInfo);
          }
          public void annotateTestDirectory(          String packageQualifiedName,          PackageAnnotator.PackageCoverageInfo packageCoverageInfo,          Module module){
            final Pair<String,Module> p=new Pair<String,Module>(packageQualifiedName,module);
            myTestDirCoverageInfos.put(p,packageCoverageInfo);
          }
          public void annotateClass(          String classQualifiedName,          PackageAnnotator.ClassCoverageInfo classCoverageInfo){
            myClassCoverageInfos.put(classQualifiedName,classCoverageInfo);
          }
        }
);
      }
      dataManager.triggerPresentationUpdate();
    }
  }
;
}
