{
  String[] localFiles=local.list();
  String[] remoteFiles=remote.list();
  assertThat(localFiles,notNullValue());
  assertThat(remoteFiles,notNullValue());
  localFiles=ArrayUtil.remove(localFiles,Constants.DOT_GIT);
  remoteFiles=ArrayUtil.remove(remoteFiles,Constants.DOT_GIT);
  Arrays.sort(localFiles);
  Arrays.sort(remoteFiles);
  if (localExcludes.length != 0) {
    for (    String localExclude : localExcludes) {
      localFiles=ArrayUtil.remove(localFiles,localExclude);
    }
  }
  assertThat(localFiles,equalTo(remoteFiles));
  VirtualFile[] expectedFiles;
  if (expected == null) {
    expectedFiles=null;
  }
 else {
    assertThat(expected.isDirectory(),equalTo(true));
    expectedFiles=expected.getChildren();
    Arrays.sort(expectedFiles,new Comparator<VirtualFile>(){
      @Override public int compare(      @NotNull VirtualFile o1,      @NotNull VirtualFile o2){
        return o1.getName().compareTo(o2.getName());
      }
    }
);
    for (int i=0, n=expectedFiles.length; i < n; i++) {
      assertThat(localFiles[i],equalTo(expectedFiles[i].getName()));
    }
  }
  for (int i=0, n=localFiles.length; i < n; i++) {
    File localFile=new File(local,localFiles[i]);
    File remoteFile=new File(remote,remoteFiles[i]);
    VirtualFile expectedFile;
    if (expectedFiles == null) {
      expectedFile=null;
    }
 else {
      expectedFile=expectedFiles[i];
      assertThat(expectedFile.isDirectory(),equalTo(localFile.isDirectory()));
    }
    if (localFile.isFile()) {
      assertThat(FileUtil.loadFile(localFile),equalTo(FileUtil.loadFile(remoteFile)));
    }
 else {
      compareFiles(localFile,remoteFile,expectedFile,localExcludes);
    }
  }
}
