{
  System.setProperty("sun.awt.noerasebackground","true");
  Toolkit.getDefaultToolkit().getSystemEventQueue().push(IdeEventQueue.getInstance());
  if (Patches.SUN_BUG_ID_6209673) {
    RepaintManager.setCurrentManager(new IdeRepaintManager());
  }
  if (SystemInfo.isXWindow) {
    String wmName=X11UiUtil.getWmName();
    LOG.info("WM detected: " + wmName);
    if (wmName != null) {
      X11UiUtil.patchDetectedWm(wmName);
    }
  }
  IconLoader.activate();
  new JFrame().pack();
  final File file=new File(PathManager.getSystemPath());
  final AtomicBoolean reported=new AtomicBoolean();
  final long lowDiskSpaceThreshold=50 * 1024 * 1024;
  final ThreadLocal<Future<Long>> ourFreeSpaceCalculation=new ThreadLocal<Future<Long>>();
  JobScheduler.getScheduler().schedule(new Runnable(){
    public static final long MAX_WRITE_SPEED_IN_BYTES_PER_SECOND=1024 * 1024 * 500;
    @Override public void run(){
      if (!reported.get()) {
        Future<Long> future=ourFreeSpaceCalculation.get();
        if (future == null) {
          ourFreeSpaceCalculation.set(future=ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>(){
            @Override public Long call() throws Exception {
              return file.getUsableSpace();
            }
          }
));
        }
        if (!future.isDone()) {
          JobScheduler.getScheduler().schedule(this,1,TimeUnit.SECONDS);
          return;
        }
        try {
          final long fileUsableSpace=future.isCancelled() ? 0 : future.get();
          final long timeout=Math.max(5,(fileUsableSpace - lowDiskSpaceThreshold) / MAX_WRITE_SPEED_IN_BYTES_PER_SECOND);
          ourFreeSpaceCalculation.set(null);
          if (fileUsableSpace < lowDiskSpaceThreshold) {
            if (!notificationsComponentIsLoaded()) {
              ourFreeSpaceCalculation.set(future);
              JobScheduler.getScheduler().schedule(this,1,TimeUnit.SECONDS);
              return;
            }
            reported.compareAndSet(false,true);
            SwingUtilities.invokeLater(new Runnable(){
              @Override public void run(){
                String fullProductName=ApplicationNamesInfo.getInstance().getFullProductName();
                String message="Low disk space on disk where system directory of " + fullProductName + " is located";
                if (fileUsableSpace < 100 * 1024) {
                  LOG.info(message);
                  Messages.showErrorDialog(message,"Fatal Configuration Problem");
                  reported.compareAndSet(true,false);
                  restart(timeout);
                }
 else {
                  new NotificationGroup("System",NotificationDisplayType.STICKY_BALLOON,false).createNotification(message,file.getPath(),NotificationType.ERROR,null).whenExpired(new Runnable(){
                    @Override public void run(){
                      reported.compareAndSet(true,false);
                      restart(timeout);
                    }
                  }
).notify(null);
                }
              }
            }
);
          }
 else {
            restart(timeout);
          }
        }
 catch (        Exception ex) {
          LOG.error(ex);
        }
      }
    }
    private boolean notificationsComponentIsLoaded(){
      return ApplicationManager.getApplication().runReadAction(new Computable<NotificationsConfiguration>(){
        @Override public NotificationsConfiguration compute(){
          return NotificationsConfiguration.getNotificationsConfiguration();
        }
      }
) != null;
    }
    private void restart(    long timeout){
      JobScheduler.getScheduler().schedule(this,timeout,TimeUnit.SECONDS);
    }
  }
,1,TimeUnit.SECONDS);
}
