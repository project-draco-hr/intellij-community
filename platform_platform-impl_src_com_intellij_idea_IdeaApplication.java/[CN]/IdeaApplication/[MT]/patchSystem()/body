{
  System.setProperty("sun.awt.noerasebackground","true");
  Toolkit.getDefaultToolkit().getSystemEventQueue().push(IdeEventQueue.getInstance());
  if (Patches.SUN_BUG_ID_6209673) {
    RepaintManager.setCurrentManager(new IdeRepaintManager());
  }
  if (SystemInfo.isXWindow) {
    String wmName=X11UiUtil.getWmName();
    LOG.info("WM detected: " + wmName);
    if (wmName != null) {
      X11UiUtil.patchDetectedWm(wmName);
    }
  }
  IconLoader.activate();
  new JFrame().pack();
  final File file=new File(PathManager.getSystemPath());
  final AtomicBoolean reported=new AtomicBoolean();
  final long lowDiskSpaceThreshold=50 * 1024 * 1024;
  JobScheduler.getScheduler().schedule(new Runnable(){
    public static final long MAX_WRITE_SPEED_IN_BYTES_PER_SECOND=1024 * 1024 * 500;
    @Override public void run(){
      if (!reported.get()) {
        final long fileUsableSpace=file.getUsableSpace();
        if (fileUsableSpace < lowDiskSpaceThreshold) {
          reported.compareAndSet(false,true);
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              boolean writable=file.canWrite();
              String fullProductName=ApplicationNamesInfo.getInstance().getFullProductName();
              String title=writable ? "Low disk space on disk where system directory of " + fullProductName + " is located" : "System directory of " + fullProductName + " is read only";
              if (!writable || fileUsableSpace < 100 * 1024) {
                Messages.showErrorDialog(title,"Fatal Configuration Problem");
                reported.compareAndSet(true,false);
              }
 else {
                new NotificationGroup("System",NotificationDisplayType.STICKY_BALLOON,false).createNotification(title,file.getPath(),NotificationType.ERROR,null).whenExpired(new Runnable(){
                  @Override public void run(){
                    reported.compareAndSet(true,false);
                  }
                }
).notify(null);
              }
            }
          }
);
        }
 else {
          long timeout=(fileUsableSpace - lowDiskSpaceThreshold) % MAX_WRITE_SPEED_IN_BYTES_PER_SECOND;
          JobScheduler.getScheduler().schedule(this,Math.max(5,timeout),TimeUnit.SECONDS);
        }
      }
    }
  }
,5,TimeUnit.SECONDS);
}
