{
  final PsiCodeBlock tryBlock1=statement1.getTryBlock();
  final PsiCodeBlock tryBlock2=statement2.getTryBlock();
  if (!codeBlocksAreEquivalentDecision(tryBlock1,tryBlock2).getExactlyMatches()) {
    return EXACTLY_UN_MATCHES;
  }
  final PsiCodeBlock finallyBlock1=statement1.getFinallyBlock();
  final PsiCodeBlock finallyBlock2=statement2.getFinallyBlock();
  if (!codeBlocksAreEquivalentDecision(finallyBlock1,finallyBlock2).getExactlyMatches()) {
    return EXACTLY_UN_MATCHES;
  }
  final PsiCodeBlock[] catchBlocks1=statement1.getCatchBlocks();
  final PsiCodeBlock[] catchBlocks2=statement2.getCatchBlocks();
  if (catchBlocks1.length != catchBlocks2.length) {
    return EXACTLY_UN_MATCHES;
  }
  for (int i=0; i < catchBlocks2.length; i++) {
    if (!codeBlocksAreEquivalentDecision(catchBlocks1[i],catchBlocks2[i]).getExactlyMatches()) {
      return EXACTLY_UN_MATCHES;
    }
  }
  final PsiResourceList resourceList1=statement1.getResourceList();
  final PsiResourceList resourceList2=statement2.getResourceList();
  if (resourceList1 != null) {
    if (resourceList2 == null) {
      return EXACTLY_UN_MATCHES;
    }
    if (resourceList1.getResourceVariablesCount() != resourceList2.getResourceVariablesCount()) {
      return EXACTLY_UN_MATCHES;
    }
    final List<PsiResourceListElement> resources1=PsiTreeUtil.getChildrenOfTypeAsList(resourceList1,PsiResourceListElement.class);
    final List<PsiResourceListElement> resources2=PsiTreeUtil.getChildrenOfTypeAsList(resourceList2,PsiResourceListElement.class);
    for (int i=0, size=resources1.size(); i < size; i++) {
      final PsiResourceListElement resource1=resources1.get(i);
      final PsiResourceListElement resource2=resources2.get(i);
      if (resource1 instanceof PsiResourceVariable && resource2 instanceof PsiResourceVariable) {
        if (!localVariablesAreEquivalent((PsiLocalVariable)resource1,(PsiLocalVariable)resource2).getExactlyMatches()) {
          return EXACTLY_UN_MATCHES;
        }
      }
 else       if (resource1 instanceof PsiResourceExpression && resource2 instanceof PsiResourceExpression) {
        if (!expressionsAreEquivalentDecision(((PsiResourceExpression)resource1).getExpression(),((PsiResourceExpression)resource2).getExpression()).getExactlyMatches()) {
          return EXACTLY_UN_MATCHES;
        }
      }
 else {
        return EXACTLY_UN_MATCHES;
      }
    }
  }
 else   if (resourceList2 != null) {
    return EXACTLY_UN_MATCHES;
  }
  final PsiParameter[] catchParameters1=statement1.getCatchBlockParameters();
  final PsiParameter[] catchParameters2=statement2.getCatchBlockParameters();
  if (catchParameters1.length != catchParameters2.length) {
    return EXACTLY_UN_MATCHES;
  }
  for (int i=0; i < catchParameters2.length; i++) {
    if (!parametersAreEquivalent(catchParameters2[i],catchParameters1[i]).getExactlyMatches()) {
      return EXACTLY_UN_MATCHES;
    }
  }
  return EXACTLY_MATCHES;
}
