{
  final PsiReferenceExpression methodExpression1=methodCallExpression1.getMethodExpression();
  final PsiReferenceExpression methodExpression2=methodCallExpression2.getMethodExpression();
  if (!expressionsAreEquivalentDecision(methodExpression1,methodExpression2).getExactlyMatches()) {
    return EXACTLY_UN_MATCHES;
  }
  final PsiExpressionList argumentList1=methodCallExpression1.getArgumentList();
  final PsiExpression[] args1=argumentList1.getExpressions();
  final PsiExpressionList argumentList2=methodCallExpression2.getArgumentList();
  final PsiExpression[] args2=argumentList2.getExpressions();
  final Decision decision=expressionListsAreEquivalent(args1,args2);
  if (args1.length != 0 && (!decision.isExact() || !decision.isExactUnMatches())) {
    final PsiElement leftDiff=decision.getLeftDiff();
    PsiExpression lastArg=args1[args1.length - 1];
    if (Comparing.equal(leftDiff,lastArg)) {
      final PsiType type1=lastArg.getType();
      final PsiType type2=args2[args2.length - 1].getType();
      if (type2 instanceof PsiArrayType && !(type1 instanceof PsiArrayType)) {
        return EXACTLY_UN_MATCHES;
      }
      if (type1 instanceof PsiArrayType && !(type2 instanceof PsiArrayType)) {
        return EXACTLY_UN_MATCHES;
      }
    }
  }
  return decision;
}
