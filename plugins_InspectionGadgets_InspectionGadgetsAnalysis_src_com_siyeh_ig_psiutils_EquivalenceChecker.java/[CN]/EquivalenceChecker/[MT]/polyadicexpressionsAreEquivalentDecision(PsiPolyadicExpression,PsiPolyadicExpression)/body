{
  final IElementType tokenType1=polyadicExpression1.getOperationTokenType();
  final IElementType tokenType2=polyadicExpression2.getOperationTokenType();
  if (!tokenType1.equals(tokenType2)) {
    return EXACTLY_UN_MATCHES;
  }
  final PsiExpression[] operands1=polyadicExpression1.getOperands();
  final PsiExpression[] operands2=polyadicExpression2.getOperands();
  if (operands1.length != operands2.length) {
    return EXACTLY_UN_MATCHES;
  }
  Decision incompleteDecision=null;
  for (int i=0, length=operands1.length; i < length; i++) {
    final Decision decisionForCurrentOperand=expressionsAreEquivalentDecision(operands1[i],operands2[i]);
    if (!decisionForCurrentOperand.getExactlyMatches()) {
      if (incompleteDecision == null) {
        incompleteDecision=decisionForCurrentOperand.isExactUnMatches() ? new Decision(operands1[i],operands2[i]) : decisionForCurrentOperand;
      }
 else {
        return EXACTLY_UN_MATCHES;
      }
    }
  }
  return incompleteDecision != null ? incompleteDecision : EXACTLY_MATCHES;
}
