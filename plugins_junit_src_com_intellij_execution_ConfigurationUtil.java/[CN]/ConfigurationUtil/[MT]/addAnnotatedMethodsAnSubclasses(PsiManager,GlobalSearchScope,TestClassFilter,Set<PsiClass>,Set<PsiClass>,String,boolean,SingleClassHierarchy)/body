{
  final Ref<Boolean> isJUnit4=new Ref<Boolean>(Boolean.FALSE);
  final PsiClass testAnnotation=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>(){
    @Nullable public PsiClass compute(){
      return JavaPsiFacade.getInstance(manager.getProject()).findClass(annotation,GlobalSearchScope.allScope(manager.getProject()));
    }
  }
);
  if (testAnnotation != null) {
    ClassesWithAnnotatedMembersSearch.search(testAnnotation,GlobalSearchScope.allScope(manager.getProject())).forEach(new Processor<PsiClass>(){
      public boolean process(      final PsiClass annotated){
        AccessToken token=ReadAction.start();
        try {
          if (!processed.add(annotated)) {
            return true;
          }
          final VirtualFile file=PsiUtilCore.getVirtualFile(annotated);
          if (file != null && scope.contains(file) && testClassFilter.isAccepted(annotated)) {
            if (!found.add(annotated)) {
              return true;
            }
            isJUnit4.set(Boolean.TRUE);
          }
        }
  finally {
          token.finish();
        }
        if (table != null) {
          SmartClassAnchor[] candidates=table.getAllSubtypes(annotated);
          for (          final SmartClassAnchor candidate : candidates) {
            ApplicationManager.getApplication().runReadAction(new Runnable(){
              @Override public void run(){
                int fileId=candidate.myFileId;
                VirtualFile file=PersistentFS.getInstance().findFileById(fileId);
                if (file != null && scope.contains(file)) {
                  PsiClass aClass=ClassAnchorUtil.retrieve(manager.getProject(),candidate);
                  if (testClassFilter.isAccepted(aClass)) {
                    found.add(aClass);
                    processed.add(aClass);
                    isJUnit4.set(Boolean.TRUE);
                  }
                }
              }
            }
);
          }
        }
 else {
          ClassInheritorsSearch.search(annotated,scope,true,true,false).forEach(new ReadActionProcessor<PsiClass>(){
            @Override public boolean processInReadAction(            PsiClass aClass){
              if (testClassFilter.isAccepted(aClass)) {
                found.add(aClass);
                processed.add(aClass);
                isJUnit4.set(Boolean.TRUE);
              }
              return true;
            }
          }
);
        }
        return true;
      }
    }
);
  }
  return isJUnit4.get().booleanValue();
}
