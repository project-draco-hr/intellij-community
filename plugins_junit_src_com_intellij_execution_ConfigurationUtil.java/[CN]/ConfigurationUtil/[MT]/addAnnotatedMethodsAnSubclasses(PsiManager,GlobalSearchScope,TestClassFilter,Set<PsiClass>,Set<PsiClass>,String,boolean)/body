{
  final Ref<Boolean> isJUnit4=new Ref<Boolean>(Boolean.FALSE);
  final PsiClass testAnnotation=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>(){
    @Nullable public PsiClass compute(){
      return JavaPsiFacade.getInstance(manager.getProject()).findClass(annotation,GlobalSearchScope.allScope(manager.getProject()));
    }
  }
);
  if (testAnnotation != null) {
    AnnotatedMembersSearch.search(testAnnotation,GlobalSearchScope.allScope(manager.getProject())).forEach(new Processor<PsiMember>(){
      public boolean process(      final PsiMember annotated){
        final PsiClass containingClass;
        AccessToken token=ReadAction.start();
        try {
          containingClass=annotated instanceof PsiClass ? (PsiClass)annotated : annotated.getContainingClass();
          if (containingClass == null || annotated instanceof PsiMethod != isMethod) {
            return true;
          }
          if (!processed.add(containingClass)) {
            return true;
          }
          final VirtualFile file=PsiUtilCore.getVirtualFile(containingClass);
          if (file != null && scope.contains(file) && testClassFilter.isAccepted(containingClass)) {
            if (!found.add(containingClass)) {
              return true;
            }
            isJUnit4.set(Boolean.TRUE);
          }
        }
  finally {
          token.finish();
        }
        ClassInheritorsSearch.search(containingClass,scope,true,true,false).forEach(new ReadActionProcessor<PsiClass>(){
          @Override public boolean processInReadAction(          PsiClass aClass){
            if (testClassFilter.isAccepted(aClass)) {
              found.add(aClass);
              processed.add(aClass);
              isJUnit4.set(Boolean.TRUE);
            }
            return true;
          }
        }
);
        return true;
      }
    }
);
  }
  return isJUnit4.get().booleanValue();
}
