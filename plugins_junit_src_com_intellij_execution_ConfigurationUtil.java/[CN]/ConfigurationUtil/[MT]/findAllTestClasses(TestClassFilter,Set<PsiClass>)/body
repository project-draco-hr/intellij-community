{
  final PsiManager manager=testClassFilter.getPsiManager();
  final Project project=manager.getProject();
  GlobalSearchScope projectScopeWithoutLibraries=GlobalSearchScope.projectScope(project);
  final GlobalSearchScope scope=projectScopeWithoutLibraries.intersectWith(testClassFilter.getScope());
  SingleClassHierarchy symbols=HierarchyService.isEnabled() ? HierarchyService.instance(project).getSingleClassHierarchy() : null;
  if (symbols != null) {
    SmartClassAnchor[] candidates=symbols.getAllSubtypes(testClassFilter.getBase());
    for (    SmartClassAnchor candidate : candidates) {
      int fileId=candidate.myFileId;
      VirtualFile file=PersistentFS.getInstance().findFileById(fileId);
      if (file != null && scope.contains(file)) {
        PsiClass aClass=ClassAnchorUtil.retrieveInReadAction(project,candidate);
        if (testClassFilter.isAccepted(aClass)) {
          found.add(aClass);
        }
      }
    }
  }
 else {
    ClassInheritorsSearch.search(testClassFilter.getBase(),scope,true,true,false).forEach(new PsiElementProcessorAdapter<PsiClass>(new PsiElementProcessor<PsiClass>(){
      public boolean execute(      @NotNull final PsiClass aClass){
        if (testClassFilter.isAccepted(aClass))         found.add(aClass);
        return true;
      }
    }
));
  }
  final PsiMethod[] suiteMethods=ApplicationManager.getApplication().runReadAction(new Computable<PsiMethod[]>(){
    public PsiMethod[] compute(){
      return PsiShortNamesCache.getInstance(project).getMethodsByName(JUnitUtil.SUITE_METHOD_NAME,scope);
    }
  }
);
  for (  final PsiMethod method : suiteMethods) {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        final PsiClass containingClass=method.getContainingClass();
        if (containingClass == null)         return;
        if (containingClass instanceof PsiAnonymousClass)         return;
        if (containingClass.hasModifierProperty(PsiModifier.ABSTRACT))         return;
        if (containingClass.getContainingClass() != null && !containingClass.hasModifierProperty(PsiModifier.STATIC))         return;
        if (JUnitUtil.isSuiteMethod(method) && testClassFilter.isAccepted(containingClass)) {
          found.add(containingClass);
        }
      }
    }
);
  }
  Set<PsiClass> processed=ContainerUtil.newHashSet();
  boolean hasJunit4=addAnnotatedMethodsAnSubclasses(manager,scope,testClassFilter,found,processed,JUnitUtil.TEST_ANNOTATION,true,symbols);
  hasJunit4|=addAnnotatedMethodsAnSubclasses(manager,scope,testClassFilter,found,processed,JUnitUtil.TEST5_ANNOTATION,true,symbols);
  hasJunit4|=addAnnotatedMethodsAnSubclasses(manager,scope,testClassFilter,found,processed,JUnitUtil.RUN_WITH,false,symbols);
  return hasJunit4;
}
