{
  final Channel currentChannel=channel;
  if (currentChannel == null) {
    return Promise.DONE;
  }
  vm.getCommandProcessor().cancelWaitingRequests();
  Request disconnectRequest=vm.createDisconnectRequest();
  if (disconnectRequest == null) {
    vm.getCommandProcessor().closed();
    channel=null;
    return closeChannel(currentChannel);
  }
  @SuppressWarnings("unchecked") Promise<Void> promise=vm.getCommandProcessor().send(disconnectRequest);
  vm.getCommandProcessor().closed();
  channel=null;
  final AsyncPromise<Void> subCallback=new AsyncPromise<Void>();
  promise.processed(new Consumer<Void>(){
    @Override public void consume(    Void o){
      try {
        vm.getCommandProcessor().cancelWaitingRequests();
        NettyUtil.closeAndReleaseFactory(currentChannel);
      }
  finally {
        subCallback.setResult(null);
      }
    }
  }
);
  return subCallback;
}
