{
  final Channel currentChannel=channel;
  if (currentChannel == null) {
    return Promise.DONE;
  }
  vm.getCommandProcessor().cancelWaitingRequests();
  Request disconnectRequest=vm.createDisconnectRequest();
  final AsyncPromise<Void> promise=new AsyncPromise<Void>();
  if (disconnectRequest == null) {
    vm.getCommandProcessor().closed();
    channel=null;
    closeChannel(currentChannel,promise);
    return promise;
  }
  vm.getCommandProcessor().closed();
  channel=null;
  vm.getCommandProcessor().send(disconnectRequest).processed(new Consumer<Void>(){
    @Override public void consume(    Void o){
      try {
        vm.getCommandProcessor().cancelWaitingRequests();
        closeChannel(currentChannel,promise);
      }
 catch (      Throwable e) {
        promise.setError(e);
      }
    }
  }
);
  return promise;
}
