{
  final ResourceBundleEditor resourceBundleEditor=(ResourceBundleEditor)PlatformDataKeys.FILE_EDITOR.getData(e.getDataContext());
  LOG.assertTrue(resourceBundleEditor != null);
  final Project project=getEventProject(e);
  LOG.assertTrue(project != null);
  final Set<String> properties=new HashSet<String>();
  processSelectedIncompleteProperties(new Processor<IProperty>(){
    @Override public boolean process(    IProperty property){
      properties.add(property.getKey());
      return true;
    }
  }
,resourceBundleEditor,project);
  final IgnoredPropertiesFilesSuffixesManager suffixesManager=IgnoredPropertiesFilesSuffixesManager.getInstance(project);
  final List<PropertiesFile> allFilesWithoutTranslation=suffixesManager.getPropertiesFilesWithoutTranslation(resourceBundleEditor.getResourceBundle(),properties);
  if (allFilesWithoutTranslation.isEmpty()) {
    return;
  }
  Collections.sort(allFilesWithoutTranslation,new Comparator<PropertiesFile>(){
    @Override public int compare(    PropertiesFile p1,    PropertiesFile p2){
      return p1.getName().compareTo(p2.getName());
    }
  }
);
  final List<PropertiesFile> suffixRepresentatives=new IgnoredSuffixesDialog(allFilesWithoutTranslation,project).showAndGetSuffixesRepresentatives();
  if (suffixRepresentatives == null) {
    return;
  }
  final List<String> suffixesToIgnore=ContainerUtil.map(suffixRepresentatives,new NotNullFunction<PropertiesFile,String>(){
    @NotNull @Override public String fun(    PropertiesFile propertiesFile){
      return PropertiesUtil.getSuffix(propertiesFile);
    }
  }
);
  if (!suffixesToIgnore.isEmpty()) {
    suffixesManager.addSuffixes(suffixesToIgnore);
    UIUtil.invokeLaterIfNeeded(new Runnable(){
      @Override public void run(){
        resourceBundleEditor.queueUpdateTree();
      }
    }
);
  }
}
