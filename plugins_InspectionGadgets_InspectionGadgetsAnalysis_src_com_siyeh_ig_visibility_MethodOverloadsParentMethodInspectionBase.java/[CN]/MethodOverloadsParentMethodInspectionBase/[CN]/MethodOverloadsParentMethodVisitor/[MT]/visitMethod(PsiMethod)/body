{
  if (method.hasModifierProperty(PsiModifier.PRIVATE) || method.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  if (method.getNameIdentifier() == null || method.isConstructor()) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  if (MethodUtils.hasSuper(method)) {
    return;
  }
  final Set<PsiClass> visitedClasses=new HashSet<>();
  processSupers(method,aClass,aClass,visitedClasses);
}
