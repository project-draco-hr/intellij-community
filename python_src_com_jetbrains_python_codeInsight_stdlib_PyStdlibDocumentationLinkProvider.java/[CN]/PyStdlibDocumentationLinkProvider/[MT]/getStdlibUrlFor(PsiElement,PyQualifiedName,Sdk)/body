{
  StringBuilder urlBuilder=new StringBuilder(getExternalDocumentationRoot(sdk));
  String qnameString=moduleName.toString();
  if (qnameString.equals("ntpath") || qnameString.equals("posixpath")) {
    qnameString="os.path";
  }
 else   if (qnameString.equals("nt")) {
    qnameString="os";
  }
 else   if (qnameString.equals("cPickle")) {
    qnameString="pickle";
  }
 else   if (qnameString.equals("pyexpat")) {
    qnameString="xml.parsers.expat";
  }
  final String pyVersion=PythonDocumentationProvider.pyVersion(sdk.getVersionString());
  List<String> modules=pyVersion != null && pyVersion.startsWith("3") ? py3LibraryModules : py2LibraryModules;
  boolean foundModule=false;
  for (  String module : modules) {
    if (qnameString.startsWith(module)) {
      urlBuilder.append(module);
      urlBuilder.append(".html");
      foundModule=true;
      break;
    }
  }
  if (foundModule && element instanceof PsiNamedElement && !(element instanceof PyFile)) {
    urlBuilder.append('#').append(moduleName).append(".");
    if (element instanceof PyFunction) {
      final PyClass containingClass=((PyFunction)element).getContainingClass();
      if (containingClass != null) {
        urlBuilder.append(containingClass.getName()).append('.');
      }
    }
    urlBuilder.append(((PsiNamedElement)element).getName());
  }
  return urlBuilder.toString();
}
