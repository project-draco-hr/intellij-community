{
  List<DiffFragment> newFragments;
  if (beforeFragment.getFineFragments() == null && afterFragment.getFineFragments() == null) {
    newFragments=null;
  }
 else {
    List<? extends DiffFragment> beforeFragments=extractFragments((FineLineFragment)beforeFragment);
    List<? extends DiffFragment> afterFragments=extractFragments((FineLineFragment)afterFragment);
    newFragments=new ArrayList<DiffFragment>(beforeFragments.size() + afterFragments.size());
    newFragments.addAll(beforeFragments);
    int shift1=afterFragment.getStartOffset1() - beforeFragment.getStartOffset1();
    int shift2=afterFragment.getStartOffset2() - beforeFragment.getStartOffset2();
    for (int i=0; i < afterFragments.size(); i++) {
      DiffFragment fragment=afterFragments.get(i);
      int startOffset1=fragment.getStartOffset1() + shift1;
      int endOffset1=fragment.getEndOffset1() + shift1;
      int startOffset2=fragment.getStartOffset2() + shift2;
      int endOffset2=fragment.getEndOffset2() + shift2;
      newFragments.add(new DiffFragmentImpl(startOffset1,endOffset1,startOffset2,endOffset2));
      if (i == 0 && newFragments.size() > 1) {
        DiffFragment lastFragment=newFragments.get(newFragments.size() - 2);
        if (lastFragment.getEndOffset1() == startOffset1 && lastFragment.getEndOffset2() == startOffset2) {
          newFragments.remove(newFragments.size() - 1);
          newFragments.remove(newFragments.size() - 1);
          newFragments.add(new DiffFragmentImpl(lastFragment.getStartOffset1(),endOffset1,lastFragment.getStartOffset2(),endOffset2));
        }
      }
    }
  }
  return new FineLineFragmentImpl(beforeFragment.getStartLine1(),afterFragment.getEndLine1(),beforeFragment.getStartLine2(),afterFragment.getEndLine2(),beforeFragment.getStartOffset1(),afterFragment.getEndOffset1(),beforeFragment.getStartOffset2(),afterFragment.getEndOffset2(),newFragments);
}
