{
  final List<ASTNode> nodes=getStringNodes();
  if (nodes.size() > 0) {
    String text=getStringNodes().get(0).getText();
    PyFile file=PsiTreeUtil.getParentOfType(this,PyFile.class);
    if (file != null) {
      boolean hasUnicodeImport=false;
      List<PyFromImportStatement> fromImports=file.getFromImports();
      loop:       for (      PyFromImportStatement st : fromImports) {
        if (st.isFromFuture()) {
          PyImportElement[] elements=st.getImportElements();
          for (          PyImportElement e : elements) {
            if (PyNames.UNICODE_LITERALS.equals(e.getVisibleName())) {
              hasUnicodeImport=true;
              break loop;
            }
          }
        }
      }
      IElementType type=PythonHighlightingLexer.convertStringType(getStringNodes().get(0).getElementType(),text,LanguageLevel.forElement(this),hasUnicodeImport);
      if (PyTokenTypes.UNICODE_NODES.contains(type)) {
        return PyBuiltinCache.getInstance(this).getUnicodeType(LanguageLevel.forElement(this));
      }
    }
  }
  return PyBuiltinCache.getInstance(this).getBytesType(LanguageLevel.forElement(this));
}
