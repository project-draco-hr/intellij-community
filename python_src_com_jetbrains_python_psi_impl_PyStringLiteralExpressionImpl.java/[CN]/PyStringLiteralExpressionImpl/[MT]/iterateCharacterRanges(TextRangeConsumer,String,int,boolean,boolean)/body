{
  if (raw) {
    return iterateRawCharacterRanges(consumer,undecoded,off,unicode);
  }
  Matcher escMatcher=PATTERN_ESCAPE.matcher(undecoded);
  int index=0;
  while (escMatcher.find(index)) {
    for (int i=index; i < escMatcher.start(); i++) {
      if (!consumer.process(off + i,off + i + 1,Character.toString(undecoded.charAt(i)))) {
        return false;
      }
    }
    String octal=escMatcher.group(2);
    String hex=escMatcher.group(3);
    String str=null;
    if (octal != null) {
      str=new String(new char[]{(char)Integer.parseInt(octal,8)});
    }
 else     if (hex != null) {
      str=new String(new char[]{(char)Integer.parseInt(hex,16)});
    }
 else {
      String toReplace=escMatcher.group(1);
      String replacement=escapeMap.get(toReplace);
      if (replacement != null) {
        str=replacement;
      }
    }
    if (unicode) {
      String unicodeName=escMatcher.group(4);
      String unicode32=escMatcher.group(6);
      if (unicode32 != null) {
        str=new String(Character.toChars((int)Long.parseLong(unicode32,16)));
      }
      if (unicodeName != null) {
      }
      String unicode16=escMatcher.group(5);
      if (unicode16 != null) {
        str=new String(new char[]{(char)Integer.parseInt(unicode16,16)});
      }
    }
    if (str != null) {
      int start=escMatcher.start();
      int end=escMatcher.end();
      if (!consumer.process(off + start,off + end,str)) {
        return false;
      }
    }
    index=escMatcher.end();
  }
  for (int i=index; i < undecoded.length(); i++) {
    if (!consumer.process(off + i,off + i + 1,Character.toString(undecoded.charAt(i)))) {
      return false;
    }
  }
  return true;
}
