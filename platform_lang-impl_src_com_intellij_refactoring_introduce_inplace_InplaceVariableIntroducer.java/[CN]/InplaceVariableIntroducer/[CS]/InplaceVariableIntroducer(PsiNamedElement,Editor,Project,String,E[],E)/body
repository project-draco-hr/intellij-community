{
  super(editor,elementToRename,project);
  myTitle=title;
  myOccurrences=occurrences;
  if (expr != null) {
    final ASTNode node=expr.getNode();
    ASTNode prev=node.getTreePrev();
    final ASTNode astNode=prev instanceof PsiWhiteSpace ? null : LanguageTokenSeparatorGenerators.INSTANCE.forLanguage(expr.getLanguage()).generateWhitespaceBetweenTokens(prev,node);
    if (astNode != null) {
      final Lexer lexer=LanguageParserDefinitions.INSTANCE.forLanguage(expr.getLanguage()).createLexer(project);
      if (LanguageUtil.canStickTokensTogetherByLexer(prev,prev,lexer) == ParserDefinition.SpaceRequirements.MUST) {
        PostprocessReformattingAspect.getInstance(project).disablePostprocessFormattingInside(new Runnable(){
          @Override public void run(){
            new WriteCommandAction<Object>(project,"Normalize declaration"){
              @Override protected void run(              @NotNull Result<Object> result) throws Throwable {
                node.getTreeParent().addChild(astNode,node);
              }
            }
.execute();
          }
        }
);
      }
    }
    myExpr=expr;
  }
  myExprMarker=myExpr != null && myExpr.isPhysical() ? createMarker(myExpr) : null;
  initOccurrencesMarkers();
}
