{
  final UsageViewPresentation presentation=new UsageViewPresentation();
  final String codeUsagesString="Conflicts";
  presentation.setCodeUsagesString(codeUsagesString);
  presentation.setTabName(codeUsagesString);
  presentation.setTabText(codeUsagesString);
  presentation.setShowCancelButton(true);
  final ArrayList<Usage> usages=new ArrayList<Usage>(myElementConflictDescription.values().size());
  for (  final PsiElement element : myElementConflictDescription.keySet()) {
    if (element == null) {
      usages.add(new DescriptionOnlyUsage());
      continue;
    }
    boolean isRead=false;
    boolean isWrite=false;
    for (    ReadWriteAccessDetector detector : Extensions.getExtensions(ReadWriteAccessDetector.EP_NAME)) {
      if (detector.isReadWriteAccessible(element)) {
        final ReadWriteAccessDetector.Access access=detector.getExpressionAccess(element);
        isRead=access != ReadWriteAccessDetector.Access.Write;
        isWrite=access != ReadWriteAccessDetector.Access.Read;
        break;
      }
    }
    for (    final String conflictDescription : myElementConflictDescription.get(element)) {
      final UsagePresentation usagePresentation=new DescriptionOnlyUsage(conflictDescription).getPresentation();
      Usage usage=isRead || isWrite ? new ReadWriteAccessUsageInfo2UsageAdapter(new UsageInfo(element),isRead,isWrite){
        @NotNull @Override public UsagePresentation getPresentation(){
          return usagePresentation;
        }
      }
 : new UsageInfo2UsageAdapter(new UsageInfo(element)){
        @NotNull @Override public UsagePresentation getPresentation(){
          return usagePresentation;
        }
      }
;
      usages.add(usage);
    }
  }
  final UsageView usageView=UsageViewManager.getInstance(myProject).showUsages(UsageTarget.EMPTY_ARRAY,usages.toArray(new Usage[usages.size()]),presentation);
  Runnable doRefactoringRunnable=getDoRefactoringRunnable(usageView);
  if (doRefactoringRunnable != null) {
    usageView.addPerformOperationAction(doRefactoringRunnable,myCommandName != null ? myCommandName : RefactoringBundle.message("retry.command"),"Unable to perform refactoring. There were changes in code after the usages have been found.",RefactoringBundle.message("usageView.doAction"));
  }
  close(SHOW_CONFLICTS_EXIT_CODE);
}
