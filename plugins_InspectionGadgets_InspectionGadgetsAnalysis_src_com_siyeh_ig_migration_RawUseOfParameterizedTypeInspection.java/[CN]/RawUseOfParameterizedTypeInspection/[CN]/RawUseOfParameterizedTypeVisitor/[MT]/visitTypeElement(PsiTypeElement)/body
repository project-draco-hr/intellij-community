{
  final PsiType type=typeElement.getType();
  if (!(type instanceof PsiClassType)) {
    return;
  }
  super.visitTypeElement(typeElement);
  final PsiElement parent=PsiTreeUtil.skipParentsOfType(typeElement,PsiTypeElement.class);
  if (parent instanceof PsiInstanceOfExpression || parent instanceof PsiClassObjectAccessExpression) {
    return;
  }
  if (ignoreTypeCasts && parent instanceof PsiTypeCastExpression) {
    return;
  }
  if (PsiTreeUtil.getParentOfType(typeElement,PsiComment.class) != null) {
    return;
  }
  final PsiAnnotationMethod annotationMethod=PsiTreeUtil.getParentOfType(typeElement,PsiAnnotationMethod.class,true,PsiClass.class);
  if (ignoreUncompilable && annotationMethod != null) {
    final PsiAnnotationMemberValue defaultValue=annotationMethod.getDefaultValue();
    if (defaultValue != null && parent != annotationMethod) {
      return;
    }
  }
  if (parent instanceof PsiParameter && ignoreParametersOfOverridingMethods) {
    final PsiParameter parameter=(PsiParameter)parent;
    final PsiElement declarationScope=parameter.getDeclarationScope();
    if (declarationScope instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)declarationScope;
      if (MethodUtils.hasSuper(method)) {
        return;
      }
    }
  }
  final PsiJavaCodeReferenceElement referenceElement=typeElement.getInnermostComponentReferenceElement();
  checkReferenceElement(referenceElement);
}
