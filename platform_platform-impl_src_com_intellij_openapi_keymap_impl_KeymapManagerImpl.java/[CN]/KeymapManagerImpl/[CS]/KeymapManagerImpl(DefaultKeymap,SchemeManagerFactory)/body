{
  SchemeProcessor<Keymap,KeymapImpl> schemeProcessor=new NonLazySchemeProcessor<Keymap,KeymapImpl>(){
    @NotNull @Override public KeymapImpl readScheme(    @NotNull Element element,    boolean duringLoad) throws InvalidDataException {
      KeymapImpl keymap=new KeymapImpl();
      keymap.readExternal(element,getAllIncludingDefaultsKeymaps());
      return keymap;
    }
    @NotNull @Override public Element writeScheme(    @NotNull final KeymapImpl scheme){
      return scheme.writeExternal();
    }
    @NotNull @Override public SchemeState getState(    @NotNull Keymap scheme){
      return scheme.canModify() ? SchemeState.POSSIBLY_CHANGED : SchemeState.NON_PERSISTENT;
    }
    @Override public void onCurrentSchemeChanged(    @Nullable Scheme oldScheme){
      Keymap keymap=mySchemeManager.getCurrentScheme();
      for (      KeymapManagerListener listener : myListeners) {
        listener.activeKeymapChanged(keymap);
      }
    }
  }
;
  mySchemeManager=factory.create(KEYMAPS_DIR_PATH,schemeProcessor);
  String systemDefaultKeymap=WelcomeWizardUtil.getWizardMacKeymap() != null ? WelcomeWizardUtil.getWizardMacKeymap() : defaultKeymap.getDefaultKeymapName();
  for (  Keymap keymap : defaultKeymap.getKeymaps()) {
    mySchemeManager.addScheme(keymap);
    if (keymap.getName().equals(systemDefaultKeymap)) {
      setActiveKeymap(keymap);
    }
  }
  mySchemeManager.loadSchemes();
  ourKeymapManagerInitialized=true;
}
