{
  mySchemesManager=factory.createSchemesManager(KEYMAPS_DIR_PATH,new BaseSchemeProcessor<KeymapImpl>(){
    @Override public KeymapImpl readScheme(    @NotNull Element element) throws InvalidDataException {
      KeymapImpl keymap=new KeymapImpl();
      keymap.readExternal(element,getAllIncludingDefaultsKeymaps());
      return keymap;
    }
    @Override public Element writeScheme(    @NotNull final KeymapImpl scheme){
      return scheme.writeExternal();
    }
    @Override public boolean shouldBeSaved(    @NotNull final KeymapImpl scheme){
      return scheme.canModify();
    }
  }
,RoamingType.PER_USER);
  Keymap[] keymaps=defaultKeymap.getKeymaps();
  String systemDefaultKeymap=WelcomeWizardUtil.getWizardMacKeymap() != null ? WelcomeWizardUtil.getWizardMacKeymap() : defaultKeymap.getDefaultKeymapName();
  for (  Keymap keymap : keymaps) {
    addKeymap(keymap);
    if (keymap.getName().equals(systemDefaultKeymap)) {
      setActiveKeymap(keymap);
    }
  }
  mySchemesManager.loadSchemes();
  if (Registry.is("editor.add.carets.on.double.control.arrows")) {
    ModifierKeyDoubleClickHandler.getInstance().registerAction(IdeActions.ACTION_EDITOR_CLONE_CARET_ABOVE,KeyEvent.VK_CONTROL,KeyEvent.VK_UP);
    ModifierKeyDoubleClickHandler.getInstance().registerAction(IdeActions.ACTION_EDITOR_CLONE_CARET_BELOW,KeyEvent.VK_CONTROL,KeyEvent.VK_DOWN);
    ModifierKeyDoubleClickHandler.getInstance().registerAction(IdeActions.ACTION_EDITOR_MOVE_CARET_LEFT_WITH_SELECTION,KeyEvent.VK_CONTROL,KeyEvent.VK_LEFT);
    ModifierKeyDoubleClickHandler.getInstance().registerAction(IdeActions.ACTION_EDITOR_MOVE_CARET_RIGHT_WITH_SELECTION,KeyEvent.VK_CONTROL,KeyEvent.VK_RIGHT);
    ModifierKeyDoubleClickHandler.getInstance().registerAction(IdeActions.ACTION_EDITOR_MOVE_LINE_START_WITH_SELECTION,KeyEvent.VK_CONTROL,KeyEvent.VK_HOME);
    ModifierKeyDoubleClickHandler.getInstance().registerAction(IdeActions.ACTION_EDITOR_MOVE_LINE_END_WITH_SELECTION,KeyEvent.VK_CONTROL,KeyEvent.VK_END);
  }
  ourKeymapManagerInitialized=true;
}
