{
  if (element instanceof PsiParameter)   return null;
  PsiModifierListOwner owner=null;
  if (element instanceof PsiModifierListOwner) {
    final PsiModifierListOwner modifierListOwner=(PsiModifierListOwner)element;
    final ExternalAnnotationsManager annotationsManager=ExternalAnnotationsManager.getInstance(modifierListOwner.getProject());
    PsiAnnotation[] externalAnnotations=annotationsManager.findExternalAnnotations(modifierListOwner);
    if (externalAnnotations != null && externalAnnotations.length > 0) {
      owner=(PsiModifierListOwner)element;
    }
 else     if (element instanceof PsiMethod) {
      final PsiParameter[] parameters=((PsiMethod)element).getParameterList().getParameters();
      for (      PsiParameter parameter : parameters) {
        externalAnnotations=annotationsManager.findExternalAnnotations(parameter);
        if (externalAnnotations != null && externalAnnotations.length > 0) {
          owner=(PsiMethod)element;
          break;
        }
      }
    }
  }
  if (owner == null) {
    return null;
  }
  final Function<PsiModifierListOwner,String> annotationsCollector=new Function<PsiModifierListOwner,String>(){
    @Override public String fun(    PsiModifierListOwner owner){
      return XmlStringUtil.wrapInHtml(JavaDocInfoGenerator.generateSignature(owner));
    }
  }
;
  return new LineMarkerInfo<PsiModifierListOwner>(owner,owner.getTextOffset(),AllIcons.Nodes.Annotationtype,Pass.UPDATE_ALL,annotationsCollector,new MyIconGutterHandler(),GutterIconRenderer.Alignment.LEFT);
}
