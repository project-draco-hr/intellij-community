{
  AnAction collapseBranchesAction=new GraphAction("Collapse linear branches","Collapse linear branches",VcsLogIcons.CollapseBranches){
    @Override public void actionPerformed(    AnActionEvent e){
      myUI.collapseAll();
    }
    @Override public void update(    AnActionEvent e){
      super.update(e);
      if (!myFilterUi.getFilters().isEmpty()) {
        e.getPresentation().setEnabled(false);
      }
      if (myUI.getBekType() == PermanentGraph.SortType.LinearBek) {
        e.getPresentation().setIcon(VcsLogIcons.CollapseMerges);
        e.getPresentation().setText("Collapse all merges");
        e.getPresentation().setDescription("Collapse all merges");
      }
 else {
        e.getPresentation().setIcon(VcsLogIcons.CollapseBranches);
        e.getPresentation().setText("Collapse all linear branches");
        e.getPresentation().setDescription("Collapse all linear branches");
      }
    }
  }
;
  AnAction expandBranchesAction=new GraphAction("Expand all branches","Expand all branches",VcsLogIcons.ExpandBranches){
    @Override public void actionPerformed(    AnActionEvent e){
      myUI.expandAll();
    }
    @Override public void update(    AnActionEvent e){
      super.update(e);
      if (!myFilterUi.getFilters().isEmpty()) {
        e.getPresentation().setEnabled(false);
      }
      if (myUI.getBekType() == PermanentGraph.SortType.LinearBek) {
        e.getPresentation().setIcon(VcsLogIcons.ExpandMerges);
        e.getPresentation().setText("Expand all merges");
        e.getPresentation().setDescription("Expand all merges");
      }
 else {
        e.getPresentation().setIcon(VcsLogIcons.ExpandBranches);
        e.getPresentation().setText("Expand all linear branches");
        e.getPresentation().setDescription("Expand all linear branches");
      }
    }
  }
;
  RefreshAction refreshAction=new RefreshAction("Refresh","Refresh",AllIcons.Actions.Refresh){
    @Override public void actionPerformed(    AnActionEvent e){
      myLogDataHolder.refreshCompletely();
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(true);
    }
  }
;
  AnAction showFullPatchAction=new ShowLongEdgesAction();
  AnAction showDetailsAction=new ShowDetailsAction();
  refreshAction.registerShortcutOn(this);
  DefaultActionGroup toolbarGroup=new DefaultActionGroup(collapseBranchesAction,expandBranchesAction,showFullPatchAction,refreshAction,showDetailsAction);
  toolbarGroup.add(ActionManager.getInstance().getAction(VcsLogUiImpl.TOOLBAR_ACTION_GROUP));
  DefaultActionGroup mainGroup=new DefaultActionGroup();
  mainGroup.add(myFilterUi.createActionGroup());
  mainGroup.addSeparator();
  if (BekSorter.isBekEnabled()) {
    if (BekSorter.isLinearBekEnabled()) {
      mainGroup.add(new IntelliSortChooserPopupAction());
    }
 else {
      mainGroup.add(ActionManager.getInstance().getAction(VcsLogUiImpl.VCS_LOG_INTELLI_SORT_ACTION));
    }
  }
  mainGroup.add(toolbarGroup);
  ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.CHANGES_VIEW_TOOLBAR,mainGroup,true);
  toolbar.setTargetComponent(this);
  return toolbar.getComponent();
}
