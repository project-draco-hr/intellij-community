{
  if (VcsLogDataKeys.VCS_LOG == key) {
    sink.put(key,myLog);
  }
 else   if (VcsLogDataKeys.VCS_LOG_UI == key) {
    sink.put(key,myUI);
  }
 else   if (VcsLogDataKeys.VCS_LOG_DATA_PROVIDER == key) {
    sink.put(key,myLogDataHolder);
  }
 else   if (VcsDataKeys.CHANGES == key || VcsDataKeys.SELECTED_CHANGES == key) {
    List<Change> selectedChanges=getSelectedChanges();
    if (selectedChanges != null) {
      sink.put(key,ArrayUtil.toObjectArray(selectedChanges,Change.class));
    }
  }
 else   if (VcsDataKeys.CHANGE_LISTS == key) {
    List<VcsFullCommitDetails> details=myUI.getVcsLog().getSelectedDetails();
    sink.put(key,ContainerUtil.map2Array(details,CommittedChangeListForRevision.class,new Function<VcsFullCommitDetails,CommittedChangeListForRevision>(){
      @Override public CommittedChangeListForRevision fun(      @NotNull VcsFullCommitDetails details){
        return new CommittedChangeListForRevision(details.getSubject(),details.getFullMessage(),details.getCommitter().getName(),new Date(details.getCommitTime()),details.getChanges(),convertToRevisionNumber(details.getId()));
      }
    }
));
  }
 else   if (VcsDataKeys.VCS_REVISION_NUMBERS == key) {
    List<Hash> hashes=myUI.getVcsLog().getSelectedCommits();
    sink.put(key,ArrayUtil.toObjectArray(ContainerUtil.map(hashes,new Function<Hash,VcsRevisionNumber>(){
      @Override public VcsRevisionNumber fun(      Hash hash){
        return convertToRevisionNumber(hash);
      }
    }
),VcsRevisionNumber.class));
  }
 else   if (VcsDataKeys.VCS == key) {
    MultiMap<VirtualFile,VcsFullCommitDetails> commitsByRoots=groupByRoot(myUI.getVcsLog().getSelectedDetails());
    Set<VirtualFile> roots=commitsByRoots.keySet();
    if (roots.size() == 1) {
      sink.put(key,myLogDataHolder.getLogProvider(assertNotNull(getFirstItem(roots))).getSupportedVcs());
    }
  }
}
