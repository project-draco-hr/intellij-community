{
  if (VcsLogDataKeys.VCS_LOG == key) {
    sink.put(key,myLog);
  }
 else   if (VcsLogDataKeys.VCS_LOG_UI == key) {
    sink.put(key,myUI);
  }
 else   if (VcsLogDataKeys.VCS_LOG_DATA_PROVIDER == key) {
    sink.put(key,myLogDataHolder);
  }
 else   if (VcsDataKeys.CHANGES == key || VcsDataKeys.SELECTED_CHANGES == key) {
    sink.put(key,ArrayUtil.toObjectArray(myChangesBrowser.getCurrentDisplayedChanges(),Change.class));
  }
 else   if (VcsDataKeys.CHANGE_LISTS == key) {
    List<VcsFullCommitDetails> details=myUI.getVcsLog().getSelectedDetails();
    if (details.size() > VcsLogUtil.MAX_SELECTED_COMMITS)     return;
    sink.put(key,ContainerUtil.map2Array(details,CommittedChangeListForRevision.class,new Function<VcsFullCommitDetails,CommittedChangeListForRevision>(){
      @Override public CommittedChangeListForRevision fun(      @NotNull VcsFullCommitDetails details){
        return new CommittedChangeListForRevision(details.getSubject(),details.getFullMessage(),details.getCommitter().getName(),new Date(details.getCommitTime()),details.getChanges(),convertToRevisionNumber(details.getId()));
      }
    }
));
  }
 else   if (VcsDataKeys.VCS_REVISION_NUMBERS == key) {
    List<CommitId> hashes=myUI.getVcsLog().getSelectedCommits();
    if (hashes.size() > VcsLogUtil.MAX_SELECTED_COMMITS)     return;
    sink.put(key,ArrayUtil.toObjectArray(ContainerUtil.map(hashes,new Function<CommitId,VcsRevisionNumber>(){
      @Override public VcsRevisionNumber fun(      CommitId commitId){
        return convertToRevisionNumber(commitId.getHash());
      }
    }
),VcsRevisionNumber.class));
  }
 else   if (VcsDataKeys.VCS == key) {
    List<CommitId> commits=myUI.getVcsLog().getSelectedCommits();
    Collection<VcsLogProvider> logProviders=myUI.getVcsLog().getLogProviders();
    if (logProviders.size() == 1) {
      if (!commits.isEmpty()) {
        sink.put(key,myLogDataHolder.getLogProvider(assertNotNull(getFirstItem(commits)).getRoot()).getSupportedVcs());
      }
      return;
    }
    if (commits.size() > VcsLogUtil.MAX_SELECTED_COMMITS)     return;
    Set<VirtualFile> roots=ContainerUtil.map2Set(commits,new Function<CommitId,VirtualFile>(){
      @Override public VirtualFile fun(      CommitId commitId){
        return commitId.getRoot();
      }
    }
);
    if (roots.size() == 1) {
      sink.put(key,myLogDataHolder.getLogProvider(assertNotNull(getFirstItem(roots))).getSupportedVcs());
    }
  }
}
