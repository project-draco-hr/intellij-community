{
  if (VcsLogDataKeys.VCS_LOG.is(dataId)) {
    return myLog;
  }
 else   if (VcsLogDataKeys.VCS_LOG_UI.is(dataId)) {
    return myUi;
  }
 else   if (VcsLogDataKeys.VCS_LOG_DATA_PROVIDER.is(dataId)) {
    return myLogDataManager;
  }
 else   if (VcsDataKeys.CHANGES.is(dataId) || VcsDataKeys.SELECTED_CHANGES.is(dataId)) {
    return ArrayUtil.toObjectArray(myChangesBrowser.getCurrentDisplayedChanges(),Change.class);
  }
 else   if (VcsDataKeys.CHANGE_LISTS.is(dataId)) {
    List<VcsFullCommitDetails> details=myLog.getSelectedDetails();
    if (details.size() > VcsLogUtil.MAX_SELECTED_COMMITS)     return null;
    return ContainerUtil.map2Array(details,CommittedChangeListForRevision.class,new Function<VcsFullCommitDetails,CommittedChangeListForRevision>(){
      @Override public CommittedChangeListForRevision fun(      @NotNull VcsFullCommitDetails details){
        return new CommittedChangeListForRevision(details.getSubject(),details.getFullMessage(),details.getCommitter().getName(),new Date(details.getCommitTime()),details.getChanges(),convertToRevisionNumber(details.getId()));
      }
    }
);
  }
 else   if (VcsDataKeys.VCS_REVISION_NUMBERS.is(dataId)) {
    List<CommitId> hashes=myLog.getSelectedCommits();
    if (hashes.size() > VcsLogUtil.MAX_SELECTED_COMMITS)     return null;
    return ArrayUtil.toObjectArray(ContainerUtil.map(hashes,new Function<CommitId,VcsRevisionNumber>(){
      @Override public VcsRevisionNumber fun(      CommitId commitId){
        return convertToRevisionNumber(commitId.getHash());
      }
    }
),VcsRevisionNumber.class);
  }
 else   if (VcsDataKeys.VCS.is(dataId)) {
    Set<VirtualFile> roots=ContainerUtil.map2Set(Ints.asList(myGraphTable.getSelectedRows()),new Function<Integer,VirtualFile>(){
      @Override public VirtualFile fun(      @NotNull Integer row){
        return myGraphTable.getModel().getRoot(row);
      }
    }
);
    if (roots.size() == 1) {
      return myLogDataManager.getLogProvider(assertNotNull(getFirstItem(roots))).getSupportedVcs();
    }
  }
  return null;
}
