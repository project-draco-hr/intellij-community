{
  Function<VcsRootError,String> rootToDisplayableString=new Function<VcsRootError,String>(){
    @Override public String fun(    VcsRootError rootError){
      if (rootError.getMapping().equals(VcsDirectoryMapping.PROJECT_CONSTANT)) {
        return StringUtil.escapeXml(rootError.getMapping());
      }
      return FileUtil.toSystemDependentName(rootError.getMapping());
    }
  }
;
  StringBuilder description=new StringBuilder();
  if (!invalidRoots.isEmpty()) {
    if (invalidRoots.size() == 1) {
      VcsRootError rootError=invalidRoots.iterator().next();
      String vcsName=rootError.getVcsKey().getName();
      description.append(String.format("The directory %s is registered as a %s root, but no %s repositories were found there.",rootToDisplayableString.fun(rootError),vcsName,vcsName));
    }
 else {
      description.append("The following directories are registered as VCS roots, but they are not: <br/>" + StringUtil.join(invalidRoots,rootToDisplayableString,"<br/>"));
    }
    description.append("<br/>");
  }
  if (!unregisteredRoots.isEmpty()) {
    if (unregisteredRoots.size() == 1) {
      VcsRootError unregisteredRoot=unregisteredRoots.iterator().next();
      description.append(String.format("The directory %s is under %s, but is not registered in the Settings.",rootToDisplayableString.fun(unregisteredRoot),unregisteredRoot.getVcsKey().getName()));
    }
 else {
      description.append("The following directories are roots of VCS repositories, but they are not registered in the Settings: <br/>" + StringUtil.join(unregisteredRoots,rootToDisplayableString,"<br/>"));
    }
    description.append("<br/>");
  }
  String add=invalidRoots.isEmpty() ? "<a href='add'>Add " + pluralize("root",unregisteredRoots.size()) + "</a>&nbsp;&nbsp;" : "";
  String configure="<a href='configure'>Configure</a>";
  String ignore=invalidRoots.isEmpty() ? "&nbsp;&nbsp;<a href='ignore'>Ignore</a>" : "";
  description.append(add + configure + ignore);
  return description.toString();
}
