{
  final ScopeOwner owner=ScopeUtil.getScopeOwner(element);
  if (owner instanceof PyClass) {
    return;
  }
  final String name=element.getName();
  if (name != null) {
    final PsiElement identifier=element.getNameIdentifier();
    final PsiElement problemElement=identifier != null ? identifier : element;
    if ("_".equals(name)) {
      return;
    }
    if (owner != null) {
      final ScopeOwner nextOwner=ScopeUtil.getScopeOwner(owner);
      if (nextOwner != null) {
        final ResolveProcessor processor=new ResolveProcessor(name);
        PyResolveUtil.scopeCrawlUp(processor,nextOwner,null,name,null);
        final PsiElement resolved=processor.getResult();
        if (resolved != null) {
          final PyComprehensionElement comprehension=PsiTreeUtil.getParentOfType(resolved,PyComprehensionElement.class);
          if (comprehension != null && PyUtil.isOwnScopeComprehension(comprehension)) {
            return;
          }
          final Scope scope=ControlFlowCache.getScope(owner);
          if (scope.isGlobal(name) || scope.isNonlocal(name)) {
            return;
          }
          registerProblem(problemElement,String.format("Shadows name '%s' from outer scope",name),ProblemHighlightType.WEAK_WARNING,null,new PyRenameElementQuickFix());
        }
      }
    }
  }
}
