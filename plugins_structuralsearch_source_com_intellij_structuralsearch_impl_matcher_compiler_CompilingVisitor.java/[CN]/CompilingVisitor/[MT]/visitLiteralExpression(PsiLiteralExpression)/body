{
  String value=expression.getText();
  if (value.length() > 2 && value.charAt(0) == '"' && value.charAt(value.length() - 1) == '"') {
    String content=value.substring(1,value.length() - 1);
    StringBuffer buf=new StringBuffer(content.length());
    Matcher matcher=substitutionPattern.matcher(content);
    List<SubstitutionHandler> handlers=null;
    int start=0;
    String word;
    boolean hasLiteralContent=false;
    SubstitutionHandler handler=null;
    while (matcher.find()) {
      if (handlers == null)       handlers=new LinkedList<SubstitutionHandler>();
      handler=(SubstitutionHandler)context.pattern.getHandler(matcher.group(1));
      if (handler != null)       handlers.add(handler);
      word=content.substring(start,matcher.start());
      if (word.length() > 0) {
        buf.append(shieldSpecialChars(word));
        hasLiteralContent=true;
        if (context.findMatchingFiles) {
          processTokenizedName(word,false,false,false,true);
        }
      }
      RegExpPredicate predicate=getSimpleRegExpPredicate(handler);
      buf.append("(.*?)");
      if (context.findMatchingFiles) {
        if (!IsNotSuitablePredicate(predicate,handler)) {
          String refname=predicate.getRegExp();
          processTokenizedName(refname,false,false,false,true);
        }
      }
      start=matcher.end();
    }
    word=content.substring(start,content.length());
    if (word.length() > 0) {
      hasLiteralContent=true;
      buf.append(shieldSpecialChars(word));
      if (context.findMatchingFiles) {
        processTokenizedName(word,false,false,false,true);
      }
    }
    if (hasLiteralContent) {
      buf.append("$");
    }
    if (handlers != null) {
      expression.putUserData(CompiledPattern.HANDLER_KEY,(hasLiteralContent) ? (Handler)new LiteralWithSubstituionHandler(buf.toString(),handlers) : handler);
    }
  }
  super.visitLiteralExpression(expression);
}
