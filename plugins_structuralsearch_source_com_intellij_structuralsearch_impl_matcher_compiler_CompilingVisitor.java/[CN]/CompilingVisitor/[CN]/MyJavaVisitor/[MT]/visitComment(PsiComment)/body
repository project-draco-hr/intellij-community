{
  super.visitComment(comment);
  final String text=comment.getText();
  Matcher matcher=pattern.matcher(text);
  boolean matches=false;
  if (!matcher.matches()) {
    matcher=pattern2.matcher(text);
    if (!matcher.matches()) {
      matcher=pattern3.matcher(text);
    }
 else {
      matches=true;
    }
  }
 else {
    matches=true;
  }
  if (matches || matcher.matches()) {
    String str=matcher.group(1);
    comment.putUserData(CompiledPattern.HANDLER_KEY,str);
    setFilter(context.pattern.getHandler(comment),CommentFilter.getInstance());
    SubstitutionHandler handler=(SubstitutionHandler)context.pattern.getHandler(str);
    if (handler.getPredicate() != null) {
      ((RegExpPredicate)handler.getPredicate()).setMultiline(true);
    }
    RegExpPredicate predicate=MatchingHandler.getSimpleRegExpPredicate(handler);
    if (!IsNotSuitablePredicate(predicate,handler)) {
      processTokenizedName(predicate.getRegExp(),true,OccurenceKind.COMMENT);
    }
    matches=true;
  }
  if (!matches) {
    MatchingHandler handler=processPatternStringWithFragments(text,OccurenceKind.COMMENT);
    if (handler != null)     comment.putUserData(CompiledPattern.HANDLER_KEY,handler);
  }
}
