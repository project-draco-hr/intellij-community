{
  if (!myWrongElement.isValid())   return false;
  final NavigatablePsiElement maybeField=PsiTreeUtil.getParentOfType(myWrongElement,PsiMethod.class,PsiFunctionalExpression.class,PsiField.class);
  if (!(maybeField instanceof PsiField))   return false;
  final PsiField field=(PsiField)maybeField;
  if (field.hasModifierProperty(PsiModifier.STATIC))   return false;
  final PsiClass containingClass=field.getContainingClass();
  if ((containingClass == null || containingClass instanceof PsiAnonymousClass || containingClass.isInterface() || !containingClass.isWritable())) {
    return false;
  }
  final List<PsiClassType> exceptions=ExceptionUtil.getUnhandledExceptions(field);
  if (exceptions.isEmpty()) {
    return false;
  }
  final PsiMethod[] existedConstructors=containingClass.getConstructors();
  setText(QuickFixBundle.message("add.exception.from.field.initializer.to.constructor.throws.text",existedConstructors.length));
  return true;
}
