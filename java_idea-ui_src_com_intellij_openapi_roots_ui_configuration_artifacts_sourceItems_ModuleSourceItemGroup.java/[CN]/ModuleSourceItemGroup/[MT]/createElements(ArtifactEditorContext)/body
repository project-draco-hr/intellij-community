{
  final Set<Module> modules=new LinkedHashSet<>();
  collectDependentModules(myModule,modules,context);
  final Artifact artifact=context.getArtifact();
  final ArtifactType artifactType=artifact.getArtifactType();
  Set<PackagingSourceItem> items=new LinkedHashSet<>();
  for (  Module module : modules) {
    for (    PackagingSourceItemsProvider provider : PackagingSourceItemsProvider.EP_NAME.getExtensions()) {
      final ModuleSourceItemGroup parent=new ModuleSourceItemGroup(module);
      for (      PackagingSourceItem sourceItem : provider.getSourceItems(context,artifact,parent)) {
        if (artifactType.isSuitableItem(sourceItem) && sourceItem.isProvideElements()) {
          items.add(sourceItem);
        }
      }
    }
  }
  List<PackagingElement<?>> result=new ArrayList<>();
  final PackagingElementFactory factory=PackagingElementFactory.getInstance();
  for (  PackagingSourceItem item : items) {
    final String path=artifactType.getDefaultPathFor(item.getKindOfProducedElements());
    if (path != null) {
      result.addAll(factory.createParentDirectories(path,item.createElements(context)));
    }
  }
  return result;
}
