{
  String indstr=InterpreterUtil.getIndentString(indent);
  StringBuilder buf=new StringBuilder();
  String new_line_separator=DecompilerContext.getNewLineSeparator();
  buf.append(ExprProcessor.listToJava(varDefinitions,indent));
  if (isLabeled()) {
    buf.append(indstr).append("label").append(this.id).append(":").append(new_line_separator);
  }
switch (looptype) {
case LOOP_DO:
    buf.append(indstr).append("while(true) {").append(new_line_separator);
  buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true));
buf.append(indstr).append("}").append(new_line_separator);
break;
case LOOP_DOWHILE:
buf.append(indstr).append("do {").append(new_line_separator);
buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true));
buf.append(indstr).append("} while(").append(conditionExprent.get(0).toJava(indent)).append(");").append(new_line_separator);
break;
case LOOP_WHILE:
buf.append(indstr).append("while(").append(conditionExprent.get(0).toJava(indent)).append(") {").append(new_line_separator);
buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true));
buf.append(indstr).append("}").append(new_line_separator);
break;
case LOOP_FOR:
buf.append(indstr).append("for(").append(initExprent.get(0) == null ? "" : initExprent.get(0).toJava(indent)).append("; ").append(conditionExprent.get(0).toJava(indent)).append("; ").append(incExprent.get(0).toJava(indent)).append(") {").append(new_line_separator);
buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true));
buf.append(indstr).append("}").append(new_line_separator);
}
return buf.toString();
}
