{
  String indstr=InterpreterUtil.getIndentString(indent);
  TextBuffer buf=new TextBuffer();
  String new_line_separator=DecompilerContext.getNewLineSeparator();
  buf.append(ExprProcessor.listToJava(varDefinitions,indent,tracer));
  if (isLabeled()) {
    buf.append(indstr).append("label").append(this.id.toString()).append(":").append(new_line_separator);
    tracer.incrementCurrentSourceLine();
  }
switch (looptype) {
case LOOP_DO:
    buf.append(indstr).append("while(true) {").append(new_line_separator);
  tracer.incrementCurrentSourceLine();
buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true,tracer));
buf.append(indstr).append("}").append(new_line_separator);
tracer.incrementCurrentSourceLine();
break;
case LOOP_DOWHILE:
buf.append(indstr).append("do {").append(new_line_separator);
tracer.incrementCurrentSourceLine();
buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true,tracer));
buf.append(indstr).append("} while(").append(conditionExprent.get(0).toJava(indent,tracer)).append(");").append(new_line_separator);
tracer.incrementCurrentSourceLine();
break;
case LOOP_WHILE:
buf.append(indstr).append("while(").append(conditionExprent.get(0).toJava(indent,tracer)).append(") {").append(new_line_separator);
tracer.incrementCurrentSourceLine();
buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true,tracer));
buf.append(indstr).append("}").append(new_line_separator);
tracer.incrementCurrentSourceLine();
break;
case LOOP_FOR:
buf.append(indstr).append("for(");
if (initExprent.get(0) != null) {
buf.append(initExprent.get(0).toJava(indent,tracer));
}
buf.append("; ").append(conditionExprent.get(0).toJava(indent,tracer)).append("; ").append(incExprent.get(0).toJava(indent,tracer)).append(") {").append(new_line_separator);
tracer.incrementCurrentSourceLine();
buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true,tracer));
buf.append(indstr).append("}").append(new_line_separator);
tracer.incrementCurrentSourceLine();
}
return buf;
}
