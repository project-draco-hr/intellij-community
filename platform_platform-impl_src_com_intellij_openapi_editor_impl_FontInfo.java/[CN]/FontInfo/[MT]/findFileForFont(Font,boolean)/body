{
  final String normalizedFamilyName=font.getFamily().toLowerCase(Locale.getDefault()).replace(" ","");
  final int fontStyle=font.getStyle();
  FilenameFilter filter=new FilenameFilter(){
    @Override public boolean accept(    File file,    String name){
      String normalizedName=name.toLowerCase(Locale.getDefault());
      return normalizedName.startsWith(normalizedFamilyName) && (normalizedName.endsWith(".otf") || normalizedName.endsWith(".ttf")) && (!matchStyle || fontStyle == ComplementaryFontsRegistry.getFontStyle(name));
    }
  }
;
  List<File> files=new ArrayList<File>();
  File[] userFiles=new File(System.getProperty("user.home"),"Library/Fonts").listFiles(filter);
  if (userFiles != null)   files.addAll(Arrays.asList(userFiles));
  File[] localFiles=new File("/Library/Fonts").listFiles(filter);
  if (localFiles != null)   files.addAll(Arrays.asList(localFiles));
  if (files.isEmpty())   return null;
  return Collections.min(files,new Comparator<File>(){
    @Override public int compare(    File file1,    File file2){
      return file1.getName().compareTo(file2.getName());
    }
  }
);
}
