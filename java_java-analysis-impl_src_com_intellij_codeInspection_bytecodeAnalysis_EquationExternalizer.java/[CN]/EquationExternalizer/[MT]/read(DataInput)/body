{
  int size=DataInputOutputUtil.readINT(in);
  ArrayList<IntIdEquation> result=new ArrayList<IntIdEquation>(size);
  for (int x=0; x < size; x++) {
    int equationId=in.readInt();
    boolean isFinal=in.readBoolean();
    if (isFinal) {
      int ordinal=DataInputOutputUtil.readINT(in);
      Value value=Value.values()[ordinal];
      result.add(new IntIdEquation(equationId,new IntIdFinal(value)));
    }
 else {
      int ordinal=DataInputOutputUtil.readINT(in);
      Value value=Value.values()[ordinal];
      int componentsNumber=DataInputOutputUtil.readINT(in);
      IntIdComponent[] components=new IntIdComponent[componentsNumber];
      for (int i=0; i < componentsNumber; i++) {
        int componentSize=DataInputOutputUtil.readINT(in);
        int[] ids=new int[componentSize];
        for (int j=0; j < componentSize; j++) {
          ids[j]=in.readInt();
        }
        components[i]=new IntIdComponent(ids);
      }
      result.add(new IntIdEquation(equationId,new IntIdPending(value,components)));
    }
  }
  return result;
}
