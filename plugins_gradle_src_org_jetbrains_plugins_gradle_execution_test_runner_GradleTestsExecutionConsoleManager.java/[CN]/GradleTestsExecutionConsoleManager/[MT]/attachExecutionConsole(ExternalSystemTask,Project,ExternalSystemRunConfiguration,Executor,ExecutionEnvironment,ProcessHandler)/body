{
  final GradleConsoleProperties properties=new GradleConsoleProperties(configuration,executor);
  myExecutionConsole=(SMTRunnerConsoleView)SMTestRunnerConnectionUtil.createAndAttachConsole(configuration.getSettings().getExternalSystemId().getReadableName(),processHandler,properties);
  TestTreeRenderer originalRenderer=ObjectUtils.tryCast(myExecutionConsole.getResultsViewer().getTreeView().getCellRenderer(),TestTreeRenderer.class);
  if (originalRenderer != null) {
    originalRenderer.setAdditionalRootFormatter(new SMRootTestProxyFormatter(){
      @Override public void format(      @NotNull SMTestProxy.SMRootTestProxy testProxy,      @NotNull TestTreeRenderer renderer){
        final TestStateInfo.Magnitude magnitude=testProxy.getMagnitudeInfo();
        if (magnitude == TestStateInfo.Magnitude.RUNNING_INDEX) {
          renderer.clear();
          renderer.append(GradleBundle.message("gradle.test.runner.ui.tests.tree.presentation.labels.waiting.tests"),SimpleTextAttributes.REGULAR_ATTRIBUTES);
        }
 else         if (!testProxy.isInProgress() && testProxy.isEmptySuite()) {
          renderer.clear();
          renderer.append(GradleBundle.message("gradle.test.runner.ui.tests.tree.presentation.labels.no.tests.were.found"),SimpleTextAttributes.REGULAR_ATTRIBUTES);
        }
      }
    }
);
  }
  return myExecutionConsole;
}
