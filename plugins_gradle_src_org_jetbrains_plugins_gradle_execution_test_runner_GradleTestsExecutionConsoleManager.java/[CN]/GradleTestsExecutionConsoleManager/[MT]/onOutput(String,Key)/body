{
  if (StringUtil.endsWith(text,"<ijLogEol/>\n")) {
    myBuffer.append(StringUtil.trimEnd(text,"<ijLogEol/>\n")).append('\n');
    return;
  }
 else {
    myBuffer.append(text);
  }
  String trimmedText=myBuffer.toString().trim();
  myBuffer.setLength(0);
  if (!StringUtil.startsWith(trimmedText,"<ijLog>") || !StringUtil.endsWith(trimmedText,"</ijLog>")) {
    if (text.trim().isEmpty())     return;
    myExecutionConsole.print(text,ConsoleViewContentType.getConsoleViewType(processOutputType));
    return;
  }
  try {
    final XmlXpathHelper xml=new XmlXpathHelper(trimmedText);
    final TestEventType eventType=TestEventType.fromValue(xml.queryXml("/ijLog/event/@type"));
    TestEvent testEvent=null;
switch (eventType) {
case CONFIGURATION_ERROR:
      testEvent=new ConfigurationErrorEvent(this);
    break;
case REPORT_LOCATION:
  testEvent=new ReportLocationEvent(this);
break;
case BEFORE_TEST:
testEvent=new BeforeTestEvent(this);
break;
case ON_OUTPUT:
testEvent=new OnOutputEvent(this);
break;
case AFTER_TEST:
testEvent=new AfterTestEvent(this);
break;
case BEFORE_SUITE:
testEvent=new BeforeSuiteEvent(this);
break;
case AFTER_SUITE:
testEvent=new AfterSuiteEvent(this);
break;
case UNKNOWN_EVENT:
break;
}
if (testEvent != null) {
testEvent.process(xml);
}
}
 catch (XmlXpathHelper.XmlParserException e) {
LOG.error("Gradle test events parser error",e);
}
}
