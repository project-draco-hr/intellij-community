{
  PsiMethodCallExpression newMethodCall=methodCall;
  PsiMethodCallExpression returnCall=null;
  while (true) {
    final PsiReferenceExpression methodExpression=newMethodCall.getMethodExpression();
    final String name=methodExpression.getReferenceName();
    PsiMethodCallExpression converted=convertFromMethodCall(newMethodCall);
    if (converted != null) {
      return returnCall;
    }
    if (TO_OTHER_COLLECTION_METHODS.containsKey(name)) {
      converted=convertToCollection(newMethodCall,name);
    }
 else {
      final FluentIterableMethodTransformer transformer=METHOD_INDEX.get(name);
      LOG.assertTrue(transformer != null,name);
      converted=transformer.transform(newMethodCall,myElementFactory);
    }
    if (converted == null) {
      return returnCall;
    }
    if (returnCall == null) {
      returnCall=converted;
    }
    newMethodCall=converted;
    final PsiExpression expression=newMethodCall.getMethodExpression().getQualifierExpression();
    if (expression instanceof PsiMethodCallExpression) {
      newMethodCall=(PsiMethodCallExpression)expression;
    }
 else {
      return returnCall;
    }
  }
}
