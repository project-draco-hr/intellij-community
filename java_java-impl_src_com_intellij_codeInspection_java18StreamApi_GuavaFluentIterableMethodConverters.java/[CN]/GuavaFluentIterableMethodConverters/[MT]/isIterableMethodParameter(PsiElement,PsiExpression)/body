{
  if (!(listExpression instanceof PsiExpressionList)) {
    return false;
  }
  if (!(listExpression.getParent() instanceof PsiMethodCallExpression)) {
    return false;
  }
  final Project project=parameterExpression.getProject();
  final PsiClass fluentIterable=JavaPsiFacade.getInstance(project).findClass(GuavaFluentIterableInspection.GUAVA_FLUENT_ITERABLE,listExpression.getResolveScope());
  return GuavaFluentIterableInspection.isMethodWithParamAcceptsConversion((PsiMethodCallExpression)listExpression.getParent(),parameterExpression,fluentIterable);
}
