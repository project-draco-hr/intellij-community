{
  if (GuavaFluentIterableInspection.FLUENT_ITERABLE_FROM.equals(methodCall.getMethodExpression().getReferenceName())) {
    final PsiExpression[] argumentList=methodCall.getArgumentList().getExpressions();
    LOG.assertTrue(argumentList.length == 1);
    final PsiExpression expression=argumentList[0];
    final PsiType type=expression.getType();
    LOG.assertTrue(type instanceof PsiClassType);
    final String newExpressionText;
    if (InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_UTIL_COLLECTION)) {
      newExpressionText=expression.getText() + ".stream()";
    }
 else {
      newExpressionText="java.util.stream.StreamSupport.stream(" + expression.getText() + ".spliterator(), false)";
    }
    return (PsiMethodCallExpression)methodCall.replace(myElementFactory.createExpressionFromText(newExpressionText,null));
  }
  return null;
}
