{
  if (expression instanceof PsiReferenceExpression) {
    final PsiElement expressionParent=expression.getParent();
    if (expressionParent instanceof PsiReturnStatement || isIterableMethodParameter(expressionParent,expression)) {
      expression=(PsiExpression)expression.replace(elementFactory.createExpressionFromText(expression.getText() + ".collect(java.util.stream.Collectors.toList())",null));
      codeStyleManager.shortenClassReferences(expression);
    }
    return;
  }
  final PsiMethodCallExpression parentMethodCall=PsiTreeUtil.getParentOfType(expression,PsiMethodCallExpression.class);
  if (parentMethodCall != null && parentMethodCall.getMethodExpression().getQualifierExpression() == expression) {
    final PsiMethod seqTailMethod=parentMethodCall.resolveMethod();
    if (seqTailMethod == null) {
      return;
    }
    final PsiClass seqTailMethodClass=seqTailMethod.getContainingClass();
    if (seqTailMethodClass != null && GuavaFluentIterableInspection.GUAVA_OPTIONAL.equals(seqTailMethodClass.getQualifiedName())) {
      final PsiMethodCallExpression newParentMethodCall=GuavaOptionalConverter.convertGuavaOptionalToJava(parentMethodCall,elementFactory);
      expression=newParentMethodCall.getMethodExpression().getQualifierExpression();
    }
  }
  if (expression instanceof PsiMethodCallExpression) {
    expression=convertMethodCallDeep(elementFactory,(PsiMethodCallExpression)expression);
  }
  if (expression == null) {
    return;
  }
  final PsiElement parent=expression.getParent();
  if (parent instanceof PsiExpressionList) {
    final PsiMethodCallExpression methodCall=(PsiMethodCallExpression)parent.getParent();
    PsiExpression[] expressions=methodCall.getArgumentList().getExpressions();
    int index=ArrayUtil.indexOf(expressions,expression);
    LOG.assertTrue(index >= 0);
    final PsiMethod method=methodCall.resolveMethod();
    LOG.assertTrue(method != null);
    final PsiType parameterType=method.getParameterList().getParameters()[index].getType();
    expression=addCollectToListIfNeed(expression,parameterType,elementFactory);
  }
 else   if (parent instanceof PsiReturnStatement) {
    final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(parent,PsiMethod.class);
    LOG.assertTrue(containingMethod != null);
    final PsiType returnType=containingMethod.getReturnType();
    expression=addCollectToListIfNeed(expression,returnType,elementFactory);
  }
  codeStyleManager.shortenClassReferences(expression);
}
