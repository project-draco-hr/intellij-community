{
  final PsiReferenceExpression methodExpression=methodCall.getMethodExpression();
  final String name=methodExpression.getReferenceName();
  if (TO_OTHER_COLLECTION_METHODS.containsKey(name)) {
    return Pair.create(convertToCollection(methodCall,name,elementFactory),false);
  }
 else   if (GuavaFluentIterableInspection.FLUENT_ITERABLE_FROM.equals(name)) {
    final PsiExpression[] argumentList=methodCall.getArgumentList().getExpressions();
    LOG.assertTrue(argumentList.length == 1);
    final PsiExpression expression=argumentList[0];
    final PsiType type=expression.getType();
    LOG.assertTrue(type instanceof PsiClassType);
    final PsiClass resolvedClass=((PsiClassType)type).resolve();
    final String newExpressionText;
    if (InheritanceUtil.isInheritor(resolvedClass,CommonClassNames.JAVA_UTIL_COLLECTION)) {
      newExpressionText=expression.getText() + ".stream()";
    }
 else {
      newExpressionText="java.util.stream.StreamSupport.stream(" + expression.getText() + ".spliterator(), false)";
    }
    return Pair.create((PsiMethodCallExpression)methodCall.replace(elementFactory.createExpressionFromText(newExpressionText,null)),true);
  }
 else {
    final FluentIterableMethodTransformer transformer=METHOD_INDEX.get(name);
    LOG.assertTrue(transformer != null,name);
    final PsiMethodCallExpression transformedExpression=transformer.transform(methodCall,elementFactory);
    return Pair.create(transformedExpression,false);
  }
}
