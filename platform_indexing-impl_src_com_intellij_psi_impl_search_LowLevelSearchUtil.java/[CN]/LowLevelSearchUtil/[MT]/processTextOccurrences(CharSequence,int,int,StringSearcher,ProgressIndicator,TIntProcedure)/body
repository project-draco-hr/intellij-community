{
  if (endOffset > text.length()) {
    throw new IllegalArgumentException("end: " + endOffset + " > length: "+ text.length());
  }
  Map<StringSearcher,int[]> cachedMap=cache.get(text);
  int[] cachedOccurrences=cachedMap == null ? null : cachedMap.get(searcher);
  if (cachedOccurrences == null) {
    TIntArrayList occurrences=new TIntArrayList();
    for (int index=0; index < text.length(); index++) {
      if (progress != null)       progress.checkCanceled();
      index=searcher.scan(text,index,text.length());
      if (index < 0)       break;
      if (checkJavaIdentifier(text,0,text.length(),searcher,index)) {
        occurrences.add(index);
      }
    }
    cachedOccurrences=occurrences.toNativeArray();
    if (cachedMap == null) {
      cachedMap=ConcurrencyUtil.cacheOrGet(cache,text,ContainerUtil.createConcurrentSoftMap());
    }
    cachedMap.put(searcher,cachedOccurrences);
  }
  for (  int index : cachedOccurrences) {
    if (index >= endOffset)     break;
    if (index >= startOffset && !processor.execute(index)) {
      return false;
    }
  }
  return true;
}
