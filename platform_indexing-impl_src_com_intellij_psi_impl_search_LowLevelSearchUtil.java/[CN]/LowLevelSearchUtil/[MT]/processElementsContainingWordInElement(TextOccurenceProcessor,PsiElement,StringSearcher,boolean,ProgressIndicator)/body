{
  if (progress != null)   progress.checkCanceled();
  PsiFile file=scope.getContainingFile();
  FileViewProvider viewProvider=file.getViewProvider();
  final CharSequence buffer=viewProvider.getContents();
  TextRange range=scope.getTextRange();
  if (range == null) {
    LOG.error("Element " + scope + " of class "+ scope.getClass()+ " has null range");
    return true;
  }
  int scopeStart=range.getStartOffset();
  int startOffset=scopeStart;
  int endOffset=range.getEndOffset();
  if (endOffset > buffer.length()) {
    diagnoseInvalidRange(scope,file,viewProvider,buffer,range);
    return true;
  }
  final char[] bufferArray=CharArrayUtil.fromSequenceWithoutCopying(buffer);
  Project project=file.getProject();
  TreeElement lastElement=null;
  do {
    if (progress != null)     progress.checkCanceled();
    startOffset=searchWord(buffer,bufferArray,startOffset,endOffset,searcher,progress);
    if (startOffset < 0) {
      return true;
    }
    lastElement=processTreeUp(project,processor,scope,searcher,startOffset - scopeStart,processInjectedPsi,progress,lastElement);
    if (lastElement == null)     return false;
    startOffset++;
  }
 while (startOffset < endOffset);
  return true;
}
