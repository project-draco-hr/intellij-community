{
  Arrays.sort(members,new Comparator<PsiMember>(){
    @Override public int compare(    final PsiMember m1,    final PsiMember m2){
      return compareMembers(m1,m2,expression);
    }
  }
);
  List<ExpectedTypeInfo> l=new ArrayList<ExpectedTypeInfo>();
  PsiManager manager=expression.getManager();
  JavaPsiFacade facade=JavaPsiFacade.getInstance(manager.getProject());
  for (  PsiMember member : members) {
    ProgressManager.checkCanceled();
    PsiClass aClass=member.getContainingClass();
    if (aClass instanceof PsiAnonymousClass || aClass == null)     continue;
    if (facade.getResolveHelper().isAccessible(member,expression,null)) {
      PsiClassType type;
      final PsiElement pparent=expression.getParent().getParent();
      if (pparent instanceof PsiMethodCallExpression && member instanceof PsiMethod) {
        PsiSubstitutor substitutor=ExpectedTypeUtil.inferSubstitutor((PsiMethod)member,(PsiMethodCallExpression)pparent,false);
        if (substitutor == null) {
          type=factory.createType(aClass);
        }
 else {
          type=factory.createType(aClass,substitutor);
        }
      }
 else {
        type=factory.createType(aClass);
      }
      l.add(ExpectedTypesProvider.createInfo(type,ExpectedTypeInfo.TYPE_OR_SUBTYPE,type,TailType.NONE));
      if (l.size() == MAX_GUESSED_MEMBERS_COUNT)       break;
    }
  }
  if (!l.isEmpty()) {
    types.add(l.toArray(new ExpectedTypeInfo[l.size()]));
  }
}
