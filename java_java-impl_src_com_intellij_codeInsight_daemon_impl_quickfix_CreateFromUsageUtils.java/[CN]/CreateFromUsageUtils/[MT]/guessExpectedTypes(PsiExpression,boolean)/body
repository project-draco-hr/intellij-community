{
  PsiManager manager=expression.getManager();
  GlobalSearchScope resolveScope=expression.getResolveScope();
  List<ExpectedTypeInfo[]> typesList=new ArrayList<>();
  List<String> expectedMethodNames=new ArrayList<>();
  List<String> expectedFieldNames=new ArrayList<>();
  getExpectedInformation(expression,typesList,expectedMethodNames,expectedFieldNames);
  if (typesList.size() == 1 && (!expectedFieldNames.isEmpty() || !expectedMethodNames.isEmpty())) {
    ExpectedTypeInfo[] infos=typesList.get(0);
    if (infos.length == 1 && infos[0].getKind() == ExpectedTypeInfo.TYPE_OR_SUBTYPE && infos[0].getType().equals(PsiType.getJavaLangObject(manager,resolveScope))) {
      typesList.clear();
    }
  }
  if (typesList.isEmpty()) {
    final JavaPsiFacade facade=JavaPsiFacade.getInstance(expression.getProject());
    final PsiShortNamesCache cache=PsiShortNamesCache.getInstance(expression.getProject());
    PsiElementFactory factory=facade.getElementFactory();
    for (    String fieldName : expectedFieldNames) {
      PsiField[] fields=cache.getFieldsByNameIfNotMoreThan(fieldName,resolveScope,MAX_RAW_GUESSED_MEMBERS_COUNT);
      addMemberInfo(fields,expression,typesList,factory);
    }
    for (    String methodName : expectedMethodNames) {
      PsiMethod[] projectMethods=cache.getMethodsByNameIfNotMoreThan(methodName,resolveScope.intersectWith(GlobalSearchScope.projectScope(manager.getProject())),MAX_RAW_GUESSED_MEMBERS_COUNT);
      PsiMethod[] libraryMethods=cache.getMethodsByNameIfNotMoreThan(methodName,resolveScope.intersectWith(GlobalSearchScope.notScope(GlobalSearchScope.projectScope(manager.getProject()))),MAX_RAW_GUESSED_MEMBERS_COUNT);
      PsiMethod[] methods=ArrayUtil.mergeArrays(projectMethods,libraryMethods);
      addMemberInfo(methods,expression,typesList,factory);
    }
  }
  ExpectedTypeInfo[] expectedTypes=ExpectedTypeUtil.intersect(typesList);
  if (expectedTypes.length == 0 && !typesList.isEmpty()) {
    List<ExpectedTypeInfo> union=new ArrayList<>();
    for (    ExpectedTypeInfo[] aTypesList : typesList) {
      ContainerUtil.addAll(union,(ExpectedTypeInfo[])aTypesList);
    }
    expectedTypes=union.toArray(new ExpectedTypeInfo[union.size()]);
  }
  if (expectedTypes.length == 0) {
    PsiType t=allowVoidType ? PsiType.VOID : PsiType.getJavaLangObject(manager,resolveScope);
    expectedTypes=new ExpectedTypeInfo[]{ExpectedTypesProvider.createInfo(t,ExpectedTypeInfo.TYPE_OR_SUBTYPE,t,TailType.NONE)};
  }
  return expectedTypes;
}
