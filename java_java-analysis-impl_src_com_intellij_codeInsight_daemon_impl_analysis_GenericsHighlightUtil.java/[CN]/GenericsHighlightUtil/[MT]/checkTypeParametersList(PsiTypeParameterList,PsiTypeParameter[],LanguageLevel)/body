{
  final PsiElement parent=list.getParent();
  if (parent instanceof PsiClass && ((PsiClass)parent).isEnum()) {
    String description=JavaErrorMessages.message("generics.enum.may.not.have.type.parameters");
    return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(list).descriptionAndTooltip(description).create();
  }
  if (PsiUtil.isAnnotationMethod(parent)) {
    String description=JavaErrorMessages.message("generics.annotation.members.may.not.have.type.parameters");
    return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(list).descriptionAndTooltip(description).create();
  }
  if (parent instanceof PsiClass && ((PsiClass)parent).isAnnotationType()) {
    String description=JavaErrorMessages.message("annotation.may.not.have.type.parameters");
    return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(list).descriptionAndTooltip(description).create();
  }
  for (int i=0; i < parameters.length; i++) {
    final PsiTypeParameter typeParameter1=parameters[i];
    final HighlightInfo cyclicInheritance=HighlightClassUtil.checkCyclicInheritance(typeParameter1);
    if (cyclicInheritance != null)     return cyclicInheritance;
    String name1=typeParameter1.getName();
    for (int j=i + 1; j < parameters.length; j++) {
      final PsiTypeParameter typeParameter2=parameters[j];
      String name2=typeParameter2.getName();
      if (Comparing.strEqual(name1,name2)) {
        String message=JavaErrorMessages.message("generics.duplicate.type.parameter",name1);
        return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(typeParameter2).descriptionAndTooltip(message).create();
      }
    }
    if (!level.isAtLeast(LanguageLevel.JDK_1_7)) {
      for (      PsiJavaCodeReferenceElement referenceElement : typeParameter1.getExtendsList().getReferenceElements()) {
        final PsiElement resolve=referenceElement.resolve();
        if (resolve instanceof PsiTypeParameter && ArrayUtilRt.find(parameters,resolve) > i) {
          return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(referenceElement.getTextRange()).descriptionAndTooltip("Illegal forward reference").create();
        }
      }
    }
  }
  return null;
}
