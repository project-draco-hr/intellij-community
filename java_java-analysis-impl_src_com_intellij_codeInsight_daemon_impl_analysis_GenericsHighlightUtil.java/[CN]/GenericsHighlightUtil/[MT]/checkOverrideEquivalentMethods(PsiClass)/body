{
  List<HighlightInfo> result=new ArrayList<HighlightInfo>();
  final Collection<HierarchicalMethodSignature> signaturesWithSupers=aClass.getVisibleSignatures();
  PsiManager manager=aClass.getManager();
  Map<MethodSignature,MethodSignatureBackedByPsiMethod> sameErasureMethods=new THashMap<MethodSignature,MethodSignatureBackedByPsiMethod>(MethodSignatureUtil.METHOD_PARAMETERS_ERASURE_EQUALITY);
  final Set<MethodSignature> foundProblems=new THashSet<MethodSignature>(MethodSignatureUtil.METHOD_PARAMETERS_ERASURE_EQUALITY);
  for (  HierarchicalMethodSignature signature : signaturesWithSupers) {
    HighlightInfo info=checkSameErasureNotSubSignatureInner(signature,manager,aClass,sameErasureMethods);
    if (info != null && foundProblems.add(signature)) {
      result.add(info);
    }
    if (aClass instanceof PsiTypeParameter) {
      info=HighlightMethodUtil.checkMethodIncompatibleReturnType(signature,signature.getSuperSignatures(),true,HighlightNamesUtil.getClassDeclarationTextRange(aClass));
      if (info != null) {
        result.add(info);
      }
    }
  }
  return result.isEmpty() ? null : result;
}
