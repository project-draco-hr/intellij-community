{
  final DataExternalizer<AbstractType> delegate=externalizer(context);
  return new DataExternalizer<ClassType>(){
    @Override public void save(    @NotNull DataOutput out,    ClassType value) throws IOException {
      delegate.save(out,value);
    }
    @Override public ClassType read(    @NotNull DataInput in) throws IOException {
      final AbstractType read=delegate.read(in);
      if (read instanceof ClassType) {
        return (ClassType)read;
      }
      throw new IOException("Expected: " + ClassType.class.getName() + "; Actual: "+ (read == null ? "null" : read.getClass().getName()));
    }
  }
;
}
