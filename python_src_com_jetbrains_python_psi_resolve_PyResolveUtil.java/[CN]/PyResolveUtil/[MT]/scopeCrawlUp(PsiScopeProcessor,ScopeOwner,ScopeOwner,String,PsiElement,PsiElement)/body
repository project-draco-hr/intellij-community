{
  while (scopeOwner != null) {
    if (!(scopeOwner instanceof PyClass) || scopeOwner == originalScopeOwner) {
      final Scope scope=ControlFlowCache.getScope(scopeOwner);
      boolean found=false;
      if (name != null) {
        final PsiElement resolved=scope.getNamedElement(name);
        if (resolved != null) {
          if (!processor.execute(resolved,ResolveState.initial())) {
            found=true;
          }
        }
      }
 else {
        for (        PsiNamedElement element : scope.getNamedElements()) {
          if (!processor.execute(element,ResolveState.initial())) {
            found=true;
            break;
          }
        }
      }
      List<NameDefiner> definers=new ArrayList<NameDefiner>(scope.getImportedNameDefiners());
      if (anchor != null && ScopeUtil.getScopeOwner(anchor) == scopeOwner) {
        final Comparator<NameDefiner> nearestDefinerComparator=new Comparator<NameDefiner>(){
          @Override public int compare(          NameDefiner a,          NameDefiner b){
            final boolean aIsBefore=PyPsiUtils.isBefore(a,anchor);
            final boolean bIsBefore=PyPsiUtils.isBefore(b,anchor);
            final int diff=a.getTextOffset() - b.getTextOffset();
            if (aIsBefore && bIsBefore) {
              return -diff;
            }
 else             if (aIsBefore) {
              return -1;
            }
 else             if (bIsBefore) {
              return 1;
            }
 else {
              return diff;
            }
          }
        }
;
        Collections.sort(definers,nearestDefinerComparator);
      }
      for (      NameDefiner definer : definers) {
        if (!processor.execute(definer,ResolveState.initial())) {
          found=true;
          break;
        }
      }
      if (found) {
        return;
      }
    }
    if (scopeOwner == roof) {
      return;
    }
    scopeOwner=ScopeUtil.getScopeOwner(scopeOwner);
  }
}
