{
  int fileId=Math.abs(FileBasedIndex.getFileId(base.getContainingFile().getVirtualFile()));
  TIntHashSet resultIds=new TIntHashSet();
  TIntHashSet processed=new TIntHashSet();
  TIntStack queue=new TIntStack();
  StubClassAnchor baseAnchor=forPsiClass(fileId,base);
  if (baseAnchor == null) {
    return StubClassAnchor.EMPTY_ARRAY;
  }
  queue.push(baseAnchor.myId);
  while (queue.size() > 0) {
    int id=queue.pop();
    if (processed.add(id)) {
      int start=subtypeStart(id);
      int end=subtypeEnd(id);
      for (int i=start; i < end; i++) {
        int subtypeId=mySubtypes[i];
        resultIds.add(subtypeId);
        if (!processed.contains(subtypeId)) {
          queue.push(subtypeId);
        }
      }
    }
  }
  int[] allIds=resultIds.toArray();
  StubClassAnchor[] result=new StubClassAnchor[allIds.length];
  for (int i=0; i < result.length; i++) {
    result[i]=myClassAnchors[allIds[i]];
  }
  return result;
}
