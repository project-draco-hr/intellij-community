{
  IdeDocumentHistory.getInstance(project).includeCurrentPlaceAsChangePlace();
  String fileName=dialog.getFileName();
  if (!fileName.endsWith(".py")) {
    fileName=fileName + "." + PythonFileType.INSTANCE.getDefaultExtension();
  }
  StringBuilder fileText=new StringBuilder();
  fileText.append("class ").append(dialog.getClassName()).append("(TestCase):\n\t");
  List<String> methods=dialog.getMethods();
  if (methods.size() == 0) {
    fileText.append("pass\n");
  }
  for (  String method : methods) {
    fileText.append("def ").append(method).append("(self):\n\tself.fail()\n\n\t");
  }
  PsiFile psiFile=PyUtil.getOrCreateFile(dialog.getTargetDir() + "/" + fileName,project);
  AddImportHelper.addOrUpdateFromImportStatement(psiFile,"unittest","TestCase",null,AddImportHelper.ImportPriority.BUILTIN,null);
  PyElement createdClass=PyElementGenerator.getInstance(project).createFromText(LanguageLevel.forElement(psiFile),PyClass.class,fileText.toString());
  createdClass=(PyElement)psiFile.addAfter(createdClass,psiFile.getLastChild());
  PostprocessReformattingAspect.getInstance(project).doPostponedFormatting(psiFile.getViewProvider());
  CodeStyleManager.getInstance(project).reformat(psiFile);
  return createdClass;
}
