{
  final PsiMethod[] constructors=aClass.getConstructors();
  if (constructors.length != 1) {
    return;
  }
  final PsiMethod constructor=constructors[0];
  if (!constructor.isPhysical() || constructor.getNameIdentifier() == null) {
    return;
  }
  if (!constructor.hasModifierProperty(PsiModifier.PRIVATE) && aClass.hasModifierProperty(PsiModifier.PRIVATE)) {
    return;
  }
  if (!constructor.hasModifierProperty(PsiModifier.PACKAGE_LOCAL) && aClass.hasModifierProperty(PsiModifier.PACKAGE_LOCAL)) {
    return;
  }
  if (!constructor.hasModifierProperty(PsiModifier.PROTECTED) && aClass.hasModifierProperty(PsiModifier.PROTECTED)) {
    return;
  }
  if (!constructor.hasModifierProperty(PsiModifier.PUBLIC) && aClass.hasModifierProperty(PsiModifier.PUBLIC)) {
    return;
  }
  final PsiParameterList parameterList=constructor.getParameterList();
  if (parameterList.getParametersCount() != 0) {
    return;
  }
  if (ignoreAnnotations) {
    final PsiModifierList modifierList=constructor.getModifierList();
    final PsiAnnotation[] annotations=modifierList.getAnnotations();
    if (annotations.length > 0) {
      return;
    }
  }
  final PsiReferenceList throwsList=constructor.getThrowsList();
  final PsiJavaCodeReferenceElement[] elements=throwsList.getReferenceElements();
  if (elements.length != 0) {
    return;
  }
  final PsiCodeBlock body=constructor.getBody();
  if (ControlFlowUtils.isEmptyCodeBlock(body)) {
    registerMethodError(constructor);
  }
 else   if (isSuperConstructorInvocationWithoutArguments(ControlFlowUtils.getOnlyStatementInBlock(body))) {
    registerMethodError(constructor);
  }
}
