{
  final PyExpression qualifier=node.getQualifier();
  if (qualifier == null || PyNames.CANONICAL_SELF.equals(qualifier.getText()))   return;
  if (myTypeEvalContext.getType(qualifier) instanceof PyNamedTupleType)   return;
  final String name=node.getName();
  final List<LocalQuickFix> quickFixes=new ArrayList<LocalQuickFix>();
  quickFixes.add(new PyRenameElementQuickFix());
  if (name != null && name.startsWith("_") && !name.startsWith("__") && !name.endsWith("__")) {
    final PsiReference reference=node.getReference(getResolveContext());
    if (reference == null)     return;
    final PsiElement resolvedExpression=reference.resolve();
    if (resolvedExpression instanceof PyTargetExpression) {
      final PyClass containingClass=((PyTargetExpression)resolvedExpression).getContainingClass();
      if (containingClass != null) {
        final String qFixName=containingClass.getProperties().containsKey(StringUtil.trimLeading(name,'_')) ? PyBundle.message("QFIX.use.property") : PyBundle.message("QFIX.add.property");
        quickFixes.add(new PyAddPropertyForFieldQuickFix(qFixName));
      }
    }
    final PyClass parentClass=getClassOwner(node);
    if (parentClass != null) {
      if (PyTestUtil.isPyTestClass(parentClass) && ignoreTestFunctions)       return;
      final PyClass resolvedClass=getClassOwner(resolvedExpression);
      if (parentClass.isSubclass(resolvedClass))       return;
      PyClass outerClass=getClassOwner(parentClass);
      while (outerClass != null) {
        if (outerClass.isSubclass(resolvedClass))         return;
        outerClass=getClassOwner(outerClass);
      }
    }
    final PyType type=myTypeEvalContext.getType(qualifier);
    final String bundleKey=type instanceof PyModuleType ? "INSP.protected.member.$0.access.module" : "INSP.protected.member.$0.access";
    registerProblem(node,PyBundle.message(bundleKey,name),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,null,quickFixes.toArray(new LocalQuickFix[quickFixes.size() - 1]));
  }
}
