{
  final PyExpression qualifier=node.getQualifier();
  if (qualifier == null || PyNames.CANONICAL_SELF.equals(qualifier.getText()))   return;
  if (myTypeEvalContext.getType(qualifier) instanceof PyNamedTupleType)   return;
  final String name=node.getName();
  if (name != null && name.startsWith("_") && !name.startsWith("__") && !name.endsWith("__")) {
    final PyClass parentClass=getClassOwner(node);
    if (parentClass != null) {
      if (PyTestUtil.isPyTestClass(parentClass) && ignoreTestFunctions)       return;
      final PsiReference reference=node.getReference(getResolveContext());
      if (reference != null) {
        final PsiElement resolvedExpression=reference.resolve();
        final PyClass resolvedClass=getClassOwner(resolvedExpression);
        if (parentClass.isSubclass(resolvedClass))         return;
        PyClass outerClass=getClassOwner(parentClass);
        while (outerClass != null) {
          if (outerClass.isSubclass(resolvedClass))           return;
          outerClass=getClassOwner(outerClass);
        }
      }
    }
    final PyType type=myTypeEvalContext.getType(qualifier);
    final String bundleKey=type instanceof PyModuleType ? "INSP.protected.member.$0.access.module" : "INSP.protected.member.$0.access";
    registerProblem(node,PyBundle.message(bundleKey,name),new PyRenameElementQuickFix());
  }
}
