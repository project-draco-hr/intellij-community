{
  final Project project=e.getData(CommonDataKeys.PROJECT);
  final JavaStackFrame stackFrame=getStackFrame(e);
  if (stackFrame == null) {
    return;
  }
  try {
    final DebuggerContextImpl debuggerContext=DebuggerAction.getDebuggerContext(e.getDataContext());
    final DebugProcessImpl debugProcess=debuggerContext.getDebugProcess();
    if (debugProcess == null) {
      return;
    }
    if (DebuggerSettings.getInstance().CHECK_FINALLY_ON_POP_FRAME) {
      List<PsiStatement> statements=getFinallyStatements(debuggerContext.getSourcePosition());
      if (!statements.isEmpty()) {
        StringBuilder sb=new StringBuilder();
        for (        PsiStatement statement : statements) {
          sb.append("\n").append(statement.getText());
        }
        int res=MessageDialogBuilder.yesNoCancel(UIUtil.removeMnemonic(ActionsBundle.actionText(DebuggerActions.POP_FRAME)),DebuggerBundle.message("warning.finally.block.detected") + sb).project(project).icon(Messages.getWarningIcon()).yesText(DebuggerBundle.message("button.drop.anyway")).noText(DebuggerBundle.message("button.execute.finally")).cancelText(CommonBundle.message("button.cancel")).doNotAsk(new DialogWrapper.DoNotAskOption(){
          @Override public boolean isToBeShown(){
            return DebuggerSettings.getInstance().CHECK_FINALLY_ON_POP_FRAME;
          }
          @Override public void setToBeShown(          boolean value,          int exitCode){
            DebuggerSettings.getInstance().CHECK_FINALLY_ON_POP_FRAME=value;
          }
          @Override public boolean canBeHidden(){
            return true;
          }
          @Override public boolean shouldSaveOptionsOnCancel(){
            return false;
          }
          @NotNull @Override public String getDoNotShowMessage(){
            return CommonBundle.message("dialog.options.do.not.show");
          }
        }
).show();
switch (res) {
case Messages.CANCEL:
          return;
case Messages.OK:
        break;
case Messages.NO:
      JavaDebugProcess process=debugProcess.getXdebugProcess();
    XExpressionImpl expression=XExpressionImpl.fromText(sb.toString());
  expression=XExpressionImpl.changeMode(expression,EvaluationMode.CODE_FRAGMENT);
XDebuggerEvaluator evaluator=stackFrame.getEvaluator();
if (evaluator != null) {
evaluator.evaluate(expression,new XDebuggerEvaluator.XEvaluationCallback(){
  @Override public void evaluated(  @NotNull XValue result){
    debugProcess.getManagerThread().schedule(debugProcess.createPopFrameCommand(debuggerContext,stackFrame.getStackFrameProxy()));
  }
  @Override public void errorOccurred(  @NotNull final String errorMessage){
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        Messages.showMessageDialog(project,DebuggerBundle.message("error.executing.finally",errorMessage),UIUtil.removeMnemonic(ActionsBundle.actionText(DebuggerActions.POP_FRAME)),Messages.getErrorIcon());
      }
    }
);
  }
}
,stackFrame.getSourcePosition());
return;
}
 else {
Messages.showMessageDialog(project,XDebuggerBundle.message("xdebugger.evaluate.stack.frame.has.not.evaluator"),UIUtil.removeMnemonic(ActionsBundle.actionText(DebuggerActions.POP_FRAME)),Messages.getErrorIcon());
}
}
}
}
debugProcess.getManagerThread().schedule(debugProcess.createPopFrameCommand(debuggerContext,stackFrame.getStackFrameProxy()));
}
 catch (NativeMethodException e2) {
Messages.showMessageDialog(project,DebuggerBundle.message("error.native.method.exception"),UIUtil.removeMnemonic(ActionsBundle.actionText(DebuggerActions.POP_FRAME)),Messages.getErrorIcon());
}
catch (InvalidStackFrameException ignored) {
}
catch (VMDisconnectedException vde) {
}
}
