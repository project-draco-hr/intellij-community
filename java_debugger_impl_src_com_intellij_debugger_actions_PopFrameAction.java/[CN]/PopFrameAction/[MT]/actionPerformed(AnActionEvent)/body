{
  Project project=e.getData(CommonDataKeys.PROJECT);
  StackFrameProxyImpl stackFrame=getStackFrameProxy(e);
  if (stackFrame == null) {
    return;
  }
  try {
    DebuggerContextImpl debuggerContext=DebuggerAction.getDebuggerContext(e.getDataContext());
    DebugProcessImpl debugProcess=debuggerContext.getDebugProcess();
    if (debugProcess == null) {
      return;
    }
    if (DebuggerSettings.getInstance().CHECK_FINALLY_ON_POP_FRAME && isInTryWithFinally(debuggerContext.getSourcePosition())) {
      int res=MessageDialogBuilder.yesNo(UIUtil.removeMnemonic(ActionsBundle.actionText(DebuggerActions.POP_FRAME)),DebuggerBundle.message("warning.finally.block.detected")).project(project).icon(Messages.getWarningIcon()).yesText(DebuggerBundle.message("button.drop.anyway")).noText(CommonBundle.message("button.cancel")).doNotAsk(new DialogWrapper.DoNotAskOption(){
        @Override public boolean isToBeShown(){
          return DebuggerSettings.getInstance().CHECK_FINALLY_ON_POP_FRAME;
        }
        @Override public void setToBeShown(        boolean value,        int exitCode){
          DebuggerSettings.getInstance().CHECK_FINALLY_ON_POP_FRAME=false;
        }
        @Override public boolean canBeHidden(){
          return true;
        }
        @Override public boolean shouldSaveOptionsOnCancel(){
          return false;
        }
        @NotNull @Override public String getDoNotShowMessage(){
          return CommonBundle.message("dialog.options.do.not.show");
        }
      }
).show();
      if (res == Messages.NO) {
        return;
      }
    }
    debugProcess.getManagerThread().schedule(debugProcess.createPopFrameCommand(debuggerContext,stackFrame));
  }
 catch (  NativeMethodException e2) {
    Messages.showMessageDialog(project,DebuggerBundle.message("error.native.method.exception"),UIUtil.removeMnemonic(ActionsBundle.actionText(DebuggerActions.POP_FRAME)),Messages.getErrorIcon());
  }
catch (  InvalidStackFrameException ignored) {
  }
catch (  VMDisconnectedException vde) {
  }
}
