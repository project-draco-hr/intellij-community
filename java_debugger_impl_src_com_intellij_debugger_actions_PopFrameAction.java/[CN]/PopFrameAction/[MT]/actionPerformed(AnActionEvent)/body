{
  final Project project=e.getData(CommonDataKeys.PROJECT);
  final JavaStackFrame stackFrame=getStackFrame(e);
  if (stackFrame == null || stackFrame.getStackFrameProxy().isBottom()) {
    return;
  }
  try {
    final DebuggerContextImpl debuggerContext=DebuggerAction.getDebuggerContext(e.getDataContext());
    final DebugProcessImpl debugProcess=debuggerContext.getDebugProcess();
    if (debugProcess == null) {
      return;
    }
    debugProcess.getSession().setSteppingThrough(stackFrame.getStackFrameProxy().threadProxy());
    if (evaluateFinallyBlocks(project,UIUtil.removeMnemonic(ActionsBundle.actionText(DebuggerActions.POP_FRAME)),stackFrame,new XDebuggerEvaluator.XEvaluationCallback(){
      @Override public void evaluated(      @NotNull XValue result){
        popFrame(debugProcess,debuggerContext,stackFrame);
      }
      @Override public void errorOccurred(      @NotNull final String errorMessage){
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            Messages.showMessageDialog(project,DebuggerBundle.message("error.executing.finally",errorMessage),UIUtil.removeMnemonic(ActionsBundle.actionText(DebuggerActions.POP_FRAME)),Messages.getErrorIcon());
          }
        }
);
      }
    }
))     return;
    popFrame(debugProcess,debuggerContext,stackFrame);
  }
 catch (  NativeMethodException e2) {
    Messages.showMessageDialog(project,DebuggerBundle.message("error.native.method.exception"),UIUtil.removeMnemonic(ActionsBundle.actionText(DebuggerActions.POP_FRAME)),Messages.getErrorIcon());
  }
catch (  InvalidStackFrameException ignored) {
  }
catch (  VMDisconnectedException ignored) {
  }
}
