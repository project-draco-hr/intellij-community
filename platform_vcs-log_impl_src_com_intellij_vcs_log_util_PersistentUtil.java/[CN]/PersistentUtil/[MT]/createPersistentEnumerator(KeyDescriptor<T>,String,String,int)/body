{
  File subdir=new File(LOG_CACHE,logKind);
  final File mapFile=new File(subdir,logId + "." + version);
  if (!mapFile.exists()) {
    IOUtil.deleteAllFilesStartingWith(new File(subdir,logId));
  }
  return IOUtil.openCleanOrResetBroken(new ThrowableComputable<PersistentEnumerator<T>,IOException>(){
    @Override public PersistentEnumerator<T> compute() throws IOException {
      return new PersistentEnumerator<T>(mapFile,keyDescriptor,Page.PAGE_SIZE);
    }
  }
,mapFile);
}
