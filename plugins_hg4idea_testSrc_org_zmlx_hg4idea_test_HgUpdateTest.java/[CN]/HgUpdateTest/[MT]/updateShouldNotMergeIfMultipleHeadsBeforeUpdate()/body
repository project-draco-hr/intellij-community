{
  changeFile_A_AndCommitInRemoteRepository();
  createAndCommitNewFileInLocalRepository();
  HgUpdateCommand updateCommand=new HgUpdateCommand(myProject,projectRepoVirtualFile);
  HgRevisionNumber parent=new HgParentsCommand(myProject).executeInCurrentThread(projectRepoVirtualFile).get(0);
  HgParentsCommand parentsCommand=new HgParentsCommand(myProject);
  parentsCommand.setRevision(parent);
  List<HgRevisionNumber> parents=parentsCommand.executeInCurrentThread(projectRepoVirtualFile);
  updateCommand.setRevision(parents.get(0).getChangeset());
  updateCommand.execute();
  createFileInCommand(projectRepoVirtualFile.findChild("com"),"c.txt","updated content");
  runHg(projectRepo,"commit","-m","creating new local head");
  List<HgRevisionNumber> branchHeads=new HgHeadsCommand(myProject,projectRepoVirtualFile).executeInCurrentThread();
  assertEquals(branchHeads.size(),2);
  HgRevisionNumber parentBeforeUpdate=new HgWorkingCopyRevisionsCommand(myProject).identify(projectRepoVirtualFile).getFirst();
  assertUpdateThroughPluginFails();
  HgRevisionNumber parentAfterUpdate=new HgWorkingCopyRevisionsCommand(myProject).identify(projectRepoVirtualFile).getFirst();
  List<HgRevisionNumber> branchHeadsAfterUpdate=new HgHeadsCommand(myProject,projectRepoVirtualFile).executeInCurrentThread();
  assertEquals(branchHeadsAfterUpdate.size(),3);
  assertEquals(parentBeforeUpdate,parentAfterUpdate);
}
