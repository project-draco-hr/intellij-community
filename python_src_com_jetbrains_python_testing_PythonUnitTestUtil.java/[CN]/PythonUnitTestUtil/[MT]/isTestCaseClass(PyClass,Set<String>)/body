{
  for (  PyClassLikeType type : cls.getAncestorTypes(TypeEvalContext.codeInsightFallback(cls.getProject()))) {
    if (type != null) {
      if (testQualifiedNames.contains(type.getClassQName())) {
        return true;
      }
      String clsName=cls.getQualifiedName();
      String[] names=new String[0];
      if (clsName != null)       names=clsName.split("\\.");
      if (names.length == 0)       return false;
      clsName=names[names.length - 1];
      if (TEST_MATCH_PATTERN.matcher(clsName).find()) {
        return true;
      }
    }
  }
  return false;
}
