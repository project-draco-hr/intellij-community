{
  for (  PsiElement element : elements) {
    if (isFirstCodeLine(element)) {
      final LineMarkerInfo<PsiElement> markerInfo=new LineMarkerInfo<PsiElement>(element,element.getTextRange(),AllIcons.Actions.Execute,Pass.UPDATE_OVERRIDEN_MARKERS,new Function<PsiElement,String>(){
        @Override public String fun(        PsiElement e){
          return "Execute '" + e.getContainingFile().getName() + "'";
        }
      }
,null,GutterIconRenderer.Alignment.RIGHT){
        @Nullable @Override public GutterIconRenderer createGutterRenderer(){
          return new LineMarkerGutterIconRenderer<PsiElement>(this){
            @Override public AnAction getClickAction(){
              final DefaultActionGroup group=new DefaultActionGroup();
              group.add(new PyRunCurrentFileAction());
              final PyExecuteFileExtensionPoint[] extensions=ApplicationManager.getApplication().getExtensions(PyExecuteFileExtensionPoint.EP_NAME);
              for (              PyExecuteFileExtensionPoint extension : extensions) {
                final AnAction action=extension.getRunAction();
                group.add(action);
              }
              if (group.getChildrenCount() == 1) {
                return new PyRunCurrentFileAction();
              }
              return new AnAction(){
                @Override public void actionPerformed(                @NotNull AnActionEvent e){
                  final ListPopup popup=new PopupFactoryImpl().createActionGroupPopup(null,group,e.getDataContext(),false,false,false,null,5);
                  popup.showInBestPositionFor(e.getDataContext());
                }
              }
;
            }
            @Nullable @Override public ActionGroup getPopupMenuActions(){
              final DefaultActionGroup group=new DefaultActionGroup();
              group.add(new PyRunCurrentFileAction());
              final PyExecuteFileExtensionPoint[] extensions=ApplicationManager.getApplication().getExtensions(PyExecuteFileExtensionPoint.EP_NAME);
              for (              PyExecuteFileExtensionPoint extension : extensions) {
                final AnAction action=extension.getRunAction();
                group.add(action);
              }
              return group;
            }
          }
;
        }
      }
;
      result.add(markerInfo);
    }
  }
}
