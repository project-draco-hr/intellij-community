{
  List<Location> results=Collections.emptyList();
  if (SUITE_PROTOCOL.equals(protocolId)) {
    PsiClass[] classes=JavaPsiFacade.getInstance(project).findClasses(locationData,myScope);
    if (classes.length > 0) {
      results=ContainerUtil.newSmartList();
      for (      PsiClass aClass : classes) {
        results.add(new PsiLocation<PsiClass>(project,aClass));
      }
    }
  }
 else   if (TEST_PROTOCOL.equals(protocolId)) {
    final String className=StringUtil.getPackageName(locationData);
    if (!StringUtil.isEmpty(className)) {
      final String methodName=StringUtil.getShortName(locationData);
      PsiClass[] classes=JavaPsiFacade.getInstance(project).findClasses(className,myScope);
      if (classes.length > 0) {
        results=ContainerUtil.newSmartList();
        for (        PsiClass aClass : classes) {
          PsiMethod[] methods=aClass.findMethodsByName(methodName,true);
          for (          PsiMethod method : methods) {
            results.add(new PsiLocation<PsiMethod>(project,method));
          }
        }
      }
    }
  }
  return results;
}
