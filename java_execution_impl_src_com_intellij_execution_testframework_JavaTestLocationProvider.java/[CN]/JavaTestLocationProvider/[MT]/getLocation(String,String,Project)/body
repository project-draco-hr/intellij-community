{
  List<Location> results=Collections.emptyList();
  final int idx=locationData.indexOf("[");
  final String paramName=idx >= 0 ? locationData.substring(idx) : null;
  if (idx >= 0) {
    locationData=locationData.substring(0,idx);
  }
  final JavaPsiFacade javaPsiFacade=JavaPsiFacade.getInstance(project);
  if (SUITE_PROTOCOL.equals(protocolId)) {
    locationData=StringUtil.trimEnd(locationData,".");
    PsiClass[] classes=javaPsiFacade.findClasses(locationData,myScope);
    if (classes.length > 0) {
      results=ContainerUtil.newSmartList();
      for (      PsiClass aClass : classes) {
        results.add(paramName != null ? PsiMemberParameterizedLocation.getParameterizedLocation(aClass,paramName) : new PsiLocation<PsiClass>(project,aClass));
      }
    }
  }
 else   if (TEST_PROTOCOL.equals(protocolId)) {
    final String className=StringUtil.getPackageName(locationData);
    if (!StringUtil.isEmpty(className)) {
      String methodName=StringUtil.getShortName(locationData);
      PsiClass[] classes=javaPsiFacade.findClasses(className,myScope);
      if (classes.length > 0) {
        results=ContainerUtil.newSmartList();
        for (        PsiClass aClass : classes) {
          PsiMethod[] methods=aClass.findMethodsByName(methodName,true);
          if (methods.length > 0) {
            for (            PsiMethod method : methods) {
              results.add(paramName != null ? new PsiMemberParameterizedLocation(project,method,aClass,paramName) : MethodLocation.elementInClass(method,aClass));
            }
          }
        }
      }
    }
  }
  return results;
}
