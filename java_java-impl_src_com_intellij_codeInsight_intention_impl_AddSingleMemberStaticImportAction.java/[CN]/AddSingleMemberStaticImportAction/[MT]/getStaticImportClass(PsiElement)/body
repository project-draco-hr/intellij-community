{
  if (!PsiUtil.isLanguageLevel5OrHigher(element))   return null;
  if (element instanceof PsiIdentifier) {
    final PsiElement parent=element.getParent();
    if (parent instanceof PsiMethodReferenceExpression)     return null;
    if (parent instanceof PsiJavaCodeReferenceElement && ((PsiJavaCodeReferenceElement)parent).getQualifier() != null) {
      if (PsiTreeUtil.getParentOfType(parent,PsiImportList.class) != null)       return null;
      PsiJavaCodeReferenceElement refExpr=(PsiJavaCodeReferenceElement)parent;
      if (checkParameterizedReference(refExpr))       return null;
      JavaResolveResult[] results=refExpr.multiResolve(false);
      for (      JavaResolveResult result : results) {
        final PsiElement resolved=result.getElement();
        if (resolved instanceof PsiMember && ((PsiModifierListOwner)resolved).hasModifierProperty(PsiModifier.STATIC)) {
          PsiClass aClass=getResolvedClass(element,(PsiMember)resolved);
          String qName=aClass != null ? aClass.getQualifiedName() : null;
          if (aClass != null && qName != null && !PsiTreeUtil.isAncestor(aClass,element,true) && !aClass.hasModifierProperty(PsiModifier.PRIVATE) && !PsiUtil.isFromDefaultPackage(aClass)) {
            final PsiElement gParent=refExpr.getParent();
            if (gParent instanceof PsiMethodCallExpression) {
              final PsiMethodCallExpression call=(PsiMethodCallExpression)gParent.copy();
              final PsiElement qualifier=call.getMethodExpression().getQualifier();
              if (qualifier == null)               return null;
              qualifier.delete();
              final JavaResolveResult resolveResult=call.resolveMethodGenerics();
              final PsiElement method=resolveResult.getElement();
              if (method instanceof PsiMethod) {
                if (((PsiMethod)method).getContainingClass() != aClass) {
                  final PsiElement currentFileResolveScope=resolveResult.getCurrentFileResolveScope();
                  if (currentFileResolveScope instanceof PsiImportStaticStatement) {
                    if (((PsiImportStaticStatement)currentFileResolveScope).isOnDemand() || MethodSignatureUtil.areSignaturesEqual((PsiMethod)method,(PsiMethod)resolved)) {
                      return null;
                    }
                  }
 else                   return null;
                }
              }
            }
 else {
              final PsiJavaCodeReferenceElement copy=(PsiJavaCodeReferenceElement)refExpr.copy();
              final PsiElement qualifier=copy.getQualifier();
              if (qualifier == null)               return null;
              qualifier.delete();
              final PsiElement target=copy.resolve();
              if (target != null && PsiTreeUtil.getParentOfType(target,PsiClass.class) != aClass)               return null;
            }
            return new ImportAvailability(qName + "." + refExpr.getReferenceName(),(PsiMember)resolved);
          }
        }
      }
    }
  }
  return null;
}
