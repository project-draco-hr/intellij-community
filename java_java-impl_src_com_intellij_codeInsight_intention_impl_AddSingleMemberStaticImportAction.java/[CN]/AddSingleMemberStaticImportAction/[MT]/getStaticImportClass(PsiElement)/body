{
  if (!PsiUtil.isLanguageLevel5OrHigher(element))   return null;
  if (element instanceof PsiIdentifier) {
    final PsiElement parent=element.getParent();
    if (parent instanceof PsiMethodReferenceExpression)     return null;
    if (parent instanceof PsiJavaCodeReferenceElement && ((PsiJavaCodeReferenceElement)parent).getQualifier() != null) {
      if (PsiTreeUtil.getParentOfType(parent,PsiImportList.class) != null)       return null;
      PsiJavaCodeReferenceElement refExpr=(PsiJavaCodeReferenceElement)parent;
      if (checkParameterizedReference(refExpr))       return null;
      PsiElement resolved=refExpr.resolve();
      if (resolved instanceof PsiMember && ((PsiModifierListOwner)resolved).hasModifierProperty(PsiModifier.STATIC)) {
        PsiClass aClass=getResolvedClass(element,(PsiMember)resolved);
        if (aClass != null && !PsiTreeUtil.isAncestor(aClass,element,true) && !aClass.hasModifierProperty(PsiModifier.PRIVATE)) {
          final PsiElement gParent=refExpr.getParent();
          if (gParent instanceof PsiMethodCallExpression) {
            final PsiMethodCallExpression call=(PsiMethodCallExpression)gParent.copy();
            final PsiElement qualifier=call.getMethodExpression().getQualifier();
            if (qualifier == null)             return null;
            qualifier.delete();
            final PsiMethod method=call.resolveMethod();
            if (method != null && method.getContainingClass() != aClass)             return null;
          }
 else {
            final PsiJavaCodeReferenceElement copy=(PsiJavaCodeReferenceElement)refExpr.copy();
            final PsiElement qualifier=copy.getQualifier();
            if (qualifier == null)             return null;
            qualifier.delete();
            final PsiElement target=copy.resolve();
            if (target != null && PsiTreeUtil.getParentOfType(target,PsiClass.class) != aClass)             return null;
          }
          String qName=aClass.getQualifiedName();
          if (qName != null && !Comparing.strEqual(qName,aClass.getName())) {
            return qName + "." + refExpr.getReferenceName();
          }
        }
      }
    }
  }
  return null;
}
