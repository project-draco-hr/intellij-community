{
  final YAMLPsiElement root=file.getDocuments().get(0);
  if (root != null) {
    YAMLPsiElement record=root;
    final int keyLength=key.length;
    int i;
    for (i=0; i < keyLength; i++) {
      YAMLKeyValue nextRecord=findChildByName(record,key[i]);
      if (i == 0 && nextRecord == null) {
        final YAMLFile yamlFile=(YAMLFile)PsiFileFactory.getInstance(file.getProject()).createFileFromText("temp." + YAMLFileType.YML.getDefaultExtension(),YAMLFileType.YML,key[i] + ":",LocalTimeCounter.currentTime(),true);
        final YAMLKeyValue topKeyValue=(YAMLKeyValue)yamlFile.getDocuments().get(0).getYAMLElements().get(0);
        nextRecord=(YAMLKeyValue)root.add(topKeyValue);
      }
      if (nextRecord != null) {
        record=nextRecord;
      }
 else       if (record instanceof YAMLKeyValue) {
        final YAMLKeyValue keyValue=(YAMLKeyValue)record;
        final PsiElement value=keyValue.getValue();
        String indent=keyValue.getValueIndent();
        final StringBuilder builder=new StringBuilder();
        builder.append(keyValue.getKeyText() + ":");
        for (int j=i; j < keyLength; j++) {
          builder.append("\n").append(indent.length() == 0 ? "  " : indent);
          builder.append(key[j]).append(":");
          indent+="  ";
        }
        builder.append(" ").append(text);
        final YAMLFile yamlFile=(YAMLFile)PsiFileFactory.getInstance(file.getProject()).createFileFromText("temp." + YAMLFileType.YML.getDefaultExtension(),YAMLFileType.YML,builder.toString(),LocalTimeCounter.currentTime(),true);
        final YAMLKeyValue topKeyValue=(YAMLKeyValue)yamlFile.getDocuments().get(0).getYAMLElements().get(0);
        if (value == null) {
          final YAMLKeyValue newKewValue=(YAMLKeyValue)keyValue.replace(topKeyValue);
          return (YAMLKeyValue)newKewValue.getLastChild();
        }
        final ASTNode generatedNode=topKeyValue.getNode();
        @SuppressWarnings({"ConstantConditions"}) final ASTNode[] generatedChildren=generatedNode.getChildren(null);
        final ASTNode valueNode=value.getNode();
        if (valueNode instanceof LeafElement) {
          return (YAMLKeyValue)value.replace(generatedChildren[3].getChildren(null)[0].getPsi());
        }
        valueNode.addChild(generatedChildren[1]);
        valueNode.addChild(generatedChildren[2]);
        valueNode.addChild(generatedChildren[3].getChildren(null)[0]);
        return (YAMLKeyValue)value.getLastChild();
      }
    }
    final StringBuilder builder=new StringBuilder();
    final int top=Math.min(i + 1,keyLength);
    for (int j=0; j < top; j++) {
      if (builder.length() > 0) {
        builder.append('.');
      }
      builder.append(key[j]);
    }
    throw new IncorrectOperationException(YAMLBundle.message("new.name.conflicts.with",builder.toString()));
  }
  return null;
}
