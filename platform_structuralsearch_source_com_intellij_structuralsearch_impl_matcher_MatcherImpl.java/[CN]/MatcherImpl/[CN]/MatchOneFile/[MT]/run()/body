{
  final List<PsiElement> files=getPsiElementsToProcess();
  if (progress != null) {
    progress.setFraction((double)scannedFilesCount / totalFilesToScan);
  }
  ++scannedFilesCount;
  if (files.size() == 0)   return;
  final Runnable action=new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          if (project.isDisposed())           return;
          final PsiFile psiFile=files.get(0).getContainingFile();
          final PsiDocumentManager manager=PsiDocumentManager.getInstance(project);
          final Document document=manager.getDocument(psiFile);
          if (document != null)           manager.commitDocument(document);
        }
      }
);
    }
  }
;
  if (ApplicationManager.getApplication().isDispatchThread()) {
    action.run();
  }
 else {
    ApplicationManager.getApplication().invokeAndWait(action,ModalityState.defaultModalityState());
  }
  if (project.isDisposed())   return;
  final LanguageFileType fileType=(LanguageFileType)matchContext.getOptions().getFileType();
  final Language patternLanguage=fileType.getLanguage();
  for (  PsiElement file : files) {
    if (file instanceof PsiFile) {
      matchContext.getSink().processFile((PsiFile)file);
    }
    final PsiElement finalFile=file;
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        PsiElement file=finalFile;
        if (!file.isValid())         return;
        final StructuralSearchProfile profile=StructuralSearchUtil.getProfileByLanguage(file.getLanguage());
        if (profile == null) {
          return;
        }
        file=profile.extendMatchOnePsiFile(file);
        match(file,patternLanguage);
      }
    }
);
  }
}
