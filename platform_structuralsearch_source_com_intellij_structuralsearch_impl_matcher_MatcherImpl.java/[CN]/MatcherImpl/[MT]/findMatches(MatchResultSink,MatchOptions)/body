{
  CompiledPattern compiledPattern=prepareMatching(sink,options);
  if (compiledPattern == null) {
    return;
  }
  matchContext.getSink().setMatchingProcess(scheduler);
  scheduler.init();
  progress=matchContext.getSink().getProgressIndicator();
  if (isTesting) {
    final PsiElement[] elements=((LocalSearchScope)options.getScope()).getScope();
    PsiElement parent=elements[0].getParent();
    if (elements.length > 0 && matchContext.getPattern().getStrategy().continueMatching(parent != null ? parent : elements[0])) {
      visitor.matchContext(new SsrFilteringNodeIterator(new ArrayBackedNodeIterator(elements)));
    }
 else {
      final LanguageFileType fileType=(LanguageFileType)matchContext.getOptions().getFileType();
      final Language language=fileType.getLanguage();
      for (      PsiElement element : elements) {
        match(element,language);
      }
    }
    matchContext.getSink().matchingFinished();
    return;
  }
  if (!findMatches(options,compiledPattern)) {
    return;
  }
  if (scheduler.getTaskQueueEndAction() == null) {
    scheduler.setTaskQueueEndAction(new Runnable(){
      @Override public void run(){
        matchContext.getSink().matchingFinished();
      }
    }
);
  }
  scheduler.executeNext();
}
