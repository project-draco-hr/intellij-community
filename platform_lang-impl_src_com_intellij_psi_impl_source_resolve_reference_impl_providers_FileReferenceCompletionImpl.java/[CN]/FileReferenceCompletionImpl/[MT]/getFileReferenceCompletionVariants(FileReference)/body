{
  final String s=reference.getText();
  if (s != null && s.equals("/")) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final CommonProcessors.CollectUniquesProcessor<PsiFileSystemItem> collector=new CommonProcessors.CollectUniquesProcessor<PsiFileSystemItem>();
  final PsiElementProcessor<PsiFileSystemItem> processor=new PsiElementProcessor<PsiFileSystemItem>(){
    @Override public boolean execute(    @NotNull PsiFileSystemItem fileSystemItem){
      return new FilteringProcessor<PsiFileSystemItem>(reference.getFileReferenceSet().getReferenceCompletionFilter(),collector).process(FileReference.getOriginalFile(fileSystemItem));
    }
  }
;
  List<Object> additionalItems=ContainerUtil.newArrayList();
  for (  PsiFileSystemItem context : reference.getContexts()) {
    for (    final PsiElement child : context.getChildren()) {
      if (child instanceof PsiFileSystemItem) {
        processor.execute((PsiFileSystemItem)child);
      }
    }
    if (context instanceof FileReferenceResolver) {
      additionalItems.addAll(((FileReferenceResolver)context).getVariants(reference));
    }
  }
  final THashSet<PsiElement> set=new THashSet<PsiElement>(collector.getResults(),VARIANTS_HASHING_STRATEGY);
  final PsiElement[] candidates=PsiUtilCore.toPsiElementArray(set);
  final Object[] variants=new Object[candidates.length + additionalItems.size()];
  for (int i=0; i < candidates.length; i++) {
    PsiElement candidate=candidates[i];
    Object item=reference.createLookupItem(candidate);
    if (item == null) {
      item=FileInfoManager.getFileLookupItem(candidate);
    }
    variants[i]=item;
  }
  for (int i=0; i < additionalItems.size(); i++) {
    variants[i + candidates.length]=additionalItems.get(i);
  }
  if (!reference.getFileReferenceSet().isUrlEncoded()) {
    return variants;
  }
  List<Object> encodedVariants=new ArrayList<Object>(variants.length + additionalItems.size());
  for (int i=0; i < candidates.length; i++) {
    final PsiElement element=candidates[i];
    if (element instanceof PsiNamedElement) {
      final PsiNamedElement psiElement=(PsiNamedElement)element;
      String name=psiElement.getName();
      final String encoded=reference.encode(name,psiElement);
      if (encoded == null)       continue;
      if (!encoded.equals(name)) {
        final Icon icon=psiElement.getIcon(Iconable.ICON_FLAG_READ_STATUS | Iconable.ICON_FLAG_VISIBILITY);
        LookupElementBuilder item=FileInfoManager.getFileLookupItem(candidates[i],encoded,icon);
        encodedVariants.add(item.withTailText(" (" + name + ")"));
      }
 else {
        encodedVariants.add(variants[i]);
      }
    }
  }
  encodedVariants.addAll(additionalItems);
  return ArrayUtil.toObjectArray(encodedVariants);
}
