{
  PyFunction function=(PyFunction)element;
  final PyClass containingClass=function.getContainingClass();
  if (containingClass == null) {
    return function;
  }
  if (PyNames.INIT.equals(function.getName())) {
    return containingClass;
  }
  final PyFunction deepestSuperMethod=PySuperMethodsSearch.findDeepestSuperMethod(function);
  if (!deepestSuperMethod.equals(function)) {
    String message="Method " + function.getName() + " of class "+ containingClass.getQualifiedName()+ "\noverrides method of class "+ deepestSuperMethod.getContainingClass().getQualifiedName()+ ".\nDo you want to rename the base method?";
    int rc=Messages.showYesNoCancelDialog(element.getProject(),message,"Rename",Messages.getQuestionIcon());
    if (rc == 0) {
      return deepestSuperMethod;
    }
    if (rc == 1) {
      return function;
    }
    return null;
  }
  final Property property=containingClass.findPropertyByCallable(function);
  if (property != null) {
    final PyTargetExpression site=property.getDefinitionSite();
    if (site != null) {
      if (ApplicationManager.getApplication().isUnitTestMode()) {
        return site;
      }
      final String message=String.format("Do you want to rename the property '%s' instead of its accessor function '%s'?",property.getName(),function.getName());
      final int rc=Messages.showYesNoCancelDialog(element.getProject(),message,"Rename",Messages.getQuestionIcon());
switch (rc) {
case 0:
        return site;
case 1:
      return function;
default :
    return null;
}
}
}
return function;
}
