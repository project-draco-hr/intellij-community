{
  final DFSTBuilder<Node> builder=new DFSTBuilder<>(graph);
  final Collection<Collection<Node>> components=builder.getComponents();
  final List<Chunk<Node>> chunks=new ArrayList<>(components.size());
  final Map<Node,Chunk<Node>> nodeToChunkMap=new LinkedHashMap<>();
  for (  Collection<Node> component : components) {
    final Set<Node> chunkNodes=new LinkedHashSet<>();
    final Chunk<Node> chunk=new Chunk<>(chunkNodes);
    chunks.add(chunk);
    for (    Node node : component) {
      chunkNodes.add(node);
      nodeToChunkMap.put(node,chunk);
    }
  }
  return GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<Chunk<Node>>(){
    @Override public Collection<Chunk<Node>> getNodes(){
      return chunks;
    }
    @Override public Iterator<Chunk<Node>> getIn(    Chunk<Node> chunk){
      final Set<Node> chunkNodes=chunk.getNodes();
      final Set<Chunk<Node>> ins=new LinkedHashSet<>();
      for (      final Node node : chunkNodes) {
        for (Iterator<Node> nodeIns=graph.getIn(node); nodeIns.hasNext(); ) {
          final Node in=nodeIns.next();
          if (!chunk.containsNode(in)) {
            ins.add(nodeToChunkMap.get(in));
          }
        }
      }
      return ins.iterator();
    }
  }
));
}
