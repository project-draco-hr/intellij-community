{
  try {
    VirtualFile windowCopy=answerFile.copy(this,answerFile.getParent(),answerFile.getNameWithoutExtension() + WINDOW_POSTFIX);
    final FileDocumentManager documentManager=FileDocumentManager.getInstance();
    final Document windowDocument=documentManager.getDocument(windowCopy);
    if (windowDocument != null) {
      File resourceFile=StudyUtils.copyResourceFile(virtualFile.getName(),windowCopy.getName(),project,usersTaskFile.getTask());
      TaskFile windowTaskFile=new TaskFile();
      TaskFile.copy(answerTaskFile,windowTaskFile);
      StudyDocumentListener listener=new StudyDocumentListener(windowTaskFile,project);
      windowDocument.addDocumentListener(listener);
      int start=getRealStartOffset(windowDocument);
      int end=start + getLength();
      TaskWindow userTaskWindow=usersTaskFile.getTaskWindows().get(getIndex());
      int userStart=userTaskWindow.getRealStartOffset(usersDocument);
      int userEnd=userStart + userTaskWindow.getLength();
      String text=usersDocument.getText(new TextRange(userStart,userEnd));
      windowDocument.replaceString(start,end,text);
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          documentManager.saveDocument(windowDocument);
        }
      }
);
      VirtualFile fileWindows=StudyUtils.flushWindows(windowTaskFile,windowCopy);
      Process smartTestProcess=testRunner.launchTests(project,windowCopy.getPath());
      boolean res=testRunner.getPassedTests(smartTestProcess).equals(StudyTestRunner.TEST_OK);
      userTaskWindow.setStatus(res ? StudyStatus.Solved : StudyStatus.Failed,StudyStatus.Unchecked);
      StudyUtils.deleteFile(windowCopy);
      StudyUtils.deleteFile(fileWindows);
      if (!resourceFile.delete()) {
        LOG.error("failed to delete",resourceFile.getPath());
      }
    }
  }
 catch (  ExecutionException e) {
    LOG.error(e);
  }
catch (  IOException e) {
    LOG.error(e);
  }
}
