{
  String name=getNameValue();
  if (StringUtil.isEmptyOrSpaces(name)) {
    ApplicationInfo info=ApplicationInfo.getInstance();
    throw new ConfigurationException(IdeBundle.message("prompt.new.project.file.name",info.getVersionName(),context.getPresentationName()));
  }
  String projectDirectory=getPath();
  if (StringUtil.isEmptyOrSpaces(projectDirectory)) {
    throw new ConfigurationException(IdeBundle.message("prompt.enter.project.file.location",context.getPresentationName()));
  }
  if (myShouldBeAbsolute && !new File(projectDirectory).isAbsolute()) {
    throw new ConfigurationException(StringUtil.capitalize(IdeBundle.message("file.location.should.be.absolute",context.getPresentationName())));
  }
  boolean shouldPromptCreation=isPathChangedByUser();
  String message=IdeBundle.message("directory.project.file.directory",context.getPresentationName());
  if (!ProjectWizardUtil.createDirectoryIfNotExists(message,projectDirectory,shouldPromptCreation)) {
    return false;
  }
  File file=new File(projectDirectory);
  if (file.exists() && !file.canWrite()) {
    throw new ConfigurationException(String.format("Directory '%s' is not seem to be writable. Please consider another location.",projectDirectory));
  }
  for (  Project p : ProjectManager.getInstance().getOpenProjects()) {
    if (ProjectUtil.isSameProject(projectDirectory,p)) {
      throw new ConfigurationException(String.format("Directory '%s' is already taken by the project '%s'. Please consider another location.",projectDirectory,p.getName()));
    }
  }
  boolean shouldContinue=true;
  String fileName=defaultFormat ? name + ProjectFileType.DOT_DEFAULT_EXTENSION : Project.DIRECTORY_STORE_FOLDER;
  File projectFile=new File(file,fileName);
  if (projectFile.exists()) {
    message=IdeBundle.message("prompt.overwrite.project.file",projectFile.getAbsolutePath(),context.getPresentationName());
    int answer=Messages.showYesNoDialog(message,IdeBundle.message("title.file.already.exists"),Messages.getQuestionIcon());
    shouldContinue=(answer == Messages.YES);
  }
  return shouldContinue;
}
