{
  Project project=location.getProject();
  if (project == null)   return 0;
  Comparable tests=getTestFrameworkWeight(element,location,project);
  if (tests != null)   return tests;
  if (!SdkOrLibraryWeigher.isJdkElement(element,project)) {
    return 0;
  }
  if (element instanceof PsiClass) {
    return getJdkClassProximity((PsiClass)element);
  }
  if (element instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)element;
    final PsiClass containingClass=method.getContainingClass();
    if (containingClass != null) {
      String methodName=method.getName();
      if ("finalize".equals(methodName) || "registerNatives".equals(methodName) || methodName.startsWith("wait")|| methodName.startsWith("notify")) {
        if (JAVA_LANG_OBJECT.equals(containingClass.getQualifiedName())) {
          return -1;
        }
      }
      if (isGetClass(method)) {
        return -1;
      }
      if ("subSequence".equals(methodName)) {
        if (JAVA_LANG_STRING.equals(containingClass.getQualifiedName())) {
          return -1;
        }
      }
      if (JAVA_LANG_OBJECT.equals(containingClass.getQualifiedName())) {
        return 0;
      }
      return getJdkClassProximity(method.getContainingClass());
    }
  }
  if (element instanceof PsiField) {
    return getJdkClassProximity(((PsiField)element).getContainingClass());
  }
  return 0;
}
