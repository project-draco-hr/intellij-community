{
  final Project project=getConfiguration().getProject();
  final JavaParameters javaParameters=super.createJavaParameters();
  javaParameters.setupEnvs(getConfiguration().getPersistantData().getEnvs(),getConfiguration().getPersistantData().PASS_PARENT_ENVS);
  javaParameters.setMainClass("org.testng.RemoteTestNGStarter");
  javaParameters.getClassPath().add(PathUtil.getJarPathForClass(RemoteTestNGStarter.class));
  Module module=getConfiguration().getConfigurationModule().getModule();
  LanguageLevel effectiveLanguageLevel=module == null ? LanguageLevelProjectExtension.getInstance(project).getLanguageLevel() : EffectiveLanguageLevelUtil.getEffectiveLanguageLevel(module);
  final boolean is15=effectiveLanguageLevel != LanguageLevel.JDK_1_4 && effectiveLanguageLevel != LanguageLevel.JDK_1_3;
  LOG.info("Language level is " + effectiveLanguageLevel.toString());
  LOG.info("is15 is " + is15);
  final String pathToBundledJar=PathUtil.getJarPathForClass(AfterClass.class);
  Sdk jdk=module == null ? ProjectRootManager.getInstance(project).getProjectSdk() : ModuleRootManager.getInstance(module).getSdk();
  javaParameters.setJdk(jdk);
  LOG.info("Test scope is: " + getConfiguration().getPersistantData().getScope());
  if (getConfiguration().getPersistantData().getScope() == TestSearchScope.WHOLE_PROJECT) {
    LOG.info("Configuring for whole project");
    JavaParametersUtil.configureProject(getConfiguration().getProject(),javaParameters,JavaParameters.JDK_AND_CLASSES_AND_TESTS,getConfiguration().ALTERNATIVE_JRE_PATH_ENABLED ? getConfiguration().ALTERNATIVE_JRE_PATH : null);
  }
 else {
    LOG.info("Configuring for module:" + getConfiguration().getConfigurationModule().getModuleName());
    JavaParametersUtil.configureModule(getConfiguration().getConfigurationModule(),javaParameters,JavaParameters.JDK_AND_CLASSES_AND_TESTS,getConfiguration().ALTERNATIVE_JRE_PATH_ENABLED ? getConfiguration().ALTERNATIVE_JRE_PATH : null);
  }
  javaParameters.getClassPath().add(pathToBundledJar);
  try {
    port=NetUtils.findAvailableSocketPort();
  }
 catch (  IOException e) {
    throw new ExecutionException("Unable to bind to port " + port,e);
  }
  final TestData data=getConfiguration().getPersistantData();
  javaParameters.getProgramParametersList().add(supportSerializationProtocol(getConfiguration()) ? RemoteArgs.PORT : CommandLineArgs.PORT,String.valueOf(port));
  if (data.getOutputDirectory() != null && !data.getOutputDirectory().isEmpty()) {
    javaParameters.getProgramParametersList().add(CommandLineArgs.OUTPUT_DIRECTORY,data.getOutputDirectory());
  }
  javaParameters.getProgramParametersList().add(CommandLineArgs.USE_DEFAULT_LISTENERS,String.valueOf(data.USE_DEFAULT_REPORTERS));
  @NonNls final StringBuilder buf=new StringBuilder();
  if (data.TEST_LISTENERS != null && !data.TEST_LISTENERS.isEmpty()) {
    buf.append(StringUtil.join(data.TEST_LISTENERS,";"));
  }
  collectListeners(javaParameters,buf,IDEATestNGListener.EP_NAME,";");
  if (buf.length() > 0)   javaParameters.getProgramParametersList().add(CommandLineArgs.LISTENER,buf.toString());
  createServerSocket(javaParameters);
  createTempFiles(javaParameters);
  return javaParameters;
}
