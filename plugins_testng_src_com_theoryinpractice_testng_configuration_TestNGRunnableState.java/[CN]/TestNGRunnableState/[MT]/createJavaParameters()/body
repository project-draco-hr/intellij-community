{
  final JavaParameters javaParameters=super.createJavaParameters();
  javaParameters.setupEnvs(getConfiguration().getPersistantData().getEnvs(),getConfiguration().getPersistantData().PASS_PARENT_ENVS);
  javaParameters.setMainClass("org.testng.RemoteTestNGStarter");
  try {
    port=NetUtils.findAvailableSocketPort();
  }
 catch (  IOException e) {
    throw new ExecutionException("Unable to bind to port " + port,e);
  }
  final TestData data=getConfiguration().getPersistantData();
  javaParameters.getProgramParametersList().add(supportSerializationProtocol(getConfiguration()) ? RemoteArgs.PORT : CommandLineArgs.PORT,String.valueOf(port));
  if (data.getOutputDirectory() != null && !data.getOutputDirectory().isEmpty()) {
    javaParameters.getProgramParametersList().add(CommandLineArgs.OUTPUT_DIRECTORY,data.getOutputDirectory());
  }
  javaParameters.getProgramParametersList().add(CommandLineArgs.USE_DEFAULT_LISTENERS,String.valueOf(data.USE_DEFAULT_REPORTERS));
  @NonNls final StringBuilder buf=new StringBuilder();
  if (data.TEST_LISTENERS != null && !data.TEST_LISTENERS.isEmpty()) {
    buf.append(StringUtil.join(data.TEST_LISTENERS,";"));
  }
  collectListeners(javaParameters,buf,IDEATestNGListener.EP_NAME,";");
  if (buf.length() > 0)   javaParameters.getProgramParametersList().add(CommandLineArgs.LISTENER,buf.toString());
  createServerSocket(javaParameters);
  createTempFiles(javaParameters);
  return javaParameters;
}
