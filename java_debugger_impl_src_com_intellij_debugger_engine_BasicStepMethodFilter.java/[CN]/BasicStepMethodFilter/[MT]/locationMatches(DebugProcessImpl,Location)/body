{
  final Method method=location.method();
  boolean lambdaMatched=false;
  String name=method.name();
  if (!myTargetMethodName.equals(name)) {
    if (LambdaMethodFilter.isLambdaName(name)) {
      SourcePosition position=process.getPositionManager().getSourcePosition(location);
      lambdaMatched=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          PsiElement psiMethod=DebuggerUtilsEx.getContainingMethod(position);
          if (psiMethod instanceof PsiLambdaExpression) {
            PsiType type=((PsiLambdaExpression)psiMethod).getFunctionalInterfaceType();
            PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(type);
            if (type != null && interfaceMethod != null && myTargetMethodName.equals(interfaceMethod.getName())) {
              try {
                return type.getCanonicalText().equals(myDeclaringClassName.getName(process).replace('$','.'));
              }
 catch (              EvaluateException e) {
                LOG.info(e);
              }
            }
          }
          return false;
        }
      }
);
    }
    if (!lambdaMatched)     return false;
  }
  if (myTargetMethodSignature != null) {
    if (!signatureMatches(method,myTargetMethodSignature.getName(process))) {
      return false;
    }
  }
  return lambdaMatched || DebuggerUtilsEx.isAssignableFrom(myDeclaringClassName.getName(process),location.declaringType());
}
