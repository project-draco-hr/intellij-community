{
  return new BaseListPopupStep<Phase>("Choose activation phase",Phase.values()){
    @Override public PopupStep onChosen(    final Phase selectedPhase,    boolean finalChoice){
      final Map<String,TaskActivationState> activationMap=getInstance(myProject).getStateProvider().getProjectsTasksActivationMap(myProjectSystemId);
      final String projectPath=projectPopupItem.myModuleData.getLinkedExternalProjectPath();
      final List<String> tasks=activationMap.get(projectPath).getTasks(selectedPhase);
      final List<String> tasksToSuggest=ContainerUtil.newArrayList(projectPopupItem.myTasks);
      tasksToSuggest.removeAll(tasks);
      return new BaseListPopupStep<String>("Choose task",tasksToSuggest){
        @Override public PopupStep onChosen(        final String taskName,        boolean finalChoice){
          return doFinalStep(new Runnable(){
            @Override public void run(){
              myTaskActivator.addTask(new TaskActivationEntry(myProjectSystemId,selectedPhase,projectPath,taskName));
              updateTree(myRootNode);
            }
          }
);
        }
      }
;
    }
    @Override public boolean hasSubstep(    Phase phase){
      return true;
    }
  }
;
}
