{
  final String packageName=repoPackage.getName();
  final String repository=PyPIPackageUtil.PYPI_URL.equals(repoPackage.getRepoUrl()) ? null : repoPackage.getRepoUrl();
  final List<String> extraArgs=new ArrayList<String>();
  if (installToUser) {
    extraArgs.add(PyPackageManagerImpl.USE_USER_SITE);
  }
  if (extraOptions != null) {
    Collections.addAll(extraArgs,extraOptions.split(" +"));
  }
  if (!StringUtil.isEmptyOrSpaces(repository)) {
    extraArgs.add("--extra-index-url");
    extraArgs.add(repository);
  }
  if (forceUpgrade) {
    extraArgs.add("-U");
  }
  final PyRequirement req;
  if (version != null) {
    req=new PyRequirement(packageName,version);
  }
 else {
    req=new PyRequirement(packageName);
  }
  final PyPackageManagerImpl.UI ui=new PyPackageManagerImpl.UI(myProject,mySdk,new PyPackageManagerImpl.UI.Listener(){
    @Override public void started(){
      listener.installationStarted(packageName);
    }
    @Override public void finished(    @Nullable List<PyExternalProcessException> exceptions){
      String errorDescription=null;
      if (exceptions != null && exceptions.size() > 0) {
        errorDescription=PyPackageManagerImpl.UI.createDescription(exceptions,"");
      }
      listener.installationFinished(packageName,errorDescription);
    }
  }
);
  ui.install(Collections.singletonList(req),extraArgs);
}
