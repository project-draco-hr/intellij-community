{
  final PsiElement[] children=myClass.getChildren();
  for (  PsiElement child : children) {
    if (child instanceof PsiMember && !myMovedMembers.contains(child)) {
      child.accept(new UsedMovedMembersConflictsCollector(child));
    }
  }
  final PsiAnnotation annotation=AnnotationUtil.findAnnotation(myClass,CommonClassNames.JAVA_LANG_FUNCTIONAL_INTERFACE);
  if (annotation != null && myMovedMembers.contains(LambdaUtil.getFunctionalInterfaceMethod(myClass))) {
    myConflicts.putValue(annotation,RefactoringBundle.message("functional.interface.broken"));
  }
}
