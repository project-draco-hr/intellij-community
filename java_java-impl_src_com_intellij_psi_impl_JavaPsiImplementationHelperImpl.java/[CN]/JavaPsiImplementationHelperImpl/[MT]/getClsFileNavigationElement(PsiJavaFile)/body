{
  String packageName=clsFile.getPackageName();
  PsiClass[] classes=clsFile.getClasses();
  if (classes.length == 0)   return clsFile;
  String sourceFileName=((ClsClassImpl)classes[0]).getSourceFileName();
  String relativeFilePath=packageName.isEmpty() ? sourceFileName : packageName.replace('.','/') + '/' + sourceFileName;
  final VirtualFile vFile=clsFile.getContainingFile().getVirtualFile();
  ProjectFileIndex projectFileIndex=ProjectFileIndex.SERVICE.getInstance(clsFile.getProject());
  final Set<VirtualFile> sourceRoots=ContainerUtil.newLinkedHashSet();
  for (  OrderEntry orderEntry : projectFileIndex.getOrderEntriesForFile(vFile)) {
    if (orderEntry instanceof LibraryOrSdkOrderEntry) {
      Collections.addAll(sourceRoots,orderEntry.getFiles(OrderRootType.SOURCES));
    }
  }
  for (  VirtualFile root : sourceRoots) {
    VirtualFile source=root.findFileByRelativePath(relativeFilePath);
    if (source != null) {
      PsiFile psiSource=clsFile.getManager().findFile(source);
      if (psiSource instanceof PsiClassOwner) {
        return psiSource;
      }
    }
  }
  return clsFile;
}
