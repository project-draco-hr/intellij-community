{
  PsiClass[] classes=clsFile.getClasses();
  if (classes.length == 0)   return clsFile;
  String sourceFileName=((ClsClassImpl)classes[0]).getSourceFileName();
  String packageName=clsFile.getPackageName();
  String relativePath=packageName.isEmpty() ? sourceFileName : packageName.replace('.','/') + '/' + sourceFileName;
  ProjectFileIndex index=ProjectFileIndex.SERVICE.getInstance(clsFile.getProject());
  for (  OrderEntry orderEntry : index.getOrderEntriesForFile(clsFile.getContainingFile().getVirtualFile())) {
    if (!(orderEntry instanceof LibraryOrSdkOrderEntry))     continue;
    for (    VirtualFile root : orderEntry.getFiles(OrderRootType.SOURCES)) {
      VirtualFile source=root.findFileByRelativePath(relativePath);
      if (source != null) {
        PsiFile psiSource=clsFile.getManager().findFile(source);
        if (psiSource instanceof PsiClassOwner) {
          return psiSource;
        }
      }
    }
  }
  return clsFile;
}
