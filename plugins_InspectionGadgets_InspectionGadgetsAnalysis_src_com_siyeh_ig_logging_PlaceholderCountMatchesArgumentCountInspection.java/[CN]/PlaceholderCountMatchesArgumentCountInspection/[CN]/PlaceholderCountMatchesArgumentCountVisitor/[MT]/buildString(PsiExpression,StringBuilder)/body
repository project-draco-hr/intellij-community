{
  final PsiType type=expression.getType();
  if (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    return buildString(parenthesizedExpression.getExpression(),builder);
  }
 else   if (expression instanceof PsiPolyadicExpression) {
    if (!TypeUtils.isJavaLangString(type) && !PsiType.CHAR.equals(type)) {
      return true;
    }
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)expression;
    for (    PsiExpression operand : polyadicExpression.getOperands()) {
      if (!buildString(operand,builder)) {
        return false;
      }
    }
    return true;
  }
 else   if (expression instanceof PsiLiteralExpression) {
    if (TypeUtils.isJavaLangString(type) || PsiType.CHAR.equals(type)) {
      final PsiLiteralExpression literalExpression=(PsiLiteralExpression)expression;
      builder.append(literalExpression.getValue());
    }
    return true;
  }
 else {
    if (!TypeUtils.isJavaLangString(type)) {
      return true;
    }
    final Object value=ExpressionUtils.computeConstantExpression(expression);
    if (value == null) {
      return false;
    }
    builder.append(value);
    return true;
  }
}
