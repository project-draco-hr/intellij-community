{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String name=methodExpression.getReferenceName();
  if (!loggingMethodNames.contains(name)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (!InheritanceUtil.isInheritor(aClass,"org.slf4j.Logger")) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length == 0) {
    return;
  }
  PsiExpression logStringArgument=arguments[0];
  final int argumentCount;
  if (InheritanceUtil.isInheritor(logStringArgument.getType(),"org.slf4j.Marker")) {
    if (arguments.length < 2) {
      return;
    }
    logStringArgument=arguments[1];
    argumentCount=countArguments(arguments,2);
  }
 else {
    argumentCount=countArguments(arguments,1);
  }
  final Object value=ExpressionUtils.computeConstantExpression(logStringArgument);
  final int placeholderCount=countPlaceholders(value);
  if (placeholderCount < 0 || argumentCount < 0 || placeholderCount == argumentCount) {
    return;
  }
  if (placeholderCount > 1 && placeholderCount == argumentCount + 1 && hasThrowableType(arguments[arguments.length - 1])) {
    return;
  }
  registerError(logStringArgument,Integer.valueOf(argumentCount),Integer.valueOf(placeholderCount),value);
}
