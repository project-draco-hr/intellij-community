{
  final Set<String> pluginsToEnable=new HashSet<String>();
  final List<PluginNode> nodes=new ArrayList<PluginNode>();
  for (  PluginDownloader downloader : myUploadedPlugins) {
    String pluginId=downloader.getPluginId();
    if (!mySkippedPlugins.contains(pluginId)) {
      pluginsToEnable.add(pluginId);
      if (!pluginHelper.isDisabled(pluginId)) {
        final PluginNode pluginNode=PluginDownloader.createPluginNode(null,downloader);
        if (pluginNode != null) {
          nodes.add(pluginNode);
        }
      }
    }
  }
  final Set<IdeaPluginDescriptor> disabled=new HashSet<IdeaPluginDescriptor>();
  final Set<IdeaPluginDescriptor> disabledDependants=new HashSet<IdeaPluginDescriptor>();
  for (  PluginNode node : nodes) {
    final PluginId pluginId=node.getPluginId();
    if (pluginHelper.isDisabled(pluginId)) {
      disabled.add(node);
    }
    final List<PluginId> depends=node.getDepends();
    if (depends != null) {
      final Set<PluginId> optionalDeps=new HashSet<PluginId>(Arrays.asList(node.getOptionalDependentPluginIds()));
      for (      PluginId dependantId : depends) {
        if (optionalDeps.contains(dependantId))         continue;
        final IdeaPluginDescriptor pluginDescriptor=PluginManager.getPlugin(dependantId);
        if (pluginDescriptor != null && pluginHelper.isDisabled(dependantId)) {
          disabledDependants.add(pluginDescriptor);
        }
      }
    }
  }
  suggestToEnableInstalledPlugins(pluginHelper,disabled,disabledDependants,nodes);
  final Runnable notifyRunnable=new Runnable(){
    @Override public void run(){
      PluginManagerMain.notifyPluginsUpdated(myProject);
    }
  }
;
  for (  String pluginId : pluginsToEnable) {
    PluginManagerCore.enablePlugin(pluginId);
  }
  if (!nodes.isEmpty()) {
    try {
      PluginManagerMain.downloadPlugins(nodes,myAllPlugins,notifyRunnable,null);
    }
 catch (    IOException e) {
      LOG.error(e);
    }
  }
 else {
    if (!pluginsToEnable.isEmpty()) {
      notifyRunnable.run();
    }
  }
  super.doOKAction();
}
