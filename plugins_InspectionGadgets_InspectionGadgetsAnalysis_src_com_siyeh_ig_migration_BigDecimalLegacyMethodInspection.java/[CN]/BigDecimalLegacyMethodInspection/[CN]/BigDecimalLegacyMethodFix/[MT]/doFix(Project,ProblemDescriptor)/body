{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement grandParent=element.getParent().getParent();
  if (!(grandParent instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 2 && arguments.length != 3) {
    return;
  }
  final PsiExpression argument=arguments[arguments.length - 1];
  final Object value=ExpressionUtils.computeConstantExpression(argument);
  if (!(value instanceof Integer)) {
    return;
  }
  final int roundingMode=(Integer)value;
switch (roundingMode) {
case 0:
    PsiReplacementUtil.replaceExpressionAndShorten(argument,"java.math.RoundingMode.UP");
  break;
case 1:
PsiReplacementUtil.replaceExpressionAndShorten(argument,"java.math.RoundingMode.DOWN");
break;
case 2:
PsiReplacementUtil.replaceExpressionAndShorten(argument,"java.math.RoundingMode.CEILING");
break;
case 3:
PsiReplacementUtil.replaceExpressionAndShorten(argument,"java.math.RoundingMode.FLOOR");
break;
case 4:
PsiReplacementUtil.replaceExpressionAndShorten(argument,"java.math.RoundingMode.HALF_UP");
break;
case 5:
PsiReplacementUtil.replaceExpressionAndShorten(argument,"java.math.RoundingMode.HALF_DOWN");
break;
case 6:
PsiReplacementUtil.replaceExpressionAndShorten(argument,"java.math.RoundingMode.HALF_EVEN");
break;
case 7:
PsiReplacementUtil.replaceExpressionAndShorten(argument,"java.math.RoundingMode.UNNECESSARY");
break;
}
}
