{
  try {
    indexOffset+=INDEX_ENTRY_SIZE;
    while (indexOffset < myIndexStreamCachedLength) {
      IndexEntry e=getIndexEntryAtOffset(indexOffset);
      final CommittedChangeList changeList=getChangeListAtOffset(e.offset);
      for (      Change c : changeList.getChanges()) {
        final ContentRevision beforeRevision=c.getBeforeRevision();
        if ((beforeRevision != null) && (c.getAfterRevision() == null)) {
          if (file.getIOFile().getAbsolutePath().equals(beforeRevision.getFile().getIOFile().getAbsolutePath()) || file.isUnder(beforeRevision.getFile(),false)) {
            debug("Found subsequent deletion for file " + file);
            return true;
          }
        }
 else         if ((beforeRevision != null) && (c.getAfterRevision() != null)) {
          boolean isParentReplaced=c.isIsReplaced() && (!file.equals(beforeRevision.getFile()));
          boolean isMovedRenamed=c.isMoved() || c.isRenamed();
          boolean underBefore=(isParentReplaced || isMovedRenamed) && file.isUnder(beforeRevision.getFile(),false);
          if (underBefore && isParentReplaced) {
            debug("For " + file + "some of parents is replaced: "+ beforeRevision.getFile());
            return true;
          }
 else           if (underBefore && isMovedRenamed) {
            debug("For " + file + "some of parents was renamed/moved: "+ beforeRevision.getFile());
            return true;
          }
        }
      }
      indexOffset+=INDEX_ENTRY_SIZE;
    }
  }
 catch (  IOException e) {
    LOG.error(e);
  }
  return false;
}
