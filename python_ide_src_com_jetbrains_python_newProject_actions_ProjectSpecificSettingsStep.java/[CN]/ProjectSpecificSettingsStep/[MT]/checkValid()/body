{
  myInstallFramework=false;
  if (!super.checkValid()) {
    return false;
  }
  if (myProjectGenerator instanceof PythonProjectGenerator) {
    final Sdk sdk=getSdk();
    if (sdk == null) {
      if (!((PythonProjectGenerator)myProjectGenerator).hideInterpreter()) {
        setErrorText("No Python interpreter selected");
      }
      return false;
    }
 else     if (PythonSdkType.isInvalid(sdk)) {
      setErrorText("Choose valid python interpreter");
      return false;
    }
    final List<String> warningList=new ArrayList<>();
    final boolean isPy3k=PythonSdkType.getLanguageLevelForSdk(sdk).isPy3K();
    if (PythonSdkType.isRemote(sdk) && !acceptsRemoteSdk(myProjectGenerator)) {
      setErrorText("Please choose a local interpreter");
      return false;
    }
 else     if (myProjectGenerator instanceof PyFrameworkProjectGenerator) {
      PyFrameworkProjectGenerator frameworkProjectGenerator=(PyFrameworkProjectGenerator)myProjectGenerator;
      String frameworkName=frameworkProjectGenerator.getFrameworkTitle();
      if (!isFrameworkInstalled(sdk)) {
        if (PyPackageUtil.packageManagementEnabled(sdk)) {
          warningList.add(frameworkName + " will be installed on the selected interpreter");
          myInstallFramework=true;
          final PyPackageManager packageManager=PyPackageManager.getInstance(sdk);
          boolean hasManagement=false;
          try {
            hasManagement=packageManager.hasManagement(PySdkUtil.isRemote(sdk));
          }
 catch (          ExecutionException ignored) {
          }
          if (!hasManagement) {
            warningList.add("Python packaging tools and " + warningList);
          }
        }
 else {
          warningList.add(frameworkName + " is not installed on the selected interpreter");
        }
      }
      final ValidationResult warningResult=((PythonProjectGenerator)myProjectGenerator).warningValidation(sdk);
      if (!warningResult.isOk()) {
        warningList.add(warningResult.getErrorMessage());
      }
      if (!warningList.isEmpty()) {
        final String warning=StringUtil.join(warningList,"<br/>");
        setWarningText(warning);
      }
      if (isPy3k && !((PyFrameworkProjectGenerator)myProjectGenerator).supportsPython3()) {
        setErrorText(frameworkName + " is not supported for the selected interpreter");
        return false;
      }
    }
  }
  return true;
}
