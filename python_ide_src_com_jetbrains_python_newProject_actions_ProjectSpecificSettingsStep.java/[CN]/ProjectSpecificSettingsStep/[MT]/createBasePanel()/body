{
  final JPanel panel=super.createBasePanel();
  final GridBagConstraints c=new GridBagConstraints();
  final JLabel interpreterLabel=new JLabel("Interpreter:",SwingConstants.LEFT){
    @Override public Dimension getMinimumSize(){
      return new JLabel("Project name:").getPreferredSize();
    }
    @Override public Dimension getPreferredSize(){
      return getMinimumSize();
    }
  }
;
  c.gridx=0;
  c.gridy=1;
  c.weightx=0;
  panel.add(interpreterLabel,c);
  final Project project=ProjectManager.getInstance().getDefaultProject();
  final java.util.List<Sdk> sdks=PyConfigurableInterpreterList.getInstance(project).getAllPythonSdks();
  VirtualEnvProjectFilter.removeAllAssociated(sdks);
  Sdk compatibleSdk=sdks.isEmpty() ? null : sdks.iterator().next();
  DirectoryProjectGenerator generator=getProjectGenerator();
  if (generator instanceof PyFrameworkProjectGenerator && !((PyFrameworkProjectGenerator)generator).supportsPython3()) {
    if (compatibleSdk != null && PythonSdkType.getLanguageLevelForSdk(compatibleSdk).isPy3K()) {
      Sdk python2Sdk=PythonSdkType.findPython2Sdk(sdks);
      if (python2Sdk != null) {
        compatibleSdk=python2Sdk;
      }
    }
  }
  final Sdk preferred=compatibleSdk;
  mySdkCombo=new PythonSdkChooserCombo(project,sdks,new Condition<Sdk>(){
    @Override public boolean value(    Sdk sdk){
      return sdk == preferred;
    }
  }
);
  mySdkCombo.setButtonIcon(PythonIcons.Python.InterpreterGear);
  c.gridx=1;
  c.gridy=1;
  c.weightx=1.;
  panel.add(mySdkCombo,c);
  final JPanel basePanelExtension=extendBasePanel();
  if (basePanelExtension != null) {
    c.gridwidth=2;
    c.gridy=2;
    c.gridx=0;
    panel.add(basePanelExtension,c);
  }
  return panel;
}
