{
  final MyCallState callState=new MyCallState(true,false);
  myCallState.set(callState);
  final SvnConfiguration configuration=SvnConfiguration.getInstance(myProject);
  configuration.clearCredentials(kind,realm);
  final SVNAuthentication[] result=new SVNAuthentication[1];
  Runnable command=null;
  final boolean authCredsOn=authMayBeStored && myManager.getHostOptionsProvider().getHostOptions(url).isAuthStorageEnabled();
  final String userName=previousAuth != null && previousAuth.getUserName() != null ? previousAuth.getUserName() : myManager.getDefaultUsername(kind,url);
  if (ISVNAuthenticationManager.PASSWORD.equals(kind)) {
    command=new Runnable(){
      public void run(){
        SimpleCredentialsDialog dialog=new SimpleCredentialsDialog(myProject);
        dialog.setup(realm,userName,authCredsOn);
        setTitle(dialog,errorMessage);
        if (dialog.showAndGet()) {
          result[0]=new SVNPasswordAuthentication(dialog.getUserName(),dialog.getPassword(),dialog.isSaveAllowed(),url,false);
        }
      }
    }
;
  }
 else   if (ISVNAuthenticationManager.USERNAME.equals(kind)) {
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      return new SVNUserNameAuthentication(userName,false);
    }
    command=new Runnable(){
      public void run(){
        UserNameCredentialsDialog dialog=new UserNameCredentialsDialog(myProject);
        dialog.setup(realm,userName,authCredsOn);
        setTitle(dialog,errorMessage);
        if (dialog.showAndGet()) {
          result[0]=new SVNUserNameAuthentication(dialog.getUserName(),dialog.isSaveAllowed(),url,false);
        }
      }
    }
;
  }
 else   if (ISVNAuthenticationManager.SSH.equals(kind)) {
    final Connector agentConnector=createSshAgentConnector();
    final boolean isAgentAvailable=agentConnector != null && agentConnector.isAvailable();
    command=new Runnable(){
      public void run(){
        SSHCredentialsDialog dialog=new SSHCredentialsDialog(myProject,realm,userName,authCredsOn,url.getPort(),isAgentAvailable);
        setTitle(dialog,errorMessage);
        if (dialog.showAndGet()) {
          int port=dialog.getPortNumber();
          if (dialog.isSshAgentSelected()) {
            if (agentConnector != null) {
              result[0]=new SVNSSHAuthentication(dialog.getUserName(),new TrileadAgentProxy(agentConnector),port,url,false);
            }
          }
 else           if (dialog.getKeyFile() != null && dialog.getKeyFile().trim().length() > 0) {
            String passphrase=dialog.getPassphrase();
            if (passphrase != null && passphrase.length() == 0) {
              passphrase=null;
            }
            result[0]=new SVNSSHAuthentication(dialog.getUserName(),new File(dialog.getKeyFile()),passphrase,port,dialog.isSaveAllowed(),url,false);
          }
 else {
            result[0]=new SVNSSHAuthentication(dialog.getUserName(),dialog.getPassword(),port,dialog.isSaveAllowed(),url,false);
          }
        }
      }
    }
;
  }
 else   if (ISVNAuthenticationManager.SSL.equals(kind)) {
    command=new Runnable(){
      public void run(){
        final ISVNHostOptions options=myManager.getHostOptionsProvider().getHostOptions(url);
        final String file=options.getSSLClientCertFile();
        final SSLCredentialsDialog dialog=new SSLCredentialsDialog(myProject,realm,authCredsOn);
        if (!StringUtil.isEmptyOrSpaces(file)) {
          dialog.setFile(file);
        }
        setTitle(dialog,errorMessage);
        if (dialog.showAndGet()) {
          result[0]=new SVNSSLAuthentication(new File(dialog.getCertificatePath()),String.valueOf(dialog.getCertificatePassword()),dialog.getSaveAuth(),url,false);
        }
      }
    }
;
  }
  if (command != null) {
    showAndWait(command);
    log("3 authentication result: " + result[0]);
  }
  final boolean wasCanceled=result[0] == null;
  callState.setWasCancelled(wasCanceled);
  myManager.requested(ProviderType.interactive,url,realm,kind,wasCanceled);
  return result[0];
}
