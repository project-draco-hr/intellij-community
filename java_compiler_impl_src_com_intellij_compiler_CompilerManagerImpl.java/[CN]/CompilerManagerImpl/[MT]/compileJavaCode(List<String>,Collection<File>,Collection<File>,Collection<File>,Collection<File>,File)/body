{
  final Pair<Sdk,JavaSdkVersion> runtime=BuildManager.getBuildProcessRuntimeSdk(myProject);
  String javaHome=null;
  final Sdk sdk=runtime.getFirst();
  final SdkTypeId type=sdk.getSdkType();
  if (type instanceof JavaSdkType) {
    javaHome=sdk.getHomePath();
  }
  if (javaHome == null) {
    throw new IOException("Was not able to determine JDK for project " + myProject.getName());
  }
  final OutputCollector outputCollector=new OutputCollector();
  DiagnosticCollector diagnostic=new DiagnosticCollector();
  final Set<File> sourceRoots=new THashSet<>(FileUtil.FILE_HASHING_STRATEGY);
  if (!sourcePath.isEmpty()) {
    for (    File file : sourcePath) {
      sourceRoots.add(file);
    }
  }
 else {
    for (    File file : files) {
      final File parentFile=file.getParentFile();
      if (parentFile != null) {
        sourceRoots.add(parentFile);
      }
    }
  }
  final Map<File,Set<File>> outs=Collections.singletonMap(outputDir,sourceRoots);
  final ExternalJavacManager javacManager=getJavacManager();
  boolean compiledOk=javacManager != null && javacManager.forkJavac(javaHome,-1,Collections.<String>emptyList(),options,platformCp,classpath,sourcePath,files,outs,diagnostic,outputCollector,new JavacCompilerTool(),CanceledStatus.NULL);
  if (!compiledOk) {
    final List<CompilationException.Message> messages=new SmartList<>();
    for (    Diagnostic<? extends JavaFileObject> d : diagnostic.getDiagnostics()) {
      final JavaFileObject source=d.getSource();
      final URI uri=source != null ? source.toUri() : null;
      messages.add(new CompilationException.Message(kindToCategory(d.getKind()),d.getMessage(Locale.US),uri != null ? uri.toURL().toString() : null,(int)d.getLineNumber(),(int)d.getColumnNumber()));
    }
    throw new CompilationException("Compilation failed",messages);
  }
  final List<ClassObject> result=new ArrayList<>();
  for (  OutputFileObject fileObject : outputCollector.getCompiledClasses()) {
    final BinaryContent content=fileObject.getContent();
    result.add(new CompiledClass(fileObject.getName(),fileObject.getClassName(),content != null ? content.toByteArray() : null));
  }
  return result;
}
