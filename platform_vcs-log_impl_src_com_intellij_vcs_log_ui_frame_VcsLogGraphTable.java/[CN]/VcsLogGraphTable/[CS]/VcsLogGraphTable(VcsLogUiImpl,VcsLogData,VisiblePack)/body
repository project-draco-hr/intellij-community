{
  super(new GraphTableModel(initialDataPack,logData,ui));
  getEmptyText().setText("Changes Log");
  myUi=ui;
  myLogData=logData;
  GraphCellPainter graphCellPainter=new SimpleGraphCellPainter(new DefaultColorGenerator()){
    @Override protected int getRowHeight(){
      return VcsLogGraphTable.this.getRowHeight();
    }
  }
;
  myGraphCommitCellRenderer=new GraphCommitCellRenderer(logData,graphCellPainter,this);
  myStringCellRenderer=new StringCellRenderer();
  myLogData.getProgress().addProgressIndicatorListener(new MyProgressListener(),ui);
  setDefaultRenderer(VirtualFile.class,new RootCellRenderer(myUi));
  setDefaultRenderer(GraphCommitCell.class,myGraphCommitCellRenderer);
  setDefaultRenderer(String.class,myStringCellRenderer);
  setShowHorizontalLines(false);
  setIntercellSpacing(JBUI.emptySize());
  setTableHeader(new InvisibleResizableHeader());
  myController=new GraphTableController(this,ui,logData,graphCellPainter,myGraphCommitCellRenderer);
  getSelectionModel().addListSelectionListener(new MyListSelectionListener());
  getColumnModel().setColumnSelectionAllowed(false);
  PopupHandler.installPopupHandler(this,VcsLogActionPlaces.POPUP_ACTION_GROUP,VcsLogActionPlaces.VCS_LOG_TABLE_PLACE);
  ScrollingUtil.installActions(this,false);
  initColumnSize();
  addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      updateCommitColumnWidth();
    }
  }
);
}
