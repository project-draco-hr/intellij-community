{
  final Task task=studyState.getTask();
  final VirtualFile taskDir=studyState.getTaskDir();
  final StudyTaskManager taskManager=StudyTaskManager.getInstance(project);
  final StudyStatus statusBeforeCheck=taskManager.getStatus(task);
  return new com.intellij.openapi.progress.Task.Backgroundable(project,"Checking task",true){
    @Override public void onSuccess(){
      StudyUtils.updateToolWindows(project);
      drawAllPlaceholders(project,task,taskDir);
      ProjectView.getInstance(project).refresh();
      EduUtils.deleteWindowDescriptions(task,taskDir);
      checkInProgress=false;
    }
    @Override public void onCancel(){
      taskManager.setStatus(task,statusBeforeCheck);
      EduUtils.deleteWindowDescriptions(task,taskDir);
      checkInProgress=false;
    }
    @Override public void run(    @NotNull ProgressIndicator indicator){
      final Map<String,TaskFile> taskFiles=task.getTaskFiles();
      final CapturingProcessHandler handler=new CapturingProcessHandler(testProcess);
      final ProcessOutput output=handler.runProcessWithProgressIndicator(indicator);
      if (indicator.isCanceled()) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            showTestResultPopUp("Tests check cancelled.",MessageType.WARNING.getPopupBackground(),project);
          }
        }
);
        return;
      }
      final StudyTestRunner.TestsOutput testsOutput=testRunner.getTestsOutput(output);
      final StudySettings studySettings=StudySettings.getInstance();
      final String login=studySettings.getLogin();
      final String password=StringUtil.isEmptyOrSpaces(login) ? "" : studySettings.getPassword();
      if (testsOutput.isSuccess()) {
        taskManager.setStatus(task,StudyStatus.Solved);
        EduStepicConnector.postAttempt(task,true,login,password);
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            showTestResultPopUp(testsOutput.getMessage(),MessageType.INFO.getPopupBackground(),project);
          }
        }
);
      }
 else {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            if (taskDir == null)             return;
            EduStepicConnector.postAttempt(task,false,login,password);
            taskManager.setStatus(task,StudyStatus.Failed);
            for (            Map.Entry<String,TaskFile> entry : taskFiles.entrySet()) {
              final String name=entry.getKey();
              final TaskFile taskFile=entry.getValue();
              if (taskFile.getAnswerPlaceholders().size() < 2) {
                taskManager.setStatus(taskFile,StudyStatus.Failed);
                continue;
              }
              CommandProcessor.getInstance().runUndoTransparentAction(new Runnable(){
                @Override public void run(){
                  ApplicationManager.getApplication().runWriteAction(new Runnable(){
                    @Override public void run(){
                      runSmartTestProcess(taskDir,testRunner,name,taskFile,project);
                    }
                  }
);
                }
              }
);
            }
            showTestResultPopUp(testsOutput.getMessage(),MessageType.ERROR.getPopupBackground(),project);
            navigateToFailedPlaceholder(studyState,task,taskDir,project);
          }
        }
);
      }
    }
  }
;
}
