{
  @SuppressWarnings({"unchecked"}) final LookupElement delegate=item.getDelegate();
  PsiClass psiClass=(PsiClass)item.getObject();
  boolean isAbstract=psiClass.hasModifierProperty(PsiModifier.ABSTRACT);
  if (Lookup.REPLACE_SELECT_CHAR == context.getCompletionChar() && context.getOffsetMap().containsOffset(PARAM_LIST_START)) {
    final int plStart=context.getOffset(PARAM_LIST_START);
    final int plEnd=context.getOffset(PARAM_LIST_END);
    if (plStart >= 0 && plEnd >= 0) {
      context.getDocument().deleteString(plStart,plEnd);
    }
  }
  context.commitDocument();
  OffsetKey insideRef=context.trackOffset(context.getTailOffset(),false);
  final PsiElement position=SmartCompletionDecorator.getPosition(context,delegate);
  if (position == null)   return;
  final PsiExpression enclosing=PsiTreeUtil.getContextOfType(position,PsiExpression.class,true);
  final PsiAnonymousClass anonymousClass=PsiTreeUtil.getParentOfType(position,PsiAnonymousClass.class);
  final boolean inAnonymous=anonymousClass != null && anonymousClass.getParent() == enclosing;
  if (delegate instanceof PsiTypeLookupItem) {
    if (context.getDocument().getTextLength() > context.getTailOffset() && context.getDocument().getCharsSequence().charAt(context.getTailOffset()) == '<') {
      PsiJavaCodeReferenceElement ref=PsiTreeUtil.findElementOfClassAtOffset(context.getFile(),context.getTailOffset(),PsiJavaCodeReferenceElement.class,false);
      if (ref != null) {
        PsiReferenceParameterList parameterList=ref.getParameterList();
        if (parameterList != null && context.getTailOffset() == parameterList.getTextRange().getStartOffset()) {
          context.getDocument().deleteString(parameterList.getTextRange().getStartOffset(),parameterList.getTextRange().getEndOffset());
          context.commitDocument();
        }
      }
    }
    delegate.handleInsert(context);
    PostprocessReformattingAspect.getInstance(context.getProject()).doPostponedFormatting(context.getFile().getViewProvider());
  }
  if (item.getDelegate() instanceof JavaPsiClassReferenceElement) {
    PsiTypeLookupItem.addImportForItem(context,psiClass);
  }
  insertParentheses(context,delegate,psiClass,!inAnonymous && isAbstract);
  if (inAnonymous) {
    return;
  }
  if (mySmart) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.AFTER_NEW);
  }
  if (isAbstract) {
    PostprocessReformattingAspect.getInstance(context.getProject()).doPostponedFormatting(context.getFile().getViewProvider());
    final Editor editor=context.getEditor();
    final Document document=editor.getDocument();
    final int offset=context.getTailOffset();
    document.insertString(offset," {}");
    OffsetKey insideBraces=context.trackOffset(offset + 2,true);
    final PsiFile file=context.getFile();
    PsiDocumentManager.getInstance(file.getProject()).commitDocument(document);
    reformatEnclosingExpressionListAtOffset(file,offset);
    if (promptTypeOrConstructorArgs(context,delegate,context.getOffset(insideRef)))     return;
    editor.getCaretModel().moveToOffset(context.getOffset(insideBraces));
    context.setLaterRunnable(generateAnonymousBody(editor,file));
  }
 else {
    PsiDocumentManager.getInstance(context.getProject()).commitAllDocuments();
    final PsiNewExpression newExpression=PsiTreeUtil.findElementOfClassAtOffset(context.getFile(),context.getStartOffset(),PsiNewExpression.class,false);
    if (newExpression != null) {
      final PsiJavaCodeReferenceElement classReference=newExpression.getClassOrAnonymousClassReference();
      if (classReference != null) {
        CodeStyleManager.getInstance(context.getProject()).reformat(classReference);
      }
    }
    if (mySmart) {
      FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.AFTER_NEW);
    }
    promptTypeOrConstructorArgs(context,delegate,context.getOffset(insideRef));
  }
}
