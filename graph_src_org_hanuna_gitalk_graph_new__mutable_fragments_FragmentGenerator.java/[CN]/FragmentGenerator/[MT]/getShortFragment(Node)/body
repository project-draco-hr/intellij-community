{
  if (startNode.getType() != Node.Type.COMMIT_NODE) {
    throw new IllegalArgumentException("small fragment may start only with COMMIT_NODE, but this node is: " + startNode);
  }
  Set<Node> upNodes=new HashSet<Node>();
  upNodes.add(startNode);
  Set<Node> notAddedNodes=new HashSet<Node>();
  addDownNodeToSet(notAddedNodes,startNode);
  Node endNode=null;
  int startRowIndex=startNode.getRowIndex() + 1;
  int lastIndex=graph.getNodeRows().size() - 1;
  boolean isEnd=false;
  for (int currentRowIndex=startRowIndex; currentRowIndex <= lastIndex && !isEnd; currentRowIndex++) {
    for (    Node node : graph.getNodeRows().get(currentRowIndex).getNodes()) {
      if (notAddedNodes.remove(node)) {
        if (notAddedNodes.isEmpty() && node.getType() == Node.Type.COMMIT_NODE) {
          if (allUpNodeHere(upNodes,node)) {
            endNode=node;
          }
          isEnd=true;
          break;
        }
 else {
          if (!allUpNodeHere(upNodes,node) || unhiddenNodes.contains(node)) {
            isEnd=true;
          }
          upNodes.add(node);
          addDownNodeToSet(notAddedNodes,node);
        }
      }
    }
  }
  if (endNode == null) {
    return null;
  }
 else {
    upNodes.remove(startNode);
    return new SimpleGraphFragment(startNode,endNode,upNodes);
  }
}
