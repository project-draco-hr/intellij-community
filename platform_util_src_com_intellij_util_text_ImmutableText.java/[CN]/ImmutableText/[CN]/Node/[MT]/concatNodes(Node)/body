{
  final int length=this.nodeLength() + that.nodeLength();
  if (length <= BLOCK_SIZE) {
    char[] chars=new char[length];
    this.getChars(0,this.nodeLength(),chars,0);
    that.getChars(0,that.nodeLength(),chars,this.nodeLength());
    return new LeafNode(chars);
  }
 else {
    Node head=this;
    Node tail=that;
    if (((head.nodeLength() << 1) < tail.nodeLength()) && tail instanceof CompositeNode) {
      if (((CompositeNode)tail)._head.nodeLength() > ((CompositeNode)tail)._tail.nodeLength()) {
        tail=((CompositeNode)tail).rightRotation();
      }
      head=head.concatNodes(((CompositeNode)tail)._head);
      tail=((CompositeNode)tail)._tail;
    }
 else     if (((tail.nodeLength() << 1) < head.nodeLength()) && head instanceof CompositeNode) {
      if (((CompositeNode)head)._tail.nodeLength() > ((CompositeNode)head)._head.nodeLength()) {
        head=((CompositeNode)head).leftRotation();
      }
      tail=((CompositeNode)head)._tail.concatNodes(tail);
      head=((CompositeNode)head)._head;
    }
    return new CompositeNode(head,tail);
  }
}
