{
  final int length=node1.nodeLength() + node2.nodeLength();
  if (length <= BLOCK_SIZE) {
    char[] chars=new char[length];
    node1.getChars(0,node1.nodeLength(),chars,0);
    node2.getChars(0,node2.nodeLength(),chars,node1.nodeLength());
    return createLeafNode(chars);
  }
 else {
    Node head=node1;
    Node tail=node2;
    if (((head.nodeLength() << 1) < tail.nodeLength()) && tail instanceof CompositeNode) {
      if (((CompositeNode)tail).head.nodeLength() > ((CompositeNode)tail).tail.nodeLength()) {
        tail=((CompositeNode)tail).rightRotation();
      }
      head=concatNodes(head,((CompositeNode)tail).head);
      tail=((CompositeNode)tail).tail;
    }
 else     if (((tail.nodeLength() << 1) < head.nodeLength()) && head instanceof CompositeNode) {
      if (((CompositeNode)head).tail.nodeLength() > ((CompositeNode)head).head.nodeLength()) {
        head=((CompositeNode)head).leftRotation();
      }
      tail=concatNodes(((CompositeNode)head).tail,tail);
      head=((CompositeNode)head).head;
    }
    return new CompositeNode(head,tail);
  }
}
