{
  message.append(RefactoringBundle.message("multiple.directories.correspond.to.package"));
  message.append(packageQname);
  message.append(":\n\n");
  final List<PsiDirectory> generated=new ArrayList<PsiDirectory>();
  final List<PsiDirectory> source=new ArrayList<PsiDirectory>();
  for (  PsiDirectory directory : directories) {
    final VirtualFile virtualFile=directory.getVirtualFile();
    if (GeneratedSourcesFilter.isGeneratedSourceByAnyFilter(virtualFile,directory.getProject())) {
      generated.add(directory);
    }
 else {
      source.add(directory);
    }
  }
  final Function<PsiDirectory,String> directoryPresentation=new Function<PsiDirectory,String>(){
    @Override public String fun(    PsiDirectory directory){
      return directory.getVirtualFile().getPresentableUrl();
    }
  }
;
  message.append(StringUtil.join(source,directoryPresentation,"\n"));
  if (!generated.isEmpty()) {
    message.append("\n\nalso generated:\n");
    message.append(StringUtil.join(generated,directoryPresentation,"\n"));
  }
}
