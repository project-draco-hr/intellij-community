{
  if (start == stop)   return false;
  final TIntArrayList list=new TIntArrayList();
  depthFirstSearch(flow,new InstructionClientVisitor<Void>(){
    @Override public void visitInstruction(    Instruction instruction,    int offset,    int nextOffset){
      list.add(offset);
      list.add(nextOffset);
    }
    @Override public Void getResult(){
      return null;
    }
  }
,start,flow.getSize());
  BitSet violated=new BitSet();
  List<Instruction> instructions=flow.getInstructions();
  boolean changed=true;
  while (changed) {
    changed=false;
    for (int i=list.size() - 2; i >= 0; i-=2) {
      int from=list.get(i);
      int to=list.get(i + 1);
      if (from == stop)       continue;
      if (violated.get(from)) {
        if (!violated.get(to)) {
          if (to == stop)           return true;
          violated.set(to);
          changed=true;
        }
        continue;
      }
      Instruction instruction=instructions.get(from);
      if ((instruction instanceof ReadVariableInstruction && ((ReadVariableInstruction)instruction).variable == variable) || (instruction instanceof WriteVariableInstruction && ((WriteVariableInstruction)instruction).variable == variable)) {
        violated.set(from);
        violated.set(to);
        if (to == stop)         return true;
        changed=true;
      }
    }
  }
  return false;
}
