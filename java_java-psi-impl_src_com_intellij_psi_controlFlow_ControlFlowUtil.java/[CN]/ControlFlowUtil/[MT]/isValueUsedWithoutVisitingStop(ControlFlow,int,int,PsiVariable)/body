{
  if (start == stop)   return false;
class MyVisitor extends InstructionClientVisitor<Boolean> {
    final boolean[] maybeReferenced=new boolean[flow.getSize() + 1];
    @Override public void visitInstruction(    Instruction instruction,    int offset,    int nextOffset){
      if (offset == stop) {
        maybeReferenced[offset]=false;
        return;
      }
      if (instruction instanceof WriteVariableInstruction && ((WriteVariableInstruction)instruction).variable == variable) {
        maybeReferenced[offset]=false;
        return;
      }
      if (maybeReferenced[offset])       return;
      if (nextOffset > flow.getSize())       nextOffset=flow.getSize();
      boolean nextState=maybeReferenced[nextOffset];
      maybeReferenced[offset]=nextState || (instruction instanceof ReadVariableInstruction && ((ReadVariableInstruction)instruction).variable == variable);
    }
    @Override public Boolean getResult(){
      return maybeReferenced[start];
    }
  }
  MyVisitor visitor=new MyVisitor();
  depthFirstSearch(flow,visitor,start,flow.getSize());
  return visitor.getResult().booleanValue();
}
