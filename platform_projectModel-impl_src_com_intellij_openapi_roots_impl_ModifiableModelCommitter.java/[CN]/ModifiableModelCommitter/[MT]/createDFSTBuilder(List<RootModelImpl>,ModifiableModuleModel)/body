{
  final Map<String,RootModelImpl> nameToModel=ContainerUtil.newHashMap();
  for (  RootModelImpl rootModel : rootModels) {
    String name=rootModel.getModule().getName();
    LOG.assertTrue(!nameToModel.containsKey(name),name);
    nameToModel.put(name,rootModel);
  }
  Module[] modules=moduleModel.getModules();
  for (  Module module : modules) {
    String name=module.getName();
    if (!nameToModel.containsKey(name)) {
      RootModelImpl rootModel=((ModuleRootManagerImpl)ModuleRootManager.getInstance(module)).getRootModel();
      nameToModel.put(name,rootModel);
    }
  }
  final Collection<RootModelImpl> allRootModels=nameToModel.values();
  GraphGenerator.SemiGraph<RootModelImpl> graph=new GraphGenerator.SemiGraph<RootModelImpl>(){
    @Override public Collection<RootModelImpl> getNodes(){
      return allRootModels;
    }
    @Override public Iterator<RootModelImpl> getIn(    RootModelImpl rootModel){
      OrderEnumerator entries=rootModel.orderEntries().withoutSdk().withoutLibraries().withoutModuleSourceEntries();
      List<String> namesList=entries.process(new RootPolicy<List<String>>(){
        @Override public List<String> visitModuleOrderEntry(        ModuleOrderEntry moduleOrderEntry,        List<String> strings){
          Module module=moduleOrderEntry.getModule();
          if (module != null && !module.isDisposed()) {
            strings.add(module.getName());
          }
 else {
            final Module moduleToBeRenamed=moduleModel.getModuleToBeRenamed(moduleOrderEntry.getModuleName());
            if (moduleToBeRenamed != null && !moduleToBeRenamed.isDisposed()) {
              strings.add(moduleToBeRenamed.getName());
            }
          }
          return strings;
        }
      }
,new ArrayList<>());
      String[] names=ArrayUtil.toStringArray(namesList);
      List<RootModelImpl> result=new ArrayList<>();
      for (      String name : names) {
        RootModelImpl depRootModel=nameToModel.get(name);
        if (depRootModel != null) {
          result.add(depRootModel);
        }
      }
      return result.iterator();
    }
  }
;
  return new DFSTBuilder<>(new GraphGenerator<>(new CachingSemiGraph<>(graph)));
}
