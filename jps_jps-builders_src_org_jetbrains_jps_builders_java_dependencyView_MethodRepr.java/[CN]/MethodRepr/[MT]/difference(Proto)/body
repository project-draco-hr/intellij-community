{
  final MethodRepr m=(MethodRepr)past;
  final Difference diff=super.difference(past);
  final Difference.Specifier<TypeRepr.AbstractType,Difference> excs=Difference.make(m.myExceptions,myExceptions);
  final Difference.Specifier<ParamAnnotation,Difference> paramAnnotations=Difference.make(m.myParameterAnnotations,myParameterAnnotations);
  return new Diff(){
    @Override public Specifier<TypeRepr.ClassType,Difference> annotations(){
      return diff.annotations();
    }
    @Override public Specifier<ParamAnnotation,Difference> parameterAnnotations(){
      return paramAnnotations;
    }
    @Override public int addedModifiers(){
      return diff.addedModifiers();
    }
    @Override public int removedModifiers(){
      return diff.removedModifiers();
    }
    @Override public boolean no(){
      return base() == NONE && !defaultAdded() && !defaultRemoved() && excs.unchanged() && paramAnnotations.unchanged();
    }
    @Override public boolean defaultAdded(){
      return hasValue() && !m.hasValue();
    }
    @Override public boolean defaultRemoved(){
      return !hasValue() && m.hasValue();
    }
    @Override public Specifier<TypeRepr.AbstractType,Difference> exceptions(){
      return excs;
    }
    @Override public int base(){
      final int base=diff.base();
      return paramAnnotations.unchanged() ? base : base | Difference.ANNOTATIONS;
    }
    @Override public boolean packageLocalOn(){
      return diff.packageLocalOn();
    }
    @Override public boolean hadValue(){
      return m.hasValue();
    }
    @Override public boolean weakedAccess(){
      return diff.weakedAccess();
    }
  }
;
}
