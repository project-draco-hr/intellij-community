{
  super(context,in);
  try {
    final DataExternalizer<TypeRepr.AbstractType> externalizer=TypeRepr.externalizer(context);
    final int size=DataInputOutputUtil.readINT(in);
    myArgumentTypes=RW.read(externalizer,in,new TypeRepr.AbstractType[size]);
    myExceptions=(Set<TypeRepr.AbstractType>)RW.read(externalizer,new THashSet<TypeRepr.AbstractType>(0),in);
    final DataExternalizer<TypeRepr.ClassType> clsTypeExternalizer=TypeRepr.classTypeExternalizer(context);
    myParameterAnnotations=(Set<ParamAnnotation>)RW.read(new DataExternalizer<ParamAnnotation>(){
      @Override public void save(      @NotNull DataOutput out,      ParamAnnotation value) throws IOException {
        value.save(out);
      }
      @Override public ParamAnnotation read(      @NotNull DataInput in) throws IOException {
        return new ParamAnnotation(clsTypeExternalizer,in);
      }
    }
,new THashSet<ParamAnnotation>(),in);
  }
 catch (  IOException e) {
    throw new BuildDataCorruptedException(e);
  }
}
