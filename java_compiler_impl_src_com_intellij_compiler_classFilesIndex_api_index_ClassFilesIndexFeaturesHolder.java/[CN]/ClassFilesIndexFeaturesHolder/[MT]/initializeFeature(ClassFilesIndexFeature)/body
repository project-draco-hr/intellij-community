{
  if (myEnabledFeatures.containsKey(feature)) {
    throw new IllegalStateException(String.format("feature %s already contains",feature.getKey()));
  }
  final Map<MethodsUsageIndexConfigure,ClassFilesIndexReaderBase> newIndices=new HashMap<MethodsUsageIndexConfigure,ClassFilesIndexReaderBase>();
  FeatureState newFeatureState=FeatureState.AVAILABLE;
  for (  final MethodsUsageIndexConfigure requiredConfigure : feature.getRequiredIndicesConfigures()) {
    boolean isIndexAlreadyLoaded=false;
    for (    final ClassFilesIndexFeature enabledFeature : myEnabledFeatures.keySet()) {
      if (enabledFeature.getRequiredIndicesConfigures().contains(requiredConfigure)) {
        isIndexAlreadyLoaded=true;
        break;
      }
    }
    if (!isIndexAlreadyLoaded) {
      final ClassFilesIndexReaderBase reader=requiredConfigure.createIndexReader(myProject);
      newIndices.put(requiredConfigure,reader);
      if (reader.isEmpty()) {
        newFeatureState=FeatureState.NOT_AVAILABLE;
      }
    }
  }
  myEnabledIndexReaders.putAll(newIndices);
  myEnabledFeatures.put(feature,newFeatureState);
  return newFeatureState;
}
