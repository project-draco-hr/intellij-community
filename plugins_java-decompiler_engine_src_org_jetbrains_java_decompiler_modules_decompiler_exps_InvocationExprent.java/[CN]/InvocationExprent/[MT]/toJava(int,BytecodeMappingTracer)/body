{
  TextBuffer buf=new TextBuffer();
  String super_qualifier=null;
  boolean isInstanceThis=false;
  tracer.addMapping(bytecode);
  if (isStatic) {
    ClassNode node=(ClassNode)DecompilerContext.getProperty(DecompilerContext.CURRENT_CLASS_NODE);
    if (node == null || !classname.equals(node.classStruct.qualifiedName)) {
      buf.append(DecompilerContext.getImportCollector().getShortName(ExprProcessor.buildJavaClassName(classname)));
    }
  }
 else {
    if (instance != null && instance.type == Exprent.EXPRENT_VAR) {
      VarExprent instvar=(VarExprent)instance;
      VarVersionPair varpaar=new VarVersionPair(instvar);
      VarProcessor vproc=instvar.getProcessor();
      if (vproc == null) {
        MethodWrapper current_meth=(MethodWrapper)DecompilerContext.getProperty(DecompilerContext.CURRENT_METHOD_WRAPPER);
        if (current_meth != null) {
          vproc=current_meth.varproc;
        }
      }
      String this_classname=null;
      if (vproc != null) {
        this_classname=vproc.getThisVars().get(varpaar);
      }
      if (this_classname != null) {
        isInstanceThis=true;
        if (invocationTyp == INVOKE_SPECIAL) {
          if (!classname.equals(this_classname)) {
            super_qualifier=this_classname;
          }
        }
      }
    }
    if (functype == TYP_GENERAL) {
      if (super_qualifier != null) {
        TextUtil.writeQualifiedSuper(buf,super_qualifier);
      }
 else       if (instance != null) {
        TextBuffer res=instance.toJava(indent,tracer);
        VarType rightType=instance.getExprType();
        VarType leftType=new VarType(CodeConstants.TYPE_OBJECT,0,classname);
        if (rightType.equals(VarType.VARTYPE_OBJECT) && !leftType.equals(rightType)) {
          buf.append("((").append(ExprProcessor.getCastTypeName(leftType)).append(")");
          if (instance.getPrecedence() >= FunctionExprent.getPrecedence(FunctionExprent.FUNCTION_CAST)) {
            res.enclose("(",")");
          }
          buf.append(res).append(")");
        }
 else         if (instance.getPrecedence() > getPrecedence()) {
          buf.append("(").append(res).append(")");
        }
 else {
          buf.append(res);
        }
      }
    }
  }
switch (functype) {
case TYP_GENERAL:
    if (VarExprent.VAR_NAMELESS_ENCLOSURE.equals(buf.toString())) {
      buf=new TextBuffer();
    }
  if (buf.length() > 0) {
    buf.append(".");
  }
buf.append(name);
if (invocationTyp == INVOKE_DYNAMIC) {
buf.append("<invokedynamic>");
}
buf.append("(");
break;
case TYP_CLINIT:
throw new RuntimeException("Explicit invocation of <clinit>");
case TYP_INIT:
if (super_qualifier != null) {
buf.append("super(");
}
 else if (isInstanceThis) {
buf.append("this(");
}
 else {
throw new RuntimeException("Unrecognized invocation of <init>");
}
}
List<VarVersionPair> sigFields=null;
boolean isEnum=false;
if (functype == TYP_INIT) {
ClassNode newNode=DecompilerContext.getClassProcessor().getMapRootClasses().get(classname);
if (newNode != null) {
if (newNode.wrapper != null) {
sigFields=newNode.wrapper.getMethodWrapper("<init>",stringDescriptor).signatureFields;
}
 else {
if (newNode.type == ClassNode.CLASS_MEMBER && (newNode.access & CodeConstants.ACC_STATIC) == 0) {
sigFields=new ArrayList<VarVersionPair>(Collections.nCopies(lstParameters.size(),(VarVersionPair)null));
sigFields.set(0,new VarVersionPair(-1,0));
}
}
isEnum=newNode.classStruct.hasModifier(CodeConstants.ACC_ENUM) && DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_ENUM);
}
}
BitSet setAmbiguousParameters=getAmbiguousParameters();
boolean firstParameter=true;
int start=isEnum ? 2 : 0;
for (int i=start; i < lstParameters.size(); i++) {
if (sigFields == null) {
if (!firstParameter) {
buf.append(", ");
}
TextBuffer buff=new TextBuffer();
boolean ambiguous=setAmbiguousParameters.get(i);
ExprProcessor.getCastedExprent(lstParameters.get(i),descriptor.params[i],buff,indent,true,ambiguous,tracer);
buf.append(buff);
firstParameter=false;
}
}
buf.append(")");
return buf;
}
