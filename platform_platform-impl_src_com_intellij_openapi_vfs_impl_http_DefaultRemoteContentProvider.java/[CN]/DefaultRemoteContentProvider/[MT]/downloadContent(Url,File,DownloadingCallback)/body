{
  LOG.debug("Downloading started: " + url);
  final String presentableUrl=StringUtil.trimMiddle(url.trimParameters().toDecodedForm(),40);
  callback.setProgressText(VfsBundle.message("download.progress.connecting",presentableUrl),true);
  try {
    HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).productNameAsUserAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>(){
      @Override public Object process(      @NotNull HttpRequests.Request request) throws IOException {
        if (!request.isSuccessful()) {
          throw new IOException(IdeBundle.message("error.connection.failed.with.http.code.N",((HttpURLConnection)request.getConnection()).getResponseCode()));
        }
        int size=request.getConnection().getContentLength();
        callback.setProgressText(VfsBundle.message("download.progress.downloading",presentableUrl),size == -1);
        request.saveToFile(file,new AbstractProgressIndicatorExBase(){
          @Override public void setFraction(          double fraction){
            callback.setProgressFraction(0);
          }
        }
);
        FileType fileType=RemoteFileUtil.getFileType(request.getConnection().getContentType());
        if (fileType == FileTypes.PLAIN_TEXT) {
          FileType fileTypeByFileName=FileTypeRegistry.getInstance().getFileTypeByFileName(PathUtilRt.getFileName(url.getPath()));
          if (fileTypeByFileName != FileTypes.UNKNOWN) {
            fileType=fileTypeByFileName;
          }
        }
        LOG.debug("Downloading finished, " + size + " bytes downloaded");
        callback.finished(fileType);
        return null;
      }
    }
);
  }
 catch (  IOException e) {
    LOG.info(e);
    callback.errorOccurred(VfsBundle.message("cannot.load.remote.file",url,e.getMessage()),false);
  }
}
