{
  LOG.debug("Downloading started: " + url);
  final String presentableUrl=StringUtil.trimMiddle(url.trimParameters().toDecodedForm(),40);
  callback.setProgressText(VfsBundle.message("download.progress.connecting",presentableUrl),true);
  try {
    HttpRequests.request(url.toExternalForm()).connectTimeout(60 * 1000).userAgent().hostNameVerifier(CertificateManager.HOSTNAME_VERIFIER).connect(new HttpRequests.RequestProcessor<Object>(){
      @Override public Object process(      @NotNull HttpRequests.Request request) throws IOException {
        HttpURLConnection connection=(HttpURLConnection)request.getConnection();
        int responseCode=connection.getResponseCode();
        if (responseCode != HttpURLConnection.HTTP_OK) {
          throw new IOException(IdeBundle.message("error.connection.failed.with.http.code.N",responseCode));
        }
        int size=connection.getContentLength();
        OutputStream output=new BufferedOutputStream(new FileOutputStream(file));
        try {
          callback.setProgressText(VfsBundle.message("download.progress.downloading",presentableUrl),size == -1);
          if (size != -1) {
            callback.setProgressFraction(0);
          }
          int count;
          byte[] buf=new byte[4096];
          int total=0;
          while ((count=request.getInputStream().read(buf)) > 0) {
            if (callback.isCancelled()) {
              return null;
            }
            total+=count;
            if (size > 0) {
              callback.setProgressFraction((double)total / size);
            }
            output.write(buf,0,count);
          }
        }
  finally {
          output.close();
        }
        FileType fileType=RemoteFileUtil.getFileType(connection.getContentType());
        if (fileType == FileTypes.PLAIN_TEXT) {
          FileType fileTypeByFileName=FileTypeRegistry.getInstance().getFileTypeByFileName(PathUtilRt.getFileName(url.getPath()));
          if (fileTypeByFileName != FileTypes.UNKNOWN) {
            fileType=fileTypeByFileName;
          }
        }
        LOG.debug("Downloading finished, " + size + " bytes downloaded");
        callback.finished(fileType);
        return null;
      }
    }
);
  }
 catch (  IOException e) {
    LOG.info(e);
    callback.errorOccurred(VfsBundle.message("cannot.load.remote.file",url,e.getMessage()),false);
  }
}
