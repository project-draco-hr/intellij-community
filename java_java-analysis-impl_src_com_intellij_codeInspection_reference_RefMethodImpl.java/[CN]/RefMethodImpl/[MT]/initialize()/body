{
  final PsiMethod method=(PsiMethod)getElement();
  LOG.assertTrue(method != null);
  setConstructor(method.isConstructor());
  final PsiType returnType=method.getReturnType();
  setFlag(returnType == null || PsiType.VOID.equals(returnType) || returnType.equalsToText(CommonClassNames.JAVA_LANG_VOID),IS_RETURN_VALUE_USED_MASK);
  if (!isReturnValueUsed()) {
    myReturnValueTemplate=RETURN_VALUE_UNDEFINED;
  }
  if (isConstructor()) {
    addReference(getOwnerClass(),getOwnerClass().getElement(),method,false,true,null);
  }
  if (getOwnerClass().isInterface()) {
    setAbstract(false);
  }
 else {
    setAbstract(method.hasModifierProperty(PsiModifier.ABSTRACT));
  }
  setAppMain(isAppMain(method,this));
  setLibraryOverride(method.hasModifierProperty(PsiModifier.NATIVE));
  initializeSuperMethods(method);
  if (isExternalOverride()) {
    ((RefClassImpl)getOwnerClass()).addLibraryOverrideMethod(this);
  }
  PsiParameter[] paramList=method.getParameterList().getParameters();
  if (paramList.length > 0) {
    myParameters=new RefParameterImpl[paramList.length];
    for (int i=0; i < paramList.length; i++) {
      PsiParameter parameter=paramList[i];
      myParameters[i]=getRefJavaManager().getParameterReference(parameter,i);
    }
  }
  if (method.hasModifierProperty(PsiModifier.NATIVE)) {
    updateReturnValueTemplate(null);
    updateThrowsList(null);
  }
  collectUncaughtExceptions(method);
}
