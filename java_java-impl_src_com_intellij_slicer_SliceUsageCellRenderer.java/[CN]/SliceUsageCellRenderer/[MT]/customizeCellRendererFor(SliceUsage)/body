{
  boolean isForcedLeaf=sliceUsage instanceof SliceDereferenceUsage;
  TextChunk[] text=sliceUsage.getText();
  final List<TextRange> usageRanges=new SmartList<TextRange>();
  sliceUsage.processRangeMarkers(new Processor<Segment>(){
    @Override public boolean process(    Segment segment){
      usageRanges.add(TextRange.create(segment));
      return true;
    }
  }
);
  boolean isInsideContainer=sliceUsage.indexNesting != 0;
  for (  TextChunk textChunk : text) {
    SimpleTextAttributes attributes=textChunk.getSimpleAttributesIgnoreBackground();
    if (isForcedLeaf) {
      attributes=attributes.derive(attributes.getStyle(),Color.LIGHT_GRAY,attributes.getBgColor(),attributes.getWaveColor());
    }
    boolean inUsage=(attributes.getFontStyle() & Font.BOLD) != 0;
    if (isInsideContainer && inUsage) {
    }
    append(textChunk.getText(),attributes);
  }
  for (int i=0; i < sliceUsage.indexNesting; i++) {
    append(" (Tracking container contents" + (sliceUsage.syntheticField.isEmpty() ? "" : " '" + sliceUsage.syntheticField + "'") + ")",SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
  }
  PsiElement element=sliceUsage.getElement();
  PsiMethod method;
  PsiClass aClass;
  while (true) {
    method=PsiTreeUtil.getParentOfType(element,PsiMethod.class);
    aClass=method == null ? PsiTreeUtil.getParentOfType(element,PsiClass.class) : method.getContainingClass();
    if (aClass instanceof PsiAnonymousClass) {
      element=aClass;
    }
 else {
      break;
    }
  }
  int methodOptions=PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_PARAMETERS | PsiFormatUtilBase.SHOW_CONTAINING_CLASS;
  String location=method != null ? PsiFormatUtil.formatMethod(method,PsiSubstitutor.EMPTY,methodOptions,PsiFormatUtilBase.SHOW_TYPE,2) : aClass != null ? PsiFormatUtil.formatClass(aClass,PsiFormatUtilBase.SHOW_NAME) : null;
  if (location != null) {
    SimpleTextAttributes attributes=SimpleTextAttributes.GRAY_ATTRIBUTES;
    append(" in " + location,attributes);
  }
}
