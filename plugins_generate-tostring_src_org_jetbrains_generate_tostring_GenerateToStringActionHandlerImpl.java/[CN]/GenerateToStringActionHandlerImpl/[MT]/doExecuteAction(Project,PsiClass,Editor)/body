{
  logger.debug("+++ doExecuteAction - START +++");
  if (logger.isDebugEnabled()) {
    logger.debug("Current project " + project.getName());
  }
  final PsiElementClassMember[] dialogMembers=buildMembersToShow(clazz);
  final MemberChooserBuilder<PsiElementClassMember> builder=new MemberChooserBuilder<PsiElementClassMember>(project);
  final MemberChooserHeaderPanel header=new MemberChooserHeaderPanel(clazz);
  builder.setHeaderPanel(header);
  builder.allowEmptySelection(true);
  builder.overrideAnnotationVisible(PsiUtil.isLanguageLevel5OrHigher(clazz));
  builder.setTitle("Generate toString()");
  logger.debug("Displaying member chooser dialog");
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      if (project.isDisposed())       return;
      final MemberChooser<PsiElementClassMember> dialog=builder.createBuilder(dialogMembers);
      dialog.setCopyJavadocVisible(false);
      dialog.selectElements(dialogMembers);
      header.setChooser(dialog);
      dialog.show();
      if (DialogWrapper.OK_EXIT_CODE == dialog.getExitCode()) {
        Collection<PsiMember> selectedMembers=GenerateToStringUtils.convertClassMembersToPsiMembers(dialog.getSelectedElements());
        final TemplateResource template=header.getSelectedTemplate();
        TemplatesManager.getInstance().setDefaultTemplate(template);
        if (template.isValidTemplate()) {
          GenerateToStringWorker.executeGenerateActionLater(clazz,editor,selectedMembers,template,dialog.isInsertOverrideAnnotation());
        }
 else {
          HintManager.getInstance().showErrorHint(editor,"toString() template '" + template.getFileName() + "' is invalid");
        }
      }
    }
  }
);
  logger.debug("+++ doExecuteAction - END +++");
}
