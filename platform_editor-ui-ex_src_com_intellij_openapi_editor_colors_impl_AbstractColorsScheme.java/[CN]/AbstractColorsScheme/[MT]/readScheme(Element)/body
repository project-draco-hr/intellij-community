{
  myDeprecatedBackgroundColor=null;
  if (!SCHEME_ELEMENT.equals(node.getName())) {
    return;
  }
  setName(node.getAttributeValue(NAME_ATTR));
  int readVersion=Integer.parseInt(node.getAttributeValue(VERSION_ATTR,"0"));
  if (readVersion > CURR_VERSION) {
    throw new IllegalStateException("Unsupported color scheme version: " + readVersion);
  }
  myVersion=readVersion;
  String isDefaultScheme=node.getAttributeValue(DEFAULT_SCHEME_ATTR);
  boolean isDefault=isDefaultScheme != null && Boolean.parseBoolean(isDefaultScheme);
  if (!isDefault) {
    myParentScheme=getDefaultScheme(node.getAttributeValue(PARENT_SCHEME_ATTR,EmptyColorScheme.NAME));
  }
  myMetaInfo.clear();
  for (  Element childNode : node.getChildren()) {
    String childName=childNode.getName();
switch (childName) {
case OPTION_ELEMENT:
      readSettings(childNode,isDefault);
    break;
case EDITOR_FONT:
  readFontSettings(childNode,myFontPreferences,isDefault);
break;
case CONSOLE_FONT:
readFontSettings(childNode,myConsoleFontPreferences,isDefault);
break;
case COLORS_ELEMENT:
readColors(childNode);
break;
case ATTRIBUTES_ELEMENT:
readAttributes(childNode);
break;
case META_INFO_ELEMENT:
readMetaInfo(childNode);
break;
}
}
if (myDeprecatedBackgroundColor != null) {
TextAttributes textAttributes=myAttributesMap.get(HighlighterColors.TEXT);
if (textAttributes == null) {
textAttributes=new TextAttributes(Color.black,myDeprecatedBackgroundColor,null,EffectType.BOXED,Font.PLAIN);
myAttributesMap.put(HighlighterColors.TEXT,textAttributes);
}
 else {
textAttributes.setBackgroundColor(myDeprecatedBackgroundColor);
}
}
if (myConsoleFontPreferences.getEffectiveFontFamilies().isEmpty()) {
myFontPreferences.copyTo(myConsoleFontPreferences);
}
initFonts();
}
