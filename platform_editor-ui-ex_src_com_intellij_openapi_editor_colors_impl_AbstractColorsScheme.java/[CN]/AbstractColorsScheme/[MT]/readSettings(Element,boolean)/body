{
switch (childNode.getAttributeValue(NAME_ATTR)) {
case LINE_SPACING:
{
      Float value=myValueReader.read(Float.class,childNode);
      if (value != null)       myLineSpacing=value;
      break;
    }
case EDITOR_FONT_SIZE:
{
    int value=readFontSize(childNode,isDefault);
    if (value > 0)     setEditorFontSize(value);
    break;
  }
case EDITOR_FONT_NAME:
{
  String value=myValueReader.read(String.class,childNode);
  if (value != null)   setEditorFontName(value);
  break;
}
case CONSOLE_LINE_SPACING:
{
Float value=myValueReader.read(Float.class,childNode);
if (value != null) setConsoleLineSpacing(value);
break;
}
case CONSOLE_FONT_SIZE:
{
int value=readFontSize(childNode,isDefault);
if (value > 0) setConsoleFontSize(value);
break;
}
case CONSOLE_FONT_NAME:
{
String value=myValueReader.read(String.class,childNode);
if (value != null) setConsoleFontName(value);
break;
}
case EDITOR_QUICK_JAVADOC_FONT_SIZE:
{
FontSize value=myValueReader.read(FontSize.class,childNode);
if (value != null) myQuickDocFontSize=value;
break;
}
case EDITOR_LIGATURES:
{
Boolean value=myValueReader.read(Boolean.class,childNode);
if (value != null) myFontPreferences.setUseLigatures(value);
break;
}
case CONSOLE_LIGATURES:
{
Boolean value=myValueReader.read(Boolean.class,childNode);
if (value != null) myConsoleFontPreferences.setUseLigatures(value);
break;
}
}
}
