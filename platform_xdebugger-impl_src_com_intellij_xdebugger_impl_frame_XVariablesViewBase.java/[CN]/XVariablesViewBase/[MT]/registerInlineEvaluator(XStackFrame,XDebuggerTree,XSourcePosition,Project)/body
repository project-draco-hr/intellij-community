{
  final VirtualFile file=position.getFile();
  final FileEditor fileEditor=FileEditorManagerEx.getInstanceEx(project).getSelectedEditor(file);
  if (fileEditor instanceof PsiAwareTextEditorImpl) {
    final Editor editor=((PsiAwareTextEditorImpl)fileEditor).getEditor();
    final SelectionListener listener=new SelectionListener(){
      @Override public void selectionChanged(      final SelectionEvent e){
        if (!Registry.is("debugger.valueTooltipAutoShowOnSelection")) {
          return;
        }
        final String text=editor.getDocument().getText(e.getNewRange());
        if (!StringUtil.isEmpty(text) && !(text.contains("exec(") || text.contains("++") || text.contains("--")|| text.contains("="))) {
          final XDebugSession session=getSession(getTree());
          if (session == null)           return;
          XDebuggerEvaluator evaluator=stackFrame.getEvaluator();
          if (evaluator == null)           return;
          TextRange range=e.getNewRange();
          ExpressionInfo info=new ExpressionInfo(range);
          int offset=range.getStartOffset();
          LogicalPosition pos=editor.offsetToLogicalPosition(offset);
          Point point=editor.logicalPositionToXY(pos);
          new XValueHint(project,editor,point,ValueHintType.MOUSE_OVER_HINT,info,evaluator,session).invokeHint();
        }
      }
    }
;
    ((SelectionModelImpl)editor.getSelectionModel()).addSelectionListener(listener,tree);
  }
}
