{
  if (newRectangle.y == oldRectangle.y && newRectangle.height == oldRectangle.height)   return;
  EditingSides sidesContainer=context.getSidesContainer();
  FragmentSide masterSide=context.getMasterSide();
  FragmentSide masterDiffSide=context.getMasterDiffSide();
  Editor master=sidesContainer.getEditor(masterSide);
  Editor slave=sidesContainer.getEditor(masterSide.otherSide());
  if (master == null || slave == null)   return;
  int masterHeaderOffset=getHeaderOffset(master);
  int slaveHeaderOffset=getHeaderOffset(slave);
  int masterVerticalScrollOffset=master.getScrollingModel().getVerticalScrollOffset() + masterHeaderOffset;
  int slaveVerticalScrollOffset=slave.getScrollingModel().getVerticalScrollOffset() + slaveHeaderOffset;
  Rectangle viewRect=master.getScrollingModel().getVisibleArea();
  int middleY=viewRect.height / 3;
  LogicalPosition masterPos=master.xyToLogicalPosition(new Point(viewRect.x,masterVerticalScrollOffset + middleY));
  int masterCenterLine=masterPos.line;
  if (masterCenterLine > master.getDocument().getLineCount()) {
    masterCenterLine=master.getDocument().getLineCount();
  }
  int scrollToLine=sidesContainer.getLineBlocks().transform(masterDiffSide,masterCenterLine);
  int offset;
  if (scrollToLine < 0) {
    offset=slaveVerticalScrollOffset + newRectangle.y - oldRectangle.y;
  }
 else {
    int correction=(masterVerticalScrollOffset + middleY) % master.getLineHeight();
    Point point=slave.logicalPositionToXY(new LogicalPosition(scrollToLine,masterPos.column));
    offset=point.y - middleY + correction;
  }
  doScrollVertically(slave.getScrollingModel(),offset);
}
