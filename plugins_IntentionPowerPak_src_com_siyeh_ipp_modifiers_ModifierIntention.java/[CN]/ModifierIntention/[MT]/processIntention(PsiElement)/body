{
  final PsiMember member=(PsiMember)element.getParent();
  final PsiModifierList modifierList=member.getModifierList();
  if (modifierList == null) {
    return;
  }
  final MultiMap<PsiElement,String> conflicts=checkForConflicts(member);
  final Project project=member.getProject();
  final boolean conflictsDialogOK;
  if (conflicts.isEmpty()) {
    conflictsDialogOK=true;
  }
 else {
    final ConflictsDialog conflictsDialog=new ConflictsDialog(project,conflicts,new Runnable(){
      @Override public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            modifierList.setModifierProperty(getModifier(),true);
          }
        }
);
      }
    }
);
    conflictsDialogOK=conflictsDialog.showAndGet();
  }
  if (conflictsDialogOK) {
    modifierList.setModifierProperty(getModifier(),true);
    final PsiElement whitespace=PsiParserFacade.SERVICE.getInstance(project).createWhiteSpaceFromText(" ");
    final PsiElement sibling=modifierList.getNextSibling();
    if (sibling instanceof PsiWhiteSpace) {
      sibling.replace(whitespace);
      CodeStyleManager.getInstance(project).reformatRange(member,modifierList.getTextOffset(),modifierList.getNextSibling().getTextOffset());
    }
  }
}
