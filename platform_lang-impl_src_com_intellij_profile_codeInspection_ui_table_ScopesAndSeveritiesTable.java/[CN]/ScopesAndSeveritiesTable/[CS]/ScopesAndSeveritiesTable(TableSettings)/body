{
  super(new MyTableModel(tableSettings));
  final TableColumnModel columnModel=getColumnModel();
  final TableColumn scopeEnabledColumn=columnModel.getColumn(SCOPE_ENABLED_COLUMN);
  scopeEnabledColumn.setMaxWidth(30);
  scopeEnabledColumn.setCellRenderer(new ThreeStateCheckBoxRenderer());
  scopeEnabledColumn.setCellEditor(new ThreeStateCheckBoxRenderer());
  final TableColumn severityColumn=columnModel.getColumn(SEVERITY_COLUMN);
  severityColumn.setCellRenderer(SeverityRenderer.create(tableSettings.getInspectionProfile()));
  severityColumn.setCellEditor(SeverityRenderer.create(tableSettings.getInspectionProfile()));
  setColumnSelectionAllowed(false);
  setRowSelectionAllowed(true);
  setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    final ListSelectionEvent e){
      final int idx=getSelectionModel().getMinSelectionIndex();
      if (idx >= 0) {
        final ExistedScopesStatesAndNonExistNames scopeToolState=((MyTableModel)getModel()).getScopeToolState(idx);
        final List<ScopeToolState> existedStates=scopeToolState.getExistedStates();
        if (existedStates.size() == 1) {
          tableSettings.onScopeChosen(existedStates.get(0));
        }
      }
    }
  }
);
  setRowSelectionInterval(0,0);
  setStriped(true);
  setShowGrid(false);
  ((MyTableModel)getModel()).setTable(this);
}
