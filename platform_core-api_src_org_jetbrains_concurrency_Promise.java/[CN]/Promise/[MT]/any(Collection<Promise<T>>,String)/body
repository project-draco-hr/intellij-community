{
  if (promises.isEmpty()) {
    return (Promise<T>)DONE;
  }
 else   if (promises.size() == 1) {
    return ContainerUtil.getFirstItem(promises);
  }
  final AsyncPromise<T> totalPromise=new AsyncPromise<T>();
  Consumer<T> done=new Consumer<T>(){
    @Override public void consume(    T result){
      totalPromise.setResult(result);
    }
  }
;
  Consumer<Throwable> rejected=new Consumer<Throwable>(){
    private volatile int toConsume=promises.size();
    @Override public void consume(    Throwable throwable){
      if (--toConsume <= 0) {
        totalPromise.setError(totalError);
      }
    }
  }
;
  for (  Promise<? extends T> promise : promises) {
    promise.done(done);
    promise.rejected(rejected);
  }
  return totalPromise;
}
