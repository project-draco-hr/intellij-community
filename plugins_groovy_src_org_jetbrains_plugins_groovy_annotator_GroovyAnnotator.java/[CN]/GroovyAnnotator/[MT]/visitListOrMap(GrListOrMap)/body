{
  final PsiReference constructorReference=listOrMap.getReference();
  if (constructorReference instanceof LiteralConstructorReference && ((LiteralConstructorReference)constructorReference).getConstructedClassType() != null) {
    final PsiElement startToken=listOrMap.getFirstChild();
    if (startToken != null && startToken.getNode().getElementType() == mLBRACK) {
      myHolder.createInfoAnnotation(startToken,null).setTextAttributes(DefaultHighlighter.LITERAL_CONVERSION);
    }
    final PsiElement endToken=listOrMap.getLastChild();
    if (endToken != null && endToken.getNode().getElementType() == mRBRACK) {
      myHolder.createInfoAnnotation(endToken,null).setTextAttributes(DefaultHighlighter.LITERAL_CONVERSION);
    }
  }
  final GrNamedArgument[] namedArguments=listOrMap.getNamedArguments();
  final GrExpression[] expressionArguments=listOrMap.getInitializers();
  if (namedArguments.length != 0 && expressionArguments.length != 0) {
    myHolder.createErrorAnnotation(listOrMap,GroovyBundle.message("collection.literal.contains.named.argument.and.expression.items"));
  }
  checkNamedArgs(namedArguments,false);
}
