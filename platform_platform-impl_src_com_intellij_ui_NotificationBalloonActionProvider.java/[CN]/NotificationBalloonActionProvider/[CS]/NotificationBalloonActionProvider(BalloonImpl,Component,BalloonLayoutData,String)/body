{
  myLayoutData=layoutData;
  myDisplayGroupId=displayGroupId;
  myBalloon=balloon;
  myRepaintPanel=repaintPanel;
  if (myDisplayGroupId == null || !NotificationsConfigurationImpl.getInstanceImpl().isRegistered(myDisplayGroupId)) {
    mySettingButton=null;
  }
 else {
    mySettingButton=myBalloon.new ActionButton(AllIcons.Ide.Notification.Gear,AllIcons.Ide.Notification.GearHover,new Consumer<MouseEvent>(){
      @Override public void consume(      MouseEvent event){
        final NotificationsConfigurable configurable=new NotificationsConfigurable();
        ShowSettingsUtil.getInstance().editConfigurable(myLayoutData.project,configurable,new Runnable(){
          @Override public void run(){
            configurable.enableSearch(myDisplayGroupId).run();
          }
        }
);
      }
    }
){
      @Override public void repaint(){
        super.repaint();
        if (myRepaintPanel != null) {
          myRepaintPanel.repaint();
        }
      }
    }
;
    myActions.add(mySettingButton);
    if (repaintPanel != null) {
      layoutData.showActions=new Computable<Boolean>(){
        @Override public Boolean compute(){
          for (          BalloonImpl.ActionButton action : myActions) {
            if (!action.isShowing() || !action.hasPaint()) {
              return Boolean.FALSE;
            }
          }
          return Boolean.TRUE;
        }
      }
;
    }
  }
  myCloseButton=myBalloon.new ActionButton(AllIcons.Ide.Notification.Close,AllIcons.Ide.Notification.CloseHover,new Consumer<MouseEvent>(){
    @Override public void consume(    MouseEvent event){
      final int modifiers=event.getModifiers();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          if ((modifiers & InputEvent.ALT_MASK) != 0) {
            myLayoutData.closeAll.run();
          }
 else {
            myBalloon.hide();
          }
        }
      }
);
    }
  }
){
    @Override protected void paintIcon(    @NotNull Graphics g,    @NotNull Icon icon){
      icon.paintIcon(this,g,CloseHoverBounds.x,CloseHoverBounds.y);
    }
  }
;
  myActions.add(myCloseButton);
}
