{
  ImportSourceChooserDialog<CodeStyleScheme> importSourceChooserDialog=new ImportSourceChooserDialog<CodeStyleScheme>(myContentPane,CodeStyleScheme.class);
  if (importSourceChooserDialog.showAndGet()) {
    if (importSourceChooserDialog.isImportFromSharedSelected()) {
      new SchemesToImportPopup<CodeStyleScheme>(myContentPane){
        @Override protected void onSchemeSelected(        CodeStyleScheme scheme){
          if (scheme != null) {
            myModel.addScheme(scheme,true);
          }
        }
      }
.show(myModel.getSchemes());
    }
 else {
      final String selectedImporterName=importSourceChooserDialog.getSelectedSourceName();
      if (selectedImporterName != null) {
        final SchemeImporter<CodeStyleScheme> importer=SchemeImporterEP.getImporter(selectedImporterName,CodeStyleScheme.class);
        if (importer == null)         return;
        try {
          final CodeStyleScheme scheme=importExternalCodeStyle(importer);
          if (scheme != null) {
            final String additionalImportInfo=StringUtil.notNullize(importer.getAdditionalImportInfo(scheme));
            SchemeImportUtil.showStatus(myImportButton,ApplicationBundle.message("message.code.style.scheme.import.success",selectedImporterName,scheme.getName(),additionalImportInfo),MessageType.INFO);
          }
        }
 catch (        SchemeImportException e) {
          if (e.isWarning()) {
            SchemeImportUtil.showStatus(myImportButton,e.getMessage(),MessageType.WARNING);
            return;
          }
          final String message=ApplicationBundle.message("message.code.style.scheme.import.failure",selectedImporterName,e.getMessage());
          SchemeImportUtil.showStatus(myImportButton,message,MessageType.ERROR);
        }
      }
    }
  }
}
