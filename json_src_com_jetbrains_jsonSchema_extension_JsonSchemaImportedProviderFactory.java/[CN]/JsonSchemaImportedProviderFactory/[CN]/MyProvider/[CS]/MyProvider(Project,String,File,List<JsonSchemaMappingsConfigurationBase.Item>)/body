{
  myName=name;
  myFile=file;
  myPatterns=new ArrayList<Processor<VirtualFile>>();
  for (  final JsonSchemaMappingsConfigurationBase.Item pattern : patterns) {
    if (pattern.isPattern()) {
      myPatterns.add(new Processor<VirtualFile>(){
        private Matcher matcher=PatternUtil.fromMask(pattern.getPath()).matcher("");
        @Override public boolean process(        VirtualFile file){
          matcher.reset(file.getName());
          return matcher.matches();
        }
      }
);
    }
 else {
      if (project == null || project.getBasePath() == null) {
        continue;
      }
      String path=pattern.getPath().replace('\\','/');
      final String[] parts=path.split("/");
      final VirtualFile relativeFile=VfsUtil.findRelativeFile(project.getBaseDir(),parts);
      if (relativeFile == null)       continue;
      if (pattern.isDirectory()) {
        myPatterns.add(new Processor<VirtualFile>(){
          @Override public boolean process(          VirtualFile file){
            return VfsUtil.isAncestor(relativeFile,file,true);
          }
        }
);
      }
 else {
        myPatterns.add(new Processor<VirtualFile>(){
          @Override public boolean process(          VirtualFile file){
            return relativeFile.equals(file);
          }
        }
);
      }
    }
  }
}
