{
  final IntroduceParameterData data=new IntroduceParameterDataAdapter();
  processUsages(usages,data);
  final PsiMethod toSearchFor=(PsiMethod)myHelper.getToSearchFor();
  final boolean methodsToProcessAreDifferent=myMethod != toSearchFor;
  if (myHelper.generateDelegate()) {
    generateDelegate(myMethod,data.getParameterInitializer(),myProject);
    if (methodsToProcessAreDifferent) {
      final GrMethod method=generateDelegate(toSearchFor,data.getParameterInitializer(),myProject);
      final PsiClass containingClass=method.getContainingClass();
      if (containingClass != null && containingClass.isInterface()) {
        final GrOpenBlock block=method.getBlock();
        if (block != null) {
          block.delete();
        }
      }
    }
  }
  final FieldConflictsResolver fieldConflictsResolver=new FieldConflictsResolver(myHelper.getName(),myMethod.getBlock());
  changeMethodSignatureAndResolveFieldConflicts(new UsageInfo(myMethod),usages,data);
  if (methodsToProcessAreDifferent) {
    changeMethodSignatureAndResolveFieldConflicts(new UsageInfo(toSearchFor),usages,data);
  }
  for (  UsageInfo usage : usages) {
    if (usage instanceof ChangedMethodCallInfo) {
      PsiElement element=usage.getElement();
      processChangedMethodCall(element,myHelper,myProject);
    }
  }
  final GrStatement newStatement=ExtractUtil.replaceStatement(myDeclarationOwner,myHelper);
  final Editor editor=PsiUtilBase.findEditor(newStatement);
  if (editor != null) {
    PsiDocumentManager.getInstance(myProject).commitDocument(editor.getDocument());
    editor.getSelectionModel().removeSelection();
    editor.getCaretModel().moveToOffset(newStatement.getTextRange().getEndOffset());
  }
  fieldConflictsResolver.fix();
}
