{
  if (usage instanceof PyQualifiedExpression) {
    PyQualifiedExpression expr=(PyQualifiedExpression)usage;
    if (myMovedElement instanceof PyClass && PyNames.INIT.equals(expr.getName())) {
      return;
    }
    if (expr.isQualified()) {
      insertImportFromAndReplaceReference(newElement,expr);
    }
  }
  if (usage instanceof PyStringLiteralExpression) {
    for (    PsiReference ref : usage.getReferences()) {
      if (ref instanceof PyDunderAllReference) {
        usage.delete();
      }
 else {
        if (ref.isReferenceTo(myMovedElement)) {
          ref.bindToElement(newElement);
        }
      }
    }
  }
 else {
    final PyImportStatementBase importStmt=getImportStatementByElement(usage);
    if (importStmt != null) {
      PyClassRefactoringUtil.updateImportOfElement(importStmt,newElement);
    }
    if (belongsToSomeMovedElement(usage)) {
      return;
    }
    final PsiFile usageFile=usage.getContainingFile();
    if (usageFile == myMovedElement.getContainingFile() && usage instanceof PyQualifiedExpression) {
      if (usage.getParent() instanceof PyGlobalStatement) {
        myScopeOwnersWithGlobal.add(ScopeUtil.getScopeOwner(usage));
        if (((PyGlobalStatement)usage.getParent()).getGlobals().length == 1) {
          PyUtil.deleteElementSafely(usage.getParent());
        }
 else {
          usage.delete();
        }
      }
 else       if (myScopeOwnersWithGlobal.contains(ScopeUtil.getScopeOwner(usage))) {
        insertQualifiedImportAndReplaceReference(newElement,(PyQualifiedExpression)usage);
      }
 else {
        insertImportFromAndReplaceReference(newElement,(PyQualifiedExpression)usage);
      }
    }
    if (resolvesToLocalStarImport(usage)) {
      PyClassRefactoringUtil.insertImport(usage,newElement);
      myOptimizeImportTargets.add(usageFile);
    }
  }
}
