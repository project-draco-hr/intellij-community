{
  final List<PsiElement> topLevelAtDestination=ContainerUtil.mapNotNull(myUsages,new Function<UsageInfo,PsiElement>(){
    @Override public PsiElement fun(    UsageInfo usage){
      final PsiElement element=usage.getElement();
      if (element != null && ScopeUtil.getScopeOwner(element) == myDestinationFile && getImportStatementByElement(element) == null) {
        return findTopLevelParent(element);
      }
      return null;
    }
  }
);
  if (topLevelAtDestination.isEmpty()) {
    return null;
  }
  return Collections.min(topLevelAtDestination,new Comparator<PsiElement>(){
    @Override public int compare(    PsiElement e1,    PsiElement e2){
      return PsiUtilCore.compareElementsByPosition(e1,e2);
    }
  }
);
}
