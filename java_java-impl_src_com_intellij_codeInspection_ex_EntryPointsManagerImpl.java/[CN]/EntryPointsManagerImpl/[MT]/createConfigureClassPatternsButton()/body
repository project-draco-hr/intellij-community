{
  final JButton configureClassPatterns=new JButton("Code patterns...");
  configureClassPatterns.setHorizontalAlignment(SwingConstants.LEFT);
  configureClassPatterns.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final Project project=ProjectUtil.guessCurrentProject(configureClassPatterns);
      final EntryPointsManagerBase entryPointsManagerBase=getInstance(project);
      final ArrayList<ClassPattern> list=new ArrayList<>();
      for (      ClassPattern pattern : entryPointsManagerBase.getPatterns()) {
        list.add(new ClassPattern(pattern));
      }
      final ClassPatternsPanel panel=new ClassPatternsPanel(list);
      new DialogWrapper(entryPointsManagerBase.myProject){
{
          init();
          setTitle("Configure Code Patterns");
        }
        @Nullable @Override protected JComponent createCenterPanel(){
          return panel;
        }
        @Override protected void doOKAction(){
          final String error=panel.getValidationError(project);
          if (error != null) {
            Messages.showErrorDialog(panel,error);
            return;
          }
          final LinkedHashSet<ClassPattern> patterns=entryPointsManagerBase.getPatterns();
          patterns.clear();
          patterns.addAll(list);
          DaemonCodeAnalyzer.getInstance(entryPointsManagerBase.myProject).restart();
          super.doOKAction();
        }
      }
.show();
    }
  }
);
  return configureClassPatterns;
}
