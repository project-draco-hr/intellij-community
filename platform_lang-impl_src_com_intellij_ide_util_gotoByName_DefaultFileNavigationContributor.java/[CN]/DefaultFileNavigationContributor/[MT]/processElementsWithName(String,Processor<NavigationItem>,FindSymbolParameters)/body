{
  final boolean globalSearch=parameters.getSearchScope().isSearchInLibraries();
  final Processor<PsiFileSystemItem> processor=new Processor<PsiFileSystemItem>(){
    @Override public boolean process(    PsiFileSystemItem item){
      if (!globalSearch && ProjectUtil.isProjectOrWorkspaceFile(item.getVirtualFile())) {
        return true;
      }
      return _processor.process(item);
    }
  }
;
  String completePattern=parameters.getCompletePattern();
  final boolean includeDirs=completePattern.endsWith("/") || completePattern.endsWith("\\") || completePattern.startsWith("/")|| completePattern.startsWith("\\");
  boolean result=FilenameIndex.processFilesByName(name,includeDirs,processor,parameters.getSearchScope(),parameters.getProject(),parameters.getIdFilter());
  if (!result && includeDirs) {
    FilenameIndex.processFilesByName(name,false,processor,parameters.getSearchScope(),parameters.getProject(),parameters.getIdFilter());
  }
}
