{
  if (expr instanceof PsiLiteralExpression) {
    if (parent != null && ((ClsFileImpl)parent.getContainingFile()).isForDecompiling()) {
      return new ClsLiteralExpressionImpl(parent,expr.getText(),PsiType.NULL,null);
    }
 else {
      return new ClsLiteralExpressionImpl(parent,expr.getText(),expr.getType(),((PsiLiteralExpression)expr).getValue());
    }
  }
  if (expr instanceof PsiPrefixExpression) {
    final PsiPrefixExpression prefixExpr=(PsiPrefixExpression)expr;
    final ClsJavaTokenImpl operation=new ClsJavaTokenImpl(null,prefixExpr.getOperationTokenType(),prefixExpr.getOperationSign().getText());
    final ClsLiteralExpressionImpl literal=(ClsLiteralExpressionImpl)psiToClsExpression(prefixExpr.getOperand(),null);
    return new ClsPrefixExpressionImpl(parent,operation,literal);
  }
  if (expr instanceof PsiClassObjectAccessExpression) {
    String exprText=expr.getText();
    if (StringUtil.endsWith(exprText,".class")) {
      String classText=exprText.substring(0,exprText.length() - 6);
      return new ClsClassObjectAccessExpressionImpl(parent,classText);
    }
  }
  if (expr instanceof PsiReferenceExpression) {
    return new ClsReferenceExpressionImpl(parent,(PsiReferenceExpression)expr);
  }
  if (expr instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpr=(PsiBinaryExpression)expr;
    final PsiExpression lOperand=psiToClsExpression(binaryExpr.getLOperand(),null);
    final ClsJavaTokenImpl operation=new ClsJavaTokenImpl(null,binaryExpr.getOperationTokenType(),binaryExpr.getOperationSign().getText());
    final PsiExpression rOperand=psiToClsExpression(binaryExpr.getROperand(),null);
    if (lOperand instanceof ClsLiteralExpressionImpl) {
      return new ClsBinaryExpressionImpl(parent,(ClsLiteralExpressionImpl)lOperand,operation,(ClsLiteralExpressionImpl)rOperand);
    }
 else     if (lOperand instanceof ClsPrefixExpressionImpl) {
      return new ClsBinaryExpressionImpl(parent,(ClsPrefixExpressionImpl)lOperand,operation,(ClsLiteralExpressionImpl)rOperand);
    }
  }
 else {
    if (parent != null && ((ClsFileImpl)parent.getContainingFile()).isForDecompiling()) {
      return new ClsLiteralExpressionImpl(parent,expr.getText(),PsiType.NULL,null);
    }
    final PsiConstantEvaluationHelper evaluator=JavaPsiFacade.getInstance(expr.getProject()).getConstantEvaluationHelper();
    final Object value=evaluator.computeConstantExpression(expr);
    if (value != null) {
      return new ClsLiteralExpressionImpl(parent,expr.getText(),expr.getType(),value);
    }
  }
  LOG.error("Unable to compute expression value: " + expr + " ["+ expr.getText()+ "]");
  return null;
}
