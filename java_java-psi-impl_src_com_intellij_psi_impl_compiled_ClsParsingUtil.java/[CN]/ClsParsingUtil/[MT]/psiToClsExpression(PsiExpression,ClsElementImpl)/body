{
  if (expr instanceof PsiLiteralExpression) {
    if (parent != null && ((ClsFileImpl)parent.getContainingFile()).isForDecompiling()) {
      return new ClsLiteralExpressionImpl(parent,expr.getText(),PsiType.NULL,null);
    }
    return new ClsLiteralExpressionImpl(parent,expr.getText(),expr.getType(),((PsiLiteralExpression)expr).getValue());
  }
  if (expr instanceof PsiPrefixExpression) {
    final PsiPrefixExpression prefixExpr=(PsiPrefixExpression)expr;
    return new ClsPrefixExpressionImpl(parent){
      @NotNull @Override protected PsiJavaToken createOperation(){
        return new ClsJavaTokenImpl(this,prefixExpr.getOperationTokenType(),prefixExpr.getOperationSign().getText());
      }
      @NotNull @Override protected PsiExpression createOperand(){
        return psiToClsExpression(prefixExpr.getOperand(),this);
      }
    }
;
  }
  if (expr instanceof PsiClassObjectAccessExpression) {
    String exprText=expr.getText();
    if (StringUtil.endsWith(exprText,".class")) {
      String classText=exprText.substring(0,exprText.length() - 6);
      return new ClsClassObjectAccessExpressionImpl(parent,classText);
    }
  }
  if (expr instanceof PsiReferenceExpression) {
    return new ClsReferenceExpressionImpl(parent,(PsiReferenceExpression)expr);
  }
  if (expr instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpr=(PsiBinaryExpression)expr;
    return new ClsBinaryExpressionImpl(parent){
      @NotNull @Override protected PsiJavaToken createOperation(){
        return new ClsJavaTokenImpl(this,binaryExpr.getOperationTokenType(),binaryExpr.getOperationSign().getText());
      }
      @NotNull @Override protected PsiExpression createLOperand(){
        return psiToClsExpression(binaryExpr.getLOperand(),this);
      }
      @NotNull @Override protected ClsLiteralExpressionImpl createROperand(){
        return (ClsLiteralExpressionImpl)psiToClsExpression(binaryExpr.getROperand(),this);
      }
    }
;
  }
  if (parent != null && ((ClsFileImpl)parent.getContainingFile()).isForDecompiling()) {
    return new ClsLiteralExpressionImpl(parent,expr.getText(),PsiType.NULL,null);
  }
  final PsiConstantEvaluationHelper evaluator=JavaPsiFacade.getInstance(expr.getProject()).getConstantEvaluationHelper();
  final Object value=evaluator.computeConstantExpression(expr);
  if (value != null) {
    return new ClsLiteralExpressionImpl(parent,expr.getText(),expr.getType(),value);
  }
  LOG.error("Unable to compute expression value: " + expr + " ["+ expr.getText()+ "]");
  return null;
}
