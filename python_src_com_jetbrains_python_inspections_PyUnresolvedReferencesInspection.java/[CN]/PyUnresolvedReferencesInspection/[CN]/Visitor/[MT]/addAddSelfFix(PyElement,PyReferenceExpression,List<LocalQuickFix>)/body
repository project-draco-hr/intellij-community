{
  final PyClass containedClass=PsiTreeUtil.getParentOfType(node,PyClass.class);
  final PyFunction function=PsiTreeUtil.getParentOfType(node,PyFunction.class);
  if (containedClass != null && function != null) {
    final PyParameter[] parameters=function.getParameterList().getParameters();
    final String qualifier=parameters[0].getText();
    if (parameters.length == 0)     return;
    final PyDecoratorList decoratorList=function.getDecoratorList();
    boolean isClassmethod=false;
    if (decoratorList != null) {
      for (      PyDecorator decorator : decoratorList.getDecorators()) {
        if (PyNames.CLASSMETHOD.equals(decorator.getCallee().getText()))         isClassmethod=true;
      }
    }
    for (    PyTargetExpression target : containedClass.getInstanceAttributes()) {
      if (!isClassmethod && Comparing.strEqual(node.getName(),target.getName())) {
        actions.add(new UnresolvedReferenceAddSelfQuickFix(refex,qualifier));
      }
    }
    for (    PyStatement statement : containedClass.getStatementList().getStatements()) {
      if (statement instanceof PyAssignmentStatement) {
        PyExpression lhsExpression=((PyAssignmentStatement)statement).getLeftHandSideExpression();
        if (lhsExpression != null && lhsExpression.getText().equals(refex.getText())) {
          PyExpression callexpr=((PyAssignmentStatement)statement).getAssignedValue();
          if (callexpr instanceof PyCallExpression) {
            PyType type=myTypeEvalContext.getType(callexpr);
            if (type != null && type instanceof PyClassTypeImpl) {
              if (((PyCallExpression)callexpr).isCalleeText(PyNames.PROPERTY)) {
                actions.add(new UnresolvedReferenceAddSelfQuickFix(refex,qualifier));
              }
            }
          }
        }
      }
    }
    for (    PyFunction method : containedClass.getMethods()) {
      if (refex.getText().equals(method.getName())) {
        actions.add(new UnresolvedReferenceAddSelfQuickFix(refex,qualifier));
      }
    }
  }
}
