{
  PyClass containedClass=PsiTreeUtil.getParentOfType(node,PyClass.class);
  if (containedClass != null) {
    for (    PyTargetExpression target : containedClass.getInstanceAttributes()) {
      if (Comparing.strEqual(node.getName(),target.getName())) {
        actions.add(new UnresolvedReferenceAddSelfQuickFix(refex));
      }
    }
    for (    PyStatement statement : containedClass.getStatementList().getStatements()) {
      if (statement instanceof PyAssignmentStatement) {
        PyExpression lhsExpression=((PyAssignmentStatement)statement).getLeftHandSideExpression();
        if (lhsExpression != null && lhsExpression.getText().equals(refex.getText())) {
          PyExpression callexpr=((PyAssignmentStatement)statement).getAssignedValue();
          if (callexpr instanceof PyCallExpression) {
            PyType type=myTypeEvalContext.getType(callexpr);
            if (type != null && type instanceof PyClassTypeImpl) {
              if (((PyCallExpression)callexpr).isCalleeText(PyNames.PROPERTY)) {
                actions.add(new UnresolvedReferenceAddSelfQuickFix(refex));
              }
            }
          }
        }
      }
    }
    for (    PyFunction method : containedClass.getMethods()) {
      if (refex.getText().equals(method.getName())) {
        actions.add(new UnresolvedReferenceAddSelfQuickFix(refex));
      }
    }
  }
}
