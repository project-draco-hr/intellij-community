{
  myAllImports.removeAll(myUsedImports);
  final NameDefiner[] unusedImports=myAllImports.toArray(new NameDefiner[myAllImports.size()]);
  Set<PyImportStatementBase> unusedStatements=new HashSet<PyImportStatementBase>();
  for (  NameDefiner unusedImport : unusedImports) {
    PyImportStatementBase importStatement=PsiTreeUtil.getParentOfType(unusedImport,PyImportStatementBase.class);
    if (importStatement != null && !unusedStatements.contains(importStatement)) {
      if (areAllImportsUnused(importStatement)) {
        unusedStatements.add(importStatement);
        registerProblem(importStatement,"Unused import statement",ProblemHighlightType.LIKE_UNUSED_SYMBOL,null);
      }
 else {
        registerProblem(unusedImport,"Unused import statement",ProblemHighlightType.LIKE_UNUSED_SYMBOL,null);
      }
    }
  }
}
