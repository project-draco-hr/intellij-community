{
  final StringBuilder description_buf=new StringBuilder("");
  final String text=reference.getElement().getText();
  final String ref_text=reference.getRangeInElement().substring(text);
  final PsiElement ref_element=reference.getElement();
  final boolean ref_is_importable=SyntaxMatchers.IN_IMPORT.search(ref_element) == null && IN_GLOBAL.search(ref_element) == null;
  final List<LocalQuickFix> actions=new ArrayList<LocalQuickFix>(2);
  HintAction hint_action=null;
  if (ref_text.length() <= 0)   return;
  if (reference.getElement() instanceof PyReferenceExpression) {
    PyReferenceExpression refex=(PyReferenceExpression)reference.getElement();
    String refname=refex.getReferencedName();
    if (refex.getQualifier() != null) {
      final PyClassType object_type=PyBuiltinCache.getInstance(node).getObjectType();
      if ((object_type != null) && object_type.getPossibleInstanceMembers().contains(refname))       return;
    }
    if (PyModuleType.getPossibleInstanceMembers().contains(refname))     return;
    if ((PsiTreeUtil.getParentOfType(PsiTreeUtil.getParentOfType(node,PyImportElement.class),PyTryExceptStatement.class,PyIfStatement.class) != null)) {
      severity=HighlightSeverity.INFO;
      String errmsg=PyBundle.message("INSP.module.$0.not.found",ref_text);
      description_buf.append(errmsg);
    }
    if (ref_is_importable) {
      Collection<LocalQuickFix> import_fixes=proposeImportFixes(node,ref_text);
      if (import_fixes.size() > 0) {
        actions.addAll(import_fixes);
        Object first_action=import_fixes.iterator().next();
        if (first_action instanceof HintAction) {
          hint_action=((HintAction)first_action);
        }
      }
    }
  }
  if (reference instanceof PsiReferenceEx) {
    final String s=((PsiReferenceEx)reference).getUnresolvedDescription();
    if (s != null)     description_buf.append(s);
  }
  if (description_buf.length() == 0) {
    boolean marked_qualified=false;
    if (reference.getElement() instanceof PyQualifiedExpression) {
      final PyExpression qexpr=((PyQualifiedExpression)reference.getElement()).getQualifier();
      if (qexpr != null) {
        PyType qtype=qexpr.getType();
        if (qtype != null) {
          if (qtype instanceof PyNoneType) {
            return;
          }
          if (qtype instanceof PyClassType) {
            PyClass cls=((PyClassType)qtype).getPyClass();
            if (overridesGetAttr(cls)) {
              return;
            }
            if (cls != null && !PyBuiltinCache.getInstance(node).hasInBuiltins(cls)) {
              if (reference.getElement().getParent() instanceof PyCallExpression) {
                actions.add(new AddMethodQuickFix(ref_text,(PyClassType)qtype));
              }
 else               actions.add(new AddFieldQuickFix(ref_text,cls));
            }
            description_buf.append(PyBundle.message("INSP.unresolved.ref.$0.for.class.$1",ref_text,qtype.getName()));
            marked_qualified=true;
          }
 else {
            description_buf.append(PyBundle.message("INSP.cannot.find.$0.in.$1",ref_text,qtype.getName()));
            marked_qualified=true;
          }
        }
      }
    }
    if (!marked_qualified) {
      description_buf.append(PyBundle.message("INSP.unresolved.ref.$0",ref_text));
      if (ref_element != null && ref_is_importable && hint_action == null) {
        actions.add(new AddImportAction(reference));
      }
    }
  }
  String description=description_buf.toString();
  ProblemHighlightType hl_type;
  if (severity == HighlightSeverity.WARNING) {
    hl_type=ProblemHighlightType.GENERIC_ERROR_OR_WARNING;
  }
 else {
    hl_type=ProblemHighlightType.LIKE_UNKNOWN_SYMBOL;
  }
  if (GenerateBinaryStubsFix.isApplicable(reference)) {
    actions.add(new GenerateBinaryStubsFix(reference));
  }
  addPluginQuickFixes(reference,actions);
  PsiElement point=node.getLastChild();
  if (point == null)   point=node;
  registerProblem(point,description,hl_type,null,actions.toArray(new LocalQuickFix[actions.size()]));
}
