{
  super.visitPyElement(node);
  for (  final PsiReference reference : node.getReferences()) {
    if (reference.isSoft())     continue;
    HighlightSeverity severity=HighlightSeverity.ERROR;
    if (reference instanceof PsiReferenceEx) {
      severity=((PsiReferenceEx)reference).getUnresolvedHighlightSeverity();
      if (severity == null)       continue;
    }
    boolean unresolved;
    if (reference instanceof PsiPolyVariantReference) {
      final PsiPolyVariantReference poly=(PsiPolyVariantReference)reference;
      unresolved=(poly.multiResolve(false).length == 0);
    }
 else {
      unresolved=(reference.resolve() == null);
    }
    if (unresolved) {
      StringBuilder description_buf=new StringBuilder("");
      String text=reference.getElement().getText();
      String ref_text=reference.getRangeInElement().substring(text);
      LocalQuickFix action=null;
      HintAction hint_action=null;
      if (ref_text.length() <= 0)       return;
      if (reference instanceof PyReferenceExpression) {
        PyReferenceExpression refex=(PyReferenceExpression)reference;
        String refname=refex.getReferencedName();
        if (refex.getQualifier() != null) {
          final PyClassType object_type=PyBuiltinCache.getInstance(node.getProject()).getObjectType();
          if ((object_type != null) && object_type.getPossibleInstanceMembers().contains(refname))           continue;
        }
        if (PyModuleType.getPossibleInstanceMembers().contains(refname))         continue;
        if ((PsiTreeUtil.getParentOfType(PsiTreeUtil.getParentOfType(node,PyImportElement.class),PyTryExceptStatement.class,PyIfStatement.class) != null)) {
          severity=HighlightSeverity.INFO;
          String errmsg=PyBundle.message("INSP.module.$0.not.found",ref_text);
          description_buf.append(errmsg);
        }
        hint_action=proposeImportFixes(node,ref_text);
      }
      if (reference instanceof PsiReferenceEx) {
        final String s=((PsiReferenceEx)reference).getUnresolvedDescription();
        if (s != null)         description_buf.append(s);
      }
      if (description_buf.length() == 0) {
        boolean marked_qualified=false;
        if (reference instanceof PyQualifiedExpression) {
          final PyExpression qexpr=((PyQualifiedExpression)reference).getQualifier();
          if (qexpr != null) {
            PyType qtype=qexpr.getType();
            if (qtype != null) {
              if (qtype instanceof PyNoneType) {
                continue;
              }
              if (qtype instanceof PyClassType) {
                PyClass cls=((PyClassType)qtype).getPyClass();
                if (cls != null) {
                  if (reference.getElement().getParent() instanceof PyCallExpression) {
                    action=new AddMethodQuickFix(ref_text,cls);
                  }
 else                   action=new AddFieldQuickFix(ref_text,cls);
                }
                description_buf.append(PyBundle.message("INSP.unresolved.ref.$0.for.class.$1",ref_text,qtype.getName()));
                marked_qualified=true;
              }
 else {
                description_buf.append(PyBundle.message("INSP.cannot.find.$0.in.$1",ref_text,qtype.getName()));
                marked_qualified=true;
              }
            }
          }
        }
        if (!marked_qualified) {
          description_buf.append(PyBundle.message("INSP.unresolved.ref.$0",ref_text));
          action=new AddImportAction(reference);
        }
      }
      String description=description_buf.toString();
      ProblemHighlightType hl_type;
      if (severity == HighlightSeverity.WARNING) {
        hl_type=ProblemHighlightType.GENERIC_ERROR_OR_WARNING;
      }
 else {
        hl_type=ProblemHighlightType.LIKE_UNKNOWN_SYMBOL;
      }
      PsiElement point=node.getLastChild();
      if (point == null)       point=node;
      registerProblem(point,description,hl_type,hint_action,action);
    }
  }
}
