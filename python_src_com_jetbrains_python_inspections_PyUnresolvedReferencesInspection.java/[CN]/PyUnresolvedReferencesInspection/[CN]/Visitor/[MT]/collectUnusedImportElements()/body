{
  if (myAllImports.isEmpty()) {
    return Collections.emptyList();
  }
  final NameDefiner first=myAllImports.iterator().next();
  if (first.getContainingFile() instanceof PyExpressionCodeFragment || PydevConsoleRunner.isInPydevConsole(first)) {
    return Collections.emptyList();
  }
  List<PsiElement> result=new ArrayList<PsiElement>();
  Set<NameDefiner> unusedImports=new HashSet<NameDefiner>(myAllImports);
  unusedImports.removeAll(myUsedImports);
  Set<PyImportStatementBase> unusedStatements=new HashSet<PyImportStatementBase>();
  for (  NameDefiner unusedImport : unusedImports) {
    PyImportStatementBase importStatement=PsiTreeUtil.getParentOfType(unusedImport,PyImportStatementBase.class);
    if (importStatement != null && !unusedStatements.contains(importStatement)) {
      if (PsiTreeUtil.getParentOfType(importStatement,PyTryExceptStatement.class) != null) {
        continue;
      }
      if (unusedImport instanceof PyStarImportElement || areAllImportsUnused(importStatement,unusedImports)) {
        unusedStatements.add(importStatement);
        result.add(importStatement);
      }
 else {
        result.add(unusedImport);
      }
    }
  }
  return result;
}
