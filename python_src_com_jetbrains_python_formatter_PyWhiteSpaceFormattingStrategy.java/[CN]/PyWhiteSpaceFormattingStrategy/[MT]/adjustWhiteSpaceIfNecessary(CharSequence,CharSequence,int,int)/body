{
  TIntIntHashMap initialBackSlashes=countBackSlashes(text,startOffset,endOffset);
  if (initialBackSlashes.isEmpty()) {
    return whiteSpaceText;
  }
  final TIntIntHashMap newBackSlashes=countBackSlashes(whiteSpaceText,0,whiteSpaceText.length());
  final AtomicBoolean continueProcessing=new AtomicBoolean();
  initialBackSlashes.forEachKey(new TIntProcedure(){
    @Override public boolean execute(    int key){
      if (!newBackSlashes.containsKey(key)) {
        continueProcessing.set(true);
        return false;
      }
      return true;
    }
  }
);
  if (!continueProcessing.get()) {
    return whiteSpaceText;
  }
  StringBuilder result=new StringBuilder();
  int line=0;
  for (int i=0; i < whiteSpaceText.length(); i++) {
    char c=whiteSpaceText.charAt(i);
    if (c != '\n') {
      result.append(c);
      continue;
    }
    if (!newBackSlashes.contains(line++)) {
      result.append('\\');
    }
    result.append(c);
  }
  return result;
}
