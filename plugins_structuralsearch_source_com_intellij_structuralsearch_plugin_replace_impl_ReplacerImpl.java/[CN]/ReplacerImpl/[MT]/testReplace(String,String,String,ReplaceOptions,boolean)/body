{
  options=_options;
  options.getMatchOptions().setSearchPattern(what);
  options.setReplacement(by);
  replacementBuilder=null;
  context=null;
  options.getMatchOptions().clearVariableConstraints();
  MatcherImplUtil.transform(options.getMatchOptions());
  checkSupportedReplacementPattern(project,options.getMatchOptions().getSearchPattern(),by,options.getMatchOptions().getFileType());
  Matcher matcher=new Matcher(project);
  try {
    PsiElement[] elements=MatcherImplUtil.createTreeFromText(in,filePattern,options.getMatchOptions().getFileType(),project);
    PsiElement firstElement=elements[0];
    PsiElement lastElement=elements[elements.length - 1];
    PsiElement parent=firstElement.getParent();
    options.getMatchOptions().setScope(new LocalSearchScope(parent));
    options.getMatchOptions().setResultIsContextMatch(true);
    CollectingMatchResultSink sink=new CollectingMatchResultSink();
    matcher.testFindMatches(sink,options.getMatchOptions());
    final List<ReplacementInfo> resultPtrList=new LinkedList<ReplacementInfo>();
    for (    final MatchResult result : sink.getMatches()) {
      resultPtrList.add(buildReplacement(result));
    }
    sink.getMatches().clear();
    int startOffset=firstElement.getTextOffset();
    int endOffset=(filePattern) ? 0 : parent.getTextLength() - (lastElement.getTextOffset() + lastElement.getTextLength());
    PsiElement prevSibling=firstElement.getPrevSibling();
    if (prevSibling instanceof PsiWhiteSpace) {
      startOffset-=(prevSibling.getTextLength() - 1);
    }
    PsiElement nextSibling=lastElement.getNextSibling();
    if (nextSibling instanceof PsiWhiteSpace) {
      endOffset-=(nextSibling.getTextLength() - 1);
    }
    replaceAll(resultPtrList);
    String result=parent.getText();
    result=result.substring(startOffset);
    result=result.substring(0,result.length() - endOffset);
    return result;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return "";
  }
}
