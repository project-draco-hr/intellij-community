{
  try {
    Template template=TemplateManager.getInstance(project).createTemplate("","",search);
    Template template2=TemplateManager.getInstance(project).createTemplate("","",replacement);
    int segmentCount=template2.getSegmentsCount();
    for (int i=0; i < segmentCount; ++i) {
      final String replacementSegmentName=template2.getSegmentName(i);
      final int segmentCount2=template.getSegmentsCount();
      int j;
      for (j=0; j < segmentCount2; ++j) {
        final String searchSegmentName=template.getSegmentName(j);
        if (replacementSegmentName.equals(searchSegmentName))         break;
        if (replacementSegmentName.startsWith(searchSegmentName) && replacementSegmentName.charAt(searchSegmentName.length()) == '_') {
          try {
            Integer.parseInt(replacementSegmentName.substring(searchSegmentName.length() + 1));
            break;
          }
 catch (          NumberFormatException ex) {
          }
        }
      }
      if (j == segmentCount2) {
        throw new UnsupportedPatternException(SSRBundle.message("replacement.variable.is.not.defined.in.search.segmen.error.message",replacementSegmentName));
      }
    }
    if (fileType == StdFileTypes.JAVA) {
      PsiElement[] statements=MatcherImplUtil.createTreeFromText(search,false,fileType,project);
      boolean searchIsExpression=false;
      for (      PsiElement statement : statements) {
        if (statement.getLastChild() instanceof PsiErrorElement) {
          searchIsExpression=true;
          break;
        }
      }
      PsiElement[] statements2=MatcherImplUtil.createTreeFromText(replacement,false,fileType,project);
      boolean replaceIsExpression=false;
      for (      PsiElement statement : statements2) {
        if (statement.getLastChild() instanceof PsiErrorElement) {
          replaceIsExpression=true;
          break;
        }
      }
      if (searchIsExpression != replaceIsExpression) {
        throw new UnsupportedPatternException((searchIsExpression) ? SSRBundle.message("replacement.template.is.not.expression.error.message") : SSRBundle.message("search.template.is.not.expression.error.message"));
      }
    }
  }
 catch (  IncorrectOperationException ex) {
    throw new UnsupportedPatternException(SSRBundle.message("incorrect.pattern.message"));
  }
}
