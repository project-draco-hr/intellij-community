{
  boolean listContext=false;
  try {
    if (context == null)     context=new ReplacementContext(options,project);
    context.replacementInfo=info;
    PsiElement el=findRealSubstitutionElement(elementToReplace);
    listContext=isListContext(el);
    PsiElement[] statements=MatcherImplUtil.createTreeFromText(replacementToMake,el instanceof PsiMember && !isSymbolReplacement(el,context) ? MatcherImplUtil.TreeContext.Class : MatcherImplUtil.TreeContext.Block,options.getMatchOptions().getFileType(),project);
    if (listContext) {
      if (statements.length > 1) {
        elementParent.addRangeBefore(statements[0],statements[statements.length - 1],elementToReplace);
      }
 else       if (statements.length == 1) {
        PsiElement replacement=getMatchExpr(statements[0]);
        handleModifierList(el,replacement,context);
        replacement=handleSymbolReplacemenent(replacement,el,context);
        if (replacement instanceof PsiTryStatement) {
          final List<PsiCodeBlock> unmatchedCatchBlocks=el.getUserData(MatcherImplUtil.UNMATCHED_CATCH_BLOCK_CONTENT_VAR_KEY);
          final List<PsiParameter> unmatchedCatchParams=el.getUserData(MatcherImplUtil.UNMATCHED_CATCH_PARAM_CONTENT_VAR_KEY);
          final PsiCatchSection[] catches=((PsiTryStatement)replacement).getCatchSections();
          if (unmatchedCatchBlocks != null && unmatchedCatchParams != null) {
            for (int i=unmatchedCatchBlocks.size() - 1; i >= 0; --i) {
              final PsiParameter parameter=unmatchedCatchParams.get(i);
              final PsiCatchSection catchSection=PsiManager.getInstance(project).getElementFactory().createCatchSection((PsiClassType)parameter.getType(),parameter.getName(),null);
              catchSection.getCatchBlock().replace(unmatchedCatchBlocks.get(i));
              replacement.addAfter(catchSection,catches[catches.length - 1]);
              replacement.addBefore(createWhiteSpace(replacement),replacement.getLastChild());
            }
          }
        }
        final PsiElement inserted=elementParent.addBefore(replacement,elementToReplace);
        if (replacement instanceof PsiComment && (elementParent instanceof PsiIfStatement || elementParent instanceof PsiLoopStatement)) {
          elementParent.addAfter(createSemicolon(replacement),inserted);
        }
      }
    }
 else     if (statements.length > 0) {
      int i=0;
      while (true) {
        if (!(statements[i] instanceof PsiComment || statements[i] instanceof PsiWhiteSpace)) {
          break;
        }
        ++i;
      }
      if (i != 0) {
        elementParent.addRangeBefore(statements[0],statements[i - 1],el);
      }
      PsiElement replacement=getMatchExpr(statements[i]);
      if (replacement instanceof PsiStatement && !(replacement.getLastChild() instanceof PsiJavaToken)) {
        elementParent.addRangeBefore(replacement.getFirstChild(),replacement.getLastChild().getPrevSibling(),el);
        el.delete();
      }
 else {
        handleModifierList(el,replacement,context);
        if (replacement instanceof PsiClass) {
          final PsiStatement[] searchStatements=context.getCodeBlock().getStatements();
          if (searchStatements.length > 0 && searchStatements[0] instanceof PsiDeclarationStatement && ((PsiDeclarationStatement)searchStatements[0]).getDeclaredElements()[0] instanceof PsiClass) {
            final PsiClass replaceClazz=(PsiClass)replacement;
            final PsiClass queryClazz=(PsiClass)((PsiDeclarationStatement)searchStatements[0]).getDeclaredElements()[0];
            final PsiClass clazz=(PsiClass)el;
            if (replaceClazz.getExtendsList().getTextLength() == 0 && queryClazz.getExtendsList().getTextLength() == 0 && clazz.getExtendsList().getTextLength() != 0) {
              replaceClazz.addBefore(clazz.getExtendsList().getPrevSibling(),replaceClazz.getExtendsList());
              replaceClazz.getExtendsList().addRange(clazz.getExtendsList().getFirstChild(),clazz.getExtendsList().getLastChild());
            }
            if (replaceClazz.getImplementsList().getTextLength() == 0 && queryClazz.getImplementsList().getTextLength() == 0 && clazz.getImplementsList().getTextLength() != 0) {
              replaceClazz.addBefore(clazz.getImplementsList().getPrevSibling(),replaceClazz.getImplementsList());
              replaceClazz.getImplementsList().addRange(clazz.getImplementsList().getFirstChild(),clazz.getImplementsList().getLastChild());
            }
            if (replaceClazz.getTypeParameterList().getTextLength() == 0 && queryClazz.getTypeParameterList().getTextLength() == 0 && clazz.getTypeParameterList().getTextLength() != 0) {
              replaceClazz.getTypeParameterList().replace(clazz.getTypeParameterList());
            }
          }
        }
        replacement=handleSymbolReplacemenent(replacement,el,context);
        el.replace(replacement);
      }
    }
 else {
      final PsiElement nextSibling=el.getNextSibling();
      el.delete();
      if (nextSibling.isValid()) {
        if (nextSibling instanceof PsiWhiteSpace) {
          nextSibling.delete();
        }
      }
    }
  }
 catch (  IncorrectOperationException ex) {
    ex.printStackTrace();
  }
  if (listContext) {
    for (    SmartPsiElementPointer aMatchesPtrList : info.matchesPtrList) {
      try {
        PsiElement element=findRealSubstitutionElement(aMatchesPtrList.getElement());
        PsiElement firstToDelete=element;
        PsiElement lastToDelete=element;
        PsiElement prevSibling=element.getPrevSibling();
        PsiElement nextSibling=element.getNextSibling();
        if (prevSibling instanceof PsiWhiteSpace) {
          firstToDelete=prevSibling;
          prevSibling=prevSibling != null ? prevSibling.getPrevSibling() : null;
        }
 else         if (prevSibling == null && nextSibling instanceof PsiWhiteSpace) {
          lastToDelete=nextSibling;
        }
        if (element instanceof PsiExpression) {
          final PsiElement parent=element.getParent().getParent();
          if ((parent instanceof PsiCall || parent instanceof PsiAnonymousClass) && prevSibling instanceof PsiJavaToken && ((PsiJavaToken)prevSibling).getTokenType() == ElementType.COMMA) {
            firstToDelete=prevSibling;
          }
        }
        element.getParent().deleteChildRange(firstToDelete,lastToDelete);
      }
 catch (      IncorrectOperationException ex) {
        ex.printStackTrace();
      }
    }
  }
}
