{
  final PsiReferenceProvider bundleReferenceProvider=new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext context){
      return new PsiReference[]{new MyResourceBundleReference(element)};
    }
  }
;
  final XmlTagPattern.Capture resourceBundleTagPattern=XmlPatterns.xmlTag().withName("resource-bundle").withParent(XmlPatterns.xmlTag().withName("idea-plugin"));
  registrar.registerReferenceProvider(resourceBundleTagPattern,bundleReferenceProvider);
  ElementPattern bundlePattern=createPattern(EXTENSION_TAG_NAMES,"bundle","groupBundle");
  registrar.registerReferenceProvider(bundlePattern,bundleReferenceProvider,PsiReferenceRegistrar.DEFAULT_PRIORITY);
  ElementPattern typeNameBundlePattern=createPattern(TYPE_NAME_TAG,"resourceBundle");
  registrar.registerReferenceProvider(typeNameBundlePattern,bundleReferenceProvider,PsiReferenceRegistrar.DEFAULT_PRIORITY);
  final XmlTagPattern.Capture intentionActionBundleTagPattern=XmlPatterns.xmlTag().withName(INTENTION_ACTION_BUNDLE_TAG).withParent(XmlPatterns.xmlTag().withName(INTENTION_ACTION_TAG).withSuperParent(2,XmlPatterns.xmlTag().withName("idea-plugin")));
  registrar.registerReferenceProvider(intentionActionBundleTagPattern,bundleReferenceProvider,PsiReferenceRegistrar.DEFAULT_PRIORITY);
}
