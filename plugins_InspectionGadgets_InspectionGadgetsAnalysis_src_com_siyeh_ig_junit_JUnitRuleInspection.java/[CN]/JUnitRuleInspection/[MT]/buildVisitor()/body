{
  return new BaseInspectionVisitor(){
    @Override public void visitField(    PsiField field){
      final boolean ruleAnnotated=REPORT_RULE_PROBLEMS && AnnotationUtil.isAnnotated(field,RULE_FQN,false);
      final boolean classRuleAnnotated=REPORT_CLASS_RULE_PROBLEMS && AnnotationUtil.isAnnotated(field,CLASS_RULE_FQN,false);
      if (ruleAnnotated || classRuleAnnotated) {
        String annotation=ruleAnnotated ? RULE_FQN : CLASS_RULE_FQN;
        String errorMessage=getPublicStaticErrorMessage(field,ruleAnnotated,classRuleAnnotated);
        if (errorMessage != null) {
          registerError(field.getNameIdentifier(),InspectionGadgetsBundle.message("junit.rule.problem.descriptor",annotation,errorMessage),"Make field " + errorMessage,annotation);
        }
        final PsiClass aClass=PsiUtil.resolveClassInClassTypeOnly(field.getType());
        if (!InheritanceUtil.isInheritor(aClass,false,"org.junit.rules.TestRule") && !InheritanceUtil.isInheritor(aClass,false,"org.junit.rules.MethodRule")) {
          registerError(field.getNameIdentifier(),InspectionGadgetsBundle.message("junit.rule.type.problem.descriptor"));
        }
      }
    }
  }
;
}
