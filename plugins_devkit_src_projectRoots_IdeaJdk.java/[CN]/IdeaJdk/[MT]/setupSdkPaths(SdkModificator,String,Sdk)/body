{
  addClasses(sdkModificator,internalJava);
  addDocs(sdkModificator,internalJava);
  addSources(sdkModificator,internalJava);
  if (isFromIDEAProject(sdkHome)) {
    JarFileSystem jarFileSystem=JarFileSystem.getInstance();
    for (    String prefix : new String[]{"community",""}) {
      for (      String path : new String[]{"lib","build/kotlinc/lib/kotlin-runtime.jar"}) {
        File libDir=new File(sdkHome,FileUtil.toSystemDependentName(prefix + "/" + path));
        if (!libDir.exists())         continue;
        for (        File file : JBIterable.of(libDir.listFiles()).append(libDir)) {
          if (file.isDirectory())           continue;
          if (!StringUtil.endsWithIgnoreCase(file.getName(),".jar"))           continue;
          String jarPath=FileUtil.toSystemIndependentName(file.getPath()) + JarFileSystem.JAR_SEPARATOR;
          VirtualFile jar=jarFileSystem.findFileByPath(jarPath);
          if (jar == null)           continue;
          sdkModificator.addRoot(jar,OrderRootType.CLASSES);
        }
      }
    }
    LocalFileSystem localFileSystem=LocalFileSystem.getInstance();
    VirtualFile out=localFileSystem.refreshAndFindFileByPath(sdkHome + "/out/classes/production");
    if (out != null) {
      for (      VirtualFile dir : out.getChildren()) {
        if (!dir.isDirectory())         continue;
        sdkModificator.addRoot(dir,OrderRootType.CLASSES);
      }
    }
  }
 else {
    VirtualFile[] ideaLib=getIdeaLibrary(sdkHome);
    for (    VirtualFile aIdeaLib : ideaLib) {
      sdkModificator.addRoot(aIdeaLib,OrderRootType.CLASSES);
    }
    addSources(new File(sdkHome),sdkModificator);
  }
}
