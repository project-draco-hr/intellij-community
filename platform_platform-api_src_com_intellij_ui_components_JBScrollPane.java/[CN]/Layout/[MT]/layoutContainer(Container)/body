{
  JScrollPane pane=(JScrollPane)parent;
  Rectangle bounds=new Rectangle(pane.getWidth(),pane.getHeight());
  JBInsets.removeFrom(bounds,pane.getInsets());
  Object property=pane.getClientProperty(Flip.class);
  Flip flip=property instanceof Flip ? (Flip)property : Flip.NONE;
  boolean hsbOnTop=flip == Flip.BOTH || flip == Flip.VERTICAL;
  boolean vsbOnLeft=pane.getComponentOrientation().isLeftToRight() ? flip == Flip.BOTH || flip == Flip.HORIZONTAL : flip == Flip.NONE || flip == Flip.VERTICAL;
  Rectangle rowHeadBounds=new Rectangle(bounds.x,0,0,0);
  if (rowHead != null && rowHead.isVisible()) {
    rowHeadBounds.width=min(bounds.width,rowHead.getPreferredSize().width);
    bounds.width-=rowHeadBounds.width;
    if (vsbOnLeft) {
      rowHeadBounds.x+=bounds.width;
    }
 else {
      bounds.x+=rowHeadBounds.width;
    }
  }
  Rectangle colHeadBounds=new Rectangle(0,bounds.y,0,0);
  if (colHead != null && colHead.isVisible()) {
    colHeadBounds.height=min(bounds.height,colHead.getPreferredSize().height);
    bounds.height-=colHeadBounds.height;
    if (hsbOnTop) {
      colHeadBounds.y+=bounds.height;
    }
 else {
      bounds.y+=colHeadBounds.height;
    }
  }
  Border border=pane.getViewportBorder();
  Insets insets=border == null ? null : border.getBorderInsets(parent);
  JBInsets.removeFrom(bounds,insets);
  if (insets == null)   insets=EMPTY_INSETS;
  boolean isEmpty=bounds.width < 0 || bounds.height < 0;
  Component view=viewport == null ? null : viewport.getView();
  Dimension viewPreferredSize=view == null ? new Dimension() : view.getPreferredSize();
  if (view instanceof JComponent && !view.isPreferredSizeSet()) {
    JBInsets.removeFrom(viewPreferredSize,JBViewport.getViewInsets((JComponent)view));
  }
  Dimension viewportExtentSize=viewport == null ? new Dimension() : viewport.toViewCoordinates(bounds.getSize());
  Scrollable scrollable=null;
  boolean viewTracksViewportWidth=false;
  boolean viewTracksViewportHeight=false;
  if (!isEmpty && view instanceof Scrollable) {
    scrollable=(Scrollable)view;
    viewTracksViewportWidth=scrollable.getScrollableTracksViewportWidth();
    viewTracksViewportHeight=scrollable.getScrollableTracksViewportHeight();
  }
  Point viewLocation=new Point();
  if (view != null)   viewLocation=view.getLocation(viewLocation);
  boolean vsbOpaque=false;
  boolean vsbNeeded=false;
  int vsbPolicy=pane.getVerticalScrollBarPolicy();
  if (!isEmpty && vsbPolicy != VERTICAL_SCROLLBAR_NEVER) {
    vsbNeeded=vsbPolicy == VERTICAL_SCROLLBAR_ALWAYS || !viewTracksViewportHeight && (viewPreferredSize.height > viewportExtentSize.height || viewLocation.y != 0);
  }
  Rectangle vsbBounds=new Rectangle(0,bounds.y - insets.top,0,0);
  if (vsb != null) {
    if (!SystemInfo.isMac && view instanceof JTable)     vsb.setOpaque(true);
    vsbOpaque=vsb.isOpaque();
    if (vsbNeeded) {
      adjustForVSB(bounds,insets,vsbBounds,vsbOpaque,vsbOnLeft);
      if (vsbOpaque && viewport != null) {
        viewportExtentSize=viewport.toViewCoordinates(bounds.getSize());
      }
    }
  }
  boolean hsbOpaque=false;
  boolean hsbNeeded=false;
  int hsbPolicy=pane.getHorizontalScrollBarPolicy();
  if (!isEmpty && hsbPolicy != HORIZONTAL_SCROLLBAR_NEVER) {
    hsbNeeded=hsbPolicy == HORIZONTAL_SCROLLBAR_ALWAYS || !viewTracksViewportWidth && (viewPreferredSize.width > viewportExtentSize.width || viewLocation.x != 0);
  }
  Rectangle hsbBounds=new Rectangle(bounds.x - insets.left,0,0,0);
  if (hsb != null) {
    if (!SystemInfo.isMac && view instanceof JTable)     hsb.setOpaque(true);
    hsbOpaque=hsb.isOpaque();
    if (hsbNeeded) {
      adjustForHSB(bounds,insets,hsbBounds,hsbOpaque,hsbOnTop);
      if (hsbOpaque && viewport != null) {
        if (vsb != null && !vsbNeeded && vsbPolicy != VERTICAL_SCROLLBAR_NEVER) {
          viewportExtentSize=viewport.toViewCoordinates(bounds.getSize());
          vsbNeeded=viewPreferredSize.height > viewportExtentSize.height || viewLocation.y != 0;
          if (vsbNeeded)           adjustForVSB(bounds,insets,vsbBounds,vsbOpaque,vsbOnLeft);
        }
      }
    }
  }
  if (viewport != null) {
    viewport.setBounds(bounds);
    if (scrollable != null && hsbOpaque && vsbOpaque) {
      viewTracksViewportWidth=scrollable.getScrollableTracksViewportWidth();
      viewTracksViewportHeight=scrollable.getScrollableTracksViewportHeight();
      viewportExtentSize=viewport.toViewCoordinates(bounds.getSize());
      boolean vsbNeededOld=vsbNeeded;
      if (vsb != null && vsbPolicy == VERTICAL_SCROLLBAR_AS_NEEDED) {
        boolean vsbNeededNew=!viewTracksViewportHeight && viewPreferredSize.height > viewportExtentSize.height || viewLocation.y != 0;
        if (vsbNeeded != vsbNeededNew) {
          vsbNeeded=vsbNeededNew;
          if (vsbNeeded) {
            adjustForVSB(bounds,insets,vsbBounds,vsbOpaque,vsbOnLeft);
          }
 else           if (vsbOpaque) {
            bounds.width+=vsbBounds.width;
          }
          if (vsbOpaque)           viewportExtentSize=viewport.toViewCoordinates(bounds.getSize());
        }
      }
      boolean hsbNeededOld=hsbNeeded;
      if (hsb != null && hsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED) {
        boolean hsbNeededNew=!viewTracksViewportWidth && viewPreferredSize.width > viewportExtentSize.width || viewLocation.x != 0;
        if (hsbNeeded != hsbNeededNew) {
          hsbNeeded=hsbNeededNew;
          if (hsbNeeded) {
            adjustForHSB(bounds,insets,hsbBounds,hsbOpaque,hsbOnTop);
          }
 else           if (hsbOpaque) {
            bounds.height+=hsbBounds.height;
          }
          if (hsbOpaque && vsb != null && !vsbNeeded && vsbPolicy != VERTICAL_SCROLLBAR_NEVER) {
            viewportExtentSize=viewport.toViewCoordinates(bounds.getSize());
            vsbNeeded=viewPreferredSize.height > viewportExtentSize.height || viewLocation.y != 0;
            if (vsbNeeded)             adjustForVSB(bounds,insets,vsbBounds,vsbOpaque,vsbOnLeft);
          }
        }
      }
      if (hsbNeededOld != hsbNeeded || vsbNeededOld != vsbNeeded) {
        viewport.setBounds(bounds);
      }
    }
  }
  rowHeadBounds.y=bounds.y - insets.top;
  rowHeadBounds.height=bounds.height + insets.top + insets.bottom;
  if (rowHead != null) {
    rowHead.setBounds(rowHeadBounds);
    rowHead.putClientProperty(Alignment.class,vsbOnLeft ? Alignment.RIGHT : Alignment.LEFT);
  }
  colHeadBounds.x=bounds.x - insets.left;
  colHeadBounds.width=bounds.width + insets.left + insets.right;
  if (colHead != null) {
    colHead.setBounds(colHeadBounds);
    colHead.putClientProperty(Alignment.class,hsbOnTop ? Alignment.BOTTOM : Alignment.TOP);
  }
  int overlapWidth=0;
  int overlapHeight=0;
  if (vsbNeeded && !vsbOpaque && hsbNeeded&& !hsbOpaque) {
    overlapWidth=vsbBounds.width;
  }
  vsbBounds.y=bounds.y - insets.top;
  vsbBounds.height=bounds.height + insets.top + insets.bottom;
  if (vsb != null) {
    vsb.setVisible(vsbNeeded);
    if (vsbNeeded) {
      if (vsbOpaque && colHead != null && UIManager.getBoolean("ScrollPane.fillUpperCorner")) {
        if ((vsbOnLeft ? upperLeft : upperRight) == null) {
          if (!hsbOnTop)           vsbBounds.y-=colHeadBounds.height;
          vsbBounds.height+=colHeadBounds.height;
        }
      }
      int overlapY=!hsbOnTop ? 0 : overlapHeight;
      vsb.setBounds(vsbBounds.x,vsbBounds.y + overlapY,vsbBounds.width,vsbBounds.height - overlapHeight);
      vsb.putClientProperty(Alignment.class,vsbOnLeft ? Alignment.LEFT : Alignment.RIGHT);
    }
    if (!vsbOpaque) {
      if (!vsbOnLeft)       vsbBounds.x+=vsbBounds.width;
      vsbBounds.width=0;
    }
  }
  hsbBounds.x=bounds.x - insets.left;
  hsbBounds.width=bounds.width + insets.left + insets.right;
  if (hsb != null) {
    hsb.setVisible(hsbNeeded);
    if (hsbNeeded) {
      if (hsbOpaque && rowHead != null && UIManager.getBoolean("ScrollPane.fillLowerCorner")) {
        if ((vsbOnLeft ? lowerRight : lowerLeft) == null) {
          if (!vsbOnLeft)           hsbBounds.x-=rowHeadBounds.width;
          hsbBounds.width+=rowHeadBounds.width;
        }
      }
      int overlapX=!vsbOnLeft ? 0 : overlapWidth;
      hsb.setBounds(hsbBounds.x + overlapX,hsbBounds.y,hsbBounds.width - overlapWidth,hsbBounds.height);
      hsb.putClientProperty(Alignment.class,hsbOnTop ? Alignment.TOP : Alignment.BOTTOM);
    }
    if (!hsbOpaque) {
      if (!hsbOnTop)       hsbBounds.y+=hsbBounds.height;
      hsbBounds.height=0;
    }
  }
  if (lowerLeft != null) {
    lowerLeft.setBounds(vsbOnLeft ? vsbBounds.x : rowHeadBounds.x,hsbOnTop ? colHeadBounds.y : hsbBounds.y,vsbOnLeft ? vsbBounds.width : rowHeadBounds.width,hsbOnTop ? colHeadBounds.height : hsbBounds.height);
  }
  if (lowerRight != null) {
    lowerRight.setBounds(vsbOnLeft ? rowHeadBounds.x : vsbBounds.x,hsbOnTop ? colHeadBounds.y : hsbBounds.y,vsbOnLeft ? rowHeadBounds.width : vsbBounds.width,hsbOnTop ? colHeadBounds.height : hsbBounds.height);
  }
  if (upperLeft != null) {
    upperLeft.setBounds(vsbOnLeft ? vsbBounds.x : rowHeadBounds.x,hsbOnTop ? hsbBounds.y : colHeadBounds.y,vsbOnLeft ? vsbBounds.width : rowHeadBounds.width,hsbOnTop ? hsbBounds.height : colHeadBounds.height);
  }
  if (upperRight != null) {
    upperRight.setBounds(vsbOnLeft ? rowHeadBounds.x : vsbBounds.x,hsbOnTop ? hsbBounds.y : colHeadBounds.y,vsbOnLeft ? rowHeadBounds.width : vsbBounds.width,hsbOnTop ? hsbBounds.height : colHeadBounds.height);
  }
  if (!vsbOpaque && vsbNeeded || !hsbOpaque && hsbNeeded) {
    fixComponentZOrder(vsb,0);
    fixComponentZOrder(viewport,-1);
  }
}
