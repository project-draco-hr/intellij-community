{
  final int columns=Math.min(getMaxColumn(shape),COLUMNS_IN_DEFAULT_VIEW);
  int rows=Math.min(getMaxRow(shape),ROWS_IN_DEFAULT_VIEW);
  if (columns == 0 || rows == 0) {
    showError("Slice with zero axis shape.");
  }
  return new PagingTableModel(rows,columns,rendered,this,mainSlice){
    private final String myFormat=mainSlice.getFormat();
    private final String myBaseSlice=mainSlice.getBaseSlice();
    @Override protected NumpyArraySlice createChunk(    int rows,    int columns,    int rOffset,    int cOffset){
      return new NumpyArraySlice(myBaseSlice,rows,columns,rOffset,cOffset,myFormat,getInstance());
    }
    @Override protected Runnable getDataEvaluator(    final ArrayChunk chunk){
      final NumpyArraySlice arraySlice=new NumpyArraySlice(chunk.getBaseSlice(),chunk.getRows(),chunk.getColumns(),chunk.getRowOffset(),chunk.getColOffset(),myFormat,getInstance());
      if (arraySlice.getFormat().isEmpty()) {
        arraySlice.setFormat(getDefaultFormat());
      }
      return new Runnable(){
        public void run(){
          if (!arraySlice.dataFilled()) {
            arraySlice.fillData(new Runnable(){
              @Override public void run(){
                if (!myBaseSlice.equals(getModelFullChunk().getBaseSlice()) || !myFormat.equals(getModelFullChunk().getFormat())) {
                  return;
                }
                notifyChunkLoaded(arraySlice);
              }
            }
);
          }
        }
      }
;
    }
  }
;
}
