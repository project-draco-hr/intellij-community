{
  final int columns=Math.min(getMaxColumn(shape),COLUMNS_IN_DEFAULT_VIEW);
  int rows=Math.min(getMaxRow(shape),ROWS_IN_DEFAULT_VIEW);
  if (columns == 0 || rows == 0) {
    showError("Slice with zero axis shape.");
  }
  return new PagingTableModel(rows,columns,rendered,this,mainSlice){
    private final String myFormat=mainSlice.getFormat();
    private final String myBaseSlice=mainSlice.baseSlice;
    @Override protected NumpyArraySlice createChunk(    int rows,    int columns,    int rOffset,    int cOffset){
      return new NumpyArraySlice(myBaseSlice,rows,columns,rOffset,cOffset,myFormat,getInstance());
    }
    @Override protected Runnable getDataEvaluator(    final ComparableArrayChunk chunk){
      final NumpyArraySlice arraySlice=new NumpyArraySlice(chunk.baseSlice,chunk.rows,chunk.columns,chunk.rOffset,chunk.cOffset,myFormat,getInstance());
      if (arraySlice.getFormat().isEmpty()) {
        arraySlice.setFormat(getDefaultFormat());
      }
      return new Runnable(){
        public void run(){
          if (!arraySlice.dataFilled()) {
            arraySlice.fillData(new Runnable(){
              @Override public void run(){
                if (!myBaseSlice.equals(getModelFullChunk().baseSlice) || !myFormat.equals(getModelFullChunk().getFormat())) {
                  return;
                }
                myLastPresentation=arraySlice;
                lastFinished=true;
                getPendingSet().remove(chunk);
                notifyNextThread();
                fireTableCellUpdated(chunk.rOffset,chunk.cOffset);
                SwingUtilities.invokeLater(new Runnable(){
                  public void run(){
                    addDataInCache(arraySlice.rOffset,arraySlice.cOffset,arraySlice.getData());
                    myTable.setDefaultEditor(myTable.getColumnClass(0),getArrayTableCellEditor());
                    myTable.setDefaultRenderer(myTable.getColumnClass(0),myTableCellRenderer);
                  }
                }
);
              }
            }
);
          }
        }
      }
;
    }
  }
;
}
