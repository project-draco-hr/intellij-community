{
  @NonNls StringBuilder buffer=new StringBuilder();
  CodeStyleSettings styleSettings=CodeStyleSettingsManager.getSettings(myProject);
  if (shouldAddOverrideAnnotation(myClass)) {
    buffer.append("@Override\n");
  }
  ArrayList<PsiField> equalsFields=new ArrayList<PsiField>();
  ContainerUtil.addAll(equalsFields,myEqualsFields);
  Collections.sort(equalsFields,EqualsFieldsComparator.INSTANCE);
  final HashMap<String,Object> contextMap=new HashMap<String,Object>();
  final PsiType classType=JavaPsiFacade.getElementFactory(myClass.getProject()).createType(myClass);
  final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(myClass.getProject());
  String[] nameSuggestions=codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE,null,null,classType).names;
  String instanceBaseName=nameSuggestions.length > 0 && nameSuggestions[0].length() < 10 ? nameSuggestions[0] : "that";
  contextMap.put("instanceName",instanceBaseName);
  final PsiType objectType=PsiType.getJavaLangObject(myClass.getManager(),myClass.getResolveScope());
  nameSuggestions=codeStyleManager.suggestVariableName(VariableKind.PARAMETER,null,null,objectType).names;
  final String objectBaseName=nameSuggestions.length > 0 ? nameSuggestions[0] : "object";
  contextMap.put("baseParamName",objectBaseName);
  contextMap.put("superHasEquals",superMethodExists(getEqualsSignature(myProject,myClass.getResolveScope())));
  contextMap.put("checkParameterWithInstanceof",myCheckParameterWithInstanceof);
  final String methodText=GenerationUtil.velocityGenerateCode(myClass,equalsFields,myNonNullSet,new HashMap<String,String>(),contextMap,EqualsHashCodeTemplatesManager.getInstance().getDefaultEqualsTemplate().getTemplate(),0,false);
  buffer.append(methodText);
  PsiMethod result=myFactory.createMethodFromText(buffer.toString(),myClass);
  final PsiParameter parameter=result.getParameterList().getParameters()[0];
  PsiUtil.setModifierProperty(parameter,PsiModifier.FINAL,styleSettings.GENERATE_FINAL_PARAMETERS);
  PsiMethod method=(PsiMethod)myCodeStyleManager.reformat(result);
  method=(PsiMethod)myJavaCodeStyleManager.shortenClassReferences(method);
  return method;
}
