{
  @NonNls StringBuilder buffer=new StringBuilder();
  if (shouldAddOverrideAnnotation(myClass)) {
    buffer.append("@Override\n");
  }
  final HashMap<String,Object> contextMap=new HashMap<String,Object>();
  contextMap.put("superHasHashCode",mySuperHasHashCode);
  final String methodText=GenerationUtil.velocityGenerateCode(myClass,Arrays.asList(myHashCodeFields),myNonNullSet,new HashMap<String,String>(),contextMap,EqualsHashCodeTemplatesManager.getInstance().getDefaultHashcodeTemplate().getTemplate(),0,false,myUseAccessors);
  buffer.append(methodText);
  PsiMethod hashCode;
  try {
    hashCode=myFactory.createMethodFromText(buffer.toString(),null);
  }
 catch (  IncorrectOperationException e) {
    return null;
  }
  hashCode=(PsiMethod)myJavaCodeStyleManager.shortenClassReferences(hashCode);
  return (PsiMethod)myCodeStyleManager.reformat(hashCode);
}
