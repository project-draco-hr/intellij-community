{
  T component=(T)myInitializedComponents.get(componentInterface);
  if (component != null) {
    return component;
  }
synchronized (this) {
    if (myComponentsRegistry == null || !myComponentsRegistry.containsInterface(componentInterface)) {
      return null;
    }
synchronized (myComponentsRegistry.getComponentLock(componentInterface)) {
      component=(T)myInitializedComponents.get(componentInterface);
      if (component != null) {
        return component;
      }
      component=(T)getPicoContainer().getComponentInstance(componentInterface.getName());
      if (component == null) {
        LOG.error("Can't instantiate component for: " + componentInterface);
      }
      myInitializedComponents.put(componentInterface,component);
      if (component instanceof com.intellij.openapi.Disposable) {
        Disposer.register(this,(com.intellij.openapi.Disposable)component);
      }
      return component;
    }
  }
}
