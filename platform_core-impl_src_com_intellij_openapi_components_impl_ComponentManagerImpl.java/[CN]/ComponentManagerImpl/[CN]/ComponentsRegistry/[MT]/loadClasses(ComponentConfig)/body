{
  ClassLoader loader=config.getClassLoader();
  try {
    final Class<?> interfaceClass=Class.forName(config.getInterfaceClass(),true,loader);
    final Class<?> implementationClass=Comparing.equal(config.getInterfaceClass(),config.getImplementationClass()) ? interfaceClass : StringUtil.isEmpty(config.getImplementationClass()) ? null : Class.forName(config.getImplementationClass(),true,loader);
    boolean overrides=Boolean.parseBoolean(config.options.get("overrides"));
    MutablePicoContainer picoContainer=getPicoContainer();
    if (overrides) {
      ComponentAdapter oldAdapter=picoContainer.getComponentAdapterOfType(interfaceClass);
      if (oldAdapter == null) {
        throw new RuntimeException(config + " does not override anything");
      }
      picoContainer.unregisterComponent(oldAdapter.getComponentKey());
      myInterfaceToClassMap.remove(interfaceClass);
      myComponentClassToConfig.remove(oldAdapter.getComponentImplementation());
      myComponentInterfaces.remove(interfaceClass);
    }
    if (implementationClass != null) {
      if (myInterfaceToClassMap.get(interfaceClass) != null) {
        throw new RuntimeException("Component already registered: " + interfaceClass.getName());
      }
      picoContainer.registerComponent(new ComponentConfigComponentAdapter(config,implementationClass));
      myInterfaceToClassMap.put(interfaceClass,implementationClass);
      myComponentClassToConfig.put(implementationClass,config);
      myComponentInterfaces.add(interfaceClass);
    }
  }
 catch (  Throwable t) {
    handleInitComponentError(t,null,config);
  }
}
