{
  myConfig=config;
  final String componentKey=config.getInterfaceClass();
  myDelegate=new ConstructorInjectionComponentAdapter(componentKey,implementationClass,null,true){
    @Override public Object getComponentInstance(    PicoContainer picoContainer) throws PicoInitializationException, PicoIntrospectionException, ProcessCanceledException {
      Object componentInstance=null;
      try {
        long startTime=System.nanoTime();
        componentInstance=super.getComponentInstance(picoContainer);
        if (!myInitialized) {
          if (myInitializing) {
            String errorMessage="Cyclic component initialization: " + componentKey;
            if (myConfig.pluginDescriptor != null) {
              LOG.error(new PluginException(errorMessage,myConfig.pluginDescriptor.getPluginId()));
            }
 else {
              LOG.error(new Throwable(errorMessage));
            }
          }
          try {
            myInitializing=true;
            myComponentsRegistry.registerComponentInstance(componentInstance);
            ProgressIndicator indicator=getProgressIndicator();
            if (indicator != null) {
              indicator.checkCanceled();
              setProgressDuringInit(indicator);
            }
            initializeComponent(componentInstance,false);
            if (componentInstance instanceof BaseComponent) {
              ((BaseComponent)componentInstance).initComponent();
            }
            long ms=(System.nanoTime() - startTime) / 1000000;
            if (ms > 10 && logSlowComponents()) {
              LOG.info(componentInstance.getClass().getName() + " initialized in " + ms+ " ms");
            }
          }
  finally {
            myInitializing=false;
          }
          myInitialized=true;
        }
      }
 catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      StateStorageException e) {
        throw e;
      }
catch (      Throwable t) {
        handleInitComponentError(t,componentKey,config);
      }
      return componentInstance;
    }
  }
;
}
