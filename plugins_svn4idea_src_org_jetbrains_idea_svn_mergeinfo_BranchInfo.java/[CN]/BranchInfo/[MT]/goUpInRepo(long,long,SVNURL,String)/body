{
  final String branchAsString=branchUrl.toString();
  final String keyString=branchAsString + "@" + targetRevision;
  final Set<Long> mergeInfo=myPathMergedMap.get(keyString);
  if (mergeInfo != null) {
    return SvnMergeInfoCache.MergeCheckResult.getInstance(mergeInfo.contains(revisionAsked));
  }
  SvnTarget target=SvnTarget.fromURL(branchUrl);
  PropertyValue mergeinfoProperty=myVcs.getFactory(target).createPropertyClient().getProperty(target,SvnPropertyKeys.MERGE_INFO,false,SVNRevision.create(targetRevision));
  if (mergeinfoProperty == null) {
    final String newTrunkUrl=SVNPathUtil.removeTail(trunkUrl).trim();
    final SVNURL newBranchUrl=branchUrl.removePathTail();
    final String absoluteTrunk=SVNPathUtil.append(myInfo.getRepoUrl(),newTrunkUrl);
    if ((1 >= newTrunkUrl.length()) || (myInfo.getRepoUrl().length() >= newBranchUrl.toString().length()) || (newBranchUrl.toString().equals(absoluteTrunk))) {
      return SvnMergeInfoCache.MergeCheckResult.NOT_MERGED;
    }
    return goUpInRepo(revisionAsked,targetRevision,newBranchUrl,newTrunkUrl);
  }
  return processMergeinfoProperty(keyString,revisionAsked,mergeinfoProperty,trunkUrl,false);
}
