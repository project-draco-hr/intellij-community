{
  if (isDisabled())   return;
  if (!myVirtualFile.isValid()) {
    log("installTracker() for file " + myVirtualFile.getPath() + " failed: virtual file not valid");
    reportTrackerBaseLoadFailed();
    return;
  }
  final Pair<VcsRevisionNumber,String> baseRevision=myStatusProvider.getBaseRevision(myVirtualFile);
  if (baseRevision == null) {
    log("installTracker() for file " + myVirtualFile.getPath() + " failed: null returned for base revision number");
    reportTrackerBaseLoadFailed();
    return;
  }
  final LineStatusTracker.RevisionPack revisionPack=new LineStatusTracker.RevisionPack(myLoadCounter,baseRevision.first);
  ++myLoadCounter;
  final String converted=StringUtil.convertLineSeparators(baseRevision.second);
  final Runnable runnable=new Runnable(){
    public void run(){
synchronized (myLock) {
        log("initializing tracker for file " + myVirtualFile.getPath());
        final LineStatusTracker tracker=myLineStatusTrackers.get(myDocument);
        if (tracker != null) {
          tracker.initialize(converted,revisionPack);
        }
      }
    }
  }
;
  nonModalAliveInvokeLater(runnable);
}
