{
  final List<PyHierarchyNodeDescriptor> descriptors=new ArrayList<PyHierarchyNodeDescriptor>();
  if (descriptor instanceof PyHierarchyNodeDescriptor) {
    final PyHierarchyNodeDescriptor pyDescriptor=(PyHierarchyNodeDescriptor)descriptor;
    final PsiElement element=pyDescriptor.getPsiElement();
    final boolean isCallable=element instanceof PyFunction || element instanceof PyClass || element instanceof PyFile;
    HierarchyNodeDescriptor nodeDescriptor=getBaseDescriptor();
    if (!(element instanceof PyElement) || !isCallable || nodeDescriptor == null) {
      return ArrayUtil.EMPTY_OBJECT_ARRAY;
    }
    final List<PsiElement> children=getChildren((PyElement)element);
    final HashMap<PsiElement,PyHierarchyNodeDescriptor> callerToDescriptorMap=new HashMap<PsiElement,PyHierarchyNodeDescriptor>();
    PsiElement baseClass=element instanceof PyFunction ? ((PyFunction)element).getContainingClass() : null;
    for (    PsiElement caller : children) {
      if (isInScope(baseClass,caller,myScopeType)) {
        PyHierarchyNodeDescriptor callerDescriptor=callerToDescriptorMap.get(caller);
        if (callerDescriptor == null) {
          callerDescriptor=new PyHierarchyNodeDescriptor(descriptor,caller,false);
          callerToDescriptorMap.put(caller,callerDescriptor);
          descriptors.add(callerDescriptor);
        }
      }
    }
  }
  return ArrayUtil.toObjectArray(descriptors);
}
