{
  JPanel rootPane=new JPanel(new BorderLayout());
  mySplitter=new Splitter(true);
  mySplitter.setHonorComponentsMinimumSize(true);
  mySplitter.setFirstComponent(myBrowser);
  mySplitter.setSecondComponent(myCommitMessageArea);
  initMainSplitter();
  rootPane.add(mySplitter,BorderLayout.CENTER);
  myChangesInfoCalculator=new ChangeInfoCalculator();
  myLegend=new CommitLegendPanel(myChangesInfoCalculator);
  JPanel legendPanel=new JPanel(new BorderLayout());
  legendPanel.add(myLegend.getComponent(),BorderLayout.EAST);
  myBrowser.getBottomPanel().add(legendPanel,BorderLayout.SOUTH);
  JPanel infoPanel=new JPanel(new BorderLayout());
  JScrollPane optionsPane=ScrollPaneFactory.createScrollPane(myAdditionalOptionsPanel,true);
  optionsPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  optionsPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
  optionsPane.getVerticalScrollBar().setUI(ButtonlessScrollBarUI.createTransparent());
  infoPanel.add(optionsPane,BorderLayout.CENTER);
  rootPane.add(infoPanel,BorderLayout.EAST);
  infoPanel.setBorder(IdeBorderFactory.createEmptyBorder(0,10,0,0));
  final JPanel wrapper=new JPanel(new GridBagLayout());
  final GridBagConstraints gb=new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0);
  final JPanel panel=new JPanel(new BorderLayout());
  panel.add(wrapper,BorderLayout.WEST);
  rootPane.add(panel,BorderLayout.SOUTH);
  myWarningLabel.setBorder(BorderFactory.createEmptyBorder(5,5,0,5));
  wrapper.add(myWarningLabel,gb);
  myDetailsSplitter=new SplitterWithSecondHideable(true,"Details",rootPane,new OnOffListener<Integer>(){
    @Override public void on(    Integer integer){
      if (integer == 0)       return;
      myDiffDetails.refresh();
      mySplitter.skipNextLayouting();
      myDetailsSplitter.getComponent().skipNextLayouting();
      final Dimension dialogSize=getSize();
      setSize(dialogSize.width,dialogSize.height + integer);
      repaint();
    }
    @Override public void off(    Integer integer){
      if (integer == 0)       return;
      myDiffDetails.clear();
      mySplitter.skipNextLayouting();
      myDetailsSplitter.getComponent().skipNextLayouting();
      final Dimension dialogSize=getSize();
      setSize(dialogSize.width,dialogSize.height - integer);
      repaint();
    }
  }
){
    @Override protected RefreshablePanel createDetails(){
      final JPanel panel=JBUI.Panels.simplePanel(myDiffDetails.getComponent());
      return new RefreshablePanel(){
        @Override public boolean refreshDataSynch(){
          return false;
        }
        @Override public void dataChanged(){
        }
        @Override public void refresh(){
        }
        @Override public JPanel getPanel(){
          return panel;
        }
        @Override public void away(){
        }
        @Override public boolean isStillValid(        Object o){
          return false;
        }
        @Override public void dispose(){
        }
      }
;
    }
    @Override protected float getSplitterInitialProportion(){
      float value=PropertiesComponent.getInstance().getFloat(DETAILS_SPLITTER_PROPORTION_OPTION,DETAILS_SPLITTER_PROPORTION_OPTION_DEFAULT);
      if (value <= 0.05 || value >= 0.95) {
        return DETAILS_SPLITTER_PROPORTION_OPTION_DEFAULT;
      }
      return value;
    }
  }
;
  return myDetailsSplitter.getComponent();
}
