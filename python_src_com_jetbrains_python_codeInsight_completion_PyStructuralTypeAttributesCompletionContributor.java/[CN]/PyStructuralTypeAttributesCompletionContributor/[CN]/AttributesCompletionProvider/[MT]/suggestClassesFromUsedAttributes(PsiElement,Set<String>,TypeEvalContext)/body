{
  final Set<PyClass> candidates=Sets.newHashSet();
  final Map<PyClass,Set<PyClass>> ancestorsCache=Maps.newHashMap();
  for (  String attribute : seenAttrs) {
    if (COMMON_OBJECT_ATTRIBUTES.contains(attribute)) {
      candidates.add(PyBuiltinCache.getInstance(anchor).getClass(PyNames.OBJECT));
    }
 else {
      final Collection<PyClass> declaringClasses=PyClassAttributesIndex.find(attribute,anchor.getProject());
      candidates.addAll(declaringClasses);
    }
  }
  final Set<PyClass> suitableClasses=Sets.newHashSet();
  for (  PyClass candidate : candidates) {
    if (PyUserSkeletonsUtil.isUnderUserSkeletonsDirectory(candidate.getContainingFile())) {
      continue;
    }
    if (getAllInheritedAttributeNames(candidate,context,ancestorsCache).containsAll(seenAttrs)) {
      suitableClasses.add(candidate);
    }
  }
  return Collections.unmodifiableSet(suitableClasses);
}
