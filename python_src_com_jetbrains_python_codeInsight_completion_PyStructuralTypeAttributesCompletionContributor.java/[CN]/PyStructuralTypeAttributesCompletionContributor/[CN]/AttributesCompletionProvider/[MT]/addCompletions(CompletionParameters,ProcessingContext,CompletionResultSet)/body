{
  final PsiElement position=parameters.getPosition();
  final PyReferenceExpression refExpr=as(position.getParent(),PyReferenceExpression.class);
  if (refExpr == null || !refExpr.isQualified() || parameters.getCompletionType() != CompletionType.SMART) {
    return;
  }
  final TypeEvalContext typeEvalContext=TypeEvalContext.codeCompletion(refExpr.getProject(),parameters.getOriginalFile());
  final PyStructuralType structType=as(typeEvalContext.getType(refExpr.getQualifier()),PyStructuralType.class);
  if (structType != null) {
    final Set<String> names=Sets.newHashSet(structType.getAttributeNames());
    names.remove(refExpr.getReferencedName());
    for (    PyClass pyClass : suggestClassesFromUsedAttributes(refExpr,names,typeEvalContext)) {
      final PsiElement origPosition=parameters.getOriginalPosition();
      final String prefix;
      if (origPosition != null && origPosition.getNode().getElementType() == PyTokenTypes.IDENTIFIER) {
        prefix=origPosition.getText();
      }
 else {
        prefix="";
      }
      final Object[] variants=new PyClassTypeImpl(pyClass,false).getCompletionVariants(prefix,position,context);
      for (      Object variant : variants) {
        if (variant instanceof LookupElement) {
          result.addElement((LookupElement)variant);
        }
      }
    }
  }
}
