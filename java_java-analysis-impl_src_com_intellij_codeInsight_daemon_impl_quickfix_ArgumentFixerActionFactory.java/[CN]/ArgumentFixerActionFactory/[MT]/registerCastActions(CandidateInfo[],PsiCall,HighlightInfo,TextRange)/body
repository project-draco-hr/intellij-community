{
  if (candidates.length == 0)   return;
  List<CandidateInfo> methodCandidates=new ArrayList<>(Arrays.asList(candidates));
  PsiExpressionList list=call.getArgumentList();
  if (list == null)   return;
  PsiExpression[] expressions=list.getExpressions();
  if (expressions.length == 0)   return;
  nextMethod:   for (int i=methodCandidates.size() - 1; i >= 0; i--) {
    CandidateInfo candidate=methodCandidates.get(i);
    PsiMethod method=(PsiMethod)candidate.getElement();
    PsiSubstitutor substitutor=candidate.getSubstitutor();
    PsiParameter[] parameters=method.getParameterList().getParameters();
    if (expressions.length != parameters.length) {
      methodCandidates.remove(i);
      continue;
    }
    for (int j=0; j < parameters.length; j++) {
      PsiParameter parameter=parameters[j];
      PsiExpression expression=expressions[j];
      PsiType exprType=expression.getType();
      PsiType parameterType=substitutor.substitute(parameter.getType());
      if (exprType == null || parameterType == null || !areTypesConvertible(exprType,parameterType,call)) {
        methodCandidates.remove(i);
        continue nextMethod;
      }
    }
  }
  if (methodCandidates.isEmpty())   return;
  try {
    for (int i=0; i < expressions.length; i++) {
      PsiExpression expression=expressions[i];
      PsiType exprType=expression.getType();
      Set<String> suggestedCasts=new THashSet<>();
      for (      CandidateInfo candidate : methodCandidates) {
        PsiMethod method=(PsiMethod)candidate.getElement();
        PsiSubstitutor substitutor=candidate.getSubstitutor();
        PsiParameter[] parameters=method.getParameterList().getParameters();
        PsiType originalParameterType=parameters[i].getType();
        PsiType parameterType=substitutor.substitute(originalParameterType);
        if (parameterType instanceof PsiWildcardType)         continue;
        if (!GenericsUtil.isFromExternalTypeLanguage(parameterType))         continue;
        if (suggestedCasts.contains(parameterType.getCanonicalText()))         continue;
        if (exprType instanceof PsiPrimitiveType && parameterType instanceof PsiClassType) {
          PsiType unboxedParameterType=PsiPrimitiveType.getUnboxedType(parameterType);
          if (unboxedParameterType != null) {
            parameterType=unboxedParameterType;
          }
        }
        if (Comparing.equal(exprType,parameterType))         continue;
        PsiCall newCall=(PsiCall)call.copy();
        PsiExpression modifiedExpression=getModifiedArgument(expression,parameterType);
        if (modifiedExpression == null)         continue;
        PsiExpressionList argumentList=newCall.getArgumentList();
        if (argumentList == null)         continue;
        argumentList.getExpressions()[i].replace(modifiedExpression);
        JavaResolveResult resolveResult=newCall.resolveMethodGenerics();
        if (resolveResult.getElement() != null && resolveResult.isValidResult()) {
          suggestedCasts.add(parameterType.getCanonicalText());
          QuickFixAction.registerQuickFixAction(highlightInfo,fixRange,createFix(list,i,parameterType));
        }
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
