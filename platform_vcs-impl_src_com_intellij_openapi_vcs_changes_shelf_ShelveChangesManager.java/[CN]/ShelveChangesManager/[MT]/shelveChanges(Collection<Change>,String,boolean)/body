{
  final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
  if (progressIndicator != null) {
    progressIndicator.setText(VcsBundle.message("shelve.changes.progress.title"));
  }
  final List<Change> textChanges=new ArrayList<Change>();
  final List<ShelvedBinaryFile> binaryFiles=new ArrayList<ShelvedBinaryFile>();
  for (  Change change : changes) {
    if (ChangesUtil.getFilePath(change).isDirectory()) {
      continue;
    }
    if (change.getBeforeRevision() instanceof BinaryContentRevision || change.getAfterRevision() instanceof BinaryContentRevision) {
      binaryFiles.add(shelveBinaryFile(change));
    }
 else {
      textChanges.add(change);
    }
  }
  final ShelvedChangeList changeList;
  try {
    File patchPath=getPatchPath(commitMessage);
    ProgressManager.checkCanceled();
    final List<FilePatch> patches=IdeaTextPatchBuilder.buildPatch(myProject,textChanges,myProject.getBaseDir().getPresentableUrl(),false);
    ProgressManager.checkCanceled();
    CommitContext commitContext=new CommitContext();
    baseRevisionsOfDvcsIntoContext(textChanges,commitContext);
    myFileProcessor.savePathFile(new CompoundShelfFileProcessor.ContentProvider(){
      @Override public void writeContentTo(      final Writer writer,      CommitContext commitContext) throws IOException {
        UnifiedDiffWriter.write(myProject,patches,writer,"\n",commitContext);
      }
    }
,patchPath,commitContext);
    changeList=new ShelvedChangeList(patchPath.toString(),commitMessage.replace('\n',' '),binaryFiles);
    ProgressManager.checkCanceled();
    myShelvedChangeLists.add(changeList);
    if (rollback) {
      final String operationName=UIUtil.removeMnemonic(RollbackChangesDialog.operationNameByChanges(myProject,changes));
      boolean modalContext=ApplicationManager.getApplication().isDispatchThread() && LaterInvocator.isInModalContext();
      if (progressIndicator != null) {
        progressIndicator.startNonCancelableSection();
      }
      new RollbackWorker(myProject,operationName,modalContext).doRollback(changes,true,null,VcsBundle.message("shelve.changes.action"));
    }
  }
  finally {
    notifyStateChanged();
  }
  return changeList;
}
