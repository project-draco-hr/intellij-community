{
  super(project);
  myPathMacroSubstitutor=PathMacroManager.getInstance(myProject).createTrackingSubstitutor();
  myBus=bus;
  mySchemeManager=SchemesManagerFactory.getInstance(project).create(SHELVE_MANAGER_DIR_PATH,new BaseSchemeProcessor<ShelvedChangeList>(){
    @Nullable @Override public ShelvedChangeList readScheme(    @NotNull Element element) throws InvalidDataException {
      return readOneShelvedChangeList(element);
    }
    @Override public Parent writeScheme(    @NotNull ShelvedChangeList scheme) throws WriteExternalException {
      Element child=new Element(ELEMENT_CHANGELIST);
      scheme.writeExternal(child);
      myPathMacroSubstitutor.collapsePaths(child);
      return child;
    }
  }
);
  myFileProcessor=new CompoundShelfFileProcessor(mySchemeManager.getRootDirectory());
  ChangeListManager.getInstance(project).addDirectoryToIgnoreImplicitly(mySchemeManager.getRootDirectory().getAbsolutePath());
  mySchemeManager.loadSchemes();
}
