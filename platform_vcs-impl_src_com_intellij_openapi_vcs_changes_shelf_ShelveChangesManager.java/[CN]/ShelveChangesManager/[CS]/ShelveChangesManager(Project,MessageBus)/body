{
  super(project);
  myBus=bus;
  BaseSchemeProcessor<ShelvedChangeList> schemeProcessor=new BaseSchemeProcessor<ShelvedChangeList>(){
    @Nullable @Override public ShelvedChangeList readScheme(    @NotNull Element element) throws InvalidDataException, IOException, JDOMException {
      return readOneShelvedChangeList(element);
    }
    @Override public Parent writeScheme(    @NotNull ShelvedChangeList scheme) throws WriteExternalException {
      Element child=new Element(ELEMENT_CHANGELIST);
      scheme.writeExternal(child);
      return child;
    }
  }
;
  mySchemesManager=SchemesManagerFactory.getInstance().createSchemesManager(SHELVE_MANAGER_DIR_PATH,schemeProcessor,RoamingType.PER_PLATFORM);
  if (project.isDefault()) {
    myFileProcessor=new CompoundShelfFileProcessor(null,PathManager.getConfigPath() + File.separator + SHELF_DIR_NAME);
  }
 else {
    if (project instanceof ProjectEx && ((ProjectEx)project).getStateStore().getStorageScheme() == StorageScheme.DIRECTORY_BASED) {
      myFileProcessor=new CompoundShelfFileProcessor(mySchemesManager.getRootDirectory().getPath());
    }
 else {
      myFileProcessor=new CompoundShelfFileProcessor();
    }
  }
  mySchemesManager.loadSchemes();
}
