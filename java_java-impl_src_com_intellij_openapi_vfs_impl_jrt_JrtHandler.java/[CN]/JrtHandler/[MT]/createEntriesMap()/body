{
  Map<String,EntryInfo> map=ContainerUtil.newHashMap();
  map.put("",createRootEntry());
  Path root=getFileSystem().getPath("/modules");
  if (!Files.exists(root))   throw new FileNotFoundException("JRT root missing");
  Files.walkFileTree(root,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {
      process(dir,attrs);
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      process(file,attrs);
      return FileVisitResult.CONTINUE;
    }
    private void process(    Path entry,    BasicFileAttributes attrs) throws IOException {
      int pathLength=entry.getNameCount();
      if (pathLength > 1) {
        Path relativePath=entry.subpath(1,pathLength);
        String path=relativePath.toString();
        if (!map.containsKey(path)) {
          EntryInfo parent=map.get(pathLength > 2 ? relativePath.getParent().toString() : "");
          if (parent == null)           throw new IOException("Out of order: " + entry);
          String shortName=entry.getFileName().toString();
          long modified=attrs.lastModifiedTime().toMillis();
          map.put(path,new EntryInfo(shortName,attrs.isDirectory(),attrs.size(),modified,parent));
        }
      }
    }
  }
);
  return map;
}
