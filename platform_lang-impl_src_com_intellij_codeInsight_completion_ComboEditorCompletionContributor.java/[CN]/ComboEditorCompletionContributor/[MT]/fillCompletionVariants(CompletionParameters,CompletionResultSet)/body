{
  if (parameters.getInvocationCount() == 0) {
    return;
  }
  final PsiFile file=parameters.getOriginalFile();
  final Document document=PsiDocumentManager.getInstance(file.getProject()).getDocument(file);
  if (document != null) {
    JComboBox comboBox=document.getUserData(StringComboboxEditor.COMBO_BOX_KEY);
    boolean plainPrefixMatcher=false;
    if (comboBox == null) {
      comboBox=document.getUserData(StringComboboxEditor.PLAIN_COMBO_BOX_KEY);
      plainPrefixMatcher=true;
    }
    if (comboBox != null) {
      String substring=document.getText().substring(0,parameters.getOffset());
      final CompletionResultSet resultSet=plainPrefixMatcher ? result.withPrefixMatcher(new PlainPrefixMatcher(substring)) : result.withPrefixMatcher(substring);
      final int count=comboBox.getItemCount();
      for (int i=0; i < count; i++) {
        final Object o=comboBox.getItemAt(i);
        if (o instanceof String) {
          resultSet.addElement(PrioritizedLookupElement.withPriority(LookupElementBuilder.create((String)o).withInsertHandler(new InsertHandler<LookupElement>(){
            @Override public void handleInsert(            final InsertionContext context,            final LookupElement item){
              final Document document=context.getEditor().getDocument();
              document.deleteString(context.getEditor().getCaretModel().getOffset(),document.getTextLength());
            }
          }
),count - i));
        }
      }
      result.stopHere();
    }
  }
}
