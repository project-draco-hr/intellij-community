{
  return new FluentIterable<T>(){
    @Override public Iterator<T> iterator(){
      final Iterator<Pair<T,Iterator<T>>> iterator=stack.descendingIterator();
      iterator.next();
      return new FilteringIterator<T,T>(new UnmodifiableIterator<T>(null){
        @Override public boolean hasNext(){
          return iterator.hasNext();
        }
        @Override public T next(){
          return iterator.next().first;
        }
      }
,Condition.NOT_NULL);
    }
  }
;
}
