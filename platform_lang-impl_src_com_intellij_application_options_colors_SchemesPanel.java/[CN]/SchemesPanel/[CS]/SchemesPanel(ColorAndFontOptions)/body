{
  super(new BorderLayout());
  myOptions=options;
  JPanel schemesGroup=new JPanel(new BorderLayout());
  JPanel panel=new JPanel(new BorderLayout());
  schemesGroup.add(createSchemePanel(),BorderLayout.NORTH);
  schemesGroup.add(panel,BorderLayout.CENTER);
  add(schemesGroup,BorderLayout.CENTER);
  mySchemeComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    @NotNull ActionEvent e){
      String selectedName=getSelectedSchemeName();
      if (selectedName != null) {
        EditorColorsScheme selected=myOptions.selectScheme(selectedName);
        final boolean readOnly=ColorAndFontOptions.isReadOnly(selected);
        myDeleteButton.setEnabled(!readOnly && ColorAndFontOptions.canBeDeleted(selected));
        myHintLabel.setVisible(readOnly);
        if (areSchemesLoaded()) {
          myDispatcher.getMulticaster().schemeChanged(SchemesPanel.this);
        }
        AbstractColorsScheme originalScheme=selected instanceof AbstractColorsScheme ? ((AbstractColorsScheme)selected).getOriginal() : null;
        myResetButton.setEnabled(!readOnly && selectedName.startsWith(SchemeManager.EDITABLE_COPY_PREFIX) && originalScheme instanceof ReadOnlyColorsScheme);
      }
    }
  }
);
}
