{
  myIndexer=indexer;
  final File storageDir=getIndexRoot(compileContext);
  final Set<String> containingFileNames=listFiles(storageDir);
  if (!containingFileNames.contains("version") || !containingFileNames.contains(IndexState.STATE_FILE_NAME)) {
    throw new IllegalStateException("version or state file for index " + indexer.getIndexCanonicalName() + " not found in "+ storageDir.getAbsolutePath());
  }
  ClassFilesIndexStorageWriter<K,V> index=null;
  IOException exception=null;
  LOG.debug("start open... " + indexer.getIndexCanonicalName());
  myMappings=compileContext.getProjectDescriptor().dataManager.getMappings();
  for (int attempt=0; attempt < 2; attempt++) {
    try {
      index=new ClassFilesIndexStorageWriter<K,V>(storageDir,myIndexer.getKeyDescriptor(),myIndexer.getDataExternalizer(),myMappings);
      break;
    }
 catch (    final IOException e) {
      exception=e;
      PersistentHashMap.deleteFilesStartingWith(ClassFilesIndexStorageBase.getIndexFile(storageDir));
    }
  }
  LOG.debug("opened " + indexer.getIndexCanonicalName());
  if (index == null) {
    throw new RuntimeException(exception);
  }
  myIndex=index;
  myEmpty=IndexState.EXIST != IndexState.load(storageDir) || exception != null;
  IndexState.CORRUPTED.save(storageDir);
}
