{
  if (file instanceof XmlFile) {
    int offset=editor.getCaretModel().getOffset();
    final Ref<TemplateImpl> generatedTemplate=new Ref<TemplateImpl>();
    CustomTemplateCallback callback=createCallback(editor,file,generatedTemplate);
    PsiElement context=callback.getContext();
    ZenCodingGenerator generator=ZenCodingTemplate.findApplicableDefaultGenerator(context,false);
    if (generator != null) {
      final String templatePrefix=new ZenCodingTemplate().computeTemplateKeyWithoutContextChecking(callback);
      if (templatePrefix != null) {
        List<TemplateImpl> regularTemplates=TemplateManagerImpl.listApplicableTemplates(file,offset,false);
        boolean regularTemplateWithSamePrefixExists=!ContainerUtil.filter(regularTemplates,new Condition<TemplateImpl>(){
          @Override public boolean value(          @NotNull TemplateImpl template){
            return templatePrefix.equals(template.getKey());
          }
        }
).isEmpty();
        if (!regularTemplateWithSamePrefixExists) {
          ZenCodingTemplate.expand(templatePrefix,callback,null,generator,Collections.<ZenCodingFilter>emptyList(),false,0);
          TemplateImpl template=generatedTemplate.get();
          String templateText=template != null ? template.getTemplateText() : null;
          if (!StringUtil.isEmpty(templateText)) {
            return reformatTemplateText(file,templateText);
          }
        }
      }
    }
  }
  return null;
}
