{
  myDataIndexer=new DataIndexer<String,Void,FileContent>(){
    @Override @NotNull public Map<String,Void> map(    @NotNull final FileContent inputData){
      final Set<String> namespaces=new THashSet<>();
      final XmlFileHeader header=NanoXmlUtil.parseHeader(CharArrayUtil.readerFromCharSequence(inputData.getContentAsText()));
      ContainerUtil.addIfNotNull(namespaces,header.getPublicId());
      ContainerUtil.addIfNotNull(namespaces,header.getSystemId());
      ContainerUtil.addIfNotNull(namespaces,header.getRootTagNamespace());
      final String tagName=header.getRootTagLocalName();
      if (StringUtil.isNotEmpty(tagName)) {
        final THashMap<String,Void> result=new THashMap<>();
        final DomApplicationComponent component=DomApplicationComponent.getInstance();
        for (        final DomFileDescription description : component.getFileDescriptions(tagName)) {
          final String[] strings=description.getAllPossibleRootTagNamespaces();
          if (strings.length == 0 || ContainerUtil.intersects(Arrays.asList(strings),namespaces)) {
            result.put(description.getRootElementClass().getName(),null);
          }
        }
        for (        final DomFileDescription description : component.getAcceptingOtherRootTagNameDescriptions()) {
          final String[] strings=description.getAllPossibleRootTagNamespaces();
          if (strings.length == 0 || ContainerUtil.intersects(Arrays.asList(strings),namespaces)) {
            result.put(description.getRootElementClass().getName(),null);
          }
        }
        return result;
      }
      return Collections.emptyMap();
    }
  }
;
}
