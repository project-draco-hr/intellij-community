{
  final VirtualFile vcsRoot=VcsUtil.getVcsRootFor(myProject,VcsUtil.getFilePath(file.getPath()));
  if (vcsRoot == null) {
    throw new VcsException("vcs root is null for " + file);
  }
  final HgFile hgFile=new HgFile(vcsRoot,VfsUtilCore.virtualToIoFile(file));
  HgFile fileToAnnotate=revision instanceof HgFileRevision ? HgUtil.getFileNameInTargetRevision(myProject,((HgFileRevision)revision).getRevisionNumber(),hgFile) : new HgFile(vcsRoot,HgUtil.getOriginalFileName(hgFile.toFilePath(),ChangeListManager.getInstance(myProject)));
  final List<HgAnnotationLine> annotationResult=(new HgAnnotateCommand(myProject)).execute(fileToAnnotate,revision);
  final List<HgFileRevision> logResult;
  try {
    HgLogCommand logCommand=new HgLogCommand(myProject);
    logCommand.setFollowCopies(true);
    List<String> args=new ArrayList<String>();
    if (revision == null) {
      args.add("--rev");
      args.add("0::.");
    }
    logResult=logCommand.execute(fileToAnnotate,-1,false,args);
  }
 catch (  HgCommandException e) {
    throw new VcsException("Can not annotate, " + HgVcsMessages.message("hg4idea.error.log.command.execution"),e);
  }
  VcsRevisionNumber revisionNumber=revision == null ? new HgWorkingCopyRevisionsCommand(myProject).tip(vcsRoot) : revision.getRevisionNumber();
  return new HgAnnotation(myProject,hgFile,annotationResult,logResult,revisionNumber);
}
