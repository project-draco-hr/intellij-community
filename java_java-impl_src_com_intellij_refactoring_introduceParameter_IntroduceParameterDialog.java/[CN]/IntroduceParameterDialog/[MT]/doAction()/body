{
  final JavaRefactoringSettings settings=JavaRefactoringSettings.getInstance();
  settings.INTRODUCE_PARAMETER_REPLACE_FIELDS_WITH_GETTERS=myPanel.getReplaceFieldsWithGetters();
  if (myCbDeclareFinal != null && myCbDeclareFinal.isEnabled()) {
    settings.INTRODUCE_PARAMETER_CREATE_FINALS=Boolean.valueOf(myCbDeclareFinal.isSelected());
  }
  if (myCbCollapseToLambda.isVisible()) {
    PropertiesComponent.getInstance(myProject).setValue(INTRODUCE_PARAMETER_LAMBDA,myCbCollapseToLambda.isSelected());
  }
  myPanel.saveSettings(settings);
  myNameSuggestionsManager.nameSelected();
  boolean isDeleteLocalVariable=false;
  PsiExpression parameterInitializer=myExpression;
  if (myLocalVar != null) {
    if (myPanel.isUseInitializer()) {
      parameterInitializer=myLocalVar.getInitializer();
    }
    isDeleteLocalVariable=myPanel.isDeleteLocalVariable();
  }
  final PsiType selectedType=getSelectedType();
  final IntroduceParameterProcessor processor=new IntroduceParameterProcessor(myProject,myMethodToReplaceIn,myMethodToSearchFor,parameterInitializer,myExpression,myLocalVar,isDeleteLocalVariable,getParameterName(),myPanel.isReplaceAllOccurences(),myPanel.getReplaceFieldsWithGetters(),isDeclareFinal(),myPanel.isGenerateDelegate(),selectedType,myPanel.getParametersToRemove());
  if (myCbCollapseToLambda.isVisible() && myCbCollapseToLambda.isSelected() && parameterInitializer != null) {
    PsiExpression lambda=AnonymousCanBeLambdaInspection.replaceAnonymousWithLambda(parameterInitializer,selectedType);
    if (lambda != null) {
      final PsiParameter[] lambdaParameters=((PsiLambdaExpression)lambda).getParameterList().getParameters();
      final PsiCallExpression toConvertCall=LambdaCanBeMethodReferenceInspection.canBeMethodReferenceProblem(((PsiLambdaExpression)lambda).getBody(),lambdaParameters,selectedType);
      if (toConvertCall != null) {
        final String methodReferenceText=LambdaCanBeMethodReferenceInspection.createMethodReferenceText(toConvertCall,selectedType,lambdaParameters);
        if (methodReferenceText != null) {
          lambda=JavaPsiFacade.getElementFactory(getProject()).createExpressionFromText(methodReferenceText,lambda);
        }
      }
      processor.setParameterInitializer(lambda);
    }
  }
  invokeRefactoring(processor);
}
