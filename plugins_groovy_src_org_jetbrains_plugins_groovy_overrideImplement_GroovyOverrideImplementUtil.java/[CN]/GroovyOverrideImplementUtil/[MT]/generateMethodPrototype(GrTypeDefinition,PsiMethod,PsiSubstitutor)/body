{
  final Project project=aClass.getProject();
  final boolean isAbstract=method.hasModifierProperty(PsiModifier.ABSTRACT);
  String templName=isAbstract ? JavaTemplateUtil.TEMPLATE_IMPLEMENTED_METHOD_BODY : JavaTemplateUtil.TEMPLATE_OVERRIDDEN_METHOD_BODY;
  final FileTemplate template=FileTemplateManager.getInstance().getCodeTemplate(templName);
  final GrMethod result=(GrMethod)GenerateMembersUtil.substituteGenericMethod(method,substitutor,aClass);
  setupModifierList(result);
  setupOverridingMethodBody(project,method,result,template,substitutor);
  setupReturnType(result,method);
  setupAnnotations(aClass,method,result);
  PsiTypeParameterList typeParameterList=result.getTypeParameterList();
  if (typeParameterList != null && typeParameterList.getTextLength() == 0) {
    typeParameterList.delete();
  }
  GroovyChangeContextUtil.encodeContextInfo(result);
  return result;
}
