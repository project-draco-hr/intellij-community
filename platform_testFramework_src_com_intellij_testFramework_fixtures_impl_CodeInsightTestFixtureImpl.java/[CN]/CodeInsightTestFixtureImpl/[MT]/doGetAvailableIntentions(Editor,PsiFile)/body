{
  ShowIntentionsPass.IntentionsInfo intentions=new ShowIntentionsPass.IntentionsInfo();
  ShowIntentionsPass.getActionsToShow(editor,file,intentions,-1);
  List<HighlightInfo.IntentionActionDescriptor> descriptors=new ArrayList<HighlightInfo.IntentionActionDescriptor>();
  descriptors.addAll(intentions.intentionsToShow);
  descriptors.addAll(intentions.errorFixesToShow);
  descriptors.addAll(intentions.inspectionFixesToShow);
  descriptors.addAll(intentions.guttersToShow);
  final int fileOffset=editor.getCaretModel().getOffset();
  PsiElement hostElement=file.getViewProvider().findElementAt(fileOffset,file.getLanguage());
  PsiElement injectedElement=InjectedLanguageUtil.findElementAtNoCommit(file,fileOffset);
  PsiFile injectedFile=injectedElement != null ? injectedElement.getContainingFile() : null;
  Editor injectedEditor=InjectedLanguageUtil.getInjectedEditorForInjectedFile(editor,injectedFile);
  List<IntentionAction> result=new ArrayList<IntentionAction>();
  List<HighlightInfo> infos=DaemonCodeAnalyzerEx.getInstanceEx(file.getProject()).getFileLevelHighlights(file.getProject(),file);
  for (  HighlightInfo info : infos) {
    for (    Pair<HighlightInfo.IntentionActionDescriptor,TextRange> pair : info.quickFixActionRanges) {
      HighlightInfo.IntentionActionDescriptor actionInGroup=pair.first;
      final IntentionAction action=actionInGroup.getAction();
      if (ShowIntentionActionsHandler.availableFor(file,editor,action) || (injectedElement != null && hostElement != injectedElement && ShowIntentionActionsHandler.availableFor(injectedFile,injectedEditor,action))) {
        descriptors.add(actionInGroup);
      }
    }
  }
  for (  HighlightInfo.IntentionActionDescriptor descriptor : descriptors) {
    result.add(descriptor.getAction());
    if (injectedElement != null && injectedElement != hostElement) {
      List<IntentionAction> options=descriptor.getOptions(injectedElement,injectedEditor);
      if (options != null) {
        for (        IntentionAction option : options) {
          if (ShowIntentionActionsHandler.availableFor(injectedFile,injectedEditor,option)) {
            result.add(option);
          }
        }
      }
    }
    if (hostElement != null) {
      List<IntentionAction> options=descriptor.getOptions(hostElement,editor);
      if (options != null) {
        for (        IntentionAction option : options) {
          if (ShowIntentionActionsHandler.availableFor(file,editor,option)) {
            result.add(option);
          }
        }
      }
    }
  }
  return result;
}
