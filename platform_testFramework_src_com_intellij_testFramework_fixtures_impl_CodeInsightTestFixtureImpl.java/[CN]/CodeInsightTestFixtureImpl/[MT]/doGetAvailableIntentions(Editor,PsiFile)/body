{
  ShowIntentionsPass.IntentionsInfo intentions=new ShowIntentionsPass.IntentionsInfo();
  ShowIntentionsPass.getActionsToShow(editor,file,intentions,-1);
  List<IntentionAction> result=new ArrayList<IntentionAction>();
  IntentionListStep intentionListStep=new IntentionListStep(null,intentions,editor,file,file.getProject());
  for (  Map.Entry<IntentionAction,List<IntentionAction>> entry : intentionListStep.getActionsWithSubActions().entrySet()) {
    result.add(entry.getKey());
    result.addAll(entry.getValue());
  }
  List<HighlightInfo> infos=DaemonCodeAnalyzerEx.getInstanceEx(file.getProject()).getFileLevelHighlights(file.getProject(),file);
  for (  HighlightInfo info : infos) {
    for (    Pair<HighlightInfo.IntentionActionDescriptor,TextRange> pair : info.quickFixActionRanges) {
      HighlightInfo.IntentionActionDescriptor actionInGroup=pair.first;
      if (actionInGroup.getAction().isAvailable(file.getProject(),editor,file)) {
        result.add(actionInGroup.getAction());
        List<IntentionAction> options=actionInGroup.getOptions(file,editor);
        if (options != null) {
          for (          IntentionAction subAction : options) {
            if (subAction.isAvailable(file.getProject(),editor,file)) {
              result.add(subAction);
            }
          }
        }
      }
    }
  }
  return result;
}
