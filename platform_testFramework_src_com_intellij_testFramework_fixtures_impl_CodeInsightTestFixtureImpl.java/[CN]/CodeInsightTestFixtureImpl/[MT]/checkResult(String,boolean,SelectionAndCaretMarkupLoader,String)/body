{
  assertInitialized();
  Project project=getProject();
  PsiFile file=getFile();
  Editor editor=getEditor();
  if (editor instanceof EditorWindow) {
    editor=((EditorWindow)editor).getDelegate();
    file=InjectedLanguageUtil.getTopLevelFile(file);
  }
  project.getComponent(PostprocessReformattingAspect.class).doPostponedFormatting();
  if (stripTrailingSpaces) {
    actualText=stripTrailingSpaces(actualText);
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  String newFileText1=loader.newFileText;
  if (stripTrailingSpaces) {
    newFileText1=stripTrailingSpaces(newFileText1);
  }
  actualText=StringUtil.convertLineSeparators(actualText);
  if (!Comparing.equal(newFileText1,actualText)) {
    if (loader.filePath != null) {
      throw new FileComparisonFailure(expectedFile,newFileText1,actualText,loader.filePath);
    }
 else {
      throw new ComparisonFailure(expectedFile,newFileText1,actualText);
    }
  }
  boolean hasChecks=false;
  for (int i=0; i < loader.caretState.carets.size(); i++) {
    EditorTestUtil.Caret expected=loader.caretState.carets.get(i);
    if (expected.offset != null || expected.selection != null) {
      hasChecks=true;
      break;
    }
  }
  if (!hasChecks) {
    return;
  }
  CaretModel caretModel=editor.getCaretModel();
  List<Caret> allCarets=new ArrayList<Caret>(caretModel.getAllCarets());
  assertEquals("Unexpected number of carets",loader.caretState.carets.size(),allCarets.size());
  for (int i=0; i < loader.caretState.carets.size(); i++) {
    EditorTestUtil.Caret expected=loader.caretState.carets.get(i);
    String caretDescription=loader.caretState.carets.size() == 1 ? "" : "(" + (i + 1) + "/"+ loader.caretState.carets.size()+ ") ";
    if (expected.offset != null) {
      final int tabSize=CodeStyleSettingsManager.getSettings(getProject()).getIndentOptions(StdFileTypes.JAVA).TAB_SIZE;
      int caretLine=StringUtil.offsetToLineNumber(loader.newFileText,expected.offset);
      int caretCol=EditorUtil.calcColumnNumber(null,loader.newFileText,StringUtil.lineColToOffset(loader.newFileText,caretLine,0),expected.offset,tabSize);
      final int actualLine=allCarets.get(i).getLogicalPosition().line;
      final int actualCol=allCarets.get(i).getLogicalPosition().column;
      boolean caretPositionEquals=caretLine == actualLine && caretCol == actualCol;
      assertTrue("Caret" + caretDescription + " position in "+ expectedFile+ " differs. Expected "+ genCaretPositionPresentation(caretLine,caretCol)+ ". Actual "+ genCaretPositionPresentation(actualLine,actualCol),caretPositionEquals);
    }
    if (expected.selection != null) {
      int selStartLine=StringUtil.offsetToLineNumber(loader.newFileText,expected.selection.getStartOffset());
      int selStartCol=expected.selection.getStartOffset() - StringUtil.lineColToOffset(loader.newFileText,selStartLine,0);
      int selEndLine=StringUtil.offsetToLineNumber(loader.newFileText,expected.selection.getEndOffset());
      int selEndCol=expected.selection.getEndOffset() - StringUtil.lineColToOffset(loader.newFileText,selEndLine,0);
      int selectionStart;
      int selectionEnd;
      if (editor.getSelectionModel().hasBlockSelection()) {
        int[] starts=editor.getSelectionModel().getBlockSelectionStarts();
        int[] ends=editor.getSelectionModel().getBlockSelectionEnds();
        selectionStart=starts[starts.length - 1];
        selectionEnd=ends[ends.length - 1];
      }
 else {
        selectionStart=allCarets.get(i).getSelectionStart();
        selectionEnd=allCarets.get(i).getSelectionEnd();
      }
      final int selStartLineActual=StringUtil.offsetToLineNumber(loader.newFileText,selectionStart);
      final int selStartColActual=selectionStart - StringUtil.lineColToOffset(loader.newFileText,selStartLineActual,0);
      final int selEndLineActual=StringUtil.offsetToLineNumber(loader.newFileText,selectionEnd);
      final int selEndColActual=selectionEnd - StringUtil.lineColToOffset(loader.newFileText,selEndLineActual,0);
      final boolean selectionEquals=selStartCol == selStartColActual && selStartLine == selStartLineActual && selEndCol == selEndColActual && selEndLine == selEndLineActual;
      assertTrue(caretDescription + "selection in " + expectedFile+ " differs. Expected "+ genSelectionPresentation(selStartLine,selStartCol,selEndLine,selEndCol)+ ". Actual "+ genSelectionPresentation(selStartLineActual,selStartColActual,selEndLineActual,selEndColActual),selectionEquals);
    }
 else     if (editor != null) {
      assertFalse(caretDescription + "has no selection in " + expectedFile,editor.getSelectionModel().hasSelection());
    }
  }
}
