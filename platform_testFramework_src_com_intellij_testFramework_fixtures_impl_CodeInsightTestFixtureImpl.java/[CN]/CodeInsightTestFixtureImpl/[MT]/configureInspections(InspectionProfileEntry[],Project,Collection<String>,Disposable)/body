{
  InspectionToolWrapper[] wrapped=ContainerUtil.map2Array(tools,InspectionToolWrapper.class,new Function<InspectionProfileEntry,InspectionToolWrapper>(){
    @Override public InspectionToolWrapper fun(    InspectionProfileEntry tool){
      return InspectionToolRegistrar.wrapTool(tool);
    }
  }
);
  final InspectionProfileImpl profile=InspectionProfileImpl.createSimple(LightPlatformTestCase.PROFILE,project,wrapped);
  profile.disableToolByDefault(new ArrayList<String>(disabledInspections),project);
  final InspectionProfileManager inspectionProfileManager=InspectionProfileManager.getInstance();
  final Profile oldRootProfile=inspectionProfileManager.getRootProfile();
  inspectionProfileManager.addProfile(profile);
  Disposer.register(parentDisposable,new Disposable(){
    @Override public void dispose(){
      inspectionProfileManager.deleteProfile(profile.getName());
      inspectionProfileManager.setRootProfile(oldRootProfile.getName());
      clearAllToolsIn(InspectionProfileImpl.getDefaultProfile(),project);
    }
  }
);
  inspectionProfileManager.setRootProfile(profile.getName());
  InspectionProfileImpl.initAndDo(new Computable(){
    @Override public Object compute(){
      InspectionProjectProfileManager.getInstance(project).updateProfile(profile);
      InspectionProjectProfileManager.getInstance(project).setProjectProfile(profile.getName());
      return null;
    }
  }
);
}
