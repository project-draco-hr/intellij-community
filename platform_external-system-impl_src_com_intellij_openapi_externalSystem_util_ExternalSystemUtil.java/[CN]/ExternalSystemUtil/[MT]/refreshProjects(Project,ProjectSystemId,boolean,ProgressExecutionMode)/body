{
  ExternalSystemManager<?,?,?,?,?> manager=ExternalSystemApiUtil.getManager(externalSystemId);
  if (manager == null) {
    return;
  }
  AbstractExternalSystemSettings<?,?,?> settings=manager.getSettingsProvider().fun(project);
  final Collection<? extends ExternalProjectSettings> projectsSettings=settings.getLinkedProjectsSettings();
  if (projectsSettings.isEmpty()) {
    return;
  }
  final ProjectDataManager projectDataManager=ServiceManager.getService(ProjectDataManager.class);
  final int[] counter=new int[1];
  ExternalProjectRefreshCallback callback=new MyMultiExternalProjectRefreshCallback(project,projectDataManager,counter,externalSystemId);
  Map<String,Long> modificationStamps=manager.getLocalSettingsProvider().fun(project).getExternalConfigModificationStamps();
  Set<String> toRefresh=ContainerUtilRt.newHashSet();
  for (  ExternalProjectSettings setting : projectsSettings) {
    Long oldModificationStamp=modificationStamps.get(setting.getExternalProjectPath());
    long currentModificationStamp=getTimeStamp(setting,externalSystemId);
    if (force || oldModificationStamp == null || oldModificationStamp < currentModificationStamp) {
      toRefresh.add(setting.getExternalProjectPath());
    }
  }
  if (!toRefresh.isEmpty()) {
    ExternalSystemNotificationManager.getInstance(project).clearNotifications(null,NotificationSource.PROJECT_SYNC,externalSystemId);
    counter[0]=toRefresh.size();
    for (    String path : toRefresh) {
      refreshProject(project,externalSystemId,path,callback,false,progressExecutionMode);
    }
  }
}
