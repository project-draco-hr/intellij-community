{
  refreshProject(project,externalSystemId,externalProjectPath,new ExternalProjectRefreshCallback(){
    @Override public void onSuccess(    @Nullable final DataNode<ProjectData> externalProject){
      if (externalProject == null) {
        return;
      }
      final boolean synchronous=progressExecutionMode == ProgressExecutionMode.MODAL_SYNC;
      ExternalSystemApiUtil.executeProjectChangeAction(synchronous,new DisposeAwareProjectChange(project){
        @Override public void execute(){
          ProjectRootManagerEx.getInstanceEx(project).mergeRootsChangesDuring(new Runnable(){
            @Override public void run(){
              final ProjectDataManager projectDataManager=ServiceManager.getService(ProjectDataManager.class);
              projectDataManager.importData(externalProject,project,platformFacade,synchronous);
            }
          }
);
        }
      }
);
    }
    @Override public void onFailure(    @NotNull String errorMessage,    @Nullable String errorDetails){
    }
  }
,isPreviewMode,progressExecutionMode,true);
}
