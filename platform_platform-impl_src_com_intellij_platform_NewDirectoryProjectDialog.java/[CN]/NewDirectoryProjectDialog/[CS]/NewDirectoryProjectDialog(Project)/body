{
  super(project,true);
  setTitle(IdeBundle.message("new.dir.project.title"));
  init();
  myLocationLabel.setLabelFor(myLocationField.getChildComponent());
  String title=IdeBundle.message("new.dir.project.chooser.title");
  new LocationNameFieldsBinding(project,myLocationField,myProjectNameTextField,ProjectUtil.getBaseDir(),title);
  DefaultComboBoxModel model=new DefaultComboBoxModel();
  model.addElement(EMPTY_PROJECT_GENERATOR);
  DirectoryProjectGenerator[] generators=Extensions.getExtensions(DirectoryProjectGenerator.EP_NAME);
  if (generators.length > 0) {
    List<DirectoryProjectGenerator> primaryGenerators=ContainerUtil.newArrayList();
    List<DirectoryProjectGenerator> otherGenerators=ContainerUtil.newArrayList();
    for (    DirectoryProjectGenerator generator : generators) {
      if (generator instanceof HideableProjectGenerator && ((HideableProjectGenerator)generator).isHidden()) {
        continue;
      }
      if (generator instanceof WebProjectGenerator && ((WebProjectGenerator)generator).isPrimaryGenerator()) {
        primaryGenerators.add(generator);
      }
 else {
        otherGenerators.add(generator);
      }
    }
    for (    DirectoryProjectGenerator generator : primaryGenerators)     model.addElement(generator);
    for (    DirectoryProjectGenerator generator : otherGenerators)     model.addElement(generator);
  }
  myProjectTypeComboBox.setModel(model);
  myProjectTypeComboBox.setRenderer(createProjectTypeListCellRenderer());
  myLocationField.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      checkValid();
    }
  }
);
  myProjectTypeComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    @NotNull ActionEvent e){
      checkValid();
    }
  }
);
}
