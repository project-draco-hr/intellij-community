{
  Project project=repository.getProject();
  VirtualFile root=repository.getRoot();
  HgGraftCommand command=new HgGraftCommand(project,repository);
  HgCommandResult result=command.startGrafting(hashes);
  boolean hasConflicts=!HgConflictResolver.findConflicts(project,root).isEmpty();
  if (!hasConflicts && HgErrorUtil.isCommandExecutionFailed(result)) {
    new HgCommandResultNotifier(project).notifyError(result,"Hg Error","Couldn't  graft.");
    return;
  }
  while (hasConflicts) {
    final UpdatedFiles updatedFiles=UpdatedFiles.create();
    new HgConflictResolver(project,updatedFiles).resolve(root);
    hasConflicts=!HgConflictResolver.findConflicts(project,root).isEmpty();
    if (!hasConflicts) {
      result=command.continueGrafting();
    }
    hasConflicts=!HgConflictResolver.findConflicts(project,root).isEmpty();
    if (hasConflicts) {
      new HgCommandResultNotifier(project).notifyError(result,"Hg Error","Couldn't continue grafting");
      break;
    }
  }
  repository.update();
  root.refresh(true,true);
}
