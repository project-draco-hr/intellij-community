{
  if (!visited.add(expression)) {
    return null;
  }
  if (expression instanceof PsiLiteralExpression) {
    return evaluatePsiLiteralExpression(expression);
  }
  if (expression instanceof PsiReferenceExpression) {
    PsiElement resolve=((PsiReferenceExpression)expression).resolve();
    if (resolve instanceof PsiVariable) {
      PsiExpression initializer=((PsiVariable)resolve).getInitializer();
      if (initializer != null) {
        Pair<PsiElement,String> expr=evaluateExpression(initializer,visited);
        if (expr != null)         return expr;
      }
    }
  }
  if (expression instanceof PsiMethodCallExpression) {
    final PsiElement element=((PsiMethodCallExpression)expression).getMethodExpression().resolve();
    if (element instanceof PsiMethod) {
      PsiCodeBlock body=((PsiMethod)element).getBody();
      if (body != null) {
        final Set<PsiExpression> returns=new com.intellij.util.containers.HashSet<>();
        body.accept(new JavaRecursiveElementWalkingVisitor(){
          @Override public void visitClass(          PsiClass aClass){
          }
          @Override public void visitLambdaExpression(          PsiLambdaExpression expression){
          }
          @Override public void visitReturnStatement(          PsiReturnStatement statement){
            PsiExpression returnValue=statement.getReturnValue();
            if (returnValue != null) {
              returns.add(returnValue);
            }
          }
        }
);
        for (        PsiExpression psiExpression : returns) {
          Pair<PsiElement,String> pair=evaluateExpression(psiExpression,visited);
          if (pair != null) {
            return pair;
          }
        }
      }
      return evaluateExpression(element,visited);
    }
    return null;
  }
  Pair<PsiElement,String> constantExpression=evaluateConstantExpression(expression);
  if (constantExpression != null) {
    return constantExpression;
  }
  if (expression instanceof PsiBinaryExpression) {
    PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
    return evaluatePolyadicExpressions(expression,visited,binaryExpression.getLOperand(),binaryExpression.getROperand());
  }
  if (expression instanceof PsiPolyadicExpression) {
    return evaluatePolyadicExpressions(expression,visited,((PsiPolyadicExpression)expression).getOperands());
  }
  Collection<? extends PsiElement> elements=DfaUtil.getPossibleInitializationElements(expression);
  for (  PsiElement element : elements) {
    Pair<PsiElement,String> expr=evaluateExpression(element,visited);
    if (expr != null)     return expr;
  }
  return null;
}
