{
  final Editor editor=context.getEditor();
  final char completionChar=context.getCompletionChar();
  final PsiFile file=context.getFile();
  final TailType tailType=completionChar == '(' ? TailType.NONE : completionChar == ':' ? TailType.COND_EXPR_COLON : LookupItem.handleCompletionChar(context.getEditor(),item,completionChar);
  final boolean hasTail=tailType != TailType.NONE && tailType != TailType.UNKNOWN;
  final boolean smart=completionChar == Lookup.COMPLETE_STATEMENT_SELECT_CHAR;
  if (completionChar == '(' || completionChar == '.' || completionChar == ',' || completionChar == ';' || completionChar == ':' || completionChar == ' ') {
    context.setAddCompletionChar(false);
  }
  if (hasTail) {
    hasParams=false;
  }
  final boolean needRightParenth=forceClosingParenthesis || !smart && (CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET || !hasParams && completionChar != '(');
  context.commitDocument();
  final CommonCodeStyleSettings styleSettings=context.getCodeStyleSettings();
  final PsiElement elementAt=file.findElementAt(context.getStartOffset());
  if (elementAt == null || !(elementAt.getParent() instanceof PsiMethodReferenceExpression)) {
    final boolean hasParameters=hasParams;
    final boolean spaceBetweenParentheses=styleSettings.SPACE_WITHIN_METHOD_CALL_PARENTHESES && hasParams;
    new ParenthesesInsertHandler<LookupElement>(styleSettings.SPACE_BEFORE_METHOD_CALL_PARENTHESES,spaceBetweenParentheses,needRightParenth,styleSettings.METHOD_PARAMETERS_LPAREN_ON_NEXT_LINE){
      @Override protected boolean placeCaretInsideParentheses(      InsertionContext context1,      LookupElement item1){
        return hasParameters;
      }
      @Override protected PsiElement findExistingLeftParenthesis(      @NotNull InsertionContext context){
        PsiElement token=super.findExistingLeftParenthesis(context);
        return isPartOfLambda(token) ? null : token;
      }
      private boolean isPartOfLambda(      PsiElement token){
        return token != null && token.getParent() instanceof PsiExpressionList && PsiUtilCore.getElementType(PsiTreeUtil.nextVisibleLeaf(token.getParent())) == JavaTokenType.ARROW;
      }
    }
.handleInsert(context,item);
  }
  if (hasParams) {
    AutoPopupController.getInstance(file.getProject()).autoPopupParameterInfo(editor,overloadsMatter ? null : (PsiElement)item.getObject());
  }
  if (smart || !needRightParenth || !insertTail(context,item,tailType,hasTail)) {
    return;
  }
  if (completionChar == '.') {
    AutoPopupController.getInstance(file.getProject()).autoPopupMemberLookup(context.getEditor(),null);
  }
 else   if (completionChar == ',') {
    AutoPopupController.getInstance(file.getProject()).autoPopupParameterInfo(context.getEditor(),null);
  }
}
