{
  if (!type.isValid()) {
    return type;
  }
  T result=new PsiTypeMapper(){
    @Override public PsiType visitClassType(    final PsiClassType classType){
      final PsiClassType.ClassResolveResult classResolveResult=classType.resolveGenerics();
      final PsiClass psiClass=classResolveResult.getElement();
      final PsiSubstitutor substitutor=classResolveResult.getSubstitutor();
      if (psiClass == null)       return classType;
      LOG.assertTrue(psiClass.isValid());
      return new PsiImmediateClassType(CompletionUtil.getOriginalOrSelf(psiClass),originalize(substitutor));
    }
  }
.mapType(type);
  if (result == null) {
    throw new AssertionError("Null result for type " + type + " of class "+ type.getClass());
  }
  return result;
}
