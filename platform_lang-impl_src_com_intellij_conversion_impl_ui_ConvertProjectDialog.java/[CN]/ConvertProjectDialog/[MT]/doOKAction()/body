{
  final List<File> nonexistentFiles=myContext.getNonExistingModuleFiles();
  if (!nonexistentFiles.isEmpty() && !myNonExistingFilesMessageShown) {
    final String filesString=getFilesString(nonexistentFiles);
    final String message=IdeBundle.message("message.text.files.do.not.exist",filesString);
    final int res=Messages.showYesNoDialog(getContentPane(),message,IdeBundle.message("dialog.title.convert.project"),Messages.getQuestionIcon());
    if (res != Messages.YES) {
      super.doOKAction();
      return;
    }
    myNonExistingFilesMessageShown=false;
  }
  try {
    if (!checkReadOnlyFiles()) {
      return;
    }
    ProjectConversionUtil.backupFiles(myAffectedFiles,myContext.getProjectBaseDir(),myBackupDir);
    List<ConversionRunner> usedRunners=new ArrayList<ConversionRunner>();
    for (    ConversionRunner runner : myConversionRunners) {
      if (runner.isConversionNeeded()) {
        runner.preProcess();
        runner.process();
        runner.postProcess();
        usedRunners.add(runner);
      }
    }
    myContext.saveFiles(myAffectedFiles,usedRunners);
    myConverted=true;
    super.doOKAction();
  }
 catch (  CannotConvertException e) {
    LOG.info(e);
    showErrorMessage(IdeBundle.message("error.cannot.convert.project",e.getMessage()));
  }
catch (  IOException e) {
    LOG.info(e);
    showErrorMessage(IdeBundle.message("error.cannot.convert.project",e.getMessage()));
  }
}
