{
  PsiSubstitutor substitutor=result.getSubstitutor();
  PsiType substitutedReturnType=substitutor.substitute(ret);
  if (substitutedReturnType == null) {
    return TypeConversionUtil.erasure(ret);
  }
  if (InferenceSession.wasUncheckedConversionPerformed(call)) {
    return TypeConversionUtil.erasure(substitutedReturnType);
  }
  if (!languageLevel.isAtLeast(LanguageLevel.JDK_1_8) && (method.hasTypeParameters() || JavaVersionService.getInstance().isAtLeast(call,JavaSdkVersion.JDK_1_8)) && result instanceof MethodCandidateInfo&& ((MethodCandidateInfo)result).isApplicable()) {
    final PsiType[] args=call.getArgumentList().getExpressionTypes();
    final boolean allowUncheckedConversion=false;
    final int applicabilityLevel=PsiUtil.getApplicabilityLevel(method,substitutor,args,languageLevel,allowUncheckedConversion,true);
    if (applicabilityLevel == MethodCandidateInfo.ApplicabilityLevel.NOT_APPLICABLE) {
      return TypeConversionUtil.erasure(substitutedReturnType);
    }
  }
  if (PsiUtil.isRawSubstitutor(method,substitutor)) {
    final PsiType returnTypeErasure=TypeConversionUtil.erasure(ret);
    if (Comparing.equal(TypeConversionUtil.erasure(substitutedReturnType),returnTypeErasure)) {
      return returnTypeErasure;
    }
  }
  if (!languageLevel.isAtLeast(LanguageLevel.JDK_1_8)) {
    return PsiImplUtil.normalizeWildcardTypeByPosition(substitutedReturnType,call);
  }
  return PsiUtil.captureToplevelWildcards(substitutedReturnType,call);
}
