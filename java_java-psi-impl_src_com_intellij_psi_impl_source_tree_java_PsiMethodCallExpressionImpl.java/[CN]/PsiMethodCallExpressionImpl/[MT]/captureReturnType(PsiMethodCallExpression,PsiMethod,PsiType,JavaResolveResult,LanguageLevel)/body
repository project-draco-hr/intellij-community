{
  PsiSubstitutor substitutor=result.getSubstitutor();
  PsiType substitutedReturnType=substitutor.substitute(ret);
  if (substitutedReturnType == null) {
    return TypeConversionUtil.erasure(ret);
  }
  if (InferenceSession.wasUncheckedConversionPerformed(call)) {
    return TypeConversionUtil.erasure(substitutedReturnType);
  }
  if (result instanceof MethodCandidateInfo && ((MethodCandidateInfo)result).isApplicable()) {
    final PsiType[] args=call.getArgumentList().getExpressionTypes();
    final boolean allowUncheckedConversion=false;
    final int applicabilityLevel=PsiUtil.getApplicabilityLevel(method,substitutor,args,languageLevel,allowUncheckedConversion,true);
    if (applicabilityLevel == MethodCandidateInfo.ApplicabilityLevel.NOT_APPLICABLE) {
      return TypeConversionUtil.erasure(substitutedReturnType);
    }
  }
  if (PsiUtil.isRawSubstitutor(method,substitutor)) {
    final PsiType returnTypeErasure=TypeConversionUtil.erasure(ret);
    if (Comparing.equal(TypeConversionUtil.erasure(substitutedReturnType),returnTypeErasure)) {
      return returnTypeErasure;
    }
  }
  PsiType lowerBound=PsiType.NULL;
  if (substitutedReturnType instanceof PsiCapturedWildcardType) {
    lowerBound=((PsiCapturedWildcardType)substitutedReturnType).getLowerBound();
  }
 else   if (substitutedReturnType instanceof PsiWildcardType) {
    lowerBound=((PsiWildcardType)substitutedReturnType).getSuperBound();
  }
  if (lowerBound != PsiType.NULL) {
    final PsiClass containingClass=method.getContainingClass();
    final PsiExpression qualifierExpression=call.getMethodExpression().getQualifierExpression();
    final PsiClass childClass=qualifierExpression != null ? PsiUtil.resolveClassInClassTypeOnly(qualifierExpression.getType()) : null;
    if (containingClass != null && childClass != null) {
      final PsiType typeInChildClassTypeParams=TypeConversionUtil.getSuperClassSubstitutor(containingClass,childClass,PsiSubstitutor.EMPTY).substitute(ret);
      final PsiClass substituted=PsiUtil.resolveClassInClassTypeOnly(typeInChildClassTypeParams);
      if (substituted instanceof PsiTypeParameter) {
        final PsiClassType[] extendsListTypes=substituted.getExtendsListTypes();
        if (extendsListTypes.length == 1) {
          return extendsListTypes[0];
        }
      }
    }
  }
  return PsiImplUtil.normalizeWildcardTypeByPosition(substitutedReturnType,call);
}
