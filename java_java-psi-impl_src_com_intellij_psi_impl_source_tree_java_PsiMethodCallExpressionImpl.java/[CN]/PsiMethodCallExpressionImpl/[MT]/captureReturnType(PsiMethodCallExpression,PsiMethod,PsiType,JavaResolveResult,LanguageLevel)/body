{
  PsiSubstitutor substitutor=result.getSubstitutor();
  PsiType substitutedReturnType=substitutor.substitute(ret);
  if (substitutedReturnType == null) {
    return TypeConversionUtil.erasure(ret);
  }
  if (InferenceSession.wasUncheckedConversionPerformed(call)) {
    return TypeConversionUtil.erasure(substitutedReturnType);
  }
  if ((!languageLevel.isAtLeast(LanguageLevel.JDK_1_8) && method.hasTypeParameters() || !method.hasTypeParameters() && JavaVersionService.getInstance().isAtLeast(call,JavaSdkVersion.JDK_1_8)) && result instanceof MethodCandidateInfo && ((MethodCandidateInfo)result).isApplicable()) {
    final PsiType[] args=call.getArgumentList().getExpressionTypes();
    final PsiParameter[] parameters=method.getParameterList().getParameters();
    final boolean varargs=((MethodCandidateInfo)result).getApplicabilityLevel() == MethodCandidateInfo.ApplicabilityLevel.VARARGS;
    for (int i=0; i < args.length; i++) {
      final PsiType parameterType=substitutor.substitute(PsiTypesUtil.getParameterType(parameters,i,varargs));
      final PsiType expressionType=args[i];
      if (expressionType != null && parameterType != null && JavaGenericsUtil.isRawToGeneric(parameterType,expressionType)) {
        return TypeConversionUtil.erasure(substitutedReturnType);
      }
    }
  }
  if (PsiUtil.isRawSubstitutor(method,substitutor)) {
    final PsiType returnTypeErasure=TypeConversionUtil.erasure(ret);
    if (Comparing.equal(TypeConversionUtil.erasure(substitutedReturnType),returnTypeErasure)) {
      return returnTypeErasure;
    }
  }
  return PsiUtil.captureToplevelWildcards(substitutedReturnType,call);
}
