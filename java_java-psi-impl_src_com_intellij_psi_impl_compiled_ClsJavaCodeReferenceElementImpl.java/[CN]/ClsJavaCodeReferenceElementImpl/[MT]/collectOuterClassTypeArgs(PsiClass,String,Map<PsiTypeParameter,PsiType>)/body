{
  final PsiClass containingClass=psiClass.getContainingClass();
  if (containingClass != null) {
    final String outerClassRef=getOuterClassRef(canonicalText);
    final String[] classParameters=PsiNameHelper.getClassParametersText(outerClassRef);
    final PsiType[] args=classParameters.length == 0 ? null : new ClsReferenceParameterListImpl(this,classParameters).getTypeArguments();
    final PsiTypeParameter[] typeParameters=containingClass.getTypeParameters();
    for (int i=0; i < typeParameters.length; i++) {
      if (args != null && i < args.length) {
        substitutionMap.put(typeParameters[i],args[i]);
      }
    }
    if (!containingClass.hasModifierProperty(PsiModifier.STATIC)) {
      collectOuterClassTypeArgs(containingClass,outerClassRef,substitutionMap);
    }
  }
}
