{
  NotNullLazyValue<? extends StorageOwner> lazyValue=myStorages.get(provider);
  if (lazyValue == null) {
    AtomicNotNullLazyValue<S> newValue=new AtomicNotNullLazyValue<S>(){
      @NotNull @Override protected S compute(){
        try {
          return provider.createStorage(myPaths.getTargetDataRoot(myTarget));
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    lazyValue=myStorages.putIfAbsent(provider,newValue);
    if (lazyValue == null) {
      lazyValue=newValue;
    }
  }
  try {
    return (S)lazyValue.getValue();
  }
 catch (  RuntimeException e) {
    final Throwable cause=e.getCause();
    if (cause instanceof IOException) {
      throw (IOException)cause;
    }
    throw e;
  }
}
