{
  final LibraryJarDescriptor[] descriptors=LibraryJarStatisticsService.getInstance().getTechnologyDescriptors();
  final Set<UsageDescriptor> result=new HashSet<UsageDescriptor>(descriptors.length);
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      for (      LibraryJarDescriptor descriptor : descriptors) {
        String className=descriptor.myClass;
        if (className != null) {
          PsiClass psiClass=JavaPsiFacade.getInstance(project).findClass(className,ProjectScope.getLibrariesScope(project));
          if (psiClass != null) {
            Matcher matcher=PATH_PATTERN.matcher(psiClass.getContainingFile().getVirtualFile().getPath());
            if (matcher.matches()) {
              String version;
              String fullVersion=matcher.group(1);
              matcher=MULTI_DIGIT_VERSION_PATTERN.matcher(fullVersion);
              if (matcher.matches()) {
                version=matcher.group(1);
              }
 else {
                version=fullVersion.substring(0,fullVersion.indexOf("."));
              }
              result.add(new UsageDescriptor(descriptor.myName + "_" + version,1));
            }
          }
        }
      }
    }
  }
);
  return result;
}
