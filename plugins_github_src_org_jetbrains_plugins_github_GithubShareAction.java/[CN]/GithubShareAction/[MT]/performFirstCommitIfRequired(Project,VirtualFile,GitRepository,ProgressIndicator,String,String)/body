{
  if (!repository.isFresh()) {
    return true;
  }
  LOG.info("Trying to commit");
  try {
    LOG.info("Adding files for commit");
    indicator.setText("Adding files to git...");
    final List<VirtualFile> trackedFiles=ChangeListManager.getInstance(project).getAffectedFiles();
    final Collection<VirtualFile> untrackedFiles=filterOutIgnored(project,repository.getUntrackedFilesHolder().retrieveUntrackedFiles());
    trackedFiles.removeAll(untrackedFiles);
    final List<VirtualFile> allFiles=new ArrayList<VirtualFile>();
    allFiles.addAll(trackedFiles);
    allFiles.addAll(untrackedFiles);
    final Ref<GithubUntrackedFilesDialog> dialogRef=new Ref<GithubUntrackedFilesDialog>();
    ApplicationManager.getApplication().invokeAndWait(new Runnable(){
      @Override public void run(){
        GithubUntrackedFilesDialog dialog=new GithubUntrackedFilesDialog(project,allFiles);
        if (!trackedFiles.isEmpty()) {
          dialog.setSelectedFiles(trackedFiles);
        }
        DialogManager.show(dialog);
        dialogRef.set(dialog);
      }
    }
,indicator.getModalityState());
    final GithubUntrackedFilesDialog dialog=dialogRef.get();
    final Collection<VirtualFile> files2commit=dialog.getSelectedFiles();
    if (!dialog.isOK() || files2commit.isEmpty()) {
      GithubNotifications.showInfoURL(project,"Successfully created empty repository on GitHub",name,url);
      return false;
    }
    Collection<VirtualFile> files2add=ContainerUtil.intersection(untrackedFiles,files2commit);
    Collection<VirtualFile> files2rm=ContainerUtil.subtract(trackedFiles,files2commit);
    Collection<VirtualFile> modified=new HashSet<VirtualFile>(trackedFiles);
    modified.addAll(files2commit);
    GitFileUtils.addFiles(project,root,files2add);
    GitFileUtils.deleteFilesFromCache(project,root,files2rm);
    LOG.info("Performing commit");
    indicator.setText("Performing commit...");
    GitSimpleHandler handler=new GitSimpleHandler(project,root,GitCommand.COMMIT);
    handler.addParameters("-m",dialog.getCommitMessage());
    handler.endOptions();
    handler.run();
    VcsFileUtil.refreshFiles(project,modified);
  }
 catch (  VcsException e) {
    LOG.warn(e);
    GithubNotifications.showErrorURL(project,"Can't finish GitHub sharing process","Successfully created project ","'" + name + "'"," on GitHub, but initial commit failed:<br/>" + GithubUtil.getErrorTextFromException(e),url);
    return false;
  }
  LOG.info("Successfully created initial commit");
  return true;
}
