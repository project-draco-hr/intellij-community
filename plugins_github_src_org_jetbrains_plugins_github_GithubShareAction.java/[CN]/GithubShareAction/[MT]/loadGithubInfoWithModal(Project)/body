{
  final Ref<GithubInfo> githubInfoRef=new Ref<GithubInfo>();
  final Ref<IOException> exceptionRef=new Ref<IOException>();
  ProgressManager.getInstance().run(new Task.Modal(project,"Access to GitHub",true){
    public void run(    @NotNull ProgressIndicator indicator){
      try {
        final Ref<List<GithubRepo>> availableReposRef=new Ref<List<GithubRepo>>();
        final GithubAuthData auth=GithubUtil.runAndGetValidAuth(project,indicator,new ThrowableConsumer<GithubAuthData,IOException>(){
          @Override public void consume(          GithubAuthData authData) throws IOException {
            availableReposRef.set(GithubApiUtil.getAvailableRepos(authData));
          }
        }
);
        if (auth == null || availableReposRef.isNull()) {
          return;
        }
        final HashSet<String> names=new HashSet<String>();
        for (        GithubRepo info : availableReposRef.get()) {
          names.add(info.getName());
        }
        final GithubUserDetailed userInfo=GithubApiUtil.getCurrentUserInfo(auth);
        if (userInfo == null) {
          return;
        }
        githubInfoRef.set(new GithubInfo(auth,userInfo,names));
      }
 catch (      IOException e) {
        exceptionRef.set(e);
      }
    }
  }
);
  if (!exceptionRef.isNull()) {
    GithubNotifications.showErrorDialog(project,"Failed to connect to GitHub",exceptionRef.get().getMessage());
    return null;
  }
  if (githubInfoRef.isNull()) {
    GithubNotifications.showErrorDialog(project,"Failed to connect to GitHub","Failed to gather user information");
    return null;
  }
  return githubInfoRef.get();
}
