{
  try {
    return GithubUtil.computeValueInModal(project,"Access to GitHub",new ThrowableConvertor<ProgressIndicator,GithubInfo,IOException>(){
      @Override public GithubInfo convert(      ProgressIndicator indicator) throws IOException {
        final Ref<List<GithubRepo>> availableReposRef=new Ref<List<GithubRepo>>();
        final GithubAuthData auth=GithubUtil.runAndGetValidAuth(project,indicator,new ThrowableConsumer<GithubAuthData,IOException>(){
          @Override public void consume(          GithubAuthData authData) throws IOException {
            availableReposRef.set(GithubApiUtil.getAvailableRepos(authData));
          }
        }
);
        final HashSet<String> names=new HashSet<String>();
        for (        GithubRepo info : availableReposRef.get()) {
          names.add(info.getName());
        }
        final GithubUserDetailed userInfo=GithubApiUtil.getCurrentUserDetailed(auth);
        return new GithubInfo(auth,userInfo,names);
      }
    }
);
  }
 catch (  GithubAuthenticationCanceledException e) {
    return null;
  }
catch (  IOException e) {
    GithubNotifications.showErrorDialog(project,"Failed to connect to GitHub",e);
    return null;
  }
}
