{
  final GitVcs gitVcs=GitVcs.getInstance(project);
  if (gitVcs == null) {
    GithubNotifications.showError(project,"Failed to perform initial commit","Cannot find git initialized");
    return false;
  }
  GitRepositoryManager repositoryManager=ServiceManager.getService(project,GitRepositoryManager.class);
  Git git=ServiceManager.getService(Git.class);
  if (repositoryManager == null || git == null) {
    return false;
  }
  GitRepository repository=repositoryManager.getRepositoryForRoot(root);
  if (repository == null) {
    GithubNotifications.showError(project,"Failed to perform initial commit","Cannot find git repository for root " + root);
    return false;
  }
  if (!repository.isFresh()) {
    return true;
  }
  LOG.info("Trying to commit");
  indicator.setText("Trying to commit");
  try {
    LOG.info("Adding files for commit");
    indicator.setText("Adding files to git");
    List<VirtualFile> untrackedFiles=new ArrayList<VirtualFile>(repository.getUntrackedFilesHolder().retrieveUntrackedFiles());
    final GithubUntrackedFilesDialog dialog=new GithubUntrackedFilesDialog(project,untrackedFiles);
    ApplicationManager.getApplication().invokeAndWait(new Runnable(){
      @Override public void run(){
        DialogManager.show(dialog);
      }
    }
,indicator.getModalityState());
    final Collection<VirtualFile> files2add=dialog.getSelectedFiles();
    if (!dialog.isOK() || files2add.isEmpty()) {
      GithubNotifications.showWarning(project,"Failed to commit file during post activities","No files to commit");
      return false;
    }
    GitFileUtils.addFiles(project,root,files2add);
    LOG.info("Performing commit");
    indicator.setText("Performing commit");
    GitSimpleHandler handler=new GitSimpleHandler(project,root,GitCommand.COMMIT);
    handler.addParameters("-m","First commit");
    handler.endOptions();
    handler.run();
  }
 catch (  VcsException e) {
    LOG.info("Failed to perform initial commit");
    GithubNotifications.showError(project,"Failed to commit file during post activities",e.getMessage());
    return false;
  }
  return true;
}
