{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null || !GithubUtil.testGitExecutable(project)) {
    return;
  }
  final VirtualFile root=project.getBaseDir();
  GitRepositoryManager manager=GitUtil.getRepositoryManager(project);
  final GitRepository gitRepository=manager.getRepositoryForFile(root);
  final boolean gitDetected=gitRepository != null;
  boolean externalRemoteDetected=false;
  if (gitDetected) {
    if (isRepositoryOnGitHub(gitRepository)) {
      Notification notification=new Notification(GithubUtil.GITHUB_NOTIFICATION_GROUP,"","Project is already on GitHub",NotificationType.INFORMATION);
      Notificator.getInstance(project).notify(notification);
      return;
    }
 else {
      externalRemoteDetected=!gitRepository.getRemotes().isEmpty();
    }
  }
  BasicAction.saveAll();
  try {
    final List<RepositoryInfo> availableRepos=GithubUtil.getAvailableRepos(project);
    if (availableRepos == null) {
      return;
    }
    final HashSet<String> names=new HashSet<String>();
    for (    RepositoryInfo info : availableRepos) {
      names.add(info.getName());
    }
    final GithubSettings settings=GithubSettings.getInstance();
    final String password=settings.getPassword();
    final Boolean privateRepoAllowed=GithubUtil.accessToGithubWithModalProgress(project,settings.getHost(),new ThrowableComputable<Boolean,IOException>(){
      @Override public Boolean compute() throws IOException {
        ProgressManager.getInstance().getProgressIndicator().setText("Trying to login to GitHub");
        return GithubUtil.isPrivateRepoAllowed(settings.getHost(),settings.getLogin(),password);
      }
    }
);
    if (privateRepoAllowed == null) {
      return;
    }
    final GithubShareDialog shareDialog=new GithubShareDialog(project,names,privateRepoAllowed);
    shareDialog.show();
    if (!shareDialog.isOK()) {
      return;
    }
    final boolean isPrivate=shareDialog.isPrivate();
    final String name=shareDialog.getRepositoryName();
    final String description=shareDialog.getDescription();
    LOG.info("Creating GitHub repository");
    boolean repositoryCreated=createGithubRepository(settings.getHost(),settings.getLogin(),settings.getPassword(),name,description,isPrivate);
    if (repositoryCreated) {
      LOG.info("Successfully created GitHub repository");
    }
 else {
      Messages.showErrorDialog(project,"Failed to create new GitHub repository","Create GitHub Repository");
      return;
    }
    bindToGithub(project,root,gitDetected,externalRemoteDetected,settings.getLogin(),name);
  }
 catch (  final Exception e1) {
    Messages.showErrorDialog(e1.getMessage(),"Failed to create new GitHub repository");
  }
}
