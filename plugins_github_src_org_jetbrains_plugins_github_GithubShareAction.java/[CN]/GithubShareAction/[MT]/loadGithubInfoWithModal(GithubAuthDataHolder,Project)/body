{
  try {
    return GithubUtil.computeValueInModal(project,"Access to GitHub",new ThrowableConvertor<ProgressIndicator,GithubInfo,IOException>(){
      @NotNull @Override public GithubInfo convert(      ProgressIndicator indicator) throws IOException {
        return GithubUtil.runTask(project,authHolder,indicator,new ThrowableConvertor<GithubConnection,GithubInfo,IOException>(){
          @NotNull @Override public GithubInfo convert(          @NotNull GithubConnection connection) throws IOException {
            GithubUserDetailed userInfo=GithubApiUtil.getCurrentUserDetailed(connection);
            HashSet<String> names=new HashSet<String>();
            for (            GithubRepo info : GithubApiUtil.getUserRepos(connection)) {
              names.add(info.getName());
            }
            return new GithubInfo(userInfo,names);
          }
        }
);
      }
    }
);
  }
 catch (  IOException e) {
    GithubNotifications.showErrorDialog(project,"Failed to Connect to GitHub",e);
    return null;
  }
}
