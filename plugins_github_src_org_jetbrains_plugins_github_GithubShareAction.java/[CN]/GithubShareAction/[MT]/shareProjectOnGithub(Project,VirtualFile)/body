{
  BasicAction.saveAll();
  final GitRepositoryManager manager=GitUtil.getRepositoryManager(project);
  final GitRepository gitRepository=manager.getRepositoryForFile(root);
  final boolean gitDetected=gitRepository != null;
  boolean externalRemoteDetected=false;
  if (gitDetected) {
    final String githubRemote=GithubUtil.findGithubRemoteUrl(gitRepository);
    if (githubRemote != null) {
      GithubNotifications.showInfoURL(project,"Project is already on GitHub","GitHub",githubRemote);
      return;
    }
    externalRemoteDetected=!gitRepository.getRemotes().isEmpty();
  }
  final GithubInfo githubInfo=loadGithubInfoWithModal(project);
  if (githubInfo == null) {
    return;
  }
  final GithubShareDialog shareDialog=new GithubShareDialog(project,githubInfo.getRepositoryNames(),githubInfo.getUser().canCreatePrivateRepo());
  DialogManager.show(shareDialog);
  if (!shareDialog.isOK()) {
    return;
  }
  final boolean isPrivate=shareDialog.isPrivate();
  final String name=shareDialog.getRepositoryName();
  final String description=shareDialog.getDescription();
  final boolean finalExternalRemoteDetected=externalRemoteDetected;
  new Task.Backgroundable(project,"Sharing project on GitHub..."){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      LOG.info("Creating GitHub repository");
      indicator.setText("Creating GitHub repository...");
      final String url=createGithubRepository(project,githubInfo.getAuthData(),name,description,isPrivate);
      if (url == null) {
        return;
      }
      LOG.info("Successfully created GitHub repository");
      LOG.info("Binding local project with GitHub");
      if (!gitDetected) {
        LOG.info("No git detected, creating empty git repo");
        indicator.setText("Creating empty git repo...");
        if (!createEmptyGitRepository(project,root,indicator)) {
          return;
        }
      }
      GitRepositoryManager repositoryManager=GitUtil.getRepositoryManager(project);
      final GitRepository repository=repositoryManager.getRepositoryForRoot(root);
      LOG.assertTrue(repository != null,"GitRepository is null for root " + root);
      final String remoteUrl=GithubUrlUtil.getGitHost() + "/" + githubInfo.getUser().getLogin()+ "/"+ name+ ".git";
      final String remoteName=finalExternalRemoteDetected ? "github" : "origin";
      LOG.info("Adding GitHub as a remote host");
      indicator.setText("Adding GitHub as a remote host...");
      if (!addGithubRemote(project,root,remoteName,remoteUrl,repository)) {
        return;
      }
      if (!performFirstCommitIfRequired(project,root,repository,indicator,name,url)) {
        return;
      }
      LOG.info("Pushing to github master");
      indicator.setText("Pushing to github master...");
      if (!pushCurrentBranch(project,repository,remoteName,remoteUrl,name,url)) {
        return;
      }
      GithubNotifications.showInfoURL(project,"Successfully created project on GitHub",name,url);
    }
  }
.queue();
}
