{
  if (!PsiUtil.isInstantiable(psiClass))   return;
  Module module=ModuleUtilCore.findModuleForPsiElement(psiClass);
  if (module == null)   return;
  final GlobalSearchScope scope=GlobalSearchScope.moduleRuntimeScope(module,false);
  final PsiClass actionClass=JavaPsiFacade.getInstance(psiClass.getProject()).findClass(DescriptionType.INSPECTION.getClassName(),scope);
  if (actionClass == null)   return;
  for (  DescriptionType type : DescriptionType.values()) {
    if (!InheritanceUtil.isInheritor(psiClass,type.getClassName())) {
      continue;
    }
    String descriptionDirName=DescriptionCheckerUtil.getDescriptionDirName(psiClass);
    if (StringUtil.isEmptyOrSpaces(descriptionDirName)) {
      return;
    }
    if (type == DescriptionType.INSPECTION) {
      final InspectionDescriptionInfo info=InspectionDescriptionInfo.create(module,psiClass);
      if (info.hasDescriptionFile()) {
        addDescriptionFileGutterIcon(psiClass,info.getDescriptionFile(),result);
      }
      return;
    }
    for (    PsiDirectory descriptionDir : DescriptionCheckerUtil.getDescriptionsDirs(module,type)) {
      PsiDirectory dir=descriptionDir.findSubdirectory(descriptionDirName);
      if (dir == null)       continue;
      final PsiFile descriptionFile=dir.findFile("description.html");
      if (descriptionFile != null) {
        addDescriptionFileGutterIcon(psiClass,descriptionFile,result);
        addBeforeAfterTemplateFilesGutterIcon(psiClass,dir,result);
        return;
      }
    }
    return;
  }
}
