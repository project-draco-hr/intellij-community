{
  String[] COPIES_TEMPLATE=myBuiltInSupported ? new String[]{"{rev}","{join(file_copies,'" + HgChangesetUtil.FILE_SEPARATOR + "')}"} : new String[]{"{rev}","{file_copies}"};
  String template=HgChangesetUtil.makeTemplate(COPIES_TEMPLATE);
  HgCommandResult result=execute(hgFile.getRepo(),template,-1,hgFile,Arrays.asList("-r",".:0"));
  if (result == null) {
    throw new HgCommandException("Could not execute log command.");
  }
  List<String> errors=result.getErrorLines();
  if (errors != null && !errors.isEmpty()) {
    throw new HgCommandException(errors.toString());
  }
  String output=result.getRawOutput();
  String[] changeSets=output.split(HgChangesetUtil.CHANGESET_SEPARATOR);
  String targetName=FileUtil.toSystemIndependentName(hgFile.getRelativePath());
  int targetRevNumber=Integer.valueOf(vcsRevisionNumber.getRevision());
  for (  String line : changeSets) {
    String[] attributes=line.split(HgChangesetUtil.ITEM_SEPARATOR);
    if (attributes.length != 2) {
      continue;
    }
    if (Integer.valueOf(attributes[0]) <= targetRevNumber) {
      break;
    }
    Map<String,String> copies=myBuiltInSupported ? parseCopiesFileList(attributes[1]) : parseCopiesFileListAsOldVersion(attributes[1]);
    for (    Map.Entry<String,String> entry : copies.entrySet()) {
      if (entry.getValue().equals(targetName)) {
        targetName=entry.getKey();
        break;
      }
    }
  }
  VirtualFile root=hgFile.getRepo();
  return new HgFile(root,new File(root.getPath(),targetName));
}
