{
  super();
  setLayout(new BorderLayout());
  myRepositoryCheckbox=new JBCheckBox();
  myRepositoryCheckbox.setFocusable(false);
  myRepositoryCheckbox.setOpaque(false);
  myRepositoryCheckbox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      fireOnSelectionChange(myRepositoryCheckbox.isSelected());
    }
  }
);
  myRepositoryLabel=new JLabel(repoName);
  myLocalBranch=new JBLabel(sourceName);
  myArrowLabel=new JLabel(" -> ");
  myOldDestination=targetName;
  TextFieldWithAutoCompletionListProvider<String> provider=new TextFieldWithAutoCompletion.StringsCompletionProvider(targetVariants,null);
  myDestBranchTextField=new TextFieldWithAutoCompletion<String>(project,provider,true,targetName){
    @Override public boolean shouldHaveBorder(){
      return false;
    }
    @Override protected void updateBorder(    @NotNull final EditorEx editor){
    }
  }
;
  myDestBranchTextField.setBorder(UIUtil.getTableFocusCellHighlightBorder());
  myDestBranchTextField.setOneLineMode(true);
  myDestBranchTextField.setOpaque(true);
  FocusAdapter focusListener=new FocusAdapter(){
    @Override public void focusGained(    FocusEvent e){
      myDestBranchTextField.selectAll();
    }
  }
;
  myDestBranchTextField.addFocusListener(focusListener);
  addFocusListener(focusListener);
  myTextRenderer=new ColoredTreeCellRenderer(){
    public void customizeCellRenderer(    @NotNull JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
    }
  }
;
  myTextRenderer.setOpaque(false);
  layoutComponents();
}
