{
  Collection<MavenProject> projects=getMavenProjects(psiFile);
  if (projects.isEmpty())   return Collections.emptyList();
  if (findArtifacts(projects,orderEntries).isEmpty())   return Collections.emptyList();
  return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction(){
    @Override public String getName(){
      return ProjectBundle.message("maven.action.download.sources");
    }
    @Override public String getBusyText(){
      return ProjectBundle.message("maven.action.download.sources.busy.text");
    }
    @Override public ActionCallback perform(    List<LibraryOrderEntry> orderEntries){
      Collection<MavenProject> mavenProjects=getMavenProjects(psiFile);
      if (mavenProjects.isEmpty()) {
        return ActionCallback.REJECTED;
      }
      MavenProjectsManager manager=MavenProjectsManager.getInstance(psiFile.getProject());
      Collection<MavenArtifact> artifacts=findArtifacts(mavenProjects,orderEntries);
      if (artifacts.isEmpty())       return ActionCallback.REJECTED;
      final AsyncResult<MavenArtifactDownloader.DownloadResult> result=new AsyncResult<>();
      manager.scheduleArtifactsDownloading(mavenProjects,artifacts,true,false,result);
      final ActionCallback resultWrapper=new ActionCallback();
      result.doWhenDone(new Consumer<MavenArtifactDownloader.DownloadResult>(){
        @Override public void consume(        MavenArtifactDownloader.DownloadResult downloadResult){
          if (!downloadResult.unresolvedSources.isEmpty()) {
            final StringBuilder message=new StringBuilder();
            message.append("<html>Sources not found for:");
            int count=0;
            for (            MavenId each : downloadResult.unresolvedSources) {
              if (count++ > 5) {
                message.append("<br>and more...");
                break;
              }
              message.append("<br>").append(each.getDisplayString());
            }
            message.append("</html>");
            Notifications.Bus.notify(new Notification(MavenUtil.MAVEN_NOTIFICATION_GROUP,"Cannot download sources",message.toString(),NotificationType.WARNING),psiFile.getProject());
          }
          if (downloadResult.resolvedSources.isEmpty()) {
            resultWrapper.setRejected();
          }
 else {
            resultWrapper.setDone();
          }
        }
      }
);
      return resultWrapper;
    }
  }
);
}
