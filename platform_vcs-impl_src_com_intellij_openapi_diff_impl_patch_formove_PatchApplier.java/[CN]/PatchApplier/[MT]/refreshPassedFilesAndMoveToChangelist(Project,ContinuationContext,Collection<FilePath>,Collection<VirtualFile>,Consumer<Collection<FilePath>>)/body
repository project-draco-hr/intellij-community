{
  if (context != null) {
    context.suspend();
  }
  final LocalFileSystem lfs=LocalFileSystem.getInstance();
  for (  FilePath filePath : directlyAffected) {
    lfs.refreshAndFindFileByIoFile(filePath.getIOFile());
  }
  lfs.refreshFiles(indirectlyAffected,false,true,null);
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      if (project.isDisposed())       return;
      final ChangeListManager changeListManager=ChangeListManager.getInstance(project);
      if (!directlyAffected.isEmpty() && targetChangelistMover != null) {
        changeListManager.invokeAfterUpdate(new Runnable(){
          @Override public void run(){
            targetChangelistMover.consume(directlyAffected);
            if (context != null) {
              context.ping();
            }
          }
        }
,InvokeAfterUpdateMode.BACKGROUND_CANCELLABLE,VcsBundle.message("change.lists.manager.move.changes.to.list"),new Consumer<VcsDirtyScopeManager>(){
          @Override public void consume(          final VcsDirtyScopeManager vcsDirtyScopeManager){
            vcsDirtyScopeManager.filePathsDirty(directlyAffected,null);
            vcsDirtyScopeManager.filesDirty(indirectlyAffected,null);
          }
        }
,null);
      }
 else {
        final VcsDirtyScopeManager vcsDirtyScopeManager=VcsDirtyScopeManager.getInstance(project);
        vcsDirtyScopeManager.filePathsDirty(directlyAffected,null);
        vcsDirtyScopeManager.filesDirty(indirectlyAffected,null);
        if (context != null) {
          context.ping();
        }
      }
    }
  }
);
}
