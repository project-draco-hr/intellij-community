{
  final GitLineHandler h=createHandler(project,gitRoots,defaultRoot);
  if (h == null) {
    return;
  }
  final VirtualFile root=h.workingDirectoryFile();
  GitRebaseEditorService service=GitRebaseEditorService.getInstance();
  final GitInteractiveRebaseEditorHandler editor=new GitInteractiveRebaseEditorHandler(service,project,root,h);
  final GitRebaseLineListener resultListener=new GitRebaseLineListener();
  h.addLineListener(resultListener);
  configureEditor(editor);
  affectedRoots.add(root);
  service.configureHandler(h,editor.getHandlerNo());
  new Task.Backgroundable(project,GitBundle.getString("rebasing.title"),false){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      AccessToken token=DvcsUtil.workingTreeChangeStarted(project);
      try {
        GitCommandResult result=ServiceManager.getService(Git.class).runCommand(h);
        editor.close();
        GitRepositoryManager manager=GitUtil.getRepositoryManager(project);
        manager.updateRepository(root);
        VfsUtil.markDirtyAndRefresh(false,true,false,root);
        notifyAboutResult(result,resultListener,editor.wasNoopSituationDetected(),exceptions,project);
      }
  finally {
        DvcsUtil.workingTreeChangeFinished(project,token);
      }
    }
  }
.queue();
}
