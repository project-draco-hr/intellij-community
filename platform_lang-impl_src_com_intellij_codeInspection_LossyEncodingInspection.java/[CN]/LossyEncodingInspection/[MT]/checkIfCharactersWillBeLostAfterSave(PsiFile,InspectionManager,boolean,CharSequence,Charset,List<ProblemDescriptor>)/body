{
  int errorCount=0;
  int start=-1;
  CharBuffer buffer=CharBuffer.wrap(text);
  for (int i=0; i <= text.length(); i++) {
    char c=i >= text.length() ? 0 : text.charAt(i);
    int end=Character.isHighSurrogate(c) && i < text.length() - 1 ? i + 2 : i + 1;
    if (i == text.length() || isRepresentable(buffer,i,end,charset)) {
      if (start != -1) {
        TextRange range=new TextRange(start,i);
        String message=InspectionsBundle.message("unsupported.character.for.the.charset",charset);
        ProblemDescriptor descriptor=manager.createProblemDescriptor(file,range,message,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly,CHANGE_ENCODING_FIX);
        descriptors.add(descriptor);
        start=-1;
        if (errorCount++ > 200)         break;
      }
    }
 else     if (start == -1) {
      start=i;
    }
    if (end != i + 1) {
      i++;
    }
  }
}
