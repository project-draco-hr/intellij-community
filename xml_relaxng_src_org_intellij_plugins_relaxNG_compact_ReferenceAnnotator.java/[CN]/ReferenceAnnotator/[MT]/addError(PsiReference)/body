{
  final TextRange rangeInElement=reference.getRangeInElement();
  final TextRange range=TextRange.from(reference.getElement().getTextRange().getStartOffset() + rangeInElement.getStartOffset(),rangeInElement.getLength());
  final Annotation annotation;
  if (reference instanceof EmptyResolveMessageProvider) {
    final String s=((EmptyResolveMessageProvider)reference).getUnresolvedMessagePattern();
    annotation=myHolder.createErrorAnnotation(range,MessageFormat.format(s,reference.getCanonicalText()));
  }
 else {
    annotation=myHolder.createErrorAnnotation(range,"Cannot resolve symbol");
  }
  annotation.setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
  if (reference instanceof LocalQuickFixProvider) {
    LocalQuickFix[] fixes=((LocalQuickFixProvider)reference).getQuickFixes();
    if (fixes != null) {
      InspectionManager inspectionManager=InspectionManager.getInstance(reference.getElement().getProject());
      for (      LocalQuickFix fix : fixes) {
        ProblemDescriptor descriptor=inspectionManager.createProblemDescriptor(reference.getElement(),annotation.getMessage(),fix,ProblemHighlightType.LIKE_UNKNOWN_SYMBOL,true);
        annotation.registerFix(fix,null,null,descriptor);
      }
    }
  }
}
