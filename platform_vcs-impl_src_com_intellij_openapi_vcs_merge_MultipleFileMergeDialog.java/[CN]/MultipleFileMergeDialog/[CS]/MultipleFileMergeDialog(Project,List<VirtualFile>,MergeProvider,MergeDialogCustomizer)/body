{
  super(project);
  myProject=project;
  myProjectManager=ProjectManagerEx.getInstanceEx();
  myProjectManager.blockReloadingProjectOnExternalChanges();
  myFiles=new ArrayList<>(files);
  myProvider=provider;
  myMergeDialogCustomizer=mergeDialogCustomizer;
  final String description=myMergeDialogCustomizer.getMultipleFileMergeDescription(files);
  if (!StringUtil.isEmptyOrSpaces(description)) {
    myDescriptionLabel.setText(description);
  }
  List<ColumnInfo> columns=new ArrayList<>();
  columns.add(new ColumnInfo<VirtualFile,VirtualFile>(VcsBundle.message("multiple.file.merge.column.name")){
    @Override public VirtualFile valueOf(    final VirtualFile virtualFile){
      return virtualFile;
    }
    @Override public TableCellRenderer getRenderer(    final VirtualFile virtualFile){
      return myVirtualFileRenderer;
    }
    @Nullable @Override public Comparator<VirtualFile> getComparator(){
      return VirtualFileComparator.INSTANCE;
    }
  }
);
  columns.add(new ColumnInfo<VirtualFile,String>(VcsBundle.message("multiple.file.merge.column.type")){
    @Override public String valueOf(    final VirtualFile virtualFile){
      return myBinaryFiles.contains(virtualFile) ? VcsBundle.message("multiple.file.merge.type.binary") : VcsBundle.message("multiple.file.merge.type.text");
    }
    @Override public String getMaxStringValue(){
      return VcsBundle.message("multiple.file.merge.type.binary");
    }
    @Override public int getAdditionalWidth(){
      return 10;
    }
  }
);
  if (myProvider instanceof MergeProvider2) {
    myMergeSession=((MergeProvider2)myProvider).createMergeSession(files);
    Collections.addAll(columns,myMergeSession.getMergeInfoColumns());
  }
 else {
    myMergeSession=null;
  }
  myModel=new ListTableModel<>(columns.toArray(new ColumnInfo[columns.size()]));
  myModel.setItems(files);
  myTable.setModelAndUpdateColumns(myModel);
  myVirtualFileRenderer.setFont(UIUtil.getListFont());
  myTable.setRowHeight(myVirtualFileRenderer.getPreferredSize().height);
  setTitle(myMergeDialogCustomizer.getMultipleFileDialogTitle());
  init();
  myAcceptYoursButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    @NotNull ActionEvent e){
      acceptRevision(true);
    }
  }
);
  myAcceptTheirsButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    @NotNull ActionEvent e){
      acceptRevision(false);
    }
  }
);
  myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    @NotNull final ListSelectionEvent e){
      updateButtonState();
    }
  }
);
  for (  VirtualFile file : files) {
    if (file.getFileType().isBinary() || provider.isBinary(file)) {
      myBinaryFiles.add(file);
    }
  }
  myTable.getSelectionModel().setSelectionInterval(0,0);
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent event){
      showMergeDialog();
      return true;
    }
  }
.installOn(myTable);
  new TableSpeedSearch(myTable,new Convertor<Object,String>(){
    @Override public String convert(    Object o){
      if (o instanceof VirtualFile) {
        return ((VirtualFile)o).getName();
      }
      return null;
    }
  }
);
}
