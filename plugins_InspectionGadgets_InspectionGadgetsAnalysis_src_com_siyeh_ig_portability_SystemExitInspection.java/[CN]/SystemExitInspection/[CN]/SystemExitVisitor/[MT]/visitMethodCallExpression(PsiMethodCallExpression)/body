{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"exit".equals(methodName) && !"halt".equals(methodName)) {
    return;
  }
  final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(expression,PsiMethod.class,true,PsiClass.class);
  if (ignoreInMainMethod && PsiMethodUtil.isMainMethod(containingMethod)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  if (parameterList.getParametersCount() != 1) {
    return;
  }
  final PsiParameter[] parameters=parameterList.getParameters();
  final PsiType parameterType=parameters[0].getType();
  if (!parameterType.equals(PsiType.INT)) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final String className=aClass.getQualifiedName();
  if (!"java.lang.System".equals(className) && !"java.lang.Runtime".equals(className)) {
    return;
  }
  registerMethodCallError(expression,"System");
}
