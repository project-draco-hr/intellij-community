{
  MessageBusConnection connection=project.getMessageBus().connect(project);
  connection.subscribe(GradleSettings.getInstance(project).getChangesTopic(),new GradleSettingsListenerAdapter(){
    @Override public void onServiceDirectoryPathChange(    @Nullable String oldPath,    @Nullable String newPath){
      ensureProjectsRefresh();
    }
    @Override public void onGradleHomeChange(    @Nullable String oldPath,    @Nullable String newPath,    @NotNull String linkedProjectPath){
      ensureProjectsRefresh();
    }
    @Override public void onGradleDistributionTypeChange(    DistributionType currentValue,    @NotNull String linkedProjectPath){
      ensureProjectsRefresh();
    }
    @Override public void onProjectsLinked(    @NotNull Collection<GradleProjectSettings> settings){
      final ProjectDataManager projectDataManager=ServiceManager.getService(ProjectDataManager.class);
      for (      GradleProjectSettings gradleProjectSettings : settings) {
        ExternalSystemUtil.refreshProject(project,GradleConstants.SYSTEM_ID,gradleProjectSettings.getExternalProjectPath(),new ExternalProjectRefreshCallback(){
          @Override public void onSuccess(          @Nullable final DataNode<ProjectData> externalProject){
            if (externalProject == null) {
              return;
            }
            ExternalSystemApiUtil.executeProjectChangeAction(true,new DisposeAwareProjectChange(project){
              @Override public void execute(){
                ProjectRootManagerEx.getInstanceEx(project).mergeRootsChangesDuring(new Runnable(){
                  @Override public void run(){
                    projectDataManager.importData(externalProject.getKey(),Collections.singleton(externalProject),project,true);
                  }
                }
);
              }
            }
);
          }
          @Override public void onFailure(          @NotNull String errorMessage,          @Nullable String errorDetails){
          }
        }
,false,ProgressExecutionMode.MODAL_SYNC);
      }
    }
    private void ensureProjectsRefresh(){
      ExternalSystemUtil.refreshProjects(project,GradleConstants.SYSTEM_ID,true);
    }
  }
);
  Map<String,String> adjustedPaths=patchLinkedProjects(project);
  if (adjustedPaths == null) {
    return;
  }
  GradleLocalSettings localSettings=GradleLocalSettings.getInstance(project);
  patchRecentTasks(adjustedPaths,localSettings);
  patchAvailableProjects(adjustedPaths,localSettings);
  patchAvailableTasks(adjustedPaths,localSettings);
}
