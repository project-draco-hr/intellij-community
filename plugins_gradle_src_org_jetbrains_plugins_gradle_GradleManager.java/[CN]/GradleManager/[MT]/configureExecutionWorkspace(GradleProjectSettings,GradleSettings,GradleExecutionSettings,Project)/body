{
  for (  GradleProjectSettings projectSettings : settings.getLinkedProjectsSettings()) {
    if (projectSettings == compositeRootSettings)     continue;
    if (!compositeRootSettings.getCompositeParticipants().contains(projectSettings.getExternalProjectPath()))     continue;
    GradleBuildParticipant buildParticipant=new GradleBuildParticipant(projectSettings.getExternalProjectPath());
    ExternalProjectInfo projectData=ProjectDataManager.getInstance().getExternalProjectData(project,GradleConstants.SYSTEM_ID,projectSettings.getExternalProjectPath());
    if (projectData == null || projectData.getExternalProjectStructure() == null)     continue;
    Collection<DataNode<ModuleData>> moduleNodes=ExternalSystemApiUtil.findAll(projectData.getExternalProjectStructure(),ProjectKeys.MODULE);
    for (    DataNode<ModuleData> moduleNode : moduleNodes) {
      ModuleData moduleData=moduleNode.getData();
      if (moduleData.getArtifacts().isEmpty()) {
        Collection<DataNode<GradleSourceSetData>> sourceSetNodes=ExternalSystemApiUtil.findAll(moduleNode,GradleSourceSetData.KEY);
        for (        DataNode<GradleSourceSetData> sourceSetNode : sourceSetNodes) {
          buildParticipant.addModule(sourceSetNode.getData());
        }
      }
 else {
        buildParticipant.addModule(moduleData);
      }
    }
    result.getExecutionWorkspace().addBuildParticipant(buildParticipant);
  }
}
