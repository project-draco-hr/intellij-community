{
  return new Function<Pair<Project,String>,GradleExecutionSettings>(){
    @Override public GradleExecutionSettings fun(    Pair<Project,String> pair){
      GradleSettings settings=GradleSettings.getInstance(pair.first);
      File gradleHome=myInstallationManager.getGradleHome(pair.first,pair.second);
      String localGradlePath=null;
      if (gradleHome != null) {
        try {
          localGradlePath=gradleHome.getCanonicalPath();
        }
 catch (        IOException e) {
          localGradlePath=gradleHome.getAbsolutePath();
        }
      }
      GradleProjectSettings projectLevelSettings=settings.getLinkedProjectSettings(pair.second);
      final DistributionType distributionType;
      if (projectLevelSettings == null) {
        distributionType=GradleUtil.isGradleDefaultWrapperFilesExist(pair.second) ? DistributionType.DEFAULT_WRAPPED : DistributionType.LOCAL;
      }
 else {
        distributionType=projectLevelSettings.getDistributionType() == null ? DistributionType.LOCAL : projectLevelSettings.getDistributionType();
      }
      GradleExecutionSettings result=new GradleExecutionSettings(localGradlePath,settings.getServiceDirectoryPath(),distributionType,settings.getGradleVmOptions(),settings.isOfflineWork());
      for (      GradleProjectResolverExtension extension : RESOLVER_EXTENSIONS.getValue()) {
        result.addResolverExtensionClass(ClassHolder.from(extension.getClass()));
      }
      final Sdk gradleJdk=myInstallationManager.getGradleJdk(pair.first,pair.second);
      final String javaHome=gradleJdk != null ? gradleJdk.getHomePath() : null;
      if (!StringUtil.isEmpty(javaHome)) {
        LOG.info("Instructing gradle to use java from " + javaHome);
      }
      result.setJavaHome(javaHome);
      return result;
    }
  }
;
}
