{
  if (CodeInsightSettings.getInstance().SURROUND_SELECTION_ON_QUOTE_TYPED && editor.getSelectionModel().hasSelection(true) && isDelimiter(c)) {
    myRestoreStickySelection=(editor instanceof EditorEx) && ((EditorEx)editor).isStickySelection();
    editor.getCaretModel().runForEachCaret(new CaretAction(){
      @Override public void perform(      Caret caret){
        String replacementText=null;
        String selectedText=caret.getSelectedText();
        if (!StringUtil.isEmpty(selectedText)) {
          if (selectedText.length() > 1) {
            final char firstChar=selectedText.charAt(0);
            final char lastChar=selectedText.charAt(selectedText.length() - 1);
            if (isSimilarDelimiters(firstChar,c) && lastChar == getMatchingDelimiter(firstChar) && (isQuote(firstChar) || firstChar != c) && !shouldSkipReplacementOfQuotesOrBraces(psiFile,editor,selectedText,c) && selectedText.indexOf(lastChar,1) == selectedText.length() - 1) {
              selectedText=selectedText.substring(1,selectedText.length() - 1);
            }
          }
          final char c2=getMatchingDelimiter(c);
          replacementText=String.valueOf(c) + selectedText + c2;
        }
        caret.putUserData(REPLACEMENT_TEXT,replacementText);
      }
    }
);
    editor.getCaretModel().runForEachCaret(new CaretAction(){
      @Override public void perform(      Caret caret){
        String replacementText=caret.getUserData(REPLACEMENT_TEXT);
        caret.putUserData(REPLACEMENT_TEXT,null);
        if (replacementText == null) {
          caret.putUserData(LTR_SELECTION,null);
          caret.putUserData(REPLACED_TEXT_RANGE,null);
        }
 else {
          int selectionStart=caret.getSelectionStart();
          int selectionEnd=caret.getSelectionEnd();
          caret.putUserData(LTR_SELECTION,caret.getLeadSelectionOffset() != selectionEnd);
          caret.putUserData(REPLACED_TEXT_RANGE,Registry.is("editor.smarterSelectionQuoting") ? new TextRange(selectionStart + 1,selectionStart + replacementText.length() - 1) : new TextRange(selectionStart,selectionStart + replacementText.length()));
          caret.removeSelection();
          editor.getDocument().replaceString(selectionStart,selectionEnd,replacementText);
        }
      }
    }
);
    return Result.STOP;
  }
  return super.checkAutoPopup(c,project,editor,psiFile);
}
