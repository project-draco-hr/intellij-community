{
  if (containingClass instanceof PsiAnonymousClass)   return true;
  boolean same=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
    public Boolean compute(){
      return myManager.areElementsEquivalent(constructor.getContainingClass(),containingClass.getSuperClass());
    }
  }
);
  if (!same) {
    return true;
  }
  return processor.process(new LightMemberReference(myManager,usage,PsiSubstitutor.EMPTY){
    @Override public PsiElement getElement(){
      return usage;
    }
    @Override public TextRange getRangeInElement(){
      if (usage instanceof PsiClass) {
        PsiIdentifier identifier=((PsiClass)usage).getNameIdentifier();
        if (identifier != null)         return TextRange.from(identifier.getStartOffsetInParent(),identifier.getTextLength());
      }
 else       if (usage instanceof PsiField) {
        PsiIdentifier identifier=((PsiField)usage).getNameIdentifier();
        return TextRange.from(identifier.getStartOffsetInParent(),identifier.getTextLength());
      }
 else       if (usage instanceof PsiMethod) {
        PsiIdentifier identifier=((PsiMethod)usage).getNameIdentifier();
        if (identifier != null)         return TextRange.from(identifier.getStartOffsetInParent(),identifier.getTextLength());
      }
      return super.getRangeInElement();
    }
  }
);
}
