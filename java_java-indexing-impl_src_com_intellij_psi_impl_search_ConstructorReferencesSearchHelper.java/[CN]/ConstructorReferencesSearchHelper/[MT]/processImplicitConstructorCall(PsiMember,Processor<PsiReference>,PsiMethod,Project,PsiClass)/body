{
  if (containingClass instanceof PsiAnonymousClass)   return true;
  boolean same=MethodUsagesSearcher.resolveInReadAction(project,new Computable<Boolean>(){
    @Override public Boolean compute(){
      return myManager.areElementsEquivalent(constructor.getContainingClass(),containingClass.getSuperClass());
    }
  }
);
  if (!same) {
    return true;
  }
  return processor.process(new LightMemberReference(myManager,usage,PsiSubstitutor.EMPTY){
    @Override public PsiElement getElement(){
      return usage;
    }
    @Override public TextRange getRangeInElement(){
      if (usage instanceof PsiNameIdentifierOwner) {
        PsiElement identifier=((PsiNameIdentifierOwner)usage).getNameIdentifier();
        if (identifier != null) {
          final int startOffsetInParent=identifier.getStartOffsetInParent();
          if (startOffsetInParent >= 0) {
            return TextRange.from(startOffsetInParent,identifier.getTextLength());
          }
        }
      }
      return super.getRangeInElement();
    }
  }
);
}
