{
  myIndicesDir=getIndexDir(buildDir);
  if (!myIndicesDir.exists() && !myIndicesDir.mkdirs()) {
    throw new RuntimeException("Can't create dir: " + buildDir.getAbsolutePath());
  }
  try {
    if (versionDiffers(buildDir)) {
      FileUtil.writeToFile(new File(myIndicesDir,VERSION_FILE),String.valueOf(VERSION));
    }
    myFilePathEnumerator=new PersistentStringEnumerator(new File(myIndicesDir,FILE_ENUM_TAB)){
      @Override public int enumerate(      @Nullable String value) throws IOException {
        return super.enumerate(SystemInfo.isFileSystemCaseSensitive ? value : value.toLowerCase(Locale.ROOT));
      }
    }
;
    final KeyDescriptor<LightUsage> lightUsageDescriptor=LightUsage.createDescriptor();
    final KeyDescriptor<LightDefinition> defDescriptor=LightDefinition.createDescriptor(lightUsageDescriptor);
    myBackwardReferenceMap=new ObjectObjectPersistentMultiMaplet<LightUsage,Integer>(new File(myIndicesDir,BACK_USAGES_TAB),lightUsageDescriptor,EnumeratorIntegerDescriptor.INSTANCE,new CollectionFactory<Integer>(){
      @Override public Collection<Integer> create(){
        return new THashSet<Integer>();
      }
    }
);
    myBackwardHierarchyMap=new ObjectObjectPersistentMultiMaplet<LightUsage,LightDefinition>(new File(myIndicesDir,BACK_HIERARCHY_TAB),lightUsageDescriptor,defDescriptor,new CollectionFactory<LightDefinition>(){
      @Override public Collection<LightDefinition> create(){
        return new THashSet<LightDefinition>();
      }
    }
);
    myReferenceMap=new IntObjectPersistentMultiMaplet<LightUsage>(new File(myIndicesDir,USAGES_TAB),EnumeratorIntegerDescriptor.INSTANCE,lightUsageDescriptor,new CollectionFactory<LightUsage>(){
      @Override public Collection<LightUsage> create(){
        return new THashSet<LightUsage>();
      }
    }
);
    myHierarchyMap=new ObjectObjectPersistentMultiMaplet<LightDefinition,LightUsage>(new File(myIndicesDir,HIERARCHY_TAB),defDescriptor,lightUsageDescriptor,new CollectionFactory<LightUsage>(){
      @Override public Collection<LightUsage> create(){
        return new THashSet<LightUsage>();
      }
    }
);
    myClassDefinitionMap=new IntObjectPersistentMultiMaplet<LightUsage>(new File(myIndicesDir,CLASS_DEF_TAB),EnumeratorIntegerDescriptor.INSTANCE,lightUsageDescriptor,new CollectionFactory<LightUsage>(){
      @Override public Collection<LightUsage> create(){
        return new THashSet<LightUsage>();
      }
    }
);
    myBackwardClassDefinitionMap=new ObjectObjectPersistentMultiMaplet<LightUsage,Integer>(new File(myIndicesDir,BACK_CLASS_DEF_TAB),lightUsageDescriptor,EnumeratorIntegerDescriptor.INSTANCE,new CollectionFactory<Integer>(){
      @Override public Collection<Integer> create(){
        return new THashSet<Integer>();
      }
    }
);
    myNameEnumerator=new ByteArrayEnumerator(new File(myIndicesDir,INCOMPLETE_FILES_TAB));
  }
 catch (  IOException e) {
    removeIndexFiles(myIndicesDir);
    throw new BuildDataCorruptedException(e);
  }
}
