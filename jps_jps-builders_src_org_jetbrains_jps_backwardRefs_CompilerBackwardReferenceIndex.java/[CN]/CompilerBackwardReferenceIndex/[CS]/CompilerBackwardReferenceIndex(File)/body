{
  myIndicesDir=getIndexDir(buildDir);
  if (!myIndicesDir.exists() && !myIndicesDir.mkdirs()) {
    throw new RuntimeException("Can't create dir: " + buildDir.getAbsolutePath());
  }
  try {
    if (versionDiffers(buildDir)) {
      FileUtil.writeToFile(new File(myIndicesDir,VERSION_FILE),String.valueOf(VERSION));
    }
    myFilePathEnumerator=new PersistentStringEnumerator(new File(myIndicesDir,FILE_ENUM_TAB));
    myBackwardReferenceMap=new ObjectObjectPersistentMultiMaplet<LightUsage,Integer>(new File(myIndicesDir,BACK_USAGES_TAB),LightUsage.createDescriptor(),EnumeratorIntegerDescriptor.INSTANCE,new CollectionFactory<Integer>(){
      @Override public Collection<Integer> create(){
        return new THashSet<Integer>();
      }
    }
);
    myBackwardHierarchyMap=new IntIntPersistentMultiMaplet(new File(myIndicesDir,BACK_HIERARCHY_TAB),EnumeratorIntegerDescriptor.INSTANCE);
    myReferenceMap=new IntObjectPersistentMultiMaplet<LightUsage>(new File(myIndicesDir,USAGES_TAB),EnumeratorIntegerDescriptor.INSTANCE,LightUsage.createDescriptor(),new CollectionFactory<LightUsage>(){
      @Override public Collection<LightUsage> create(){
        return new THashSet<LightUsage>();
      }
    }
);
    myHierarchyMap=new IntIntPersistentMultiMaplet(new File(myIndicesDir,HIERARCHY_TAB),EnumeratorIntegerDescriptor.INSTANCE);
    myNameEnumerator=new ByteArrayEnumerator(new File(myIndicesDir,INCOMPLETE_FILES_TAB));
  }
 catch (  IOException e) {
    removeIndexFiles(myIndicesDir);
    throw new BuildDataCorruptedException(e);
  }
}
