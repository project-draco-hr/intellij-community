{
  PyFunction function=PsiTreeUtil.getParentOfType(node,PyFunction.class);
  if (function != null) {
    PyParameterList paramList=function.getParameterList();
    final Set<String> paramNames=new HashSet<String>();
    ParamHelper.walkDownParamArray(paramList.getParameters(),new ParamHelper.ParamVisitor(){
      @Override public void visitNamedParameter(      PyNamedParameter param,      boolean first,      boolean last){
        paramNames.add(param.getName());
      }
    }
);
    final AnnotationHolder holder=getHolder();
    for (    PyReferenceExpression expr : node.getGlobals()) {
      final String expr_name=expr.getReferencedName();
      if (paramNames.contains(expr_name)) {
        holder.createErrorAnnotation(expr.getTextRange(),PyBundle.message("ANN.$0.both.global.and.param",expr_name));
      }
      PsiElement resolvedElement=expr.getReference().resolve();
      if (resolvedElement != null && PsiTreeUtil.isAncestor(function,resolvedElement,true)) {
        getHolder().createWarningAnnotation(expr.getTextRange(),PyBundle.message("ANN.$0.both.global.and.param",expr_name));
      }
    }
  }
}
