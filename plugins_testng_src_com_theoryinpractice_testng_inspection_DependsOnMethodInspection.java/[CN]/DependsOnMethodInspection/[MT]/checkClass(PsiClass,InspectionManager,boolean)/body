{
  PsiAnnotation[] annotations=TestNGUtil.getTestNGAnnotations(psiClass);
  if (annotations.length == 0)   return ProblemDescriptor.EMPTY_ARRAY;
  List<ProblemDescriptor> problemDescriptors=new ArrayList<>();
  for (  PsiAnnotation annotation : annotations) {
    final PsiAnnotationMemberValue value=annotation.findDeclaredAttributeValue("dependsOnMethods");
    if (value != null && !TestNGUtil.isDisabled(annotation)) {
      String text=value.getText();
      if (value instanceof PsiReferenceExpression) {
        final PsiElement resolve=((PsiReferenceExpression)value).resolve();
        if (resolve instanceof PsiField && ((PsiField)resolve).hasModifierProperty(PsiModifier.STATIC) && ((PsiField)resolve).hasModifierProperty(PsiModifier.FINAL)) {
          final PsiExpression initializer=((PsiField)resolve).getInitializer();
          if (initializer != null) {
            text=initializer.getText();
          }
        }
      }
      final Set<String> names=new HashSet<>();
      final Matcher matcher=PATTERN.matcher(text);
      int idx=0;
      while (matcher.find()) {
        String methodName=matcher.group(1);
        if (!names.add(methodName)) {
          PsiAnnotationMemberValue element2Highlight=value;
          if (value instanceof PsiArrayInitializerMemberValue) {
            final PsiAnnotationMemberValue[] initializers=((PsiArrayInitializerMemberValue)value).getInitializers();
            if (idx < initializers.length) {
              element2Highlight=initializers[idx];
            }
          }
          problemDescriptors.add(manager.createProblemDescriptor(element2Highlight,"Duplicated method name: " + methodName,(LocalQuickFix)null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly));
        }
        checkMethodNameDependency(manager,psiClass,methodName,value,problemDescriptors,isOnTheFly);
        idx++;
      }
    }
  }
  return problemDescriptors.toArray(new ProblemDescriptor[problemDescriptors.size()]);
}
