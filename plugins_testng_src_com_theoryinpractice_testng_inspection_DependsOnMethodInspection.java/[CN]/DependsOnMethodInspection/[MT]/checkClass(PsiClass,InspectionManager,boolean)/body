{
  if (!psiClass.getContainingFile().isWritable())   return null;
  PsiAnnotation[] annotations=TestNGUtil.getTestNGAnnotations(psiClass);
  if (annotations.length == 0)   return ProblemDescriptor.EMPTY_ARRAY;
  List<ProblemDescriptor> problemDescriptors=new ArrayList<ProblemDescriptor>();
  for (  PsiAnnotation annotation : annotations) {
    final PsiAnnotationMemberValue value=annotation.findAttributeValue("dependsOnMethods");
    if (value != null) {
      String text=value.getText();
      if (value instanceof PsiReferenceExpression) {
        final PsiElement resolve=((PsiReferenceExpression)value).resolve();
        if (resolve instanceof PsiField && ((PsiField)resolve).hasModifierProperty(PsiModifier.STATIC) && ((PsiField)resolve).hasModifierProperty(PsiModifier.FINAL)) {
          final PsiExpression initializer=((PsiField)resolve).getInitializer();
          if (initializer != null) {
            text=initializer.getText();
          }
        }
      }
      Matcher matcher=PATTERN.matcher(text);
      while (matcher.find()) {
        String methodName=matcher.group(1);
        checkMethodNameDependency(manager,psiClass,methodName,value,problemDescriptors,isOnTheFly);
      }
    }
  }
  return problemDescriptors.toArray(new ProblemDescriptor[problemDescriptors.size()]);
}
