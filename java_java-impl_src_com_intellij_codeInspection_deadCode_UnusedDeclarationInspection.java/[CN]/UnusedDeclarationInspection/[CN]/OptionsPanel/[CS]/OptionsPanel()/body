{
  super(new GridBagLayout());
  GridBagConstraints gc=new GridBagConstraints();
  gc.weightx=1;
  gc.weighty=0;
  gc.fill=GridBagConstraints.HORIZONTAL;
  gc.anchor=GridBagConstraints.NORTHWEST;
  gc.gridx=0;
  gc.gridy=GridBagConstraints.RELATIVE;
  add(new JBLabel("When entry point is located in test sources:"),gc);
  final JBRadioButton asEntryPoint=new JBRadioButton("Treat as entry point",isTestEntryPoints());
  final JBRadioButton asUnused=new JBRadioButton("Mark callees as unused",!isTestEntryPoints());
  final ButtonGroup group=new ButtonGroup();
  group.add(asEntryPoint);
  group.add(asUnused);
  final ActionListener listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      setTestEntryPoints(asEntryPoint.isSelected());
    }
  }
;
  asEntryPoint.addActionListener(listener);
  asUnused.addActionListener(listener);
  add(asEntryPoint,gc);
  add(asUnused,gc);
  add(new TitledSeparator(),gc);
  gc.insets=JBUI.insets(0,20,2,0);
  myMainsCheckbox=new JCheckBox(InspectionsBundle.message("inspection.dead.code.option.main"));
  myMainsCheckbox.setSelected(ADD_MAINS_TO_ENTRIES);
  myMainsCheckbox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ADD_MAINS_TO_ENTRIES=myMainsCheckbox.isSelected();
    }
  }
);
  add(myMainsCheckbox,gc);
  myAppletToEntries=new JCheckBox(InspectionsBundle.message("inspection.dead.code.option.applet"));
  myAppletToEntries.setSelected(ADD_APPLET_TO_ENTRIES);
  myAppletToEntries.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ADD_APPLET_TO_ENTRIES=myAppletToEntries.isSelected();
    }
  }
);
  add(myAppletToEntries,gc);
  myServletToEntries=new JCheckBox(InspectionsBundle.message("inspection.dead.code.option.servlet"));
  myServletToEntries.setSelected(ADD_SERVLET_TO_ENTRIES);
  myServletToEntries.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ADD_SERVLET_TO_ENTRIES=myServletToEntries.isSelected();
    }
  }
);
  add(myServletToEntries,gc);
  for (  final EntryPoint extension : myExtensions) {
    if (extension.showUI()) {
      final JCheckBox extCheckbox=new JCheckBox(extension.getDisplayName());
      extCheckbox.setSelected(extension.isSelected());
      extCheckbox.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent e){
          extension.setSelected(extCheckbox.isSelected());
        }
      }
);
      add(extCheckbox,gc);
    }
  }
  myNonJavaCheckbox=new JCheckBox(InspectionsBundle.message("inspection.dead.code.option.external"));
  myNonJavaCheckbox.setSelected(ADD_NONJAVA_TO_ENTRIES);
  myNonJavaCheckbox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ADD_NONJAVA_TO_ENTRIES=myNonJavaCheckbox.isSelected();
    }
  }
);
  add(myNonJavaCheckbox,gc);
  gc.fill=GridBagConstraints.NONE;
  gc.weighty=1;
  final JPanel btnPanel=new JPanel(new VerticalFlowLayout());
  btnPanel.add(EntryPointsManagerImpl.createConfigureClassPatternsButton());
  btnPanel.add(EntryPointsManagerImpl.createConfigureAnnotationsButton());
  add(btnPanel,gc);
}
