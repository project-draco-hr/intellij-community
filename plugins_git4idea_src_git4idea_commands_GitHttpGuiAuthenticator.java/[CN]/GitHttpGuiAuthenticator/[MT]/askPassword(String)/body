{
  LOG.debug("askPassword. url=" + url + ", passwordKnown="+ (myPassword != null)+ ", wasCancelled="+ myWasCancelled);
  if (myPassword != null) {
    return myPassword;
  }
  if (myWasCancelled) {
    return "";
  }
  myUnifiedUrl=getUnifiedUrl(url);
  Pair<GitHttpAuthDataProvider,AuthData> authData=findBestAuthData(getUnifiedUrl(url));
  if (authData != null && authData.second.getPassword() != null) {
    String password=authData.second.getPassword();
    myDataProvider=authData.first;
    myPassword=password;
    LOG.debug("askPassword. dataProvider=" + getCurrentDataProviderName() + ", unifiedUrl= "+ getUnifiedUrl(url)+ ", login="+ authData.second.getLogin()+ ", passwordKnown="+ (password != null));
    return password;
  }
  myPasswordKey=getUnifiedUrl(url);
  String password=CredentialPromptDialog.askPassword(myProject,myTitle,"Password for " + getDisplayableUrl(url),CredentialAttributes(PASS_REQUESTER,myPasswordKey));
  LOG.debug("askPassword. Password was asked and returned: " + (password == null ? "NULL" : password.isEmpty() ? "EMPTY" : "NOT EMPTY"));
  if (password == null) {
    myWasCancelled=true;
    return "";
  }
  myPassword=password;
  myDataProvider=new GitDefaultHttpAuthDataProvider();
  return password;
}
