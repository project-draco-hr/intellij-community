{
  final PsiElement psiElement=((MethodHierarchyNodeDescriptor)descriptor).getPsiClass();
  if (!(psiElement instanceof PsiClass))   return ArrayUtil.EMPTY_OBJECT_ARRAY;
  final PsiClass psiClass=(PsiClass)psiElement;
  final Collection<PsiClass> subclasses=getSubclasses(psiClass);
  final List<HierarchyNodeDescriptor> descriptors=new ArrayList<HierarchyNodeDescriptor>(subclasses.size());
  for (  final PsiClass aClass : subclasses) {
    if (HierarchyBrowserManager.getInstance(myProject).getState().HIDE_CLASSES_WHERE_METHOD_NOT_IMPLEMENTED) {
      if (shouldHideClass(aClass)) {
        continue;
      }
    }
    final MethodHierarchyNodeDescriptor d=new MethodHierarchyNodeDescriptor(myProject,descriptor,aClass,false,this);
    descriptors.add(d);
  }
  FunctionalExpressionSearch.search(getBaseMethod()).forEach(new Processor<PsiFunctionalExpression>(){
    @Override public boolean process(    PsiFunctionalExpression expression){
      descriptors.add(new MethodHierarchyNodeDescriptor(myProject,descriptor,expression,false,MethodHierarchyTreeStructure.this));
      return true;
    }
  }
);
  return descriptors.toArray(new HierarchyNodeDescriptor[descriptors.size()]);
}
