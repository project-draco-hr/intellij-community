{
  LOG.assertTrue(from instanceof PsiArrayType);
  from=((PsiArrayType)from).getComponentType();
  final PsiElement parentExpression=context.getParent();
  final PsiElement parent=parentExpression.getParent();
  if (parent instanceof PsiAssignmentExpression) {
    final IElementType operationSign=((PsiAssignmentExpression)parent).getOperationTokenType();
    if (operationSign == JavaTokenType.EQ) {
      return new TypeConversionDescriptor("$qualifier$[$idx$] = $val$","$qualifier$.set($idx$, $val$)",(PsiAssignmentExpression)parent);
    }
  }
 else   if (parent instanceof PsiMethodCallExpression) {
    return new TypeConversionDescriptor("$qualifier$[$idx$]","$qualifier$.get($idx$)",(PsiExpression)parent);
  }
  if (parentExpression instanceof PsiReferenceExpression) {
    return new TypeConversionDescriptor("$qualifier$[$idx$]","$qualifier$.get($idx$)",(PsiExpression)parentExpression);
  }
 else   if (parentExpression instanceof PsiBinaryExpression) {
    if (((PsiBinaryExpression)parentExpression).getOperationTokenType() == JavaTokenType.EQEQ) {
      return new TypeConversionDescriptor("$qualifier$[$idx$]==$val$","$qualifier$.get($idx$)==$val$",(PsiExpression)parentExpression);
    }
  }
 else   if (parentExpression instanceof PsiVariable) {
    if (context instanceof PsiNewExpression) {
      final PsiArrayInitializerExpression arrayInitializer=((PsiNewExpression)context).getArrayInitializer();
      String typeText=to.getPresentableText();
      final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(to);
      final PsiClass atomicClass=resolveResult.getElement();
      LOG.assertTrue(atomicClass != null);
      final PsiTypeParameter[] typeParameters=atomicClass.getTypeParameters();
      if (typeParameters.length == 1) {
        final PsiType initial=resolveResult.getSubstitutor().substitute(typeParameters[0]);
        final PsiPrimitiveType unboxedInitialType=PsiPrimitiveType.getUnboxedType(initial);
        if (unboxedInitialType != null) {
          LOG.assertTrue(initial != null);
          if (from instanceof PsiPrimitiveType) {
            final PsiClassType boxedFromType=((PsiPrimitiveType)from).getBoxedType(atomicClass);
            LOG.assertTrue(boxedFromType != null);
            final String qualifiedName=atomicClass.getQualifiedName();
            LOG.assertTrue(qualifiedName != null);
            if (qualifiedName.equals(AtomicReferenceArray.class.getName())) {
              return arrayInitializer != null ? new TypeConversionDescriptor("new $type$[]{$initializer$}","new " + typeText + "(new "+ boxedFromType.getClassName()+ "[] {$initializer$})") : new TypeConversionDescriptor("new $type$ [$length$]","new " + typeText + "(new "+ boxedFromType.getClassName()+ "[$length$])");
            }
          }
        }
      }
      return arrayInitializer != null ? new TypeConversionDescriptor("new $type$[] {$initializer$}","new " + typeText + "(new $type$[] {$initializer$})") : new TypeConversionDescriptor("new $type$ [$length$]","new " + typeText + "(new $type$[$length$])");
    }
    return wrapWithNewExpression(to,from);
  }
  if (parent instanceof PsiExpressionStatement) {
    if (parentExpression instanceof PsiPostfixExpression) {
      final String sign=((PsiPostfixExpression)parentExpression).getOperationSign().getText();
      return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign,"$qualifier$.getAndSet($idx$, " + getBoxedWrapper(from,to,"$qualifier$.get($idx$) " + sign.charAt(0) + " 1") + ")",(PsiExpression)parentExpression);
    }
 else     if (parentExpression instanceof PsiPrefixExpression) {
      final String sign=((PsiPrefixExpression)parentExpression).getOperationSign().getText();
      return new TypeConversionDescriptor(sign + "$qualifier$[$idx$]","$qualifier$.set($idx$, " + getBoxedWrapper(from,to,"$qualifier$.get($idx$) " + sign.charAt(0) + " 1") + ")",(PsiExpression)parentExpression);
    }
 else     if (parentExpression instanceof PsiBinaryExpression) {
      final String sign=((PsiBinaryExpression)parentExpression).getOperationSign().getText();
      return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign + "$val$","$qualifier$.set($idx$, " + getBoxedWrapper(from,to,"$qualifier$.get($idx$) " + sign + " $val$)") + ")",(PsiExpression)parentExpression);
    }
 else     if (parentExpression instanceof PsiAssignmentExpression) {
      final PsiJavaToken signToken=((PsiAssignmentExpression)parentExpression).getOperationSign();
      final IElementType operationSign=signToken.getTokenType();
      final String sign=signToken.getText();
      if (operationSign == JavaTokenType.EQ) {
        return new TypeConversionDescriptor("$qualifier$[$idx$] = $val$","$qualifier$.set($idx$, $val$)",(PsiExpression)parentExpression);
      }
 else {
        return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign + "$val$","$qualifier$.set($idx$, " + getBoxedWrapper(from,to,"$qualifier$.get($idx$) " + sign.charAt(0) + " $val$") + ")",(PsiExpression)parentExpression);
      }
    }
  }
  if (parentExpression instanceof PsiBinaryExpression) {
    final String sign=((PsiBinaryExpression)parentExpression).getOperationSign().getText();
    return new TypeConversionDescriptor("$qualifier$[$idx$]" + sign + "$val$","$qualifier$.get($idx$) " + sign + " $val$)",(PsiExpression)parentExpression);
  }
  return null;
}
