{
  final PsiElement parent=context.getParent();
  if (parent instanceof PsiVariable) {
    return wrapWithNewExpression(to,from);
  }
 else   if (parent instanceof PsiAssignmentExpression) {
    final IElementType operationSign=((PsiAssignmentExpression)parent).getOperationTokenType();
    if (operationSign == JavaTokenType.EQ) {
      return new TypeConversionDescriptor("$qualifier$ = $val$","$qualifier$.set($val$)",(PsiAssignmentExpression)parent);
    }
  }
  if (context instanceof PsiReferenceExpression) {
    return new TypeConversionDescriptor("$qualifier$","$qualifier$.get()");
  }
 else   if (context instanceof PsiBinaryExpression) {
    if (((PsiBinaryExpression)context).getOperationTokenType() == JavaTokenType.EQEQ) {
      return new TypeConversionDescriptor("$qualifier$==$val$","$qualifier$.get()==$val$");
    }
  }
  if (parent instanceof PsiExpressionStatement) {
    if (context instanceof PsiPostfixExpression) {
      final String sign=((PsiPostfixExpression)context).getOperationSign().getText();
      return new TypeConversionDescriptor("$qualifier$" + sign,"$qualifier$.getAndSet(" + getBoxedWrapper(from,to,"$qualifier$.get() " + sign.charAt(0) + " 1") + ")");
    }
 else     if (context instanceof PsiPrefixExpression) {
      final String sign=((PsiPrefixExpression)context).getOperationSign().getText();
      return new TypeConversionDescriptor(sign + "$qualifier$","$qualifier$.set(" + getBoxedWrapper(from,to,"$qualifier$.get() " + sign.charAt(0) + " 1") + ")");
    }
 else     if (context instanceof PsiBinaryExpression) {
      final String sign=((PsiBinaryExpression)context).getOperationSign().getText();
      return new TypeConversionDescriptor("$qualifier$" + sign + "$val$","$qualifier$.set(" + getBoxedWrapper(from,to,"$qualifier$.get() " + sign + " $val$)") + ")");
    }
 else     if (context instanceof PsiAssignmentExpression) {
      final PsiJavaToken signToken=((PsiAssignmentExpression)context).getOperationSign();
      final IElementType operationSign=signToken.getTokenType();
      final String sign=signToken.getText();
      if (operationSign == JavaTokenType.EQ) {
        return new TypeConversionDescriptor("$qualifier$ = $val$","$qualifier$.set($val$)");
      }
 else {
        return new TypeConversionDescriptor("$qualifier$" + sign + "$val$","$qualifier$.set(" + getBoxedWrapper(from,to,"$qualifier$.get() " + sign.charAt(0) + " $val$") + ")");
      }
    }
  }
  return null;
}
