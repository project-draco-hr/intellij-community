{
  final ActionCallback callback=new ActionCallback();
  Task task=new Task.Backgroundable(myProject,"Downloading Sources",true){
    @Override public void run(    @NotNull final ProgressIndicator indicator){
      final byte[] bytes;
      try {
        LOG.info("Downloading sources JAR: " + myUrl);
        indicator.checkCanceled();
        bytes=HttpRequests.request(myUrl).readBytes(indicator);
      }
 catch (      IOException e) {
        LOG.warn(e);
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            String message="Failed to download sources: " + myUrl;
            new Notification(myMessageGroupId,"Downloading failed",message,NotificationType.ERROR).notify(getProject());
            callback.setDone();
          }
        }
);
        return;
      }
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          AccessToken accessToken=WriteAction.start();
          try {
            storeFile(bytes);
          }
  finally {
            accessToken.finish();
            callback.setDone();
          }
        }
      }
);
    }
    @Override public void onCancel(){
      callback.setRejected();
    }
  }
;
  task.queue();
  return callback;
}
