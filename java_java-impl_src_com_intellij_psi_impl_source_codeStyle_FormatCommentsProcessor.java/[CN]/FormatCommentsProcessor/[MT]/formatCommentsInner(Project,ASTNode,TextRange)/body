{
  TextRange resultTextRange=markedRange;
  final PsiElement elementPsi=element.getPsi();
  boolean shouldFormat=markedRange.contains(element.getTextRange());
  if (shouldFormat) {
    final ASTNode rangeAnchor;
    if (elementPsi instanceof PsiDocComment) {
      rangeAnchor=element.getTreeParent();
    }
 else {
      rangeAnchor=element;
    }
    TextRange before=rangeAnchor.getTextRange();
    new CommentFormatter(project).processComment(element);
    int deltaRange=rangeAnchor.getTextRange().getLength() - before.getLength();
    resultTextRange=new TextRange(markedRange.getStartOffset(),markedRange.getEndOffset() + deltaRange);
  }
  if ((shouldFormat && (elementPsi instanceof PsiMethod || elementPsi instanceof PsiField || elementPsi instanceof PsiDocComment)) || markedRange.getEndOffset() < element.getStartOffset()) {
    return resultTextRange;
  }
  ASTNode current=element.getFirstChildNode();
  while (current != null) {
    if (!(shouldFormat && current.getPsi() instanceof PsiDocComment && elementPsi instanceof PsiClass)) {
      resultTextRange=formatCommentsInner(project,current,resultTextRange);
    }
    current=current.getTreeNext();
  }
  return resultTextRange;
}
