{
  if (visitedInterfaces.contains(clazz)) {
    return;
  }
  visitedInterfaces.add(clazz);
  Method[] methods=clazz.getMethods();
  Arrays.sort(methods,new Comparator<Method>(){
    @Override public int compare(    @NotNull Method o1,    @NotNull Method o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  for (  Method m : methods) {
    JsonParseMethod jsonParseMethod=m.getAnnotation(JsonParseMethod.class);
    if (jsonParseMethod == null) {
      continue;
    }
    Class<?>[] exceptionTypes=m.getExceptionTypes();
    if (exceptionTypes.length > 1) {
      throw new JsonProtocolModelParseException("Too many exception declared in " + m);
    }
    Type returnType=m.getGenericReturnType();
    boolean isList=false;
    if (returnType instanceof ParameterizedType) {
      ParameterizedType parameterizedType=(ParameterizedType)returnType;
      if (parameterizedType.getRawType() == List.class) {
        isList=true;
        returnType=parameterizedType.getActualTypeArguments()[0];
      }
    }
    TypeHandler<?> typeHandler=typeToTypeHandler.get(returnType);
    if (typeHandler == null) {
      typeHandler=InterfaceReader.createHandler(typeToTypeHandler,m.getReturnType());
      if (typeHandler == null) {
        throw new JsonProtocolModelParseException("Unknown return type in " + m);
      }
    }
    Type[] arguments=m.getGenericParameterTypes();
    if (arguments.length > 2) {
      throw new JsonProtocolModelParseException("Exactly one argument is expected in " + m);
    }
    Type argument=arguments[0];
    if (argument == JsonReaderEx.class || argument == Object.class) {
      methodMap.put(m,new ReadDelegate(typeHandler,isList,arguments.length != 1));
    }
 else {
      throw new JsonProtocolModelParseException("Unrecognized argument type in " + m);
    }
  }
  for (  Type baseType : clazz.getGenericInterfaces()) {
    if (!(baseType instanceof Class)) {
      throw new JsonProtocolModelParseException("Base interface must be class in " + clazz);
    }
    Class<?> baseClass=(Class<?>)baseType;
    readInterfaceRecursive(baseClass);
  }
}
