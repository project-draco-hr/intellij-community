{
  final String message=myMessageTextArea.getText();
  final boolean hasMessage=message.trim().length() != 0;
  final File messageFile;
  if (hasMessage) {
    try {
      messageFile=FileUtil.createTempFile(MESSAGE_FILE_PREFIX,MESSAGE_FILE_SUFFIX);
      messageFile.deleteOnExit();
      Writer out=new OutputStreamWriter(new FileOutputStream(messageFile),MESSAGE_FILE_ENCODING);
      try {
        out.write(message);
      }
  finally {
        out.close();
      }
    }
 catch (    IOException ex) {
      Messages.showErrorDialog(myProject,GitBundle.message("tag.error.creating.message.file.message",ex.toString()),GitBundle.getString("tag.error.creating.message.file.title"));
      return;
    }
  }
 else {
    messageFile=null;
  }
  try {
    GitSimpleHandler h=new GitSimpleHandler(myProject,getGitRoot(),GitCommand.TAG);
    if (hasMessage) {
      h.addParameters("-a");
    }
    if (myForceCheckBox.isEnabled() && myForceCheckBox.isSelected()) {
      h.addParameters("-f");
    }
    if (hasMessage) {
      h.addParameters("-F",messageFile.getAbsolutePath());
    }
    h.addParameters(myTagNameTextField.getText());
    String object=myCommitTextField.getText().trim();
    if (object.length() != 0) {
      h.addParameters(object);
    }
    GitHandlerUtil.doSynchronously(h,GitBundle.getString("tagging.title"),h.printableCommandLine());
    VcsNotifier.getInstance(myProject).notifySuccess(myTagNameTextField.getText(),"Created tag " + myTagNameTextField.getText() + " successfully.");
    GitRepository repository=GitUtil.getRepositoryManager(myProject).getRepositoryForRoot(getGitRoot());
    if (repository != null) {
      repository.getRepositoryFiles().refresh(true);
    }
 else {
      LOG.error("No repository registered for root: " + getGitRoot());
    }
    if (!h.errors().isEmpty()) {
      GitUIUtil.notifyImportantError(myProject,"Error rebasing",GitUIUtil.stringifyErrors(h.errors()));
    }
  }
  finally {
    if (messageFile != null) {
      messageFile.delete();
    }
  }
}
