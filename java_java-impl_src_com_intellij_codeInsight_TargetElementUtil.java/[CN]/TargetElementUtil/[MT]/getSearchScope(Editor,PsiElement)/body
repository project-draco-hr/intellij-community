{
  final PsiReferenceExpression referenceExpression=findReferenceExpression(editor);
  if (referenceExpression != null && element instanceof PsiMethod) {
    final PsiClass[] memberClass=getMemberClass(referenceExpression,element);
    if (memberClass != null && memberClass.length == 1) {
      final List<PsiClass> classesToSearch=new ArrayList<PsiClass>();
      classesToSearch.addAll(ClassInheritorsSearch.search(memberClass[0],true).findAll());
      final Set<PsiClass> supers=new HashSet<PsiClass>();
      for (      PsiClass psiClass : classesToSearch) {
        supers.addAll(InheritanceUtil.getSuperClasses(psiClass));
      }
      classesToSearch.addAll(supers);
      return CachedValuesManager.getManager(element.getProject()).createCachedValue(new CachedValueProvider<SearchScope>(){
        @Nullable @Override public Result<SearchScope> compute(){
          return new Result<SearchScope>(new LocalSearchScope(PsiUtilCore.toPsiElementArray(classesToSearch)));
        }
      }
,false).getValue();
    }
  }
  return super.getSearchScope(editor,element);
}
