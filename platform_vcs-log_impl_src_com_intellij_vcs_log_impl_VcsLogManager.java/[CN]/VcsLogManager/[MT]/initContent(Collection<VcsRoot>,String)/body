{
  Disposer.register(myProject,this);
  final Map<VirtualFile,VcsLogProvider> logProviders=findLogProviders(roots,myProject);
  Consumer<VisiblePack> visiblePackConsumer=new Consumer<VisiblePack>(){
    @Override public void consume(    final VisiblePack pack){
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          if (myUi != null && !Disposer.isDisposed(myUi)) {
            myUi.setVisiblePack(pack);
          }
        }
      }
);
    }
  }
;
  final VcsLogDataManager logDataManager=new VcsLogDataManager(myProject,this,logProviders);
  VcsLogFiltererImpl vcsLogFilterer=new VcsLogFiltererImpl(myProject,logDataManager,PermanentGraph.SortType.values()[myUiProperties.getBekSortType()],visiblePackConsumer);
  myUi=new VcsLogUiImpl(logDataManager,myProject,new VcsLogColorManagerImpl(logProviders.keySet()),myUiProperties,vcsLogFilterer);
  VcsLogRefresher logRefresher;
  if (contentTabName != null) {
    logRefresher=new PostponableLogRefresher(myProject,logDataManager,contentTabName);
  }
 else {
    logRefresher=new VcsLogRefresher(){
      @Override public void refresh(      @NotNull VirtualFile root){
        logDataManager.refresh(Collections.singletonList(root));
      }
    }
;
  }
  refreshLogOnVcsEvents(logProviders,logRefresher);
  logDataManager.initialize();
  myUi.requestFocus();
  return myUi.getMainFrame().getMainComponent();
}
