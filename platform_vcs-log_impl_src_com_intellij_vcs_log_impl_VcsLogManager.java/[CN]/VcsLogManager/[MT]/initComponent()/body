{
  super.initComponent();
  if (!Registry.is("git.new.log")) {
    return;
  }
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    public void run(){
      ChangesViewContentManager changesView=(ChangesViewContentManager)ChangesViewContentManager.getInstance(myProject);
      changesView.executeWhenInitialized(new DumbAwareRunnable(){
        @Override public void run(){
          UIUtil.invokeAndWaitIfNeeded(new Runnable(){
            @Override public void run(){
              final Map<VirtualFile,VcsLogProvider> logProviders=findLogProviders();
              if (logProviders.isEmpty()) {
                return;
              }
              final VcsLogContainer mainPanel=new VcsLogContainer(myProject);
              final Content content=new ContentImpl(mainPanel,"Log",true);
              ChangesViewContentI changesView=ChangesViewContentManager.getInstance(myProject);
              changesView.addContent(content);
              content.setCloseable(false);
              VcsLogDataHolder.init(myProject,myLogObjectsFactory,logProviders,mySettings,new Consumer<VcsLogDataHolder>(){
                @Override public void consume(                VcsLogDataHolder vcsLogDataHolder){
                  Disposer.register(myProject,vcsLogDataHolder);
                  VcsLogUI logUI=new VcsLogUI(vcsLogDataHolder,myProject,mySettings,new VcsLogColorManagerImpl(logProviders.keySet()));
                  mainPanel.init(logUI.getMainFrame().getMainComponent());
                  myLogRefresher=new PostponeableLogRefresher(myProject,vcsLogDataHolder,content);
                  refreshLogOnVcsEvents(logProviders);
                }
              }
);
            }
          }
);
        }
      }
);
    }
  }
);
}
