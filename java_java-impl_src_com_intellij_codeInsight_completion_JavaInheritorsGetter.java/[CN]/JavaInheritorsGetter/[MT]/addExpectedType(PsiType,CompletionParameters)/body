{
  if (!JavaCompletionUtil.hasAccessibleConstructor(type))   return null;
  final PsiClass psiClass=PsiUtil.resolveClassInType(type);
  if (psiClass == null || psiClass.getName() == null)   return null;
  PsiElement position=parameters.getPosition();
  if ((parameters.getInvocationCount() < 2 || psiClass instanceof PsiCompiledElement) && HighlightClassUtil.checkCreateInnerClassFromStaticContext(position,null,psiClass) != null && !psiElement().afterLeaf(psiElement().withText(PsiKeyword.NEW).afterLeaf(".")).accepts(position)) {
    return null;
  }
  PsiType psiType=GenericsUtil.eliminateWildcards(type);
  if (JavaSmartCompletionContributor.AFTER_NEW.accepts(parameters.getOriginalPosition()) && PsiUtil.getLanguageLevel(parameters.getOriginalFile()).isAtLeast(LanguageLevel.JDK_1_7)) {
    final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(psiClass.getProject());
    if (psiClass.hasTypeParameters() && !((PsiClassType)type).isRaw()) {
      final String erasedText=TypeConversionUtil.erasure(psiType).getCanonicalText();
      String canonicalText=psiType.getCanonicalText();
      if (canonicalText.contains("?extends") || canonicalText.contains("?super")) {
        LOG.error("Malformed canonical text: " + canonicalText + "; presentable text: "+ psiType+ " of "+ psiType.getClass()+ "; "+ (psiType instanceof PsiClassReferenceType ? ((PsiClassReferenceType)psiType).getReference().getClass() : ""));
        return null;
      }
      final PsiStatement statement=elementFactory.createStatementFromText(canonicalText + " v = new " + erasedText+ "<>()",parameters.getOriginalFile());
      final PsiVariable declaredVar=(PsiVariable)((PsiDeclarationStatement)statement).getDeclaredElements()[0];
      final PsiNewExpression initializer=(PsiNewExpression)declaredVar.getInitializer();
      final boolean hasDefaultConstructorOrNoGenericsOne=PsiDiamondTypeImpl.hasDefaultConstructor(psiClass) || !PsiDiamondTypeImpl.haveConstructorsGenericsParameters(psiClass);
      if (hasDefaultConstructorOrNoGenericsOne) {
        final PsiDiamondTypeImpl.DiamondInferenceResult inferenceResult=PsiDiamondTypeImpl.resolveInferredTypes(initializer);
        if (inferenceResult.getErrorMessage() == null && !psiClass.hasModifierProperty(PsiModifier.ABSTRACT) && areInferredTypesApplicable(inferenceResult.getTypes(),parameters.getPosition())) {
          psiType=initializer.getType();
        }
      }
    }
  }
  final PsiTypeLookupItem item=PsiTypeLookupItem.createLookupItem(psiType,position);
  JavaCompletionUtil.setShowFQN(item);
  if (psiClass.isInterface() || psiClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
    item.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);
    item.setIndicateAnonymous(true);
  }
  return LookupElementDecorator.withInsertHandler(item,myConstructorInsertHandler);
}
