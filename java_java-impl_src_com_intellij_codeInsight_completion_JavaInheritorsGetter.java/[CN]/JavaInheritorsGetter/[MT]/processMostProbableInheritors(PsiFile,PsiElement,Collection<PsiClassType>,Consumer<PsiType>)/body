{
  for (  final PsiClassType type : expectedClassTypes) {
    consumer.consume(type);
    final PsiClassType.ClassResolveResult baseResult=JavaCompletionUtil.originalize(type).resolveGenerics();
    final PsiClass baseClass=baseResult.getElement();
    if (baseClass == null)     return false;
    final PsiSubstitutor baseSubstitutor=baseResult.getSubstitutor();
    final Processor<PsiClass> processor=CodeInsightUtil.createInheritorsProcessor(context,type,0,false,consumer,baseClass,baseSubstitutor);
    final StatisticsInfo[] stats=StatisticsManager.getInstance().getAllValues(JavaStatisticsManager.getAfterNewKey(type));
    for (    final StatisticsInfo statisticsInfo : stats) {
      final String value=statisticsInfo.getValue();
      if (value.startsWith(JavaStatisticsManager.CLASS_PREFIX)) {
        final String qname=value.substring(JavaStatisticsManager.CLASS_PREFIX.length());
        final PsiClass psiClass=JavaPsiFacade.getInstance(contextFile.getProject()).findClass(qname,contextFile.getResolveScope());
        if (psiClass != null && !PsiTreeUtil.isAncestor(contextFile,psiClass,true) && !processor.process(psiClass))         break;
      }
    }
  }
  return true;
}
