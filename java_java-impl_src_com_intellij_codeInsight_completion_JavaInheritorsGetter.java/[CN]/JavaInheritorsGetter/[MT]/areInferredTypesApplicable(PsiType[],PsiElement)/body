{
  final PsiMethodCallExpression methodCallExpression=PsiTreeUtil.getParentOfType(position,PsiMethodCallExpression.class);
  if (methodCallExpression != null) {
    if (PsiUtil.isLanguageLevel8OrHigher(methodCallExpression)) {
      final PsiNewExpression newExpression=PsiTreeUtil.getParentOfType(position,PsiNewExpression.class,false);
      if (newExpression != null) {
        PsiElement parent=newExpression;
        while (parent.getParent() instanceof PsiParenthesizedExpression) {
          parent=parent.getParent();
        }
        final int idx=ArrayUtil.find(methodCallExpression.getArgumentList().getExpressions(),parent);
        if (idx > -1) {
          final JavaResolveResult resolveResult=methodCallExpression.resolveMethodGenerics();
          final PsiMethod method=(PsiMethod)resolveResult.getElement();
          if (method != null) {
            final PsiParameter[] parameters=method.getParameterList().getParameters();
            if (idx < parameters.length) {
              final PsiType expectedType=resolveResult.getSubstitutor().substitute(parameters[idx].getType());
              final PsiClass aClass=PsiUtil.resolveClassInType(expectedType);
              if (aClass != null) {
                final PsiClassType inferredArg=JavaPsiFacade.getElementFactory(method.getProject()).createType(aClass,types);
                return TypeConversionUtil.isAssignable(expectedType,inferredArg);
              }
            }
          }
        }
      }
    }
    return false;
  }
  return true;
}
