{
  if (StringUtil.isEmptyOrSpaces(line))   return;
  if (line.startsWith(CommitEventType.transmittingDeltas.getText())) {
    if (myHandler != null) {
      myHandler.commitEvent(CommitEventType.transmittingDeltas,myBase);
    }
    return;
  }
  if (line.startsWith(CommitEventType.committedRevision.getText())) {
    final String substring=line.substring(CommitEventType.committedRevision.getText().length());
    int cnt=0;
    while (StringUtil.isWhiteSpace(substring.charAt(cnt))) {
      ++cnt;
    }
    final StringBuilder num=new StringBuilder();
    while (Character.isDigit(substring.charAt(cnt))) {
      num.append(substring.charAt(cnt));
      ++cnt;
    }
    if (num.length() > 0) {
      try {
        myCommittedRevision=Long.parseLong(num.toString());
        if (myHandler != null) {
          myHandler.committedRevision(myCommittedRevision);
        }
      }
 catch (      NumberFormatException e) {
        final String message="Wrong committed revision number: " + num.toString() + ", string: "+ line;
        LOG.info(message,e);
        throw new SvnBindException(message);
      }
    }
 else {
      final String message="Missing committed revision number: " + num.toString() + ", string: "+ line;
      LOG.info(message);
      throw new SvnBindException(message);
    }
  }
 else {
    if (myHandler == null)     return;
    Matcher matcher=CHANGED_PATH.matcher(line);
    if (matcher.matches()) {
      final CommitEventType type=CommitEventType.create(matcher.group(1));
      if (type == null) {
        LOG.info("Can not parse event type: " + line);
        return;
      }
      myHandler.commitEvent(type,toFile(matcher.group(4)));
    }
 else {
      LOG.info("Can not parse output: " + line);
    }
  }
}
