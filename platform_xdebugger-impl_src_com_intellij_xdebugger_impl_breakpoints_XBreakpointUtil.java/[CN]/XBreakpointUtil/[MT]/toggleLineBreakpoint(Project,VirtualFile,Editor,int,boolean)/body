{
  int linesEnd=lineStart;
  if (editor != null) {
    FoldRegion region=FoldingUtil.findFoldRegionStartingAtLine(editor,lineStart);
    if (region != null && !region.isExpanded()) {
      linesEnd=region.getDocument().getLineNumber(region.getEndOffset());
    }
  }
  final XBreakpointManager breakpointManager=XDebuggerManager.getInstance(project).getBreakpointManager();
  XLineBreakpointType<?>[] lineTypes=XDebuggerUtil.getInstance().getLineBreakpointTypes();
  XLineBreakpointType<?> typeWinner=null;
  int lineWinner=-1;
  for (int line=lineStart; line <= linesEnd; line++) {
    int maxPriority=0;
    for (    XLineBreakpointType<?> type : lineTypes) {
      maxPriority=Math.max(maxPriority,type.getPriority());
      final XLineBreakpoint<? extends XBreakpointProperties> breakpoint=breakpointManager.findBreakpointAtLine(type,file,line);
      if (breakpoint != null && temporary && !breakpoint.isTemporary()) {
        breakpoint.setTemporary(true);
      }
 else       if (type.canPutAt(file,line,project) || breakpoint != null) {
        if (typeWinner == null || type.getPriority() > typeWinner.getPriority()) {
          typeWinner=type;
          lineWinner=line;
        }
      }
    }
    if (typeWinner != null && typeWinner.getPriority() == maxPriority) {
      break;
    }
  }
  XLineBreakpoint res=null;
  if (typeWinner != null) {
    res=XDebuggerUtil.getInstance().toggleLineBreakpoint(project,typeWinner,file,lineWinner,temporary);
  }
  ExpandRegionAction.expandRegionAtCaret(project,editor);
  if (editor != null && lineStart != lineWinner) {
    editor.getCaretModel().moveToOffset(editor.getDocument().getLineStartOffset(lineWinner));
  }
  return res;
}
