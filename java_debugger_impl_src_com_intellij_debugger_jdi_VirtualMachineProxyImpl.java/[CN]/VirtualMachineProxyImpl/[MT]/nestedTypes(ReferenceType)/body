{
  List<ReferenceType> nestedTypes=myNestedClassesCache.get(refType);
  if (nestedTypes == null) {
    List<ReferenceType> list=Collections.emptyList();
    try {
      list=refType.nestedTypes();
    }
 catch (    Throwable e) {
      LOG.info(e);
    }
    if (!list.isEmpty()) {
      final Set<ReferenceType> candidates=new HashSet<>();
      final ClassLoaderReference outerLoader=refType.classLoader();
      for (      ReferenceType nested : list) {
        try {
          if (outerLoader == null ? nested.classLoader() == null : outerLoader.equals(nested.classLoader())) {
            candidates.add(nested);
          }
        }
 catch (        ObjectCollectedException ignored) {
        }
      }
      if (!candidates.isEmpty()) {
        final Set<ReferenceType> nested2=new HashSet<>();
        for (        final ReferenceType candidate : candidates) {
          nested2.addAll(nestedTypes(candidate));
        }
        candidates.removeAll(nested2);
      }
      nestedTypes=candidates.isEmpty() ? Collections.<ReferenceType>emptyList() : new ArrayList<>(candidates);
    }
 else {
      nestedTypes=Collections.emptyList();
    }
    myNestedClassesCache.put(refType,nestedTypes);
  }
  return nestedTypes;
}
