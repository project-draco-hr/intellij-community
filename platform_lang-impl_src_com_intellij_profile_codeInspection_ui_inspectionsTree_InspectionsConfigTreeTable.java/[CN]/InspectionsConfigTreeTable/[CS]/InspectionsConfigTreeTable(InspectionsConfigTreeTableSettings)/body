{
  super(new InspectionsConfigTreeTableModel(settings));
  final TableColumn severitiesColumn=getColumnModel().getColumn(SEVERITIES_COLUMN);
  severitiesColumn.setMaxWidth(20);
  final TableColumn isEnabledColumn=getColumnModel().getColumn(IS_ENABLED_COLUMN);
  isEnabledColumn.setMaxWidth(20);
  isEnabledColumn.setCellRenderer(new ThreeStateCheckBoxRenderer(false));
  isEnabledColumn.setCellEditor(new ThreeStateCheckBoxRenderer(true));
  addMouseMotionListener(new MouseAdapter(){
    @Override public void mouseMoved(    final MouseEvent e){
      final Point point=e.getPoint();
      final int column=columnAtPoint(point);
      if (column != SEVERITIES_COLUMN) {
        return;
      }
      final int row=rowAtPoint(point);
      final Object maybeIcon=getModel().getValueAt(row,column);
      if (maybeIcon instanceof MultiScopeSeverityIcon) {
        final LinkedHashMap<String,HighlightSeverity> scopeToAverageSeverityMap=((MultiScopeSeverityIcon)maybeIcon).getScopeToAverageSeverityMap();
        IdeTooltipManager.getInstance().show(new IdeTooltip(InspectionsConfigTreeTable.this,point,new ScopesAndSeveritiesHintTable(scopeToAverageSeverityMap)),false);
      }
    }
  }
);
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent event){
      final TreePath path=getTree().getPathForRow(getTree().getLeadSelectionRow());
      if (path != null) {
        final InspectionConfigTreeNode node=(InspectionConfigTreeNode)path.getLastPathComponent();
        if (node.isLeaf()) {
          swapInspectionEnableState();
        }
      }
      return true;
    }
  }
.installOn(this);
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      swapInspectionEnableState();
      updateUI();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0),JComponent.WHEN_FOCUSED);
  getEmptyText().setText("No enabled inspections available");
}
