{
  final ListSelectionListener selectionListener=new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      final List<CommittedChangeList> changeLists=myRevisionsList.getSelectedObjects();
      myRepositoryChangesBrowser.setChangesToDisplay(Collections.<Change>emptyList());
      myAlreadyMerged.clear();
      if (!changeLists.isEmpty()) {
        final List<SvnChangeList> svnChangeLists=ContainerUtil.findAll(changeLists,SvnChangeList.class);
        for (        SvnChangeList svnChangeList : svnChangeLists) {
          final Collection<String> notMerged=myMergeChecker.getNotMergedPaths(svnChangeList.getNumber());
          if (!ContainerUtil.isEmpty(notMerged)) {
            for (            String path : svnChangeList.getAffectedPaths()) {
              if (!notMerged.contains(path)) {
                myAlreadyMerged.add(svnChangeList.getByPath(path));
              }
            }
          }
        }
        myRepositoryChangesBrowser.setChangesToDisplay(CommittedChangesTreeBrowser.collectChanges(svnChangeLists,false));
      }
      mySplitter.doLayout();
      myRepositoryChangesBrowser.repaint();
    }
  }
;
  final MyListCellRenderer listCellRenderer=new MyListCellRenderer();
  myRevisionsList=new TableView<CommittedChangeList>(){
    @Override public TableCellRenderer getCellRenderer(    int row,    int column){
      return listCellRenderer;
    }
    @Override public void valueChanged(    ListSelectionEvent e){
      super.valueChanged(e);
      selectionListener.valueChanged(e);
    }
  }
;
  myRevisionsList.getExpandableItemsHandler().setEnabled(false);
  new TableViewSpeedSearch<CommittedChangeList>(myRevisionsList){
    @Override protected String getItemText(    @NotNull CommittedChangeList element){
      return element.getComment();
    }
  }
;
  final ListTableModel<CommittedChangeList> flatModel=new ListTableModel<CommittedChangeList>(FAKE_COLUMN);
  myRevisionsList.setModelAndUpdateColumns(flatModel);
  myRevisionsList.setTableHeader(null);
  myRevisionsList.setShowGrid(false);
  final AbstractBaseTagMouseListener mouseListener=new AbstractBaseTagMouseListener(){
    @Override public Object getTagAt(    @NotNull MouseEvent e){
      JTable table=(JTable)e.getSource();
      int row=table.rowAtPoint(e.getPoint());
      int column=table.columnAtPoint(e.getPoint());
      if (row == -1 || column == -1)       return null;
      listCellRenderer.customizeCellRenderer(table,table.getValueAt(row,column),table.isRowSelected(row));
      return listCellRenderer.myRenderer.getFragmentTagAt(e.getPoint().x - table.getCellRect(row,column,false).x);
    }
  }
;
  mouseListener.installOn(myRevisionsList);
  final PagedListWithActions.InnerComponentManager<CommittedChangeList> listsManager=new PagedListWithActions.InnerComponentManager<CommittedChangeList>(){
    @Override public Component getComponent(){
      return myRevisionsList;
    }
    @Override public void setData(    List<CommittedChangeList> committedChangeLists){
      flatModel.setItems(committedChangeLists);
      flatModel.fireTableDataChanged();
    }
    @Override public void refresh(){
      myRevisionsList.revalidate();
      myRevisionsList.repaint();
    }
  }
;
  myMore100Action=new MoreXAction(100);
  myMore500Action=new MoreXAction(500);
  final PagedListWithActions<CommittedChangeList> byRevisions=new PagedListWithActions<CommittedChangeList>(myListsEngine,listsManager,new MySelectAll(),new MyUnselectAll(),myMore100Action,myMore500Action);
  mySplitter=new Splitter(false,0.7f);
  mySplitter.setFirstComponent(byRevisions.getComponent());
  flatModel.setItems(myListsEngine.getCurrent());
  flatModel.fireTableDataChanged();
  myRepositoryChangesBrowser=new RepositoryChangesBrowser(myProject,Collections.<CommittedChangeList>emptyList(),Collections.<Change>emptyList(),null);
  myRepositoryChangesBrowser.getDiffAction().registerCustomShortcutSet(CommonShortcuts.getDiff(),myRevisionsList);
  setChangesDecorator();
  mySplitter.setSecondComponent(myRepositoryChangesBrowser);
  mySplitter.setDividerWidth(2);
  addRevisionListListeners();
  myPanel.add(mySplitter,BorderLayout.CENTER);
}
