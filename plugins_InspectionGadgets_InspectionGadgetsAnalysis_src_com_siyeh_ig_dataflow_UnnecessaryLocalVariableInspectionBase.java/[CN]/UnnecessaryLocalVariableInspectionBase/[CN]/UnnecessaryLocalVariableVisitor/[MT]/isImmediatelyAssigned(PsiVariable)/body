{
  final PsiCodeBlock containingScope=PsiTreeUtil.getParentOfType(variable,PsiCodeBlock.class,true,PsiClass.class);
  if (containingScope == null) {
    return false;
  }
  final PsiElement parent=variable.getParent();
  if (!(parent instanceof PsiDeclarationStatement)) {
    return false;
  }
  final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)parent;
  PsiStatement nextStatement=PsiTreeUtil.getNextSiblingOfType(declarationStatement,PsiStatement.class);
  if (!(nextStatement instanceof PsiExpressionStatement)) {
    return false;
  }
  final PsiExpressionStatement expressionStatement=(PsiExpressionStatement)nextStatement;
  final PsiExpression expression=expressionStatement.getExpression();
  if (!(expression instanceof PsiAssignmentExpression)) {
    return false;
  }
  final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)expression;
  final IElementType tokenType=assignmentExpression.getOperationTokenType();
  if (tokenType != JavaTokenType.EQ) {
    return false;
  }
  final PsiExpression rhs=ParenthesesUtils.stripParentheses(assignmentExpression.getRExpression());
  if (!(rhs instanceof PsiReferenceExpression)) {
    return false;
  }
  final PsiReferenceExpression reference=(PsiReferenceExpression)rhs;
  final PsiElement referent=reference.resolve();
  if (referent == null || !referent.equals(variable)) {
    return false;
  }
  final PsiExpression lhs=assignmentExpression.getLExpression();
  if (lhs instanceof PsiArrayAccessExpression) {
    return false;
  }
  if (isVariableUsedInFollowingDeclarations(variable,declarationStatement)) {
    return false;
  }
  nextStatement=PsiTreeUtil.getNextSiblingOfType(nextStatement,PsiStatement.class);
  while (nextStatement != null) {
    if (VariableAccessUtils.variableIsUsed(variable,nextStatement)) {
      return false;
    }
    nextStatement=PsiTreeUtil.getNextSiblingOfType(nextStatement,PsiStatement.class);
  }
  return true;
}
