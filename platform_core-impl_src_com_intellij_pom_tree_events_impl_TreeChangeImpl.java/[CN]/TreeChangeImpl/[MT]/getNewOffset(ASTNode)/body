{
  int optimizedResult=haveNotCalculated;
  ASTNode prev=node.getTreePrev();
  if (myLastNode == prev) {
    ChangeInfo prevChangeInfo=myChanges.get(prev);
    ChangeInfo changeInfo=myChanges.get(node);
    if (prevChangeInfo != null && changeInfo != null && prevChangeInfo.getChangeType() == ChangeInfo.REMOVED && changeInfo.getChangeType() == ChangeInfo.REMOVED) {
      optimizedResult=myLastOffsetInNewTree;
      myLastNode=node;
      myLastOffsetInNewTree=optimizedResult;
      if (!ourDoGetNewOffsetChecks)       return optimizedResult;
    }
  }
  int currentOffsetInNewTree=0;
  try {
    ASTNode current=myParent.getFirstChildNode();
    int i=0;
    Pair<ASTNode,Integer> currentChange=i < mySortedChanges.size() ? mySortedChanges.get(i) : null;
    int currentOldOffset=0;
    while (current != null) {
      boolean counted=false;
      while (currentChange != null && currentOldOffset == currentChange.getSecond().intValue()) {
        if (currentChange.getFirst() == node) {
          myLastNode=node;
          myLastOffsetInNewTree=currentOffsetInNewTree;
          return currentOffsetInNewTree;
        }
        if (current == currentChange.getFirst()) {
          final int textLength=current.getTextLength();
          counted=true;
          current=current.getTreeNext();
          currentOffsetInNewTree+=textLength;
        }
        final ChangeInfo changeInfo=myChanges.get(currentChange.getFirst());
        currentOldOffset+=changeInfo.getOldLength();
        ++i;
        currentChange=i < mySortedChanges.size() ? mySortedChanges.get(i) : null;
      }
      if (current == null)       break;
      if (!counted) {
        final int textLength=current.getTextLength();
        currentOldOffset+=textLength;
        current=current.getTreeNext();
        currentOffsetInNewTree+=textLength;
      }
    }
  }
  finally {
    if (ourDoGetNewOffsetChecks && optimizedResult != haveNotCalculated && optimizedResult != currentOffsetInNewTree) {
      LOG.error("Failed to calculate optimized getNewOffset:" + myChanges.get(node) + ","+ prev+ ","+ myChanges.get(prev));
      ourDoGetNewOffsetChecks=false;
    }
  }
  return currentOffsetInNewTree;
}
