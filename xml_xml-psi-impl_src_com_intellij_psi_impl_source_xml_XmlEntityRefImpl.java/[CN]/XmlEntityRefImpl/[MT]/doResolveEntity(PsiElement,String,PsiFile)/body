{
  return RecursionManager.doPreventingRecursion(targetElement,true,new Computable<CachedValueProvider.Result<XmlEntityDecl>>(){
    @Override public CachedValueProvider.Result<XmlEntityDecl> compute(){
      final List<PsiElement> deps=new ArrayList<>();
      final XmlEntityDecl[] result={null};
      PsiElementProcessor processor=new PsiElementProcessor(){
        @Override public boolean execute(        @NotNull PsiElement element){
          if (element instanceof XmlDoctype) {
            XmlDoctype xmlDoctype=(XmlDoctype)element;
            final String dtdUri=getDtdForEntity(xmlDoctype);
            if (dtdUri != null) {
              XmlFile file=XmlUtil.getContainingFile(element);
              if (file == null)               return true;
              final XmlFile xmlFile=XmlUtil.findNamespace(file,dtdUri);
              if (xmlFile != null) {
                if (xmlFile != targetElement) {
                  deps.add(xmlFile);
                  if (!XmlUtil.processXmlElements(xmlFile,this,true))                   return false;
                }
              }
            }
            final XmlMarkupDecl markupDecl=xmlDoctype.getMarkupDecl();
            if (markupDecl != null) {
              if (!XmlUtil.processXmlElements(markupDecl,this,true))               return false;
            }
          }
 else           if (element instanceof XmlEntityDecl) {
            XmlEntityDecl entityDecl=(XmlEntityDecl)element;
            final String declName=entityDecl.getName();
            if (StringUtil.equals(declName,entityName)) {
              result[0]=entityDecl;
              return false;
            }
          }
          return true;
        }
      }
;
      FileViewProvider provider=targetElement.getContainingFile().getViewProvider();
      deps.add(provider.getPsi(provider.getBaseLanguage()));
      boolean notfound=PsiTreeUtil.processElements(targetElement,processor);
      if (notfound) {
        if (contextFile != targetElement && contextFile != null && contextFile.isValid()) {
          notfound=PsiTreeUtil.processElements(contextFile,processor);
        }
      }
      if (notfound && targetElement instanceof XmlFile && deps.size() == 1 && ((XmlFile)targetElement).getFileType() != DTDFileType.INSTANCE) {
        XmlDocument document=((XmlFile)targetElement).getDocument();
        final XmlTag rootTag=document != null ? document.getRootTag() : null;
        XmlFile descriptorFile=null;
        if (HtmlUtil.isHtml5Document(document)) {
          descriptorFile=XmlUtil.findXmlFile((XmlFile)targetElement,Html5SchemaProvider.getCharsDtdLocation());
        }
 else         if (rootTag != null && document.getUserData(DISABLE_ENTITY_EXPAND) == null) {
          final XmlElementDescriptor descriptor=rootTag.getDescriptor();
          if (descriptor != null && !(descriptor instanceof AnyXmlElementDescriptor)) {
            PsiElement element=descriptor.getDeclaration();
            final PsiFile containingFile=element != null ? element.getContainingFile() : null;
            descriptorFile=containingFile instanceof XmlFile ? (XmlFile)containingFile : null;
          }
        }
        if (descriptorFile != null && !descriptorFile.getName().equals(((XmlFile)targetElement).getName() + ".dtd")) {
          deps.add(descriptorFile);
          XmlUtil.processXmlElements(descriptorFile,processor,true);
        }
      }
      return new CachedValueProvider.Result<>(result[0],ArrayUtil.toObjectArray(deps));
    }
  }
);
}
