{
  final BalloonLayoutData layoutData=new BalloonLayoutData();
  layoutDataRef.set(layoutData);
  final Color foreground=new JBColor(Gray._0,Gray._191);
  final JBColor fillColor=new JBColor(Gray._242,new Color(78,80,82));
  final JEditorPane text=new JEditorPane(){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      if (layoutData.showMinSize) {
        Point location=getCollapsedTextEndLocation(this,layoutData);
        if (location != null) {
          g.setColor(getForeground());
          g.drawString("...",location.x,location.y + g.getFontMetrics().getAscent());
        }
      }
    }
    @Override public void paint(    Graphics g){
      super.paint(g);
      g.setColor(Color.magenta);
      drawRect(g,0,0,getWidth(),getHeight());
    }
  }
;
  text.setEditorKit(UIUtil.getHTMLEditorKit());
  text.setForeground(foreground);
  final HyperlinkListener listener=NotificationsUtil.wrapListener(notification);
  if (listener != null) {
    text.addHyperlinkListener(listener);
  }
  int prefSize=new JLabel(NotificationsUtil.buildHtml(notification,null,true,null)).getPreferredSize().width;
  int maxSize=BalloonLayoutConfiguration.MaxWidth;
  String style=prefSize > maxSize ? "width:" + maxSize + "px;" : null;
  text.setText(NotificationsUtil.buildHtml(notification,style,true,foreground));
  text.setEditable(false);
  text.setOpaque(false);
  if (UIUtil.isUnderNimbusLookAndFeel()) {
    text.setBackground(UIUtil.TRANSPARENT_COLOR);
  }
  text.setBorder(null);
  final JPanel content=new NonOpaquePanel(new BorderLayout());
  if (text.getCaret() != null) {
    text.setCaretPosition(0);
  }
  final JScrollPane pane=ScrollPaneFactory.createScrollPane(text,true);
  pane.setOpaque(false);
  pane.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener(){
    @Override public void adjustmentValueChanged(    AdjustmentEvent e){
      JScrollBar scrollBar=pane.getVerticalScrollBar();
      if (layoutData.showMinSize && scrollBar.getValue() > 0) {
        scrollBar.removeAdjustmentListener(this);
        scrollBar.setValue(0);
        scrollBar.addAdjustmentListener(this);
      }
    }
  }
);
  List<AnAction> actions=notification.getActions();
  LinkLabel<Void> expandAction=null;
  int lines=3;
  if (notification.isTitle()) {
    lines--;
  }
  if (!actions.isEmpty()) {
    lines--;
  }
  layoutData.fullHeight=text.getPreferredSize().height;
  layoutData.twoLineHeight=calculateContentHeight(lines);
  layoutData.maxScrollHeight=Math.min(layoutData.fullHeight,calculateContentHeight(10));
  layoutData.configuration=BalloonLayoutConfiguration.create(notification,layoutData);
  boolean showFullContent=notification instanceof NotificationActionProvider;
  if (!showFullContent && layoutData.maxScrollHeight != layoutData.fullHeight) {
    pane.setViewport(new GradientViewport(text,JBUI.insets(10,0),true){
      @Nullable @Override protected Color getViewColor(){
        return fillColor;
      }
      @Override protected void paintGradient(      Graphics g){
        if (!layoutData.showMinSize) {
          super.paintGradient(g);
        }
      }
    }
);
  }
  pane.getViewport().setOpaque(false);
  if (!Registry.is("ide.scroll.new.layout")) {
    pane.getVerticalScrollBar().setUI(ButtonlessScrollBarUI.createTransparent());
  }
  pane.setBackground(fillColor);
  pane.getViewport().setBackground(fillColor);
  pane.getVerticalScrollBar().setBackground(fillColor);
  if (!showFullContent && layoutData.twoLineHeight < layoutData.fullHeight) {
    text.setPreferredSize(null);
    Dimension size=text.getPreferredSize();
    size.height=layoutData.twoLineHeight;
    text.setPreferredSize(size);
    text.setSize(size);
    layoutData.showMinSize=true;
    pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    pane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
    pane.setPreferredSize(size);
    expandAction=new LinkLabel<Void>(null,icon(AllIcons.Ide.Notification.Expand),new LinkListener<Void>(){
      @Override public void linkSelected(      LinkLabel link,      Void ignored){
        layoutData.showMinSize=!layoutData.showMinSize;
        text.setPreferredSize(null);
        Dimension size=text.getPreferredSize();
        if (layoutData.showMinSize) {
          size.height=layoutData.twoLineHeight;
          pane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
          link.setIcon(icon(AllIcons.Ide.Notification.Expand));
          link.setHoveringIcon(icon(AllIcons.Ide.Notification.ExpandHover));
        }
 else {
          size.height=layoutData.fullHeight;
          pane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
          link.setIcon(icon(AllIcons.Ide.Notification.Collapse));
          link.setHoveringIcon(icon(AllIcons.Ide.Notification.CollapseHover));
        }
        text.setPreferredSize(size);
        text.setSize(size);
        if (!layoutData.showMinSize) {
          size=new Dimension(size.width,layoutData.maxScrollHeight);
        }
        pane.setPreferredSize(size);
        content.doLayout();
        layoutData.doLayout.run();
      }
    }
);
    expandAction.setHoveringIcon(icon(AllIcons.Ide.Notification.ExpandHover));
  }
  final CenteredLayoutWithActions layout=new CenteredLayoutWithActions(text,layoutData);
  JPanel centerPanel=new NonOpaquePanel(layout){
    @Override public void paint(    Graphics g){
      super.paint(g);
      g.setColor(Color.red);
      drawRect(g,0,0,getWidth(),getHeight());
    }
    @Override protected void paintChildren(    Graphics g){
      super.paintChildren(g);
      Component title=layout.getTitle();
      if (title != null && layoutData.showActions != null && layoutData.showActions.compute()) {
        int width=layoutData.configuration.allActionsOffset;
        int x=getWidth() - width - JBUI.scale(5);
        int y=layoutData.configuration.topSpaceHeight;
        int height=title instanceof JEditorPane ? getFirstLineHeight((JEditorPane)title) : title.getHeight();
        g.setColor(fillColor);
        g.fillRect(x,y,width,height);
        width=layoutData.configuration.beforeGearSpace;
        x-=width;
        ((Graphics2D)g).setPaint(new GradientPaint(x,y,ColorUtil.withAlpha(fillColor,0.2),x + width,y,fillColor));
        g.fillRect(x,y,width,height);
      }
    }
  }
;
  content.add(centerPanel,BorderLayout.CENTER);
  if (notification.isTitle()) {
    JLabel title=new JLabel(NotificationsUtil.buildHtml(notification,"white-space: nowrap;",false,foreground)){
      @Override public void paint(      Graphics g){
        super.paint(g);
        g.setColor(Color.blue);
        drawRect(g,0,0,getWidth(),getHeight());
      }
    }
;
    title.setOpaque(false);
    if (UIUtil.isUnderNimbusLookAndFeel()) {
      title.setBackground(UIUtil.TRANSPARENT_COLOR);
    }
    title.setForeground(foreground);
    centerPanel.add(title,BorderLayout.NORTH);
  }
  if (expandAction != null) {
    centerPanel.add(expandAction,BorderLayout.EAST);
  }
  if (notification.isContent()) {
    centerPanel.add(pane,BorderLayout.CENTER);
  }
  final Icon icon=icon(NotificationsUtil.getIcon(notification));
  JComponent iconComponent=new JComponent(){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      icon.paintIcon(this,g,layoutData.configuration.iconOffset.width,layoutData.configuration.iconOffset.height);
      g.setColor(Color.black);
      drawRect(g,0,0,getWidth(),getHeight());
    }
  }
;
  iconComponent.setOpaque(false);
  iconComponent.setPreferredSize(new Dimension(layoutData.configuration.iconPanelWidth,2 * layoutData.configuration.iconOffset.height + icon.getIconHeight()));
  content.add(iconComponent,BorderLayout.WEST);
  JPanel buttons=createButtons(notification,content,listener);
  if (buttons != null) {
    buttons.setBorder(new EmptyBorder(0,0,JBUI.scale(5),JBUI.scale(7)));
  }
  if (buttons == null && !actions.isEmpty()) {
    createActionPanel(notification,centerPanel,layoutData.configuration.actionGap);
  }
  text.setSize(text.getPreferredSize());
  Dimension paneSize=new Dimension(text.getPreferredSize());
  int maxWidth=JBUI.scale(600);
  if (windowComponent != null) {
    maxWidth=Math.min(maxWidth,windowComponent.getWidth() - 20);
  }
  if (paneSize.width > maxWidth) {
    pane.setPreferredSize(new Dimension(maxWidth,paneSize.height + UIUtil.getScrollBarWidth()));
  }
  JBColor borderColor=new JBColor(Gray._178.withAlpha(205),new Color(86,90,92,205));
  final BalloonBuilder builder=JBPopupFactory.getInstance().createBalloonBuilder(content);
  builder.setFillColor(fillColor).setCloseButtonEnabled(buttons == null).setShowCallout(showCallout).setShadow(false).setHideOnClickOutside(hideOnClickOutside).setHideOnAction(hideOnClickOutside).setHideOnKeyOutside(hideOnClickOutside).setHideOnFrameResize(false).setBorderColor(borderColor).setBorderInsets(new Insets(0,0,0,0));
  final BalloonImpl balloon=(BalloonImpl)builder.createBalloon();
  balloon.setAnimationEnabled(false);
  notification.setBalloon(balloon);
  balloon.setShadowBorderProvider(new NotificationBalloonShadowBorderProvider(fillColor,borderColor));
  if (buttons == null) {
    balloon.setActionProvider(new NotificationBalloonActionProvider(balloon,layout.getTitle(),layoutData,notification.getGroupId()));
  }
  return balloon;
}
