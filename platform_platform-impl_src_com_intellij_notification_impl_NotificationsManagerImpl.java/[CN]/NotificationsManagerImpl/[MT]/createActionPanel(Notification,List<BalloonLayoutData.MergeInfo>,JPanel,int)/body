{
  JPanel actionPanel=new NonOpaquePanel(new HorizontalLayout(gap,SwingConstants.CENTER));
  centerPanel.add(BorderLayout.SOUTH,actionPanel);
  List<AnAction> actions=notification.getActions();
  if (actions.size() > 2) {
    DropDownAction action=new DropDownAction(notification.getDropDownText(),new LinkListener<Void>(){
      @Override public void linkSelected(      LinkLabel link,      Void ignored){
        Container parent=link.getParent();
        int size=parent.getComponentCount();
        DefaultActionGroup group=new DefaultActionGroup();
        for (int i=1; i < size; i++) {
          Component component=parent.getComponent(i);
          if (!component.isVisible()) {
            group.add(((LinkLabel<AnAction>)component).getLinkData());
          }
        }
        showPopup(link,group);
      }
    }
);
    action.setVisible(false);
    actionPanel.add(action);
  }
  for (  AnAction action : actions) {
    Presentation presentation=action.getTemplatePresentation();
    actionPanel.add(HorizontalLayout.LEFT,new LinkLabel<AnAction>(presentation.getText(),presentation.getIcon(),new LinkListener<AnAction>(){
      @Override public void linkSelected(      LinkLabel aSource,      AnAction action){
        Notification.fire(notification,action);
      }
    }
,action));
  }
  if (mergeData != null) {
    final int size=mergeData.size();
    if (size == 1) {
      actionPanel.add(HorizontalLayout.RIGHT,new LinkLabel<BalloonLayoutData.MergeInfo>("History",null,new LinkListener<BalloonLayoutData.MergeInfo>(){
        @Override public void linkSelected(        LinkLabel aSource,        BalloonLayoutData.MergeInfo info){
          EventLog.showNotification(info.groupId,info.id);
        }
      }
,mergeData.get(0)){
        @Override protected String getStatusBarText(){
          return getLinkData().status;
        }
      }
);
    }
 else {
      actionPanel.add(HorizontalLayout.RIGHT,new DropDownAction("History",new LinkListener<Void>(){
        @Override public void linkSelected(        LinkLabel link,        Void aLinkData){
          DefaultActionGroup group=new DefaultActionGroup();
          for (int i=0; i < size; i++) {
            BalloonLayoutData.MergeInfo info=mergeData.get(i);
            group.add(new AnAction(String.valueOf(i + 1),info.status,null){
              @Override public void actionPerformed(              AnActionEvent e){
                EventLog.showNotification(info.groupId,info.id);
              }
            }
);
          }
          showPopup(link,group);
        }
      }
));
    }
  }
}
