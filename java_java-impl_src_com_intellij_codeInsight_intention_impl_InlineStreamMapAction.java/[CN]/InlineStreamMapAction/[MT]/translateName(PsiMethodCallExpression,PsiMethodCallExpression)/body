{
  PsiMethod nextMethod=nextCall.resolveMethod();
  if (nextMethod == null)   return null;
  String nextName=nextMethod.getName();
  PsiMethod method=prevCall.resolveMethod();
  if (method == null)   return null;
  PsiClass prevClass=method.getContainingClass();
  if (prevClass == null)   return null;
  String prevClassName=prevClass.getQualifiedName();
  if (prevClassName == null)   return null;
  String prevName=method.getName();
  if (nextName.endsWith("Match") || nextName.startsWith("forEach"))   return nextName;
  if (nextName.equals("map")) {
    return translateMap(prevName);
  }
  if (prevName.equals("map")) {
    return translateMap(nextName);
  }
  if (MAP_METHODS.contains(nextName)) {
    PsiType type=nextMethod.getReturnType();
    if (!(type instanceof PsiClassType))     return null;
    PsiClass nextClass=((PsiClassType)type).resolve();
    if (nextClass == null)     return null;
    String nextClassName=nextClass.getQualifiedName();
    if (nextClassName == null)     return null;
    if (prevClassName.equals(nextClassName))     return "map";
switch (nextClassName) {
case CommonClassNames.JAVA_UTIL_STREAM_INT_STREAM:
      return "mapToInt";
case CommonClassNames.JAVA_UTIL_STREAM_LONG_STREAM:
    return "mapToLong";
case CommonClassNames.JAVA_UTIL_STREAM_DOUBLE_STREAM:
  return "mapToDouble";
case CommonClassNames.JAVA_UTIL_STREAM_STREAM:
return "mapToObj";
default :
return null;
}
}
if (nextName.equals("flatMap") && prevClassName.equals(CommonClassNames.JAVA_UTIL_STREAM_STREAM)) {
String mapMethod=translateMap(prevName);
return "flatM" + mapMethod.substring(1);
}
return null;
}
