{
  final List<VirtualFile> classRoots=getClassRoots();
  if (classRoots.isEmpty()) {
    return null;
  }
  if (myUseExtendedScope) {
    scope=addNonClasspathScope(myProject,scope);
  }
  final String relPath=qualifiedName.replace('.','/');
  for (  final VirtualFile classRoot : classRoots) {
    if (scope.contains(classRoot)) {
      if (myCheckForSources) {
        final VirtualFile classSrcFile=classRoot.findFileByRelativePath(relPath + JavaFileType.DOT_DEFAULT_EXTENSION);
        if (classSrcFile != null && classSrcFile.isValid()) {
          final PsiFile file=myManager.findFile(classSrcFile);
          if (file instanceof PsiJavaFile) {
            for (            PsiClass aClass : ((PsiJavaFile)file).getClasses()) {
              if (qualifiedName.equals(aClass.getQualifiedName())) {
                return aClass;
              }
            }
          }
        }
      }
      final VirtualFile classFile=classRoot.findFileByRelativePath(relPath + ".class");
      if (classFile != null) {
        if (!classFile.isValid()) {
          LOG.error("Invalid child of valid parent: " + classFile.getPath() + "; "+ classRoot.isValid()+ " path="+ classRoot.getPath());
          return null;
        }
        final PsiFile file=myManager.findFile(classFile);
        if (file instanceof PsiClassOwner) {
          final PsiClass[] classes=((PsiClassOwner)file).getClasses();
          if (classes.length == 1) {
            return classes[0];
          }
        }
      }
    }
  }
  return null;
}
