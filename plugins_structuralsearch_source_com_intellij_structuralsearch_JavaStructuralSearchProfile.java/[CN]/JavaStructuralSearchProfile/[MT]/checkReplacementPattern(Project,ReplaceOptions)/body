{
  MatchOptions matchOptions=options.getMatchOptions();
  FileType fileType=matchOptions.getFileType();
  PsiElement[] statements=MatcherImplUtil.createTreeFromText(matchOptions.getSearchPattern(),PatternTreeContext.Block,fileType,project);
  boolean searchIsExpression=false;
  for (  PsiElement statement : statements) {
    if (statement.getLastChild() instanceof PsiErrorElement) {
      searchIsExpression=true;
      break;
    }
  }
  PsiElement[] statements2=MatcherImplUtil.createTreeFromText(options.getReplacement(),PatternTreeContext.Block,fileType,project);
  boolean replaceIsExpression=false;
  for (  PsiElement statement : statements2) {
    if (statement.getLastChild() instanceof PsiErrorElement) {
      replaceIsExpression=true;
      break;
    }
  }
  if (searchIsExpression != replaceIsExpression) {
    throw new UnsupportedPatternException(searchIsExpression ? SSRBundle.message("replacement.template.is.not.expression.error.message") : SSRBundle.message("search.template.is.not.expression.error.message"));
  }
}
