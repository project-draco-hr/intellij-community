{
  final SvnCommand command=new SvnCommand(base,commandName,exePath,configDir);
  command.setOriginalParameters(originalParameters);
  command.addParameters(parameters);
  command.addParameters("--non-interactive");
  final AtomicReference<Throwable> exceptionRef=new AtomicReference<Throwable>();
  command.addListener(new LineCommandAdapter(){
    @Override public void onLineAvailable(    String line,    Key outputType){
      if (LOG.isDebugEnabled()) {
        LOG.debug("==> " + line);
      }
      if (ApplicationManager.getApplication().isUnitTestMode()) {
        System.out.println("==> " + line);
      }
      listener.onLineAvailable(line,outputType);
      if (listener.isCanceled()) {
        LOG.info("Cancelling command: " + command.getCommandText());
        command.destroyProcess();
      }
    }
    @Override public void processTerminated(    int exitCode){
      listener.processTerminated(exitCode);
      command.setExitCodeReference(exitCode);
    }
    @Override public void startFailed(    Throwable exception){
      listener.startFailed(exception);
      exceptionRef.set(exception);
    }
  }
);
  command.start();
  boolean finished;
  do {
    finished=command.waitFor(500);
    if (!finished && (command.wasError() || command.needsDestroy())) {
      command.waitFor(1000);
      command.doDestroyProcess();
      break;
    }
  }
 while (!finished);
  if (exceptionRef.get() != null) {
    throw new SvnBindException(exceptionRef.get());
  }
  return command;
}
