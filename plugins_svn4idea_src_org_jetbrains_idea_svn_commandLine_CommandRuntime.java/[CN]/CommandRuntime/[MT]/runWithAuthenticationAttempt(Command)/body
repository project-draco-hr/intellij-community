{
  try {
    writeIdeaConfig2SubversionConfig(command.getRepositoryUrl());
    if (command.getRepositoryUrl() == null) {
      command.setRepositoryUrl(resolveRepositoryUrl(command));
    }
    if (command.getWorkingDirectory() == null) {
      command.setWorkingDirectory(resolveWorkingDirectory(command));
    }
    command.setConfigDir(myAuthCallback.getSpecialConfigDir());
    command.addParameters("--non-interactive");
    command.saveOriginalParameters();
    while (true) {
      final CommandExecutor executor=newExecutor(command);
      executor.run();
      final Integer exitCode=executor.getExitCodeReference();
      if (exitCode == null || exitCode != 0) {
        logNullExitCode(executor,exitCode);
        if (executor.getErrorOutput().length() > 0) {
          final String errText=executor.getErrorOutput().trim();
          final AuthCallbackCase callback=createCallback(errText,command.getRepositoryUrl());
          if (callback != null) {
            cleanup(executor,command.getWorkingDirectory());
            if (callback.getCredentials(errText)) {
              if (myAuthCallback.getSpecialConfigDir() != null) {
                command.setConfigDir(myAuthCallback.getSpecialConfigDir());
              }
              List<String> newParameters=command.getParameters();
              callback.updateParameters(newParameters);
              command.setParameters(newParameters);
              continue;
            }
          }
          throw new SvnBindException(errText);
        }
 else {
          if (exitCode != null) {
            throw new SvnBindException("Svn process exited with error code: " + exitCode);
          }
        }
      }
 else       if (executor.getErrorOutput().length() > 0) {
        LOG.info("Detected warning - " + executor.getErrorOutput());
      }
      return executor;
    }
  }
  finally {
    myAuthCallback.reset();
  }
}
