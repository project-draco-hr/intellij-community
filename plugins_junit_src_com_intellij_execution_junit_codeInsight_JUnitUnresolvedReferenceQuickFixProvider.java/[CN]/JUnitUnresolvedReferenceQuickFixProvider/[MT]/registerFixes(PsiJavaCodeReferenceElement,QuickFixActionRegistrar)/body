{
  final PsiElement psiElement=reference.getElement();
  @NonNls final String referenceName=reference.getRangeInElement().substring(psiElement.getText());
  Project project=psiElement.getProject();
  PsiFile containingFile=psiElement.getContainingFile();
  if (containingFile == null)   return;
  final VirtualFile classVFile=containingFile.getVirtualFile();
  if (classVFile == null)   return;
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  final Module currentModule=fileIndex.getModuleForFile(classVFile);
  if (currentModule == null)   return;
  final JavaTestFramework framework;
  @NonNls final String className;
  if ("TestCase".equals(referenceName)) {
    framework=TestFramework.EXTENSION_NAME.findExtension(JUnit3Framework.class);
    className="junit.framework.TestCase";
  }
 else   if (PsiTreeUtil.getParentOfType(psiElement,PsiAnnotation.class) != null && isJunitAnnotationName(referenceName,psiElement)) {
    framework=TestFramework.EXTENSION_NAME.findExtension(JUnit4Framework.class);
    className="org.junit." + referenceName;
  }
 else {
    return;
  }
  PsiClass found=JavaPsiFacade.getInstance(project).findClass(className,currentModule.getModuleWithDependenciesAndLibrariesScope(true));
  if (found != null)   return;
  final OrderEntryFix platformFix=new OrderEntryFix(){
    @Override @NotNull public String getText(){
      return QuickFixBundle.message("orderEntry.fix.add.junit.jar.to.classpath");
    }
    @Override @NotNull public String getFamilyName(){
      return getText();
    }
    @Override public boolean isAvailable(    @NotNull Project project,    Editor editor,    PsiFile file){
      return !project.isDisposed() && !currentModule.isDisposed();
    }
    @Override public void invoke(    @NotNull Project project,    @Nullable Editor editor,    PsiFile file){
      List<String> jarPaths=framework.getLibraryPaths();
      String libraryName=jarPaths.size() == 1 ? null : framework.getName();
      addJarsToRootsAndImportClass(jarPaths,libraryName,currentModule,editor,reference,className);
    }
  }
;
  final OrderEntryFix providedFix=OrderEntryFixProvider.find(new Function<OrderEntryFixProvider,OrderEntryFix>(){
    @Override public OrderEntryFix fun(    OrderEntryFixProvider provider){
      return provider.getJUnitFix(reference,platformFix,currentModule,framework,className);
    }
  }
);
  final OrderEntryFix fix=ObjectUtils.notNull(providedFix,platformFix);
  registrar.register(fix);
}
