{
  PsiElement psiElement=reference.getElement();
  String shortReferenceName=reference.getRangeInElement().substring(psiElement.getText());
  Project project=psiElement.getProject();
  PsiFile containingFile=psiElement.getContainingFile();
  if (containingFile == null)   return null;
  VirtualFile classVFile=containingFile.getVirtualFile();
  if (classVFile == null)   return null;
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  final Module currentModule=fileIndex.getModuleForFile(classVFile);
  if (currentModule == null)   return null;
  List<LocalQuickFix> result=ContainerUtil.newSmartList();
  JavaPsiFacade facade=JavaPsiFacade.getInstance(psiElement.getProject());
  registerExternalFixes(registrar,reference,psiElement,shortReferenceName,facade,currentModule,result);
  if (!result.isEmpty()) {
    return result;
  }
  Set<Object> librariesToAdd=new THashSet<>();
  PsiClass[] classes=PsiShortNamesCache.getInstance(project).getClassesByName(shortReferenceName,GlobalSearchScope.allScope(project));
  List<PsiClass> allowedDependencies=filterAllowedDependencies(psiElement,classes);
  if (allowedDependencies.isEmpty()) {
    return result;
  }
  classes=allowedDependencies.toArray(new PsiClass[allowedDependencies.size()]);
  OrderEntryFix moduleDependencyFix=new AddModuleDependencyFix(currentModule,classVFile,classes,reference);
  registrar.register(moduleDependencyFix);
  result.add(moduleDependencyFix);
  for (  final PsiClass aClass : classes) {
    if (!facade.getResolveHelper().isAccessible(aClass,psiElement,aClass))     continue;
    PsiFile psiFile=aClass.getContainingFile();
    if (psiFile == null)     continue;
    VirtualFile virtualFile=psiFile.getVirtualFile();
    if (virtualFile == null)     continue;
    ModuleFileIndex moduleFileIndex=ModuleRootManager.getInstance(currentModule).getFileIndex();
    for (    OrderEntry orderEntry : fileIndex.getOrderEntriesForFile(virtualFile)) {
      if (orderEntry instanceof LibraryOrderEntry) {
        final LibraryOrderEntry libraryEntry=(LibraryOrderEntry)orderEntry;
        final Library library=libraryEntry.getLibrary();
        if (library == null)         continue;
        VirtualFile[] files=library.getFiles(OrderRootType.CLASSES);
        if (files.length == 0)         continue;
        final VirtualFile jar=files[0];
        if (jar == null || libraryEntry.isModuleLevel() && !librariesToAdd.add(jar) || !librariesToAdd.add(library))         continue;
        OrderEntry entryForFile=moduleFileIndex.getOrderEntryForFile(virtualFile);
        if (entryForFile != null && !(entryForFile instanceof ExportableOrderEntry && ((ExportableOrderEntry)entryForFile).getScope() == DependencyScope.TEST && !ModuleRootManager.getInstance(currentModule).getFileIndex().isInTestSourceContent(classVFile))) {
          continue;
        }
        final OrderEntryFix platformFix=new AddLibraryToDependenciesFix(currentModule,library,reference,aClass.getQualifiedName());
        registrar.register(platformFix);
        result.add(platformFix);
      }
    }
  }
  return result;
}
