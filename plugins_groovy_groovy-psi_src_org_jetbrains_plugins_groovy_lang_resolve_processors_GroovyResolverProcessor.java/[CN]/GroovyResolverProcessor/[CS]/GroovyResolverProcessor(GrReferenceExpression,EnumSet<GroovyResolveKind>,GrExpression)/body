{
  myRef=ref;
  myAcceptableKinds=kinds;
  myName=getReferenceName(ref);
  myIsLValue=PsiUtil.isLValue(myRef);
  myThisType=PsiImplUtil.getQualifierType(ref);
  final PsiType[] argumentTypes=PsiUtil.getArgumentTypes(ref,false,myUpToArgument,false);
  myArgumentTypes=eraseTypes(argumentTypes);
  myTypeArguments=ref.getTypeArguments();
  myPropertySubstitutorComputer=new NotNullLazyValue<SubstitutorComputer>(){
    @NotNull @Override protected SubstitutorComputer compute(){
      return new SubstitutorComputer(myThisType,PsiType.EMPTY_ARRAY,myTypeArguments,ref,ref);
    }
  }
;
  myMethodSubstitutorComputer=new NotNullLazyValue<SubstitutorComputer>(){
    @NotNull @Override protected SubstitutorComputer compute(){
      return new SubstitutorComputer(myThisType,argumentTypes,myTypeArguments,ref,ref.getParent());
    }
  }
;
}
