{
  return new Visitor(holder,session){
    @Override protected void checkDocString(    @NotNull PyDocStringOwner node){
      super.checkDocString(node);
      final PyStringLiteralExpression docStringExpression1=node.getDocStringExpression();
      if (docStringExpression1 != null) {
        checkParameters(node,docStringExpression1);
      }
    }
    private boolean checkParameters(    @NotNull PyDocStringOwner pyDocStringOwner,    @NotNull PyStringLiteralExpression node){
      final String text=node.getText();
      if (text == null) {
        return false;
      }
      final StructuredDocString docString=DocStringUtil.parse(text,node);
      if (docString instanceof PlainDocString) {
        return false;
      }
      if (pyDocStringOwner instanceof PyFunction) {
        final PyParameter[] realParams=((PyFunction)pyDocStringOwner).getParameterList().getParameters();
        final List<PyNamedParameter> missingParams=getMissingParams(docString,realParams);
        boolean registered=false;
        if (!missingParams.isEmpty()) {
          for (          PyNamedParameter param : missingParams) {
            registerProblem(param,PyBundle.message("INSP.missing.parameter.in.docstring",param.getName()),new DocstringQuickFix(param,null));
          }
          registered=true;
        }
        final List<Substring> unexpectedParams=getUnexpectedParams(docString,realParams);
        if (!unexpectedParams.isEmpty()) {
          for (          Substring param : unexpectedParams) {
            final ProblemsHolder holder=getHolder();
            if (holder != null) {
              holder.registerProblem(node,param.getTextRange(),PyBundle.message("INSP.unexpected.parameter.in.docstring",param),new DocstringQuickFix(null,param.getValue()));
            }
          }
          registered=true;
        }
        return registered;
      }
      return false;
    }
  }
;
}
