{
  if (!(element instanceof PsiModifierListOwner))   return false;
  PsiModifierListOwner owner=(PsiModifierListOwner)element;
  if (!ADDITIONAL_ANNOTATIONS.isEmpty() && ADDITIONAL_ANNOTATIONS.contains(Deprecated.class.getName()) && element instanceof PsiDocCommentOwner&& ((PsiDocCommentOwner)element).isDeprecated()) {
    return true;
  }
  if (element instanceof PsiClass) {
    final String qualifiedName=((PsiClass)element).getQualifiedName();
    if (qualifiedName != null) {
      for (      ClassPattern pattern : getPatterns()) {
        if (pattern.method.isEmpty() && isAcceptedByPattern((PsiClass)element,qualifiedName,pattern,new HashSet<>())) {
          return true;
        }
      }
    }
  }
  if (element instanceof PsiMethod) {
    final PsiClass containingClass=((PsiMethod)element).getContainingClass();
    if (containingClass != null) {
      final String qualifiedName=containingClass.getQualifiedName();
      if (qualifiedName != null) {
        final String name=((PsiMethod)element).getName();
        for (        ClassPattern pattern : getPatterns()) {
          if (pattern.method.isEmpty())           continue;
          boolean acceptedName=name.equals(pattern.method);
          if (!acceptedName) {
            final Pattern methodRegexp=pattern.getMethodRegexp();
            acceptedName=methodRegexp != null && methodRegexp.matcher(name).matches();
          }
          if (acceptedName && isAcceptedByPattern(containingClass,qualifiedName,pattern,new HashSet<>())) {
            return true;
          }
        }
      }
    }
  }
  return AnnotationUtil.checkAnnotatedUsingPatterns(owner,ADDITIONAL_ANNOTATIONS) || AnnotationUtil.checkAnnotatedUsingPatterns(owner,getAdditionalAnnotations());
}
