{
  myTemporaryEntryPoints.remove(anEntryPoint);
  Set<Map.Entry<String,SmartRefElementPointer>> set=myPersistentEntryPoints.entrySet();
  String key=null;
  for (  Map.Entry<String,SmartRefElementPointer> entry : set) {
    SmartRefElementPointer value=entry.getValue();
    if (value.getRefElement() == anEntryPoint) {
      key=entry.getKey();
      break;
    }
  }
  if (key != null) {
    myPersistentEntryPoints.remove(key);
  }
  ((RefElementImpl)anEntryPoint).setEntry(false);
  if (anEntryPoint.isPermanentEntry() && anEntryPoint.isValid()) {
    final Project project=anEntryPoint.getElement().getProject();
    final EntryPointsManager entryPointsManager=getInstance(project);
    if (this != entryPointsManager) {
      entryPointsManager.removeEntryPoint(anEntryPoint);
    }
  }
  if (anEntryPoint instanceof RefMethod && ((RefMethod)anEntryPoint).isConstructor() || anEntryPoint instanceof RefClass) {
    final RefClass aClass=anEntryPoint instanceof RefClass ? (RefClass)anEntryPoint : ((RefMethod)anEntryPoint).getOwnerClass();
    final String qualifiedName=aClass.getQualifiedName();
    for (Iterator<ClassPattern> iterator=getPatterns().iterator(); iterator.hasNext(); ) {
      if (Comparing.equal(iterator.next().pattern,qualifiedName)) {
        iterator.remove();
      }
    }
  }
}
