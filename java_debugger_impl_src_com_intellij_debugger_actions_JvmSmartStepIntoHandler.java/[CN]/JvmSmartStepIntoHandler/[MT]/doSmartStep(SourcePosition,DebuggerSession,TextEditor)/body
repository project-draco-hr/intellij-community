{
  final List<SmartStepTarget> targets=findSmartStepTargets(position);
  if (!targets.isEmpty()) {
    final SmartStepTarget firstTarget=targets.get(0);
    if (targets.size() == 1) {
      session.sessionResumed();
      session.stepInto(Registry.is("debugger.single.smart.step.force"),createMethodFilter(firstTarget));
    }
 else {
      final Editor editor=fileEditor.getEditor();
      final PsiMethodListPopupStep popupStep=new PsiMethodListPopupStep(editor,targets,new PsiMethodListPopupStep.OnChooseRunnable(){
        public void execute(        SmartStepTarget chosenTarget){
          session.sessionResumed();
          session.stepInto(true,createMethodFilter(chosenTarget));
        }
      }
);
      ListPopupImpl popup=new ListPopupImpl(popupStep);
      DebuggerUIUtil.registerExtraHandleShortcuts(popup,XDebuggerActions.STEP_INTO,XDebuggerActions.SMART_STEP_INTO);
      popup.setAdText(DebuggerUIUtil.getSelectionShortcutsAdText(XDebuggerActions.STEP_INTO,XDebuggerActions.SMART_STEP_INTO));
      popup.addListSelectionListener(new ListSelectionListener(){
        public void valueChanged(        ListSelectionEvent e){
          popupStep.getScopeHighlighter().dropHighlight();
          if (!e.getValueIsAdjusting()) {
            final SmartStepTarget selectedTarget=(SmartStepTarget)((JBList)e.getSource()).getSelectedValue();
            if (selectedTarget != null) {
              highlightTarget(popupStep,selectedTarget);
            }
          }
        }
      }
);
      highlightTarget(popupStep,firstTarget);
      DebuggerUIUtil.showPopupForEditorLine(popup,editor,position.getLine());
    }
    return true;
  }
  return false;
}
