{
  LOG.assertTrue(suspendContext.myVotesToVote > 0);
  suspendContext.myVotesToVote--;
  if (LOG.isDebugEnabled()) {
    LOG.debug("myVotesToVote = " + suspendContext.myVotesToVote);
  }
  if (suspendContext.myVotesToVote == 0) {
    if (suspendContext.myIsVotedForResume) {
      myDebugProcess.getManagerThread().schedule(new DebuggerCommandImpl(){
        @Override protected void action() throws Exception {
          resume(suspendContext);
        }
        @Override public Priority getPriority(){
          return Priority.HIGH;
        }
      }
);
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug("vote paused");
      }
      myDebugProcess.logThreads();
      myDebugProcess.cancelRunToCursorBreakpoint();
      final ThreadReferenceProxyImpl thread=suspendContext.getThread();
      myDebugProcess.deleteStepRequests(thread != null ? thread.getThreadReference() : null);
      notifyPaused(suspendContext);
    }
  }
}
