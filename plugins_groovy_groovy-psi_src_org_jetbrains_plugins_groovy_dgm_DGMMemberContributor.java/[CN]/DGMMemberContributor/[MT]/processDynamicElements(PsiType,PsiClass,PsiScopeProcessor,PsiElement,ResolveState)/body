{
  if (!ResolveUtil.shouldProcessMethods(processor.getHint(ElementClassHint.KEY)))   return;
  final Project project=place.getProject();
  ConcurrentMap<GlobalSearchScope,List<GdkMethodHolder>> map=CachedValuesManager.getManager(project).getCachedValue(project,new CachedValueProvider<ConcurrentMap<GlobalSearchScope,List<GdkMethodHolder>>>(){
    @Nullable @Override public Result<ConcurrentMap<GlobalSearchScope,List<GdkMethodHolder>>> compute(){
      ConcurrentMap<GlobalSearchScope,List<GdkMethodHolder>> value=ContainerUtil.createConcurrentSoftValueMap();
      return Result.create(value,PsiModificationTracker.MODIFICATION_COUNT);
    }
  }
);
  GlobalSearchScope scope=place.getResolveScope();
  List<GdkMethodHolder> gdkMethods=map.get(scope);
  if (gdkMethods == null) {
    map.put(scope,gdkMethods=calcGdkMethods(project,scope));
  }
  for (  GdkMethodHolder holder : gdkMethods) {
    if (!holder.processMethods(processor,state,qualifierType,project)) {
      return;
    }
  }
}
