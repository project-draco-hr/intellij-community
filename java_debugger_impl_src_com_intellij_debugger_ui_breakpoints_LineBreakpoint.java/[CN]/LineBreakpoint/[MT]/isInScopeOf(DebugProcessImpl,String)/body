{
  final SourcePosition position=getSourcePosition();
  if (position != null) {
    final VirtualFile breakpointFile=position.getFile().getVirtualFile();
    final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
    if (breakpointFile != null && fileIndex.isInSourceContent(breakpointFile)) {
      final Collection<VirtualFile> candidates=findClassCandidatesInSourceContent(className,debugProcess.getSearchScope(),fileIndex);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Found " + (candidates == null ? "null" : candidates.size()) + " candidate containing files for class "+ className);
      }
      if (candidates == null) {
        return true;
      }
      for (      VirtualFile classFile : candidates) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Breakpoint file: " + breakpointFile.getPath() + "; candidate file: "+ classFile.getPath());
        }
        if (breakpointFile.equals(classFile)) {
          return true;
        }
      }
      if (LOG.isDebugEnabled()) {
        final GlobalSearchScope scope=debugProcess.getSearchScope();
        final boolean contains=scope.contains(breakpointFile);
        final Project project=getProject();
        final List<VirtualFile> files=ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(),project,scope),new Function<PsiClass,VirtualFile>(){
          @Override public VirtualFile fun(          PsiClass aClass){
            return aClass.getContainingFile().getVirtualFile();
          }
        }
);
        final List<VirtualFile> allFiles=ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(),project,new EverythingGlobalScope(project)),new Function<PsiClass,VirtualFile>(){
          @Override public VirtualFile fun(          PsiClass aClass){
            return aClass.getContainingFile().getVirtualFile();
          }
        }
);
        final VirtualFile contentRoot=fileIndex.getContentRootForFile(breakpointFile);
        final Module module=fileIndex.getModuleForFile(breakpointFile);
        LOG.debug("Did not find '" + className + "' in "+ scope+ "; contains="+ contains+ "; contentRoot="+ contentRoot+ "; module = "+ module+ "; all files in index are: "+ files+ "; all possible files are: "+ allFiles);
      }
      return false;
    }
  }
  return true;
}
