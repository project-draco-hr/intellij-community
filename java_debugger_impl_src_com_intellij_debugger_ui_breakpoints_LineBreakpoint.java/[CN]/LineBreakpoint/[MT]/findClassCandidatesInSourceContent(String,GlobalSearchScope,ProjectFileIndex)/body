{
  final int dollarIndex=className.indexOf("$");
  final String topLevelClassName=dollarIndex >= 0 ? className.substring(0,dollarIndex) : className;
  return ApplicationManager.getApplication().runReadAction(new Computable<Collection<VirtualFile>>(){
    @Nullable public Collection<VirtualFile> compute(){
      final PsiClass[] classes=JavaPsiFacade.getInstance(myProject).findClasses(topLevelClassName,scope);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Found " + classes.length + " classes "+ topLevelClassName+ " in scope "+ scope);
      }
      if (classes.length == 0) {
        return null;
      }
      final List<VirtualFile> list=new ArrayList<VirtualFile>(classes.length);
      for (      PsiClass aClass : classes) {
        final PsiFile psiFile=aClass.getContainingFile();
        if (LOG.isDebugEnabled()) {
          final StringBuilder msg=new StringBuilder();
          msg.append("Checking class ").append(aClass.getQualifiedName());
          msg.append("\n\t").append("PsiFile=").append(psiFile);
          if (psiFile != null) {
            final VirtualFile vFile=psiFile.getVirtualFile();
            msg.append("\n\t").append("VirtualFile=").append(vFile);
            if (vFile != null) {
              msg.append("\n\t").append("isInSourceContent=").append(fileIndex.isInSourceContent(vFile));
            }
          }
          LOG.debug(msg.toString());
        }
        if (psiFile == null) {
          return null;
        }
        final VirtualFile vFile=psiFile.getVirtualFile();
        if (vFile == null || !fileIndex.isInSourceContent(vFile)) {
          return null;
        }
        list.add(vFile);
      }
      return list;
    }
  }
);
}
