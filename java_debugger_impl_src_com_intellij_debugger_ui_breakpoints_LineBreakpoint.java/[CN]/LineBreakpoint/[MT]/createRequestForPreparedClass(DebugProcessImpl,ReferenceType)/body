{
  if (!isInScopeOf(debugProcess,classType.name())) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(classType.name() + " is out of debug-process scope, breakpoint request won't be created for line " + getLineIndex());
    }
    return;
  }
  try {
    List<Location> locations=debugProcess.getPositionManager().locationsOfLine(classType,getSourcePosition());
    if (!locations.isEmpty()) {
      for (      Location loc : locations) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Found location [codeIndex=" + loc.codeIndex() + "] for reference type "+ classType.name()+ " at line "+ getLineIndex()+ "; isObsolete: "+ (debugProcess.getVirtualMachineProxy().versionHigher("1.4") && loc.method().isObsolete()));
        }
        BreakpointRequest request=debugProcess.getRequestsManager().createBreakpointRequest(this,loc);
        debugProcess.getRequestsManager().enableRequest(request);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Created breakpoint request for reference type " + classType.name() + " at line "+ getLineIndex()+ "; codeIndex="+ loc.codeIndex());
        }
      }
    }
 else {
      debugProcess.getRequestsManager().setInvalid(this,DebuggerBundle.message("error.invalid.breakpoint.no.executable.code",(getLineIndex() + 1),classType.name()));
      if (LOG.isDebugEnabled()) {
        LOG.debug("No locations of type " + classType.name() + " found at line "+ getLineIndex());
      }
    }
  }
 catch (  ClassNotPreparedException ex) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("ClassNotPreparedException: " + ex.getMessage());
    }
  }
catch (  ObjectCollectedException ex) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("ObjectCollectedException: " + ex.getMessage());
    }
  }
catch (  InvalidLineNumberException ex) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("InvalidLineNumberException: " + ex.getMessage());
    }
    debugProcess.getRequestsManager().setInvalid(this,DebuggerBundle.message("error.invalid.breakpoint.bad.line.number"));
  }
catch (  InternalException ex) {
    LOG.info(ex);
  }
catch (  Exception ex) {
    LOG.info(ex);
  }
  updateUI();
}
