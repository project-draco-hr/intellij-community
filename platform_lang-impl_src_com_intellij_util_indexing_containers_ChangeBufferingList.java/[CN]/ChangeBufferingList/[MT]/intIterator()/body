{
  RandomAccessIntContainer intContainer=randomAccessContainer;
  if (intContainer == null && removals == 0) {
    return new ValueContainer.IntIterator(){
      int cursor;
      @Override public boolean hasNext(){
        return cursor < length;
      }
      @Override public int next(){
        int current=cursor;
        ++cursor;
        return changes[current];
      }
      @Override public int size(){
        return length;
      }
      @Override public boolean hasAscendingOrder(){
        return false;
      }
    }
;
  }
  return getRandomAccessContainer().intIterator();
}
