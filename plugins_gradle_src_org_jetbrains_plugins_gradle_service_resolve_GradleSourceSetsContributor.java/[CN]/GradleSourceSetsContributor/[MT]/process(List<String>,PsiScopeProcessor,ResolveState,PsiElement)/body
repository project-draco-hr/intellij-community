{
  if (methodCallInfo.isEmpty()) {
    return;
  }
  String methodCall=ContainerUtil.getLastItem(methodCallInfo);
  if (methodCall == null) {
    return;
  }
  if (methodCallInfo.size() > 1 && SOURCE_SETS.equals(place.getText()) && place instanceof GrReferenceExpressionImpl) {
    GradleResolverUtil.addImplicitVariable(processor,state,(GrReferenceExpressionImpl)place,GradleCommonClassNames.GRADLE_API_SOURCE_SET_CONTAINER);
  }
  if (methodCallInfo.size() > 1 && methodCall.equals("project")) {
    methodCallInfo.remove(methodCallInfo.size() - 1);
    methodCall=ContainerUtil.getLastItem(methodCallInfo);
  }
  if (methodCall == null || methodCallInfo.size() > SOURCE_DIRECTORY_CLOSURE_LEVEL || !StringUtil.startsWith(methodCall,SOURCE_SETS)) {
    return;
  }
  String configureClosureClazz=null;
  String contributorClass=null;
  boolean isRootRelated=StringUtil.startsWith(methodCall,SOURCE_SETS + '.');
  if (methodCallInfo.size() == SOURCE_SET_CONTAINER_LEVEL) {
    configureClosureClazz=GradleCommonClassNames.GRADLE_API_SOURCE_SET_CONTAINER;
    if (place instanceof GrReferenceExpressionImpl) {
      String varClazz=StringUtil.startsWith(methodCall,SOURCE_SETS + '.') ? GradleCommonClassNames.GRADLE_API_SOURCE_SET_CONTAINER : GradleCommonClassNames.GRADLE_API_SOURCE_SET;
      GradleResolverUtil.addImplicitVariable(processor,state,(GrReferenceExpressionImpl)place,varClazz);
    }
 else {
      contributorClass=GradleCommonClassNames.GRADLE_API_SOURCE_SET_CONTAINER;
    }
  }
 else   if (methodCallInfo.size() == SOURCE_SET_LEVEL) {
    configureClosureClazz=GradleCommonClassNames.GRADLE_API_SOURCE_SET;
    contributorClass=GradleCommonClassNames.GRADLE_API_SOURCE_SET;
  }
 else   if (methodCallInfo.size() == SOURCE_DIRECTORY_LEVEL) {
    GroovyPsiManager psiManager=GroovyPsiManager.getInstance(place.getProject());
    PsiClass psiClass=psiManager.findClassWithCache(GradleCommonClassNames.GRADLE_API_SOURCE_SET,place.getResolveScope());
    configureClosureClazz=GradleResolverUtil.canBeMethodOf(place.getText(),psiClass) ? null : GradleCommonClassNames.GRADLE_API_SOURCE_DIRECTORY_SET;
    contributorClass=GradleCommonClassNames.GRADLE_API_SOURCE_DIRECTORY_SET;
  }
 else   if (methodCallInfo.size() == SOURCE_DIRECTORY_CLOSURE_LEVEL) {
    contributorClass=GradleCommonClassNames.GRADLE_API_SOURCE_DIRECTORY_SET;
  }
  if (configureClosureClazz != null && !isRootRelated) {
    final GroovyPsiManager psiManager=GroovyPsiManager.getInstance(place.getProject());
    GrLightMethodBuilder methodWithClosure=GradleResolverUtil.createMethodWithClosure(CONFIGURE_CLOSURE_METHOD,configureClosureClazz,null,place,psiManager);
    if (methodWithClosure != null) {
      processor.execute(methodWithClosure,state);
    }
  }
  if (contributorClass != null) {
    GroovyPsiManager psiManager=GroovyPsiManager.getInstance(place.getProject());
    GradleResolverUtil.processDeclarations(psiManager,processor,state,place,contributorClass);
  }
}
