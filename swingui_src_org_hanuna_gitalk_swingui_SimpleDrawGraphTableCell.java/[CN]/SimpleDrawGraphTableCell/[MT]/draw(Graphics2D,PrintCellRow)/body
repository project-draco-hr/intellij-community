{
  this.g2=g2;
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  for (  ShortEdge edge : row.getUpEdges()) {
    setStroke(edge.isUsual(),edge.isSelect());
    paintUpLine(edge.getDownPosition(),edge.getUpPosition(),ColorGenerator.getColor(edge.getEdge().getBranch()));
  }
  for (  ShortEdge edge : row.getDownEdges()) {
    setStroke(edge.isUsual(),edge.isSelect());
    paintDownLine(edge.getUpPosition(),edge.getDownPosition(),ColorGenerator.getColor(edge.getEdge().getBranch()));
  }
  for (  SpecialCell cell : row.getSpecialCell()) {
    Edge edge;
switch (cell.getType()) {
case commitNode:
      Node node=((NodeCell)cell.getCell()).getNode();
    paintCircle(cell.getPosition(),ColorGenerator.getColor(node.getBranch()),node.isSelect());
  break;
case showEdge:
edge=((EdgeCell)cell.getCell()).getEdge();
setStroke(edge.getType() == Edge.Type.usual,edge.isSelect());
paintShow(cell.getPosition(),ColorGenerator.getColor(edge.getBranch()));
break;
case hideEdge:
edge=((EdgeCell)cell.getCell()).getEdge();
setStroke(edge.getType() == Edge.Type.usual,edge.isSelect());
paintHide(cell.getPosition(),ColorGenerator.getColor(edge.getBranch()));
break;
default :
throw new IllegalStateException();
}
}
}
