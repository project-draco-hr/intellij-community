{
  if (myDefinition.isInterface() && !myDefinition.isTrait())   return Collections.emptyList();
  GrImplementsClause clause=myDefinition.getImplementsClause();
  if (clause == null)   return Collections.emptyList();
  PsiClassType[] types=clause.getReferencedTypes();
  List<PsiClassType.ClassResolveResult> traits=getSuperTraitsByCorrectOrder(types);
  if (traits.isEmpty())   return Collections.emptyList();
  Set<MethodSignature> existingSignatures=ContainerUtil.newHashSet(ContainerUtil.map(codeMethods,new Function<PsiMethod,MethodSignature>(){
    @Override public MethodSignature fun(    PsiMethod method){
      return method.getSignature(PsiSubstitutor.EMPTY);
    }
  }
));
  List<PsiMethod> result=ContainerUtil.newArrayList();
  for (  PsiClassType.ClassResolveResult resolveResult : traits) {
    PsiClass trait=resolveResult.getElement();
    LOG.assertTrue(trait != null);
    List<CandidateInfo> concreteTraitMethods=new TraitProcessor<PsiMethod>(trait,resolveResult.getSubstitutor()){
      protected void processTrait(      @NotNull PsiClass trait,      @NotNull PsiSubstitutor substitutor){
        if (trait instanceof GrTypeDefinition) {
          for (          GrMethod method : ((GrTypeDefinition)trait).getCodeMethods()) {
            if (!method.getModifierList().hasExplicitModifier(PsiModifier.ABSTRACT)) {
              addCandidate(method,substitutor);
            }
          }
          for (          GrField field : ((GrTypeDefinition)trait).getCodeFields()) {
            if (!field.isProperty())             continue;
            for (            GrAccessorMethod method : field.getGetters()) {
              addCandidate(method,substitutor);
            }
            GrAccessorMethod setter=field.getSetter();
            if (setter != null) {
              addCandidate(setter,substitutor);
            }
          }
        }
 else         if (trait instanceof ClsClassImpl) {
          for (          PsiMethod method : GrTraitUtil.getCompiledTraitConcreteMethods((ClsClassImpl)trait)) {
            addCandidate(method,substitutor);
          }
        }
      }
    }
.getResult();
    for (    CandidateInfo candidateInfo : concreteTraitMethods) {
      List<GrMethod> methodsToAdd=getExpandingMethods(candidateInfo);
      for (      GrMethod impl : methodsToAdd) {
        if (existingSignatures.add(impl.getSignature(PsiSubstitutor.EMPTY))) {
          result.add(impl);
        }
      }
    }
  }
  return result;
}
