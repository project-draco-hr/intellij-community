{
  if (myDefinition.isInterface() && !myDefinition.isTrait())   return Collections.emptyList();
  List<GrField> result=ContainerUtil.newArrayList();
  if (myDefinition.isTrait()) {
    for (    GrField field : myDefinition.getCodeFields()) {
      result.add(new GrTraitField(field,myDefinition,PsiSubstitutor.EMPTY));
    }
  }
  GrImplementsClause clause=myDefinition.getImplementsClause();
  if (clause == null)   return result;
  PsiClassType[] types=clause.getReferencedTypes();
  List<PsiClassType.ClassResolveResult> traits=getSuperTraitsByCorrectOrder(types);
  for (  PsiClassType.ClassResolveResult resolveResult : traits) {
    PsiClass trait=resolveResult.getElement();
    LOG.assertTrue(trait != null);
    List<CandidateInfo> traitFields=new TraitProcessor<PsiField>(trait,resolveResult.getSubstitutor()){
      protected void processTrait(      @NotNull final PsiClass trait,      @NotNull final PsiSubstitutor substitutor){
        if (trait instanceof GrTypeDefinition) {
          for (          GrField field : ((GrTypeDefinition)trait).getCodeFields()) {
            addCandidate(field,substitutor);
          }
        }
 else         if (trait instanceof ClsClassImpl) {
          final PsiClass traitFieldHelper=myPsiFacade.findClass(trait.getQualifiedName() + "$Trait$FieldHelper",trait.getResolveScope());
          if (traitFieldHelper == null)           return;
          final VirtualFile virtualFile=traitFieldHelper.getContainingFile().getVirtualFile();
          FileBasedIndex.getInstance().processValues(INDEX_ID,FileBasedIndex.getFileId(virtualFile),virtualFile,new FileBasedIndex.ValueProcessor<Collection<TraitFieldDescriptor>>(){
            @Override public boolean process(            VirtualFile file,            Collection<TraitFieldDescriptor> values){
              for (              TraitFieldDescriptor descriptor : values) {
                final GrLightField field=new GrLightField(trait,descriptor.name,myElementFactory.createTypeFromText(descriptor.name,trait),trait);
                if (descriptor.isStatic) {
                  field.getModifierList().addModifier(STATIC_MASK);
                }
                field.getModifierList().addModifier(descriptor.isPublic ? PUBLIC_MASK : PRIVATE_MASK);
                addCandidate(field,substitutor);
              }
              return true;
            }
          }
,trait.getResolveScope());
        }
      }
    }
.getResult();
    for (    CandidateInfo candidateInfo : traitFields) {
      result.add(new GrTraitField(((PsiField)candidateInfo.getElement()),myDefinition,candidateInfo.getSubstitutor()));
    }
  }
  return result;
}
