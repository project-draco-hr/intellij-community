{
  if (myDefinition.isInterface() && !myDefinition.isTrait())   return Collections.emptyList();
  List<GrField> result=ContainerUtil.newArrayList();
  if (myDefinition.isTrait()) {
    for (    GrField field : myDefinition.getCodeFields()) {
      result.add(new GrTraitField(field,myDefinition,PsiSubstitutor.EMPTY));
    }
  }
  GrImplementsClause clause=myDefinition.getImplementsClause();
  if (clause == null)   return result;
  PsiClassType[] types=clause.getReferencedTypes();
  List<PsiClassType.ClassResolveResult> traits=getSuperTraitsByCorrectOrder(types);
  for (  PsiClassType.ClassResolveResult resolveResult : traits) {
    PsiClass trait=resolveResult.getElement();
    LOG.assertTrue(trait != null);
    List<CandidateInfo> traitFields=new TraitProcessor<PsiField>(trait,resolveResult.getSubstitutor()){
      @Override protected void processTrait(      @NotNull final PsiClass trait,      @NotNull final PsiSubstitutor substitutor){
        if (trait instanceof GrTypeDefinition) {
          for (          GrField field : ((GrTypeDefinition)trait).getCodeFields()) {
            addCandidate(field,substitutor);
          }
        }
 else         if (trait instanceof ClsClassImpl) {
          final VirtualFile traitFile=trait.getContainingFile().getVirtualFile();
          if (traitFile == null)           return;
          final VirtualFile helperFile=traitFile.getParent().findChild(trait.getName() + GroovyTraitFieldsFileIndex.HELPER_SUFFIX);
          if (helperFile == null)           return;
          final List<Collection<TraitFieldDescriptor>> descriptors=FileBasedIndex.getInstance().getValues(INDEX_ID,FileBasedIndex.getFileId(helperFile),trait.getResolveScope());
          for (          Collection<TraitFieldDescriptor> traitFieldDescriptors : descriptors) {
            for (            TraitFieldDescriptor descriptor : traitFieldDescriptors) {
              final GrLightField field=new GrLightField(trait,descriptor.name,descriptor.typeString);
              if (descriptor.isStatic) {
                field.getModifierList().addModifier(STATIC_MASK);
              }
              field.getModifierList().addModifier(descriptor.isPublic ? PUBLIC_MASK : PRIVATE_MASK);
              addCandidate(field,substitutor);
            }
          }
        }
      }
    }
.getResult();
    for (    CandidateInfo candidateInfo : traitFields) {
      result.add(new GrTraitField(((PsiField)candidateInfo.getElement()),myDefinition,candidateInfo.getSubstitutor()));
    }
  }
  return result;
}
