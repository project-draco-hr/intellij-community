{
  Set<String> moduleLibraryKey=ContainerUtilRt.newHashSet();
  for (  OrderEntry entry : moduleRootModel.getOrderEntries()) {
    if (entry instanceof ModuleLibraryOrderEntryImpl) {
      ModuleLibraryOrderEntryImpl moduleLibraryOrderEntry=(ModuleLibraryOrderEntryImpl)entry;
      Library library=moduleLibraryOrderEntry.getLibrary();
      if (library == null) {
        LOG.warn("Skipping module-level library entry because it doesn't have backing Library object. Entry: " + entry);
        continue;
      }
      moduleLibraryKey.clear();
      for (      VirtualFile file : library.getFiles(OrderRootType.CLASSES)) {
        moduleLibraryKey.add(ExternalSystemApiUtil.getLocalFileSystemPath(file) + moduleLibraryOrderEntry.getScope().name());
      }
      LibraryDependencyData existing=moduleLibrariesToImport.remove(moduleLibraryKey);
      if (existing == null) {
        moduleRootModel.removeOrderEntry(entry);
      }
 else {
        syncExistingLibraryDependency(modelsProvider,existing,library,moduleRootModel,moduleLibraryOrderEntry.getOwnerModule());
        toImport.remove(existing);
      }
    }
 else     if (entry instanceof LibraryOrderEntry) {
      LibraryOrderEntry libraryOrderEntry=(LibraryOrderEntry)entry;
      String libraryName=libraryOrderEntry.getLibraryName();
      LibraryDependencyData existing=projectLibrariesToImport.remove(libraryName + libraryOrderEntry.getScope().name());
      if (existing != null) {
        toImport.remove(existing);
      }
 else       if (!hasUnresolvedLibraries) {
        moduleRootModel.removeOrderEntry(entry);
      }
    }
  }
}
