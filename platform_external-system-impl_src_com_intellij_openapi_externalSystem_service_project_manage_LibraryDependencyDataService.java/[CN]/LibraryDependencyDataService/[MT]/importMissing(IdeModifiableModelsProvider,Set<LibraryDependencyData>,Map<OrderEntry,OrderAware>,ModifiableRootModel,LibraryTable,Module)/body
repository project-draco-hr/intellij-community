{
  for (  final LibraryDependencyData dependencyData : toImport) {
    final LibraryData libraryData=dependencyData.getTarget();
    final String libraryName=libraryData.getInternalName();
switch (dependencyData.getLevel()) {
case MODULE:
      final Library moduleLib;
    if (libraryName.isEmpty()) {
      moduleLib=moduleLibraryTable.createLibrary();
    }
 else {
      moduleLib=moduleLibraryTable.createLibrary(libraryName);
    }
  final LibraryOrderEntry existingLibraryDependency=syncExistingLibraryDependency(modelsProvider,dependencyData,moduleLib,moduleRootModel,module);
orderEntryDataMap.put(existingLibraryDependency,dependencyData);
break;
case PROJECT:
final Library projectLib=modelsProvider.getLibraryByName(libraryName);
if (projectLib == null) {
final LibraryOrderEntry existingProjectLibraryDependency=syncExistingLibraryDependency(modelsProvider,dependencyData,moduleLibraryTable.createLibrary(libraryName),moduleRootModel,module);
orderEntryDataMap.put(existingProjectLibraryDependency,dependencyData);
break;
}
LibraryOrderEntry orderEntry=moduleRootModel.addLibraryEntry(projectLib);
orderEntryDataMap.put(orderEntry,dependencyData);
setLibraryScope(orderEntry,projectLib,module,dependencyData);
}
}
}
