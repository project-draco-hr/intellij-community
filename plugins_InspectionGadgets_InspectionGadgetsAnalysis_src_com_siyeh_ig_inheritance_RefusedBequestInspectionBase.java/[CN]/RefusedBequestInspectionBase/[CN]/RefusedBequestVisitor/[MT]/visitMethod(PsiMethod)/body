{
  super.visitMethod(method);
  final PsiCodeBlock body=method.getBody();
  if (body == null) {
    return;
  }
  if (method.getNameIdentifier() == null) {
    return;
  }
  final PsiMethod leastConcreteSuperMethod=getDirectSuperMethod(method);
  if (leastConcreteSuperMethod == null) {
    return;
  }
  final PsiClass objectClass=ClassUtils.findObjectClass(method);
  final PsiMethod[] superMethods=method.findSuperMethods(objectClass);
  if (superMethods.length > 0) {
    return;
  }
  if (ignoreEmptySuperMethods) {
    final PsiElement element=leastConcreteSuperMethod.getNavigationElement();
    final PsiMethod superMethod=element instanceof PsiMethod ? (PsiMethod)element : leastConcreteSuperMethod;
    if (MethodUtils.isTrivial(superMethod,true)) {
      return;
    }
  }
  if (onlyReportWhenAnnotated) {
    if (!AnnotationUtil.isAnnotated(leastConcreteSuperMethod,annotations)) {
      return;
    }
  }
  if (containsSuperCall(body,leastConcreteSuperMethod)) {
    return;
  }
  registerMethodError(method);
}
