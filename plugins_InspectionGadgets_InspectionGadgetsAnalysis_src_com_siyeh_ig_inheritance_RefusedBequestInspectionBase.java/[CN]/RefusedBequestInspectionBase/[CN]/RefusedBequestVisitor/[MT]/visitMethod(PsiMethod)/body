{
  super.visitMethod(method);
  final PsiCodeBlock body=method.getBody();
  if (body == null) {
    return;
  }
  if (method.getNameIdentifier() == null) {
    return;
  }
  final PsiMethod leastConcreteSuperMethod=getDirectSuperMethod(method);
  if (leastConcreteSuperMethod == null) {
    return;
  }
  final String methodName=method.getName();
  if (!HardcodedMethodConstants.CLONE.equals(methodName)) {
    final PsiClass superClass=leastConcreteSuperMethod.getContainingClass();
    if (superClass != null) {
      final String superClassName=superClass.getQualifiedName();
      if (CommonClassNames.JAVA_LANG_OBJECT.equals(superClassName)) {
        return;
      }
    }
  }
  if (ignoreEmptySuperMethods) {
    final PsiElement element=leastConcreteSuperMethod.getNavigationElement();
    final PsiMethod superMethod=element instanceof PsiMethod ? (PsiMethod)element : leastConcreteSuperMethod;
    if (MethodUtils.isTrivial(superMethod,true)) {
      return;
    }
  }
  if (onlyReportWhenAnnotated && !CloneUtils.isClone(method) && !isJUnitSetUpOrTearDown(method)&& !MethodUtils.isFinalize(method)) {
    if (!AnnotationUtil.isAnnotated(leastConcreteSuperMethod,annotations)) {
      return;
    }
  }
  final PsiClass aClass=method.getContainingClass();
  if ((aClass != null && aClass.hasModifierProperty(PsiModifier.FINAL) || method.hasModifierProperty(PsiModifier.FINAL)) && MethodUtils.isTrivial(method,true)) {
    return;
  }
  if (MethodCallUtils.containsSuperMethodCall(method)) {
    return;
  }
  registerMethodError(method);
}
