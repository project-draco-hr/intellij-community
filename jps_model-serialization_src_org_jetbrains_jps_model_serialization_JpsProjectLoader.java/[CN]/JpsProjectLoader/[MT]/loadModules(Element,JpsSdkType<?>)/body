{
  Runnable timingLog=TimingLog.startActivity("loading modules");
  Element componentRoot=JDomSerializationUtil.findComponent(root,"ProjectModuleManager");
  if (componentRoot == null)   return;
  final Element modules=componentRoot.getChild("modules");
  List<Future<JpsModule>> futures=new ArrayList<Future<JpsModule>>();
  List<Future<Pair<File,Element>>> futureModuleFiles=new ArrayList<Future<Pair<File,Element>>>();
  for (  Element moduleElement : JDOMUtil.getChildren(modules,"module")) {
    final String path=moduleElement.getAttributeValue("filepath");
    final File file=new File(path);
    if (!file.exists()) {
      LOG.info("Module '" + FileUtil.getNameWithoutExtension(file) + "' is skipped: "+ file.getAbsolutePath()+ " doesn't exist");
      continue;
    }
    futureModuleFiles.add(ourThreadPool.submit(new Callable<Pair<File,Element>>(){
      @Override public Pair<File,Element> call() throws Exception {
        final JpsMacroExpander expander=createModuleMacroExpander(myPathVariables,file);
        final Element moduleRoot=loadRootElement(file,expander);
        return Pair.create(file,moduleRoot);
      }
    }
));
  }
  try {
    final List<String> classpathDirs=new ArrayList<String>();
    for (    Future<Pair<File,Element>> moduleFile : futureModuleFiles) {
      final String classpathDir=moduleFile.get().getSecond().getAttributeValue(CLASSPATH_DIR_ATTRIBUTE);
      if (classpathDir != null) {
        classpathDirs.add(classpathDir);
      }
    }
    for (    final Future<Pair<File,Element>> futureModuleFile : futureModuleFiles) {
      final Pair<File,Element> moduleFile=futureModuleFile.get();
      futures.add(ourThreadPool.submit(new Callable<JpsModule>(){
        @Override public JpsModule call() throws Exception {
          return loadModule(moduleFile.getFirst(),moduleFile.getSecond(),classpathDirs,projectSdkType);
        }
      }
));
    }
    for (    Future<JpsModule> future : futures) {
      JpsModule module=future.get();
      if (module != null) {
        myProject.addModule(module);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  timingLog.run();
}
