{
  if (expression instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)expression;
    final IElementType tokenType=assignmentExpression.getOperationTokenType();
    if (parent instanceof PsiVariable) {
      if (!tokenType.equals(JavaTokenType.EQ)) {
        return true;
      }
    }
 else     if (parent instanceof PsiAssignmentExpression) {
      final PsiAssignmentExpression nestedAssignment=(PsiAssignmentExpression)parent;
      final IElementType nestedTokenType=nestedAssignment.getOperationTokenType();
      if (!tokenType.equals(nestedTokenType)) {
        return true;
      }
    }
    return isUnclearExpression(assignmentExpression.getRExpression(),assignmentExpression);
  }
 else   if (expression instanceof PsiConditionalExpression) {
    final PsiConditionalExpression conditionalExpression=(PsiConditionalExpression)expression;
    if (PsiUtilCore.hasErrorElementChild(expression)) {
      return false;
    }
    return (parent instanceof PsiConditionalExpression) || isUnclearExpression(conditionalExpression.getCondition(),conditionalExpression) || isUnclearExpression(conditionalExpression.getThenExpression(),conditionalExpression)|| isUnclearExpression(conditionalExpression.getElseExpression(),conditionalExpression);
  }
 else   if (expression instanceof PsiPolyadicExpression) {
    if ((parent instanceof PsiConditionalExpression) || (parent instanceof PsiPolyadicExpression) || (parent instanceof PsiInstanceOfExpression)) {
      return true;
    }
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)expression;
    for (    PsiExpression operand : polyadicExpression.getOperands()) {
      final PsiType type=operand.getType();
      if ((type == null) || type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
        return false;
      }
      if (isUnclearExpression(operand,polyadicExpression)) {
        return true;
      }
    }
  }
 else   if (expression instanceof PsiInstanceOfExpression) {
    if ((parent instanceof PsiPolyadicExpression) || (parent instanceof PsiConditionalExpression)) {
      return true;
    }
    final PsiInstanceOfExpression instanceOfExpression=(PsiInstanceOfExpression)expression;
    return isUnclearExpression(instanceOfExpression.getOperand(),instanceOfExpression);
  }
 else   if (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    final PsiExpression nestedExpression=parenthesizedExpression.getExpression();
    return isUnclearExpression(nestedExpression,parenthesizedExpression);
  }
  return false;
}
