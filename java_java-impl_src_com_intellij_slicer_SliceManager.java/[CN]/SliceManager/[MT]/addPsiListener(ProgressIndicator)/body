{
  Disposable disposable=Disposer.newDisposable();
  PsiManager.getInstance(myProject).addPsiTreeChangeListener(new PsiTreeChangeAdapter(){
    @Override public void beforeChildAddition(    @NotNull PsiTreeChangeEvent event){
      indicator.cancel();
    }
    @Override public void beforeChildRemoval(    @NotNull PsiTreeChangeEvent event){
      indicator.cancel();
    }
    @Override public void beforeChildReplacement(    @NotNull PsiTreeChangeEvent event){
      indicator.cancel();
    }
    @Override public void beforeChildMovement(    @NotNull PsiTreeChangeEvent event){
      indicator.cancel();
    }
    @Override public void beforeChildrenChange(    @NotNull PsiTreeChangeEvent event){
      indicator.cancel();
    }
    @Override public void beforePropertyChange(    @NotNull PsiTreeChangeEvent event){
      indicator.cancel();
    }
  }
,disposable);
  return disposable;
}
