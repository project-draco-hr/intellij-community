{
  super(project,repository,changeListener);
  myTest2Button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      afterTestConnection(TaskManager.getManager(project).testConnection(repository));
    }
  }
);
  myLoginAnonymouslyJBCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      loginUrlEnablingChanged();
    }
  }
);
  myUseHttpAuthenticationCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      loginUrlEnablingChanged();
    }
  }
);
  ActionListener radioButtonListener=new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      singleTaskUrlEnablingChanged();
      doApply();
      selectCardByResponseType();
    }
  }
;
  myXmlRadioButton.addActionListener(radioButtonListener);
  myTextRadioButton.addActionListener(radioButtonListener);
  myJsonRadioButton.addActionListener(radioButtonListener);
  myLoginMethodTypeComboBox.setSelectedItem(myRepository.getLoginMethodType().toString());
  myTasksListMethodTypeComboBox.setSelectedItem(myRepository.getTasksListMethodType().toString());
  mySingleTaskMethodComboBox.setSelectedItem(myRepository.getSingleTaskMethodType().toString());
  installListener(myLoginMethodTypeComboBox);
  installListener(myTasksListMethodTypeComboBox);
  installListener(mySingleTaskMethodComboBox);
  installListener(myLoginURLText);
  installListener(myTasksListURLText);
  installListener(mySingleTaskURLText);
  installListener(myDownloadTasksInSeparateRequests);
  myTabbedPane.addTab("Server configuration",myPanel);
  ResponseHandler xmlHandler=myRepository.getResponseHandler(ResponseType.XML);
  ResponseHandler jsonHandler=myRepository.getResponseHandler(ResponseType.JSON);
  ResponseHandler textHandler=myRepository.getResponseHandler(ResponseType.TEXT);
  myCardPanel.add(xmlHandler.getConfigurationComponent(myProject),ResponseType.XML.getMimeType());
  myCardPanel.add(jsonHandler.getConfigurationComponent(myProject),ResponseType.JSON.getMimeType());
  myCardPanel.add(textHandler.getConfigurationComponent(myProject),ResponseType.TEXT.getMimeType());
  myRadio2ResponseType=new IdentityHashMap<JRadioButton,ResponseType>();
  myRadio2ResponseType.put(myJsonRadioButton,ResponseType.JSON);
  myRadio2ResponseType.put(myXmlRadioButton,ResponseType.XML);
  myRadio2ResponseType.put(myTextRadioButton,ResponseType.TEXT);
  myManageTemplateVariablesButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      final ManageTemplateVariablesDialog dialog=new ManageTemplateVariablesDialog(myManageTemplateVariablesButton);
      dialog.setTemplateVariables(myRepository.getAllTemplateVariables());
      if (dialog.showAndGet()) {
        myRepository.setTemplateVariables(ContainerUtil.filter(dialog.getTemplateVariables(),new Condition<TemplateVariable>(){
          @Override public boolean value(          TemplateVariable variable){
            return !variable.isReadOnly();
          }
        }
));
        myCustomPanel.removeAll();
        myCustomPanel.add(createCustomPanel());
        myTabbedPane.getComponentAt(0).repaint();
        List<String> placeholders=createPlaceholdersList(myRepository);
        ((TextFieldWithAutoCompletion)myLoginURLText).setVariants(placeholders);
        ((TextFieldWithAutoCompletion)myTasksListURLText).setVariants(concat(placeholders,"{max}","{since}"));
        ((TextFieldWithAutoCompletion)mySingleTaskURLText).setVariants(concat(placeholders,"{id}"));
        myPanel.repaint();
      }
    }
  }
);
  myResetToDefaultsButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      myRepository.resetToDefaults();
      reset(myRepository.clone());
    }
  }
);
  selectRadioButtonByResponseType();
  selectCardByResponseType();
  loginUrlEnablingChanged();
  singleTaskUrlEnablingChanged();
  myDownloadTasksInSeparateRequests.setSelected(myRepository.getDownloadTasksInSeparateRequests());
}
