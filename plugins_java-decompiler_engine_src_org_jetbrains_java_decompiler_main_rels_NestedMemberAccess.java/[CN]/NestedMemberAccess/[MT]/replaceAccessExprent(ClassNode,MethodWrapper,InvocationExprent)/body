{
  ClassNode node=DecompilerContext.getClassProcessor().getMapRootClasses().get(invexpr.getClassname());
  MethodWrapper methsource=null;
  if (node != null && node.wrapper != null) {
    methsource=node.wrapper.getMethodWrapper(invexpr.getName(),invexpr.getStringDescriptor());
  }
  if (methsource == null || !mapMethodType.containsKey(methsource)) {
    return null;
  }
  if (node.classStruct.qualifiedName.equals(caller.classStruct.qualifiedName) && methsource.methodStruct.getName().equals(methdest.methodStruct.getName()) && methsource.methodStruct.getDescriptor().equals(methdest.methodStruct.getDescriptor())) {
    return null;
  }
  int type=mapMethodType.get(methsource);
  if (!sameTree(caller,node)) {
    return null;
  }
  DirectGraph graph=methsource.getOrBuildGraph();
  Exprent source=graph.first.exprents.get(0);
  Exprent retexprent=null;
switch (type) {
case METHOD_ACCESS_FIELD_GET:
    ExitExprent exsource=(ExitExprent)source;
  if (exsource.getValue().type == Exprent.EXPRENT_VAR) {
    VarExprent var=(VarExprent)exsource.getValue();
    String varname=methsource.varproc.getVarName(new VarVersionPaar(var));
    if (!methdest.setOuterVarNames.contains(varname)) {
      VarNamesCollector vnc=new VarNamesCollector();
      vnc.addName(varname);
      methdest.varproc.refreshVarNames(vnc);
      methdest.setOuterVarNames.add(varname);
    }
    int index=methdest.counter.getCounterAndIncrement(CounterContainer.VAR_COUNTER);
    VarExprent ret=new VarExprent(index,var.getVartype(),methdest.varproc);
    methdest.varproc.setVarName(new VarVersionPaar(index,0),varname);
    retexprent=ret;
  }
 else {
    FieldExprent ret=(FieldExprent)exsource.getValue().copy();
    if (!ret.isStatic()) {
      ret.replaceExprent(ret.getInstance(),invexpr.getLstParameters().get(0));
    }
    retexprent=ret;
  }
break;
case METHOD_ACCESS_FIELD_SET:
AssignmentExprent ret;
if (source.type == Exprent.EXPRENT_EXIT) {
ExitExprent extex=(ExitExprent)source;
ret=(AssignmentExprent)extex.getValue().copy();
}
 else {
ret=(AssignmentExprent)source.copy();
}
FieldExprent fexpr=(FieldExprent)ret.getLeft();
if (fexpr.isStatic()) {
ret.replaceExprent(ret.getRight(),invexpr.getLstParameters().get(0));
}
 else {
ret.replaceExprent(ret.getRight(),invexpr.getLstParameters().get(1));
fexpr.replaceExprent(fexpr.getInstance(),invexpr.getLstParameters().get(0));
}
retexprent=ret;
break;
case METHOD_ACCESS_METHOD:
if (source.type == Exprent.EXPRENT_EXIT) {
source=((ExitExprent)source).getValue();
}
InvocationExprent invret=(InvocationExprent)source.copy();
int index=0;
if (!invret.isStatic()) {
invret.replaceExprent(invret.getInstance(),invexpr.getLstParameters().get(0));
index=1;
}
for (int i=0; i < invret.getLstParameters().size(); i++) {
invret.replaceExprent(invret.getLstParameters().get(i),invexpr.getLstParameters().get(i + index));
}
retexprent=invret;
}
if (retexprent != null) {
boolean hide=true;
if (node.type == ClassNode.CLASS_ROOT || (node.access & CodeConstants.ACC_STATIC) != 0) {
StructMethod mt=methsource.methodStruct;
if (!mt.isSynthetic()) {
hide=false;
}
}
if (hide) {
node.wrapper.getHiddenMembers().add(InterpreterUtil.makeUniqueKey(invexpr.getName(),invexpr.getStringDescriptor()));
}
}
return retexprent;
}
