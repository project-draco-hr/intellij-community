{
  if (ourSubscribed.getAndSet(true))   return;
  MessageBus bus=ApplicationManager.getApplication().getMessageBus();
  bus.connect().subscribe(VirtualFileManager.VFS_CHANGES,new BulkFileListener.Adapter(){
    @Override public void after(    @NotNull List<? extends VFileEvent> events){
      Map<String,VirtualFile> rootsToRefresh=null;
synchronized (ourLock) {
        for (        VFileEvent event : events) {
          if (!(event.getFileSystem() instanceof LocalFileSystem))           continue;
          String path=event.getPath();
          for (Iterator<String> i=ourHandlers.keySet().iterator(); i.hasNext(); ) {
            String rootPath=i.next();
            ArchiveFileSystem vfs=ourHandlers.get(rootPath).first;
            String localPath=vfs.extractLocalPath(rootPath);
            if (FileUtil.startsWith(localPath,path)) {
              i.remove();
              NewVirtualFile root=ManagingFS.getInstance().findRoot(rootPath,vfs);
              if (root != null) {
                root.markDirtyRecursively();
                if (rootsToRefresh == null)                 rootsToRefresh=ContainerUtil.newHashMap();
                rootsToRefresh.put((FileUtil.toSystemDependentName(localPath)),root);
              }
            }
          }
        }
      }
      if (rootsToRefresh != null) {
        ZipFileCache.reset(rootsToRefresh.keySet());
        boolean async=!ApplicationManager.getApplication().isUnitTestMode();
        RefreshQueue.getInstance().refresh(async,true,null,rootsToRefresh.values());
      }
    }
  }
);
}
