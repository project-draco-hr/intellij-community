{
  final FileBasedIndexImpl index=(FileBasedIndexImpl)FileBasedIndex.getInstance();
  if (index.getChangedFileCount() + index.getNumberOfPendingInvalidations() < 20) {
    return null;
  }
  final DumbModeTask task=new DumbModeTask(){
    @Override public void performInDumbMode(    @NotNull ProgressIndicator indicator){
      final Collection<VirtualFile> files=index.getFilesToUpdate(project);
      indicator.setIndeterminate(false);
      indicator.setText(IdeBundle.message("progress.indexing.updating"));
      reindexRefreshedFiles(indicator,files,project,index);
    }
  }
;
  project.getMessageBus().connect(task).subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootAdapter(){
    @Override public void rootsChanged(    ModuleRootEvent event){
      DumbService.getInstance(project).cancelTask(task);
    }
  }
);
  return task;
}
