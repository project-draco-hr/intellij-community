{
  if (prevEntry == null) {
    assertEquals(0,entry.startLogicalColumn);
    assertEquals(0,entry.startSoftWrapLinesBefore);
    assertEquals(0,entry.startSoftWrapLinesCurrent);
    assertEquals(0,entry.startSoftWrapColumnDiff);
    assertEquals(0,entry.startFoldedLines);
    assertEquals(0,entry.startFoldingColumnDiff);
    return false;
  }
 else {
    if (entry.startOffset == prevEntry.endOffset) {
      assertEquals(prevEntry.visualLine + 1,entry.visualLine);
      assertEquals(prevEntry.endLogicalLine,entry.startLogicalLine);
      assertEquals(prevEntry.endLogicalColumn,entry.startLogicalColumn);
      assertEquals(prevEntry.endSoftWrapLinesBefore,entry.startSoftWrapLinesBefore);
      assertEquals(prevEntry.endSoftWrapLinesCurrent + 1,entry.startSoftWrapLinesCurrent);
      assertEquals(prevEntry.endSoftWrapColumnDiff - prevEntry.endVisualColumn,entry.startSoftWrapColumnDiff);
      assertEquals(prevEntry.endFoldedLines,entry.startFoldedLines);
      assertEquals(prevEntry.endFoldingColumnDiff,entry.startFoldingColumnDiff);
      assertTrue(softWrapOffsets.remove(entry.startOffset));
      return true;
    }
 else {
      assertTrue(entry.visualLine > prevEntry.visualLine);
      assertTrue(entry.startOffset > prevEntry.endOffset);
      if (entry.visualLine == prevEntry.visualLine + 1) {
        assertEquals(prevEntry.endLogicalLine + 1,entry.startLogicalLine);
      }
 else {
        assertTrue(entry.startLogicalLine > prevEntry.endLogicalLine);
      }
      assertEquals(0,entry.startLogicalColumn);
      assertEquals(prevEntry.endSoftWrapLinesBefore + prevEntry.endSoftWrapLinesCurrent,entry.startSoftWrapLinesBefore);
      assertEquals(0,entry.startSoftWrapLinesCurrent);
      assertEquals(0,entry.startSoftWrapColumnDiff);
      assertEquals(prevEntry.endFoldedLines,entry.startFoldedLines);
      assertEquals(0,entry.startFoldingColumnDiff);
      return false;
    }
  }
}
