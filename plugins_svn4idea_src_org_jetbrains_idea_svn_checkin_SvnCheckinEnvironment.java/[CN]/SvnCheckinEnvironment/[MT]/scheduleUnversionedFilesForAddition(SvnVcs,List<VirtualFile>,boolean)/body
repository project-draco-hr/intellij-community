{
  Collections.sort(files,FilePathComparator.getInstance());
  ISVNEventHandler eventHandler=new ISVNEventHandler(){
    @Override public void handleEvent(    SVNEvent event,    double progress) throws SVNException {
      final ProgressManager pm=ProgressManager.getInstance();
      final ProgressIndicator pi=pm.getProgressIndicator();
      if (pi != null && event.getFile() != null) {
        File file=event.getFile();
        pi.setText(SvnBundle.message("progress.text2.adding",file.getName() + " (" + file.getParent()+ ")"));
      }
    }
    @Override public void checkCancelled() throws SVNCancelException {
      final ProgressManager pm=ProgressManager.getInstance();
      final ProgressIndicator pi=pm.getProgressIndicator();
      if (pi != null) {
        if (pi.isCanceled())         throw new SVNCancelException();
      }
    }
  }
;
  List<VcsException> exceptions=new ArrayList<VcsException>();
  for (  VirtualFile file : files) {
    try {
      File convertedFile=new File(FileUtil.toSystemDependentName(file.getPath()));
      SVNDepth depth=recursive ? SVNDepth.INFINITY : SVNDepth.EMPTY;
      vcs.getFactory(convertedFile).createAddClient().add(convertedFile,depth,true,false,true,eventHandler);
    }
 catch (    VcsException e) {
      exceptions.add(e);
    }
  }
  return exceptions;
}
