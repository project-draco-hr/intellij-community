{
  try {
    committables=filterCommittables(committables);
  }
 catch (  SVNException e) {
    exception.add(new VcsException(e));
    return;
  }
  final IdeaSvnkitBasedAuthenticationCallback authenticationCallback=new IdeaSvnkitBasedAuthenticationCallback(mySvnVcs);
  try {
    final SvnBindClient client=new SvnBindClient(SvnApplicationSettings.getInstance().getCommandLinePath(),new Convertor<File[],SVNURL>(){
      @Override public SVNURL convert(      File[] o){
        SVNInfo info=o.length > 0 ? mySvnVcs.getInfo(o[0]) : null;
        if (info == null || info.getURL() == null) {
          LOG.warn("Could not resolve repository url for commit. Paths - " + Arrays.toString(o));
        }
        return info != null ? info.getURL() : null;
      }
    }
);
    client.setAuthenticationCallback(authenticationCallback);
    client.setHandler(new IdeaCommitHandler(ProgressManager.getInstance().getProgressIndicator()));
    final long revision=client.commit(ArrayUtil.toObjectArray(committables,File.class),comment,false,false);
    reportCommittedRevisions(feedback,String.valueOf(revision));
  }
 catch (  VcsException e) {
    exception.add(e);
  }
 finally {
    authenticationCallback.reset();
  }
}
