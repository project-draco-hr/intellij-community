{
  if (isHeadlessMode()) {
    return;
  }
  if (myIndicator.isCanceled()) {
    return;
  }
  final JComponent component;
synchronized (myMessageViewLock) {
    if (myErrorTreeView != null) {
      return;
    }
    myErrorTreeView=new CompilerErrorTreeView(myProject,myRestartWork);
    myErrorTreeView.setProcessController(new NewErrorTreeViewPanel.ProcessController(){
      @Override public void stopProcess(){
        cancel();
      }
      @Override public boolean isProcessStopped(){
        return !myIndicator.isRunning();
      }
    }
);
    component=myErrorTreeView.getComponent();
  }
  final MessageView messageView=MessageView.SERVICE.getInstance(myProject);
  final Content content=ContentFactory.SERVICE.getInstance().createContent(component,myContentName,true);
  CONTENT_ID_KEY.set(content,myContentId);
  SESSION_ID_KEY.set(content,mySessionId);
  messageView.getContentManager().addContent(content);
  myCloseListener.setContent(content,messageView.getContentManager());
  removeAllContents(myProject,content);
  messageView.getContentManager().setSelectedContent(content);
}
