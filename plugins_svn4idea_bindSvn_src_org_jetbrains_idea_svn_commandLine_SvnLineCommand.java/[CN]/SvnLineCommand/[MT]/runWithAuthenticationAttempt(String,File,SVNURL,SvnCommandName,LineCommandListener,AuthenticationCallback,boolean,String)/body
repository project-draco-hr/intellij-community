{
  File base=firstFile != null ? (firstFile.isDirectory() ? firstFile : firstFile.getParentFile()) : null;
  base=SvnBindUtil.correctUpToExistingParent(base);
  listener.baseDirectory(base);
  File configDir=null;
  try {
    if (authenticationCallback != null) {
      writeIdeaConfig2SubversionConfig(authenticationCallback,base);
      configDir=authenticationCallback.getSpecialConfigDir();
    }
    while (true) {
      final SvnLineCommand command=runCommand(exePath,commandName,listener,base,configDir,parameters);
      if (command.myErr.length() > 0) {
        final String errText=command.myErr.toString().trim();
        if (authenticationCallback != null) {
          final AuthCallbackCase callback=createCallback(errText,authenticationCallback,base,url);
          if (callback != null) {
            if (needCleanup) {
              cleanup(exePath,commandName,base);
            }
            if (callback.getCredentials(errText)) {
              if (authenticationCallback.getSpecialConfigDir() != null) {
                configDir=authenticationCallback.getSpecialConfigDir();
              }
              parameters=updateParameters(callback,parameters);
              continue;
            }
          }
        }
        throw new SvnBindException(errText);
      }
      final Integer exitCode=command.myExitCode.get();
      if (exitCode != 0) {
        throw new SvnBindException("Svn process exited with error code: " + exitCode);
      }
      return command;
    }
  }
  finally {
    if (authenticationCallback != null) {
      authenticationCallback.reset();
    }
  }
}
