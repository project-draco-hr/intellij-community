{
  final InspectionProfile profile=myExternalProfile != null ? myExternalProfile : InspectionProjectProfileManager.getInstance(project).getInspectionProfile();
  final List<LocalInspectionToolWrapper> lTools=new ArrayList<LocalInspectionToolWrapper>();
  final InspectionManagerEx managerEx=(InspectionManagerEx)InspectionManager.getInstance(project);
  final GlobalInspectionContextImpl context=managerEx.createNewGlobalContext(false);
  final LinkedHashMap<PsiFile,List<HighlightInfo>> results=new LinkedHashMap<PsiFile,List<HighlightInfo>>();
  ProgressManager.getInstance().run(new Task.Backgroundable(project,"Inspect code...",true){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      scope.accept(new PsiElementVisitor(){
        @Override public void visitFile(        PsiFile file){
          final VirtualFile virtualFile=file.getVirtualFile();
          if (virtualFile == null)           return;
          for (          final Tools tools : profile.getAllEnabledInspectionTools(project)) {
            if (tools.getTool().getTool() instanceof CleanupLocalInspectionTool) {
              final InspectionToolWrapper tool=tools.getEnabledTool(file);
              if (tool instanceof LocalInspectionToolWrapper) {
                lTools.add((LocalInspectionToolWrapper)tool);
                tool.initialize(context);
              }
            }
          }
          if (!lTools.isEmpty()) {
            final LocalInspectionsPass pass=new LocalInspectionsPass(file,PsiDocumentManager.getInstance(project).getDocument(file),0,file.getTextLength(),LocalInspectionsPass.EMPTY_PRIORITY_RANGE,true,HighlightInfoProcessor.getEmpty());
            Runnable runnable=new Runnable(){
              public void run(){
                pass.doInspectInBatch(context,managerEx,lTools);
              }
            }
;
            ApplicationManager.getApplication().runReadAction(runnable);
            results.put(file,pass.getInfos());
          }
        }
      }
);
    }
    @Override public void onSuccess(){
      if (!FileModificationService.getInstance().preparePsiElementsForWrite(results.keySet()))       return;
      final SequentialModalProgressTask progressTask=new SequentialModalProgressTask(project,"Code Cleanup",true);
      progressTask.setMinIterationTime(200);
      progressTask.setTask(new SequentialCleanupTask(project,results,progressTask));
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        @Override public void run(){
          CommandProcessor.getInstance().markCurrentCommandAsGlobal(project);
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            @Override public void run(){
              ProgressManager.getInstance().run(progressTask);
            }
          }
);
        }
      }
,getTemplatePresentation().getText(),null);
    }
  }
);
}
