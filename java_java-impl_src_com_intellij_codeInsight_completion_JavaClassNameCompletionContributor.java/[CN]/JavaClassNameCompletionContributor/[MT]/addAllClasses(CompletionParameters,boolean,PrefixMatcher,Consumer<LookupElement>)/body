{
  final PsiElement insertedElement=parameters.getPosition();
  final ElementFilter filter=IN_EXTENDS_IMPLEMENTS.accepts(insertedElement) ? new ExcludeDeclaredFilter(new ClassFilter(PsiClass.class)) : IN_TYPE_PARAMETER.accepts(insertedElement) ? new ExcludeDeclaredFilter(new ClassFilter(PsiTypeParameter.class)) : JavaCompletionContributor.ANNOTATION_NAME.accepts(insertedElement) ? new AnnotationTypeFilter() : TrueFilter.INSTANCE;
  final boolean inJavaContext=parameters.getPosition() instanceof PsiIdentifier;
  final boolean afterNew=AFTER_NEW.accepts(insertedElement);
  if (afterNew) {
    final PsiExpression expr=PsiTreeUtil.getContextOfType(insertedElement,PsiExpression.class,true);
    for (    final ExpectedTypeInfo info : ExpectedTypesProvider.getExpectedTypes(expr,true)) {
      final PsiType type=info.getType();
      final PsiClass psiClass=PsiUtil.resolveClassInType(type);
      if (psiClass != null && psiClass.getName() != null) {
        consumer.consume(createClassLookupItem(psiClass,inJavaContext));
      }
      final PsiType defaultType=info.getDefaultType();
      if (!defaultType.equals(type)) {
        final PsiClass defClass=PsiUtil.resolveClassInType(defaultType);
        if (defClass != null && defClass.getName() != null) {
          consumer.consume(createClassLookupItem(defClass,true));
        }
      }
    }
  }
  final boolean pkgContext=JavaCompletionUtil.inSomePackage(insertedElement);
  AllClassesGetter.processJavaClasses(parameters,matcher,filterByScope,new Consumer<PsiClass>(){
    @Override public void consume(    PsiClass psiClass){
      processClass(psiClass,ContainerUtil.<PsiClass>newHashSet(),"");
    }
    private void processClass(    PsiClass psiClass,    Set<PsiClass> visited,    String prefix){
      if (!visited.add(psiClass))       return;
      boolean isInnerClass=StringUtil.isNotEmpty(prefix);
      if (isInnerClass && isProcessedIndependently(psiClass)) {
        return;
      }
      if (filter.isAcceptable(psiClass,insertedElement)) {
        if (!inJavaContext) {
          JavaPsiClassReferenceElement element=AllClassesGetter.createLookupItem(psiClass,AllClassesGetter.TRY_SHORTENING);
          element.setLookupString(prefix + element.getLookupString());
          consumer.consume(element);
        }
 else {
          for (          JavaPsiClassReferenceElement element : createClassLookupItems(psiClass,afterNew,JavaClassNameInsertHandler.JAVA_CLASS_INSERT_HANDLER,new Condition<PsiClass>(){
            @Override public boolean value(            PsiClass psiClass){
              return filter.isAcceptable(psiClass,insertedElement) && AllClassesGetter.isAcceptableInContext(insertedElement,psiClass,filterByScope,pkgContext);
            }
          }
)) {
            element.setLookupString(prefix + element.getLookupString());
            consumer.consume(element);
          }
        }
      }
 else {
        String name=psiClass.getName();
        if (name != null) {
          for (          PsiClass innerClass : psiClass.getInnerClasses()) {
            processClass(innerClass,visited,prefix + name + ".");
          }
        }
      }
    }
    private boolean isProcessedIndependently(    PsiClass psiClass){
      String innerName=psiClass.getName();
      return innerName != null && matcher.prefixMatches(innerName);
    }
  }
);
}
