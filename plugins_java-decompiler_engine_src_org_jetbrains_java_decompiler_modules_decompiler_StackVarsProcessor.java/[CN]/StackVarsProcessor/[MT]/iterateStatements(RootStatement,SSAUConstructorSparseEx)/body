{
  FlattenStatementsHelper flatthelper=new FlattenStatementsHelper();
  DirectGraph dgraph=flatthelper.buildDirectGraph(root);
  boolean res=false;
  HashSet<DirectNode> setVisited=new HashSet<DirectNode>();
  LinkedList<DirectNode> stack=new LinkedList<DirectNode>();
  LinkedList<HashMap<VarVersionPaar,Exprent>> stackMaps=new LinkedList<HashMap<VarVersionPaar,Exprent>>();
  stack.add(dgraph.first);
  stackMaps.add(new HashMap<VarVersionPaar,Exprent>());
  while (!stack.isEmpty()) {
    DirectNode nd=stack.removeFirst();
    HashMap<VarVersionPaar,Exprent> mapVarValues=stackMaps.removeFirst();
    if (setVisited.contains(nd)) {
      continue;
    }
    setVisited.add(nd);
    List<List<Exprent>> lstLists=new ArrayList<List<Exprent>>();
    if (!nd.exprents.isEmpty()) {
      lstLists.add(nd.exprents);
    }
    if (nd.succs.size() == 1) {
      DirectNode ndsucc=nd.succs.get(0);
      if (ndsucc.type == DirectNode.NODE_TAIL && !ndsucc.exprents.isEmpty()) {
        lstLists.add(nd.succs.get(0).exprents);
        nd=ndsucc;
      }
    }
    for (int i=0; i < lstLists.size(); i++) {
      List<Exprent> lst=lstLists.get(i);
      int index=0;
      while (index < lst.size()) {
        Exprent next=null;
        if (index == lst.size() - 1) {
          if (i < lstLists.size() - 1) {
            next=lstLists.get(i + 1).get(0);
          }
        }
 else {
          next=lst.get(index + 1);
        }
        int[] ret=iterateExprent(lst,index,next,mapVarValues,ssa);
        if (ret[0] >= 0) {
          index=ret[0];
        }
 else {
          index++;
        }
        res|=(ret[1] == 1);
      }
    }
    for (    DirectNode ndx : nd.succs) {
      stack.add(ndx);
      stackMaps.add(new HashMap<VarVersionPaar,Exprent>(mapVarValues));
    }
    if (nd.exprents.isEmpty() && (nd.type == DirectNode.NODE_INIT || nd.type == DirectNode.NODE_CONDITION || nd.type == DirectNode.NODE_INCREMENT)) {
      nd.exprents.add(null);
      if (nd.statement.type == Statement.TYPE_DO) {
        DoStatement loop=(DoStatement)nd.statement;
        if (loop.getLooptype() == DoStatement.LOOP_FOR && loop.getInitExprent() == null && loop.getIncExprent() == null) {
          loop.setLooptype(DoStatement.LOOP_WHILE);
        }
      }
    }
  }
  return res;
}
