{
  return new LineMarkerGutterIconRenderer<PsiElement>(this){
    @Override public boolean isNavigateAction(){
      return true;
    }
    @Override public AnAction getClickAction(){
      return new AnAction(){
        @Override public void actionPerformed(        AnActionEvent e){
          List<AnAction> actions=new ArrayList<AnAction>();
          Executor[] executors=ExecutorRegistry.getInstance().getRegisteredExecutors();
          actions.addAll(ContainerUtil.mapNotNull(executors,new Function<Executor,AnAction>(){
            @Override public AnAction fun(            Executor executor){
              return ActionManager.getInstance().getAction(executor.getContextActionId());
            }
          }
));
          actions.add(Separator.getInstance());
          actions.addAll(ContainerUtil.mapNotNull(RunLineMarkerContributor.EXTENSION.allForLanguage(myElement.getLanguage()),new NullableFunction<RunLineMarkerContributor,AnAction>(){
            @Nullable @Override public AnAction fun(            RunLineMarkerContributor contributor){
              return contributor.getAdditionalAction(myElement);
            }
          }
));
          ActionPopupMenuImpl popupMenu=(ActionPopupMenuImpl)ActionManager.getInstance().createActionPopupMenu(ActionPlaces.EDITOR_POPUP,new DefaultActionGroup(actions));
          final MouseEvent me=(MouseEvent)e.getInputEvent();
          final Component c=me.getComponent();
          if (c != null && c.isShowing()) {
            final DataContext delegate=DataManager.getInstance().getDataContext(c,me.getX(),me.getY());
            final DataContext dataContext=new MyDataContext(myElement,delegate);
            popupMenu.setDataContextProvider(new Getter<DataContext>(){
              @Override public DataContext get(){
                return dataContext;
              }
            }
);
            popupMenu.getComponent().show(c,me.getX(),me.getY());
          }
        }
      }
;
    }
  }
;
}
