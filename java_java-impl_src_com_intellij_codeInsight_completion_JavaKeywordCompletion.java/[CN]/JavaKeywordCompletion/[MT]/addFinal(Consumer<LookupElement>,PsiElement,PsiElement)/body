{
  PsiStatement statement=PsiTreeUtil.getParentOfType(position,PsiExpressionStatement.class);
  if (statement == null) {
    statement=PsiTreeUtil.getParentOfType(position,PsiDeclarationStatement.class);
  }
  if (statement != null && statement.getTextRange().getStartOffset() == position.getTextRange().getStartOffset()) {
    if (!psiElement().withSuperParent(2,PsiSwitchStatement.class).afterLeaf("{").accepts(statement)) {
      PsiTryStatement tryStatement=PsiTreeUtil.getParentOfType(prevLeaf,PsiTryStatement.class);
      if (tryStatement == null || tryStatement.getCatchSections().length > 0 || tryStatement.getFinallyBlock() != null) {
        result.consume(new OverrideableSpace(createKeyword(position,PsiKeyword.FINAL),TailType.HUMBLE_SPACE_BEFORE_WORD));
      }
    }
  }
  if ((isInsideParameterList(position) || isAtResourceVariableStart(position) || isAtCatchVariableStart(position)) && !psiElement().afterLeaf(PsiKeyword.FINAL).accepts(position) && !AFTER_DOT.accepts(position)) {
    result.consume(TailTypeDecorator.withTail(createKeyword(position,PsiKeyword.FINAL),TailType.HUMBLE_SPACE_BEFORE_WORD));
  }
}
