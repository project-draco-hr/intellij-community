{
  if (JavaMemberNameCompletionContributor.INSIDE_TYPE_PARAMS_PATTERN.accepts(position)) {
    result.consume(new OverrideableSpace(createKeyword(position,PsiKeyword.EXTENDS),TailType.HUMBLE_SPACE_BEFORE_WORD));
    result.consume(new OverrideableSpace(createKeyword(position,PsiKeyword.SUPER),TailType.HUMBLE_SPACE_BEFORE_WORD));
  }
  if (prevLeaf == null || !(prevLeaf instanceof PsiIdentifier || prevLeaf.textMatches(">")))   return;
  PsiClass psiClass=null;
  PsiElement prevParent=prevLeaf.getParent();
  if (prevLeaf instanceof PsiIdentifier && prevParent instanceof PsiClass) {
    psiClass=(PsiClass)prevParent;
  }
 else {
    PsiReferenceList referenceList=PsiTreeUtil.getParentOfType(prevLeaf,PsiReferenceList.class);
    if (referenceList != null && referenceList.getParent() instanceof PsiClass) {
      psiClass=(PsiClass)referenceList.getParent();
    }
 else     if (prevParent instanceof PsiTypeParameterList && prevParent.getParent() instanceof PsiClass) {
      psiClass=(PsiClass)prevParent.getParent();
    }
  }
  if (psiClass != null) {
    result.consume(new OverrideableSpace(createKeyword(position,PsiKeyword.EXTENDS),TailType.HUMBLE_SPACE_BEFORE_WORD));
    if (!psiClass.isInterface()) {
      result.consume(new OverrideableSpace(createKeyword(position,PsiKeyword.IMPLEMENTS),TailType.HUMBLE_SPACE_BEFORE_WORD));
    }
  }
}
