{
  int newRowIndex=row.getGraphRow().getRowIndex() + 1;
  if (newRowIndex == graph.getNodeRows().size()) {
    throw new NoSuchElementException();
  }
  List<Cell> cells=row.getEditableCells();
  for (ListIterator<Cell> iterator=cells.listIterator(); iterator.hasNext(); ) {
    Cell cell=iterator.next();
    if (cell.getClass() == NodeCell.class) {
      Node node=((NodeCell)cell).getNode();
      ReadOnlyList<Edge> edges=node.getDownEdges();
      if (edges.size() == 0) {
        iterator.remove();
      }
 else {
        iterator.remove();
        for (        Edge edge : edges) {
          Node downNode=edge.getDownNode();
          if (downNode.getRowIndex() == newRowIndex) {
            if (downNode.getBranch() == edge.getBranch()) {
              iterator.add(new NodeCell(downNode));
            }
          }
 else {
            iterator.add(new EdgeCell(edge));
          }
        }
      }
    }
 else {
      if (cell.getClass() != EdgeCell.class) {
        throw new IllegalStateException("unexpected cell class");
      }
      Edge edge=((EdgeCell)cell).getEdge();
      if (edge.getDownNode().getRowIndex() == newRowIndex) {
        if (edge.getBranch() == edge.getDownNode().getBranch()) {
          iterator.set(new NodeCell(edge.getDownNode()));
        }
 else {
          iterator.remove();
        }
      }
    }
  }
  final NodeRow nextGraphRow=graph.getNodeRows().get(newRowIndex);
  for (  Node node : nextGraphRow.getVisibleNodes()) {
    if (node.getUpEdges().isEmpty()) {
      cells.add(new NodeCell(node));
    }
  }
  row.setRow(nextGraphRow);
  return row;
}
