{
  Collection<DetectedProjectRoot> roots=myBuilder.getProjectRoots(myDetector);
  CloudGitProjectRoot lastProjectRoot=null;
  MultiMap<CloudGitProjectRoot,DetectedSourceRoot> project2sourceRoots=new MultiMap<CloudGitProjectRoot,DetectedSourceRoot>();
  for (  DetectedProjectRoot root : roots) {
    if (root instanceof CloudGitProjectRoot) {
      lastProjectRoot=(CloudGitProjectRoot)root;
      project2sourceRoots.put(lastProjectRoot,new ArrayList<DetectedSourceRoot>());
    }
 else     if (root instanceof DetectedSourceRoot) {
      project2sourceRoots.putValue(lastProjectRoot,(DetectedSourceRoot)root);
    }
  }
  List<ModuleDescriptor> modules=new ArrayList<ModuleDescriptor>();
  for (  Map.Entry<CloudGitProjectRoot,Collection<DetectedSourceRoot>> project2sourceRootsEntry : project2sourceRoots.entrySet()) {
    CloudGitProjectRoot projectRoot=project2sourceRootsEntry.getKey();
    ModuleDescriptor moduleDescriptor=new ModuleDescriptor(projectRoot.getDirectory(),StdModuleTypes.JAVA,project2sourceRootsEntry.getValue());
    final String applicationName=projectRoot.getApplicationName();
    moduleDescriptor.addConfigurationUpdater(new ModuleBuilder.ModuleConfigurationUpdater(){
      @Override public void update(      @NotNull Module module,      @NotNull ModifiableRootModel rootModel){
        createRunConfiguration(module,applicationName);
      }
    }
);
    modules.add(moduleDescriptor);
  }
  myProjectDescriptor.setModules(modules);
}
