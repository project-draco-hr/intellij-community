{
  Collections.sort(elements,new Comparator<DomFileElement<IdeaPlugin>>(){
    @Override public int compare(    DomFileElement<IdeaPlugin> o1,    DomFileElement<IdeaPlugin> o2){
      final Module module1=o1.getModule();
      final Module module2=o2.getModule();
      final int byAlpha=ModulesAlphaComparator.INSTANCE.compare(module1,module2);
      if (byAlpha == 0)       return 0;
      if (currentModule.equals(module1))       return -1;
      if (currentModule.equals(module2))       return 1;
      return byAlpha;
    }
  }
);
  Collections.sort(elements,new Comparator<DomFileElement<IdeaPlugin>>(){
    @Override public int compare(    DomFileElement<IdeaPlugin> o1,    DomFileElement<IdeaPlugin> o2){
      if (!Comparing.equal(o1.getModule(),o2.getModule()))       return 0;
      return o1.getFile().getName().compareTo(o2.getFile().getName());
    }
  }
);
  return ContainerUtil.map(elements,new Function<DomFileElement<IdeaPlugin>,PluginDescriptorCandidate>(){
    private Module myLastModule=currentModule;
    @Override public PluginDescriptorCandidate fun(    DomFileElement<IdeaPlugin> element){
      final Module module=element.getModule();
      boolean startsNewGroup=!myLastModule.equals(module);
      myLastModule=module;
      return new PluginDescriptorCandidate(element,startsNewGroup);
    }
  }
);
}
