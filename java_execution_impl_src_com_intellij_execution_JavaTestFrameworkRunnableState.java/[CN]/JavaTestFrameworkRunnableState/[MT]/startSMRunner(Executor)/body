{
  if (!isSmRunnerUsed()) {
    return null;
  }
  getJavaParameters().getVMParametersList().addProperty("idea." + getFrameworkId() + ".sm_runner");
  getJavaParameters().getClassPath().add(PathUtil.getJarPathForClass(ServiceMessageTypes.class));
  final RunnerSettings runnerSettings=getRunnerSettings();
  final TestConsoleProperties testConsoleProperties=createTestConsoleProperties(executor);
  testConsoleProperties.setIfUndefined(TestConsoleProperties.HIDE_PASSED_TESTS,false);
  final BaseTestsOutputConsoleView consoleView=SMTestRunnerConnectionUtil.createConsoleWithCustomLocator(getFrameworkName(),testConsoleProperties,getEnvironment(),new JavaTestLocationProvider(testConsoleProperties.getScope()));
  final SMTestRunnerResultsForm viewer=((SMTRunnerConsoleView)consoleView).getResultsViewer();
  Disposer.register(getConfiguration().getProject(),consoleView);
  final OSProcessHandler handler=createHandler(executor);
  consoleView.attachToProcess(handler);
  handler.addProcessListener(new ProcessAdapter(){
    @Override public void startNotified(    ProcessEvent event){
      if (getConfiguration().isSaveOutputToFile()) {
        viewer.getRoot().setOutputFilePath(getConfiguration().getOutputFilePath());
      }
    }
    @Override public void processTerminated(    ProcessEvent event){
      Runnable runnable=new Runnable(){
        public void run(){
          viewer.getRoot().flush();
          deleteTempFiles();
          clear();
        }
      }
;
      SwingUtilities.invokeLater(runnable);
      handler.removeProcessListener(this);
    }
  }
);
  AbstractRerunFailedTestsAction rerunFailedTestsAction=createRerunFailedTestsAction(testConsoleProperties,consoleView);
  rerunFailedTestsAction.setModelProvider(new Getter<TestFrameworkRunningModel>(){
    @Override public TestFrameworkRunningModel get(){
      return viewer;
    }
  }
);
  final DefaultExecutionResult result=new DefaultExecutionResult(consoleView,handler);
  result.setRestartActions(rerunFailedTestsAction);
  JavaRunConfigurationExtensionManager.getInstance().attachExtensionsToProcess(getConfiguration(),handler,runnerSettings);
  return result;
}
