{
  getJavaParameters().getVMParametersList().add("-Didea." + getFrameworkId() + ".sm_runner");
  getJavaParameters().getClassPath().add(PathUtil.getJarPathForClass(ServiceMessageTypes.class));
  final RunnerSettings runnerSettings=getRunnerSettings();
  TestConsoleProperties testConsoleProperties=new SMTRunnerConsoleProperties(getConfiguration(),getFrameworkName(),executor);
  testConsoleProperties.setIfUndefined(TestConsoleProperties.HIDE_PASSED_TESTS,false);
  final ConsoleView consoleView=SMTestRunnerConnectionUtil.createConsoleWithCustomLocator(getFrameworkName(),testConsoleProperties,getEnvironment(),null);
  Disposer.register(getConfiguration().getProject(),consoleView);
  consoleView.attachToProcess(handler);
  AbstractRerunFailedTestsAction rerunFailedTestsAction=createRerunFailedTestsAction(testConsoleProperties,consoleView);
  rerunFailedTestsAction.setModelProvider(new Getter<TestFrameworkRunningModel>(){
    @Override public TestFrameworkRunningModel get(){
      return ((SMTRunnerConsoleView)consoleView).getResultsViewer();
    }
  }
);
  final DefaultExecutionResult result=new DefaultExecutionResult(consoleView,handler);
  result.setRestartActions(rerunFailedTestsAction);
  JavaRunConfigurationExtensionManager.getInstance().attachExtensionsToProcess(getConfiguration(),handler,runnerSettings);
  return result;
}
