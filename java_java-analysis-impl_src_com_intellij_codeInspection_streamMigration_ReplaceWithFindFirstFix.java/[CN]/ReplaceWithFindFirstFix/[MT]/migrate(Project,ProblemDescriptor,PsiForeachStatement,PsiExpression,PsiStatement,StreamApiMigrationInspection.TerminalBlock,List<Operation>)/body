{
  PsiStatement statement=tb.getSingleStatement();
  PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  if (statement instanceof PsiReturnStatement) {
    PsiReturnStatement returnStatement=(PsiReturnStatement)statement;
    PsiExpression value=returnStatement.getReturnValue();
    if (value == null)     return;
    PsiReturnStatement nextReturnStatement=StreamApiMigrationInspection.getNextReturnStatement(foreachStatement);
    if (nextReturnStatement == null)     return;
    PsiExpression orElseExpression=nextReturnStatement.getReturnValue();
    if (!ExpressionUtils.isSimpleExpression(orElseExpression))     return;
    StringBuilder builder=generateStream(iteratedValue,operations).append(".findFirst()");
    if (!(value instanceof PsiReferenceExpression) || ((PsiReferenceExpression)value).resolve() != tb.getVariable()) {
      builder.append(".map(").append(tb.getVariable().getName()).append(" -> ").append(value.getText()).append(")");
    }
    builder.append(".orElse(").append(orElseExpression.getText()).append(")");
    restoreComments(foreachStatement,body);
    boolean siblings=nextReturnStatement.getParent() == foreachStatement.getParent();
    PsiElement result=foreachStatement.replace(elementFactory.createStatementFromText("return " + builder + ";",foreachStatement));
    if (siblings) {
      nextReturnStatement.delete();
    }
    simplifyAndFormat(project,result);
  }
 else {
    PsiStatement[] statements=tb.getStatements();
    if (statements.length != 2)     return;
    PsiAssignmentExpression assignment=ExpressionUtils.getAssignment(statements[0]);
    if (assignment == null)     return;
    PsiExpression lValue=assignment.getLExpression();
    if (!(lValue instanceof PsiReferenceExpression))     return;
    PsiElement element=((PsiReferenceExpression)lValue).resolve();
    if (!(element instanceof PsiVariable))     return;
    PsiVariable var=(PsiVariable)element;
    PsiExpression value=assignment.getRExpression();
    if (value == null)     return;
    StringBuilder builder=generateStream(iteratedValue,operations).append(".findFirst()");
    if (!(value instanceof PsiReferenceExpression) || ((PsiReferenceExpression)value).resolve() != tb.getVariable()) {
      builder.append(".map(").append(tb.getVariable().getName()).append(" -> ").append(value.getText()).append(")");
    }
    restoreComments(foreachStatement,body);
    if (StreamApiMigrationInspection.isDeclarationJustBefore(var,foreachStatement)) {
      PsiExpression initializer=var.getInitializer();
      if (initializer != null) {
        PsiElement result=initializer.replace(elementFactory.createExpressionFromText(builder + ".orElse(" + initializer.getText()+ ")",initializer));
        removeLoop(foreachStatement);
        simplifyAndFormat(project,result);
        return;
      }
    }
    PsiElement result=foreachStatement.replace(elementFactory.createStatementFromText(var.getName() + " = " + builder+ ".orElse("+ var.getName()+ ");",foreachStatement));
    simplifyAndFormat(project,result);
  }
}
