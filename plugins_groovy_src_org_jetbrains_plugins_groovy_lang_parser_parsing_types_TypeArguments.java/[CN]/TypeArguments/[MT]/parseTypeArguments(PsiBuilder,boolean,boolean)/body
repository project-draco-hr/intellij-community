{
  PsiBuilder.Marker marker=builder.mark();
  if (!ParserUtils.getToken(builder,GroovyTokenTypes.mLT)) {
    marker.rollbackTo();
    return false;
  }
  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  if (allowDiamond && ParserUtils.getToken(builder,GroovyTokenTypes.mGT)) {
    marker.done(GroovyElementTypes.TYPE_ARGUMENTS);
    return true;
  }
  if (!parseArgument(builder)) {
    builder.error(GroovyBundle.message("type.argument.expected"));
    if (ParserUtils.getToken(builder,GroovyTokenTypes.mGT)) {
      marker.done(GroovyElementTypes.TYPE_ARGUMENTS);
      return true;
    }
 else {
      marker.rollbackTo();
      return false;
    }
  }
  boolean hasComma=ParserUtils.lookAhead(builder,GroovyTokenTypes.mCOMMA);
  while (ParserUtils.getToken(builder,GroovyTokenTypes.mCOMMA)) {
    ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
    if (!parseArgument(builder)) {
      builder.error("type.argument.expected");
    }
  }
  PsiBuilder.Marker rb=builder.mark();
  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  if (ParserUtils.getToken(builder,GroovyTokenTypes.mGT)) {
    rb.drop();
  }
 else   if (hasComma) {
    rb.rollbackTo();
    builder.error(GroovyBundle.message("gt.expected"));
  }
 else {
    rb.drop();
    if (expressionPossible) {
      marker.rollbackTo();
      return false;
    }
 else {
      builder.error(GroovyBundle.message("gt.expected"));
    }
  }
  marker.done(GroovyElementTypes.TYPE_ARGUMENTS);
  return true;
}
