{
  if (rightExpression instanceof PyLiteralExpression) {
    if (!myFormatSpec.isEmpty()) {
      checkType(rightExpression,myFormatSpec.get("1"));
    }
    return 1;
  }
 else   if (rightExpression instanceof PyParenthesizedExpression) {
    return inspectArguments(((PyParenthesizedExpression)rightExpression).getContainedExpression());
  }
 else   if (rightExpression instanceof PyTupleExpression) {
    final PyExpression[] expressions=((PyTupleExpression)rightExpression).getElements();
    int i=1;
    for (    PyExpression expression : expressions) {
      final String formatSpec=myFormatSpec.get(Integer.toString(i));
      if (formatSpec != null) {
        checkType(expression,formatSpec);
      }
      ++i;
    }
    return expressions.length;
  }
 else   if (rightExpression instanceof PyDictLiteralExpression) {
    PyKeyValueExpression[] expressions=((PyDictLiteralExpression)rightExpression).getElements();
    if (expressions == null) {
      return 0;
    }
    if (myUsedMappingKeys.isEmpty() && expressions.length != 0) {
      registerProblem(rightExpression,"Format doesn't require a mapping");
    }
    for (    PyKeyValueExpression expression : expressions) {
      PyExpression key=expression.getKey();
      if (key instanceof PyStringLiteralExpression) {
        String name=((PyStringLiteralExpression)key).getStringValue();
        if (myUsedMappingKeys.get(name) != null) {
          myUsedMappingKeys.put(name,true);
          final PyExpression value=expression.getValue();
          if (value != null) {
            checkType(value,myFormatSpec.get(name));
          }
        }
      }
    }
    if (myUsedMappingKeys.containsValue(false)) {
      registerProblem(rightExpression,"One of keys has no following argument");
    }
    return expressions.length;
  }
  return 0;
}
