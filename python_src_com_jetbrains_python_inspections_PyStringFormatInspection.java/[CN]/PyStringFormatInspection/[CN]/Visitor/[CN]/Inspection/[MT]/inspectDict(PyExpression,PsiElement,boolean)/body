{
  PsiElement pyElement;
  Map<PyExpression,PyExpression> additionalExpressions;
  if (addSubscriptions) {
    additionalExpressions=addSubscriptions(rightExpression.getContainingFile(),rightExpression.getText());
    pyElement=((PyReferenceExpression)rightExpression).followAssignmentsChain(PyResolveContext.noImplicits().withTypeEvalContext(myTypeEvalContext)).getElement();
  }
 else {
    additionalExpressions=new HashMap<>();
    pyElement=rightExpression;
  }
  if (pyElement == null)   return 0;
  final PyKeyValueExpression[] expressions=((PyDictLiteralExpression)pyElement).getElements();
  if (myUsedMappingKeys.isEmpty()) {
    if (myExpectedArguments > 0) {
      if (myExpectedArguments > 1 && myExpectedArguments == (expressions.length + additionalExpressions.size())) {
        registerProblem(rightExpression,PyBundle.message("INSP.format.requires.no.mapping"));
      }
 else {
        return 1;
      }
    }
 else {
      return 0;
    }
  }
  int referenceKeyNumber=0;
  for (  PyKeyValueExpression expression : expressions) {
    final PyExpression key=expression.getKey();
    final PyExpression value=expression.getValue();
    if (key instanceof PyStringLiteralExpression) {
      resolveMappingKey(problemTarget,(PyStringLiteralExpression)key,value);
    }
 else     if (key instanceof PyReferenceExpression) {
      referenceKeyNumber++;
    }
  }
  for (  Map.Entry<PyExpression,PyExpression> expression : additionalExpressions.entrySet()) {
    final PyExpression key=expression.getKey();
    final PyExpression value=expression.getValue();
    if (key instanceof PyStringLiteralExpression) {
      resolveMappingKey(problemTarget,(PyStringLiteralExpression)key,value);
    }
 else     if (key instanceof PyReferenceExpression) {
      referenceKeyNumber++;
    }
  }
  int unresolved=0;
  for (  String key : myUsedMappingKeys.keySet()) {
    if (!myUsedMappingKeys.get(key).booleanValue()) {
      unresolved++;
      if (unresolved > referenceKeyNumber) {
        registerProblem(problemTarget,PyBundle.message("INSP.key.$0.has.no.arg",key));
        break;
      }
    }
  }
  return (expressions.length + additionalExpressions.size());
}
