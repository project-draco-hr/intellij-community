{
  List<SimpleRowElement> result=new SmartList<SimpleRowElement>();
  List<GraphElement> sortedVisibleElementsInRow=getSortedVisibleElementsInRow(visibleRowIndex);
  for (int position=0; position < sortedVisibleElementsInRow.size(); position++) {
    GraphElement element=sortedVisibleElementsInRow.get(position);
    if (element instanceof GraphNode) {
      result.add(new SimpleRowElement(element,RowElementType.NODE,position));
    }
    if (element instanceof GraphEdge) {
      GraphEdge edge=(GraphEdge)element;
      Pair<Integer,Integer> normalEdge=asNormalEdge(edge);
      if (normalEdge != null) {
        int edgeSize=normalEdge.second - normalEdge.first;
        int upOffset=visibleRowIndex - normalEdge.first;
        int downOffset=normalEdge.second - visibleRowIndex;
        if (edgeSize >= myLongSize)         addArrowIfNeeded(result,edge,position,upOffset,downOffset,myShowingPartSize);
        if (edgeSize >= myAddNearArrowSize)         addArrowIfNeeded(result,edge,position,upOffset,downOffset,1);
      }
 else {
switch (edge.getType()) {
case DOTTED_ARROW_DOWN:
case NOT_LOAD_COMMIT:
          if (intEqual(edge.getUpNodeIndex(),visibleRowIndex - 1)) {
            result.add(new SimpleRowElement(edge,RowElementType.DOWN_ARROW,position));
          }
        break;
case DOTTED_ARROW_UP:
      if (intEqual(edge.getDownNodeIndex(),visibleRowIndex + 1)) {
        result.add(new SimpleRowElement(edge,RowElementType.UP_ARROW,position));
      }
    break;
default :
}
}
}
}
return result;
}
