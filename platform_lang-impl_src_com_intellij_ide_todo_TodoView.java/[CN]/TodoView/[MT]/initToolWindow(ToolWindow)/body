{
  ContentFactory contentFactory=ContentFactory.SERVICE.getInstance();
  Content allTodosContent=contentFactory.createContent(null,IdeBundle.message("title.project"),false);
  myAllTodos=new TodoPanel(myProject,state.all,false,allTodosContent){
    @Override protected TodoTreeBuilder createTreeBuilder(    JTree tree,    DefaultTreeModel treeModel,    Project project){
      AllTodosTreeBuilder builder=new AllTodosTreeBuilder(tree,treeModel,project);
      builder.init();
      return builder;
    }
  }
;
  allTodosContent.setComponent(myAllTodos);
  Disposer.register(this,myAllTodos);
  Content currentFileTodosContent=contentFactory.createContent(null,IdeBundle.message("title.todo.current.file"),false);
  CurrentFileTodosPanel currentFileTodos=new CurrentFileTodosPanel(myProject,state.current,currentFileTodosContent){
    @Override protected TodoTreeBuilder createTreeBuilder(    JTree tree,    DefaultTreeModel treeModel,    Project project){
      CurrentFileTodosTreeBuilder builder=new CurrentFileTodosTreeBuilder(tree,treeModel,project);
      builder.init();
      return builder;
    }
  }
;
  Disposer.register(this,currentFileTodos);
  currentFileTodosContent.setComponent(currentFileTodos);
  myChangeListTodosContent=contentFactory.createContent(null,IdeBundle.message("changelist.todo.title",ChangeListManager.getInstance(myProject).getDefaultChangeList().getName()),false);
  ChangeListTodosPanel changeListTodos=new ChangeListTodosPanel(myProject,state.current,myChangeListTodosContent){
    @Override protected TodoTreeBuilder createTreeBuilder(    JTree tree,    DefaultTreeModel treeModel,    Project project){
      ChangeListTodosTreeBuilder builder=new ChangeListTodosTreeBuilder(tree,treeModel,project);
      builder.init();
      return builder;
    }
  }
;
  Disposer.register(this,changeListTodos);
  myChangeListTodosContent.setComponent(changeListTodos);
  Content scopeBasedTodoContent=contentFactory.createContent(null,"Scope Based",false);
  ScopeBasedTodosPanel scopeBasedTodos=new ScopeBasedTodosPanel(myProject,state.current,scopeBasedTodoContent);
  Disposer.register(this,scopeBasedTodos);
  scopeBasedTodoContent.setComponent(scopeBasedTodos);
  myContentManager=toolWindow.getContentManager();
  myContentManager.addContent(allTodosContent);
  myContentManager.addContent(currentFileTodosContent);
  myContentManager.addContent(scopeBasedTodoContent);
  if (ProjectLevelVcsManager.getInstance(myProject).hasActiveVcss()) {
    myVcsListener.myIsVisible=true;
    myContentManager.addContent(myChangeListTodosContent);
  }
  for (  Content content : myNotAddedContent) {
    myContentManager.addContent(content);
  }
  myChangeListTodosContent.setCloseable(false);
  allTodosContent.setCloseable(false);
  currentFileTodosContent.setCloseable(false);
  scopeBasedTodoContent.setCloseable(false);
  Content content=myContentManager.getContent(state.selectedIndex);
  myContentManager.setSelectedContent(content == null ? allTodosContent : content);
  myPanels.add(myAllTodos);
  myPanels.add(changeListTodos);
  myPanels.add(currentFileTodos);
  myPanels.add(scopeBasedTodos);
}
