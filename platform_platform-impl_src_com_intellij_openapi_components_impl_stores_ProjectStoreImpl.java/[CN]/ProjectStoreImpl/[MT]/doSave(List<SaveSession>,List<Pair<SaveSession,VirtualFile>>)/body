{
  ProjectImpl.UnableToSaveProjectNotification[] notifications=NotificationsManager.getNotificationsManager().getNotificationsOfType(ProjectImpl.UnableToSaveProjectNotification.class,myProject);
  if (notifications.length > 0) {
    throw new SaveCancelledException();
  }
  beforeSave(readonlyFiles);
  super.doSave(saveSessions,readonlyFiles);
  if (!readonlyFiles.isEmpty()) {
    ReadonlyStatusHandler.OperationStatus status;
    AccessToken token=ReadAction.start();
    try {
      status=ReadonlyStatusHandler.getInstance(myProject).ensureFilesWritable(getFilesList(readonlyFiles));
    }
  finally {
      token.finish();
    }
    if (status.hasReadonlyFiles()) {
      ProjectImpl.dropUnableToSaveProjectNotification(myProject,status.getReadonlyFiles());
      throw new SaveCancelledException();
    }
 else {
      List<Pair<SaveSession,VirtualFile>> oldList=new ArrayList<Pair<SaveSession,VirtualFile>>(readonlyFiles);
      readonlyFiles.clear();
      List<Throwable> errors=null;
      for (      Pair<SaveSession,VirtualFile> entry : oldList) {
        errors=executeSave(entry.first,readonlyFiles,errors);
      }
      if (errors != null) {
        throw new CompoundRuntimeException(errors);
      }
      if (!readonlyFiles.isEmpty()) {
        ProjectImpl.dropUnableToSaveProjectNotification(myProject,getFilesList(readonlyFiles));
        throw new SaveCancelledException();
      }
    }
  }
}
