{
  myModule.setText(ExecutionBundle.message("application.configuration.use.classpath.and.jdk.of.module.label"));
  myModule.setLabelLocation(BorderLayout.WEST);
  myModule.setComponent(new ModulesComboBox());
  myModuleSelector=new ConfigurationModuleSelector(project,getModulesComponent());
  myCommonJavaParameters.setModuleContext(myModuleSelector.getModule());
  myCommonJavaParameters.setHasModuleMacro();
  myModule.getComponent().addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myCommonJavaParameters.setModuleContext(myModuleSelector.getModule());
    }
  }
);
  final JPanel panelWithSettings=new JPanel(new GridBagLayout());
  final GridBagConstraints gc=new GridBagConstraints(0,RELATIVE,1,1,1,0,NORTHWEST,HORIZONTAL,JBUI.emptyInsets(),0,0);
  panelWithSettings.add(myPositionRb,gc);
  myClass.setText("Class:");
  final ClassBrowser classBrowser=new ClassBrowser(project,"Choose Class"){
    @Override protected ClassFilter.ClassFilterWithScope getFilter() throws NoFilterException {
      return new ClassFilter.ClassFilterWithScope(){
        @Override public GlobalSearchScope getScope(){
          return GlobalSearchScope.allScope(project);
        }
        @Override public boolean isAccepted(        PsiClass aClass){
          return true;
        }
      }
;
    }
    @Override protected PsiClass findClass(    String className){
      return JavaPsiFacade.getInstance(project).findClass(className,GlobalSearchScope.allScope(project));
    }
  }
;
  final EditorTextFieldWithBrowseButton classComponent=new EditorTextFieldWithBrowseButton(project,true);
  myClass.setComponent(classComponent);
  classBrowser.setField(classComponent);
  panelWithSettings.add(myClass,gc);
  myMethod.setText("Method:");
  final EditorTextFieldWithBrowseButton textFieldWithBrowseButton=new EditorTextFieldWithBrowseButton(project,true,JavaCodeFragment.VisibilityChecker.EVERYTHING_VISIBLE,PlainTextLanguage.INSTANCE.getAssociatedFileType());
  myMethod.setComponent(textFieldWithBrowseButton);
  final MethodBrowser methodBrowser=new MethodBrowser(project){
    protected Condition<PsiMethod> getFilter(    final PsiClass testClass){
      return new Condition<PsiMethod>(){
        @Override public boolean value(        PsiMethod method){
          return method.getContainingClass() == testClass;
        }
      }
;
    }
    @Override protected String getClassName(){
      return myClass.getComponent().getText().trim();
    }
    @Override protected ConfigurationModuleSelector getModuleSelector(){
      return myModuleSelector;
    }
  }
;
  methodBrowser.setField(textFieldWithBrowseButton);
  methodBrowser.installCompletion(textFieldWithBrowseButton.getChildComponent());
  panelWithSettings.add(myMethod,gc);
  panelWithSettings.add(myChangesRb,gc);
  panelWithSettings.add(myChangeLists,gc);
  ButtonGroup gr=new ButtonGroup();
  gr.add(myPositionRb);
  gr.add(myChangesRb);
  final ActionListener l=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateComponents();
    }
  }
;
  myPositionRb.addActionListener(l);
  myChangesRb.addActionListener(l);
  final List<LocalChangeList> changeLists=ChangeListManager.getInstance(project).getChangeLists();
  final DefaultComboBoxModel model=new DefaultComboBoxModel();
  model.addElement("All");
  for (  LocalChangeList changeList : changeLists) {
    model.addElement(changeList.getName());
  }
  myChangeLists.setModel(model);
  ChangeListManager changeListManager=ChangeListManager.getInstance(project);
  if (changeListManager.getAffectedFiles().isEmpty()) {
    myChangesRb.setEnabled(false);
  }
  myWholePanel.add(panelWithSettings,BorderLayout.NORTH);
  myWholePanel.add(myCommonJavaParameters,BorderLayout.CENTER);
  final JPanel classpathPanel=new JPanel(new BorderLayout());
  myWholePanel.add(classpathPanel,BorderLayout.SOUTH);
  classpathPanel.add(myModule,BorderLayout.NORTH);
  myJrePathEditor=new JrePathEditor(DefaultJreSelector.fromModuleDependencies(getModulesComponent(),false));
  classpathPanel.add(myJrePathEditor,BorderLayout.CENTER);
  UIUtil.setEnabled(myCommonJavaParameters.getProgramParametersComponent(),false,true);
  setAnchor(myModule.getLabel());
  myJrePathEditor.setAnchor(myModule.getLabel());
  myCommonJavaParameters.setAnchor(myModule.getLabel());
}
