{
  setLayout(new GridLayout(1,1));
  JPanel gridPanel=new JPanel(new GridLayout(0,3));
  JBScrollPane scrollPane=CustomizePluginsStepPanel.createScrollPane(gridPanel);
  Map<String,String> config=pluginGroups.getFeaturedPlugins();
  boolean isEmptyOrOffline=true;
  List<IdeaPluginDescriptor> pluginsFromRepository=pluginGroups.getPluginsFromRepository();
  for (  Map.Entry<String,String> entry : config.entrySet()) {
    JPanel groupPanel=new JPanel(new GridBagLayout());
    GridBagConstraints gbc=new GridBagConstraints();
    gbc.fill=GridBagConstraints.BOTH;
    gbc.anchor=GridBagConstraints.WEST;
    gbc.gridwidth=GridBagConstraints.REMAINDER;
    gbc.weightx=1;
    String title=entry.getKey();
    String s=entry.getValue();
    int i=s.indexOf(":");
    String topic=s.substring(0,i);
    int j=s.indexOf(":",i + 1);
    final String description=s.substring(i + 1,j);
    final String pluginId=s.substring(j + 1);
    IdeaPluginDescriptor foundDescriptor=null;
    for (    IdeaPluginDescriptor descriptor : pluginsFromRepository) {
      if (descriptor.getPluginId().getIdString().equals(pluginId) && !PluginManagerCore.isBrokenPlugin(descriptor)) {
        foundDescriptor=descriptor;
        isEmptyOrOffline=false;
        break;
      }
    }
    if (foundDescriptor == null)     continue;
    final IdeaPluginDescriptor descriptor=foundDescriptor;
    final boolean isVIM=PluginGroups.IDEA_VIM_PLUGIN_ID.equals(descriptor.getPluginId().getIdString());
    JLabel titleLabel=new JLabel("<html><body><h2 style=\"text-align:left;\">" + title + "</h2></body></html>");
    JLabel topicLabel=new JLabel("<html><body><h4 style=\"text-align:left;\">" + topic + "</h4></body></html>");
    JLabel descriptionLabel=createHTMLLabel("<i>" + description + "</i>");
    JLabel warningLabel=null;
    if (isVIM) {
      warningLabel=createHTMLLabel("This plugin enables Vim-keymap and 'insert' mode for editing. " + "If you are not familiar with Vim, it's not recommended to install it.");
      if (SystemInfo.isMac)       UIUtil.applyStyle(UIUtil.ComponentStyle.SMALL,warningLabel);
      warningLabel.setBackground(new JBColor(ColorUtil.fromHex("F6F199"),ColorUtil.fromHex("52503A")));
      warningLabel.setOpaque(true);
    }
    final CardLayout wrapperLayout=new CardLayout();
    final JPanel buttonWrapper=new JPanel(wrapperLayout);
    final JButton installButton=new JButton(isVIM ? "Install and Enable Vim Editor" : "Install");
    final JProgressBar progressBar=new JProgressBar(0,100);
    progressBar.setStringPainted(true);
    JPanel progressPanel=new JPanel(new VerticalFlowLayout(true,false));
    progressPanel.add(progressBar);
    final LinkLabel cancelLink=new LinkLabel("Cancel",AllIcons.Actions.Cancel);
    JPanel linkWrapper=new JPanel(new FlowLayout(FlowLayout.CENTER,0,0));
    linkWrapper.add(cancelLink);
    progressPanel.add(linkWrapper);
    final JPanel buttonPanel=new JPanel(new VerticalFlowLayout(0,0));
    buttonPanel.add(installButton);
    buttonWrapper.add(buttonPanel,"button");
    buttonWrapper.add(progressPanel,"progress");
    wrapperLayout.show(buttonWrapper,"button");
    final ProgressIndicatorEx indicator=new AbstractProgressIndicatorExBase(true){
      @Override public void start(){
        myCanceled.set(false);
        super.start();
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            wrapperLayout.show(buttonWrapper,"progress");
          }
        }
);
      }
      @Override public void processFinish(){
        super.processFinish();
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            wrapperLayout.show(buttonWrapper,"button");
            installButton.setEnabled(false);
            installButton.setText("Installed");
          }
        }
);
      }
      @Override public void setFraction(      final double fraction){
        super.setFraction(fraction);
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            int value=(int)(100 * fraction + .5);
            progressBar.setValue(value);
            progressBar.setString(value + "%");
          }
        }
);
      }
      @Override public void cancel(){
        stop();
        myCanceled.set(true);
        super.cancel();
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            wrapperLayout.show(buttonWrapper,"button");
            progressBar.setValue(0);
          }
        }
);
      }
    }
;
    installButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        wrapperLayout.show(buttonWrapper,"progress");
        ourService.schedule(new Runnable(){
          @Override public void run(){
            try {
              indicator.start();
              PluginDownloader downloader=PluginDownloader.createDownloader(descriptor);
              downloader.prepareToInstall(indicator);
              downloader.install();
              indicator.processFinish();
            }
 catch (            Exception ignored) {
              if (!myCanceled.get()) {
                onFail();
              }
            }
          }
          void onFail(){
            SwingUtilities.invokeLater(new Runnable(){
              @Override public void run(){
                indicator.stop();
                wrapperLayout.show(buttonWrapper,"progress");
                progressBar.setString("Cannot download plugin");
              }
            }
);
          }
        }
,0,TimeUnit.SECONDS);
      }
    }
);
    cancelLink.setListener(new LinkListener(){
      @Override public void linkSelected(      LinkLabel aSource,      Object aLinkData){
        indicator.cancel();
      }
    }
,null);
    gbc.insets.bottom=-5;
    groupPanel.add(titleLabel,gbc);
    gbc.insets.bottom=SMALL_GAP;
    groupPanel.add(topicLabel,gbc);
    groupPanel.add(descriptionLabel,gbc);
    gbc.weighty=1;
    groupPanel.add(Box.createVerticalGlue(),gbc);
    gbc.weighty=0;
    if (warningLabel != null)     groupPanel.add(warningLabel,gbc);
    groupPanel.add(buttonWrapper,gbc);
    gridPanel.add(groupPanel);
  }
  int cursor=0;
  Component[] components=gridPanel.getComponents();
  int rowCount=components.length / COLS;
  for (  Component component : components) {
    ((JComponent)component).setBorder(new CompoundBorder(new CustomLineBorder(ColorUtil.withAlpha(JBColor.foreground(),.2),0,0,cursor / 3 < rowCount ? 1 : 0,cursor % COLS != COLS - 1 ? 1 : 0){
      @Override protected Color getColor(){
        return ColorUtil.withAlpha(JBColor.foreground(),.2);
      }
    }
,BorderFactory.createEmptyBorder(0,SMALL_GAP,0,SMALL_GAP)));
    cursor++;
  }
  if (isEmptyOrOffline)   throw new OfflineException();
  add(scrollPane);
}
