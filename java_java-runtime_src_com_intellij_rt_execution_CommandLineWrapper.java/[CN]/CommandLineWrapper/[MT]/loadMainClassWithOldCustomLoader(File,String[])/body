{
  final List urls=new ArrayList();
  final StringBuffer buf=new StringBuffer();
  final BufferedReader reader=new BufferedReader(new FileReader(file));
  try {
    while (reader.ready()) {
      final String fileName=reader.readLine();
      if (buf.length() > 0) {
        buf.append(File.pathSeparator);
      }
      buf.append(fileName);
      File classpathElement=new File(fileName);
      try {
        urls.add(classpathElement.toURI().toURL());
      }
 catch (      NoSuchMethodError e) {
        urls.add(classpathElement.toURL());
      }
    }
  }
  finally {
    reader.close();
  }
  if (!file.delete())   file.deleteOnExit();
  System.setProperty("java.class.path",buf.toString());
  int startArgsIdx=2;
  String mainClassName=args[startArgsIdx - 1];
  String[] mainArgs=new String[args.length - startArgsIdx];
  System.arraycopy(args,startArgsIdx,mainArgs,0,mainArgs.length);
  for (int i=0; i < urls.size(); i++) {
    URL url=(URL)urls.get(i);
    urls.set(i,internFileProtocol(url));
  }
  ClassLoader loader=new URLClassLoader((URL[])urls.toArray(new URL[urls.size()]),null);
  final String classLoader=System.getProperty("java.system.class.loader");
  if (classLoader != null) {
    try {
      loader=(ClassLoader)Class.forName(classLoader).getConstructor(new Class[]{ClassLoader.class}).newInstance(new Object[]{loader});
    }
 catch (    Exception e) {
    }
  }
  Class mainClass=loader.loadClass(mainClassName);
  Thread.currentThread().setContextClassLoader(loader);
  return new MainPair(mainClass,mainArgs);
}
