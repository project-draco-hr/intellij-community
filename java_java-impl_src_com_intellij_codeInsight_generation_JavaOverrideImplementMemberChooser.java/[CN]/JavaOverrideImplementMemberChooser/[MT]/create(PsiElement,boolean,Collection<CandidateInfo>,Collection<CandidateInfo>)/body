{
  final Project project=aClass.getProject();
  if (candidates.isEmpty() && secondary.isEmpty())   return null;
  final PsiMethodMember[] onlyPrimary=convertToMethodMembers(candidates);
  final LinkedHashSet<CandidateInfo> allCandidates=new LinkedHashSet<CandidateInfo>(candidates);
  allCandidates.addAll(secondary);
  final PsiMethodMember[] all=convertToMethodMembers(allCandidates);
  final NotNullLazyValue<PsiMethodWithOverridingPercentMember[]> lazyElementsWithPercent=new NotNullLazyValue<PsiMethodWithOverridingPercentMember[]>(){
    @NotNull @Override protected PsiMethodWithOverridingPercentMember[] compute(){
      final PsiMethodWithOverridingPercentMember[] elements=PsiMethodWithOverridingPercentMember.calculateOverridingPercents(candidates);
      Arrays.sort(elements,PsiMethodWithOverridingPercentMember.COMPARATOR);
      return elements;
    }
  }
;
  final boolean merge=PropertiesComponent.getInstance(project).getBoolean(PROP_COMBINED_OVERRIDE_IMPLEMENT,true);
  final JavaOverrideImplementMemberChooser javaOverrideImplementMemberChooser=new JavaOverrideImplementMemberChooser(all,onlyPrimary,lazyElementsWithPercent,project,PsiUtil.isLanguageLevel5OrHigher(aClass),merge,toImplement,PropertiesComponent.getInstance(project).getBoolean(PROP_OVERRIDING_SORTED_OVERRIDE_IMPLEMENT));
  javaOverrideImplementMemberChooser.setTitle(getChooserTitle(toImplement,merge));
  javaOverrideImplementMemberChooser.setCopyJavadocVisible(true);
  if (toImplement) {
    if (onlyPrimary.length == 0) {
      javaOverrideImplementMemberChooser.selectElements(new ClassMember[]{all[0]});
    }
 else {
      javaOverrideImplementMemberChooser.selectElements(onlyPrimary);
    }
  }
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    if (!toImplement || onlyPrimary.length == 0) {
      javaOverrideImplementMemberChooser.selectElements(all);
    }
    javaOverrideImplementMemberChooser.close(DialogWrapper.OK_EXIT_CODE);
    return javaOverrideImplementMemberChooser;
  }
  return javaOverrideImplementMemberChooser;
}
