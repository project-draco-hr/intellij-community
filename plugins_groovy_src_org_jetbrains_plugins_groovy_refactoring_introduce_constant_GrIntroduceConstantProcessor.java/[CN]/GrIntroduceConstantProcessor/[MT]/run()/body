{
  final PsiClass targetClass=settings.getTargetClass();
  if (targetClass == null)   return null;
  if (checkErrors(targetClass)) {
    return null;
  }
  final GrVariableDeclaration declaration=addDeclaration(targetClass);
  final GrField field=(GrField)declaration.getVariables()[0];
  if (context.getVar() != null) {
    GrVariable var=context.getVar();
    replaceOccurrence(field,var.getInitializerGroovy(),isEscalateVisibility());
    deleteLocalVar(var);
  }
 else   if (context.getStringPart() != null) {
    final GrExpression ref=processLiteral(field.getName(),context.getStringPart(),context.getProject());
    final PsiElement element=replaceOccurrence(field,ref,isEscalateVisibility());
    updateCaretPosition(element);
  }
 else   if (context.getExpression() != null) {
    if (settings.replaceAllOccurrences()) {
      final PsiElement[] occurrences=context.getOccurrences();
      GroovyRefactoringUtil.sortOccurrences(occurrences);
      for (      PsiElement occurrence : occurrences) {
        replaceOccurrence(field,occurrence,isEscalateVisibility());
      }
    }
 else {
      replaceOccurrence(field,context.getExpression(),isEscalateVisibility());
    }
  }
  return field;
}
