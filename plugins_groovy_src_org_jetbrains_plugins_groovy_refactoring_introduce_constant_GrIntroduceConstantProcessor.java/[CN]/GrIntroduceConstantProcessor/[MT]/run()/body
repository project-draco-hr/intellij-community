{
  final PsiClass targetClass=settings.getTargetClass();
  if (targetClass == null)   return null;
  if (checkErrors(targetClass)) {
    return null;
  }
  final GrVariableDeclaration rawDeclaration=createField(targetClass);
  final GrVariableDeclaration declaration=addDeclaration(targetClass,rawDeclaration);
  final GrField field=(GrField)declaration.getVariables()[0];
  if (context.getVar() != null) {
    deleteLocalVar(context);
  }
  if (context.getStringPart() != null) {
    final GrExpression ref=processLiteral(context,field);
    context.getEditor().getCaretModel().moveToOffset(ref.getTextRange().getEndOffset());
    context.getEditor().getSelectionModel().removeSelection();
  }
 else {
    if (settings.replaceAllOccurrences()) {
      GroovyRefactoringUtil.sortOccurrences(context.getOccurrences());
      for (      PsiElement occurrence : context.getOccurrences()) {
        replaceOccurrence(field,occurrence,isEscalateVisibility());
      }
    }
 else {
      replaceOccurrence(field,context.getExpression(),isEscalateVisibility());
    }
  }
  return field;
}
