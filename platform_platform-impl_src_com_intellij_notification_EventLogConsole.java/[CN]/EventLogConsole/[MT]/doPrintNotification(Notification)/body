{
  Editor editor=getConsoleEditor();
  if (editor.isDisposed()) {
    return;
  }
  Document document=editor.getDocument();
  boolean scroll=document.getTextLength() == editor.getCaretModel().getOffset() || !editor.getContentComponent().hasFocus();
  if (document.getTextLength() > 0) {
    append(document,"\n");
  }
  String lastDate=DateFormatUtil.formatDate(notification.getTimestamp());
  if (document.getTextLength() == 0 || !lastDate.equals(myLastDate)) {
    myLastDate=lastDate;
    append(document,lastDate + "\n");
    editor.getMarkupModel().addLineHighlighter(document.getLineCount() - 2,HighlighterLayer.CARET_ROW + 1,new TextAttributes(null,null,null,null,Font.BOLD));
  }
  String date=DateFormatUtil.formatTimeWithSeconds(notification.getTimestamp()) + " ";
  append(document,date);
  int startLine=document.getLineCount() - 1;
  EventLog.LogEntry pair=EventLog.formatForLog(notification,StringUtil.repeatSymbol(' ',date.length()));
  final NotificationType type=notification.getType();
  TextAttributesKey key=type == NotificationType.ERROR ? ConsoleViewContentType.LOG_ERROR_OUTPUT_KEY : type == NotificationType.INFORMATION ? ConsoleViewContentType.NORMAL_OUTPUT_KEY : ConsoleViewContentType.LOG_WARNING_OUTPUT_KEY;
  int msgStart=document.getTextLength();
  String message=pair.message;
  append(document,message);
  TextAttributes attributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(key);
  int layer=HighlighterLayer.CARET_ROW + 1;
  RangeHighlighter highlighter=editor.getMarkupModel().addRangeHighlighter(msgStart,document.getTextLength(),layer,attributes,HighlighterTargetArea.EXACT_RANGE);
  GROUP_ID.set(highlighter,notification.getGroupId());
  NOTIFICATION_ID.set(highlighter,notification.id);
  for (  Pair<TextRange,HyperlinkInfo> link : pair.links) {
    final RangeHighlighter rangeHighlighter=myHyperlinkSupport.getValue().createHyperlink(link.first.getStartOffset() + msgStart,link.first.getEndOffset() + msgStart,null,link.second);
    if (link.second instanceof EventLog.ShowBalloon) {
      ((EventLog.ShowBalloon)link.second).setRangeHighlighter(rangeHighlighter);
    }
  }
  append(document,"\n");
  if (scroll) {
    editor.getCaretModel().moveToOffset(document.getTextLength());
    editor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
  }
  if (notification.isImportant()) {
    highlightNotification(notification,pair.status,startLine,startLine + 1);
  }
}
