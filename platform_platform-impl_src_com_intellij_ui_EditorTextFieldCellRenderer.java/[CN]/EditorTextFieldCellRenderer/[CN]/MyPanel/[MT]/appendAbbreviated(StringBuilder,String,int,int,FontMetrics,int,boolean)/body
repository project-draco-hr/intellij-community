{
  if (metrics.charWidth('m') * (end - start) <= maxWidth) {
    appendAndReplaceLineTerminatorsIfNeeded(to,text,start,end,replaceLineTerminators);
    return;
  }
  int abbrWidth=metrics.charWidth(ABBREVIATION_SUFFIX);
  int abbrIdx=start;
  Matcher m=LINE_TERMINATOR_OR_A_CHARACTER_PATTERN.matcher(text);
  m.region(start,end);
  while (m.find()) {
    int appendWidth=0;
    if (replaceLineTerminators && m.start(1) != -1) {
      appendWidth=metrics.charWidth(RETURN_SYMBOL);
    }
 else {
      for (int i=m.start(); i < m.end(); i++) {
        appendWidth+=metrics.charWidth(text.charAt(i));
      }
    }
    if (abbrWidth + appendWidth >= maxWidth)     break;
    abbrWidth+=appendWidth;
    abbrIdx=m.end();
  }
  appendAndReplaceLineTerminatorsIfNeeded(to,text,start,abbrIdx,replaceLineTerminators);
  to.append(ABBREVIATION_SUFFIX);
}
