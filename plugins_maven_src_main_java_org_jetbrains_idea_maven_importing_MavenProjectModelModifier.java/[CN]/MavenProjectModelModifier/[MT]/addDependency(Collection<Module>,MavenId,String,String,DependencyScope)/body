{
  final List<Trinity<MavenDomProjectModel,MavenId,String>> models=new ArrayList<>(fromModules.size());
  List<XmlFile> files=new ArrayList<>(fromModules.size());
  List<MavenProject> projectToUpdate=new ArrayList<>(fromModules.size());
  final String mavenScope=getMavenScope(scope);
  for (  Module from : fromModules) {
    if (!myProjectsManager.isMavenizedModule(from))     return null;
    MavenProject fromProject=myProjectsManager.findProject(from);
    if (fromProject == null)     return null;
    final MavenDomProjectModel model=MavenDomUtil.getMavenDomProjectModel(myProject,fromProject.getFile());
    if (model == null)     return null;
    String scopeToSet=null;
    String version=null;
    if (mavenId.getGroupId() != null && mavenId.getArtifactId() != null) {
      MavenDomDependency managedDependency=MavenDependencyCompletionUtil.findManagedDependency(model,myProject,mavenId.getGroupId(),mavenId.getArtifactId());
      if (managedDependency != null) {
        String managedScope=StringUtil.nullize(managedDependency.getScope().getStringValue(),true);
        scopeToSet=(managedScope == null && MavenConstants.SCOPE_COMPILE.equals(mavenScope)) || StringUtil.equals(managedScope,mavenScope) ? null : mavenScope;
      }
      if (managedDependency == null || StringUtil.isEmpty(managedDependency.getVersion().getStringValue())) {
        version=selectVersion(mavenId,minVersion,maxVersion);
      }
    }
    models.add(Trinity.create(model,new MavenId(mavenId.getGroupId(),mavenId.getArtifactId(),version),scopeToSet));
    files.add(DomUtil.getFile(model));
    projectToUpdate.add(fromProject);
  }
  new WriteCommandAction(myProject,"Add Maven Dependency",PsiUtilCore.toPsiFileArray(files)){
    @Override protected void run(    @NotNull Result result) throws Throwable {
      for (      Trinity<MavenDomProjectModel,MavenId,String> trinity : models) {
        final MavenDomProjectModel model=trinity.first;
        MavenDomDependency dependency=MavenDomUtil.createDomDependency(model,null,trinity.second);
        String mavenScope=trinity.third;
        if (mavenScope != null) {
          dependency.getScope().setStringValue(mavenScope);
        }
        Document document=PsiDocumentManager.getInstance(myProject).getDocument(DomUtil.getFile(model));
        if (document != null) {
          FileDocumentManager.getInstance().saveDocument(document);
        }
      }
    }
  }
.execute();
  return myProjectsManager.forceUpdateProjects(projectToUpdate);
}
