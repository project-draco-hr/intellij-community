{
  PermanentLinearGraphBuilder<CommitId> permanentLinearGraphBuilder=PermanentLinearGraphBuilder.newInstance(graphCommits);
  final Map<Integer,CommitId> notLoadedCommits=ContainerUtil.newHashMap();
  PermanentLinearGraphImpl linearGraph=permanentLinearGraphBuilder.build(new NotNullFunction<CommitId,Integer>(){
    @NotNull @Override public Integer fun(    CommitId dom){
      int nodeId=-(notLoadedCommits.size() + 2);
      notLoadedCommits.put(nodeId,dom);
      return nodeId;
    }
  }
);
  final PermanentCommitsInfoImpl<CommitId> commitIdPermanentCommitsInfo=PermanentCommitsInfoImpl.newInstance(graphCommits,notLoadedCommits);
  GraphLayoutImpl permanentGraphLayout=GraphLayoutBuilder.build(linearGraph,new Comparator<Integer>(){
    @Override public int compare(    @NotNull Integer nodeIndex1,    @NotNull Integer nodeIndex2){
      CommitId commitId1=commitIdPermanentCommitsInfo.getCommitId(nodeIndex1);
      CommitId commitId2=commitIdPermanentCommitsInfo.getCommitId(nodeIndex2);
      return graphColorManager.compareHeads(commitId2,commitId1);
    }
  }
);
  return new PermanentGraphImpl<CommitId>(linearGraph,permanentGraphLayout,commitIdPermanentCommitsInfo,graphColorManager,branchesCommitId);
}
