{
  CascadeController baseController;
  if (sortType == SortType.Normal) {
    baseController=new BaseController(this);
  }
 else   if (sortType == SortType.LinearBek) {
    baseController=new LinearBekController(new BekBaseController(this,myBekIntMap.get()),this);
  }
 else {
    baseController=new BekBaseController(this,myBekIntMap.get());
  }
  CascadeController controller;
  if (matchingCommits != null) {
    controller=new FilteredController(baseController,this,myPermanentCommitsInfo.convertToNodeIds(matchingCommits));
    if (visibleHeads != null) {
      controller=new BranchFilterController(controller,this,myPermanentCommitsInfo.convertToNodeIds(visibleHeads,true));
    }
  }
 else   if (sortType == SortType.LinearBek) {
    if (visibleHeads != null) {
      controller=new BranchFilterController(baseController,this,myPermanentCommitsInfo.convertToNodeIds(visibleHeads,true));
    }
 else {
      controller=baseController;
    }
  }
 else {
    Set<Integer> idOfVisibleBranches=null;
    if (visibleHeads != null) {
      idOfVisibleBranches=myPermanentCommitsInfo.convertToNodeIds(visibleHeads,true);
    }
    controller=new CollapsedController(baseController,this,idOfVisibleBranches);
  }
  return new VisibleGraphImpl<>(controller,this,myGraphColorManager);
}
