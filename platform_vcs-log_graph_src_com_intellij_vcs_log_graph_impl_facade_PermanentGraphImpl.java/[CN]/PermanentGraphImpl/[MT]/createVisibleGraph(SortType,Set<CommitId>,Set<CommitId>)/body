{
  CascadeLinearGraphController baseController;
  if (sortType == SortType.Normal) {
    baseController=new BaseLinearGraphController(this);
  }
 else   if (sortType == SortType.LinearBek) {
    baseController=new LinearBekController(new BekBaseLinearGraphController(this,myBekIntMap),this);
  }
 else {
    baseController=new BekBaseLinearGraphController(this,myBekIntMap);
  }
  LinearGraphController controller;
  if (matchedCommits != null) {
    controller=new FilterLinearGraphController(baseController,this,myPermanentCommitsInfo.convertToNodeIds(matchedCommits));
  }
 else   if (sortType == SortType.LinearBek) {
    if (headsOfVisibleBranches != null) {
      controller=new BranchFilterGraphController(baseController,this,myPermanentCommitsInfo.convertToNodeIds(headsOfVisibleBranches));
    }
 else {
      controller=baseController;
    }
  }
 else {
    Set<Integer> idOfVisibleBranches=null;
    if (headsOfVisibleBranches != null) {
      idOfVisibleBranches=myPermanentCommitsInfo.convertToNodeIds(headsOfVisibleBranches);
    }
    controller=new CollapsedLinearGraphController(baseController,this,idOfVisibleBranches);
  }
  return new VisibleGraphImpl<CommitId>(controller,this);
}
