{
  final PsiClass aClass=method.getContainingClass();
  LOG.assertTrue(aClass != null);
  final String fqn=aClass.getQualifiedName();
  LOG.assertTrue(fqn != null);
  final String parameters=StringUtil.join(ContainerUtil.map(method.getParameterList().getParameters(),new Function<PsiParameter,String>(){
    @Override public String fun(    PsiParameter parameter){
      return parameter.getName();
    }
  }
),", ");
  final String expressionText=fqn + "." + method.getName()+ "("+ parameters+ ")";
  final PsiExpression psiExpression=JavaPsiFacade.getElementFactory(method.getProject()).createExpressionFromText(expressionText,null);
  LOG.assertTrue(psiExpression instanceof PsiMethodCallExpression);
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)psiExpression;
  template.convertToStream(methodCallExpression,method,false);
  myBeforeActionPanel.reset("void example() {\n  <spot>" + methodCallExpression.getText() + "</spot>;\n}",StdFileTypes.JAVA);
  myAfterActionPanel.reset("void example() {\n  <spot>" + template.convertToStream(methodCallExpression,method,true).getText() + "</spot>\n}",StdFileTypes.JAVA);
}
