{
  super(parent,canBeParent);
  myProject=project;
  final DefaultComboBoxModel model=new DefaultComboBoxModel();
  myPatternsCombo.setModel(model);
  for (  String methodName : StreamApiConstants.STREAM_STREAM_API_METHODS.getValue()) {
    model.addElement(methodName);
  }
  model.addElement(StreamApiConstants.FAKE_FIND_MATCHED);
  myPatternsCombo.setRenderer(new ColoredListCellRenderer<String>(){
    @Override protected void customizeCellRenderer(    JList list,    String methodName,    int index,    boolean selected,    boolean hasFocus){
      append("stream.");
      if (StreamApiConstants.STREAM_STREAM_API_METHODS.getValue().contains(methodName)) {
        append(methodName + "()",SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
      }
 else {
        LOG.assertTrue(StreamApiConstants.FAKE_FIND_MATCHED.equals(methodName));
        append(String.format(StreamApiConstants.FAKE_FIND_MATCHED_PATTERN,"condition"),SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
        append(" or ");
        append(String.format(StreamApiConstants.FAKE_FIND_MATCHED_WITH_DEFAULT_PATTERN,"condition","defaultValue"),SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
      }
    }
  }
);
  myMethodNameCombo.setModel(new DefaultComboBoxModel());
  myClassNameEditor.addDocumentListener(new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent e){
      final String classFqn=e.getDocument().getText();
      final PsiClass aClass=JavaPsiFacade.getInstance(project).findClass(classFqn,GlobalSearchScope.allScope(project));
      final DefaultComboBoxModel comboBoxModel=(DefaultComboBoxModel)myMethodNameCombo.getModel();
      comboBoxModel.removeAllElements();
      if (aClass == null) {
        myMethodNameCombo.setEnabled(false);
      }
 else {
        for (        String name : ContainerUtil.newTreeSet(ContainerUtil.mapNotNull(aClass.getMethods(),new Function<PsiMethod,String>(){
          @Override public String fun(          PsiMethod method){
            if (method.isConstructor() || !method.hasModifierProperty(PsiModifier.STATIC) || method.hasModifierProperty(PsiModifier.PRIVATE)) {
              return null;
            }
            return method.getName();
          }
        }
))) {
          comboBoxModel.addElement(name);
        }
        myMethodNameCombo.setEnabled(true);
      }
    }
  }
);
  init();
}
