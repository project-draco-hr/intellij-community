{
  return new BaseInspectionVisitor(){
    @Override public void visitMethodCallExpression(    @NotNull GrMethodCallExpression methodCallExpression){
      super.visitMethodCallExpression(methodCallExpression);
      visitMethodCall(methodCallExpression);
    }
    @Override public void visitApplicationStatement(    @NotNull GrApplicationStatement applicationStatement){
      super.visitApplicationStatement(applicationStatement);
      visitMethodCall(applicationStatement);
    }
    private void visitMethodCall(    GrMethodCall methodCall){
      if (JavaStylePropertiesUtil.isPropertyAccessor(methodCall)) {
        final String message=GroovyInspectionBundle.message("java.style.property.access");
        final GrExpression expression=methodCall.getInvokedExpression();
        if (expression instanceof GrReferenceExpression) {
          PsiElement referenceNameElement=((GrReferenceExpression)expression).getReferenceNameElement();
          registerError(referenceNameElement,message,myFixes,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
        }
      }
    }
  }
;
}
