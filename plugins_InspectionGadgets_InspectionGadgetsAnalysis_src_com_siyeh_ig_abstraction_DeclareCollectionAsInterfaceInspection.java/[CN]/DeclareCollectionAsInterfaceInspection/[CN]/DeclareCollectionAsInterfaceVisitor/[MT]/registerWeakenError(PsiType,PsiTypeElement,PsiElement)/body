{
  if (typeElement == null) {
    return;
  }
  final PsiJavaCodeReferenceElement reference=typeElement.getInnermostComponentReferenceElement();
  if (reference == null) {
    return;
  }
  final PsiElement nameElement=reference.getReferenceNameElement();
  if (nameElement == null) {
    return;
  }
  final Collection<PsiClass> weaklings=WeakestTypeFinder.calculateWeakestClassesNecessary(variable,false,true);
  if (weaklings.isEmpty()) {
    return;
  }
  final PsiClassType javaLangObject=PsiType.getJavaLangObject(nameElement.getManager(),nameElement.getResolveScope());
  final List<PsiClass> weaklingList=new ArrayList<PsiClass>(weaklings);
  final PsiClass objectClass=javaLangObject.resolve();
  weaklingList.remove(objectClass);
  if (weaklingList.isEmpty()) {
    final String typeText=type.getCanonicalText();
    final String interfaceText=CollectionUtils.getInterfaceForClass(typeText);
    if (interfaceText == null) {
      return;
    }
    registerError(nameElement,interfaceText);
  }
 else {
    final PsiClass weakling=weaklingList.get(0);
    final String qualifiedName=weakling.getQualifiedName();
    registerError(nameElement,qualifiedName);
  }
}
