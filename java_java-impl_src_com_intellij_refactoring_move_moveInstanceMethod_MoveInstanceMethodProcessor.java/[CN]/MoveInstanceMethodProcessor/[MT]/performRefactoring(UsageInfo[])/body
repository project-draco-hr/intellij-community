{
  if (!CommonRefactoringUtil.checkReadOnlyStatus(myProject,myTargetClass))   return;
  PsiMethod patternMethod=createMethodToAdd();
  final List<PsiReference> docRefs=new ArrayList<PsiReference>();
  for (  UsageInfo usage : usages) {
    if (usage instanceof InheritorUsageInfo) {
      final PsiClass inheritor=((InheritorUsageInfo)usage).getInheritor();
      addMethodToClass(inheritor,patternMethod,true);
    }
 else     if (usage instanceof MethodCallUsageInfo && !((MethodCallUsageInfo)usage).isInternal()) {
      final PsiElement expression=((MethodCallUsageInfo)usage).getMethodCallExpression();
      if (expression instanceof PsiMethodCallExpression) {
        correctMethodCall((PsiMethodCallExpression)expression,false);
      }
 else       if (expression instanceof PsiMethodReferenceExpression) {
        PsiMethodReferenceExpression methodReferenceExpression=(PsiMethodReferenceExpression)expression;
        PsiExpression qualifierExpression=methodReferenceExpression.getQualifierExpression();
        String exprText;
        if (myTargetVariable instanceof PsiParameter || qualifierExpression instanceof PsiReferenceExpression && ((PsiReferenceExpression)qualifierExpression).resolve() == myMethod.getContainingClass()) {
          exprText=myTargetVariable.getType().getCanonicalText();
        }
 else         if (qualifierExpression instanceof PsiReferenceExpression) {
          exprText=qualifierExpression.getText() + "." + myTargetVariable.getName();
        }
 else {
          exprText=myTargetVariable.getName();
        }
        PsiExpression newQualifier=JavaPsiFacade.getInstance(myProject).getElementFactory().createExpressionFromText(exprText,null);
        ((PsiMethodReferenceExpression)expression).setQualifierExpression((PsiExpression)JavaCodeStyleManager.getInstance(myProject).shortenClassReferences(newQualifier));
      }
    }
 else     if (usage instanceof JavadocUsageInfo) {
      docRefs.add(usage.getElement().getReference());
    }
  }
  try {
    if (myTargetClass.isInterface()) {
      final PsiModifierList modifierList=patternMethod.getModifierList();
      if (!PsiUtil.isLanguageLevel8OrHigher(myTargetClass)) {
        patternMethod.getBody().delete();
        modifierList.setModifierProperty(PsiModifier.DEFAULT,false);
      }
 else {
        modifierList.setModifierProperty(PsiModifier.DEFAULT,true);
      }
      RefactoringUtil.makeMethodAbstract(myTargetClass,patternMethod);
    }
    final PsiMethod method=addMethodToClass(myTargetClass,patternMethod,false);
    myMethod.delete();
    for (    PsiReference reference : docRefs) {
      reference.bindToElement(method);
    }
    VisibilityUtil.fixVisibility(UsageViewUtil.toElements(usages),method,myNewVisibility);
    if (myOpenInEditor) {
      EditorHelper.openInEditor(method);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
