{
  if (!(element instanceof CommandLinePart)) {
    return null;
  }
  final CommandLinePart commandLinePart=(CommandLinePart)element;
  final Command realCommand=commandLinePart.findRealCommand();
  if (realCommand == null) {
    return null;
  }
  if (element instanceof CommandLineFile) {
    return realCommand.getHelp(false);
  }
  final CommandLineElement commandLineElement=PyUtil.as(element,CommandLineElement.class);
  if (commandLineElement == null) {
    return null;
  }
  final Ref<String> resultText=new Ref<String>();
  commandLineElement.accept(new CommandLineVisitor(){
    @Override public void visitArgument(    @NotNull CommandLineArgument o){
      super.visitArgument(o);
      final CommandLineFile commandLineFile=commandLinePart.getCommandLineFile();
      if (commandLineFile == null) {
        return;
      }
      final ValidationResult validationResult=commandLineFile.getValidationResult();
      if (validationResult == null) {
        return;
      }
      final Option option=validationResult.getOptionForOptionArgument(o);
      if (option != null) {
        resultText.set(option.getHelp());
        return;
      }
      final Argument argument=validationResult.getArgument(o);
      if (argument != null) {
        resultText.set(argument.getHelpText());
      }
    }
    @Override public void visitCommand(    @NotNull CommandLineCommand o){
      super.visitCommand(o);
      resultText.set(realCommand.getHelp(false));
    }
    @Override public void visitOption(    @NotNull CommandLineOption o){
      super.visitOption(o);
      for (      Option option : realCommand.getOptions()) {
        if (option.getAllNames().contains(o.getOptionName())) {
          resultText.set(option.getHelp());
          return;
        }
      }
    }
  }
);
  final String help=resultText.get();
  return (StringUtil.isEmptyOrSpaces(help) ? null : help);
}
