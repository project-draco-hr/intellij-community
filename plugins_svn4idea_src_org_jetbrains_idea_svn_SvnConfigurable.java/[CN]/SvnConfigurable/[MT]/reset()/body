{
  SvnConfiguration configuration=SvnConfiguration.getInstance(myProject);
  String path=configuration.getConfigurationDirectory();
  if (configuration.isUseDefaultConfiguation() || path == null) {
    path=IdeaSubversionConfigurationDirectory.getPath();
  }
  myConfigurationDirectoryText.setText(path);
  myUseDefaultCheckBox.setSelected(configuration.isUseDefaultConfiguation());
  myUseCommonProxy.setSelected(configuration.isIsUseDefaultProxy());
  myCheckNestedInQuickMerge.setSelected(configuration.isCheckNestedForQuickMerge());
  boolean enabled=!myUseDefaultCheckBox.isSelected();
  myConfigurationDirectoryText.setEnabled(enabled);
  myConfigurationDirectoryText.setEditable(enabled);
  myConfigurationDirectoryLabel.setEnabled(enabled);
  myLockOnDemand.setSelected(configuration.isUpdateLockOnDemand());
  myIgnoreWhitespaceDifferenciesInCheckBox.setSelected(configuration.isIgnoreSpacesInAnnotate());
  myShowMergeSourceInAnnotate.setSelected(configuration.isShowMergeSourcesInAnnotate());
  final int annotateRevisions=configuration.getMaxAnnotateRevisions();
  if (annotateRevisions == -1) {
    myMaximumNumberOfRevisionsCheckBox.setSelected(false);
    myNumRevsInAnnotations.setValue(SvnConfiguration.ourMaxAnnotateRevisionsDefault);
  }
 else {
    myMaximumNumberOfRevisionsCheckBox.setSelected(true);
    myNumRevsInAnnotations.setValue(annotateRevisions);
  }
  myNumRevsInAnnotations.setEnabled(myMaximumNumberOfRevisionsCheckBox.isSelected());
  mySSHConnectionTimeout.setValue(Long.valueOf(configuration.getSshConnectionTimeout() / 1000));
  mySSHReadTimeout.setValue(Long.valueOf(configuration.getSshReadTimeout() / 1000));
  myHttpTimeout.setValue(Long.valueOf(configuration.getHttpTimeout() / 1000));
  myWithCommandLineClient.setSelected(configuration.isCommandLine());
  final SvnApplicationSettings applicationSettings17=SvnApplicationSettings.getInstance();
  myCommandLineClient.setText(applicationSettings17.getCommandLinePath());
  if (SvnConfiguration.SSLProtocols.sslv3.equals(configuration.getSslProtocols())) {
    mySSLv3RadioButton.setSelected(true);
  }
 else   if (SvnConfiguration.SSLProtocols.tlsv1.equals(configuration.getSslProtocols())) {
    myTLSv1RadioButton.setSelected(true);
  }
 else {
    myAllRadioButton.setSelected(true);
  }
}
