{
  SvnConfiguration configuration=SvnConfiguration.getInstance(myProject);
  configuration.setConfigurationDirParameters(myUseDefaultCheckBox.isSelected(),myConfigurationDirectoryText.getText());
  configuration.setIsUseDefaultProxy(myUseCommonProxy.isSelected());
  final SvnVcs vcs17=SvnVcs.getInstance(myProject);
  configuration.setCheckNestedForQuickMerge(myCheckNestedInQuickMerge.isSelected());
  configuration.setUpdateLockOnDemand(myLockOnDemand.isSelected());
  configuration.setIgnoreSpacesInAnnotate(myIgnoreWhitespaceDifferenciesInCheckBox.isSelected());
  configuration.setShowMergeSourcesInAnnotate(myShowMergeSourceInAnnotate.isSelected());
  if (!myMaximumNumberOfRevisionsCheckBox.isSelected()) {
    configuration.setMaxAnnotateRevisions(-1);
  }
 else {
    configuration.setMaxAnnotateRevisions(((SpinnerNumberModel)myNumRevsInAnnotations.getModel()).getNumber().intValue());
  }
  configuration.setSshConnectionTimeout(((SpinnerNumberModel)mySSHConnectionTimeout.getModel()).getNumber().longValue() * 1000);
  configuration.setSshReadTimeout(((SpinnerNumberModel)mySSHReadTimeout.getModel()).getNumber().longValue() * 1000);
  final SvnApplicationSettings applicationSettings17=SvnApplicationSettings.getInstance();
  boolean reloadWorkingCopies=!acceleration().equals(configuration.getUseAcceleration()) || !StringUtil.equals(applicationSettings17.getCommandLinePath(),myCommandLineClient.getText().trim());
  configuration.setUseAcceleration(acceleration());
  configuration.setRunUnderTerminal(myRunUnderTerminal.isSelected());
  configuration.setSslProtocols(getSelectedSSL());
  SvnVcs.getInstance(myProject).getSvnKitManager().refreshSSLProperty();
  applicationSettings17.setCommandLinePath(myCommandLineClient.getText().trim());
  boolean isClientValid=vcs17.checkCommandLineVersion();
  if (isClientValid && reloadWorkingCopies) {
    vcs17.invokeRefreshSvnRoots();
    VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  }
  configuration.setHttpTimeout(((SpinnerNumberModel)myHttpTimeout.getModel()).getNumber().longValue() * 1000);
}
