{
  if (!superClass.hasTypeParameters() && superClass.getContainingClass() == null) {
    return InheritanceUtil.isInheritorOrSelf(derivedClass,superClass,true) ? PsiSubstitutor.EMPTY : null;
  }
  final PsiManager manager=superClass.getManager();
  if (PsiUtil.isRawSubstitutor(derivedClass,derivedSubstitutor)) {
    return InheritanceUtil.isInheritorOrSelf(derivedClass,superClass,true) ? JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createRawSubstitutor(superClass) : null;
  }
  if (CommonClassNames.JAVA_LANG_OBJECT_SHORT.equals(superClass.getName()) && manager.areElementsEquivalent(superClass,JavaPsiFacade.getInstance(manager.getProject()).findClass(CommonClassNames.JAVA_LANG_OBJECT,superClass.getResolveScope()))) {
    return PsiSubstitutor.EMPTY;
  }
  PsiSubstitutor substitutor;
  if (derivedClass instanceof PsiAnonymousClass) {
    final PsiClassType baseType=((PsiAnonymousClass)derivedClass).getBaseClassType();
    final JavaResolveResult result=baseType.resolveGenerics();
    if (result.getElement() == null)     return PsiSubstitutor.UNKNOWN;
    substitutor=getSuperClassSubstitutorInner(superClass,(PsiClass)result.getElement(),derivedSubstitutor.putAll(result.getSubstitutor()),visited,manager);
  }
 else {
    substitutor=getSuperClassSubstitutorInner(superClass,derivedClass,derivedSubstitutor,visited,manager);
  }
  return substitutor;
}
