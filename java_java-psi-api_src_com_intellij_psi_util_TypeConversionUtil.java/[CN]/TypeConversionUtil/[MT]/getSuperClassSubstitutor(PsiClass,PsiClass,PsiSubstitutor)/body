{
  Set<PsiClass> visited=new THashSet<PsiClass>();
  PsiSubstitutor substitutor=getMaybeSuperClassSubstitutor(superClass,derivedClass,derivedSubstitutor,visited);
  if (substitutor == null) {
    if (ourReportedSuperClassSubstitutorExceptions.add(derivedClass.getQualifiedName() + "/" + superClass.getQualifiedName())) {
      reportHierarchyInconsistency(superClass,derivedClass,visited);
    }
    return PsiSubstitutor.EMPTY;
  }
  return substitutor;
}
