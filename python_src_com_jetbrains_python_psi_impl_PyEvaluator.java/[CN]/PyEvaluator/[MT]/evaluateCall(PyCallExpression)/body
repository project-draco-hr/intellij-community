{
  final PyExpression[] args=call.getArguments();
  if (call.isCalleeText(PyNames.REPLACE) && args.length == 2) {
    final PyExpression callee=call.getCallee();
    if (!(callee instanceof PyQualifiedExpression))     return null;
    final PyExpression qualifier=((PyQualifiedExpression)callee).getQualifier();
    Object result=evaluate(qualifier);
    if (result instanceof String) {
      Object arg1=evaluate(args[0]);
      Object arg2=evaluate(args[1]);
      if (arg1 instanceof String && arg2 instanceof String) {
        return ((String)result).replace((String)arg1,(String)arg2);
      }
    }
  }
  if (call.isCallee(PythonFQDNNames.DICT_CLASS)) {
    final Collection<PyTupleExpression> tuples=PsiTreeUtil.findChildrenOfType(call,PyTupleExpression.class);
    if (!tuples.isEmpty()) {
      final Map<Object,Object> result=new HashMap<>();
      for (      final PyTupleExpression tuple : tuples) {
        final PsiElement[] tupleElements=tuple.getChildren();
        if (tupleElements.length != 2) {
          return null;
        }
        final PyExpression key=PyUtil.as(tupleElements[0],PyExpression.class);
        final PyExpression value=PyUtil.as(tupleElements[1],PyExpression.class);
        if ((key != null)) {
          addRecordFromDict(result,key,value);
        }
      }
      return result;
    }
  }
  return null;
}
