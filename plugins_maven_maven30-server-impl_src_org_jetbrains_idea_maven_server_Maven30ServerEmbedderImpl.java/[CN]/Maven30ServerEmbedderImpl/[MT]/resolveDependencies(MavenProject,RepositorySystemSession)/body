{
  DependencyResolutionResult resolutionResult;
  try {
    ProjectDependenciesResolver dependencyResolver=getComponent(ProjectDependenciesResolver.class);
    DefaultDependencyResolutionRequest resolution=new DefaultDependencyResolutionRequest(project,session);
    resolutionResult=dependencyResolver.resolve(resolution);
  }
 catch (  DependencyResolutionException e) {
    resolutionResult=e.getResult();
  }
  Set<Artifact> artifacts=new LinkedHashSet<Artifact>();
  if (resolutionResult.getDependencyGraph() != null) {
    RepositoryUtils.toArtifacts(artifacts,resolutionResult.getDependencyGraph().getChildren(),Collections.singletonList(project.getArtifact().getId()),null);
    LocalRepositoryManager lrm=session.getLocalRepositoryManager();
    for (    Artifact artifact : artifacts) {
      if (!artifact.isResolved()) {
        String path=lrm.getPathForLocalArtifact(RepositoryUtils.toArtifact(artifact));
        artifact.setFile(new File(lrm.getRepository().getBasedir(),path));
      }
    }
  }
  project.setResolvedArtifacts(artifacts);
  project.setArtifacts(artifacts);
  return resolutionResult;
}
