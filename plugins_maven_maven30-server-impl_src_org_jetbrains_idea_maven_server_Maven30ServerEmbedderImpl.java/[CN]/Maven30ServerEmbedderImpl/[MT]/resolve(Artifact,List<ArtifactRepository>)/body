{
  if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) {
    MavenExecutionRequest request=new DefaultMavenExecutionRequest();
    request.setRemoteRepositories(repos);
    try {
      getComponent(MavenExecutionRequestPopulator.class).populateFromSettings(request,myMavenSettings);
      getComponent(MavenExecutionRequestPopulator.class).populateDefaults(request);
    }
 catch (    MavenExecutionRequestPopulationException e) {
      throw new RuntimeException(e);
    }
    getComponent(ArtifactResolver.class).resolve(artifact,request.getRemoteRepositories(),myLocalRepository);
    return artifact;
  }
 else {
    final MavenExecutionRequest request=createRequest(null,Collections.<String>emptyList(),Collections.<String>emptyList(),Collections.<String>emptyList());
    for (    ArtifactRepository artifactRepository : repos) {
      request.addRemoteRepository(artifactRepository);
    }
    DefaultMaven maven=(DefaultMaven)getComponent(Maven.class);
    RepositorySystemSession repositorySystemSession=maven.newRepositorySession(request);
    final org.sonatype.aether.impl.ArtifactResolver artifactResolver=getComponent(org.sonatype.aether.impl.ArtifactResolver.class);
    final org.sonatype.aether.spi.log.Logger logger=new MyLogger();
    if (artifactResolver instanceof DefaultArtifactResolver) {
      ((DefaultArtifactResolver)artifactResolver).setLogger(logger);
    }
    final org.sonatype.aether.RepositorySystem repositorySystem=getComponent(org.sonatype.aether.RepositorySystem.class);
    if (repositorySystem instanceof DefaultRepositorySystem) {
      ((DefaultRepositorySystem)repositorySystem).setLogger(logger);
    }
    final ArtifactResult artifactResult=repositorySystem.resolveArtifact(repositorySystemSession,new ArtifactRequest(RepositoryUtils.toArtifact(artifact),RepositoryUtils.toRepos(request.getRemoteRepositories()),null));
    return RepositoryUtils.toArtifact(artifactResult.getArtifact());
  }
}
