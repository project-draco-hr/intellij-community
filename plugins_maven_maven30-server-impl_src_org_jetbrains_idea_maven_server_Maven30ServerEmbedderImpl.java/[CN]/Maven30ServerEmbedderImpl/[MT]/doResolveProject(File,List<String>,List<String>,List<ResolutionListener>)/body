{
  final MavenExecutionRequest request=createRequest(file,activeProfiles,inactiveProfiles,Collections.<String>emptyList());
  request.setUpdateSnapshots(myAlwaysUpdateSnapshots);
  final AtomicReference<MavenExecutionResult> ref=new AtomicReference<MavenExecutionResult>();
  executeWithMavenSession(request,new Runnable(){
    @Override public void run(){
      try {
        ProjectBuilder builder=getComponent(ProjectBuilder.class);
        CustomMaven3ModelInterpolator2 modelInterpolator=(CustomMaven3ModelInterpolator2)getComponent(ModelInterpolator.class);
        String savedLocalRepository=modelInterpolator.getLocalRepository();
        modelInterpolator.setLocalRepository(request.getLocalRepositoryPath().getAbsolutePath());
        List<ProjectBuildingResult> results;
        try {
          results=builder.build(Collections.singletonList(new File(file.getPath())),false,request.getProjectBuildingRequest());
        }
  finally {
          modelInterpolator.setLocalRepository(savedLocalRepository);
        }
        ProjectBuildingResult buildingResult=results.get(0);
        MavenProject project=buildingResult.getProject();
        RepositorySystemSession repositorySession=getComponent(LegacySupport.class).getRepositorySession();
        if (repositorySession instanceof DefaultRepositorySystemSession) {
          ((DefaultRepositorySystemSession)repositorySession).setTransferListener(new Maven30TransferListenerAdapter(myCurrentIndicator));
          if (myWorkspaceMap != null) {
            ((DefaultRepositorySystemSession)repositorySession).setWorkspaceReader(new Maven30WorkspaceReader(myWorkspaceMap));
          }
        }
        List<Exception> exceptions=new ArrayList<Exception>();
        loadExtensions(project,exceptions);
        project.setDependencyArtifacts(project.createArtifacts(getComponent(ArtifactFactory.class),null,null));
        if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) {
          ArtifactResolutionRequest resolutionRequest=new ArtifactResolutionRequest();
          resolutionRequest.setArtifactDependencies(project.getDependencyArtifacts());
          resolutionRequest.setArtifact(project.getArtifact());
          resolutionRequest.setManagedVersionMap(project.getManagedVersionMap());
          resolutionRequest.setLocalRepository(myLocalRepository);
          resolutionRequest.setRemoteRepositories(project.getRemoteArtifactRepositories());
          resolutionRequest.setListeners(listeners);
          resolutionRequest.setResolveRoot(false);
          resolutionRequest.setResolveTransitively(true);
          ArtifactResolver resolver=getComponent(ArtifactResolver.class);
          ArtifactResolutionResult result=resolver.resolve(resolutionRequest);
          project.setArtifacts(result.getArtifacts());
          ref.set(new MavenExecutionResult(project,exceptions));
        }
 else {
          final DependencyResolutionResult dependencyResolutionResult=resolveDependencies(project,repositorySession);
          final List<Dependency> dependencies=dependencyResolutionResult.getDependencies();
          Set<Artifact> artifacts=new LinkedHashSet<Artifact>(dependencies.size());
          for (          Dependency dependency : dependencies) {
            final Artifact artifact=RepositoryUtils.toArtifact(dependency.getArtifact());
            artifact.setScope(dependency.getScope());
            artifact.setOptional(dependency.isOptional());
            artifacts.add(artifact);
            resolveAsModule(artifact);
          }
          project.setArtifacts(artifacts);
          ref.set(new MavenExecutionResult(project,dependencyResolutionResult,exceptions));
        }
      }
 catch (      Exception e) {
        ref.set(handleException(e));
      }
    }
  }
);
  return ref.get();
}
