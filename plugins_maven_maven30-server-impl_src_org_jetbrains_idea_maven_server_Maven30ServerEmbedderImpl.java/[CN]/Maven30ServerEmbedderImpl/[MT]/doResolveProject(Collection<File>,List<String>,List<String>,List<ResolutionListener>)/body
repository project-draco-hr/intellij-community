{
  final File file=files.size() == 1 ? files.iterator().next() : null;
  final MavenExecutionRequest request=createRequest(file,activeProfiles,inactiveProfiles,Collections.<String>emptyList());
  request.setUpdateSnapshots(myAlwaysUpdateSnapshots);
  final Collection<MavenExecutionResult> executionResults=ContainerUtil.newArrayList();
  executeWithMavenSession(request,new Runnable(){
    @Override public void run(){
      try {
        List<ProjectBuildingResult> buildingResults=getProjectBuildingResults(request,files);
        for (        ProjectBuildingResult buildingResult : buildingResults) {
          MavenProject project=buildingResult.getProject();
          if (project == null) {
            List<Exception> exceptions=new ArrayList<Exception>();
            for (            ModelProblem problem : buildingResult.getProblems()) {
              exceptions.add(problem.getException());
            }
            MavenExecutionResult mavenExecutionResult=new MavenExecutionResult(buildingResult.getPomFile(),exceptions);
            executionResults.add(mavenExecutionResult);
            continue;
          }
          RepositorySystemSession repositorySession=getComponent(LegacySupport.class).getRepositorySession();
          if (repositorySession instanceof DefaultRepositorySystemSession) {
            ((DefaultRepositorySystemSession)repositorySession).setTransferListener(new Maven30TransferListenerAdapter(myCurrentIndicator));
            if (myWorkspaceMap != null) {
              ((DefaultRepositorySystemSession)repositorySession).setWorkspaceReader(new Maven30WorkspaceReader(myWorkspaceMap));
            }
          }
          List<Exception> exceptions=new ArrayList<Exception>();
          loadExtensions(project,exceptions);
          project.setDependencyArtifacts(project.createArtifacts(getComponent(ArtifactFactory.class),null,null));
          if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) {
            addMvn2CompatResults(project,exceptions,listeners,myLocalRepository,executionResults);
          }
 else {
            final DependencyResolutionResult dependencyResolutionResult=resolveDependencies(project,repositorySession);
            final List<Dependency> dependencies=dependencyResolutionResult.getDependencies();
            Set<Artifact> artifacts=new LinkedHashSet<Artifact>(dependencies.size());
            for (            Dependency dependency : dependencies) {
              final Artifact artifact=RepositoryUtils.toArtifact(dependency.getArtifact());
              artifact.setScope(dependency.getScope());
              artifact.setOptional(dependency.isOptional());
              artifacts.add(artifact);
              resolveAsModule(artifact);
            }
            project.setArtifacts(artifacts);
            executionResults.add(new MavenExecutionResult(project,dependencyResolutionResult,exceptions));
          }
        }
      }
 catch (      Exception e) {
        executionResults.add(handleException(e));
      }
    }
  }
);
  return executionResults;
}
