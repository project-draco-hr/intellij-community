{
  myTypeManager=typeManager;
  myProject=project;
  myInternalTemplatesManager=loader.getInternalTemplatesManager();
  myDefaultTemplatesManager=loader.getDefaultTemplatesManager();
  myPatternsManager=loader.getPatternsManager();
  myCodeTemplatesManager=loader.getCodeTemplatesManager();
  myJ2eeTemplatesManager=loader.getJ2eeTemplatesManager();
  myAllManagers=new FTManager[]{myInternalTemplatesManager,myDefaultTemplatesManager,myPatternsManager,myCodeTemplatesManager,myJ2eeTemplatesManager};
  myDefaultTemplateDescription=loader.getDefaultTemplateDescription();
  myDefaultIncludeDescription=loader.getDefaultIncludeDescription();
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    for (    String tname : Arrays.asList("Class","AnnotationType","Enum","Interface")) {
      for (      FileTemplate template : myInternalTemplatesManager.getAllTemplates(true)) {
        if (tname.equals(template.getName())) {
          myInternalTemplatesManager.removeTemplate(((FileTemplateBase)template).getQualifiedName());
          break;
        }
      }
      final FileTemplateBase template=myInternalTemplatesManager.addTemplate(tname,"java");
      template.setText(normalizeText(getTestClassTemplateText(tname)));
    }
  }
  myProjectScheme=project.isDefault() ? null : new FileTemplatesScheme("Project"){
    @NotNull @Override public String getTemplatesDir(){
      return new File(project.getBasePath(),Project.DIRECTORY_STORE_FOLDER + "/" + TEMPLATES_DIR).getPath();
    }
  }
;
}
