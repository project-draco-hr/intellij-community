{
  final Collection<CompilerOutputBaseIndex> indexesToReindex=new ArrayList<CompilerOutputBaseIndex>();
  for (  final Class<? extends CompilerOutputBaseIndex> indexClass : indexes) {
    final String canonicalName=indexClass.getCanonicalName();
    if (!myIndexTypeQNameToIndex.containsKey(canonicalName)) {
      final CompilerOutputBaseIndex index=Extensions.findExtension(CompilerOutputBaseIndex.EXTENSION_POINT_NAME,myProject,indexClass);
      myIndexTypeQNameToIndex.put(canonicalName,index);
      if (index.initIfNeed()) {
        indexesToReindex.add(index);
      }
    }
  }
  if (!indexesToReindex.isEmpty()) {
    if (myInProgress.compareAndSet(false,true)) {
      ProgressManager.getInstance().run(new Task.Backgroundable(myProject,TITLE){
        @Override public void onCancel(){
          myInProgress.set(false);
        }
        @Override public void onSuccess(){
          myInProgress.set(false);
        }
        @Override public void run(        @NotNull final ProgressIndicator indicator){
          reindex(new FileVisitorService.ProjectClassFiles(CompilerOutputIndexer.this.myProject),indexesToReindex,true,indicator);
        }
      }
);
    }
  }
}
