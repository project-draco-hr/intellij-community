{
  if (myInitialized.compareAndSet(false,true)) {
    initTimestampIndex();
    try {
      myFileEnumerator=new PersistentEnumeratorDelegate<String>(IndexInfrastructure.getStorageFile(CompilerOutputIndexUtil.generateIndexId("compilerOutputIndexFileId.enum",myProject)),new EnumeratorStringDescriptor(),2048);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    CompilerManager.getInstance(myProject).addCompilationStatusListener(new CompilationStatusAdapter(){
      @Override public void fileGenerated(      final String outputRoot,      final String relativePath){
        if (StringUtil.endsWith(relativePath,CompilerOutputFilesUtil.CLASS_FILES_SUFFIX) && !myCurrentEnabledFeatures.isEmpty()) {
          try {
            doIndexing(new File(outputRoot,relativePath),myIndexTypeQNameToIndex.values(),false,null);
          }
 catch (          ProcessCanceledException e0) {
            throw e0;
          }
catch (          RuntimeException e) {
            LOG.error(e);
          }
        }
      }
    }
,myProject);
  }
}
