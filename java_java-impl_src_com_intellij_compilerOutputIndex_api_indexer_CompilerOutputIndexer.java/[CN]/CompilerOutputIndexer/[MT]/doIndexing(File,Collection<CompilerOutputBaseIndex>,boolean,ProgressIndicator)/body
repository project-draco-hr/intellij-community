{
  final String filePath;
  try {
    filePath=file.getCanonicalPath();
  }
 catch (  IOException e) {
    LOG.error(e);
    return;
  }
  final Long timestamp;
  ProgressManager.checkCanceled();
  final long currentTimeStamp=file.lastModified();
  if (force || (timestamp=getTimestamp(filePath)) == null || timestamp != currentTimeStamp) {
    putTimestamp(filePath,currentTimeStamp);
    final ClassNode inputData=new ClassNode(Opcodes.ASM4);
    InputStream is=null;
    try {
      is=new FileInputStream(file);
      final ClassReader reader=new ClassReader(is);
      reader.accept(inputData,ClassReader.EXPAND_FRAMES);
    }
 catch (    IOException e) {
      removeTimestamp(filePath);
      return;
    }
 finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ignored) {
        }
      }
    }
    try {
      if (indicator != null) {
        indicator.setText2(filePath);
      }
      final int id=myFileEnumerator.enumerate(filePath);
      for (      final CompilerOutputBaseIndex index : indexes) {
        index.update(id,inputData);
      }
    }
 catch (    RuntimeException e) {
      LOG.error(String.format("can't index file: %s",file.getAbsolutePath()),e);
    }
catch (    IOException e) {
      LOG.error(String.format("can't index file: %s",file.getAbsolutePath()),e);
    }
  }
}
