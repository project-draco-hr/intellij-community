{
  PsiMethod method=findSetUpMethod(clazz);
  if (method != null)   return method;
  PsiManager manager=clazz.getManager();
  PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  method=createSetUpPatternMethod(factory);
  PsiMethod existingMethod=clazz.findMethodBySignature(method,false);
  if (existingMethod != null) {
    if (AnnotationUtil.isAnnotated(existingMethod,JUnitUtil.BEFORE_ALL_ANNOTATION_NAME,false))     return existingMethod;
    int exit=ApplicationManager.getApplication().isUnitTestMode() ? Messages.OK : Messages.showOkCancelDialog("Method setUp already exist but is not annotated as @BeforeEach. Annotate?",CommonBundle.getWarningTitle(),Messages.getWarningIcon());
    if (exit == Messages.OK) {
      new AddAnnotationFix(JUnitUtil.BEFORE_EACH_ANNOTATION_NAME,existingMethod).invoke(existingMethod.getProject(),null,existingMethod.getContainingFile());
      return existingMethod;
    }
  }
  final PsiMethod testMethod=JUnitUtil.findFirstTestMethod(clazz);
  if (testMethod != null) {
    method=(PsiMethod)clazz.addBefore(method,testMethod);
  }
 else {
    method=(PsiMethod)clazz.add(method);
  }
  JavaCodeStyleManager.getInstance(manager.getProject()).shortenClassReferences(method);
  return method;
}
