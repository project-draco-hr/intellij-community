{
  final List<PyHierarchyNodeDescriptor> descriptors=new ArrayList<PyHierarchyNodeDescriptor>();
  if (descriptor instanceof PyHierarchyNodeDescriptor) {
    final PyHierarchyNodeDescriptor pyDescriptor=(PyHierarchyNodeDescriptor)descriptor;
    final PsiElement element=pyDescriptor.getPsiElement();
    final boolean isCallable=element instanceof PyFunction || element instanceof PyClass || element instanceof PyFile;
    HierarchyNodeDescriptor nodeDescriptor=getBaseDescriptor();
    if (!(element instanceof PyElement) || !isCallable || nodeDescriptor == null) {
      return ArrayUtil.EMPTY_OBJECT_ARRAY;
    }
    final List<PsiElement> callees=new ArrayList<PsiElement>();
    PyCallDataManager[] functionManagers={PyStaticCallDataManager.getInstance(myProject)};
    for (    PyCallDataManager functionManager : functionManagers) {
      callees.addAll(functionManager.getCallees((PyElement)element));
    }
    final Map<PsiElement,PyHierarchyNodeDescriptor> calleeToDescriptorMap=new HashMap<PsiElement,PyHierarchyNodeDescriptor>();
    PsiElement baseClass=element instanceof PyFunction ? ((PyFunction)element).getContainingClass() : null;
    for (    PsiElement callee : callees) {
      if (baseClass != null && !isInScope(baseClass,callee,myScopeType))       continue;
      PyHierarchyNodeDescriptor calleeDescriptor=calleeToDescriptorMap.get(callee);
      if (calleeDescriptor == null) {
        calleeDescriptor=new PyHierarchyNodeDescriptor(descriptor,callee,false);
        calleeToDescriptorMap.put(callee,calleeDescriptor);
        descriptors.add(calleeDescriptor);
      }
    }
  }
  return ArrayUtil.toObjectArray(descriptors);
}
