{
  final PyElement element=((PyCallHierarchyNodeDescriptor)descriptor).getEnclosingElement();
  final boolean isCallable=element instanceof PyFunction || element instanceof PyClass || element instanceof PyFile;
  HierarchyNodeDescriptor nodeDescriptor=getBaseDescriptor();
  if (!isCallable || nodeDescriptor == null) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final List<PsiElement> callees=Lists.newArrayList();
  PyCallDataManager[] functionManagers={PyStaticCallDataManager.getInstance(myProject)};
  for (  PyCallDataManager functionManager : functionManagers) {
    callees.addAll(functionManager.getCallees(element));
  }
  final Map<PsiElement,PyCallHierarchyNodeDescriptor> calleeToDescriptorMap=new HashMap<PsiElement,PyCallHierarchyNodeDescriptor>();
  final List<PyCallHierarchyNodeDescriptor> descriptors=Lists.newArrayList();
  PsiElement baseClass=element instanceof PyFunction ? ((PyFunction)element).getContainingClass() : null;
  for (  PsiElement callee : callees) {
    if (baseClass != null && !isInScope(baseClass,callee,myScopeType))     continue;
    PyCallHierarchyNodeDescriptor calleeDescriptor=calleeToDescriptorMap.get(callee);
    if (calleeDescriptor == null) {
      calleeDescriptor=new PyCallHierarchyNodeDescriptor(myProject,null,callee,false,false);
      calleeToDescriptorMap.put(callee,calleeDescriptor);
      descriptors.add(calleeDescriptor);
    }
  }
  return ArrayUtil.toObjectArray(descriptors);
}
