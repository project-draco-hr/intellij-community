{
  PyLambdaExpression lambdaExpression=PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PyLambdaExpression.class);
  if (lambdaExpression != null) {
    String name="function";
    while (IntroduceValidator.isDefinedInScope(name,lambdaExpression)) {
      name+="1";
    }
    PsiElement parent=lambdaExpression.getParent();
    if (parent instanceof PyAssignmentStatement) {
      name=((PyAssignmentStatement)parent).getLeftHandSideExpression().getText();
    }
    if (name.isEmpty())     return;
    PyExpression body=lambdaExpression.getBody();
    PyFunctionBuilder functionBuilder=new PyFunctionBuilder(name,lambdaExpression);
    for (    PyParameter param : lambdaExpression.getParameterList().getParameters()) {
      functionBuilder.parameter(param.getText());
    }
    functionBuilder.statement("return " + body.getText());
    PyFunction function=functionBuilder.buildFunction(project,LanguageLevel.getDefault());
    final PyStatement statement=PsiTreeUtil.getParentOfType(lambdaExpression,PyStatement.class);
    if (statement != null) {
      final PsiElement statementParent=statement.getParent();
      if (statementParent != null)       function=(PyFunction)statementParent.addBefore(function,statement);
    }
    function=CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(function);
    if (parent instanceof PyAssignmentStatement) {
      parent.delete();
    }
 else {
      PsiFile parentScope=lambdaExpression.getContainingFile();
      final TemplateBuilder builder=TemplateBuilderFactory.getInstance().createTemplateBuilder(parentScope);
      PsiElement functionName=function.getNameIdentifier();
      functionName=CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(functionName);
      lambdaExpression=CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(lambdaExpression);
      ReferenceNameExpression refExpr=new ReferenceNameExpression(name);
      ((TemplateBuilderImpl)builder).replaceElement(lambdaExpression,name,refExpr,true);
      ((TemplateBuilderImpl)builder).replaceElement(functionName,name,name,false);
      int textOffSet=functionName.getTextOffset();
      editor.getCaretModel().moveToOffset(parentScope.getTextRange().getStartOffset());
      Template template=((TemplateBuilderImpl)builder).buildInlineTemplate();
      TemplateManager.getInstance(project).startTemplate(editor,template);
      editor.getCaretModel().moveToOffset(textOffSet);
    }
  }
}
