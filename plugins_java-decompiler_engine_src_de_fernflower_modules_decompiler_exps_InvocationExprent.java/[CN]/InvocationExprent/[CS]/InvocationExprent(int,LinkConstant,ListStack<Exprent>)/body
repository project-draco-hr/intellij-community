{
  name=cn.elementname;
  classname=cn.classname;
switch (opcode) {
case CodeConstants.opc_invokestatic:
    invocationTyp=INVOKE_STATIC;
  break;
case CodeConstants.opc_invokespecial:
invocationTyp=INVOKE_SPECIAL;
break;
case CodeConstants.opc_invokevirtual:
invocationTyp=INVOKE_VIRTUAL;
break;
case CodeConstants.opc_invokeinterface:
invocationTyp=INVOKE_INTERFACE;
break;
case CodeConstants.opc_invokedynamic:
invocationTyp=INVOKE_DYNAMIC;
classname="java/lang/Class";
invoke_dynamic_classsuffix="##Lambda_" + cn.index1 + "_"+ cn.index2;
}
if ("<init>".equals(name)) {
functype=TYP_INIT;
}
 else if ("<clinit>".equals(name)) {
functype=TYP_CLINIT;
}
stringDescriptor=cn.descriptor;
descriptor=MethodDescriptor.parseDescriptor(cn.descriptor);
for (int i=0; i < descriptor.params.length; i++) {
lstParameters.add(0,stack.pop());
}
if (opcode == CodeConstants.opc_invokestatic || opcode == CodeConstants.opc_invokedynamic) {
isStatic=true;
}
 else {
instance=stack.pop();
}
}
