{
  if (!(refEntity instanceof RefClass)) {
    return null;
  }
  final RefClass refClass=(RefClass)refEntity;
  if (refClass.isAnonymous() || refClass.isLocalClass() || refClass.isSyntheticJSP()) {
    return null;
  }
  final Set<RefClass> dependencies=DependencyUtils.calculateTransitiveDependenciesForClass(refClass);
  final Set<RefClass> dependents=DependencyUtils.calculateTransitiveDependentsForClass(refClass);
  final Set<RefClass> mutualDependents=new HashSet<>(dependencies);
  mutualDependents.retainAll(dependents);
  final int numMutualDependents=mutualDependents.size();
  if (numMutualDependents == 0) {
    return null;
  }
  final String errorString;
  if (numMutualDependents == 1) {
    final RefClass[] classes=mutualDependents.toArray(new RefClass[1]);
    errorString=InspectionGadgetsBundle.message("cyclic.class.dependency.1.problem.descriptor",refEntity.getName(),classes[0].getExternalName());
  }
 else   if (numMutualDependents == 2) {
    final RefClass[] classes=mutualDependents.toArray(new RefClass[2]);
    Arrays.sort(classes,RefEntityAlphabeticalComparator.getInstance());
    errorString=InspectionGadgetsBundle.message("cyclic.class.dependency.2.problem.descriptor",refEntity.getName(),classes[0].getExternalName(),classes[1].getExternalName());
  }
 else {
    errorString=InspectionGadgetsBundle.message("cyclic.class.dependency.problem.descriptor",refEntity.getName(),Integer.valueOf(numMutualDependents));
  }
  final PsiClass aClass=refClass.getElement();
  if (aClass == null) {
    return null;
  }
  final PsiElement anchor=aClass.getNameIdentifier();
  if (anchor == null)   return null;
  return new CommonProblemDescriptor[]{inspectionManager.createProblemDescriptor(anchor,errorString,(LocalQuickFix)null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false)};
}
