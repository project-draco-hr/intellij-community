{
  String indstr=InterpreterUtil.getIndentString(indent);
  StringBuffer buf=new StringBuffer();
  String new_line_separator=DecompilerContext.getNewLineSeparator();
  buf.append(ExprProcessor.listToJava(varDefinitions,indent));
  if (isLabeled()) {
    buf.append(indstr + "label" + this.id+ ":"+ new_line_separator);
  }
  buf.append(indstr + "try {" + new_line_separator);
  buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true));
  buf.append(indstr + "}");
  for (int i=1; i < stats.size(); i++) {
    List<String> exception_types=exctstrings.get(i - 1);
    buf.append(" catch (");
    if (exception_types.size() > 1) {
      for (int exc_index=1; exc_index < exception_types.size(); ++exc_index) {
        VarType exc_type=new VarType(CodeConstants.TYPE_OBJECT,0,exception_types.get(exc_index));
        String exc_type_name=ExprProcessor.getCastTypeName(exc_type);
        buf.append(exc_type_name + " | ");
      }
    }
    buf.append(vars.get(i - 1).toJava(indent));
    buf.append(") {" + new_line_separator + ExprProcessor.jmpWrapper(stats.get(i),indent + 1,true)+ indstr+ "}");
  }
  buf.append(new_line_separator);
  return buf.toString();
}
