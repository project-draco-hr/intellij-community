{
  System.out.println("action performed ");
  final Set<ResourceBundle> bundles=new HashSet<ResourceBundle>();
  PropertiesReferenceManager.getInstance(myProject).processPropertiesFiles(GlobalSearchScope.projectScope(myProject),new PropertiesFileProcessor(){
    @Override public boolean process(    String baseName,    PropertiesFile propertiesFile){
      bundles.add(propertiesFile.getResourceBundle());
      return true;
    }
  }
,BundleNameEvaluator.DEFAULT);
  final List<ResourceBundle> sortedBundles=ContainerUtil.sorted(ContainerUtil.filter(bundles,new Condition<ResourceBundle>(){
    @Override public boolean value(    ResourceBundle resourceBundle){
      return resourceBundle.getBaseDirectory() != null;
    }
  }
),new Comparator<ResourceBundle>(){
    @Override public int compare(    ResourceBundle o1,    ResourceBundle o2){
      return Comparing.compare(o1.getBaseName(),o2.getBaseName());
    }
  }
);
  final BaseListPopupStep<ResourceBundle> step=new BaseListPopupStep<ResourceBundle>("TODO",sortedBundles){
    @Override public PopupStep onChosen(    final ResourceBundle selectedBundle,    final boolean finalChoice){
      if (selectedBundle != null && finalChoice) {
        setText(selectedBundle.getBaseName());
        mySelectedBundle=selectedBundle;
      }
      return FINAL_CHOICE;
    }
    @NotNull @Override public String getTextFor(    final ResourceBundle resourceBundle){
      return resourceBundle.getBaseName();
    }
    @Override public Icon getIconFor(    final ResourceBundle resourceBundle){
      return AllIcons.Nodes.ResourceBundle;
    }
  }
;
  final ListPopupImpl popup=new ListPopupImpl(step);
  popup.showUnderneathOf(ResourceBundleNameReferenceEditor.this);
}
