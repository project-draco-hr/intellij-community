{
  final Document document=editor.getDocument();
  PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(document);
  if (file == null)   return null;
  if (file instanceof PsiCompiledFile) {
    PsiFile decompiled=((PsiCompiledFile)file).getDecompiledPsiFile();
    if (decompiled != null)     file=decompiled;
  }
  PsiElement elementAt=file.findElementAt(TargetElementUtil.adjustOffset(file,document,offset));
  for (  GotoDeclarationHandler handler : Extensions.getExtensions(GotoDeclarationHandler.EP_NAME)) {
    try {
      PsiElement[] result=handler.getGotoDeclarationTargets(elementAt,offset,editor);
      if (result != null && result.length > 0) {
        for (        PsiElement element : result) {
          if (element == null) {
            LOG.error("Null target element is returned by " + handler.getClass().getName());
            return null;
          }
        }
        return result;
      }
    }
 catch (    AbstractMethodError e) {
      LOG.error(new ExtensionException(handler.getClass()));
    }
  }
  int flags=TargetElementUtil.getInstance().getAllAccepted() & ~TargetElementUtil.ELEMENT_NAME_ACCEPTED;
  if (!lookupAccepted) {
    flags&=~TargetElementUtil.LOOKUP_ITEM_ACCEPTED;
  }
  PsiElement element=TargetElementUtil.getInstance().findTargetElement(editor,flags,offset);
  if (element != null) {
    return new PsiElement[]{element};
  }
  if (editor instanceof EditorWindow) {
    EditorWindow window=(EditorWindow)editor;
    return findTargetElementsNoVS(project,window.getDelegate(),window.getDocument().injectedToHost(offset),lookupAccepted);
  }
  return null;
}
