{
  Transferable content=getTransferable(producer);
  if (content == null)   return null;
  String text=getStringContent(content);
  if (text == null)   return null;
  if (editor.getCaretModel().supportsMultipleCarets()) {
    int caretCount=editor.getCaretModel().getCaretCount();
    if (caretCount == 1 && editor.isColumnMode()) {
      int pastedLineCount=LineTokenizer.calcLineCount(text,true);
      EditorModificationUtil.deleteSelectedText(editor);
      Caret caret=editor.getCaretModel().getPrimaryCaret();
      for (int i=0; i < pastedLineCount - 1; i++) {
        caret=caret.clone(false);
        if (caret == null) {
          break;
        }
      }
      caretCount=editor.getCaretModel().getCaretCount();
    }
    CaretStateTransferableData caretData=null;
    try {
      caretData=content.isDataFlavorSupported(CaretStateTransferableData.FLAVOR) ? (CaretStateTransferableData)content.getTransferData(CaretStateTransferableData.FLAVOR) : null;
    }
 catch (    Exception e) {
      LOG.error(e);
    }
    final Iterator<String> segments=new ClipboardTextPerCaretSplitter().split(text,caretData,caretCount).iterator();
    editor.getCaretModel().runForEachCaret(new CaretAction(){
      @Override public void perform(      Caret caret){
        EditorModificationUtil.insertStringAtCaret(editor,segments.next(),false,true);
      }
    }
);
    return null;
  }
 else {
    int caretOffset=editor.getCaretModel().getOffset();
    EditorModificationUtil.insertStringAtCaret(editor,text,false,true);
    return new TextRange(caretOffset,caretOffset + text.length());
  }
}
