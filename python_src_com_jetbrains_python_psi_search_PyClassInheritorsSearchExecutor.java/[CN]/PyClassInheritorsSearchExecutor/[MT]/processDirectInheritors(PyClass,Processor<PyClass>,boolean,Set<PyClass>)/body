{
  for (  String ig_base : IGNORED_BASES) {
    if (ig_base.equals(superClass.getName()))     return true;
  }
  if (processed.contains(superClass))   return true;
  processed.add(superClass);
  Project project=superClass.getProject();
  final String superClassName=superClass.getName();
  if (superClassName == null)   return true;
  final Collection<PyClass> candidates=StubIndex.getInstance().get(PySuperClassIndex.KEY,superClassName,project,ProjectScope.getAllScope(project));
  for (  PyClass candidate : candidates) {
    final PyClass[] classes=candidate.getSuperClasses();
    if (classes != null) {
      for (      PyClass superClassCandidate : classes) {
        if (superClassCandidate.isEquivalentTo(superClass)) {
          if (!consumer.process(candidate)) {
            return false;
          }
          if (checkDeep && !processDirectInheritors(candidate,consumer,checkDeep,processed))           return false;
          break;
        }
      }
    }
  }
  return true;
}
