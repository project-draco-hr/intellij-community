{
  runTest(new SkeletonsTask(){
    @Override public void runTestOn(    @NotNull Sdk sdk){
      final Project project=myFixture.getProject();
      final PyFile builtins=PyBuiltinCache.getBuiltinsForSdk(project,sdk);
      assertNotNull(builtins);
      final VirtualFile virtualFile=builtins.getVirtualFile();
      assertNotNull(virtualFile);
      assertTrue(virtualFile.isInLocalFileSystem());
      final String path=virtualFile.getPath();
      final PySkeletonRefresher.SkeletonHeader header=PySkeletonRefresher.readSkeletonHeader(new File(path));
      assertNotNull(header);
      final int version=header.getVersion();
      assertTrue("Header version must be > 0, currently it is " + version,version > 0);
      assertEquals(SkeletonVersionChecker.BUILTIN_NAME,header.getBinaryFile());
      myFixture.configureByText("a.py","len('foo')");
      final PyExpression expr=myFixture.findElementByText("len",PyExpression.class);
      assertNotNull(expr);
      final Module module=ModuleUtil.findModuleForPsiElement(expr.getContainingFile());
      assertEquals(getSingleModule(project),module);
      final Sdk sdkFromModule=PythonSdkType.findPythonSdk(module);
      assertNotNull(sdkFromModule);
      final Sdk sdkFromPsi=PyBuiltinCache.findSdkForFile(expr.getContainingFile());
      final PyFile builtinsFromSdkCache=PythonSdkPathCache.getInstance(project,sdkFromPsi).getBuiltins().getBuiltinsFile();
      assertNotNull(builtinsFromSdkCache);
      assertEquals(builtins,builtinsFromSdkCache);
      final PyFile builtinsFromPsi=PyBuiltinCache.getInstance(expr).getBuiltinsFile();
      assertNotNull(builtinsFromPsi);
      assertEquals(builtins,builtinsFromPsi);
      final PsiReference ref=expr.getReference();
      assertNotNull(ref);
      final PsiElement resolved=ref.resolve();
      assertNotNull(resolved);
      assertInstanceOf(resolved,PyFunction.class);
      final PyFunction len=(PyFunction)resolved;
      assertEquals("len",len.getName());
      final PsiFile file=resolved.getContainingFile();
      assertEquals(builtins,file);
      myFixture.configureByFile("skeletons/" + getTestName(false) + ".py");
      myFixture.enableInspections(PyUnresolvedReferencesInspection.class);
      myFixture.checkHighlighting(true,false,false);
    }
  }
);
}
