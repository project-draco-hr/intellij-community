{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  final VirtualFile virtualFile=e.getData(PlatformDataKeys.VIRTUAL_FILE);
  if (virtualFile == null || project == null || project.isDisposed()) {
    return;
  }
  GitRepositoryManager manager=GitUtil.getRepositoryManager(project);
  final GitRepository repository=manager.getRepositoryForFile(virtualFile);
  if (repository == null) {
    StringBuilder details=new StringBuilder("file: " + virtualFile.getPresentableUrl() + "; Git repositories: ");
    for (    GitRepository repo : manager.getRepositories()) {
      details.append(repo.getPresentableUrl()).append("; ");
    }
    notifyError(project,"Can't find git repository",details.toString());
    return;
  }
  final String githubRemoteUrl=GithubUtil.findGithubRemoteUrl(repository);
  if (githubRemoteUrl == null) {
    notifyError(project,"Can't find github remote",null);
    return;
  }
  final String rootPath=repository.getRoot().getPath();
  final String path=virtualFile.getPath();
  if (!path.startsWith(rootPath)) {
    notifyError(project,"File is not under repository root","Root: " + rootPath + ", file: "+ path);
    return;
  }
  String branch=getBranchNameOnRemote(project,repository);
  if (branch == null) {
    return;
  }
  String relativePath=path.substring(rootPath.length());
  String urlToOpen=makeUrlToOpen(e,relativePath,branch,githubRemoteUrl);
  if (urlToOpen == null) {
    notifyError(project,"Can't create properly url",githubRemoteUrl);
    return;
  }
  BrowserUtil.launchBrowser(urlToOpen);
}
