{
  GitRepositoryManager manager=GitUtil.getRepositoryManager(project);
  final GitRepository repository=manager.getRepositoryForFile(virtualFile);
  if (repository == null) {
    StringBuilder details=new StringBuilder("file: " + virtualFile.getPresentableUrl() + "; Git repositories: ");
    for (    GitRepository repo : manager.getRepositories()) {
      details.append(repo.getPresentableUrl()).append("; ");
    }
    GithubNotifications.showError(project,CANNOT_OPEN_IN_BROWSER,"Can't find git repository",details.toString());
    return null;
  }
  final String githubRemoteUrl=GithubUtil.findGithubRemoteUrl(repository);
  if (githubRemoteUrl == null) {
    GithubNotifications.showError(project,CANNOT_OPEN_IN_BROWSER,"Can't find github remote");
    return null;
  }
  final String rootPath=repository.getRoot().getPath();
  final String path=virtualFile.getPath();
  if (!path.startsWith(rootPath)) {
    GithubNotifications.showError(project,CANNOT_OPEN_IN_BROWSER,"File is not under repository root","Root: " + rootPath + ", file: "+ path);
    return null;
  }
  String relativePath=path.substring(rootPath.length());
  String branch=getCurrentBranchNameOnRemote(repository);
  if (branch != null) {
    return makeUrlToOpen(editor,relativePath,branch,githubRemoteUrl);
  }
  String hash=getCurrentFileRevisionHash(project,virtualFile);
  if (hash != null) {
    return makeUrlToOpen(editor,relativePath,hash,githubRemoteUrl);
  }
  GithubNotifications.showError(project,CANNOT_OPEN_IN_BROWSER,"Can't find related tracked branch or hash.");
  return null;
}
