{
  final List<FormatStringChunk> results=new ArrayList<FormatStringChunk>();
  int pos=0;
  final int n=s.length();
  while (pos < n) {
    int next=s.indexOf('{',pos);
    while (next > 0 && next < n - 1 && s.charAt(next + 1) == '{') {
      next=s.indexOf('{',next + 2);
    }
    if (next < 0) {
      break;
    }
    if (next > pos) {
      results.add(new ConstantChunk(pos,next));
    }
    pos=next;
    next=s.indexOf('}',pos);
    while (next > 0 && next < n - 1 && s.charAt(next + 1) == '}') {
      next=s.indexOf('}',next + 2);
    }
    if (next > pos) {
      final SubstitutionChunk chunk=new SubstitutionChunk(pos);
      final int nameStart=pos + 1;
      final int chunkEnd=next + 1;
      chunk.setEndIndex(chunkEnd);
      final int nameEnd=StringUtil.indexOfAny(s,"!:.[}",nameStart,chunkEnd);
      if (nameEnd > 0 && nameStart < nameEnd) {
        final String name=s.substring(nameStart,nameEnd);
        try {
          final int number=Integer.parseInt(name);
          chunk.setPosition(number);
        }
 catch (        NumberFormatException e) {
          chunk.setMappingKey(name);
        }
      }
      results.add(chunk);
    }
    pos=next + 1;
  }
  if (pos < n) {
    results.add(new ConstantChunk(pos,n));
  }
  return results;
}
