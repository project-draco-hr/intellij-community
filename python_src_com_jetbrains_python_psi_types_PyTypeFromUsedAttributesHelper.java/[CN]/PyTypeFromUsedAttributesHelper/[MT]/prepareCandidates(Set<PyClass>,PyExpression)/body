{
  final Set<QualifiedName> importQualifiers=collectImportQualifiers(expression.getContainingFile());
  final List<CandidateClass> prioritizedCandidates=Lists.newArrayList();
  for (  PyClass candidate : candidates) {
    final PsiFile candidateFile=candidate.getContainingFile();
    final Priority priority;
    if (PyBuiltinCache.getInstance(expression).isBuiltin(candidate)) {
      priority=Priority.BUILTIN;
    }
 else     if (candidateFile == expression.getContainingFile()) {
      priority=Priority.SAME_FILE;
    }
 else {
      final String qualifiedName=candidate.getQualifiedName();
      final boolean probablyImported=qualifiedName != null && ContainerUtil.exists(importQualifiers,new Condition<QualifiedName>(){
        @Override public boolean value(        QualifiedName qualifier){
          return QualifiedName.fromDottedString(qualifiedName).matchesPrefix(qualifier);
        }
      }
);
      if (probablyImported) {
        priority=Priority.IMPORTED;
      }
 else       if (ProjectRootManager.getInstance(expression.getProject()).getFileIndex().isInSource(candidateFile.getVirtualFile())) {
        priority=Priority.PROJECT;
      }
 else {
        priority=Priority.OTHER;
      }
    }
    prioritizedCandidates.add(new CandidateClass(candidate,priority));
  }
  Collections.sort(prioritizedCandidates);
  final List<CandidateClass> result=Lists.newArrayList();
  for (  CandidateClass candidate : prioritizedCandidates) {
    if (result.size() == MAX_CANDIDATES || candidate.myPriority.compareTo(Priority.PROJECT) >= 0) {
      break;
    }
    result.add(candidate);
  }
  return Collections.unmodifiableList(result);
}
