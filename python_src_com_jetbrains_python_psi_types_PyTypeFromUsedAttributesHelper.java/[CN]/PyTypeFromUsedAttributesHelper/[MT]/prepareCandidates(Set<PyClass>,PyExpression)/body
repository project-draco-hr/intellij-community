{
  final Set<QualifiedName> importQualifiers=collectImportQualifiers(expression.getContainingFile());
  final List<CandidateClass> prioritizedCandidates=ContainerUtil.map(candidates,new Function<PyClass,CandidateClass>(){
    @Override public CandidateClass fun(    PyClass candidate){
      return new CandidateClass(candidate,findPriority(candidate,expression,importQualifiers));
    }
  }
);
  Collections.sort(prioritizedCandidates);
  final List<CandidateClass> result=Lists.newArrayList();
  for (  CandidateClass candidate : prioritizedCandidates) {
    if (result.size() == MAX_CANDIDATES || candidate.myPriority.compareTo(Priority.PROJECT) >= 0) {
      break;
    }
    result.add(candidate);
  }
  return Collections.unmodifiableList(result);
}
