{
  final Set<QualifiedName> result=Sets.newHashSet();
  if (file instanceof PyFile) {
    final PyFile originalModule=(PyFile)file;
    for (    PyFromImportStatement fromImport : originalModule.getFromImports()) {
      if (fromImport.isFromFuture()) {
        continue;
      }
      final PsiFileSystemItem importedModule=PyUtil.as(fromImport.resolveImportSource(),PsiFileSystemItem.class);
      if (importedModule == null) {
        continue;
      }
      final QualifiedName qName=findShortestImportableQName(file.getFirstChild(),importedModule.getVirtualFile());
      if (qName == null) {
        continue;
      }
      final PyImportElement[] importElements=fromImport.getImportElements();
      if (fromImport.isStarImport() || importElements.length == 0) {
        result.add(qName);
      }
 else {
        result.addAll(ContainerUtil.map(importElements,new Function<PyImportElement,QualifiedName>(){
          @Override public QualifiedName fun(          PyImportElement element){
            final QualifiedName name=element.getImportedQName();
            return name != null ? qName.append(name) : qName;
          }
        }
));
      }
    }
    for (    PyImportElement normalImport : originalModule.getImportTargets()) {
      ContainerUtil.addIfNotNull(result,normalImport.getImportedQName());
    }
  }
  return Collections.unmodifiableSet(result);
}
