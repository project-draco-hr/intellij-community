{
  if (!ENABLED || !myContext.allowLocalUsages(expression)) {
    return null;
  }
  final long startTime=System.currentTimeMillis();
  final Set<String> seenAttrs=collectUsedAttributes(expression);
  LOG.debug(String.format("Attempting to infer type for expression: %s. Used attributes: %s",expression.getText(),seenAttrs));
  final Set<PyClass> allCandidates=suggestCandidateClasses(expression,seenAttrs);
  final List<CandidateClass> bestCandidates=prepareCandidates(allCandidates,expression);
  LOG.debug("Total " + (System.currentTimeMillis() - startTime) + " ms to infer candidate classes");
  return PyUnionType.createWeakType(PyUnionType.union(ContainerUtil.map(bestCandidates,new Function<CandidateClass,PyType>(){
    @Override public PyType fun(    CandidateClass cls){
      return new PyClassTypeImpl(cls.myClass,false);
    }
  }
)));
}
