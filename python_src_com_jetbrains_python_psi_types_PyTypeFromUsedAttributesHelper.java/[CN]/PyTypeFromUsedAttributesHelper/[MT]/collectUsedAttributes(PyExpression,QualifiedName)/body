{
  final Set<String> result=Sets.newHashSet();
  final PsiReference reference=anchor.getReference();
  final ScopeOwner definitionScope=ScopeUtil.getScopeOwner(reference != null ? reference.resolve() : anchor);
  ScopeOwner scope=ScopeUtil.getScopeOwner(anchor);
  while (scope != null) {
    final ScopeOwner inspectedScope=scope;
    scope.accept(new PyRecursiveElementVisitor(){
      @Override public void visitPyElement(      PyElement node){
        if (node instanceof ScopeOwner && node != inspectedScope) {
          return;
        }
        if (node instanceof PyQualifiedExpression) {
          ContainerUtil.addIfNotNull(result,getAttributeOfQualifier(((PyQualifiedExpression)node),qualifiedName));
        }
        super.visitPyElement(node);
      }
    }
);
    if (scope == definitionScope) {
      break;
    }
    scope=ScopeUtil.getScopeOwner(scope);
  }
  return result;
}
