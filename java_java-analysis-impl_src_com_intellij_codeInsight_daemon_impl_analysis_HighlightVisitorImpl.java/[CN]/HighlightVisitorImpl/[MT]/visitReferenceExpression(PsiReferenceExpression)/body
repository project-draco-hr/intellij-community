{
  JavaResolveResult resultForIncompleteCode=doVisitReferenceElement(expression);
  if (!myHolder.hasErrorResults()) {
    visitExpression(expression);
    if (myHolder.hasErrorResults())     return;
  }
  JavaResolveResult[] results=resolveOptimised(expression);
  if (results == null)   return;
  JavaResolveResult result=results.length == 1 ? results[0] : JavaResolveResult.EMPTY;
  PsiElement resolved=result.getElement();
  if (resolved instanceof PsiVariable && resolved.getContainingFile() == expression.getContainingFile()) {
    if (!myHolder.hasErrorResults()) {
      try {
        myHolder.add(HighlightControlFlowUtil.checkVariableInitializedBeforeUsage(expression,(PsiVariable)resolved,myUninitializedVarProblems,myFile));
      }
 catch (      IndexNotReadyException ignored) {
      }
    }
    PsiVariable variable=(PsiVariable)resolved;
    boolean isFinal=variable.hasModifierProperty(PsiModifier.FINAL);
    if (isFinal && !variable.hasInitializer()) {
      if (!myHolder.hasErrorResults()) {
        myHolder.add(HighlightControlFlowUtil.checkFinalVariableMightAlreadyHaveBeenAssignedTo(variable,expression,myFinalVarProblems));
      }
      if (!myHolder.hasErrorResults())       myHolder.add(HighlightControlFlowUtil.checkFinalVariableInitializedInLoop(expression,resolved));
    }
  }
  PsiElement parent=expression.getParent();
  if (parent instanceof PsiMethodCallExpression && ((PsiMethodCallExpression)parent).getMethodExpression() == expression && (!result.isAccessible() || !result.isStaticsScopeCorrect())) {
    PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)parent;
    PsiExpressionList list=methodCallExpression.getArgumentList();
    if (!HighlightMethodUtil.isDummyConstructorCall(methodCallExpression,myResolveHelper,list,expression)) {
      try {
        myHolder.add(HighlightMethodUtil.checkAmbiguousMethodCallIdentifier(expression,results,list,resolved,result,methodCallExpression,myResolveHelper));
        if (!PsiTreeUtil.findChildrenOfType(methodCallExpression.getArgumentList(),PsiLambdaExpression.class).isEmpty()) {
          PsiElement nameElement=expression.getReferenceNameElement();
          if (nameElement != null) {
            myHolder.add(HighlightMethodUtil.checkAmbiguousMethodCallArguments(expression,results,list,resolved,result,methodCallExpression,myResolveHelper,nameElement));
          }
        }
      }
 catch (      IndexNotReadyException ignored) {
      }
    }
  }
  if (!myHolder.hasErrorResults() && resultForIncompleteCode != null) {
    myHolder.add(HighlightUtil.checkExpressionRequired(expression,resultForIncompleteCode));
  }
  if (!myHolder.hasErrorResults() && resolved instanceof PsiField) {
    try {
      myHolder.add(HighlightUtil.checkIllegalForwardReferenceToField(expression,(PsiField)resolved));
    }
 catch (    IndexNotReadyException ignored) {
    }
  }
  if (!myHolder.hasErrorResults())   myHolder.add(GenericsHighlightUtil.checkAccessStaticFieldFromEnumConstructor(expression,result));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkClassReferenceAfterQualifier(expression,resolved));
  final PsiExpression qualifierExpression=expression.getQualifierExpression();
  myHolder.add(HighlightUtil.checkUnqualifiedSuperInDefaultMethod(myLanguageLevel,expression,qualifierExpression));
  if (!myHolder.hasErrorResults() && qualifierExpression != null) {
    PsiType type=qualifierExpression.getType();
    if (type instanceof PsiCapturedWildcardType) {
      type=((PsiCapturedWildcardType)type).getUpperBound();
    }
    final PsiClass psiClass=PsiUtil.resolveClassInType(type);
    if (psiClass != null) {
      myHolder.add(GenericsHighlightUtil.areSupersAccessible(psiClass,expression));
    }
  }
}
