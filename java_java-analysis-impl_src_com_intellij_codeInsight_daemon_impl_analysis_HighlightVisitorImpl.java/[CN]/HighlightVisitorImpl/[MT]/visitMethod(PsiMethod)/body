{
  super.visitMethod(method);
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightControlFlowUtil.checkUnreachableStatement(method.getBody()));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightMethodUtil.checkConstructorHandleSuperClassExceptions(method));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightMethodUtil.checkRecursiveConstructorInvocation(method));
  if (!myHolder.hasErrorResults())   myHolder.add(GenericsHighlightUtil.checkSafeVarargsAnnotation(method,myLanguageLevel));
  PsiClass aClass=method.getContainingClass();
  if (!myHolder.hasErrorResults() && method.isConstructor()) {
    myHolder.add(HighlightClassUtil.checkThingNotAllowedInInterface(method,aClass));
  }
  if (!myHolder.hasErrorResults() && method.hasModifierProperty(PsiModifier.DEFAULT)) {
    myHolder.add(checkFeature(method,Feature.EXTENSION_METHODS));
  }
  if (!myHolder.hasErrorResults() && aClass != null && aClass.isInterface() && method.hasModifierProperty(PsiModifier.STATIC)) {
    myHolder.add(checkFeature(method,Feature.EXTENSION_METHODS));
  }
  if (!myHolder.hasErrorResults() && aClass != null) {
    myHolder.add(HighlightMethodUtil.checkDuplicateMethod(aClass,method,getDuplicateMethods(aClass)));
  }
  PsiParameter[] parameters=method.getParameterList().getParameters();
  final TextAttributesScheme colorsScheme=myHolder.getColorsScheme();
  for (  PsiParameter parameter : parameters) {
    int info=myReassignedParameters.get(parameter);
    if (info == 0)     continue;
    PsiIdentifier nameIdentifier=parameter.getNameIdentifier();
    if (nameIdentifier != null) {
      if (info == 2) {
        myHolder.add(HighlightNamesUtil.highlightReassignedVariable(parameter,nameIdentifier));
      }
 else {
        myHolder.add(HighlightNamesUtil.highlightVariableName(parameter,nameIdentifier,colorsScheme));
      }
    }
  }
}
