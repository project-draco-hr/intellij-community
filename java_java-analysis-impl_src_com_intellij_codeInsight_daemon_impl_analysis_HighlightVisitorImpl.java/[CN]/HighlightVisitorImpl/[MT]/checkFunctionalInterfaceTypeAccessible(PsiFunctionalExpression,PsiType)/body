{
  PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(functionalInterfaceType);
  final PsiClass psiClass=resolveResult.getElement();
  if (psiClass != null) {
    if (!PsiUtil.isAccessible(myFile.getProject(),psiClass,expression,null)) {
      myHolder.add(HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(HighlightUtil.buildProblemWithAccessDescription(expression,resolveResult)).create());
    }
 else {
      for (      PsiType type : resolveResult.getSubstitutor().getSubstitutionMap().values()) {
        checkFunctionalInterfaceTypeAccessible(expression,type);
      }
    }
  }
  return resolveResult;
}
