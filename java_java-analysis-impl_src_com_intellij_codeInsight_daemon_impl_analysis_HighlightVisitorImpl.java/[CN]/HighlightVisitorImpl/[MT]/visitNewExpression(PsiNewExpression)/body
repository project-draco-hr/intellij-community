{
  final PsiType type=expression.getType();
  final PsiClass aClass=PsiUtil.resolveClassInType(type);
  myHolder.add(HighlightUtil.checkUnhandledExceptions(expression,null));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkAnonymousInheritFinal(expression));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkQualifiedNew(expression,type,aClass));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkCreateInnerClassFromStaticContext(expression,type,aClass));
  if (!myHolder.hasErrorResults())   myHolder.add(GenericsHighlightUtil.checkTypeParameterInstantiation(expression));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkInstantiationOfAbstractClass(aClass,expression));
  try {
    if (!myHolder.hasErrorResults())     HighlightMethodUtil.checkNewExpression(expression,type,myHolder,myJavaSdkVersion);
  }
 catch (  IndexNotReadyException ignored) {
  }
  if (!myHolder.hasErrorResults())   myHolder.add(GenericsHighlightUtil.checkEnumInstantiation(expression,aClass));
  if (!myHolder.hasErrorResults())   myHolder.add(GenericsHighlightUtil.checkGenericArrayCreation(expression,type));
  if (!myHolder.hasErrorResults())   registerConstructorCall(expression);
  if (!myHolder.hasErrorResults())   visitExpression(expression);
}
