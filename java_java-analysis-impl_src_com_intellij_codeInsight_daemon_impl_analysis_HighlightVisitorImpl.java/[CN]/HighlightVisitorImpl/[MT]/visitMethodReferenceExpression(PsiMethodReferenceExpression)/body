{
  myHolder.add(checkFeature(expression,Feature.METHOD_REFERENCES));
  final JavaResolveResult result;
  final JavaResolveResult[] results;
  try {
    results=expression.multiResolve(true);
    result=results.length == 1 ? results[0] : JavaResolveResult.EMPTY;
  }
 catch (  IndexNotReadyException e) {
    return;
  }
  if (myRefCountHolder != null) {
    myRefCountHolder.registerReference(expression,result);
  }
  final PsiElement method=result.getElement();
  if (method != null && !result.isAccessible()) {
    final String accessProblem=HighlightUtil.buildProblemWithAccessDescription(expression,result);
    HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(accessProblem).create();
    myHolder.add(info);
  }
 else {
    final TextAttributesScheme colorsScheme=myHolder.getColorsScheme();
    if (method instanceof PsiMethod && !expression.isConstructor()) {
      final PsiElement methodNameElement=expression.getReferenceNameElement();
      myHolder.add(HighlightNamesUtil.highlightMethodName((PsiMethod)method,methodNameElement,false,colorsScheme));
    }
    myHolder.add(HighlightNamesUtil.highlightClassNameInQualifier(expression,colorsScheme));
  }
  if (!LambdaUtil.isValidLambdaContext(expression.getParent())) {
    myHolder.add(HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip("Method reference expression is not expected here").create());
  }
  if (!myHolder.hasErrorResults()) {
    final PsiType functionalInterfaceType=expression.getFunctionalInterfaceType();
    if (functionalInterfaceType != null) {
      final boolean notFunctional=!LambdaUtil.isFunctionalType(functionalInterfaceType);
      if (notFunctional) {
        myHolder.add(HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(functionalInterfaceType.getPresentableText() + " is not a functional interface").create());
      }
    }
    if (!myHolder.hasErrorResults()) {
      final PsiElement referenceNameElement=expression.getReferenceNameElement();
      if (referenceNameElement instanceof PsiKeyword) {
        if (!PsiMethodReferenceUtil.isValidQualifier(expression)) {
          final PsiElement qualifier=expression.getQualifier();
          String description="Cannot find class " + qualifier.getText();
          HighlightInfo result1=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(qualifier).descriptionAndTooltip(description).create();
          myHolder.add(result1);
        }
      }
    }
    if (!myHolder.hasErrorResults()) {
      final PsiClassType.ClassResolveResult resolveResult=checkFunctionalInterfaceTypeAccessible(expression,functionalInterfaceType);
      final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(resolveResult);
      if (interfaceMethod != null) {
        if (!myHolder.hasErrorResults()) {
          final String errorMessage=PsiMethodReferenceUtil.checkMethodReferenceContext(expression);
          if (errorMessage != null) {
            myHolder.add(HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(errorMessage).create());
          }
        }
        if (!myHolder.hasErrorResults()) {
          final String badReturnTypeMessage=PsiMethodReferenceUtil.checkReturnType(expression,result,functionalInterfaceType);
          if (badReturnTypeMessage != null) {
            myHolder.add(HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(badReturnTypeMessage).create());
          }
        }
      }
    }
  }
  if (!myHolder.hasErrorResults()) {
    PsiElement qualifier=expression.getQualifier();
    if (qualifier instanceof PsiTypeElement) {
      final PsiType psiType=((PsiTypeElement)qualifier).getType();
      final HighlightInfo genericArrayCreationInfo=GenericsHighlightUtil.checkGenericArrayCreation(qualifier,psiType);
      if (genericArrayCreationInfo != null) {
        myHolder.add(genericArrayCreationInfo);
      }
 else {
        final String wildcardMessage=PsiMethodReferenceUtil.checkTypeArguments((PsiTypeElement)qualifier,psiType);
        if (wildcardMessage != null) {
          myHolder.add(HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(qualifier).descriptionAndTooltip(wildcardMessage).create());
        }
      }
    }
  }
  if (!myHolder.hasErrorResults()) {
    myHolder.add(PsiMethodReferenceHighlightingUtil.checkRawConstructorReference(expression));
  }
  if (!myHolder.hasErrorResults()) {
    myHolder.add(HighlightUtil.checkUnhandledExceptions(expression,expression.getTextRange()));
  }
  if (!myHolder.hasErrorResults()) {
    if (results.length == 0 || results[0] instanceof MethodCandidateInfo && !((MethodCandidateInfo)results[0]).isApplicable() && expression.getFunctionalInterfaceType() != null) {
      String description=null;
      if (results.length == 1) {
        description=((MethodCandidateInfo)results[0]).getInferenceErrorMessage();
      }
      if (expression.isConstructor()) {
        final PsiClass containingClass=PsiMethodReferenceUtil.getQualifierResolveResult(expression).getContainingClass();
        if (containingClass != null) {
          if (!myHolder.add(HighlightClassUtil.checkInstantiationOfAbstractClass(containingClass,expression)) && !myHolder.add(GenericsHighlightUtil.checkEnumInstantiation(expression,containingClass)) && containingClass.isPhysical()&& description == null) {
            description=JavaErrorMessages.message("cannot.resolve.constructor",containingClass.getName());
          }
        }
      }
 else       if (description == null) {
        description=JavaErrorMessages.message("cannot.resolve.method",expression.getReferenceName());
      }
      if (description != null) {
        final PsiElement referenceNameElement=expression.getReferenceNameElement();
        final HighlightInfo highlightInfo=HighlightInfo.newHighlightInfo(results.length == 0 ? HighlightInfoType.WRONG_REF : HighlightInfoType.ERROR).descriptionAndTooltip(description).range(referenceNameElement).create();
        myHolder.add(highlightInfo);
        final TextRange fixRange=HighlightMethodUtil.getFixRange(referenceNameElement);
        QuickFixAction.registerQuickFixAction(highlightInfo,fixRange,QuickFixFactory.getInstance().createCreateMethodFromUsageFix(expression));
      }
    }
  }
}
