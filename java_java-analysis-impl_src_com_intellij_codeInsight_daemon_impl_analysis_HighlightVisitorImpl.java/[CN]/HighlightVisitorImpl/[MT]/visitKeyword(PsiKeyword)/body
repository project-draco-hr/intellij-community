{
  super.visitKeyword(keyword);
  PsiElement parent=keyword.getParent();
  String text=keyword.getText();
  if (parent instanceof PsiModifierList) {
    PsiModifierList psiModifierList=(PsiModifierList)parent;
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightUtil.checkNotAllowedModifier(keyword,psiModifierList));
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightUtil.checkIllegalModifierCombination(keyword,psiModifierList));
    if (PsiModifier.ABSTRACT.equals(text) && psiModifierList.getParent() instanceof PsiMethod) {
      if (!myHolder.hasErrorResults()) {
        myHolder.add(HighlightMethodUtil.checkAbstractMethodInConcreteClass((PsiMethod)psiModifierList.getParent(),keyword));
      }
    }
  }
 else   if (PsiKeyword.INTERFACE.equals(text) && parent instanceof PsiClass) {
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightClassUtil.checkInterfaceCannotBeLocal((PsiClass)parent));
  }
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkStaticDeclarationInInnerClass(keyword));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkIllegalVoidType(keyword));
  if (PsiTreeUtil.getParentOfType(keyword,PsiDocTagValue.class) != null) {
    HighlightInfo result=HighlightInfo.newHighlightInfo(JavaHighlightInfoTypes.JAVA_KEYWORD).range(keyword).create();
    myHolder.add(result);
  }
}
