{
  myFile=file;
  myHolder=Holder.CHECK_ELEMENT_LEVEL ? new CheckLevelHighlightInfoHolder(file,holder) : holder;
  boolean success=true;
  try {
    myLanguageLevel=PsiUtil.getLanguageLevel(file);
    myJavaSdkVersion=ObjectUtils.notNull(JavaVersionService.getInstance().getJavaSdkVersion(file),JavaSdkVersion.fromLanguageLevel(myLanguageLevel));
    if (updateWholeFile) {
      final Project project=file.getProject();
      DaemonCodeAnalyzerEx daemonCodeAnalyzer=DaemonCodeAnalyzerEx.getInstanceEx(project);
      final FileStatusMap fileStatusMap=daemonCodeAnalyzer.getFileStatusMap();
      final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
      if (progress == null)       throw new IllegalStateException("Must be run under progress");
      final RefCountHolder refCountHolder=RefCountHolder.get(file);
      myRefCountHolder=refCountHolder;
      final Document document=PsiDocumentManager.getInstance(project).getDocument(file);
      TextRange dirtyScope=ObjectUtils.notNull(document == null ? null : fileStatusMap.getFileDirtyScope(document,Pass.UPDATE_ALL),file.getTextRange());
      success=refCountHolder.analyze(file,dirtyScope,progress,new Runnable(){
        @Override public void run(){
          highlight.run();
          progress.checkCanceled();
          HighlightingSession highlightingSession=HighlightingSessionImpl.getHighlightingSession(file,progress);
          PostHighlightingVisitor highlightingVisitor=new PostHighlightingVisitor(file,document,refCountHolder,highlightingSession);
          highlightingVisitor.collectHighlights(file,holder,progress);
        }
      }
);
    }
 else {
      myRefCountHolder=null;
      highlight.run();
    }
  }
  finally {
    myUninitializedVarProblems.clear();
    myFinalVarProblems.clear();
    mySingleImportedClasses.clear();
    mySingleImportedFields.clear();
    myReassignedParameters.clear();
    myRefCountHolder=null;
    myFile=null;
    myHolder=null;
    myDuplicateMethods.clear();
  }
  return success;
}
