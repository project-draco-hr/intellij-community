{
  if (!constructor.getLanguage().isKindOf(JavaLanguage.INSTANCE))   return Collections.emptySet();
  final PsiCodeBlock body=constructor.getBody();
  if (body == null)   return Collections.emptySet();
  return CachedValuesManager.getCachedValue(constructor,new CachedValueProvider<Set<PsiField>>(){
    @Nullable @Override public Result<Set<PsiField>> compute(){
      final PsiCodeBlock body=constructor.getBody();
      final Map<PsiField,Boolean> map=ContainerUtil.newHashMap();
      final StandardDataFlowRunner dfaRunner=new StandardDataFlowRunner(false,false){
        private boolean isCallExposingNonInitializedFields(        Instruction instruction){
          if (!(instruction instanceof MethodCallInstruction) || ((MethodCallInstruction)instruction).getMethodType() != MethodCallInstruction.MethodType.REGULAR_METHOD_CALL) {
            return false;
          }
          PsiCall call=((MethodCallInstruction)instruction).getCallExpression();
          if (call == null)           return false;
          if (call instanceof PsiMethodCallExpression && DfaValueFactory.isEffectivelyUnqualified(((PsiMethodCallExpression)call).getMethodExpression())) {
            return true;
          }
          PsiExpressionList argumentList=call.getArgumentList();
          if (argumentList != null) {
            for (            PsiExpression expression : argumentList.getExpressions()) {
              if (expression instanceof PsiThisExpression)               return true;
            }
          }
          return false;
        }
        @NotNull @Override protected DfaInstructionState[] acceptInstruction(        @NotNull InstructionVisitor visitor,        @NotNull DfaInstructionState instructionState){
          Instruction instruction=instructionState.getInstruction();
          if (isCallExposingNonInitializedFields(instruction) || instruction instanceof ReturnInstruction && !((ReturnInstruction)instruction).isViaException()) {
            for (            PsiField field : containingClass.getFields()) {
              if (!instructionState.getMemoryState().isNotNull(getFactory().getVarFactory().createVariableValue(field,false))) {
                map.put(field,false);
              }
 else               if (!map.containsKey(field)) {
                map.put(field,true);
              }
            }
            return DfaInstructionState.EMPTY_ARRAY;
          }
          return super.acceptInstruction(visitor,instructionState);
        }
      }
;
      final RunnerResult rc=dfaRunner.analyzeMethod(body,new StandardInstructionVisitor());
      Set<PsiField> notNullFields=ContainerUtil.newHashSet();
      if (rc == RunnerResult.OK) {
        for (        PsiField field : map.keySet()) {
          if (map.get(field)) {
            notNullFields.add(field);
          }
        }
      }
      return Result.create(notNullFields,constructor,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);
    }
  }
);
}
