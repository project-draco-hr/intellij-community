{
  if (resultType != null) {
    for (    PsiAnnotation annotation : resultType.getAnnotations()) {
      String qualifiedName=annotation.getQualifiedName();
      NullableNotNullManager nnn=NullableNotNullManager.getInstance(annotation.getProject());
      if (nnn.getNullables().contains(qualifiedName)) {
        return Nullness.NULLABLE;
      }
      if (nnn.getNotNulls().contains(qualifiedName)) {
        return Nullness.NOT_NULL;
      }
    }
  }
  if (owner == null || resultType instanceof PsiPrimitiveType) {
    return Nullness.UNKNOWN;
  }
  if (owner instanceof PsiEnumConstant || PsiUtil.isAnnotationMethod(owner)) {
    return Nullness.NOT_NULL;
  }
  if (owner instanceof PsiMethod && isEnumPredefinedMethod((PsiMethod)owner)) {
    return Nullness.NOT_NULL;
  }
  if (NullableNotNullManager.isNullable(owner)) {
    return Nullness.NULLABLE;
  }
  if (isNotNullLocally(owner)) {
    return Nullness.NOT_NULL;
  }
  if (PsiJavaPatterns.psiParameter().withParents(PsiParameterList.class,PsiLambdaExpression.class).accepts(owner)) {
    PsiLambdaExpression lambda=(PsiLambdaExpression)owner.getParent().getParent();
    int index=lambda.getParameterList().getParameterIndex((PsiParameter)owner);
    Nullness nullness=inferLambdaParameterNullness(lambda,index);
    if (nullness != Nullness.UNKNOWN) {
      return nullness;
    }
    PsiMethod sam=LambdaUtil.getFunctionalInterfaceMethod(lambda.getFunctionalInterfaceType());
    if (sam != null && index < sam.getParameterList().getParametersCount()) {
      return getElementNullability(null,sam.getParameterList().getParameters()[index]);
    }
  }
  return Nullness.UNKNOWN;
}
