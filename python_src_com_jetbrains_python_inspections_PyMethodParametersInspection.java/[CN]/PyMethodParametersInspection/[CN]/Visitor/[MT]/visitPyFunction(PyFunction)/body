{
  PsiElement cap=PyResolveUtil.getConcealingParent(node);
  if (cap instanceof PyClass) {
    PyParameterList plist=node.getParameterList();
    PyParameter[] params=plist.getParameters();
    if (params.length == 0) {
      ASTNode name_node=node.getNameNode();
      if (name_node != null) {
        PsiElement open_paren=plist.getFirstChild();
        PsiElement close_paren=plist.getLastChild();
        if (open_paren != null && close_paren != null && "(".equals(open_paren.getText()) && ")".equals(close_paren.getText())) {
          registerProblem(plist,PyBundle.message("INSP.must.have.first.parameter"),ProblemHighlightType.GENERIC_ERROR,null,new AddSelfQuickFix());
        }
      }
    }
 else {
      String pname=params[0].getText();
      @NonNls String[] mangled={"eslf","sself","elf","felf","slef","seelf","slf","sslf","sefl","sellf","sef","seef"};
      for (      String typo : mangled) {
        if (typo.equals(pname)) {
          registerProblem(params[0].getNode().getPsi(),PyBundle.message("INSP.probably.mistyped.self"),new RenameToSelfQuickFix());
          return;
        }
      }
      if (!"self".equals(pname)) {
        registerProblem(plist,PyBundle.message("INSP.usually.named.self"));
      }
    }
  }
}
