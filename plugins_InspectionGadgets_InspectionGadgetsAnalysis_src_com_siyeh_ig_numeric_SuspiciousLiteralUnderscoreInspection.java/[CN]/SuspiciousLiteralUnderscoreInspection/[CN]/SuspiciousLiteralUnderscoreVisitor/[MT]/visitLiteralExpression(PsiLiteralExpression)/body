{
  super.visitLiteralExpression(expression);
  final PsiType type=expression.getType();
  if (!PsiType.SHORT.equals(type) && !PsiType.INT.equals(type) && !PsiType.LONG.equals(type)&& !PsiType.FLOAT.equals(type)&& !PsiType.DOUBLE.equals(type)) {
    return;
  }
  final String text=expression.getText();
  if (text.startsWith("0") && !text.startsWith("0.")) {
    return;
  }
  if (!text.contains("_")) {
    return;
  }
  boolean underscore=false;
  boolean group=false;
  boolean dot=false;
  int digit=0;
  final int index=StringUtil.indexOfAny(text,"fledFLED");
  final int length=index > 0 ? index : text.length();
  for (int i=0; i < length; i++) {
    final char c=text.charAt(i);
    if (c == '_' || c == '.') {
      if (underscore) {
        return;
      }
      underscore=true;
      if (digit != 3 && group || digit > 3) {
        registerErrorAtOffset(expression,i - digit,digit);
      }
      group=true;
      digit=0;
      if (c == '.') {
        dot=true;
      }
    }
 else     if (Character.isDigit(c)) {
      underscore=false;
      digit++;
    }
 else {
      return;
    }
  }
  if (dot ? digit > 3 : digit != 3) {
    registerErrorAtOffset(expression,length - digit,digit);
  }
}
