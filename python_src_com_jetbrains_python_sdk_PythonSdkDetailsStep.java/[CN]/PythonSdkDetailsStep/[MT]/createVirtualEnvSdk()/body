{
  CreateVirtualEnvDialog.VirtualEnvCallback callback=new CreateVirtualEnvDialog.VirtualEnvCallback(){
    @Override public void virtualEnvCreated(    Sdk sdk,    boolean associateWithProject){
      PythonSdkType.setupSdkPaths(sdk,myProject,null);
      if (associateWithProject) {
        SdkAdditionalData additionalData=sdk.getSdkAdditionalData();
        if (additionalData == null) {
          additionalData=new PythonSdkAdditionalData(PythonSdkFlavor.getFlavor(sdk.getHomePath()));
          ((ProjectJdkImpl)sdk).setSdkAdditionalData(additionalData);
        }
        if (myNewProject) {
          ((PythonSdkAdditionalData)additionalData).associateWithNewProject();
        }
 else {
          ((PythonSdkAdditionalData)additionalData).associateWithProject(myProject);
        }
      }
      myCallback.consume(sdk);
    }
  }
;
  final CreateVirtualEnvDialog dialog;
  final List<Sdk> allSdks=Lists.newArrayList(myExistingSdks);
  Iterables.removeIf(allSdks,new Predicate<Sdk>(){
    @Override public boolean apply(    Sdk sdk){
      return !(sdk.getSdkType() instanceof PythonSdkType);
    }
  }
);
  final List<PythonSdkFlavor> flavors=PythonSdkFlavor.getApplicableFlavors(false);
  for (  PythonSdkFlavor flavor : flavors) {
    final Collection<String> strings=flavor.suggestHomePaths();
    for (    String string : SdkConfigurationUtil.filterExistingPaths(PythonSdkType.getInstance(),strings,myExistingSdks)) {
      allSdks.add(new PyDetectedSdk(string));
    }
  }
  final Set<String> sdks=PySdkService.getInstance().getAddedSdks();
  for (  String string : SdkConfigurationUtil.filterExistingPaths(PythonSdkType.getInstance(),sdks,myExistingSdks)) {
    allSdks.add(new PyDetectedSdk(string));
  }
  if (myProject != null) {
    dialog=new CreateVirtualEnvDialog(myProject,allSdks,null);
  }
 else {
    dialog=new CreateVirtualEnvDialog(myOwnerComponent,allSdks,null);
  }
  if (dialog.showAndGet()) {
    dialog.createVirtualEnv(callback);
  }
}
