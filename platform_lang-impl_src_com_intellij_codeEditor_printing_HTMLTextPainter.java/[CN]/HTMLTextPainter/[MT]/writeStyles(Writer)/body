{
  EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
  writer.write("<style type=\"text/css\">\n");
  final Color lineNumbers=scheme.getColor(EditorColors.LINE_NUMBERS_COLOR);
  writer.write(String.format(".ln { color: #%s; font-weight: normal; font-style: normal; }\n",ColorUtil.toHex(lineNumbers == null ? Gray.x00 : lineNumbers)));
  HighlighterIterator hIterator=myHighlighter.createIterator(myOffset);
  while (!hIterator.atEnd()) {
    TextAttributes textAttributes=hIterator.getTextAttributes();
    if (!myStyleMap.containsKey(textAttributes)) {
      @NonNls String styleName="s" + myStyleMap.size();
      myStyleMap.put(textAttributes,styleName);
      writer.write("." + styleName + " { ");
      Color foreColor=textAttributes.getForegroundColor();
      if (foreColor == null)       foreColor=scheme.getDefaultForeground();
      writer.write("color: " + colorToHtml(foreColor) + "; ");
      if ((textAttributes.getFontType() & Font.BOLD) != 0) {
        writer.write("font-weight: bold; ");
      }
      if ((textAttributes.getFontType() & Font.ITALIC) != 0) {
        writer.write("font-style: italic; ");
      }
      writer.write("}\n");
    }
    hIterator.advance();
  }
  for (  LineMarkerInfo separator : myMethodSeparators) {
    Color color=separator.separatorColor;
    if (color != null && !mySeparatorStyles.containsKey(color)) {
      @NonNls String styleName="ls" + mySeparatorStyles.size();
      mySeparatorStyles.put(color,styleName);
      String htmlColor=colorToHtml(color);
      writer.write("." + styleName + " { height: 1px; border-width: 0; color: "+ htmlColor+ "; background-color:"+ htmlColor+ "}\n");
    }
  }
  writer.write("</style>\n");
}
