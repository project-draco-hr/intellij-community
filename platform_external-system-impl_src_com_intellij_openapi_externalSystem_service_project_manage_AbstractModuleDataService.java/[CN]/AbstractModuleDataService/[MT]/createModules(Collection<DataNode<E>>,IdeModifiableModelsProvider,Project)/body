{
  for (  final DataNode<E> module : toCreate) {
    ModuleData data=module.getData();
    final Module created=modelsProvider.newModule(data.getModuleFilePath(),data.getModuleTypeId());
    final String moduleName=FileUtil.getNameWithoutExtension(new File(data.getModuleFilePath()));
    if (!created.getName().equals(moduleName)) {
      try {
        modelsProvider.getModifiableModuleModel().renameModule(created,moduleName);
      }
 catch (      ModuleWithNameAlreadyExists exists) {
        LOG.warn(exists);
      }
    }
    module.putUserData(MODULE_KEY,created);
    Set<String> orphanFiles=project.getUserData(ORPHAN_MODULE_FILES);
    if (orphanFiles != null) {
      orphanFiles.remove(created.getModuleFilePath());
    }
    final ModifiableRootModel modifiableRootModel=modelsProvider.getModifiableRootModel(created);
    modifiableRootModel.inheritSdk();
    RootPolicy<Object> visitor=new RootPolicy<Object>(){
      @Override public Object visitLibraryOrderEntry(      LibraryOrderEntry libraryOrderEntry,      Object value){
        modifiableRootModel.removeOrderEntry(libraryOrderEntry);
        return value;
      }
      @Override public Object visitModuleOrderEntry(      ModuleOrderEntry moduleOrderEntry,      Object value){
        modifiableRootModel.removeOrderEntry(moduleOrderEntry);
        return value;
      }
    }
;
    for (    OrderEntry orderEntry : modifiableRootModel.getOrderEntries()) {
      orderEntry.accept(visitor,null);
    }
  }
}
