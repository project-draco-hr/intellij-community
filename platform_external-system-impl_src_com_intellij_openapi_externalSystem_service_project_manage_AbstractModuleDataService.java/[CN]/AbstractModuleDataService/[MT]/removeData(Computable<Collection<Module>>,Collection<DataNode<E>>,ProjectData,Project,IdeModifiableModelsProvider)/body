{
  final Collection<Module> toRemove=toRemoveComputable.compute();
  final List<Module> modules=new SmartList<Module>(toRemove);
  for (  DataNode<E> moduleDataNode : toIgnore) {
    final Module module=modelsProvider.findIdeModule(moduleDataNode.getData());
    ContainerUtil.addIfNotNull(modules,module);
  }
  if (modules.isEmpty()) {
    return;
  }
  ContainerUtil.removeDuplicates(modules);
  for (  Module module : modules) {
    if (module.isDisposed())     continue;
    unlinkModuleFromExternalSystem(module);
  }
  ruleOrphanModules(modules,project,projectData.getOwner(),new Consumer<List<Module>>(){
    @Override public void consume(    final List<Module> modules){
      for (      Module module : modules) {
        if (module.isDisposed())         continue;
        String path=module.getModuleFilePath();
        final ModifiableModuleModel moduleModel=modelsProvider.getModifiableModuleModel();
        moduleModel.disposeModule(module);
        ModuleBuilder.deleteModuleFile(path);
      }
    }
  }
);
}
