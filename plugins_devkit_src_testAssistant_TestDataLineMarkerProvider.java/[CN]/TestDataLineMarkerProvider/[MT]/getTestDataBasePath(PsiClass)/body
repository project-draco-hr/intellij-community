{
  final PsiAnnotation annotation=AnnotationUtil.findAnnotationInHierarchy(psiClass,Collections.singleton(TEST_DATA_PATH_ANNOTATION_QUALIFIED_NAME));
  if (annotation != null) {
    final PsiAnnotationMemberValue value=annotation.findAttributeValue(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME);
    if (value instanceof PsiExpression) {
      final Project project=value.getProject();
      final PsiConstantEvaluationHelper evaluationHelper=JavaPsiFacade.getInstance(project).getConstantEvaluationHelper();
      final Object constantValue=evaluationHelper.computeConstantExpression(value,false);
      if (constantValue instanceof String) {
        String path=(String)constantValue;
        if (path.contains(CONTENT_ROOT_VARIABLE)) {
          final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
          final VirtualFile file=psiClass.getContainingFile().getVirtualFile();
          if (file == null) {
            return null;
          }
          final VirtualFile contentRoot=fileIndex.getContentRootForFile(file);
          if (contentRoot == null)           return null;
          path=path.replace(CONTENT_ROOT_VARIABLE,contentRoot.getPath());
        }
        if (path.contains(PROJECT_ROOT_VARIABLE)) {
          final VirtualFile baseDir=project.getBaseDir();
          if (baseDir == null) {
            return null;
          }
          path=path.replace(PROJECT_ROOT_VARIABLE,baseDir.getPath());
        }
        return path;
      }
    }
  }
  return null;
}
