{
  final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)infos[0];
  final Collection<InspectionGadgetsFix> result=new ArrayList();
  final PsiElement parent=ParenthesesUtils.getParentSkipParentheses(polyadicExpression);
  if (parent instanceof PsiVariable) {
    final PsiVariable variable=(PsiVariable)parent;
    final InspectionGadgetsFix fix=createAddAnnotationFix(variable);
    result.add(fix);
  }
 else   if (parent instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)parent;
    final PsiExpression lhs=assignmentExpression.getLExpression();
    if (lhs instanceof PsiReferenceExpression) {
      final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)lhs;
      final PsiElement target=referenceExpression.resolve();
      if (target instanceof PsiModifierListOwner) {
        final PsiModifierListOwner modifierListOwner=(PsiModifierListOwner)target;
        final InspectionGadgetsFix fix=createAddAnnotationFix(modifierListOwner);
        result.add(fix);
      }
    }
  }
 else   if (parent instanceof PsiExpressionList) {
    final PsiElement grandParent=parent.getParent();
    if (grandParent instanceof PsiMethodCallExpression) {
      final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
      final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
      final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
      if (qualifierExpression instanceof PsiReferenceExpression) {
        final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)qualifierExpression;
        final PsiElement target=referenceExpression.resolve();
        if (target instanceof PsiModifierListOwner) {
          final PsiModifierListOwner modifierListOwner=(PsiModifierListOwner)target;
          result.add(createAddAnnotationFix(modifierListOwner));
        }
      }
    }
  }
  final PsiExpression[] operands=polyadicExpression.getOperands();
  for (  PsiExpression operand : operands) {
    final PsiModifierListOwner element1=getAnnotatableElement(operand);
    if (element1 != null) {
      final InspectionGadgetsFix fix=createAddAnnotationFix(element1);
      result.add(fix);
    }
  }
  final PsiElement expressionParent=PsiTreeUtil.getParentOfType(polyadicExpression,PsiReturnStatement.class,PsiExpressionList.class);
  if (!(expressionParent instanceof PsiExpressionList) && expressionParent != null) {
    final PsiMethod method=PsiTreeUtil.getParentOfType(expressionParent,PsiMethod.class);
    if (method != null) {
      final InspectionGadgetsFix fix=createAddAnnotationFix(method);
      result.add(fix);
    }
  }
  return result.toArray(new InspectionGadgetsFix[result.size()]);
}
