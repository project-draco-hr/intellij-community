{
  final List<SplitHunk> result=new ArrayList<SplitHunk>();
  final List<PatchLine> lines=hunk.getLines();
  int i=0;
  List<String> contextBefore=new ArrayList<String>();
  int newSize=0;
  int oldSize=0;
  while (i < lines.size()) {
    final int inheritedContext=contextBefore.size();
    final List<String> contextAfter=new ArrayList<String>();
    final List<BeforeAfter<List<String>>> steps=new ArrayList<BeforeAfter<List<String>>>();
    final int endIdx=readOne(lines,contextBefore,contextAfter,steps,i);
    result.add(new SplitHunk(hunk.getStartLineBefore() + i - inheritedContext - newSize,hunk.getStartLineAfter() + i - inheritedContext - oldSize,steps,contextAfter,contextBefore));
    for (    BeforeAfter<List<String>> step : steps) {
      newSize+=step.getAfter().size();
      oldSize+=step.getBefore().size();
    }
    i=endIdx;
    if (i < lines.size()) {
      contextBefore=new ArrayList<String>();
      contextBefore.addAll(contextAfter);
    }
  }
  return result;
}
