{
  Statement splitnode=getCandidateForSplitting(statement);
  if (splitnode == null) {
    return false;
  }
  StatEdge enteredge=splitnode.getPredecessorEdges(StatEdge.TYPE_REGULAR).iterator().next();
  Statement splitcopy=copyStatement(splitnode,null,new HashMap<>());
  initCopiedStatement(splitcopy);
  splitcopy.setParent(statement);
  statement.getStats().addWithKey(splitcopy,splitcopy.id);
  for (  StatEdge prededge : splitnode.getPredecessorEdges(Statement.STATEDGE_DIRECT_ALL)) {
    if (prededge.getSource() == enteredge.getSource() || prededge.closure == enteredge.getSource()) {
      splitnode.removePredecessor(prededge);
      prededge.getSource().changeEdgeNode(Statement.DIRECTION_FORWARD,prededge,splitcopy);
      splitcopy.addPredecessor(prededge);
    }
  }
  for (  StatEdge succ : splitnode.getSuccessorEdges(Statement.STATEDGE_DIRECT_ALL)) {
    splitcopy.addSuccessor(new StatEdge(succ.getType(),splitcopy,succ.getDestination(),succ.closure));
  }
  return true;
}
