{
  final DocumentationProvider provider=ApplicationManager.getApplication().runReadAction(new Computable<DocumentationProvider>(){
    @Override public DocumentationProvider compute(){
      return getProviderFromElement(myElement,myOriginalElement);
    }
  }
);
  if (provider instanceof ExternalDocumentationProvider) {
    final List<String> urls=ApplicationManager.getApplication().runReadAction(new NullableComputable<List<String>>(){
      @Override public List<String> compute(){
        final SmartPsiElementPointer originalElementPtr=myElement.getUserData(ORIGINAL_ELEMENT_KEY);
        final PsiElement originalElement=originalElementPtr != null ? originalElementPtr.getElement() : null;
        if (((ExternalDocumentationProvider)provider).hasDocumentationFor(myElement,originalElement)) {
          return provider.getUrlFor(myElement,originalElement);
        }
        return null;
      }
    }
);
    if (urls != null) {
      for (      String url : urls) {
        final String doc=((ExternalDocumentationProvider)provider).fetchExternalDocumentation(myProject,myElement,Collections.singletonList(url));
        if (doc != null) {
          myEffectiveUrl=url;
          return doc;
        }
      }
    }
  }
  long deadline=System.currentTimeMillis() + DOC_GENERATION_TIMEOUT_MILLISECONDS;
  do {
    final Disposable disposable=Disposer.newDisposable();
    try {
      ProgressIndicator progressIndicator=new StandardProgressIndicatorBase();
      ProgressIndicatorUtils.forceWriteActionPriority(progressIndicator,disposable);
      final Ref<String> result=new Ref<String>();
      ProgressManager.getInstance().runProcess(new Runnable(){
        @Override public void run(){
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            @Override public void run(){
              final SmartPsiElementPointer originalElement=myElement.getUserData(ORIGINAL_ELEMENT_KEY);
              String doc=provider.generateDoc(myElement,originalElement != null ? originalElement.getElement() : null);
              result.set(doc);
            }
          }
);
        }
      }
,progressIndicator);
      return result.get();
    }
 catch (    ProcessCanceledException ignored) {
    }
 finally {
      Disposer.dispose(disposable);
    }
  }
 while (System.currentTimeMillis() < deadline);
  return null;
}
