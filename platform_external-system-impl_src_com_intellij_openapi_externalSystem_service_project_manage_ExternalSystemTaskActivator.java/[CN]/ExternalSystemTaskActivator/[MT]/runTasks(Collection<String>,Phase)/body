{
  final ExternalProjectsStateProvider stateProvider=ExternalProjectsManager.getInstance(myProject).getStateProvider();
  final Queue<Pair<ProjectSystemId,ExternalSystemTaskExecutionSettings>> tasksQueue=new LinkedList<Pair<ProjectSystemId,ExternalSystemTaskExecutionSettings>>();
  Map<ProjectSystemId,Map<String,RunnerAndConfigurationSettings>> lazyConfigurationsMap=new FactoryMap<ProjectSystemId,Map<String,RunnerAndConfigurationSettings>>(){
    @Nullable @Override protected Map<String,RunnerAndConfigurationSettings> create(    ProjectSystemId key){
      final AbstractExternalSystemTaskConfigurationType configurationType=ExternalSystemUtil.findConfigurationType(key);
      if (configurationType == null)       return null;
      return ContainerUtil.map2Map(RunManager.getInstance(myProject).getConfigurationSettingsList(configurationType),new Function<RunnerAndConfigurationSettings,Pair<String,RunnerAndConfigurationSettings>>(){
        @Override public Pair<String,RunnerAndConfigurationSettings> fun(        RunnerAndConfigurationSettings configurationSettings){
          return Pair.create(configurationSettings.getName(),configurationSettings);
        }
      }
);
    }
  }
;
  for (  final ExternalProjectsStateProvider.TasksActivation activation : stateProvider.getAllTasksActivation()) {
    final boolean hashPath=modules.contains(activation.projectPath);
    final Set<String> tasks=ContainerUtil.newLinkedHashSet();
    for (    Phase phase : phases) {
      if (hashPath || (phase.isSyncPhase() && isShareSameRootPath(modules,activation)))       ContainerUtil.addAll(tasks,activation.state.getTasks(phase));
    }
    if (tasks.isEmpty())     continue;
    for (Iterator<String> iterator=tasks.iterator(); iterator.hasNext(); ) {
      String task=iterator.next();
      if (task.length() > RUN_CONFIGURATION_TASK_PREFIX.length() && task.startsWith(RUN_CONFIGURATION_TASK_PREFIX)) {
        iterator.remove();
        final String configurationName=task.substring(RUN_CONFIGURATION_TASK_PREFIX.length());
        Map<String,RunnerAndConfigurationSettings> settings=lazyConfigurationsMap.get(activation.systemId);
        if (settings == null)         continue;
        RunnerAndConfigurationSettings configurationSettings=settings.get(configurationName);
        if (configurationSettings == null)         continue;
        final RunConfiguration runConfiguration=configurationSettings.getConfiguration();
        if (configurationName.equals(configurationSettings.getName()) && runConfiguration instanceof ExternalSystemRunConfiguration) {
          tasksQueue.add(Pair.create(activation.systemId,((ExternalSystemRunConfiguration)runConfiguration).getSettings()));
        }
      }
    }
    if (tasks.isEmpty())     continue;
    ExternalSystemTaskExecutionSettings executionSettings=new ExternalSystemTaskExecutionSettings();
    executionSettings.setExternalSystemIdString(activation.systemId.toString());
    executionSettings.setExternalProjectPath(activation.projectPath);
    executionSettings.getTaskNames().addAll(tasks);
    tasksQueue.add(Pair.create(activation.systemId,executionSettings));
  }
  return runTasksQueue(tasksQueue);
}
