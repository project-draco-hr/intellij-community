{
  myProject=project;
  myClassToBindProperty=new ClassToBindProperty(project);
  myBindingProperty=new BindingProperty(project);
  myBorderProperty=new BorderProperty(project);
  myPropertyEditorListener=new MyPropertyEditorListener();
  myLafManagerListener=new MyLafManagerListener();
  myComponentTree=componentTree;
  myProperties=new ArrayList<>();
  myExpandedProperties=new HashSet<>();
  myModel=new MyModel();
  setModel(myModel);
  setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myCellRenderer=new MyCompositeTableCellRenderer();
  myCellEditor=new MyCellEditor();
  addMouseListener(new MouseAdapter(){
    public void mousePressed(    final MouseEvent e){
      final int row=rowAtPoint(e.getPoint());
      final int column=columnAtPoint(e.getPoint());
      if (row == -1) {
        return;
      }
      final Property property=myProperties.get(row);
      int indent=getPropertyIndentDepth(property) * getPropertyIndentWidth();
      final Rectangle rect=getCellRect(row,convertColumnIndexToView(0),false);
      Component rendererComponent=myCellRenderer.getTableCellRendererComponent(PropertyInspectorTable.this,property,false,false,row,column);
      if (!rect.contains(e.getX(),e.getY()) || !(rendererComponent instanceof ColoredTableCellRenderer) || ((ColoredTableCellRenderer)rendererComponent).findFragmentAt(e.getX()) != SimpleColoredComponent.FRAGMENT_ICON || e.getX() < rect.x + indent) {
        return;
      }
      final Property[] children=getPropChildren(property);
      if (children.length == 0) {
        return;
      }
      if (isPropertyExpanded(property,property.getParent())) {
        collapseProperty(row);
      }
 else {
        expandProperty(row);
      }
    }
  }
);
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      int row=rowAtPoint(e.getPoint());
      int column=columnAtPoint(e.getPoint());
      if (row >= 0 && column == 0) {
        final Property property=myProperties.get(row);
        if (getPropChildren(property).length == 0) {
          startEditing(row);
          return true;
        }
      }
      return false;
    }
  }
.installOn(this);
  final AnAction quickJavadocAction=ActionManager.getInstance().getAction(IdeActions.ACTION_QUICK_JAVADOC);
  new ShowJavadocAction().registerCustomShortcutSet(quickJavadocAction.getShortcutSet(),this);
  PopupHandler.installPopupHandler(this,(ActionGroup)ActionManager.getInstance().getAction(IdeActions.GROUP_GUI_DESIGNER_PROPERTY_INSPECTOR_POPUP),ActionPlaces.GUI_DESIGNER_PROPERTY_INSPECTOR_POPUP,ActionManager.getInstance());
}
