{
  if (!(scope instanceof PyClass) && !(scope instanceof PyFile) && !(scope instanceof PyFunction)) {
    return Collections.emptyList();
  }
  final Set<String> variables=new HashSet<String>();
  scope.acceptChildren(new PyRecursiveElementVisitor(){
    @Override public void visitPyTargetExpression(    @NotNull final PyTargetExpression node){
      variables.add(node.getName());
    }
    @Override public void visitPyParameter(    @NotNull final PyParameter node){
      if (node instanceof PyNamedParameter) {
        variables.add(node.getName());
      }
    }
    @Override public void visitPyStatement(    @NotNull final PyStatement node){
      if ((node instanceof PyAssignmentStatement) || (scope instanceof PyFunction)) {
        node.acceptChildren(this);
      }
    }
    @Override public void visitPyFunction(    @NotNull final PyFunction node){
    }
    @Override public void visitPyClass(    @NotNull final PyClass node){
    }
  }
);
  return variables;
}
