{
  final String projectKey=getProjectKey(project);
  final StateStorageManager manager=((ProjectEx)project).getStateStore().getStateStorageManager();
  manager.registerStreamProvider(new MyStreamProvider(){
    @Override public void saveContent(    String fileSpec,    @NotNull InputStream content,    long size,    RoamingType roamingType,    boolean async) throws IOException {
      saveFileContent(content,size,createBuilder(fileSpec,RoamingType.PER_PLATFORM,projectKey),async);
    }
    @Override protected IdeaServerUrlBuilder createBuilderInt(    final String fileSpec){
      return createBuilder(fileSpec,RoamingType.PER_PLATFORM,projectKey);
    }
    @Override public InputStream loadContent(    final String fileSpec,    final RoamingType roamingType) throws IOException {
      return loadUserPreferences(createBuilder(fileSpec,RoamingType.PER_PLATFORM,projectKey));
    }
  }
,RoamingType.PER_PLATFORM);
  manager.registerStreamProvider(new MyStreamProvider(){
    @Override public void saveContent(    final String fileSpec,    @NotNull final InputStream content,    final long size,    final RoamingType roamingType,    boolean async) throws IOException {
      saveFileContent(content,size,createBuilder(fileSpec,RoamingType.PER_USER,projectKey),async);
    }
    @Override protected IdeaServerUrlBuilder createBuilderInt(    final String fileSpec){
      return createBuilder(fileSpec,RoamingType.PER_USER,projectKey);
    }
    @Override public InputStream loadContent(    final String fileSpec,    final RoamingType roamingType) throws IOException {
      if (StoragePathMacros.WORKSPACE_FILE.equals(fileSpec)) {
        return loadUserPreferences(createBuilderInt(fileSpec));
      }
 else {
        return null;
      }
    }
  }
,RoamingType.PER_USER);
}
