{
  if (path == null)   return;
  final InspectionConfigTreeNode node=(InspectionConfigTreeNode)path.getLastPathComponent();
  final Descriptor descriptor=node.getDescriptor();
  if (descriptor != null) {
    final String description=descriptor.loadDescription();
    if (description != null) {
      try {
        final HintHint hintHint=new HintHint(myBrowser,new Point(0,0));
        hintHint.setFont(myBrowser.getFont());
        myBrowser.read(new StringReader(SearchUtil.markup(HintUtil.prepareHintText(description,hintHint),myProfileFilter.getFilter())),null);
      }
 catch (      IOException e2) {
        try {
          myBrowser.read(new StringReader(XmlStringUtil.wrapInHtml("<b>" + UNDER_CONSTRUCTION + "</b>")),null);
        }
 catch (        IOException e1) {
        }
      }
catch (      Throwable t) {
        LOG.error("Failed to load description for: " + descriptor.getToolWrapper().getTool().getClass() + "; description: "+ description,t);
      }
    }
 else {
      try {
        myBrowser.read(new StringReader(EMPTY_HTML),null);
      }
 catch (      IOException e1) {
      }
    }
    myOptionsPanel.removeAll();
    final NamedScope scope=node.getScope(myProjectProfileManager.getProject());
    if (scope != null || node.isInspectionNode()) {
      final HighlightDisplayKey key=descriptor.getKey();
      final LevelChooserAction chooser=new LevelChooserAction(((SeverityProvider)mySelectedProfile.getProfileManager()).getOwnSeverityRegistrar()){
        @Override protected void onChosen(        final HighlightSeverity severity){
          final HighlightDisplayLevel level=HighlightDisplayLevel.find(severity);
          final Project project=myProjectProfileManager.getProject();
          final boolean toUpdate=mySelectedProfile.getErrorLevel(key,scope,project) != level;
          mySelectedProfile.setErrorLevel(key,level,node.isInspectionNode() || node.isByDefault() ? -1 : node.getParent().getIndex(node),project);
          if (toUpdate)           node.dropCache();
        }
      }
;
      chooser.setChosen(mySelectedProfile.getErrorLevel(key,scope,myProjectProfileManager.getProject()).getSeverity());
      final JPanel withSeverity=new JPanel(new GridBagLayout());
      withSeverity.add(new JLabel(InspectionsBundle.message("inspection.severity")),new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,10,10),0,0));
      withSeverity.add(chooser.createCustomComponent(chooser.getTemplatePresentation()),new GridBagConstraints(1,0,1,1,1.0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,10,0),0,0));
      final JComponent comp=descriptor.getState().getAdditionalConfigPanel();
      withSeverity.add(comp,new GridBagConstraints(0,1,2,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
      myOptionsPanel.add(withSeverity,BorderLayout.CENTER);
    }
    myOptionsPanel.revalidate();
    GuiUtils.enableChildren(myOptionsPanel,node.isChecked());
  }
 else {
    initOptionsAndDescriptionPanel();
  }
  myOptionsPanel.repaint();
}
