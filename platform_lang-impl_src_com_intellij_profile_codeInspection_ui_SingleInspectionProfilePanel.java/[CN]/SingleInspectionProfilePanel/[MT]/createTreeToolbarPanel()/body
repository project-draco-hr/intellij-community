{
  final CommonActionsManager actionManager=CommonActionsManager.getInstance();
  DefaultActionGroup actions=new DefaultActionGroup();
  actions.add(new InspectionFilterAction(myProfile,myInspectionsFilter,myProjectProfileManager.getProject(),myProfileFilter));
  actions.addSeparator();
  actions.add(actionManager.createExpandAllAction(myTreeExpander,myTreeTable));
  actions.add(actionManager.createCollapseAllAction(myTreeExpander,myTreeTable));
  actions.add(new DumbAwareAction("Reset to Empty","Reset to empty",AllIcons.Actions.Reset_to_empty){
    @Override public void update(    @NotNull AnActionEvent e){
      e.getPresentation().setEnabled(myProfile != null && myProfile.isExecutable(myProjectProfileManager.getProject()));
    }
    @Override public void actionPerformed(    @NotNull AnActionEvent e){
      myProfile.resetToEmpty(e.getProject());
      loadDescriptorsConfigs(false);
      postProcessModification();
    }
  }
);
  actions.add(new AdvancedSettingsAction(myProjectProfileManager.getProject(),myRoot){
    @Override protected InspectionProfileImpl getInspectionProfile(){
      return myProfile;
    }
    @Override protected void postProcessModification(){
      loadDescriptorsConfigs(true);
      SingleInspectionProfilePanel.this.postProcessModification();
    }
  }
);
  final ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,actions,true);
  actionToolbar.setTargetComponent(this);
  return actionToolbar;
}
