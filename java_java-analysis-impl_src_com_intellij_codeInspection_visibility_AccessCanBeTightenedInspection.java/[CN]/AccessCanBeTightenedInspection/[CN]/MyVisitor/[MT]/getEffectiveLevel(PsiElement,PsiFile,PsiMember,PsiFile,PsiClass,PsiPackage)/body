{
  PsiClass aClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
  if (memberClass != null && PsiTreeUtil.isAncestor(aClass,memberClass,false) || aClass != null && PsiTreeUtil.isAncestor(memberClass,aClass,false)) {
    if (isInReferenceList(aClass.getModifierList(),member) || isInReferenceList(aClass.getImplementsList(),member) || isInReferenceList(aClass.getExtendsList(),member)) {
      return suggestPackageLocal(member);
    }
    return myVisibilityInspection.SUGGEST_PRIVATE_FOR_INNERS || !isInnerClass(memberClass) ? PsiUtil.ACCESS_LEVEL_PRIVATE : suggestPackageLocal(member);
  }
  PsiDirectory directory=file.getContainingDirectory();
  PsiPackage aPackage=directory == null ? null : JavaDirectoryService.getInstance().getPackage(directory);
  if (aPackage == memberPackage || aPackage != null && memberPackage != null && Comparing.strEqual(aPackage.getQualifiedName(),memberPackage.getQualifiedName())) {
    return suggestPackageLocal(element);
  }
  if (aClass != null && memberClass != null && aClass.isInheritor(memberClass,true)) {
    PsiElement resolved=element instanceof PsiReference ? ((PsiReference)element).resolve() : null;
    boolean isConstructor=resolved instanceof PsiClass && element.getParent() instanceof PsiNewExpression || resolved instanceof PsiMethod && ((PsiMethod)resolved).isConstructor();
    if (!isConstructor) {
      return PsiUtil.ACCESS_LEVEL_PROTECTED;
    }
  }
  return PsiUtil.ACCESS_LEVEL_PUBLIC;
}
