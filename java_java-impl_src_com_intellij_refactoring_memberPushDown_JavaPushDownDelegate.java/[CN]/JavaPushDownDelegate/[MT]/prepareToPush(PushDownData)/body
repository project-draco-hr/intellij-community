{
  final Set<PsiMember> movedMembers=new HashSet<PsiMember>();
  for (  MemberInfoBase<? extends PsiElement> memberInfo : pushDownData.getMembersToMove()) {
    movedMembers.add((PsiMember)memberInfo.getMember());
  }
  for (  MemberInfoBase<? extends PsiElement> memberInfo : pushDownData.getMembersToMove()) {
    final PsiElement member=memberInfo.getMember();
    member.accept(new JavaRecursiveElementVisitor(){
      @Override public void visitReferenceExpression(      PsiReferenceExpression expression){
        encodeRef((PsiClass)pushDownData.getSourceClass(),expression,movedMembers,expression);
        super.visitReferenceExpression(expression);
      }
      @Override public void visitNewExpression(      PsiNewExpression expression){
        final PsiJavaCodeReferenceElement classReference=expression.getClassReference();
        if (classReference != null) {
          encodeRef((PsiClass)pushDownData.getSourceClass(),classReference,movedMembers,expression);
        }
        super.visitNewExpression(expression);
      }
      @Override public void visitTypeElement(      final PsiTypeElement type){
        final PsiJavaCodeReferenceElement referenceElement=type.getInnermostComponentReferenceElement();
        if (referenceElement != null) {
          encodeRef((PsiClass)pushDownData.getSourceClass(),referenceElement,movedMembers,type);
        }
        super.visitTypeElement(type);
      }
    }
);
    ChangeContextUtil.encodeContextInfo(member,false);
  }
}
