{
  final List<PsiMethod> result=new ArrayList();
  SuperMethodsSearch.search(method,null,true,false).forEach(new Processor<MethodSignatureBackedByPsiMethod>(){
    @Override public boolean process(    MethodSignatureBackedByPsiMethod method){
      result.add(method.getMethod());
      return true;
    }
  }
);
  Collections.sort(result,new Comparator<PsiMethod>(){
    @Override public int compare(    PsiMethod method1,    PsiMethod method2){
      final PsiClass aClass1=method1.getContainingClass();
      final PsiClass aClass2=method2.getContainingClass();
      if (aClass1 == null || aClass2 == null || aClass1.equals(aClass2)) {
        return 0;
      }
 else       if (aClass1.isInheritor(aClass2,true)) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
);
  return result;
}
