{
  try {
    ConsoleDecompiler decompiler=new ConsoleDecompiler(new HashMap<String,Object>(){
{
        put("log","warn");
        put("ren","1");
        put(IFernflowerPreferences.HIDE_DEFAULT_CONSTRUCTOR,"1");
        put(IFernflowerPreferences.DECOMPILE_GENERIC_SIGNATURES,"0");
        put(IFernflowerPreferences.IDEA_NOT_NULL_ANNOTATION,"1");
        put(IFernflowerPreferences.LAMBDA_TO_ANONYMOUS_CLASS,"0");
        put(IFernflowerPreferences.USE_DEBUG_VARNAMES,"0");
        put(IFernflowerPreferences.NEW_LINE_SEPARATOR,"0");
      }
    }
);
    decompiler.addSpace(file,true);
    String current_path=new File(".").getCanonicalPath().toString();
    String file_class_name=file.getName();
    String file_name=file_class_name.substring(0,file_class_name.lastIndexOf(".class"));
    String file_java_name=file_name + ".java";
    File reference_file=new File(current_path + "/test/unit/results/" + file_name+ ".dec");
    File temp_dir=new File(Files.createTempDirectory("tempdec_" + file_name).toString());
    decompiler.decompileContext(temp_dir);
    String decompiled_content=new String(Files.readAllBytes(new File(temp_dir,file_java_name).toPath()),"UTF-8");
    String reference_content=new String(Files.readAllBytes(reference_file.toPath()),"UTF-8");
    assertEquals(decompiled_content,reference_content);
  }
 catch (  Exception ex) {
    System.out.println("ERROR: testing file " + file.getCanonicalPath());
    ex.printStackTrace();
  }
}
