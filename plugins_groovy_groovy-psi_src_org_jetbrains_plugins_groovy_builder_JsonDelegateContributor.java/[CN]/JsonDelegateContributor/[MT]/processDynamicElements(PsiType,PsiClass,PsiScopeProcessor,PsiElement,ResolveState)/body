{
  if (clazz == null)   return;
  String name=ResolveUtil.getNameHint(processor);
  if (name == null)   return;
  if (!ResolveUtil.shouldProcessMethods(processor.getHint(ElementClassHint.KEY)))   return;
  JavaPsiFacade facade=JavaPsiFacade.getInstance(place.getProject());
  GrLightMethodBuilder method;
  PsiClassType genericType;
  method=createMethod(name,clazz,place);
  genericType=facade.getElementFactory().createType(method.addTypeParameter("T"));
  method.addParameter("value",genericType,false);
  method.setReturnType(genericType);
  if (!processor.execute(method,state))   return;
  method=createMethod(name,clazz,place);
  genericType=facade.getElementFactory().createType(method.addTypeParameter("T"));
  method.addParameter("values",genericType.createArrayType(),false);
  method.addAndGetParameter("c",GROOVY_LANG_CLOSURE,false).putUserData(DELEGATES_TO_KEY,DELEGATE_FQN);
  method.setReturnType(TypesUtil.createListType(place,genericType));
  if (!processor.execute(method,state))   return;
  method=createMethod(name,clazz,place);
  genericType=facade.getElementFactory().createType(method.addTypeParameter("T"));
  method.addParameter("values",TypesUtil.createIterableType(place,genericType),false);
  method.addAndGetParameter("c",GROOVY_LANG_CLOSURE,false).putUserData(DELEGATES_TO_KEY,DELEGATE_FQN);
  method.setReturnType(TypesUtil.createListType(place,genericType));
  if (!processor.execute(method,state))   return;
  method=createMethod(name,clazz,place);
  genericType=facade.getElementFactory().createType(method.addTypeParameter("T"));
  method.addAndGetParameter("values",new PsiEllipsisType(genericType),false);
  method.setReturnType(TypesUtil.createListType(place,genericType));
  processor.execute(method,state);
}
