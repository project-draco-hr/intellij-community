{
  ByteArrayOutputStream afterStream=new ByteArrayOutputStream();
  ByteArrayOutputStream beforeStream=new ByteArrayOutputStream();
  checkNotEOF(iterator);
  try {
    String next=iterator.next();
    Matcher literalMatcher=ourGitBinaryLineSize.matcher(next);
    if (literalMatcher.matches()) {
      getContent(iterator,afterStream,literalMatcher.group(1));
    }
    if (iterator.hasNext() && parsedStatus != FileStatus.ADDED) {
      next=iterator.next();
      if (StringUtil.isEmptyOrSpaces(next) && iterator.hasNext()) {
        next=iterator.next();
      }
      if (literalMatcher.reset(next).matches()) {
        getContent(iterator,beforeStream,literalMatcher.group(1));
      }
 else {
        iterator.previous();
      }
    }
    return new BinaryFilePatch(parsedStatus == FileStatus.ADDED ? null : beforeStream.toByteArray(),parsedStatus == FileStatus.DELETED ? null : afterStream.toByteArray());
  }
 catch (  Exception e) {
    throw new PatchSyntaxException(iterator.previousIndex(),e.getMessage());
  }
}
