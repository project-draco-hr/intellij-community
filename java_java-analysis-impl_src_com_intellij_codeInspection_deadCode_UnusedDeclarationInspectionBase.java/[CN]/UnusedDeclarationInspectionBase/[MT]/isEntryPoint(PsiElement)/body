{
  final Project project=element.getProject();
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
  if (element instanceof PsiMethod && isAddMainsEnabled() && PsiClassImplUtil.isMainOrPremainMethod((PsiMethod)element)) {
    return true;
  }
  if (element instanceof PsiClass) {
    PsiClass aClass=(PsiClass)element;
    final PsiClass applet=psiFacade.findClass("java.applet.Applet",GlobalSearchScope.allScope(project));
    if (isAddAppletEnabled() && applet != null && aClass.isInheritor(applet,true)) {
      return true;
    }
    final PsiClass servlet=psiFacade.findClass("javax.servlet.Servlet",GlobalSearchScope.allScope(project));
    if (isAddServletEnabled() && servlet != null && aClass.isInheritor(servlet,true)) {
      return true;
    }
    if (isAddMainsEnabled() && PsiMethodUtil.hasMainMethod(aClass))     return true;
  }
  if (element instanceof PsiModifierListOwner) {
    final EntryPointsManager entryPointsManager=EntryPointsManager.getInstance(project);
    if (entryPointsManager.isEntryPoint(element))     return true;
  }
  for (  EntryPoint extension : myExtensions) {
    if (extension.isSelected() && extension.isEntryPoint(element)) {
      return true;
    }
  }
  return isImplicitUsage(element);
}
