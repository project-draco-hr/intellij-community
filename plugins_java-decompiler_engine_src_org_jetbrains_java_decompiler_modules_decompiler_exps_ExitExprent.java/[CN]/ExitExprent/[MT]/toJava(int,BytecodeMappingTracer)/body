{
  tracer.addMapping(bytecode);
  if (exittype == EXIT_RETURN) {
    StringBuilder buffer=new StringBuilder();
    if (rettype.type != CodeConstants.TYPE_VOID) {
      buffer.append(" ");
      ExprProcessor.getCastedExprent(value,rettype,buffer,indent,false,tracer);
    }
    return "return" + buffer.toString();
  }
 else {
    MethodWrapper meth=(MethodWrapper)DecompilerContext.getProperty(DecompilerContext.CURRENT_METHOD_WRAPPER);
    ClassNode node=((ClassNode)DecompilerContext.getProperty(DecompilerContext.CURRENT_CLASS_NODE));
    if (meth != null && node != null) {
      StructExceptionsAttribute attr=(StructExceptionsAttribute)meth.methodStruct.getAttributes().getWithKey("Exceptions");
      if (attr != null) {
        String classname=null;
        for (int i=0; i < attr.getThrowsExceptions().size(); i++) {
          String excclassname=attr.getExcClassname(i,node.classStruct.getPool());
          if ("java/lang/Throwable".equals(excclassname)) {
            classname=excclassname;
            break;
          }
 else           if ("java/lang/Exception".equals(excclassname)) {
            classname=excclassname;
          }
        }
        if (classname != null) {
          VarType exctype=new VarType(classname,true);
          StringBuilder buffer=new StringBuilder();
          ExprProcessor.getCastedExprent(value,exctype,buffer,indent,false,tracer);
          return "throw " + buffer.toString();
        }
      }
    }
    return "throw " + value.toJava(indent,tracer);
  }
}
