{
  if (usedInInnerClass) {
    return;
  }
  final boolean wasInInnerClass=inInnerClass;
  if (!inInnerClass) {
    inInnerClass=true;
    if (aClass instanceof PsiAnonymousClass) {
      final PsiExpressionList argumentList=((PsiAnonymousClass)aClass).getArgumentList();
      if (argumentList != null) {
        for (        PsiClass localAndAnonymousClasses : PsiTreeUtil.findChildrenOfType(argumentList,PsiClass.class)) {
          localAndAnonymousClasses.accept(this);
        }
      }
    }
    PsiElement child=aClass.getLBrace();
    while (child != null) {
      child.accept(this);
      child=child.getNextSibling();
    }
  }
 else {
    inInnerClass=true;
    super.visitClass(aClass);
  }
  inInnerClass=wasInInnerClass;
}
