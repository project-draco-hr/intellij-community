{
  if (method.getDocComment() != null) {
    usages.add(new ConstructorJavadocUsageInfo(method,descriptor));
  }
  final String newVisibility=descriptor.getNewVisibility();
  if (newVisibility != null) {
    usages.add(new BeanClassVisibilityUsageInfo(descriptor.getExistingClass(),usages.toArray(UsageInfo.EMPTY_ARRAY),newVisibility,descriptor));
  }
  if (!descriptor.isUseExistingClass()) {
    usages.add(new FixableUsageInfo(method){
      @Override public void fixUsage() throws IncorrectOperationException {
        final PsiClass psiClass=descriptor.getExistingClass();
        for (        PsiReference reference : ReferencesSearch.search(method)) {
          final PsiElement place=reference.getElement();
          VisibilityUtil.escalateVisibility(psiClass,place);
          for (          PsiMethod constructor : psiClass.getConstructors()) {
            VisibilityUtil.escalateVisibility(constructor,place);
          }
        }
      }
    }
);
  }
}
