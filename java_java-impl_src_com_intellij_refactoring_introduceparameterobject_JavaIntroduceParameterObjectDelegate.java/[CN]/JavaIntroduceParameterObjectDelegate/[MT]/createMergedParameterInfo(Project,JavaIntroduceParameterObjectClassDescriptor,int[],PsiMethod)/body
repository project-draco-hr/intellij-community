{
  final PsiCodeBlock body=method.getBody();
  final String baseParameterName=StringUtil.decapitalize(descriptor.getClassName());
  final String paramName=body != null ? JavaCodeStyleManager.getInstance(project).suggestUniqueVariableName(baseParameterName,body.getLBrace(),true) : JavaCodeStyleManager.getInstance(project).propertyNameToVariableName(baseParameterName,VariableKind.PARAMETER);
  final boolean lastVarargsToMerge=method.isVarArgs() && ArrayUtil.find(paramsToMerge,method.getParameterList().getParametersCount() - 1) > -1;
  final String classTypeText=descriptor.createFakeClassTypeText();
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  return new ParameterInfoImpl(-1,paramName,facade.getElementFactory().createTypeFromText(classTypeText,method),null){
    @Override public PsiExpression getValue(    final PsiCallExpression expr) throws IncorrectOperationException {
      final String qualifiedName=StringUtil.getQualifiedName(descriptor.getPackageName(),descriptor.getClassName());
      final PsiClass existingClass=facade.findClass(qualifiedName,expr.getResolveScope());
      if (existingClass == null)       return null;
      final String mergedParam=getMergedParam(expr,existingClass,paramsToMerge,method,lastVarargsToMerge);
      return (PsiExpression)JavaCodeStyleManager.getInstance(project).shortenClassReferences(facade.getElementFactory().createExpressionFromText(mergedParam,expr));
    }
  }
;
}
