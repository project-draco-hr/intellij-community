{
  final LocalSearchScope localSearchScope=new LocalSearchScope(overridingMethod);
  final PsiParameter[] params=overridingMethod.getParameterList().getParameters();
  final PsiParameter parameter=params[parameterInfo.getOldIndex()];
  final String setter=classDescriptor.getSetterName(parameterInfo,overridingMethod);
  final String getter=classDescriptor.getGetterName(parameterInfo,overridingMethod);
  final Accessor[] accessor=new Accessor[]{null};
  ReferencesSearch.search(parameter,localSearchScope).forEach(new Processor<PsiReference>(){
    @Override public boolean process(    PsiReference reference){
      final PsiElement refElement=reference.getElement();
      if (refElement instanceof PsiReferenceExpression) {
        final PsiReferenceExpression paramUsage=(PsiReferenceExpression)refElement;
        if (RefactoringUtil.isPlusPlusOrMinusMinus(paramUsage.getParent())) {
          accessor[0]=Accessor.Setter;
          usages.add(new ReplaceParameterIncrementDecrement(paramUsage,mergedParamName,setter,getter));
        }
 else         if (RefactoringUtil.isAssignmentLHS(paramUsage)) {
          accessor[0]=Accessor.Setter;
          usages.add(new ReplaceParameterAssignmentWithCall(paramUsage,mergedParamName,setter,getter));
        }
 else {
          if (accessor[0] == null) {
            accessor[0]=Accessor.Getter;
          }
          usages.add(new ReplaceParameterReferenceWithCall(paramUsage,mergedParamName,getter));
        }
      }
      return true;
    }
  }
);
  return accessor[0];
}
