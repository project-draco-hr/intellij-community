{
  final ParameterInfoImpl[] parameterInfos=descriptor.getParamsToMerge();
  final PsiClass existingClass=descriptor.getExistingClass();
  final boolean useExisting=descriptor.isGenerateAccessors() || !(descriptor.isUseExistingClass() && existingClass != null);
  final PsiParameter[] psiParameters=method.getParameterList().getParameters();
  for (int i=0; i < parameterInfos.length; i++) {
    int oldParamIdx=parameterInfos[i].getOldIndex();
    final IntroduceParameterObjectDelegate.Accessor accessor=accessors[i];
    if (accessor != null) {
      final ParameterInfoImpl parameterInfo=parameterInfos[i];
      final PsiParameter parameter=psiParameters[oldParamIdx];
      final PsiField field=descriptor.getField(parameterInfo);
      final String getter=descriptor.getGetter(parameterInfo);
      if (getter == null) {
        usages.add(new AppendAccessorsUsageInfo(parameter,existingClass,useExisting,parameterInfo,true,field));
      }
      if (accessor == IntroduceParameterObjectDelegate.Accessor.Setter && descriptor.getSetter(parameterInfo) == null) {
        usages.add(new AppendAccessorsUsageInfo(parameter,existingClass,useExisting,parameterInfo,false,field));
      }
    }
  }
  final String newVisibility=descriptor.getNewVisibility();
  if (newVisibility != null) {
    usages.add(new BeanClassVisibilityUsageInfo(existingClass,usages.toArray(UsageInfo.EMPTY_ARRAY),newVisibility,descriptor));
  }
  usages.add(new ConstructorJavadocUsageInfo(method,descriptor));
  if (!descriptor.isUseExistingClass()) {
    usages.add(new FixableUsageInfo(method){
      @Override public void fixUsage() throws IncorrectOperationException {
        final PsiClass psiClass=descriptor.getExistingClass();
        for (        PsiReference reference : ReferencesSearch.search(method)) {
          final PsiElement place=reference.getElement();
          VisibilityUtil.escalateVisibility(psiClass,place);
          for (          PsiMethod constructor : psiClass.getConstructors()) {
            VisibilityUtil.escalateVisibility(constructor,place);
          }
        }
      }
    }
);
  }
}
