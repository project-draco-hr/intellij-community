{
  if (callExpression instanceof PsiCallExpression) {
    final PsiCallExpression expr=(PsiCallExpression)callExpression;
    final JavaPsiFacade facade=JavaPsiFacade.getInstance(expr.getProject());
    final String qualifiedName=StringUtil.getQualifiedName(descriptor.getPackageName(),descriptor.getClassName());
    final PsiClass existingClass=facade.findClass(qualifiedName,expr.getResolveScope());
    if (existingClass == null)     return null;
    final PsiExpressionList argumentList=expr.getArgumentList();
    if (argumentList == null)     return null;
    final PsiExpression[] args=argumentList.getExpressions();
    StringBuilder newExpression=new StringBuilder();
    final JavaResolveResult resolvant=expr.resolveMethodGenerics();
    final PsiSubstitutor substitutor=resolvant.getSubstitutor();
    newExpression.append("new ").append(JavaPsiFacade.getElementFactory(expr.getProject()).createType(existingClass,substitutor).getCanonicalText());
    newExpression.append('(');
    newExpression.append(getMergedArgs(descriptor,oldMethodParameters,args));
    newExpression.append(')');
    return JavaCodeStyleManager.getInstance(callExpression.getProject()).shortenClassReferences(facade.getElementFactory().createExpressionFromText(newExpression.toString(),expr));
  }
  return null;
}
