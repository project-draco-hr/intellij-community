{
  super.setUp();
  myTrunkUrl=myRepoUrl + "/trunk";
  myBranchUrl=myRepoUrl + "/branch";
  myBranchVcsRoot=new File(myTempDirFixture.getTempDirPath(),"branch");
  myBranchVcsRoot.mkdir();
  myProjectLevelVcsManager=(ProjectLevelVcsManagerImpl)ProjectLevelVcsManager.getInstance(myProject);
  myProjectLevelVcsManager.setDirectoryMapping(myBranchVcsRoot.getAbsolutePath(),SvnVcs.VCS_NAME);
  VirtualFile vcsRoot=LocalFileSystem.getInstance().findFileByIoFile(myBranchVcsRoot);
  Node node=new Node(vcsRoot,SVNURL.parseURIEncoded(myBranchUrl),SVNURL.parseURIEncoded(myRepoUrl));
  RootUrlInfo root=new RootUrlInfo(node,WorkingCopyFormat.ONE_DOT_SIX,vcsRoot,null);
  myWCInfo=new WCInfo(root,true,Depth.INFINITY);
  myMergeContext=new MergeContext(SvnVcs.getInstance(myProject),myTrunkUrl,myWCInfo,SVNPathUtil.tail(myTrunkUrl),vcsRoot);
  myOneShotMergeInfoHelper=new OneShotMergeInfoHelper(myMergeContext);
  myVcs=SvnVcs.getInstance(myProject);
  myVcs.getSvnConfiguration().setCheckNestedForQuickMerge(true);
  enableSilentOperation(VcsConfiguration.StandardConfirmation.ADD);
  enableSilentOperation(VcsConfiguration.StandardConfirmation.REMOVE);
  final String repoUrl=SVNURL.parseURIDecoded(myRepoUrl).toString();
  myWCInfoWithBranches=new WCInfoWithBranches(myWCInfo,Collections.<WCInfoWithBranches.Branch>emptyList(),vcsRoot,new WCInfoWithBranches.Branch(repoUrl + "/trunk"));
  myMergeChecker=new BranchInfo(myVcs,myWCInfoWithBranches,new WCInfoWithBranches.Branch(repoUrl + "/branch"));
}
