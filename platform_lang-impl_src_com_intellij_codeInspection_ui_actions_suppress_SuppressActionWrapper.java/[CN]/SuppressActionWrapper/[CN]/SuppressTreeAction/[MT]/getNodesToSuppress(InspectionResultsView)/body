{
  final TreePath[] paths=view.getTree().getSelectionPaths();
  if (paths == null)   return Collections.emptySet();
  final Set<SuppressableInspectionTreeNode> result=new HashSet<>();
  for (  TreePath path : paths) {
    final Object node=path.getLastPathComponent();
    if (!(node instanceof TreeNode))     continue;
    TreeUtil.traverse((TreeNode)node,new TreeUtil.Traverse(){
      @Override public boolean accept(      final Object node){
        final InspectionTreeNode n=(InspectionTreeNode)node;
        if (n instanceof SuppressableInspectionTreeNode && ((SuppressableInspectionTreeNode)n).canSuppress() && ((SuppressableInspectionTreeNode)n).getAvailableSuppressActions().contains(mySuppressAction)&& n.isValid()) {
          result.add((SuppressableInspectionTreeNode)n);
        }
        return true;
      }
    }
);
  }
  return result;
}
