{
  if (myApplyCompleted) {
    return;
  }
  try {
    EditorColorsManager myColorsManager=EditorColorsManager.getInstance();
    SchemesManager<EditorColorsScheme,EditorColorsSchemeImpl> schemeManager=((EditorColorsManagerImpl)myColorsManager).getSchemeManager();
    List<EditorColorsScheme> result=new ArrayList<EditorColorsScheme>(mySchemes.values().size());
    boolean activeSchemeModified=false;
    EditorColorsScheme activeOriginalScheme=mySelectedScheme.getOriginalScheme();
    for (    MyColorScheme scheme : mySchemes.values()) {
      if (!activeSchemeModified && activeOriginalScheme == scheme.getOriginalScheme()) {
        activeSchemeModified=scheme.isModified();
      }
      if (!scheme.isDefault()) {
        scheme.apply();
      }
      result.add(scheme.getOriginalScheme());
    }
    boolean refreshEditors=activeSchemeModified && schemeManager.getCurrentScheme() == activeOriginalScheme;
    schemeManager.setSchemes(result,activeOriginalScheme);
    if (refreshEditors) {
      EditorColorsManagerImpl.schemeChangedOrSwitched();
    }
    if (DarculaLaf.NAME.equals(activeOriginalScheme.getName()) && !UIUtil.isUnderDarcula()) {
      if (Messages.showYesNoDialog("Darcula color scheme has been set for editors. Would you like to set Darcula as default Look and Feel?","Darcula Look and Feel",Messages.getQuestionIcon()) == Messages.YES) {
        LafManager.getInstance().setCurrentLookAndFeel(new DarculaLookAndFeelInfo());
        DarculaInstaller.install();
      }
    }
    reset();
  }
  finally {
    myApplyCompleted=true;
  }
}
