{
  final UrlConstructor constructor=new UrlConstructor(vcs);
  final LinkedList<Node> queue=new LinkedList<Node>();
  final LinkedList<Node> result=new LinkedList<Node>();
  queue.add(constructor.createReplaceable(root));
  while (!queue.isEmpty()) {
    final Node node=queue.removeFirst();
    if (Boolean.TRUE.equals(cancelledGetter.get()))     throw new ProcessCanceledException();
    final Node real=constructor.createReal(node.getFile());
    if (real != null) {
      if (constructor.replaceWithReal(real,node)) {
        result.add(real);
        if (!goIntoNested)         continue;
      }
    }
    final VirtualFile file=node.getFile();
    if (file.isDirectory() && (!SvnUtil.isAdminDirectory(file))) {
      for (      VirtualFile child : file.getChildren()) {
        if (Boolean.TRUE.equals(cancelledGetter.get()))         throw new ProcessCanceledException();
        if (rootIterator.acceptFolderUnderVcs(root,child)) {
          if (real == null) {
            queue.add(constructor.createReplaceable(child));
          }
 else {
            queue.add(constructor.createSupposed(real,child));
          }
        }
      }
    }
  }
  return result;
}
