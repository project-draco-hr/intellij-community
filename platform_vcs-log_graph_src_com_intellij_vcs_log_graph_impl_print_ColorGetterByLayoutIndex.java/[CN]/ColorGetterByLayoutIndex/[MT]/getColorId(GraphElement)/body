{
  int upNodeIndex, downNodeIndex;
  if (element instanceof GraphNode) {
    upNodeIndex=((GraphNode)element).getNodeIndex();
    downNodeIndex=upNodeIndex;
  }
 else {
    GraphEdge edge=(GraphEdge)element;
    Pair<Integer,Integer> normalEdge=LinearGraphUtils.asNormalEdge(edge);
    if (normalEdge != null) {
      upNodeIndex=normalEdge.first;
      downNodeIndex=normalEdge.second;
    }
 else {
      upNodeIndex=LinearGraphUtils.getNotNullNodeIndex(edge);
      downNodeIndex=upNodeIndex;
    }
  }
  int upLayoutIndex=getLayoutIndex(upNodeIndex);
  int downLayoutIndex=getLayoutIndex(downNodeIndex);
  CommitId headCommitId=getOneOfHeads(upNodeIndex);
  GraphColorManager<CommitId> myColorManager=myPermanentGraphInfo.getGraphColorManager();
  if (upLayoutIndex != downLayoutIndex) {
    return myColorManager.getColorOfFragment(headCommitId,Math.max(upLayoutIndex,downLayoutIndex));
  }
  if (upLayoutIndex == getLayoutIndex(getHeadNodeId(upNodeIndex)))   return myColorManager.getColorOfBranch(headCommitId);
 else   return myColorManager.getColorOfFragment(headCommitId,upLayoutIndex);
}
