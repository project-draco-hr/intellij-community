{
  Side slaveSide=masterSide.other();
  final int[] offsets=getTargetOffsets(myEditor1,myEditor2,startLine1,endLine1,startLine2,endLine2);
  final Editor masterEditor=masterSide.select(myEditor1,myEditor2);
  final Editor slaveEditor=slaveSide.select(myEditor1,myEditor2);
  final int masterOffset=masterSide.select(offsets);
  final int slaveOffset=slaveSide.select(offsets);
  int startOffset1=myEditor1.getScrollingModel().getVisibleArea().y;
  int startOffset2=myEditor2.getScrollingModel().getVisibleArea().y;
  final int masterStartOffset=masterSide.select(startOffset1,startOffset2);
  myHelper1.setAnchor(startOffset1,offsets[0],startOffset2,offsets[1]);
  myHelper2.setAnchor(startOffset2,offsets[1],startOffset1,offsets[0]);
  doScrollHorizontally(masterEditor,0,false);
  doScrollVertically(masterEditor,masterOffset,animate);
  masterEditor.getScrollingModel().runActionOnScrollingFinished(new Runnable(){
    @Override public void run(){
      myHelper1.removeAnchor();
      myHelper2.removeAnchor();
      int masterFinalOffset=masterEditor.getScrollingModel().getVisibleArea().y;
      int slaveFinalOffset=slaveEditor.getScrollingModel().getVisibleArea().y;
      if (slaveFinalOffset != slaveOffset) {
        myDuringSyncScroll=true;
        doScrollVertically(slaveEditor,slaveOffset,animate && masterFinalOffset == masterStartOffset);
        slaveEditor.getScrollingModel().runActionOnScrollingFinished(new Runnable(){
          @Override public void run(){
            myDuringSyncScroll=false;
          }
        }
);
      }
    }
  }
);
}
