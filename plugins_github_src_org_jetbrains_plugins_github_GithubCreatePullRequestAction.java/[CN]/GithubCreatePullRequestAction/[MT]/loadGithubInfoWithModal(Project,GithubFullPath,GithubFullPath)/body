{
  try {
    return GithubUtil.computeValueInModal(project,"Access to GitHub",new ThrowableConvertor<ProgressIndicator,GithubInfo,IOException>(){
      @Override public GithubInfo convert(      ProgressIndicator indicator) throws IOException {
        final Ref<GithubRepoDetailed> reposRef=new Ref<GithubRepoDetailed>();
        final GithubAuthData auth=GithubUtil.runAndGetValidAuth(project,indicator,new ThrowableConsumer<GithubAuthData,IOException>(){
          @Override public void consume(          GithubAuthData authData) throws IOException {
            reposRef.set(GithubApiUtil.getDetailedRepoInfo(authData,userAndRepo.getUser(),userAndRepo.getRepository()));
          }
        }
);
        List<RemoteBranch> branches=loadAvailableBranchesFromGithub(project,auth,reposRef.get(),upstreamUserAndRepo);
        return new GithubInfo(auth,reposRef.get(),branches);
      }
    }
);
  }
 catch (  GithubAuthenticationCanceledException e) {
    return null;
  }
catch (  IOException e) {
    GithubNotifications.showErrorDialog(project,CANNOT_CREATE_PULL_REQUEST,e);
    return null;
  }
}
