{
  final Git git=ServiceManager.getService(Git.class);
  final GithubProjectSettings projectSettings=GithubProjectSettings.getInstance(project);
  final GitRepository gitRepository=GithubUtil.getGitRepository(project,file);
  if (gitRepository == null) {
    GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,"Can't find git repository");
    return;
  }
  gitRepository.update();
  Pair<GitRemote,String> remote=GithubUtil.findGithubRemote(gitRepository);
  if (remote == null) {
    GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,"Can't find GitHub remote");
    return;
  }
  final String remoteName=remote.getFirst().getName();
  final String remoteUrl=remote.getSecond();
  final GithubFullPath path=GithubUrlUtil.getUserAndRepositoryFromRemoteUrl(remoteUrl);
  if (path == null) {
    GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,"Can't process remote: " + remoteUrl);
    return;
  }
  final GitLocalBranch currentBranch=gitRepository.getCurrentBranch();
  if (currentBranch == null) {
    GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,"No current branch");
    return;
  }
  GithubFullPath forkPath=projectSettings.getCreatePullRequestDefaultRepo();
  if (forkPath == null) {
    openSelectTargetForkDialog(project,git,gitRepository,path,remoteName,remoteUrl,currentBranch.getName());
    return;
  }
  performCreatePullRequest(project,git,gitRepository,path,forkPath,remoteName,remoteUrl,currentBranch.getName());
}
