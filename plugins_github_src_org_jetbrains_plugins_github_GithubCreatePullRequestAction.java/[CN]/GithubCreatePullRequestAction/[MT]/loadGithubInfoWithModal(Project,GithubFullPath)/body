{
  final Ref<GithubInfo> githubInfoRef=new Ref<GithubInfo>();
  final Ref<IOException> exceptionRef=new Ref<IOException>();
  ProgressManager.getInstance().run(new Task.Modal(project,"Access to GitHub",true){
    public void run(    @NotNull ProgressIndicator indicator){
      try {
        final Ref<GithubRepoDetailed> reposRef=new Ref<GithubRepoDetailed>();
        final GithubAuthData auth=GithubUtil.runAndGetValidAuth(project,indicator,new ThrowableConsumer<GithubAuthData,IOException>(){
          @Override public void consume(          GithubAuthData authData) throws IOException {
            reposRef.set(GithubApiUtil.getDetailedRepoInfo(authData,userAndRepo.getUser(),userAndRepo.getRepository()));
          }
        }
);
        githubInfoRef.set(new GithubInfo(auth,reposRef.get()));
      }
 catch (      IOException e) {
        exceptionRef.set(e);
      }
    }
  }
);
  if (!exceptionRef.isNull()) {
    if (exceptionRef.get() instanceof GithubAuthenticationCanceledException) {
      return null;
    }
    GithubNotifications.showErrorDialog(project,CANNOT_CREATE_PULL_REQUEST,exceptionRef.get());
    return null;
  }
  return githubInfoRef.get();
}
