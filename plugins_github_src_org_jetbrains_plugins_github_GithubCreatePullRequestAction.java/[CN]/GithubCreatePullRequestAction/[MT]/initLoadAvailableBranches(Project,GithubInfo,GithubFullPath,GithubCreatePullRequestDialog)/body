{
  dialog.setBusy(true);
  new SwingWorker<List<String>,Void>(){
    @Override protected List<String> doInBackground() throws Exception {
      List<String> result=new ArrayList<String>();
      try {
        final GithubAuthData auth=info.getAuthData();
        final GithubRepoDetailed repo=info.getRepo();
        final GithubRepo parent=repo.getParent();
        result.addAll(getBranches(auth,repo.getUserName(),repo.getName()));
        if (parent != null) {
          result.addAll(getBranches(auth,parent.getUserName(),parent.getName()));
        }
        if (upstreamPath != null && !StringUtil.equalsIgnoreCase(upstreamPath.getUser(),repo.getUserName()) && (parent == null || !StringUtil.equalsIgnoreCase(upstreamPath.getUser(),parent.getUserName()))) {
          result.addAll(getBranches(auth,upstreamPath.getUser(),upstreamPath.getRepository()));
        }
      }
 catch (      IOException e) {
        GithubNotifications.showError(project,"Can't load available branches",e);
      }
      return result;
    }
    @Override protected void done(){
      try {
        dialog.addBranches(get());
      }
 catch (      Exception ignore) {
      }
      dialog.setBusy(false);
    }
    @NotNull private List<String> getBranches(    @NotNull GithubAuthData auth,    @NotNull final String user,    @NotNull String repo) throws IOException {
      List<GithubBranch> branches=GithubApiUtil.getRepoBranches(auth,user,repo);
      return ContainerUtil.map(branches,new Function<GithubBranch,String>(){
        @Override public String fun(        GithubBranch branch){
          return user + ":" + branch.getName();
        }
      }
);
    }
  }
.execute();
}
