{
  final GithubInfo info=prepareInfoWithModal(project,forkPath,gitRepository);
  if (info == null) {
    return;
  }
  final GithubAuthData auth=info.getAuthData();
  Consumer<String> showDiff=info.getTargetRemote() != null ? new Consumer<String>(){
    @Override public void consume(    String branch){
      showDiffByRef(project,branch,gitRepository,info.getTargetRemote(),currentBranch);
    }
  }
 : null;
  Runnable showSelectForkDialog=new Runnable(){
    @Override public void run(){
      openSelectTargetForkDialog(project,git,gitRepository,path,remoteName,remoteUrl,currentBranch);
    }
  }
;
  final GithubCreatePullRequestDialog dialog=new GithubCreatePullRequestDialog(project,forkPath.getFullName(),info.getBranches(),showDiff,showSelectForkDialog);
  DialogManager.show(dialog);
  if (!dialog.isOK()) {
    return;
  }
  new Task.Backgroundable(project,"Creating pull request..."){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      LOG.info("Pushing current branch");
      indicator.setText("Pushing current branch...");
      GitCommandResult result=git.push(gitRepository,remoteName,remoteUrl,currentBranch,true);
      if (!result.success()) {
        GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,"Push failed:<br/>" + result.getErrorOutputAsHtmlString());
        return;
      }
      String from=path.getUser() + ":" + currentBranch;
      String onto=dialog.getTargetBranch();
      LOG.info("Creating pull request");
      indicator.setText("Creating pull request...");
      GithubPullRequest request=createPullRequest(project,auth,forkPath,dialog.getRequestTitle(),dialog.getDescription(),from,onto);
      if (request == null) {
        return;
      }
      GithubNotifications.showInfoURL(project,"Successfully created pull request","Pull Request #" + request.getNumber(),request.getHtmlUrl());
    }
  }
.queue();
}
