{
  String targetUser=onto.substring(0,onto.indexOf(':'));
  @Nullable GithubRepo parent=repo.getParent();
  @Nullable GithubRepo source=repo.getSource();
  for (  RemoteBranch branch : branches) {
    if (StringUtil.equalsIgnoreCase(targetUser,branch.getUser()) && branch.getRepo() != null) {
      return new GithubFullPath(branch.getUser(),branch.getRepo());
    }
  }
  if (isRepoOwner(targetUser,repo)) {
    return repo.getFullPath();
  }
  if (parent != null && isRepoOwner(targetUser,parent)) {
    return parent.getFullPath();
  }
  if (source != null && isRepoOwner(targetUser,source)) {
    return source.getFullPath();
  }
  if (upstreamPath != null && StringUtil.equalsIgnoreCase(targetUser,upstreamPath.getUser())) {
    return upstreamPath;
  }
  if (source != null) {
    try {
      GithubRepoDetailed target=GithubApiUtil.getDetailedRepoInfo(auth,targetUser,repo.getName());
      if (target.getSource() != null && StringUtil.equalsIgnoreCase(target.getSource().getUserName(),source.getUserName())) {
        return target.getFullPath();
      }
    }
 catch (    IOException ignore) {
    }
    try {
      GithubRepo fork=GithubApiUtil.findForkByUser(auth,source.getUserName(),source.getName(),targetUser);
      if (fork != null) {
        return fork.getFullPath();
      }
    }
 catch (    IOException e) {
      GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,e);
    }
  }
  return null;
}
