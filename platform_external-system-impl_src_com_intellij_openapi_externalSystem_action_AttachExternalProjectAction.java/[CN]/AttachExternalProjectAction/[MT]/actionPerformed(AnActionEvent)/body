{
  ProjectSystemId externalSystemId=ExternalSystemDataKeys.EXTERNAL_SYSTEM_ID.getData(e.getDataContext());
  if (externalSystemId == null) {
    return;
  }
  ExternalSystemManager<?,?,?,?,?> manager=ExternalSystemApiUtil.getManager(externalSystemId);
  if (manager == null) {
    return;
  }
  Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  if (project == null) {
    return;
  }
  ProjectImportProvider[] projectImportProviders=new ProjectImportProvider[1];
  for (  ProjectImportProvider provider : ProjectImportProvider.PROJECT_IMPORT_PROVIDER.getExtensions()) {
    if (provider instanceof AbstractExternalProjectImportProvider && externalSystemId.equals(((AbstractExternalProjectImportProvider)provider).getExternalSystemId())) {
      projectImportProviders[0]=provider;
      break;
    }
  }
  if (projectImportProviders[0] == null) {
    return;
  }
  AbstractExternalModuleBuilder moduleBuilder=null;
  for (  ModuleBuilder builder : ModuleBuilder.getAllBuilders()) {
    if (builder instanceof AbstractExternalModuleBuilder && externalSystemId.equals(((AbstractExternalModuleBuilder)builder).getExternalSystemId())) {
      moduleBuilder=(AbstractExternalModuleBuilder)builder;
      break;
    }
  }
  if (moduleBuilder == null) {
    return;
  }
  AddModuleWizard wizard=ImportModuleAction.selectFileAndCreateWizard(project,null,manager.getExternalProjectDescriptor(),projectImportProviders);
  if (wizard != null) {
    WizardContext wizardContext=wizard.getWizardContext();
    wizardContext.setProjectBuilder(moduleBuilder);
    ModuleWizardStep[] steps=moduleBuilder.createWizardSteps(wizardContext,ModulesProvider.EMPTY_MODULES_PROVIDER);
    for (    ModuleWizardStep step : steps) {
      step.getComponent();
    }
    ImportModuleAction.createFromWizard(project,wizard);
  }
}
