{
  return ContainerUtil.map(options,new Function<String,PsiType[]>(){
    @Override public PsiType[] fun(    String value){
      String[] params=value.split(",");
      return ContainerUtil.map(params,new Function<String,PsiType>(){
        @Override public PsiType fun(        String param){
          try {
            PsiTypeParameterList typeParameterList=method.getTypeParameterList();
            PsiElement context=typeParameterList != null ? typeParameterList : method;
            PsiType original=JavaPsiFacade.getElementFactory(method.getProject()).createTypeFromText(param,context);
            if (original instanceof PsiClassType && ((PsiClassType)original).resolve() == null) {
              original=GroovyPsiElementFactory.getInstance(method.getProject()).createTypeElement(param).getType();
            }
            return substitutor.substitute(original);
          }
 catch (          IncorrectOperationException e) {
          }
          return PsiType.NULL;
        }
      }
,new PsiType[params.length]);
    }
  }
);
}
