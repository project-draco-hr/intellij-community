{
  if (!ResolveUtil.shouldProcessClasses(processor.getHint(ElementClassHint.KEY)))   return true;
  for (  PsiTypeParameter parameter : myMethod.getTypeParameters()) {
    if (!ResolveUtil.processElement(processor,parameter,state))     return false;
  }
  PsiClass containingClass=myMethod.getContainingClass();
  for (  PsiTypeParameter parameter : containingClass == null ? PsiTypeParameter.EMPTY_ARRAY : containingClass.getTypeParameters()) {
    if (!ResolveUtil.processElement(processor,parameter,state))     return false;
  }
  if (!GroovyImportHelper.processImplicitImports(processor,state,lastParent,place,myFile)) {
    return false;
  }
  if (place instanceof PsiQualifiedReference) {
    PsiQualifiedReference reference=(PsiQualifiedReference)place;
    if (reference.getQualifier() == null && reference.getReferenceName() != null) {
      PsiClass aClass=JavaPsiFacade.getInstance(getProject()).findClass(reference.getReferenceName(),getResolveScope());
      if (aClass != null && !ResolveUtil.processElement(processor,aClass,state)) {
        return false;
      }
    }
  }
  return true;
}
