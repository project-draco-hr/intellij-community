{
  ColorBlindnessSupport[] extensions=(ColorBlindnessSupport[])Extensions.getExtensions("com.intellij.supportColorBlindness");
  if (extensions.length == 1)   return extensions[0];
  if (extensions.length > 0) {
    Logger logger=Logger.getInstance(ColorBlindnessSupport.class);
    EnumMap<ColorBlindness,ColorBlindnessSupport> map=new EnumMap<>(ColorBlindness.class);
    for (    ColorBlindness blindness : ColorBlindness.values()) {
      ColorBlindnessSupport support=null;
      for (      ColorBlindnessSupport ext : extensions) {
        if (support == null && ext.getDisplayName(blindness) != null)         support=ext;
      }
      if (support != null) {
        map.put(blindness,support);
        if (logger.isDebugEnabled())         logger.debug(toString("use",blindness,support));
        for (        ColorBlindnessSupport ext : extensions) {
          if (support != ext && ext.getDisplayName(blindness) != null)           logger.warn(toString("ignore",blindness,ext));
        }
      }
    }
    if (!map.isEmpty()) {
      return new Lazy(map);
    }
  }
  return new ColorBlindnessSupport();
}
