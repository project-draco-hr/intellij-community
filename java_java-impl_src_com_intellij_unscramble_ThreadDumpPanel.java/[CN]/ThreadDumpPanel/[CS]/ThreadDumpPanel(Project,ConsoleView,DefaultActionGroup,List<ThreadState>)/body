{
  super(new BorderLayout());
  myThreadDump=threadDump;
  myMergedThreadDump=new ArrayList<>();
  List<ThreadState> copy=new ArrayList<>(myThreadDump);
  for (int i=0; i < copy.size(); i++) {
    ThreadState state=copy.get(i);
    ThreadState.CompoundThreadState compound=new ThreadState.CompoundThreadState(state);
    myMergedThreadDump.add(compound);
    for (int j=i + 1; j < copy.size(); j++) {
      ThreadState toAdd=copy.get(j);
      if (compound.add(toAdd)) {
        copy.remove(j);
      }
    }
  }
  myFilterField=new SearchTextField();
  myFilterField.addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      updateThreadList();
    }
  }
);
  myFilterPanel=new JPanel(new BorderLayout());
  myFilterPanel.add(new JLabel("Filter:"),BorderLayout.WEST);
  myFilterPanel.add(myFilterField);
  myFilterPanel.setVisible(false);
  myThreadList=new JBList(new DefaultListModel());
  myThreadList.setCellRenderer(new ThreadListCellRenderer());
  myThreadList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myThreadList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    final ListSelectionEvent e){
      int index=myThreadList.getSelectedIndex();
      if (index >= 0) {
        ThreadState selection=(ThreadState)myThreadList.getModel().getElementAt(index);
        AnalyzeStacktraceUtil.printStacktrace(consoleView,selection.getStackTrace());
      }
 else {
        AnalyzeStacktraceUtil.printStacktrace(consoleView,"");
      }
      myThreadList.repaint();
    }
  }
);
  myExporterToTextFile=createToFileExporter(project,myThreadDump);
  FilterAction filterAction=new FilterAction();
  filterAction.registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_FIND).getShortcutSet(),myThreadList);
  toolbarActions.add(filterAction);
  toolbarActions.add(new CopyToClipboardAction(threadDump,project));
  toolbarActions.add(new SortThreadsAction());
  toolbarActions.add(ActionManager.getInstance().getAction(IdeActions.ACTION_EXPORT_TO_TEXT_FILE));
  toolbarActions.add(new MergeStacktracesAction());
  add(ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,toolbarActions,false).getComponent(),BorderLayout.WEST);
  JPanel leftPanel=new JPanel(new BorderLayout());
  leftPanel.add(myFilterPanel,BorderLayout.NORTH);
  leftPanel.add(ScrollPaneFactory.createScrollPane(myThreadList,SideBorder.LEFT | SideBorder.RIGHT),BorderLayout.CENTER);
  final Splitter splitter=new Splitter(false,0.3f);
  splitter.setFirstComponent(leftPanel);
  splitter.setSecondComponent(consoleView.getComponent());
  add(splitter,BorderLayout.CENTER);
  new ListSpeedSearch(myThreadList).setComparator(new SpeedSearchComparator(false,true));
  updateThreadList();
  final Editor editor=CommonDataKeys.EDITOR.getData(DataManager.getInstance().getDataContext(consoleView.getPreferredFocusableComponent()));
  if (editor != null) {
    editor.getDocument().addDocumentListener(new com.intellij.openapi.editor.event.DocumentAdapter(){
      @Override public void documentChanged(      com.intellij.openapi.editor.event.DocumentEvent e){
        String filter=myFilterField.getText();
        if (StringUtil.isNotEmpty(filter)) {
          highlightOccurrences(filter,project,editor);
        }
      }
    }
,consoleView);
  }
}
