{
  if (file instanceof LightVirtualFile) {
    return ((LightVirtualFile)file).getContent();
  }
  if (file.isDirectory()) {
    throw new AssertionError("'" + file.getPresentableUrl() + "' is a directory");
  }
  FileType fileType=file.getFileType();
  if (fileType.isBinary()) {
    final BinaryFileDecompiler decompiler=BinaryFileTypeDecompilers.INSTANCE.forFileType(fileType);
    if (decompiler != null) {
      CharSequence text;
      final Application app=ApplicationManager.getApplication();
      if (app != null && app.isDispatchThread() && !app.isUnitTestMode()) {
        final Ref<CharSequence> result=Ref.create(ArrayUtil.EMPTY_CHAR_SEQUENCE);
        final Ref<RuntimeException> exception=Ref.create();
        ProgressManager.getInstance().run(new Task.Modal(null,"Decompiling " + file.getName(),true){
          @Override public void run(          @NotNull ProgressIndicator indicator){
            indicator.setIndeterminate(true);
            try {
              result.set(ApplicationUtil.runWithCheckCanceled(new Callable<CharSequence>(){
                @Override public CharSequence call(){
                  return decompiler.decompile(file);
                }
              }
));
            }
 catch (            RuntimeException e) {
              exception.set(e);
            }
catch (            Exception ignored) {
            }
          }
        }
);
        if (!exception.isNull()) {
          throw exception.get();
        }
        text=result.get();
      }
 else {
        text=decompiler.decompile(file);
      }
      StringUtil.assertValidSeparators(text);
      return text;
    }
    throw new IllegalArgumentException("Attempt to load text for binary file which doesn't have a decompiler plugged in: " + file.getPresentableUrl());
  }
  try {
    byte[] bytes=file.contentsToByteArray();
    return getTextByBinaryPresentation(bytes,file);
  }
 catch (  IOException e) {
    return ArrayUtil.EMPTY_CHAR_SEQUENCE;
  }
}
