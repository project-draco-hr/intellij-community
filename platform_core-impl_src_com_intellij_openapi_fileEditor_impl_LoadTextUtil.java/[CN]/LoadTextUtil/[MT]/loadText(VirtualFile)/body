{
  if (file instanceof LightVirtualFile) {
    return ((LightVirtualFile)file).getContent();
  }
  if (file.isDirectory()) {
    throw new AssertionError("'" + file.getPresentableUrl() + "' is a directory");
  }
  FileType fileType=file.getFileType();
  if (fileType.isBinary()) {
    final BinaryFileDecompiler decompiler=BinaryFileTypeDecompilers.INSTANCE.forFileType(fileType);
    if (decompiler != null) {
      CharSequence text;
      Application app=ApplicationManager.getApplication();
      if (app != null && app.isDispatchThread() && !app.isWriteAccessAllowed() && !ourDecompileProgressStarted) {
        ourDecompileProgressStarted=true;
        try {
          text=ProgressManager.getInstance().run(new Task.WithResult<CharSequence,RuntimeException>(null,"Decompiling " + file.getName(),true){
            @Override protected CharSequence compute(            @NotNull ProgressIndicator indicator){
              return ApplicationUtil.runWithCheckCanceled(new Computable<CharSequence>(){
                @Override public CharSequence compute(){
                  return decompiler.decompile(file);
                }
              }
,indicator);
            }
          }
);
        }
  finally {
          ourDecompileProgressStarted=false;
        }
      }
 else {
        text=decompiler.decompile(file);
      }
      StringUtil.assertValidSeparators(text);
      return text;
    }
    throw new IllegalArgumentException("Attempt to load text for binary file which doesn't have a decompiler plugged in: " + file.getPresentableUrl() + ". File type: "+ fileType.getName());
  }
  try {
    byte[] bytes=file.contentsToByteArray();
    return getTextByBinaryPresentation(bytes,file);
  }
 catch (  IOException e) {
    return ArrayUtil.EMPTY_CHAR_SEQUENCE;
  }
}
