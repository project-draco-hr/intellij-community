{
  ContentManager contentManager=toolWindow.getContentManager();
  Content generalContent=contentManager.getContent(0);
  if (generalContent != null && contentManager.getContentCount() == 1) {
    generalContent.setDisplayName("General");
  }
  final Editor editor=console.getConsoleEditor();
  JPanel editorPanel=new JPanel(new AbstractLayoutManager(){
    private int getOffset(){
      return JBUI.scale(4);
    }
    @Override public Dimension preferredLayoutSize(    Container parent){
      Dimension size=parent.getComponent(0).getPreferredSize();
      return new Dimension(size.width + getOffset(),size.height);
    }
    @Override public void layoutContainer(    Container parent){
      int offset=getOffset();
      parent.getComponent(0).setBounds(offset,0,parent.getWidth() - offset,parent.getHeight());
    }
  }
){
    @Override public Color getBackground(){
      return ((EditorEx)editor).getBackgroundColor();
    }
  }
;
  editorPanel.add(editor.getComponent());
  SimpleToolWindowPanel panel=new SimpleToolWindowPanel(false,true){
    @Override public Object getData(    @NonNls String dataId){
      return PlatformDataKeys.HELP_ID.is(dataId) ? EventLog.HELP_ID : super.getData(dataId);
    }
  }
;
  panel.setContent(editorPanel);
  panel.addAncestorListener(new LogShownTracker(project));
  ActionToolbar toolbar=createToolbar(project,editor,console);
  toolbar.setTargetComponent(editor.getContentComponent());
  panel.setToolbar(toolbar.getComponent());
  Content content=ContentFactory.SERVICE.getInstance().createContent(panel,title,false);
  contentManager.addContent(content);
  contentManager.setSelectedContent(content);
}
