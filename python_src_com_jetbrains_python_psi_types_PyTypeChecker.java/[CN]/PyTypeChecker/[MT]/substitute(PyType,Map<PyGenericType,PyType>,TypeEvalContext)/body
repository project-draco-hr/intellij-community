{
  if (hasGenerics(type,context)) {
    if (type instanceof PyGenericType) {
      final PyType subst=substitutions.get((PyGenericType)type);
      return subst != null ? Ref.create(subst) : null;
    }
 else     if (type instanceof PyUnionType) {
      final PyUnionType union=(PyUnionType)type;
      final List<PyType> results=new ArrayList<PyType>();
      for (      PyType t : union.getMembers()) {
        final Ref<PyType> subst=substitute(t,substitutions,context);
        if (subst == null) {
          return null;
        }
        results.add(subst.get());
      }
      return Ref.create(PyUnionType.union(results));
    }
 else     if (type instanceof PyCollectionTypeImpl) {
      final PyCollectionTypeImpl collection=(PyCollectionTypeImpl)type;
      final PyType elem=collection.getElementType(context);
      final Ref<PyType> subst=substitute(elem,substitutions,context);
      if (subst == null) {
        return null;
      }
      final PyType result=new PyCollectionTypeImpl(collection.getPyClass(),collection.isDefinition(),subst.get());
      return Ref.create(result);
    }
 else     if (type instanceof PyTupleType) {
      final PyTupleType tuple=(PyTupleType)type;
      final int n=tuple.getElementCount();
      final List<PyType> results=new ArrayList<PyType>();
      for (int i=0; i < n; i++) {
        final Ref<PyType> subst=substitute(tuple.getElementType(i),substitutions,context);
        if (subst == null) {
          return null;
        }
        results.add(subst.get());
      }
      final PyType result=new PyTupleType((PyTupleType)type,results.toArray(new PyType[results.size()]));
      return Ref.create(result);
    }
  }
  return Ref.create(type);
}
