{
  if (hasGenerics(type,context)) {
    if (type instanceof PyGenericType) {
      return substitutions.get((PyGenericType)type);
    }
 else     if (type instanceof PyUnionType) {
      final PyUnionType union=(PyUnionType)type;
      final List<PyType> results=new ArrayList<>();
      for (      PyType t : union.getMembers()) {
        final PyType subst=substitute(t,substitutions,context);
        results.add(subst);
      }
      return PyUnionType.union(results);
    }
 else     if (type instanceof PyCollectionTypeImpl) {
      final PyCollectionTypeImpl collection=(PyCollectionTypeImpl)type;
      final List<PyType> elementTypes=collection.getElementTypes(context);
      final List<PyType> substitutes=new ArrayList<>();
      for (      PyType elementType : elementTypes) {
        substitutes.add(substitute(elementType,substitutions,context));
      }
      return new PyCollectionTypeImpl(collection.getPyClass(),collection.isDefinition(),substitutes);
    }
 else     if (type instanceof PyTupleType) {
      final PyTupleType tuple=(PyTupleType)type;
      if (tuple.isHomogeneous()) {
        return PyTupleType.createHomogeneous(tuple.getPyClass(),substitute(tuple.getElementType(0),substitutions,context));
      }
 else {
        final int elementCount=tuple.getElementCount();
        final PyType[] elementTypes=new PyType[elementCount];
        for (int i=0; i < elementCount; i++) {
          elementTypes[i]=substitute(tuple.getElementType(i),substitutions,context);
        }
        return PyTupleType.create(tuple.getPyClass(),elementTypes);
      }
    }
 else     if (type instanceof PyCallableType) {
      final PyCallableType callable=(PyCallableType)type;
      List<PyCallableParameter> substParams=null;
      final List<PyCallableParameter> parameters=callable.getParameters(context);
      if (parameters != null) {
        substParams=new ArrayList<>();
        for (        PyCallableParameter parameter : parameters) {
          final PyType substType=substitute(parameter.getType(context),substitutions,context);
          final PyCallableParameter subst=parameter.getParameter() != null ? new PyCallableParameterImpl(parameter.getParameter()) : new PyCallableParameterImpl(parameter.getName(),substType);
          substParams.add(subst);
        }
      }
      final PyType substResult=substitute(callable.getReturnType(context),substitutions,context);
      return new PyCallableTypeImpl(substParams,substResult);
    }
  }
  return type;
}
