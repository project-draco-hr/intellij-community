{
  final PsiPolyVariantReference ref=expr.getReference(PyResolveContext.noImplicits().withTypeEvalContext(context));
  if (ref != null) {
    final ResolveResult[] resolveResult=ref.multiResolve(false);
    AnalyzeCallResults firstResults=null;
    for (    ResolveResult result : resolveResult) {
      final PsiElement resolved=result.getElement();
      if (resolved instanceof PyFunction) {
        final PyFunction function=(PyFunction)resolved;
        final boolean isRight=PyNames.isRightOperatorName(function.getName());
        final PyExpression arg=isRight ? expr.getLeftExpression() : expr.getRightExpression();
        final PyExpression receiver=isRight ? expr.getRightExpression() : expr.getLeftExpression();
        final PyParameter[] parameters=function.getParameterList().getParameters();
        if (parameters.length == 2) {
          final PyNamedParameter param=parameters[1].getAsNamed();
          if (arg != null && param != null) {
            final Map<PyExpression,PyNamedParameter> arguments=new LinkedHashMap<PyExpression,PyNamedParameter>();
            arguments.put(arg,param);
            final AnalyzeCallResults resutls=new AnalyzeCallResults(function,receiver,arguments);
            if (firstResults == null) {
              firstResults=resutls;
            }
            if (match(param.getType(context),arg.getType(context),context)) {
              return resutls;
            }
          }
        }
      }
    }
    if (firstResults != null) {
      return firstResults;
    }
  }
  return null;
}
