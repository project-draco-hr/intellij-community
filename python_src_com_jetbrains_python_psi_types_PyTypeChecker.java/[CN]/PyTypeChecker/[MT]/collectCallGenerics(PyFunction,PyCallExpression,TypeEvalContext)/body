{
  final Map<PyGenericType,PyType> substitutions=new HashMap<PyGenericType,PyType>();
  final PyExpression callee=call.getCallee();
  if (callee instanceof PyReferenceExpression) {
    final PyReferenceExpression expr=(PyReferenceExpression)callee;
    final PyExpression qualifier=expr.getQualifier();
    if (qualifier != null) {
      final PyType qualType=qualifier.getType(context);
      final Set<PyGenericType> generics=new HashSet<PyGenericType>();
      collectGenerics(qualType,context,generics);
      for (      PyGenericType t : generics) {
        substitutions.put(t,t);
      }
      final PyClass cls=function.getContainingClass();
      if (cls != null) {
        final PyFunction init=cls.findInitOrNew(true);
        if (init != null) {
          final PyType initType=init.getReturnType(context,null);
          if (initType != null) {
            match(initType,qualType,context,substitutions);
          }
        }
 else {
          final PyStdlibTypeProvider stdlib=PyStdlibTypeProvider.getInstance();
          if (stdlib != null) {
            final PyType initType=stdlib.getConstructorType(cls);
            if (initType != null) {
              match(initType,qualType,context,substitutions);
            }
          }
        }
      }
    }
  }
  return substitutions;
}
