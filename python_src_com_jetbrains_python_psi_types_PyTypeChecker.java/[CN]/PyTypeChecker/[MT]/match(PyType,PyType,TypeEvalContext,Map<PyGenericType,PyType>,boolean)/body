{
  if (expected instanceof PyGenericType && substitutions != null) {
    final PyGenericType generic=(PyGenericType)expected;
    final PyType subst=substitutions.get(generic);
    final PyType bound=generic.getBound();
    if (!match(bound,actual,context,substitutions,recursive)) {
      return false;
    }
 else     if (subst != null) {
      if (expected.equals(actual)) {
        return true;
      }
 else       if (recursive) {
        return match(subst,actual,context,substitutions,false);
      }
 else {
        return false;
      }
    }
 else     if (actual != null) {
      substitutions.put(generic,actual);
    }
 else     if (bound != null) {
      substitutions.put(generic,bound);
    }
    return true;
  }
  if (expected == null || actual == null) {
    return true;
  }
  if (expected instanceof PyClassType) {
    final PyClass c=((PyClassType)expected).getPyClass();
    if ("object".equals(c.getName())) {
      return true;
    }
  }
  if (isUnknown(actual)) {
    return true;
  }
  if (actual instanceof PyUnionType) {
    final PyUnionType actualUnionType=(PyUnionType)actual;
    if (expected instanceof PyTupleType) {
      final PyTupleType expectedTupleType=(PyTupleType)expected;
      final int elementCount=expectedTupleType.getElementCount();
      if (!expectedTupleType.isHomogeneous() && consistsOfSameElementNumberTuples(actualUnionType,elementCount)) {
        return substituteExpectedElementsWithUnions(expectedTupleType,elementCount,actualUnionType,context,substitutions,recursive);
      }
    }
    for (    PyType m : actualUnionType.getMembers()) {
      if (match(expected,m,context,substitutions,recursive)) {
        return true;
      }
    }
    return false;
  }
  if (expected instanceof PyUnionType) {
    for (    PyType t : ((PyUnionType)expected).getMembers()) {
      if (match(t,actual,context,substitutions,recursive)) {
        return true;
      }
    }
    return false;
  }
  if (expected instanceof PyClassType && actual instanceof PyClassType) {
    final PyClass superClass=((PyClassType)expected).getPyClass();
    final PyClass subClass=((PyClassType)actual).getPyClass();
    if (expected instanceof PyTupleType && actual instanceof PyTupleType) {
      final PyTupleType superTupleType=(PyTupleType)expected;
      final PyTupleType subTupleType=(PyTupleType)actual;
      if (!superTupleType.isHomogeneous() && !subTupleType.isHomogeneous()) {
        if (superTupleType.getElementCount() != subTupleType.getElementCount()) {
          return false;
        }
 else {
          for (int i=0; i < superTupleType.getElementCount(); i++) {
            if (!match(superTupleType.getElementType(i),subTupleType.getElementType(i),context,substitutions,recursive)) {
              return false;
            }
          }
          return true;
        }
      }
 else       if (superTupleType.isHomogeneous() && !subTupleType.isHomogeneous()) {
        final PyType expectedElementType=superTupleType.getIteratedItemType();
        for (int i=0; i < subTupleType.getElementCount(); i++) {
          if (!match(expectedElementType,subTupleType.getElementType(i),context)) {
            return false;
          }
        }
        return true;
      }
 else       if (!superTupleType.isHomogeneous() && subTupleType.isHomogeneous()) {
        return false;
      }
 else {
        return match(superTupleType.getIteratedItemType(),subTupleType.getIteratedItemType(),context);
      }
    }
 else     if (expected instanceof PyCollectionType && actual instanceof PyTupleType) {
      if (!matchClasses(superClass,subClass,context)) {
        return false;
      }
      final PyType superElementType=((PyCollectionType)expected).getIteratedItemType();
      final PyType subElementType=((PyTupleType)actual).getIteratedItemType();
      if (!match(superElementType,subElementType,context,substitutions,recursive)) {
        return false;
      }
      return true;
    }
 else     if (expected instanceof PyCollectionType && actual instanceof PyCollectionType) {
      if (!matchClasses(superClass,subClass,context)) {
        return false;
      }
      final List<PyType> superElementTypes=((PyCollectionType)expected).getElementTypes(context);
      final List<PyType> subElementTypes=((PyCollectionType)actual).getElementTypes(context);
      for (int i=0; i < subElementTypes.size(); i++) {
        final PyType superElementType=i < superElementTypes.size() ? superElementTypes.get(i) : null;
        if (!match(superElementType,subElementTypes.get(i),context,substitutions,recursive)) {
          return false;
        }
      }
      return true;
    }
 else     if (matchClasses(superClass,subClass,context)) {
      return true;
    }
 else     if (((PyClassType)actual).isDefinition() && PyNames.CALLABLE.equals(expected.getName())) {
      return true;
    }
    if (expected.equals(actual)) {
      return true;
    }
  }
  if (actual instanceof PyFunctionTypeImpl && expected instanceof PyClassType) {
    final PyClass superClass=((PyClassType)expected).getPyClass();
    if (PyNames.CALLABLE.equals(superClass.getName())) {
      return true;
    }
  }
  if (actual instanceof PyStructuralType && ((PyStructuralType)actual).isInferredFromUsages()) {
    return true;
  }
  if (expected instanceof PyStructuralType && actual instanceof PyStructuralType) {
    final PyStructuralType expectedStructural=(PyStructuralType)expected;
    final PyStructuralType actualStructural=(PyStructuralType)actual;
    if (expectedStructural.isInferredFromUsages()) {
      return true;
    }
    return expectedStructural.getAttributeNames().containsAll(actualStructural.getAttributeNames());
  }
  if (expected instanceof PyStructuralType && actual instanceof PyClassType) {
    final PyClassType actualClassType=(PyClassType)actual;
    if (overridesGetAttr(actualClassType.getPyClass(),context)) {
      return true;
    }
    final Set<String> actualAttributes=actualClassType.getMemberNames(true,context);
    return actualAttributes.containsAll(((PyStructuralType)expected).getAttributeNames());
  }
  if (actual instanceof PyStructuralType && expected instanceof PyClassType) {
    final Set<String> expectedAttributes=((PyClassType)expected).getMemberNames(true,context);
    return expectedAttributes.containsAll(((PyStructuralType)actual).getAttributeNames());
  }
  if (actual instanceof PyCallableType && expected instanceof PyCallableType) {
    final PyCallableType expectedCallable=(PyCallableType)expected;
    final PyCallableType actualCallable=(PyCallableType)actual;
    if (expectedCallable.isCallable() && actualCallable.isCallable()) {
      final List<PyCallableParameter> expectedParameters=expectedCallable.getParameters(context);
      final List<PyCallableParameter> actualParameters=actualCallable.getParameters(context);
      if (expectedParameters != null && actualParameters != null) {
        final int size=Math.min(expectedParameters.size(),actualParameters.size());
        for (int i=0; i < size; i++) {
          final PyCallableParameter expectedParam=expectedParameters.get(i);
          final PyCallableParameter actualParam=actualParameters.get(i);
          if (!match(expectedParam.getType(context),actualParam.getType(context),context,substitutions,recursive)) {
            return false;
          }
        }
      }
      if (!match(expectedCallable.getReturnType(context),actualCallable.getReturnType(context),context,substitutions,recursive)) {
        return false;
      }
      return true;
    }
  }
  return matchNumericTypes(expected,actual);
}
