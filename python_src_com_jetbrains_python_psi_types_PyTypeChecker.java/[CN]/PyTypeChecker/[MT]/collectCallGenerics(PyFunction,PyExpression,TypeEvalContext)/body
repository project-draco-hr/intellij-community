{
  final Map<PyGenericType,PyType> substitutions=new HashMap<PyGenericType,PyType>();
  final Set<PyGenericType> generics=new HashSet<PyGenericType>();
  final PyType qualifierType=receiver != null ? receiver.getType(context) : null;
  collectGenerics(qualifierType,context,generics);
  for (  PyGenericType t : generics) {
    substitutions.put(t,t);
  }
  final PyClass cls=function.getContainingClass();
  if (cls != null) {
    final PyFunction init=cls.findInitOrNew(true);
    if (init != null) {
      final PyType initType=init.getReturnType(context,null);
      if (initType != null) {
        match(initType,qualifierType,context,substitutions);
      }
    }
 else {
      final PyStdlibTypeProvider stdlib=PyStdlibTypeProvider.getInstance();
      if (stdlib != null) {
        final PyType initType=stdlib.getConstructorType(cls);
        if (initType != null) {
          match(initType,qualifierType,context,substitutions);
        }
      }
    }
  }
  return substitutions;
}
