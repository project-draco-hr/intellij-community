{
  final Map<PyGenericType,PyType> substitutions=new LinkedHashMap<PyGenericType,PyType>();
  final Set<PyGenericType> generics=new LinkedHashSet<PyGenericType>();
  final PyType qualifierType=receiver != null ? context.getType(receiver) : null;
  collectGenerics(qualifierType,context,generics,new HashSet<PyType>());
  for (  PyGenericType t : generics) {
    substitutions.put(t,t);
  }
  final PyClass cls=(callable instanceof PyFunction) ? ((PyFunction)callable).getContainingClass() : null;
  if (cls != null) {
    final PyFunction init=cls.findInitOrNew(true);
    if (init != null) {
      final PyType initType=init.getCallType(context,null);
      if (initType != null) {
        match(initType,qualifierType,context,substitutions);
      }
    }
  }
  return substitutions;
}
