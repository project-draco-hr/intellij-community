{
  final Set<String> attributes=new HashSet<String>();
  for (  PyFunction function : cls.getMethods()) {
    attributes.add(function.getName());
  }
  for (  PyTargetExpression instanceAttribute : cls.getInstanceAttributes()) {
    attributes.add(instanceAttribute.getName());
  }
  for (  PyTargetExpression classAttribute : cls.getClassAttributes()) {
    attributes.add(classAttribute.getName());
  }
  if (inherited) {
    for (    PyClass ancestor : cls.getAncestorClasses(null)) {
      final PyType ancestorType=context.getType(ancestor);
      if (ancestorType instanceof PyClassLikeType) {
        final PyClassLikeType classType=isDefinition ? (PyClassLikeType)ancestorType : ((PyClassLikeType)ancestorType).toInstance();
        if (classType instanceof PyClassType) {
          attributes.addAll(getClassTypeAttributes((PyClassType)classType,false,context));
        }
      }
    }
  }
  return attributes;
}
