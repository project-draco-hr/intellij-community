{
  final boolean qualify=!PyCodeInsightSettings.getInstance().PREFER_FROM_IMPORT;
  AutoImportQuickFix fix=new AutoImportQuickFix(node,reference.getClass(),refText,qualify);
  Set<String> seenCandidateNames=new HashSet<>();
  PsiFile existingImportFile=addCandidatesFromExistingImports(node,refText,fix,seenCandidateNames);
  if (fix.getCandidates().isEmpty() || fix.hasProjectImports() || Registry.is("python.import.always.ask")) {
    ProgressManager.checkCanceled();
    addSymbolImportCandidates(node,refText,asName,fix,seenCandidateNames,existingImportFile);
  }
  for (  PyImportCandidateProvider provider : Extensions.getExtensions(PyImportCandidateProvider.EP_NAME)) {
    provider.addImportCandidates(reference,refText,fix);
  }
  if (!fix.getCandidates().isEmpty()) {
    fix.sortCandidates();
    return fix;
  }
  return null;
}
