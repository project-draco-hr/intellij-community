{
  VirtualFile contentRoot=getContentRoot();
  CloudGitApplication application=findApplication();
  if (application == null) {
    application=createApplication();
  }
  GitRepository repository=findRepository();
  if (repository == null) {
    myLoggingHandler.println("Initializing git repository...");
    GitCommandResult gitInitResult=getGit().init(getProject(),contentRoot,createGitLineHandlerListener());
    checkGitResult(gitInitResult);
    refreshApplicationRepository();
    repository=getRepository();
  }
  GitRemote gitRemote=GitUtil.findRemoteByName(repository,getRemoteName());
  if (gitRemote == null) {
    addGitRemote(application);
  }
 else   if (!gitRemote.getUrls().contains(application.getGitUrl())) {
    resetGitRemote(application);
  }
  try {
    GitSimpleHandler handler=new GitSimpleHandler(getProject(),contentRoot,GitCommand.ADD);
    handler.setSilent(false);
    handler.addParameters(".");
    handler.run();
  }
 catch (  VcsException e) {
    throw new ServerRuntimeException(e);
  }
  try {
    if (GitUtil.hasLocalChanges(true,getProject(),contentRoot)) {
      GitSimpleHandler handler=new GitSimpleHandler(getProject(),contentRoot,GitCommand.COMMIT);
      handler.setSilent(false);
      handler.addParameters("-a");
      handler.addParameters("-m","Deploy");
      handler.endOptions();
      handler.run();
    }
  }
 catch (  VcsException e) {
    throw new ServerRuntimeException(e);
  }
  repository.update();
  pushApplication(getRemoteName(),application.getGitUrl());
}
