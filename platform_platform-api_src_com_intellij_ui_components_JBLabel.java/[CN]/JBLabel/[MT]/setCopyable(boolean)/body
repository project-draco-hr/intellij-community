{
  if (copyable ^ myEditorPane != null) {
    if (myEditorPane == null) {
      setLayout(new GridLayout(1,1));
      final JLabel ellipsisLabel=new JBLabel("...");
      myEditorPane=new JEditorPane(){
        @Override public void paint(        Graphics g){
          Dimension size=getSize();
          String plain=StringUtil.removeHtmlTags(getText());
          boolean paintEllipsis=getPreferredSize().width > size.width && plain != null && !plain.contains(SystemProperties.getLineSeparator());
          if (!paintEllipsis) {
            super.paint(g);
          }
 else {
            Dimension ellipsisSize=ellipsisLabel.getPreferredSize();
            int endOffset=size.width - ellipsisSize.width;
            try {
              endOffset=modelToView(viewToModel(new Point(endOffset,0)) - 1).x;
            }
 catch (            BadLocationException ignore) {
            }
            Shape oldClip=g.getClip();
            g.clipRect(0,0,endOffset,size.height);
            super.paint(g);
            g.setClip(oldClip);
            g.translate(endOffset,0);
            ellipsisLabel.setSize(ellipsisSize);
            ellipsisLabel.paint(g);
            g.translate(-endOffset,0);
          }
        }
      }
;
      myEditorPane.setBorder(new Border(){
        @Override public void paintBorder(        Component c,        Graphics g,        int x,        int y,        int width,        int height){
        }
        @Override public Insets getBorderInsets(        Component c){
          Icon icon=getIcon();
          int leftGap=icon != null ? icon.getIconWidth() + getIconTextGap() : 0;
          return new Insets(0,leftGap,0,0);
        }
        @Override public boolean isBorderOpaque(){
          return false;
        }
      }
);
      myEditorPane.addFocusListener(new FocusAdapter(){
        @Override public void focusLost(        FocusEvent e){
          if (myEditorPane == null)           return;
          int caretPosition=myEditorPane.getCaretPosition();
          myEditorPane.setSelectionStart(caretPosition);
          myEditorPane.setSelectionEnd(caretPosition);
        }
      }
);
      myEditorPane.setContentType("text/html");
      myEditorPane.setEditable(false);
      myEditorPane.setBackground(UIUtil.TRANSPARENT_COLOR);
      myEditorPane.setOpaque(false);
      myEditorPane.setText(getText());
      myEditorPane.setCaretPosition(0);
      UIUtil.putClientProperty(myEditorPane,UIUtil.NOT_IN_HIERARCHY_COMPONENTS,Collections.singleton(ellipsisLabel));
      updateStyle(myEditorPane);
      add(myEditorPane);
    }
 else {
      remove(myEditorPane);
      myEditorPane=null;
    }
  }
  return this;
}
