{
  if (languageLevel.isAtLeast(LanguageLevel.JDK_1_5) && isGetClass(method)) {
    PsiExpression qualifier=methodExpression.getQualifierExpression();
    PsiType qualifierType=null;
    final Project project=call.getProject();
    if (qualifier != null) {
      qualifierType=TypeConversionUtil.erasure(qualifier.getType());
    }
 else     if (condition != null) {
      ASTNode parent=call.getNode().getTreeParent();
      while (parent != null && condition.value(parent.getElementType())) {
        parent=parent.getTreeParent();
      }
      if (parent != null) {
        qualifierType=JavaPsiFacade.getInstance(project).getElementFactory().createType((PsiClass)parent.getPsi());
      }
    }
    PsiElement parent=call.getParent();
    boolean captureTopLevelWildcards=parent instanceof PsiReferenceExpression && parent.getParent() instanceof PsiMethodCallExpression || parent instanceof PsiExpressionList;
    return createJavaLangClassType(methodExpression,qualifierType,captureTopLevelWildcards);
  }
  return null;
}
