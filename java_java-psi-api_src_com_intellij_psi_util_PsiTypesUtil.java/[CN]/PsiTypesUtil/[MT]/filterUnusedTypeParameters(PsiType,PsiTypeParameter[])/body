{
  if (typeParameters.length == 0)   return typeParameters;
  final Set<PsiTypeParameter> usedParameters=new HashSet<PsiTypeParameter>();
  superReturnTypeInBaseClassType.accept(new PsiTypeVisitor<Object>(){
    @Nullable @Override public Object visitClassType(    PsiClassType classType){
      final PsiClass aClass=classType.resolve();
      if (aClass instanceof PsiTypeParameter && ArrayUtil.find(typeParameters,aClass) > -1) {
        usedParameters.add((PsiTypeParameter)aClass);
        return null;
      }
      for (      PsiType type : classType.getParameters()) {
        type.accept(this);
      }
      return null;
    }
    @Nullable @Override public Object visitWildcardType(    PsiWildcardType wildcardType){
      final PsiType bound=wildcardType.getBound();
      return bound != null ? bound.accept(this) : null;
    }
    @Nullable @Override public Object visitArrayType(    PsiArrayType arrayType){
      return arrayType.getComponentType().accept(this);
    }
  }
);
  return usedParameters.toArray(new PsiTypeParameter[usedParameters.size()]);
}
