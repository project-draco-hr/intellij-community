{
  myFailFastOnAcquireReadAction=failFastOnAcquireReadAction;
  if (toolWrappers.isEmpty())   return;
  List<PsiElement> inside=new ArrayList<PsiElement>();
  List<PsiElement> outside=new ArrayList<PsiElement>();
  Divider.divideInsideAndOutside(getFile(),myRestrictRange.getStartOffset(),myRestrictRange.getEndOffset(),myPriorityRange,inside,new ArrayList<ProperTextRange>(),outside,new ArrayList<ProperTextRange>(),true,FILE_FILTER);
  MultiMap<LocalInspectionToolWrapper,String> toolToLanguages=InspectionEngine.getToolsForElements(toolWrappers,inside,outside);
  setProgressLimit(toolToLanguages.size() * 2L);
  final LocalInspectionToolSession session=new LocalInspectionToolSession(getFile(),myRestrictRange.getStartOffset(),myRestrictRange.getEndOffset());
  List<InspectionContext> init=visitPriorityElementsAndInit(toolToLanguages,iManager,isOnTheFly,progress,inside,session,toolWrappers);
  visitRestElementsAndCleanup(progress,outside,session,init);
  inspectInjectedPsi(outside,isOnTheFly,progress,iManager,false,toolWrappers);
  progress.checkCanceled();
  myInfos=new ArrayList<HighlightInfo>();
  addHighlightsFromResults(myInfos,progress);
}
