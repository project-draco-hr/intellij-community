{
  final MethodChainsSearchService searchService=new MethodChainsSearchService(completionContext.getProject(),useBigrams);
  final List<MethodsChain> searchResult=searchChains(targetClassQName,contextRelevantTypes,MAX_SEARCH_RESULT_SIZE,MAX_CHAIN_SIZE,completionContext,searchService);
  if (searchResult.size() < MAX_SEARCH_RESULT_SIZE) {
    final PsiClass aClass=JavaPsiFacade.getInstance(completionContext.getProject()).findClass(targetClassQName,GlobalSearchScope.allScope(completionContext.getProject()));
    if (aClass != null) {
      DirectClassInheritorsSearch.search(aClass).forEach(new Processor<PsiClass>(){
        @Override public boolean process(        final PsiClass psiClass){
          final String inheritorQName=psiClass.getQualifiedName();
          if (!StringUtil.isEmpty(inheritorQName)) {
            final List<MethodsChain> inheritorFilteredSearchResult=new SmartList<MethodsChain>();
            for (            final MethodsChain chain : searchChains(inheritorQName,contextRelevantTypes,MAX_SEARCH_RESULT_SIZE,MAX_CHAIN_SIZE,completionContext,searchService)) {
              boolean insert=true;
              for (              final MethodsChain baseChain : searchResult) {
                final MethodsChain.CompareResult r=MethodsChain.compare(baseChain,chain,completionContext);
                if (r != MethodsChain.CompareResult.NOT_EQUAL) {
                  insert=false;
                  break;
                }
              }
              if (insert) {
                inheritorFilteredSearchResult.add(chain);
              }
            }
            searchResult.addAll(inheritorFilteredSearchResult);
          }
          return true;
        }
      }
);
    }
  }
  final List<MethodsChain> chains=searchResult.size() > MAX_CHAIN_SIZE ? chooseHead(searchResult) : searchResult;
  return MethodsChainLookupRangingHelper.chainsToWeightableLookupElements(filterTailAndGetSumLastMethodOccurrence(chains),completionContext);
}
