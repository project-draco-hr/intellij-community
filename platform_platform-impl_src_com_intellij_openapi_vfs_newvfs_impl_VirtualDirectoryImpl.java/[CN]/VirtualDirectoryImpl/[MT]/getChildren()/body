{
  NewVirtualFileSystem delegate=getFileSystem();
  final boolean ignoreCase=!delegate.isCaseSensitive();
synchronized (myData) {
    if (allChildrenLoaded()) {
      assertConsistency(ignoreCase);
      return getArraySafely();
    }
    final boolean wasChildrenLoaded=ourPersistence.areChildrenLoaded(this);
    final FSRecords.NameId[] childrenIds=ourPersistence.listAll(this);
    int[] result;
    if (childrenIds.length == 0) {
      result=ArrayUtil.EMPTY_INT_ARRAY;
    }
 else {
      Arrays.sort(childrenIds,new Comparator<FSRecords.NameId>(){
        @Override public int compare(        FSRecords.NameId o1,        FSRecords.NameId o2){
          CharSequence name1=o1.name;
          CharSequence name2=o2.name;
          int cmp=compareNames(name1,name2,ignoreCase);
          if (cmp == 0 && name1 != name2) {
            LOG.error(ourPersistence + " returned duplicate file names(" + name1+ ","+ name2+ ")"+ " ignoreCase: "+ ignoreCase+ " SystemInfo.isFileSystemCaseSensitive: "+ SystemInfo.isFileSystemCaseSensitive+ " SystemInfo.OS: "+ SystemInfo.OS_NAME+ " "+ SystemInfo.OS_VERSION+ " wasChildrenLoaded: "+ wasChildrenLoaded+ " in the dir: "+ VirtualDirectoryImpl.this+ ";"+ " children: "+ Arrays.toString(childrenIds));
          }
          return cmp;
        }
      }
);
      TIntHashSet prevChildren=new TIntHashSet(myData.myChildrenIds);
      result=new int[childrenIds.length];
      for (int i=0; i < childrenIds.length; i++) {
        FSRecords.NameId child=childrenIds[i];
        result[i]=child.id;
        prevChildren.remove(child.id);
        if (VfsData.getFileById(child.id,this) == null) {
          createChild(child.nameId,child.id,delegate);
        }
      }
      if (!prevChildren.isEmpty()) {
        LOG.error("Loaded child disappeared: " + "parent=" + verboseToString.fun(this) + "; child="+ verboseToString.fun(VfsData.getFileById(prevChildren.toArray()[0],this)));
      }
    }
    if (getId() > 0) {
      myData.myChildrenIds=result;
      assertConsistency(ignoreCase,childrenIds);
      setChildrenLoaded();
    }
    return getArraySafely();
  }
}
