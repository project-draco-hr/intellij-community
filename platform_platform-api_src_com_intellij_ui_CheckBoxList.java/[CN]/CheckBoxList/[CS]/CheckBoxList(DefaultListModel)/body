{
  super();
  setModel(dataModel);
  final CellRenderer cellRenderer=new CellRenderer();
  setCellRenderer(cellRenderer);
  setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  setBorder(BorderFactory.createEtchedBorder());
  addKeyListener(new KeyAdapter(){
    @Override public void keyTyped(    KeyEvent e){
      if (e.getKeyChar() == ' ') {
        for (        int index : getSelectedIndices()) {
          if (index >= 0) {
            JCheckBox checkbox=(JCheckBox)getModel().getElementAt(index);
            setSelected(checkbox,index);
          }
        }
      }
    }
  }
);
  new ClickListener(){
    @Override public boolean onClick(    @NotNull MouseEvent e,    int clickCount){
      if (isEnabled()) {
        int index=locationToIndex(e.getPoint());
        if (index != -1) {
          JCheckBox checkbox=(JCheckBox)getModel().getElementAt(index);
          int iconArea;
          try {
            iconArea=checkbox.getMargin().left + ((BasicRadioButtonUI)checkbox.getUI()).getDefaultIcon().getIconWidth() + checkbox.getIconTextGap();
          }
 catch (          ClassCastException c) {
            iconArea=DEFAULT_CHECK_BOX_WIDTH;
          }
          int checkboxX=e.getX() - cellRenderer.getLeftBorderThickness();
          if (checkboxX >= 0 && checkboxX < iconArea) {
            setSelected(checkbox,index);
            return true;
          }
        }
      }
      return false;
    }
  }
.installOn(this);
}
