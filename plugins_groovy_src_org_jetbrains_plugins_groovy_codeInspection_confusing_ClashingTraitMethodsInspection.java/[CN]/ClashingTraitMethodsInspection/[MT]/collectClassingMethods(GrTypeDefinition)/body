{
  Collection<HierarchicalMethodSignature> visibleSignatures=typeDefinition.getVisibleSignatures();
  List<ClashingMethod> clashingMethods=ContainerUtil.newArrayList();
  for (  HierarchicalMethodSignature signature : visibleSignatures) {
    PsiMethod method=signature.getMethod();
    if (method instanceof GrTraitMethod && method.getContainingClass() == typeDefinition) {
      List<HierarchicalMethodSignature> superSignatures=signature.getSuperSignatures();
      if (superSignatures.size() > 1) {
        List<GrTypeDefinition> traits=ContainerUtil.newArrayList();
        for (        HierarchicalMethodSignature superSignature : superSignatures) {
          PsiClass superClass=superSignature.getMethod().getContainingClass();
          if (GrTraitUtil.isTrait(superClass)) {
            traits.add((GrTypeDefinition)superClass);
          }
        }
        if (!traits.isEmpty()) {
          clashingMethods.add(new ClashingMethod(signature,traits));
        }
      }
    }
  }
  return clashingMethods;
}
