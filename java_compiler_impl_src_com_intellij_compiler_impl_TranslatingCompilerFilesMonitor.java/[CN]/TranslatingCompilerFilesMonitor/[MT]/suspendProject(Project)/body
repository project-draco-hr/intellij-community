{
  final int projectId=getProjectId(project);
synchronized (myDataLock) {
    if (!mySuspendedProjects.add(projectId)) {
      return;
    }
    FileUtil.createIfDoesntExist(CompilerPaths.getRebuildMarkerFile(project));
    if (myWatchedProjectsCount > 0)     --myWatchedProjectsCount;
    if (ourDebugMode) {
      System.out.println("After suspend for project:" + projectId + ","+ myWatchedProjectsCount);
    }
    mySourcesToRecompile.remove(projectId);
    myOutputsToDelete.remove(projectId);
    myGeneratedDataPaths.remove(project);
  }
synchronized (myProjectOutputRoots) {
    ensureOutputStorageInitialized();
    myProjectOutputRoots.remove(projectId);
    try {
      myOutputRootsStorage.remove(projectId);
    }
 catch (    IOException e) {
      LOG.info(e);
    }
  }
}
