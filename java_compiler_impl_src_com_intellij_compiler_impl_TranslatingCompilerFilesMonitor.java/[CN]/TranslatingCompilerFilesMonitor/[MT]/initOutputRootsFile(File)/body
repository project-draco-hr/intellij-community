{
  myOutputRootsStorage=new PersistentHashMap<Integer,TIntObjectHashMap<Couple<Integer>>>(rootsFile,EnumeratorIntegerDescriptor.INSTANCE,new DataExternalizer<TIntObjectHashMap<Couple<Integer>>>(){
    public void save(    @NotNull DataOutput out,    TIntObjectHashMap<Couple<Integer>> value) throws IOException {
      for (final TIntObjectIterator<Couple<Integer>> it=value.iterator(); it.hasNext(); ) {
        it.advance();
        DataInputOutputUtil.writeINT(out,it.key());
        final Couple<Integer> pair=it.value();
        DataInputOutputUtil.writeINT(out,pair.first);
        DataInputOutputUtil.writeINT(out,pair.second);
      }
    }
    public TIntObjectHashMap<Couple<Integer>> read(    @NotNull DataInput in) throws IOException {
      final DataInputStream _in=(DataInputStream)in;
      final TIntObjectHashMap<Couple<Integer>> map=new TIntObjectHashMap<Couple<Integer>>();
      while (_in.available() > 0) {
        final int key=DataInputOutputUtil.readINT(_in);
        final int first=DataInputOutputUtil.readINT(_in);
        final int second=DataInputOutputUtil.readINT(_in);
        map.put(key,Couple.newOne(first,second));
      }
      return map;
    }
  }
);
}
