{
  if (!(fromFile.getFileSystem() instanceof LocalFileSystem)) {
    return;
  }
  final FileTypeManager fileTypeManager=FileTypeManager.getInstance();
  VfsUtilCore.visitChildrenRecursively(fromFile,new VirtualFileVisitor(){
    @NotNull @Override public Result visitFileEx(    @NotNull VirtualFile file){
      if (fileTypeManager.isFileIgnored(file)) {
        return SKIP_CHILDREN;
      }
      if (!file.isDirectory()) {
        processor.execute(file);
      }
      return CONTINUE;
    }
    @Nullable @Override public Iterable<VirtualFile> getChildrenIterable(    @NotNull VirtualFile file){
      if (dbOnly) {
        return file.isDirectory() ? ((NewVirtualFile)file).iterInDbChildren() : null;
      }
      if (file.equals(fromFile) || !file.isDirectory()) {
        return null;
      }
      return isInContentOfOpenedProject(file) ? null : ((NewVirtualFile)file).iterInDbChildren();
    }
  }
);
}
