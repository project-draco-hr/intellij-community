{
  boolean isInContent=false;
  for (  final Project project : myProjectManager.getOpenProjects()) {
    if (!project.isInitialized()) {
      continue;
    }
    final int projectId=getProjectId(project);
    final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
    if (fileIndex.isInContent(file)) {
      isInContent=true;
    }
    if (isSuspended(projectId)) {
      continue;
    }
    if (fileIndex.isInSourceContent(file)) {
      final TranslatingCompiler[] translators=CompilerManager.getInstance(project).getCompilers(TranslatingCompiler.class);
      processRecursively(file,false,false,new FileProcessor(){
        public void execute(        final VirtualFile file){
          if (isCompilable(file)) {
            loadInfoAndAddSourceForRecompilation(projectId,file);
          }
        }
        boolean isCompilable(        VirtualFile file){
          for (          TranslatingCompiler translator : translators) {
            if (translator.isCompilableFile(file,DummyCompileContext.getInstance())) {
              return true;
            }
          }
          return false;
        }
      }
);
    }
 else {
      if (belongsToIntermediateSources(file,project)) {
        processRecursively(file,false,false,new FileProcessor(){
          public void execute(          final VirtualFile file){
            loadInfoAndAddSourceForRecompilation(projectId,file);
          }
        }
);
      }
    }
  }
  if (notifyServer && !isIgnoredOrUnderIgnoredDirectory(file)) {
    final Set<File> pathsToMark=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
    boolean dbOnly=!isInContent;
    processRecursively(file,dbOnly,false,new FileProcessor(){
      @Override public void execute(      VirtualFile file){
        pathsToMark.add(new File(file.getPath()));
      }
    }
);
    notifyFilesChanged(pathsToMark);
  }
}
