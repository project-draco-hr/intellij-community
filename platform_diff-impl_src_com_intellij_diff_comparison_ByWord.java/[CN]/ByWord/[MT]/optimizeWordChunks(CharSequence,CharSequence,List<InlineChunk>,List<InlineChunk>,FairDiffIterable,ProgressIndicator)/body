{
  List<Range> newRanges=new ArrayList<Range>();
  for (  Range range2 : iterable.iterateUnchanged()) {
    Range range1=ContainerUtil.getLastItem(newRanges);
    if (range1 == null || (range1.end1 != range2.start1 && range1.end2 != range2.start2)) {
      newRanges.add(range2);
      continue;
    }
    int count1=range1.end1 - range1.start1;
    int count2=range2.end1 - range2.start1;
    int equalForward=expandForward(words1,words2,range1.end1,range1.end2,range1.end1 + count2,range1.end2 + count2);
    if (equalForward == count2) {
      newRanges.remove(newRanges.size() - 1);
      newRanges.add(new Range(range1.start1,range1.end1 + count2,range1.start2,range1.end2 + count2));
      continue;
    }
    int equalBackward=expandBackward(words1,words2,range2.start1 - count1,range2.start2 - count1,range2.start1,range2.start2);
    if (equalBackward == count1) {
      newRanges.remove(newRanges.size() - 1);
      newRanges.add(new Range(range2.start1 - count1,range2.end1,range2.start2 - count1,range2.end2));
      continue;
    }
    Side touchSide=Side.fromLeft(range1.end1 == range2.start1);
    List<InlineChunk> touchWords=touchSide.select(words1,words2);
    CharSequence touchText=touchSide.select(text1,text2);
    int touchStart=touchSide.select(range2.start1,range2.start2);
    if (!isSeparatedWithWhitespace(touchText,touchWords.get(touchStart - 1),touchWords.get(touchStart))) {
      int leftShift=findSequenceEdgeShift(touchText,touchWords,touchStart,equalForward,true);
      if (leftShift > 0) {
        newRanges.remove(newRanges.size() - 1);
        newRanges.add(new Range(range1.start1,range1.end1 + leftShift,range1.start2,range1.end2 + leftShift));
        newRanges.add(new Range(range2.start1 + leftShift,range2.end1,range2.start2 + leftShift,range2.end2));
        continue;
      }
      int rightShift=findSequenceEdgeShift(touchText,touchWords,touchStart - 1,equalBackward,false);
      if (rightShift > 0) {
        newRanges.remove(newRanges.size() - 1);
        newRanges.add(new Range(range1.start1,range1.end1 - rightShift,range1.start2,range1.end2 - rightShift));
        newRanges.add(new Range(range2.start1 - rightShift,range2.end1,range2.start2 - rightShift,range2.end2));
        continue;
      }
    }
    newRanges.add(range2);
  }
  return fair(createUnchanged(newRanges,words1.size(),words2.size()));
}
