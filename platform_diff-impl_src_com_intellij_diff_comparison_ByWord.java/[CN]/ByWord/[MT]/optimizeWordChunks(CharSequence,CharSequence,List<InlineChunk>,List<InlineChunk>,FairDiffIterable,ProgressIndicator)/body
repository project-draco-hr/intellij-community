{
  List<Range> newRanges=new ArrayList<Range>();
  for (  Range range : iterable.iterateUnchanged()) {
    Range lastRange=ContainerUtil.getLastItem(newRanges);
    if (lastRange == null || (lastRange.end1 != range.start1 && lastRange.end2 != range.start2)) {
      newRanges.add(range);
      continue;
    }
    int count=range.end1 - range.start1;
    int lastCount=lastRange.end1 - lastRange.start1;
    int equalLeft=equalRanges(words1,words2,lastRange.end1,lastRange.end2,count,true);
    if (equalLeft == count) {
      newRanges.remove(newRanges.size() - 1);
      newRanges.add(new Range(lastRange.start1,lastRange.end1 + count,lastRange.start2,lastRange.end2 + count));
      continue;
    }
    int equalRight=equalRanges(words1,words2,range.start1 - lastCount,range.start2 - lastCount,lastCount,false);
    if (equalRight == lastCount) {
      newRanges.remove(newRanges.size() - 1);
      newRanges.add(new Range(range.start1 - lastCount,range.end1,range.start2 - lastCount,range.end2));
      continue;
    }
    Side touchSide=Side.fromLeft(lastRange.end1 == range.start1);
    List<InlineChunk> touchWords=touchSide.select(words1,words2);
    CharSequence touchText=touchSide.select(text1,text2);
    int touchStart=touchSide.select(range.start1,range.start2);
    if (!isSeparatedWithWhitespace(touchText,touchWords.get(touchStart - 1),touchWords.get(touchStart))) {
      int leftShift=findSequenceEdgeShift(touchText,touchWords,touchStart,equalLeft,true);
      if (leftShift > 0) {
        newRanges.remove(newRanges.size() - 1);
        newRanges.add(new Range(lastRange.start1,lastRange.end1 + leftShift,lastRange.start2,lastRange.end2 + leftShift));
        newRanges.add(new Range(range.start1 + leftShift,range.end1,range.start2 + leftShift,range.end2));
        continue;
      }
      int rightShift=findSequenceEdgeShift(touchText,touchWords,touchStart - 1,equalRight,false);
      if (rightShift > 0) {
        newRanges.remove(newRanges.size() - 1);
        newRanges.add(new Range(lastRange.start1,lastRange.end1 - rightShift,lastRange.start2,lastRange.end2 - rightShift));
        newRanges.add(new Range(range.start1 - rightShift,range.end1,range.start2 - rightShift,range.end2));
        continue;
      }
    }
    newRanges.add(range);
  }
  return fair(createUnchanged(newRanges,words1.size(),words2.size()));
}
