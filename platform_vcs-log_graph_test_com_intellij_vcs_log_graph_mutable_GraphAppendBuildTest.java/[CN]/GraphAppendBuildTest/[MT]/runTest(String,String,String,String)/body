{
  List<GraphCommit> vcsCommitParentses=SimpleCommitListParser.parseCommitList(firstPart);
  final MutableGraph graph=GraphTestUtils.buildGraph(vcsCommitParentses,Collections.<VcsRef>emptyList());
  assertEquals(firstPartStr,toStr(graph));
  vcsCommitParentses=SimpleCommitListParser.parseCommitList(secondPart);
  new GraphAppendBuilder(graph,makeRefs(firstPart)){
    @NotNull @Override protected GraphBuilder createGraphBuilder(    List<GraphCommit> commitParentses,    MutableNodeRow nextRow,    Map<Integer,MutableNode> underdoneNodes,    int startIndex,    Map<Integer,Integer> commitLogIndexes){
      return new GraphBuilder(commitParentses.size() + startIndex - 1,commitLogIndexes,graph,underdoneNodes,nextRow,Collections.<VcsRef>emptyList()){
        @NotNull @Override protected Branch createBranch(        int commitHash,        @NotNull Collection<VcsRef> refs){
          return GraphTestUtils.createBranchWithFakeRoot(commitHash,refs);
        }
      }
;
    }
  }
.appendToGraph(vcsCommitParentses);
  assertEquals(secondPartStr,toStr(graph));
}
