{
  if (mayBeVisibleOutsideOwnerFile(element)) {
    if (element instanceof PsiField) {
      final PsiField field=(PsiField)element;
      final PsiClass aClass=field.getContainingClass();
      if (aClass == null || aClass instanceof PsiAnonymousClass)       return null;
      final String jvmOwnerName=ClassUtil.getJVMClassName(aClass);
      final String name=field.getName();
      if (name == null || jvmOwnerName == null)       return null;
      return new LightRef.JavaLightFieldRef(id(jvmOwnerName,names),id(name,names));
    }
 else     if (element instanceof PsiMethod) {
      final PsiClass aClass=((PsiMethod)element).getContainingClass();
      if (aClass == null || aClass instanceof PsiAnonymousClass)       return null;
      final String jvmOwnerName=ClassUtil.getJVMClassName(aClass);
      if (jvmOwnerName == null)       return null;
      final PsiMethod method=(PsiMethod)element;
      final String name=method.isConstructor() ? "<init>" : method.getName();
      final int parametersCount=method.getParameterList().getParametersCount();
      return new LightRef.JavaLightMethodRef(id(jvmOwnerName,names),id(name,names),parametersCount);
    }
 else     if (element instanceof PsiClass) {
      final String jvmClassName=ClassUtil.getJVMClassName((PsiClass)element);
      if (jvmClassName != null) {
        return new LightRef.JavaLightClassRef(id(jvmClassName,names));
      }
    }
  }
  return null;
}
