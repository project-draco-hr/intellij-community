{
  List<String> filterParameters=ContainerUtil.newArrayList();
  VcsLogBranchFilter branchFilter=filterCollection.getBranchFilter();
  if (branchFilter != null) {
    HgRepository repository=myRepositoryManager.getRepositoryForRoot(root);
    if (repository == null) {
      LOG.error("Repository not found for root " + root);
      return Collections.emptyList();
    }
    Collection<String> branchNames=repository.getBranches().keySet();
    Collection<String> bookmarkNames=HgUtil.getNamesWithoutHashes(repository.getBookmarks());
    Collection<String> predefinedNames=ContainerUtil.list(TIP_REFERENCE);
    boolean atLeastOneBranchExists=false;
    for (    String branchName : ContainerUtil.concat(branchNames,bookmarkNames,predefinedNames)) {
      if (branchFilter.matches(branchName)) {
        filterParameters.add(HgHistoryUtil.prepareParameter("branch",branchName));
        atLeastOneBranchExists=true;
      }
    }
    if (branchFilter.matches(HEAD_REFERENCE)) {
      filterParameters.add(HgHistoryUtil.prepareParameter("branch","."));
      filterParameters.add("-r");
      filterParameters.add("::.");
      atLeastOneBranchExists=true;
    }
    if (!atLeastOneBranchExists) {
      return Collections.emptyList();
    }
  }
  if (filterCollection.getUserFilter() != null) {
    filterParameters.add("-r");
    String authorFilter=StringUtil.join(ContainerUtil.map(filterCollection.getUserFilter().getUserNames(root),UserNameRegex.INSTANCE),"|");
    filterParameters.add("user('re:" + authorFilter + "')");
  }
  if (filterCollection.getDateFilter() != null) {
    StringBuilder args=new StringBuilder();
    final SimpleDateFormat dateFormatter=new SimpleDateFormat("yyyy-MM-dd HH:mm");
    filterParameters.add("-d");
    VcsLogDateFilter filter=filterCollection.getDateFilter();
    if (filter.getAfter() != null) {
      if (filter.getBefore() != null) {
        args.append(dateFormatter.format(filter.getAfter())).append(" to ").append(dateFormatter.format(filter.getBefore()));
      }
 else {
        args.append('>').append(dateFormatter.format(filter.getAfter()));
      }
    }
 else     if (filter.getBefore() != null) {
      args.append('<').append(dateFormatter.format(filter.getBefore()));
    }
    filterParameters.add(args.toString());
  }
  if (filterCollection.getTextFilter() != null) {
    String textFilter=filterCollection.getTextFilter().getText();
    filterParameters.add(HgHistoryUtil.prepareParameter("keyword",textFilter));
  }
  if (filterCollection.getStructureFilter() != null) {
    for (    VirtualFile file : filterCollection.getStructureFilter().getFiles()) {
      filterParameters.add(file.getPath());
    }
  }
  return HgHistoryUtil.readAllHashes(myProject,root,Consumer.EMPTY_CONSUMER,filterParameters);
}
