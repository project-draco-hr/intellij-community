{
  LinkedHashSet<String> messages=newLinkedHashSet();
  GitRepositoryManager manager=getRepositoryManager(myProject);
  for (  VirtualFile root : GitUtil.gitRoots(asList(filesToCheckin))) {
    GitRepository repository=manager.getRepositoryForRoot(root);
    if (repository == null) {
      LOG.warn("Unregistered repository: " + root);
      continue;
    }
    File mergeMsg=repository.getRepositoryFiles().getMergeMessageFile();
    File squashMsg=repository.getRepositoryFiles().getSquashMessageFile();
    try {
      if (!mergeMsg.exists() && !squashMsg.exists()) {
        continue;
      }
      String encoding=GitConfigUtil.getCommitEncoding(myProject,root);
      if (mergeMsg.exists()) {
        messages.add(loadMessage(mergeMsg,encoding));
      }
 else {
        messages.add(loadMessage(squashMsg,encoding));
      }
    }
 catch (    IOException e) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Unable to load merge message",e);
      }
    }
  }
  return DvcsUtil.joinMessagesOrNull(messages);
}
