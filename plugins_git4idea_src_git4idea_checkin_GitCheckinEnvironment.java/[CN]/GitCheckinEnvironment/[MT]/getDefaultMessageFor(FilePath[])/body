{
  StringBuilder rc=new StringBuilder();
  for (  VirtualFile root : GitUtil.gitRoots(Arrays.asList(filesToCheckin))) {
    VirtualFile mergeMsg=root.findFileByRelativePath(GitRepositoryFiles.GIT_MERGE_MSG);
    VirtualFile squashMsg=root.findFileByRelativePath(GitRepositoryFiles.GIT_SQUASH_MSG);
    VirtualFile normalMsg=root.findFileByRelativePath(GitRepositoryFiles.GIT_COMMIT_EDITMSG);
    try {
      if (mergeMsg == null && squashMsg == null && normalMsg == null) {
        continue;
      }
      String encoding=GitConfigUtil.getCommitEncoding(myProject,root);
      if (mergeMsg != null) {
        rc.append(loadMessage(mergeMsg,encoding));
      }
 else       if (squashMsg != null) {
        rc.append(loadMessage(squashMsg,encoding));
      }
 else {
        rc.append(loadMessage(normalMsg,encoding));
      }
    }
 catch (    IOException e) {
      if (log.isDebugEnabled()) {
        log.debug("Unable to load merge message",e);
      }
    }
  }
  if (rc.length() != 0) {
    return rc.toString();
  }
  return null;
}
