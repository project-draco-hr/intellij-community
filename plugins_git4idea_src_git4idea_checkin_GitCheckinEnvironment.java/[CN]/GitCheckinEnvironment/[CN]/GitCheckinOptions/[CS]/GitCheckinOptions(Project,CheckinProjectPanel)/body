{
  super(project,panel);
  myVcs=GitVcs.getInstance(project);
  final Insets insets=new Insets(2,2,2,2);
  GridBagConstraints c=new GridBagConstraints();
  c.gridx=0;
  c.gridy=0;
  c.anchor=GridBagConstraints.WEST;
  c.insets=insets;
  final JLabel authorLabel=new JLabel(GitBundle.message("commit.author"));
  myPanel.add(authorLabel,c);
  c=new GridBagConstraints();
  c.anchor=GridBagConstraints.CENTER;
  c.insets=insets;
  c.gridx=1;
  c.gridy=0;
  c.weightx=1;
  c.fill=GridBagConstraints.HORIZONTAL;
  Set<String> authors=new HashSet<String>(getUsersList(project));
  ContainerUtil.addAll(authors,mySettings.getCommitAuthors());
  List<String> list=new ArrayList<String>(authors);
  Collections.sort(list);
  myAuthorField=new ComboBox(ArrayUtil.toObjectArray(list)){
    @Override public void addNotify(){
      super.addNotify();
      StringComboboxEditor comboboxEditor=new StringComboboxEditor(project,FileTypes.PLAIN_TEXT,myAuthorField,true){
        @Override protected void onEditorCreate(        EditorEx editor){
          EditorCustomization customization=SpellCheckingEditorCustomizationProvider.getInstance().getDisabledCustomization();
          if (customization != null) {
            customization.customize(editor);
          }
        }
      }
;
      myAuthorField.setEditor(comboboxEditor);
    }
  }
;
  myAuthorField.setRenderer(new ListCellRendererWrapper<String>(){
    @Override public void customize(    JList list,    String value,    int index,    boolean selected,    boolean hasFocus){
      if (value != null) {
        setText(StringUtil.trimLog(value,100));
      }
    }
  }
);
  myAuthorField.setMinimumAndPreferredWidth(100);
  myAuthorField.setEditable(true);
  authorLabel.setLabelFor(myAuthorField);
  myAuthorField.setToolTipText(GitBundle.getString("commit.author.tooltip"));
  myPanel.add(myAuthorField,c);
}
