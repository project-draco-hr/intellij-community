{
  final String functionName=myNameField.getText().trim();
  if (!functionName.equals(myMethod.getName())) {
    final boolean defined=IntroduceValidator.isDefinedInScope(functionName,myMethod.getMethod());
    if (defined) {
      return PyBundle.message("refactoring.change.signature.dialog.validation.name.defined");
    }
  }
  final List<PyParameterTableModelItem> parameters=myParametersTableModel.getItems();
  Set<String> parameterNames=new HashSet<String>();
  boolean hadPositionalContainer=false;
  boolean hadKeywordContainer=false;
  boolean hadDefaultValue=false;
  boolean hadSingleStar=false;
  boolean hadParamsAfterSingleStar=false;
  LanguageLevel languageLevel=LanguageLevel.forElement(myMethod.getMethod());
  for (  PyParameterTableModelItem info : parameters) {
    final PyParameterInfo parameter=info.parameter;
    final String name=parameter.getName();
    if (parameterNames.contains(name)) {
      return PyBundle.message("ANN.duplicate.param.name");
    }
    parameterNames.add(name);
    if (name.equals("*")) {
      hadSingleStar=true;
    }
 else     if (name.startsWith("*") && !name.startsWith("**")) {
      if (hadKeywordContainer) {
        return PyBundle.message("ANN.starred.param.after.kwparam");
      }
      if (hadSingleStar) {
        return PyBundle.message("refactoring.change.signature.dialog.validation.multiple.star");
      }
      hadPositionalContainer=true;
    }
 else     if (name.startsWith("**")) {
      hadKeywordContainer=true;
      if (hadSingleStar && !hadParamsAfterSingleStar) {
        return PyBundle.message("ANN.named.arguments.after.star");
      }
    }
 else {
      if (hadSingleStar) {
        hadParamsAfterSingleStar=true;
      }
      if (hadPositionalContainer && !languageLevel.isPy3K()) {
        return PyBundle.message("ANN.regular.param.after.vararg");
      }
 else       if (hadKeywordContainer) {
        return PyBundle.message("ANN.regular.param.after.keyword");
      }
      final String defaultValue=parameter.getDefaultValue();
      if (defaultValue != null && !StringUtil.isEmptyOrSpaces(defaultValue)) {
        hadDefaultValue=true;
      }
 else {
        if (hadDefaultValue && parameter.getDefaultInSignature() && !hadSingleStar&& (!languageLevel.isPy3K() || !hadPositionalContainer)) {
          return PyBundle.message("ANN.non.default.param.after.default");
        }
      }
    }
  }
  if (!getTableComponent().isEditing()) {
    for (    final ParameterTableModelItemBase<PyParameterInfo> item : myParametersTableModel.getItems()) {
      if (item.parameter.getOldIndex() < 0 && !item.parameter.getName().startsWith("*")) {
        if (StringUtil.isEmpty(item.defaultValueCodeFragment.getText()))         return PyBundle.message("refactoring.change.signature.dialog.validation.default.missing");
        if (StringUtil.isEmptyOrSpaces(item.parameter.getName()))         return PyBundle.message("refactoring.change.signature.dialog.validation.parameter.missing");
      }
    }
  }
  return null;
}
