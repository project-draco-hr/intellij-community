{
  final String functionName=myNameField.getText().trim();
  if (!functionName.equals(myMethod.getName())) {
    final boolean defined=IntroduceValidator.isDefinedInScope(functionName,myMethod.getMethod());
    if (defined) {
      return PyBundle.message("refactoring.change.signature.dialog.validation.name.defined");
    }
    if (!isNameValid(functionName,myProject)) {
      return PyBundle.message("refactoring.change.signature.dialog.validation.function.name");
    }
  }
  final List<PyParameterTableModelItem> parameters=myParametersTableModel.getItems();
  Set<String> parameterNames=new HashSet<String>();
  boolean hadPositionalContainer=false;
  boolean hadKeywordContainer=false;
  boolean hadDefaultValue=false;
  boolean hadSingleStar=false;
  boolean hadParamsAfterSingleStar=false;
  LanguageLevel languageLevel=LanguageLevel.forElement(myMethod.getMethod());
  int parametersLength=parameters.size();
  for (int index=0; index != parametersLength; ++index) {
    PyParameterTableModelItem info=parameters.get(index);
    final PyParameterInfo parameter=info.parameter;
    final String name=parameter.getName();
    final String nameWithoutStars=StringUtil.trimLeading(name,'*').trim();
    if (parameterNames.contains(nameWithoutStars)) {
      return PyBundle.message("ANN.duplicate.param.name");
    }
    parameterNames.add(nameWithoutStars);
    if (name.equals("*")) {
      hadSingleStar=true;
      if (index == parametersLength - 1) {
        return PyBundle.message("ANN.named.arguments.after.star");
      }
    }
 else     if (name.startsWith("*") && !name.startsWith("**")) {
      if (hadKeywordContainer) {
        return PyBundle.message("ANN.starred.param.after.kwparam");
      }
      if (hadSingleStar || hadPositionalContainer) {
        return PyBundle.message("refactoring.change.signature.dialog.validation.multiple.star");
      }
      if (!isNameValid(name.substring(1),myProject)) {
        return PyBundle.message("refactoring.change.signature.dialog.validation.parameter.name");
      }
      hadPositionalContainer=true;
    }
 else     if (name.startsWith("**")) {
      if (hadSingleStar && !hadParamsAfterSingleStar) {
        return PyBundle.message("ANN.named.arguments.after.star");
      }
      if (hadKeywordContainer) {
        return PyBundle.message("refactoring.change.signature.dialog.validation.multiple.double.star");
      }
      if (!isNameValid(name.substring(2),myProject)) {
        return PyBundle.message("refactoring.change.signature.dialog.validation.parameter.name");
      }
      hadKeywordContainer=true;
    }
 else {
      if (!isNameValid(name,myProject)) {
        return PyBundle.message("refactoring.change.signature.dialog.validation.parameter.name");
      }
      if (hadSingleStar) {
        hadParamsAfterSingleStar=true;
      }
      if (hadPositionalContainer && !languageLevel.isPy3K()) {
        return PyBundle.message("ANN.regular.param.after.vararg");
      }
 else       if (hadKeywordContainer) {
        return PyBundle.message("ANN.regular.param.after.keyword");
      }
      final String defaultValue=info.getDefaultValue();
      if (defaultValue != null && !StringUtil.isEmptyOrSpaces(defaultValue) && parameter.getDefaultInSignature()) {
        hadDefaultValue=true;
      }
 else {
        if (hadDefaultValue && !hadSingleStar && (!languageLevel.isPy3K() || !hadPositionalContainer)) {
          return PyBundle.message("ANN.non.default.param.after.default");
        }
      }
    }
    if (parameter.getOldIndex() < 0) {
      if (!parameter.getName().startsWith("*")) {
        if (StringUtil.isEmpty(info.defaultValueCodeFragment.getText())) {
          return PyBundle.message("refactoring.change.signature.dialog.validation.default.missing");
        }
        if (StringUtil.isEmptyOrSpaces(parameter.getName())) {
          return PyBundle.message("refactoring.change.signature.dialog.validation.parameter.missing");
        }
      }
    }
 else     if (myMethod.getParameters().get(parameter.getOldIndex()).getDefaultInSignature() && StringUtil.isEmptyOrSpaces(parameter.getDefaultValue())) {
      return PyBundle.message("refactoring.change.signature.dialog.validation.default.missing");
    }
  }
  return null;
}
