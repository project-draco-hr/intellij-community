{
  project.putUserData(ExternalSystemDataKeys.NEWLY_IMPORTED_PROJECT,Boolean.TRUE);
  final DataNode<ProjectData> externalProjectNode=getExternalProjectNode();
  if (externalProjectNode != null) {
    beforeCommit(externalProjectNode,project);
  }
  boolean isFromUI=model != null;
  final List<Module> modules=ContainerUtil.newSmartList();
  final IdeModifiableModelsProvider modelsProvider=isFromUI ? new IdeUIModifiableModelsProvider(project,model,(ModulesConfigurator)modulesProvider,artifactModel){
    @NotNull @Override public Module newModule(    @NotNull @NonNls String filePath,    String moduleTypeId){
      final Module module=super.newModule(filePath,moduleTypeId);
      modules.add(module);
      return module;
    }
  }
 : new IdeModifiableModelsProviderImpl(project);
  AbstractExternalSystemSettings systemSettings=ExternalSystemApiUtil.getSettings(project,myExternalSystemId);
  final ExternalProjectSettings projectSettings=getCurrentExternalProjectSettings();
  Set<ExternalProjectSettings> projects=ContainerUtilRt.newHashSet(systemSettings.getLinkedProjectsSettings());
  projects.remove(projectSettings);
  projects.add(projectSettings);
  systemSettings.copyFrom(myControl.getSystemSettings());
  systemSettings.setLinkedProjectsSettings(projects);
  if (externalProjectNode != null) {
    if (!ApplicationManager.getApplication().isHeadlessEnvironment()) {
      ExternalProjectDataSelectorDialog dialog=new ExternalProjectDataSelectorDialog(project,new InternalExternalProjectInfo(myExternalSystemId,projectSettings.getExternalProjectPath(),externalProjectNode));
      if (dialog.hasMultipleDataToSelect()) {
        dialog.showAndGet();
      }
 else {
        dialog.dispose();
      }
    }
    myProjectDataManager.importData(externalProjectNode,project,modelsProvider,true);
    myExternalProjectNode=null;
    final Runnable resolveDependenciesTask=new Runnable(){
      @Override public void run(){
        ExternalSystemUtil.refreshProject(project,myExternalSystemId,projectSettings.getExternalProjectPath(),false,ProgressExecutionMode.IN_BACKGROUND_ASYNC);
      }
    }
;
    if (!isFromUI) {
      resolveDependenciesTask.run();
    }
 else {
      ExternalSystemUtil.invokeLater(project,ModalityState.NON_MODAL,new Runnable(){
        @Override public void run(){
          final Module[] committedModules=ModuleManager.getInstance(project).getModules();
          if (ContainerUtil.list(committedModules).containsAll(modules)) {
            resolveDependenciesTask.run();
          }
 else {
            ExternalSystemApiUtil.getLocalSettings(project,myExternalSystemId).forgetExternalProjects(Collections.singleton(projectSettings.getExternalProjectPath()));
            ExternalSystemApiUtil.getSettings(project,myExternalSystemId).unlinkExternalProject(projectSettings.getExternalProjectPath());
            ExternalProjectsManager.getInstance(project).forgetExternalProjectData(myExternalSystemId,projectSettings.getExternalProjectPath());
          }
        }
      }
);
    }
  }
  return modules;
}
