{
  myProjectDataManager.importData(externalProjectNode,project,modelsProvider,true);
  myExternalProjectNode=null;
  final Runnable resolveDependenciesTask=new Runnable(){
    @Override public void run(){
      ExternalSystemUtil.refreshProject(project,myExternalSystemId,projectSettings.getExternalProjectPath(),false,ProgressExecutionMode.IN_BACKGROUND_ASYNC);
    }
  }
;
  if (!isFromUI) {
    resolveDependenciesTask.run();
  }
 else {
    ExternalSystemUtil.invokeLater(project,ModalityState.NON_MODAL,new Runnable(){
      @Override public void run(){
        final Module[] committedModules=ModuleManager.getInstance(project).getModules();
        if (ContainerUtil.list(committedModules).containsAll(modules)) {
          resolveDependenciesTask.run();
        }
 else {
          ExternalSystemApiUtil.getLocalSettings(project,myExternalSystemId).forgetExternalProjects(Collections.singleton(projectSettings.getExternalProjectPath()));
          ExternalSystemApiUtil.getSettings(project,myExternalSystemId).unlinkExternalProject(projectSettings.getExternalProjectPath());
          ExternalProjectsManager.getInstance(project).forgetExternalProjectData(myExternalSystemId,projectSettings.getExternalProjectPath());
        }
      }
    }
);
  }
}
