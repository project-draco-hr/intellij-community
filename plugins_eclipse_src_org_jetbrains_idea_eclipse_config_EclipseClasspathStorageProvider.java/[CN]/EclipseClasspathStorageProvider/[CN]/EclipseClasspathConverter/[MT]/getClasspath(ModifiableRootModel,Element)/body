{
  try {
    CachedXmlDocumentSet documentSet=getFileSet();
    String path=documentSet.getParent(EclipseXml.PROJECT_FILE);
    if (!documentSet.exists(EclipseXml.PROJECT_FILE)) {
      if (!documentSet.exists(EclipseXml.CLASSPATH_FILE)) {
        return Collections.emptySet();
      }
      path=documentSet.getParent(EclipseXml.CLASSPATH_FILE);
    }
    Set<String> usedVariables;
    EclipseClasspathReader classpathReader=new EclipseClasspathReader(path,module.getProject(),null);
    classpathReader.init(model);
    if (documentSet.exists(EclipseXml.CLASSPATH_FILE)) {
      usedVariables=new THashSet<String>();
      classpathReader.readClasspath(model,new SmartList<String>(),new SmartList<String>(),usedVariables,new THashSet<String>(),null,documentSet.read(EclipseXml.CLASSPATH_FILE,false).getRootElement());
    }
 else {
      EclipseClasspathReader.setOutputUrl(model,path + "/bin");
      usedVariables=Collections.emptySet();
    }
    final String eml=model.getModule().getName() + EclipseXml.IDEA_SETTINGS_POSTFIX;
    if (documentSet.exists(eml)) {
      IdeaSpecificSettings.readIDEASpecific(model,documentSet,eml);
    }
 else {
      model.getModuleExtension(CompilerModuleExtension.class).setExcludeOutput(false);
    }
    ((RootModelImpl)model).writeExternal(element);
    return usedVariables;
  }
 catch (  ConversionException e) {
    throw new InvalidDataException(e);
  }
catch (  WriteExternalException e) {
    throw new InvalidDataException(e);
  }
catch (  JDOMException e) {
    throw new InvalidDataException(e);
  }
}
