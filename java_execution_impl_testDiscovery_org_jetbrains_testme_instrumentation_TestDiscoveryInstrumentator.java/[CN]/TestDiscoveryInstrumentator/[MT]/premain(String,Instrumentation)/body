{
  instrumentation.addTransformer(new ClassFileTransformer(){
    private boolean computeFrames=computeFrames();
    public byte[] transform(    ClassLoader loader,    String className,    Class classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws IllegalClassFormatException {
      try {
        if (className == null) {
          return null;
        }
        if (loader == null) {
          return null;
        }
        if (className.endsWith(".class")) {
          className=className.substring(0,className.length() - 6);
        }
        className=className.replace('\\','.').replace('/','.');
        if (className.startsWith("com.intellij.rt.") || className.startsWith("com.intellij.util.lang.") || className.startsWith("com.intellij.util.containers.")|| className.startsWith("com.intellij.openapi.util.text.")|| className.startsWith("com.intellij.openapi.util.io.")|| className.startsWith("java.")|| className.startsWith("sun.")|| className.startsWith("gnu.trove.")|| className.startsWith("org.jetbrains.org.objectweb.asm.")|| className.startsWith("org.apache.oro.text.regex.")|| className.startsWith("org.jetbrains.testme.")|| className.startsWith("org.junit.")|| className.startsWith("com.sun.")|| className.startsWith("junit.")|| className.startsWith("jdk.internal.")|| className.startsWith("com.intellij.junit3.")|| className.startsWith("com.intellij.junit4.")) {
          return null;
        }
        return instrument(classfileBuffer,className,loader,computeFrames);
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
      return null;
    }
    private boolean computeFrames(){
      return System.getProperty("idea.coverage.no.frames") == null;
    }
  }
);
}
