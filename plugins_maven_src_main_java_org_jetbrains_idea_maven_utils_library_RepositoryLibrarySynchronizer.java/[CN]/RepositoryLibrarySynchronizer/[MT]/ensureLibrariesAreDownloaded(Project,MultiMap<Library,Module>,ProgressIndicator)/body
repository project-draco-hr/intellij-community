{
  THashMap<Library,Pair<Integer,String>> libsToSync=new THashMap<Library,Pair<Integer,String>>();
  String localRepositoryPath=FileUtil.toSystemIndependentName(MavenProjectsManager.getInstance(project).getLocalRepository().getPath());
  AccessToken token=ApplicationManager.getApplication().acquireReadActionLock();
  try {
    for (    final Library library : libraries.keySet()) {
      String[] urls=library.getUrls(OrderRootType.CLASSES);
      VirtualFile[] files=library.getFiles(OrderRootType.CLASSES);
      if (urls.length <= files.length)       continue;
      int flag=0;
      if (library.getUrls(OrderRootType.SOURCES).length > 0)       flag|=0x1;
      if (library.getUrls(JavadocOrderRootType.getInstance()).length > 0)       flag|=0x2;
      String firstUrl=StringUtil.trimStart(PathUtil.getLocalPath(urls[0]),JarFileSystem.PROTOCOL_PREFIX);
      String storagePath=firstUrl.startsWith(localRepositoryPath) ? null : FileUtil.toSystemDependentName(PathUtil.getParentPath(firstUrl));
      libsToSync.put(library,Pair.create(flag,storagePath));
    }
  }
  finally {
    token.finish();
  }
  if (libsToSync.isEmpty())   return;
  Map<String,MavenRepositoryInfo> repoMap=new THashMap<String,MavenRepositoryInfo>();
  for (  String url : MavenRepositoryServicesManager.getServiceUrls()) {
    for (    MavenRepositoryInfo info : MavenRepositoryServicesManager.getRepositories(url)) {
      repoMap.put(info.getId(),info);
    }
  }
  final List<MavenArtifact> dowloaded=new ArrayList<MavenArtifact>();
  for (  final Library library : libsToSync.keySet()) {
    int flag=libsToSync.get(library).first;
    final String storagePath=libsToSync.get(library).second;
    final SmartList<MavenExtraArtifactType> extraTypes=new SmartList<MavenExtraArtifactType>();
    if ((flag & 0x1) != 0)     extraTypes.add(MavenExtraArtifactType.SOURCES);
    if ((flag & 0x2) != 0)     extraTypes.add(MavenExtraArtifactType.DOCS);
    RepositoryLibraryProperties properties=(RepositoryLibraryProperties)((LibraryEx)library).getProperties();
    MavenId mavenId=RepositoryAttachHandler.getMavenId(properties.getMavenId());
    List<MavenId> idsToResolve=Collections.singletonList(mavenId);
    indicator.setText("Synchronizing " + mavenId.getDisplayString() + "...");
    ArrayList<MavenRepositoryInfo> repositories=new ArrayList<MavenRepositoryInfo>();
    for (    String url : MavenRepositoryServicesManager.getServiceUrls()) {
      List<MavenArtifactInfo> artifacts=MavenRepositoryServicesManager.findArtifacts(new MavenArtifactInfo(mavenId,"jar",null),url);
      for (      MavenArtifactInfo artifact : artifacts) {
        ContainerUtil.addIfNotNull(repositories,repoMap.get(artifact.getRepositoryId()));
      }
    }
    RepositoryAttachHandler.doResolveInner(project,idsToResolve,extraTypes,repositories,new Processor<List<MavenArtifact>>(){
      @Override public boolean process(      final List<MavenArtifact> artifacts){
        dowloaded.addAll(artifacts);
        ApplicationManager.getApplication().invokeLater(new DumbAwareRunnable(){
          @Override public void run(){
            if (((LibraryEx)library).isDisposed())             return;
            AccessToken token=ApplicationManager.getApplication().acquireWriteActionLock(RepositoryLibrarySynchronizer.class);
            try {
              List<OrderRoot> roots=RepositoryAttachHandler.createRoots(artifacts,storagePath);
              Library.ModifiableModel model=library.getModifiableModel();
              for (              OrderRoot root : roots) {
                String fileName=PathUtil.getFileName(PathUtil.getLocalPath(root.getFile().getUrl()));
                for (                String existingUrl : model.getUrls(root.getType())) {
                  if (Comparing.equal(PathUtil.getFileName(PathUtil.getLocalPath(existingUrl)),fileName)) {
                    model.removeRoot(existingUrl,root.getType());
                  }
                }
                model.addRoot(root.getFile(),root.getType());
              }
              model.commit();
            }
  finally {
              token.finish();
            }
          }
        }
,project.getDisposed());
        return true;
      }
    }
,indicator);
  }
  RepositoryAttachHandler.notifyArtifactsDownloaded(project,dowloaded);
}
