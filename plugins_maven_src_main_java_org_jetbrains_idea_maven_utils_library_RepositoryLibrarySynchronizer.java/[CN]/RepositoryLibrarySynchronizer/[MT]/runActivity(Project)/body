{
  StartupManager.getInstance(project).registerPostStartupActivity(new DumbAwareRunnable(){
    @Override public void run(){
      ApplicationManager.getApplication().invokeLater(new DumbAwareRunnable(){
        @Override public void run(){
          final Collection<Library> libraries=collectLibraries(project,new Predicate<Library>(){
            @Override public boolean apply(            Library library){
              if (!(library instanceof LibraryEx)) {
                return false;
              }
              LibraryEx libraryEx=(LibraryEx)library;
              return libraryEx.getKind() == RepositoryLibraryType.REPOSITORY_LIBRARY_KIND && libraryEx.getProperties() instanceof RepositoryLibraryProperties;
            }
          }
);
          if (libraries.isEmpty())           return;
          Task task=new Task.Backgroundable(project,"Maven",false){
            public void run(            @NotNull ProgressIndicator indicator){
              for (              Library library : libraries) {
                LibraryEx libraryEx=(LibraryEx)library;
                RepositoryLibraryProperties properties=(RepositoryLibraryProperties)libraryEx.getProperties();
                if (isLibraryNeedToBeReloaded(libraryEx,properties)) {
                  RepositoryUtils.reloadDependencies(indicator,project,libraryEx);
                }
              }
            }
          }
;
          ProgressManager.getInstance().run(task);
        }
      }
,project.getDisposed());
    }
  }
);
}
