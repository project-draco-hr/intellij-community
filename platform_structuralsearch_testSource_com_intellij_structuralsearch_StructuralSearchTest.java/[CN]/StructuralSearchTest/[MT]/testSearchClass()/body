{
  assertEquals("no modifier for interface vars",3,findMatchesCount(s43,"interface '_ { '_T 'T2 = '_T3; } "));
  assertEquals("different order of access modifiers",1,findMatchesCount(s45,"class '_ { final static private '_T 'T2 = '_T3; } "));
  assertEquals("no access modifier",2,findMatchesCount(s45,"class '_ { '_T 'T2 = '_T3; } "));
  assertEquals("type differs with package",2,findMatchesCount(s47,"class '_ { String '_; }"));
  assertEquals("reference could differ in package",1,findMatchesCount(s49,"class '_ { '_ '_() throws RuntimeException; }"));
  String s51="class C extends java.awt.List {} class A extends java.util.List {} class B extends java.awt.List {} ";
  assertEquals("reference could differ in package 2",2,findMatchesCount(s51,"class 'B extends '_C:java\\.awt\\.List {}"));
  assertEquals("method access modifier",0,findMatchesCount(s93," class '_ {private void b() {}}"));
  assertEquals("method access modifier 2",1,findMatchesCount(s93," class '_ {public void b() {}}"));
  assertEquals("field access modifier",0,findMatchesCount(s93," class '_ {protected int field;}"));
  assertEquals("field access modifier 2",1,findMatchesCount(s93," class '_ {private int field;}"));
  final String s127="class a { void b() { new c() {}; } }";
  assertEquals("class finds anonymous class",2,findMatchesCount(s127,"class 't {}"));
  final String s129="class a { public void run() {} }\n" + "class a2 { public void run() { run(); } }\n" + "class a3 { public void run() { run(); } }\n"+ "class a4 { public void run(); }";
  assertEquals("empty method finds empty method only",1,findMatchesCount(s129,"class 'a { public void run() {} }"));
  assertEquals("nonempty method finds nonempty method",2,findMatchesCount(s129,"class 'a { public void run() { '_statement; } }"));
  assertEquals("nonempty method finds nonempty method",4,findMatchesCount(s129,"class 'a { public void run(); }"));
  final String s133="class S {\n" + "void cc() {\n" + "        new Runnable() {\n"+ "            public void run() {\n"+ "                f();\n"+ "            }\n"+ "            private void f() {\n"+ "                //To change body of created methods use File | Settings | File Templates.\n"+ "            }\n"+ "        };\n"+ "        new Runnable() {\n"+ "            public void run() {\n"+ "                f();\n"+ "            }\n"+ "            private void g() {\n"+ "                //To change body of created methods use File | Settings | File Templates.\n"+ "            }\n"+ "        };\n"+ "        new Runnable() {\n"+ "            public void run() {\n"+ "                f();\n"+ "            }\n"+ "        };\n"+ "    }\n"+ "    private void f() {\n"+ "        //To change body of created methods use File | Settings | File Templates.\n"+ "    }\n"+ "} ";
  final String s134="new Runnable() {\n" + "            public void run() {\n" + "                '_f ();\n"+ "            }\n"+ "            private void '_f ();\n"+ "        }";
  assertEquals("complex expr matching",1,findMatchesCount(s133,s134));
  final String s135="abstract class My {\n" + "    abstract void f();\n" + "}\n"+ "abstract class My2 {\n"+ "    abstract void f();\n"+ "    void fg() {}\n"+ "}";
  final String s136="class 'm {\n" + "    void f();\n" + "    '_type '_method{0,0} ('_paramtype* '_paramname* );\n"+ "}";
  assertEquals("reject method with 0 max occurence",1,findMatchesCount(s135,s136));
  final String s137="abstract class My {\n" + "  int a;\n" + "}\n"+ "abstract class My2 {\n"+ "    Project b;\n"+ "}"+ "abstract class My3 {\n"+ "    Class clazz;"+ "    Project b = null;\n"+ "}"+ "abstract class My {\n"+ "  int a = 1;\n"+ "}\n";
  assertEquals("reject field with 0 max occurence",2,findMatchesCount(s137,"class 'm { Project '_f{0,0} = '_t?; }"));
  final String s139="class My { boolean equals(Object o); int hashCode(); }";
  final String s140="class 'A { boolean equals(Object '_o ); int '_hashCode{0,0}:hashCode (); }";
  assertEquals("reject method with constraint",0,findMatchesCount(s139,s140));
  final String s139_2="class My { boolean equals(Object o); }";
  assertEquals("reject field with 0 max occurence",1,findMatchesCount(s139_2,s140));
  final String s141="class A { static { a = 10 } }\n" + "class B { { a = 10; } }\n" + "class C { { a = 10; } }";
  assertEquals("static block search",1,findMatchesCount(s141,"class '_ { static { a = 10; } } "));
}
