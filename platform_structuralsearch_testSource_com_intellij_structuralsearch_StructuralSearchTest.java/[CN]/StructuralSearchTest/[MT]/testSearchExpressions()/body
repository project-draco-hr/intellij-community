{
  assertFalse("subexpr match",findMatchesCount(s2,"dialog = new SearchDialog()") == 0);
  assertEquals("search for new ",0,findMatchesCount(s10," new XXX()"));
  assertEquals("search for anonymous classes",1,findMatchesCount(s12,"new Runnable() {}"));
  assertEquals("expr in def initializer",3,findMatchesCount(s53,"System.getProperty('T)"));
  assertEquals("a.class expression",1,findMatchesCount(s55,"'T.class"));
  String complexCode="interface I { void b(); } interface I2 extends I {} class I3 extends I {} " + "class A implements I2 {  void b() {} } class B implements I3 { void b() {}} " + "I2 a; I3 b; a.b(); b.b(); b.b(); A c; B d; c.b(); d.b(); d.b(); ";
  assertEquals("expr type condition",1,findMatchesCount(complexCode,"'t:[exprtype( I2 )].b();"));
  assertEquals("expr type condition 2",5,findMatchesCount(complexCode,"'t:[!exprtype( I2 )].b();"));
  assertEquals("expr type condition 3",2,findMatchesCount(complexCode,"'t:[exprtype( *I2 )].b();"));
  assertEquals("expr type condition 4",4,findMatchesCount(complexCode,"'t:[!exprtype( *I2 )].b();"));
  String complexCode2="enum X { XXX, YYY }\n class C { static void ordinal() {} void test() { C c; c.ordinal(); c.ordinal(); X.XXX.ordinal(); } }";
  assertEquals("expr type condition with enums",1,findMatchesCount(complexCode2,"'t:[exprtype( *java\\.lang\\.Enum )].ordinal()"));
  final String in="processInheritors(1,2,3,4); " + "processInheritors(1,2,3); " + "processInheritors(1,2,3,4,5,6);";
  assertEquals("no smart detection of search target",3,findMatchesCount(in,"'instance?.processInheritors('_param1{1,6});"));
  String arrays="int[] a = new int[20];\n" + "byte[] b = new byte[30]";
  assertEquals("Improper array search",1,findMatchesCount(arrays,"new int['_a]"));
  String someCode="a *= 2; a+=2;";
  assertEquals("Improper *= 2 search",1,findMatchesCount(someCode,"a *= 2;"));
  String s1="Thread t = new Thread(\"my thread\",\"my another thread\") {\n" + "    public void run() {\n" + "        // do stuff\n"+ "    }\n"+ "}";
  assertEquals("Find inner class parameters",2,findMatchesCount(s1,"new Thread('args*) { '_Other* }"));
  String s3="Thread t = new Thread(\"my thread\") {\n" + "    public void run() {\n" + "        // do stuff\n"+ "    }\n"+ "};";
  assertEquals("Find inner class by new",1,findMatchesCount(s3,"new Thread('_args)"));
  String s5="class A {\n" + "public static <T> T[] copy(T[] array, Class<T> aClass) {\n" + "    int i = (int)0;\n"+ "    int b = (int)0;\n"+ "    return (T[])array.clone();\n"+ "  }\n"+ "}";
  assertEquals("Find cast to array",1,findMatchesCount(s5,"('_T[])'_expr"));
  String s7="import java.math.BigDecimal;\n" + "\n" + "public class Prorator {\n"+ "        public void prorate(BigDecimal[] array) {\n"+ "                // do nothing\n"+ "        }\n"+ "        public void prorate2(java.math.BigDecimal[] array) {\n"+ "                // do nothing\n"+ "        }\n"+ "        public void prorate(BigDecimal bd) {\n"+ "                // do nothing\n"+ "        }\n"+ "\n"+ "        public static void main(String[] args) {\n"+ "                BigDecimal[] something = new BigDecimal[2];\n"+ "                java.math.BigDecimal[] something2 = new BigDecimal[2];\n"+ "                something[0] = new BigDecimal(1.0);\n"+ "                something[1] = new BigDecimal(1.0);\n"+ "\n"+ "                Prorator prorator = new Prorator();\n"+ "\n"+ "// ---------------------------------------------------\n"+ "// the line below should've been found, in my opinion.\n"+ "// --------------------------------------------------\n"+ "                prorator.prorate(something);\n"+ "                prorator.prorate(something2);\n"+ "                prorator.prorate(something[0]);\n"+ "                prorator.prorate(something[1]);\n"+ "                prorator.prorate(something[0]);\n"+ "        }\n"+ "}";
  assertEquals("Find method call with array for parameter expr type",2,findMatchesCount(s7,"'_Instance.'_MethodCall:[regex( prorate )]('_Param:[exprtype( BigDecimal\\[\\] )]) ",true));
  String s13="try { } catch(Exception e) { e.printStackTrace(); }";
  assertEquals("Find statement in catch",1,findMatchesCount(s13,"'_Instance.'_MethodCall('_Parameter*)"));
  String s9="int a[] = new int[] { 1,2,3,4};\n" + "int b[] = { 2,3,4,5 };\n" + "Object[] c = new Object[] { \"\", null};\n"+ "Object[] d = {null, null};\n"+ "Object[] e = {};\n"+ "Object[] f = new Object[]{}\n"+ "String[] g = new String[]{}\n"+ "String[] h = new String[]{new String()}";
  assertEquals("Find new array expressions, but no array initializer expressions",5,findMatchesCount(s9,"new '_ []{ '_* }"));
  assertEquals("Find new int array expressions, including array initializer expressions",2,findMatchesCount(s9,"new int []{ '_* }"));
  assertEquals("Find new int array expressions, including array initializer expressions using variable ",2,findMatchesCount(s9,"new 'a?:int [] { '_* }"));
  assertEquals("Find all new array expressions, including array initializers",8,findMatchesCount(s9,"new '_? []{ '_* }"));
  assertEquals("Find new Object array expressions, including array initializer expressions",4,findMatchesCount(s9,"new Object[] { '_* }"));
  assertEquals("Find only array initializer expressions",3,findMatchesCount(s9,"new '_{0,0}[] { '_* }"));
  assertEquals("Find only int array initializer expressions",1,findMatchesCount(s9,"new '_{0,0}:int [] { '_* }"));
  assertEquals("Try to find String array initializer expressions",0,findMatchesCount(s9,"new '_{0,0}:String [] { '_* }"));
  String s10="int time = 99;\n" + "String str = time < 0 ? \"\" : \"\";" + "String str2 = time < time ? \"\" : \"\";";
  assertEquals("Find expressions mistaken for declarations by parser in block mode",1,findMatchesCount(s10,"time < time"));
  assertEquals("Find expressions mistaken for declarations by parser in block mode 2",1,findMatchesCount(s10,"time < 0"));
  assertEquals("Find expressions mistaken for declarations by parser in block mode 3",1,findMatchesCount(s10,"time < 0 ? '_a : '_b"));
  assertEquals("Find expressions mistaken for declarations by parser in block mode 4",2,findMatchesCount(s10,"'_a < '_b"));
}
