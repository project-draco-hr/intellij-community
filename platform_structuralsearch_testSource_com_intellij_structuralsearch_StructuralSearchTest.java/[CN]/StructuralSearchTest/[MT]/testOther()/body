{
  assertEquals("optional init match in definition",4,findMatchesCount(s73," '_Type 'Var = '_Init?; "));
  assertEquals("null match",0,findMatchesCount(s77," class 'T:.*aaa {} "));
  assertEquals("body of method by block search",2,findMatchesCount(s79," { '_T 'T3 = '_T2?; '_*; } "));
  assertEquals("first matches, next not",2,findMatchesCount(s95," class '_ {private int 'T+:field.* ;}"));
  final String s97="class A { int c; void b() { C d; } } class C { C() { A a; a.b(); a.c=1; } }";
  assertEquals("method predicate match",1,findMatchesCount(s97,"'_.'_:[ref('T)] ()"));
  assertEquals("field predicate match",1,findMatchesCount(s97,"'_.'_:[ref('T)]"));
  assertEquals("dcl predicate match",1,findMatchesCount(s97,"'_:[ref('T)].'_ ();"));
  final String s99=" char s = '\\u1111';  char s1 = '\\n'; ";
  assertEquals("char constants in pattern",1,findMatchesCount(s99," char 'var = '\\u1111'; "));
  assertEquals("char constants in pattern 2",1,findMatchesCount(s99," char 'var = '\\n'; "));
  assertEquals("class predicate match (from definition)",3,findMatchesCount(s97,"'_:[ref('T)] '_;"));
  final String s101="class A { void b() { String d; String e; String[] f; f.length=1; f.length=1; } }";
  assertEquals("distinct match",1,findMatchesCount(s101,"'_:[ref('T)] '_;"));
  String s107="class A {\n" + "  /* */\n" + "  void a() {\n"+ "  }"+ "  /* */\n"+ "  int b = 1;\n"+ "  /*"+ "   *"+ "   */\n"+ "   class C {}"+ "}";
  String s108="  /*" + "   *" + "   */";
  assertEquals("finding comments without typed var",1,findMatchesCount(s107,s108));
  String s109="class A { void b(); int b(int c); char d(char e); }\n" + "A a; a.b(1); a.b(2); a.b(); a.d('e'); a.d('f'); a.d('g');";
  assertEquals("caring about method return type",2,findMatchesCount(s109,"'_a.'_b:[exprtype( int ) ]('_c*);"));
  String s111="class A { void getManager() { getManager(); } };\n" + "class B { void getManager() { getManager(); getManager(); } };";
  assertEquals("caring about missing qualifier type",2,findMatchesCount(s111,"'Instance?:[exprtype( B )].getManager()"));
  assertEquals("static query should not match instance method",0,findMatchesCount(s111,"'Instance?:[regex( B )].getManager()"));
  assertEquals("static query should not match instance method 2",0,findMatchesCount(s111,"B.getManager()"));
  String s113="class A { static void a() { a(); }}\n" + "class B { static void a() { a(); a(); }}\n";
  assertEquals("should care about implicit class qualifier",2,findMatchesCount(s113,"'_Q?:[regex( B )].a()"));
  assertEquals("should match simple implicit class qualifier query",2,findMatchesCount(s113,"B.a()"));
  assertEquals("instance query should not match static method",0,findMatchesCount(s113,"'_Q?:[exprtype( B )].a()"));
  String s115="class A { int a; int f() { return a; }}\n" + "class B { int a; int g() { return a + a; }}\n";
  assertEquals("should care about implicit instance qualifier",2,findMatchesCount(s115,"'_Instance?:[exprtype( B )].a"));
  assertEquals("should not match instance method",0,findMatchesCount(s115,"A.a"));
  String s117="class A { static int a; static int f() { return a; }}\n" + "class B { static int a; static int g() { return a + a; }}\n";
  assertEquals("should care about implicit class qualifier for field",2,findMatchesCount(s117,"'_Q?:[regex( B )].a"));
}
