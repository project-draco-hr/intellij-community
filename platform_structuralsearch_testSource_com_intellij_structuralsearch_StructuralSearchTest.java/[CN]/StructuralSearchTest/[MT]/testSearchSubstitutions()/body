{
  final String s15="'T;";
  assertEquals("search for parameterized pattern",2,findMatchesCount(s14_1,s15));
  assertEquals("search for parameterized pattern 2",5,findMatchesCount(s14_2,s15));
  options.setRecursiveSearch(false);
  assertEquals("search for parameterized pattern-non-recursive",1,findMatchesCount(s14_1,s15));
  assertEquals("search for parameterized pattern 2-non-recursive",2,findMatchesCount(s14_2,s15));
  final String s24_2="'T['_T2:.*i.* ]";
  assertEquals("typed pattern with array 2-non-recursive",4,findMatchesCount(s23,s24_2));
  options.setRecursiveSearch(true);
  assertEquals("search for parameterized pattern 3",1,findMatchesCount(s14_2,"if('_T) { '_T2; }"));
  assertEquals("search for parameterized pattern in field selection",1,findMatchesCount(s17,"'_T1.'_T2.equals('_T3.'_T2);"));
  assertEquals("search for parameterized pattern with method call",1,findMatchesCount(s17,"'_T1.'_T2().equals('_T3.'_T2());"));
  assertEquals("search for parameterized pattern with method call ep.2",4,findMatchesCount(s17,"'_T1.'_T2"));
  assertEquals("search for same var constraint",1,findMatchesCount(s19,"'_T1 'T2 = ('_T1)'_T3;"));
  assertEquals("search for same var constraint for semi anonymous typed vars",1,findMatchesCount(s19,"'_T1 '_T2 = ('_T1)'_T3;"));
  assertEquals("search for typed var constraint",1,findMatchesCount(s22,"'_T1:Aa* 'T2 = ('_T1)'_T3;"));
  try {
    findMatchesCount(s22,"'_T1:A* 'T2 = ( '_T1:A+ )'_T3;");
    fail("search for noncompatible typed var constraint");
  }
 catch (  MalformedPatternException ignored) {
  }
  assertEquals("search for same typed var constraint",1,findMatchesCount(s22,"'_T1:Aa* 'T2 = ( '_T1 )'_T3;"));
  assertEquals("typed instanceof",1,findMatchesCount(s65," '_T instanceof '_T2:B"));
  try {
    findMatchesCount(s65,"'_T instanceof");
    fail("warn on incomplete instanceof");
  }
 catch (  MalformedPatternException e) {
    assertEquals("Type expected",e.getMessage());
  }
  assertEquals("typed pattern with array",2,findMatchesCount(s23,"'T['_T2:.*i.* ] = '_T3;"));
  assertEquals("typed pattern with array 2",6,findMatchesCount(s23,s24_2));
  assertEquals("typed pattern in class name, method name, return type, parameter type and name",1,findMatchesCount(s25,"class 'T:.*Impl { '_T2 '_T3('_T4 '_T5) {\n\n} } "));
  assertEquals("finding interface",1,findMatchesCount(s27,"interface 'T {}"));
  assertEquals("anonymous typed vars",1,findMatchesCount(s29,"class '_ { void '_('_:int '_); } "));
  assertEquals("finding class descendants",2,findMatchesCount(s31,"class '_ extends B {  } "));
  assertEquals("interface implementation",2,findMatchesCount(s33,"class '_ implements B,C {  } "));
  assertEquals("different order of fields and methods",1,findMatchesCount(s35,"class '_ { double '_; int '_; int '_() {} void '_() {} } "));
  assertEquals("different order in throws",1,findMatchesCount(s37,"class 'T { '_ '_() throws D,C {} } "));
  assertEquals("match of class without extends to class with it",2,findMatchesCount(s39,"class 'T { } "));
  assertEquals("match of class without extends to class with it, ep. 2",2,findMatchesCount(s41,"class '_ { '_T '_T2 = '_T3; } "));
  assertEquals("match of class without extends to class with it, ep 3",4,findMatchesCount(s41,"class '_ { '_T '_T2; } "));
  assertEquals("match class with fields without initializers",2,findMatchesCount(s41,"class '_ { '_T '_T2 = '_T3{0,0}; } "));
  assertEquals("typed reference element",2,findMatchesCount(s51,"class '_ extends '_ {  }"));
  assertEquals("empty name for typed var",1,findMatchesCount(s59,"interface '_ { void '_(); }"));
  final String s64=" class 'T { public void '_T2:run () {} }";
  assertEquals("comparing method with constructor",1,findMatchesCount(s63,s64));
  assertEquals("finding nested class",2,findMatchesCount(s63_2,s64));
  assertEquals("find nested class by special pattern",1,findMatchesCount(s63_2,"class '_ { class 'T { public void '_T2:run () {} } }"));
  assertEquals("* regexp for typed var",5,findMatchesCount(s61,"{ 'T*; }"));
  assertEquals("+ regexp for typed var",4,findMatchesCount(s61,"{ 'T+; }"));
  assertEquals("? regexp for typed var",2,findMatchesCount(s61,"{ 'T?; }"));
  assertEquals("cast in method arguments",1,findMatchesCount(s67," (VirtualFile)'T"));
  assertEquals("searching for static field in static call",2,findMatchesCount(s69," System.out "));
  assertEquals("searching for static field in static call, 2",2,findMatchesCount(s69," java.lang.System.out "));
  assertEquals("* regexp for anonymous typed var",3,findMatchesCount(s61,"{ '_*; }"));
  assertEquals("+ regexp for anonymous typed var",2,findMatchesCount(s61,"{ '_+; }"));
  assertEquals("? regexp for anonymous typed var",2,findMatchesCount(s61,"{ '_?; }"));
  assertEquals("statement inside anonymous class",3,findMatchesCount(s71," c(); "));
  assertEquals("clever regexp match",2,findMatchesCount(s91,"'T:a"));
  assertEquals("clever regexp match 2",2,findMatchesCount(s91,"'T:b"));
  assertEquals("clever regexp match 3",2,findMatchesCount(s91,"'T:c"));
}
