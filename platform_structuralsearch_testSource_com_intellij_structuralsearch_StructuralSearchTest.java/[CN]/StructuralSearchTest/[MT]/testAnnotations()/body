{
  String s1="@MyBean(\"\")\n" + "@MyBean2(\"\")\n" + "public class TestBean {}\n"+ "@MyBean2(\"\")\n"+ "@MyBean(\"\")\n"+ "public class TestBean2 {}\n"+ "public class TestBean3 {}\n";
  String s2="@MyBean(\"\")\n" + "@MyBean2(\"\")\n" + "public class $a$ {}\n";
  assertEquals("Simple find annotated class",2,findMatchesCount(s1,s2,false));
  String s3="@VisualBean(\"????????? ?????????? ? ??\")\n" + "public class TestBean\n" + "{\n"+ "    @VisualBeanField(\n"+ "            name = \"??? ????????????\",\n"+ "            initialValue = \"?????????????\"\n"+ "            )\n"+ "    public String user;\n"+ "\n"+ "    @VisualBeanField(\n"+ "            name = \"??????\",\n"+ "            initialValue = \"\",\n"+ "            fieldType = FieldTypeEnum.PASSWORD_FIELD\n"+ "            )\n"+ "    public String password;\n"+ "\n"+ "    @VisualBeanField(\n"+ "            initialValue = \"User\",\n"+ "            name = \"????? ???????\",\n"+ "            name = \"Second name\",\n"+ "            fieldType = FieldTypeEnum.COMBOBOX_FIELD,\n"+ "            comboValues = {\n"+ "               @ComboFieldValue(\"Administrator\"),\n"+ "               @ComboFieldValue(\"User\"),\n"+ "               @ComboFieldValue(\"Guest\")}\n"+ "            )    \n"+ "    public String accessRights;\n"+ "    \n"+ "    public String otherField;\n"+ "}";
  String s4="class '_a {\n" + "  @'_Annotation+ ( 'AnnotationMember*:name = '_AnnotationValue* )\n" + "  String '_field* ;\n"+ "}";
  String s4_2="class '_a {\n" + "  @'_Annotation+ ()\n" + "  String 'field* ;\n"+ "}";
  assertEquals("Find annotation members of annotated field class",4,findMatchesCount(s3,s4,false));
  assertEquals("Find annotation fields",3,findMatchesCount(s3,s4_2,false));
  String s5="class A {" + "  @NotNull private static Collection<PsiElement> resolveElements(final PsiReference reference, final Project project) {}\n" + "  @NotNull private static Collection resolveElements2(final PsiReference reference, final Project project) {}\n"+ "}";
  String s6="class '_c {@NotNull '_rt 'method* ('_pt* '_p*){ '_inst*; } }";
  String s6_2="class '_c {@'_:NotNull '_rt 'method* ('_pt* '_p*){ '_inst*; } }";
  assertEquals("Find annotated methods",2,findMatchesCount(s5,s6));
  assertEquals("Find annotated methods, 2",2,findMatchesCount(s5,s6_2));
  String s7="class A { void message(@NonNls String msg); }\n" + "class B { void message2(String msg); }\n" + "class C { void message2(String msg); }";
  String s8="class '_A { void 'b( @'_Ann{0,0}:NonNls String  '_); }";
  assertEquals("Find not annotated methods",2,findMatchesCount(s7,s8));
  String s9="class A {\n" + "  Object[] method1() {}\n" + "  Object method1_2() {}\n"+ "  Object method1_3() {}\n"+ "  Object method1_4() {}\n"+ "  @MyAnnotation Object[] method2(int a) {}\n"+ "  @NonNls Object[] method3() {}\n"+ "}";
  String s10="class '_A { @'_Ann{0,0}:NonNls '_Type:Object\\[\\] 'b+( '_pt* '_p* ); }";
  String s10_2="class '_A { @'_Ann{0,0}:NonNls '_Type [] 'b+( '_pt* '_p* ); }";
  String s10_3="class '_A { @'_Ann{0,0}:NonNls '_Type:Object [] 'b+( '_pt* '_p* ); }";
  assertEquals("Find not annotated methods, 2",2,findMatchesCount(s9,s10));
  assertEquals("Find not annotated methods, 2",2,findMatchesCount(s9,s10_2));
  assertEquals("Find not annotated methods, 2",2,findMatchesCount(s9,s10_3));
  String s11="class A {\n" + "@Foo(value=baz) int a;\n" + "@Foo(value=baz2) int a2;\n"+ "@Foo(value=baz2) int a3;\n"+ "@Foo(value2=baz3) int a3;\n"+ "@Foo(value2=baz3) int a3;\n"+ "@Foo(value2=baz3) int a3;\n"+ "@Foo(value2=baz4) int a3;\n"+ "}";
  String s12="@Foo(value=baz) int 'a;)";
  String s12_2="@Foo(value='baz:baz2 ) int 'a;)";
  String s12_3="@Foo('value:value2 = baz3 ) int 'a;)";
  String s12_4="@Foo('value:value2 = 'baz3:baz3 ) int 'a;)";
  String s12_5="@Foo('value:value2 = 'baz3:baz ) int 'a;)";
  String s12_6="@Foo('value:value2 = 'baz3 ) int 'a;)";
  String s12_7="@Foo('value:value2 = ) int 'a;";
  assertEquals("Find anno parameter value",1,findMatchesCount(s11,s12));
  assertEquals("Find anno parameter value",2,findMatchesCount(s11,s12_2));
  assertEquals("Find anno parameter value",3,findMatchesCount(s11,s12_3));
  assertEquals("Find anno parameter value",3,findMatchesCount(s11,s12_4));
  assertEquals("Find anno parameter value",0,findMatchesCount(s11,s12_5));
  assertEquals("Find anno parameter value",4,findMatchesCount(s11,s12_6));
  assertEquals("Find anno parameter value",4,findMatchesCount(s11,s12_7));
}
