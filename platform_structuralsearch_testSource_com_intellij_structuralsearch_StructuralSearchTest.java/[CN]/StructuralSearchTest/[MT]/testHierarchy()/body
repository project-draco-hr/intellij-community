{
  final String s105="class B {} class A extends B { }";
  assertEquals("extends match",1,findMatchesCount(s105,"class '_ extends '_:[ref('T)] {}"));
  final String s107="interface IA {} interface IB extends IA { } interface IC extends IB {} interface ID extends IC {}" + "class A implements IA {} class B extends A { } class C extends B implements IC {} class D extends C {}";
  assertEquals("extends navigation match",2,findMatchesCount(s107,"class '_ extends 'Type:+A {}"));
  assertEquals("implements navigation match",3,findMatchesCount(s107,"class '_ implements 'Type:+IA {}"));
  final String s109="interface I {} interface I2 extends I {} class A implements I2 {} class B extends A { } class C extends B {} class D { void e() { C c; B b; A a;} }";
  assertEquals("extends navigation match in definition",3,findMatchesCount(s109,"'_:*A '_;"));
  assertEquals("implements navigation match in definition 2",3,findMatchesCount(s109,"'_:*I '_;"));
  assertEquals("implements navigation match in definition 2 with nested conditions",1,findMatchesCount(s109,"'_:*[regex( I ) && ref('T)] '_;"));
  try {
    findMatchesCount(s109,"'_:*[regex( I ) && ref2('T)] '_;");
    fail("implements navigation match in definition 2 with nested conditions - incorrect cond");
  }
 catch (  UnsupportedPatternException ignored) {
  }
  final String s111="interface E {} class A implements E {} class B extends A { int f = 0; } class C extends B {} class D { void e() { C c; B b; A a;} }";
  final String s112="'_";
  assertEquals("symbol match",17,findMatchesCount(s111,s112));
  final String s113="class B {int c; void d() {} } int a; B b; a = 1; b.d(); ++a; int c=a; System.out.println(a); " + "b.c = 1; System.out.println(b.c); b.c++;";
  assertEquals("read symbol match",11,findMatchesCount(s113,"'_:[read]"));
  assertEquals("write symbol match",5,findMatchesCount(s113,"'_:[write]"));
  final String s115="class B {} public class C {}";
  assertEquals("public modifier for class",1,findMatchesCount(s115,"public class '_ {}"));
  final String s117="class A { int b; void c() { int e; b=1; this.b=1; e=5; " + "System.out.println(e); " + "System.out.println(b); System.out.println(this.b);} }";
  assertEquals("fields of class",4,findMatchesCount(s117,"this.'Field"));
  assertEquals("fields of class read",2,findMatchesCount(s117,"this.'Field:[read]"));
  assertEquals("fields of class written",2,findMatchesCount(s117,"this.'Field:[write]"));
  final String s119="try { a.b(); } catch(IOException e) { c(); } catch(Exception ex) { d(); }";
  assertEquals("catches loose matching",1,findMatchesCount(s119,"try { '_; } catch('_ '_) { '_; }"));
  assertEquals("catches loose matching 2",0,findMatchesCount(s119,"try { '_; } catch(Throwable '_) { '_; }"));
  final String s121="class A { private int a; class Inner {} } " + "class B extends A { private int a; class Inner2 {} }";
  assertEquals("hierarchical matching",2,findMatchesCount(s121,"class '_ { int '_:* ; }"));
  assertEquals("hierarchical matching 2",4,findMatchesCount(s121,"class '_ { int '_:+hashCode (); }"));
  assertEquals("hierarchical matching 3",2,findMatchesCount(s121,"class '_ { class '_:* {} }"));
}
