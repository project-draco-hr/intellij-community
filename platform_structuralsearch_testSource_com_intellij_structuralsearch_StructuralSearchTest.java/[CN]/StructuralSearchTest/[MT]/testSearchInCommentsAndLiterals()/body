{
  String s1="{" + "// This is some comment\n" + "/* This is another\n comment*/\n"+ "// Some garbage\n"+ "/** And now third comment*/\n"+ "/** Some garbage*/ }";
  assertEquals("Comment matching",3,findMatchesCount(s1,"// 'Comment:[regex( .*(?:comment).* )]"));
  assertEquals("Comment matching, 2",3,findMatchesCount(s1,"/* 'Comment:[regex( .*(?:comment).* )] */"));
  assertEquals("Java doc matching",1,findMatchesCount(s1,"/** 'Comment:[regex( .*(?:comment).* )] */"));
  String s4="\"'test\", \"another test\", \"garbage\"";
  assertEquals("Literal content",2,findMatchesCount(s4,"\"'test:[regex( .*test.* )]\""));
  assertEquals("Literal content with escaping",1,findMatchesCount(s4,"\"''test\""));
  String s7="\"aaa\"";
  assertEquals("Simple literal content",1,findMatchesCount(s7,"\"'test:[regex( aaa )]\""));
  String s9="\" aaa \" \" bbb \" \" ccc ccc aaa\"";
  assertEquals("Whole word literal content with alternations",2,findMatchesCount(s9,"\"'test:[regexw( aaa|ccc )]\""));
  assertEquals("Whole word literal content",1,findMatchesCount(s9,"\"'test:[regexw( bbb )]\""));
  String s12="assert agentInfo != null : \"agentInfo is null\";\n" + "assert addresses != null : \"addresses is null\";";
  assertEquals("reference to substitution in comment",2,findMatchesCount(s12,"assert '_exp != null : \"'_exp is null\";"));
  String s14="\"(some text with special chars)\"," + "\" some\"," + "\"(some)\"";
  assertEquals("meta char in literal",2,findMatchesCount(s14,"\"('a:[regexw( some )])\""));
  String s16="/**\n" + "* Created by IntelliJ IDEA.\n" + "* User: cdr\n"+ "* Date: Nov 15, 2005\n"+ "* Time: 4:23:29 PM\n"+ "* To change this template use File | Settings | File Templates.\n"+ "*/\n"+ "public class Y {\n"+ "}";
  String s17="/**\n" + "* Created by IntelliJ IDEA.\n" + "* User: '_USER\n"+ "* Date: '_DATE\n"+ "* Time: '_TIME\n"+ "* To change this template use File | Settings | File Templates.\n"+ "*/\n"+ "class 'c {\n"+ "}";
  assertEquals("complete comment match",1,findMatchesCount(s16,s17,true));
  String s18="public class A {\n" + "   private void f(int i) {\n" + "       int g=0; //sss\n"+ "   }\n"+ "}";
  String s19="class '_c {\n" + "   '_type '_f('_t '_p){\n" + "       '_s; // sss\n"+ "   }\n"+ "}";
  assertEquals("statement match with comment",1,findMatchesCount(s18,s19));
}
