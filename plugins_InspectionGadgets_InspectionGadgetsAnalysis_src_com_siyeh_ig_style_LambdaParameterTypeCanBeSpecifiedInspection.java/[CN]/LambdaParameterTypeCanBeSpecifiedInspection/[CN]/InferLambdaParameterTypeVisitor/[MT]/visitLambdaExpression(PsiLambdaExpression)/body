{
  super.visitLambdaExpression(lambdaExpression);
  final PsiParameter[] parameters=lambdaExpression.getParameterList().getParameters();
  if (parameters.length == 0)   return;
  for (  PsiParameter parameter : parameters) {
    if (parameter.getTypeElement() != null) {
      return;
    }
  }
  final PsiType functionalInterfaceType=lambdaExpression.getFunctionalInterfaceType();
  if (functionalInterfaceType != null && LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType) != null && LambdaUtil.isLambdaFullyInferred(lambdaExpression,functionalInterfaceType)) {
    final String inferredTypesText=getInferredTypes(functionalInterfaceType,lambdaExpression,false);
    if (inferredTypesText != null) {
      registerError(lambdaExpression,inferredTypesText);
    }
  }
}
