{
  super(parentDisposable);
  registerFileType(JavaClassFileType.INSTANCE,"class");
  registerFileType(JavaFileType.INSTANCE,"java");
  registerFileType(ArchiveFileType.INSTANCE,"jar;zip");
  registerFileType(PlainTextFileType.INSTANCE,"txt;sh;bat;cmd;policy;log;cgi;MF;jad;jam;htaccess;rb");
  addExplicitExtension(LanguageASTFactory.INSTANCE,PlainTextLanguage.INSTANCE,new PlainTextASTFactory());
  addExplicitExtension(LanguageParserDefinitions.INSTANCE,PlainTextLanguage.INSTANCE,new PlainTextParserDefinition());
  addExplicitExtension(FileTypeFileViewProviders.INSTANCE,JavaClassFileType.INSTANCE,new ClassFileViewProviderFactory());
  addExplicitExtension(BinaryFileStubBuilders.INSTANCE,JavaClassFileType.INSTANCE,new ClassFileStubBuilder());
  addExplicitExtension(LanguageASTFactory.INSTANCE,JavaLanguage.INSTANCE,new CoreJavaASTFactory());
  addExplicitExtension(LanguageParserDefinitions.INSTANCE,JavaLanguage.INSTANCE,new JavaParserDefinition());
  addExplicitExtension(LanguageConstantExpressionEvaluator.INSTANCE,JavaLanguage.INSTANCE,new PsiExpressionEvaluator());
  registerExtensionPoint(Extensions.getRootArea(),ClsStubBuilderFactory.EP_NAME,ClsStubBuilderFactory.class);
  registerExtensionPoint(Extensions.getRootArea(),PsiAugmentProvider.EP_NAME,PsiAugmentProvider.class);
  registerExtensionPoint(Extensions.getRootArea(),JavaMainMethodProvider.EP_NAME,JavaMainMethodProvider.class);
  registerExtensionPoint(Extensions.getRootArea(),ContainerProvider.EP_NAME,ContainerProvider.class);
  addExtension(ContainerProvider.EP_NAME,new JavaContainerProvider());
  myApplication.registerService(PsiPackageImplementationHelper.class,new CorePsiPackageImplementationHelper());
  myApplication.registerService(EmptySubstitutor.class,new EmptySubstitutorImpl());
  myApplication.registerService(JavaDirectoryService.class,createJavaDirectoryService());
  myApplication.registerService(JavaVersionService.class,new JavaVersionService());
  addExplicitExtension(ItemPresentationProviders.INSTANCE,PsiPackage.class,new PackagePresentationProvider());
  addExplicitExtension(ItemPresentationProviders.INSTANCE,PsiClass.class,new ClassPresentationProvider());
  addExplicitExtension(ItemPresentationProviders.INSTANCE,PsiMethod.class,new MethodPresentationProvider());
  addExplicitExtension(ItemPresentationProviders.INSTANCE,PsiField.class,new FieldPresentationProvider());
  addExplicitExtension(ItemPresentationProviders.INSTANCE,PsiLocalVariable.class,new VariablePresentationProvider());
  addExplicitExtension(ItemPresentationProviders.INSTANCE,PsiParameter.class,new VariablePresentationProvider());
  registerApplicationService(JavaCodeFoldingSettings.class,new JavaCodeFoldingSettingsBase());
  addExplicitExtension(LanguageFolding.INSTANCE,JavaLanguage.INSTANCE,new JavaFoldingBuilderBase(){
    @Override protected boolean shouldShowExplicitLambdaType(    PsiAnonymousClass anonymousClass,    PsiNewExpression expression){
      return false;
    }
    @Override protected boolean isBelowRightMargin(    Project project,    int lineLength){
      return false;
    }
  }
);
}
