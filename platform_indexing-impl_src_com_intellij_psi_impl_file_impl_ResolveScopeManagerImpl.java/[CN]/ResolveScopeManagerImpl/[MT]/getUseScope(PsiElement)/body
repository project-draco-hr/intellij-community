{
  VirtualFile vDirectory;
  final VirtualFile virtualFile;
  final PsiFile containingFile;
  final GlobalSearchScope allScope=GlobalSearchScope.allScope(myManager.getProject());
  if (element instanceof PsiDirectory) {
    vDirectory=((PsiDirectory)element).getVirtualFile();
    virtualFile=null;
    containingFile=null;
  }
 else {
    containingFile=element.getContainingFile();
    if (containingFile == null)     return allScope;
    virtualFile=containingFile.getVirtualFile();
    if (virtualFile == null)     return allScope;
    if (virtualFile instanceof VirtualFileWindow) {
      return GlobalSearchScope.fileScope(myProject,((VirtualFileWindow)virtualFile).getDelegate());
    }
    vDirectory=virtualFile.getParent();
  }
  if (vDirectory == null)   return allScope;
  final ProjectFileIndex projectFileIndex=myProjectRootManager.getFileIndex();
  final Module module=projectFileIndex.getModuleForFile(vDirectory);
  if (module == null) {
    final List<OrderEntry> entries=projectFileIndex.getOrderEntriesForFile(virtualFile != null ? virtualFile : vDirectory);
    GlobalSearchScope result=LibraryScopeCache.getInstance(myProject).getLibraryUseScope(entries);
    return containingFile == null || virtualFile.isDirectory() || result.contains(virtualFile) ? result : GlobalSearchScope.fileScope(containingFile).uniteWith(result);
  }
  boolean isTest=projectFileIndex.isInTestSourceContent(vDirectory);
  GlobalSearchScope scope=isTest ? GlobalSearchScope.moduleTestsWithDependentsScope(module) : GlobalSearchScope.moduleWithDependentsScope(module);
  RefResolveService resolveService;
  if (virtualFile instanceof VirtualFileWithId && RefResolveService.ENABLED && (resolveService=RefResolveService.getInstance(myProject)).isUpToDate()) {
    return resolveService.restrictByBackwardIds(virtualFile,scope);
  }
  return scope;
}
