{
  if (settings == null) {
    return;
  }
  Set<String> jvmArgs=ContainerUtilRt.newHashSet();
  String vmOptions=settings.getDaemonVmOptions();
  if (!StringUtil.isEmpty(vmOptions)) {
    CommandLineTokenizer tokenizer=new CommandLineTokenizer(vmOptions);
    while (tokenizer.hasMoreTokens()) {
      String vmOption=tokenizer.nextToken();
      if (!StringUtil.isEmpty(vmOption)) {
        jvmArgs.add(vmOption);
      }
    }
  }
  jvmArgs.addAll(extraJvmArgs);
  if (!jvmArgs.isEmpty()) {
    BuildEnvironment buildEnvironment=getBuildEnvironment(connection);
    Collection<String> merged=buildEnvironment != null ? mergeJvmArgs(settings.getServiceDirectory(),buildEnvironment.getJava().getJvmArguments(),jvmArgs) : jvmArgs;
    List<String> filteredArgs=ContainerUtil.mapNotNull(merged,new Function<String,String>(){
      @Override public String fun(      String s){
        return StringUtil.isEmpty(s) ? null : s;
      }
    }
);
    operation.setJvmArguments(ArrayUtil.toStringArray(filteredArgs));
  }
  if (settings.isOfflineWork()) {
    commandLineArgs.add(GradleConstants.OFFLINE_MODE_CMD_OPTION);
  }
  final Application application=ApplicationManager.getApplication();
  if (application != null && application.isUnitTestMode()) {
    commandLineArgs.add("--info");
    commandLineArgs.add("--recompile-scripts");
  }
  if (!commandLineArgs.isEmpty()) {
    LOG.info("Passing command-line args to Gradle Tooling API: " + commandLineArgs);
    List<String> filteredArgs=ContainerUtil.mapNotNull(commandLineArgs,new Function<String,String>(){
      @Override public String fun(      String s){
        return StringUtil.isEmpty(s) ? null : s;
      }
    }
);
    replaceTestCommandOptionWithInitScript(filteredArgs);
    operation.withArguments(ArrayUtil.toStringArray(filteredArgs));
  }
  listener.onStart(id);
  final String javaHome=settings.getJavaHome();
  if (javaHome != null && new File(javaHome).isDirectory()) {
    operation.setJavaHome(new File(javaHome));
  }
  operation.addProgressListener(new ProgressListener(){
    @Override public void statusChanged(    ProgressEvent event){
      listener.onStatusChange(new ExternalSystemTaskNotificationEvent(id,event.getDescription()));
    }
  }
);
  operation.addProgressListener(new org.gradle.tooling.events.ProgressListener(){
    @Override public void statusChanged(    org.gradle.tooling.events.ProgressEvent event){
      listener.onStatusChange(convert(id,event));
    }
  }
);
  operation.setStandardOutput(standardOutput);
  operation.setStandardError(standardError);
}
