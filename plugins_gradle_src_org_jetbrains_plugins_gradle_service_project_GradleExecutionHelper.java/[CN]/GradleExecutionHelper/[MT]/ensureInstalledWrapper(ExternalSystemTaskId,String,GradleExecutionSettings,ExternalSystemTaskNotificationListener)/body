{
  if (settings.getDistributionType() != DistributionType.WRAPPED)   return;
  ProjectConnection connection=getConnection(projectPath,settings);
  try {
    BuildLauncher launcher=getBuildLauncher(id,connection,settings,listener,ContainerUtil.<String>newArrayList());
    try {
      final File tempFile=FileUtil.createTempFile("wrap",".gradle");
      tempFile.deleteOnExit();
      final File wrapperPropertyFileLocation=FileUtil.createTempFile("wrap","loc");
      wrapperPropertyFileLocation.deleteOnExit();
      final String[] lines={"gradle.taskGraph.afterTask { Task task ->","    if (task instanceof Wrapper) {","        def wrapperPropertyFileLocation = task.jarFile.getCanonicalPath() - '.jar' + '.properties'","        new File('" + StringUtil.escapeBackSlashes(wrapperPropertyFileLocation.getCanonicalPath()) + "').write wrapperPropertyFileLocation","}}"};
      FileUtil.writeToFile(tempFile,StringUtil.join(lines,SystemProperties.getLineSeparator()));
      launcher.withArguments("--init-script",tempFile.getAbsolutePath());
      launcher.forTasks("wrapper");
      launcher.run();
      String wrapperPropertyFile=FileUtil.loadFile(wrapperPropertyFileLocation);
      settings.setWrapperPropertyFile(wrapperPropertyFile);
    }
 catch (    IOException e) {
      LOG.warn("Can't update wrapper",e);
    }
  }
 catch (  Throwable e) {
    LOG.warn("Can't update wrapper",e);
  }
 finally {
    try {
      connection.close();
    }
 catch (    Throwable e) {
    }
  }
}
