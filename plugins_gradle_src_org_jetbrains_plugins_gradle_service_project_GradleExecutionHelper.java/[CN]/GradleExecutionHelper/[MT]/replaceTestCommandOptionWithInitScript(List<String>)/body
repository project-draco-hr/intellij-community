{
  Set<String> testIncludePatterns=ContainerUtil.newLinkedHashSet();
  Iterator<String> it=args.iterator();
  while (it.hasNext()) {
    final String next=it.next();
    if ("--tests".equals(next)) {
      it.remove();
      if (it.hasNext()) {
        testIncludePatterns.add(it.next());
        it.remove();
      }
    }
  }
  if (!testIncludePatterns.isEmpty()) {
    StringBuilder buf=new StringBuilder();
    buf.append('[');
    for (Iterator<String> iterator=testIncludePatterns.iterator(); iterator.hasNext(); ) {
      String pattern=iterator.next();
      buf.append('\"').append(pattern).append('\"');
      if (iterator.hasNext()) {
        buf.append(',');
      }
    }
    buf.append(']');
    InputStream stream=Init.class.getResourceAsStream("/org/jetbrains/plugins/gradle/tooling/internal/init/testFilterInit.gradle");
    try {
      if (stream == null) {
        LOG.warn("Can't get test filter init script template");
        return;
      }
      String s=FileUtil.loadTextAndClose(stream).replaceFirst(Pattern.quote("${TEST_NAME_INCLUDES}"),buf.toString());
      final File tempFile=FileUtil.createTempFile("ijinit",'.' + GradleConstants.EXTENSION,true);
      FileUtil.writeToFile(tempFile,s);
      ContainerUtil.addAll(args,GradleConstants.INIT_SCRIPT_CMD_OPTION,tempFile.getAbsolutePath());
    }
 catch (    Exception e) {
      LOG.warn("Can't generate IJ gradle test filter init script",e);
    }
 finally {
      StreamUtil.closeStream(stream);
    }
  }
}
