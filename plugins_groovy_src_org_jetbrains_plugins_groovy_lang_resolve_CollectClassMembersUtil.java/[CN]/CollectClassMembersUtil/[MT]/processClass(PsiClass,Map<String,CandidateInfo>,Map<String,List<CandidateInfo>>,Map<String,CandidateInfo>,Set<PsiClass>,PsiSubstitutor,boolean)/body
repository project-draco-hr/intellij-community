{
  PsiUtilCore.ensureValid(aClass);
  if (!visitedClasses.add(aClass))   return;
  String fieldPrefix=PsiImplUtil.isTrait(aClass) ? GrTraitUtil.getTraitFieldPrefix(aClass) : null;
  for (  PsiField field : getFields(aClass,includeSynthetic)) {
    String originalName=field.getName();
    String name=field.hasModifierProperty(PsiModifier.PUBLIC) && fieldPrefix != null ? fieldPrefix + originalName : originalName;
    if (!allFields.containsKey(name)) {
      allFields.put(name,new CandidateInfo(field,substitutor));
    }
 else     if (hasExplicitVisibilityModifiers(field)) {
      final CandidateInfo candidateInfo=allFields.get(name);
      final PsiElement element=candidateInfo.getElement();
      if (element instanceof GrField) {
        final GrModifierList modifierList=((GrField)element).getModifierList();
        if ((modifierList == null || !modifierList.hasExplicitVisibilityModifiers()) && aClass == ((GrField)element).getContainingClass()) {
          allFields.put(name,new CandidateInfo(field,substitutor));
        }
      }
    }
  }
  for (  PsiMethod method : getMethods(aClass,includeSynthetic)) {
    addMethod(allMethods,method,substitutor);
  }
  for (  final PsiClass inner : aClass.getInnerClasses()) {
    final String name=inner.getName();
    if (name != null && !allInnerClasses.containsKey(name)) {
      allInnerClasses.put(name,new CandidateInfo(inner,substitutor));
    }
  }
  for (  PsiClassType superType : aClass.getSuperTypes()) {
    PsiClass superClass=superType.resolve();
    if (superClass != null) {
      final PsiSubstitutor superSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(superClass,aClass,substitutor);
      processClass(superClass,allFields,allMethods,allInnerClasses,visitedClasses,superSubstitutor,includeSynthetic);
    }
  }
}
