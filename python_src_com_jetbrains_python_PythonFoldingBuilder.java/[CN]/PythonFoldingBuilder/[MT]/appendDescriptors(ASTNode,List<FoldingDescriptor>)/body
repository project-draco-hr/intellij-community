{
  if (node.getElementType() instanceof PyFileElementType) {
    ASTNode firstImport=node.getFirstChildNode();
    while (firstImport != null && !isImport(firstImport,false)) {
      firstImport=firstImport.getTreeNext();
    }
    if (firstImport != null) {
      ASTNode lastImport=firstImport.getTreeNext();
      while (lastImport != null && isImport(lastImport.getTreeNext(),true)) {
        lastImport=lastImport.getTreeNext();
      }
      if (lastImport != null) {
        while (lastImport.getElementType() == TokenType.WHITE_SPACE) {
          lastImport=lastImport.getTreePrev();
        }
        if (isImport(lastImport,false) && firstImport != lastImport) {
          descriptors.add(new FoldingDescriptor(firstImport,new TextRange(firstImport.getStartOffset(),lastImport.getTextRange().getEndOffset())));
        }
      }
    }
  }
 else   if (node.getElementType() == PyElementTypes.STATEMENT_LIST) {
    foldStatementList(node,descriptors);
  }
 else   if (node.getElementType() == PyElementTypes.STRING_LITERAL_EXPRESSION) {
    foldDocString(node,descriptors);
  }
  ASTNode child=node.getFirstChildNode();
  while (child != null) {
    appendDescriptors(child,descriptors);
    child=child.getTreeNext();
  }
}
