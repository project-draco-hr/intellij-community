{
  if (node.getElementType() instanceof PyFileElementType) {
    ASTNode firstImport=node.getFirstChildNode();
    while (firstImport != null && !isImport(firstImport,false)) {
      firstImport=firstImport.getTreeNext();
    }
    if (firstImport != null) {
      ASTNode lastImport=firstImport.getTreeNext();
      while (lastImport != null && isImport(lastImport.getTreeNext(),true)) {
        lastImport=lastImport.getTreeNext();
      }
      if (lastImport != null) {
        while (lastImport.getElementType() == TokenType.WHITE_SPACE) {
          lastImport=lastImport.getTreePrev();
        }
        if (isImport(lastImport,false)) {
          descriptors.add(new FoldingDescriptor(firstImport,new TextRange(firstImport.getStartOffset(),lastImport.getTextRange().getEndOffset())));
        }
      }
    }
  }
 else   if (node.getElementType() == PyElementTypes.STATEMENT_LIST) {
    IElementType elType=node.getTreeParent().getElementType();
    if (elType == PyElementTypes.FUNCTION_DECLARATION || elType == PyElementTypes.CLASS_DECLARATION) {
      ASTNode colon=node.getTreeParent().findChildByType(PyTokenTypes.COLON);
      if (colon != null && colon.getStartOffset() + 1 < colon.getTextRange().getEndOffset()) {
        descriptors.add(new FoldingDescriptor(node,new TextRange(colon.getStartOffset() + 1,node.getStartOffset() + node.getTextLength())));
      }
 else {
        TextRange range=node.getTextRange();
        if (range.getStartOffset() < range.getEndOffset() - 1) {
          descriptors.add(new FoldingDescriptor(node,range));
        }
      }
    }
  }
  ASTNode child=node.getFirstChildNode();
  while (child != null) {
    appendDescriptors(child,descriptors);
    child=child.getTreeNext();
  }
}
