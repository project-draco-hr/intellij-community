{
  boolean res=true;
switch (exprent.type) {
case Exprent.EXPRENT_CONST:
    ConstExprent constExpr=(ConstExprent)exprent;
  VarType constType=constExpr.getConstType();
if (newType.typeFamily > CodeConstants.TYPE_FAMILY_INTEGER || constType.typeFamily > CodeConstants.TYPE_FAMILY_INTEGER) {
  return true;
}
 else if (newType.typeFamily == CodeConstants.TYPE_FAMILY_INTEGER) {
  VarType minInteger=new ConstExprent((Integer)constExpr.getValue(),false,null).getConstType();
  if (minInteger.isStrictSuperset(newType)) {
    newType=minInteger;
  }
}
case Exprent.EXPRENT_VAR:
VarVersionPair pair=null;
if (exprent.type == Exprent.EXPRENT_CONST) {
pair=new VarVersionPair(((ConstExprent)exprent).id,-1);
}
 else if (exprent.type == Exprent.EXPRENT_VAR) {
pair=new VarVersionPair((VarExprent)exprent);
}
if (minMax == 0) {
VarType currentMinType=mapExprentMinTypes.get(pair);
VarType newMinType;
if (currentMinType == null || newType.typeFamily > currentMinType.typeFamily) {
newMinType=newType;
}
 else if (newType.typeFamily < currentMinType.typeFamily) {
return true;
}
 else {
newMinType=VarType.getCommonSupertype(currentMinType,newType);
}
mapExprentMinTypes.put(pair,newMinType);
if (exprent.type == Exprent.EXPRENT_CONST) {
((ConstExprent)exprent).setConstType(newMinType);
}
if (currentMinType != null && (newMinType.typeFamily > currentMinType.typeFamily || newMinType.isStrictSuperset(currentMinType))) {
return false;
}
}
 else {
VarType currentMaxType=mapExprentMaxTypes.get(pair);
VarType newMaxType;
if (currentMaxType == null || newType.typeFamily < currentMaxType.typeFamily) {
newMaxType=newType;
}
 else if (newType.typeFamily > currentMaxType.typeFamily) {
return true;
}
 else {
newMaxType=VarType.getCommonMinType(currentMaxType,newType);
}
mapExprentMaxTypes.put(pair,newMaxType);
}
break;
case Exprent.EXPRENT_ASSIGNMENT:
return changeExprentType(((AssignmentExprent)exprent).getRight(),newType,minMax);
case Exprent.EXPRENT_FUNCTION:
FunctionExprent func=(FunctionExprent)exprent;
switch (func.getFuncType()) {
case FunctionExprent.FUNCTION_IIF:
res=changeExprentType(func.getLstOperands().get(1),newType,minMax) & changeExprentType(func.getLstOperands().get(2),newType,minMax);
break;
case FunctionExprent.FUNCTION_AND:
case FunctionExprent.FUNCTION_OR:
case FunctionExprent.FUNCTION_XOR:
res=changeExprentType(func.getLstOperands().get(0),newType,minMax) & changeExprentType(func.getLstOperands().get(1),newType,minMax);
break;
}
}
return res;
}
