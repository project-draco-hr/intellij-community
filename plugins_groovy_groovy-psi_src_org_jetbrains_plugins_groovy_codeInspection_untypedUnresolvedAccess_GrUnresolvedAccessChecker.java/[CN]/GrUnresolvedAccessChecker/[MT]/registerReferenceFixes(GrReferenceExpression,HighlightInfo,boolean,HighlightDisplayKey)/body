{
  PsiClass targetClass=QuickfixUtil.findTargetClass(refExpr,compileStatic);
  if (targetClass == null)   return;
  if (!compileStatic) {
    addDynamicAnnotation(info,refExpr,key);
  }
  if (!(targetClass instanceof SyntheticElement) || (targetClass instanceof GroovyScriptClass)) {
    QuickFixAction.registerQuickFixAction(info,GroovyQuickFixFactory.getInstance().createCreateFieldFromUsageFix(refExpr),key);
    if (PsiUtil.isAccessedForReading(refExpr)) {
      QuickFixAction.registerQuickFixAction(info,GroovyQuickFixFactory.getInstance().createCreateGetterFromUsageFix(refExpr,targetClass),key);
    }
    if (PsiUtil.isLValue(refExpr)) {
      QuickFixAction.registerQuickFixAction(info,GroovyQuickFixFactory.getInstance().createCreateSetterFromUsageFix(refExpr),key);
    }
    if (refExpr.getParent() instanceof GrCall && refExpr.getParent() instanceof GrExpression) {
      QuickFixAction.registerQuickFixAction(info,GroovyQuickFixFactory.getInstance().createCreateMethodFromUsageFix(refExpr),key);
    }
  }
  if (!refExpr.isQualified()) {
    GrVariableDeclarationOwner owner=PsiTreeUtil.getParentOfType(refExpr,GrVariableDeclarationOwner.class);
    if (!(owner instanceof GroovyFileBase) || ((GroovyFileBase)owner).isScript()) {
      QuickFixAction.registerQuickFixAction(info,GroovyQuickFixFactory.getInstance().createCreateLocalVariableFromUsageFix(refExpr,owner),key);
    }
    if (PsiTreeUtil.getParentOfType(refExpr,GrMethod.class) != null) {
      QuickFixAction.registerQuickFixAction(info,GroovyQuickFixFactory.getInstance().createCreateParameterFromUsageFix(refExpr),key);
    }
  }
}
