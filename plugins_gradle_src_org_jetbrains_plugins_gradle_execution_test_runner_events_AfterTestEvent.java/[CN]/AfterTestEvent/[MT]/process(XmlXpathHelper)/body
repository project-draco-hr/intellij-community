{
  final String testId=getTestId(eventXml);
  final String startTime=eventXml.queryXml("/ijLog/event/test/result/@startTime");
  final String endTime=eventXml.queryXml("/ijLog/event/test/result/@endTime");
  final String exceptionMsg=eventXml.queryXml("/ijLog/event/test/result/errorMsg");
  final String stackTrace=eventXml.queryXml("/ijLog/event/test/result/stackTrace");
  final SMTestProxy testProxy=findTestProxy(testId);
  if (testProxy == null)   return;
  try {
    testProxy.setDuration(Long.valueOf(endTime) - Long.valueOf(startTime));
  }
 catch (  NumberFormatException ignored) {
  }
  final CompositeRunnable runInEdt=new CompositeRunnable();
  final TestEventResult result=getTestEventResultType(eventXml);
switch (result) {
case SUCCESS:
    runInEdt.add(new Runnable(){
      @Override public void run(){
        testProxy.setFinished();
      }
    }
);
  break;
case FAILURE:
final String failureType=eventXml.queryXml("/ijLog/event/test/result/failureType");
if ("comparison".equals(failureType)) {
String actualText=eventXml.queryXml("/ijLog/event/test/result/actual");
String expectedText=eventXml.queryXml("/ijLog/event/test/result/expected");
final Condition<String> emptyString=new Condition<String>(){
  @Override public boolean value(  String s){
    return StringUtil.isEmpty(s);
  }
}
;
String filePath=ObjectUtils.nullizeByCondition(eventXml.queryXml("/ijLog/event/test/result/filePath"),emptyString);
String actualFilePath=ObjectUtils.nullizeByCondition(eventXml.queryXml("/ijLog/event/test/result/actualFilePath"),emptyString);
testProxy.setTestComparisonFailed(exceptionMsg,stackTrace,actualText,expectedText,filePath,actualFilePath);
}
 else {
Couple<String> comparisonPair=parseComparisonMessage(exceptionMsg,"\nExpected: is \"(.*)\"\n\\s*got: \"(.*)\"\n");
if (comparisonPair == null) {
  comparisonPair=parseComparisonMessage(exceptionMsg,"\nExpected: is \"(.*)\"\n\\s*but: was \"(.*)\"");
}
if (comparisonPair == null) {
  comparisonPair=parseComparisonMessage(exceptionMsg,"\nExpected: (.*)\n\\s*got: (.*)");
}
if (comparisonPair == null) {
  comparisonPair=parseComparisonMessage(exceptionMsg,"\\s*expected same:<(.*)> was not:<(.*)>");
}
if (comparisonPair == null) {
  comparisonPair=parseComparisonMessage(exceptionMsg,".*\\s*expected:<(.*)> but was:<(.*)>");
}
if (comparisonPair == null) {
  comparisonPair=parseComparisonMessage(exceptionMsg,"\nExpected: \"(.*)\"\n\\s*but: was \"(.*)\"");
}
final Couple<String> finalComparisonPair=comparisonPair;
runInEdt.add(new Runnable(){
  @Override public void run(){
    if (finalComparisonPair != null) {
      testProxy.setTestComparisonFailed(exceptionMsg,stackTrace,finalComparisonPair.second,finalComparisonPair.first);
    }
 else {
      testProxy.setTestFailed(exceptionMsg,stackTrace,"error".equals(failureType));
    }
  }
}
);
}
runInEdt.add(new Runnable(){
@Override public void run(){
getResultsViewer().onTestFailed(testProxy);
}
}
);
break;
case SKIPPED:
runInEdt.add(new Runnable(){
@Override public void run(){
testProxy.setTestIgnored(null,null);
getResultsViewer().onTestIgnored(testProxy);
}
}
);
break;
case UNKNOWN_RESULT:
break;
}
runInEdt.add(new Runnable(){
@Override public void run(){
getResultsViewer().onTestFinished(testProxy);
}
}
);
addToInvokeLater(runInEdt);
}
