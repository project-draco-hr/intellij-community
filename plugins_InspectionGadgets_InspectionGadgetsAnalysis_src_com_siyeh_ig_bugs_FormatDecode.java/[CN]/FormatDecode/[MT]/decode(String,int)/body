{
  final ArrayList<Validator> parameters=new ArrayList<Validator>();
  final Matcher matcher=fsPattern.matcher(formatString);
  boolean previousAllowed=false;
  int implicit=0;
  int pos=0;
  int i=0;
  while (matcher.find(i)) {
    final int start=matcher.start();
    if (start != i) {
      checkText(formatString.substring(i,start));
    }
    i=matcher.end();
    final String specifier=matcher.group();
    final String posSpec=matcher.group(1);
    final String flags=matcher.group(2);
    final String width=matcher.group(3);
    final String precision=matcher.group(4);
    final String dateSpec=matcher.group(5);
    final String spec=matcher.group(6);
    int flagBits=0;
    for (int j=0; j < flags.length(); j++) {
      final int bit=flag(flags.charAt(j));
      if ((flagBits | bit) == flagBits)       throw new IllegalFormatException(specifier);
      flagBits|=bit;
    }
    if (isAllBitsSet(flagBits,LEADING_SPACE | PLUS) || isAllBitsSet(flagBits,LEFT_JUSTIFY | ZERO_PAD)) {
      throw new IllegalFormatException(specifier);
    }
    if ("n".equals(spec)) {
      if (flagBits != 0 || !StringUtil.isEmpty(width) || !StringUtil.isEmpty(precision))       throw new IllegalFormatException(specifier);
      continue;
    }
 else     if ("%".equals(spec)) {
      if (isAnyBitSet(flagBits,~LEFT_JUSTIFY) || !StringUtil.isEmpty(precision))       throw new IllegalFormatException(specifier);
      continue;
    }
    if (posSpec != null) {
      if (isAnyBitSet(flagBits,PREVIOUS))       throw new IllegalFormatException(specifier);
      final String num=posSpec.substring(0,posSpec.length() - 1);
      pos=Integer.parseInt(num) - 1;
      previousAllowed=true;
    }
 else     if (isAnyBitSet(flagBits,PREVIOUS)) {
      if (!previousAllowed)       throw new IllegalFormatException(specifier);
    }
 else {
      previousAllowed=true;
      pos=implicit++;
    }
    final Validator allowed;
    if (dateSpec != null) {
      if (isAnyBitSet(flagBits,~(LEFT_JUSTIFY | PREVIOUS)) || !StringUtil.isEmpty(precision))       throw new IllegalFormatException(specifier);
      allowed=new DateValidator(specifier);
    }
 else {
switch (spec.charAt(0)) {
case 'b':
case 'B':
case 'h':
case 'H':
        if (isAnyBitSet(flagBits,~(LEFT_JUSTIFY | PREVIOUS)))         throw new IllegalFormatException(specifier);
      allowed=ALL_VALIDATOR;
    break;
case 's':
case 'S':
  if (isAnyBitSet(flagBits,~(LEFT_JUSTIFY | ALTERNATE | PREVIOUS)))   throw new IllegalFormatException(specifier);
allowed=ALL_VALIDATOR;
break;
case 'c':
case 'C':
if (isAnyBitSet(flagBits,~(LEFT_JUSTIFY | PREVIOUS)) || !StringUtil.isEmpty(precision)) throw new IllegalFormatException(specifier);
allowed=new CharValidator(specifier);
break;
case 'd':
if (isAnyBitSet(flagBits,ALTERNATE)) throw new IllegalFormatException(specifier);
allowed=new IntValidator(specifier);
break;
case 'o':
case 'x':
case 'X':
if (isAnyBitSet(flagBits,PLUS | LEADING_SPACE | GROUP) || !StringUtil.isEmpty(precision)) {
throw new IllegalFormatException(specifier);
}
allowed=new IntValidator(specifier);
break;
case 'a':
case 'A':
if (isAnyBitSet(flagBits,PARENTHESES | GROUP)) throw new IllegalFormatException(specifier);
allowed=new FloatValidator(specifier);
break;
case 'e':
case 'E':
if (isAnyBitSet(flagBits,GROUP)) throw new IllegalFormatException(specifier);
allowed=new FloatValidator(specifier);
break;
case 'g':
case 'G':
if (isAnyBitSet(flagBits,ALTERNATE)) throw new IllegalFormatException(specifier);
allowed=new FloatValidator(specifier);
break;
case 'f':
allowed=new FloatValidator(specifier);
break;
default :
throw new IllegalFormatException(specifier);
}
}
storeValidator(allowed,pos,parameters,argumentCount);
}
if (i < formatString.length() - 1) {
checkText(formatString.substring(i));
}
return parameters.toArray(new Validator[parameters.size()]);
}
