{
  DefaultActionGroup actionGroup1=new DefaultActionGroup("search bar 1",false);
  mySearchActionsToolbar1=(ActionToolbarImpl)ActionManager.getInstance().createActionToolbar(ActionPlaces.EDITOR_TOOLBAR,actionGroup1,true);
  mySearchActionsToolbar1.setForceMinimumSize(true);
  mySearchActionsToolbar1.setReservePlaceAutoPopupIcon(false);
  mySearchActionsToolbar1.setSecondaryButtonPopupStateModifier(new ActionToolbarImpl.PopupStateModifier(){
    @Override public int getModifiedPopupState(){
      return ActionButtonComponent.PUSHED;
    }
    @Override public boolean willModify(){
      return myFindModel.getSearchContext() != FindModel.SearchContext.ANY;
    }
  }
);
  mySearchActionsToolbar1.setSecondaryActionsTooltip("More Options(" + ShowMoreOptions.SHORT_CUT + ")");
  actionGroup1.add(new PrevOccurrenceAction(this,mySearchFieldWrapper));
  actionGroup1.add(new NextOccurrenceAction(this,mySearchFieldWrapper,true));
  actionGroup1.add(new FindAllAction(this));
  actionGroup1.addSeparator();
  actionGroup1.add(new AddOccurrenceAction(this));
  actionGroup1.add(new RemoveOccurrenceAction(this));
  actionGroup1.add(new SelectAllAction(this));
  actionGroup1.addSeparator();
  actionGroup1.addAction(new ToggleInCommentsAction(this)).setAsSecondary(true);
  actionGroup1.addAction(new ToggleInLiteralsOnlyAction(this)).setAsSecondary(true);
  actionGroup1.addAction(new ToggleExceptCommentsAction(this)).setAsSecondary(true);
  actionGroup1.addAction(new ToggleExceptLiteralsAction(this)).setAsSecondary(true);
  actionGroup1.addAction(new ToggleExceptCommentsAndLiteralsAction(this)).setAsSecondary(true);
  DefaultActionGroup actionGroup2=new DefaultActionGroup("search bar 2",false);
  mySearchActionsToolbar2=(ActionToolbarImpl)ActionManager.getInstance().createActionToolbar(ActionPlaces.EDITOR_TOOLBAR,actionGroup2,true);
  actionGroup2.add(new ToggleMatchCase(this));
  actionGroup2.add(new ToggleRegex(this));
  actionGroup2.add(new ToggleWholeWordsOnlyAction(this));
  myMatchInfoLabel=new JLabel(){
    @Override public Font getFont(){
      Font font=super.getFont();
      return font != null ? font.deriveFont(Font.BOLD) : null;
    }
  }
;
  myMatchInfoLabel.setBorder(JBUI.Borders.empty(2,20,0,20));
  myClickToHighlightLabel=new LinkLabel<Object>("Click to highlight",null,new LinkListener<Object>(){
    @Override public void linkSelected(    LinkLabel aSource,    Object aLinkData){
      setMatchesLimit(Integer.MAX_VALUE);
      updateResults(true);
    }
  }
);
  myClickToHighlightLabel.setVisible(false);
  mySearchActionsToolbar2=(ActionToolbarImpl)ActionManager.getInstance().createActionToolbar(ActionPlaces.EDITOR_TOOLBAR,actionGroup2,true);
  actionGroup2.add(new DefaultCustomComponentAction(myMatchInfoLabel));
  actionGroup2.add(new DefaultCustomComponentAction(myClickToHighlightLabel));
  mySearchActionsToolbar1.setLayoutPolicy(ActionToolbar.AUTO_LAYOUT_POLICY);
  mySearchActionsToolbar2.setLayoutPolicy(ActionToolbar.AUTO_LAYOUT_POLICY);
  mySearchActionsToolbar1.setBorder(null);
  mySearchActionsToolbar2.setBorder(null);
  mySearchActionsToolbar1.setOpaque(false);
  mySearchActionsToolbar2.setOpaque(false);
  new ShowMoreOptions(mySearchActionsToolbar1,mySearchFieldWrapper);
  Utils.setSmallerFontForChildren(mySearchActionsToolbar1);
  Utils.setSmallerFontForChildren(mySearchActionsToolbar2);
}
