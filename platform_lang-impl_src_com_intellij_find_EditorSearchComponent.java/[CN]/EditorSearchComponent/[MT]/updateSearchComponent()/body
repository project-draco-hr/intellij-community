{
  final int oldCaretPosition=mySearchTextComponent != null ? mySearchTextComponent.getCaretPosition() : 0;
  boolean wasNull=mySearchTextComponent == null;
  String textToSet=myFindModel.getStringToFind();
  if (!updateTextComponent(true)) {
    mySearchTextComponent.setText(textToSet);
    return;
  }
  mySearchTextComponent.setText(textToSet);
  if (wasNull) {
    mySearchTextComponent.selectAll();
  }
  mySearchTextComponent.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          searchFieldDocumentChanged();
        }
      }
);
    }
  }
);
  mySearchTextComponent.registerKeyboardAction(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      if (StringUtil.isEmpty(mySearchTextComponent.getText())) {
        close();
      }
 else {
        requestFocus(myEditor.getContentComponent());
        addTextToRecent(EditorSearchComponent.this.mySearchTextComponent);
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,SystemInfo.isMac ? InputEvent.META_DOWN_MASK : InputEvent.CTRL_DOWN_MASK),JComponent.WHEN_FOCUSED);
  if (!wasNull) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        mySearchTextComponent.setCaretPosition(oldCaretPosition);
      }
    }
);
  }
  new RestorePreviousSettingsAction(this,mySearchFieldWrapper);
  new VariantsCompletionAction(mySearchTextComponent);
}
