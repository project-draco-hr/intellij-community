{
  HashMap<Integer,Integer> mapCount=new HashMap<Integer,Integer>();
  List<VarExprent> condlst;
  if (stat.getExprents() == null) {
    List<Integer> childVars=new ArrayList<Integer>();
    List<Exprent> currVars=new ArrayList<Exprent>();
    for (    Object obj : stat.getSequentialObjects()) {
      if (obj instanceof Statement) {
        Statement st=(Statement)obj;
        childVars.addAll(initStatement(st));
        if (st.type == DoStatement.TYPE_DO) {
          DoStatement dost=(DoStatement)st;
          if (dost.getLooptype() != DoStatement.LOOP_FOR && dost.getLooptype() != DoStatement.LOOP_DO) {
            currVars.add(dost.getConditionExprent());
          }
        }
 else         if (st.type == DoStatement.TYPE_CATCHALL) {
          CatchAllStatement fin=(CatchAllStatement)st;
          if (fin.isFinally() && fin.getMonitor() != null) {
            currVars.add(fin.getMonitor());
          }
        }
      }
 else       if (obj instanceof Exprent) {
        currVars.add((Exprent)obj);
      }
    }
    for (    Integer index : childVars) {
      Integer count=mapCount.get(index);
      if (count == null) {
        count=new Integer(0);
      }
      mapCount.put(index,new Integer(count.intValue() + 1));
    }
    condlst=getAllVars(currVars);
  }
 else {
    condlst=getAllVars(stat.getExprents());
  }
  for (  VarExprent var : condlst) {
    mapCount.put(new Integer(var.getIndex()),new Integer(2));
  }
  HashSet<Integer> set=new HashSet<Integer>(mapCount.keySet());
  Iterator<Entry<Integer,Integer>> itMult=mapCount.entrySet().iterator();
  while (itMult.hasNext()) {
    Entry<Integer,Integer> en=itMult.next();
    if (en.getValue().intValue() > 1) {
      mapVarDefStatements.put(en.getKey(),stat);
    }
  }
  mapStatementVars.put(stat.id,set);
  return set;
}
