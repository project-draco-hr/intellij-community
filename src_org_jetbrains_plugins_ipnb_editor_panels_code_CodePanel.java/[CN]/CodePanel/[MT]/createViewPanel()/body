{
  final JPanel panel=new JPanel(new GridBagLayout());
  panel.setBackground(IpnbEditorUtil.getBackground());
  final GridBagConstraints c=new GridBagConstraints();
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=0;
  c.gridy=0;
  c.gridwidth=1;
  myCodeSourcePanel=new CodeSourcePanel(myProject,this,myCell.getSourceAsString());
  if (myParent != null)   Disposer.register(myParent,new Disposable(){
    @Override public void dispose(){
      EditorFactory.getInstance().releaseEditor(myCodeSourcePanel.getEditor());
    }
  }
);
  addPromptPanel(panel,myCell.getPromptNumber(),IpnbEditorUtil.PromptType.In,myCodeSourcePanel,c);
  c.gridx=1;
  c.gridy=0;
  for (  CellOutput cellOutput : myCell.getCellOutputs()) {
    c.gridy++;
    if (cellOutput instanceof ImageCellOutput) {
      addPromptPanel(panel,myCell.getPromptNumber(),IpnbEditorUtil.PromptType.Out,new ImagePanel((ImageCellOutput)cellOutput),c);
    }
 else     if (cellOutput instanceof HtmlCellOutput) {
      addPromptPanel(panel,myCell.getPromptNumber(),IpnbEditorUtil.PromptType.Out,new HtmlPanel((HtmlCellOutput)cellOutput),c);
    }
 else     if (cellOutput instanceof LatexCellOutput) {
      addPromptPanel(panel,myCell.getPromptNumber(),IpnbEditorUtil.PromptType.Out,new LatexPanel((LatexCellOutput)cellOutput),c);
    }
 else     if (cellOutput.getSourceAsString() != null) {
      addPromptPanel(panel,myCell.getPromptNumber(),IpnbEditorUtil.PromptType.Out,new CodeOutputPanel(cellOutput.getSourceAsString()),c);
    }
  }
  return panel;
}
