{
  Frame<ParamsValue>[] frames=jsr ? new Analyzer<ParamsValue>(new ParametersUsage(methodNode)).analyze(className,methodNode) : new LiteAnalyzer<ParamsValue>(new ParametersUsage(methodNode)).analyze(className,methodNode);
  InsnList insns=methodNode.instructions;
  LeakingParametersCollector collector=new LeakingParametersCollector(methodNode);
  for (int i=0; i < frames.length; i++) {
    AbstractInsnNode insnNode=insns.get(i);
    Frame<ParamsValue> frame=frames[i];
    if (frame != null) {
switch (insnNode.getType()) {
case AbstractInsnNode.LABEL:
case AbstractInsnNode.LINE:
case AbstractInsnNode.FRAME:
        break;
default :
      new Frame<ParamsValue>(frame).execute(insnNode,collector);
  }
}
}
return Pair.create(collector.leaking,(Frame<Value>[])(Frame<?>[])frames);
}
