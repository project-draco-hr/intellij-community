{
  String externalDoc=null;
  myElement=element;
  String projectPath="/" + myProject.getName() + "/";
  String builtInServer="http://localhost:" + BuiltInServerOptions.getInstance().getEffectiveBuiltInServerPort() + projectPath;
  if (docURL.startsWith(builtInServer)) {
    Url url=Urls.parseFromIdea(docURL);
    VirtualFile file=url == null ? null : WebServerPathToFileManager.getInstance(myProject).findVirtualFile(url.getPath().substring(projectPath.length()));
    if (file != null) {
      InputStreamReader reader=new InputStreamReader(file.getInputStream(),StandardCharsets.UTF_8);
      StringBuilder result=new StringBuilder();
      try {
        doBuildFromStream(docURL,reader,result);
      }
  finally {
        reader.close();
      }
      externalDoc=correctDocText(docURL,result);
    }
  }
  if (externalDoc == null) {
    externalDoc=super.getExternalDocInfoForElement(docURL,element);
  }
  if (externalDoc == null) {
    return null;
  }
  if (element instanceof PsiMethod) {
    final String className=ApplicationManager.getApplication().runReadAction(new NullableComputable<String>(){
      @Override @Nullable public String compute(){
        PsiClass aClass=((PsiMethod)element).getContainingClass();
        return aClass == null ? null : aClass.getQualifiedName();
      }
    }
);
    Matcher matcher=ourMethodHeading.matcher(externalDoc);
    StringBuilder buffer=new StringBuilder("<h3>");
    DocumentationManager.createHyperlink(buffer,className,className,false);
    return matcher.replaceFirst(buffer.append("</h3>").toString());
  }
  return externalDoc;
}
