{
  final ResourceBundleEditor editor=getEditor(e);
  LOG.assertTrue(editor != null);
  final ResourceBundlePropertyStructureViewElement element=(ResourceBundlePropertyStructureViewElement)editor.getSelectedElementIfOnlyOne();
  LOG.assertTrue(element != null);
  final PsiFile file=editor.getResourceBundle().getDefaultPropertiesFile().getContainingFile();
  final ShowIntentionsPass.IntentionsInfo intentions=new ShowIntentionsPass.IntentionsInfo();
  boolean isQuickFixListEmpty=true;
  Pair<ResourceBundleEditorProblemDescriptor,HighlightDisplayKey>[] descriptorsAndSources=element.getProblemDescriptors();
  for (  Pair<ResourceBundleEditorProblemDescriptor,HighlightDisplayKey> p : descriptorsAndSources) {
    final ResourceBundleEditorProblemDescriptor d=p.getFirst();
    final HighlightDisplayKey sourceKey=p.getSecond();
    QuickFix[] fixes=d.getFixes();
    if (fixes != null) {
      for (int i=0; i < fixes.length; i++) {
        intentions.inspectionFixesToShow.add(new HighlightInfo.IntentionActionDescriptor(new RBEQuickFixWrapper(d,i),null,null,AllIcons.Actions.IntentionBulb,sourceKey,null,null));
        isQuickFixListEmpty=false;
      }
    }
  }
  if (isQuickFixListEmpty) {
    return;
  }
  final Project project=e.getProject();
  LOG.assertTrue(project != null);
  PopupFactoryImpl.getInstance().createListPopup(new IntentionListStep(null,intentions,null,file,project)).showInBestPositionFor(e.getDataContext());
}
