{
  DuplocatorSettings settings=DuplocatorSettings.getInstance();
  boolean oldMethods=settings.DISTINGUISH_METHODS;
  boolean oldLits=settings.DISTINGUISH_LITERALS;
  boolean oldVars=settings.DISTINGUISH_VARIABLES;
  int oldLowerBound=settings.LOWER_BOUND;
  try {
    settings.DISTINGUISH_METHODS=distinguishMethods;
    settings.DISTINGUISH_LITERALS=distinguishListerals;
    settings.DISTINGUISH_VARIABLES=distinguishVars;
    settings.LOWER_BOUND=2;
    DuplicatesProfile[] profiles={new SSRDuplicatesProfile()};
    configureByFile(BASE_PATH + fileName);
    String testName=FileUtil.getNameWithoutExtension(fileName);
    int lowerBound=settings.LOWER_BOUND;
    DuplocatorHashCallback collector=new DuplocatorHashCallback(lowerBound);
    DuplocateManager.hash(new AnalysisScope(getFile()),collector,profiles,DuplocatorSettings.getInstance());
    DupInfo info=collector.getInfo();
    assertEquals(patternCount,info.getPatterns());
    Set<String> expectedFiles=readExpectedFiles(testName,patternCount);
    for (int i=0; i < info.getPatterns(); i++) {
      String s=toString(info,i);
      s=reduceWhitespaces(s);
      assertTrue("Expected one of the \n" + merge(expectedFiles) + " but was\n"+ s,expectedFiles.contains(s));
    }
  }
  finally {
    settings.DISTINGUISH_METHODS=oldMethods;
    settings.DISTINGUISH_LITERALS=oldLits;
    settings.DISTINGUISH_VARIABLES=oldVars;
    settings.LOWER_BOUND=oldLowerBound;
  }
}
