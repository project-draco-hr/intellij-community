{
  PsiElement psiElement=psiFile;
  PsiElement before=importStatement;
  while (PsiImplUtil.isWhiteSpaceOrNls(before.getPrevSibling())) {
    before=before.getPrevSibling();
  }
  if (PsiImplUtil.hasElementType(before.getPrevSibling(),mSEMI))   before=before.getPrevSibling();
  if (PsiImplUtil.isWhiteSpaceOrNls(before.getPrevSibling()))   before=before.getPrevSibling();
  PsiElement after=importStatement;
  if (PsiImplUtil.isWhiteSpaceOrNls(after.getNextSibling()))   after=after.getNextSibling();
  if (PsiImplUtil.hasElementType(after.getNextSibling(),mSEMI))   after=after.getNextSibling();
  while (PsiImplUtil.isWhiteSpaceOrNls(after.getNextSibling()))   after=after.getNextSibling();
  if (before == null)   before=importStatement;
  PsiElement anchor_before=before.getPrevSibling();
  PsiElement anchor_after=after.getNextSibling();
  if (before == after) {
    importStatement.delete();
  }
 else {
    psiFile.deleteChildRange(before,after);
  }
  if (anchor_before instanceof GrImportStatement && anchor_after instanceof GrImportStatement) {
    addLineFeedAfter(psiFile,(GrImportStatement)anchor_before);
  }
 else   if (anchor_before != null && anchor_after != null) {
    String text=anchor_after instanceof GrTopStatement && anchor_before instanceof GrTopStatement ? "\n\n" : "\n";
    psiElement.getNode().addLeaf(mNLS,text,anchor_after.getNode());
  }
}
