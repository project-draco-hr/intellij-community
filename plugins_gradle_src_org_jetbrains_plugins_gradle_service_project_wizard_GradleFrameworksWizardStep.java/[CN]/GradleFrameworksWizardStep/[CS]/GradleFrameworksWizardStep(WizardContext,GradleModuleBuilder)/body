{
  Project project=context.getProject();
  final LibrariesContainer container=LibrariesContainerFactory.createContainer(context.getProject());
  FrameworkSupportModelBase model=new FrameworkSupportModelBase(project,null,container){
    @NotNull @Override public String getBaseDirectoryForLibrariesPath(){
      return StringUtil.notNullize(builder.getContentEntryPath());
    }
  }
;
  myFrameworksPanel=new AddSupportForFrameworksPanel(Collections.<FrameworkSupportInModuleProvider>emptyList(),model,true,null);
  List<FrameworkSupportInModuleProvider> providers=ContainerUtil.newArrayList();
  Collections.addAll(providers,GradleFrameworkSupportProvider.EP_NAME.getExtensions());
  myFrameworksPanel.setProviders(providers,Collections.<String>emptySet(),Collections.singleton(GradleJavaFrameworkSupportProvider.ID));
  Disposer.register(this,myFrameworksPanel);
  myFrameworksPanelPlaceholder.add(myFrameworksPanel.getMainPanel());
  ModuleBuilder.ModuleConfigurationUpdater configurationUpdater=new ModuleBuilder.ModuleConfigurationUpdater(){
    @Override public void update(    @NotNull Module module,    @NotNull ModifiableRootModel rootModel){
      myFrameworksPanel.addSupport(module,rootModel);
    }
  }
;
  builder.addModuleConfigurationUpdater(configurationUpdater);
  ((CardLayout)myOptionsPanel.getLayout()).show(myOptionsPanel,"frameworks card");
}
