{
  buffer.writeByte('[');
  ByteBuf effectiveBuffer=buffer;
  boolean hasPrev=false;
  StringBuilder sb=null;
  if (id != -1) {
    sb=new StringBuilder();
    ByteBufUtil.writeAscii(buffer,sb.append(id));
    sb.setLength(0);
    hasPrev=true;
  }
  if (domain != null) {
    if (hasPrev) {
      buffer.writeByte(',');
    }
    buffer.writeByte('"');
    ByteBufUtil.writeAscii(buffer,domain);
    buffer.writeByte('"').writeByte(',').writeByte('"');
    if (command == null) {
      if (rawData != null) {
        effectiveBuffer=byteBufAllocator.compositeBuffer().addComponent(buffer).addComponent(rawData);
        buffer=byteBufAllocator.ioBuffer();
      }
      buffer.writeByte('"');
      return addBuffer(effectiveBuffer,buffer);
    }
 else {
      ByteBufUtil.writeAscii(buffer,command);
      buffer.writeByte('"');
    }
  }
  encodeParameters(buffer,params,rawData,sb);
  if (rawData != null) {
    if (params.length > 0) {
      buffer.writeByte(',');
    }
    effectiveBuffer=byteBufAllocator.compositeBuffer().addComponent(buffer).addComponent(rawData);
    buffer=byteBufAllocator.ioBuffer();
  }
  buffer.writeByte(']');
  buffer.writeByte(']');
  return addBuffer(effectiveBuffer,buffer);
}
