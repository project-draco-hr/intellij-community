{
  JsonWriter writer=null;
  buffer.writeByte(',').writeByte('[');
  boolean hasPrev=false;
  for (  Object param : params) {
    if (hasPrev) {
      buffer.writeByte(',');
    }
 else {
      hasPrev=true;
    }
    if (param instanceof CharSequence) {
      JsonUtil.escape(((CharSequence)param),buffer);
    }
 else     if (param == null) {
      ByteBufUtil.writeAscii(buffer,"null");
    }
 else     if (param instanceof Boolean) {
      ByteBufUtil.writeAscii(buffer,param.toString());
    }
 else     if (param instanceof Number) {
      if (sb == null) {
        sb=new StringBuilder();
      }
      if (param instanceof Integer) {
        sb.append(((Integer)param).intValue());
      }
 else       if (param instanceof Long) {
        sb.append(((Long)param).longValue());
      }
 else       if (param instanceof Float) {
        sb.append(((Float)param).floatValue());
      }
 else       if (param instanceof Double) {
        sb.append(((Double)param).doubleValue());
      }
 else {
        sb.append(param.toString());
      }
      ByteBufUtil.writeAscii(buffer,sb);
      sb.setLength(0);
    }
 else     if (param instanceof Consumer) {
      if (sb == null) {
        sb=new StringBuilder();
      }
      ((Consumer<StringBuilder>)param).consume(sb);
      ByteBufUtil.writeUtf8(buffer,sb);
      sb.setLength(0);
    }
 else {
      if (writer == null) {
        writer=new JsonWriter(new OutputStreamWriter(new ByteBufOutputStream(buffer)));
      }
      ((TypeAdapter<Object>)gson.getAdapter(param.getClass())).write(writer,param);
    }
  }
}
