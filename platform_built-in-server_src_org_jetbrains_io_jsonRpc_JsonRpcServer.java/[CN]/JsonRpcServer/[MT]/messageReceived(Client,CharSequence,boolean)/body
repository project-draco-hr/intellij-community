{
  if (LOG.isDebugEnabled()) {
    LOG.debug("IN " + message);
  }
  JsonReaderEx reader=new JsonReaderEx(message);
  if (!isBinary) {
    reader.beginArray();
  }
  int messageId=reader.peek() == JsonToken.NUMBER ? reader.nextInt() : -1;
  String domainName=reader.nextString();
  if (domainName.length() == 1) {
    AsyncPromise<Object> promise=client.messageCallbackMap.remove(messageId);
    if (domainName.charAt(0) == 'r') {
      if (promise == null) {
        LOG.error("Response with id " + messageId + " was already processed");
        return;
      }
      promise.setResult(JsonUtil.nextAny(reader));
    }
 else {
      promise.setError(Promise.createError("error"));
    }
    return;
  }
  NotNullLazyValue domainHolder=domains.get(domainName);
  if (domainHolder == null) {
    LOG.error("Cannot find domain " + domainName);
    return;
  }
  Object domain=domainHolder.getValue();
  String command=reader.nextString();
  if (domain instanceof JsonServiceInvocator) {
    ((JsonServiceInvocator)domain).invoke(command,client,reader,messageId);
    return;
  }
  Object[] parameters;
  if (reader.hasNext()) {
    List<Object> list=new SmartList<Object>();
    JsonUtil.readListBody(reader,list);
    parameters=ArrayUtil.toObjectArray(list);
  }
 else {
    parameters=ArrayUtilRt.EMPTY_OBJECT_ARRAY;
  }
  if (!isBinary) {
    reader.endArray();
  }
  try {
    boolean isStatic=domain instanceof Class;
    Method[] methods;
    if (isStatic) {
      methods=((Class)domain).getDeclaredMethods();
    }
 else {
      methods=domain.getClass().getMethods();
    }
    for (    Method method : methods) {
      if (method.getName().equals(command)) {
        method.setAccessible(true);
        Object result=method.invoke(isStatic ? null : domain,parameters);
        if (messageId != -1) {
          client.send(encodeMessage(client.getByteBufAllocator(),messageId,null,null,null,new Object[]{result}));
        }
        return;
      }
    }
    throw new NoSuchMethodException(command);
  }
 catch (  Throwable e) {
    throw new IOException(e);
  }
}
