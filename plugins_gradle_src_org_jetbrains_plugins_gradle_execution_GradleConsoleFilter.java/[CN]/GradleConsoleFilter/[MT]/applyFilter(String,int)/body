{
  String[] filePrefixes=new String[]{"Build file '","build file '"};
  String[] linePrefixes=new String[]{"' line: ","': "};
  String filePrefix=null;
  String linePrefix=null;
  for (int i=0; i < filePrefixes.length; i++) {
    int filePrefixIndex=StringUtil.indexOf(line,filePrefixes[i]);
    if (filePrefixIndex != -1) {
      filePrefix=filePrefixes[i];
      linePrefix=linePrefixes[i];
      break;
    }
  }
  if (filePrefix == null || linePrefix == null) {
    return null;
  }
  int filePrefixIndex=StringUtil.indexOf(line,filePrefix);
  final String fileAndLineNumber=line.substring(filePrefix.length() + filePrefixIndex);
  int linePrefixIndex=StringUtil.indexOf(fileAndLineNumber,linePrefix);
  if (linePrefixIndex == -1) {
    return null;
  }
  final String fileName=fileAndLineNumber.substring(0,linePrefixIndex);
  myFilteredFileName=fileName;
  String lineNumberStr=fileAndLineNumber.substring(linePrefixIndex + linePrefix.length(),fileAndLineNumber.length()).trim();
  int lineNumberEndIndex=0;
  for (int i=0; i < lineNumberStr.length(); i++) {
    if (Character.isDigit(lineNumberStr.charAt(i))) {
      lineNumberEndIndex=i;
    }
 else {
      break;
    }
  }
  lineNumberStr=lineNumberStr.substring(0,lineNumberEndIndex + 1);
  int lineNumber;
  try {
    lineNumber=Integer.parseInt(lineNumberStr);
    myFilteredLineNumber=lineNumber;
  }
 catch (  NumberFormatException e) {
    return null;
  }
  final VirtualFile file=LocalFileSystem.getInstance().findFileByPath(fileName.replace(File.separatorChar,'/'));
  if (file == null) {
    return null;
  }
  int textStartOffset=entireLength - line.trim().length() + filePrefix.length() - 1;
  int highlightEndOffset=textStartOffset + fileName.length();
  OpenFileHyperlinkInfo info=new OpenFileHyperlinkInfo(myProject,file,Math.max(lineNumber - 1,0));
  TextAttributes attributes=HYPERLINK_ATTRIBUTES.clone();
  if (!ProjectRootManager.getInstance(myProject).getFileIndex().isInContent(file)) {
    Color color=UIUtil.getInactiveTextColor();
    attributes.setForegroundColor(color);
    attributes.setEffectColor(color);
  }
  return new Result(textStartOffset,highlightEndOffset,info,attributes);
}
