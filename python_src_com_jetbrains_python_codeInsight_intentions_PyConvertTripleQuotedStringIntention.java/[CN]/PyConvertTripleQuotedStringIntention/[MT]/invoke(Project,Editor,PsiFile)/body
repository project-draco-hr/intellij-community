{
  final PyStringLiteralExpression pyString=PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PyStringLiteralExpression.class);
  final PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
  if (pyString != null) {
    final StringBuilder result=new StringBuilder();
    final List<StringNodeInfo> nodeInfos=extractStringNodesInfo(pyString);
    for (int i=0; i < nodeInfos.size(); i++) {
      final StringNodeInfo info=nodeInfos.get(i);
      List<String> lines=StringUtil.split(info.content,"\n",true,false);
      boolean lastLineExcluded=false;
      if (lines.size() > 1 && lines.get(lines.size() - 1).isEmpty()) {
        lastLineExcluded=true;
        lines=lines.subList(0,lines.size() - 1);
      }
      final boolean inLastNode=i == nodeInfos.size() - 1;
      for (int j=0; j < lines.size(); j++) {
        final String line=lines.get(j);
        final boolean inLastLine=j == lines.size() - 1;
        if (StringUtil.containsIgnoreCase(info.prefix,"r")) {
          appendSplittedRawStringLine(result,info,line);
          if (!inLastLine || lastLineExcluded) {
            result.append(" ").append(info.quote).append("\\n").append(info.quote);
          }
        }
 else {
          result.append(info.prefix);
          result.append(info.quote);
          result.append(convertToValidSubString(line,info.quote,info.isTripleQuoted));
          if (!inLastLine || lastLineExcluded) {
            result.append("\\n");
          }
          result.append(info.quote);
        }
        if (!(inLastNode && inLastLine)) {
          result.append("\n");
        }
      }
    }
    if (result.indexOf("\n") >= 0) {
      result.insert(0,"(");
      result.append(")");
    }
    PyExpression expression=elementGenerator.createExpressionFromText(LanguageLevel.forElement(pyString),result.toString());
    final PsiElement parent=pyString.getParent();
    if (expression instanceof PyParenthesizedExpression && (parent instanceof PyParenthesizedExpression || parent instanceof PyTupleExpression || parent instanceof PyArgumentList && ArrayUtil.getFirstElement(((PyArgumentList)parent).getArguments()) == pyString)) {
      expression=((PyParenthesizedExpression)expression).getContainedExpression();
    }
    if (expression != null) {
      pyString.replace(expression);
    }
  }
}
