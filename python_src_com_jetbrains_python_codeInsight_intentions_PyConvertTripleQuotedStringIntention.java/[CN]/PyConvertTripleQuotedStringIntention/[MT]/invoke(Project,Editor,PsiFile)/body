{
  final PyStringLiteralExpression string=PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PyStringLiteralExpression.class);
  final PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
  if (string != null) {
    final PsiElement parent=string.getParent();
    String stringText=string.getText();
    final int prefixLength=PyStringLiteralExpressionImpl.getPrefixLength(stringText);
    final String prefix=stringText.substring(0,prefixLength);
    stringText=stringText.substring(prefixLength);
    final char firstQuote=stringText.charAt(0);
    List<String> lines=StringUtil.split(stringText,"\n",true,false);
    final String lastLine=lines.get(lines.size() - 1);
    boolean lastLineExcluded=false;
    if (lastLine.equals(TRIPLE_SINGLE_QUOTE) || lastLine.equals(TRIPLE_DOUBLE_QUOTE)) {
      lastLineExcluded=true;
      lines=lines.subList(0,lines.size() - 1);
    }
    final StringBuilder result=new StringBuilder();
    if (lines.size() != 1) {
      result.append("(");
    }
    for (int i=0; i < lines.size(); i++) {
      final String validSubstring=convertToValidSubString(lines.get(i),firstQuote);
      final boolean isLastLine=i == lines.size() - 1;
      result.append(prefix);
      result.append(firstQuote);
      result.append(validSubstring);
      if (!isLastLine || lastLineExcluded) {
        result.append("\\n");
      }
      result.append(firstQuote);
      if (!isLastLine) {
        result.append("\n");
      }
    }
    if (lines.size() != 1) {
      result.append(")");
    }
    final PyExpressionStatement e=elementGenerator.createFromText(LanguageLevel.forElement(string),PyExpressionStatement.class,result.toString());
    PyExpression expression=e.getExpression();
    if ((parent instanceof PyParenthesizedExpression || parent instanceof PyTupleExpression) && expression instanceof PyParenthesizedExpression) {
      expression=((PyParenthesizedExpression)expression).getContainedExpression();
    }
    if (expression != null) {
      string.replace(expression);
    }
  }
}
