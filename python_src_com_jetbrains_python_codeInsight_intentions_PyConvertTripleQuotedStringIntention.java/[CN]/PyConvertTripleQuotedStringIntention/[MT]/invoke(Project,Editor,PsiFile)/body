{
  PyStringLiteralExpression string=PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PyStringLiteralExpression.class);
  PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
  if (string != null) {
    StringBuilder strBuilder=new StringBuilder();
    List<ASTNode> nodes=string.getStringNodes();
    if (nodes.size() == 1)     strBuilder.append(string.getText());
 else {
      String firstNode=nodes.get(0).getText();
      strBuilder.append(firstNode.substring(0,firstNode.length() - 3));
      for (int i=1; i != nodes.size(); ++i) {
        ASTNode node=nodes.get(i);
        String text=node.getText();
        if (text.length() > 3)         strBuilder.append(text.substring(3,text.length() - 3));
      }
      strBuilder.append(firstNode.substring(0,3));
    }
    String stringText=strBuilder.toString();
    String[] subStrings=stringText.split("\n");
    Character firstQuote=stringText.charAt(0);
    StringBuilder result=new StringBuilder();
    if (subStrings.length != 1)     result.append("(");
    boolean lastString=false;
    for (    String s : subStrings) {
      result.append(firstQuote);
      String validSubstring=convertToValidSubString(s,firstQuote);
      if (s.endsWith("'''") || s.endsWith("\"\"\"")) {
        lastString=true;
      }
      result.append(validSubstring);
      result.append(firstQuote);
      if (!lastString)       result.append(" ").append(firstQuote).append("\\n").append(firstQuote).append("\n");
    }
    if (subStrings.length != 1)     result.append(")");
    PyExpressionStatement e=elementGenerator.createFromText(LanguageLevel.forElement(string),PyExpressionStatement.class,result.toString());
    string.replace(e.getExpression());
  }
}
