{
  if (parameter == null)   return null;
  final PsiType type=getType(parameter);
  if (type instanceof PsiArrayType) {
    return type;
  }
  final PsiClassType.ClassResolveResult result=PsiUtil.resolveGenericsClassInType(type);
  final PsiClass psiClass=result.getElement();
  if (psiClass == null)   return type;
  final Set<PsiTypeParameter> usedTypeParameters=new HashSet<PsiTypeParameter>();
  RefactoringUtil.collectTypeParameters(usedTypeParameters,parameter);
  for (Iterator<PsiTypeParameter> iterator=usedTypeParameters.iterator(); iterator.hasNext(); ) {
    PsiTypeParameter usedTypeParameter=iterator.next();
    if (parameter.getDeclarationScope() != usedTypeParameter.getOwner()) {
      iterator.remove();
    }
  }
  PsiSubstitutor subst=PsiSubstitutor.EMPTY;
  for (  PsiTypeParameter usedTypeParameter : usedTypeParameters) {
    final PsiType bound=TypeConversionUtil.typeParameterErasure(usedTypeParameter);
    final PsiManager manager=usedTypeParameter.getManager();
    subst=subst.put(usedTypeParameter,bound == null ? PsiWildcardType.createUnbounded(manager) : bound.equalsToText(CommonClassNames.JAVA_LANG_OBJECT) ? bound : PsiWildcardType.createExtends(manager,bound));
  }
  PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
  final Map<PsiTypeParameter,PsiType> typeMap=result.getSubstitutor().getSubstitutionMap();
  for (  PsiTypeParameter typeParameter : typeMap.keySet()) {
    final PsiType psiType=typeMap.get(typeParameter);
    substitutor=substitutor.put(typeParameter,psiType != null ? subst.substitute(psiType) : null);
  }
  if (psiClass instanceof PsiTypeParameter) {
    return GenericsUtil.getVariableTypeByExpressionType(subst.substitute((PsiTypeParameter)psiClass));
  }
 else {
    return JavaPsiFacade.getElementFactory(parameter.getProject()).createType(psiClass,substitutor);
  }
}
