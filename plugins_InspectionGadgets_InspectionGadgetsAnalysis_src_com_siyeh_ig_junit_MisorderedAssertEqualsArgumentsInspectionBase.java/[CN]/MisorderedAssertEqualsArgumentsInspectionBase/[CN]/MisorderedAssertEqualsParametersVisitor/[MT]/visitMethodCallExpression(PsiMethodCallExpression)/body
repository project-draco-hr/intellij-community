{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!methodNames.contains(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null || method.hasModifierProperty(PsiModifier.PRIVATE)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length < 2) {
    return;
  }
  final PsiType stringType=TypeUtils.getStringType(expression);
  final PsiClass containingClass=method.getContainingClass();
  final PsiExpression expectedArgument;
  final PsiExpression actualArgument;
  if (checkTestNG() ? InheritanceUtil.isInheritor(containingClass,"org.testng.AssertJUnit") : InheritanceUtil.isInheritor(containingClass,JUnitCommonClassNames.JUNIT_FRAMEWORK_ASSERT) || InheritanceUtil.isInheritor(containingClass,JUnitCommonClassNames.ORG_JUNIT_ASSERT)) {
    final PsiType firstArgumentType=arguments[0].getType();
    if (stringType.equals(firstArgumentType) && arguments.length > 2) {
      expectedArgument=arguments[1];
      actualArgument=arguments[2];
    }
 else {
      expectedArgument=arguments[0];
      actualArgument=arguments[1];
    }
  }
 else   if (checkTestNG() && InheritanceUtil.isInheritor(containingClass,"org.testng.Assert")) {
    expectedArgument=arguments[1];
    actualArgument=arguments[0];
  }
 else {
    return;
  }
  if (expectedArgument == null || actualArgument == null) {
    return;
  }
  if (looksLikeExpectedArgument(expectedArgument) || !looksLikeExpectedArgument(actualArgument)) {
    return;
  }
  registerMethodCallError(expression);
}
