{
  PyIfStatement expression=PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PyIfStatement.class);
  PyIfStatement ifStatement=getIfStatement(expression);
  PyStatement firstStatement=getFirstStatement(ifStatement);
  if (ifStatement == null)   return;
  if (firstStatement != null && firstStatement instanceof PyIfStatement) {
    PyExpression condition=((PyIfStatement)firstStatement).getIfPart().getCondition();
    PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
    PyExpression ifCondition=ifStatement.getIfPart().getCondition();
    if (ifCondition == null || condition == null)     return;
    StringBuilder replacementText=new StringBuilder(ifCondition.getText() + " and ");
    if (condition instanceof PyBinaryExpression && ((PyBinaryExpression)condition).getOperator() == PyTokenTypes.OR_KEYWORD) {
      replacementText.append("(").append(condition.getText()).append(")");
    }
 else     replacementText.append(condition.getText());
    PyExpression newCondition=elementGenerator.createExpressionFromText(replacementText.toString());
    ifCondition.replace(newCondition);
    PyStatementList stList=((PyIfStatement)firstStatement).getIfPart().getStatementList();
    PyStatementList ifStatementList=ifStatement.getIfPart().getStatementList();
    if (ifStatementList == null || stList == null)     return;
    List<PsiComment> comments=PsiTreeUtil.getChildrenOfTypeAsList(ifStatement.getIfPart(),PsiComment.class);
    comments.addAll(PsiTreeUtil.getChildrenOfTypeAsList(((PyIfStatement)firstStatement).getIfPart(),PsiComment.class));
    comments.addAll(PsiTreeUtil.getChildrenOfTypeAsList(ifStatementList,PsiComment.class));
    comments.addAll(PsiTreeUtil.getChildrenOfTypeAsList(stList,PsiComment.class));
    for (    PsiElement comm : comments) {
      ifStatement.getIfPart().addBefore(comm,ifStatementList);
      comm.delete();
    }
    ifStatementList.replace(stList);
  }
}
