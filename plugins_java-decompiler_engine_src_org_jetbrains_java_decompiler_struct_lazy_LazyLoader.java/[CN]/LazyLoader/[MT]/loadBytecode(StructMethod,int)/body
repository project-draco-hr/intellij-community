{
  String className=mt.getClassStruct().qualifiedName;
  try {
    DataInputFullStream in=getClassStream(className);
    if (in == null)     return null;
    try {
      in.discard(8);
      ConstantPool pool=mt.getClassStruct().getPool();
      if (pool == null) {
        pool=new ConstantPool(in);
      }
 else {
        ConstantPool.skipPool(in);
      }
      in.discard(6);
      in.discard(in.readUnsignedShort() * 2);
      int size=in.readUnsignedShort();
      for (int i=0; i < size; i++) {
        in.discard(6);
        skipAttributes(in);
      }
      size=in.readUnsignedShort();
      for (int i=0; i < size; i++) {
        in.discard(2);
        int nameIndex=in.readUnsignedShort();
        int descriptorIndex=in.readUnsignedShort();
        String[] values=pool.getClassElement(ConstantPool.METHOD,className,nameIndex,descriptorIndex);
        if (!mt.getName().equals(values[0]) || !mt.getDescriptor().equals(values[1])) {
          skipAttributes(in);
          continue;
        }
        int attrSize=in.readUnsignedShort();
        for (int j=0; j < attrSize; j++) {
          int attrNameIndex=in.readUnsignedShort();
          String attrName=pool.getPrimitiveConstant(attrNameIndex).getString();
          if (!StructGeneralAttribute.ATTRIBUTE_CODE.equals(attrName)) {
            in.discard(in.readInt());
            continue;
          }
          in.discard(12);
          byte[] code=new byte[codeFullLength];
          in.readFull(code);
          return code;
        }
        break;
      }
    }
  finally {
      in.close();
    }
    return null;
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
}
