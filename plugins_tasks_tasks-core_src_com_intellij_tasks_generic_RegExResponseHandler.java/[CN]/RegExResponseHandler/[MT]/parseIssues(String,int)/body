{
  final List<String> placeholders=getPlaceholders(myTaskRegex);
  if (!placeholders.contains(ID_PLACEHOLDER) || !placeholders.contains(SUMMARY_PLACEHOLDER)) {
    throw new Exception("Incorrect Task Pattern");
  }
  final String taskPatternWithoutPlaceholders=myTaskRegex.replaceAll("\\{.+?\\}","");
  Matcher matcher=Pattern.compile(taskPatternWithoutPlaceholders,Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL| Pattern.UNICODE_CASE| Pattern.CANON_EQ).matcher(response);
  List<Task> tasks=new ArrayList<>();
  for (int i=0; i < max && matcher.find(); i++) {
    String id=matcher.group(placeholders.indexOf(ID_PLACEHOLDER) + 1);
    String summary=matcher.group(placeholders.indexOf(SUMMARY_PLACEHOLDER) + 1);
    final String finalSummary=summary;
    summary=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
      @Override public String compute(){
        XmlElementFactory factory=XmlElementFactory.getInstance(ProjectManager.getInstance().getDefaultProject());
        XmlTag text=factory.createTagFromText("<a>" + finalSummary + "</a>");
        String trimmedText=text.getValue().getTrimmedText();
        return XmlUtil.decode(trimmedText);
      }
    }
);
    tasks.add(new GenericTask(id,summary,myRepository));
  }
  return tasks.toArray(new Task[tasks.size()]);
}
