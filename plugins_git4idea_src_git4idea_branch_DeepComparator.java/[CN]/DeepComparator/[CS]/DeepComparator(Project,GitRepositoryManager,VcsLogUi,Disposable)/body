{
  myProject=project;
  myRepositoryManager=manager;
  myUi=ui;
  Disposer.register(parent,this);
  myLogListener=new VcsLogListener(){
    @Override public void onChange(    @NotNull VcsLogDataPack dataPack,    boolean refreshHappened){
      if (myTask == null) {
        return;
      }
      if (refreshHappened) {
        String comparedBranch=myTask.myComparedBranch;
        Map<GitRepository,GitBranch> repositoriesWithCurrentBranches=myTask.myRepositoriesWithCurrentBranches;
        VcsLogDataProvider provider=myTask.myProvider;
        stopAndUnhighlight();
        Map<GitRepository,GitBranch> repositories=getRepositories(myUi.getDataPack().getLogProviders(),comparedBranch);
        if (repositories.equals(repositoriesWithCurrentBranches)) {
          highlightInBackground(comparedBranch,provider);
        }
      }
 else {
        VcsLogBranchFilter branchFilter=myUi.getFilterUi().getFilters().getBranchFilter();
        if (branchFilter == null || branchFilter.getBranchNames().size() != 1 || !branchFilter.getBranchNames().iterator().next().equals(myTask.myComparedBranch)) {
          stopAndUnhighlight();
        }
      }
    }
  }
;
  myUi.addLogListener(myLogListener);
}
