{
  myProject=project;
  myRepositoryManager=manager;
  myUi=ui;
  Disposer.register(parent,this);
  myFilterChangeListener=new VcsLogFilterChangeListener(){
    @Override public void filtersPossiblyChanged(){
      if (myTask == null) {
        return;
      }
      VcsLogBranchFilter branchFilter=myUi.getFilterUi().getFilters().getBranchFilter();
      if (branchFilter == null || branchFilter.getBranchNames().size() != 1 || !branchFilter.getBranchNames().iterator().next().equals(myTask.myComparedBranch)) {
        stopAndUnhighlight();
      }
    }
  }
;
  myUi.addFilterChangeListener(myFilterChangeListener);
  project.getMessageBus().connect(project).subscribe(VcsLogDataHolder.REFRESH_COMPLETED,new VcsLogRefreshListener(){
    @Override public void refresh(    @NotNull DataPack dataPack){
      if (myTask == null) {
        return;
      }
      String comparedBranch=myTask.myComparedBranch;
      Map<GitRepository,GitBranch> repositoriesWithCurrentBranches=myTask.myRepositoriesWithCurrentBranches;
      VcsLogDataProvider provider=myTask.myProvider;
      stopAndUnhighlight();
      Map<GitRepository,GitBranch> repositories=getRepositories(dataPack.getLogProviders(),comparedBranch);
      if (repositories.equals(repositoriesWithCurrentBranches)) {
        highlightInBackground(comparedBranch,provider);
      }
    }
  }
);
}
