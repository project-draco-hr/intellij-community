{
  try {
    MavenServerExecutionResult result=embedder.resolveProject(file,explicitProfiles.getEnabledProfiles(),explicitProfiles.getDisabledProfiles());
    MavenServerExecutionResult.ProjectData projectData=result.projectData;
    if (projectData == null) {
      MavenProjectReaderResult temp=readProject(generalSettings,file,explicitProfiles,locator);
      temp.readingProblems.addAll(result.problems);
      temp.unresolvedArtifactIds.addAll(result.unresolvedArtifacts);
      return temp;
    }
    return new MavenProjectReaderResult(projectData.mavenModel,projectData.mavenModelMap,new MavenExplicitProfiles(projectData.activatedProfiles,explicitProfiles.getDisabledProfiles()),projectData.nativeMavenProject,result.problems,result.unresolvedArtifacts);
  }
 catch (  MavenProcessCanceledException e) {
    throw e;
  }
catch (  Throwable e) {
    MavenLog.LOG.info(e);
    MavenLog.printInTests(e);
    MavenProjectReaderResult result=readProject(generalSettings,file,explicitProfiles,locator);
    String message=e.getMessage();
    if (message != null) {
      result.readingProblems.add(MavenProjectProblem.createStructureProblem(file.getPath(),message));
    }
 else {
      result.readingProblems.add(MavenProjectProblem.createSyntaxProblem(file.getPath(),MavenProjectProblem.ProblemType.SYNTAX));
    }
    return result;
  }
}
