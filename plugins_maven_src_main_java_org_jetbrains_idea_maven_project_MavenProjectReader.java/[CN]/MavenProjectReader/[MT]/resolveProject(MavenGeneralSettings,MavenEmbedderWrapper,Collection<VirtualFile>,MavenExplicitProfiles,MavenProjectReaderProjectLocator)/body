{
  try {
    Collection<MavenServerExecutionResult> executionResults=embedder.resolveProject(files,explicitProfiles.getEnabledProfiles(),explicitProfiles.getDisabledProfiles());
    Collection<MavenProjectReaderResult> readerResults=ContainerUtil.newArrayList();
    for (    MavenServerExecutionResult result : executionResults) {
      MavenServerExecutionResult.ProjectData projectData=result.projectData;
      if (projectData == null) {
        if (files.size() == 1) {
          final VirtualFile file=files.iterator().next();
          MavenProjectReaderResult temp=readProject(generalSettings,file,explicitProfiles,locator);
          temp.readingProblems.addAll(result.problems);
          temp.unresolvedArtifactIds.addAll(result.unresolvedArtifacts);
          readerResults.add(temp);
        }
      }
 else {
        readerResults.add(new MavenProjectReaderResult(projectData.mavenModel,projectData.mavenModelMap,new MavenExplicitProfiles(projectData.activatedProfiles,explicitProfiles.getDisabledProfiles()),projectData.nativeMavenProject,result.problems,result.unresolvedArtifacts));
      }
    }
    return readerResults;
  }
 catch (  MavenProcessCanceledException e) {
    throw e;
  }
catch (  final Throwable e) {
    MavenLog.LOG.info(e);
    MavenLog.printInTests(e);
    return ContainerUtil.mapNotNull(files,new Function<VirtualFile,MavenProjectReaderResult>(){
      @Override public MavenProjectReaderResult fun(      VirtualFile file){
        MavenProjectReaderResult result=readProject(generalSettings,file,explicitProfiles,locator);
        String message=e.getMessage();
        if (message != null) {
          result.readingProblems.add(MavenProjectProblem.createStructureProblem(file.getPath(),message));
        }
 else {
          result.readingProblems.add(MavenProjectProblem.createSyntaxProblem(file.getPath(),MavenProjectProblem.ProblemType.SYNTAX));
        }
        return result;
      }
    }
);
  }
}
