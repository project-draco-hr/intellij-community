{
  final IComponentStore stateStore=ComponentsPackage.getStateStore(this);
  TrackingPathMacroSubstitutor[] substitutors=stateStore instanceof IProjectStore ? ((IProjectStore)stateStore).getSubstitutors() : new TrackingPathMacroSubstitutor[]{};
  Set<String> unknownMacros=new THashSet<String>();
  for (  TrackingPathMacroSubstitutor substitutor : substitutors) {
    unknownMacros.addAll(substitutor.getUnknownMacros(null));
  }
  if (unknownMacros.isEmpty() || showDialog && !ProjectMacrosUtil.checkMacros(this,new THashSet<String>(unknownMacros))) {
    return;
  }
  final PathMacros pathMacros=PathMacros.getInstance();
  final Set<String> macrosToInvalidate=new THashSet<String>(unknownMacros);
  for (Iterator<String> it=macrosToInvalidate.iterator(); it.hasNext(); ) {
    String macro=it.next();
    if (StringUtil.isEmptyOrSpaces(pathMacros.getValue(macro)) && !pathMacros.isIgnoredMacroName(macro)) {
      it.remove();
    }
  }
  if (!macrosToInvalidate.isEmpty()) {
    final Set<String> components=new THashSet<String>();
    for (    TrackingPathMacroSubstitutor substitutor : substitutors) {
      components.addAll(substitutor.getComponents(macrosToInvalidate));
    }
    if (stateStore.isReloadPossible(components)) {
      for (      TrackingPathMacroSubstitutor substitutor : substitutors) {
        substitutor.invalidateUnknownMacros(macrosToInvalidate);
      }
      for (      UnknownMacroNotification notification : NotificationsManager.getNotificationsManager().getNotificationsOfType(UnknownMacroNotification.class,this)) {
        if (macrosToInvalidate.containsAll(notification.getMacros())) {
          notification.expire();
        }
      }
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          stateStore.reinitComponents(components,true);
        }
      }
);
    }
 else {
      if (Messages.showYesNoDialog(this,"Component could not be reloaded. Reload project?","Configuration Changed",Messages.getQuestionIcon()) == Messages.YES) {
        ProjectManagerEx.getInstanceEx().reloadProject(this);
      }
    }
  }
}
