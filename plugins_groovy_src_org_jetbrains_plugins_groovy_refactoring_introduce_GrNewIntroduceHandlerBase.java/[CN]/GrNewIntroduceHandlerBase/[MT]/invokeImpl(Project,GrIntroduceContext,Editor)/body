{
  try {
    if (!CommonRefactoringUtil.checkReadOnlyStatus(project,context.getOccurrences())) {
      return false;
    }
    checkOccurrences(context.getOccurrences());
    if (isInplace(context.getEditor(),context.getPlace())) {
      Map<OccurrencesChooser.ReplaceChoice,List<Object>> occurrencesMap=fillChoice(context);
      new OccurrencesChooser<Object>(editor){
        @Override protected TextRange getOccurrenceRange(        Object occurrence){
          if (occurrence instanceof PsiElement) {
            return ((PsiElement)occurrence).getTextRange();
          }
 else           if (occurrence instanceof StringPartInfo) {
            return ((StringPartInfo)occurrence).getRange();
          }
 else {
            return null;
          }
        }
      }
.showChooser(new Pass<OccurrencesChooser.ReplaceChoice>(){
        @Override public void pass(        final OccurrencesChooser.ReplaceChoice choice){
          getIntroducer(context,choice).startInplaceIntroduceTemplate();
        }
      }
,occurrencesMap);
    }
 else {
      final Settings settings=showDialog(context);
      if (settings == null)       return false;
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          runRefactoring(context,settings);
        }
      }
);
    }
    return true;
  }
 catch (  GrRefactoringError e) {
    CommonRefactoringUtil.showErrorHint(project,editor,RefactoringBundle.getCannotRefactorMessage(e.getMessage()),getRefactoringName(),getHelpID());
    return false;
  }
}
