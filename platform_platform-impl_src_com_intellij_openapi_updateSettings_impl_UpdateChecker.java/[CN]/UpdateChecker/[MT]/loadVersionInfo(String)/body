{
  final Ref<URLConnection> connectionRef=Ref.create();
  final Ref<Exception> exception=Ref.create();
  Future<?> downloadThreadFuture=ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      try {
        String urlToCheck;
        if (!StandardFileSystems.FILE_PROTOCOL.equals(new URL(url).getProtocol())) {
          urlToCheck=url + (url.contains("?") ? "&" : "?") + "build="+ ApplicationInfo.getInstance().getBuild().asString();
        }
 else {
          urlToCheck=url;
        }
        URLConnection connection=HttpRequests.openConnection(urlToCheck,true).first;
        connection.connect();
        connectionRef.set(connection);
      }
 catch (      IOException e) {
        exception.set(e);
      }
    }
  }
);
  try {
    downloadThreadFuture.get(5,TimeUnit.SECONDS);
  }
 catch (  TimeoutException ignored) {
  }
  if (!downloadThreadFuture.isDone()) {
    downloadThreadFuture.cancel(true);
    throw new ConnectionException(IdeBundle.message("updates.timeout.error"));
  }
  if (!exception.isNull()) {
    throw exception.get();
  }
  return connectionRef.get();
}
