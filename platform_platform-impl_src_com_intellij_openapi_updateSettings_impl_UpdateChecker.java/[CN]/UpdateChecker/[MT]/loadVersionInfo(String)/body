{
  final InputStream[] inputStreams=new InputStream[]{null};
  final Exception[] exception=new Exception[]{null};
  Future<?> downloadThreadFuture=ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    public void run(){
      try {
        final String urlToCheck;
        if (!StandardFileSystems.FILE_PROTOCOL.equals(new URL(url).getProtocol())) {
          urlToCheck=url + (url.contains("?") ? "&" : "?") + "build="+ ApplicationInfo.getInstance().getBuild().asString();
        }
 else {
          urlToCheck=url;
        }
        URLConnection connection;
        if (ApplicationManager.getApplication() != null) {
          connection=HttpConfigurable.getInstance().openConnection(urlToCheck);
        }
 else {
          connection=new URL(urlToCheck).openConnection();
          connection.setReadTimeout(HttpConfigurable.CONNECTION_TIMEOUT);
          connection.setConnectTimeout(HttpConfigurable.CONNECTION_TIMEOUT);
        }
        connection.connect();
        inputStreams[0]=connection.getInputStream();
      }
 catch (      IOException e) {
        exception[0]=e;
      }
    }
  }
);
  try {
    downloadThreadFuture.get(5,TimeUnit.SECONDS);
  }
 catch (  TimeoutException ignored) {
  }
  if (!downloadThreadFuture.isDone()) {
    downloadThreadFuture.cancel(true);
    throw new ConnectionException(IdeBundle.message("updates.timeout.error"));
  }
  if (exception[0] != null)   throw exception[0];
  return inputStreams[0];
}
