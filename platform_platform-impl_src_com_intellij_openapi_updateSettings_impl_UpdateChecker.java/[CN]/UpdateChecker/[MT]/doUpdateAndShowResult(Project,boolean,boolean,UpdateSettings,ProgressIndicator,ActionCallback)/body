{
  if (indicator != null) {
    indicator.setText(IdeBundle.message("updates.checking.platform"));
  }
  final CheckForUpdateResult result=checkPlatformUpdate(updateSettings);
  if (manualCheck && result.getState() == UpdateStrategy.State.LOADED) {
    UpdateSettings settings=UpdateSettings.getInstance();
    settings.saveLastCheckedInfo();
    settings.setKnownChannelIds(result.getAllChannelsIds());
  }
 else   if (result.getState() == UpdateStrategy.State.CONNECTION_ERROR) {
    Exception e=result.getError();
    if (e != null)     LOG.warn(e);
    showErrorMessage(manualCheck,IdeBundle.message(e instanceof InterruptedIOException ? "updates.timeout.error" : "updates.error.connection.failed"));
    return;
  }
  if (indicator != null) {
    indicator.setText(IdeBundle.message("updates.checking.plugins"));
  }
  final Collection<PluginDownloader> updatedPlugins;
  final Collection<IdeaPluginDescriptor> incompatiblePlugins;
  if (newChannelReady(result.getChannelToPropose())) {
    updatedPlugins=null;
    incompatiblePlugins=null;
  }
 else {
    BuildNumber buildNumber=null;
    UpdateChannel updatedChannel=result.getUpdatedChannel();
    if (updatedChannel != null) {
      BuildInfo latestBuild=updatedChannel.getLatestBuild();
      if (latestBuild != null) {
        buildNumber=latestBuild.getNumber();
      }
    }
    incompatiblePlugins=buildNumber != null ? new HashSet<IdeaPluginDescriptor>() : null;
    updatedPlugins=checkPluginsUpdate(manualCheck,indicator,incompatiblePlugins,buildNumber);
  }
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      showUpdateResult(project,result,updatedPlugins,incompatiblePlugins,enableLink,manualCheck);
      if (callback != null) {
        callback.setDone();
      }
    }
  }
);
}
