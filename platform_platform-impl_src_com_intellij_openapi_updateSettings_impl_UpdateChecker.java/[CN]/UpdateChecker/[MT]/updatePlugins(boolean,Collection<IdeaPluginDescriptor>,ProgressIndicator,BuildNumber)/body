{
  final Map<PluginId,PluginDownloader> downloaded=new HashMap<PluginId,PluginDownloader>();
  final Set<String> failed=new HashSet<String>();
  for (  String host : getPluginHosts()) {
    try {
      checkPluginsHost(host,downloaded,incompatiblePlugins,true,indicator,buildNumber);
    }
 catch (    ProcessCanceledException e) {
      return null;
    }
catch (    Exception e) {
      LOG.info(e);
      failed.add(host);
    }
  }
  final Map<String,IdeaPluginDescriptor> toUpdate=new HashMap<String,IdeaPluginDescriptor>();
  final IdeaPluginDescriptor[] installedPlugins=PluginManagerCore.getPlugins();
  for (  IdeaPluginDescriptor installedPlugin : installedPlugins) {
    if (!installedPlugin.isBundled()) {
      toUpdate.put(installedPlugin.getPluginId().getIdString(),installedPlugin);
    }
  }
  for (Iterator<PluginId> iterator=downloaded.keySet().iterator(); iterator.hasNext(); ) {
    if (!toUpdate.containsKey(iterator.next().getIdString())) {
      iterator.remove();
    }
  }
  final File installedTxt=new File(PathManager.getConfigPath(),PluginManager.INSTALLED_TXT);
  if (installedTxt.isFile()) {
    try {
      final String oldInstalledPlugins=FileUtil.loadFile(installedTxt);
      for (      String pluginId : oldInstalledPlugins.trim().split("\n")) {
        if (!toUpdate.containsKey(pluginId))         toUpdate.put(pluginId.trim(),null);
      }
    }
 catch (    IOException e) {
      LOG.error(e);
    }
    installedTxt.deleteOnExit();
  }
  UpdateSettings.getInstance().myOutdatedPlugins.clear();
  if (!toUpdate.isEmpty()) {
    try {
      final List<IdeaPluginDescriptor> process=RepositoryHelper.loadPluginsFromRepository(indicator,buildNumber);
      for (      IdeaPluginDescriptor loadedPlugin : process) {
        final PluginId pluginId=loadedPlugin.getPluginId();
        final String idString=pluginId.getIdString();
        if (!toUpdate.containsKey(idString))         continue;
        if (!downloaded.containsKey(pluginId)) {
          prepareToInstall(PluginDownloader.createDownloader(loadedPlugin,buildNumber),buildNumber,downloaded,incompatiblePlugins,true,indicator);
        }
      }
    }
 catch (    ProcessCanceledException ignore) {
      return null;
    }
catch (    Exception e) {
      showErrorMessage(manualCheck,e.getMessage());
    }
  }
  if (!failed.isEmpty()) {
    LOG.warn(IdeBundle.message("updates.error.plugin.description.failed",StringUtil.join(failed,",")));
  }
  return downloaded.isEmpty() ? null : downloaded.values();
}
