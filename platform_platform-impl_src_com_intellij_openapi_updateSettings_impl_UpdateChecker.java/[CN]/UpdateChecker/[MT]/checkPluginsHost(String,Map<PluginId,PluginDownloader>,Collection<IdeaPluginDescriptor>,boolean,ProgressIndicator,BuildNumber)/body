{
  final Document document;
  try {
    document=JDOMUtil.loadDocument(RepositoryHelper.getConnectionInputStream(loadVersionInfo(host)));
  }
 catch (  JDOMException e) {
    return false;
  }
  final List<IdeaPluginDescriptor> descriptors=RepositoryHelper.loadPluginsFromDescription(loadVersionInfo(host),indicator);
  for (  IdeaPluginDescriptor descriptor : descriptors) {
    ((PluginNode)descriptor).setRepositoryName(host);
    prepareToInstall(PluginDownloader.createDownloader(descriptor,buildNumber),buildNumber,downloaded,incompatiblePlugins,collectToUpdate,indicator);
  }
  boolean success=true;
  for (  Object plugin : document.getRootElement().getChildren("plugin")) {
    final Element pluginElement=(Element)plugin;
    final String pluginId=pluginElement.getAttributeValue("id");
    final String pluginUrl=pluginElement.getAttributeValue("url");
    final String pluginVersion=pluginElement.getAttributeValue("version");
    final Element descriptionElement=pluginElement.getChild("description");
    final String description;
    if (descriptionElement != null) {
      description=descriptionElement.getText();
    }
 else {
      description=null;
    }
    final List<PluginId> dependsPlugins=new ArrayList<PluginId>();
    final List depends=pluginElement.getChildren("depends");
    for (    Object depend : depends) {
      dependsPlugins.add(PluginId.getId(((Element)depend).getText()));
    }
    if (pluginId == null) {
      LOG.info("plugin id should not be null");
      success=false;
      continue;
    }
    if (pluginUrl == null) {
      LOG.info("plugin url should not be null");
      success=false;
      continue;
    }
    final VirtualFile pluginFile=PluginDownloader.findPluginFile(pluginUrl,host);
    if (pluginFile == null)     continue;
    if (collectToUpdate) {
      final String finalPluginUrl=getPluginUrl(pluginFile);
      if (ApplicationManager.getApplication().isDispatchThread()) {
        ProgressManager.getInstance().run(new Task.Modal(null,IdeBundle.message("update.uploading.plugin.progress.title"),true){
          @Override public void run(          @NotNull ProgressIndicator indicator){
            updatePlugins(finalPluginUrl,pluginId,pluginVersion,buildNumber,downloaded,incompatiblePlugins,true,indicator);
          }
        }
);
      }
 else {
        updatePlugins(finalPluginUrl,pluginId,pluginVersion,buildNumber,downloaded,incompatiblePlugins,true,indicator);
      }
    }
 else {
      final PluginDownloader downloader=new PluginDownloader(pluginId,pluginUrl,pluginVersion);
      downloader.setDescription(description);
      downloader.setDepends(dependsPlugins);
      downloaded.put(PluginId.getId(pluginId),downloader);
    }
  }
  return success;
}
