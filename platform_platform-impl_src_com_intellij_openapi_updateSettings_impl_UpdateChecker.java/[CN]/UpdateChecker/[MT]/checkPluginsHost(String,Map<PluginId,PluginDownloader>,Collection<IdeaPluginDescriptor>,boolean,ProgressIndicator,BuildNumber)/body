{
  String url;
  if (StandardFileSystems.FILE_PROTOCOL.equals(new URL(host).getProtocol())) {
    url=host;
  }
 else {
    url=host + (host.contains("?") ? '&' : '?') + "build="+ ApplicationInfo.getInstance().getBuild().asString();
  }
  BufferExposingByteArrayOutputStream bytes=HttpRequests.request(url).get(new ThrowableConvertor<URLConnection,BufferExposingByteArrayOutputStream,Exception>(){
    @Override public BufferExposingByteArrayOutputStream convert(    URLConnection connection) throws Exception {
      InputStream input=HttpRequests.getInputStream(connection);
      try {
        BufferExposingByteArrayOutputStream output=new BufferExposingByteArrayOutputStream();
        try {
          NetUtils.copyStreamContent(indicator,input,output,connection.getContentLength());
        }
  finally {
          output.close();
        }
        return output;
      }
  finally {
        input.close();
      }
    }
  }
);
  ByteArrayInputStream inputStream=new ByteArrayInputStream(bytes.getInternalBuffer(),0,bytes.size());
  final Document document;
  try {
    document=JDOMUtil.loadDocument(inputStream);
  }
 catch (  JDOMException e) {
    return false;
  }
 finally {
    inputStream.reset();
  }
  SAXParser parser=SAXParserFactory.newInstance().newSAXParser();
  RepositoryContentHandler handler=new RepositoryContentHandler();
  parser.parse(inputStream,handler);
  for (  IdeaPluginDescriptor descriptor : handler.getPluginsList()) {
    ((PluginNode)descriptor).setRepositoryName(host);
    prepareToInstall(PluginDownloader.createDownloader(descriptor,buildNumber),buildNumber,downloaded,incompatiblePlugins,collectToUpdate,indicator);
  }
  boolean success=true;
  for (  Element pluginElement : document.getRootElement().getChildren("plugin")) {
    final String pluginId=pluginElement.getAttributeValue("id");
    String pluginUrl=pluginElement.getAttributeValue("url");
    final String pluginVersion=pluginElement.getAttributeValue("version");
    Element descriptionElement=pluginElement.getChild("description");
    String description=descriptionElement != null ? descriptionElement.getText() : null;
    List<PluginId> dependsPlugins=new SmartList<PluginId>();
    for (    Element depend : pluginElement.getChildren("depends")) {
      dependsPlugins.add(PluginId.getId(depend.getText()));
    }
    if (pluginId == null) {
      LOG.info("plugin id should not be null");
      success=false;
      continue;
    }
    if (pluginUrl == null) {
      LOG.info("plugin url should not be null");
      success=false;
      continue;
    }
    VirtualFile pluginFile=PluginDownloader.findPluginFile(pluginUrl,host);
    if (pluginFile == null) {
      continue;
    }
    if (collectToUpdate) {
      final String finalPluginUrl=getPluginUrl(pluginFile);
      if (ApplicationManager.getApplication().isDispatchThread()) {
        ProgressManager.getInstance().run(new Task.Modal(null,IdeBundle.message("update.uploading.plugin.progress.title"),true){
          @Override public void run(          @NotNull ProgressIndicator indicator){
            updatePlugins(finalPluginUrl,pluginId,pluginVersion,buildNumber,downloaded,incompatiblePlugins,true,indicator);
          }
        }
);
      }
 else {
        updatePlugins(finalPluginUrl,pluginId,pluginVersion,buildNumber,downloaded,incompatiblePlugins,true,indicator);
      }
    }
 else {
      final PluginDownloader downloader=new PluginDownloader(pluginId,pluginUrl,pluginVersion);
      downloader.setDescription(description);
      downloader.setDepends(dependsPlugins);
      downloaded.put(PluginId.getId(pluginId),downloader);
    }
  }
  return success;
}
