{
  final String pluginId=downloader.getPluginId();
  final String pluginVersion=downloader.getPluginVersion();
  final List<String> disabledPlugins=PluginManagerCore.getDisabledPlugins();
  if (disabledPlugins.contains(pluginId))   return;
  final IdeaPluginDescriptor installedPlugin=PluginManager.getPlugin(PluginId.getId(pluginId));
  if (installedPlugin == null || pluginVersion == null || PluginDownloader.compareVersionsSkipBroken(installedPlugin,pluginVersion) > 0) {
    IdeaPluginDescriptor descriptor=null;
    if (isReadyToUpdate(pluginId,pluginVersion)) {
      descriptor=downloader.getDescriptor();
      if (descriptor == null) {
        if (downloader.prepareToInstall(indicator,buildNumber)) {
          descriptor=downloader.getDescriptor();
        }
        ourUpdatedPlugins.put(pluginId,downloader);
      }
    }
 else {
      final PluginDownloader oldDownloader=ourUpdatedPlugins.get(pluginId);
      if (oldDownloader != null) {
        downloader=oldDownloader;
        descriptor=oldDownloader.getDescriptor();
      }
    }
    if (descriptor != null && !PluginManagerCore.isIncompatible(descriptor,buildNumber) && !InstalledPluginsTableModel.wasUpdated(descriptor.getPluginId())) {
      downloaded.put(PluginId.getId(pluginId),downloader);
    }
  }
  if (incompatiblePlugins != null && installedPlugin != null && installedPlugin.isEnabled() && !downloaded.containsKey(installedPlugin.getPluginId()) && PluginManagerCore.isIncompatible(installedPlugin,buildNumber)) {
    incompatiblePlugins.add(installedPlugin);
  }
}
