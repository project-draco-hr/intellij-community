{
  String pluginId=downloader.getPluginId();
  if (PluginManagerCore.getDisabledPlugins().contains(pluginId))   return;
  String pluginVersion=downloader.getPluginVersion();
  IdeaPluginDescriptor installedPlugin=PluginManager.getPlugin(PluginId.getId(pluginId));
  if (installedPlugin == null || pluginVersion == null || PluginDownloader.compareVersionsSkipBroken(installedPlugin,pluginVersion) > 0) {
    IdeaPluginDescriptor descriptor;
    PluginDownloader oldDownloader=ourUpdatedPlugins.get(pluginId);
    if (oldDownloader == null || StringUtil.compareVersionNumbers(pluginVersion,oldDownloader.getPluginVersion()) > 0) {
      descriptor=downloader.getDescriptor();
      if (descriptor instanceof PluginNode && ((PluginNode)descriptor).isIncomplete()) {
        if (downloader.prepareToInstall(indicator == null ? new EmptyProgressIndicator() : indicator)) {
          descriptor=downloader.getDescriptor();
        }
        ourUpdatedPlugins.put(pluginId,downloader);
      }
    }
 else {
      downloader=oldDownloader;
      descriptor=oldDownloader.getDescriptor();
    }
    if (descriptor != null && !PluginManagerCore.isIncompatible(descriptor,downloader.getBuildNumber()) && !state.wasUpdated(descriptor.getPluginId())) {
      toUpdate.put(PluginId.getId(pluginId),downloader);
    }
  }
  if (incompatiblePlugins != null && installedPlugin != null && installedPlugin.isEnabled() && !toUpdate.containsKey(installedPlugin.getPluginId()) && PluginManagerCore.isIncompatible(installedPlugin,downloader.getBuildNumber())) {
    incompatiblePlugins.add(installedPlugin);
  }
}
