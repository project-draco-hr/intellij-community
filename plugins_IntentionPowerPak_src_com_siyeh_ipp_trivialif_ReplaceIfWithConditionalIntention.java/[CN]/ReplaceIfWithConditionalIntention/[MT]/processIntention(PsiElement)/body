{
  final PsiIfStatement ifStatement=(PsiIfStatement)element.getParent();
  if (ifStatement == null) {
    return;
  }
  if (ReplaceIfWithConditionalPredicate.isReplaceableAssignment(ifStatement)) {
    final PsiExpression condition=ifStatement.getCondition();
    if (condition == null) {
      return;
    }
    final PsiStatement thenBranch=ifStatement.getThenBranch();
    final PsiExpressionStatement strippedThenBranch=(PsiExpressionStatement)ControlFlowUtils.stripBraces(thenBranch);
    final PsiStatement elseBranch=ifStatement.getElseBranch();
    final PsiExpressionStatement strippedElseBranch=(PsiExpressionStatement)ControlFlowUtils.stripBraces(elseBranch);
    final PsiAssignmentExpression thenAssign=(PsiAssignmentExpression)strippedThenBranch.getExpression();
    final PsiAssignmentExpression elseAssign=(PsiAssignmentExpression)strippedElseBranch.getExpression();
    final PsiExpression lhs=thenAssign.getLExpression();
    final String lhsText=lhs.getText();
    final PsiJavaToken sign=thenAssign.getOperationSign();
    final String operator=sign.getText();
    final PsiExpression thenRhs=thenAssign.getRExpression();
    if (thenRhs == null) {
      return;
    }
    final PsiExpression elseRhs=elseAssign.getRExpression();
    if (elseRhs == null) {
      return;
    }
    final String conditional=getConditionalText(condition,thenRhs,elseRhs,thenAssign.getType());
    replaceIfStatement(ifStatement,lhsText + operator + conditional+ ';');
  }
 else   if (ReplaceIfWithConditionalPredicate.isReplaceableReturn(ifStatement)) {
    final PsiExpression condition=ifStatement.getCondition();
    if (condition == null) {
      return;
    }
    final PsiStatement thenBranch=ifStatement.getThenBranch();
    final PsiReturnStatement thenReturn=(PsiReturnStatement)ControlFlowUtils.stripBraces(thenBranch);
    final PsiStatement elseBranch=ifStatement.getElseBranch();
    final PsiReturnStatement elseReturn=(PsiReturnStatement)ControlFlowUtils.stripBraces(elseBranch);
    final PsiExpression thenReturnValue=thenReturn.getReturnValue();
    if (thenReturnValue == null) {
      return;
    }
    final PsiExpression elseReturnValue=elseReturn.getReturnValue();
    if (elseReturnValue == null) {
      return;
    }
    final PsiMethod method=PsiTreeUtil.getParentOfType(thenReturn,PsiMethod.class);
    if (method == null) {
      return;
    }
    final PsiType returnType=method.getReturnType();
    final String conditional=getConditionalText(condition,thenReturnValue,elseReturnValue,returnType);
    replaceIfStatement(ifStatement,"return " + conditional + ';');
  }
 else   if (ReplaceIfWithConditionalPredicate.isReplaceableMethodCall(ifStatement)) {
    final PsiExpression condition=ifStatement.getCondition();
    if (condition == null) {
      return;
    }
    final PsiExpressionStatement thenBranch=(PsiExpressionStatement)ControlFlowUtils.stripBraces(ifStatement.getThenBranch());
    final PsiExpressionStatement elseBranch=(PsiExpressionStatement)ControlFlowUtils.stripBraces(ifStatement.getElseBranch());
    final PsiMethodCallExpression thenMethodCallExpression=(PsiMethodCallExpression)thenBranch.getExpression();
    final PsiMethodCallExpression elseMethodCallExpression=(PsiMethodCallExpression)elseBranch.getExpression();
    final StringBuilder replacementText=new StringBuilder(thenMethodCallExpression.getMethodExpression().getText());
    replacementText.append('(');
    final PsiExpressionList thenArgumentList=thenMethodCallExpression.getArgumentList();
    final PsiExpression[] thenArguments=thenArgumentList.getExpressions();
    final PsiExpressionList elseArgumentList=elseMethodCallExpression.getArgumentList();
    final PsiExpression[] elseArguments=elseArgumentList.getExpressions();
    for (int i=0, length=thenArguments.length; i < length; i++) {
      if (i > 0) {
        replacementText.append(',');
      }
      final PsiExpression thenArgument=thenArguments[i];
      final PsiExpression elseArgument=elseArguments[i];
      if (EquivalenceChecker.expressionsAreEquivalent(thenArgument,elseArgument)) {
        replacementText.append(thenArgument.getText());
      }
 else {
        final PsiMethod method=thenMethodCallExpression.resolveMethod();
        if (method == null) {
          return;
        }
        final PsiParameterList parameterList=method.getParameterList();
        final PsiType requiredType=parameterList.getParameters()[i].getType();
        final String conditionalText=getConditionalText(condition,thenArgument,elseArgument,requiredType);
        if (conditionalText == null) {
          return;
        }
        replacementText.append(conditionalText);
      }
    }
    replacementText.append(");");
    replaceIfStatement(ifStatement,replacementText.toString());
  }
 else   if (ReplaceIfWithConditionalPredicate.isReplaceableImplicitReturn(ifStatement)) {
    final PsiExpression condition=ifStatement.getCondition();
    if (condition == null) {
      return;
    }
    final PsiReturnStatement thenBranch=(PsiReturnStatement)ControlFlowUtils.stripBraces(ifStatement.getThenBranch());
    final PsiExpression thenReturnValue=thenBranch.getReturnValue();
    if (thenReturnValue == null) {
      return;
    }
    final PsiReturnStatement elseBranch=PsiTreeUtil.getNextSiblingOfType(ifStatement,PsiReturnStatement.class);
    if (elseBranch == null) {
      return;
    }
    final PsiExpression elseReturnValue=elseBranch.getReturnValue();
    if (elseReturnValue == null) {
      return;
    }
    final PsiMethod method=PsiTreeUtil.getParentOfType(thenBranch,PsiMethod.class);
    if (method == null) {
      return;
    }
    final PsiType methodType=method.getReturnType();
    final String conditional=getConditionalText(condition,thenReturnValue,elseReturnValue,methodType);
    if (conditional == null) {
      return;
    }
    replaceIfStatement(ifStatement,"return " + conditional + ';');
    elseBranch.delete();
  }
}
