{
  if (!detectStartRevision())   return -1;
  final Ref<Long> latest=new Ref<Long>(myStartNumber);
  SVNRepository repository=null;
  try {
    repository=myVcs.getSvnKitManager().createRepository(myUrl.toString());
    final SVNURL repRoot=repository.getRepositoryRoot(true);
    if (repRoot != null) {
      if (myEndNumber == -1) {
        myEndNumber=repository.getLatestRevision();
      }
      final SVNURL existingParent=getExistingParent(myUrl,repository,repRoot.toString().length());
      if (existingParent == null) {
        return myStartNumber;
      }
      final String urlRelativeString=myUrl.toString().substring(repRoot.toString().length());
      final SVNRevision startRevision=SVNRevision.create(myStartNumber);
      SvnTarget target=SvnTarget.fromURL(existingParent,startRevision);
      myVcs.getFactory(target).createHistoryClient().doLog(target,startRevision,SVNRevision.HEAD,false,true,false,0,null,createHandler(latest,urlRelativeString));
    }
  }
 catch (  SVNException e) {
    LOG.info(e);
  }
catch (  VcsException e) {
    LOG.info(e);
  }
 finally {
    if (repository != null) {
      repository.closeSession();
    }
  }
  return latest.get().longValue();
}
