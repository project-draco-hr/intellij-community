{
  if (processingAdaptersNow) {
    throw new IllegalStateException("Recursive processAdapters() detected. You must have called 'getExtensions()' from within your extension constructor - don't. Either pass extension via constructor parameter or call getExtensions() later.");
  }
  int totalSize=getExtensionAdaptersSize() + getLoadedAdaptersSize();
  if (totalSize == 0) {
    return null;
  }
  processingAdaptersNow=true;
  try {
    Class<T> extensionClass=getExtensionClass();
    @SuppressWarnings("unchecked") T[] result=(T[])Array.newInstance(extensionClass,totalSize);
    List<ExtensionComponentAdapter> adapters=ContainerUtil.newArrayListWithCapacity(totalSize);
    if (myExtensionAdapters != null) {
      adapters.addAll(myExtensionAdapters);
    }
    if (myLoadedAdapters != null) {
      adapters.addAll(myLoadedAdapters);
    }
    LoadingOrder.sort(adapters);
    myExtensionAdapters=new LinkedHashSet<ExtensionComponentAdapter>(adapters);
    Set<ExtensionComponentAdapter> loaded=ContainerUtil.newHashOrEmptySet(myLoadedAdapters);
    myLoadedAdapters=null;
    boolean errorHappened=false;
    for (int i=0; i < adapters.size(); i++) {
      ExtensionComponentAdapter adapter=adapters.get(i);
      try {
        @SuppressWarnings("unchecked") T extension=(T)adapter.getExtension();
        if (extension == null) {
          errorHappened=true;
          LOG.error("null extension in: " + adapter + ";\ngetExtensionClass(): "+ getExtensionClass()+ ";\n");
        }
        if (i > 0 && extension == result[i - 1]) {
          errorHappened=true;
          LOG.error("Duplicate extension found: " + extension + "; "+ " Adapter:      "+ adapter+ ";\n"+ " Prev adapter: "+ adapters.get(i - 1)+ ";\n"+ " getExtensionClass(): "+ getExtensionClass()+ ";\n"+ " result:"+ Arrays.asList(result));
        }
        if (!extensionClass.isInstance(extension)) {
          errorHappened=true;
          myOwner.error("Extension " + (extension == null ? null : extension.getClass()) + " does not implement "+ extensionClass+ ". It came from "+ adapter);
          continue;
        }
        result[i]=extension;
        registerExtension(extension,adapter,getLoadedAdaptersSize(),!loaded.contains(adapter));
      }
 catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      Exception e) {
        errorHappened=true;
        LOG.error(e);
      }
      myExtensionAdapters.remove(adapter);
    }
    myExtensionAdapters=null;
    if (errorHappened) {
      result=ContainerUtil.findAllAsArray(result,Condition.NOT_NULL);
    }
    return result;
  }
  finally {
    processingAdaptersNow=false;
  }
}
