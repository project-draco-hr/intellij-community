{
  final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  final PsiFile file=LangDataKeys.PSI_FILE.getData(dataContext);
  if (project == null)   return;
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final Editor editor=getEditor(dataContext);
  PsiElement element=getElement(project,file,editor,LangDataKeys.PSI_ELEMENT.getData(dataContext));
  if (element == null && file == null)   return;
  PsiFile containingFile=element != null ? element.getContainingFile() : file;
  if (containingFile == null || !containingFile.getViewProvider().isPhysical())   return;
  if (editor != null) {
    PsiReference ref=TargetElementUtilBase.findReference(editor,editor.getCaretModel().getOffset());
    if (element == null && ref != null) {
      element=TargetElementUtilBase.getInstance().adjustReference(ref);
    }
  }
  final NavigatablePsiElement[] superElements=(NavigatablePsiElement[])findSuperElements(element);
  if (superElements == null || superElements.length == 0)   return;
  final boolean isMethod=superElements[0] instanceof PsiMethod;
  final JBPopup popup=PsiElementListNavigator.navigateOrCreatePopup(superElements,"Choose super " + (isMethod ? "method" : "class or interface"),"Super " + (isMethod ? "methods" : "classes/interfaces"),isMethod ? new MethodCellRenderer(false) : new PsiClassListCellRenderer(),null,new Consumer<Object[]>(){
    @Override public void consume(    Object[] objects){
      showSiblings(invokedByShortcut,project,editor,file,editor != null,(PsiElement)objects[0]);
    }
  }
);
  if (popup != null) {
    if (editor != null) {
      popup.showInBestPositionFor(editor);
    }
 else {
      popup.showCenteredInCurrentWindow(project);
    }
  }
}
