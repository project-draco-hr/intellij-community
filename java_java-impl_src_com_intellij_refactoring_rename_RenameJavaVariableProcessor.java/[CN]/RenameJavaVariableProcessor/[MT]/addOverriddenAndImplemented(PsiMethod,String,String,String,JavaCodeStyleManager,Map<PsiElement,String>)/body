{
  addGetterOrSetterWithParameter(methodPrototype,newName,newPropertyName,oldParameterName,manager,allRenames);
  PsiMethod[] methods=methodPrototype.findDeepestSuperMethods();
  if (methods.length == 0) {
    methods=new PsiMethod[]{methodPrototype};
  }
  for (  PsiMethod method : methods) {
    OverridingMethodsSearch.search(method).forEach(new Processor<PsiMethod>(){
      public boolean process(      PsiMethod psiMethod){
        RenameProcessor.assertNonCompileElement(psiMethod);
        addGetterOrSetterWithParameter(psiMethod,newName,newPropertyName,oldParameterName,manager,allRenames);
        return true;
      }
    }
);
    addGetterOrSetterWithParameter(method,newName,newPropertyName,oldParameterName,manager,allRenames);
  }
}
