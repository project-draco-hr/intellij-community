{
  if (field.getContainingClass() == null)   return;
  if (field.hasModifierProperty(PsiModifier.PRIVATE))   return;
  final PsiClass containingClass=field.getContainingClass();
  Collection<PsiClass> inheritors=ClassInheritorsSearch.search(containingClass).findAll();
  for (  PsiClass inheritor : inheritors) {
    PsiField conflictingField=inheritor.findFieldByName(newName,false);
    if (conflictingField != null) {
      result.add(new SubmemberHidesMemberUsageInfo(conflictingField,field));
    }
 else {
      final PsiMember member=PsiTreeUtil.getParentOfType(inheritor,PsiMember.class);
      if (member != null) {
        final ArrayList<PsiVariable> variables=new ArrayList<>();
        ControlFlowUtil.collectOuterLocals(variables,inheritor,inheritor,member);
        for (        PsiVariable variable : variables) {
          if (newName.equals(variable.getName())) {
            result.add(new FieldHidesLocalUsageInfo(variable,field));
          }
        }
      }
    }
  }
}
