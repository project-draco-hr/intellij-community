{
  PsiClass aClass=field.getContainingClass();
  Project project=field.getProject();
  final JavaCodeStyleManager manager=JavaCodeStyleManager.getInstance(project);
  final String propertyName=manager.variableNameToPropertyName(field.getName(),VariableKind.FIELD);
  String newPropertyName=manager.variableNameToPropertyName(newName,VariableKind.FIELD);
  boolean isStatic=field.hasModifierProperty(PsiModifier.STATIC);
  PsiMethod[] getters=GetterSetterPrototypeProvider.findGetters(aClass,propertyName,isStatic);
  PsiMethod setter=PropertyUtil.findPropertySetter(aClass,propertyName,isStatic,false);
  boolean shouldRenameSetterParameter=false;
  if (setter != null) {
    String parameterName=manager.propertyNameToVariableName(propertyName,VariableKind.PARAMETER);
    PsiParameter setterParameter=setter.getParameterList().getParameters()[0];
    shouldRenameSetterParameter=parameterName.equals(setterParameter.getName());
  }
  if (getters != null) {
    List<PsiMethod> validGetters=new ArrayList<PsiMethod>();
    for (    PsiMethod getter : getters) {
      String newGetterName=GetterSetterPrototypeProvider.suggestNewGetterName(propertyName,newPropertyName,getter);
      String getterId=null;
      if (newGetterName == null) {
        getterId=getter.getName();
        newGetterName=PropertyUtil.suggestGetterName(newPropertyName,field.getType(),getterId);
      }
      if (newGetterName.equals(getterId)) {
        continue;
      }
 else {
        boolean valid=true;
        for (        PsiMethod method : getter.findDeepestSuperMethods()) {
          if (method instanceof PsiCompiledElement) {
            valid=false;
            break;
          }
        }
        if (!valid)         continue;
      }
      validGetters.add(getter);
    }
    getters=validGetters.isEmpty() ? null : validGetters.toArray(new PsiMethod[validGetters.size()]);
  }
  String newSetterName="";
  if (setter != null) {
    newSetterName=PropertyUtil.suggestSetterName(newPropertyName);
    final String newSetterParameterName=manager.propertyNameToVariableName(newPropertyName,VariableKind.PARAMETER);
    if (newSetterName.equals(setter.getName())) {
      setter=null;
      newSetterName=null;
      shouldRenameSetterParameter=false;
    }
 else     if (newSetterParameterName.equals(setter.getParameterList().getParameters()[0].getName())) {
      shouldRenameSetterParameter=false;
    }
 else {
      for (      PsiMethod method : setter.findDeepestSuperMethods()) {
        if (method instanceof PsiCompiledElement) {
          setter=null;
          shouldRenameSetterParameter=false;
          break;
        }
      }
    }
  }
  if ((getters != null || setter != null) && askToRenameAccesors(getters != null ? getters[0] : null,setter,newName,project)) {
    getters=null;
    setter=null;
    shouldRenameSetterParameter=false;
  }
  if (getters != null) {
    for (    PsiMethod getter : getters) {
      String newGetterName=GetterSetterPrototypeProvider.suggestNewGetterName(propertyName,newPropertyName,getter);
      if (newGetterName == null) {
        newGetterName=PropertyUtil.suggestGetterName(newPropertyName,field.getType(),getter.getName());
      }
      addOverriddenAndImplemented(getter,newGetterName,allRenames);
    }
  }
  if (setter != null) {
    addOverriddenAndImplemented(setter,newSetterName,allRenames);
  }
  if (shouldRenameSetterParameter) {
    PsiParameter parameter=setter.getParameterList().getParameters()[0];
    allRenames.put(parameter,manager.propertyNameToVariableName(newPropertyName,VariableKind.PARAMETER));
  }
}
