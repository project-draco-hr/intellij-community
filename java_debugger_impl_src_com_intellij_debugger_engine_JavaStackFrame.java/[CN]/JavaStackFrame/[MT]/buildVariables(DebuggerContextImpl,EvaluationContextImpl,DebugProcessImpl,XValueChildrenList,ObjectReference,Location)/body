{
  final Set<String> visibleLocals=new HashSet<String>();
  if (NodeRendererSettings.getInstance().getClassRenderer().SHOW_VAL_FIELDS_AS_LOCAL_VARIABLES) {
    if (thisObjectReference != null && debugProcess.getVirtualMachineProxy().canGetSyntheticAttribute()) {
      final ReferenceType thisRefType=thisObjectReference.referenceType();
      if (thisRefType instanceof ClassType && location != null && thisRefType.equals(location.declaringType()) && thisRefType.name().contains("$")) {
        for (        Field field : thisRefType.fields()) {
          if (DebuggerUtils.isSynthetic(field) && StringUtil.startsWith(field.name(),FieldDescriptorImpl.OUTER_LOCAL_VAR_FIELD_PREFIX)) {
            final FieldDescriptorImpl fieldDescriptor=myNodeManager.getFieldDescriptor(myDescriptor,thisObjectReference,field);
            children.add(JavaValue.create(fieldDescriptor,evaluationContext,myNodeManager));
            visibleLocals.add(fieldDescriptor.calcValueName());
          }
        }
      }
    }
  }
  boolean myAutoWatchMode=DebuggerSettings.getInstance().AUTO_VARIABLES_MODE;
  if (evaluationContext == null) {
    return;
  }
  final SourcePosition sourcePosition=debuggerContext.getSourcePosition();
  if (sourcePosition == null) {
    return;
  }
  try {
    if (!XDebuggerSettingsManager.getInstance().getDataViewSettings().isAutoExpressions() && !myAutoWatchMode) {
      superBuildVariables(evaluationContext,children);
    }
 else {
      final Map<String,LocalVariableProxyImpl> visibleVariables=getVisibleVariables(getStackFrameProxy());
      final Pair<Set<String>,Set<TextWithImports>> usedVars=ApplicationManager.getApplication().runReadAction(new Computable<Pair<Set<String>,Set<TextWithImports>>>(){
        @Override public Pair<Set<String>,Set<TextWithImports>> compute(){
          return findReferencedVars(ContainerUtil.union(visibleVariables.keySet(),visibleLocals),sourcePosition);
        }
      }
);
      if (myAutoWatchMode) {
        for (        String var : usedVars.first) {
          LocalVariableProxyImpl local=visibleVariables.get(var);
          if (local != null) {
            children.add(JavaValue.create(myNodeManager.getLocalVariableDescriptor(null,local),evaluationContext,myNodeManager));
          }
        }
      }
 else {
        superBuildVariables(evaluationContext,children);
      }
      final EvaluationContextImpl evalContextCopy=evaluationContext.createEvaluationContext(evaluationContext.getThisObject());
      evalContextCopy.setAutoLoadClasses(false);
      final Set<TextWithImports> extraVars=computeExtraVars(usedVars,sourcePosition,evaluationContext);
      addToChildrenFrom(extraVars,children,evaluationContext);
      addToChildrenFrom(usedVars.second,children,evalContextCopy);
    }
  }
 catch (  EvaluateException e) {
    if (e.getCause() instanceof AbsentInformationException) {
      children.add(new DummyMessageValueNode(MessageDescriptor.LOCAL_VARIABLES_INFO_UNAVAILABLE.getLabel(),XDebuggerUIConstants.INFORMATION_MESSAGE_ICON));
      try {
        for (        Map.Entry<DecompiledLocalVariable,Value> entry : LocalVariablesUtil.fetchValues(getStackFrameProxy(),debugProcess).entrySet()) {
          DecompiledLocalVariable var=entry.getKey();
          children.add(JavaValue.create(myNodeManager.getArgumentValueDescriptor(null,var.getSlot(),entry.getValue(),var.isParam(),var.getDisplayName()),evaluationContext,myNodeManager));
        }
      }
 catch (      Exception ex) {
        LOG.info(ex);
      }
    }
 else {
      throw e;
    }
  }
}
