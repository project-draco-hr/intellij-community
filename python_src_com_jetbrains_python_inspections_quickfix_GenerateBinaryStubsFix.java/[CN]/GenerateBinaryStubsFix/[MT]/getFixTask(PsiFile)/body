{
  final Project project=fileToRunTaskIn.getProject();
  final String folder=fileToRunTaskIn.getContainingDirectory().getVirtualFile().getCanonicalPath();
  return new Task.Backgroundable(project,"Generating skeletons for binary module",false){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      final List<String> assemblyRefs=new ReadAction<List<String>>(){
        @Override protected void run(        @NotNull Result<List<String>> result) throws Throwable {
          result.setResult(collectAssemblyReferences(fileToRunTaskIn));
        }
      }
.execute().getResultObject();
      try {
        final PySkeletonRefresher refresher=new PySkeletonRefresher(project,null,mySdk,null,null,folder);
        if (needBinaryList(myQualifiedName)) {
          if (!generateSkeletonsForList(refresher,indicator,folder))           return;
        }
 else {
          refresher.generateSkeleton(myQualifiedName,"",assemblyRefs,Consumer.EMPTY_CONSUMER);
        }
        final VirtualFile skeletonDir;
        skeletonDir=LocalFileSystem.getInstance().findFileByPath(refresher.getSkeletonsPath());
        if (skeletonDir != null) {
          skeletonDir.refresh(true,true);
        }
      }
 catch (      InvalidSdkException e) {
        LOG.error(e);
      }
    }
  }
;
}
