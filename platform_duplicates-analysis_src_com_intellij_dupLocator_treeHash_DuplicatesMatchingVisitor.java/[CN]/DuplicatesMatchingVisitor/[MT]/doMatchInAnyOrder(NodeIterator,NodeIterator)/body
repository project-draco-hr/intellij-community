{
  final List<PsiElement> elements1=new ArrayList<>();
  final List<PsiElement> elements2=new ArrayList<>();
  while (it1.hasNext()) {
    final PsiElement element=it1.current();
    if (element != null) {
      elements1.add(element);
    }
    it1.advance();
  }
  while (it2.hasNext()) {
    final PsiElement element=it2.current();
    if (element != null) {
      elements2.add(element);
    }
    it2.advance();
  }
  if (elements1.size() != elements2.size()) {
    return false;
  }
  final TIntObjectHashMap<List<PsiElement>> hash2element=new TIntObjectHashMap<>(elements1.size());
  for (  PsiElement element : elements1) {
    final TreeHashResult result=myTreeHasher.hash(element,null,myNodeSpecificHasher);
    if (result != null) {
      final int hash=result.getHash();
      List<PsiElement> list=hash2element.get(hash);
      if (list == null) {
        list=new ArrayList<>();
        hash2element.put(hash,list);
      }
      list.add(element);
    }
  }
  for (  PsiElement element : elements2) {
    final TreeHashResult result=myTreeHasher.hash(element,null,myNodeSpecificHasher);
    if (result != null) {
      final int hash=result.getHash();
      final List<PsiElement> list=hash2element.get(hash);
      if (list == null) {
        return false;
      }
      boolean found=false;
      for (Iterator<PsiElement> it=list.iterator(); it.hasNext(); ) {
        if (match(element,it.next())) {
          it.remove();
          found=true;
        }
      }
      if (!found) {
        return false;
      }
      if (list.size() == 0) {
        hash2element.remove(hash);
      }
    }
  }
  return hash2element.size() == 0;
}
