{
  final ProjectSdksModel model=PyConfigurableInterpreterList.getInstance(project).getModel();
  final String baseSdk=getBaseSdk(project);
  if (baseSdk != null) {
    final PyPackageManager packageManager=PyPackageManager.getInstance(new PyDetectedSdk(baseSdk));
    try {
      final String path=packageManager.createVirtualEnv(project.getBasePath() + "/.idea/VirtualEnvironment",false);
      AbstractCreateVirtualEnvDialog.setupVirtualEnvSdk(path,true,new AbstractCreateVirtualEnvDialog.VirtualEnvCallback(){
        @Override public void virtualEnvCreated(        Sdk createdSdk,        boolean associateWithProject){
          settings.setSdk(createdSdk);
          model.addSdk(createdSdk);
          try {
            model.apply();
          }
 catch (          ConfigurationException exception) {
            LOG.error("Error adding created virtual env " + exception.getMessage());
          }
        }
      }
);
    }
 catch (    ExecutionException e) {
      LOG.warn("Failed to create virtual env " + e.getMessage());
    }
  }
}
