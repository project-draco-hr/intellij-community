{
  final RefJavaElementImpl refFrom=(RefJavaElementImpl)ref;
  if (findIn == null) {
    return;
  }
  findIn.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitReferenceElement(    PsiJavaCodeReferenceElement reference){
      final PsiElement target=reference.resolve();
      if (target instanceof PsiClass) {
        final PsiClass aClass=(PsiClass)target;
        final RefClassImpl refClass=(RefClassImpl)refFrom.getRefManager().getReference(aClass);
        refFrom.addReference(refClass,aClass,psiFrom,false,true,null);
      }
      if (target instanceof PsiModifierListOwner && isDeprecated(target)) {
        refFrom.setUsesDeprecatedApi(true);
      }
    }
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      visitElement(expression);
      PsiElement psiResolved=expression.resolve();
      if (psiResolved instanceof PsiModifierListOwner) {
        if (isDeprecated(psiResolved))         refFrom.setUsesDeprecatedApi(true);
      }
      RefElement refResolved=refFrom.getRefManager().getReference(psiResolved);
      refFrom.addReference(refResolved,psiResolved,psiFrom,PsiUtil.isAccessedForWriting(expression),PsiUtil.isAccessedForReading(expression),expression);
      if (refResolved instanceof RefMethod) {
        updateRefMethod(psiResolved,refResolved,expression,psiFrom,refFrom);
      }
    }
    @Override public void visitEnumConstant(    PsiEnumConstant enumConstant){
      super.visitEnumConstant(enumConstant);
      processNewLikeConstruct(enumConstant.resolveConstructor(),enumConstant.getArgumentList());
    }
    @Override public void visitNewExpression(    PsiNewExpression newExpr){
      super.visitNewExpression(newExpr);
      PsiMethod psiConstructor=newExpr.resolveConstructor();
      final PsiExpressionList argumentList=newExpr.getArgumentList();
      RefMethod refConstructor=processNewLikeConstruct(psiConstructor,argumentList);
      if (refConstructor == null) {
        PsiType newType=newExpr.getType();
        if (newType instanceof PsiClassType) {
          processClassReference(PsiUtil.resolveClassInType(newType),refFrom,psiFrom,true);
        }
      }
    }
    @Override public void visitLambdaExpression(    PsiLambdaExpression expression){
      super.visitLambdaExpression(expression);
      processFunctionalExpression(expression);
    }
    @Override public void visitMethodReferenceExpression(    PsiMethodReferenceExpression expression){
      super.visitMethodReferenceExpression(expression);
      processFunctionalExpression(expression);
    }
    private void processFunctionalExpression(    PsiFunctionalExpression expression){
      final PsiClass aClass=PsiUtil.resolveClassInType(expression.getFunctionalInterfaceType());
      if (aClass != null) {
        refFrom.addReference(refFrom.getRefManager().getReference(aClass),aClass,psiFrom,false,true,null);
        final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(aClass);
        if (interfaceMethod != null) {
          refFrom.addReference(refFrom.getRefManager().getReference(interfaceMethod),interfaceMethod,psiFrom,false,true,null);
          PsiElement body=null;
          PsiElement topElement=null;
          if (expression instanceof PsiLambdaExpression) {
            body=((PsiLambdaExpression)expression).getBody();
            topElement=expression;
          }
 else {
            final PsiElement resolve=((PsiMethodReferenceExpression)expression).resolve();
            if (resolve instanceof PsiMethod) {
              body=((PsiMethod)resolve).getBody();
              topElement=resolve;
            }
          }
          final Collection<PsiClassType> exceptionTypes=body != null ? ExceptionUtil.collectUnhandledExceptions(body,topElement,false) : Collections.<PsiClassType>emptyList();
          RefElement refResolved=refFrom.getRefManager().getReference(interfaceMethod);
          if (refResolved instanceof RefMethodImpl) {
            for (            final PsiClassType exceptionType : exceptionTypes) {
              ((RefMethodImpl)refResolved).updateThrowsList(exceptionType);
            }
          }
        }
      }
    }
    @Nullable private RefMethod processNewLikeConstruct(    final PsiMethod psiConstructor,    final PsiExpressionList argumentList){
      if (psiConstructor != null) {
        if (isDeprecated(psiConstructor))         refFrom.setUsesDeprecatedApi(true);
      }
      RefMethodImpl refConstructor=(RefMethodImpl)refFrom.getRefManager().getReference(psiConstructor);
      refFrom.addReference(refConstructor,psiConstructor,psiFrom,false,true,null);
      if (argumentList != null) {
        PsiExpression[] psiParams=argumentList.getExpressions();
        for (        PsiExpression param : psiParams) {
          param.accept(this);
        }
        if (refConstructor != null) {
          refConstructor.updateParameterValues(psiParams);
        }
      }
      return refConstructor;
    }
    @Override public void visitClass(    PsiClass psiClass){
      super.visitClass(psiClass);
      RefClassImpl refClass=(RefClassImpl)refFrom.getRefManager().getReference(psiClass);
      refFrom.addReference(refClass,psiClass,psiFrom,false,true,null);
    }
    @Override public void visitReturnStatement(    PsiReturnStatement statement){
      super.visitReturnStatement(statement);
      if (refFrom instanceof RefMethodImpl) {
        RefMethodImpl refMethod=(RefMethodImpl)refFrom;
        refMethod.updateReturnValueTemplate(statement.getReturnValue());
      }
    }
    @Override public void visitClassObjectAccessExpression(    PsiClassObjectAccessExpression expression){
      super.visitClassObjectAccessExpression(expression);
      final PsiTypeElement operand=expression.getOperand();
      final PsiType type=operand.getType();
      if (type instanceof PsiClassType) {
        processClassReference(((PsiClassType)type).resolve(),refFrom,psiFrom,false);
      }
    }
    private void processClassReference(    final PsiClass psiClass,    final RefJavaElementImpl refFrom,    final PsiModifierListOwner psiFrom,    boolean defaultConstructorOnly){
      if (psiClass != null) {
        RefClassImpl refClass=(RefClassImpl)refFrom.getRefManager().getReference(psiClass);
        if (refClass != null) {
          boolean hasConstructorsMarked=false;
          if (defaultConstructorOnly) {
            RefMethodImpl refDefaultConstructor=(RefMethodImpl)refClass.getDefaultConstructor();
            if (refDefaultConstructor != null && !(refDefaultConstructor instanceof RefImplicitConstructor)) {
              refDefaultConstructor.addInReference(refFrom);
              refFrom.addOutReference(refDefaultConstructor);
              hasConstructorsMarked=true;
            }
          }
 else {
            for (            RefMethod cons : refClass.getConstructors()) {
              if (cons instanceof RefImplicitConstructor)               continue;
              ((RefMethodImpl)cons).addInReference(refFrom);
              refFrom.addOutReference(cons);
              hasConstructorsMarked=true;
            }
          }
          if (!hasConstructorsMarked) {
            refFrom.addReference(refClass,psiClass,psiFrom,false,true,null);
          }
        }
      }
    }
  }
);
}
