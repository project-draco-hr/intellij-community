{
  int unreachableParametersCount=0;
  int notMatchedStringVars=0;
  int matchedParametersInContext=0;
  boolean hasCallingVariableInContext=false;
  boolean introduceNewVariable=false;
  final PsiParameterList parameterList=method.getParameterList();
  final TIntObjectHashMap<SubLookupElement> parametersMap=new TIntObjectHashMap<SubLookupElement>(parameterList.getParametersCount());
  final PsiParameter[] parameters=parameterList.getParameters();
  for (int i=0; i < parameters.length; i++) {
    final PsiParameter parameter=parameters[i];
    final String typeQName=parameter.getType().getCanonicalText();
    if (typeQName != null) {
      if (JAVA_LANG_STRING.equals(typeQName)) {
        final PsiVariable relevantStringVar=context.findRelevantStringInContext(parameter.getName());
        if (relevantStringVar == null) {
          notMatchedStringVars++;
        }
 else {
          parametersMap.put(i,new VariableSubLookupElement(relevantStringVar));
        }
      }
 else       if (!ChainCompletionStringUtil.isPrimitiveOrArrayOfPrimitives(typeQName)) {
        final Collection<PsiVariable> contextVariables=context.getVariables(typeQName);
        final PsiVariable contextVariable=ContainerUtil.getFirstItem(contextVariables,null);
        if (contextVariable != null) {
          if (contextVariables.size() == 1)           parametersMap.put(i,new VariableSubLookupElement(contextVariable));
          matchedParametersInContext++;
          continue;
        }
        final Collection<ContextRelevantVariableGetter> relevantVariablesGetters=context.getRelevantVariablesGetters(typeQName);
        final ContextRelevantVariableGetter contextVariableGetter=ContainerUtil.getFirstItem(relevantVariablesGetters,null);
        if (contextVariableGetter != null) {
          if (relevantVariablesGetters.size() == 1)           parametersMap.put(i,contextVariableGetter.createSubLookupElement());
          matchedParametersInContext++;
          continue;
        }
        final Collection<PsiMethod> containingClassMethods=context.getContainingClassMethods(typeQName);
        final PsiMethod contextRelevantGetter=ContainerUtil.getFirstItem(containingClassMethods,null);
        if (contextRelevantGetter != null) {
          if (containingClassMethods.size() == 1)           parametersMap.put(i,new GetterLookupSubLookupElement(method.getName()));
          matchedParametersInContext++;
          continue;
        }
        final ContextRelevantStaticMethod contextRelevantStaticMethod=ContainerUtil.getFirstItem(context.getRelevantStaticMethods(typeQName,weight),null);
        if (contextRelevantStaticMethod != null) {
          matchedParametersInContext++;
          continue;
        }
        if (!nullableNotNullManager.isNullable(parameter,true)) {
          unreachableParametersCount++;
        }
      }
    }
  }
  final LookupElement lookupElement;
  if (isHeadMethod) {
    if (method.hasModifierProperty(PsiModifier.STATIC)) {
      hasCallingVariableInContext=true;
      lookupElement=createLookupElement(method,parametersMap);
    }
 else     if (method.isConstructor()) {
      return null;
    }
 else {
      @SuppressWarnings("ConstantConditions") final String classQName=qualifierClass.getQualifiedName();
      if (classQName == null)       return null;
      final Object e=ContainerUtil.getFirstItem(context.getContextRefElements(classQName),null);
      if (e != null) {
        final LookupElement firstChainElement;
        if (e instanceof PsiVariable) {
          firstChainElement=new VariableLookupItem((PsiVariable)e);
        }
 else         if (e instanceof PsiMethod) {
          firstChainElement=createLookupElement((PsiMethod)e,null);
        }
 else         if (e instanceof LookupElement) {
          firstChainElement=(LookupElement)e;
        }
 else {
          throw new AssertionError();
        }
        hasCallingVariableInContext=true;
        lookupElement=new JavaChainLookupElement(firstChainElement,createLookupElement(method,parametersMap));
      }
 else {
        lookupElement=createLookupElement(method,parametersMap);
        if (!context.getContainingClassQNames().contains(classQName)) {
          introduceNewVariable=true;
        }
      }
    }
  }
 else {
    lookupElement=createLookupElement(method,parametersMap);
  }
  return new MethodProcResult(lookupElement,unreachableParametersCount,notMatchedStringVars,hasCallingVariableInContext,introduceNewVariable,matchedParametersInContext);
}
