{
  if (tag == null || !HtmlUtil.isHtml5Context(tag)) {
    return XmlAttributeDescriptor.EMPTY;
  }
  final List<String> currentAttrs=new ArrayList<String>();
  for (  XmlAttribute attribute : tag.getAttributes()) {
    currentAttrs.add(attribute.getName());
  }
  final List<XmlAttributeDescriptor> result=new ArrayList<XmlAttributeDescriptor>();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(tag.getProject());
  FileBasedIndex.getInstance().processAllKeys(Html5CustomAttributesIndex.INDEX_ID,new Processor<String>(){
    @Override public boolean process(    String s){
      final boolean canProcessKey=!FileBasedIndex.getInstance().processValues(Html5CustomAttributesIndex.INDEX_ID,s,null,new FileBasedIndex.ValueProcessor<Void>(){
        @Override public boolean process(        VirtualFile file,        Void value){
          return false;
        }
      }
,scope);
      if (!canProcessKey)       return true;
      boolean add=true;
      for (      String attr : currentAttrs) {
        if (attr.startsWith(s)) {
          add=false;
        }
      }
      if (add) {
        result.add(new AnyXmlAttributeDescriptor(s));
      }
      return true;
    }
  }
,scope,null);
  return result.toArray(new XmlAttributeDescriptor[result.size()]);
}
