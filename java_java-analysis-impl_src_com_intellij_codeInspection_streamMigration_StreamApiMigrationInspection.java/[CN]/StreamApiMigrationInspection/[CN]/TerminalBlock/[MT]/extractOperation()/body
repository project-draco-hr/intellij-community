{
  FilterOp filter=extractFilter();
  if (filter != null)   return filter;
  if (getSingleStatement() instanceof PsiForeachStatement) {
    if (myVariable.getType() instanceof PsiPrimitiveType)     return null;
    PsiForeachStatement foreachStatement=(PsiForeachStatement)getSingleStatement();
    final PsiExpression iteratedValue=foreachStatement.getIteratedValue();
    final PsiStatement body=foreachStatement.getBody();
    if (iteratedValue != null && body != null) {
      final PsiType iteratedValueType=iteratedValue.getType();
      FlatMapOp op=null;
      if (iteratedValueType instanceof PsiArrayType) {
        if (!isSupported(((PsiArrayType)iteratedValueType).getComponentType()))         return null;
        op=new ArrayFlatMapOp(iteratedValue,myVariable,foreachStatement);
      }
 else {
        final PsiClass iteratorClass=PsiUtil.resolveClassInClassTypeOnly(iteratedValueType);
        final PsiClass collectionClass=JavaPsiFacade.getInstance(body.getProject()).findClass(CommonClassNames.JAVA_UTIL_COLLECTION,foreachStatement.getResolveScope());
        if (collectionClass != null && InheritanceUtil.isInheritorOrSelf(iteratorClass,collectionClass,true)) {
          op=new FlatMapOp(iteratedValue,myVariable,foreachStatement);
        }
      }
      if (op != null) {
        if (ReferencesSearch.search(myVariable,new LocalSearchScope(body)).findFirst() == null) {
          myVariable=foreachStatement.getIterationParameter();
          replaceWith(body);
          return op;
        }
 else {
          PsiStatement[] statements=myStatements;
          myVariable=foreachStatement.getIterationParameter();
          replaceWith(body);
          FilterOp nextFilter=extractFilter();
          myVariable=op.myVariable;
          if (nextFilter != null) {
            PsiStatement lastStatement=myStatements[myStatements.length - 1];
            if (lastStatement instanceof PsiBreakStatement && op.breaksMe((PsiBreakStatement)lastStatement) && ReferencesSearch.search(nextFilter.myVariable,new LocalSearchScope(myStatements)).findFirst() == null) {
              myStatements=Arrays.copyOfRange(myStatements,0,myStatements.length - 1);
              return new CompoundFilterOp(nextFilter,op);
            }
          }
          myStatements=statements;
        }
      }
    }
  }
  if (myStatements.length >= 1) {
    PsiStatement first=myStatements[0];
    if (first instanceof PsiDeclarationStatement) {
      PsiDeclarationStatement decl=(PsiDeclarationStatement)first;
      PsiElement[] elements=decl.getDeclaredElements();
      if (elements.length == 1) {
        PsiElement element=elements[0];
        if (element instanceof PsiLocalVariable) {
          PsiLocalVariable declaredVar=(PsiLocalVariable)element;
          if (isSupported(declaredVar.getType())) {
            PsiExpression initializer=declaredVar.getInitializer();
            PsiStatement[] leftOver=Arrays.copyOfRange(myStatements,1,myStatements.length);
            if (initializer != null && ReferencesSearch.search(myVariable,new LocalSearchScope(leftOver)).findFirst() == null) {
              MapOp op=new MapOp(initializer,myVariable,declaredVar.getType());
              myVariable=declaredVar;
              myStatements=leftOver;
              flatten();
              return op;
            }
          }
        }
      }
    }
  }
  return null;
}
