{
  String baseName="/refactoring/extractsuperclass/multifile/";
  myFixture.configureByFiles(baseName + "source.py",baseName + "a/__init__.py",baseName + "a/b/__init__.py",baseName + "a/b/foo.py");
  final String className="Foo";
  final String superclassName="Suppa";
  final PyClass clazz=findClass(className);
  final List<PyMemberInfo> members=new ArrayList<PyMemberInfo>();
  final PyElement member=findMember(className,".foo");
  members.add(MembersManager.findMember(clazz,member));
  final VirtualFile base_dir=myFixture.getFile().getVirtualFile().getParent();
  new WriteCommandAction.Simple(myFixture.getProject()){
    @Override protected void run() throws Throwable {
      final String path=base_dir.getPath() + "/a/b";
      PyExtractSuperclassHelper.extractSuperclass(clazz,members,superclassName,path + "/foo.py");
    }
  }
.execute();
  final PsiManager psi_mgr=PsiManager.getInstance(myFixture.getProject());
  VirtualFile vfile=base_dir.findChild("a");
  assertTrue(vfile.isDirectory());
  vfile=vfile.findChild(PyNames.INIT_DOT_PY);
  assertNotNull(vfile);
  vfile=base_dir.findChild("a").findChild("b");
  assertTrue(vfile.isDirectory());
  assertNotNull(vfile.findChild(PyNames.INIT_DOT_PY));
  vfile=vfile.findChild("foo.py");
  assertNotNull(vfile);
  PsiFile psi_file=psi_mgr.findFile(vfile);
  String result=psi_file.getText().trim();
  File expected_file=new File(getTestDataPath() + baseName,"target.append.py");
  String expected=psi_mgr.findFile(LocalFileSystem.getInstance().findFileByIoFile(expected_file)).getText().trim();
  assertEquals(expected,result);
}
