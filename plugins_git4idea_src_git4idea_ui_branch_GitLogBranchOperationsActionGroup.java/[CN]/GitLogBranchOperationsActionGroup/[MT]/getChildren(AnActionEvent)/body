{
  if (e == null)   return AnAction.EMPTY_ARRAY;
  Project project=e.getProject();
  VcsLog log=e.getData(VcsLogDataKeys.VCS_LOG);
  VcsLogUi logUI=e.getData(VcsLogDataKeys.VCS_LOG_UI);
  List<VcsRef> branches=e.getData(VcsLogDataKeys.VCS_LOG_BRANCHES);
  if (project == null || log == null || logUI == null || branches == null) {
    return AnAction.EMPTY_ARRAY;
  }
  List<CommitId> commits=log.getSelectedCommits();
  if (commits.size() != 1)   return AnAction.EMPTY_ARRAY;
  CommitId commit=commits.get(0);
  GitRepositoryManager repositoryManager=ServiceManager.getService(project,GitRepositoryManager.class);
  final GitRepository root=repositoryManager.getRepositoryForRoot(commit.getRoot());
  if (root == null)   return AnAction.EMPTY_ARRAY;
  List<VcsRef> vcsRefs=ContainerUtil.filter(branches,new Condition<VcsRef>(){
    @Override public boolean value(    VcsRef ref){
      if (ref.getType() == GitRefManager.LOCAL_BRANCH) {
        return !ref.getName().equals(root.getCurrentBranchName());
      }
      if (ref.getType() == GitRefManager.REMOTE_BRANCH)       return true;
      return false;
    }
  }
);
  VcsLogProvider provider=logUI.getDataPack().getLogProviders().get(root.getRoot());
  if (provider != null) {
    VcsLogRefManager refManager=provider.getReferenceManager();
    Comparator<VcsRef> comparator=refManager.getLabelsOrderComparator();
    ContainerUtil.sort(vcsRefs,comparator);
  }
  if (vcsRefs.isEmpty())   return AnAction.EMPTY_ARRAY;
  GitVcsSettings settings=GitVcsSettings.getInstance(project);
  boolean showBranchesPopup=vcsRefs.size() > MAX_BRANCH_GROUPS;
  List<AnAction> branchActionGroups=new ArrayList<>();
  for (  VcsRef ref : vcsRefs) {
    branchActionGroups.add(createBranchGroup(project,ref,root,repositoryManager,settings,showBranchesPopup));
  }
  DefaultActionGroup branchesGroup=new DefaultActionGroup("Branches",branchActionGroups);
  branchesGroup.setPopup(showBranchesPopup);
  return new AnAction[]{branchesGroup};
}
