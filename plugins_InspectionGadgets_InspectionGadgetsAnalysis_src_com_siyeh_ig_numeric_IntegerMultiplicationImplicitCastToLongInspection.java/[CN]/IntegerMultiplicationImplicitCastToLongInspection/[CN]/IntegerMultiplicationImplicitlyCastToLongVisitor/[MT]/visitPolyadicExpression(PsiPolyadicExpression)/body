{
  super.visitPolyadicExpression(expression);
  final IElementType tokenType=expression.getOperationTokenType();
  if (!tokenType.equals(JavaTokenType.ASTERISK) && !tokenType.equals(JavaTokenType.LTLT)) {
    return;
  }
  final PsiType type=expression.getType();
  if (!isNonLongInteger(type)) {
    return;
  }
  if (expression.getOperands().length < 2 || expression.getLastChild() instanceof PsiErrorElement) {
    return;
  }
  final PsiExpression context=getContainingExpression(expression);
  if (context == null) {
    return;
  }
  final PsiType contextType=ExpectedTypeUtils.findExpectedType(context,true);
  if (contextType == null) {
    return;
  }
  if (!contextType.equals(PsiType.LONG)) {
    return;
  }
  if (ignoreNonOverflowingCompileTimeConstants) {
    try {
      if (ExpressionUtils.computeConstantExpression(expression,true) != null) {
        return;
      }
    }
 catch (    ConstantEvaluationOverflowException ignore) {
    }
  }
  registerError(expression,tokenType);
}
