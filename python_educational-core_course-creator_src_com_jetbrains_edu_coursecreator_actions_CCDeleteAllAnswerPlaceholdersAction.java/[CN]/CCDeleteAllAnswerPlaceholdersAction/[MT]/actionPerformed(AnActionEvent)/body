{
  final DataContext context=e.getDataContext();
  final VirtualFile file=CommonDataKeys.VIRTUAL_FILE.getData(context);
  final Project project=e.getProject();
  if (file == null || project == null) {
    return;
  }
  final TaskFile taskFile=CCProjectService.getInstance(project).getTaskFile(file);
  if (taskFile == null) {
    return;
  }
  Editor editor=CommonDataKeys.EDITOR.getData(context);
  if (editor == null) {
    FileEditorManager instance=FileEditorManager.getInstance(project);
    if (!instance.isFileOpen(file)) {
      return;
    }
    FileEditor fileEditor=instance.getSelectedEditor(file);
    if (!(fileEditor instanceof TextEditor)) {
      return;
    }
    editor=((TextEditor)fileEditor).getEditor();
  }
  List<AnswerPlaceholder> placeholders=new ArrayList<AnswerPlaceholder>(taskFile.getAnswerPlaceholders());
  final ClearPlaceholders action=new ClearPlaceholders(taskFile,placeholders,editor,file,project);
  new WriteCommandAction(project,ACTION_NAME){
    protected void run(    @NotNull final Result result) throws Throwable {
      action.redo();
      UndoManager.getInstance(project).undoableActionPerformed(action);
    }
    @Override protected UndoConfirmationPolicy getUndoConfirmationPolicy(){
      return UndoConfirmationPolicy.REQUEST_CONFIRMATION;
    }
  }
.execute();
}
