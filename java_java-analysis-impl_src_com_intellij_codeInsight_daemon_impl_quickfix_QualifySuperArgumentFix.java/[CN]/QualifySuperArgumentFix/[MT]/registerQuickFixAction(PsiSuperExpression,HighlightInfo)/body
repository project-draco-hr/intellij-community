{
  LOG.assertTrue(expr.getQualifier() == null);
  final PsiClass containingClass=PsiTreeUtil.getParentOfType(expr,PsiClass.class);
  if (containingClass != null && containingClass.isInterface()) {
    final PsiMethodCallExpression callExpression=PsiTreeUtil.getParentOfType(expr,PsiMethodCallExpression.class);
    if (callExpression != null) {
      final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(callExpression.getProject());
      for (      PsiClass superClass : containingClass.getSupers()) {
        if (superClass.isInterface()) {
          final PsiMethodCallExpression copy=(PsiMethodCallExpression)callExpression.copy();
          final PsiExpression superQualifierCopy=copy.getMethodExpression().getQualifierExpression();
          LOG.assertTrue(superQualifierCopy != null);
          superQualifierCopy.delete();
          if (((PsiMethodCallExpression)elementFactory.createExpressionFromText(copy.getText(),superClass)).resolveMethod() != null) {
            QuickFixAction.registerQuickFixAction(highlightInfo,new QualifySuperArgumentFix(expr,superClass));
          }
        }
      }
    }
  }
}
