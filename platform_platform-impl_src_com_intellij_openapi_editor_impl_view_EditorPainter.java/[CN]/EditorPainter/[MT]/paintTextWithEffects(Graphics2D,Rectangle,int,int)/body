{
  final CharSequence text=myDocument.getImmutableCharSequence();
  final EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy=myEditor.new LineWhitespacePaintingStrategy();
  int lineCount=myEditor.getVisibleLineCount();
  for (int visualLine=startVisualLine; visualLine <= endVisualLine; visualLine++) {
    int y=myView.visualLineToY(visualLine) + myView.getAscent();
    LineLayout prefixLayout=myView.getPrefixLayout();
    if (visualLine == 0 && prefixLayout != null) {
      g.setColor(myView.getPrefixAttributes().getForegroundColor());
      paintLineLayoutWithEffect(g,prefixLayout,0,y,myView.getPrefixAttributes().getEffectColor(),myView.getPrefixAttributes().getEffectType());
    }
    if (visualLine >= lineCount)     break;
    final int[] currentLogicalLine=new int[]{-1};
    paintLineFragments(g,clip,visualLine,y,new LineFragmentPainter(){
      @Override public void paint(      Graphics2D g,      VisualLineFragmentsIterator.Fragment fragment,      int start,      int end,      TextAttributes attributes,      float xStart,      float xEnd,      int y){
        if (attributes != null && attributes.getForegroundColor() != null) {
          g.setColor(attributes.getForegroundColor());
          fragment.draw(g,xStart,y,start,end);
        }
        if (fragment.getCurrentFoldRegion() == null) {
          int logicalLine=fragment.getStartLogicalLine();
          if (logicalLine != currentLogicalLine[0]) {
            whitespacePaintingStrategy.update(text,myDocument.getLineStartOffset(logicalLine),myDocument.getLineEndOffset(logicalLine));
            currentLogicalLine[0]=logicalLine;
          }
          paintWhitespace(g,text,xStart,y,start,end,whitespacePaintingStrategy,fragment);
        }
        if (attributes != null && hasTextEffect(attributes.getEffectColor(),attributes.getEffectType())) {
          paintTextEffect(g,xStart,xEnd,y,attributes.getEffectColor(),attributes.getEffectType());
        }
      }
      @Override public void paintAfterLineEnd(      Graphics2D g,      Rectangle clip,      IterationState iterationState,      float x,      int y){
        int logicalLine=myDocument.getLineNumber(iterationState.getStartOffset());
        paintLineExtensions(g,logicalLine,x,y);
      }
    }
);
  }
}
