{
  final CharSequence text=myDocument.getImmutableCharSequence();
  final EditorImpl.LineWhitespacePaintingStrategy whitespacePaintingStrategy=myEditor.new LineWhitespacePaintingStrategy();
  int lineCount=myDocument.getLineCount();
  for (int line=startLine; line <= endLine; line++) {
    int y=myView.visualLineToY(line) + myView.getAscent();
    float x=0;
    LineLayout prefixLayout=myView.getPrefixLayout();
    if (line == 0 && prefixLayout != null) {
      x=paintLineLayoutWithEffect(g,prefixLayout,x,y,myView.getPrefixAttributes().getEffectColor(),myView.getPrefixAttributes().getEffectType());
    }
    if (line >= lineCount)     break;
    whitespacePaintingStrategy.update(text,myDocument.getLineStartOffset(line),myDocument.getLineEndOffset(line));
    final int theLine=line;
    paintLineFragments(g,clip,line,(int)x,y,new LineFragmentPainter(){
      @Override public void paint(      Graphics2D g,      LineLayout.Fragment fragment,      int fragmentStartOffset,      int start,      int end,      TextAttributes attributes,      float xStart,      float xEnd,      int y,      boolean isRtl){
        g.setColor(attributes.getForegroundColor());
        fragment.draw(g,xStart,y,start,end);
        paintWhitespace(g,text,xStart,y,start,end,whitespacePaintingStrategy,fragment,fragmentStartOffset,isRtl);
        if (hasTextEffect(attributes.getEffectColor(),attributes.getEffectType())) {
          paintTextEffect(g,xStart,xEnd,y,attributes.getEffectColor(),attributes.getEffectType());
        }
      }
      @Override public void paintAfterLineEnd(      Graphics2D g,      Rectangle clip,      IterationState2 iterationState,      float x,      int y){
        paintLineExtensions(g,theLine,x,y);
      }
    }
);
  }
}
