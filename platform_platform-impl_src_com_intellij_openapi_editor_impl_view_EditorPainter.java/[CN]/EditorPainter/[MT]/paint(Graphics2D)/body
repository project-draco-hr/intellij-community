{
  Rectangle clip=g.getClipBounds();
  if (myEditor.getContentComponent().isOpaque()) {
    g.setColor(myEditor.getBackgroundColor());
    g.fillRect(clip.x,clip.y,clip.width,clip.height);
  }
  if (paintPlaceholderText(g)) {
    paintCaret(g);
    return;
  }
  int startLine=myView.yToVisualLine(Math.max(clip.y,0));
  int endLine=myView.yToVisualLine(Math.max(clip.y + clip.height,0));
  int lineCount=myDocument.getLineCount();
  int startOffset=startLine >= lineCount ? myDocument.getTextLength() : myDocument.getLineStartOffset(startLine);
  int endOffset=endLine >= lineCount ? myDocument.getTextLength() : myDocument.getLineEndOffset(endLine);
  paintBackground(g,clip,startLine,endLine);
  paintRightMargin(g,clip);
  paintCustomRenderers(g,startOffset,endOffset);
  MarkupModelEx docMarkup=(MarkupModelEx)DocumentMarkupModel.forDocument(myDocument,myEditor.getProject(),true);
  paintLineMarkersSeparators(g,clip,docMarkup,startOffset,endOffset);
  paintLineMarkersSeparators(g,clip,myEditor.getMarkupModel(),startOffset,endOffset);
  paintTextWithEffects(g,clip,startLine,endLine);
  paintHighlightersAfterEndOfLine(g,docMarkup,startOffset,endOffset);
  paintHighlightersAfterEndOfLine(g,myEditor.getMarkupModel(),startOffset,endOffset);
  paintBorderEffect(g,myEditor.getHighlighter(),startOffset,endOffset);
  paintBorderEffect(g,docMarkup,startOffset,endOffset);
  paintBorderEffect(g,myEditor.getMarkupModel(),startOffset,endOffset);
  paintCaret(g);
  paintComposedTextDecoration(g);
}
