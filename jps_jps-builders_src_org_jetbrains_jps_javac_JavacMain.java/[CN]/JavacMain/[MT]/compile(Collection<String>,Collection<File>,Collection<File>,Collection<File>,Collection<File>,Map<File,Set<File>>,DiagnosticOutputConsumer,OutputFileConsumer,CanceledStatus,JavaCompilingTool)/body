{
  JavaCompiler compiler;
  try {
    compiler=compilingTool.createCompiler();
  }
 catch (  CannotCreateJavaCompilerException e) {
    diagnosticConsumer.report(new PlainMessageDiagnostic(Diagnostic.Kind.ERROR,e.getMessage()));
    return false;
  }
  for (  File outputDir : outputDirToRoots.keySet()) {
    outputDir.mkdirs();
  }
  final List<JavaSourceTransformer> transformers=getSourceTransformers();
  final boolean usingJavac=compilingTool instanceof JavacCompilerTool;
  final JavacFileManager fileManager=new JavacFileManager(new ContextImpl(compiler,diagnosticConsumer,outputSink,canceledStatus,usingJavac),transformers);
  fileManager.handleOption("-bootclasspath",Collections.singleton("").iterator());
  fileManager.handleOption("-extdirs",Collections.singleton("").iterator());
  fileManager.handleOption("-endorseddirs",Collections.singleton("").iterator());
  final Collection<String> _options=prepareOptions(options,compilingTool);
  try {
    fileManager.setOutputDirectories(outputDirToRoots);
  }
 catch (  IOException e) {
    fileManager.getContext().reportMessage(Diagnostic.Kind.ERROR,e.getMessage());
    return false;
  }
  if (!classpath.isEmpty()) {
    try {
      fileManager.setLocation(StandardLocation.CLASS_PATH,classpath);
      if (!usingJavac && !isOptionSet(options,"-processorpath")) {
        fileManager.setLocation(StandardLocation.ANNOTATION_PROCESSOR_PATH,classpath);
      }
    }
 catch (    IOException e) {
      fileManager.getContext().reportMessage(Diagnostic.Kind.ERROR,e.getMessage());
      return false;
    }
  }
  if (!platformClasspath.isEmpty()) {
    try {
      fileManager.setLocation(StandardLocation.PLATFORM_CLASS_PATH,buildPlatformClasspath(platformClasspath,_options));
    }
 catch (    IOException e) {
      fileManager.getContext().reportMessage(Diagnostic.Kind.ERROR,e.getMessage());
      return false;
    }
  }
  try {
    fileManager.setLocation(StandardLocation.SOURCE_PATH,sourcePath);
  }
 catch (  IOException e) {
    fileManager.getContext().reportMessage(Diagnostic.Kind.ERROR,e.getMessage());
    return false;
  }
  final LineOutputWriter out=new LineOutputWriter(){
    protected void lineAvailable(    String line){
      if (usingJavac) {
        diagnosticConsumer.outputLineAvailable(line);
      }
 else {
      }
    }
  }
;
  try {
    for (Iterator<String> iterator=_options.iterator(); iterator.hasNext(); ) {
      fileManager.handleOption(iterator.next(),iterator);
    }
    final JavaCompiler.CompilationTask task=compiler.getTask(out,fileManager,diagnosticConsumer,_options,null,fileManager.getJavaFileObjectsFromFiles(sources));
    compilingTool.prepareCompilationTask(task,_options);
    return task.call();
  }
 catch (  IllegalArgumentException e) {
    diagnosticConsumer.report(new PlainMessageDiagnostic(Diagnostic.Kind.ERROR,e.getMessage()));
  }
catch (  CompilationCanceledException ignored) {
    diagnosticConsumer.report(new PlainMessageDiagnostic(Diagnostic.Kind.OTHER,"Compilation was canceled"));
  }
 finally {
    fileManager.close();
    if (usingJavac) {
      cleanupJavacNameTable();
    }
  }
  return false;
}
