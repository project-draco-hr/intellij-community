{
  super(project,true);
  setTitle(GitBundle.getString("rebase.title"));
  setOKButtonText(GitBundle.getString("rebase.button"));
  init();
  myProject=project;
  mySettings=ServiceManager.getService(myProject,GitRebaseSettings.class);
  myRepositoryManager=GitUtil.getRepositoryManager(myProject);
  final Runnable validateRunnable=new Runnable(){
    public void run(){
      validateFields();
    }
  }
;
  myOntoValidator=new GitReferenceValidator(myProject,myGitRootComboBox,GitUIUtil.getTextField(myOntoComboBox),myOntoValidateButton,validateRunnable);
  myFromValidator=new GitReferenceValidator(myProject,myGitRootComboBox,GitUIUtil.getTextField(myFromComboBox),myFromValidateButton,validateRunnable);
  GitUIUtil.setupRootChooser(myProject,roots,defaultRoot,myGitRootComboBox,null);
  myGitRootComboBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      validateFields();
    }
  }
);
  setupBranches();
  setupStrategy();
  myInteractiveCheckBox.setSelected(mySettings.isInteractive());
  myPreserveMergesCheckBox.setSelected(mySettings.isPreserveMerges());
  myShowTagsCheckBox.setSelected(mySettings.showTags());
  myShowRemoteBranchesCheckBox.setSelected(mySettings.showRemoteBranches());
  overwriteOntoForCurrentBranch(mySettings);
  myOriginalOntoBranch=GitUIUtil.getTextField(myOntoComboBox).getText();
  validateFields();
}
