{
  myProgressManager=progressManager;
  Application app=ApplicationManager.getApplication();
  MessageBus messageBus=app.getMessageBus();
  messageBus.connect().subscribe(StateStorageManager.STORAGE_TOPIC,new StorageManagerListener(){
    @Override public void storageFileChanged(    @NotNull VFileEvent event,    @NotNull StateStorage storage,    @NotNull ComponentManager componentManager){
      if (event instanceof VFilePropertyChangeEvent) {
        return;
      }
      if (event.getRequestor() instanceof StateStorage.SaveSession || event.getRequestor() instanceof StateStorage || event.getRequestor() instanceof ProjectManagerImpl) {
        return;
      }
      Project project;
      if (componentManager instanceof Project) {
        project=(Project)componentManager;
      }
 else {
        project=componentManager instanceof Module ? ((Module)componentManager).getProject() : null;
      }
      VirtualFile file=event.getFile();
      if (file != null) {
        registerProjectToReload(project,file,storage);
      }
    }
  }
);
  final ProjectManagerListener busPublisher=messageBus.syncPublisher(TOPIC);
  addProjectManagerListener(new ProjectManagerListener(){
    @Override public void projectOpened(    final Project project){
      busPublisher.projectOpened(project);
      for (      ProjectManagerListener listener : getListeners(project)) {
        listener.projectOpened(project);
      }
    }
    @Override public void projectClosed(    Project project){
      busPublisher.projectClosed(project);
      for (      ProjectManagerListener listener : getListeners(project)) {
        listener.projectClosed(project);
      }
    }
    @Override public boolean canCloseProject(    Project project){
      for (      ProjectManagerListener listener : getListeners(project)) {
        if (!listener.canCloseProject(project)) {
          return false;
        }
      }
      return true;
    }
    @Override public void projectClosing(    Project project){
      busPublisher.projectClosing(project);
      for (      ProjectManagerListener listener : getListeners(project)) {
        listener.projectClosing(project);
      }
    }
  }
);
  virtualFileManager.addVirtualFileManagerListener(new VirtualFileManagerAdapter(){
    @Override public void beforeRefreshStart(    boolean asynchronous){
      blockReloadingProjectOnExternalChanges();
    }
    @Override public void afterRefreshFinish(    boolean asynchronous){
      unblockReloadingProjectOnExternalChanges();
    }
  }
);
  myChangedFilesAlarm=new SingleAlarm(restartApplicationOrReloadProjectTask,300);
}
