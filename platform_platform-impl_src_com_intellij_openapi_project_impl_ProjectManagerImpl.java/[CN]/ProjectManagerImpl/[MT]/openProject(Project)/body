{
  if (isLight(project)) {
    ((ProjectImpl)project).setTemporarilyDisposed(false);
    boolean isInitialized=StartupManagerEx.getInstanceEx(project).startupActivityPassed();
    if (isInitialized) {
      addToOpened(project);
      return true;
    }
  }
  if (!addToOpened(project)) {
    return false;
  }
  fireProjectOpened(project);
  DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND,new Runnable(){
    @Override public void run(){
      DumbService.getInstance(project).queueTask(new DumbModeTask(){
        @Override public void performInDumbMode(        @NotNull ProgressIndicator indicator){
          waitForFileWatcher(indicator);
        }
        @Override public String toString(){
          return "wait for file watcher";
        }
      }
);
    }
  }
);
  final StartupManagerImpl startupManager=(StartupManagerImpl)StartupManager.getInstance(project);
  boolean ok=myProgressManager.runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      startupManager.runStartupActivities();
      UIUtil.invokeAndWaitIfNeeded(new Runnable(){
        @Override public void run(){
          startupManager.startCacheUpdate();
        }
      }
);
      startupManager.runPostStartupActivitiesFromExtensions();
      GuiUtils.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          if (!project.isDisposed()) {
            startupManager.runPostStartupActivities();
            Application application=ApplicationManager.getApplication();
            if (!(application.isHeadlessEnvironment() || application.isUnitTestMode())) {
              StorageUtil.checkUnknownMacros(project,true);
            }
          }
        }
      }
,ModalityState.NON_MODAL);
    }
  }
,ProjectBundle.message("project.load.progress"),canCancelProjectLoading(),project);
  if (!ok) {
    closeProject(project,false,false,true);
    notifyProjectOpenFailed();
    return false;
  }
  return true;
}
