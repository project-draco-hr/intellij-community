{
  final Collection<ChangedFileEntry> filesToRestore;
  if (changedFileEntries == null) {
    filesToRestore=myChangedProjectFiles.remove(p);
  }
 else {
    filesToRestore=changedFileEntries;
  }
  final Ref<Project> projectRef=Ref.create(p);
  ProjectReloadState.getInstance(p).onBeforeAutomaticProjectReload();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      LOG.debug("Reloading project.");
      Project project=projectRef.get();
      projectRef.set(null);
      if (project.isDisposed()) {
        return;
      }
      String presentableUrl=project.getPresentableUrl();
      if (!ProjectUtil.closeAndDispose(project)) {
        return;
      }
      if (!ContainerUtil.isEmpty(filesToRestore)) {
        AccessToken token=WriteAction.start();
        try {
          for (          ChangedFileEntry entry : filesToRestore) {
            if (!entry.file.isWritable()) {
              continue;
            }
            try {
              entry.file.setBinaryContent(entry.savedContent,-1,entry.timestamp,ProjectManagerImpl.this);
            }
 catch (            IOException e) {
              Messages.showWarningDialog(ProjectBundle.message("project.reload.write.failed",entry.file.getPresentableUrl()),ProjectBundle.message("project.reload.write.failed.title"));
            }
          }
        }
  finally {
          token.finish();
        }
      }
      ProjectUtil.openProject(presentableUrl,null,true);
    }
  }
,ModalityState.NON_MODAL);
}
