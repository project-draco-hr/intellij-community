{
  final Collection<ChangedFileEntry> filesToRestore;
  if (changedFileEntries == null) {
    filesToRestore=myChangedProjectFiles.remove(p);
  }
 else {
    filesToRestore=changedFileEntries;
  }
  final Project[] project={p};
  ProjectReloadState.getInstance(p).onBeforeAutomaticProjectReload();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      LOG.debug("Reloading project.");
      ProjectImpl projectImpl=(ProjectImpl)project[0];
      if (projectImpl.isDisposed()) {
        return;
      }
      final String location=projectImpl.getPresentableUrl();
      if (project[0].isDisposed() || ProjectUtil.closeAndDispose(project[0])) {
        if (!ContainerUtil.isEmpty(filesToRestore)) {
          AccessToken token=WriteAction.start();
          try {
            for (            ChangedFileEntry entry : filesToRestore) {
              if (!entry.file.isWritable()) {
                continue;
              }
              try {
                entry.file.setBinaryContent(entry.savedContent,-1,entry.timestamp);
              }
 catch (              IOException e) {
                Messages.showWarningDialog(ProjectBundle.message("project.reload.write.failed",entry.file.getPresentableUrl()),ProjectBundle.message("project.reload.write.failed.title"));
              }
            }
          }
  finally {
            token.finish();
          }
        }
        project[0]=null;
        ProjectUtil.openProject(location,null,true);
      }
    }
  }
,ModalityState.NON_MODAL);
}
