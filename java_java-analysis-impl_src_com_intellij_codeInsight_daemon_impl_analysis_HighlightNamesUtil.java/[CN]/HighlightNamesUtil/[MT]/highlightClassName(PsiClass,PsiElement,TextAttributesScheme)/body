{
  HighlightInfoType type=getClassNameHighlightType(aClass,elementToHighlight);
  TextAttributes attributes=mergeWithScopeAttributes(aClass,type,colorsScheme);
  TextRange range=elementToHighlight.getTextRange();
  if (elementToHighlight instanceof PsiJavaCodeReferenceElement) {
    final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)elementToHighlight;
    PsiReferenceParameterList parameterList=referenceElement.getParameterList();
    if (parameterList != null) {
      TextRange paramListRange=parameterList.getTextRange();
      PsiElement identifier=PsiTreeUtil.skipSiblingsBackward(parameterList,PsiWhiteSpace.class,PsiComment.class);
      if (identifier != null) {
        paramListRange=new TextRange(identifier.getTextRange().getEndOffset(),paramListRange.getEndOffset());
      }
      if (!paramListRange.isEmpty()) {
        range=new TextRange(range.getStartOffset(),paramListRange.getStartOffset());
      }
    }
  }
  final PsiElement parent=elementToHighlight.getParent();
  if (parent instanceof PsiAnnotation) {
    final PsiAnnotation psiAnnotation=(PsiAnnotation)parent;
    range=new TextRange(psiAnnotation.getTextRange().getStartOffset(),range.getEndOffset());
  }
  HighlightInfo.Builder builder=HighlightInfo.newHighlightInfo(type).range(range);
  if (attributes != null) {
    builder.textAttributes(attributes);
  }
  HighlightInfo info=builder.createUnconditionally();
  return info;
}
