{
  boolean showAsReadOnly=false;
  if (value instanceof Node && value != tree.getModel().getRoot()) {
    Node node=(Node)value;
    if (!node.isValid()) {
      append(UsageViewBundle.message("node.invalid") + " ",UIUtil.isUnderDarcula() ? ourInvalidAttributesDarcula : ourInvalidAttributes);
    }
    if (myPresentation.isShowReadOnlyStatusAsRed() && node.isReadOnly()) {
      showAsReadOnly=true;
    }
  }
  myCalculated=false;
  if (value instanceof DefaultMutableTreeNode) {
    DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)value;
    Object userObject=treeNode.getUserObject();
    Rectangle visibleRect=((JViewport)tree.getParent()).getViewRect();
    if (!visibleRect.isEmpty()) {
      RowLocation visible=myRowBoundsCalled ? RowLocation.INSIDE_VISIBLE_RECT : isRowVisible(row,visibleRect);
      myRowBoundsCalled=false;
      if (visible != RowLocation.INSIDE_VISIBLE_RECT) {
        return;
      }
      if (!getIpad().equals(STANDARD_IPAD_NOWIFI)) {
        setIpad(STANDARD_IPAD_NOWIFI);
      }
    }
    if (myCalculated)     return;
    myCalculated=true;
    if (userObject instanceof UsageTarget) {
      UsageTarget usageTarget=(UsageTarget)userObject;
      if (!usageTarget.isValid()) {
        append(UsageViewBundle.message("node.invalid"),ourInvalidAttributes);
        return;
      }
      final ItemPresentation presentation=usageTarget.getPresentation();
      LOG.assertTrue(presentation != null);
      if (showAsReadOnly) {
        append(UsageViewBundle.message("node.readonly") + " ",ourReadOnlyAttributes);
      }
      final String text=presentation.getPresentableText();
      append(text == null ? "" : text,SimpleTextAttributes.REGULAR_ATTRIBUTES);
      setIcon(presentation.getIcon(expanded));
    }
 else     if (treeNode instanceof GroupNode) {
      GroupNode node=(GroupNode)treeNode;
      if (!node.isRoot()) {
        append(node.getGroup().getText(myView),patchAttrs(node,showAsReadOnly ? ourReadOnlyAttributes : SimpleTextAttributes.REGULAR_ATTRIBUTES));
        setIcon(node.getGroup().getIcon(expanded));
      }
      int count=node.getRecursiveUsageCount();
      SimpleTextAttributes attributes=patchAttrs(node,ourNumberOfUsagesAttribute);
      append(FontUtil.spaceAndThinSpace() + count,SimpleTextAttributes.GRAYED_ATTRIBUTES.derive(attributes.getStyle(),null,null,null));
    }
 else     if (treeNode instanceof UsageNode) {
      UsageNode node=(UsageNode)treeNode;
      setIcon(node.getUsage().getPresentation().getIcon());
      if (showAsReadOnly) {
        append(UsageViewBundle.message("node.readonly") + " ",patchAttrs(node,ourReadOnlyAttributes));
      }
      if (node.isValid()) {
        TextChunk[] text=node.getUsage().getPresentation().getText();
        for (int i=0; i < text.length; i++) {
          TextChunk chunk=text[i];
          SimpleTextAttributes simples=chunk.getSimpleAttributesIgnoreBackground();
          String chunkText=chunk.getText();
          String fragment=i == 0 ? chunkText + FontUtil.spaceAndThinSpace() : chunkText;
          append(fragment,patchAttrs(node,simples));
        }
      }
    }
 else     if (userObject instanceof String) {
      append((String)userObject,SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
    }
 else {
      append(userObject == null ? "" : userObject.toString(),SimpleTextAttributes.REGULAR_ATTRIBUTES);
    }
  }
 else {
    append(value.toString(),SimpleTextAttributes.REGULAR_ATTRIBUTES);
  }
  SpeedSearchUtil.applySpeedSearchHighlighting(tree,this,true,mySelected);
}
