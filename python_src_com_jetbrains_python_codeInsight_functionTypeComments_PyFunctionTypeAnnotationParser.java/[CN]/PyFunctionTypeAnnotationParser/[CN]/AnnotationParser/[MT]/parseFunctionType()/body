{
  if (atToken(PyTokenTypes.LPAR)) {
    final PsiBuilder.Marker funcTypeMark=myBuilder.mark();
    parseParameterTypeList();
    checkMatches(PyTokenTypes.RARROW,"'->' expected");
    final boolean parsed=getExpressionParser().parseSingleExpression(false);
    if (!parsed) {
      myBuilder.error("expression expected");
    }
    funcTypeMark.done(PyFunctionTypeAnnotationElementTypes.FUNCTION_SIGNATURE);
  }
  recoverUntilMatches("unexpected tokens");
}
