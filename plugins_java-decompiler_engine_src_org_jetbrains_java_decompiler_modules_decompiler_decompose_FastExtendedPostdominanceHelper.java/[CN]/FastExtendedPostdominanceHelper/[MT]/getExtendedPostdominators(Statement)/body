{
  this.statement=statement;
  HashSet<Integer> set=new HashSet<Integer>();
  for (  Statement st : statement.getStats()) {
    set.add(st.id);
  }
  this.factory=new FastFixedSetFactory<Integer>(set);
  lstReversePostOrderList=statement.getReversePostOrderList();
  calcDefaultReachableSets();
  removeErroneousNodes();
  DominatorTreeExceptionFilter filter=new DominatorTreeExceptionFilter(statement);
  filter.initialize();
  filterOnExceptionRanges(filter);
  filterOnDominance(filter);
  HashMap<Integer,Set<Integer>> res=new HashMap<Integer,Set<Integer>>();
  for (  Entry<Integer,FastFixedSet<Integer>> entry : mapExtPostdominators.entrySet()) {
    res.put(entry.getKey(),entry.getValue().toPlainSet());
  }
  return res;
}
