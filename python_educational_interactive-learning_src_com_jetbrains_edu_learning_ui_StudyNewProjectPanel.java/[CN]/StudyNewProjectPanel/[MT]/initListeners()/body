{
  final FileChooserDescriptor fileChooser=new FileChooserDescriptor(true,false,false,true,false,false){
    @Override public boolean isFileVisible(    VirtualFile file,    boolean showHiddenFiles){
      return file.isDirectory() || StudyUtils.isZip(file.getName());
    }
    @Override public boolean isFileSelectable(    VirtualFile file){
      return StudyUtils.isZip(file.getName());
    }
  }
;
  myBrowseButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      FileChooser.chooseFile(fileChooser,null,null,new Consumer<VirtualFile>(){
        @Override public void consume(        VirtualFile file){
          String fileName=file.getPath();
          int oldSize=myAvailableCourses.size();
          CourseInfo courseInfo=myGenerator.addLocalCourse(fileName);
          if (courseInfo != null) {
            if (oldSize != myAvailableCourses.size()) {
              myCoursesComboBox.addItem(courseInfo);
            }
            myCoursesComboBox.setSelectedItem(courseInfo);
            setOK();
          }
 else {
            setError(INVALID_COURSE);
            myCoursesComboBox.removeAllItems();
            myCoursesComboBox.addItem(CourseInfo.INVALID_COURSE);
            for (            CourseInfo course : myAvailableCourses) {
              myCoursesComboBox.addItem(course);
            }
            myCoursesComboBox.setSelectedItem(CourseInfo.INVALID_COURSE);
          }
        }
      }
);
    }
  }
);
  myRefreshButton.addActionListener(new RefreshActionListener());
  myCoursesComboBox.addActionListener(new CourseSelectedListener());
  myLogInButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final boolean isSuccess=EduStepicConnector.login(myLoginField.getText(),String.valueOf(myPasswordField.getPassword()));
      if (!isSuccess) {
        setError("Failed to log in");
        return;
      }
      refreshCoursesList();
    }
  }
);
}
