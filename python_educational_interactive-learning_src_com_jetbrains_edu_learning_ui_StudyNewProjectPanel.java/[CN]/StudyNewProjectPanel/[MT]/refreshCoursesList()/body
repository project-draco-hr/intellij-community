{
  Task.WithResult<List<CourseInfo>,Exception> refreshTask=new Task.WithResult<List<CourseInfo>,Exception>(null,"Refreshing Courses List",false){
    @Override protected List<CourseInfo> compute(    @NotNull ProgressIndicator indicator) throws Exception {
      return myGenerator.getCourses(true);
    }
  }
;
  final List<CourseInfo> courses;
  try {
    courses=ProgressManager.getInstance().run(refreshTask);
  }
 catch (  Exception e) {
    setError(CONNECTION_ERROR);
    return;
  }
  if (courses.isEmpty()) {
    setError(CONNECTION_ERROR);
    return;
  }
  myCoursesComboBox.removeAllItems();
  for (  CourseInfo courseInfo : courses) {
    myCoursesComboBox.addItem(courseInfo);
  }
  myGenerator.setSelectedCourse(StudyUtils.getFirst(courses));
  myGenerator.setCourses(courses);
  myAvailableCourses=courses;
  StudyProjectGenerator.flushCache(myAvailableCourses);
}
