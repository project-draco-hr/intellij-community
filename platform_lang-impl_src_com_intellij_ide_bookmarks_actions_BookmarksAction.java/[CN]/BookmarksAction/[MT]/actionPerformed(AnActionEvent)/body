{
  final Project project=e.getProject();
  if (project == null)   return;
  if (myPopup != null && myPopup.isVisible())   return;
  final JBList list=new JBList(buildModel(project));
  EditBookmarkDescriptionAction editDescriptionAction=new EditBookmarkDescriptionAction(project,list);
  DefaultActionGroup actions=new DefaultActionGroup();
  actions.add(editDescriptionAction);
  actions.add(new DeleteBookmarkAction(project,list));
  actions.add(new MoveBookmarkUpAction(project,list));
  actions.add(new MoveBookmarkDownAction(project,list));
  myPopup=new MasterDetailPopupBuilder(project).setList(list).setDelegate(this).setDetailView(new DetailViewImpl(project)).setDimensionServiceKey("bookmarks").setAddDetailViewToEast(true).setActionsGroup(actions).setPopupTuner(new Consumer<PopupChooserBuilder>(){
    @Override public void consume(    PopupChooserBuilder builder){
      builder.setCloseOnEnter(false).setCancelOnClickOutside(false);
    }
  }
).setDoneRunnable(new Runnable(){
    @Override public void run(){
      myPopup.cancel();
    }
  }
).createMasterDetailPopup();
  new AnAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      @SuppressWarnings("deprecation") Object[] values=list.getSelectedValues();
      for (      Object item : values) {
        if (item instanceof BookmarkItem) {
          itemChosen((BookmarkItem)item,project,myPopup,true);
        }
      }
    }
  }
.registerCustomShortcutSet(CommonShortcuts.getEditSource(),list);
  editDescriptionAction.setPopup(myPopup);
  myPopup.showCenteredInCurrentWindow(project);
  list.getEmptyText().setText("No Bookmarks");
  list.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
}
