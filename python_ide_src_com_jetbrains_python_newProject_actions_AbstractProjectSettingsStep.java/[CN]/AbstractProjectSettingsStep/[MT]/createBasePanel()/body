{
  final JPanel panel=new JPanel(new GridBagLayout());
  final GridBagConstraints c=new GridBagConstraints();
  c.fill=GridBagConstraints.HORIZONTAL;
  c.anchor=GridBagConstraints.NORTHWEST;
  c.weightx=0;
  c.insets=new Insets(2,2,2,2);
  myLocationField=new TextFieldWithBrowseButton();
  myLocationField.setText(myProjectDirectory.toString());
  final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  myLocationField.addBrowseFolderListener("Select base directory","Select base directory for the Project",null,descriptor);
  final JLabel locationLabel=new JLabel("Location:");
  c.gridx=0;
  c.gridy=0;
  panel.add(locationLabel,c);
  c.gridx=1;
  c.gridy=0;
  c.weightx=1.;
  panel.add(myLocationField,c);
  final JLabel interpreterLabel=new JLabel("Interpreter:",SwingConstants.LEFT){
    @Override public Dimension getMinimumSize(){
      return new JLabel("Project name:").getPreferredSize();
    }
    @Override public Dimension getPreferredSize(){
      return getMinimumSize();
    }
  }
;
  c.gridx=0;
  c.gridy=1;
  c.weightx=0;
  panel.add(interpreterLabel,c);
  final Project project=ProjectManager.getInstance().getDefaultProject();
  final List<Sdk> sdks=PyConfigurableInterpreterList.getInstance(project).getAllPythonSdks();
  VirtualEnvProjectFilter.removeAllAssociated(sdks);
  final Sdk preferred=sdks.isEmpty() ? null : sdks.iterator().next();
  mySdkCombo=new PythonSdkChooserCombo(project,sdks,new Condition<Sdk>(){
    @Override public boolean value(    Sdk sdk){
      return sdk == preferred;
    }
  }
);
  mySdkCombo.setButtonIcon(PythonIcons.Python.InterpreterGear);
  c.gridx=1;
  c.gridy=1;
  c.weightx=1.;
  panel.add(mySdkCombo,c);
  final JPanel basePanelExtension=extendBasePanel();
  if (basePanelExtension != null) {
    c.gridwidth=2;
    c.gridy=2;
    c.gridx=0;
    panel.add(basePanelExtension,c);
  }
  registerValidators();
  return panel;
}
