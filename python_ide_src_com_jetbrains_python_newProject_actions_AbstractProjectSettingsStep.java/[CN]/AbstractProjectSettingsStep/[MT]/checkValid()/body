{
  final String projectName=myLocationField.getText();
  if (projectName.trim().isEmpty()) {
    setErrorText("Project name can't be empty");
    return false;
  }
  if (myLocationField.getText().indexOf('$') >= 0) {
    setErrorText("Project directory name must not contain the $ character");
    return false;
  }
  if (myProjectGenerator != null) {
    final String baseDirPath=myLocationField.getTextField().getText();
    ValidationResult validationResult=myProjectGenerator.validate(baseDirPath);
    if (!validationResult.isOk()) {
      setErrorText(validationResult.getErrorMessage());
      return false;
    }
    if (myProjectGenerator instanceof WebProjectTemplate) {
      final ValidationInfo validationInfo=((WebProjectTemplate)myProjectGenerator).getPeer().validate();
      if (validationInfo != null) {
        setErrorText(validationInfo.message);
        return false;
      }
    }
  }
  final Sdk sdk=getSdk();
  setErrorText(null);
  myInstallFramework=false;
  final boolean isPy3k=sdk != null && PythonSdkType.getLanguageLevelForSdk(sdk).isPy3K();
  if (sdk != null && PythonSdkType.isRemote(sdk) && !acceptsRemoteSdk(myProjectGenerator)) {
    setErrorText("Please choose a local interpreter");
    return false;
  }
 else   if (myProjectGenerator instanceof PyFrameworkProjectGenerator) {
    PyFrameworkProjectGenerator frameworkProjectGenerator=(PyFrameworkProjectGenerator)myProjectGenerator;
    String frameworkName=frameworkProjectGenerator.getFrameworkTitle();
    if (sdk != null && !isFrameworkInstalled(sdk)) {
      final PyPackageManagerImpl packageManager=(PyPackageManagerImpl)PyPackageManager.getInstance(sdk);
      final boolean onlyWithCache=PythonSdkFlavor.getFlavor(sdk) instanceof JythonSdkFlavor || PythonSdkFlavor.getFlavor(sdk) instanceof PyPySdkFlavor;
      try {
        if (onlyWithCache && packageManager.cacheIsNotNull() || !onlyWithCache) {
          final PyPackage pip=packageManager.findPackage("pip");
          myInstallFramework=pip != null;
          setWarningText("Django will be installed on selected interpreter");
        }
      }
 catch (      PyExternalProcessException ignored) {
      }
      if (!myInstallFramework) {
        setErrorText("No " + frameworkName + " support installed in selected interpreter");
        return false;
      }
    }
    if (isPy3k && !((PyFrameworkProjectGenerator)myProjectGenerator).supportsPython3()) {
      setErrorText(frameworkName + " is not supported for the selected interpreter");
      return false;
    }
  }
  if (sdk == null) {
    setErrorText("No Python interpreter selected");
    return false;
  }
  return true;
}
