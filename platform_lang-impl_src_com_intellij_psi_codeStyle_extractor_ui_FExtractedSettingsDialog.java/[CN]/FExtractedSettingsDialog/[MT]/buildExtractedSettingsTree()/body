{
  Collection<FValue> unusedValues=ContainerUtil.newHashSet(myValues);
  myRoot=new DefaultMutableTreeNode();
  for (  Map.Entry<LanguageCodeStyleSettingsProvider.SettingsType,Map<CodeStyleSettingRepresentation.SettingsGroup,List<CodeStyleSettingRepresentation>>> typeEntry : myNameProvider.mySettings.entrySet()) {
    DefaultMutableTreeNode settingsNode=null;
    for (    Map.Entry<CodeStyleSettingRepresentation.SettingsGroup,List<CodeStyleSettingRepresentation>> groupEntry : typeEntry.getValue().entrySet()) {
      CodeStyleSettingRepresentation.SettingsGroup group=groupEntry.getKey();
      List<CodeStyleSettingRepresentation> representations=groupEntry.getValue();
      List<CodeStyleSettingRepresentation> children=ContainerUtil.emptyList();
      DefaultMutableTreeNode groupNode=null;
      if (group.name == null && !representations.isEmpty()) {
        if (representations.size() > 1) {
          children=representations.subList(1,representations.size());
        }
        CodeStyleSettingRepresentation headRep=representations.get(0);
        FValue myValue=FCodeStyleSettingsNameProvider.getValue(headRep,myValues);
        if (myValue == null) {
          groupNode=new SettingsTreeNode(headRep.getUiName());
        }
 else {
          groupNode=new SettingsTreeNode(headRep.getUiName());
          groupNode.add(new SettingsTreeNode(headRep.getValueUiName(myValue.value),headRep,true,myValue));
          unusedValues.remove(myValue);
        }
      }
 else {
        children=representations;
      }
      for (      CodeStyleSettingRepresentation representation : children) {
        FValue myValue=FCodeStyleSettingsNameProvider.getValue(representation,myValues);
        if (myValue != null) {
          if (groupNode == null) {
            groupNode=new SettingsTreeNode(group.name);
          }
          groupNode.add(new SettingsTreeNode(representation.getValueUiName(myValue.value),representation,false,myValue));
          unusedValues.remove(myValue);
        }
      }
      if (groupNode != null) {
        if (settingsNode == null) {
          settingsNode=new SettingsTreeNode(FCodeStyleSettingsNameProvider.getSettingsTypeName(typeEntry.getKey()));
        }
        settingsNode.add(groupNode);
      }
    }
    if (settingsNode != null) {
      myRoot.add(settingsNode);
    }
  }
  unusedValues=ContainerUtil.filter(unusedValues,new Condition<FValue>(){
    @Override public boolean value(    FValue value){
      return value.state == FValue.STATE.SELECTED;
    }
  }
);
  DefaultMutableTreeNode unnamedNode=null;
  for (  FValue value : unusedValues) {
    if (unnamedNode == null) {
      unnamedNode=new SettingsTreeNode("Settings without UI representation");
    }
    unnamedNode.add(new SettingsTreeNode(value.value.toString(),null,false,value.name,value));
  }
  if (unnamedNode != null) {
    myRoot.add(unnamedNode);
  }
  final ColumnInfo[] COLUMNS=new ColumnInfo[]{getTitleColumnInfo(),getValueColumnInfo()};
  ListTreeTableModel model=new ListTreeTableModel(myRoot,COLUMNS);
  final TreeTable treeTable=new TreeTable(model){
    @Override public TreeTableCellRenderer createTableRenderer(    TreeTableModel treeTableModel){
      TreeTableCellRenderer tableRenderer=super.createTableRenderer(treeTableModel);
      UIUtil.setLineStyleAngled(tableRenderer);
      tableRenderer.setRootVisible(false);
      tableRenderer.setShowsRootHandles(true);
      return tableRenderer;
    }
    @Override public TableCellRenderer getCellRenderer(    int row,    int column){
      TreePath treePath=getTree().getPathForRow(row);
      if (treePath == null)       return super.getCellRenderer(row,column);
      Object node=treePath.getLastPathComponent();
      TableCellRenderer renderer=COLUMNS[column].getRenderer(node);
      return renderer == null ? super.getCellRenderer(row,column) : renderer;
    }
    @Override public TableCellEditor getCellEditor(    int row,    int column){
      TreePath treePath=getTree().getPathForRow(row);
      if (treePath == null)       return super.getCellEditor(row,column);
      Object node=treePath.getLastPathComponent();
      TableCellEditor editor=COLUMNS[column].getEditor(node);
      return editor == null ? super.getCellEditor(row,column) : editor;
    }
  }
;
  new TreeTableSpeedSearch(treeTable).setComparator(new SpeedSearchComparator(false));
  treeTable.setRootVisible(false);
  final JTree tree=treeTable.getTree();
  tree.setCellRenderer(myTitleRenderer);
  tree.setShowsRootHandles(true);
  treeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  treeTable.setTableHeader(null);
  OptionTableWithPreviewPanel.expandTree(tree);
  treeTable.getColumnModel().getSelectionModel().setAnchorSelectionIndex(1);
  treeTable.getColumnModel().getSelectionModel().setLeadSelectionIndex(1);
  int maxWidth=tree.getPreferredScrollableViewportSize().width + 10;
  final TableColumn titleColumn=treeTable.getColumnModel().getColumn(0);
  titleColumn.setPreferredWidth(maxWidth);
  titleColumn.setMinWidth(maxWidth);
  titleColumn.setMaxWidth(maxWidth);
  titleColumn.setResizable(false);
  final Dimension valueSize=new JLabel(ApplicationBundle.message("option.table.sizing.text")).getPreferredSize();
  treeTable.setPreferredScrollableViewportSize(new Dimension(maxWidth + valueSize.width + 10,20));
  treeTable.setBackground(UIUtil.getPanelBackground());
  treeTable.setBorder(BorderFactory.createEmptyBorder(0,0,0,10));
  final Dimension screenSize=treeTable.getToolkit().getScreenSize();
  JBScrollPane scroller=new JBScrollPane(treeTable){
    @Override public Dimension getMinimumSize(){
      return super.getPreferredSize();
    }
  }
;
  final Dimension preferredSize=new Dimension(Math.min(screenSize.width / 2,treeTable.getPreferredSize().width),Math.min(screenSize.height / 2,treeTable.getPreferredSize().height));
  getRootPane().setPreferredSize(preferredSize);
  return scroller;
}
