{
  DaemonCodeAnalyzerEx daemonCodeAnalyzer=DaemonCodeAnalyzerEx.getInstanceEx(myProject);
  FileStatusMap fileStatusMap=daemonCodeAnalyzer.getFileStatusMap();
  InspectionProfile profile=InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile();
  final boolean myDeadCodeEnabled=myDeadCodeInspection != null && profile.isToolEnabled(myDeadCodeKey,file) && myDeadCodeInspection.isGlobalEnabledInEditor();
  @NotNull final Predicate<PsiElement> myIsEntryPointPredicate=new Predicate<PsiElement>(){
    @Override public boolean apply(    PsiElement member){
      return !myDeadCodeEnabled || myDeadCodeInspection.isEntryPoint(member);
    }
  }
;
  GlobalUsageHelper globalUsageHelper=new GlobalUsageHelper(){
    @Override public boolean shouldCheckUsages(    @NotNull PsiMember member){
      return !myInLibrary && !myIsEntryPointPredicate.apply(member);
    }
    @Override public boolean isCurrentFileAlreadyChecked(){
      return true;
    }
    @Override public boolean isLocallyUsed(    @NotNull PsiNamedElement member){
      return myRefCountHolder.isReferenced(member);
    }
  }
;
  boolean errorFound=false;
  boolean unusedSymbolEnabled=profile.isToolEnabled(myDeadCodeKey,myFile);
  if (unusedSymbolEnabled) {
    final FileViewProvider viewProvider=myFile.getViewProvider();
    final Set<Language> relevantLanguages=viewProvider.getLanguages();
    for (    Language language : relevantLanguages) {
      progress.checkCanceled();
      PsiElement psiRoot=viewProvider.getPsi(language);
      if (!HighlightingLevelManager.getInstance(myProject).shouldHighlight(psiRoot))       continue;
      List<PsiElement> elements=CollectHighlightsUtil.getElementsInRange(psiRoot,0,myFile.getTextLength());
      for (      PsiElement element : elements) {
        progress.checkCanceled();
        if (element instanceof PsiIdentifier) {
          PsiIdentifier identifier=(PsiIdentifier)element;
          HighlightInfo info=processIdentifier(identifier,progress,globalUsageHelper);
          if (info != null) {
            errorFound|=info.getSeverity() == HighlightSeverity.ERROR;
            result.add(info);
          }
        }
      }
    }
  }
  HighlightDisplayKey unusedImportKey=HighlightDisplayKey.find(UnusedImportLocalInspection.SHORT_NAME);
  if (isUnusedImportEnabled(unusedImportKey)) {
    PsiImportList importList=((PsiJavaFile)myFile).getImportList();
    if (importList != null) {
      final PsiImportStatementBase[] imports=importList.getAllImportStatements();
      for (      PsiImportStatementBase statement : imports) {
        progress.checkCanceled();
        final HighlightInfo info=processImport(statement,unusedImportKey);
        if (info != null) {
          errorFound|=info.getSeverity() == HighlightSeverity.ERROR;
          result.add(info);
        }
      }
    }
  }
  if (errorFound) {
    fileStatusMap.setErrorFoundFlag(myProject,myDocument,true);
  }
  markFileUpToDate(myFile);
  optimizeImportsOnTheFlyLater(progress);
}
