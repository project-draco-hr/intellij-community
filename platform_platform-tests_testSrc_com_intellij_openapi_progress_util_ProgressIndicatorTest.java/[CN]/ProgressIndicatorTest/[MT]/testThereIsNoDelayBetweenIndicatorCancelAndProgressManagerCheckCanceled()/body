{
  for (int i=0; i < 1000; i++) {
    final ProgressIndicatorBase indicator=new ProgressIndicatorBase();
    List<Thread> threads=ContainerUtil.map(Collections.nCopies(10,""),new Function<String,Thread>(){
      @Override public Thread fun(      String s){
        return new Thread(new Runnable(){
          @Override public void run(){
            ProgressManager.getInstance().executeProcessUnderProgress(new Runnable(){
              @Override public void run(){
                try {
                  boolean canceled=indicator.isCanceled();
                  indicator.cancel();
                  ProgressManager.checkCanceled();
                  fail("checkCanceled() must know about canceled indicator even from different thread");
                }
 catch (                ProcessCanceledException ignored) {
                }
              }
            }
,indicator);
          }
        }
){
{
            start();
          }
        }
;
      }
    }
);
    ContainerUtil.process(threads,new Processor<Thread>(){
      @Override public boolean process(      Thread thread){
        try {
          thread.join();
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
        return true;
      }
    }
);
  }
}
