{
  final AtomicBoolean run=new AtomicBoolean(true);
  final AtomicBoolean insideReadAction=new AtomicBoolean();
  final AtomicReference<Throwable> exception=new AtomicReference<Throwable>();
  final ProgressIndicatorBase indicator=new ProgressIndicatorBase();
  ProgressIndicatorUtils.scheduleWithWriteActionPriority(indicator,new ReadTask(){
    @Override public void computeInReadAction(    @NotNull ProgressIndicator indicator){
      insideReadAction.set(true);
      while (run.get()) {
        ProgressManager.checkCanceled();
      }
    }
    @Override public void onCanceled(    @NotNull ProgressIndicator indicator){
      try {
        assertTrue(run.get());
        run.set(false);
      }
 catch (      Throwable e) {
        exception.set(e);
      }
    }
  }
);
  UIUtil.dispatchAllInvocationEvents();
  while (!insideReadAction.get()) {
    ;
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      try {
        assertTrue(indicator.isCanceled());
      }
 catch (      Throwable e) {
        exception.set(e);
      }
    }
  }
);
  assertFalse(run.get());
  if (exception.get() != null)   throw exception.get();
}
