{
  final Document document=editor.getDocument();
  final SelectionModel selectionModel=editor.getSelectionModel();
  final CaretModel caretModel=editor.getCaretModel();
  Integer selectionLen=selectionContainer.myLen;
  final PsiElement at=file.findElementAt(offset);
  if (at != null) {
    final PsiElement added=getCommentOrStatement(document,at);
    int size=toMove.size;
    if (size > 1) {
      PsiElement tmp=added.getNextSibling();
      while (size > 1 && tmp != null) {
        if (tmp instanceof PsiWhiteSpace) {
          if (!selectionStartAtCaret)           shift+=tmp.getTextLength();
          selectionLen+=tmp.getTextLength();
        }
        tmp=tmp.getNextSibling();
        size-=1;
      }
    }
    if (shift < 0)     shift=0;
    final int column=editor.offsetToLogicalPosition(added.getTextRange().getStartOffset()).column;
    if (selectionContainer.myAtTheBeginning || column < selectionContainer.myAdditional) {
      selectionLen+=column;
    }
 else {
      selectionLen+=selectionContainer.myAdditional;
    }
    if (selectionContainer.myAtTheBeginning && selectionStartAtCaret)     shift=-column;
  }
  final int documentLength=document.getTextLength();
  int newCaretOffset=offset + shift;
  if (newCaretOffset >= documentLength)   newCaretOffset=documentLength;
  caretModel.moveToOffset(newCaretOffset);
  if (hasSelection) {
    if (selectionStartAtCaret) {
      int newSelectionEnd=newCaretOffset + selectionLen;
      selectionModel.setSelection(newCaretOffset,newSelectionEnd);
    }
 else {
      int newSelectionStart=newCaretOffset - selectionLen;
      selectionModel.setSelection(newSelectionStart,newCaretOffset);
    }
  }
}
