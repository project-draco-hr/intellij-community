{
  final LineRange toMove=info.toMove;
  final LineRange toMove2=info.toMove2;
  if (toMove instanceof MyLineRange && toMove2 instanceof ScopeRange) {
    PostprocessReformattingAspect.getInstance(editor.getProject()).disablePostprocessFormattingInside(new Runnable(){
      @Override public void run(){
        final PsiElement startToMove=((MyLineRange)toMove).myStartElement;
        final PsiElement endToMove=((MyLineRange)toMove).myEndElement;
        final PsiFile file=startToMove.getContainingFile();
        final SelectionModel selectionModel=editor.getSelectionModel();
        final CaretModel caretModel=editor.getCaretModel();
        final int selectionStart=selectionModel.getSelectionStart();
        boolean isSelectionStartAtCaret=caretModel.getOffset() == selectionStart;
        final SelectionContainer selectionLen=getSelectionLenContainer(editor,((MyLineRange)toMove));
        int shift=getCaretShift(startToMove,endToMove,caretModel,isSelectionStartAtCaret);
        final boolean hasSelection=selectionModel.hasSelection();
        int offset;
        if (((ScopeRange)toMove2).isTheSameLevel()) {
          offset=moveTheSameLevel((ScopeRange)toMove2,(MyLineRange)toMove);
        }
 else {
          offset=moveInOut(((MyLineRange)toMove),editor,info);
        }
        restoreCaretAndSelection(file,editor,isSelectionStartAtCaret,hasSelection,selectionLen,shift,offset,(MyLineRange)toMove);
        info.toMove2=info.toMove;
      }
    }
);
  }
}
