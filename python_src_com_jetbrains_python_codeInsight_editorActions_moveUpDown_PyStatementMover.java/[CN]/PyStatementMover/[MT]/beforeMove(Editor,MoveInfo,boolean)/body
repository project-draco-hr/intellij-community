{
  final LineRange toMove=info.toMove;
  final LineRange toMove2=info.toMove2;
  if (toMove instanceof MyLineRange && toMove2 instanceof ScopeRange) {
    PostprocessReformattingAspect.getInstance(editor.getProject()).disablePostprocessFormattingInside(new Runnable(){
      @Override public void run(){
        final PsiElement elementToMove=((MyLineRange)toMove).myElement;
        final SelectionModel selectionModel=editor.getSelectionModel();
        final CaretModel caretModel=editor.getCaretModel();
        final int shift=caretModel.getOffset() - elementToMove.getTextOffset();
        final boolean hasSelection=selectionModel.hasSelection();
        final int selectionStart=selectionModel.getSelectionStart();
        final int selectionEnd=selectionModel.getSelectionEnd();
        final int selectionShift=selectionStart - elementToMove.getTextOffset();
        int offset;
        if (((ScopeRange)toMove2).isTheSameLevel()) {
          offset=moveTheSameLevel((ScopeRange)toMove2,(MyLineRange)toMove);
        }
 else {
          offset=moveInOut(((MyLineRange)toMove).myElement,editor,info);
        }
        final int documentLength=editor.getDocument().getTextLength();
        int newCaretOffset=offset + shift;
        if (newCaretOffset >= documentLength)         newCaretOffset=documentLength;
        caretModel.moveToOffset(newCaretOffset);
        info.toMove2=info.toMove;
        if (hasSelection) {
          int newSelectionStart=offset + selectionShift;
          int newSelectionEnd=newSelectionStart + selectionEnd - selectionStart;
          if (newSelectionEnd >= documentLength)           newSelectionEnd=documentLength;
          selectionModel.setSelection(newSelectionStart,newSelectionEnd);
        }
      }
    }
);
  }
}
