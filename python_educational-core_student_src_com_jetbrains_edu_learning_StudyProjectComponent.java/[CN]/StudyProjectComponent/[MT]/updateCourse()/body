{
  final Course currentCourse=StudyTaskManager.getInstance(myProject).getCourse();
  final CourseInfo info=CourseInfo.fromCourse(currentCourse);
  if (info == null)   return;
  final File resourceDirectory=new File(currentCourse.getCourseDirectory());
  if (resourceDirectory.exists()) {
    FileUtil.delete(resourceDirectory);
  }
  final Course course=EduStepicConnector.getCourse(myProject,info);
  if (course == null)   return;
  flushCourse(myProject,course);
  course.initCourse(false);
  StudyLanguageManager manager=StudyUtils.getLanguageManager(course);
  if (manager == null) {
    LOG.info("Study Language Manager is null for " + course.getLanguageById().getDisplayName());
    return;
  }
  final ArrayList<Lesson> updatedLessons=new ArrayList<>();
  int lessonIndex=0;
  for (  Lesson lesson : course.getLessons()) {
    lessonIndex+=1;
    Lesson studentLesson=currentCourse.getLesson(lesson.getId());
    final String lessonDirName=EduNames.LESSON + String.valueOf(lessonIndex);
    final File lessonDir=new File(myProject.getBasePath(),lessonDirName);
    if (!lessonDir.exists()) {
      final File fromLesson=new File(resourceDirectory,lessonDirName);
      try {
        FileUtil.copyDir(fromLesson,lessonDir);
      }
 catch (      IOException e) {
        LOG.warn("Failed to copy lesson " + fromLesson.getPath());
      }
      lesson.setIndex(lessonIndex);
      lesson.initLesson(currentCourse,false);
      for (int i=1; i <= lesson.getTaskList().size(); i++) {
        Task task=lesson.getTaskList().get(i - 1);
        task.setIndex(i);
      }
      updatedLessons.add(lesson);
      continue;
    }
    studentLesson.setIndex(lessonIndex);
    updatedLessons.add(studentLesson);
    int index=0;
    final ArrayList<Task> tasks=new ArrayList<>();
    for (    Task task : lesson.getTaskList()) {
      index+=1;
      final Task studentTask=studentLesson.getTask(task.getStepId());
      if (studentTask != null && StudyStatus.Solved.equals(studentTask.getStatus())) {
        studentTask.setIndex(index);
        tasks.add(studentTask);
        continue;
      }
      task.initTask(studentLesson,false);
      task.setIndex(index);
      final String taskDirName=EduNames.TASK + String.valueOf(index);
      final File toTask=new File(lessonDir,taskDirName);
      final String taskPath=FileUtil.join(resourceDirectory.getPath(),lessonDirName,taskDirName);
      final File taskDir=new File(taskPath);
      if (!taskDir.exists())       return;
      final File[] taskFiles=taskDir.listFiles();
      if (taskFiles == null)       continue;
      for (      File fromFile : taskFiles) {
        copyFile(fromFile,new File(toTask,fromFile.getName()));
      }
      tasks.add(task);
    }
    studentLesson.updateTaskList(tasks);
  }
  currentCourse.setLessons(updatedLessons);
  final Notification notification=new Notification("Update.course","Course update","Current course is synchronized",NotificationType.INFORMATION);
  notification.notify(myProject);
}
