{
  super(new BorderLayout());
  myOptions=options;
  mySchemesProvider=schemesProvider;
  myCategoryName=categoryName;
  myProperties=PropertiesComponent.getInstance();
  myOptionsPanel=new ColorAndFontDescriptionPanel(){
    @Override protected void onSettingsChanged(    ActionEvent e){
      super.onSettingsChanged(e);
      myDispatcher.getMulticaster().settingsChanged();
    }
    @Override protected void onHyperLinkClicked(    HyperlinkEvent e){
      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        Settings settings=Settings.KEY.getData(DataManager.getInstance().getDataContext(OptionsPanelImpl.this));
        String attrName=e.getDescription();
        Element element=e.getSourceElement();
        String pageName;
        try {
          pageName=element.getDocument().getText(element.getStartOffset(),element.getEndOffset() - element.getStartOffset());
        }
 catch (        BadLocationException e1) {
          return;
        }
        final SearchableConfigurable page=myOptions.findSubConfigurable(pageName);
        if (page != null && settings != null) {
          Runnable runnable=page.enableSearch(attrName);
          ActionCallback callback=settings.select(page);
          if (runnable != null)           callback.doWhenDone(runnable);
        }
      }
    }
  }
;
  myOptionsTree=new ColorOptionsTree(myCategoryName);
  myOptionsTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      if (!mySchemesProvider.areSchemesLoaded())       return;
      processListValueChanged();
    }
  }
);
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myOptionsTree);
  scrollPane.setPreferredSize(JBUI.size(230,60));
  JPanel north=new JPanel(new BorderLayout());
  north.add(scrollPane,BorderLayout.CENTER);
  north.add(myOptionsPanel,BorderLayout.EAST);
  add(north,BorderLayout.NORTH);
}
