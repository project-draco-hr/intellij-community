{
  final PsiElement element=parameters.getPosition();
  if (JavaSmartCompletionContributor.INSIDE_TYPECAST_EXPRESSION.accepts(element))   return null;
  if (JavaKeywordCompletion.isAfterPrimitiveOrArrayType(element))   return null;
  final int offset=parameters.getParameters().getOffset();
  final PsiJavaCodeReferenceElement reference=PsiTreeUtil.findElementOfClassAtOffset(element.getContainingFile(),offset,PsiJavaCodeReferenceElement.class,false);
  if (reference != null) {
    ElementFilter filter=getReferenceFilter(element,false);
    if (CheckInitialized.isInsideConstructorCall(element)) {
      filter=new AndFilter(filter,new CheckInitialized(element));
    }
    for (    final LookupElement item : completeFinalReference(element,reference,filter,parameters)) {
      result.consume(item);
    }
    final boolean secondTime=parameters.getParameters().getInvocationCount() >= 2;
    final Set<LookupElement> base=JavaSmartCompletionContributor.completeReference(element,reference,filter,false,true,parameters.getParameters(),PrefixMatcher.ALWAYS_TRUE);
    for (    final LookupElement item : new LinkedHashSet<>(base)) {
      ExpressionLookupItem access=ArrayMemberAccess.accessFirstElement(element,item);
      if (access != null) {
        base.add(access);
        PsiType type=access.getType();
        if (type != null && parameters.getExpectedType().isAssignableFrom(type)) {
          result.consume(access);
        }
      }
    }
    if (secondTime) {
      return new SlowerTypeConversions(base,element,reference,parameters,result);
    }
  }
  return null;
}
