{
  final String methodName=getArraysConversionMethod(itemType,expectedType);
  if (methodName == null)   return;
  final String qualifierText=getQualifierText(qualifier);
  final PsiExpression conversion=createExpression("java.util.Arrays." + methodName + "("+ qualifierText+ prefix+ ")",element);
  final LookupItem item=new ExpressionLookupItem(conversion);
  @NonNls final String presentable="Arrays." + methodName + "("+ qualifierText+ prefix+ ")";
  item.setLookupString(StringUtil.isEmpty(qualifierText) ? presentable : prefix);
  item.setPresentableText(presentable);
  item.addLookupStrings(prefix,presentable,methodName + "(" + prefix+ ")");
  item.setIcon(PlatformIcons.METHOD_ICON);
  item.setInsertHandler(new InsertHandler<LookupElement>(){
    @Override public void handleInsert(    InsertionContext context,    LookupElement item){
      FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.SECOND_SMART_COMPLETION_ASLIST);
      final Editor editor=context.getEditor();
      int startOffset=context.getStartOffset();
      final Document document=editor.getDocument();
      final int tailOffset=startOffset + item.getLookupString().length();
      startOffset-=qualifierText.length();
      final Project project=element.getProject();
      final String callSpace=getSpace(CodeStyleSettingsManager.getSettings(project).SPACE_WITHIN_METHOD_CALL_PARENTHESES);
      @NonNls final String newText="java.util.Arrays." + methodName + "("+ callSpace+ qualifierText+ prefix+ callSpace+ ")";
      document.replaceString(startOffset,tailOffset,newText);
      PsiDocumentManager.getInstance(project).commitDocument(document);
      final PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(document);
      try {
        JavaCodeStyleManager.getInstance(project).shortenClassReferences(file,startOffset,startOffset + CommonClassNames.JAVA_UTIL_ARRAYS.length());
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
      PostprocessReformattingAspect.getInstance(project).doPostponedFormatting();
    }
  }
);
  result.consume(item);
}
