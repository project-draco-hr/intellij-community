{
  if (r1 instanceof Final && ((Final)r1).value == top) {
    return r1;
  }
  if (r2 instanceof Final && ((Final)r2).value == top) {
    return r2;
  }
  if (r1 instanceof Final && r2 instanceof Final) {
    return new Final<Id,T>(lattice.join(((Final<?,T>)r1).value,((Final<?,T>)r2).value));
  }
  if (r1 instanceof Final && r2 instanceof Pending) {
    Pending<Id,T> pending=(Pending<Id,T>)r2;
    return new Pending<Id,T>(lattice.join(((Final<Id,T>)r1).value,pending.infinum),pending.delta);
  }
  if (r1 instanceof Pending && r2 instanceof Final) {
    Pending<Id,T> pending=(Pending<Id,T>)r1;
    return new Pending<Id,T>(lattice.join(((Final<Id,T>)r2).value,pending.infinum),pending.delta);
  }
  Pending<Id,T> pending1=(Pending<Id,T>)r1;
  Pending<Id,T> pending2=(Pending<Id,T>)r2;
  Set<Component<Id>> delta=new HashSet<Component<Id>>();
  delta.addAll(pending1.delta);
  delta.addAll(pending2.delta);
  return new Pending<Id,T>(lattice.join(pending1.infinum,pending2.infinum),delta);
}
