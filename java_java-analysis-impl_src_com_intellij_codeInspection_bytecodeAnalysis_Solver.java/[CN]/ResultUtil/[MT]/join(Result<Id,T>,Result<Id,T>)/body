{
  if (r1 instanceof Final && ((Final)r1).value == top) {
    return r1;
  }
  if (r2 instanceof Final && ((Final)r2).value == top) {
    return r2;
  }
  if (r1 instanceof Final && r2 instanceof Final) {
    return new Final<Id,T>(lattice.join(((Final<?,T>)r1).value,((Final<?,T>)r2).value));
  }
  if (r1 instanceof Final && r2 instanceof Pending) {
    Final<?,T> f1=(Final<?,T>)r1;
    Pending<Id,T> pending=(Pending<Id,T>)r2;
    Set<Product<Id,T>> sum1=new HashSet<Product<Id,T>>(pending.sum);
    sum1.add(new Product<Id,T>(f1.value,Collections.<Id>emptySet()));
    return new Pending<Id,T>(sum1);
  }
  if (r1 instanceof Pending && r2 instanceof Final) {
    Final<?,T> f2=(Final<?,T>)r2;
    Pending<Id,T> pending=(Pending<Id,T>)r1;
    Set<Product<Id,T>> sum1=new HashSet<Product<Id,T>>(pending.sum);
    sum1.add(new Product<Id,T>(f2.value,Collections.<Id>emptySet()));
    return new Pending<Id,T>(sum1);
  }
  Pending<Id,T> pending1=(Pending<Id,T>)r1;
  Pending<Id,T> pending2=(Pending<Id,T>)r2;
  Set<Product<Id,T>> sum=new HashSet<Product<Id,T>>();
  sum.addAll(pending1.sum);
  sum.addAll(pending2.sum);
  return new Pending<Id,T>(sum);
}
