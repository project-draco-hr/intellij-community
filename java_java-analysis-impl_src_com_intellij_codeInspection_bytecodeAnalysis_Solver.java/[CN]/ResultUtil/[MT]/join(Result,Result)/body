{
  if (r1 instanceof Final && ((Final)r1).value == top) {
    return r1;
  }
  if (r2 instanceof Final && ((Final)r2).value == top) {
    return r2;
  }
  if (r1 instanceof Final && r2 instanceof Final) {
    return new Final(lattice.join(((Final)r1).value,((Final)r2).value));
  }
  if (r1 instanceof Final && r2 instanceof Pending) {
    Final f1=(Final)r1;
    Pending pending=(Pending)r2;
    Set<Product> sum1=new HashSet<>(pending.sum);
    sum1.add(new Product(f1.value,Collections.<Key>emptySet()));
    return new Pending(sum1);
  }
  if (r1 instanceof Pending && r2 instanceof Final) {
    Final f2=(Final)r2;
    Pending pending=(Pending)r1;
    Set<Product> sum1=new HashSet<>(pending.sum);
    sum1.add(new Product(f2.value,Collections.<Key>emptySet()));
    return new Pending(sum1);
  }
  Pending pending1=(Pending)r1;
  Pending pending2=(Pending)r2;
  Set<Product> sum=new HashSet<>();
  sum.addAll(pending1.sum);
  sum.addAll(pending2.sum);
  checkLimit(sum);
  return new Pending(sum);
}
