{
  while (!moving.empty()) {
    HKey id=moving.pop();
    Value value=solved.get(id);
    HKey[] pIds=id.stable ? new HKey[]{id,id.negate()} : new HKey[]{id.negate(),id};
    Value[] pVals=id.stable ? new Value[]{value,value} : new Value[]{value,lattice.top};
    for (int i=0; i < pIds.length; i++) {
      HKey pId=pIds[i];
      Value pVal=pVals[i];
      HashSet<HKey> dIds=dependencies.get(pId);
      if (dIds == null) {
        continue;
      }
      for (      HKey dId : dIds) {
        HPending pend=pending.remove(dId);
        if (pend != null) {
          HResult pend1=substitute(pend,pId,pVal);
          if (pend1 instanceof HFinal) {
            HFinal fi=(HFinal)pend1;
            solved.put(dId,fi.value);
            moving.push(dId);
          }
 else {
            pending.put(dId,(HPending)pend1);
          }
        }
      }
    }
  }
  pending.clear();
  return solved;
}
