{
  for (  HEquation hEquation : equations.values()) {
    queueEquation(hEquation);
  }
  while (!moving.empty()) {
    HKey id=moving.pop();
    Value value=solved.get(id);
    HKey[] initialPIds=id.stable ? new HKey[]{id,id.invertStability()} : new HKey[]{id.invertStability(),id};
    Value[] initialPVals=id.stable ? new Value[]{value,value} : new Value[]{value,unstableValue};
    HKey[] pIds=new HKey[]{initialPIds[0],initialPIds[1],initialPIds[0].negate(),initialPIds[1].negate()};
    Value[] pVals=new Value[]{initialPVals[0],initialPVals[1],negate(initialPVals[0]),negate(initialPVals[1])};
    for (int i=0; i < pIds.length; i++) {
      HKey pId=pIds[i];
      Value pVal=pVals[i];
      HashSet<HKey> dIds=dependencies.get(pId);
      if (dIds == null) {
        continue;
      }
      for (      HKey dId : dIds) {
        HPending pend=pending.remove(dId);
        if (pend != null) {
          HResult pend1=substitute(pend,pId,pVal);
          if (pend1 instanceof HFinal) {
            HFinal fi=(HFinal)pend1;
            solved.put(dId,fi.value);
            moving.push(dId);
          }
 else {
            pending.put(dId,(HPending)pend1);
          }
        }
      }
    }
  }
  pending.clear();
  return solved;
}
