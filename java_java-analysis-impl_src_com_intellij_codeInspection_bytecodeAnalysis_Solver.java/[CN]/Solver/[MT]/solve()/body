{
  while (!moving.empty()) {
    long id=moving.pop();
    Value value=solved.get(id);
    boolean stable=id > 0;
    long[] pIds=stable ? new long[]{id,-id} : new long[]{-id,id};
    Value[] pVals=stable ? new Value[]{value,value} : new Value[]{value,lattice.top};
    for (int i=0; i < pIds.length; i++) {
      long pId=pIds[i];
      Value pVal=pVals[i];
      TLongHashSet dIds=dependencies.get(pId);
      if (dIds == null) {
        continue;
      }
      TLongIterator dIdsIterator=dIds.iterator();
      while (dIdsIterator.hasNext()) {
        long dId=dIdsIterator.next();
        IdPending pend=pending.remove(dId);
        if (pend != null) {
          IdResult pend1=substitute(pend,pId,pVal);
          if (pend1 instanceof IdFinal) {
            IdFinal fi=(IdFinal)pend1;
            solved.put(dId,fi.value);
            moving.push(dId);
          }
 else {
            pending.put(dId,(IdPending)pend1);
          }
        }
      }
    }
  }
  pending.clear();
  return solved;
}
