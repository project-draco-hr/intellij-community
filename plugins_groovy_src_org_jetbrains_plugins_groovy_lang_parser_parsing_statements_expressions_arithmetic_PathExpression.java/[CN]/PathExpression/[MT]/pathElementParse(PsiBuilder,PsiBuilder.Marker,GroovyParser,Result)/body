{
  if (DOTS.contains(builder.getTokenType()) || ParserUtils.lookAhead(builder,mNLS,mDOT)) {
    if (ParserUtils.lookAhead(builder,mNLS,mDOT)) {
      ParserUtils.getToken(builder,mNLS);
    }
    ParserUtils.getToken(builder,DOTS);
    ParserUtils.getToken(builder,mNLS);
    TypeArguments.parseTypeArguments(builder,true);
    GroovyElementType res=namePartParse(builder,parser);
    if (res != WRONGWAY) {
      PsiBuilder.Marker newMarker=marker.precede();
      marker.done(res);
      return parseAfterReference(builder,parser,newMarker);
    }
 else {
      builder.error(GroovyBundle.message("path.selector.expected"));
      marker.drop();
      return result;
    }
  }
 else   if (checkForLParenth(builder)) {
    PrimaryExpression.methodCallArgsParse(builder,parser);
    return parseAfterArguments(builder,marker,parser);
  }
 else   if (checkForLCurly(builder)) {
    ParserUtils.getToken(builder,mNLS);
    appendedBlockParse(builder,parser);
    return parseAfterArguments(builder,marker,parser);
  }
 else   if (checkForArrayAccess(builder)) {
    indexPropertyArgsParse(builder,parser);
    PsiBuilder.Marker newMarker=marker.precede();
    marker.done(PATH_INDEX_PROPERTY);
    return parseAfterReference(builder,parser,newMarker);
  }
 else {
    marker.drop();
    return result;
  }
}
