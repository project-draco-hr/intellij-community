{
  int parameterIndex=myMethod.getParameterList().getParameterIndex(myParameter);
  final Map<PsiVariable,PsiElement> localToParamRef=new HashMap<>();
  final PsiExpression[] arguments=myMethodCall.getArgumentList().getExpressions();
  for (int i=0; i < arguments.length; i++) {
    if (i != parameterIndex && arguments[i] instanceof PsiReferenceExpression) {
      final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)arguments[i];
      final PsiElement element=referenceExpression.resolve();
      if (element instanceof PsiLocalVariable || element instanceof PsiParameter) {
        final PsiParameter param=myMethod.getParameterList().getParameters()[i];
        final PsiExpression paramRef=JavaPsiFacade.getInstance(myMethod.getProject()).getElementFactory().createExpressionFromText(param.getName(),myMethod);
        localToParamRef.put((PsiVariable)element,paramRef);
      }
    }
  }
  final List<UsageInfo> result=new ArrayList<>();
  myInitializer.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitReferenceExpression(    final PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      final PsiElement element=expression.resolve();
      if (element instanceof PsiLocalVariable) {
        final PsiLocalVariable localVariable=(PsiLocalVariable)element;
        final PsiElement[] elements=DefUseUtil.getDefs(myCallingBlock,localVariable,expression);
        if (elements.length == 1) {
          PsiExpression localInitializer=null;
          if (elements[0] instanceof PsiLocalVariable) {
            localInitializer=((PsiLocalVariable)elements[0]).getInitializer();
          }
 else           if (elements[0] instanceof PsiAssignmentExpression) {
            localInitializer=((PsiAssignmentExpression)elements[0]).getRExpression();
          }
 else           if (elements[0] instanceof PsiReferenceExpression) {
            final PsiReferenceExpression refElement=(PsiReferenceExpression)elements[0];
            final PsiElement parent=refElement.getParent();
            if (parent instanceof PsiAssignmentExpression && ((PsiAssignmentExpression)parent).getLExpression() == refElement) {
              localInitializer=((PsiAssignmentExpression)parent).getRExpression();
            }
          }
          if (localInitializer != null) {
            final PsiElement replacement;
            if (localToParamRef.containsKey(localVariable)) {
              replacement=localToParamRef.get(localVariable);
            }
 else {
              replacement=replaceArgs(localToParamRef,localInitializer.copy());
            }
            result.add(new LocalReplacementUsageInfo(expression,replacement));
          }
        }
      }
    }
  }
);
  if (!myCreateLocal) {
    for (    PsiReference ref : ReferencesSearch.search(myParameter).findAll()) {
      result.add(new UsageInfo(ref));
    }
  }
  final PsiParameter[] parameters=myMethod.getParameterList().getParameters();
  final List<ParameterInfoImpl> psiParameters=new ArrayList<>();
  int paramIdx=0;
  final String paramName=myParameter.getName();
  for (  PsiParameter param : parameters) {
    if (!Comparing.strEqual(paramName,param.getName())) {
      psiParameters.add(new ParameterInfoImpl(paramIdx,param.getName(),param.getType()));
    }
    paramIdx++;
  }
  PsiType returnType=myMethod.getReturnType();
  myChangeInfo=new JavaChangeInfoImpl(VisibilityUtil.getVisibilityModifier(myMethod.getModifierList()),myMethod,myMethod.getName(),returnType != null ? CanonicalTypes.createTypeWrapper(returnType) : null,psiParameters.toArray(new ParameterInfoImpl[psiParameters.size()]),null,false,Collections.emptySet(),Collections.emptySet());
  myChangeSignatureUsages=ChangeSignatureProcessorBase.findUsages(myChangeInfo);
  final UsageInfo[] usageInfos=result.toArray(new UsageInfo[result.size()]);
  return UsageViewUtil.removeDuplicatedUsages(usageInfos);
}
