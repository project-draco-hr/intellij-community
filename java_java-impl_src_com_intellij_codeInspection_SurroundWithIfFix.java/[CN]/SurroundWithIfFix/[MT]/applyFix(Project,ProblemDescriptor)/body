{
  PsiElement element=descriptor.getPsiElement();
  PsiElement anchorStatement=RefactoringUtil.getParentStatement(element,false);
  LOG.assertTrue(anchorStatement != null);
  if (!FileModificationService.getInstance().preparePsiElementForWrite(element))   return;
  if (anchorStatement.getParent() instanceof PsiLambdaExpression) {
    final PsiElement body=((PsiLambdaExpression)RefactoringUtil.expandExpressionLambdaToCodeBlock(anchorStatement)).getBody();
    LOG.assertTrue(body instanceof PsiCodeBlock);
    anchorStatement=((PsiCodeBlock)body).getStatements()[0];
  }
  Editor editor=PsiUtilBase.findEditor(anchorStatement);
  if (editor == null)   return;
  PsiFile file=anchorStatement.getContainingFile();
  PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
  Document document=documentManager.getDocument(file);
  if (document == null || !FileModificationService.getInstance().prepareFileForWrite(file))   return;
  PsiElement[] elements={anchorStatement};
  PsiElement prev=PsiTreeUtil.skipSiblingsBackward(anchorStatement,PsiWhiteSpace.class);
  if (prev instanceof PsiComment && JavaSuppressionUtil.getSuppressedInspectionIdsIn(prev) != null) {
    elements=new PsiElement[]{prev,anchorStatement};
  }
  try {
    TextRange textRange=new JavaWithIfSurrounder().surroundElements(project,editor,elements);
    if (textRange == null)     return;
    @NonNls String newText=myText + " != null";
    document.replaceString(textRange.getStartOffset(),textRange.getEndOffset(),newText);
    editor.getCaretModel().moveToOffset(textRange.getEndOffset() + newText.length());
    PsiDocumentManager.getInstance(project).commitAllDocuments();
    new MergeIfAndIntention().invoke(project,editor,file);
    editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
