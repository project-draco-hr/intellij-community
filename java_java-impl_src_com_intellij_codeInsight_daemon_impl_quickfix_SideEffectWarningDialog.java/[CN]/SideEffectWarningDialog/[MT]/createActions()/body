{
  List<AbstractAction> actions=new ArrayList<>();
  myRemoveAllAction=new AbstractAction(){
{
      UIUtil.setActionNameAndMnemonic(QuickFixBundle.message("side.effect.action.remove"),this);
      putValue(DEFAULT_ACTION,this);
    }
    @Override public void actionPerformed(    @NotNull ActionEvent e){
      close(RemoveUnusedVariableUtil.RemoveMode.DELETE_ALL.ordinal());
    }
  }
;
  actions.add(myRemoveAllAction);
  if (myCanCopeWithSideEffects) {
    AbstractAction makeStmtAction=new AbstractAction(){
{
        UIUtil.setActionNameAndMnemonic(QuickFixBundle.message("side.effect.action.transform"),this);
      }
      @Override public void actionPerformed(      @NotNull ActionEvent e){
        close(RemoveUnusedVariableUtil.RemoveMode.MAKE_STATEMENT.ordinal());
      }
    }
;
    actions.add(makeStmtAction);
  }
  myCancelAllAction=new AbstractAction(){
{
      UIUtil.setActionNameAndMnemonic(QuickFixBundle.message("side.effect.action.cancel"),this);
    }
    @Override public void actionPerformed(    @NotNull ActionEvent e){
      doCancelAction();
    }
  }
;
  actions.add(myCancelAllAction);
  return actions.toArray(new Action[actions.size()]);
}
