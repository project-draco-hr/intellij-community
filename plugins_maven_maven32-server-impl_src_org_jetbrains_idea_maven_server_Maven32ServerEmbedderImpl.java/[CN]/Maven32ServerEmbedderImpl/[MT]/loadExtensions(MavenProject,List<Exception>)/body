{
  ClassLoader originalClassLoader=Thread.currentThread().getContextClassLoader();
  Collection<AbstractMavenLifecycleParticipant> lifecycleParticipants=getLifecycleParticipants(Arrays.asList(project));
  if (!lifecycleParticipants.isEmpty()) {
    LegacySupport legacySupport=getComponent(LegacySupport.class);
    MavenSession session=legacySupport.getSession();
    session.setCurrentProject(project);
    session.setAllProjects(Arrays.asList(project));
    session.setProjects(Arrays.asList(project));
    for (    AbstractMavenLifecycleParticipant listener : lifecycleParticipants) {
      Thread.currentThread().setContextClassLoader(listener.getClass().getClassLoader());
      try {
        listener.afterProjectsRead(session);
      }
 catch (      Exception e) {
        exceptions.add(e);
      }
 finally {
        Thread.currentThread().setContextClassLoader(originalClassLoader);
      }
    }
  }
}
