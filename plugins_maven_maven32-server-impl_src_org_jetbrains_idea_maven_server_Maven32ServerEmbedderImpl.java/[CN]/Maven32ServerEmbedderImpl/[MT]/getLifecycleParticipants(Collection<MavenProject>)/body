{
  Collection<AbstractMavenLifecycleParticipant> lifecycleListeners=new LinkedHashSet<AbstractMavenLifecycleParticipant>();
  ClassLoader originalClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    try {
      lifecycleListeners.addAll(myContainer.lookupList(AbstractMavenLifecycleParticipant.class));
    }
 catch (    ComponentLookupException e) {
      warn("Failed to lookup lifecycle participants",e);
    }
    Collection<ClassLoader> scannedRealms=new HashSet<ClassLoader>();
    for (    MavenProject project : projects) {
      ClassLoader projectRealm=project.getClassRealm();
      if (projectRealm != null && scannedRealms.add(projectRealm)) {
        Thread.currentThread().setContextClassLoader(projectRealm);
        try {
          lifecycleListeners.addAll(myContainer.lookupList(AbstractMavenLifecycleParticipant.class));
        }
 catch (        ComponentLookupException e) {
          warn("Failed to lookup lifecycle participants",e);
        }
      }
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(originalClassLoader);
  }
  return lifecycleListeners;
}
