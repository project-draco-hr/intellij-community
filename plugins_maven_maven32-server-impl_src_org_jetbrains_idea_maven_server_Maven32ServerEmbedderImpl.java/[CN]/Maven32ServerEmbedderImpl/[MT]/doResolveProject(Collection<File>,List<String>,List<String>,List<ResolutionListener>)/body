{
  final File file=files.size() == 1 ? files.iterator().next() : null;
  final MavenExecutionRequest request=createRequest(file,activeProfiles,inactiveProfiles,Collections.<String>emptyList());
  request.setUpdateSnapshots(myAlwaysUpdateSnapshots);
  final Collection<MavenExecutionResult> executionResults=ContainerUtil.newArrayList();
  executeWithMavenSession(request,new Runnable(){
    @Override public void run(){
      try {
        List<ProjectBuildingResult> buildingResults=getProjectBuildingResults(request,files);
        for (        ProjectBuildingResult buildingResult : buildingResults) {
          MavenProject project=buildingResult.getProject();
          if (project == null) {
            List<Exception> exceptions=new ArrayList<Exception>();
            for (            ModelProblem problem : buildingResult.getProblems()) {
              exceptions.add(problem.getException());
            }
            MavenExecutionResult mavenExecutionResult=new MavenExecutionResult(buildingResult.getPomFile(),exceptions);
            executionResults.add(mavenExecutionResult);
            continue;
          }
          RepositorySystemSession repositorySession=getComponent(LegacySupport.class).getRepositorySession();
          if (repositorySession instanceof DefaultRepositorySystemSession) {
            DefaultRepositorySystemSession session=(DefaultRepositorySystemSession)repositorySession;
            session.setTransferListener(new TransferListenerAdapter(myCurrentIndicator));
            if (myWorkspaceMap != null) {
              session.setWorkspaceReader(new Maven32WorkspaceReader(myWorkspaceMap));
            }
            session.setConfigProperty(ConflictResolver.CONFIG_PROP_VERBOSE,true);
            session.setConfigProperty(DependencyManagerUtils.CONFIG_PROP_VERBOSE,true);
          }
          List<Exception> exceptions=new ArrayList<Exception>();
          loadExtensions(project,exceptions);
          project.setDependencyArtifacts(project.createArtifacts(getComponent(ArtifactFactory.class),null,null));
          if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) {
            addMvn2CompatResults(project,exceptions,listeners,myLocalRepository,executionResults);
          }
 else {
            final DependencyResolutionResult dependencyResolutionResult=resolveDependencies(project,repositorySession);
            final List<Dependency> dependencies=dependencyResolutionResult.getDependencies();
            final Map<Dependency,Artifact> winnerDependencyMap=new HashMap<Dependency,Artifact>();
            Set<Artifact> artifacts=new LinkedHashSet<Artifact>(dependencies.size());
            dependencyResolutionResult.getDependencyGraph().accept(new TreeDependencyVisitor(new DependencyVisitor(){
              @Override public boolean visitEnter(              org.eclipse.aether.graph.DependencyNode node){
                Artifact winnerArtifact=null;
                final Map<?,?> data=node.getData();
                final Object winner=data.get(ConflictResolver.NODE_DATA_WINNER);
                if (winner instanceof org.eclipse.aether.graph.DependencyNode) {
                  org.eclipse.aether.graph.DependencyNode winnerNode=(org.eclipse.aether.graph.DependencyNode)winner;
                  if (!StringUtil.equals(node.getVersion().toString(),winnerNode.getVersion().toString())) {
                    Dependency winnerNodeDependency=winnerNode.getDependency();
                    winnerArtifact=RepositoryUtils.toArtifact(winnerNodeDependency.getArtifact());
                    winnerArtifact.setScope(winnerNodeDependency.getScope());
                    winnerArtifact.setOptional(winnerNodeDependency.isOptional());
                  }
                }
                final Dependency dependency=node.getDependency();
                if (dependency != null) {
                  if (winnerArtifact == null) {
                    winnerArtifact=RepositoryUtils.toArtifact(node.getArtifact());
                    winnerArtifact.setScope(dependency.getScope());
                    winnerArtifact.setOptional(dependency.isOptional());
                  }
                  winnerDependencyMap.put(dependency,winnerArtifact);
                }
                return true;
              }
              @Override public boolean visitLeave(              org.eclipse.aether.graph.DependencyNode node){
                return true;
              }
            }
));
            for (            Dependency dependency : dependencies) {
              final Artifact artifact=winnerDependencyMap.get(dependency);
              if (artifact != null) {
                artifacts.add(artifact);
                resolveAsModule(artifact);
              }
            }
            project.setArtifacts(artifacts);
            executionResults.add(new MavenExecutionResult(project,dependencyResolutionResult,exceptions));
          }
        }
      }
 catch (      Exception e) {
        executionResults.add(handleException(e));
      }
    }
  }
);
  return executionResults;
}
