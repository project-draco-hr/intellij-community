{
  final File file=files.size() == 1 ? files.iterator().next() : null;
  final MavenExecutionRequest request=createRequest(file,activeProfiles,inactiveProfiles,Collections.<String>emptyList());
  request.setUpdateSnapshots(myAlwaysUpdateSnapshots);
  final Collection<MavenExecutionResult> executionResults=ContainerUtil.newArrayList();
  executeWithMavenSession(request,new Runnable(){
    @Override public void run(){
      try {
        ProjectBuilder builder=getComponent(ProjectBuilder.class);
        CustomMaven3ModelInterpolator2 modelInterpolator=(CustomMaven3ModelInterpolator2)getComponent(ModelInterpolator.class);
        String savedLocalRepository=modelInterpolator.getLocalRepository();
        modelInterpolator.setLocalRepository(request.getLocalRepositoryPath().getAbsolutePath());
        List<ProjectBuildingResult> buildingResults;
        try {
          buildingResults=builder.build(new ArrayList<File>(files),false,request.getProjectBuildingRequest());
        }
  finally {
          modelInterpolator.setLocalRepository(savedLocalRepository);
        }
        for (        ProjectBuildingResult buildingResult : buildingResults) {
          MavenProject project=buildingResult.getProject();
          RepositorySystemSession repositorySession=getComponent(LegacySupport.class).getRepositorySession();
          if (repositorySession instanceof DefaultRepositorySystemSession) {
            ((DefaultRepositorySystemSession)repositorySession).setTransferListener(new TransferListenerAdapter(myCurrentIndicator));
            if (myWorkspaceMap != null) {
              ((DefaultRepositorySystemSession)repositorySession).setWorkspaceReader(new Maven32WorkspaceReader(myWorkspaceMap));
            }
          }
          List<Exception> exceptions=new ArrayList<Exception>();
          loadExtensions(project,exceptions);
          project.setDependencyArtifacts(project.createArtifacts(getComponent(ArtifactFactory.class),null,null));
          if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) {
            ArtifactResolutionRequest resolutionRequest=new ArtifactResolutionRequest();
            resolutionRequest.setArtifactDependencies(project.getDependencyArtifacts());
            resolutionRequest.setArtifact(project.getArtifact());
            resolutionRequest.setManagedVersionMap(project.getManagedVersionMap());
            resolutionRequest.setLocalRepository(myLocalRepository);
            resolutionRequest.setRemoteRepositories(project.getRemoteArtifactRepositories());
            resolutionRequest.setListeners(listeners);
            resolutionRequest.setResolveRoot(false);
            resolutionRequest.setResolveTransitively(true);
            ArtifactResolver resolver=getComponent(ArtifactResolver.class);
            ArtifactResolutionResult result=resolver.resolve(resolutionRequest);
            project.setArtifacts(result.getArtifacts());
            executionResults.add(new MavenExecutionResult(project,exceptions));
          }
 else {
            final DependencyResolutionResult dependencyResolutionResult=resolveDependencies(project,repositorySession);
            final List<Dependency> dependencies=dependencyResolutionResult.getDependencies();
            Set<Artifact> artifacts=new LinkedHashSet<Artifact>(dependencies.size());
            for (            Dependency dependency : dependencies) {
              final Artifact artifact=RepositoryUtils.toArtifact(dependency.getArtifact());
              artifact.setScope(dependency.getScope());
              artifact.setOptional(dependency.isOptional());
              artifacts.add(artifact);
              resolveAsModule(artifact);
            }
            project.setArtifacts(artifacts);
            executionResults.add(new MavenExecutionResult(project,dependencyResolutionResult,exceptions));
          }
        }
      }
 catch (      Exception e) {
        executionResults.add(handleException(e));
      }
    }
  }
);
  return executionResults;
}
