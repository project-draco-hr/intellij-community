{
  Collection<PropertiesFile> createdFiles=ContainerUtil.map(files,new NotNullFunction<PsiFile,PropertiesFile>(){
    @NotNull @Override public PropertiesFile fun(    PsiFile dom){
      final PropertiesFile file=PropertiesImplUtil.getPropertiesFile(dom);
      LOG.assertTrue(file != null,dom.getName());
      return file;
    }
  }
);
  ResourceBundle mainBundle=myResourceBundle;
  final Set<ResourceBundle> allBundles=new HashSet<ResourceBundle>();
  if (mainBundle != null) {
    allBundles.add(mainBundle);
  }
  boolean needCombining=false;
  for (  PropertiesFile file : createdFiles) {
    final ResourceBundle rb=file.getResourceBundle();
    if (mainBundle == null) {
      mainBundle=rb;
    }
 else     if (!mainBundle.equals(rb)) {
      needCombining=true;
    }
    allBundles.add(rb);
  }
  if (needCombining) {
    final List<PropertiesFile> toCombine=new ArrayList<PropertiesFile>(createdFiles);
    final String baseName=getBaseName();
    if (myResourceBundle != null) {
      toCombine.addAll(myResourceBundle.getPropertiesFiles());
    }
    ResourceBundleManager manager=ResourceBundleManager.getInstance(mainBundle.getProject());
    for (    ResourceBundle bundle : allBundles) {
      manager.dissociateResourceBundle(bundle);
    }
    manager.combineToResourceBundle(toCombine,baseName);
  }
}
