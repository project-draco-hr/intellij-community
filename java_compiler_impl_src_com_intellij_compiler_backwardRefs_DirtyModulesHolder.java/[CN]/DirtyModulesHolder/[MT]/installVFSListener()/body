{
  PsiManager.getInstance(myService.getProject()).addPsiTreeChangeListener(new PsiTreeChangeAdapter(){
    @Override public void beforeChildAddition(    @NotNull PsiTreeChangeEvent event){
      psiChanged(event.getFile(),event.getParent());
    }
    @Override public void beforeChildRemoval(    @NotNull PsiTreeChangeEvent event){
      psiChanged(event.getFile(),event.getParent());
    }
    @Override public void beforeChildReplacement(    @NotNull PsiTreeChangeEvent event){
      psiChanged(event.getFile(),event.getParent());
    }
    @Override public void beforeChildMovement(    @NotNull PsiTreeChangeEvent event){
      final PsiFile file=event.getFile();
      if (file != null) {
        psiChanged(file,null);
      }
 else {
        psiChanged(null,event.getOldParent());
        psiChanged(null,event.getNewParent());
      }
    }
    @Override public void beforeChildrenChange(    @NotNull PsiTreeChangeEvent event){
      psiChanged(event.getFile(),event.getParent());
    }
    @Override public void beforePropertyChange(    @NotNull PsiTreeChangeEvent event){
      if (PsiTreeChangeEvent.PROP_UNLOADED_PSI.equals(event.getPropertyName()) || PsiTreeChangeEvent.PROP_WRITABLE.equals(event.getPropertyName()))       return;
      psiChanged(event.getFile(),event.getParent());
    }
    private void psiChanged(    @Nullable PsiFile psiFile,    @Nullable PsiElement parent){
      final VirtualFile file;
      if (psiFile != null) {
        file=psiFile.getVirtualFile();
      }
 else       if (parent instanceof PsiFileSystemItem) {
        file=((PsiFileSystemItem)parent).getVirtualFile();
      }
 else {
        return;
      }
      if (myService.getFileIndex().isInSourceContent(file) && myService.getFileTypes().contains(file.getFileType())) {
        final Module module=myService.getFileIndex().getModuleForFile(file);
        if (module != null) {
synchronized (myLock) {
            if (myCompilationPhase) {
              myChangedModulesDuringCompilation.add(module);
            }
 else {
              myChangedModules.add(module);
            }
          }
        }
      }
    }
  }
);
}
