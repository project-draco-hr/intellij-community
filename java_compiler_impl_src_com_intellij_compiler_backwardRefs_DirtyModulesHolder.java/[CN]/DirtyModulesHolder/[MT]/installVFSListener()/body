{
  VirtualFileManager.getInstance().addVirtualFileListener(new VirtualFileAdapter(){
    @Override public void fileCreated(    @NotNull VirtualFileEvent event){
      processChange(event.getFile());
    }
    @Override public void fileCopied(    @NotNull VirtualFileCopyEvent event){
      processChange(event.getFile());
    }
    @Override public void fileMoved(    @NotNull VirtualFileMoveEvent event){
      processChange(event.getFile());
    }
    @Override public void beforePropertyChange(    @NotNull VirtualFilePropertyEvent event){
      if (VirtualFile.PROP_NAME.equals(event.getPropertyName()) || VirtualFile.PROP_SYMLINK_TARGET.equals(event.getPropertyName())) {
        processChange(event.getFile());
      }
    }
    @Override public void beforeContentsChange(    @NotNull VirtualFileEvent event){
      processChange(event.getFile());
    }
    @Override public void beforeFileDeletion(    @NotNull VirtualFileEvent event){
      processChange(event.getFile());
    }
    @Override public void beforeFileMovement(    @NotNull VirtualFileMoveEvent event){
      processChange(event.getFile());
    }
    private void processChange(    VirtualFile file){
      fileChanged(file);
    }
    void fileChanged(    VirtualFile file){
      final Module module=getModuleForSourceContentFile(file);
      if (module != null) {
synchronized (myLock) {
          if (myCompilationPhase) {
            myChangedModulesDuringCompilation.add(module);
          }
 else {
            myVFSChangedModules.add(module);
          }
        }
      }
    }
  }
,myService.getProject());
}
