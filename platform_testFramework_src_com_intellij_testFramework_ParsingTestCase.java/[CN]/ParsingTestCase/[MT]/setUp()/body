{
  super.setUp();
  initApplication();
  ComponentAdapter component=getApplication().getPicoContainer().getComponentAdapter(ProgressManager.class.getName());
  if (component == null) {
    getApplication().getPicoContainer().registerComponent(new AbstractComponentAdapter(ProgressManager.class.getName(),Object.class){
      @Override public Object getComponentInstance(      PicoContainer container) throws PicoInitializationException, PicoIntrospectionException {
        return new ProgressManagerImpl();
      }
      @Override public void verify(      PicoContainer container) throws PicoIntrospectionException {
      }
    }
);
  }
  Extensions.registerAreaClass("IDEA_PROJECT",null);
  myProject=new MockProjectEx(getTestRootDisposable());
  myPsiManager=new MockPsiManager(myProject);
  myFileFactory=new PsiFileFactoryImpl(myPsiManager);
  MutablePicoContainer appContainer=getApplication().getPicoContainer();
  registerComponentInstance(appContainer,MessageBus.class,MessageBusFactory.newMessageBus(getApplication()));
  registerComponentInstance(appContainer,SchemesManagerFactory.class,new MockSchemesManagerFactory());
  final MockEditorFactory editorFactory=new MockEditorFactory();
  registerComponentInstance(appContainer,EditorFactory.class,editorFactory);
  registerComponentInstance(appContainer,FileDocumentManager.class,new MockFileDocumentManagerImpl(new Function<CharSequence,Document>(){
    @Override public Document fun(    CharSequence charSequence){
      return editorFactory.createDocument(charSequence);
    }
  }
,FileDocumentManagerImpl.HARD_REF_TO_DOCUMENT_KEY));
  registerComponentInstance(appContainer,PsiDocumentManager.class,new MockPsiDocumentManager());
  registerApplicationService(PsiBuilderFactory.class,new PsiBuilderFactoryImpl());
  registerApplicationService(DefaultASTFactory.class,new DefaultASTFactoryImpl());
  registerApplicationService(ReferenceProvidersRegistry.class,new ReferenceProvidersRegistryImpl());
  myProject.registerService(CachedValuesManager.class,new CachedValuesManagerImpl(myProject,new PsiCachedValuesFactory(myPsiManager)));
  myProject.registerService(PsiManager.class,myPsiManager);
  myProject.registerService(StartupManager.class,new StartupManagerImpl(myProject));
  registerExtensionPoint(FileTypeFactory.FILE_TYPE_FACTORY_EP,FileTypeFactory.class);
  for (  ParserDefinition definition : myDefinitions) {
    addExplicitExtension(LanguageParserDefinitions.INSTANCE,definition.getFileNodeType().getLanguage(),definition);
  }
  if (myDefinitions.length > 0) {
    configureFromParserDefinition(myDefinitions[0],myFileExt);
  }
  final PomModelImpl pomModel=new PomModelImpl(myProject);
  myProject.registerService(PomModel.class,pomModel);
  new TreeAspect(pomModel);
}
