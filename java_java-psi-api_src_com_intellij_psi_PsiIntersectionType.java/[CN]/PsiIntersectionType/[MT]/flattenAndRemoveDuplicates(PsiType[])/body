{
  try {
    final Set<PsiType> flattenConjuncts=PsiCapturedWildcardType.guard.doPreventingRecursion(conjuncts,true,new Computable<Set<PsiType>>(){
      @Override public Set<PsiType> compute(){
        return flatten(conjuncts,ContainerUtil.<PsiType>newLinkedHashSet());
      }
    }
);
    if (flattenConjuncts == null) {
      return conjuncts;
    }
    return flattenConjuncts.toArray(createArray(flattenConjuncts.size()));
  }
 catch (  NoSuchElementException e) {
    throw new RuntimeException(Arrays.toString(conjuncts),e);
  }
}
