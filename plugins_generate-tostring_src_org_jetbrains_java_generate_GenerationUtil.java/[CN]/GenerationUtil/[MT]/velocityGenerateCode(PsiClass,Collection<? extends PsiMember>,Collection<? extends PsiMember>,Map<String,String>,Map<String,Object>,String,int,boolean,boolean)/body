{
  if (templateMacro == null) {
    return null;
  }
  StringWriter sw=new StringWriter();
  try {
    VelocityContext vc=new VelocityContext();
    logger.debug("Velocity Context - adding fields");
    final List<FieldElement> fieldElements=ElementUtils.getOnlyAsFieldElements(selectedMembers,selectedNotNullMembers,useAccessors);
    vc.put("fields",fieldElements);
    if (fieldElements.size() == 1) {
      vc.put("field",fieldElements.get(0));
    }
    PsiMember member=clazz != null ? clazz : ContainerUtil.getFirstItem(selectedMembers);
    logger.debug("Velocity Context - adding methods");
    vc.put("methods",ElementUtils.getOnlyAsMethodElements(selectedMembers));
    logger.debug("Velocity Context - adding members (fields and methods)");
    List<Element> elements=ElementUtils.getOnlyAsFieldAndMethodElements(selectedMembers,selectedNotNullMembers,useAccessors);
    if (sortElements != 0) {
      Collections.sort(elements,new ElementComparator(sortElements));
    }
    vc.put("members",elements);
    if (clazz != null) {
      ClassElement ce=ElementFactory.newClassElement(clazz);
      vc.put("class",ce);
      if (logger.isDebugEnabled())       logger.debug("Velocity Context - adding class: " + ce);
      vc.put("classname",useFullyQualifiedName ? ce.getQualifiedName() : ce.getName());
      vc.put("FQClassname",ce.getQualifiedName());
    }
    if (member != null) {
      vc.put("java_version",PsiAdapter.getJavaVersion(member));
      final Project project=member.getProject();
      vc.put("settings",CodeStyleSettingsManager.getSettings(project));
      vc.put("project",project);
    }
    vc.put("helper",GenerationHelper.class);
    vc.put("StringUtil",StringUtil.class);
    vc.put("NameUtil",NameUtil.class);
    for (    String paramName : contextMap.keySet()) {
      vc.put(paramName,contextMap.get(paramName));
    }
    if (logger.isDebugEnabled())     logger.debug("Velocity Macro:\n" + templateMacro);
    VelocityEngine velocity=VelocityFactory.getVelocityEngine();
    logger.debug("Executing velocity +++ START +++");
    velocity.evaluate(vc,sw,GenerateToStringWorker.class.getName(),templateMacro);
    logger.debug("Executing velocity +++ END +++");
    if (vc.get("autoImportPackages") != null) {
      params.put("autoImportPackages",(String)vc.get("autoImportPackages"));
    }
  }
 catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  Exception e) {
    throw new GenerateCodeException("Error in Velocity code generator",e);
  }
  return StringUtil.convertLineSeparators(sw.getBuffer().toString());
}
