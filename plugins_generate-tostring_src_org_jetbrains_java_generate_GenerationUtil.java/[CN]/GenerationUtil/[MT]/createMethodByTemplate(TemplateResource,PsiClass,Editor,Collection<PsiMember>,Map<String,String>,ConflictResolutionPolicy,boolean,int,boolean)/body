{
  String body=velocityGenerateCode(clazz,selectedMembers,params,template.getMethodBody(),sortElements,useFullyQualifiedName);
  if (logger.isDebugEnabled())   logger.debug("Method body generated from Velocity:\n" + body);
  body=StringUtil.convertLineSeparators(body);
  final JVMElementFactory topLevelFactory=JVMElementFactories.getFactory(clazz.getLanguage(),clazz.getProject());
  if (topLevelFactory == null) {
    return null;
  }
  PsiMethod newMethod;
  try {
    newMethod=topLevelFactory.createMethodFromText(template.getMethodSignature() + " { " + body+ " }",clazz);
    CodeStyleManager.getInstance(clazz.getProject()).reformat(newMethod);
  }
 catch (  IncorrectOperationException ignore) {
    HintManager.getInstance().showErrorHint(editor,"'toString()' method could not be created from template '" + template.getFileName() + '\'');
    return null;
  }
  PsiMethod existingMethod=clazz.findMethodBySignature(newMethod,false);
  PsiMethod createdMethod=policy.applyMethod(clazz,existingMethod,newMethod,editor);
  if (createdMethod == null) {
    return null;
  }
  if (hasOverrideAnnotation) {
    createdMethod.getModifierList().addAnnotation("java.lang.Override");
  }
  String existingJavaDoc=params.get("existingJavaDoc");
  String newJavaDoc=template.getJavaDoc();
  if (existingJavaDoc != null || newJavaDoc != null) {
    newJavaDoc=velocityGenerateCode(clazz,selectedMembers,params,newJavaDoc,sortElements,useFullyQualifiedName);
    if (logger.isDebugEnabled())     logger.debug("JavaDoc body generated from Velocity:\n" + newJavaDoc);
    applyJavaDoc(createdMethod,existingJavaDoc,newJavaDoc);
  }
  return createdMethod;
}
