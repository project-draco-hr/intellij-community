{
  if (templateMacro == null) {
    return null;
  }
  StringWriter sw=new StringWriter();
  try {
    VelocityContext vc=new VelocityContext();
    vc.put("java_version",PsiAdapter.getJavaVersion(clazz));
    logger.debug("Velocity Context - adding fields");
    vc.put("fields",ElementUtils.getOnlyAsFieldElements(selectedMembers));
    logger.debug("Velocity Context - adding methods");
    vc.put("methods",ElementUtils.getOnlyAsMethodElements(selectedMembers));
    logger.debug("Velocity Context - adding members (fields and methods)");
    List<Element> elements=ElementUtils.getOnlyAsFieldAndMethodElements(selectedMembers,selectedNotNullMembers);
    if (sortElements != 0) {
      Collections.sort(elements,new ElementComparator(sortElements));
    }
    vc.put("members",elements);
    ClassElement ce=ElementFactory.newClassElement(clazz);
    vc.put("class",ce);
    if (logger.isDebugEnabled())     logger.debug("Velocity Context - adding class: " + ce);
    vc.put("classname",useFullyQualifiedName ? ce.getQualifiedName() : ce.getName());
    vc.put("FQClassname",ce.getQualifiedName());
    vc.put("settings",CodeStyleSettingsManager.getSettings(clazz.getProject()));
    vc.put("helper",GenerationHelper.class);
    for (    String paramName : contextMap.keySet()) {
      vc.put(paramName,contextMap.get(paramName));
    }
    if (logger.isDebugEnabled())     logger.debug("Velocity Macro:\n" + templateMacro);
    VelocityEngine velocity=VelocityFactory.getVelocityEngine();
    logger.debug("Executing velocity +++ START +++");
    velocity.evaluate(vc,sw,GenerateToStringWorker.class.getName(),templateMacro);
    logger.debug("Executing velocity +++ END +++");
    if (vc.get("autoImportPackages") != null) {
      params.put("autoImportPackages",(String)vc.get("autoImportPackages"));
    }
  }
 catch (  Exception e) {
    throw new GenerateCodeException("Error in Velocity code generator",e);
  }
  return StringUtil.convertLineSeparators(sw.getBuffer().toString());
}
