{
  PsiReferenceExpression reference=null;
  if (expression instanceof PsiAssignmentExpression) {
    final PsiExpression left=PsiUtil.skipParenthesizedExprDown(((PsiAssignmentExpression)expression).getLExpression());
    if (left instanceof PsiReferenceExpression) {
      reference=(PsiReferenceExpression)left;
    }
  }
 else   if (expression instanceof PsiPostfixExpression) {
    final PsiExpression operand=PsiUtil.skipParenthesizedExprDown(((PsiPostfixExpression)expression).getOperand());
    final IElementType sign=((PsiPostfixExpression)expression).getOperationTokenType();
    if (operand instanceof PsiReferenceExpression && (sign == JavaTokenType.PLUSPLUS || sign == JavaTokenType.MINUSMINUS)) {
      reference=(PsiReferenceExpression)operand;
    }
  }
 else   if (expression instanceof PsiPrefixExpression) {
    final PsiExpression operand=PsiUtil.skipParenthesizedExprDown(((PsiPrefixExpression)expression).getOperand());
    final IElementType sign=((PsiPrefixExpression)expression).getOperationTokenType();
    if (operand instanceof PsiReferenceExpression && (sign == JavaTokenType.PLUSPLUS || sign == JavaTokenType.MINUSMINUS)) {
      reference=(PsiReferenceExpression)operand;
    }
  }
  final PsiElement resolved=reference == null ? null : reference.resolve();
  PsiVariable variable=resolved instanceof PsiVariable ? (PsiVariable)resolved : null;
  if (variable == null || !variable.hasModifierProperty(PsiModifier.FINAL))   return null;
  if (!canWriteToFinal(variable,expression,reference,containingFile)) {
    final String name=variable.getName();
    String description=JavaErrorMessages.message("assignment.to.final.variable",name);
    final HighlightInfo highlightInfo=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(reference.getTextRange()).descriptionAndTooltip(description).create();
    final PsiClass innerClass=getInnerClassVariableReferencedFrom(variable,expression);
    if (innerClass == null || variable instanceof PsiField) {
      QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createModifierListFix(variable,PsiModifier.FINAL,false,false));
    }
 else {
      QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createVariableAccessFromInnerClassFix(variable,innerClass));
    }
    return highlightInfo;
  }
  return null;
}
