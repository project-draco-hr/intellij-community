{
  if (variable instanceof ImplicitVariable)   return null;
  if (!PsiUtil.isAccessedForReading(expression))   return null;
  int startOffset=expression.getTextRange().getStartOffset();
  final PsiElement topBlock;
  if (variable.hasInitializer()) {
    topBlock=PsiUtil.getVariableCodeBlock(variable,variable);
    if (topBlock == null)     return null;
  }
 else {
    PsiElement scope=variable instanceof PsiField ? ((PsiField)variable).getContainingClass() : variable.getParent() != null ? variable.getParent().getParent() : null;
    if (scope instanceof PsiCodeBlock && scope.getParent() instanceof PsiSwitchStatement) {
      scope=PsiTreeUtil.getParentOfType(scope,PsiCodeBlock.class);
    }
    topBlock=FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression,scope);
    if (variable instanceof PsiField) {
      if (!variable.hasModifierProperty(PsiModifier.FINAL))       return null;
      if (PsiUtil.findEnclosingConstructorOrInitializer(expression) == null && HighlightUtil.findEnclosingFieldInitializer(expression) == null) {
        return null;
      }
      if (topBlock == null)       return null;
      final PsiElement parent=topBlock.getParent();
      if (inInnerClass(expression,((PsiField)variable).getContainingClass(),containingFile))       return null;
      final PsiCodeBlock block;
      final PsiClass aClass;
      if (parent instanceof PsiMethod) {
        PsiMethod constructor=(PsiMethod)parent;
        if (!containingFile.getManager().areElementsEquivalent(constructor.getContainingClass(),((PsiField)variable).getContainingClass()))         return null;
        if (variable.hasModifierProperty(PsiModifier.STATIC))         return null;
        final List<PsiMethod> redirectedConstructors=JavaHighlightUtil.getChainedConstructors(constructor);
        for (int j=0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) {
          PsiMethod redirectedConstructor=redirectedConstructors.get(j);
          PsiCodeBlock body=redirectedConstructor.getBody();
          if (body != null && variableDefinitelyAssignedIn(variable,body)) {
            return null;
          }
        }
        block=constructor.getBody();
        aClass=constructor.getContainingClass();
      }
 else       if (parent instanceof PsiClassInitializer) {
        final PsiClassInitializer classInitializer=(PsiClassInitializer)parent;
        if (!containingFile.getManager().areElementsEquivalent(classInitializer.getContainingClass(),((PsiField)variable).getContainingClass()))         return null;
        block=classInitializer.getBody();
        aClass=classInitializer.getContainingClass();
      }
 else {
        final PsiField field=(PsiField)variable;
        aClass=field.getContainingClass();
        if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass,field,field.hasModifierProperty(PsiModifier.STATIC))) {
          return null;
        }
        final PsiField anotherField=PsiTreeUtil.getTopmostParentOfType(expression,PsiField.class);
        int offset=startOffset;
        if (anotherField != null && anotherField.getContainingClass() == aClass && !field.hasModifierProperty(PsiModifier.STATIC)) {
          offset=0;
        }
        block=null;
        final PsiMethod[] constructors=aClass.getConstructors();
        for (        PsiMethod constructor : constructors) {
          if (offset < constructor.getTextRange().getStartOffset())           continue;
          PsiCodeBlock body=constructor.getBody();
          if (body != null && variableDefinitelyAssignedIn(variable,body)) {
            return null;
          }
          final List<PsiMethod> redirectedConstructors=JavaHighlightUtil.getChainedConstructors(constructor);
          for (int j=0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) {
            PsiMethod redirectedConstructor=redirectedConstructors.get(j);
            if (offset < redirectedConstructor.getTextRange().getStartOffset())             continue;
            PsiCodeBlock redirBody=redirectedConstructor.getBody();
            if (redirBody != null && variableDefinitelyAssignedIn(variable,redirBody)) {
              return null;
            }
          }
        }
      }
      if (aClass != null) {
        final PsiClassInitializer[] initializers=aClass.getInitializers();
        for (        PsiClassInitializer initializer : initializers) {
          PsiCodeBlock body=initializer.getBody();
          if (body == block)           break;
          boolean shouldCheckInitializerOrder=block == null || block.getParent() instanceof PsiClassInitializer;
          if (shouldCheckInitializerOrder && startOffset < initializer.getTextRange().getStartOffset())           continue;
          if (initializer.hasModifierProperty(PsiModifier.STATIC) == variable.hasModifierProperty(PsiModifier.STATIC)) {
            if (variableDefinitelyAssignedIn(variable,body))             return null;
          }
        }
      }
    }
  }
  if (topBlock == null)   return null;
  Collection<PsiReferenceExpression> codeBlockProblems=uninitializedVarProblems.get(topBlock);
  if (codeBlockProblems == null) {
    try {
      final ControlFlow controlFlow=getControlFlow(topBlock);
      codeBlockProblems=ControlFlowUtil.getReadBeforeWriteLocals(controlFlow);
    }
 catch (    AnalysisCanceledException e) {
      codeBlockProblems=Collections.emptyList();
    }
catch (    IndexNotReadyException e) {
      codeBlockProblems=Collections.emptyList();
    }
    uninitializedVarProblems.put(topBlock,codeBlockProblems);
  }
  if (codeBlockProblems.contains(expression)) {
    final String name=expression.getElement().getText();
    String description=JavaErrorMessages.message("variable.not.initialized",name);
    HighlightInfo highlightInfo=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create();
    QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createAddVariableInitializerFix(variable));
    if (variable instanceof PsiField) {
      QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createModifierListFix(variable,PsiModifier.FINAL,false,false));
    }
    return highlightInfo;
  }
  return null;
}
