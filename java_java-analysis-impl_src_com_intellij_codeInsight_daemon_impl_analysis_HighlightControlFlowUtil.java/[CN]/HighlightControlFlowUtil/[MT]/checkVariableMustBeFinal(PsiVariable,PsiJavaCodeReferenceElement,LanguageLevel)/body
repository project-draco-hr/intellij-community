{
  if (variable.hasModifierProperty(PsiModifier.FINAL))   return null;
  final PsiClass innerClass=getInnerClassVariableReferencedFrom(variable,context);
  if (innerClass != null) {
    if (variable instanceof PsiParameter) {
      final PsiElement parent=variable.getParent();
      if (parent instanceof PsiParameterList && parent.getParent() instanceof PsiLambdaExpression && notAccessedForWriting(variable,new LocalSearchScope(((PsiParameter)variable).getDeclarationScope()))) {
        return null;
      }
    }
    if (languageLevel.isAtLeast(LanguageLevel.JDK_1_8) && isEffectivelyFinal(variable,innerClass,context)) {
      return null;
    }
    final String description=JavaErrorMessages.message("variable.must.be.final",context.getText());
    final HighlightInfo highlightInfo=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(context).descriptionAndTooltip(description).create();
    QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createVariableAccessFromInnerClassFix(variable,innerClass));
    return highlightInfo;
  }
  return checkWriteToFinalInsideLambda(variable,context);
}
