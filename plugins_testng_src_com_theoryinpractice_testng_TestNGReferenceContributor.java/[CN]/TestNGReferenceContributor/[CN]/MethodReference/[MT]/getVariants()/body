{
  List<Object> list=new ArrayList<>();
  @NonNls String val=getValue();
  int hackIndex=val.indexOf(CompletionUtil.DUMMY_IDENTIFIER);
  if (hackIndex > -1) {
    val=val.substring(0,hackIndex);
  }
  final String className=StringUtil.getPackageName(val);
  PsiClass cls=getDependsClass(val);
  if (cls != null) {
    final PsiMethod current=PsiTreeUtil.getParentOfType(getElement(),PsiMethod.class);
    final String configAnnotation=TestNGUtil.getConfigAnnotation(current);
    final PsiMethod[] methods=cls.getMethods();
    for (    PsiMethod method : methods) {
      final String methodName=method.getName();
      if (current != null && methodName.equals(current.getName()))       continue;
      if (configAnnotation == null && TestNGUtil.hasTest(method) || configAnnotation != null && AnnotationUtil.isAnnotated(method,configAnnotation,true)) {
        final String nameToInsert=StringUtil.isEmpty(className) ? methodName : StringUtil.getQualifiedName(cls.getQualifiedName(),methodName);
        list.add(LookupElementBuilder.create(nameToInsert));
      }
    }
  }
  return list.toArray();
}
