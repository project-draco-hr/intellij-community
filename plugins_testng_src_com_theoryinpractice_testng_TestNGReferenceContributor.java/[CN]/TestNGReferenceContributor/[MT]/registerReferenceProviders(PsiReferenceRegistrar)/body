{
  registrar.registerReferenceProvider(getElementPattern("dependsOnMethods"),new PsiReferenceProvider(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final ProcessingContext context){
      return new MethodReference[]{new MethodReference((PsiLiteral)element)};
    }
  }
);
  registrar.registerReferenceProvider(getElementPattern("dataProvider"),new PsiReferenceProvider(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final ProcessingContext context){
      return new DataProviderReference[]{new DataProviderReference((PsiLiteral)element)};
    }
  }
);
  registrar.registerReferenceProvider(getElementPattern("groups"),new PsiReferenceProvider(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final ProcessingContext context){
      return new GroupReference[]{new GroupReference(element.getProject(),(PsiLiteral)element)};
    }
  }
);
  registrar.registerReferenceProvider(getElementPattern("dependsOnGroups"),new PsiReferenceProvider(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final ProcessingContext context){
      return new GroupReference[]{new GroupReference(element.getProject(),(PsiLiteral)element)};
    }
  }
);
}
