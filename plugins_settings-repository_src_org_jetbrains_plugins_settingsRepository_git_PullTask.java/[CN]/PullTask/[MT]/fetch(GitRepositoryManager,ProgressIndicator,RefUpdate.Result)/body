{
  StoredConfig config=manager.git.getRepository().getConfig();
  RemoteConfig remoteConfig=new RemoteConfig(config,Constants.DEFAULT_REMOTE_NAME);
  Transport transport=Transport.open(manager.git.getRepository(),remoteConfig);
  FetchResult fetchResult;
  try {
    transport.setCredentialsProvider(manager.getCredentialsProvider());
    fetchResult=transport.fetch(new JGitProgressMonitor(indicator),null);
  }
 catch (  TransportException e) {
    wrapIfNeedAndReThrow(e);
    return null;
  }
 finally {
    transport.close();
  }
  GitRepositoryManager.printMessages(fetchResult);
  Collection<TrackingRefUpdate> trackingRefUpdates=fetchResult.getTrackingRefUpdates();
  if (trackingRefUpdates.isEmpty()) {
    LOG.debug("No remote changes (ref updates is empty)");
  }
  if (LOG.isDebugEnabled()) {
    for (    TrackingRefUpdate refUpdate : trackingRefUpdates) {
      LOG.debug(refUpdate.toString());
    }
  }
  List<RefSpec> fetchRefSpecs=remoteConfig.getFetchRefSpecs();
  boolean hasChanges=false;
  for (  RefSpec fetchRefSpec : fetchRefSpecs) {
    TrackingRefUpdate refUpdate=fetchResult.getTrackingRefUpdate(fetchRefSpec.getDestination());
    if (refUpdate == null) {
      LOG.debug("No ref update for " + fetchRefSpec);
      continue;
    }
    RefUpdate.Result refUpdateResult=refUpdate.getResult();
    if (refUpdateResult == RefUpdate.Result.LOCK_FAILURE || refUpdateResult == RefUpdate.Result.IO_FAILURE) {
      if (prevRefUpdateResult == refUpdateResult) {
        throw new IOException("Ref update result " + refUpdateResult.name() + ", we have already tried to fetch again, but no luck");
      }
      LOG.warn("Ref update result " + refUpdateResult.name() + ", trying again after 500 ms");
      Thread.sleep(500);
      return fetch(manager,indicator,refUpdateResult);
    }
    if (!(refUpdateResult == RefUpdate.Result.FAST_FORWARD || refUpdateResult == RefUpdate.Result.NEW || refUpdateResult == RefUpdate.Result.FORCED)) {
      throw new UnsupportedOperationException("Unsupported ref update result");
    }
    if (!hasChanges) {
      hasChanges=refUpdateResult != RefUpdate.Result.NO_CHANGE;
    }
  }
  if (!hasChanges) {
    LOG.debug("No remote changes");
    return null;
  }
  String remoteBranchFullName=config.getString(ConfigConstants.CONFIG_BRANCH_SECTION,Constants.MASTER,ConfigConstants.CONFIG_KEY_MERGE);
  if (StringUtil.isEmpty(remoteBranchFullName)) {
    throw new IllegalStateException("branch.master.merge refspec must be specified");
  }
  Ref refToMerge=fetchResult.getAdvertisedRef(remoteBranchFullName);
  if (refToMerge == null) {
    throw new IllegalStateException("Could not get advertised ref");
  }
  return merge(config,manager.git,refToMerge);
}
