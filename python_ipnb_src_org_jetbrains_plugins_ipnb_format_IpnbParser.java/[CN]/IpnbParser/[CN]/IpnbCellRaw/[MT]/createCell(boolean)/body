{
  final IpnbCell cell;
  if (cell_type.equals("markdown")) {
    cell=new IpnbMarkdownCell(isValidSource ? source : Collections.emptyList(),metadata);
  }
 else   if (cell_type.equals("code")) {
    final List<IpnbOutputCell> outputCells=new ArrayList<>();
    for (    CellOutputRaw outputRaw : outputs) {
      outputCells.add(outputRaw.createOutput());
    }
    final Integer prompt=prompt_number != null ? prompt_number : execution_count;
    cell=new IpnbCodeCell(language == null ? "python" : language,input == null ? (isValidSource ? source : Collections.emptyList()) : input,prompt,outputCells,metadata);
  }
 else   if (cell_type.equals("raw")) {
    cell=new IpnbRawCell(isValidSource ? source : Collections.emptyList());
  }
 else   if (cell_type.equals("heading")) {
    cell=new IpnbHeadingCell(isValidSource ? source : Collections.emptyList(),level,metadata);
  }
 else {
    cell=null;
  }
  return cell;
}
