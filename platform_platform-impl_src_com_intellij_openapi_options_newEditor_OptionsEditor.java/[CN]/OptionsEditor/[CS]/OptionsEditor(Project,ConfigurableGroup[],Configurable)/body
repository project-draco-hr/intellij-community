{
  myProperties=PropertiesComponent.getInstance(project);
  mySettings=new Settings(groups){
    @Override protected ActionCallback selectImpl(    Configurable configurable){
      return OptionsEditor.this.select(configurable,"");
    }
  }
;
  mySearch=new SettingsSearch(){
    @Override protected void onTextKeyEvent(    final KeyEvent e){
      if (myTreeView != null) {
        myTreeView.myTree.processKeyEvent(e);
      }
 else {
        myTree.processTextEvent(e);
      }
    }
    @Override void delegateKeyEvent(    KeyEvent event){
      myFilter.myDocumentWasChanged=false;
      try {
        super.delegateKeyEvent(event);
      }
  finally {
        if (myFilter.myDocumentWasChanged && !isFilterFieldVisible()) {
          setFilterFieldVisible(true,false,false);
        }
      }
    }
  }
;
  if (Registry.is("ide.new.settings.dialog")) {
    mySearch.setBackground(UIUtil.SIDE_PANEL_BACKGROUND);
    mySearch.setBorder(new EmptyBorder(5,10,2,10));
  }
  myFilter=new SettingsFilter(project,groups,mySearch){
    @Override Configurable getConfigurable(    SimpleNode node){
      if (node instanceof OptionsTree.EditorNode) {
        return ((OptionsTree.EditorNode)node).getConfigurable();
      }
      return SettingsTreeView.getConfigurable(node);
    }
    @Override SimpleNode findNode(    Configurable configurable){
      return myTreeView != null ? myTreeView.findNode(configurable) : myTree.findNodeFor(configurable);
    }
    @Override void updateSpotlight(    boolean now){
      if (!now) {
        mySpotlightPainter.updateLater();
      }
 else {
        mySpotlightPainter.updateNow();
      }
    }
  }
;
  if (Registry.is("ide.new.settings.dialog")) {
    myTreeView=new SettingsTreeView(myFilter,groups);
    myTreeView.myTree.addKeyListener(mySearch);
    myTree=null;
  }
 else {
    myTreeView=null;
    myTree=new OptionsTree(myFilter,groups);
    myTree.addKeyListener(mySearch);
  }
  getContext().addColleague(myTreeView != null ? myTreeView : myTree);
  Disposer.register(this,myTreeView != null ? myTreeView : myTree);
  myLeftSide=new JPanel(new BorderLayout()){
    @Override public Dimension getMinimumSize(){
      Dimension dimension=super.getMinimumSize();
      JComponent component=myTreeView != null ? myTreeView : myTree;
      dimension.width=Math.max(component.getMinimumSize().width,mySearchWrapper.getPreferredSize().width);
      return dimension;
    }
  }
;
  myLeftSide.add(mySearchWrapper,BorderLayout.NORTH);
  myLeftSide.add(myTreeView != null ? myTreeView : myTree,BorderLayout.CENTER);
  setLayout(new BorderLayout());
  myMainSplitter=Registry.is("ide.new.settings.dialog") ? new OnePixelSplitter(false) : new Splitter(false);
  myMainSplitter.setFirstComponent(myLeftSide);
  myLoadingDecorator=new LoadingDecorator(myOwnDetails.getComponent(),this,150);
  myMainSplitter.setSecondComponent(myLoadingDecorator.getComponent());
  myMainSplitter.setProportion(readProportion(0.3f,MAIN_SPLITTER_PROPORTION));
  myContentWrapper.mySplitter.setProportion(readProportion(0.2f,DETAILS_SPLITTER_PROPORTION));
  add(myMainSplitter,BorderLayout.CENTER);
  MyColleague colleague=new MyColleague();
  getContext().addColleague(colleague);
  if (preselectedConfigurable != null) {
    selectInTree(preselectedConfigurable);
  }
 else {
    if (myTreeView != null) {
      myTreeView.selectFirst();
    }
 else {
      myTree.selectFirst();
    }
  }
  Toolkit.getDefaultToolkit().addAWTEventListener(this,AWTEvent.MOUSE_EVENT_MASK | AWTEvent.KEY_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK);
  ActionManager.getInstance().addAnActionListener(new AnActionListener(){
    @Override public void beforeActionPerformed(    AnAction action,    DataContext dataContext,    AnActionEvent event){
    }
    @Override public void afterActionPerformed(    AnAction action,    DataContext dataContext,    AnActionEvent event){
      queueModificationCheck();
    }
    @Override public void beforeEditorTyping(    char c,    DataContext dataContext){
    }
  }
,this);
  myModificationChecker=new MergingUpdateQueue("OptionsModificationChecker",1000,false,this,this,this);
  setFilterFieldVisible(true,false,false);
  new UiNotifyConnector.Once(this,new Activatable(){
    @Override public void showNotify(){
      myWindow=SwingUtilities.getWindowAncestor(OptionsEditor.this);
    }
    @Override public void hideNotify(){
    }
  }
);
}
