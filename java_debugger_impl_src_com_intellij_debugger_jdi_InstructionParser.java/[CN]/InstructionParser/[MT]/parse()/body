{
  final int codeEnd=myCode.length;
  int v=0;
  int instructionIndex=0;
  while (v < codeEnd) {
    if (instructionIndex++ >= myCurrentInstructionIndex) {
      break;
    }
    int opcode=myCode[v] & 0xFF;
    final byte opcodeType=opcode == Bytecodes.IMPDEP1 || opcode == Bytecodes.IMPDEP2 ? Bytecodes.NOARG_INSN : Bytecodes.TYPE[opcode];
switch (opcodeType) {
case Bytecodes.NOARG_INSN:
      v+=1;
    break;
case Bytecodes.IMPLVAR_INSN:
{
    final int varOpcode;
    if (opcode > Bytecodes.ISTORE) {
      opcode-=Bytecodes.ISTORE_0;
      varOpcode=Bytecodes.ISTORE + (opcode >> 2);
    }
 else {
      opcode-=Bytecodes.ILOAD_0;
      varOpcode=Bytecodes.ILOAD + (opcode >> 2);
    }
    final String signature=getVarInstructionTypeSignature(varOpcode);
    if (signature != null) {
      localVariableInstructionFound(varOpcode,opcode & 0x3,signature);
    }
    v+=1;
    break;
  }
case Bytecodes.LABEL_INSN:
v+=3;
break;
case Bytecodes.LABELW_INSN:
v+=5;
break;
case Bytecodes.WIDE_INSN:
{
opcode=myCode[v + 1] & 0xFF;
final String signature=getVarInstructionTypeSignature(opcode);
if (signature != null) {
localVariableInstructionFound(opcode,readUnsignedShort(v + 2),signature);
}
if (opcode == Bytecodes.IINC) {
v+=6;
}
 else {
v+=4;
}
break;
}
case Bytecodes.TABL_INSN:
v=v + 4 - (v & 3);
int min=readInt(v + 4);
int max=readInt(v + 8);
v+=12;
final int length=max - min + 1;
v+=4 * length;
break;
case Bytecodes.LOOK_INSN:
v=v + 4 - (v & 3);
final int len=readInt(v + 4);
v+=8 * (len + 1);
break;
case Bytecodes.VAR_INSN:
{
final String signature=getVarInstructionTypeSignature(opcode);
if (signature != null) {
localVariableInstructionFound(opcode,myCode[v + 1] & 0xFF,signature);
}
v+=2;
break;
}
case Bytecodes.SBYTE_INSN:
v+=2;
break;
case Bytecodes.SHORT_INSN:
v+=3;
break;
case Bytecodes.LDC_INSN:
v+=2;
break;
case Bytecodes.LDCW_INSN:
v+=3;
break;
case Bytecodes.FIELDORMETH_INSN:
case Bytecodes.ITFMETH_INSN:
{
if (opcode == Bytecodes.INVOKEINTERFACE) {
v+=5;
}
 else {
v+=3;
}
break;
}
case Bytecodes.INDYMETH_INSN:
{
v+=5;
break;
}
case Bytecodes.TYPE_INSN:
v+=3;
break;
case Bytecodes.IINC_INSN:
{
final String signature=getVarInstructionTypeSignature(opcode);
if (signature != null) {
localVariableInstructionFound(opcode,myCode[v + 1] & 0xFF,signature);
}
v+=3;
break;
}
default :
v+=4;
break;
}
}
}
