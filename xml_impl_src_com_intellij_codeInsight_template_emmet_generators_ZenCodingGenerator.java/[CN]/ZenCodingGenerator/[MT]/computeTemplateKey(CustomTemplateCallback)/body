{
  Editor editor=callback.getEditor();
  final int currentOffset=editor.getCaretModel().getOffset();
  final CharSequence documentText=editor.getDocument().getCharsSequence();
  PsiElement element=callback.getContext();
  int line=editor.getCaretModel().getLogicalPosition().line;
  int lineStart=editor.getDocument().getLineStartOffset(line);
  int elementStart=-1;
  do {
    PsiElement e=element;
    while ((e instanceof LeafPsiElement && VALID_LEAF_TYPES.contains(((LeafPsiElement)e).getElementType())) || e instanceof PsiWhiteSpace || e instanceof PsiErrorElement) {
      elementStart=e.getTextRange().getStartOffset();
      e=e.getPrevSibling();
    }
    if (elementStart >= 0) {
      int startOffset=Math.max(elementStart,lineStart);
      String key=computeKey(startOffset,currentOffset,documentText);
      if (key != null) {
        while (key.length() > 0 && !ZenCodingTemplate.checkTemplateKey(key,callback,this)) {
          key=key.substring(1);
        }
        if (key.length() > 0) {
          return key;
        }
      }
    }
    element=element.getParent();
  }
 while (element != null && elementStart > lineStart);
  return null;
}
