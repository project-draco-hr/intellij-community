{
  if (myChunkLengthTable != null)   return;
  File chunkLengthFile=getChunkLengthFile();
  if (chunkLengthFile.exists()) {
    final DataInputStream chunkLengthStream=new DataInputStream(new BufferedInputStream(new FileInputStream(chunkLengthFile),32768));
    try {
      TLongArrayList segmentTable=new TLongArrayList();
      long position=0;
      while (chunkLengthStream.available() != 0) {
        int segmentSize=DataInputOutputUtil.readINT(chunkLengthStream);
        position+=segmentSize;
        segmentTable.add(position);
      }
      myChunkLengthTable=segmentTable.toNativeArray();
      myFileLength=myChunkLengthTable[myChunkLengthTable.length - 1];
    }
  finally {
      try {
        chunkLengthStream.close();
      }
 catch (      IOException ignore) {
      }
    }
  }
 else {
    myChunkLengthTable=ArrayUtil.EMPTY_LONG_ARRAY;
    myFileLength=0;
  }
  if (myUncompressedFileLength == -1) {
    long tempFileLength=getIncompleteChunkFile().length();
    myUncompressedFileLength=((long)myChunkLengthTable.length * myAppendBufferLength) + tempFileLength;
    if (myUncompressedFileLength != myFileLength + tempFileLength) {
      if (CompressionUtil.DUMP_COMPRESSION_STATS) {
        System.out.println(myUncompressedFileLength + "->" + (myFileLength + tempFileLength)+ " for "+ myBaseFile);
      }
    }
  }
}
