{
  final String conflictFile=createConflict(TreeConflictData.DirToFile.MINE_ADD_THEIRS_ADD);
  ChangeListManager changeListManager=ChangeListManager.getInstance(myProject);
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  changeListManager.ensureUpToDate(false);
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  changeListManager.ensureUpToDate(false);
  VirtualFile vf=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(new File(myWorkingCopyDir.getPath(),conflictFile));
  Assert.assertNotNull(vf);
  final Change change=changeListManager.getChange(vf);
  Assert.assertTrue(change instanceof ConflictedSvnChange);
  TreeConflictDescription beforeDescription=((ConflictedSvnChange)change).getBeforeDescription();
  Assert.assertNotNull(beforeDescription);
  final TreeConflictDescription afterDescription=((ConflictedSvnChange)change).getAfterDescription();
  Assert.assertNull(afterDescription);
  Assert.assertEquals(ConflictOperation.UPDATE,beforeDescription.getOperation());
  Assert.assertEquals(ConflictAction.ADD,beforeDescription.getConflictAction());
  Assert.assertTrue(beforeDescription.isTreeConflict());
  ConflictVersion leftVersion=beforeDescription.getSourceLeftVersion();
  Assert.assertNull(leftVersion);
  final ConflictVersion version=beforeDescription.getSourceRightVersion();
  Assert.assertNotNull(version);
  Assert.assertEquals(SVNNodeKind.FILE,version.getKind());
}
