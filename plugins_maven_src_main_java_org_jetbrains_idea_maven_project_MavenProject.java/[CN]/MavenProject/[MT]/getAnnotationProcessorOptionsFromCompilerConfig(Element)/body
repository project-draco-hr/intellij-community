{
  Map<String,String> res=new LinkedHashMap<String,String>();
  String compilerArgument=compilerConfig.getChildText("compilerArgument");
  if (!StringUtil.isEmptyOrSpaces(compilerArgument)) {
    ParametersList parametersList=new ParametersList();
    parametersList.addParametersString(compilerArgument);
    for (    String param : parametersList.getParameters()) {
      addAnnotationProcessorOption(param,res);
    }
  }
  Element compilerArgs=compilerConfig.getChild("compilerArgs");
  if (compilerArgs != null) {
    for (    Element e : compilerArgs.getChildren()) {
      if (!StringUtil.equals(e.getName(),"arg"))       continue;
      String arg=e.getTextTrim();
      addAnnotationProcessorOption(arg,res);
    }
  }
  Element compilerArguments=compilerConfig.getChild("compilerArguments");
  if (compilerArguments != null) {
    for (    Element e : compilerArguments.getChildren()) {
      String name=e.getName();
      if (name.startsWith("-")) {
        name=name.substring(1);
      }
      if (name.length() > 1 && name.charAt(0) == 'A') {
        res.put(name.substring(1),e.getTextTrim());
      }
    }
  }
  return res;
}
