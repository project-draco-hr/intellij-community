{
  if (!WebEditorOptions.getInstance().isSyncTagEditing())   return;
  if (myState == State.APPLYING)   return;
  if (myState == State.INITIAL) {
    final Document document=event.getDocument();
    final PsiFile file=myDocumentManager.getPsiFile(document);
    if (file == null)     return;
    final SmartList<RangeMarker> leaders=new SmartList<RangeMarker>();
    for (    Caret caret : myEditor.getCaretModel().getAllCarets()) {
      final RangeMarker leader=createTagNameMarker(caret);
      if (leader == null) {
        clearMarkers();
        return;
      }
      leader.setGreedyToLeft(true);
      leader.setGreedyToRight(true);
      leaders.add(leader);
    }
    if (leaders.isEmpty())     return;
    if (myDocumentManager.isUncommited(document)) {
      myDocumentManager.commitDocument(document);
    }
    for (    RangeMarker leader : leaders) {
      final RangeMarker support=findSupport(leader,file,document);
      if (support == null) {
        clearMarkers();
        return;
      }
      support.setGreedyToLeft(true);
      support.setGreedyToRight(true);
      myMarkers.add(Couple.of(leader,support));
    }
    myState=State.TRACKING;
  }
  if (myMarkers.isEmpty())   return;
  final CharSequence fragment=event.getNewFragment();
  final int offset=event.getOffset();
  final int newLength=event.getNewLength();
  final int oldLength=event.getOldLength();
  for (int i=0; i < newLength; i++) {
    if (!isValidTagNameChar(fragment.charAt(i))) {
      clearMarkers();
      return;
    }
  }
  boolean fitsInMarker=false;
  for (  Couple<RangeMarker> leaderAndSupport : myMarkers) {
    final RangeMarker leader=leaderAndSupport.first;
    if (!leader.isValid()) {
      fitsInMarker=false;
      break;
    }
    fitsInMarker|=offset >= leader.getStartOffset() && offset + oldLength <= leader.getEndOffset();
  }
  if (!fitsInMarker) {
    clearMarkers();
  }
}
