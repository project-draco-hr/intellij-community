{
  if (!WebEditorOptions.getInstance().isSyncTagEditing())   return;
  final Document document=event.getDocument();
  if (myState == State.APPLYING || UndoManager.getInstance(myEditor.getProject()).isUndoInProgress() || !PomModelImpl.isAllowPsiModification() || ((DocumentEx)document).isInBulkUpdate()) {
    return;
  }
  final int offset=event.getOffset();
  final int oldLength=event.getOldLength();
  final CharSequence fragment=event.getNewFragment();
  final int newLength=event.getNewLength();
  if (document.getUserData(XmlTagInsertHandler.ENFORCING_TAG) == Boolean.TRUE) {
    return;
  }
  for (int i=0; i < newLength; i++) {
    if (!XmlUtil.isValidTagNameChar(fragment.charAt(i))) {
      clearMarkers();
      return;
    }
  }
  if (myState == State.INITIAL) {
    final PsiFile file=myDocumentManager.getPsiFile(document);
    if (file == null || myDocumentManager.getSynchronizer().isInSynchronization(document))     return;
    final SmartList<RangeMarker> leaders=new SmartList<RangeMarker>();
    for (    Caret caret : myEditor.getCaretModel().getAllCarets()) {
      final RangeMarker leader=createTagNameMarker(caret);
      if (leader == null) {
        for (        RangeMarker marker : leaders) {
          marker.dispose();
        }
        return;
      }
      leader.setGreedyToLeft(true);
      leader.setGreedyToRight(true);
      leaders.add(leader);
    }
    if (leaders.isEmpty())     return;
    if (myDocumentManager.isUncommited(document)) {
      myDocumentManager.commitDocument(document);
    }
    for (    RangeMarker leader : leaders) {
      final RangeMarker support=findSupport(leader,file,document);
      if (support == null) {
        clearMarkers();
        return;
      }
      support.setGreedyToLeft(true);
      support.setGreedyToRight(true);
      myMarkers.add(Couple.of(leader,support));
    }
    if (!fitsInMarker(offset,oldLength)) {
      clearMarkers();
      return;
    }
    myState=State.TRACKING;
  }
  if (myMarkers.isEmpty())   return;
  boolean fitsInMarker=fitsInMarker(offset,oldLength);
  if (!fitsInMarker || myMarkers.size() != myEditor.getCaretModel().getCaretCount()) {
    clearMarkers();
    beforeDocumentChange(event);
  }
}
