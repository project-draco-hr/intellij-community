{
  final PsiField psiField=PsiTreeUtil.getParentOfType(element,PsiField.class);
  LOG.assertTrue(psiField != null);
  final Query<PsiReference> refs=ReferencesSearch.search(psiField);
  final Set<PsiElement> elements=new HashSet<PsiElement>();
  elements.add(element);
  for (  PsiReference reference : refs) {
    elements.add(reference.getElement());
  }
  if (!CodeInsightUtilBase.preparePsiElementsForWrite(elements))   return;
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  final PsiType fromType=psiField.getType();
  final PsiClass threadLocalClass=psiFacade.findClass(ThreadLocal.class.getName(),GlobalSearchScope.allScope(project));
  if (threadLocalClass == null) {
    return;
  }
  final HashMap<PsiTypeParameter,PsiType> substitutor=new HashMap<PsiTypeParameter,PsiType>();
  final PsiTypeParameter[] typeParameters=threadLocalClass.getTypeParameters();
  if (typeParameters.length == 1) {
    substitutor.put(typeParameters[0],fromType instanceof PsiPrimitiveType ? ((PsiPrimitiveType)fromType).getBoxedType(element) : fromType);
  }
  final PsiClassType toType=elementFactory.createType(threadLocalClass,elementFactory.createSubstitutor(substitutor));
  try {
    psiField.getTypeElement().replace(elementFactory.createTypeElement(toType));
    final TypeMigrationRules rules=new TypeMigrationRules(fromType);
    rules.setMigrationRootType(toType);
    rules.setBoundScope(GlobalSearchScope.fileScope(element.getContainingFile()));
    final TypeMigrationLabeler labeler=new TypeMigrationLabeler(rules);
    labeler.getMigratedUsages(false,psiField);
    for (    PsiReference reference : refs) {
      PsiElement psiElement=reference.getElement();
      if (psiElement instanceof PsiExpression) {
        final PsiElement parent=psiElement.getParent();
        if (parent instanceof PsiExpression && !(parent instanceof PsiReferenceExpression) && !(parent instanceof PsiPolyadicExpression)) {
          psiElement=parent;
        }
        final TypeConversionDescriptor directConversion=ThreadLocalConversionRule.findDirectConversion(psiElement,toType,fromType,labeler);
        if (directConversion != null) {
          TypeMigrationReplacementUtil.replaceExpression((PsiExpression)psiElement,project,directConversion);
        }
      }
    }
    final PsiExpression initializer=psiField.getInitializer();
    if (initializer != null) {
      TypeMigrationReplacementUtil.replaceExpression(initializer,project,ThreadLocalConversionRule.wrapWithNewExpression(toType,fromType,initializer));
      CodeStyleManager.getInstance(project).reformat(psiField);
    }
 else     if (!psiField.getModifierList().hasModifierProperty(PsiModifier.FINAL)) {
      final PsiExpression defaultInitializer=elementFactory.createExpressionFromText("new " + toType.getPresentableText() + "()",psiField);
      psiField.setInitializer(defaultInitializer);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
