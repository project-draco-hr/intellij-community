{
  final List parameters=new ArrayList();
  final BufferedReader bufferedReader=new BufferedReader(new FileReader(path));
  final String dynamicClasspath=bufferedReader.readLine();
  try {
    String line;
    while ((line=bufferedReader.readLine()) != null) {
      parameters.add(line);
    }
  }
  finally {
    bufferedReader.close();
  }
  IdeaTestRunner testRunner=(IdeaTestRunner)JUnitStarter.getAgentClass(isJUnit4).newInstance();
  testRunner.setStreams(out,err,0);
  final Object description=testRunner.getTestToStart(args,params);
  if (description == null)   return -1;
  TreeSender.sendTree(testRunner,description,!JUnitStarter.SM_RUNNER);
  long time=System.currentTimeMillis();
  int result=0;
  if (workingDirsPath == null || new File(workingDirsPath).length() == 0) {
    final List children=testRunner.getChildTests(description);
    final boolean forkTillMethod=forkMode.equalsIgnoreCase("method");
    result=processChildren(isJUnit4,listeners,out,err,parameters,testRunner,children,0,forkTillMethod,null,System.getProperty("java.class.path"),dynamicClasspath);
  }
 else {
    final BufferedReader perDirReader=new BufferedReader(new FileReader(workingDirsPath));
    try {
      final String packageName=perDirReader.readLine();
      String workingDir;
      while ((workingDir=perDirReader.readLine()) != null) {
        final String classpath=perDirReader.readLine();
        try {
          List classNames=new ArrayList();
          final int classNamesSize=Integer.parseInt(perDirReader.readLine());
          for (int i=0; i < classNamesSize; i++) {
            String className=perDirReader.readLine();
            if (className == null) {
              System.err.println("Class name is expected. Working dir: " + workingDir);
              return -1;
            }
            classNames.add(className);
          }
          final Object rootDescriptor=findByClassName(testRunner,(String)classNames.get(0),description);
          final int childResult;
          final File dir=new File(workingDir);
          if (forkMode.equals("none")) {
            File tempFile=File.createTempFile("idea_junit",".tmp");
            tempFile.deleteOnExit();
            JUnitStarter.printClassesList(classNames,packageName + ", working directory: \'" + workingDir+ "\'","",tempFile);
            final OutputObjectRegistry registry=testRunner.getRegistry();
            final String startIndex=String.valueOf(registry != null ? registry.getKnownObject(rootDescriptor) - 1 : -1);
            childResult=runChild(isJUnit4,listeners,out,err,parameters,"@" + tempFile.getAbsolutePath(),dir,startIndex,classpath,dynamicClasspath);
          }
 else {
            final List children=new ArrayList(testRunner.getChildTests(description));
            for (Iterator iterator=children.iterator(); iterator.hasNext(); ) {
              if (!classNames.contains(testRunner.getTestClassName(iterator.next()))) {
                iterator.remove();
              }
            }
            final boolean forkTillMethod=forkMode.equalsIgnoreCase("method");
            childResult=processChildren(isJUnit4,listeners,out,err,parameters,testRunner,children,result,forkTillMethod,dir,classpath,dynamicClasspath);
          }
          result=Math.min(childResult,result);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  finally {
      perDirReader.close();
    }
  }
  time=System.currentTimeMillis() - time;
  if (!JUnitStarter.SM_RUNNER)   new TimeSender(testRunner.getRegistry()).printHeader(time);
  return result;
}
