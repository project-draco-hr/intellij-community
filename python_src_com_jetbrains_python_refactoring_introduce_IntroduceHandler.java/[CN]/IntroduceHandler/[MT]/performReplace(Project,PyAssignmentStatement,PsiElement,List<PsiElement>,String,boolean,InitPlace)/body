{
  return new WriteCommandAction<PyAssignmentStatement>(project,expression.getContainingFile()){
    protected void run(    final Result<PyAssignmentStatement> result) throws Throwable {
      final Pair<PsiElement,TextRange> data=expression.getUserData(PyPsiUtils.SELECTION_BREAKS_AST_NODE);
      if (data == null) {
        result.setResult((PyAssignmentStatement)addDeclaration(expression,declaration,occurrences,replaceAll,initInConstructor));
      }
 else {
        result.setResult((PyAssignmentStatement)addDeclaration(data.first,declaration,occurrences,replaceAll,initInConstructor));
      }
      PyExpression newExpression=createExpression(project,name,declaration);
      if (replaceAll) {
        for (        PsiElement occurrence : occurrences) {
          replaceExpression(newExpression,project,occurrence);
        }
      }
 else {
        replaceExpression(newExpression,project,expression);
      }
    }
  }
.execute().getResultObject();
}
