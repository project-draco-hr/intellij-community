{
  int offset=editor.getCaretModel().getOffset();
  PsiElement elementAtCaret=file.findElementAt(offset);
  final List<PyExpression> expressions=new ArrayList<PyExpression>();
  while (elementAtCaret != null) {
    if (elementAtCaret instanceof PyStatement) {
      break;
    }
    if (elementAtCaret instanceof PyExpression && isValidIntroduceVariant(elementAtCaret)) {
      expressions.add((PyExpression)elementAtCaret);
    }
    elementAtCaret=elementAtCaret.getParent();
  }
  if (expressions.size() == 1) {
    performActionOnElement(editor,expressions.get(0),name,replaceAll,hasConstructor,isTestClass);
    return true;
  }
 else   if (expressions.size() > 1) {
    IntroduceTargetChooser.showChooser(editor,expressions,new Pass<PyExpression>(){
      @Override public void pass(      PyExpression pyExpression){
        performActionOnElement(editor,pyExpression,name,replaceAll,hasConstructor,isTestClass);
      }
    }
,new Function<PyExpression,String>(){
      public String fun(      PyExpression pyExpression){
        return pyExpression.getText();
      }
    }
);
    return true;
  }
  return false;
}
