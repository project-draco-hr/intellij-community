{
  Collection<String> candidates=new LinkedHashSet<String>();
  String text=expression.getText();
  if (expression instanceof PyCallExpression) {
    final PyExpression callee=((PyCallExpression)expression).getCallee();
    if (callee != null) {
      text=callee.getText();
    }
  }
  if (text != null) {
    candidates.addAll(NameSuggestorUtil.generateNames(text));
  }
  PyType type=expression.getType(TypeEvalContext.slow());
  if (type != null && type != PyNoneType.INSTANCE) {
    final String typeName=type.getName();
    if (typeName != null) {
      candidates.addAll(NameSuggestorUtil.generateNamesByType(typeName));
    }
  }
  final PyKeywordArgument kwArg=PsiTreeUtil.getParentOfType(expression,PyKeywordArgument.class);
  if (kwArg != null && kwArg.getValueExpression() == expression) {
    candidates.add(kwArg.getKeyword());
  }
  final PyArgumentList argList=PsiTreeUtil.getParentOfType(expression,PyArgumentList.class);
  if (argList != null) {
    final PyArgumentList.AnalysisResult result=argList.analyzeCall(PyResolveContext.noImplicits());
    if (result.getMarkedCallee() != null && !result.isImplicitlyResolved()) {
      final PyNamedParameter namedParameter=result.getPlainMappedParams().get(expression);
      if (namedParameter != null) {
        candidates.add(namedParameter.getName());
      }
    }
  }
  return candidates;
}
