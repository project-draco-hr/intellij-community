{
  Collection<String> candidates=new HashSet<String>();
  String text=expression.getText();
  if (text != null) {
    candidates.addAll(NameSuggestorUtil.generateNames(text));
  }
  PyType type=expression.getType(TypeEvalContext.fast());
  if (type != null) {
    final String typeName=type.getName();
    if (typeName != null) {
      candidates.addAll(NameSuggestorUtil.generateNamesByType(typeName));
    }
  }
  final PyKeywordArgument kwArg=PsiTreeUtil.getParentOfType(expression,PyKeywordArgument.class);
  if (kwArg != null && kwArg.getValueExpression() == expression) {
    candidates.add(kwArg.getKeyword());
  }
  final PyArgumentList argList=PsiTreeUtil.getParentOfType(expression,PyArgumentList.class);
  if (argList != null) {
    final PyArgumentList.AnalysisResult result=argList.analyzeCall();
    if (result.getMarkedCallee() != null && !result.isImplicitlyResolved()) {
      final PyNamedParameter namedParameter=result.getPlainMappedParams().get(expression);
      if (namedParameter != null) {
        candidates.add(namedParameter.getName());
      }
    }
  }
  Collection<String> res=new HashSet<String>();
  for (  String name : candidates) {
    if (myValidator.checkPossibleName(name,expression)) {
      res.add(name);
    }
  }
  return res;
}
