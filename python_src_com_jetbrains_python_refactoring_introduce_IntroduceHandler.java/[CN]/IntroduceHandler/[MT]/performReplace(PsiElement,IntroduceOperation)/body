{
  final PyExpression expression=operation.getInitializer();
  final Project project=operation.getProject();
  return new WriteCommandAction<PsiElement>(project,expression.getContainingFile()){
    protected void run(    @NotNull final Result<PsiElement> result) throws Throwable {
      try {
        final RefactoringEventData afterData=new RefactoringEventData();
        afterData.addElement(declaration);
        project.getMessageBus().syncPublisher(RefactoringEventListener.REFACTORING_EVENT_TOPIC).refactoringStarted(getRefactoringId(),afterData);
        result.setResult(addDeclaration(operation,declaration));
        PyExpression newExpression=createExpression(project,operation.getName(),declaration);
        if (operation.isReplaceAll()) {
          List<PsiElement> newOccurrences=new ArrayList<>();
          for (          PsiElement occurrence : operation.getOccurrences()) {
            final PsiElement replaced=replaceExpression(occurrence,newExpression,operation);
            if (replaced != null) {
              newOccurrences.add(replaced);
            }
          }
          operation.setOccurrences(newOccurrences);
        }
 else {
          final PsiElement replaced=replaceExpression(expression,newExpression,operation);
          operation.setOccurrences(Collections.singletonList(replaced));
        }
        postRefactoring(operation.getElement());
      }
  finally {
        final RefactoringEventData afterData=new RefactoringEventData();
        afterData.addElement(declaration);
        project.getMessageBus().syncPublisher(RefactoringEventListener.REFACTORING_EVENT_TOPIC).refactoringDone(getRefactoringId(),afterData);
      }
    }
  }
.execute().getResultObject();
}
