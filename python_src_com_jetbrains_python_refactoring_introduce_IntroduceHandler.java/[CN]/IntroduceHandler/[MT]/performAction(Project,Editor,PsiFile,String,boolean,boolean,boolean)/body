{
  if (!CommonRefactoringUtil.checkReadOnlyStatus(file)) {
    return;
  }
  PsiElement element1=null;
  PsiElement element2=null;
  final SelectionModel selectionModel=editor.getSelectionModel();
  if (selectionModel.hasSelection()) {
    element1=file.findElementAt(selectionModel.getSelectionStart());
    element2=file.findElementAt(selectionModel.getSelectionEnd() - 1);
    if (element1 instanceof PsiWhiteSpace) {
      int startOffset=element1.getTextRange().getEndOffset();
      element1=file.findElementAt(startOffset);
    }
    if (element2 instanceof PsiWhiteSpace) {
      int endOffset=element2.getTextRange().getStartOffset();
      element2=file.findElementAt(endOffset - 1);
    }
  }
 else {
    if (smartIntroduce(file,editor,name,replaceAll,hasConstructor,isTestClass)) {
      return;
    }
    final CaretModel caretModel=editor.getCaretModel();
    final Document document=editor.getDocument();
    int lineNumber=document.getLineNumber(caretModel.getOffset());
    if ((lineNumber >= 0) && (lineNumber < document.getLineCount())) {
      element1=file.findElementAt(document.getLineStartOffset(lineNumber));
      element2=file.findElementAt(document.getLineEndOffset(lineNumber) - 1);
    }
  }
  if (element1 == null || element2 == null) {
    CommonRefactoringUtil.showErrorHint(project,editor,PyBundle.message("refactoring.introduce.selection.error"),myDialogTitle,"refactoring.extractMethod");
    return;
  }
  element1=PyRefactoringUtil.getSelectedExpression(project,file,element1,element2);
  if (element1 == null) {
    CommonRefactoringUtil.showErrorHint(project,editor,PyBundle.message("refactoring.introduce.selection.error"),myDialogTitle,"refactoring.extractMethod");
    return;
  }
  if (!checkIntroduceContext(file,editor,element1)) {
    return;
  }
  performActionOnElement(editor,element1,name,replaceAll,hasConstructor,isTestClass);
}
