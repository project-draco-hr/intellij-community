{
  final PyExpression expression=operation.getInitializer();
  final Project project=operation.getProject();
  return new WriteCommandAction<PyAssignmentStatement>(project,expression.getContainingFile()){
    protected void run(    final Result<PyAssignmentStatement> result) throws Throwable {
      final Pair<PsiElement,TextRange> data=expression.getUserData(PyPsiUtils.SELECTION_BREAKS_AST_NODE);
      if (data == null) {
        result.setResult((PyAssignmentStatement)addDeclaration(expression,declaration,operation));
      }
 else {
        result.setResult((PyAssignmentStatement)addDeclaration(data.first,declaration,operation));
      }
      PyExpression newExpression=createExpression(project,operation.getName(),declaration);
      if (operation.isReplaceAll()) {
        for (        PsiElement occurrence : operation.getOccurrences()) {
          replaceExpression(newExpression,project,occurrence);
        }
      }
 else {
        replaceExpression(newExpression,project,expression);
      }
      postRefactoring(operation.getElement());
    }
  }
.execute().getResultObject();
}
