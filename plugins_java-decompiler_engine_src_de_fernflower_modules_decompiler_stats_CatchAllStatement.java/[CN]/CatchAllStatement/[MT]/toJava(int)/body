{
  String indstr=InterpreterUtil.getIndentString(indent);
  String indstr1=null;
  String new_line_separator=DecompilerContext.getNewLineSeparator();
  StringBuffer buf=new StringBuffer();
  buf.append(ExprProcessor.listToJava(varDefinitions,indent));
  boolean labeled=isLabeled();
  if (labeled) {
    buf.append(indstr + "label" + this.id+ ":"+ new_line_separator);
  }
  List<StatEdge> lstSuccs=first.getSuccessorEdges(STATEDGE_DIRECT_ALL);
  if (first.type == TYPE_TRYCATCH && first.varDefinitions.isEmpty() && isFinally && !labeled && !first.isLabeled() && (lstSuccs.isEmpty() || !lstSuccs.get(0).explicit)) {
    String content=ExprProcessor.jmpWrapper(first,indent,true);
    content=content.substring(0,content.length() - 2);
    buf.append(content);
  }
 else {
    buf.append(indstr + "try {" + new_line_separator);
    buf.append(ExprProcessor.jmpWrapper(first,indent + 1,true));
    buf.append(indstr + "}");
  }
  buf.append((isFinally ? " finally" : " catch (" + vars.get(0).toJava(indent) + ")") + " {" + new_line_separator);
  if (monitor != null) {
    indstr1=InterpreterUtil.getIndentString(indent + 1);
    buf.append(indstr1 + "if(" + monitor.toJava(indent)+ ") {"+ new_line_separator);
  }
  buf.append(ExprProcessor.jmpWrapper(handler,indent + 1 + (monitor != null ? 1 : 0),true));
  if (monitor != null) {
    buf.append(indstr1 + "}" + new_line_separator);
  }
  buf.append(indstr + "}" + new_line_separator);
  return buf.toString();
}
