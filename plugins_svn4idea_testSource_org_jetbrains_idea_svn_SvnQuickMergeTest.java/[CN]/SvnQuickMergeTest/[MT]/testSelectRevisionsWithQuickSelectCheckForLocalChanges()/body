{
  final SVNInfo info=myVcs.getSvnKitManager().createWCClient().doInfo(new File(myBranchTree.myS1File.getPath()),SVNRevision.WORKING);
  Assert.assertNotNull(info);
  final long numberBefore=info.getRevision().getNumber();
  final int totalChanges=3;
  final StringBuilder sb=new StringBuilder(FileUtil.loadFile(new File(myBranchTree.myS1File.getPath())));
  for (int i=0; i < totalChanges; i++) {
    sb.append("\nedited in branch ").append(i);
    VcsTestUtil.editFileInCommand(myProject,myBranchTree.myS1File,sb.toString());
    runInAndVerifyIgnoreOutput(myBranchRoot,"ci","-m","change in branch " + i,myBranchTree.myS1File.getPath());
    Thread.sleep(10);
  }
  AtomicReference<String> selectionError=new AtomicReference<>();
  QuickMergeTestInteraction testInteraction=new QuickMergeTestInteraction(true){
    @NotNull @Override public List<CommittedChangeList> showRecentListsForSelection(    @NotNull List<CommittedChangeList> list,    @NotNull MergeChecker mergeChecker,    boolean everyThingLoaded){
      if (list.size() != 4) {
        selectionError.set("List size: " + list.size());
      }
 else       if (list.get(3).getNumber() != numberBefore) {
        selectionError.set("wrong revision for copy statement: " + list.get(3).getNumber());
      }
      return new SmartList<>(list.get(2));
    }
  }
;
  testInteraction.setMergeVariant(QuickMergeContentsVariants.showLatest);
  waitQuickMerge(myBranchUrl,testInteraction);
  if (selectionError.get() != null) {
    throw new RuntimeException(selectionError.get());
  }
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  final Change fileChange=myChangeListManager.getChange(myTree.myS1File);
  Assert.assertNotNull(fileChange);
  Assert.assertEquals(FileStatus.MODIFIED,fileChange.getFileStatus());
  final Change dirChange=myChangeListManager.getChange(myWorkingCopyDir);
  Assert.assertNotNull(dirChange);
  Assert.assertEquals(FileStatus.MODIFIED,dirChange.getFileStatus());
  final SVNPropertyData data=myVcs.getSvnKitManager().createWCClient().doGetProperty(new File(myWorkingCopyDir.getPath()),"svn:mergeinfo",SVNRevision.UNDEFINED,SVNRevision.WORKING);
  System.out.println(data.getValue().getString());
  Assert.assertEquals("/branches/b1:" + (numberBefore + 1),data.getValue().getString());
}
