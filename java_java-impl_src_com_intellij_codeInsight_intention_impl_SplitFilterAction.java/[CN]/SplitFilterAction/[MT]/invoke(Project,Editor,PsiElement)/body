{
  try {
    if (!FileModificationService.getInstance().preparePsiElementForWrite(element))     return;
    final PsiJavaToken token=(PsiJavaToken)element;
    final PsiPolyadicExpression expression=SplitConditionUtil.findCondition(element,true,false);
    final PsiLambdaExpression lambdaExpression=PsiTreeUtil.getParentOfType(expression,PsiLambdaExpression.class);
    LOG.assertTrue(lambdaExpression != null);
    final String lambdaParameterName=lambdaExpression.getParameterList().getParameters()[0].getName();
    final PsiMethodCallExpression methodCallExpression=PsiTreeUtil.getParentOfType(expression,PsiMethodCallExpression.class);
    LOG.assertTrue(methodCallExpression != null,expression);
    PsiExpression lOperand=getLOperands(expression,token);
    PsiExpression rOperand=getROperands(expression,token);
    final Collection<PsiComment> comments=PsiTreeUtil.findChildrenOfType(expression,PsiComment.class);
    final PsiMethodCallExpression chainedCall=(PsiMethodCallExpression)JavaPsiFacade.getElementFactory(project).createExpressionFromText("a.filter(" + lambdaParameterName + " -> x)",expression);
    final PsiExpression argExpression=chainedCall.getArgumentList().getExpressions()[0];
    final PsiElement rReplaced=((PsiLambdaExpression)argExpression).getBody().replace(rOperand);
    final PsiExpression compoundArg=methodCallExpression.getArgumentList().getExpressions()[0];
    final int separatorOffset=token.getTextOffset();
    for (    PsiComment comment : comments) {
      if (comment.getTextOffset() < separatorOffset) {
        compoundArg.getParent().add(comment);
      }
 else {
        rReplaced.getParent().add(comment);
      }
    }
    ((PsiLambdaExpression)compoundArg).getBody().replace(lOperand);
    chainedCall.getMethodExpression().getQualifierExpression().replace(methodCallExpression);
    methodCallExpression.replace(chainedCall);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
