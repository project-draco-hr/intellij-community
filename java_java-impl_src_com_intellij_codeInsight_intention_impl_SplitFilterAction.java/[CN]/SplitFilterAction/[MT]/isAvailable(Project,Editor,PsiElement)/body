{
  final PsiPolyadicExpression expression=SplitConditionUtil.findCondition(element,true,false);
  if (expression == null || expression.getOperands().length < 2)   return false;
  PsiElement parent=PsiUtil.skipParenthesizedExprUp(expression.getParent());
  if (!(parent instanceof PsiLambdaExpression))   return false;
  if (((PsiLambdaExpression)parent).getParameterList().getParametersCount() != 1)   return false;
  parent=parent.getParent();
  if (!(parent instanceof PsiExpressionList))   return false;
  final PsiElement gParent=parent.getParent();
  if (!(gParent instanceof PsiMethodCallExpression))   return false;
  final PsiReferenceExpression methodExpression=((PsiMethodCallExpression)gParent).getMethodExpression();
  if (!"filter".equals(methodExpression.getReferenceName()))   return false;
  final PsiExpressionList argumentList=((PsiMethodCallExpression)gParent).getArgumentList();
  if (argumentList.getExpressions().length != 1)   return false;
  final PsiMethod method=((PsiMethodCallExpression)gParent).resolveMethod();
  if (method == null)   return false;
  final PsiClass containingClass=method.getContainingClass();
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  if (parameters.length == 1 && InheritanceUtil.isInheritor(containingClass,false,CommonClassNames.JAVA_UTIL_STREAM_STREAM) && InheritanceUtil.isInheritor(parameters[0].getType(),CommonClassNames.JAVA_UTIL_FUNCTION_PREDICATE)) {
    return true;
  }
  return false;
}
