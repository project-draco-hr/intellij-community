{
  if ((flags & TargetElementUtil.ELEMENT_NAME_ACCEPTED) == 0) {
    return null;
  }
  final PsiElement element=ref.getElement();
  PsiElement result=ref.resolve();
  Set<PsiElement> visited=new HashSet<>();
  visited.add(result);
  while (result instanceof PyReferenceOwner && (result instanceof PyReferenceExpression || result instanceof PyTargetExpression)) {
    PsiElement nextResult=((PyReferenceOwner)result).getReference(PyResolveContext.noImplicits()).resolve();
    if (nextResult != null && !visited.contains(nextResult) && PsiTreeUtil.getParentOfType(element,ScopeOwner.class) == PsiTreeUtil.getParentOfType(result,ScopeOwner.class) && (nextResult instanceof PyReferenceExpression || nextResult instanceof PyTargetExpression || nextResult instanceof PyParameter)) {
      visited.add(nextResult);
      result=nextResult;
    }
 else {
      break;
    }
  }
  return result;
}
