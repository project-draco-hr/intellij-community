{
  myTitleLabel.setText(FindBundle.message(myModel.isReplaceState() ? "find.replace.in.project.dialog.title" : "find.in.path.dialog.title"));
  myCbCaseSensitive.setSelected(myModel.isCaseSensitive());
  myCbWholeWordsOnly.setSelected(myModel.isWholeWordsOnly());
  myCbRegularExpressions.setSelected(myModel.isRegularExpressions());
  mySelectedContextName=FindDialog.getSearchContextName(myModel);
  if (myModel.isReplaceState()) {
    myCbPreserveCase.setSelected(myModel.isPreserveCase());
  }
  mySelectedScope=getScope(myModel);
  final String dirName=myModel.getDirectoryName();
  setDirectories(FindSettings.getInstance().getRecentDirectories(),dirName);
  if (!StringUtil.isEmptyOrSpaces(dirName)) {
    VirtualFile dir=LocalFileSystem.getInstance().findFileByPath(dirName);
    if (dir != null) {
      Module module=ModuleUtilCore.findModuleForFile(dir,myProject);
      if (module != null) {
        myModuleComboBox.setSelectedItem(module.getName());
      }
    }
  }
  if (mySelectedScope == Scope.MODULE) {
    myModuleComboBox.setSelectedItem(myModel.getModuleName());
  }
  boolean isThereFileFilter=myModel.getFileFilter() != null && !myModel.getFileFilter().isEmpty();
  myCbFileFilter.setSelected(isThereFileFilter);
  List<String> variants=Arrays.asList(ArrayUtil.reverseArray(FindSettings.getInstance().getRecentFileMasks()));
  myFileMaskField.setVariants(variants);
  if (!variants.isEmpty()) {
    myFileMaskField.setText(variants.get(0));
  }
  myFileMaskField.setEnabled(isThereFileFilter);
  updateScopeDetailsPanel();
  String toSearch=myModel.getStringToFind();
  if (StringUtil.isEmpty(toSearch)) {
    String[] history=FindSettings.getInstance().getRecentFindStrings();
    toSearch=history.length > 0 ? history[history.length - 1] : "";
  }
  mySearchComponent.setText(toSearch);
  String toReplace=myModel.getStringToReplace();
  if (StringUtil.isEmpty(toReplace)) {
    String[] history=FindSettings.getInstance().getRecentReplaceStrings();
    toReplace=history.length > 0 ? history[history.length - 1] : "";
  }
  myReplaceComponent.setText(toReplace);
  updateControls();
  updateScopeDetailsPanel();
  updateReplaceVisibility();
}
