{
  if ((myResultsPopup == null || !myResultsPopup.isVisible()) && isShowing()) {
    UIUtil.invokeLaterIfNeeded(new Runnable(){
      @Override public void run(){
        JPanel popupContent=new JPanel(new BorderLayout());
        popupContent.setName("PopupContent!!!");
        Splitter splitter=new JBSplitter(true,.33F,.1F,.5F);
        splitter.setDividerWidth(1);
        splitter.setFirstComponent(new JBScrollPane(myResultsPreviewTable){
          @Override public Dimension getMinimumSize(){
            Dimension size=super.getMinimumSize();
            size.height=Math.max(size.height,myResultsPreviewTable.getPreferredScrollableViewportSize().height);
            return size;
          }
        }
);
        popupContent.add(splitter,BorderLayout.CENTER);
        JPanel bottomPanel=new JPanel(new MigLayout("flowx, ins 4, fillx, hidemode 3, gap 0"));
        bottomPanel.add(myTabResultsButton);
        bottomPanel.add(Box.createHorizontalGlue(),"growx, pushx");
        JBLabel label=new JBLabel("Ctrl+Enter");
        label.setEnabled(false);
        bottomPanel.add(label,"gapright 10");
        bottomPanel.add(myOKButton);
        popupContent.add(bottomPanel,BorderLayout.SOUTH);
        popupContent.registerKeyboardAction(myOkActionListener,OK_KEYSTROKE,WHEN_IN_FOCUSED_WINDOW);
        myCodePreviewComponent=myUsagePreviewPanel.createComponent();
        splitter.setSecondComponent(myCodePreviewComponent);
        AtomicBoolean canClose=new AtomicBoolean();
        final ComponentPopupBuilder builder=JBPopupFactory.getInstance().createComponentPopupBuilder(popupContent,null);
        myResultsPopup=(AbstractPopup)builder.setShowShadow(false).setShowBorder(false).setCancelCallback(new Computable<Boolean>(){
          @Override public Boolean compute(){
            if (canClose.get())             return Boolean.TRUE;
            Window activeWindow=KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow();
            Window balloonWindow=SwingUtilities.windowForComponent(myFindBalloon.getContent());
            if (activeWindow == balloonWindow || (activeWindow != null && activeWindow.getParent() == balloonWindow)) {
              return Boolean.FALSE;
            }
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              @Override public void run(){
                if (myFindBalloon != null) {
                  Disposer.dispose(myFindBalloon);
                  myFindBalloon=null;
                }
              }
            }
);
            return Boolean.TRUE;
          }
        }
).setKeyEventHandler(new BooleanFunction<KeyEvent>(){
          @Override public boolean fun(          KeyEvent event){
            if (AbstractPopup.isCloseRequest(event)) {
              canClose.set(true);
              myResultsPopup.cancel(event);
              if (myFindBalloon != null && myFindBalloon.isVisible()) {
                myFindBalloon.cancel();
              }
              return true;
            }
            return false;
          }
        }
).createPopup();
        RelativePoint point=new RelativePoint(FindPopupPanel.this,new Point(0,FindPopupPanel.this.getHeight()));
        myResultsPopup.pack(true,true);
        myResultsPopup.show(point);
        Disposer.register(myDisposable,myResultsPopup);
        registerCloseAction(myResultsPopup);
        updateResultsPopupBounds();
        ScrollingUtil.ensureSelectionExists(myResultsPreviewTable);
      }
    }
);
  }
}
