{
  if (isShowing()) {
    showResultsPopupIfNeed();
  }
  final ModalityState state=ModalityState.current();
  finishPreviousPreviewSearch();
  mySearchRescheduleOnCancellationsAlarm.cancelAllRequests();
  applyTo(myModel,false);
  FindManager.getInstance(myProject).getFindInProjectModel().copyFrom(myModel);
  ((FindManagerImpl)FindManager.getInstance(myProject)).changeGlobalSettings(myModel);
  ValidationInfo result=getValidationInfo(myModel);
  final ProgressIndicatorBase progressIndicatorWhenSearchStarted=new ProgressIndicatorBase();
  myResultsPreviewSearchProgress=progressIndicatorWhenSearchStarted;
  final DefaultTableModel model=new DefaultTableModel(){
    @Override public boolean isCellEditable(    int row,    int column){
      return false;
    }
  }
;
  model.addColumn("Usages");
  myCodePreviewComponent.setVisible(false);
  myResultsPreviewTable.setModel(model);
  if (result != null) {
    myResultsPreviewTable.getEmptyText().setText(UIBundle.message("message.nothingToShow"));
    return;
  }
  myResultsPreviewTable.getColumnModel().getColumn(0).setCellRenderer(new FindDialog.UsageTableCellRenderer());
  myResultsPreviewTable.getEmptyText().setText("Searching...");
  final AtomicInteger resultsCount=new AtomicInteger();
  ProgressIndicatorUtils.scheduleWithWriteActionPriority(myResultsPreviewSearchProgress,new ReadTask(){
    @Override public void computeInReadAction(    @NotNull ProgressIndicator indicator){
      final UsageViewPresentation presentation=FindInProjectUtil.setupViewPresentation(FindSettings.getInstance().isShowResultsInSeparateView(),myModel.clone());
      final boolean showPanelIfOnlyOneUsage=!FindSettings.getInstance().isSkipResultsWithOneUsage();
      final FindUsagesProcessPresentation processPresentation=FindInProjectUtil.setupProcessPresentation(myProject,showPanelIfOnlyOneUsage,presentation);
      FindInProjectUtil.findUsages(myModel.clone(),myProject,new Processor<UsageInfo>(){
        @Override public boolean process(        final UsageInfo info){
          final Usage usage=UsageInfo2UsageAdapter.CONVERTER.fun(info);
          usage.getPresentation().getIcon();
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              model.addRow(new Object[]{usage});
              myCodePreviewComponent.setVisible(true);
              if (model.getRowCount() == 1 && myResultsPreviewTable.getModel() == model) {
                myResultsPreviewTable.setRowSelectionInterval(0,0);
              }
              scheduleUpdateResultsPopupBounds();
            }
          }
,state);
          return resultsCount.incrementAndGet() < ShowUsagesAction.USAGES_PAGE_SIZE;
        }
      }
,processPresentation);
      boolean succeeded=!progressIndicatorWhenSearchStarted.isCanceled();
      if (succeeded) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            if (progressIndicatorWhenSearchStarted == myResultsPreviewSearchProgress && !myResultsPreviewSearchProgress.isCanceled()) {
              int occurrences=resultsCount.get();
              if (occurrences == 0)               myResultsPreviewTable.getEmptyText().setText(UIBundle.message("message.nothingToShow"));
              myCodePreviewComponent.setVisible(occurrences > 0);
              scheduleUpdateResultsPopupBounds();
            }
          }
        }
,state);
      }
    }
    @Override public void onCanceled(    @NotNull ProgressIndicator indicator){
      if (isShowing() && progressIndicatorWhenSearchStarted == myResultsPreviewSearchProgress) {
        scheduleResultsUpdate();
      }
    }
  }
);
}
