{
  super.visitTryStatement(statement);
  final PsiCatchSection[] catchSections=statement.getCatchSections();
  if (catchSections.length < 2) {
    return;
  }
  final PsiParameter[] parameters=statement.getCatchBlockParameters();
  if (catchSections.length != parameters.length) {
    return;
  }
  final boolean[] duplicates=new boolean[catchSections.length];
  for (int i=0; i < catchSections.length - 1; i++) {
    final PsiCatchSection catchSection=catchSections[i];
    final PsiCodeBlock catchBlock=catchSection.getCatchBlock();
    if (catchBlock == null) {
      continue;
    }
    final PsiParameter parameter=catchSection.getParameter();
    if (parameter == null) {
      continue;
    }
    final InputVariables inputVariables=new InputVariables(Collections.singletonList(parameter),statement.getProject(),new LocalSearchScope(catchBlock),false);
    final DuplicatesFinder finder=new DuplicatesFinder(new PsiElement[]{catchBlock},inputVariables,null,Collections.emptyList());
    for (int j=i + 1; j < catchSections.length; j++) {
      if (duplicates[j]) {
        continue;
      }
      final PsiCatchSection otherSection=catchSections[j];
      final PsiCodeBlock otherCatchBlock=otherSection.getCatchBlock();
      if (otherCatchBlock == null) {
        continue;
      }
      final Match match=finder.isDuplicate(otherCatchBlock,true);
      if (match == null) {
        continue;
      }
      final ReturnValue returnValue=match.getReturnValue();
      if (returnValue != null && !(returnValue instanceof ReturnStatementReturnValue)) {
        continue;
      }
      final List<PsiElement> parameterValues=match.getParameterValues(parameter);
      if (parameterValues != null) {
        if (parameterValues.size() != 1) {
          continue;
        }
        final PsiElement element=parameterValues.get(0);
        if (!(element instanceof PsiReferenceExpression)) {
          continue;
        }
        final PsiElement target=((PsiReferenceExpression)element).resolve();
        if (!(target instanceof PsiParameter)) {
          continue;
        }
        final PsiElement scope=((PsiParameter)target).getDeclarationScope();
        if (!otherSection.equals(scope)) {
          continue;
        }
      }
      if (j > i ? !canCollapse(parameters,i,j) : !canCollapse(parameters,j,i)) {
        continue;
      }
      final PsiJavaToken rParenth=otherSection.getRParenth();
      if (rParenth != null) {
        registerErrorAtOffset(otherSection,0,rParenth.getStartOffsetInParent() + 1,parameter.getType(),Integer.valueOf(i),Integer.valueOf(j));
      }
      duplicates[i]=true;
      duplicates[j]=true;
    }
  }
}
