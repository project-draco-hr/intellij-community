{
  if (!PsiUtil.isLanguageLevel8OrHigher(holder.getFile())) {
    return PsiElementVisitor.EMPTY_VISITOR;
  }
  return new JavaElementVisitor(){
    @Override public void visitMethodCallExpression(    PsiMethodCallExpression methodCall){
      final PsiMethod method=methodCall.resolveMethod();
      if (isCallOf(method,CommonClassNames.JAVA_UTIL_COLLECTION,STREAM_METHOD,0)) {
        final PsiMethodCallExpression qualifierCall=getQualifierMethodCall(methodCall);
        if (qualifierCall == null)         return;
        final PsiMethod qualifier=qualifierCall.resolveMethod();
        ReplaceCollectionStreamFix fix=null;
        if (isCallOf(qualifier,CommonClassNames.JAVA_UTIL_ARRAYS,AS_LIST_METHOD,1)) {
          if (hasSingleArrayArgument(qualifierCall)) {
            fix=new ArraysAsListSingleArrayFix();
          }
 else {
            fix=new ReplaceWithStreamOfFix("Arrays.asList()");
          }
        }
 else         if (isCallOf(qualifier,CommonClassNames.JAVA_UTIL_COLLECTIONS,SINGLETON_LIST_METHOD,1)) {
          if (!hasSingleArrayArgument(qualifierCall)) {
            fix=new ReplaceSingletonWithStreamOfFix("Collections.singletonList()");
          }
        }
 else         if (isCallOf(qualifier,CommonClassNames.JAVA_UTIL_COLLECTIONS,SINGLETON_METHOD,1)) {
          if (!hasSingleArrayArgument(qualifierCall)) {
            fix=new ReplaceSingletonWithStreamOfFix("Collections.singleton()");
          }
        }
 else         if (isCallOf(qualifier,CommonClassNames.JAVA_UTIL_COLLECTIONS,EMPTY_LIST_METHOD,0)) {
          fix=new ReplaceWithStreamEmptyFix(EMPTY_LIST_METHOD);
        }
 else         if (isCallOf(qualifier,CommonClassNames.JAVA_UTIL_COLLECTIONS,EMPTY_SET_METHOD,0)) {
          fix=new ReplaceWithStreamEmptyFix(EMPTY_SET_METHOD);
        }
        if (fix != null) {
          holder.registerProblem(methodCall,null,fix.getMessage(),fix);
        }
      }
 else       if (isCallOf(method,CommonClassNames.JAVA_UTIL_STREAM_STREAM,COLLECT_METHOD,1)) {
        PsiElement parameter=methodCall.getArgumentList().getExpressions()[0];
        if (parameter instanceof PsiMethodCallExpression) {
          PsiMethodCallExpression collectorCall=(PsiMethodCallExpression)parameter;
          PsiMethod collectorMethod=collectorCall.resolveMethod();
          ReplaceCollectorFix fix=null;
          if (isCallOf(collectorMethod,CommonClassNames.JAVA_UTIL_STREAM_COLLECTORS,COUNTING_COLLECTOR,0)) {
            fix=new ReplaceCollectorFix(COUNTING_COLLECTOR,"count()",false);
          }
 else           if (isCallOf(collectorMethod,CommonClassNames.JAVA_UTIL_STREAM_COLLECTORS,MIN_BY_COLLECTOR,1)) {
            fix=new ReplaceCollectorFix(MIN_BY_COLLECTOR,"min({0})",true);
          }
 else           if (isCallOf(collectorMethod,CommonClassNames.JAVA_UTIL_STREAM_COLLECTORS,MAX_BY_COLLECTOR,1)) {
            fix=new ReplaceCollectorFix(MAX_BY_COLLECTOR,"max({0})",true);
          }
 else           if (isCallOf(collectorMethod,CommonClassNames.JAVA_UTIL_STREAM_COLLECTORS,MAPPING_COLLECTOR,2)) {
            fix=new ReplaceCollectorFix(MAPPING_COLLECTOR,"map({0}).collect({1})",false);
          }
 else           if (isCallOf(collectorMethod,CommonClassNames.JAVA_UTIL_STREAM_COLLECTORS,REDUCING_COLLECTOR,1)) {
            fix=new ReplaceCollectorFix(REDUCING_COLLECTOR,"reduce({0})",true);
          }
 else           if (isCallOf(collectorMethod,CommonClassNames.JAVA_UTIL_STREAM_COLLECTORS,REDUCING_COLLECTOR,2)) {
            fix=new ReplaceCollectorFix(REDUCING_COLLECTOR,"reduce({0}, {1})",false);
          }
 else           if (isCallOf(collectorMethod,CommonClassNames.JAVA_UTIL_STREAM_COLLECTORS,REDUCING_COLLECTOR,3)) {
            fix=new ReplaceCollectorFix(REDUCING_COLLECTOR,"map({1}).reduce({0}, {2})",false);
          }
 else           if (isCallOf(collectorMethod,CommonClassNames.JAVA_UTIL_STREAM_COLLECTORS,SUMMING_INT_COLLECTOR,1)) {
            fix=new ReplaceCollectorFix(SUMMING_INT_COLLECTOR,"mapToInt({0}).sum()",false);
          }
 else           if (isCallOf(collectorMethod,CommonClassNames.JAVA_UTIL_STREAM_COLLECTORS,SUMMING_LONG_COLLECTOR,1)) {
            fix=new ReplaceCollectorFix(SUMMING_LONG_COLLECTOR,"mapToLong({0}).sum()",false);
          }
 else           if (isCallOf(collectorMethod,CommonClassNames.JAVA_UTIL_STREAM_COLLECTORS,SUMMING_DOUBLE_COLLECTOR,1)) {
            fix=new ReplaceCollectorFix(SUMMING_DOUBLE_COLLECTOR,"mapToDouble({0}).sum()",false);
          }
          if (fix != null && collectorCall.getArgumentList().getExpressions().length == collectorMethod.getParameterList().getParametersCount()) {
            TextRange range=methodCall.getTextRange();
            PsiElement nameElement=methodCall.getMethodExpression().getReferenceNameElement();
            if (nameElement != null) {
              range=new TextRange(nameElement.getTextOffset(),range.getEndOffset());
            }
            holder.registerProblem(methodCall,range.shiftRight(-methodCall.getTextOffset()),fix.getMessage(),fix);
          }
        }
      }
 else {
        final String name;
        if (isCallOf(method,CommonClassNames.JAVA_UTIL_STREAM_STREAM,FOR_EACH_METHOD,1)) {
          name=FOR_EACH_METHOD;
        }
 else         if (isCallOf(method,CommonClassNames.JAVA_UTIL_STREAM_STREAM,FOR_EACH_ORDERED_METHOD,1)) {
          name=FOR_EACH_ORDERED_METHOD;
        }
 else {
          return;
        }
        final PsiMethodCallExpression qualifierCall=getQualifierMethodCall(methodCall);
        if (qualifierCall == null)         return;
        final PsiMethod qualifier=qualifierCall.resolveMethod();
        if (isCallOf(qualifier,CommonClassNames.JAVA_UTIL_COLLECTION,STREAM_METHOD,0)) {
          final ReplaceStreamMethodFix fix=new ReplaceStreamMethodFix(name,FOR_EACH_METHOD,true);
          holder.registerProblem(methodCall,getCallChainRange(methodCall,qualifierCall),fix.getMessage(),fix);
        }
      }
    }
  }
;
}
