{
  if (!PsiUtil.isLanguageLevel8OrHigher(holder.getFile())) {
    return PsiElementVisitor.EMPTY_VISITOR;
  }
  return new JavaElementVisitor(){
    @Override public void visitMethodCallExpression(    PsiMethodCallExpression methodCall){
      final PsiMethod method=methodCall.resolveMethod();
      if (isCallOf(method,CommonClassNames.JAVA_UTIL_COLLECTION,STREAM_METHOD,0)) {
        final PsiMethodCallExpression qualifierCall=getQualifierMethodCall(methodCall);
        if (qualifierCall == null)         return;
        final PsiMethod qualifier=qualifierCall.resolveMethod();
        ReplaceCollectionStreamFix fix=null;
        if (isCallOf(qualifier,CommonClassNames.JAVA_UTIL_ARRAYS,AS_LIST_METHOD,1)) {
          if (hasSingleArrayArgument(qualifierCall)) {
            fix=new ArraysAsListSingleArrayFix();
          }
 else {
            fix=new ReplaceWithStreamOfFix("Arrays.asList()");
          }
        }
 else         if (isCallOf(qualifier,CommonClassNames.JAVA_UTIL_COLLECTIONS,SINGLETON_LIST_METHOD,1)) {
          if (!hasSingleArrayArgument(qualifierCall)) {
            fix=new ReplaceSingletonWithStreamOfFix("Collections.singletonList()");
          }
        }
 else         if (isCallOf(qualifier,CommonClassNames.JAVA_UTIL_COLLECTIONS,SINGLETON_METHOD,1)) {
          if (!hasSingleArrayArgument(qualifierCall)) {
            fix=new ReplaceSingletonWithStreamOfFix("Collections.singleton()");
          }
        }
 else         if (isCallOf(qualifier,CommonClassNames.JAVA_UTIL_COLLECTIONS,EMPTY_LIST_METHOD,0)) {
          fix=new ReplaceWithStreamEmptyFix(EMPTY_LIST_METHOD);
        }
 else         if (isCallOf(qualifier,CommonClassNames.JAVA_UTIL_COLLECTIONS,EMPTY_SET_METHOD,0)) {
          fix=new ReplaceWithStreamEmptyFix(EMPTY_SET_METHOD);
        }
        if (fix != null) {
          holder.registerProblem(methodCall,null,fix.getMessage(),fix);
        }
      }
 else {
        final String name;
        if (isCallOf(method,CommonClassNames.JAVA_UTIL_STREAM_STREAM,FOR_EACH_METHOD,1)) {
          name=FOR_EACH_METHOD;
        }
 else         if (isCallOf(method,CommonClassNames.JAVA_UTIL_STREAM_STREAM,FOR_EACH_ORDERED_METHOD,1)) {
          name=FOR_EACH_ORDERED_METHOD;
        }
 else {
          return;
        }
        final PsiMethodCallExpression qualifierCall=getQualifierMethodCall(methodCall);
        if (qualifierCall == null)         return;
        final PsiMethod qualifier=qualifierCall.resolveMethod();
        if (isCallOf(qualifier,CommonClassNames.JAVA_UTIL_COLLECTION,STREAM_METHOD,0)) {
          String message="Collection.stream()." + name + "() can be replaced with Collection.forEach()";
          final LocalQuickFix fix;
          if (FOR_EACH_METHOD.equals(name)) {
            fix=new CollectionForEachFix();
          }
 else {
            fix=new CollectionForEachOrderedFix();
            message+=" (may change semantics)";
          }
          holder.registerProblem(methodCall,getCallChainRange(methodCall,qualifierCall),message,fix);
        }
      }
    }
  }
;
}
