{
  PsiElement element=descriptor.getStartElement();
  if (element instanceof PsiMethodCallExpression) {
    PsiMethodCallExpression collectCall=(PsiMethodCallExpression)element;
    PsiExpression qualifierExpression=collectCall.getMethodExpression().getQualifierExpression();
    if (qualifierExpression != null) {
      PsiElement parameter=collectCall.getArgumentList().getExpressions()[0];
      if (parameter instanceof PsiMethodCallExpression) {
        PsiMethodCallExpression collectorCall=(PsiMethodCallExpression)parameter;
        PsiExpression[] collectorArgs=collectorCall.getArgumentList().getExpressions();
        String result=myStreamSequence;
        for (int i=0; i < collectorArgs.length; i++) {
          result=result.replace("{" + (i + 1) + "}",collectorArgs[i].getText());
        }
        if (!FileModificationService.getInstance().preparePsiElementForWrite(element.getContainingFile()))         return;
        PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
        PsiExpression replacement=factory.createExpressionFromText(qualifierExpression.getText() + "." + result,collectCall);
        PsiElement expression=collectCall.replace(replacement);
        if (expression instanceof PsiExpression) {
          PsiType type=((PsiExpression)expression).getType();
          if (type instanceof PsiPrimitiveType) {
            PsiClassType boxedType=((PsiPrimitiveType)type).getBoxedType(expression);
            if (boxedType != null) {
              PsiExpression castExpression=factory.createExpressionFromText("(" + boxedType.getCanonicalText() + ") "+ expression.getText(),expression);
              PsiElement cast=expression.replace(castExpression);
              if (cast instanceof PsiTypeCastExpression && RedundantCastUtil.isCastRedundant((PsiTypeCastExpression)cast)) {
                RedundantCastUtil.removeCast((PsiTypeCastExpression)cast);
              }
            }
          }
        }
      }
    }
  }
}
