{
  final MatchOptions options=config.getMatchOptions();
  MatchVariableConstraint constraint=(options != null) ? options.getVariableConstraint(varname) : null;
  if (constraint == null)   return "no constraints specified";
  StringBuffer buf=new StringBuffer();
  if (constraint.getRegExp() != null && constraint.getRegExp().length() > 0) {
    if (constraint.isInvertRegExp()) {
      buf.append("not ");
    }
    buf.append("like:");
    buf.append(constraint.getRegExp());
    if (constraint.isWithinHierarchy() || constraint.isStrictlyWithinHierarchy()) {
      buf.append(" within hierarchy ");
    }
    buf.append(',');
  }
  if (constraint.getNameOfExprType() != null && constraint.getNameOfExprType().length() > 0) {
    if (constraint.isInvertExprType()) {
      buf.append("not ");
    }
    buf.append("expr like:");
    buf.append(constraint.getNameOfExprType());
    if (constraint.isExprTypeWithinHierarchy()) {
      buf.append(" within hierarchy ");
    }
    buf.append(',');
  }
  if (constraint.getMinCount() == constraint.getMaxCount()) {
    buf.append("occurs:");
    buf.append(constraint.getMinCount());
  }
 else {
    buf.append("min occurs:");
    buf.append(constraint.getMinCount());
    buf.append(", max occurs:");
    buf.append(constraint.getMaxCount());
  }
  buf.append(" ...");
  return buf.toString();
}
