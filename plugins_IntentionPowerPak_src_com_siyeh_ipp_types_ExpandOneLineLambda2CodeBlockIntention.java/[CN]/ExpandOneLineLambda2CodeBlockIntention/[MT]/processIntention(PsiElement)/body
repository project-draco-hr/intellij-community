{
  final PsiLambdaExpression lambdaExpression=PsiTreeUtil.getParentOfType(element,PsiLambdaExpression.class);
  LOG.assertTrue(lambdaExpression != null);
  final PsiElement body=lambdaExpression.getBody();
  LOG.assertTrue(body instanceof PsiExpression);
  String blockText="{";
  blockText+=PsiType.VOID.equals(LambdaUtil.getFunctionalInterfaceReturnType(lambdaExpression)) ? "" : "return ";
  blockText+=body.getText() + ";}";
  final String resultedLambdaText=lambdaExpression.getParameterList().getText() + "->" + blockText;
  final PsiExpression expressionFromText=JavaPsiFacade.getElementFactory(element.getProject()).createExpressionFromText(resultedLambdaText,lambdaExpression);
  CodeStyleManager.getInstance(element.getProject()).reformat(lambdaExpression.replace(expressionFromText));
}
