{
  VirtualFile dir=getVirtualFile(createTempDirectory());
  PsiTestUtil.addSourceContentToRoots(myModule,dir);
  final VirtualFile vFile=createChildData(dir,"Foo.java");
  VfsUtil.saveText(vFile,"class Foo {}");
  ((VirtualFileSystemEntry)vFile).setModificationStamp(0);
  final Document document=FileDocumentManager.getInstance().getDocument(vFile);
  assertTrue(document != null && document.getModificationStamp() == 0);
  final GlobalSearchScope scope=GlobalSearchScope.projectScope(myProject);
  assertNotNull(myJavaFacade.findClass("Foo",scope));
  WriteCommandAction.runWriteCommandAction(myProject,new Runnable(){
    @Override public void run(){
      document.insertString(0,"import Bar;\n");
      PsiDocumentManager.getInstance(myProject).commitAllDocuments();
      assertNotNull(myJavaFacade.findClass("Foo",scope));
    }
  }
);
  final UndoManager undoManager=UndoManager.getInstance(getProject());
  final Editor editor=createEditor(vFile);
  final FileEditor selectedEditor=new TextEditor(){
    @NotNull @Override public Editor getEditor(){
      return editor;
    }
    @Override public boolean canNavigateTo(    @NotNull Navigatable navigatable){
      return false;
    }
    @Override public void navigateTo(    @NotNull Navigatable navigatable){
    }
    @NotNull @Override public JComponent getComponent(){
      return null;
    }
    @Nullable @Override public JComponent getPreferredFocusedComponent(){
      return null;
    }
    @NotNull @Override public String getName(){
      return null;
    }
    @NotNull @Override public FileEditorState getState(    @NotNull FileEditorStateLevel level){
      return null;
    }
    @Override public void setState(    @NotNull FileEditorState state){
    }
    @Override public boolean isModified(){
      return false;
    }
    @Override public boolean isValid(){
      return false;
    }
    @Override public void selectNotify(){
    }
    @Override public void deselectNotify(){
    }
    @Override public void addPropertyChangeListener(    @NotNull PropertyChangeListener listener){
    }
    @Override public void removePropertyChangeListener(    @NotNull PropertyChangeListener listener){
    }
    @Nullable @Override public BackgroundEditorHighlighter getBackgroundHighlighter(){
      return null;
    }
    @Nullable @Override public FileEditorLocation getCurrentLocation(){
      return null;
    }
    @Nullable @Override public StructureViewBuilder getStructureViewBuilder(){
      return null;
    }
    @Override public void dispose(){
    }
    @Nullable @Override public <T>T getUserData(    @NotNull Key<T> key){
      return null;
    }
    @Override public <T>void putUserData(    @NotNull Key<T> key,    @Nullable T value){
    }
  }
;
  assertTrue(undoManager.isUndoAvailable(selectedEditor));
  FileDocumentManager.getInstance().saveDocument(document);
  undoManager.undo(selectedEditor);
  assertNotNull(myJavaFacade.findClass("Foo",scope));
}
