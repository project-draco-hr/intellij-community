{
  Rectangle viewRectangle=myEditor.getScrollingModel().getVisibleArea();
  if (x - viewRectangle.x < 0) {
    return;
  }
  int lineHeight=myEditor.getLineHeight();
  EditorSettings settings=myEditor.getSettings();
  Color caretColor=myEditor.getColorsScheme().getColor(EditorColors.CARET_COLOR);
  if (caretColor == null)   caretColor=new JBColor(Gray._0,Gray._255);
  g.setColor(caretColor);
  if (myEditor.isInsertMode() != settings.isBlockCursor()) {
    if (UIUtil.isRetina()) {
      g.fillRect(x,y,settings.getLineCursorWidth(),lineHeight);
    }
 else {
      for (int i=0; i < settings.getLineCursorWidth(); i++) {
        UIUtil.drawLine(g,x + i,y,x + i,y + lineHeight - 1);
      }
    }
  }
 else {
    int offset=caret.getOffset();
    int line=myDocument.getLineNumber(offset);
    TextLayoutHighlightShape shape=null;
    if (offset < myDocument.getLineEndOffset(line)) {
      LineView lineView=myLines.get(line);
      int lineStartOffset=myDocument.getLineStartOffset(line);
      shape=lineView.getRangeShape(myEditor,offset - lineStartOffset,offset - lineStartOffset + 1);
    }
    Graphics2D window=(Graphics2D)g.create(0,myEditor.visibleLineToY(line),clip.x + clip.width,lineHeight);
    try {
      Color background=myEditor.getCaretModel().getTextAttributes().getBackgroundColor();
      if (background == null)       background=myEditor.getBackgroundColor();
      window.setXORMode(background);
      if (shape == null) {
        window.fillRect(x,0,myPlainSpaceWidth,lineHeight);
      }
 else {
        shape.fill(window);
      }
      window.setPaintMode();
    }
  finally {
      window.dispose();
    }
  }
}
