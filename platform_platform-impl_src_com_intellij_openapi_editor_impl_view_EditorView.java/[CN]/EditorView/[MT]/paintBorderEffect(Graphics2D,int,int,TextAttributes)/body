{
  int startLine=myDocument.getLineNumber(startOffset);
  int endLine=myDocument.getLineNumber(endOffset);
  if (startLine + 1 == endLine && startOffset == myDocument.getLineStartOffset(startLine) && endOffset == myDocument.getLineStartOffset(endLine)) {
    endLine--;
    endOffset=myDocument.getLineEndOffset(endLine);
  }
  if (startLine >= myLines.size() || endLine >= myLines.size())   return;
  int startLineStartOffset=myDocument.getLineStartOffset(startLine);
  int start=startOffset - startLineStartOffset;
  int end=endOffset - myDocument.getLineStartOffset(endLine);
  LineView startLineView=getLineRenderer(startLine);
  LineView endLineView=getLineRenderer(endLine);
  int maxWidth=getMaxWidthInLineRange(startLine,endLine);
  Graphics2D window=(Graphics2D)g.create(0,myEditor.visibleLineToY(startLine),maxWidth + 2,(endLine - startLine + 1) * myEditor.getLineHeight());
  try {
    window.setColor(attributes.getEffectColor());
    boolean rounded=attributes.getEffectType() == EffectType.ROUNDED_BOX;
    if (startLine == endLine) {
      startLineView.getRangeShape(myEditor,start,end).draw(window,rounded);
    }
 else {
      TextLayoutHighlightShape leading=startLineView.getRangeShape(myEditor,start,myDocument.getLineEndOffset(startLine) - startLineStartOffset);
      TextLayoutHighlightShape trailing=endLineView.getRangeShape(myEditor,0,end);
      TextLayoutHighlightShape.drawCombined(window,leading,trailing,(endLine - startLine) * myEditor.getLineHeight(),maxWidth,startLineView.getVisualLineEndOffset() >= start,rounded);
    }
  }
  finally {
    window.dispose();
  }
}
