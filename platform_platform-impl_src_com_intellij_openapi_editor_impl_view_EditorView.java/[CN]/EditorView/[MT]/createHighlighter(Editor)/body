{
  final Project project=editor.getProject();
  if (project == null)   return null;
  final Document document=editor.getDocument();
  VirtualFile file=FileDocumentManager.getInstance().getFile(document);
  if (file == null || !(file.getFileType() instanceof LanguageFileType))   return null;
  Language draftLanguage=((LanguageFileType)file.getFileType()).getLanguage();
  Language language=LanguageSubstitutors.INSTANCE.substituteLanguage(draftLanguage,file,project);
  ParserDefinition parserDefinition=LanguageParserDefinitions.INSTANCE.forLanguage(language);
  if (parserDefinition == null)   return null;
  final Lexer lexer=parserDefinition.createLexer(project);
  LexerEditorHighlighter highlighter=new LexerEditorHighlighter(new SyntaxHighlighterBase(){
    @Override public @NotNull Lexer getHighlightingLexer(){
      return lexer;
    }
    @NotNull @Override public TextAttributesKey[] getTokenHighlights(    IElementType tokenType){
      return EMPTY;
    }
  }
,DUMMY_COLORS_SCHEME);
  highlighter.setEditor(new HighlighterClient(){
    @Override public Project getProject(){
      return project;
    }
    @Override public void repaint(    int start,    int end){
    }
    @Override public Document getDocument(){
      return document;
    }
  }
);
  highlighter.setText(document.getImmutableCharSequence());
  return highlighter;
}
