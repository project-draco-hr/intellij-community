{
  final PsiElement element=item.getPsiElement();
  if (!myPlainNamesOnly) {
    if (!mySuppressParentheses && element instanceof PyFunction && ((PyFunction)element).getProperty() == null && !PyUtil.hasCustomDecorators((PyFunction)element) && !isSingleArgDecoratorCall(myContext,(PyFunction)element)) {
      final Project project=element.getProject();
      item=item.withInsertHandler(PyFunctionInsertHandler.INSTANCE);
      final TypeEvalContext context=TypeEvalContext.codeCompletion(project,myContext != null ? myContext.getContainingFile() : null);
      final List<PyParameter> parameters=PyUtil.getParameters((PyFunction)element,context);
      final String params=StringUtil.join(parameters,new Function<PyParameter,String>(){
        @Override public String fun(        PyParameter pyParameter){
          return pyParameter.getName();
        }
      }
,", ");
      item=item.withTailText("(" + params + ")");
    }
 else     if (element instanceof PyClass) {
      item=item.withInsertHandler(PyClassInsertHandler.INSTANCE);
    }
  }
  String source=null;
  if (element != null) {
    PyClass cls=null;
    if (element instanceof PyFunction) {
      cls=((PyFunction)element).getContainingClass();
    }
 else     if (element instanceof PyTargetExpression) {
      final PyTargetExpression expr=(PyTargetExpression)element;
      if (expr.isQualified() || ScopeUtil.getScopeOwner(expr) instanceof PyClass) {
        cls=expr.getContainingClass();
      }
    }
 else     if (element instanceof PyClass) {
      final ScopeOwner owner=ScopeUtil.getScopeOwner(element);
      if (owner instanceof PyClass) {
        cls=(PyClass)owner;
      }
    }
    if (cls != null) {
      source=cls.getName();
    }
 else     if (myContext == null || !PyUtil.inSameFile(myContext,element)) {
      QualifiedName path=QualifiedNameFinder.findCanonicalImportPath(element,null);
      if (path != null) {
        if (element instanceof PyFile) {
          path=path.removeLastComponent();
        }
        source=path.toString();
      }
    }
  }
  if (source != null) {
    item=item.withTypeText(source);
  }
  return item;
}
