{
  List<File> existentFiles=getExistentFiles(libraryDescription);
  if (!existentFiles.isEmpty()) {
    return existentFiles;
  }
  final DownloadableFileService downloadService=DownloadableFileService.getInstance();
  final Ref<DownloadableFileSetDescription> descriptionRef=new Ref<DownloadableFileSetDescription>();
  URL versionsUrl=libraryDescription.getDescriptionUrl();
  final DownloadableFileSetVersions<DownloadableFileSetDescription> versions=downloadService.createFileSetVersions(null,versionsUrl);
  final Semaphore semaphore=new Semaphore();
  semaphore.down();
  versions.fetchVersions(new DownloadableFileSetVersions.FileSetVersionsCallback<DownloadableFileSetDescription>(){
    @Override public void onSuccess(    @NotNull List<? extends DownloadableFileSetDescription> versions){
      if (!versions.isEmpty()) {
        descriptionRef.set(versions.get(0));
      }
      semaphore.up();
    }
    @Override public void onError(    @NotNull String errorMessage){
      LOG.error(errorMessage);
      semaphore.up();
    }
  }
);
  semaphore.waitFor();
  final DownloadableFileSetDescription description=descriptionRef.get();
  if (description == null) {
    throw new IOException("No client library versions loaded");
  }
  final Ref<List<Pair<File,DownloadableFileDescription>>> downloaded=Ref.create(null);
  final Ref<IOException> exception=Ref.create(null);
  semaphore.down();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      new Task.Backgroundable(null,"Downloading Client Libraries",true,PerformInBackgroundOption.ALWAYS_BACKGROUND){
        @Override public void run(        @NotNull ProgressIndicator indicator){
          try {
            downloaded.set(downloadService.createDownloader(description).download(getStoreDirectory(libraryDescription)));
          }
 catch (          IOException e) {
            exception.set(e);
          }
 finally {
            semaphore.up();
          }
        }
      }
.queue();
    }
  }
);
  semaphore.waitFor();
  if (!exception.isNull()) {
    throw exception.get();
  }
  if (downloaded.isNull()) {
    throw new IOException("Downloading client libraries cancelled");
  }
  List<File> files=myFiles.get(libraryDescription.getId());
  if (files == null) {
    files=new ArrayList<File>();
    myFiles.put(libraryDescription.getId(),files);
  }
  for (  Pair<File,DownloadableFileDescription> pair : downloaded.get()) {
    files.add(pair.getFirst());
  }
  myEventDispatcher.getMulticaster().downloaded();
  return files;
}
