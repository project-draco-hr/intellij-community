{
  assumeTrue(SystemInfo.areSymLinksSupported);
  File rootDir=IoTestUtil.createTestDir(myTempDirectory,"root");
  assertTrue(new File(rootDir,"dir1/dir2/dir3/dir4").mkdirs());
  String root=FileUtil.toSystemIndependentName(FileUtil.resolveShortWindowsName(rootDir.getPath()));
  IoTestUtil.createSymLink(new File(rootDir,"dir1/dir2").getPath(),new File(rootDir,"dir1/dir2_link").getPath());
  IoTestUtil.createSymLink(new File(rootDir,"dir1").getPath(),new File(rootDir,"dir1/dir1_link").getPath());
  assertEquals(root + "/dir1/dir2_link",FileUtil.toCanonicalPath(root + "/dir1/dir2_link/./",true));
  assertEquals(root + "/dir1/dir2_link",FileUtil.toCanonicalPath(root + "/dir1/dir2_link/dir3/../",true));
  assertEquals(root + "/dir1/dir2_link/dir3",FileUtil.toCanonicalPath(root + "/dir1/dir2_link/dir3/dir4/../",true));
  assertEquals(root + "/dir1/dir2_link",FileUtil.toCanonicalPath(root + "/dir1/dir2_link/dir3/dir4/../../",true));
  assertEquals(root + "/dir1/dir2_link",FileUtil.toCanonicalPath(root + "/dir1/../dir1/dir2_link/dir3/../",true));
  assertEquals(root + "/dir1/dir1_link",FileUtil.toCanonicalPath(root + "/dir1/dir1_link/./",true));
  assertEquals(root + "/dir1/dir1_link",FileUtil.toCanonicalPath(root + "/dir1/dir1_link/dir2/../",true));
  assertEquals(root + "/dir1/dir1_link/dir2",FileUtil.toCanonicalPath(root + "/dir1/dir1_link/dir2/dir3/../",true));
  assertEquals(root + "/dir1/dir1_link",FileUtil.toCanonicalPath(root + "/dir1/dir1_link/dir2/dir3/../../",true));
  assertEquals(root + "/dir1/dir1_link",FileUtil.toCanonicalPath(root + "/dir1/../dir1/dir1_link/dir2/../",true));
  assertEquals(root + "/dir1",FileUtil.toCanonicalPath(root + "/dir1/dir2_link/../",true));
  assertEquals(root + "/dir1/dir2",FileUtil.toCanonicalPath(root + "/dir1/dir2_link/../dir2",true));
  assertEquals(root + "/dir1/dir2",FileUtil.toCanonicalPath(root + "/dir1/dir2_link/../../dir1/dir2",true));
  assertEquals(root + "/dir1/dir2",FileUtil.toCanonicalPath(root + "/dir1/dir2_link/dir3/../../dir2",true));
  assertEquals(root + "/dir1/dir2",FileUtil.toCanonicalPath(root + "/dir1/dir2_link/dir3/../../../dir1/dir2",true));
  assertEquals(root + "/dir1/dir2",FileUtil.toCanonicalPath(root + "/dir1/../dir1/dir2_link/../dir2",true));
  if (SystemInfo.isWindows) {
    assertEquals(root + "/dir1",FileUtil.toCanonicalPath(root + "/dir1/dir1_link/../",true));
    assertEquals(root + "/dir1/dir2",FileUtil.toCanonicalPath(root + "/dir1/dir1_link/../dir2",true));
    assertEquals(root + "/dir1/dir2",FileUtil.toCanonicalPath(root + "/dir1/dir1_link/../../dir1/dir2",true));
    assertEquals(root + "/dir1/dir2",FileUtil.toCanonicalPath(root + "/dir1/dir1_link/dir2/../../dir2",true));
    assertEquals(root + "/dir1/dir2",FileUtil.toCanonicalPath(root + "/dir1/dir1_link/dir2/../../../dir1/dir2",true));
    assertEquals(root + "/dir1/dir2",FileUtil.toCanonicalPath(root + "/dir1/../dir1/dir1_link/../dir2",true));
  }
 else {
    assertEquals(root,FileUtil.toCanonicalPath(root + "/dir1/dir1_link/../",true));
    assertEquals(root + "/dir1",FileUtil.toCanonicalPath(root + "/dir1/dir1_link/../dir1",true));
    assertEquals(root + "/dir1",FileUtil.toCanonicalPath(root + "/dir1/dir1_link/../../root/dir1",true));
    assertEquals(root + "/dir1",FileUtil.toCanonicalPath(root + "/dir1/dir1_link/dir2/../../dir1",true));
    assertEquals(root + "/dir1",FileUtil.toCanonicalPath(root + "/dir1/dir1_link/dir2/../../../root/dir1",true));
    assertEquals(root + "/dir1",FileUtil.toCanonicalPath(root + "/dir1/../dir1/dir1_link/../dir1",true));
  }
  assertEquals(FileUtil.toCanonicalPath("..",false),FileUtil.toCanonicalPath("..",true));
  assertEquals(FileUtil.toCanonicalPath("../",false),FileUtil.toCanonicalPath("../",true));
  assertEquals(FileUtil.toCanonicalPath("/..",false),FileUtil.toCanonicalPath("/..",true));
  assertEquals(FileUtil.toCanonicalPath("/../",false),FileUtil.toCanonicalPath("/../",true));
}
