{
abstract class CountableIOOperation implements FileUtilRt.RepeatableIOOperation<Boolean,IOException> {
    private int count=0;
    @Override public Boolean execute(    boolean lastAttempt) throws IOException {
      count++;
      return stop(lastAttempt) ? true : null;
    }
    protected abstract boolean stop(    boolean lastAttempt);
  }
  CountableIOOperation successful=new CountableIOOperation(){
    @Override protected boolean stop(    boolean lastAttempt){
      return true;
    }
  }
;
  FileUtilRt.doIOOperation(successful);
  assertEquals(1,successful.count);
  CountableIOOperation failed=new CountableIOOperation(){
    @Override protected boolean stop(    boolean lastAttempt){
      return false;
    }
  }
;
  FileUtilRt.doIOOperation(failed);
  assertEquals(10,failed.count);
  CountableIOOperation lastShot=new CountableIOOperation(){
    @Override protected boolean stop(    boolean lastAttempt){
      return lastAttempt;
    }
  }
;
  FileUtilRt.doIOOperation(lastShot);
  assertEquals(10,lastShot.count);
}
