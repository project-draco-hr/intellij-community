{
  final PsiExpressionList argumentList=((PsiCall)expression).getArgumentList();
  if (argumentList != null) {
    final MethodCandidateInfo.CurrentCandidateProperties candidateProperties=MethodCandidateInfo.getCurrentMethod(argumentList);
    PsiType returnType=null;
    PsiTypeParameter[] typeParams=null;
    final JavaResolveResult resolveResult=candidateProperties != null ? null : InferenceSession.getResolveResult((PsiCall)expression);
    final PsiMethod method=InferenceSession.getCalledMethod((PsiCall)expression);
    if (method != null && !method.isConstructor()) {
      returnType=method.getReturnType();
      typeParams=method.getTypeParameters();
    }
 else     if (resolveResult != null) {
      final PsiClass psiClass=method != null ? method.getContainingClass() : (PsiClass)resolveResult.getElement();
      if (psiClass != null) {
        returnType=JavaPsiFacade.getElementFactory(argumentList.getProject()).createType(psiClass,PsiSubstitutor.EMPTY);
        typeParams=psiClass.getTypeParameters();
        if (method != null && method.hasTypeParameters()) {
          typeParams=ArrayUtil.mergeArrays(typeParams,method.getTypeParameters());
        }
      }
    }
    if (typeParams != null) {
      PsiSubstitutor siteSubstitutor=InferenceSession.chooseSiteSubstitutor(candidateProperties,resolveResult,method);
      final InferenceSession callSession=new InferenceSession(typeParams,siteSubstitutor,expression.getManager(),expression);
      callSession.propagateVariables(session.getInferenceVariables(),session.getRestoreNameSubstitution());
      if (method != null) {
        final PsiExpression[] args=argumentList.getExpressions();
        final PsiParameter[] parameters=method.getParameterList().getParameters();
        callSession.initExpressionConstraints(parameters,args,expression,method,InferenceSession.chooseVarargsMode(candidateProperties,resolveResult));
      }
      if (callSession.repeatInferencePhases()) {
        if (PsiType.VOID.equals(targetType)) {
          return callSession;
        }
        if (returnType != null) {
          callSession.registerReturnTypeConstraints(siteSubstitutor.substitute(returnType),targetType);
        }
        if (callSession.repeatInferencePhases()) {
          return callSession;
        }
      }
      final List<String> messages=callSession.getIncompatibleErrorMessages();
      if (messages != null) {
        for (        String message : messages) {
          session.registerIncompatibleErrorMessage(message);
        }
      }
    }
    return null;
  }
  return session;
}
