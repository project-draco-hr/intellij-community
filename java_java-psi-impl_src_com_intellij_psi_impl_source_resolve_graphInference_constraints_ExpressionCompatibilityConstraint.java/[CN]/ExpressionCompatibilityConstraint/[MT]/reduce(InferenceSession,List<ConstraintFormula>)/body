{
  if (!PsiPolyExpressionUtil.isPolyExpression(myExpression)) {
    if (session.isProperType(myT)) {
      return TypeConversionUtil.areTypesAssignmentCompatible(myT,myExpression);
    }
    final PsiType exprType=myExpression.getType();
    if (exprType != null && !exprType.equals(PsiType.NULL)) {
      constraints.add(new TypeCompatibilityConstraint(myT,exprType));
    }
    return true;
  }
  if (myExpression instanceof PsiParenthesizedExpression) {
    final PsiExpression expression=((PsiParenthesizedExpression)myExpression).getExpression();
    if (expression != null) {
      constraints.add(new ExpressionCompatibilityConstraint(expression,myT));
      return true;
    }
  }
  if (myExpression instanceof PsiConditionalExpression) {
    final PsiExpression thenExpression=((PsiConditionalExpression)myExpression).getThenExpression();
    if (thenExpression != null) {
      constraints.add(new ExpressionCompatibilityConstraint(thenExpression,myT));
    }
    final PsiExpression elseExpression=((PsiConditionalExpression)myExpression).getElseExpression();
    if (elseExpression != null) {
      constraints.add(new ExpressionCompatibilityConstraint(elseExpression,myT));
    }
    return true;
  }
  if (myExpression instanceof PsiCallExpression) {
    final PsiExpressionList argumentList=((PsiCallExpression)myExpression).getArgumentList();
    if (argumentList != null) {
      final Pair<PsiMethod,PsiSubstitutor> pair=MethodCandidateInfo.getCurrentMethod(argumentList);
      if (pair != null)       return true;
      final PsiMethod method=((PsiCallExpression)myExpression).resolveMethod();
      PsiType returnType=null;
      InferenceSession callSession=null;
      if (method != null && !method.isConstructor()) {
        returnType=method.getReturnType();
        if (returnType != null) {
          callSession=new InferenceSession(method.getTypeParameters(),PsiSubstitutor.EMPTY,myExpression.getManager());
        }
      }
 else       if (myExpression instanceof PsiNewExpression) {
        final PsiJavaCodeReferenceElement classReference=((PsiNewExpression)myExpression).getClassOrAnonymousClassReference();
        if (classReference != null) {
          final PsiElement psiClass=classReference.resolve();
          if (psiClass instanceof PsiClass) {
            returnType=JavaPsiFacade.getElementFactory(argumentList.getProject()).createType((PsiClass)psiClass,PsiSubstitutor.EMPTY);
            callSession=new InferenceSession(((PsiClass)psiClass).getTypeParameters(),PsiSubstitutor.EMPTY,myExpression.getManager());
          }
        }
      }
      if (callSession != null) {
        for (        PsiTypeParameter typeParameter : session.getTypeParams()) {
          callSession.addCapturedVariable(typeParameter);
        }
        callSession.addConstraint(new TypeCompatibilityConstraint(myT,returnType));
        final PsiSubstitutor callSubstitutor=callSession.infer();
        if (myExpression instanceof PsiMethodCallExpression) {
          returnType=PsiMethodCallExpressionImpl.captureReturnType((PsiMethodCallExpression)myExpression,method,returnType,callSubstitutor);
        }
 else {
          returnType=callSubstitutor.substitute(returnType);
        }
        if (!TypeConversionUtil.isAssignable(myT,returnType)) {
          constraints.add(new TypeCompatibilityConstraint(GenericsUtil.eliminateWildcards(myT,false),returnType));
        }
      }
    }
    return true;
  }
  if (myExpression instanceof PsiMethodReferenceExpression) {
    constraints.add(new PsiMethodReferenceCompatibilityConstraint(((PsiMethodReferenceExpression)myExpression),myT));
    return true;
  }
  if (myExpression instanceof PsiLambdaExpression) {
    constraints.add(new LambdaExpressionCompatibilityConstraint((PsiLambdaExpression)myExpression,myT));
    return true;
  }
  return true;
}
