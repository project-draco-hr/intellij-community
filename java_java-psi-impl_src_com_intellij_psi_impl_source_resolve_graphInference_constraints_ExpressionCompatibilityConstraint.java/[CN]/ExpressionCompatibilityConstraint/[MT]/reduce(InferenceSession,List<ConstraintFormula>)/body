{
  if (!PsiPolyExpressionUtil.isPolyExpression(myExpression)) {
    if (session.isProperType(myT)) {
      final boolean assignmentCompatible=TypeConversionUtil.areTypesAssignmentCompatible(myT,myExpression);
      if (!assignmentCompatible) {
        final PsiType type=myExpression.getType();
        session.registerIncompatibleErrorMessage((type != null ? type.getPresentableText() : myExpression.getText()) + " is not compatible with " + myT.getPresentableText());
      }
      return assignmentCompatible;
    }
    final PsiType exprType=myExpression.getType();
    if (exprType instanceof PsiLambdaParameterType) {
      return false;
    }
    if (exprType instanceof PsiClassType) {
      if (((PsiClassType)exprType).resolve() == null) {
        return true;
      }
      if (((PsiClassType)exprType).isRaw()) {
        session.setErased();
      }
    }
    if (exprType != null && exprType != PsiType.NULL) {
      constraints.add(new TypeCompatibilityConstraint(myT,exprType));
    }
    return true;
  }
  if (myExpression instanceof PsiParenthesizedExpression) {
    final PsiExpression expression=((PsiParenthesizedExpression)myExpression).getExpression();
    if (expression != null) {
      constraints.add(new ExpressionCompatibilityConstraint(expression,myT));
      return true;
    }
  }
  if (myExpression instanceof PsiConditionalExpression) {
    final PsiExpression thenExpression=((PsiConditionalExpression)myExpression).getThenExpression();
    if (thenExpression != null) {
      constraints.add(new ExpressionCompatibilityConstraint(thenExpression,myT));
    }
    final PsiExpression elseExpression=((PsiConditionalExpression)myExpression).getElseExpression();
    if (elseExpression != null) {
      constraints.add(new ExpressionCompatibilityConstraint(elseExpression,myT));
    }
    return true;
  }
  if (myExpression instanceof PsiCall) {
    final InferenceSession callSession=reduceExpressionCompatibilityConstraint(session,myExpression,myT);
    if (callSession == null) {
      return false;
    }
    if (callSession != session) {
      session.getInferenceSessionContainer().registerNestedSession(callSession);
      session.propagateVariables(callSession.getInferenceVariables());
      if (callSession.isErased()) {
        session.setErased();
      }
    }
    return true;
  }
  if (myExpression instanceof PsiMethodReferenceExpression) {
    constraints.add(new PsiMethodReferenceCompatibilityConstraint(((PsiMethodReferenceExpression)myExpression),myT));
    return true;
  }
  if (myExpression instanceof PsiLambdaExpression) {
    constraints.add(new LambdaExpressionCompatibilityConstraint((PsiLambdaExpression)myExpression,myT));
    return true;
  }
  return true;
}
