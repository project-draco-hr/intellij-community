{
  if (!PsiPolyExpressionUtil.isPolyExpression(myExpression)) {
    if (session.isProperType(myT)) {
      return TypeConversionUtil.areTypesAssignmentCompatible(myT,myExpression);
    }
    final PsiType exprType=myExpression.getType();
    if (exprType instanceof PsiLambdaParameterType) {
      return false;
    }
    if (exprType != null && exprType != PsiType.NULL) {
      constraints.add(new TypeCompatibilityConstraint(myT,exprType));
    }
    return true;
  }
  if (myExpression instanceof PsiParenthesizedExpression) {
    final PsiExpression expression=((PsiParenthesizedExpression)myExpression).getExpression();
    if (expression != null) {
      constraints.add(new ExpressionCompatibilityConstraint(expression,myT));
      return true;
    }
  }
  if (myExpression instanceof PsiConditionalExpression) {
    final PsiExpression thenExpression=((PsiConditionalExpression)myExpression).getThenExpression();
    if (thenExpression != null) {
      constraints.add(new ExpressionCompatibilityConstraint(thenExpression,myT));
    }
    final PsiExpression elseExpression=((PsiConditionalExpression)myExpression).getElseExpression();
    if (elseExpression != null) {
      constraints.add(new ExpressionCompatibilityConstraint(elseExpression,myT));
    }
    return true;
  }
  if (myExpression instanceof PsiCallExpression) {
    final PsiExpressionList argumentList=((PsiCallExpression)myExpression).getArgumentList();
    if (argumentList != null) {
      final MethodCandidateInfo.CurrentCandidateProperties candidateProperties=MethodCandidateInfo.getCurrentMethod(((PsiCallExpression)myExpression).getArgumentList());
      final JavaResolveResult resolveResult=candidateProperties != null ? null : ((PsiCallExpression)myExpression).resolveMethodGenerics();
      final PsiMethod method=candidateProperties != null ? candidateProperties.getMethod() : (PsiMethod)resolveResult.getElement();
      PsiType returnType=null;
      PsiTypeParameter[] typeParams=null;
      if (method != null && !method.isConstructor()) {
        returnType=method.getReturnType();
        if (returnType != null) {
          typeParams=method.getTypeParameters();
        }
      }
 else       if (myExpression instanceof PsiNewExpression) {
        final PsiJavaCodeReferenceElement classReference=((PsiNewExpression)myExpression).getClassOrAnonymousClassReference();
        if (classReference != null) {
          final PsiElement psiClass=classReference.resolve();
          if (psiClass instanceof PsiClass) {
            returnType=JavaPsiFacade.getElementFactory(argumentList.getProject()).createType((PsiClass)psiClass,PsiSubstitutor.EMPTY);
            typeParams=((PsiClass)psiClass).getTypeParameters();
          }
        }
      }
      if (typeParams != null) {
        PsiSubstitutor siteSubstitutor=resolveResult instanceof MethodCandidateInfo && method != null && !method.isConstructor() ? ((MethodCandidateInfo)resolveResult).getSiteSubstitutor() : candidateProperties != null ? candidateProperties.getSubstitutor() : PsiSubstitutor.EMPTY;
        final InferenceSession callSession=new InferenceSession(typeParams,siteSubstitutor,myExpression.getManager(),myExpression);
        callSession.propagateVariables(session.getInferenceVariables());
        if (method != null) {
          final PsiExpression[] args=argumentList.getExpressions();
          final PsiParameter[] parameters=method.getParameterList().getParameters();
          callSession.initExpressionConstraints(parameters,args,myExpression,method,resolveResult instanceof MethodCandidateInfo && ((MethodCandidateInfo)resolveResult).isVarargs() || candidateProperties != null && candidateProperties.isVarargs());
        }
        final boolean accepted=callSession.repeatInferencePhases(true);
        if (!accepted) {
          return false;
        }
        callSession.registerReturnTypeConstraints(siteSubstitutor.substitute(returnType),myT);
        if (callSession.repeatInferencePhases(true)) {
          session.registerNestedSession(callSession);
        }
 else {
          return false;
        }
      }
    }
    return true;
  }
  if (myExpression instanceof PsiMethodReferenceExpression) {
    constraints.add(new PsiMethodReferenceCompatibilityConstraint(((PsiMethodReferenceExpression)myExpression),myT));
    return true;
  }
  if (myExpression instanceof PsiLambdaExpression) {
    constraints.add(new LambdaExpressionCompatibilityConstraint((PsiLambdaExpression)myExpression,myT));
    return true;
  }
  return true;
}
