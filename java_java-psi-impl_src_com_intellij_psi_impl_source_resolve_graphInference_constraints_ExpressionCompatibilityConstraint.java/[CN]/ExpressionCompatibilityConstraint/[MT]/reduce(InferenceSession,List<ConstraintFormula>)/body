{
  if (!PsiPolyExpressionUtil.isPolyExpression(myExpression)) {
    if (session.isProperType(myT)) {
      return TypeConversionUtil.areTypesAssignmentCompatible(myT,myExpression);
    }
    final PsiType exprType=myExpression.getType();
    if (exprType != null) {
      constraints.add(new TypeCompatibilityConstraint(myT,exprType));
    }
    return true;
  }
  if (myExpression instanceof PsiParenthesizedExpression) {
    final PsiExpression expression=((PsiParenthesizedExpression)myExpression).getExpression();
    if (expression != null) {
      constraints.add(new ExpressionCompatibilityConstraint(expression,myT));
      return true;
    }
  }
  if (myExpression instanceof PsiConditionalExpression) {
    final PsiExpression thenExpression=((PsiConditionalExpression)myExpression).getThenExpression();
    if (thenExpression != null) {
      constraints.add(new ExpressionCompatibilityConstraint(thenExpression,myT));
    }
    final PsiExpression elseExpression=((PsiConditionalExpression)myExpression).getElseExpression();
    if (elseExpression != null) {
      constraints.add(new ExpressionCompatibilityConstraint(elseExpression,myT));
    }
    return true;
  }
  if (myExpression instanceof PsiCallExpression) {
    final PsiExpressionList argumentList=((PsiCallExpression)myExpression).getArgumentList();
    if (argumentList != null) {
      final Pair<PsiMethod,PsiSubstitutor> pair=MethodCandidateInfo.getCurrentMethod(argumentList);
      final JavaResolveResult resolveResult=pair == null ? ((PsiCallExpression)myExpression).resolveMethodGenerics() : null;
      final PsiMethod method=pair != null ? pair.first : (PsiMethod)resolveResult.getElement();
      PsiType returnType=null;
      PsiTypeParameter[] typeParams=null;
      if (method != null && !method.isConstructor()) {
        returnType=method.getReturnType();
        if (returnType != null) {
          typeParams=method.getTypeParameters();
        }
      }
 else       if (myExpression instanceof PsiNewExpression) {
        final PsiJavaCodeReferenceElement classReference=((PsiNewExpression)myExpression).getClassOrAnonymousClassReference();
        if (classReference != null) {
          final PsiElement psiClass=classReference.resolve();
          if (psiClass instanceof PsiClass) {
            returnType=JavaPsiFacade.getElementFactory(argumentList.getProject()).createType((PsiClass)psiClass,PsiSubstitutor.EMPTY);
            typeParams=((PsiClass)psiClass).getTypeParameters();
          }
        }
      }
      if (typeParams != null) {
        for (        PsiTypeParameter typeParam : typeParams) {
          session.addCapturedVariable(typeParam);
        }
        PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
        if (pair == null) {
          if (method != null) {
            InferenceSession callSession=new InferenceSession(typeParams,((MethodCandidateInfo)resolveResult).getSiteSubstitutor(),myExpression.getManager(),myExpression);
            final PsiExpression[] args=argumentList.getExpressions();
            final PsiParameter[] parameters=method.getParameterList().getParameters();
            callSession.initExpressionConstraints(parameters,args,myExpression,method);
            substitutor=callSession.infer(parameters,args,myExpression,true,LiftParameterTypeInferencePolicy.INSTANCE);
          }
        }
 else {
          substitutor=pair.second;
        }
        final PsiType capturedReturnType=myExpression instanceof PsiMethodCallExpression ? PsiMethodCallExpressionImpl.captureReturnType((PsiMethodCallExpression)myExpression,method,returnType,substitutor) : substitutor.substitute(returnType);
        constraints.add(new TypeCompatibilityConstraint(GenericsUtil.eliminateWildcards(myT,false),capturedReturnType));
      }
    }
    return true;
  }
  if (myExpression instanceof PsiMethodReferenceExpression) {
    constraints.add(new PsiMethodReferenceCompatibilityConstraint(((PsiMethodReferenceExpression)myExpression),myT));
    return true;
  }
  if (myExpression instanceof PsiLambdaExpression) {
    constraints.add(new LambdaExpressionCompatibilityConstraint((PsiLambdaExpression)myExpression,myT));
    return true;
  }
  return true;
}
