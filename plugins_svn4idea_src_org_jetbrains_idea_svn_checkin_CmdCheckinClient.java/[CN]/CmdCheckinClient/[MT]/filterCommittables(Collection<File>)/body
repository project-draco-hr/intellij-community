{
  final Set<String> childrenOfSomebody=ContainerUtil.newHashSet();
  new AbstractFilterChildren<File>(){
    @Override protected void sortAscending(    List<File> list){
      Collections.sort(list);
    }
    @Override protected boolean isAncestor(    File parent,    File child){
      final boolean isAncestor=FileUtil.isAncestor(parent,child,true);
      if (isAncestor) {
        childrenOfSomebody.add(child.getPath());
      }
      return isAncestor;
    }
  }
.doFilter(ContainerUtil.newArrayList(committables));
  if (!childrenOfSomebody.isEmpty()) {
    List<File> result=ContainerUtil.newArrayList();
    StatusClient statusClient=myFactory.createStatusClient();
    for (    File file : committables) {
      if (!childrenOfSomebody.contains(file.getPath())) {
        result.add(file);
      }
 else {
        try {
          final Status status=statusClient.doStatus(file,false);
          if (status != null && !StatusType.STATUS_NONE.equals(status.getContentsStatus()) && !StatusType.STATUS_UNVERSIONED.equals(status.getContentsStatus())) {
            result.add(file);
          }
        }
 catch (        SvnBindException e) {
          LOG.info(e);
          throw e;
        }
      }
    }
    return result;
  }
  return committables;
}
