{
  @SuppressWarnings("unused") int requests=myGetResourceRequests.incrementAndGet();
  long started=System.nanoTime();
  try {
    if (myCanLockJar) {
      SoftReference<ZipFile> zipFileSoftReference=myZipFileSoftReference;
      if (zipFileSoftReference != null) {
        ZipFile existingZipFile=zipFileSoftReference.get();
        if (existingZipFile != null)         return existingZipFile;
      }
synchronized (ourLock) {
        zipFileSoftReference=myZipFileSoftReference;
        if (zipFileSoftReference != null) {
          ZipFile existingZipFile=zipFileSoftReference.get();
          if (existingZipFile != null)           return existingZipFile;
        }
        ZipFile zipFile=new ZipFile(myCanonicalFile);
        myZipFileSoftReference=new SoftReference<ZipFile>(zipFile);
        return zipFile;
      }
    }
 else {
      return new ZipFile(myCanonicalFile);
    }
  }
  finally {
    myOpenTime.addAndGet(System.nanoTime() - started);
  }
}
