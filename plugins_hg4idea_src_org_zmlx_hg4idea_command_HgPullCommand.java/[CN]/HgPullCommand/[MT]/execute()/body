{
  List<String> arguments=new LinkedList<String>();
  if (update) {
    arguments.add("--update");
  }
 else   if (rebase) {
    arguments.add("--rebase");
  }
  if (!StringUtil.isEmptyOrSpaces(revision)) {
    arguments.add("--rev");
    arguments.add(revision);
  }
  arguments.add(source);
  final HgCommandExecutor executor=new HgCommandExecutor(project,source);
  executor.setShowOutput(true);
  HgCommandResult result=executor.executeInCurrentThread(repo,"pull",arguments);
  if (!project.isDisposed()) {
    HgRepositoryManager manager=HgUtil.getRepositoryManager(project);
    manager.updateRepository(repo);
  }
  if (HgErrorUtil.isAuthorizationError(result)) {
    new HgCommandResultNotifier(project).notifyError(result,"Authorization required","http authorization required for <code>" + source + "</code>");
    return ERROR;
  }
 else   if (HgErrorUtil.isAbort(result) || result.getExitValue() > 1) {
    new HgCommandResultNotifier(project).notifyError(result,"","Pull failed");
    return ERROR;
  }
 else   if (result.getExitValue() == 1) {
    return UNRESOLVED;
  }
 else {
    project.getMessageBus().syncPublisher(HgVcs.REMOTE_TOPIC).update(project,null);
    return SUCCESS;
  }
}
