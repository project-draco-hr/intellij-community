{
  final PsiManager psiManager=PsiManager.getInstance(project);
  final PackageWrapper packageWrapper=new PackageWrapper(psiManager,packageName);
  final PsiPackage aPackage=JavaPsiFacade.getInstance(project).findPackage(packageName);
  PsiDirectory directory;
  PsiDirectory[] directories=aPackage != null ? aPackage.getDirectories() : null;
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  final VirtualFile baseDirVirtualFile=baseDir != null ? baseDir.getVirtualFile() : null;
  final boolean isBaseDirInTestSources=baseDirVirtualFile != null && fileIndex.isInTestSourceContent(baseDirVirtualFile);
  if (directories != null && directories.length == 1 && (baseDirVirtualFile == null || fileIndex.isInTestSourceContent(directories[0].getVirtualFile()) == isBaseDirInTestSources)) {
    directory=directories[0];
  }
 else {
    final VirtualFile[] contentSourceRoots=ProjectRootManager.getInstance(project).getContentSourceRoots();
    if (contentSourceRoots.length == 1 && (baseDirVirtualFile == null || fileIndex.isInTestSourceContent(contentSourceRoots[0]) == isBaseDirInTestSources)) {
      directory=ApplicationManager.getApplication().runWriteAction(new Computable<PsiDirectory>(){
        @Override public PsiDirectory compute(){
          return RefactoringUtil.createPackageDirectoryInSourceRoot(packageWrapper,contentSourceRoots[0]);
        }
      }
);
    }
 else {
      final VirtualFile sourceRootForFile=chooseSourceRoot(packageWrapper,contentSourceRoots,baseDir);
      if (sourceRootForFile == null)       return null;
      directory=ApplicationManager.getApplication().runWriteAction(new Computable<PsiDirectory>(){
        @Override public PsiDirectory compute(){
          return new AutocreatingSingleSourceRootMoveDestination(packageWrapper,sourceRootForFile).getTargetDirectory((PsiDirectory)null);
        }
      }
);
    }
  }
  return directory;
}
