{
  if (myNestingRules == null) {
    myNestingRules=new THashSet<>();
    final NestingRulesConsumer consumer=new NestingRulesConsumer(){
      @Override public void addNestingRule(      @NotNull final String parentFileSuffix,      @NotNull final String childFileSuffix){
        LOG.assertTrue(!parentFileSuffix.isEmpty() && !childFileSuffix.isEmpty(),"file suffix must not be empty");
        LOG.assertTrue(!parentFileSuffix.equals(childFileSuffix),"parent and child suffixes must be different: " + parentFileSuffix);
        myNestingRules.add(new NestingRule(parentFileSuffix,childFileSuffix));
      }
    }
;
    for (    NestingRulesProvider provider : EP_NAME.getExtensions()) {
      provider.addFileNestingRules(consumer);
    }
  }
  return myNestingRules;
}
