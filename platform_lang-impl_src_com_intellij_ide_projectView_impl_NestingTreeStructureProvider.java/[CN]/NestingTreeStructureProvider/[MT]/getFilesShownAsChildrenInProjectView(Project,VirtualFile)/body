{
  LOG.assertTrue(!parentFile.isDirectory());
  final VirtualFile dir=parentFile.getParent();
  if (dir == null)   return Collections.emptyList();
  final Collection<NestingRule> rules=getNestingRulesStatic(project);
  if (rules.isEmpty())   return Collections.emptyList();
  final VirtualFile[] children=dir.getChildren();
  if (children.length <= 1)   return Collections.emptyList();
  final Collection<NestingRule> rulesWhereItCanBeParent=filterRules(rules,parentFile.getName(),true);
  if (rulesWhereItCanBeParent.isEmpty())   return Collections.emptyList();
  final Collection<NestingRule> rulesWhereItCanBeChild=filterRules(rules,parentFile.getName(),false);
  final SmartList<ChildFileInfo> result=new SmartList<>();
  for (  VirtualFile child : children) {
    if (child.isDirectory())     continue;
    if (child.equals(parentFile))     continue;
    for (    NestingRule rule : rulesWhereItCanBeChild) {
      final String childName=child.getName();
      final Couple<Boolean> c=checkMatchingAsParentOrChild(rule,childName);
      final boolean matchesParent=c.first;
      if (matchesParent) {
        final String baseName=childName.substring(0,childName.length() - rule.myParentFileSuffix.length());
        if (parentFile.getName().equals(baseName + rule.myChildFileSuffix)) {
          return Collections.emptyList();
        }
      }
    }
    for (    NestingRule rule : rulesWhereItCanBeParent) {
      final String childName=child.getName();
      final Couple<Boolean> c=checkMatchingAsParentOrChild(rule,childName);
      final boolean matchesChild=c.second;
      if (matchesChild) {
        final String baseName=childName.substring(0,childName.length() - rule.myChildFileSuffix.length());
        if (parentFile.getName().equals(baseName + rule.myParentFileSuffix)) {
          result.add(new ChildFileInfo(child,baseName));
        }
      }
    }
  }
  return result;
}
