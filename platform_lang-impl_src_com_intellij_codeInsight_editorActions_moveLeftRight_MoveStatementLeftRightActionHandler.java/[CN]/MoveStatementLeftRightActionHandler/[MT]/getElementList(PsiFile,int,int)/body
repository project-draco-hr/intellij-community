{
  PsiElement startElement=file.findElementAt(rangeStart);
  if (startElement == null)   return null;
  PsiElement endElement=rangeEnd > rangeStart ? file.findElementAt(rangeEnd - 1) : startElement;
  if (endElement == null)   return null;
  PsiElement element=PsiTreeUtil.findCommonParent(startElement,endElement);
  outer:   while (element != null) {
    List<MoveStatementLeftRightHandler> handlers=MoveStatementLeftRightHandler.EXTENSION.allForLanguage(element.getLanguage());
    for (    MoveStatementLeftRightHandler handler : handlers) {
      PsiElement[] elementList=handler.getElementListInContext(element);
      if (elementList != null) {
        PsiElement first=elementList[0];
        PsiElement last=elementList[elementList.length - 1];
        if (rangeStart < first.getTextRange().getStartOffset() || rangeEnd > last.getTextRange().getEndOffset() || rangeStart < first.getTextRange().getEndOffset() && rangeEnd > last.getTextRange().getStartOffset()) {
          PsiElement parent=PsiTreeUtil.findCommonParent(element,first);
          element=(parent == element) ? element.getParent() : parent;
          continue outer;
        }
        return elementList;
      }
    }
    return null;
  }
  return null;
}
