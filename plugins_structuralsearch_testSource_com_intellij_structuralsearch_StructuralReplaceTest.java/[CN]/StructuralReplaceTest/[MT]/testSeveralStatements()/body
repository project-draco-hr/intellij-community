{
  String s1="{\n" + "        System.out.println(1);\n" + "        System.out.println(2);\n"+ "        System.out.println(3);\n"+ "      }\n"+ "{\n"+ "        System.out.println(1);\n"+ "        System.out.println(2);\n"+ "        System.out.println(3);\n"+ "      }\n"+ "{\n"+ "        System.out.println(1);\n"+ "        System.out.println(2);\n"+ "        System.out.println(3);\n"+ "      }";
  String s2="        System.out.println(1);\n" + "        System.out.println(2);\n" + "        System.out.println(3);\n";
  String s3="        System.out.println(3);\n" + "        System.out.println(2);\n" + "        System.out.println(1);\n";
  String expectedResult1="    {\n" + "        System.out.println(3);\n" + "        System.out.println(2);\n"+ "        System.out.println(1);\n"+ "    }\n"+ "    {\n"+ "        System.out.println(3);\n"+ "        System.out.println(2);\n"+ "        System.out.println(1);\n"+ "    }\n"+ "    {\n"+ "        System.out.println(3);\n"+ "        System.out.println(2);\n"+ "        System.out.println(1);\n"+ "    }";
  options.setToReformatAccordingToStyle(true);
  actualResult=replacer.testReplace(s1,s2,s3,options);
  options.setToReformatAccordingToStyle(false);
  assertEquals("three statements replacement",expectedResult1,actualResult);
  String s4="ProgressManager.getInstance().startNonCancelableAction();\n" + "    try {\n" + "      read(id, READ_PARENT);\n"+ "      return myViewport.parent;\n"+ "    }\n"+ "    finally {\n"+ "      ProgressManager.getInstance().finishNonCancelableAction();\n"+ "    }";
  String s5="ProgressManager.getInstance().startNonCancelableAction();\n" + "    try {\n" + "      '_statement{2,2};\n"+ "    }\n"+ "    finally {\n"+ "      ProgressManager.getInstance().finishNonCancelableAction();\n"+ "    }";
  String s6="$statement$;";
  String expectedResult2="read(id, READ_PARENT);\n" + "return myViewport.parent;";
  actualResult=replacer.testReplace(s4,s5,s6,options);
  assertEquals("extra ;",expectedResult2,actualResult);
  String s7="public class A {\n" + "    void f() {\n" + "        new Runnable() {\n"+ "            public void run() {\n"+ "                l();\n"+ "            }\n"+ "\n"+ "            private void l() {\n"+ "                int i = 9;\n"+ "                int j = 9;\n"+ "            }\n"+ "        };\n"+ "        new Runnable() {\n"+ "            public void run() {\n"+ "                l();\n"+ "            }\n"+ "\n"+ "            private void l() {\n"+ "                l();\n"+ "                l();\n"+ "            }\n"+ "        };\n"+ "    }\n"+ "\n"+ "}";
  String s8="new Runnable() {\n" + "    public void run() {\n" + "        'l ();\n"+ "    }\n"+ "    private void 'l () {\n"+ "        'st{2,2};\n"+ "    }\n"+ "};";
  String s9="new My() {\n" + "    public void f() {\n" + "        $st$;\n"+ "    }\n"+ "};";
  String expectedResult3="public class A {\n" + "    void f() {\n" + "        new My() {\n"+ "            public void f() {\n"+ "                int i = 9;\n"+ "                int j = 9;\n"+ "            }\n"+ "        };\n"+ "        new My() {\n"+ "            public void f() {\n"+ "                l();\n"+ "                l();\n"+ "            }\n"+ "        };\n"+ "    }\n"+ "\n"+ "}";
  boolean formatAccordingToStyle=options.isToReformatAccordingToStyle();
  options.setToReformatAccordingToStyle(true);
  actualResult=replacer.testReplace(s7,s8,s9,options);
  assertEquals("extra ; 2",expectedResult3,actualResult);
  String s10="public class A {\n" + "    void f() {\n" + "        new Runnable() {\n"+ "            public void run() {\n"+ "                l();\n"+ "                l();\n"+ "            }\n"+ "            public void run2() {\n"+ "                l();\n"+ "                l();\n"+ "            }\n"+ "\n"+ "        };\n"+ "        new Runnable() {\n"+ "            public void run() {\n"+ "                l();\n"+ "                l();\n"+ "            }\n"+ "            public void run2() {\n"+ "                l();\n"+ "                l();\n"+ "            }\n"+ "\n"+ "        };\n"+ "new Runnable() {\n"+ "            public void run() {\n"+ "                l();\n"+ "                l();\n"+ "            }\n"+ "            public void run2() {\n"+ "                l2();\n"+ "                l2();\n"+ "            }\n"+ "\n"+ "        };\n"+ "    }\n"+ "\n"+ "    private void l() {\n"+ "        int i = 9;\n"+ "        int j = 9;\n"+ "    }\n"+ "}\n"+ "\n"+ "abstract class My {\n"+ "    abstract void f();\n"+ "}";
  String s11="new Runnable() {\n" + "            public void run() {\n" + "                'l{2,2};\n"+ "            }\n"+ "            public void run2() {\n"+ "                'l{2,2};\n"+ "            }\n"+ "\n"+ "        };";
  String s12="new My() {\n" + "            public void f() {\n" + "                $l$;\n"+ "            }\n"+ "        };";
  String expectedResult4="public class A {\n" + "    void f() {\n" + "        new My() {\n"+ "            public void f() {\n"+ "                l();\n"+ "                l();\n"+ "            }\n"+ "        };\n"+ "        new My() {\n"+ "            public void f() {\n"+ "                l();\n"+ "                l();\n"+ "            }\n"+ "        };\n"+ "        new Runnable() {\n"+ "            public void run() {\n"+ "                l();\n"+ "                l();\n"+ "            }\n"+ "\n"+ "            public void run2() {\n"+ "                l2();\n"+ "                l2();\n"+ "            }\n"+ "\n"+ "        };\n"+ "    }\n"+ "\n"+ "    private void l() {\n"+ "        int i = 9;\n"+ "        int j = 9;\n"+ "    }\n"+ "}\n"+ "\n"+ "abstract class My {\n"+ "    abstract void f();\n"+ "}";
  actualResult=replacer.testReplace(s10,s11,s12,options);
  assertEquals("same multiple occurences 2 times",expectedResult4,actualResult);
  options.setToReformatAccordingToStyle(formatAccordingToStyle);
  String s13="    PsiLock.LOCK.acquire();\n" + "    try {\n" + "      return value;\n"+ "    }\n"+ "    finally {\n"+ "      PsiLock.LOCK.release();\n"+ "    }";
  String s13_2="    PsiLock.LOCK.acquire();\n" + "    try {\n" + "      if (true) { return value; }\n"+ "    }\n"+ "    finally {\n"+ "      PsiLock.LOCK.release();\n"+ "    }";
  String s13_3="    PsiLock.LOCK.acquire();\n" + "    try {\n" + "      if (true) { return value; }\n\n"+ "      if (true) { return value; }\n"+ "    }\n"+ "    finally {\n"+ "      PsiLock.LOCK.release();\n"+ "    }";
  String s14="    PsiLock.LOCK.acquire();\n" + "    try {\n" + "      'T{1,1000};\n"+ "    }\n"+ "    finally {\n"+ "      PsiLock.LOCK.release();\n"+ "    }";
  String s15="synchronized(PsiLock.LOCK) {\n" + "  $T$;\n" + "}";
  String expectedResult5="    synchronized (PsiLock.LOCK) {\n" + "        return value;\n" + "    }";
  options.setToReformatAccordingToStyle(true);
  actualResult=replacer.testReplace(s13,s14,s15,options);
  options.setToReformatAccordingToStyle(false);
  assertEquals("extra ; over return",expectedResult5,actualResult);
  String expectedResult6="    synchronized (PsiLock.LOCK) {\n" + "        if (true) {\n" + "            return value;\n"+ "        }\n"+ "    }";
  options.setToReformatAccordingToStyle(true);
  actualResult=replacer.testReplace(s13_2,s14,s15,options);
  options.setToReformatAccordingToStyle(false);
  assertEquals("extra ; over if",expectedResult6,actualResult);
  String expectedResult7="    synchronized (PsiLock.LOCK) {\n" + "        if (true) {\n" + "            return value;\n"+ "        }\n"+ "\n"+ "        if (true) {\n"+ "            return value;\n"+ "        }\n"+ "    }";
  options.setToReformatAccordingToStyle(true);
  actualResult=replacer.testReplace(s13_3,s14,s15,options);
  options.setToReformatAccordingToStyle(false);
  assertEquals("newlines in matches of several lines",expectedResult7,actualResult);
  String s16="public class SSTest {\n" + "  Object lock;\n" + "  public Object getProducts (String[] productNames) {\n"+ "    synchronized (lock) {\n"+ "      Object o = new Object ();\n"+ "      assert o != null;\n"+ "      return o;\n"+ "    }\n"+ "  }\n"+ "}";
  String s16_2="public class SSTest {\n" + "  Object lock;\n" + "  public void getProducts (String[] productNames) {\n"+ "    synchronized (lock) {\n"+ "      boolean[] v = {true};\n"+ "    }\n"+ "  }\n"+ "}";
  String s17="synchronized(lock) {\n" + "  'Statement*;\n" + "}";
  String s18="$Statement$;";
  String expectedResult8="public class SSTest {\n" + "  Object lock;\n" + "  public Object getProducts (String[] productNames) {\n"+ "    Object o = new Object ();\n"+ "      assert o != null;\n"+ "      return o;\n"+ "  }\n"+ "}";
  String expectedResult8_2="public class SSTest {\n" + "  Object lock;\n" + "  public void getProducts (String[] productNames) {\n"+ "    boolean[] v = {true};\n"+ "  }\n"+ "}";
  actualResult=replacer.testReplace(s16,s17,s18,options);
  assertEquals("extra ;",expectedResult8,actualResult);
  actualResult=replacer.testReplace(s16_2,s17,s18,options);
  assertEquals("missed ;",expectedResult8_2,actualResult);
}
