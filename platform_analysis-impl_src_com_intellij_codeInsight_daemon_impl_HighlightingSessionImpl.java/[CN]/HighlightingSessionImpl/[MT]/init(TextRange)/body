{
  myRanges2markersCache=new THashMap<TextRange,RangeMarker>();
  myTransferToEDTQueue=new TransferToEDTQueue<HighlightInfo>("Apply highlighting results",new Processor<HighlightInfo>(){
    @Override public boolean process(    HighlightInfo info){
      ApplicationManager.getApplication().assertIsDispatchThread();
      final EditorColorsScheme colorsScheme=getColorsScheme();
      UpdateHighlightersUtil.addHighlighterToEditorIncrementally(myProject,myDocument,getPsiFile(),restrictRange.getStartOffset(),restrictRange.getEndOffset(),info,colorsScheme,Pass.UPDATE_ALL,myRanges2markersCache);
      return true;
    }
  }
,new Condition<Object>(){
    @Override public boolean value(    Object o){
      return myProject.isDisposed() || getProgressIndicator().isCanceled();
    }
  }
,200);
}
