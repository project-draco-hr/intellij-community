{
  myResultBuffer=buffer;
  myRawText=rawText;
  myColorRegistry=syntaxInfo.getColorRegistry();
  myFontNameRegistry=syntaxInfo.getFontNameRegistry();
  buildColorMap();
  try {
    myResultBuffer.append("<div style=\"border:1px inset;padding:2%;\">").append("<pre style=\"margin:0;padding:6px;background-color:");
    appendColor(myResultBuffer,syntaxInfo.getDefaultBackground());
    myResultBuffer.append(';');
    if (myFontNameRegistry.size() == 1) {
      appendFontFamilyRule(myResultBuffer,myFontNameRegistry.getAllIds()[0]);
      myFontNameRegistry=null;
    }
    int fontSize=syntaxInfo.getSingleFontSize();
    if (fontSize > 0) {
      appendFontSizeRule(myResultBuffer,fontSize);
      myIgnoreFontSize=true;
    }
    myResultBuffer.append("\" bgcolor=\"");
    appendColor(myResultBuffer,syntaxInfo.getDefaultBackground());
    myResultBuffer.append("\">");
    for (    OutputInfo info : syntaxInfo.getOutputInfos()) {
      info.invite(this);
      if (myResultBuffer.length() > maxLength) {
        myResultBuffer.append("... truncated ...");
        break;
      }
    }
    myResultBuffer.append("</pre></div>");
  }
  finally {
    myResultBuffer=null;
    myRawText=null;
    myColorRegistry=null;
    myFontNameRegistry=null;
    myColors.clear();
    myForeground=0;
    myBackground=0;
    myFontFamily=0;
    myFontSize=0;
    myBold=false;
    myItalic=false;
    myIgnoreFontSize=false;
  }
}
