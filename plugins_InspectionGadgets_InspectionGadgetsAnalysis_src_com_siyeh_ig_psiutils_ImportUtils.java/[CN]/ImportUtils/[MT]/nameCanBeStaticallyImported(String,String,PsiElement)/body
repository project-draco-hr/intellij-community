{
  final PsiClass containingClass=PsiTreeUtil.getParentOfType(context,PsiClass.class);
  if (containingClass == null) {
    return false;
  }
  if (InheritanceUtil.isInheritor(containingClass,fqName)) {
    return true;
  }
  final PsiField field=containingClass.findFieldByName(memberName,true);
  if (field != null && PsiUtil.isAccessible(field,context,null)) {
    return false;
  }
  final PsiMethod[] methods=containingClass.findMethodsByName(memberName,true);
  for (  PsiMethod method : methods) {
    if (PsiUtil.isAccessible(method,context,null)) {
      return false;
    }
  }
  final PsiClass innerClass=containingClass.findInnerClassByName(memberName,true);
  if (innerClass != null && PsiUtil.isAccessible(innerClass,context,null)) {
    return false;
  }
  return !hasOnDemandImportConflict(fqName + '.' + memberName,context,true) && !hasExactImportStaticConflict(fqName,memberName,context);
}
