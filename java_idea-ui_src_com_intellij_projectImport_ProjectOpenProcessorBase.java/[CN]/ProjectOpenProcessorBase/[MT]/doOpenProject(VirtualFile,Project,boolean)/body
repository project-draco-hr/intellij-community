{
  try {
    getBuilder().setUpdate(false);
    final WizardContext wizardContext=new WizardContext(null);
    if (virtualFile.isDirectory()) {
      final String[] supported=getSupportedExtensions();
      for (      VirtualFile file : getFileChildren(virtualFile)) {
        if (canOpenFile(file,supported)) {
          virtualFile=file;
          break;
        }
      }
    }
    wizardContext.setProjectFileDirectory(virtualFile.getParent().getPath());
    if (!doQuickImport(virtualFile,wizardContext))     return null;
    if (wizardContext.getProjectName() == null) {
      if (wizardContext.getProjectStorageFormat() == StorageScheme.DEFAULT) {
        wizardContext.setProjectName(IdeBundle.message("project.import.default.name",getName()) + ProjectFileType.DOT_DEFAULT_EXTENSION);
      }
 else {
        wizardContext.setProjectName(IdeBundle.message("project.import.default.name.dotIdea",getName()));
      }
    }
    Project defaultProject=ProjectManager.getInstance().getDefaultProject();
    Sdk jdk=ProjectRootManager.getInstance(defaultProject).getProjectSdk();
    if (jdk == null) {
      jdk=ProjectJdkTable.getInstance().findMostRecentSdkOfType(JavaSdk.getInstance());
    }
    wizardContext.setProjectJdk(jdk);
    final String dotIdeaFilePath=wizardContext.getProjectFileDirectory() + File.separator + Project.DIRECTORY_STORE_FOLDER;
    final String projectFilePath=wizardContext.getProjectFileDirectory() + File.separator + wizardContext.getProjectName()+ ProjectFileType.DOT_DEFAULT_EXTENSION;
    File dotIdeaFile=new File(dotIdeaFilePath);
    File projectFile=new File(projectFilePath);
    String pathToOpen;
    if (wizardContext.getProjectStorageFormat() == StorageScheme.DEFAULT) {
      pathToOpen=projectFilePath;
    }
 else {
      pathToOpen=dotIdeaFile.getParent();
    }
    boolean shouldOpenExisting=false;
    boolean importToProject=true;
    if (projectFile.exists() || dotIdeaFile.exists()) {
      if (ApplicationManager.getApplication().isHeadlessEnvironment()) {
        shouldOpenExisting=true;
        importToProject=true;
      }
 else {
        String existingName;
        if (dotIdeaFile.exists()) {
          existingName="an existing project";
          pathToOpen=dotIdeaFile.getParent();
        }
 else {
          existingName="'" + projectFile.getName() + "'";
          pathToOpen=projectFilePath;
        }
        int result=Messages.showYesNoCancelDialog(projectToClose,IdeBundle.message("project.import.open.existing",existingName,projectFile.getParent(),virtualFile.getName()),IdeBundle.message("title.open.project"),IdeBundle.message("project.import.open.existing.openExisting"),IdeBundle.message("project.import.open.existing.reimport"),CommonBundle.message("button.cancel"),Messages.getQuestionIcon());
        if (result == Messages.CANCEL)         return null;
        shouldOpenExisting=result == Messages.YES;
        importToProject=!shouldOpenExisting;
      }
    }
    final Project projectToOpen;
    if (shouldOpenExisting) {
      try {
        projectToOpen=ProjectManagerEx.getInstanceEx().loadProject(pathToOpen);
      }
 catch (      Exception e) {
        return null;
      }
    }
 else {
      projectToOpen=ProjectManagerEx.getInstanceEx().newProject(wizardContext.getProjectName(),pathToOpen,true,false);
    }
    if (projectToOpen == null)     return null;
    if (importToProject) {
      if (!getBuilder().validate(projectToClose,projectToOpen)) {
        return null;
      }
      projectToOpen.save();
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          Sdk jdk=wizardContext.getProjectJdk();
          if (jdk != null) {
            NewProjectUtil.applyJdkToProject(projectToOpen,jdk);
          }
          String projectDirPath=wizardContext.getProjectFileDirectory();
          String path=StringUtil.endsWithChar(projectDirPath,'/') ? projectDirPath + "classes" : projectDirPath + "/classes";
          CompilerProjectExtension extension=CompilerProjectExtension.getInstance(projectToOpen);
          if (extension != null) {
            extension.setCompilerOutputUrl(getUrl(path));
          }
        }
      }
);
      getBuilder().commit(projectToOpen,null,ModulesProvider.EMPTY_MODULES_PROVIDER);
    }
    if (!forceOpenInNewFrame) {
      NewProjectUtil.closePreviousProject(projectToClose);
    }
    ProjectUtil.updateLastProjectLocation(pathToOpen);
    ProjectManagerEx.getInstanceEx().openProject(projectToOpen);
    return projectToOpen;
  }
  finally {
    getBuilder().cleanup();
  }
}
