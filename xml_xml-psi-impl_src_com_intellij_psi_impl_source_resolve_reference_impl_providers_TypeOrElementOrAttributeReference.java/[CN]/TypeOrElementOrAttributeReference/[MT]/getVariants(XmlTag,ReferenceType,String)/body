{
  String[] tagNames=null;
switch (type) {
case GroupReference:
    tagNames=new String[]{SchemaReferencesProvider.GROUP_TAG_NAME};
  break;
case AttributeGroupReference:
tagNames=new String[]{SchemaReferencesProvider.ATTRIBUTE_GROUP_TAG_NAME};
break;
case AttributeReference:
tagNames=new String[]{SchemaReferencesProvider.ATTRIBUTE_TAG_NAME};
break;
case ElementReference:
tagNames=new String[]{SchemaReferencesProvider.ELEMENT_TAG_NAME};
break;
case TypeReference:
tagNames=new String[]{SchemaReferencesProvider.SIMPLE_TYPE_TAG_NAME,SchemaReferencesProvider.COMPLEX_TYPE_TAG_NAME};
break;
}
final XmlDocument document=((XmlFile)tag.getContainingFile()).getDocument();
if (document == null) {
return ArrayUtil.EMPTY_OBJECT_ARRAY;
}
final XmlTag rootTag=document.getRootTag();
String ourNamespace=rootTag != null ? rootTag.getAttributeValue(TARGET_NAMESPACE) : "";
if (ourNamespace == null) ourNamespace="";
CompletionProcessor processor=new CompletionProcessor(tag,prefix);
for (String namespace : tag.knownNamespaces()) {
if (ourNamespace.equals(namespace)) continue;
final XmlNSDescriptor nsDescriptor=tag.getNSDescriptor(namespace,true);
if (nsDescriptor instanceof XmlNSDescriptorImpl) {
processNamespace(namespace,processor,(XmlNSDescriptorImpl)nsDescriptor,tagNames);
}
}
XmlNSDescriptor nsDescriptor=(XmlNSDescriptor)document.getMetaData();
if (nsDescriptor instanceof XmlNSDescriptorImpl) {
processNamespace(ourNamespace,processor,(XmlNSDescriptorImpl)nsDescriptor,tagNames);
}
return ArrayUtil.toStringArray(processor.myElements);
}
