{
  myHintTextArea.setLineWrap(true);
  myHintTextArea.setWrapStyleWord(true);
  myPlaceholderTextArea.setBorder(BorderFactory.createLineBorder(JBColor.border()));
  myHintsPanel.setBorder(BorderFactory.createLineBorder(JBColor.border()));
  myHintTextArea.setFont(myPlaceholderTextArea.getFont());
  if (myHints.get(myShownHintNumber).equals(ourFirstHintText)) {
    myHintTextArea.setForeground(UIUtil.getInactiveTextColor());
  }
  myHintTextArea.setText(myHints.get(myShownHintNumber));
  myHintTextArea.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    FocusEvent e){
      if (myHintTextArea.getText().equals(ourFirstHintText)) {
        myHintTextArea.setForeground(UIUtil.getActiveTextColor());
        myHintTextArea.setText("");
      }
    }
    @Override public void focusLost(    FocusEvent e){
      if (myShownHintNumber == 0 && myHintTextArea.getText().isEmpty()) {
        myHintTextArea.setForeground(UIUtil.getInactiveTextColor());
        myHintTextArea.setText(ourFirstHintText);
      }
    }
  }
);
  myPlaceholderTextArea.grabFocus();
  updateHintNumberLabel();
  ((GridLayoutManager)myHintsPanel.getLayout()).setHGap(1);
  final DefaultActionGroup addRemoveGroup=new DefaultActionGroup();
  addRemoveGroup.addAll(new AddHint(),new RemoveHint(),new GoForward(),new GoBackward());
  final JComponent addRemoveComponent=ActionManager.getInstance().createActionToolbar("Hint",addRemoveGroup,false).getComponent();
  actionsPanel.add(addRemoveComponent,BorderLayout.WEST);
}
