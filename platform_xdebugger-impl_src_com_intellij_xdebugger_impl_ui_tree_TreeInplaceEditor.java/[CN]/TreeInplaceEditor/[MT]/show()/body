{
  LOG.assertTrue(myInplaceEditorComponent == null,"editor is not released");
  final JTree tree=getTree();
  tree.scrollPathToVisible(getNodePath());
  final JRootPane rootPane=tree.getRootPane();
  if (rootPane == null) {
    return;
  }
  final JLayeredPane layeredPane=rootPane.getLayeredPane();
  Rectangle bounds=getEditorBounds();
  if (bounds == null) {
    return;
  }
  Point layeredPanePoint=SwingUtilities.convertPoint(tree,bounds.x,bounds.y,layeredPane);
  final JComponent inplaceEditorComponent=createInplaceEditorComponent();
  myInplaceEditorComponent=inplaceEditorComponent;
  LOG.assertTrue(inplaceEditorComponent != null);
  inplaceEditorComponent.setBounds(layeredPanePoint.x,layeredPanePoint.y,bounds.width,Math.max(bounds.height,inplaceEditorComponent.getPreferredSize().height));
  layeredPane.add(inplaceEditorComponent,new Integer(250));
  myRemoveActions.add(new Runnable(){
    @Override public void run(){
      layeredPane.remove(inplaceEditorComponent);
    }
  }
);
  inplaceEditorComponent.validate();
  inplaceEditorComponent.paintImmediately(0,0,inplaceEditorComponent.getWidth(),inplaceEditorComponent.getHeight());
  getPreferredFocusedComponent().requestFocus();
  final ComponentAdapter componentListener=new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      final Project project=getProject();
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          if (!isShown() || project == null || project.isDisposed()) {
            return;
          }
          JTree tree=getTree();
          JLayeredPane layeredPane=tree.getRootPane().getLayeredPane();
          Rectangle bounds=getEditorBounds();
          if (bounds == null) {
            return;
          }
          Point layeredPanePoint=SwingUtilities.convertPoint(tree,bounds.x,bounds.y,layeredPane);
          inplaceEditorComponent.setBounds(layeredPanePoint.x,layeredPanePoint.y,bounds.width,bounds.height);
          inplaceEditorComponent.revalidate();
        }
      }
);
    }
    @Override public void componentHidden(    ComponentEvent e){
      cancelEditing();
    }
  }
;
  final HierarchyListener hierarchyListener=new HierarchyListener(){
    @Override public void hierarchyChanged(    HierarchyEvent e){
      if (!tree.isShowing()) {
        cancelEditing();
      }
    }
  }
;
  tree.addHierarchyListener(hierarchyListener);
  tree.addComponentListener(componentListener);
  rootPane.addComponentListener(componentListener);
  myRemoveActions.add(new Runnable(){
    @Override public void run(){
      tree.removeHierarchyListener(hierarchyListener);
      tree.addComponentListener(componentListener);
      rootPane.removeComponentListener(componentListener);
    }
  }
);
  final RunContentManager contentManager=ExecutionManager.getInstance(getProject()).getContentManager();
  final RunContentListener runContentListener=new RunContentListener(){
    @Override public void contentSelected(    RunContentDescriptor descriptor){
      cancelEditing();
    }
    @Override public void contentRemoved(    RunContentDescriptor descriptor){
      cancelEditing();
    }
  }
;
  contentManager.addRunContentListener(runContentListener);
  myRemoveActions.add(new Runnable(){
    @Override public void run(){
      contentManager.removeRunContentListener(runContentListener);
    }
  }
);
  final JComponent editorComponent=getEditorComponent();
  editorComponent.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),"enterStroke");
  editorComponent.getActionMap().put("enterStroke",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      doOKAction();
    }
  }
);
  editorComponent.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),"escapeStroke");
  editorComponent.getActionMap().put("escapeStroke",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      cancelEditing();
    }
  }
);
  final Toolkit defaultToolkit=Toolkit.getDefaultToolkit();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      if (!isShown())       return;
      defaultToolkit.addAWTEventListener(TreeInplaceEditor.this,AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_WHEEL_EVENT_MASK);
    }
  }
);
  myRemoveActions.add(new Runnable(){
    @Override public void run(){
      defaultToolkit.removeAWTEventListener(TreeInplaceEditor.this);
    }
  }
);
  onShown();
}
