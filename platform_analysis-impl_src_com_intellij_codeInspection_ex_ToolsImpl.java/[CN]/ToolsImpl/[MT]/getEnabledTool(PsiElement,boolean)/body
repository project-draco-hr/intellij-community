{
  if (!myEnabled)   return null;
  if (myTools != null && element != null) {
    final Project project=element.getProject();
    final DependencyValidationManager manager=DependencyValidationManager.getInstance(project);
    for (    ScopeToolState state : myTools) {
      final NamedScope scope=state.getScope(project);
      if (scope != null) {
        final PackageSet set=scope.getValue();
        if (set != null && set.contains(element.getContainingFile(),manager)) {
          return state.isEnabled() && (includeDoNotShow || !HighlightDisplayLevel.DO_NOT_SHOW.equals(state.getLevel())) ? state.getTool() : null;
        }
      }
    }
  }
  return myDefaultState.isEnabled() && (includeDoNotShow || !HighlightDisplayLevel.DO_NOT_SHOW.equals(myDefaultState.getLevel())) ? myDefaultState.getTool() : null;
}
