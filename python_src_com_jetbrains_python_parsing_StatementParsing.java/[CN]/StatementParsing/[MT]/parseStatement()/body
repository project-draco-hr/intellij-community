{
  myBuilder.setTokenTypeRemapper(this);
  while (myBuilder.getTokenType() == PyTokenTypes.STATEMENT_BREAK) {
    myBuilder.advanceLexer();
  }
  final IElementType firstToken;
  firstToken=myBuilder.getTokenType();
  if (firstToken == null)   return;
  if (firstToken == PyTokenTypes.WHILE_KEYWORD) {
    parseWhileStatement();
    return;
  }
  if (firstToken == PyTokenTypes.IF_KEYWORD) {
    parseIfStatement();
    return;
  }
  if (firstToken == PyTokenTypes.FOR_KEYWORD) {
    parseForStatement();
    return;
  }
  if (firstToken == PyTokenTypes.TRY_KEYWORD) {
    parseTryStatement();
    return;
  }
  if (firstToken == PyTokenTypes.DEF_KEYWORD) {
    getFunctionParser().parseFunctionDeclaration();
    return;
  }
  if (firstToken == PyTokenTypes.AT) {
    getFunctionParser().parseDecoratedFunctionDeclaration();
    return;
  }
  if (firstToken == PyTokenTypes.CLASS_KEYWORD) {
    parseClassDeclaration();
    return;
  }
  if (firstToken == PyTokenTypes.WITH_KEYWORD) {
    parseWithStatement();
    return;
  }
  parseSimpleStatement(false);
}
