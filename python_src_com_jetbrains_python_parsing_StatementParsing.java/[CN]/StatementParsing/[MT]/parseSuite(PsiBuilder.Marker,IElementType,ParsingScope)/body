{
  if (myBuilder.getTokenType() == PyTokenTypes.STATEMENT_BREAK) {
    myBuilder.advanceLexer();
    final PsiBuilder.Marker marker=myBuilder.mark();
    if (myBuilder.getTokenType() != PyTokenTypes.INDENT) {
      myBuilder.error("Indent expected");
    }
 else {
      myBuilder.advanceLexer();
      if (myBuilder.eof()) {
        myBuilder.error("Indented block expected");
      }
 else {
        while (!myBuilder.eof() && myBuilder.getTokenType() != PyTokenTypes.DEDENT) {
          parseStatement(scope);
        }
      }
    }
    marker.done(PyElementTypes.STATEMENT_LIST);
    marker.setCustomEdgeTokenBinders(LeadingCommentsBinder.INSTANCE,FollowingCommentBinder.INSTANCE);
    if (endMarker != null) {
      endMarker.done(elType);
    }
    if (!myBuilder.eof()) {
      checkMatches(PyTokenTypes.DEDENT,"Dedent expected");
    }
    myBuilder.getTokenType();
  }
 else {
    final PsiBuilder.Marker marker=myBuilder.mark();
    if (myBuilder.eof()) {
      myBuilder.error("Statement expected");
    }
 else {
      parseSimpleStatement(scope.withSuite(true));
      while (matchToken(PyTokenTypes.SEMICOLON)) {
        if (matchToken(PyTokenTypes.STATEMENT_BREAK)) {
          break;
        }
        parseSimpleStatement(scope.withSuite(true));
      }
    }
    marker.done(PyElementTypes.STATEMENT_LIST);
    if (endMarker != null) {
      endMarker.done(elType);
    }
  }
}
