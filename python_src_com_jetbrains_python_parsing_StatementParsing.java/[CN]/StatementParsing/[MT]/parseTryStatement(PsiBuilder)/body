{
  LOG.assertTrue(builder.getTokenType() == PyTokenTypes.TRY_KEYWORD);
  final PsiBuilder.Marker statement=builder.mark();
  builder.advanceLexer();
  checkMatches(PyTokenTypes.COLON,"colon expected");
  parseSuite();
  boolean haveExceptClause=false;
  if (builder.getTokenType() == PyTokenTypes.EXCEPT_KEYWORD) {
    haveExceptClause=true;
    while (builder.getTokenType() == PyTokenTypes.EXCEPT_KEYWORD) {
      final PsiBuilder.Marker exceptBlock=builder.mark();
      builder.advanceLexer();
      if (builder.getTokenType() != PyTokenTypes.COLON) {
        if (!getExpressionParser().parseSingleExpression(false)) {
          builder.error("expression expected");
        }
        if (builder.getTokenType() == PyTokenTypes.COMMA) {
          builder.advanceLexer();
          if (!getExpressionParser().parseSingleExpression(true)) {
            builder.error("expression expected");
          }
        }
      }
      checkMatches(PyTokenTypes.COLON,"colon expected");
      parseSuite();
      exceptBlock.done(PyElementTypes.EXCEPT_BLOCK);
    }
    if (builder.getTokenType() == PyTokenTypes.ELSE_KEYWORD) {
      builder.advanceLexer();
      checkMatches(PyTokenTypes.COLON,"colon expected");
      parseSuite();
    }
  }
  if (builder.getTokenType() == PyTokenTypes.FINALLY_KEYWORD) {
    builder.advanceLexer();
    checkMatches(PyTokenTypes.COLON,"colon expected");
    parseSuite();
  }
 else   if (!haveExceptClause) {
    builder.error("'except' or 'finally' expected");
  }
  statement.done(PyElementTypes.TRY_EXCEPT_STATEMENT);
}
