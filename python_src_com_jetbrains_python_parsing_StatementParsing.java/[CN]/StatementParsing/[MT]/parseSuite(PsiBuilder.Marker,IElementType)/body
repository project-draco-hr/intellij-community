{
  if (myBuilder.getTokenType() == PyTokenTypes.STATEMENT_BREAK) {
    myBuilder.advanceLexer();
    final PsiBuilder.Marker marker=myBuilder.mark();
    if (myBuilder.getTokenType() != PyTokenTypes.INDENT) {
      myBuilder.error("indent expected");
    }
 else {
      myBuilder.advanceLexer();
      while (!myBuilder.eof() && myBuilder.getTokenType() != PyTokenTypes.DEDENT) {
        parseStatement();
      }
    }
    marker.done(PyElementTypes.STATEMENT_LIST);
    marker.setCustomEdgeTokenBinders(null,FollowingCommentBinder.INSTANCE);
    if (endMarker != null) {
      endMarker.done(elType);
    }
    if (!myBuilder.eof()) {
      checkMatches(PyTokenTypes.DEDENT,"dedent expected");
    }
    myBuilder.getTokenType();
  }
 else {
    final PsiBuilder.Marker marker=myBuilder.mark();
    parseSimpleStatement(true);
    while (matchToken(PyTokenTypes.SEMICOLON)) {
      if (matchToken(PyTokenTypes.STATEMENT_BREAK))       break;
      parseSimpleStatement(true);
    }
    marker.done(PyElementTypes.STATEMENT_LIST);
    if (endMarker != null) {
      endMarker.done(elType);
    }
  }
}
