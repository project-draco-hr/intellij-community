{
  assertCurrentToken(PyTokenTypes.WHILE_KEYWORD);
  final PsiBuilder.Marker statement=myBuilder.mark();
  final PsiBuilder.Marker whilePart=myBuilder.mark();
  myBuilder.advanceLexer();
  if (!getExpressionParser().parseSingleExpression(false)) {
    myBuilder.error("expression expected");
  }
  if (expectColon()) {
    parseSuite(scope);
  }
  whilePart.done(PyElementTypes.WHILE_PART);
  final PsiBuilder.Marker elsePart=myBuilder.mark();
  if (myBuilder.getTokenType() == PyTokenTypes.ELSE_KEYWORD) {
    myBuilder.advanceLexer();
    if (expectColon()) {
      parseSuite(scope);
    }
    elsePart.done(PyElementTypes.ELSE_PART);
  }
 else   elsePart.drop();
  statement.done(PyElementTypes.WHILE_STATEMENT);
}
