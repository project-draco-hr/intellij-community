{
  assertCurrentToken(PyTokenTypes.TRY_KEYWORD);
  final PsiBuilder.Marker statement=myBuilder.mark();
  myBuilder.advanceLexer();
  checkMatches(PyTokenTypes.COLON,"colon expected");
  parseSuite();
  boolean haveExceptClause=false;
  if (myBuilder.getTokenType() == PyTokenTypes.EXCEPT_KEYWORD) {
    haveExceptClause=true;
    while (myBuilder.getTokenType() == PyTokenTypes.EXCEPT_KEYWORD) {
      final PsiBuilder.Marker exceptBlock=myBuilder.mark();
      myBuilder.advanceLexer();
      if (myBuilder.getTokenType() != PyTokenTypes.COLON) {
        if (!getExpressionParser().parseSingleExpression(false)) {
          myBuilder.error("expression expected");
        }
        if (myBuilder.getTokenType() == PyTokenTypes.COMMA) {
          myBuilder.advanceLexer();
          if (!getExpressionParser().parseSingleExpression(true)) {
            myBuilder.error("expression expected");
          }
        }
      }
      checkMatches(PyTokenTypes.COLON,"colon expected");
      parseSuite();
      exceptBlock.done(PyElementTypes.EXCEPT_BLOCK);
    }
    if (myBuilder.getTokenType() == PyTokenTypes.ELSE_KEYWORD) {
      myBuilder.advanceLexer();
      checkMatches(PyTokenTypes.COLON,"colon expected");
      parseSuite();
    }
  }
  if (myBuilder.getTokenType() == PyTokenTypes.FINALLY_KEYWORD) {
    myBuilder.advanceLexer();
    checkMatches(PyTokenTypes.COLON,"colon expected");
    parseSuite();
  }
 else   if (!haveExceptClause) {
    myBuilder.error("'except' or 'finally' expected");
  }
  statement.done(PyElementTypes.TRY_EXCEPT_STATEMENT);
}
