{
  assertCurrentToken(PyTokenTypes.FOR_KEYWORD);
  final PsiBuilder.Marker statement=myBuilder.mark();
  final PsiBuilder.Marker forPart=myBuilder.mark();
  myBuilder.advanceLexer();
  getExpressionParser().parseExpression(true,true);
  checkMatches(PyTokenTypes.IN_KEYWORD,"'in' expected");
  getExpressionParser().parseExpression();
  checkMatches(PyTokenTypes.COLON,"colon expected");
  parseSuite(scope);
  forPart.done(PyElementTypes.FOR_PART);
  final PsiBuilder.Marker elsePart=myBuilder.mark();
  if (myBuilder.getTokenType() == PyTokenTypes.ELSE_KEYWORD) {
    myBuilder.advanceLexer();
    checkMatches(PyTokenTypes.COLON,"colon expected");
    parseSuite(scope);
    elsePart.done(PyElementTypes.ELSE_PART);
  }
 else   elsePart.drop();
  statement.done(PyElementTypes.FOR_STATEMENT);
}
