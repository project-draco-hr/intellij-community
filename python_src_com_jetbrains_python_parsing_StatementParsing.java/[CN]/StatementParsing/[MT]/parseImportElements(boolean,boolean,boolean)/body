{
  PsiBuilder builder=myContext.getBuilder();
  while (true) {
    final PsiBuilder.Marker asMarker=builder.mark();
    if (is_module_import) {
      if (!parseDottedNameAsAware(true)) {
        asMarker.drop();
        break;
      }
    }
 else {
      String token_text=parseIdentifier(PyElementTypes.REFERENCE_EXPRESSION);
      if (from_future) {
        if (TOK_WITH_STATEMENT.equals(token_text)) {
          myFutureFlags.add(FUTURE.WITH_STATEMENT);
        }
 else         if (TOK_NESTED_SCOPES.equals(token_text)) {
          myFutureFlags.add(FUTURE.NESTED_SCOPES);
        }
      }
    }
    _expect_AS_kwd=true;
    if (builder.getTokenType() == PyTokenTypes.AS_KEYWORD) {
      builder.advanceLexer();
      _expect_AS_kwd=false;
      parseIdentifier(PyElementTypes.TARGET_EXPRESSION);
    }
    asMarker.done(PyElementTypes.IMPORT_ELEMENT);
    _expect_AS_kwd=false;
    if (builder.getTokenType() == PyTokenTypes.COMMA) {
      builder.advanceLexer();
      if (in_parens && builder.getTokenType() == PyTokenTypes.RPAR) {
        break;
      }
    }
 else {
      break;
    }
  }
}
