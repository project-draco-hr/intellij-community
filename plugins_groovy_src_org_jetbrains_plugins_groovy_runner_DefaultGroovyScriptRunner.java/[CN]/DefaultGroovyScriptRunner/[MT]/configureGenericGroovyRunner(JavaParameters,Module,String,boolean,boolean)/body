{
  final VirtualFile groovyJar=findGroovyJar(module);
  if (useBundled) {
    params.getClassPath().add(GroovyFacetUtil.getBundledGroovyJar());
  }
 else   if (groovyJar != null) {
    params.getClassPath().add(groovyJar);
  }
  getClassPathFromRootModel(module,tests,params,true,params.getClassPath());
  setToolsJar(params);
  String groovyHome=useBundled ? FileUtil.toCanonicalPath(GroovyFacetUtil.getBundledGroovyJar().getParentFile().getParent()) : LibrariesUtil.getGroovyHomePath(module);
  String groovyHomeDependentName=groovyHome != null ? FileUtil.toSystemDependentName(groovyHome) : null;
  if (groovyHomeDependentName != null) {
    setGroovyHome(params,groovyHomeDependentName);
  }
  final String confPath=getConfPath(groovyHomeDependentName);
  params.getVMParametersList().add("-Dgroovy.starter.conf=" + confPath);
  params.getVMParametersList().addAll(HttpConfigurable.convertArguments(HttpConfigurable.getJvmPropertiesList(false,null)));
  params.setMainClass("org.codehaus.groovy.tools.GroovyStarter");
  params.getProgramParametersList().add("--conf");
  params.getProgramParametersList().add(confPath);
  params.getProgramParametersList().add("--main");
  params.getProgramParametersList().add(mainClass);
  if (!GrabDependencies.GRAPE_RUNNER.equals(mainClass)) {
    addClasspathFromRootModel(module,tests,params,true);
  }
  if (params.getVMParametersList().getPropertyValue(GroovycOutputParser.GRAPE_ROOT) == null) {
    String sysRoot=System.getProperty(GroovycOutputParser.GRAPE_ROOT);
    if (sysRoot != null) {
      params.getVMParametersList().defineProperty(GroovycOutputParser.GRAPE_ROOT,sysRoot);
    }
  }
}
