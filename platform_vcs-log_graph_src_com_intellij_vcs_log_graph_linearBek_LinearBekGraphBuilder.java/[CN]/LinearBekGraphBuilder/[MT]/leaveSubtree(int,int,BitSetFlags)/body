{
  myWorkingGraph.clear();
  List<Integer> upNodes=LinearGraphUtils.getUpNodes(myWorkingGraph,currentNodeIndex);
  if (upNodes.isEmpty())   return;
  Integer parent=ContainerUtil.find(ContainerUtil.reverse(ContainerUtil.sorted(upNodes)),new Condition<Integer>(){
    @Override public boolean value(    Integer it){
      return LinearGraphUtils.getDownNodes(myWorkingGraph,it).size() == 2;
    }
  }
);
  if (parent == null)   return;
  List<Integer> downNodes=LinearGraphUtils.getDownNodes(myWorkingGraph,parent);
  int headNumber=myHeads.indexOf(currentHead);
  int nextHeadIndex=headNumber == myHeads.size() - 1 ? Integer.MAX_VALUE : myGraphLayout.getLayoutIndex(myHeads.get(headNumber + 1));
  int headIndex=myGraphLayout.getLayoutIndex(currentHead);
  int firstChildIndex=downNodes.get(0);
  if (firstChildIndex == currentNodeIndex) {
    int secondChildIndex=downNodes.get(1);
    if (secondChildIndex > firstChildIndex) {
      collapse(secondChildIndex,firstChildIndex,parent,headIndex,nextHeadIndex,visited);
    }
  }
 else {
    collapse(firstChildIndex,currentNodeIndex,parent,headIndex,nextHeadIndex,visited);
  }
}
