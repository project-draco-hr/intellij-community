{
  Map<Integer,Integer> nextHeadLayoutIndexes=ContainerUtilRt.newHashMap(myHeads.size());
  for (int i=0; i < myHeads.size(); i++) {
    if (i == myHeads.size() - 1) {
      nextHeadLayoutIndexes.put(myHeads.get(i),Integer.MAX_VALUE);
    }
 else {
      nextHeadLayoutIndexes.put(myHeads.get(i),myGraphLayout.getLayoutIndex(myHeads.get(i + 1)));
    }
  }
  for (int i=myWorkingGraph.myGraph.nodesCount() - 1; i >= 0; i--) {
    List<Integer> downNodes=ContainerUtil.sorted(LinearGraphUtils.getDownNodes(myWorkingGraph,i));
    if (downNodes.size() != 2)     continue;
    int head=myGraphLayout.getOneOfHeadNodeIndex(i);
    MergeFragment fragment=getFragment(downNodes.get(1),downNodes.get(0),i,myGraphLayout.getLayoutIndex(head),nextHeadLayoutIndexes.get(head));
    if (fragment != null) {
      fragment.collapse(myWorkingGraph);
    }
  }
  return myWorkingGraph.createLinearBekGraph();
}
