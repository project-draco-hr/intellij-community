{
  Set<Integer> magicSet;
  magicSet=ContainerUtil.newHashSet(MAGIC_SET_SIZE);
  PriorityQueue<Integer> magicQueue=new PriorityQueue<Integer>(MAGIC_SET_SIZE);
  magicQueue.addAll(ContainerUtil.map(myWorkingGraph.getAdjacentEdges(firstChild,EdgeFilter.NORMAL_DOWN),new Function<GraphEdge,Integer>(){
    @Override public Integer fun(    GraphEdge graphEdge){
      return graphEdge.getDownNodeIndex();
    }
  }
));
  while (!magicQueue.isEmpty()) {
    Integer i=magicQueue.poll();
    if (i > firstChild + MAGIC_SET_SIZE)     break;
    magicSet.add(i);
    magicQueue.addAll(ContainerUtil.map(myWorkingGraph.getAdjacentEdges(i,EdgeFilter.NORMAL_DOWN),new Function<GraphEdge,Integer>(){
      @Override public Integer fun(      GraphEdge graphEdge){
        return graphEdge.getDownNodeIndex();
      }
    }
));
  }
  return magicSet;
}
