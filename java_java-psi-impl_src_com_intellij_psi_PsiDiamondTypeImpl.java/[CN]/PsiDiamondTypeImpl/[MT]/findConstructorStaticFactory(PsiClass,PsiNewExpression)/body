{
  final PsiExpressionList argumentList=newExpression.getArgumentList();
  if (argumentList == null)   return null;
  final LanguageLevel languageLevel=PsiUtil.getLanguageLevel(newExpression);
  final List<CandidateInfo> conflicts=new ArrayList<CandidateInfo>();
  PsiMethod[] constructors=containingClass.getConstructors();
  if (constructors.length == 0) {
    constructors=new PsiMethod[]{null};
  }
  final PsiConflictResolver[] conflictResolvers={new JavaMethodsConflictResolver(argumentList,languageLevel)};
  final MethodCandidatesProcessor processor=new MethodCandidatesProcessor(argumentList,argumentList.getContainingFile(),conflictResolvers,conflicts){
    @Override protected boolean isAccepted(    PsiMethod candidate){
      return true;
    }
    @Override protected PsiClass getContainingClass(    PsiMethod method){
      return containingClass;
    }
  }
;
  processor.setArgumentList(argumentList);
  for (  PsiMethod constructor : constructors) {
    final PsiTypeParameter[] params=getAllTypeParams(constructor,containingClass);
    final PsiMethod staticFactory=generateStaticFactory(constructor,containingClass,params,newExpression.getClassReference());
    if (staticFactory != null) {
      processor.add(staticFactory,PsiSubstitutor.EMPTY);
    }
  }
  final JavaResolveResult[] result=processor.getResult();
  return result.length == 1 ? (PsiMethod)result[0].getElement() : null;
}
