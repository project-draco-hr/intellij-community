{
  final PsiExpressionList argumentList=newExpression.getArgumentList();
  if (argumentList == null) {
    return null;
  }
  final PsiClass psiClass=findClass(newExpression);
  if (psiClass == null) {
    return null;
  }
  final PsiMethod staticFactory=findConstructorStaticFactory(psiClass,newExpression);
  if (staticFactory == null) {
    return JavaResolveResult.EMPTY;
  }
  final MethodCandidateInfo staticFactoryCandidateInfo=createMethodCandidate(staticFactory,context,false,argumentList);
  if (staticFactory.isVarArgs()) {
    final Computable<Integer> computable=new Computable<Integer>(){
      @Override public Integer compute(){
        return staticFactoryCandidateInfo.getPertinentApplicabilityLevel();
      }
    }
;
    final Integer applicability=MethodCandidateInfo.ourOverloadGuard.doPreventingRecursion(newExpression,true,computable);
    if ((applicability != null ? applicability : staticFactoryCandidateInfo.getApplicabilityLevel()) < MethodCandidateInfo.ApplicabilityLevel.FIXED_ARITY) {
      return createMethodCandidate(staticFactory,context,true,argumentList);
    }
  }
  return staticFactoryCandidateInfo;
}
