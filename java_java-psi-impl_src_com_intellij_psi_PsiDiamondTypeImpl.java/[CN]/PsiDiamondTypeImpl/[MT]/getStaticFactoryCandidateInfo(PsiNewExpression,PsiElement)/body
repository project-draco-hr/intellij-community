{
  final PsiExpressionList argumentList=newExpression.getArgumentList();
  if (argumentList == null) {
    return null;
  }
  final PsiClass psiClass=findClass(newExpression);
  if (psiClass == null) {
    return null;
  }
  final PsiMethod staticFactory=findConstructorStaticFactory(psiClass,newExpression);
  if (staticFactory == null) {
    return JavaResolveResult.EMPTY;
  }
  final MethodCandidateInfo staticFactoryCandidateInfo=createMethodCandidate(staticFactory,context,false,argumentList);
  if (!staticFactory.isVarArgs()) {
    return staticFactoryCandidateInfo;
  }
  final JavaMethodsConflictResolver resolver=new JavaMethodsConflictResolver(argumentList,PsiUtil.getLanguageLevel(argumentList));
  final ArrayList<CandidateInfo> conflicts=new ArrayList<CandidateInfo>();
  conflicts.add(staticFactoryCandidateInfo);
  conflicts.add(createMethodCandidate(staticFactory,context,true,argumentList));
  return resolver.resolveConflict(conflicts);
}
