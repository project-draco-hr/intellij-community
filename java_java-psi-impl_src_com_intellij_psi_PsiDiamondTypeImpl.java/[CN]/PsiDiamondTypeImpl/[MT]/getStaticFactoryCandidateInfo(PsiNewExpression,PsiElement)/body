{
  return ourDiamondGuard.doPreventingRecursion(context,false,new Computable<JavaResolveResult>(){
    @Override public JavaResolveResult compute(){
      final PsiExpressionList argumentList=newExpression.getArgumentList();
      if (argumentList == null) {
        return null;
      }
      final JavaMethodsConflictResolver resolver=new JavaMethodsConflictResolver(argumentList,PsiUtil.getLanguageLevel(newExpression));
      final JavaResolveResult[] result=collectStaticFactories(newExpression,resolver);
      final PsiMethod staticFactory=result != null && result.length == 1 ? (PsiMethod)result[0].getElement() : null;
      if (staticFactory == null) {
        return JavaResolveResult.EMPTY;
      }
      final MethodCandidateInfo staticFactoryCandidateInfo=createMethodCandidate(staticFactory,context,false,argumentList);
      if (!staticFactory.isVarArgs()) {
        return staticFactoryCandidateInfo;
      }
      final ArrayList<CandidateInfo> conflicts=new ArrayList<CandidateInfo>();
      conflicts.add(staticFactoryCandidateInfo);
      conflicts.add(createMethodCandidate(staticFactory,context,true,argumentList));
      return resolver.resolveConflict(conflicts);
    }
  }
);
}
