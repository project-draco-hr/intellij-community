{
  final Ref<JavaResolveResult> staticFactoryRef=new Ref<JavaResolveResult>();
  final PsiSubstitutor inferredSubstitutor=ourDiamondGuard.doPreventingRecursion(context,false,new Computable<PsiSubstitutor>(){
    @Override public PsiSubstitutor compute(){
      final JavaResolveResult staticFactoryCandidateInfo=context == newExpression ? CachedValuesManager.getCachedValue(newExpression,new CachedValueProvider<JavaResolveResult>(){
        @Nullable @Override public Result<JavaResolveResult> compute(){
          return new Result<JavaResolveResult>(getStaticFactoryCandidateInfo(newExpression,newExpression),PsiModificationTracker.MODIFICATION_COUNT);
        }
      }
) : getStaticFactoryCandidateInfo(newExpression,context);
      staticFactoryRef.set(staticFactoryCandidateInfo);
      return staticFactoryCandidateInfo != null ? staticFactoryCandidateInfo.getSubstitutor() : null;
    }
  }
);
  if (inferredSubstitutor == null) {
    return DiamondInferenceResult.NULL_RESULT;
  }
  final JavaResolveResult staticFactoryInfo=staticFactoryRef.get();
  if (staticFactoryInfo == null) {
    LOG.error(inferredSubstitutor);
    return DiamondInferenceResult.NULL_RESULT;
  }
  if (!(staticFactoryInfo instanceof MethodCandidateInfo)) {
    return DiamondInferenceResult.UNRESOLVED_CONSTRUCTOR;
  }
  if (InferenceSession.wasUncheckedConversionPerformed(context)) {
    return DiamondInferenceResult.RAW_RESULT;
  }
  final PsiMethod staticFactory=((MethodCandidateInfo)staticFactoryInfo).getElement();
  final PsiTypeParameter[] parameters=staticFactory.getTypeParameters();
  final PsiElement staticFactoryContext=staticFactory.getContext();
  final PsiClass psiClass=PsiTreeUtil.getContextOfType(staticFactoryContext,PsiClass.class,false);
  if (psiClass == null) {
    LOG.error("failed for expression:" + newExpression);
    return DiamondInferenceResult.NULL_RESULT;
  }
  final PsiTypeParameter[] classParameters=psiClass.getTypeParameters();
  final PsiJavaCodeReferenceElement classOrAnonymousClassReference=newExpression.getClassOrAnonymousClassReference();
  LOG.assertTrue(classOrAnonymousClassReference != null);
  final DiamondInferenceResult result=new DiamondInferenceResult(classOrAnonymousClassReference.getReferenceName() + "<>");
  if (PsiUtil.isRawSubstitutor(staticFactory,inferredSubstitutor)) {
    if (!JavaVersionService.getInstance().isAtLeast(newExpression,JavaSdkVersion.JDK_1_8) && PsiUtil.skipParenthesizedExprUp(newExpression.getParent()) instanceof PsiExpressionList) {
      for (      PsiTypeParameter ignored : parameters) {
        result.addInferredType(PsiType.getJavaLangObject(newExpression.getManager(),GlobalSearchScope.allScope(newExpression.getProject())));
      }
    }
    return result;
  }
  for (  PsiTypeParameter parameter : parameters) {
    for (    PsiTypeParameter classParameter : classParameters) {
      if (Comparing.strEqual(classParameter.getName(),parameter.getName())) {
        result.addInferredType(inferredSubstitutor.substitute(parameter));
        break;
      }
    }
  }
  return result;
}
