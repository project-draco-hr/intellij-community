{
  final PsiClass psiClass=findClass(newExpression);
  if (psiClass == null)   return DiamondInferenceResult.NULL_RESULT;
  final PsiExpressionList argumentList=newExpression.getArgumentList();
  if (argumentList == null)   return DiamondInferenceResult.NULL_RESULT;
  final Ref<PsiMethod> staticFactoryRef=new Ref<PsiMethod>();
  final PsiSubstitutor inferredSubstitutor=ourDiamondGuard.doPreventingRecursion(context,false,new Computable<PsiSubstitutor>(){
    @Override public PsiSubstitutor compute(){
      final PsiMethod staticFactory=findConstructorStaticFactory(psiClass,newExpression);
      if (staticFactory == null) {
        return null;
      }
      staticFactoryRef.set(staticFactory);
      return inferTypeParametersForStaticFactory(staticFactory,newExpression,context,false);
    }
  }
);
  if (inferredSubstitutor == null) {
    return DiamondInferenceResult.NULL_RESULT;
  }
  final PsiMethod staticFactory=staticFactoryRef.get();
  if (staticFactory == null) {
    LOG.error(inferredSubstitutor);
    return DiamondInferenceResult.NULL_RESULT;
  }
  final PsiTypeParameter[] parameters=staticFactory.getTypeParameters();
  final PsiTypeParameter[] classParameters=psiClass.getTypeParameters();
  final PsiJavaCodeReferenceElement classOrAnonymousClassReference=newExpression.getClassOrAnonymousClassReference();
  LOG.assertTrue(classOrAnonymousClassReference != null);
  final DiamondInferenceResult result=new DiamondInferenceResult(classOrAnonymousClassReference.getReferenceName() + "<>");
  if (PsiUtil.isRawSubstitutor(staticFactory,inferredSubstitutor)) {
    if (!JavaVersionService.getInstance().isAtLeast(argumentList,JavaSdkVersion.JDK_1_8) && PsiUtil.skipParenthesizedExprUp(newExpression.getParent()) instanceof PsiExpressionList) {
      for (      PsiTypeParameter parameter : parameters) {
        result.addInferredType(PsiType.getJavaLangObject(psiClass.getManager(),GlobalSearchScope.allScope(psiClass.getProject())));
      }
    }
    return result;
  }
  for (  PsiTypeParameter parameter : parameters) {
    for (    PsiTypeParameter classParameter : classParameters) {
      if (Comparing.strEqual(classParameter.getName(),parameter.getName())) {
        result.addInferredType(inferredSubstitutor.substitute(parameter));
        break;
      }
    }
  }
  return result;
}
