{
  PsiExpressionList argumentList=newExpression.getArgumentList();
  if (argumentList == null) {
    return null;
  }
  final PsiClass psiClass=findClass(newExpression);
  if (psiClass == null) {
    return null;
  }
  final List<CandidateInfo> candidates=new ArrayList<CandidateInfo>();
  PsiMethod[] constructors=psiClass.getConstructors();
  if (constructors.length == 0) {
    constructors=new PsiMethod[]{null};
  }
  final MethodCandidatesProcessor processor=new MethodCandidatesProcessor(argumentList,argumentList.getContainingFile(),conflictResolvers,candidates){
    @Override protected boolean isAccepted(    PsiMethod candidate){
      return true;
    }
    @Override protected PsiClass getContainingClass(    PsiMethod method){
      return psiClass;
    }
    @Override protected boolean acceptVarargs(){
      return true;
    }
  }
;
  processor.setArgumentList(argumentList);
  for (  PsiMethod constructor : constructors) {
    final PsiTypeParameter[] params=getAllTypeParams(constructor,psiClass);
    final PsiMethod staticFactory=generateStaticFactory(constructor,psiClass,params,newExpression.getClassReference());
    if (staticFactory != null) {
      processor.add(staticFactory,PsiSubstitutor.EMPTY);
    }
  }
  return processor.getResult();
}
