{
  final SdkModificator modificator=myModificators.get(currentSdk);
  final EditSdkDialog dialog=new EditSdkDialog(myProject,modificator,new NullableFunction<String,String>(){
    @Override public String fun(    String s){
      if (isDuplicateSdkName(s,currentSdk)) {
        return "Please specify a unique name for the interpreter";
      }
      return null;
    }
  }
);
  dialog.show();
  if (dialog.isOK()) {
    final boolean pathChanged=!Comparing.equal(currentSdk.getHomePath(),dialog.getHomePath());
    if (!currentSdk.getName().equals(dialog.getName()) || pathChanged || dialog.isAssociateChanged()) {
      myModifiedModificators.add(modificator);
      modificator.setName(dialog.getName());
      modificator.setHomePath(dialog.getHomePath());
      if (dialog.isAssociateChanged()) {
        setSdkAssociated(modificator,dialog.associateWithProject());
      }
      if (pathChanged) {
        reloadSdk(currentSdk);
      }
    }
  }
}
