{
  TreeElement mirrorTreeElement=myMirrorFileElement;
  if (mirrorTreeElement == null) {
synchronized (myMirrorLock) {
      mirrorTreeElement=myMirrorFileElement;
      if (mirrorTreeElement == null) {
        final VirtualFile file=getVirtualFile();
        CharSequence mirrorText=ClassFileDecompiler.decompileText(file);
        String ext=JavaFileType.INSTANCE.getDefaultExtension();
        PsiClass[] classes=getClasses();
        String fileName=(classes.length > 0 ? classes[0].getName() : file.getNameWithoutExtension()) + "." + ext;
        PsiFileFactory factory=PsiFileFactory.getInstance(getManager().getProject());
        PsiFile mirror=factory.createFileFromText(fileName,JavaLanguage.INSTANCE,mirrorText,false,false);
        mirror.putUserData(PsiUtil.FILE_LANGUAGE_LEVEL_KEY,getLanguageLevel());
        mirrorTreeElement=SourceTreeToPsiMap.psiToTreeNotNull(mirror);
        final TreeElement finalMirrorTreeElement=mirrorTreeElement;
        ProgressManager.getInstance().executeNonCancelableSection(new Runnable(){
          @Override public void run(){
            try {
              setMirror(finalMirrorTreeElement);
            }
 catch (            InvalidMirrorException e) {
              LOG.error(file.getPath(),wrapException(e,file));
            }
          }
        }
);
        myMirrorFileElement=mirrorTreeElement;
      }
    }
  }
  return mirrorTreeElement.getPsi();
}
