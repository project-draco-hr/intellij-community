{
  try {
    final CRC32 crc=new CRC32();
    SAXParser parser=SAXParserFactory.newInstance().newSAXParser();
    parser.parse(in,new DefaultHandler(){
      boolean textContentOccur=false;
      int spacesCrc;
      private void putString(      @Nullable String string){
        if (string == null)         return;
        for (int i=0, end=string.length(); i < end; i++) {
          crc.update(string.charAt(i));
        }
      }
      @Override public void startElement(      String uri,      String localName,      String qName,      Attributes attributes) throws SAXException {
        textContentOccur=false;
        crc.update(1);
        putString(qName);
        for (int i=0; i < attributes.getLength(); i++) {
          putString(attributes.getQName(i));
          putString(attributes.getValue(i));
        }
      }
      @Override public void endElement(      String uri,      String localName,      String qName) throws SAXException {
        textContentOccur=false;
        crc.update(2);
        putString(qName);
      }
      private void processTextOrSpaces(      char[] ch,      int start,      int length){
        for (int i=start, end=start + length; i < end; i++) {
          char a=ch[i];
          if (Character.isWhitespace(a)) {
            if (textContentOccur) {
              spacesCrc=spacesCrc * 31 + a;
            }
          }
 else {
            if (textContentOccur && spacesCrc != 0) {
              crc.update(spacesCrc);
              crc.update(spacesCrc >> 8);
            }
            crc.update(a);
            textContentOccur=true;
            spacesCrc=0;
          }
        }
      }
      @Override public void characters(      char[] ch,      int start,      int length) throws SAXException {
        processTextOrSpaces(ch,start,length);
      }
      @Override public void ignorableWhitespace(      char[] ch,      int start,      int length) throws SAXException {
        processTextOrSpaces(ch,start,length);
      }
      @Override public void processingInstruction(      String target,      String data) throws SAXException {
        putString(target);
        putString(data);
      }
      @Override public void skippedEntity(      String name) throws SAXException {
        putString(name);
      }
      @Override public void error(      SAXParseException e) throws SAXException {
        crc.update(100);
      }
    }
);
    return (int)crc.getValue();
  }
 catch (  ParserConfigurationException e) {
    throw new RuntimeException(e);
  }
catch (  SAXException e) {
    return -1;
  }
}
