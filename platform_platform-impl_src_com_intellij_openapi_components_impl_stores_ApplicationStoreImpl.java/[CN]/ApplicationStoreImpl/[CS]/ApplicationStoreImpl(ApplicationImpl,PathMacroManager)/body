{
  myApplication=application;
  myStateStorageManager=new StateStorageManagerImpl(pathMacroManager.createTrackingSubstitutor(),ROOT_ELEMENT_NAME,application,application.getPicoContainer()){
    @Override protected StorageData createStorageData(    String storageSpec){
      return new FileBasedStorage.FileStorageData(ROOT_ELEMENT_NAME);
    }
    @Nullable @Override protected String getOldStorageSpec(    Object component,    final String componentName,    final StateStorageOperation operation){
      if (component instanceof NamedJDOMExternalizable) {
        return StoragePathMacros.APP_CONFIG + "/" + ((NamedJDOMExternalizable)component).getExternalFileName()+ XML_EXTENSION;
      }
 else {
        return DEFAULT_STORAGE_SPEC;
      }
    }
    @Override protected String getVersionsFilePath(){
      String configPath=myConfigPath;
      if (configPath == null) {
        configPath=PathManager.getConfigPath();
      }
      return configPath + "/options/appComponentVersions.xml";
    }
    @Override protected TrackingPathMacroSubstitutor getMacroSubstitutor(    @NotNull final String fileSpec){
      if (fileSpec.equals(StoragePathMacros.APP_CONFIG + "/" + PathMacrosImpl.EXT_FILE_NAME+ XML_EXTENSION))       return null;
      return super.getMacroSubstitutor(fileSpec);
    }
  }
;
  myDefaultsStateStorage=new DefaultsStateStorage(null);
}
