{
  PyClass cls=node.getContainingClass();
  if (cls != null) {
    Set<PyFunction.Flag> flags=detectDecorationsAndWrappersOf(node);
    boolean isMetaclassMethod=false;
    PyClass type_cls=PyBuiltinCache.getInstance(node).getClass("type");
    for (    PyClass ancestor_cls : cls.iterateAncestors()) {
      if (ancestor_cls == type_cls) {
        isMetaclassMethod=true;
        break;
      }
    }
    final String method_name=node.getName();
    boolean isSpecialMetaclassMethod=isMetaclassMethod && method_name != null && among(method_name,PyNames.INIT,"__call__");
    return new MethodFlags(flags.contains(CLASSMETHOD),flags.contains(STATICMETHOD),isMetaclassMethod,isSpecialMetaclassMethod);
  }
  return null;
}
