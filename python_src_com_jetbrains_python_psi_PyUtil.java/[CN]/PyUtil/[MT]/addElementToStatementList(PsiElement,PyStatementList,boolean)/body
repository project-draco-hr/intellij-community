{
  final boolean statementListWasEmpty=statementList.getStatements().length == 0;
  final PsiElement firstChild=statementList.getFirstChild();
  if (firstChild == statementList.getLastChild() && firstChild instanceof PyPassStatement) {
    element=firstChild.replace(element);
  }
 else {
    final PyStatement[] statements=statementList.getStatements();
    if (toTheBeginning && statements.length > 0) {
      final PyDocStringOwner docStringOwner=PsiTreeUtil.getParentOfType(statementList,PyDocStringOwner.class);
      PyStatement anchor=statements[0];
      if (docStringOwner != null && anchor instanceof PyExpressionStatement && ((PyExpressionStatement)anchor).getExpression() == docStringOwner.getDocStringExpression()) {
        final PyStatement next=PsiTreeUtil.getNextSiblingOfType(anchor,PyStatement.class);
        if (next == null) {
          return statementList.addAfter(element,anchor);
        }
        anchor=next;
      }
      while (anchor instanceof PyExpressionStatement) {
        final PyExpression expression=((PyExpressionStatement)anchor).getExpression();
        if (expression instanceof PyCallExpression) {
          final PyExpression callee=((PyCallExpression)expression).getCallee();
          if ((isSuperCall((PyCallExpression)expression) || (callee != null && PyNames.INIT.equals(callee.getName())))) {
            final PyStatement next=PsiTreeUtil.getNextSiblingOfType(anchor,PyStatement.class);
            if (next == null) {
              return statementList.addAfter(element,anchor);
            }
            anchor=next;
            continue;
          }
        }
        break;
      }
      element=statementList.addBefore(element,anchor);
    }
 else {
      element=statementList.add(element);
    }
  }
  if (statementListWasEmpty) {
    final PsiElement parent=statementList.getParent();
    if (parent instanceof PyStatementListContainer) {
      final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(parent.getProject());
      final PsiFile pyFile=parent.getContainingFile();
      final Document document=documentManager.getDocument(pyFile);
      if (document != null && document.getLineNumber(parent.getTextOffset()) == document.getLineNumber(statementList.getTextOffset())) {
        final CodeStyleSettings codeStyleManager=CodeStyleSettingsManager.getSettings(parent.getProject());
        final IndentOptions indentOptions=codeStyleManager.getCommonSettings(pyFile.getLanguage()).getIndentOptions();
        final int indentSize=indentOptions.INDENT_SIZE;
        final String indentation=StringUtil.repeatSymbol(' ',PyPsiUtils.getElementIndentation(parent) + indentSize);
        documentManager.doPostponedOperationsAndUnblockDocument(document);
        document.insertString(statementList.getTextOffset(),"\n" + indentation);
        documentManager.commitDocument(document);
      }
    }
  }
  return element;
}
