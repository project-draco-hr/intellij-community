{
  final Map<String,Set<String>> cache=CachedValuesManager.getManager(project).getCachedValue(project,new CachedValueProvider<Map<String,Set<String>>>(){
    @Override public Result<Map<String,Set<String>>> compute(){
      final Map<String,Set<String>> result=ContainerUtil.newConcurrentMap();
      return Result.create(result,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);
    }
  }
);
  final PsiClass cls=PsiUtil.resolveClassInType(base);
  String key;
  if (cls instanceof PsiTypeParameter) {
    final PsiClass superClass=cls.getSuperClass();
    key=cls.getName() + (superClass == null ? CommonClassNames.JAVA_LANG_OBJECT : superClass.getName());
  }
 else   if (base instanceof GrTraitType) {
    key=((GrTraitType)base).erasure().getCanonicalText();
  }
 else   if (base instanceof PsiClassType) {
    key=TypesUtil.getQualifiedName(base);
  }
 else {
    key=base.getCanonicalText();
  }
  Set<String> result=key == null ? null : cache.get(key);
  if (result == null) {
    result=ContainerUtil.newHashSet();
    collectSuperTypes(base,result,project);
    if (key != null) {
      cache.put(key,result);
    }
  }
  return result;
}
