{
  if (candidates.size() == 0)   return GroovyResolveResult.EMPTY_ARRAY;
  if (candidates.size() == 1)   return candidates.toArray(new GroovyResolveResult[candidates.size()]);
  final List<GroovyResolveResult> result=new ArrayList<GroovyResolveResult>();
  final Iterator<? extends GroovyResolveResult> allIterator=candidates.iterator();
  result.add(allIterator.next());
  Outer:   while (allIterator.hasNext()) {
    final GroovyResolveResult currentResult=allIterator.next();
    final PsiMethod currentMethod;
    final PsiSubstitutor currentSubstitutor;
    if (currentResult instanceof GroovyMethodResult) {
      final GroovyMethodResult currentMethodResult=(GroovyMethodResult)currentResult;
      currentMethod=currentMethodResult.getElement();
      currentSubstitutor=currentMethodResult.getSubstitutor(false);
    }
 else     if (currentResult.getElement() instanceof PsiMethod) {
      currentMethod=(PsiMethod)currentResult.getElement();
      currentSubstitutor=currentResult.getSubstitutor();
    }
 else {
      result.add(currentResult);
      continue;
    }
    Inner:     for (Iterator<GroovyResolveResult> resultIterator=result.iterator(); resultIterator.hasNext(); ) {
      final GroovyResolveResult otherResult=resultIterator.next();
      final PsiMethod otherMethod;
      final PsiSubstitutor otherSubstitutor;
      if (otherResult instanceof GroovyMethodResult) {
        final GroovyMethodResult otherMethodResult=(GroovyMethodResult)otherResult;
        otherMethod=otherMethodResult.getElement();
        otherSubstitutor=otherMethodResult.getSubstitutor(false);
      }
 else       if (otherResult.getElement() instanceof PsiMethod) {
        otherMethod=(PsiMethod)otherResult.getElement();
        otherSubstitutor=otherResult.getSubstitutor();
      }
 else {
        continue Inner;
      }
      if (dominated(currentMethod,currentSubstitutor,otherMethod,otherSubstitutor)) {
        continue Outer;
      }
 else       if (dominated(otherMethod,otherSubstitutor,currentMethod,currentSubstitutor)) {
        resultIterator.remove();
      }
    }
    result.add(currentResult);
  }
  return result.toArray(new GroovyResolveResult[result.size()]);
}
