{
  myHistory=history;
  myNavigator=navigator;
  setLayout(new BorderLayout());
  myModel=new DefaultListModel();
  myList=new JBList(myModel);
  if (Registry.is("ide.new.project.settings")) {
    myList.setBackground(UIUtil.getSidePanelColor());
    myList.setBorder(new EmptyBorder(5,0,0,0));
  }
  final ListItemDescriptor descriptor=new ListItemDescriptor(){
    @Override public String getTextFor(    final Object value){
      return myPlace2Presentation.get(value).getText();
    }
    @Override public String getTooltipFor(    final Object value){
      return getTextFor(value);
    }
    @Override public Icon getIconFor(    final Object value){
      return Registry.is("ide.new.project.settings") ? EmptyIcon.create(16,20) : null;
    }
    @Override public boolean hasSeparatorAboveOf(    final Object value){
      final int index=myPlaces.indexOf(value);
      return myIndex2Separator.get(index) != null;
    }
    @Override public String getCaptionAboveOf(    final Object value){
      return myIndex2Separator.get(myPlaces.indexOf(value));
    }
  }
;
  myList.setCellRenderer(new GroupedItemsListRenderer(descriptor){
{
      mySeparatorComponent.setCaptionCentered(false);
    }
    @Override protected SeparatorWithText createSeparator(){
      return new SeparatorWithText(){
        @Override protected void paintComponent(        Graphics g){
          if (Registry.is("ide.new.project.settings")) {
            g.setColor(POPUP_SEPARATOR_FOREGROUND);
            if ("--".equals(getCaption())) {
              g.drawLine(0,getHeight() / 2,getWidth(),getHeight() / 2);
              return;
            }
            Rectangle viewR=new Rectangle(0,getVgap(),getWidth() - 1,getHeight() - getVgap() - 1);
            Rectangle iconR=new Rectangle();
            Rectangle textR=new Rectangle();
            String s=SwingUtilities.layoutCompoundLabel(g.getFontMetrics(),getCaption(),null,CENTER,LEFT,CENTER,LEFT,viewR,iconR,textR,0);
            GraphicsUtil.setupAAPainting(g);
            g.setColor(new JBColor(Gray._255.withAlpha(80),Gray._0.withAlpha(80)));
            g.drawString(s,textR.x + 10,textR.y + 1 + g.getFontMetrics().getAscent());
            g.setColor(new JBColor(new Color(0x5F6D7B),Gray._120));
            g.drawString(s,textR.x + 10,textR.y + g.getFontMetrics().getAscent());
          }
 else {
            super.paintComponent(g);
          }
        }
      }
;
    }
    @Override protected JComponent createItemComponent(){
      if (Registry.is("ide.new.project.settings")) {
        myTextLabel=new EngravedLabel();
        myTextLabel.setFont(myTextLabel.getFont().deriveFont(Font.BOLD));
        myTextLabel.setForeground(Gray._240);
        myTextLabel.setOpaque(true);
        return layoutComponent(myTextLabel);
      }
      return super.createItemComponent();
    }
    @Override protected Color getBackground(){
      return Registry.is("ide.new.project.settings") ? UIUtil.getSidePanelColor() : super.getBackground();
    }
  }
);
  add(ScrollPaneFactory.createScrollPane(myList,Registry.is("ide.new.project.settings")),BorderLayout.CENTER);
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    final ListSelectionEvent e){
      if (e.getValueIsAdjusting())       return;
      final Object value=myList.getSelectedValue();
      if (value != null) {
        myNavigator.navigateTo(((Place)value),false);
      }
    }
  }
);
}
