{
  myHistory=history;
  myNavigator=navigator;
  setLayout(new BorderLayout());
  myModel=new DefaultListModel();
  myList=new JBList(myModel);
  if (Registry.is("ide.new.project.settings")) {
    myList.setBackground(UIUtil.SIDE_PANEL_BACKGROUND);
    myList.setBorder(new EmptyBorder(5,0,0,0));
  }
  final ListItemDescriptor descriptor=new ListItemDescriptor(){
    @Override public String getTextFor(    final Object value){
      return myPlace2Presentation.get(value).getText();
    }
    @Override public String getTooltipFor(    final Object value){
      return getTextFor(value);
    }
    @Override public Icon getIconFor(    final Object value){
      return Registry.is("ide.new.project.settings") ? EmptyIcon.create(16,20) : null;
    }
    @Override public boolean hasSeparatorAboveOf(    final Object value){
      return getSeparatorAbove((Place)value) != null;
    }
    @Override public String getCaptionAboveOf(    final Object value){
      return getSeparatorAbove((Place)value);
    }
  }
;
  myList.setCellRenderer(new GroupedItemsListRenderer(descriptor){
    JPanel myExtraPanel;
    SidePanelCountLabel myCountLabel;
{
      mySeparatorComponent.setCaptionCentered(false);
    }
    @Override protected Color getForeground(){
      return Registry.is("ide.new.project.settings") ? new JBColor(Gray._60,Gray._140) : super.getForeground();
    }
    @Override protected SeparatorWithText createSeparator(){
      return new SidePanelSeparator();
    }
    @Override protected void layout(){
      if (Registry.is("ide.new.project.settings")) {
        myRendererComponent.add(mySeparatorComponent,BorderLayout.NORTH);
        myExtraPanel.add(myComponent,BorderLayout.CENTER);
        myExtraPanel.add(myCountLabel,BorderLayout.EAST);
        myRendererComponent.add(myExtraPanel,BorderLayout.CENTER);
      }
 else {
        super.layout();
      }
    }
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      myCountLabel.setText("");
      final Component component=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if ("Problems".equals(descriptor.getTextFor(value))) {
        final ErrorPaneConfigurable errorPane=(ErrorPaneConfigurable)((Place)value).getPath("category");
        if (errorPane != null && errorPane.getErrorsCount() > 0) {
          myCountLabel.setSelected(isSelected);
          myCountLabel.setText(String.valueOf(errorPane.getErrorsCount()));
        }
      }
      return component;
    }
    @Override protected JComponent createItemComponent(){
      myExtraPanel=new NonOpaquePanel(new BorderLayout());
      myCountLabel=new SidePanelCountLabel();
      final JComponent component=super.createItemComponent();
      if (Registry.is("ide.new.project.settings")) {
        myTextLabel.setForeground(Gray._240);
        myTextLabel.setOpaque(true);
      }
      return component;
    }
    @Override protected Color getBackground(){
      return Registry.is("ide.new.project.settings") ? UIUtil.SIDE_PANEL_BACKGROUND : super.getBackground();
    }
  }
);
  add(ScrollPaneFactory.createScrollPane(myList,Registry.is("ide.new.project.settings")),BorderLayout.CENTER);
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    final ListSelectionEvent e){
      if (e.getValueIsAdjusting())       return;
      final Object value=myList.getSelectedValue();
      if (value != null) {
        myNavigator.navigateTo(((Place)value),false);
      }
    }
  }
);
}
