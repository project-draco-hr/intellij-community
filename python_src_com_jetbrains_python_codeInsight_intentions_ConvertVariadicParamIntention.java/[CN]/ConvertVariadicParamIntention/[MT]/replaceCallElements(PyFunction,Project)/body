{
  PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
  List<PyCallExpression> callElements=fillCallExpressions(function);
  int size=callElements.size();
  for (int i=0; i != size; ++i) {
    PyCallExpression callExpression=callElements.get(i);
    PyExpression indexExpression=callExpression.getArguments()[0];
    if (indexExpression instanceof PyStringLiteralExpression) {
      PyNamedParameter defaultValue=null;
      if (callExpression.getArguments().length > 1) {
        defaultValue=elementGenerator.createParameter(((PyStringLiteralExpression)indexExpression).getStringValue() + "=" + callExpression.getArguments()[1].getText());
      }
      if (defaultValue == null) {
        PyExpression callee=callExpression.getCallee();
        if (callee instanceof PyQualifiedExpression && "get".equals(((PyQualifiedExpression)callee).getReferencedName())) {
          defaultValue=elementGenerator.createParameter(((PyStringLiteralExpression)indexExpression).getStringValue() + "=None");
        }
      }
      PyExpression p=elementGenerator.createExpressionFromText(((PyStringLiteralExpression)indexExpression).getStringValue());
      ASTNode comma=elementGenerator.createComma();
      PyParameter keywordContainer=getKeywordContainer(function);
      if (defaultValue != null)       function.getParameterList().addBefore(defaultValue,keywordContainer);
 else       function.getParameterList().addBefore(p,keywordContainer);
      function.getParameterList().addBefore((PsiElement)comma,keywordContainer);
      callExpression.replace(p);
    }
  }
}
