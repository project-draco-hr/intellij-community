{
  VarType exprType=null;
  if (functype <= FUNCTION_NEG || functype == FUNCTION_IPP || functype == FUNCTION_PPI || functype == FUNCTION_IMM || functype == FUNCTION_MMI) {
    VarType type1=lstOperands.get(0).getExprType();
    VarType type2=null;
    if (lstOperands.size() > 1) {
      type2=lstOperands.get(1).getExprType();
    }
switch (functype) {
case FUNCTION_IMM:
case FUNCTION_MMI:
case FUNCTION_IPP:
case FUNCTION_PPI:
      exprType=implicitType;
    break;
case FUNCTION_BOOLNOT:
  exprType=VarType.VARTYPE_BOOLEAN;
break;
case FUNCTION_SHL:
case FUNCTION_SHR:
case FUNCTION_USHR:
case FUNCTION_BITNOT:
case FUNCTION_NEG:
exprType=getMaxVarType(new VarType[]{type1});
break;
case FUNCTION_ADD:
case FUNCTION_SUB:
case FUNCTION_MUL:
case FUNCTION_DIV:
case FUNCTION_REM:
exprType=getMaxVarType(new VarType[]{type1,type2});
break;
case FUNCTION_AND:
case FUNCTION_OR:
case FUNCTION_XOR:
if (type1.type == CodeConstants.TYPE_BOOLEAN & type2.type == CodeConstants.TYPE_BOOLEAN) {
exprType=VarType.VARTYPE_BOOLEAN;
}
 else {
exprType=getMaxVarType(new VarType[]{type1,type2});
}
}
}
 else if (functype == FUNCTION_CAST) {
exprType=lstOperands.get(1).getExprType();
}
 else if (functype == FUNCTION_IIF) {
Exprent param1=lstOperands.get(1);
Exprent param2=lstOperands.get(2);
VarType supertype=VarType.getCommonSupertype(param1.getExprType(),param2.getExprType());
if (param1.type == Exprent.EXPRENT_CONST && param2.type == Exprent.EXPRENT_CONST && supertype.type != CodeConstants.TYPE_BOOLEAN && VarType.VARTYPE_INT.isSuperset(supertype)) {
exprType=VarType.VARTYPE_INT;
}
 else {
exprType=supertype;
}
}
 else if (functype == FUNCTION_STRCONCAT) {
exprType=VarType.VARTYPE_STRING;
}
 else if (functype >= FUNCTION_EQ) {
exprType=VarType.VARTYPE_BOOLEAN;
}
 else if (functype == FUNCTION_INSTANCEOF) {
exprType=VarType.VARTYPE_BOOLEAN;
}
 else if (functype >= FUNCTION_ARRAYLENGTH) {
exprType=VarType.VARTYPE_INT;
}
 else {
exprType=types[functype - FUNCTION_I2L];
}
return exprType;
}
