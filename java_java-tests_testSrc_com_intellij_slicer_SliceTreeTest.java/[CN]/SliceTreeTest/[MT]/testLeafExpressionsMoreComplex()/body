{
  SliceTreeStructure treeStructure=configureTree("Duplicate");
  SliceNode root=(SliceNode)treeStructure.getRootElement();
  Collection<PsiElement> leaves=SliceLeafAnalyzer.calcLeafExpressions(root,treeStructure,SliceLeafAnalyzer.createMap());
  assertNotNull(leaves);
  List<PsiElement> list=new ArrayList<PsiElement>(leaves);
  String message=ContainerUtil.map(list,new Function<PsiElement,String>(){
    @Override public String fun(    PsiElement element){
      return element.getClass() + ": '" + element.getText()+ "' ("+ System.identityHashCode(element)+ ") ";
    }
  }
).toString();
  assertEquals(message,2,leaves.size());
  Collections.sort(list,new Comparator<PsiElement>(){
    @Override public int compare(    PsiElement o1,    PsiElement o2){
      return o1.getText().compareTo(o2.getText());
    }
  }
);
  assertTrue(list.get(0) instanceof PsiLiteralExpression);
  assertEquals(false,((PsiLiteral)list.get(0)).getValue());
  assertTrue(list.get(1) instanceof PsiLiteralExpression);
  assertEquals(true,((PsiLiteral)list.get(1)).getValue());
}
