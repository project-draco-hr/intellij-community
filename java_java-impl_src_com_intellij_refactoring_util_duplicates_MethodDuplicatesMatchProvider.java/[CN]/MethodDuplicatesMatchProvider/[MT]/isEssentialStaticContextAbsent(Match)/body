{
  if (!myMethod.hasModifierProperty(PsiModifier.STATIC)) {
    final PsiExpression instanceExpression=match.getInstanceExpression();
    if (instanceExpression != null)     return false;
    if (isExternal(match))     return true;
    final PsiElement matchStart=match.getMatchStart();
    final PsiClass containingClass=myMethod.getContainingClass();
    if (PsiTreeUtil.isAncestor(containingClass,matchStart,false)) {
      if (RefactoringUtil.isInStaticContext(matchStart,containingClass))       return true;
    }
 else {
      PsiClass psiClass=PsiTreeUtil.getParentOfType(matchStart,PsiClass.class);
      while (psiClass != null) {
        if (InheritanceUtil.isInheritorOrSelf(psiClass,containingClass,true)) {
          if (RefactoringUtil.isInStaticContext(matchStart,psiClass))           return true;
          break;
        }
        psiClass=PsiTreeUtil.getParentOfType(psiClass,PsiClass.class);
      }
    }
  }
  return false;
}
