{
  GitCompoundResult checkoutResult=new GitCompoundResult(myProject);
  GitCompoundResult deleteResult=new GitCompoundResult(myProject);
  Collection<GitRepository> repositories=getSuccessfulRepositories();
  for (  GitRepository repository : repositories) {
    GitCommandResult result=myGit.checkout(repository,myCurrentHeads.get(repository),null,true);
    checkoutResult.append(repository,result);
    if (result.success()) {
      deleteResult.append(repository,myGit.branchDelete(repository,myNewBranchName,false));
    }
    refresh(repository);
  }
  if (checkoutResult.totalSuccess() && deleteResult.totalSuccess()) {
    VcsNotifier.getInstance(myProject).notifySuccess("Rollback successful",String.format("Checked out %s and deleted %s on %s %s",stringifyBranchesByRepos(myCurrentHeads),code(myNewBranchName),StringUtil.pluralize("root",repositories.size()),successfulRepositoriesJoined()));
  }
 else {
    StringBuilder message=new StringBuilder();
    if (!checkoutResult.totalSuccess()) {
      message.append("Errors during checkout: ");
      message.append(checkoutResult.getErrorOutputWithReposIndication());
    }
    if (!deleteResult.totalSuccess()) {
      message.append("Errors during deleting ").append(code(myNewBranchName));
      message.append(deleteResult.getErrorOutputWithReposIndication());
    }
    VcsNotifier.getInstance(myProject).notifyError("Error during rollback",message.toString());
  }
}
