{
  com.intellij.codeInspection.bytecodeAnalysis.Result<Key,Value> rhs=equation.rhs;
  IntIdResult<Value> result;
  if (rhs instanceof Final) {
    result=new IntIdFinal<Value>(((Final<Key,Value>)rhs).value);
  }
 else {
    Pending<Key,Value> pending=(Pending<Key,Value>)rhs;
    Set<Component<Key>> deltaOrig=pending.delta;
    IntIdComponent[] components=new IntIdComponent[deltaOrig.size()];
    int componentI=0;
    for (    Component<Key> keyComponent : deltaOrig) {
      int[] ids=new int[keyComponent.ids.size()];
      int idI=0;
      for (      Key id : keyComponent.ids) {
        ids[idI]=myEnumerators.internalKeyEnumerator.enumerate(id.toString());
        idI++;
      }
      IntIdComponent intIdComponent=new IntIdComponent(keyComponent.touched,ids);
      components[componentI]=intIdComponent;
      componentI++;
    }
    result=new IntIdPending<Value>(pending.infinum,components);
  }
  int key=myEnumerators.internalKeyEnumerator.enumerate(equation.id.toString());
  return new IntIdEquation<Value>(key,result);
}
