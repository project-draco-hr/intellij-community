{
  final PsiElement element=constructorResolveResult.getElement();
  LOG.assertTrue(element instanceof PsiMethod && ((PsiMethod)element).isConstructor(),element);
  final PsiMethod constructor=(PsiMethod)element;
  final GrArgumentList argList=info.getArgumentList();
  if (argList != null) {
    final GrExpression[] exprArgs=argList.getExpressionArguments();
    if (exprArgs.length == 0 && !PsiUtil.isConstructorHasRequiredParameters(constructor))     return true;
  }
  PsiType[] types=info.getArgumentTypes();
  PsiClass containingClass=constructor.getContainingClass();
  if (types != null && containingClass != null) {
    final PsiType[] newTypes=GrInnerClassConstructorUtil.addEnclosingArgIfNeeded(types,info.getCall(),containingClass);
    if (newTypes.length != types.length) {
      return checkMethodApplicability(constructorResolveResult,checkUnknownArgs,new DelegatingCallInfo(info){
        @Nullable @Override public PsiType[] getArgumentTypes(){
          return newTypes;
        }
      }
);
    }
  }
  return checkMethodApplicability(constructorResolveResult,checkUnknownArgs,info);
}
