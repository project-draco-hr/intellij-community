{
  queue(new Update("ViewUpdate"){
    @Override public boolean isExpired(){
      return myTreeBuilder.isDisposed();
    }
    @Override public void run(){
      AbstractTreeStructure structure=myTreeBuilder.getTreeStructure();
      if (structure.hasSomethingToCommit()) {
        structure.asyncCommit().doWhenDone(new TreeRunnable("AbstractTreeUpdater.reQueueViewUpdate"){
          @Override public void perform(){
            reQueueViewUpdateIfNeeded();
          }
        }
);
        return;
      }
      try {
        performUpdate();
      }
 catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      RuntimeException e) {
        LOG.error(myTreeBuilder.getClass().getName(),e);
      }
    }
  }
);
}
