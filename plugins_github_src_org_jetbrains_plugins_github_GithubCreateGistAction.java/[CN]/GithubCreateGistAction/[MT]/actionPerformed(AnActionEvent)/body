{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null || project.isDefault()) {
    return;
  }
  final Editor editor=e.getData(PlatformDataKeys.EDITOR);
  final VirtualFile file=e.getData(PlatformDataKeys.VIRTUAL_FILE);
  final VirtualFile[] files=e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);
  if (editor == null && file == null && files == null) {
    return;
  }
  final GitHubCreateGistDialog dialog=new GitHubCreateGistDialog(project);
  dialog.show();
  if (!dialog.isOK()) {
    return;
  }
  final boolean anonymous=dialog.isAnonymous();
  GithubAuthData auth=null;
  if (!anonymous) {
    final AtomicReference<Boolean> success=new AtomicReference<Boolean>();
    final GithubAuthData validAuth=GithubUtil.getAuthData();
    ProgressManager.getInstance().run(new Task.Modal(project,"Access to GitHub",true){
      public void run(      @NotNull ProgressIndicator indicator){
        success.set(GithubUtil.makeValidAuthData(project,validAuth,indicator));
      }
    }
);
    if (!success.get()) {
      showError(project,FAILED_TO_CREATE_GIST,"You have to login to GitHub to create non-anonymous Gists.",null,null);
      return;
    }
    auth=validAuth;
  }
  createGistWithProgress(project,editor,file,files,auth,dialog.getDescription(),dialog.isPrivate(),new Consumer<String>(){
    @Override public void consume(    String url){
      if (url == null) {
        return;
      }
      if (dialog.isOpenInBrowser()) {
        BrowserUtil.launchBrowser(url);
      }
 else {
        showNotificationWithLink(project,url);
      }
    }
  }
);
}
