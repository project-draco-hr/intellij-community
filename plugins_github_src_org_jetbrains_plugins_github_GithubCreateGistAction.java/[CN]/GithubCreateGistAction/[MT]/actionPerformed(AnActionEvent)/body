{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null || project.isDefault()) {
    return;
  }
  final Editor editor=e.getData(PlatformDataKeys.EDITOR);
  final VirtualFile file=e.getData(PlatformDataKeys.VIRTUAL_FILE);
  final VirtualFile[] files=e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);
  if (editor == null && file == null && files == null) {
    return;
  }
  final GitHubCreateGistDialog dialog=new GitHubCreateGistDialog(project);
  dialog.show();
  if (!dialog.isOK()) {
    return;
  }
  GithubAuthData auth=null;
  if (!dialog.isAnonymous()) {
    final AtomicReference<GithubAuthData> authDataRef=new AtomicReference<GithubAuthData>();
    final AtomicReference<IOException> exceptionRef=new AtomicReference<IOException>();
    ProgressManager.getInstance().run(new Task.Modal(project,"Access to GitHub",true){
      public void run(      @NotNull ProgressIndicator indicator){
        try {
          authDataRef.set(GithubUtil.getValidAuthData(project,indicator));
        }
 catch (        IOException e) {
          exceptionRef.set(e);
        }
      }
    }
);
    if (authDataRef.get() == null) {
      showWarning(project,FAILED_TO_CREATE_GIST,"You have to login to GitHub to create non-anonymous Gists.");
      return;
    }
    if (exceptionRef.get() != null) {
      showError(project,FAILED_TO_CREATE_GIST,"You have to login to GitHub to create non-anonymous Gists.",null,exceptionRef.get());
      return;
    }
    auth=authDataRef.get();
  }
  createGistWithProgress(project,editor,file,files,auth,dialog.getDescription(),dialog.isPrivate(),new Consumer<String>(){
    @Override public void consume(    String url){
      if (url == null) {
        return;
      }
      if (dialog.isOpenInBrowser()) {
        BrowserUtil.launchBrowser(url);
      }
 else {
        showNotificationWithLink(project,url);
      }
    }
  }
);
}
