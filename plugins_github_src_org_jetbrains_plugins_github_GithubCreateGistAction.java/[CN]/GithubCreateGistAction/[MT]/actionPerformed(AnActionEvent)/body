{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null || project.isDefault()) {
    return;
  }
  final Editor editor=e.getData(PlatformDataKeys.EDITOR);
  final VirtualFile file=e.getData(PlatformDataKeys.VIRTUAL_FILE);
  final VirtualFile[] files=e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);
  if (editor == null && file == null && files == null) {
    return;
  }
  final GitHubCreateGistDialog dialog=new GitHubCreateGistDialog(project,editor,file);
  dialog.show();
  if (!dialog.isOK()) {
    return;
  }
  GithubAuthData auth=null;
  if (!dialog.isAnonymous()) {
    final Ref<GithubAuthData> authDataRef=new Ref<GithubAuthData>();
    ProgressManager.getInstance().run(new Task.Modal(project,"Access to GitHub",true){
      public void run(      @NotNull ProgressIndicator indicator){
        authDataRef.set(GithubUtil.getValidAuthDataFromConfig(project,indicator));
      }
    }
);
    if (authDataRef.isNull()) {
      GithubNotifications.showWarning(project,FAILED_TO_CREATE_GIST,"You have to login to GitHub to create non-anonymous Gists.");
      return;
    }
    auth=authDataRef.get();
  }
  final Ref<String> url=new Ref<String>();
  final GithubAuthData finalAuth=auth;
  new Task.Backgroundable(project,"Creating Gist"){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      List<NamedContent> contents=collectContents(project,editor,file,files);
      String gistUrl=createGist(project,finalAuth,contents,dialog.isPrivate(),dialog.getDescription(),dialog.getFileName());
      url.set(gistUrl);
    }
    @Override public void onSuccess(){
      if (url.isNull()) {
        return;
      }
      if (dialog.isOpenInBrowser()) {
        BrowserUtil.launchBrowser(url.get());
      }
 else {
        GithubNotifications.showInfoURL(project,"Gist Created Successfully","Your gist url",url.get());
      }
    }
  }
.queue();
}
