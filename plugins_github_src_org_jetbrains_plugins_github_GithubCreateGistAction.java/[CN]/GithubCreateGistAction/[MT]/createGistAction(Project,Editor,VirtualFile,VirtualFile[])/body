{
  final GithubCreateGistDialog dialog=new GithubCreateGistDialog(project,editor,files,file);
  dialog.show();
  if (!dialog.isOK()) {
    return;
  }
  GithubAuthData auth=GithubAuthData.createAnonymous();
  if (!dialog.isAnonymous()) {
    try {
      auth=getValidAuthData(project);
    }
 catch (    GithubAuthenticationCanceledException e) {
      return;
    }
catch (    IOException e) {
      GithubNotifications.showError(project,"Can't create gist",e);
      return;
    }
  }
  final Ref<String> url=new Ref<String>();
  final GithubAuthData finalAuth=auth;
  new Task.Backgroundable(project,"Creating Gist..."){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      List<FileContent> contents=collectContents(project,editor,file,files);
      String gistUrl=createGist(project,finalAuth,contents,dialog.isPrivate(),dialog.getDescription(),dialog.getFileName());
      url.set(gistUrl);
    }
    @Override public void onSuccess(){
      if (url.isNull()) {
        return;
      }
      if (dialog.isOpenInBrowser()) {
        BrowserUtil.launchBrowser(url.get());
      }
 else {
        GithubNotifications.showInfoURL(project,"Gist Created Successfully","Your gist url",url.get());
      }
    }
  }
.queue();
}
