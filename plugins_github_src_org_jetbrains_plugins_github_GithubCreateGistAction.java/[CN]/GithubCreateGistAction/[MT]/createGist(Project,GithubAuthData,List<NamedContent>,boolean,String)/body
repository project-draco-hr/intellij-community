{
  String requestBody=prepareJsonRequest(description,isPrivate,contents);
  try {
    JsonElement jsonElement;
    if (auth == null) {
      jsonElement=GithubApiUtil.postRequest(GithubApiUtil.getApiUrl(),"/gists",requestBody);
    }
 else {
      jsonElement=GithubApiUtil.postRequest(GithubApiUtil.getApiUrl(),auth,"/gists",requestBody);
    }
    if (jsonElement == null) {
      LOG.info("Null JSON response returned by GitHub");
      showError(project,"Failed to create gist","Empty JSON response returned by GitHub",null,null);
      return null;
    }
    if (!jsonElement.isJsonObject()) {
      LOG.error(String.format("Unexpected JSON result format: %s",jsonElement));
      return null;
    }
    JsonElement htmlUrl=jsonElement.getAsJsonObject().get("html_url");
    if (htmlUrl == null) {
      LOG.info("Invalid JSON response: " + jsonElement);
      showError(project,"Invalid GitHub response","No html_url property",jsonElement.toString(),null);
      return null;
    }
    return htmlUrl.getAsString();
  }
 catch (  IOException e) {
    LOG.info("Exception when creating a Gist",e);
    showError(project,"Failed to create gist","",null,e);
    return null;
  }
}
