{
  PsiCodeBlock body=method.getBody();
  if (body == null)   return Collections.emptyMap();
  ContractChecker checker=new ContractChecker(method,contract,onTheFly);
  PsiParameter[] parameters=method.getParameterList().getParameters();
  final DfaMemoryState initialState=checker.createMemoryState();
  final DfaValueFactory factory=checker.getFactory();
  for (int i=0; i < contract.arguments.length; i++) {
    MethodContract.ValueConstraint constraint=contract.arguments[i];
    DfaConstValue comparisonValue=constraint.getComparisonValue(factory);
    if (comparisonValue != null) {
      boolean negated=constraint.shouldUseNonEqComparison();
      DfaVariableValue dfaParam=factory.getVarFactory().createVariableValue(parameters[i],false);
      initialState.applyCondition(factory.getRelationFactory().createRelation(dfaParam,comparisonValue,JavaTokenType.EQEQ,negated));
    }
  }
  checker.analyzeMethod(body,new StandardInstructionVisitor(),ignoreAssertions,Arrays.asList(initialState));
  return checker.getErrors();
}
