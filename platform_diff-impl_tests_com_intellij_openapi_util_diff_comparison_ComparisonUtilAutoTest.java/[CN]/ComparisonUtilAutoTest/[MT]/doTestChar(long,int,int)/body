{
  myRng.setSeed(seed);
  ComparisonPolicy[] policies={ComparisonPolicy.DEFAULT,ComparisonPolicy.IGNORE_WHITESPACES};
  ComparisonPolicy policy=null;
  List<DiffFragment> fragments;
  for (int i=0; i < runs; i++) {
    if (i % 1000 == 0)     System.out.println(i);
    Document text1=null;
    Document text2=null;
    try {
      rememberSeed();
      text1=generateText(maxLength);
      text2=generateText(maxLength);
      for (      ComparisonPolicy comparisonPolicy : policies) {
        policy=comparisonPolicy;
        fragments=ComparisonUtil.compareChars(text1.getCharsSequence(),text2.getCharsSequence(),comparisonPolicy,INDICATOR);
        checkResultChar(text1.getCharsSequence(),text2.getCharsSequence(),fragments,comparisonPolicy);
      }
    }
 catch (    Throwable e) {
      System.out.println("Seed: " + seed);
      System.out.println("Runs: " + runs);
      System.out.println("MaxLength: " + maxLength);
      System.out.println("Policy: " + policy);
      System.out.println("I: " + i);
      System.out.println("Current seed: " + getLastSeed());
      System.out.println("Text1: " + normalize(text1));
      System.out.println("Text2: " + normalize(text2));
      if (e instanceof Error)       throw (Error)e;
      if (e instanceof Exception)       throw (Exception)e;
      throw new Exception(e);
    }
  }
}
