{
  ASTNode rBraceAtTheEnd=GeeseUtil.getClosureRBraceAtTheEnd(myChild1);
  if (myGroovySettings.USE_FLYING_GEESE_BRACES && myType2 == GroovyTokenTypes.mRCURLY && rBraceAtTheEnd != null) {
    String text=rBraceAtTheEnd.getTreeParent().getText();
    if (text.indexOf('\n') < 0) {
      myResult=Spacing.createSpacing(1,1,1,false,1);
    }
 else {
      myResult=Spacing.createSpacing(0,0,0,true,100,0);
    }
  }
 else   if (myType1 == GroovyTokenTypes.mLCURLY && myType2 == GroovyTokenTypes.mRCURLY) {
    createSpaceInCode(false);
  }
 else   if (myType1 == GroovyTokenTypes.mLCURLY && myType2 != GroovyElementTypes.PARAMETERS_LIST && myType2 != GroovyTokenTypes.mCLOSABLE_BLOCK_OP || myType2 == GroovyTokenTypes.mRCURLY) {
    boolean spacesWithinBraces=closure.getParent() instanceof GrStringInjection ? myGroovySettings.SPACE_WITHIN_GSTRING_INJECTION_BRACES : mySettings.SPACE_WITHIN_BRACES;
    createDependentLFSpacing(true,spacesWithinBraces,closure.getTextRange());
  }
 else   if (myType1 == GroovyTokenTypes.mCLOSABLE_BLOCK_OP) {
    myResult=GroovySpacingProcessorBasic.createDependentSpacingForClosure(mySettings,myGroovySettings,closure,true);
  }
 else   if (myType1 == GroovyTokenTypes.mLCURLY && (myType2 == GroovyElementTypes.PARAMETERS_LIST || myType2 == GroovyTokenTypes.mCLOSABLE_BLOCK_OP)) {
    boolean spacesWithinBraces=closure.getParent() instanceof GrStringInjection ? myGroovySettings.SPACE_WITHIN_GSTRING_INJECTION_BRACES : mySettings.SPACE_WITHIN_BRACES;
    createSpaceInCode(spacesWithinBraces);
  }
}
