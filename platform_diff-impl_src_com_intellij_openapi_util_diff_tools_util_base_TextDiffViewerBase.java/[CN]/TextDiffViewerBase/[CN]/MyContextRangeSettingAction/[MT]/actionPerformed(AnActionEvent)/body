{
  final int[] modes=TextDiffSettings.CONTEXT_RANGE_MODES;
  String[] modeLabels=TextDiffSettings.CONTEXT_RANGE_MODE_LABELS;
  Dictionary<Integer,JLabel> sliderLabels=new Hashtable<Integer,JLabel>();
  for (int i=0; i < modes.length; i++) {
    sliderLabels.put(i,new JLabel(modeLabels[i]));
  }
  JPanel result=new JPanel(new BorderLayout());
  JLabel label=new JLabel("Context Lines:");
  label.setBorder(BorderFactory.createEmptyBorder(4,4,0,0));
  JPanel wrapper=new JPanel(new BorderLayout());
  wrapper.add(label,BorderLayout.NORTH);
  result.add(wrapper,BorderLayout.WEST);
  final JSlider slider=new JSlider(SwingConstants.HORIZONTAL,0,modes.length - 1,0);
  slider.setMinorTickSpacing(1);
  slider.setPaintTicks(true);
  slider.setPaintTrack(true);
  slider.setSnapToTicks(true);
  UIUtil.setSliderIsFilled(slider,true);
  slider.setPaintLabels(true);
  slider.setLabelTable(sliderLabels);
  result.add(slider,BorderLayout.CENTER);
  for (int i=0; i < modes.length; i++) {
    int mark=modes[i];
    if (mark == getTextSettings().getContextRange()) {
      slider.setValue(i);
    }
  }
  JBPopup popup=JBPopupFactory.getInstance().createComponentPopupBuilder(result,slider).createPopup();
  popup.setFinalRunnable(new Runnable(){
    @Override public void run(){
      int value=slider.getModel().getValue();
      if (getTextSettings().getContextRange() != modes[value]) {
        getTextSettings().setContextRange(modes[value]);
        rediff();
      }
    }
  }
);
  if (e.getInputEvent() instanceof MouseEvent) {
    MouseEvent inputEvent=((MouseEvent)e.getInputEvent());
    int width=result.getPreferredSize().width;
    Point point=new Point(inputEvent.getX() - width / 2,inputEvent.getY());
    RelativePoint absPoint=new RelativePoint(inputEvent.getComponent(),point);
    popup.show(absPoint);
  }
 else {
    popup.showInBestPositionFor(e.getDataContext());
  }
}
