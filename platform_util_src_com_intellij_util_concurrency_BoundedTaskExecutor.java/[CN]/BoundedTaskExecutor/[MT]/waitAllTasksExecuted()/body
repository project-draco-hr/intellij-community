{
  final CountDownLatch started=new CountDownLatch(myMaxTasks);
  final CountDownLatch readyToFinish=new CountDownLatch(1);
  List<Future> futures=ContainerUtil.map(Collections.nCopies(myMaxTasks,null),new Function<Object,Future>(){
    @Override public Future fun(    Object o){
      return submit(new Runnable(){
        @Override public void run(){
          try {
            started.countDown();
            readyToFinish.await();
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
      }
);
    }
  }
);
  try {
    started.await();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  readyToFinish.countDown();
  for (  Future future : futures) {
    future.get();
  }
}
