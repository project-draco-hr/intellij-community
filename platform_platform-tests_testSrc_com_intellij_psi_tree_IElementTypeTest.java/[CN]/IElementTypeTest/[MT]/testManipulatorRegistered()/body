{
  LanguageExtensionPoint[] extensions=Extensions.getExtensions(new ExtensionPointName<LanguageExtensionPoint>("com.intellij.lang.parserDefinition"));
  Set<String> classes=new HashSet<String>();
  List<String> failures=new ArrayList<String>();
  int total=0;
  for (  LanguageExtensionPoint e : extensions) {
    ParserDefinition definition=(ParserDefinition)e.getInstance();
    for (    IElementType type : IElementType.enumerate(IElementType.TRUE)) {
      if (type instanceof ILeafElementType)       continue;
      try {
        CompositeElement treeElement=ASTFactory.composite(type);
        total++;
        PsiElement element=treeElement instanceof PsiElement ? (PsiElement)treeElement : definition.createElement(treeElement);
        if (element instanceof PsiLanguageInjectionHost && classes.add(element.getClass().getName())) {
          boolean ok=ElementManipulators.getManipulator(element) != null;
          System.out.println((ok ? "OK  " : "FAIL") + " " + element.getClass().getSimpleName()+ " ["+ definition.getClass().getSimpleName()+ "]");
          if (!ok)           failures.add(element.getClass().getName());
        }
      }
 catch (      Throwable ignored) {
      }
    }
  }
  System.out.println("count: " + classes.size() + ", total: "+ total);
  assertEmpty("PsiLanguageInjectionHost requires " + ElementManipulators.EP_NAME,failures);
}
