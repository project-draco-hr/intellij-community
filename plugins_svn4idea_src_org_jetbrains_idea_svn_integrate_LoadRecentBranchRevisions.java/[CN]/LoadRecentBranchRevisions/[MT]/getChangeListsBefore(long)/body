{
  ChangeBrowserSettings settings=new ChangeBrowserSettings();
  if (revision > 0) {
    settings.CHANGE_BEFORE=String.valueOf(revision);
    settings.USE_CHANGE_BEFORE_FILTER=true;
  }
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  ProgressManager.progress2(SvnBundle.message("progress.text2.collecting.history",myMergeContext.getSourceUrl() + (revision > 0 ? ("@" + revision) : "")));
  final List<Pair<SvnChangeList,LogHierarchyNode>> result=ContainerUtil.newArrayList();
  ((SvnCommittedChangesProvider)myMergeContext.getVcs().getCommittedChangesProvider()).getCommittedChangesWithMergedRevisons(settings,new SvnRepositoryLocation(myMergeContext.getSourceUrl()),myBunchSize + (revision > 0 ? 2 : 1),new PairConsumer<SvnChangeList,LogHierarchyNode>(){
    public void consume(    SvnChangeList svnList,    LogHierarchyNode tree){
      indicator.setText2(SvnBundle.message("progress.text2.processing.revision",svnList.getNumber()));
      result.add(Pair.create(svnList,tree));
    }
  }
);
  return result;
}
