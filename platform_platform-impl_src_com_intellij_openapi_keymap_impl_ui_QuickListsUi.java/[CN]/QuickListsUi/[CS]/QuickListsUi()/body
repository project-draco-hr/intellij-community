{
  keymapListener=ApplicationManager.getApplication().getMessageBus().syncPublisher(KeymapListener.CHANGE_TOPIC);
  final CardLayout cardLayout=new CardLayout();
  editor.getList().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      QuickList item=editor.getSelected();
      if (item == null) {
        cardLayout.show(itemPanelWrapper,EMPTY);
        itemPanel.setItem(null);
      }
 else {
        cardLayout.show(itemPanelWrapper,PANEL);
        itemPanel.setItem(editor.getMutable(item));
      }
    }
  }
);
  itemPanel=new QuickListPanel(editor.getModel());
  itemPanel.myDisplayName.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      QuickList item=itemPanel.item;
      if (item != null) {
        String name=itemPanel.myDisplayName.getText();
        boolean changed=!item.getName().equals(name);
        item.setName(name);
        if (changed) {
          editor.getList().repaint();
        }
      }
    }
  }
);
  itemPanelWrapper=new JPanel(cardLayout);
  JLabel descLabel=new JLabel("<html>Quick Lists allow you to define commonly used groups of actions (for example, refactoring or VCS actions)" + " and to assign keyboard shortcuts to such groups.</html>");
  descLabel.setBorder(new EmptyBorder(0,25,0,25));
  itemPanelWrapper.add(descLabel,EMPTY);
  itemPanelWrapper.add(itemPanel.getPanel(),PANEL);
  Splitter splitter=new Splitter(false,0.3f);
  splitter.setFirstComponent(editor.createComponent());
  splitter.setSecondComponent(itemPanelWrapper);
  component=splitter;
}
