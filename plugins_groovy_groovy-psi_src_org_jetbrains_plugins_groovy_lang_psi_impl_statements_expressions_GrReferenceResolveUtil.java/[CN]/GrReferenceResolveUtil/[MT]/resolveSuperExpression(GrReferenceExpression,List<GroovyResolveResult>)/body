{
  GrExpression qualifier=ref.getQualifier();
  PsiClass aClass;
  if (qualifier == null) {
    final PsiElement parent=ref.getParent();
    if (parent instanceof GrConstructorInvocation) {
      GroovyResolveResult[] res=((GrConstructorInvocation)parent).multiResolve(false);
      ContainerUtil.addAll(results,res);
      return true;
    }
    aClass=PsiUtil.getContextClass(ref);
    if (aClass == null)     return false;
  }
 else {
    if (!(qualifier instanceof GrReferenceExpression))     return false;
    GroovyResolveResult result=((GrReferenceExpression)qualifier).advancedResolve();
    PsiElement resolved=result.getElement();
    if (!(resolved instanceof PsiClass))     return false;
    aClass=(PsiClass)resolved;
    GrTypeDefinition scopeClass=PsiTreeUtil.getParentOfType(ref,GrTypeDefinition.class,true);
    if (GrTraitUtil.isTrait(aClass) && scopeClass != null && PsiUtil.scopeClassImplementsTrait(aClass,ref)) {
      PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(aClass,scopeClass,PsiSubstitutor.EMPTY);
      results.add(new GroovyResolveResultImpl(aClass,null,null,superClassSubstitutor,true,true));
      return true;
    }
    if (!PsiUtil.hasEnclosingInstanceInScope((PsiClass)resolved,ref,false))     return false;
  }
  PsiClass superClass=aClass.getSuperClass();
  if (superClass == null)   return true;
  PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(superClass,aClass,PsiSubstitutor.EMPTY);
  results.add(new GroovyResolveResultImpl(superClass,null,null,superClassSubstitutor,true,true));
  return true;
}
