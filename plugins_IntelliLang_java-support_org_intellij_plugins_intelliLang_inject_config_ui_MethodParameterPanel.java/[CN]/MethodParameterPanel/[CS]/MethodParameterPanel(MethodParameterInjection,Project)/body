{
  super(injection,project);
  $$$setupUI$$$();
  myClassField=new ReferenceEditorWithBrowseButton(new BrowseClassListener(project),project,new Function<String,Document>(){
    public Document fun(    String s){
      final Document document=PsiUtilEx.createDocument(s,project);
      document.addDocumentListener(new DocumentAdapter(){
        @Override public void documentChanged(        final DocumentEvent e){
          updateParamTree();
          updateTree();
        }
      }
);
      return document;
    }
  }
,"");
  myClassPanel.add(myClassField,BorderLayout.CENTER);
  myParamsTable.getTree().setShowsRootHandles(true);
  myParamsTable.getTree().setCellRenderer(new ColoredTreeCellRenderer(){
    public void customizeCellRenderer(    @NotNull JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      final Object o=((DefaultMutableTreeNode)value).getUserObject();
      setIcon(o instanceof PsiMethod ? PlatformIcons.METHOD_ICON : o instanceof PsiParameter ? PlatformIcons.PARAMETER_ICON : null);
      final String name;
      if (o instanceof PsiMethod) {
        name=PsiFormatUtil.formatMethod((PsiMethod)o,PsiSubstitutor.EMPTY,PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_PARAMETERS,PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_TYPE);
      }
 else       if (o instanceof PsiParameter) {
        name=PsiFormatUtil.formatVariable((PsiParameter)o,PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_TYPE,PsiSubstitutor.EMPTY);
      }
 else       name=null;
      final boolean missing=o instanceof PsiElement && !((PsiElement)o).isPhysical();
      if (name != null) {
        append(name,missing ? SimpleTextAttributes.ERROR_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES);
      }
    }
  }
);
  init(injection.copy());
  new TreeTableSpeedSearch(myParamsTable,new Convertor<TreePath,String>(){
    @Nullable public String convert(    final TreePath o){
      final Object userObject=((DefaultMutableTreeNode)o.getLastPathComponent()).getUserObject();
      return userObject instanceof PsiNamedElement ? ((PsiNamedElement)userObject).getName() : null;
    }
  }
);
  new AnAction("Toggle"){
    @Override public void actionPerformed(    final AnActionEvent e){
      performToggleAction();
    }
  }
.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0)),myParamsTable);
}
