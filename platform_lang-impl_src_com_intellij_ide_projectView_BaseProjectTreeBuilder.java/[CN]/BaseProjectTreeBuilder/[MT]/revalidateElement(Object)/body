{
  final AsyncResult<Object> result=new AsyncResult<Object>();
  if (element instanceof AbstractTreeNode) {
    AbstractTreeNode node=(AbstractTreeNode)element;
    final Object value=node.getValue();
    final ActionCallback callback=new ActionCallback();
    final VirtualFile virtualFile=PsiUtilCore.getVirtualFile(ObjectUtils.tryCast(value,PsiElement.class));
    final FocusRequestor focusRequestor=IdeFocusManager.getInstance(myProject).getFurtherRequestor();
    batch(new Progressive(){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        final Ref<Object> target=new Ref<Object>();
        _select(value,virtualFile,false,Conditions.<AbstractTreeNode>alwaysTrue(),callback,indicator,target,focusRequestor,false);
        callback.doWhenDone(new Runnable(){
          @Override public void run(){
            result.setDone(target.get());
          }
        }
).doWhenRejected(new Runnable(){
          @Override public void run(){
            result.setRejected();
          }
        }
);
      }
    }
);
  }
 else {
    result.setRejected();
  }
  return result;
}
