{
  TextBuffer buf=new TextBuffer();
  if (anonymous) {
    ClassNode child=DecompilerContext.getClassProcessor().getMapRootClasses().get(newType.value);
    if (!enumConst) {
      String enclosing=null;
      if (!lambda && constructor != null) {
        enclosing=getQualifiedNewInstance(child.anonymousClassType.value,constructor.getLstParameters(),indent,tracer);
        if (enclosing != null) {
          buf.append(enclosing).append('.');
        }
      }
      buf.append("new ");
      String typename=ExprProcessor.getCastTypeName(child.anonymousClassType);
      if (enclosing != null) {
        ClassNode anonymousNode=DecompilerContext.getClassProcessor().getMapRootClasses().get(child.anonymousClassType.value);
        if (anonymousNode != null) {
          typename=anonymousNode.simpleName;
        }
 else {
          typename=typename.substring(typename.lastIndexOf('.') + 1);
        }
      }
      buf.append(typename);
    }
    buf.append('(');
    if (!lambda && constructor != null) {
      InvocationExprent invSuper=child.superInvocation;
      ClassNode newNode=DecompilerContext.getClassProcessor().getMapRootClasses().get(invSuper.getClassname());
      List<VarVersionPair> sigFields=null;
      if (newNode != null) {
        if (newNode.getWrapper() != null) {
          sigFields=newNode.getWrapper().getMethodWrapper(CodeConstants.INIT_NAME,invSuper.getStringDescriptor()).signatureFields;
        }
 else {
          if (newNode.type == ClassNode.CLASS_MEMBER && (newNode.access & CodeConstants.ACC_STATIC) == 0 && !constructor.getLstParameters().isEmpty()) {
            sigFields=new ArrayList<>(Collections.nCopies(constructor.getLstParameters().size(),(VarVersionPair)null));
            sigFields.set(0,new VarVersionPair(-1,0));
          }
        }
      }
      boolean firstParam=true;
      int start=0, end=invSuper.getLstParameters().size();
      if (enumConst) {
        start+=2;
        end-=1;
      }
      for (int i=start; i < end; i++) {
        if (sigFields == null || sigFields.get(i) == null) {
          if (!firstParam) {
            buf.append(", ");
          }
          Exprent param=invSuper.getLstParameters().get(i);
          if (param.type == Exprent.EXPRENT_VAR) {
            int varIndex=((VarExprent)param).getIndex();
            if (varIndex > 0 && varIndex <= constructor.getLstParameters().size()) {
              param=constructor.getLstParameters().get(varIndex - 1);
            }
          }
          ExprProcessor.getCastedExprent(param,invSuper.getDescriptor().params[i],buf,indent,true,tracer);
          firstParam=false;
        }
      }
    }
    buf.append(')');
    if (enumConst && buf.length() == 2) {
      buf.setLength(0);
    }
    if (lambda) {
      if (!DecompilerContext.getOption(IFernflowerPreferences.LAMBDA_TO_ANONYMOUS_CLASS)) {
        buf.setLength(0);
      }
      Exprent methodObject=constructor == null ? null : constructor.getInstance();
      TextBuffer clsBuf=new TextBuffer();
      new ClassWriter().classLambdaToJava(child,clsBuf,methodObject,indent,tracer);
      buf.append(clsBuf);
      tracer.incrementCurrentSourceLine(clsBuf.countLines());
    }
 else {
      TextBuffer clsBuf=new TextBuffer();
      new ClassWriter().classToJava(child,clsBuf,indent,tracer);
      buf.append(clsBuf);
      tracer.incrementCurrentSourceLine(clsBuf.countLines());
    }
  }
 else   if (directArrayInit) {
    VarType leftType=newType.decreaseArrayDim();
    buf.append('{');
    for (int i=0; i < lstArrayElements.size(); i++) {
      if (i > 0) {
        buf.append(", ");
      }
      ExprProcessor.getCastedExprent(lstArrayElements.get(i),leftType,buf,indent,false,tracer);
    }
    buf.append('}');
  }
 else   if (newType.arrayDim == 0) {
    if (!enumConst) {
      String enclosing=null;
      if (constructor != null) {
        enclosing=getQualifiedNewInstance(newType.value,constructor.getLstParameters(),indent,tracer);
        if (enclosing != null) {
          buf.append(enclosing).append('.');
        }
      }
      buf.append("new ");
      String typename=ExprProcessor.getTypeName(newType);
      if (enclosing != null) {
        ClassNode newNode=DecompilerContext.getClassProcessor().getMapRootClasses().get(newType.value);
        if (newNode != null) {
          typename=newNode.simpleName;
        }
 else {
          typename=typename.substring(typename.lastIndexOf('.') + 1);
        }
      }
      buf.append(typename);
    }
    if (constructor != null) {
      List<Exprent> lstParameters=constructor.getLstParameters();
      ClassNode newNode=DecompilerContext.getClassProcessor().getMapRootClasses().get(constructor.getClassname());
      List<VarVersionPair> sigFields=null;
      if (newNode != null) {
        if (newNode.getWrapper() != null) {
          sigFields=newNode.getWrapper().getMethodWrapper(CodeConstants.INIT_NAME,constructor.getStringDescriptor()).signatureFields;
        }
 else         if (newNode.type == ClassNode.CLASS_MEMBER && (newNode.access & CodeConstants.ACC_STATIC) == 0 && !constructor.getLstParameters().isEmpty()) {
          sigFields=new ArrayList<>(Collections.nCopies(lstParameters.size(),(VarVersionPair)null));
          sigFields.set(0,new VarVersionPair(-1,0));
        }
      }
      int start=enumConst ? 2 : 0;
      if (!enumConst || start < lstParameters.size()) {
        buf.append('(');
        boolean firstParam=true;
        for (int i=start; i < lstParameters.size(); i++) {
          if (sigFields == null || sigFields.get(i) == null) {
            Exprent expr=lstParameters.get(i);
            VarType leftType=constructor.getDescriptor().params[i];
            if (i == lstParameters.size() - 1 && expr.getExprType() == VarType.VARTYPE_NULL) {
              ClassNode node=DecompilerContext.getClassProcessor().getMapRootClasses().get(leftType.value);
              if (node != null && node.namelessConstructorStub) {
                break;
              }
            }
            if (!firstParam) {
              buf.append(", ");
            }
            ExprProcessor.getCastedExprent(expr,leftType,buf,indent,true,tracer);
            firstParam=false;
          }
        }
        buf.append(')');
      }
    }
  }
 else {
    buf.append("new ").append(ExprProcessor.getTypeName(newType));
    if (lstArrayElements.isEmpty()) {
      for (int i=0; i < newType.arrayDim; i++) {
        buf.append('[');
        if (i < lstDims.size()) {
          buf.append(lstDims.get(i).toJava(indent,tracer));
        }
        buf.append(']');
      }
    }
 else {
      for (int i=0; i < newType.arrayDim; i++) {
        buf.append("[]");
      }
      VarType leftType=newType.decreaseArrayDim();
      buf.append('{');
      for (int i=0; i < lstArrayElements.size(); i++) {
        if (i > 0) {
          buf.append(", ");
        }
        ExprProcessor.getCastedExprent(lstArrayElements.get(i),leftType,buf,indent,false,tracer);
      }
      buf.append('}');
    }
  }
  return buf;
}
