{
  TextBuffer buf=new TextBuffer();
  if (anonymous) {
    ClassNode child=DecompilerContext.getClassProcessor().getMapRootClasses().get(newType.value);
    buf.append("(");
    if (!lambda && constructor != null) {
      InvocationExprent invsuper=child.superInvocation;
      ClassNode newnode=DecompilerContext.getClassProcessor().getMapRootClasses().get(invsuper.getClassname());
      List<VarVersionPaar> sigFields=null;
      if (newnode != null) {
        if (newnode.wrapper != null) {
          sigFields=newnode.wrapper.getMethodWrapper("<init>",invsuper.getStringDescriptor()).signatureFields;
        }
 else {
          if (newnode.type == ClassNode.CLASS_MEMBER && (newnode.access & CodeConstants.ACC_STATIC) == 0 && !constructor.getLstParameters().isEmpty()) {
            sigFields=new ArrayList<VarVersionPaar>(Collections.nCopies(constructor.getLstParameters().size(),(VarVersionPaar)null));
            sigFields.set(0,new VarVersionPaar(-1,0));
          }
        }
      }
      boolean firstpar=true;
      int start=0, end=invsuper.getLstParameters().size();
      if (enumConst) {
        start+=2;
        end-=1;
      }
      for (int i=start; i < end; i++) {
        if (sigFields == null || sigFields.get(i) == null) {
          if (!firstpar) {
            buf.append(", ");
          }
          Exprent param=invsuper.getLstParameters().get(i);
          if (param.type == Exprent.EXPRENT_VAR) {
            int varindex=((VarExprent)param).getIndex();
            if (varindex > 0 && varindex <= constructor.getLstParameters().size()) {
              param=constructor.getLstParameters().get(varindex - 1);
            }
          }
          TextBuffer buff=new TextBuffer();
          ExprProcessor.getCastedExprent(param,invsuper.getDescriptor().params[i],buff,indent,true,tracer);
          buf.append(buff);
          firstpar=false;
        }
      }
    }
    if (!enumConst) {
      String enclosing=null;
      if (!lambda && constructor != null) {
        enclosing=getQualifiedNewInstance(child.anonymousClassType.value,constructor.getLstParameters(),indent,tracer);
      }
      String typename=ExprProcessor.getCastTypeName(child.anonymousClassType);
      if (enclosing != null) {
        ClassNode anonimousNode=DecompilerContext.getClassProcessor().getMapRootClasses().get(child.anonymousClassType.value);
        if (anonimousNode != null) {
          typename=anonimousNode.simpleName;
        }
 else {
          typename=typename.substring(typename.lastIndexOf('.') + 1);
        }
      }
      buf.prepend("new " + typename);
      if (enclosing != null) {
        buf.prepend(enclosing + ".");
      }
    }
    buf.append(")");
    if (enumConst && buf.length() == 2) {
      buf.setLength(0);
    }
    if (lambda) {
      if (!DecompilerContext.getOption(IFernflowerPreferences.LAMBDA_TO_ANONYMOUS_CLASS)) {
        buf.setLength(0);
      }
      Exprent methodObject=constructor == null ? null : constructor.getInstance();
      new ClassWriter().classLambdaToJava(child,buf,methodObject,indent);
      tracer.incrementCurrentSourceLine(buf.countLines());
    }
 else {
      new ClassWriter().classToJava(child,buf,indent,tracer);
      tracer.incrementCurrentSourceLine(buf.countLines());
    }
  }
 else   if (directArrayInit) {
    VarType leftType=newType.decreaseArrayDim();
    buf.append("{");
    for (int i=0; i < lstArrayElements.size(); i++) {
      if (i > 0) {
        buf.append(", ");
      }
      ExprProcessor.getCastedExprent(lstArrayElements.get(i),leftType,buf,indent,false,tracer);
    }
    buf.append("}");
  }
 else {
    if (newType.arrayDim == 0) {
      if (constructor != null) {
        List<Exprent> lstParameters=constructor.getLstParameters();
        ClassNode newnode=DecompilerContext.getClassProcessor().getMapRootClasses().get(constructor.getClassname());
        List<VarVersionPaar> sigFields=null;
        if (newnode != null) {
          if (newnode.wrapper != null) {
            sigFields=newnode.wrapper.getMethodWrapper("<init>",constructor.getStringDescriptor()).signatureFields;
          }
 else {
            if (newnode.type == ClassNode.CLASS_MEMBER && (newnode.access & CodeConstants.ACC_STATIC) == 0 && !constructor.getLstParameters().isEmpty()) {
              sigFields=new ArrayList<VarVersionPaar>(Collections.nCopies(lstParameters.size(),(VarVersionPaar)null));
              sigFields.set(0,new VarVersionPaar(-1,0));
            }
          }
        }
        int start=enumConst ? 2 : 0;
        if (!enumConst || start < lstParameters.size()) {
          buf.append("(");
          boolean firstParam=true;
          for (int i=start; i < lstParameters.size(); i++) {
            if (sigFields == null || sigFields.get(i) == null) {
              Exprent expr=lstParameters.get(i);
              VarType leftType=constructor.getDescriptor().params[i];
              if (i == lstParameters.size() - 1 && expr.getExprType() == VarType.VARTYPE_NULL) {
                ClassNode node=DecompilerContext.getClassProcessor().getMapRootClasses().get(leftType.value);
                if (node != null && node.namelessConstructorStub) {
                  break;
                }
              }
              if (!firstParam) {
                buf.append(", ");
              }
              TextBuffer buff=new TextBuffer();
              ExprProcessor.getCastedExprent(expr,leftType,buff,indent,true,tracer);
              buf.append(buff);
              firstParam=false;
            }
          }
          buf.append(")");
        }
      }
      if (!enumConst) {
        String enclosing=null;
        if (constructor != null) {
          enclosing=getQualifiedNewInstance(newType.value,constructor.getLstParameters(),indent,tracer);
        }
        String typename=ExprProcessor.getTypeName(newType);
        if (enclosing != null) {
          ClassNode newNode=DecompilerContext.getClassProcessor().getMapRootClasses().get(newType.value);
          if (newNode != null) {
            typename=newNode.simpleName;
          }
 else {
            typename=typename.substring(typename.lastIndexOf('.') + 1);
          }
        }
        buf.prepend("new " + typename);
        if (enclosing != null) {
          buf.prepend(enclosing + ".");
        }
      }
    }
 else {
      buf.append("new ").append(ExprProcessor.getTypeName(newType));
      if (lstArrayElements.isEmpty()) {
        for (int i=0; i < newType.arrayDim; i++) {
          buf.append("[");
          if (i < lstDims.size()) {
            buf.append(lstDims.get(i).toJava(indent,tracer));
          }
          buf.append("]");
        }
      }
 else {
        for (int i=0; i < newType.arrayDim; i++) {
          buf.append("[]");
        }
        VarType leftType=newType.decreaseArrayDim();
        buf.append("{");
        for (int i=0; i < lstArrayElements.size(); i++) {
          if (i > 0) {
            buf.append(", ");
          }
          TextBuffer buff=new TextBuffer();
          ExprProcessor.getCastedExprent(lstArrayElements.get(i),leftType,buff,indent,false,tracer);
          buf.append(buff);
        }
        buf.append("}");
      }
    }
  }
  return buf;
}
