{
  _scriptTextField.setText(s.SCRIPT_NAME);
  _parametersTextField.setText(s.PARAMETERS);
  _workingDirectoryTextField.setText(s.WORKING_DIRECTORY);
  myInterpreterOptionsField.setText(s.INTERPRETER_OPTIONS);
  FileChooserDescriptor chooserDescriptor=new FileChooserDescriptor(true,false,false,false,false,false){
    public boolean isFileVisible(    VirtualFile file,    boolean showHiddenFiles){
      return file.isDirectory() || Comparing.equal(file.getExtension(),"py");
    }
  }
;
  ComponentWithBrowseButton.BrowseFolderActionListener<JTextField> listener=new ComponentWithBrowseButton.BrowseFolderActionListener<JTextField>("Select Script","",_scriptTextField,s.getProject(),chooserDescriptor,TextComponentAccessor.TEXT_FIELD_WHOLE_TEXT){
    protected void onFileChoosen(    VirtualFile chosenFile){
      super.onFileChoosen(chosenFile);
      _workingDirectoryTextField.setText(chosenFile.getParent().getPath());
    }
  }
;
  _scriptTextField.addActionListener(listener);
  _workingDirectoryTextField.addBrowseFolderListener("Select Working Directory","",s.getProject(),new FileChooserDescriptor(false,true,false,false,false,false));
  _envsComponent.setEnvs(s.getEnvs());
  _envsComponent.setPassParentEnvs(s.PASS_PARENT_ENVS);
  List<Sdk> sdkList=new ArrayList<Sdk>();
  sdkList.add(null);
  final List<Sdk> allSdks=PythonSdkType.getAllSdks();
  Sdk selection=null;
  for (  Sdk sdk : allSdks) {
    if (FileUtil.pathsEqual(sdk.getHomePath(),s.SDK_HOME)) {
      selection=sdk;
      break;
    }
  }
  sdkList.addAll(allSdks);
  myInterpreterComboBox.setModel(new CollectionComboBoxModel(sdkList,selection));
  myInterpreterComboBox.setRenderer(new SdkListCellRenderer("<Project Default>"));
}
