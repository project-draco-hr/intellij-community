{
  final FindProgressIndicator progress=new FindProgressIndicator(project,config.getMatchOptions().getScope().getDisplayName()){
    public void cancel(){
      stopAsyncSearch();
      super.cancel();
    }
  }
;
  final Runnable findUsagesRunnable2=new Runnable(){
    public void run(){
      DoSearchAction.execute(project,new MatchResultSink(){
        public void setMatchingProcess(        MatchingProcess _process){
          process=_process;
          findStarted();
        }
        public void processFile(        PsiFile element){
          progress.setText("Looking in " + element.getVirtualFile().getPresentableName());
        }
        public void matchingFinished(){
          consumer.findUsagesCompleted();
          findEnded();
          progress.setText("Found " + consumer.getCount() + " occurences");
        }
        public ProgressIndicator getProgressIndicator(){
          return progress;
        }
        public void newMatch(        MatchResult result){
          UsageInfo info;
          if (MatchResult.MULTI_LINE_MATCH.equals(result.getName())) {
            int start=-1;
            int end=-1;
            PsiElement parent=result.getMatchRef().getElement().getParent();
            for (Iterator i=((MatchResultImpl)result).getMatches().iterator(); i.hasNext(); ) {
              PsiElement el=((MatchResult)i.next()).getMatchRef().getElement();
              if (start == -1 || start > el.getTextOffset()) {
                start=el.getTextOffset();
              }
              final int newend=el.getTextOffset() + el.getTextLength();
              if (newend > end) {
                end=newend;
              }
            }
            info=new UsageInfo(parent,start - parent.getTextOffset(),end - parent.getTextOffset());
          }
 else {
            PsiElement element=result.getMatch();
            info=new UsageInfo(element,result.getStart(),result.getEnd() == -1 ? element.getTextLength() : result.getEnd());
          }
          consumer.foundUsage(info);
          foundUsage(result,info);
        }
      }
,config);
    }
  }
;
  final Runnable findUsagesRunnable=new Runnable(){
    public void run(){
      SwingUtilities.invokeLater(findUsagesRunnable2);
synchronized (SearchCommand.this) {
        try {
          SearchCommand.this.wait(0);
        }
 catch (        InterruptedException ex) {
        }
      }
    }
  }
;
  Runnable endSearchRunnable=new Runnable(){
    public void run(){
      if (consumer.getCount() == 0) {
        if (!progress.isCanceled()) {
          int option=Messages.showDialog(project,"No occurrences found in " + config.getMatchOptions().getScope().getDisplayName(),"Information",new String[]{"OK","Edit &Query"},0,Messages.getInformationIcon());
          if (option == 1) {
            UIUtil.invokeActionAnotherTime(config,mySearchContext);
          }
        }
      }
    }
  }
;
  FindInProjectUtil.runProcessWithProgress(progress,findUsagesRunnable,endSearchRunnable,project);
}
