{
  final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  DoSearchAction.execute(project,new MatchResultSink(){
    int count;
    public void setMatchingProcess(    MatchingProcess _process){
      process=_process;
      findStarted();
    }
    public void processFile(    PsiFile element){
      final VirtualFile virtualFile=element.getVirtualFile();
      if (virtualFile != null)       progress.setText(SSRBundle.message("looking.in.progress.message",virtualFile.getPresentableName()));
    }
    public void matchingFinished(){
      findEnded();
      progress.setText(SSRBundle.message("found.progress.message",count));
    }
    public ProgressIndicator getProgressIndicator(){
      return progress;
    }
    public void newMatch(    MatchResult result){
      UsageInfo info;
      if (MatchResult.MULTI_LINE_MATCH.equals(result.getName())) {
        int start=-1;
        int end=-1;
        PsiElement parent=result.getMatchRef().getElement().getParent();
        for (Iterator i=((MatchResultImpl)result).getMatches().iterator(); i.hasNext(); ) {
          PsiElement el=((MatchResult)i.next()).getMatchRef().getElement();
          if (start == -1 || start > el.getTextOffset()) {
            start=el.getTextOffset();
          }
          final int newend=el.getTextOffset() + el.getTextLength();
          if (newend > end) {
            end=newend;
          }
        }
        info=new UsageInfo(parent,start - parent.getTextOffset(),end - parent.getTextOffset());
      }
 else {
        PsiElement element=result.getMatch();
        info=new UsageInfo(element,result.getStart(),result.getEnd() == -1 ? element.getTextLength() : result.getEnd());
      }
      Usage usage=new UsageInfo2UsageAdapter(info);
      processor.process(usage);
      foundUsage(result,usage);
      ++count;
    }
  }
,context.getConfiguration());
}
