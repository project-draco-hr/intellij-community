{
  final PermanentCommitsInfo<CommitId> commitsInfo=myDelegateInfo.getPermanentCommitsInfo();
  return new PermanentCommitsInfo<CommitId>(){
    @NotNull @Override public CommitId getCommitId(    int nodeId){
      if (nodeId < 0)       return commitsInfo.getCommitId(nodeId);
      return commitsInfo.getCommitId(myBekIntMap.getUsualIndex(nodeId));
    }
    @Override public long getTimestamp(    int nodeId){
      if (nodeId < 0)       return commitsInfo.getTimestamp(nodeId);
      return commitsInfo.getTimestamp(myBekIntMap.getUsualIndex(nodeId));
    }
    @Override public int getNodeId(    @NotNull CommitId commitId){
      int nodeId=commitsInfo.getNodeId(commitId);
      if (nodeId < 0)       return nodeId;
      return myBekIntMap.getBekIndex(nodeId);
    }
    @NotNull @Override public Set<Integer> convertToNodeIds(    @NotNull Collection<CommitId> heads){
      Set<Integer> nodeIds=commitsInfo.convertToNodeIds(heads);
      return ContainerUtil.map2Set(nodeIds,new Function<Integer,Integer>(){
        @Override public Integer fun(        Integer nodeId){
          if (nodeId < 0)           return nodeId;
          return myBekIntMap.getBekIndex(nodeId);
        }
      }
);
    }
  }
;
}
