{
  StringBuffer buf=new StringBuffer();
  JUnit5TestExecutionListener executionListener=new JUnit5TestExecutionListener(new PrintStream(new OutputStream(){
    @Override public void write(    int b) throws IOException {
      buf.append(new String(new byte[]{(byte)b}));
    }
  }
)){
    @Override protected long getDuration(){
      return 0;
    }
    @Override protected String getTrace(    Throwable ex){
      return "TRACE";
    }
  }
;
  TestDescriptor testDescriptor=new MethodTestDescriptor(UniqueId.forEngine("engine"),TestClass.class,TestClass.class.getDeclaredMethod("test1"));
  TestIdentifier identifier=TestIdentifier.from(testDescriptor);
  executionListener.executionStarted(identifier);
  MultipleFailuresError multipleFailuresError=new MultipleFailuresError("2 errors");
  multipleFailuresError.addFailure(new AssertionFailedError("message1","expected1","actual1"));
  multipleFailuresError.addFailure(new AssertionFailedError("message2","expected2","actual2"));
  executionListener.executionFinished(identifier,TestExecutionResult.failed(multipleFailuresError));
  Assertions.assertEquals("##teamcity[enteredTheMatrix]\n" + "\n" + "##teamcity[testStarted id='[engine:engine]' name='test1()']\n"+ "\n"+ "##teamcity[testFailed actual='actual1' expected='expected1' name='test1()' details='' id='|[engine:engine|]' message='']\n"+ "\n"+ "##teamcity[testFailed actual='actual2' expected='expected2' name='test1()' details='' id='|[engine:engine|]' message='']\n"+ "\n"+ "##teamcity[testFailed name='test1()' details='TRACE' id='|[engine:engine|]' message='2 errors (2 failures)|n\tmessage1|n\tmessage2']\n"+ "\n"+ "##teamcity[testFinished id='[engine:engine]' name='test1()']\n",buf.toString());
}
