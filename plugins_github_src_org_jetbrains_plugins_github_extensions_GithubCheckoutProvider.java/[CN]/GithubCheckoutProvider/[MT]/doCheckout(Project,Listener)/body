{
  if (!GithubUtil.testGitExecutable(project)) {
    return;
  }
  BasicAction.saveAll();
  List<GithubRepo> availableRepos;
  try {
    availableRepos=GithubUtil.computeValueInModal(project,"Access to GitHub",new ThrowableConvertor<ProgressIndicator,List<GithubRepo>,IOException>(){
      @NotNull @Override public List<GithubRepo> convert(      ProgressIndicator indicator) throws IOException {
        return GithubUtil.runTask(project,GithubAuthDataHolder.createFromSettings(),indicator,new ThrowableConvertor<GithubConnection,List<GithubRepo>,IOException>(){
          @NotNull @Override public List<GithubRepo> convert(          @NotNull GithubConnection connection) throws IOException {
            return GithubApiUtil.getAvailableRepos(connection);
          }
        }
);
      }
    }
);
  }
 catch (  IOException e) {
    GithubNotifications.showError(project,"Couldn't get the list of GitHub repositories",e);
    return;
  }
  Collections.sort(availableRepos,new Comparator<GithubRepo>(){
    @Override public int compare(    final GithubRepo r1,    final GithubRepo r2){
      final int comparedOwners=r1.getUserName().compareTo(r2.getUserName());
      return comparedOwners != 0 ? comparedOwners : r1.getName().compareTo(r2.getName());
    }
  }
);
  final GitCloneDialog dialog=new GitCloneDialog(project);
  dialog.prependToHistory("-----------------------------------------------");
  for (int i=availableRepos.size() - 1; i >= 0; i--) {
    dialog.prependToHistory(GithubUrlUtil.getCloneUrl(availableRepos.get(i).getFullPath()));
  }
  if (!dialog.showAndGet()) {
    return;
  }
  dialog.rememberSettings();
  final VirtualFile destinationParent=LocalFileSystem.getInstance().findFileByIoFile(new File(dialog.getParentDirectory()));
  if (destinationParent == null) {
    return;
  }
  final String sourceRepositoryURL=dialog.getSourceRepositoryURL();
  final String directoryName=dialog.getDirectoryName();
  final String parentDirectory=dialog.getParentDirectory();
  Git git=ServiceManager.getService(Git.class);
  GitCheckoutProvider.clone(project,git,listener,destinationParent,sourceRepositoryURL,directoryName,parentDirectory);
}
