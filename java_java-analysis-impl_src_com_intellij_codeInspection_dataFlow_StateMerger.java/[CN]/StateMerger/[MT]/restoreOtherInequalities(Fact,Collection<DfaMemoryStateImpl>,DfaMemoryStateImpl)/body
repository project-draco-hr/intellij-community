{
  Set<DfaConstValue> inequalitiesToRestore=null;
  for (  DfaMemoryStateImpl member : mergedGroup) {
    LinkedHashSet<Fact> memberFacts=getFacts(member);
    if (memberFacts.contains(removedFact)) {
      Set<DfaConstValue> otherInequalities=getOtherInequalities(removedFact,memberFacts,member);
      if (inequalitiesToRestore == null) {
        inequalitiesToRestore=otherInequalities;
      }
 else {
        inequalitiesToRestore.retainAll(otherInequalities);
      }
    }
  }
  if (inequalitiesToRestore != null) {
    DfaRelationValue.Factory relationFactory=state.getFactory().getRelationFactory();
    for (    DfaConstValue toRestore : inequalitiesToRestore) {
      state.applyCondition(relationFactory.createRelation(removedFact.myVar,toRestore,JavaTokenType.EQEQ,true));
    }
  }
}
