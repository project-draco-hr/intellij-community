{
  for (  final DfaMemoryStateImpl state : myStates) {
    ProgressManager.checkCanceled();
    for (    final DfaVariableValue var : state.getChangedVariable()) {
      for (      final DfaPsiType notInstanceof : state.getVariableState(var).myNotInstanceofValues) {
        final DfaVariableState varStateWithoutType=getVarStateWithoutType(state,var,notInstanceof);
        List<DfaMemoryStateImpl> complementaryStates=ContainerUtil.filter(myStatesByInstanceof.get(Pair.create(var,notInstanceof)),new Condition<DfaMemoryStateImpl>(){
          @Override public boolean value(          DfaMemoryStateImpl another){
            return seemCompatible(state,another,var) && varStateWithoutType.equals(getVarStateWithoutType(another,var,notInstanceof)) && areEquivalentModuloVar(another,state,var);
          }
        }
);
        if (complementaryStates.isEmpty()) {
          continue;
        }
        DfaMemoryStateImpl copy=state.createCopy();
        copy.flushVariable(var);
        copy.setVariableState(var,varStateWithoutType);
        complementaryStates.add(state);
        postProcessMergedState(var,copy,complementaryStates);
        return getMergeResult(copy,ContainerUtil.newHashSet(complementaryStates));
      }
    }
  }
  return null;
}
