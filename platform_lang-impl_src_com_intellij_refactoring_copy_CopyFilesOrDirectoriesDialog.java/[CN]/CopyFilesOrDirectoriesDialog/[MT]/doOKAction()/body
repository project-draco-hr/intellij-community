{
  if (myShowNewNameField) {
    String newName=getNewName();
    if (newName.length() == 0) {
      Messages.showErrorDialog(myProject,RefactoringBundle.message("no.new.name.specified"),RefactoringBundle.message("error.title"));
      return;
    }
    if (myFileCopy && !PathUtilRt.isValidFileName(newName,false)) {
      Messages.showErrorDialog(myNewNameField,"Name is not a valid file name");
      return;
    }
  }
  saveOpenInEditorState(myOpenFilesInEditor.isSelected());
  if (myShowDirectoryField) {
    final String targetDirectoryName=myTargetDirectoryField.getChildComponent().getText();
    if (targetDirectoryName.length() == 0) {
      Messages.showErrorDialog(myProject,RefactoringBundle.message("no.target.directory.specified"),RefactoringBundle.message("error.title"));
      return;
    }
    RecentsManager.getInstance(myProject).registerRecentEntry(RECENT_KEYS,targetDirectoryName);
    CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
      @Override public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            try {
              String path=FileUtil.toSystemIndependentName(targetDirectoryName);
              myTargetDirectory=DirectoryUtil.mkdirs(PsiManager.getInstance(myProject),path);
            }
 catch (            IncorrectOperationException ignored) {
            }
          }
        }
);
      }
    }
,RefactoringBundle.message("create.directory"),null);
    if (myTargetDirectory == null) {
      Messages.showErrorDialog(myProject,RefactoringBundle.message("cannot.create.directory"),RefactoringBundle.message("error.title"));
      return;
    }
  }
  super.doOKAction();
}
