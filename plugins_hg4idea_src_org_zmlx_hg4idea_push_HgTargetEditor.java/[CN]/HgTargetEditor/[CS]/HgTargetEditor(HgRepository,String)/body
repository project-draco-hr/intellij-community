{
  super(new BorderLayout());
  setOpaque(false);
  myRepository=repository;
  final List<String> targetVariants=HgUtil.getTargetNames(repository);
  TextFieldWithAutoCompletionListProvider<String> provider=new TextFieldWithAutoCompletion.StringsCompletionProvider(targetVariants,null){
    @Override public int compare(    String item1,    String item2){
      return Integer.valueOf(ContainerUtil.indexOf(targetVariants,item1)).compareTo(ContainerUtil.indexOf(targetVariants,item2));
    }
  }
;
  myDestTargetEditorComponent=new TextFieldWithAutoCompletion<String>(repository.getProject(),provider,true,defaultTargetName){
    @Override public boolean shouldHaveBorder(){
      return false;
    }
    @Override protected void updateBorder(    @NotNull final EditorEx editor){
    }
  }
;
  myOldText=defaultTargetName;
  myDestTargetEditorComponent.setBorder(UIUtil.getTableFocusCellHighlightBorder());
  myDestTargetEditorComponent.setOneLineMode(true);
  FocusAdapter focusListener=new FocusAdapter(){
    @Override public void focusGained(    FocusEvent e){
      myDestTargetEditorComponent.selectAll();
    }
  }
;
  myDestTargetEditorComponent.addFocusListener(focusListener);
  add(myDestTargetEditorComponent,BorderLayout.CENTER);
}
