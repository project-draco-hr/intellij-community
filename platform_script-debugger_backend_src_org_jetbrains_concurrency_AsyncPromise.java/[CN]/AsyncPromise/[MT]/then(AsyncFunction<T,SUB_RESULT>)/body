{
switch (state) {
case PENDING:
    break;
case FULFILLED:
  return fulfilled.fun((T)result);
case REJECTED:
rejected.consume((String)result);
return new RejectedPromise<SUB_RESULT>((String)result);
}
final AsyncPromise<SUB_RESULT> promise=new AsyncPromise<SUB_RESULT>();
addHandlers(new Consumer<T>(){
@Override public void consume(T result){
try {
fulfilled.fun(result).done(new Consumer<SUB_RESULT>(){
  @Override public void consume(  SUB_RESULT result){
    try {
      promise.setResult(result);
    }
 catch (    Throwable e) {
      promise.setError(e.getMessage());
    }
  }
}
).rejected(rejected);
}
 catch (Throwable e) {
promise.setError(e.getMessage());
}
}
}
,new Consumer<String>(){
@Override public void consume(String error){
promise.setError(error);
}
}
);
return promise;
}
