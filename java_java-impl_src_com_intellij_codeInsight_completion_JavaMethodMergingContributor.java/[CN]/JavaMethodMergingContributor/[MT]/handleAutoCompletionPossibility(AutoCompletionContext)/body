{
  final CompletionParameters parameters=context.getParameters();
  if (parameters.getCompletionType() != CompletionType.SMART && parameters.getCompletionType() != CompletionType.BASIC) {
    return null;
  }
  final LookupElement[] items=context.getItems();
  if (items.length > 1) {
    String commonName=null;
    final ArrayList<PsiMethod> allMethods=new ArrayList<PsiMethod>();
    for (    LookupElement item : items) {
      Object o=item.getPsiElement();
      if (item.getUserData(LookupItem.FORCE_SHOW_SIGNATURE_ATTR) != null || !(o instanceof PsiMethod)) {
        return AutoCompletionDecision.SHOW_LOOKUP;
      }
      final PsiMethod method=(PsiMethod)o;
      final JavaChainLookupElement chain=item.as(JavaChainLookupElement.CLASS_CONDITION_KEY);
      final String name=method.getName() + "#" + (chain == null ? "" : chain.getQualifier().getLookupString());
      if (commonName != null && !commonName.equals(name)) {
        return AutoCompletionDecision.SHOW_LOOKUP;
      }
      commonName=name;
      allMethods.add(method);
    }
    for (    LookupElement item : items) {
      JavaCompletionUtil.putAllMethods(item,allMethods);
    }
    return AutoCompletionDecision.insertItem(findBestOverload(items));
  }
  return super.handleAutoCompletionPossibility(context);
}
