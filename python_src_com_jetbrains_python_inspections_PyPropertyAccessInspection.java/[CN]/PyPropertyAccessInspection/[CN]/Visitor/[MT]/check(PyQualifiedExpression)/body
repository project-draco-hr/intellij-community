{
  PyExpression qualifier=expr.getQualifier();
  if (qualifier != null) {
    PyType type=qualifier.getType(TypeEvalContext.fast());
    if (type instanceof PyClassType) {
      PyClass cls=((PyClassType)type).getPyClass();
      String name=expr.getName();
      if (cls != null && name != null) {
        Map<Pair<PyClass,String>,Property> cache=PyPropertyAccessInspection.this.myPropertyCache.get();
        final Pair<PyClass,String> key=new Pair<PyClass,String>(cls,name);
        Property property;
        if (cache.containsKey(key))         property=cache.get(key);
 else         property=cls.findProperty(name);
        cache.put(key,property);
        if (property != null) {
          AccessDirection dir=AccessDirection.of(expr);
          final Maybe<PyFunction> accessor=property.getByDirection(dir);
          if (accessor.isDefined() && accessor.value() == null) {
            String message;
            if (dir == AccessDirection.WRITE)             message=PyBundle.message("INSP.property.$0.cant.be.set",name);
 else             if (dir == AccessDirection.DELETE)             message=PyBundle.message("INSP.property.$0.cant.be.deleted",name);
 else             message=PyBundle.message("INSP.property.$0.cant.be.read",name);
            registerProblem(expr,message);
          }
        }
      }
    }
  }
}
