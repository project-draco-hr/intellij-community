{
  if (!"withTraits".equals(resolvedMethod.getName()))   return null;
  if (resolvedMethod instanceof GrGdkMethod) {
    resolvedMethod=((GrGdkMethod)resolvedMethod).getStaticMethod();
  }
  GrExpression invokedExpression=callExpression.getInvokedExpression();
  if (!(invokedExpression instanceof GrReferenceExpression))   return null;
  GrExpression originalObject=((GrReferenceExpression)invokedExpression).getQualifierExpression();
  if (originalObject == null)   return null;
  PsiType invokedType=originalObject.getType();
  if (!(invokedType instanceof PsiClassType) && !(invokedType instanceof GrTraitType))   return null;
  PsiClass containingClass=resolvedMethod.getContainingClass();
  if (containingClass == null || !GroovyCommonClassNames.DEFAULT_GROOVY_METHODS.equals(containingClass.getQualifiedName()))   return null;
  List<PsiType> traits=ContainerUtil.newArrayList();
  GrExpression[] args=callExpression.getArgumentList().getExpressionArguments();
  for (  GrExpression arg : args) {
    PsiType type=arg.getType();
    PsiType classItem=PsiUtil.substituteTypeParameter(type,CommonClassNames.JAVA_LANG_CLASS,0,false);
    PsiClass psiClass=PsiTypesUtil.getPsiClass(classItem);
    if (GrTraitUtil.isTrait(psiClass)) {
      traits.add(classItem);
    }
  }
  return GrTraitType.createTraitClassType(invokedType,traits);
}
