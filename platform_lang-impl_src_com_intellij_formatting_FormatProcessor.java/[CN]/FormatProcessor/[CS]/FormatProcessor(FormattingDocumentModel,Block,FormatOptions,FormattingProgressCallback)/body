{
  myProgressCallback=callback;
  myDefaultIndentOption=options.myIndentOptions;
  mySettings=options.mySettings;
  myDocument=model.getDocument();
  myReformatContext=options.myReformatContext;
  myRightMargin=getRightMargin(block);
  final InitialInfoBuilder builder=prepareToBuildBlocksSequentially(block,model,options,mySettings,myDefaultIndentOption,myProgressCallback);
  final WrapBlocksState wrapState=new WrapBlocksState(builder);
  wrapState.setOnDone(new Runnable(){
    @Override public void run(){
      myInfos=builder.getBlockToInfoMap();
      myRootBlockWrapper=builder.getRootBlockWrapper();
      myFirstTokenBlock=builder.getFirstTokenBlock();
      myLastTokenBlock=builder.getLastTokenBlock();
      myCurrentBlock=myFirstTokenBlock;
      myTextRangeToWrapper=buildTextRangeToInfoMap(myFirstTokenBlock);
      int lastBlockOffset=getLastBlock().getEndOffset();
      myLastWhiteSpace=new WhiteSpace(lastBlockOffset,false);
      myLastWhiteSpace.append(Math.max(lastBlockOffset,builder.getEndOffset()),model,myDefaultIndentOption);
      myAlignmentsInsideRangesToModify=builder.getAlignmentsInsideRangeToModify();
      myTotalBlocksWithAlignments=builder.getBlocksToAlign().values().size();
      myExpandableIndents=builder.getExpandableIndentsBlocks();
    }
  }
);
  myStateProcessor=new StateProcessor(wrapState);
}
