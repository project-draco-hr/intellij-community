{
  AlignmentImpl alignment=CoreFormatterUtil.getAlignment(myCurrentBlock);
  WhiteSpace whiteSpace=myCurrentBlock.getWhiteSpace();
  if (alignment == null || myAlignmentsToSkip.contains(alignment)) {
    if (whiteSpace.containsLineFeeds()) {
      adjustSpacingByIndentOffset();
    }
 else {
      whiteSpace.arrangeSpaces(myCurrentBlock.getSpaceProperty());
    }
    return true;
  }
  BlockAlignmentProcessor alignmentProcessor=ALIGNMENT_PROCESSORS.get(alignment.getAnchor());
  if (alignmentProcessor == null) {
    LOG.error(String.format("Can't find alignment processor for alignment anchor %s",alignment.getAnchor()));
    return true;
  }
  BlockAlignmentProcessor.Context context=new BlockAlignmentProcessor.Context(myDocument,alignment,myCurrentBlock,myAlignmentMappings,myBackwardShiftedAlignedBlocks,myBlockIndentOptions.getIndentOptions(myCurrentBlock));
  BlockAlignmentProcessor.Result result=alignmentProcessor.applyAlignment(context);
  final LeafBlockWrapper offsetResponsibleBlock=alignment.getOffsetRespBlockBefore(myCurrentBlock);
  return processAlignmentResult(alignment,context,result,offsetResponsibleBlock);
}
