{
  PyDocStringOwner docStringOwner=PsiTreeUtil.getParentOfType(descriptor.getPsiElement(),PyDocStringOwner.class);
  if (docStringOwner == null)   return;
  PyStringLiteralExpression docStringExpression=docStringOwner.getDocStringExpression();
  if (docStringExpression == null && myMissingText == null && myUnexpected == null) {
    addEmptyDocstring(project,docStringOwner);
    return;
  }
  if (docStringExpression != null) {
    PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
    final Module module=ModuleUtilCore.findModuleForPsiElement(docStringExpression);
    if (module == null)     return;
    PyDocumentationSettings documentationSettings=PyDocumentationSettings.getInstance(module);
    if (documentationSettings.isEpydocFormat(docStringExpression.getContainingFile())) {
      myPrefix="@";
    }
 else {
      myPrefix=":";
    }
    String replacement=docStringExpression.getText();
    if (myMissingText != null) {
      replacement=createMissingReplacement(docStringOwner);
    }
    if (myUnexpected != null) {
      replacement=PythonDocCommentUtil.removeParamFromDocstring(replacement,myPrefix,myUnexpected);
    }
    if (!replacement.equals(docStringExpression.getText()) && !StringUtil.isEmptyOrSpaces(replacement)) {
      PyExpression str=elementGenerator.createDocstring(replacement).getExpression();
      docStringExpression.replace(str);
    }
  }
}
