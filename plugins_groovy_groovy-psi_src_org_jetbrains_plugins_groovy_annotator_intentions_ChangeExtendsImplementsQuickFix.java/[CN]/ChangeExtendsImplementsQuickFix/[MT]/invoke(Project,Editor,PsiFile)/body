{
  Set<String> classes=new LinkedHashSet<>();
  Set<String> interfaces=new LinkedHashSet<>();
  Set<String> unknownClasses=new LinkedHashSet<>();
  Set<String> unknownInterfaces=new LinkedHashSet<>();
  if (myExtendsClause != null) {
    collectRefs(myExtendsClause.getReferenceElementsGroovy(),classes,interfaces,myClass.isInterface() ? unknownInterfaces : unknownClasses);
    myExtendsClause.delete();
  }
  if (myImplementsClause != null) {
    collectRefs(myImplementsClause.getReferenceElementsGroovy(),classes,interfaces,unknownInterfaces);
    myImplementsClause.delete();
  }
  if (myClass.isInterface()) {
    interfaces.addAll(classes);
    unknownInterfaces.addAll(unknownClasses);
    addNewClause(interfaces,unknownInterfaces,project,true);
  }
 else {
    addNewClause(classes,unknownClasses,project,true);
    addNewClause(interfaces,unknownInterfaces,project,false);
  }
}
