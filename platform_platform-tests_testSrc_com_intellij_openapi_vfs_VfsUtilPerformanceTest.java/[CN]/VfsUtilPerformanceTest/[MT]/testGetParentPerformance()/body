{
  File tempDir=myTempDir.newFolder();
  VirtualFile vDir=LocalFileSystem.getInstance().findFileByIoFile(tempDir);
  assertNotNull(vDir);
  assertTrue(vDir.isDirectory());
  int depth=10;
  new WriteCommandAction.Simple(null){
    @Override protected void run() throws Throwable {
      VirtualFile dir=vDir;
      for (int i=0; i < depth; i++) {
        dir=dir.createChildDirectory(this,"foo");
      }
      VirtualFile leafDir=dir;
      ThrowableRunnable checkPerformance=new ThrowableRunnable(){
        private VirtualFile findRoot(        VirtualFile file){
          while (true) {
            VirtualFile parent=file.getParent();
            if (parent == null) {
              return file;
            }
            file=parent;
          }
        }
        @Override public void run() throws Throwable {
          for (int i=0; i < 5000000; i++) {
            checkRootsEqual();
          }
        }
        private void checkRootsEqual(){
          assertEquals(findRoot(vDir),findRoot(leafDir));
        }
      }
;
      int time=1200;
      PlatformTestUtil.startPerformanceTest("getParent is slow before movement",time,checkPerformance).useLegacyScaling().assertTiming();
      VirtualFile dir1=vDir.createChildDirectory(this,"dir1");
      VirtualFile dir2=vDir.createChildDirectory(this,"dir2");
      for (int i=0; i < 13; i++) {
        dir1.createChildData(this,"a" + i + ".txt").move(this,dir2);
      }
      PlatformTestUtil.startPerformanceTest("getParent is slow after movement",time,checkPerformance).useLegacyScaling().assertTiming();
    }
  }
.execute();
}
