{
  final String keyword=myElement.getKeyword();
  if (keyword == null) {
    return ResolveResult.EMPTY_ARRAY;
  }
  PsiElement call=PsiTreeUtil.getParentOfType(myElement,PyCallExpression.class,PyClass.class);
  if (!(call instanceof PyCallExpression)) {
    return ResolveResult.EMPTY_ARRAY;
  }
  final PyExpression callee=((PyCallExpression)call).getCallee();
  if (callee == null)   return ResolveResult.EMPTY_ARRAY;
  final PsiPolyVariantReference calleeReference=(PsiPolyVariantReference)callee.getReference();
  if (calleeReference == null)   return ResolveResult.EMPTY_ARRAY;
  final ResolveResult[] calleeCandidates=calleeReference.multiResolve(incompleteCode);
  List<ResolveResult> resultList=new ArrayList<>();
  for (  ResolveResult calleeCandidate : calleeCandidates) {
    if (!calleeCandidate.isValidResult())     continue;
    final PsiElement element=calleeCandidate.getElement();
    if (element == null)     continue;
    final PyFunction calleeFunction=resolveToFunction(element,new HashSet<>());
    if (calleeFunction != null) {
      final PsiElement result=calleeFunction.getParameterList().findParameterByName(keyword);
      if (result != null) {
        resultList.add(new PsiElementResolveResult(result));
      }
    }
  }
  return resultList.toArray(new ResolveResult[resultList.size()]);
}
