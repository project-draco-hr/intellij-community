{
  GeneralCommandLine commandLine=new GeneralCommandLine().withParentEnvironmentType(GeneralCommandLine.ParentEnvironmentType.NONE);
  commandLine.setExePath(new File(jvm,homeSubPath + File.separator + "jre"+ File.separator+ "bin"+ File.separator+ "java").getAbsolutePath());
  commandLine.addParameter("-version");
  String displayVersion;
  Boolean is64Bit=null;
  Pair<Version,Integer> versionAndUpdate=null;
  List<String> outputLines=null;
  try {
    outputLines=ExecUtil.execAndGetOutput(commandLine).getStderrLines();
  }
 catch (  ExecutionException e) {
    if (SystemInfo.isMac) {
      commandLine.setExePath(new File(jvm,homeSubPath + File.separator + "bin"+ File.separator+ "java").getAbsolutePath());
      try {
        outputLines=ExecUtil.execAndGetOutput(commandLine).getStderrLines();
      }
 catch (      ExecutionException e1) {
        LOG.debug(e);
      }
    }
    LOG.debug(e);
  }
  if (outputLines != null && outputLines.size() >= 1) {
    String versionLine=outputLines.get(0);
    versionAndUpdate=VersionUtil.parseVersionAndUpdate(versionLine,VERSION_UPDATE_PATTERNS);
    displayVersion=versionLine.replaceFirst("\".*\"","");
    if (outputLines.size() >= 3) {
      is64Bit=is64BitJVM(outputLines.get(2));
    }
  }
 else {
    displayVersion=jvm.getName();
  }
  return Pair.create(Pair.create(displayVersion,is64Bit),versionAndUpdate);
}
