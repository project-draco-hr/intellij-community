{
  final Map<String,Map<Integer,String>> methodParamNames=new LinkedHashMap<String,Map<Integer,String>>();
  reader.accept(new ClassVisitor(Opcodes.API_VERSION){
    private String myClassName=null;
    public void visit(    final int version,    final int access,    final String name,    final String signature,    final String superName,    final String[] interfaces){
      myClassName=name;
    }
    public MethodVisitor visitMethod(    final int access,    final String name,    final String desc,    final String signature,    final String[] exceptions){
      final String methodName=myClassName + '.' + name+ desc;
      final Map<Integer,String> names=new LinkedHashMap<Integer,String>();
      final Type[] args=Type.getArgumentTypes(desc);
      methodParamNames.put(methodName,names);
      final boolean isStatic=(access & ACC_STATIC) != 0;
      final Map<Integer,Integer> paramSlots=new LinkedHashMap<Integer,Integer>();
      int slotIndex=isStatic ? 0 : 1;
      for (int paramIndex=0; paramIndex < args.length; paramIndex++) {
        final Type arg=args[paramIndex];
        paramSlots.put(slotIndex,paramIndex);
        slotIndex+=arg.getSize();
      }
      return new MethodVisitor(api){
        @Override public void visitLocalVariable(        String name2,        String desc,        String signature,        Label start,        Label end,        int slotIndex){
          final Integer paramIndex=paramSlots.get(slotIndex);
          if (paramIndex != null) {
            names.put(paramIndex,name2);
          }
        }
      }
;
    }
  }
,0);
  return methodParamNames;
}
