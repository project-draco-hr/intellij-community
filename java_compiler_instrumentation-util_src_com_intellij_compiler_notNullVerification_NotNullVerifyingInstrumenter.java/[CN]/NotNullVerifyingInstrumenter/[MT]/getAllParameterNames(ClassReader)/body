{
  final Map<String,Map<Integer,String>> methodParamNames=new LinkedHashMap<String,Map<Integer,String>>();
  reader.accept(new ClassVisitor(Opcodes.ASM5){
    private String myClassName=null;
    public void visit(    final int version,    final int access,    final String name,    final String signature,    final String superName,    final String[] interfaces){
      myClassName=name;
    }
    public MethodVisitor visitMethod(    final int access,    final String name,    final String desc,    final String signature,    final String[] exceptions){
      final String methodName=myClassName + '.' + name+ desc;
      final Map<Integer,String> names=new LinkedHashMap<Integer,String>();
      final Type[] args=Type.getArgumentTypes(desc);
      methodParamNames.put(methodName,names);
      final boolean isStatic=(access & ACC_STATIC) != 0;
      return new MethodVisitor(api){
        int varIndex=0;
        @Override public void visitLocalVariable(        String name2,        String desc,        String signature,        Label start,        Label end,        int index){
          if (!isStatic && index == 0) {
            return;
          }
          if (varIndex >= args.length) {
            return;
          }
          names.put(varIndex++,name2);
        }
      }
;
    }
  }
,0);
  return methodParamNames;
}
