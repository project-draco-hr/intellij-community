{
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  if (method.getNameIdentifier() == null) {
    return;
  }
  if (JavaHighlightUtil.isSerializationRelatedMethod(method,aClass)) {
    return;
  }
  PsiClass ancestorClass=aClass.getSuperClass();
  final Set<PsiClass> visitedClasses=new HashSet<>();
  while (ancestorClass != null) {
    if (!visitedClasses.add(ancestorClass)) {
      return;
    }
    final PsiMethod overridingMethod=ancestorClass.findMethodBySignature(method,false);
    if (overridingMethod != null && overridingMethod.hasModifierProperty(PsiModifier.PRIVATE)) {
      registerMethodError(method);
      return;
    }
    ancestorClass=ancestorClass.getSuperClass();
  }
}
