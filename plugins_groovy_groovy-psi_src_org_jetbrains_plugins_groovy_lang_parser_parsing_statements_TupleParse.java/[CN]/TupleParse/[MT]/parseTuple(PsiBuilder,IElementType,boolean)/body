{
  if (builder.getTokenType() != GroovyTokenTypes.mLPAREN)   return null;
  final PsiBuilder.Marker marker=builder.mark();
  builder.advanceLexer();
  int count=0;
  do {
    while (ParserUtils.getToken(builder,GroovyTokenTypes.mCOMMA)) {
      count++;
      builder.error(GroovyBundle.message("identifier.expected"));
    }
    if (acceptType) {
      PsiBuilder.Marker typeMarker=builder.mark();
      TypeSpec.parse(builder);
      if (builder.getTokenType() != GroovyTokenTypes.mIDENT) {
        typeMarker.rollbackTo();
      }
 else {
        typeMarker.drop();
      }
    }
    PsiBuilder.Marker componentMarker=builder.mark();
    if (!ParserUtils.getToken(builder,GroovyTokenTypes.mIDENT)) {
      builder.error(GroovyBundle.message("identifier.expected"));
      componentMarker.drop();
    }
 else {
      componentMarker.done(componentType);
      count++;
    }
  }
 while (ParserUtils.getToken(builder,GroovyTokenTypes.mCOMMA));
  if (ParserUtils.getToken(builder,GroovyTokenTypes.mRPAREN)) {
    return marker;
  }
 else   if (count > 0) {
    builder.error(GroovyBundle.message("comma.or.rparen.expected"));
    return marker;
  }
 else {
    marker.rollbackTo();
    return null;
  }
}
