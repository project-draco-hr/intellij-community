{
  try {
    int vcsTotalLines=getLineCount(myVcsDocument);
    int afterChangedLines=afterLastChangedLine - afterFirstChangedLine;
    int beforeChangedLines=beforeLastChangedLine - beforeFirstChangedLine;
    int linesShift=afterChangedLines - beforeChangedLines;
    List<Range> rangesBeforeChange=new ArrayList<Range>();
    List<Range> rangesAfterChange=new ArrayList<Range>();
    List<Range> changedRanges=new ArrayList<Range>();
    sortRanges(myRanges,beforeFirstChangedLine,beforeLastChangedLine,rangesBeforeChange,changedRanges,rangesAfterChange);
    Range firstChangedRange=ContainerUtil.getFirstItem(changedRanges);
    Range lastChangedRange=ContainerUtil.getLastItem(changedRanges);
    Range lastRangeBefore=ContainerUtil.getLastItem(rangesBeforeChange);
    Range firstRangeAfter=ContainerUtil.getFirstItem(rangesAfterChange);
    if (firstChangedRange != null && firstChangedRange.getLine1() < beforeFirstChangedLine) {
      beforeFirstChangedLine=firstChangedRange.getLine1();
    }
    if (lastChangedRange != null && lastChangedRange.getLine2() > beforeLastChangedLine) {
      beforeLastChangedLine=lastChangedRange.getLine2() - 1;
    }
    afterFirstChangedLine=beforeFirstChangedLine;
    afterLastChangedLine=beforeLastChangedLine + linesShift;
    int vcsFirstLine=getVcsLine1(lastRangeBefore,beforeFirstChangedLine);
    int vcsLastLine=getVcsLine2(firstRangeAfter,beforeLastChangedLine,beforeTotalLines,vcsTotalLines);
    List<Range> newChangedRanges=getNewChangedRanges(afterFirstChangedLine,afterLastChangedLine,vcsFirstLine,vcsLastLine);
    shiftRanges(rangesAfterChange,linesShift);
    if (!changedRanges.equals(newChangedRanges)) {
      replaceRanges(changedRanges,newChangedRanges);
      myRanges=new ArrayList<Range>(rangesBeforeChange.size() + newChangedRanges.size() + rangesAfterChange.size());
      myRanges.addAll(rangesBeforeChange);
      myRanges.addAll(newChangedRanges);
      myRanges.addAll(rangesAfterChange);
      for (      Range range : myRanges) {
        if (!range.hasHighlighter())         range.setHighlighter(createHighlighter(range));
      }
      if (myRanges.isEmpty() && myVirtualFile != null) {
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            FileDocumentManager.getInstance().saveDocument(myDocument);
            boolean stillEmpty;
synchronized (myLock) {
              stillEmpty=myRanges.isEmpty();
            }
            if (stillEmpty) {
              myVcsDirtyScopeManager.fileDirty(myVirtualFile);
            }
          }
        }
);
      }
    }
  }
 catch (  ProcessCanceledException ignore) {
  }
catch (  FilesTooBigForDiffException e1) {
    installAnathema();
    removeHighlightersFromMarkupModel();
  }
}
