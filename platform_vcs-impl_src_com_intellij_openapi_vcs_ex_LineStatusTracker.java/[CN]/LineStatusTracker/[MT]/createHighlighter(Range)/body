{
  myApplication.assertIsDispatchThread();
  LOG.assertTrue(!myReleased,"Already released");
  if (range.getHighlighter() != null) {
    LOG.error("Multiple highlighters registered for the same Range");
    return;
  }
  if (myMode == Mode.SILENT)   return;
  int first=range.getLine1() >= getLineCount(myDocument) ? myDocument.getTextLength() : myDocument.getLineStartOffset(range.getLine1());
  int second=range.getLine2() >= getLineCount(myDocument) ? myDocument.getTextLength() : myDocument.getLineStartOffset(range.getLine2());
  MarkupModel markupModel=DocumentMarkupModel.forDocument(myDocument,myProject,true);
  TextAttributes attributes=LineStatusMarkerRenderer.getTextAttributes(range);
  final RangeHighlighter highlighter=markupModel.addRangeHighlighter(first,second,HighlighterLayer.FIRST - 1,attributes,HighlighterTargetArea.LINES_IN_RANGE);
  highlighter.setThinErrorStripeMark(true);
  highlighter.setGreedyToLeft(true);
  highlighter.setGreedyToRight(true);
  highlighter.setLineMarkerRenderer(LineStatusTrackerDrawing.createRenderer(range,this));
  highlighter.setEditorFilter(MarkupEditorFilterFactory.createIsNotDiffFilter());
  highlighter.setErrorStripeTooltip(LineStatusMarkerRenderer.getTooltipText(range));
  range.setHighlighter(highlighter);
}
