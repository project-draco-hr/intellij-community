{
  myApplication.assertWriteAccessAllowed();
synchronized (myLock) {
    if (myBulkUpdate)     return;
    mySuppressUpdate=true;
    Range first=null;
    Range last=null;
    int shift=0;
    for (    Range range : myRanges) {
      if (!range.isValid()) {
        LOG.warn("Rollback of invalid range");
        break;
      }
      boolean check;
      if (range.getOffset1() == range.getOffset2()) {
        check=lines.get(range.getOffset1());
      }
 else {
        check=checkRange(lines,range.getOffset1(),range.getOffset2());
      }
      if (check) {
        if (first == null) {
          first=range;
        }
        last=range;
        Range shiftedRange=new Range(range);
        shiftedRange.shift(shift);
        doRollbackRange(shiftedRange);
        shift+=(range.getUOffset2() - range.getUOffset1()) - (range.getOffset2() - range.getOffset1());
      }
    }
    if (first != null) {
      int myFirstChangedLine=first.getOffset1();
      int myLastChangedLine=first.getOffset1() == last.getOffset2() ? myFirstChangedLine : last.getOffset2() - 1;
      int currentFirstChangedLine=myFirstChangedLine;
      int currentLastChangedLine=myLastChangedLine + shift;
      int myTotalLines=getLineCount(myDocument) - shift;
      doUpdateRanges(myFirstChangedLine,myLastChangedLine,myTotalLines,currentFirstChangedLine,currentLastChangedLine);
    }
    mySuppressUpdate=false;
  }
}
