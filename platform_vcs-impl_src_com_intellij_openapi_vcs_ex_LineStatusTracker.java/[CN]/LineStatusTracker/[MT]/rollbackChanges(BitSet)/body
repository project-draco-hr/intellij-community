{
  myApplication.assertWriteAccessAllowed();
synchronized (myLock) {
    if (myBulkUpdate)     return;
    mySuppressUpdate=true;
    Range first=null;
    Range last=null;
    int shift=0;
    for (    Range range : myRanges) {
      if (!range.isValid()) {
        LOG.warn("Rollback of invalid range");
        break;
      }
      boolean check;
      if (range.getLine1() == range.getLine2()) {
        check=lines.get(range.getLine1());
      }
 else {
        check=checkRange(lines,range.getLine1(),range.getLine2());
      }
      if (check) {
        if (first == null) {
          first=range;
        }
        last=range;
        Range shiftedRange=new Range(range);
        shiftedRange.shift(shift);
        doRollbackRange(shiftedRange);
        shift+=(range.getVcsLine2() - range.getVcsLine1()) - (range.getLine2() - range.getLine1());
      }
    }
    if (first != null) {
      int beforeFirstChangedLine=first.getLine1();
      int beforeLastChangedLine=first.getLine1() == last.getLine2() ? beforeFirstChangedLine : last.getLine2() - 1;
      int afterFirstChangedLine=beforeFirstChangedLine;
      int afterLastChangedLine=beforeLastChangedLine + shift;
      int beforeTotalLines=getLineCount(myDocument) - shift;
      doUpdateRanges(beforeFirstChangedLine,beforeLastChangedLine,shift,beforeTotalLines);
    }
    mySuppressUpdate=false;
  }
}
