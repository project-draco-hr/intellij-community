{
  PyExpression problemElement=PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset() - 1),PyExpression.class);
  if (problemElement != null) {
    PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
    String name=problemElement.getText();
    if (problemElement instanceof PyQualifiedExpression) {
      final PyExpression qualifier=((PyQualifiedExpression)problemElement).getQualifier();
      if (qualifier != null && !qualifier.getText().equals(PyNames.CANONICAL_SELF)) {
        final String referencedName=((PyQualifiedExpression)problemElement).getReferencedName();
        if (referencedName == null || PyNames.GETITEM.equals(referencedName))         name=qualifier.getText();
      }
    }
    final String text="assert isinstance(" + name + ", )";
    PyAssertStatement assertStatement=elementGenerator.createFromText(LanguageLevel.forElement(problemElement),PyAssertStatement.class,text);
    final PsiElement parentStatement=PsiTreeUtil.getParentOfType(problemElement,PyStatement.class);
    if (parentStatement == null)     return;
    final PsiElement parent=parentStatement.getParent();
    PsiElement element;
    if (parentStatement instanceof PyAssignmentStatement && ((PyAssignmentStatement)parentStatement).getTargets()[0] == problemElement) {
      element=parent.addAfter(assertStatement,parentStatement);
    }
 else {
      PyStatementList statementList=PsiTreeUtil.getParentOfType(parentStatement,PyStatementList.class);
      final Document document=editor.getDocument();
      if (statementList != null) {
        PsiElement statementListParent=statementList.getParent();
        if (document.getLineNumber(statementList.getTextOffset()) == document.getLineNumber(statementListParent.getTextOffset())) {
          final String substring=TextRange.create(statementListParent.getTextRange().getStartOffset(),statementList.getTextOffset()).substring(document.getText());
          final PyStatement foo=elementGenerator.createFromText(LanguageLevel.forElement(problemElement),PyStatement.class,substring + "\n\t" + text+ "\n\t"+ statementList.getText());
          statementListParent=statementListParent.replace(foo);
          statementListParent=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(statementListParent);
          statementList=PsiTreeUtil.findChildOfType(statementListParent,PyStatementList.class);
          element=statementList.getStatements()[0];
        }
 else         element=parent.addBefore(assertStatement,parentStatement);
      }
 else {
        element=parent.addBefore(assertStatement,parentStatement);
      }
    }
    int textOffSet=element.getTextOffset();
    editor.getCaretModel().moveToOffset(textOffSet);
    element=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(element);
    final TemplateBuilder builder=TemplateBuilderFactory.getInstance().createTemplateBuilder(element);
    builder.replaceRange(TextRange.create(text.length() - 1,text.length() - 1),PyNames.OBJECT);
    Template template=((TemplateBuilderImpl)builder).buildInlineTemplate();
    TemplateManager.getInstance(project).startTemplate(editor,template);
  }
}
