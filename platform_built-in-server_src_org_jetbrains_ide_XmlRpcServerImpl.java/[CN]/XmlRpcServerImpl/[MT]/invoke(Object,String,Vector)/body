{
  Class<?> targetClass=(target instanceof Class) ? (Class)target : target.getClass();
  Class[] argClasses=null;
  Object[] argValues=null;
  if (params != null) {
    argClasses=new Class[params.size()];
    argValues=new Object[params.size()];
    for (int i=0; i < params.size(); i++) {
      argValues[i]=params.elementAt(i);
      if (argValues[i] instanceof Integer) {
        argClasses[i]=Integer.TYPE;
      }
 else       if (argValues[i] instanceof Double) {
        argClasses[i]=Double.TYPE;
      }
 else       if (argValues[i] instanceof Boolean) {
        argClasses[i]=Boolean.TYPE;
      }
 else {
        argClasses[i]=argValues[i].getClass();
      }
    }
  }
  Method method;
  int dot=methodName.lastIndexOf('.');
  if (dot > -1 && dot + 1 < methodName.length()) {
    methodName=methodName.substring(dot + 1);
  }
  method=targetClass.getMethod(methodName,argClasses);
  if (method.getDeclaringClass() == Object.class) {
    throw new XmlRpcException(0,"Invoker can't call methods defined in java.lang.Object");
  }
  Object returnValue=method.invoke(target,argValues);
  if (returnValue == null && method.getReturnType() == Void.TYPE) {
    throw new IllegalArgumentException("void return types for handler methods not supported, " + methodName);
  }
  return returnValue;
}
