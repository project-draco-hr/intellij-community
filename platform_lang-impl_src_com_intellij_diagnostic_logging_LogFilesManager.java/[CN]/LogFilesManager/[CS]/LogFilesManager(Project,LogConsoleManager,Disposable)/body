{
  myManager=manager;
  myUpdateAlarm=new SingleAlarm(new Runnable(){
    @Override public void run(){
      if (project.isDisposed()) {
        return;
      }
      for (      final LogFile logFile : new ArrayList<LogFile>(myLogFiles)) {
        ProcessHandler process=logFile.getProcess();
        if (process != null && process.isProcessTerminated()) {
          myLogFiles.remove(logFile);
          continue;
        }
        final Set<String> oldPaths=logFile.getPaths();
        final Set<String> newPaths=logFile.getOptions().getPaths();
        logFile.setPaths(newPaths);
        final Set<String> obsoletePaths=new THashSet<String>(oldPaths);
        obsoletePaths.removeAll(newPaths);
        try {
          SwingUtilities.invokeAndWait(new Runnable(){
            @Override public void run(){
              if (project.isDisposed()) {
                return;
              }
              addConfigurationConsoles(logFile.getOptions(),new Condition<String>(){
                @Override public boolean value(                final String file){
                  return !oldPaths.contains(file);
                }
              }
,newPaths,logFile.getConfiguration());
              for (              String each : obsoletePaths) {
                myManager.removeLogConsole(each);
              }
            }
          }
);
        }
 catch (        InterruptedException ignored) {
        }
catch (        InvocationTargetException ignored) {
        }
      }
      if (!myLogFiles.isEmpty() && !myUpdateAlarm.isDisposed()) {
        myUpdateAlarm.request();
      }
    }
  }
,500,Alarm.ThreadToUse.POOLED_THREAD,parentDisposable);
}
