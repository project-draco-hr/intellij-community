{
  if (pattern.isOn(descriptor.getOldQName())) {
    if (composite == null) {
      composite=new RefactoringElementListenerComposite();
    }
    composite.addListener(new RefactoringElementAdapter(){
      @Override public void elementRenamedOrMoved(      @NotNull PsiElement newElement){
        LOG.assertTrue(newElement instanceof PsiQualifiedNamedElement || newElement instanceof PsiDirectory);
        try {
          final NamedScope[] currentScopes=descriptor.getHolder().getEditableScopes();
          final PackageSet currentPackageSet=currentScopes[descriptor.getIdx()].getValue();
          final String qualifiedName=getQualifiedName(newElement,!(currentPackageSet instanceof FilePatternPackageSet));
          if (qualifiedName != null) {
            final String newPattern=text.replace(descriptor.getOldQName(),qualifiedName);
            final PackageSet newSet=PackageSetFactory.getInstance().compile(newPattern);
            NamedScope newScope=new NamedScope(descriptor.getScope().getName(),newSet);
            currentScopes[descriptor.getIdx()]=newScope;
            descriptor.getHolder().setScopes(currentScopes);
          }
        }
 catch (        ParsingException ignore) {
        }
      }
      @Override public void undoElementMovedOrRenamed(      @NotNull PsiElement newElement,      @NotNull String oldQualifiedName){
        LOG.assertTrue(newElement instanceof PsiQualifiedNamedElement || newElement instanceof PsiDirectory);
        try {
          final NamedScope[] currentScopes=descriptor.getHolder().getEditableScopes();
          final PatternBasedPackageSet packageSet=(PatternBasedPackageSet)currentScopes[descriptor.getIdx()].getValue();
          if (packageSet == null)           return;
          NamedScope newScope=new NamedScope(descriptor.getScope().getName(),PackageSetFactory.getInstance().compile(text));
          currentScopes[descriptor.getIdx()]=newScope;
          descriptor.getHolder().setScopes(currentScopes);
        }
 catch (        ParsingException ignore) {
        }
      }
    }
);
  }
  return composite;
}
