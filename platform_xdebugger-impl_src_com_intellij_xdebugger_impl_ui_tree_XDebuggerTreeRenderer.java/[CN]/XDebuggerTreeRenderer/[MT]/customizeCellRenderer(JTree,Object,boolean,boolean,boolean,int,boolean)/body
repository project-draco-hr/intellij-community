{
  myHaveLink=false;
  myLink.getTreeCellRendererComponent(tree,value,selected,expanded,leaf,row,hasFocus);
  XDebuggerTreeNode node=(XDebuggerTreeNode)value;
  node.appendToComponent(this);
  setIcon(node.getIcon());
  Rectangle treeVisibleRect=tree.getParent() instanceof JViewport ? ((JViewport)tree.getParent()).getViewRect() : tree.getVisibleRect();
  TreePath path=tree.getPathForRow(row);
  int rowX=path != null ? getRowX((BasicTreeUI)tree.getUI(),row,path.getPathCount() - 1) : 0;
  if (myHaveLink) {
    setupLinkDimensions(treeVisibleRect,rowX);
  }
 else   if (node instanceof XValueNodeImpl && rowX + super.getPreferredSize().width > treeVisibleRect.x + treeVisibleRect.width) {
    String rawValue=DebuggerUIUtil.getNodeRawValue((XValueNodeImpl)node);
    if (!StringUtil.isEmpty(rawValue) && tree.isShowing()) {
      Point locationOnScreen=tree.getLocationOnScreen();
      Rectangle screen=AbstractExpandableItemsHandler.getScreenRectangle(locationOnScreen);
      if (screen.x + screen.width < locationOnScreen.x + rowX + super.getPreferredSize().width) {
        myLongTextLink.setupComponent(rawValue,((XDebuggerTree)tree).getProject());
        append(myLongTextLink.getLinkText(),myLongTextLink.getTextAttributes(),myLongTextLink);
        setupLinkDimensions(treeVisibleRect,rowX);
        myLinkWidth=0;
      }
    }
  }
  putClientProperty(ExpandableItemsHandler.RENDERER_DISABLED,myHaveLink);
}
