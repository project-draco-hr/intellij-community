{
  final MultiMap<PsiElement,String> result=new MultiMap<>();
  for (  final PyClass aClass : duplicateConflictDescriptions.keySet()) {
    for (    final PyMemberInfo<?> pyMemberInfo : duplicateConflictDescriptions.get(aClass)) {
      final String message=RefactoringBundle.message("0.already.contains.a.1",RefactoringUIUtil.getDescription(aClass,false),RefactoringUIUtil.getDescription(pyMemberInfo.getMember(),false));
      result.putValue(aClass,message);
    }
  }
  for (  final PyMemberInfo<?> memberUnderConflict : dependenciesConflicts) {
    result.putValue(memberUnderConflict.getMember(),PyBundle.message("refactoring.will.not.be.accessible",RefactoringUIUtil.getDescription(memberUnderConflict.getMember(),false)));
  }
  return result;
}
