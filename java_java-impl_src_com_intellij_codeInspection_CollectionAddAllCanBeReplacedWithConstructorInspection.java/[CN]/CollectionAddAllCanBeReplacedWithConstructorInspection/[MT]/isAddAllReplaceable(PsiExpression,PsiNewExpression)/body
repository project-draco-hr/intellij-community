{
  final boolean[] isReplaceable=new boolean[]{true};
  final PsiFile newExpressionContainingFile=newExpression.getContainingFile();
  final TextRange newExpressionTextRange=newExpression.getTextRange();
  addAllExpression.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      final PsiElement resolved=expression.resolve();
      if (resolved instanceof PsiLocalVariable || resolved instanceof PsiParameter) {
        PsiVariable variable=(PsiVariable)resolved;
        final LocalSearchScope useScope=(LocalSearchScope)variable.getUseScope();
        if (!useScope.containsRange(newExpressionContainingFile,newExpressionTextRange)) {
          isReplaceable[0]=false;
        }
      }
    }
  }
);
  return isReplaceable[0];
}
