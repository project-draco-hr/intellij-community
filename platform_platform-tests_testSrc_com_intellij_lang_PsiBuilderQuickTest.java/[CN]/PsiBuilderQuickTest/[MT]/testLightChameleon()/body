{
  final IElementType CHAMELEON_2=new MyChameleon2Type();
  final IElementType CHAMELEON_1=new MyChameleon1Type(CHAMELEON_2);
  doTest("ab{12[.?]}cd{x}",new Parser(){
    @Override public void parse(    PsiBuilder builder){
      PsiBuilderUtil.advance(builder,2);
      PsiBuilder.Marker chameleon=builder.mark();
      PsiBuilderUtil.advance(builder,8);
      chameleon.collapse(CHAMELEON_1);
      PsiBuilderUtil.advance(builder,2);
      chameleon=builder.mark();
      PsiBuilderUtil.advance(builder,3);
      chameleon.collapse(CHAMELEON_1);
    }
  }
,"Element(ROOT)\n" + "  PsiElement(LETTER)('a')\n" + "  PsiElement(LETTER)('b')\n"+ "  Element(CHAMELEON_1)\n"+ "    PsiElement(OTHER)('{')\n"+ "    PsiElement(DIGIT)('1')\n"+ "    PsiElement(DIGIT)('2')\n"+ "    Element(OTHER)\n"+ "      Element(CHAMELEON_2)\n"+ "        PsiElement(OTHER)('[')\n"+ "        PsiElement(OTHER)('.')\n"+ "        PsiErrorElement:test error 2\n"+ "          PsiElement(OTHER)('?')\n"+ "        PsiElement(OTHER)(']')\n"+ "    PsiErrorElement:test error 1\n"+ "      <empty list>\n"+ "    PsiElement(OTHER)('}')\n"+ "  PsiElement(LETTER)('c')\n"+ "  PsiElement(LETTER)('d')\n"+ "  Element(CHAMELEON_1)\n"+ "    PsiElement(OTHER)('{')\n"+ "    PsiElement(LETTER)('x')\n"+ "    PsiElement(OTHER)('}')\n");
}
