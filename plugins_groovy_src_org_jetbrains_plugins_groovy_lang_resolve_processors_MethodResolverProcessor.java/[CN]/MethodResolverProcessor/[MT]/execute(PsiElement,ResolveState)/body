{
  if (myStopExecuting) {
    return false;
  }
  PsiSubstitutor substitutor=state.get(PsiSubstitutor.KEY);
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    if (method.isConstructor() != myIsConstructor)     return true;
    if (substitutor == null)     substitutor=PsiSubstitutor.EMPTY;
    if (!myByShape) {
      substitutor=mySubstitutorComputer.obtainSubstitutor(substitutor,method,state);
    }
    PsiElement resolveContext=state.get(RESOLVE_CONTEXT);
    final SpreadState spreadState=state.get(SpreadState.SPREAD_STATE);
    boolean isAccessible=isAccessible(method);
    boolean isStaticsOK=isStaticsOK(method,resolveContext,true);
    boolean isApplicable=PsiUtil.isApplicable(myArgumentTypes,method,substitutor,myPlace,myByShape);
    boolean isValidResult=isStaticsOK && isAccessible && isApplicable;
    GroovyResolveResultImpl candidate=new GroovyResolveResultImpl(method,resolveContext,spreadState,substitutor,isAccessible,isStaticsOK,false,isValidResult);
    if (!myAllVariants && isValidResult) {
      addCandidate(candidate);
    }
 else {
      myInapplicableCandidates.add(candidate);
    }
    return true;
  }
  return true;
}
