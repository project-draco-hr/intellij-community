{
  if (interface2Consider.hasTypeParameters()) {
    final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(interface2Consider);
    if (interfaceMethod != null) {
      final PsiParameter[] parameters=interfaceMethod.getParameterList().getParameters();
      final PsiParameter[] functionalExprParameters;
      if (expression instanceof PsiLambdaExpression && ((PsiLambdaExpression)expression).hasFormalParameterTypes()) {
        functionalExprParameters=((PsiLambdaExpression)expression).getParameterList().getParameters();
      }
 else       if (expression instanceof PsiMethodReferenceExpression && ((PsiMethodReferenceExpression)expression).isExact()) {
        final PsiElement exactMethod=((PsiMethodReferenceExpression)expression).resolve();
        if (!(exactMethod instanceof PsiMethod)) {
          return null;
        }
        functionalExprParameters=((PsiMethod)exactMethod).getParameterList().getParameters();
      }
 else {
        return null;
      }
      if (parameters.length != functionalExprParameters.length) {
        return null;
      }
      final PsiType[] left=new PsiType[parameters.length];
      final PsiType[] right=new PsiType[parameters.length];
      for (int i=0; i < parameters.length; i++) {
        left[i]=parameters[i].getType();
        right[i]=functionalExprParameters[i].getType();
      }
      final PsiSubstitutor substitutor=PsiResolveHelper.SERVICE.getInstance(interface2Consider.getProject()).inferTypeArguments(interface2Consider.getTypeParameters(),left,right,PsiUtil.getLanguageLevel(expression));
      PsiType type=elementFactory.createType(interface2Consider,substitutor);
      if (expression.isAcceptable(type)) {
        return type;
      }
    }
  }
  return null;
}
