{
  final boolean staticallyReferenced=PsiMethodReferenceUtil.isStaticallyReferenced(expression);
  final JavaResolveResult[] results=expression.multiResolve(true);
  for (  JavaResolveResult result : results) {
    final PsiElement element=result.getElement();
    if (element instanceof PsiMethod) {
      int offset=staticallyReferenced && !((PsiMethod)element).hasModifierProperty(PsiModifier.STATIC) ? 1 : 0;
      final PsiParameter[] functionalExprParameters=((PsiMethod)element).getParameterList().getParameters();
      if (functionalExprParameters.length + offset == parameters.length) {
        if (offset > 0) {
          if (qualifierType == null) {
            continue;
          }
          left[0]=parameters[0].getType();
          right[0]=qualifierType;
        }
        return (PsiMethod)element;
      }
    }
  }
  return null;
}
