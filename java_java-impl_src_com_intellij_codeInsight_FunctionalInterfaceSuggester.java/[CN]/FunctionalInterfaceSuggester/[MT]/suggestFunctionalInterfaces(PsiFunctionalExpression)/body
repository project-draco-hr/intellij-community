{
  final Project project=expression.getProject();
  final PsiClass functionalInterfaceClass=JavaPsiFacade.getInstance(project).findClass(CommonClassNames.JAVA_LANG_FUNCTIONAL_INTERFACE,GlobalSearchScope.allScope(project));
  if (functionalInterfaceClass == null) {
    return Collections.emptyList();
  }
  final Set<PsiType> types=new LinkedHashSet<PsiType>();
  AnnotatedMembersSearch.search(functionalInterfaceClass,expression.getResolveScope()).forEach(new Processor<PsiMember>(){
    @Override public boolean process(    PsiMember member){
      if (member instanceof PsiClass) {
        ContainerUtil.addIfNotNull(types,composeAcceptableType((PsiClass)member,expression));
      }
      return true;
    }
  }
);
  return types;
}
