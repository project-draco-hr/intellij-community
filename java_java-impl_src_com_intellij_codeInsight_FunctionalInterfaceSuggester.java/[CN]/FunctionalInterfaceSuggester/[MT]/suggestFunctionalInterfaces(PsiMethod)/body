{
  if (method.isConstructor()) {
    return Collections.emptyList();
  }
  return suggestFunctionalInterfaces(method,new NullableFunction<PsiClass,PsiType>(){
    @Nullable @Override public PsiType fun(    PsiClass aClass){
      final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(aClass);
      if (interfaceMethod != null) {
        final PsiParameter[] parameters=method.getParameterList().getParameters();
        final PsiParameter[] interfaceMethodParameters=interfaceMethod.getParameterList().getParameters();
        if (parameters.length != interfaceMethodParameters.length) {
          return null;
        }
        final PsiType[] left=new PsiType[parameters.length];
        final PsiType[] right=new PsiType[parameters.length];
        for (int i=0; i < parameters.length; i++) {
          left[i]=interfaceMethodParameters[i].getType();
          right[i]=parameters[i].getType();
        }
        final PsiTypeParameter[] typeParameters=aClass.getTypeParameters();
        final PsiSubstitutor substitutor=PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters,left,right,PsiUtil.getLanguageLevel(method));
        if (PsiUtil.isRawSubstitutor(aClass,substitutor)) {
          return null;
        }
        for (int i=0; i < interfaceMethodParameters.length; i++) {
          if (!TypeConversionUtil.isAssignable(parameters[i].getType(),substitutor.substitute(interfaceMethodParameters[i].getType()))) {
            return null;
          }
        }
        final PsiType returnType=method.getReturnType();
        if (!TypeConversionUtil.isAssignable(substitutor.substitute(interfaceMethod.getReturnType()),returnType)) {
          return null;
        }
        final PsiClassType[] interfaceThrownTypes=interfaceMethod.getThrowsList().getReferencedTypes();
        final PsiClassType[] thrownTypes=method.getThrowsList().getReferencedTypes();
        for (        PsiClassType thrownType : thrownTypes) {
          if (!ExceptionUtil.isHandledBy(thrownType,interfaceThrownTypes,substitutor)) {
            return null;
          }
        }
        for (        PsiClassType thrownType : interfaceThrownTypes) {
          final PsiCodeBlock codeBlock=PsiTreeUtil.getContextOfType(method,PsiCodeBlock.class);
          if (codeBlock == null || !ExceptionUtil.isHandled(thrownType,codeBlock)) {
            return null;
          }
        }
        final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(aClass.getProject());
        final PsiType type=elementFactory.createType(aClass,substitutor);
        return type;
      }
      return null;
    }
  }
);
}
