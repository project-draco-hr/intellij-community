{
  if (method.isConstructor()) {
    return Collections.emptyList();
  }
  return suggestFunctionalInterfaces(method,new NullableFunction<PsiClass,PsiType>(){
    @Nullable @Override public PsiType fun(    PsiClass aClass){
      final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(aClass);
      if (interfaceMethod != null) {
        final PsiParameter[] parameters=method.getParameterList().getParameters();
        final PsiParameter[] interfaceMethodParameters=interfaceMethod.getParameterList().getParameters();
        if (parameters.length != interfaceMethodParameters.length) {
          return null;
        }
        for (int i=0; i < interfaceMethodParameters.length; i++) {
          if (!TypeConversionUtil.isAssignable(parameters[i].getType(),interfaceMethodParameters[i].getType())) {
            return null;
          }
        }
        final PsiType returnType=method.getReturnType();
        if (!TypeConversionUtil.isAssignable(interfaceMethod.getReturnType(),returnType)) {
          return null;
        }
        final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(aClass.getProject());
        final PsiType type=elementFactory.createType(aClass,PsiSubstitutor.EMPTY);
        return type;
      }
      return null;
    }
  }
);
}
