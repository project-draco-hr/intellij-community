{
  PsiBuilder.Marker marker=builder.mark();
  PsiBuilder.Marker paramMarker=builder.mark();
  Modifiers.parse(builder,parser);
  boolean isBuiltInType=TokenSets.BUILT_IN_TYPES.contains(builder.getTokenType());
  PsiBuilder.Marker typeSpec=builder.mark();
  TypeSpec.parseStrict(builder,false);
  if (builder.getTokenType() == GroovyTokenTypes.mIDENT || isBuiltInType) {
    typeSpec.drop();
  }
 else {
    typeSpec.rollbackTo();
  }
  if (TokenSets.FOR_IN_DELIMITERS.contains(builder.getTokenType())) {
    builder.error(GroovyBundle.message("identifier.expected"));
    paramMarker.drop();
  }
 else   if (builder.getTokenType() == GroovyTokenTypes.mIDENT) {
    ParserUtils.getToken(builder,GroovyTokenTypes.mIDENT);
    paramMarker.done(GroovyElementTypes.PARAMETER);
  }
 else {
    paramMarker.drop();
    marker.rollbackTo();
    return false;
  }
  if (!ParserUtils.getToken(builder,GroovyTokenTypes.kIN) && !ParserUtils.getToken(builder,GroovyTokenTypes.mCOLON)) {
    marker.rollbackTo();
    return false;
  }
  if (!ConditionalExpression.parse(builder,parser)) {
    builder.error(GroovyBundle.message("expression.expected"));
  }
  marker.done(GroovyElementTypes.FOR_IN_CLAUSE);
  return true;
}
