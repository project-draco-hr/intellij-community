{
  new Task.Backgroundable(myProject,"Rebasing...",false){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      callback.disableModifications();
      GitRebaser rebaser=new GitRebaser(GitActionHandlerImpl.this.myProject,myGit,indicator);
      List<String> params=Arrays.asList(onto.getCommitHash().toStrHash(),subjectRef.getName());
      GitUpdateResult result=rebaser.rebase(myRepository.getRoot(),params,null,new GitLineHandlerAdapter(){
        @Override public void onLineAvailable(        String line,        Key outputType){
        }
      }
);
      String target=onto.getCommitHash().toStrHash();
switch (result) {
case NOTHING_TO_UPDATE:
        break;
case SUCCESS:
      Notificator.getInstance(GitActionHandlerImpl.this.myProject).notifySuccess("","Rebased " + subjectRef.getName() + " to "+ target);
    break;
case SUCCESS_WITH_RESOLVED_CONFLICTS:
  Notificator.getInstance(GitActionHandlerImpl.this.myProject).notifySuccess("","Rebased " + subjectRef.getName() + " to "+ target);
break;
case INCOMPLETE:
break;
case CANCEL:
break;
case ERROR:
break;
case NOT_READY:
break;
}
}
@Override public void onSuccess(){
myUiController.refresh();
callback.enableModifications();
}
@Override public void onCancel(){
onSuccess();
}
}
.queue();
}
