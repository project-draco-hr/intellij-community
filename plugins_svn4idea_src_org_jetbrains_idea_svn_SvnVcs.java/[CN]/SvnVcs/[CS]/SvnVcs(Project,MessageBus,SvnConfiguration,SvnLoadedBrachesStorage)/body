{
  super(project,VCS_NAME);
  cmdClientFactory=new CmdClientFactory(this);
  svnKitClientFactory=new SvnKitClientFactory(this);
  myLoadedBranchesStorage=storage;
  myRootsToWorkingCopies=new RootsToWorkingCopies(this);
  myConfiguration=svnConfiguration;
  myAuthNotifier=new SvnAuthenticationNotifier(this);
  dumpFileStatus(FileStatus.ADDED);
  dumpFileStatus(FileStatus.DELETED);
  dumpFileStatus(FileStatus.MERGE);
  dumpFileStatus(FileStatus.MODIFIED);
  dumpFileStatus(FileStatus.NOT_CHANGED);
  dumpFileStatus(FileStatus.UNKNOWN);
  dumpFileStatus(SvnFileStatus.REPLACED);
  dumpFileStatus(SvnFileStatus.EXTERNAL);
  dumpFileStatus(SvnFileStatus.OBSTRUCTED);
  refreshSSLProperty();
  final ProjectLevelVcsManager vcsManager=ProjectLevelVcsManager.getInstance(project);
  myAddConfirmation=vcsManager.getStandardConfirmation(VcsConfiguration.StandardConfirmation.ADD,this);
  myDeleteConfirmation=vcsManager.getStandardConfirmation(VcsConfiguration.StandardConfirmation.REMOVE,this);
  myCheckoutOptions=vcsManager.getStandardOption(VcsConfiguration.StandardOption.CHECKOUT,this);
  if (myProject.isDefault()) {
    myChangeListListener=null;
    myEntriesFileListener=null;
  }
 else {
    myEntriesFileListener=new SvnEntriesFileListener(project);
    upgradeIfNeeded(bus);
    myChangeListListener=new SvnChangelistListener(myProject,this);
    myVcsListener=new VcsListener(){
      @Override public void directoryMappingChanged(){
        invokeRefreshSvnRoots();
      }
    }
;
  }
  myFrameStateListener=project.isDefault() ? null : new MyFrameStateListener(ChangeListManager.getInstance(project),VcsDirtyScopeManager.getInstance(project));
  myWorkingCopiesContent=new WorkingCopiesContent(this);
  correctNotificationIds();
  myChecker=new SvnExecutableChecker(myProject);
  Application app=ApplicationManager.getApplication();
  myLogExceptions=app != null && (app.isInternal() || app.isUnitTestMode());
}
