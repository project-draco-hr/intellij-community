{
  Map<String,Pair<PropertyValue,Trinity<Long,Long,Long>>> cachedMap=myPropertyCache.get(keyForVf(file));
  final Pair<PropertyValue,Trinity<Long,Long,Long>> cachedValue=cachedMap == null ? null : cachedMap.get(propName);
  final File ioFile=new File(file.getPath());
  final Trinity<Long,Long,Long> tsTrinity=getTimestampForPropertiesChange(ioFile,file.isDirectory());
  if (cachedValue != null) {
    if (trinitiesEqual(cachedValue.getSecond(),tsTrinity)) {
      return cachedValue.getFirst();
    }
  }
  PropertyClient client=getFactory(ioFile).createPropertyClient();
  final PropertyValue value=client.getProperty(SvnTarget.fromFile(ioFile,SVNRevision.WORKING),propName,false,SVNRevision.WORKING);
  if (cachedMap == null) {
    cachedMap=new HashMap<String,Pair<PropertyValue,Trinity<Long,Long,Long>>>();
    myPropertyCache.put(keyForVf(file),cachedMap);
  }
  cachedMap.put(propName,Pair.create(value,tsTrinity));
  return value;
}
