{
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      for (      Module module : scope.getAffectedModules()) {
        setupJdkForModule(module.getName());
      }
      new MavenResourceCompilerConfigurationGenerator(myProject,MavenProjectsManager.getInstance(myProject).getProjectsTreeForTests()).generateBuildConfiguration(false);
    }
  }
);
  CompilerWorkspaceConfiguration.getInstance(myProject).CLEAR_OUTPUT_DIRECTORY=true;
  CompilerManagerImpl.testSetup();
  List<VirtualFile> roots=Arrays.asList(ProjectRootManager.getInstance(myProject).getContentRoots());
  final Semaphore semaphore=new Semaphore();
  semaphore.down();
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      CompilerManager.getInstance(myProject).make(scope,new CompileStatusNotification(){
        @Override public void finished(        boolean aborted,        int errors,        int warnings,        CompileContext compileContext){
          semaphore.up();
        }
      }
);
    }
  }
);
  while (!semaphore.waitFor(100)) {
    if (SwingUtilities.isEventDispatchThread()) {
      UIUtil.dispatchAllInvocationEvents();
    }
  }
  if (SwingUtilities.isEventDispatchThread()) {
    UIUtil.dispatchAllInvocationEvents();
  }
}
