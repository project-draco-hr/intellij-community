{
  File versionFile=getVersionFile(snapshotInfoFile);
  long lastModified=versionFile.lastModified();
  if ((System.currentTimeMillis() - lastModified) < 30 * 24 * 60* 60* 1000L) {
    return;
  }
  Set<String> availableLibrarySnapshots=new THashSet<String>(Arrays.asList(snapshotInfoFile.getParentFile().list(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      int lastDotPosition=name.lastIndexOf('.');
      if (lastDotPosition == -1)       return false;
      String extension=name.substring(lastDotPosition + 1);
      if (extension.length() != 40 || !consistsOfHexLetters(extension))       return false;
      return true;
    }
    private boolean consistsOfHexLetters(    String extension){
      for (int i=0; i < extension.length(); ++i) {
        if (Character.digit(extension.charAt(i),16) == -1)         return false;
      }
      return true;
    }
  }
)));
  final List<String> invalidLibraryFilePaths=new ArrayList<String>();
  final List<String> allLibraryFilePaths=new ArrayList<String>();
  MultiMap<String,String> jarSnapshotFileToLibraryFilePaths=new MultiMap<String,String>();
  Map<String,String> validLibraryFilePathToJarSnapshotFilePaths=new THashMap<String,String>();
  info.processKeys(new CommonProcessors.CollectProcessor<String>(allLibraryFilePaths));
  for (  String filePath : allLibraryFilePaths) {
    CacheLibraryInfo libraryInfo=info.get(filePath);
    if (libraryInfo == null)     continue;
    jarSnapshotFileToLibraryFilePaths.putValue(libraryInfo.mySnapshotPath,filePath);
    if (new File(filePath).exists()) {
      validLibraryFilePathToJarSnapshotFilePaths.put(filePath,libraryInfo.mySnapshotPath);
    }
 else {
      invalidLibraryFilePaths.add(filePath);
    }
  }
  for (  String invalidLibraryFilePath : invalidLibraryFilePaths) {
    LOG.info("removing stale library reference:" + invalidLibraryFilePath);
    info.remove(invalidLibraryFilePath);
  }
  for (  Map.Entry<String,Collection<String>> e : jarSnapshotFileToLibraryFilePaths.entrySet()) {
    for (    String libraryFilePath : e.getValue()) {
      if (validLibraryFilePathToJarSnapshotFilePaths.containsKey(libraryFilePath)) {
        availableLibrarySnapshots.remove(e.getKey());
        break;
      }
    }
  }
  for (  String availableLibrarySnapshot : availableLibrarySnapshots) {
    File librarySnapshotFileToDelete=new File(snapshotInfoFile.getParentFile(),availableLibrarySnapshot);
    LOG.info("removing stale library snapshot:" + librarySnapshotFileToDelete);
    FileUtil.delete(librarySnapshotFileToDelete);
  }
  saveVersion(versionFile);
}
