{
  final PsiElement parent=typeDefinitionBody.getParent();
  if (!(parent instanceof GrAnonymousClassDefinition))   return;
  final PsiElement prev=typeDefinitionBody.getPrevSibling();
  if (!PsiUtil.isLineFeed(prev))   return;
  final PsiElement newExpression=parent.getParent();
  if (!(newExpression instanceof GrNewExpression))   return;
  final GrStatementOwner statementOwner=PsiTreeUtil.getParentOfType(newExpression,GrStatementOwner.class);
  final GrParenthesizedExpression parenthesizedExpression=PsiTreeUtil.getParentOfType(newExpression,GrParenthesizedExpression.class);
  if (parenthesizedExpression != null && PsiTreeUtil.isAncestor(statementOwner,parenthesizedExpression,true))   return;
  final GrArgumentList argumentList=PsiTreeUtil.getParentOfType(newExpression,GrArgumentList.class);
  if (argumentList != null && !(argumentList instanceof GrCommandArgumentList)) {
    if (PsiTreeUtil.isAncestor(statementOwner,argumentList,true))     return;
  }
  myHolder.createErrorAnnotation(typeDefinitionBody,GroovyBundle.message("ambiguous.code.block"));
}
