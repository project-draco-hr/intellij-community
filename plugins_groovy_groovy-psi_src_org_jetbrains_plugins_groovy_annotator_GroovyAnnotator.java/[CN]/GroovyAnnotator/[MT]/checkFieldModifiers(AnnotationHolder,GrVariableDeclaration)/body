{
  final GrModifierList modifierList=fieldDeclaration.getModifierList();
  final GrField member=(GrField)fieldDeclaration.getVariables()[0];
  checkAccessModifiers(holder,modifierList,member);
  checkDuplicateModifiers(holder,modifierList,member);
  if (modifierList.hasExplicitModifier(PsiModifier.VOLATILE) && modifierList.hasExplicitModifier(PsiModifier.FINAL)) {
    final Annotation annotation=holder.createErrorAnnotation(modifierList,GroovyBundle.message("illegal.combination.of.modifiers.volatile.and.final"));
    registerFix(annotation,new GrModifierFix(member,PsiModifier.VOLATILE,true,false,GrModifierFix.MODIFIER_LIST),modifierList);
    registerFix(annotation,new GrModifierFix(member,PsiModifier.FINAL,true,false,GrModifierFix.MODIFIER_LIST),modifierList);
  }
  if (member.getContainingClass() instanceof GrInterfaceDefinition) {
    checkModifierIsNotAllowed(modifierList,PsiModifier.PRIVATE,GroovyBundle.message("interface.members.are.not.allowed.to.be",PsiModifier.PRIVATE),holder);
    checkModifierIsNotAllowed(modifierList,PsiModifier.PROTECTED,GroovyBundle.message("interface.members.are.not.allowed.to.be",PsiModifier.PROTECTED),holder);
  }
}
