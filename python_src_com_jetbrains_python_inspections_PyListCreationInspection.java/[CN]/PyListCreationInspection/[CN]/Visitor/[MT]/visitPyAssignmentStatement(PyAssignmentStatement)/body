{
  if (!(node.getAssignedValue() instanceof PyListLiteralExpression))   return;
  final PyExpression[] targets=node.getTargets();
  if (targets.length != 1)   return;
  final PyExpression target=targets[0];
  final String name=target.getName();
  if (name == null)   return;
  PyStatement expressionStatement=PsiTreeUtil.getNextSiblingOfType(node,PyStatement.class);
  if (!(expressionStatement instanceof PyExpressionStatement))   return;
  ListCreationQuickFix quickFix=null;
  final String message="This list creation could be rewritten as a list literal";
  while (expressionStatement instanceof PyExpressionStatement) {
    final PyExpression statement=((PyExpressionStatement)expressionStatement).getExpression();
    if (!(statement instanceof PyCallExpression))     break;
    final PyCallExpression callExpression=(PyCallExpression)statement;
    final PyExpression callee=callExpression.getCallee();
    if (callee instanceof PyQualifiedExpression) {
      final PyExpression qualifier=((PyQualifiedExpression)callee).getQualifier();
      final String funcName=((PyQualifiedExpression)callee).getReferencedName();
      if (qualifier != null && name.equals(qualifier.getText()) && "append".equals(funcName)) {
        final PyArgumentList argList=callExpression.getArgumentList();
        if (argList != null) {
          for (          PyExpression argument : argList.getArguments()) {
            if (argument.getText().equals(name)) {
              if (quickFix != null)               registerProblem(node,message,quickFix);
              return;
            }
          }
          if (quickFix == null) {
            quickFix=new ListCreationQuickFix(node);
          }
          quickFix.addStatement((PyExpressionStatement)expressionStatement);
        }
      }
    }
    if (quickFix == null) {
      return;
    }
    expressionStatement=PsiTreeUtil.getNextSiblingOfType(expressionStatement,PyStatement.class);
  }
  if (quickFix != null) {
    registerProblem(node,message,quickFix);
  }
}
