{
  if (node.getAssignedValue() instanceof PyListLiteralExpression) {
    if (node.getTargets().length != 1) {
      return;
    }
    final PyExpression target=node.getTargets()[0];
    String name=target.getName();
    if (name == null) {
      return;
    }
    PyExpression statement=null;
    PyExpressionStatement expressionStatement=PsiTreeUtil.getNextSiblingOfType(node,PyExpressionStatement.class);
    if (expressionStatement != null)     statement=expressionStatement.getExpression();
    ListCreationQuickFix quickFix=null;
    boolean availableFix=false;
    while (statement instanceof PyCallExpression) {
      PyCallExpression callExpression=(PyCallExpression)statement;
      PyExpression callee=callExpression.getCallee();
      if (callee instanceof PyQualifiedExpression) {
        if (((PyQualifiedExpression)callee).getQualifier().getText().equals(name)) {
          PyArgumentList argList=callExpression.getArgumentList();
          if (argList != null) {
            for (            PyExpression argument : argList.getArguments()) {
              if (!availableFix) {
                quickFix=new ListCreationQuickFix(node);
                availableFix=true;
              }
            }
          }
        }
      }
      if (quickFix == null) {
        return;
      }
      quickFix.addStatement(expressionStatement);
      expressionStatement=PsiTreeUtil.getNextSiblingOfType(expressionStatement,PyExpressionStatement.class);
      if (expressionStatement != null)       statement=expressionStatement.getExpression();
 else       statement=null;
    }
    if (availableFix) {
      registerProblem(node,"This list creation could be rewritten as a list literal",quickFix);
    }
  }
}
