{
  XDependentBreakpointManager dependentBreakpointManager=((XBreakpointManagerImpl)myXBreakpointManager).getDependentBreakpointManager();
  XBreakpoint xBreakpoint=findXBreakpoint(breakpoint);
  if (!dependentBreakpointManager.isMasterOrSlave(xBreakpoint)) {
    return;
  }
  List<XBreakpoint<?>> breakpoints=dependentBreakpointManager.getSlaveBreakpoints(xBreakpoint);
  for (  final XBreakpoint<?> slaveBreakpoint : breakpoints) {
    DebuggerInvocationUtil.invokeLater(myProject,new Runnable(){
      @Override public void run(){
        slaveBreakpoint.setEnabled(true);
      }
    }
);
  }
  if (dependentBreakpointManager.getMasterBreakpoint(xBreakpoint) != null && !dependentBreakpointManager.isLeaveEnabled(xBreakpoint)) {
    DebuggerInvocationUtil.invokeLater(myProject,new Runnable(){
      @Override public void run(){
        breakpoint.setEnabled(false);
      }
    }
);
  }
}
