{
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      removeInvalidBreakpoints();
      final Map<Key<? extends Breakpoint>,Element> categoryToElementMap=new THashMap<Key<? extends Breakpoint>,Element>();
      for (      Key<? extends Breakpoint> category : myBreakpointDefaults.keySet()) {
        final Element group=getCategoryGroupElement(categoryToElementMap,category,parentNode);
        final BreakpointDefaults defaults=getBreakpointDefaults(category);
        group.setAttribute(DEFAULT_SUSPEND_POLICY_ATTRIBUTE_NAME,String.valueOf(defaults.getSuspendPolicy()));
        group.setAttribute(DEFAULT_CONDITION_STATE_ATTRIBUTE_NAME,String.valueOf(defaults.isConditionEnabled()));
      }
      for (      Breakpoint breakpoint : getBreakpoints()) {
        if (breakpoint.isValid() && (!(breakpoint instanceof BreakpointWithHighlighter) || ((BreakpointWithHighlighter)breakpoint).isVisible())) {
          writeBreakpoint(getCategoryGroupElement(categoryToElementMap,breakpoint.getCategory(),parentNode),breakpoint);
        }
      }
      final AnyExceptionBreakpoint anyExceptionBreakpoint=getAnyExceptionBreakpoint();
      final Element group=getCategoryGroupElement(categoryToElementMap,anyExceptionBreakpoint.getCategory(),parentNode);
      writeBreakpoint(group,anyExceptionBreakpoint);
      final Element rules=new Element(RULES_GROUP_NAME);
      parentNode.addContent(rules);
      for (      EnableBreakpointRule myBreakpointRule : myBreakpointRules) {
        writeRule(myBreakpointRule,rules);
      }
    }
  }
);
  final Element uiProperties=new Element("ui_properties");
  parentNode.addContent(uiProperties);
  for (  final String name : myUIProperties.keySet()) {
    Element property=new Element("property");
    uiProperties.addContent(property);
    property.setAttribute("name",name);
    property.setAttribute("value",myUIProperties.get(name));
  }
}
