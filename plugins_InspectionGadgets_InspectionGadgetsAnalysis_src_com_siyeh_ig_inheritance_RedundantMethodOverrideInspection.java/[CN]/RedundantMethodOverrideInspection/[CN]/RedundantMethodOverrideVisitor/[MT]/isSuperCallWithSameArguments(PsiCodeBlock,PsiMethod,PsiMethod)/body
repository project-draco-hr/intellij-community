{
  final PsiStatement[] statements=body.getStatements();
  if (statements.length != 1) {
    return false;
  }
  final PsiStatement statement=statements[0];
  final PsiExpression expression;
  if (PsiType.VOID.equals(method.getReturnType())) {
    if (statement instanceof PsiExpressionStatement) {
      final PsiExpressionStatement expressionStatement=(PsiExpressionStatement)statement;
      expression=expressionStatement.getExpression();
    }
 else {
      return false;
    }
  }
 else {
    if (statement instanceof PsiReturnStatement) {
      final PsiReturnStatement returnStatement=(PsiReturnStatement)statement;
      expression=ParenthesesUtils.stripParentheses(returnStatement.getReturnValue());
    }
 else {
      return false;
    }
  }
  if (!(expression instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
  if (!MethodCallUtils.isSuperMethodCall(methodCallExpression,method))   return false;
  if (superMethod.hasModifierProperty(PsiModifier.PROTECTED)) {
    final PsiJavaFile file=(PsiJavaFile)method.getContainingFile();
    PsiPackage aPackage=JavaPsiFacade.getInstance(method.getProject()).findPackage(file.getPackageName());
    if (aPackage == null) {
      return false;
    }
    final PackageScope scope=new PackageScope(aPackage,false,false);
    if (isOnTheFly()) {
      final PsiSearchHelper searchHelper=PsiSearchHelper.SERVICE.getInstance(method.getProject());
      final PsiSearchHelper.SearchCostResult cost=searchHelper.isCheapEnoughToSearch(method.getName(),scope,null,null);
      if (cost == PsiSearchHelper.SearchCostResult.ZERO_OCCURRENCES) {
        return true;
      }
      if (cost == PsiSearchHelper.SearchCostResult.TOO_MANY_OCCURRENCES) {
        return false;
      }
    }
    final Query<PsiReference> search=ReferencesSearch.search(method,scope);
    final PsiClass containingClass=method.getContainingClass();
    for (    PsiReference reference : search) {
      if (!PsiTreeUtil.isAncestor(containingClass,reference.getElement(),true)) {
        return false;
      }
    }
  }
  return areSameArguments(methodCallExpression,method);
}
