{
  if (myTheirsBinaryChanges.isEmpty())   return;
  final Application application=ApplicationManager.getApplication();
  final List<FilePath> dirtyPaths=new ArrayList<>();
  for (  final Change change : myTheirsBinaryChanges) {
    try {
      application.runWriteAction(new ThrowableComputable<Void,VcsException>(){
        @Override public Void compute() throws VcsException {
          try {
            if (change.getAfterRevision() == null) {
              final FilePath path=change.getBeforeRevision().getFile();
              dirtyPaths.add(path);
              final VirtualFile file=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(path.getIOFile());
              if (file == null) {
                context.handleException(new VcsException("Can not delete file: " + file.getPath(),true),false);
                return null;
              }
              file.delete(TreeConflictRefreshablePanel.class);
            }
 else {
              final FilePath file=change.getAfterRevision().getFile();
              dirtyPaths.add(file);
              final String parentPath=file.getParentPath().getPath();
              final VirtualFile parentFile=VfsUtil.createDirectoryIfMissing(parentPath);
              if (parentFile == null) {
                context.handleException(new VcsException("Can not create directory: " + parentPath,true),false);
                return null;
              }
              final VirtualFile child=parentFile.createChildData(TreeConflictRefreshablePanel.class,file.getName());
              if (child == null) {
                context.handleException(new VcsException("Can not create file: " + file.getPath(),true),false);
                return null;
              }
              final BinaryContentRevision revision=(BinaryContentRevision)change.getAfterRevision();
              final byte[] content=revision.getBinaryContent();
              if (content == null) {
                context.handleException(new VcsException("Can not load Theirs content for file " + file.getPath()),false);
                return null;
              }
              child.setBinaryContent(content);
            }
          }
 catch (          IOException e) {
            throw new VcsException(e);
          }
          return null;
        }
      }
);
    }
 catch (    VcsException e) {
      context.handleException(e,true);
      return;
    }
  }
  VcsDirtyScopeManager.getInstance(myVcs.getProject()).filePathsDirty(dirtyPaths,null);
}
