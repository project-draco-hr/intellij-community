{
  final Set<PyElement> childrenElements=new HashSet<PyElement>();
  my_element.acceptChildren(new PyElementVisitor(){
    @Override public void visitElement(    PsiElement element){
      if (isWorthyClassItem(element)) {
        childrenElements.add((PyElement)element);
      }
 else {
        element.acceptChildren(this);
      }
    }
    public void visitPyParameter(    final PyNamedParameter node){
    }
  }
);
  StructureViewTreeElement[] children=new StructureViewTreeElement[childrenElements.size()];
  int i=0;
  for (  PyElement element : childrenElements) {
    Visibility vis=Visibility.NORMAL;
    if (PsiTreeUtil.getParentOfType(element,PyFunction.class) != null) {
      vis=Visibility.INVISIBLE;
    }
 else {
      String name=element.getName();
      if (name != null && name.startsWith("__")) {
        if (PyNames.UnderscoredAttributes.contains(name)) {
          vis=Visibility.PREDEFINED;
        }
 else {
          vis=Visibility.PRIVATE;
        }
      }
    }
    children[i]=new PyStructureViewElement(element,vis);
    if (element instanceof PyClass) {
      PyClass the_exception=PyBuiltinCache.getInstance(element).getClass("Exception");
      final PyClass cls=(PyClass)element;
      for (      PyClass anc : cls.iterateAncestors()) {
        if (anc == the_exception) {
          ((PyStructureViewElement)(children[i])).setIcon(Icons.EXCEPTION_CLASS_ICON);
          break;
        }
      }
    }
    i+=1;
  }
  return children;
}
