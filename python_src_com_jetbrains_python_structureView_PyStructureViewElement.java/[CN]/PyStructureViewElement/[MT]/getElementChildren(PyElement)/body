{
  final Collection<PyElement> children=new ArrayList<PyElement>();
  element.acceptChildren(new PyElementVisitor(){
    @Override public void visitElement(    PsiElement e){
      if (e instanceof PyClass || e instanceof PyFunction || (!(element instanceof PyClass) && isWorthyItem(e))) {
        children.add((PyElement)e);
      }
 else {
        e.acceptChildren(this);
      }
    }
  }
);
  final Collection<PyTargetExpression> attrs=new ArrayList<PyTargetExpression>();
  if (element instanceof PyClass) {
    final PyClass c=(PyClass)element;
    final Comparator<PyTargetExpression> comparator=new Comparator<PyTargetExpression>(){
      @Override public int compare(      PyTargetExpression e1,      PyTargetExpression e2){
        final String n1=e1.getName();
        final String n2=e2.getName();
        return (n1 != null && n2 != null) ? n1.compareTo(n2) : 0;
      }
    }
;
    final List<PyTargetExpression> instanceAttrs=c.getInstanceAttributes();
    final List<PyTargetExpression> classAttrs=c.getClassAttributes();
    Collections.sort(instanceAttrs,comparator);
    Collections.sort(classAttrs,comparator);
    attrs.addAll(classAttrs);
    attrs.addAll(instanceAttrs);
  }
  for (  PyTargetExpression e : attrs) {
    if (e.isValid()) {
      children.add(e);
    }
  }
  return children;
}
