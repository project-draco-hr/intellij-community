{
  final Collection<PyElement> children=new ArrayList<PyElement>();
  if (!element.isValid()) {
    return children;
  }
  element.acceptChildren(new PyElementVisitor(){
    @Override public void visitElement(    PsiElement e){
      if (isWorthyItem(e,element)) {
        children.add((PyElement)e);
      }
 else {
        e.acceptChildren(this);
      }
    }
  }
);
  if (element instanceof PyClass) {
    final List<PyElement> attrs=getClassAttributes((PyClass)element);
    final List<PyElement> filtered=new ArrayList<PyElement>();
    final Set<String> names=new HashSet<String>();
    for (    PyElement attr : attrs) {
      final String name=attr.getName();
      if (attr.isValid() && !names.contains(name)) {
        filtered.add(attr);
      }
      names.add(name);
    }
    final Comparator<PyElement> comparator=new Comparator<PyElement>(){
      @Override public int compare(      PyElement e1,      PyElement e2){
        final String n1=e1.getName();
        final String n2=e2.getName();
        return (n1 != null && n2 != null) ? n1.compareTo(n2) : 0;
      }
    }
;
    Collections.sort(filtered,comparator);
    children.addAll(filtered);
  }
  return children;
}
