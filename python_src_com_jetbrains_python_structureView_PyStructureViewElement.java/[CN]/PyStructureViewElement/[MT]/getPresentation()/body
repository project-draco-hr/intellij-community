{
  final ItemPresentation presentation=myElement.getPresentation();
  return new ColoredItemPresentation(){
    @Nullable @Override public String getPresentableText(){
      if (myElement instanceof PyFile) {
        return myElement.getName();
      }
      return presentation != null ? presentation.getPresentableText() : PyNames.UNNAMED_ELEMENT;
    }
    @Nullable @Override public TextAttributesKey getTextAttributesKey(){
      if (isInherited()) {
        return CodeInsightColors.NOT_USED_ELEMENT_ATTRIBUTES;
      }
      return null;
    }
    @Nullable @Override public String getLocationString(){
      return null;
    }
    @Nullable @Override public Icon getIcon(    boolean open){
      Icon normal_icon=myElement.getIcon(0);
      if (myIcon != null)       normal_icon=myIcon;
      if (myVisibility == Visibility.NORMAL) {
        return normal_icon;
      }
 else {
        LayeredIcon icon=new LayeredIcon(2);
        icon.setIcon(normal_icon,0);
        Icon overlay=null;
        if (myVisibility == Visibility.PRIVATE || myVisibility == Visibility.PROTECTED) {
          overlay=PythonIcons.Python.Nodes.Lock;
        }
 else         if (myVisibility == Visibility.PREDEFINED) {
          overlay=PythonIcons.Python.Nodes.Cyan_dot;
        }
 else         if (myVisibility == Visibility.INVISIBLE) {
          overlay=PythonIcons.Python.Nodes.Red_inv_triangle;
        }
        if (overlay != null) {
          icon.setIcon(overlay,1);
        }
        return icon;
      }
    }
  }
;
}
