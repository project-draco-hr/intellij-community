{
  State stateSpec=StoreUtil.getStateSpec(component);
  String name=stateSpec.name();
  if (changedStorages == null || !reloadData) {
    doAddComponent(name,component);
  }
  if (optimizeTestLoading()) {
    return name;
  }
  Class<T> stateClass=ComponentSerializationUtil.getStateClass(component.getClass());
  if (!stateSpec.defaultStateAsResource() && LOG.isDebugEnabled() && getDefaultState(component,name,stateClass) != null) {
    LOG.error(name + " has default state, but not marked to load it");
  }
  T state=stateSpec.defaultStateAsResource() ? getDefaultState(component,name,stateClass) : null;
  Storage[] storageSpecs=getComponentStorageSpecs(component,stateSpec,StateStorageOperation.READ);
  StateStorageChooserEx stateStorageChooser=component instanceof StateStorageChooserEx ? (StateStorageChooserEx)component : null;
  for (  Storage storageSpec : storageSpecs) {
    Resolution resolution=stateStorageChooser == null ? Resolution.DO : stateStorageChooser.getResolution(storageSpec,StateStorageOperation.READ);
    if (resolution == Resolution.SKIP) {
      continue;
    }
    StateStorage stateStorage=getStateStorageManager().getStateStorage(storageSpec);
    boolean forcedState=false;
    if (stateStorage != null && (stateStorage.hasState(component,name,stateClass,reloadData) || (forcedState=changedStorages != null && changedStorages.contains(stateStorage)))) {
      state=stateStorage.getState(component,name,stateClass,state);
      if (state == null && forcedState) {
        state=DefaultStateSerializer.deserializeState(new Element("state"),stateClass,null);
      }
      break;
    }
  }
  if (state != null) {
    component.loadState(state);
  }
  validateUnusedMacros(name,true);
  return name;
}
