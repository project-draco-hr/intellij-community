{
  if (StringUtil.isEmptyOrSpaces(line))   return null;
  if (line.startsWith(MERGING) || line.startsWith(RECORDING_MERGE_INFO)) {
    return null;
  }
 else   if (line.startsWith(UPDATING)) {
    myRootsUnderProcessing.push(parseForPath(line));
    return createEvent(myRootsUnderProcessing.peek(),EventAction.UPDATE_NONE);
  }
 else   if (line.startsWith(RESTORED)) {
    return createEvent(parseForPath(line),EventAction.RESTORE);
  }
 else   if (line.startsWith(SKIPPED)) {
    final String comment=parseComment(line);
    return createEvent(parseForPath(line),-1,EventAction.SKIP,comment == null ? null : SVNErrorMessage.create(SVNErrorCode.WC_OBSTRUCTED_UPDATE,comment));
  }
 else   if (line.startsWith(FETCHING_EXTERNAL)) {
    myRootsUnderProcessing.push(parseForPath(line));
    return createEvent(myRootsUnderProcessing.peek(),EventAction.UPDATE_EXTERNAL);
  }
  for (  final Pattern pattern : ourCompletePatterns) {
    final long revision=matchAndGetRevision(pattern,line);
    if (revision != -1) {
      File currentRoot=myRootsUnderProcessing.size() > 0 ? myRootsUnderProcessing.pop() : myBase;
      return createEvent(currentRoot,revision,EventAction.UPDATE_COMPLETED,null);
    }
  }
  return parseNormalString(line);
}
