{
  final VcsLogObjectsFactory factory=getObjectsFactoryWithDisposeCheck(project);
  if (factory == null) {
    return;
  }
  final int COMMIT_BUFFER=1000;
  GitLineHandler h=new GitLineHandler(project,root,GitCommand.LOG);
  final GitLogParser parser=new GitLogParser(project,GitLogParser.NameStatus.NONE,HASH,PARENTS,COMMIT_TIME,AUTHOR_NAME,AUTHOR_EMAIL,REF_NAMES);
  h.setStdoutSuppressed(true);
  h.addParameters(parser.getPretty(),"--encoding=UTF-8");
  h.addParameters("--full-history");
  h.addParameters("--decorate=full");
  h.addParameters(parameters);
  h.endOptions();
  final StringBuilder record=new StringBuilder();
  final AtomicInteger records=new AtomicInteger();
  final Ref<VcsException> ex=new Ref<VcsException>();
  h.addLineListener(new GitLineHandlerListener(){
    @Override public void onLineAvailable(    String line,    Key outputType){
      try {
        int recordEnd=line.indexOf(GitLogParser.RECORD_END);
        String afterParseRemainder;
        if (recordEnd == line.length() - 1) {
          record.append(line);
          afterParseRemainder="";
        }
 else         if (recordEnd == -1) {
          record.append(line);
          afterParseRemainder=null;
        }
 else {
          record.append(line.substring(0,recordEnd + 1));
          afterParseRemainder=line.substring(recordEnd + 1);
        }
        if (afterParseRemainder != null && records.incrementAndGet() > COMMIT_BUFFER) {
          List<TimedVcsCommit> commits=parseCommit(parser,record,userConsumer,refConsumer,factory,root);
          for (          TimedVcsCommit commit : commits) {
            commitConsumer.consume(commit);
          }
          record.setLength(0);
          record.append(afterParseRemainder);
        }
      }
 catch (      Exception e) {
        ex.set(new VcsException(e));
      }
    }
    @Override public void processTerminated(    int exitCode){
      try {
        List<TimedVcsCommit> commits=parseCommit(parser,record,userConsumer,refConsumer,factory,root);
        for (        TimedVcsCommit commit : commits) {
          commitConsumer.consume(commit);
        }
      }
 catch (      Exception e) {
        ex.set(new VcsException(e));
      }
    }
    @Override public void startFailed(    Throwable exception){
      ex.set(new VcsException(exception));
    }
  }
);
  h.runInCurrentThread(null);
  if (!ex.isNull()) {
    throw ex.get();
  }
}
