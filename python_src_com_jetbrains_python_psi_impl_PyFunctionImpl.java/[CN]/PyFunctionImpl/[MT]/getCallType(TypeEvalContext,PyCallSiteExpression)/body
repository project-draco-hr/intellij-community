{
  for (  PyTypeProvider typeProvider : Extensions.getExtensions(PyTypeProvider.EP_NAME)) {
    final PyType type=typeProvider.getCallType(this,callSite,context);
    if (type != null) {
      type.assertValid(typeProvider.toString());
      return type;
    }
  }
  final PyExpression receiver=PyTypeChecker.getReceiver(callSite,this);
  final List<PyExpression> arguments=PyTypeChecker.getArguments(callSite,this);
  final List<PyParameter> parameters=PyUtil.getParameters(this,context);
  final List<PyParameter> explicitParameters=PyTypeChecker.filterExplicitParameters(parameters,this,callSite);
  final Map<PyExpression,PyNamedParameter> mapping=PyCallExpressionHelper.mapArguments(arguments,explicitParameters);
  return getCallType(receiver,mapping,context);
}
