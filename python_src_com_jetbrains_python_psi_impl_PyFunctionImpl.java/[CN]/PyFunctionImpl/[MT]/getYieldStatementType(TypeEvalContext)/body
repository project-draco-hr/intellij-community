{
  Ref<PyType> elementType=null;
  final PyBuiltinCache cache=PyBuiltinCache.getInstance(this);
  final PyClass listClass=cache.getClass("list");
  final PyStatementList statements=getStatementList();
  final Set<PyType> types=new HashSet<PyType>();
  if (statements != null && listClass != null) {
    statements.accept(new PyRecursiveElementVisitor(){
      @Override public void visitPyYieldExpression(      PyYieldExpression node){
        final PyType type=node.getType(context);
        if (node.isDelegating() && type instanceof PyCollectionType) {
          final PyCollectionType collectionType=(PyCollectionType)type;
          types.add(collectionType.getElementType(context));
        }
 else {
          types.add(type);
        }
      }
    }
);
    final int n=types.size();
    if (n == 1) {
      elementType=Ref.create(types.iterator().next());
    }
 else     if (n > 0) {
      elementType=Ref.create(PyUnionType.union(types));
    }
  }
  if (elementType != null) {
    final PyType it=PyTypeParser.getTypeByName(this,"Iterator");
    if (it instanceof PyClassType) {
      return new PyCollectionTypeImpl(((PyClassType)it).getPyClass(),false,elementType.get());
    }
  }
  return null;
}
