{
  PyType elementType=null;
  final PyBuiltinCache cache=PyBuiltinCache.getInstance(this);
  final PyClass listClass=cache.getClass("list");
  final PyStatementList statements=getStatementList();
  final Set<PyType> types=new HashSet<PyType>();
  if (statements != null && listClass != null) {
    statements.accept(new PyRecursiveElementVisitor(){
      @Override public void visitPyYieldExpression(      PyYieldExpression node){
        types.add(node.getType(context));
      }
    }
);
    final int n=types.size();
    if (n == 1) {
      elementType=types.iterator().next();
    }
 else     if (n > 0) {
      elementType=new PyUnionType(types);
    }
  }
  if (elementType != null) {
    final PyType it=PyTypeParser.getTypeByName(this,"Iterator");
    if (it instanceof PyClassType) {
      return new PyCollectionTypeImpl(((PyClassType)it).getPyClass(),false,elementType);
    }
  }
  return null;
}
