{
  Ref<PyType> elementType=null;
  final PyBuiltinCache cache=PyBuiltinCache.getInstance(this);
  final PyStatementList statements=getStatementList();
  final Set<PyType> types=new LinkedHashSet<>();
  statements.accept(new PyRecursiveElementVisitor(){
    @Override public void visitPyYieldExpression(    PyYieldExpression node){
      final PyExpression expr=node.getExpression();
      final PyType type=expr != null ? context.getType(expr) : null;
      if (node.isDelegating()) {
        if (type instanceof PyCollectionType) {
          final PyCollectionType collectionType=(PyCollectionType)type;
          final List<PyType> elementTypes=collectionType.getElementTypes(context);
          types.add(elementTypes.isEmpty() ? null : elementTypes.get(0));
        }
 else         if (ArrayUtil.contains(type,cache.getListType(),cache.getDictType(),cache.getSetType())) {
          types.add(null);
        }
 else {
          types.add(type);
        }
      }
 else {
        types.add(type);
      }
    }
    @Override public void visitPyFunction(    PyFunction node){
    }
  }
);
  final int n=types.size();
  if (n == 1) {
    elementType=Ref.create(types.iterator().next());
  }
 else   if (n > 0) {
    elementType=Ref.create(PyUnionType.union(types));
  }
  if (elementType != null) {
    final PyClass generator=cache.getClass(PyNames.FAKE_GENERATOR);
    if (generator != null) {
      final List<PyType> parameters=Arrays.asList(elementType.get(),null,getReturnStatementType(context));
      return Ref.create(new PyCollectionTypeImpl(generator,false,parameters));
    }
  }
  if (!types.isEmpty()) {
    return Ref.create(null);
  }
  return null;
}
