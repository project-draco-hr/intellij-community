{
  if (!importRef.isValid())   return null;
  final String the_name=referencedName != null ? referencedName : importRef.getName();
  Set being_imported=myBeingImported.get();
  PsiFile containing_file=importRef.getContainingFile();
  PsiElement last_resolved=null;
  List<PyReferenceExpression> ref_path=PyResolveUtil.unwindQualifiers(importRef);
  StringBuffer pathbuf=new StringBuffer();
  for (  PyQualifiedExpression pathelt : ref_path)   pathbuf.append(pathelt.getName()).append(".");
  if (referencedName != null)   pathbuf.append(referencedName);
  final String import_fqname=pathbuf.toString();
  if (being_imported.contains(import_fqname))   return null;
  try {
    being_imported.add(import_fqname);
    Iterator<PyReferenceExpression> it=ref_path.iterator();
    if (ref_path.size() > 1) {
      if (it.hasNext()) {
        last_resolved=it.next().resolve();
      }
 else       return null;
      while (it.hasNext()) {
        last_resolved=resolveChild(last_resolved,it.next().getName(),containing_file);
        if (last_resolved == null)         return null;
      }
      if (referencedName != null) {
        return resolveChild(last_resolved,referencedName,containing_file);
      }
 else       return last_resolved;
    }
    if (referencedName != null) {
      return resolveChild(importRef.resolve(),referencedName,containing_file);
    }
    PsiFile pfile=importRef.getContainingFile();
    VirtualFile vfile=pfile.getVirtualFile();
    if (vfile == null) {
      pfile=pfile.getOriginalFile();
    }
    if (pfile != null) {
      PsiDirectory pdir=pfile.getContainingDirectory();
      if (pdir != null) {
        PsiElement elt=resolveChild(pdir,the_name,containing_file);
        if (elt != null)         return elt;
      }
    }
    final Module module=ModuleUtil.findModuleForPsiElement(importRef);
    if (module != null) {
      ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
      boolean source_entries_missing=true;
      for (      ContentEntry entry : rootManager.getContentEntries()) {
        VirtualFile root_file=entry.getFile();
        PsiElement ret=matchToFile(the_name,importRef,root_file);
        if (ret != null)         return ret;
        for (        VirtualFile folder : entry.getSourceFolderFiles()) {
          source_entries_missing=false;
          ret=matchToFile(the_name,importRef,folder);
          if (ret != null)           return ret;
        }
      }
      if (source_entries_missing) {
        VirtualFile project_root=module.getProject().getBaseDir();
        PsiElement ret=matchToFile(the_name,importRef,project_root);
        if (ret != null)         return ret;
      }
      RootPolicy<PsiElement> resolvePolicy=new RootPolicy<PsiElement>(){
        @Nullable public PsiElement visitJdkOrderEntry(        final JdkOrderEntry jdkOrderEntry,        final PsiElement value){
          if (value != null)           return value;
          LookupRootVisitor visitor=new LookupRootVisitor(the_name,importRef.getManager());
          visitRoots(jdkOrderEntry.getRootFiles(OrderRootType.SOURCES),visitor);
          return visitor.getResult();
        }
      }
;
      PsiElement ret=rootManager.processOrder(resolvePolicy,null);
      if (ret != null)       return ret;
    }
 else {
      try {
        for (        OrderEntry entry : ProjectRootManager.getInstance(importRef.getProject()).getFileIndex().getOrderEntriesForFile(importRef.getContainingFile().getVirtualFile())) {
          PsiElement elt=resolveInRoots(entry.getFiles(OrderRootType.SOURCES),the_name,importRef);
          if (elt != null)           return elt;
        }
      }
 catch (      NullPointerException ex) {
        return null;
      }
    }
  }
  finally {
    being_imported.remove(import_fqname);
  }
  return null;
}
