{
  String referencedName=importRef.getReferencedName();
  if (referencedName == null)   return null;
  final PyExpression qualifier=importRef.getQualifier();
  if (qualifier instanceof PyReferenceExpression) {
    PsiElement qualifierElement=((PyReferenceExpression)qualifier).resolve();
    if (qualifierElement == null)     return null;
    return resolveChild(qualifierElement,referencedName,importRef);
  }
  if (importRef.getParent() instanceof PyImportElement) {
    PyImportElement parent=(PyImportElement)importRef.getParent();
    if (parent.getParent() instanceof PyFromImportStatement) {
      PyFromImportStatement stmt=(PyFromImportStatement)parent.getParent();
      final PyReferenceExpression source=stmt.getImportSource();
      if (source == null)       return null;
      PsiElement sourceFile=resolveImportReference(source);
      return resolveChild(sourceFile,referencedName,importRef);
    }
  }
  final PsiFile[] files=FilenameIndex.getFilesByName(importRef.getProject(),referencedName + ".py",GlobalSearchScope.allScope(importRef.getProject()));
  if (files.length == 1)   return files[0];
  final Module module=ModuleUtil.findModuleForPsiElement(importRef);
  final VirtualFile[] contentRoots=ModuleRootManager.getInstance(module).getContentRoots();
  for (  VirtualFile root : contentRoots) {
    final VirtualFile childFile=root.findChild(referencedName + ".py");
    if (childFile != null) {
      return PsiManager.getInstance(importRef.getProject()).findFile(childFile);
    }
    final VirtualFile childDir=root.findChild(referencedName);
    if (childDir != null) {
      return PsiManager.getInstance(importRef.getProject()).findDirectory(childDir);
    }
  }
  return null;
}
