{
  final String referencedName=importRef.getReferencedName();
  if (referencedName == null)   return null;
  final PyExpression qualifier=importRef.getQualifier();
  if (qualifier instanceof PyReferenceExpression) {
    PsiElement qualifierElement=((PyReferenceExpression)qualifier).resolve();
    if (qualifierElement == null)     return null;
    return resolveChild(qualifierElement,referencedName,importRef);
  }
  if (importRef.getParent() instanceof PyImportElement) {
    PyImportElement parent=(PyImportElement)importRef.getParent();
    if (parent.getParent() instanceof PyFromImportStatement) {
      PyFromImportStatement stmt=(PyFromImportStatement)parent.getParent();
      final PyReferenceExpression source=stmt.getImportSource();
      if (source == null)       return null;
      PsiElement sourceFile=resolveImportReference(source);
      return resolveChild(sourceFile,referencedName,importRef);
    }
  }
  final Module module=ModuleUtil.findModuleForPsiElement(importRef);
  if (module == null)   return null;
  RootPolicy<PsiElement> resolvePolicy=new RootPolicy<PsiElement>(){
    public PsiElement visitModuleSourceOrderEntry(    final ModuleSourceOrderEntry moduleOrderEntry,    final PsiElement value){
      if (value != null)       return value;
      return resolveInRoots(moduleOrderEntry.getRootModel().getContentRoots(),referencedName,importRef);
    }
    public PsiElement visitJdkOrderEntry(    final JdkOrderEntry jdkOrderEntry,    final PsiElement value){
      if (value != null)       return value;
      return resolveInRoots(jdkOrderEntry.getRootFiles(OrderRootType.SOURCES),referencedName,importRef);
    }
  }
;
  return ModuleRootManager.getInstance(module).processOrder(resolvePolicy,null);
}
