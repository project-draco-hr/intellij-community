{
  final int start=startInScope.getTextOffset();
  final int end=endInScope.getTextOffset() + endInScope.getTextLength();
  final ControlFlow flow=ControlFlowCache.getControlFlow(owner);
  if (flow == null) {
    throw new CannotCreateCodeFragmentException("Cannot determine execution flow for the code fragment");
  }
  final List<Instruction> subGraph=getFragmentSubGraph(flow,start,end);
  final AnalysisResult subGraphAnalysis=analyseSubGraph(subGraph,start,end);
  if (subGraphAnalysis.regularExits > 0 && subGraphAnalysis.returns > 0) {
    throw new CannotCreateCodeFragmentException(PyBundle.message("refactoring.extract.method.error.cannot.perform.refactoring.when.execution.flow.is.interrupted"));
  }
  if (subGraphAnalysis.targetInstructions > 1) {
    throw new CannotCreateCodeFragmentException(PyBundle.message("refactoring.extract.method.error.cannot.perform.refactoring.when.execution.flow.is.interrupted"));
  }
  if (subGraphAnalysis.starImports > 0) {
    throw new CannotCreateCodeFragmentException(PyBundle.message("refactoring.extract.method.error.cannot.perform.refactoring.when.from.import.inside"));
  }
  final PyCodeFragmentBuilder builder=new PyCodeFragmentBuilder(owner,start,end);
  owner.acceptChildren(builder);
  return new CodeFragment(builder.inElements,builder.outElements,subGraphAnalysis.returns > 0);
}
