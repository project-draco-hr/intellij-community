{
  super(project,editor,RefactoringUtil.outermostParenthesizedExpression(expr),null,occurrences,selectorManager,title);
  mySettings=settings;
  myChosenAnchor=SmartPointerManager.getInstance(project).createSmartPsiElementPointer(chosenAnchor);
  myCantChangeFinalModifier=cantChangeFinalModifier;
  myHasTypeSuggestion=selectorManager.getTypesForAll().length > 1;
  myTitle=title;
  myExpression=new TypeExpression(myProject,isReplaceAllOccurrences() ? myTypeSelectorManager.getTypesForAll() : myTypeSelectorManager.getTypesForOne());
  final List<RangeMarker> rangeMarkers=getOccurrenceMarkers();
  editor.putUserData(ReassignVariableUtil.OCCURRENCES_KEY,rangeMarkers.toArray(new RangeMarker[rangeMarkers.size()]));
  myReplaceSelf=myExpr.getParent() instanceof PsiExpressionStatement;
  mySkipTypeExpressionOnStart=!(myExpr instanceof PsiFunctionalExpression && myReplaceSelf);
}
