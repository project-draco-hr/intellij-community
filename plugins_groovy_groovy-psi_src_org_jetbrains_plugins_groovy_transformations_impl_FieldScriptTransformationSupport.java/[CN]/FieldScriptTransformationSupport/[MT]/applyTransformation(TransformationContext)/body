{
  if (!(context.getCodeClass() instanceof GroovyScriptClass))   return;
  final GroovyScriptClass scriptClass=(GroovyScriptClass)context.getCodeClass();
  scriptClass.getContainingFile().accept(new GroovyRecursiveElementVisitor(){
    @Override public void visitVariableDeclaration(    @NotNull GrVariableDeclaration element){
      if (element.getModifierList().findAnnotation(GroovyCommonClassNames.GROOVY_TRANSFORM_FIELD) != null) {
        for (        GrVariable variable : element.getVariables()) {
          context.addField(new GrScriptField(variable,scriptClass));
        }
      }
      super.visitVariableDeclaration(element);
    }
    @Override public void visitMethod(    @NotNull GrMethod method){
    }
    @Override public void visitTypeDefinition(    @NotNull GrTypeDefinition typeDefinition){
    }
  }
);
}
