{
  StackFrameProxyImpl frameProxy=context.getFrameProxy();
  if (frameProxy == null) {
    throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.no.stackframe"));
  }
  try {
    ThreadReferenceProxyImpl threadProxy=null;
    int lastFrameIndex=-1;
    PsiVariable variable=null;
    boolean topFrame=true;
    while (true) {
      try {
        LocalVariableProxyImpl local=frameProxy.visibleVariableByName(myLocalVariableName);
        if (local != null) {
          if (topFrame || variable.equals(resolveVariable(frameProxy,myLocalVariableName,context.getProject(),context.getDebugProcess()))) {
            myEvaluatedVariable=local;
            myContext=context;
            return frameProxy.getValue(local);
          }
        }
      }
 catch (      EvaluateException e) {
        if (!(e.getCause() instanceof AbsentInformationException)) {
          throw e;
        }
        if (topFrame) {
          if (myParameterIndex < 0) {
            throw e;
          }
          final List<Value> values=frameProxy.getArgumentValues();
          if (values.isEmpty() || myParameterIndex >= values.size()) {
            throw e;
          }
          return values.get(myParameterIndex);
        }
      }
      if (myCanScanFrames) {
        if (topFrame) {
          variable=resolveVariable(frameProxy,myLocalVariableName,context.getProject(),context.getDebugProcess());
          if (variable == null)           break;
        }
        if (threadProxy == null) {
          threadProxy=frameProxy.threadProxy();
          lastFrameIndex=threadProxy.frameCount() - 1;
        }
        int currentFrameIndex=frameProxy.getFrameIndex();
        if (currentFrameIndex < lastFrameIndex) {
          frameProxy=threadProxy.frame(currentFrameIndex + 1);
          if (frameProxy != null) {
            topFrame=false;
            continue;
          }
        }
      }
      break;
    }
    throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.local.variable.missing",myLocalVariableName));
  }
 catch (  EvaluateException e) {
    myEvaluatedVariable=null;
    myContext=null;
    throw e;
  }
}
