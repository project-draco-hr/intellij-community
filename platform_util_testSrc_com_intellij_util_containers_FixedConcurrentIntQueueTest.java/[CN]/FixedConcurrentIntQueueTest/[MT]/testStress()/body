{
  for (int k=0; k < 100; k++) {
    final int N=1 << 20;
    final FixedConcurrentIntQueue queue=new FixedConcurrentIntQueue(N,-1);
    final Thread[] threads=new Thread[8];
    final Set<Integer> result=new ConcurrentHashSet<Integer>();
    for (int i=0; i < threads.length; i++) {
      final int finalI=i;
      Thread thread=new Thread(new Runnable(){
        @Override public void run(){
          TIntArrayList evicted=new TIntArrayList();
          for (int i=N / threads.length * finalI; i < N / threads.length * finalI + N / threads.length; i++) {
            int f=queue.push(i);
            evicted.add(f);
          }
          for (          int f : evicted.toNativeArray()) {
            result.add(f);
          }
        }
      }
,i + "");
      threads[i]=thread;
      thread.start();
    }
    for (    Thread thread : threads) {
      thread.join();
    }
    int size=result.size();
    assertEquals(1,size);
    result.clear();
    for (int i=0; i < N; i++) {
      result.add(queue.queue.get(i));
    }
    assertEquals(N,result.size());
  }
}
