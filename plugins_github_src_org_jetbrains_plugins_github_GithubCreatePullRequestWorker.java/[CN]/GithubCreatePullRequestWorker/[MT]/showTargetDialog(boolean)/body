{
  final GithubInfo2 info=getAvailableForksInModal(myProject,myGitRepository,myAuthHolder,myPath);
  if (info == null) {
    return null;
  }
  if (firstTime) {
    if (info.getForks().size() == 1) {
      return info.getForks().iterator().next();
    }
    if (info.getForks().size() == 2) {
      Iterator<GithubFullPath> it=info.getForks().iterator();
      GithubFullPath path1=it.next();
      GithubFullPath path2=it.next();
      if (myPath.equals(path1)) {
        return path2;
      }
      if (myPath.equals(path2)) {
        return path1;
      }
    }
  }
  Convertor<String,GithubFullPath> getForkPath=new Convertor<String,GithubFullPath>(){
    @Nullable @Override public GithubFullPath convert(    @NotNull final String user){
      return GithubUtil.computeValueInModal(myProject,"Access to GitHub",new Convertor<ProgressIndicator,GithubFullPath>(){
        @Nullable @Override public GithubFullPath convert(        ProgressIndicator indicator){
          return findRepositoryByUser(myProject,myAuthHolder,indicator,user,info.getForks(),info.getSource());
        }
      }
);
    }
  }
;
  GithubSelectForkDialog dialog=new GithubSelectForkDialog(myProject,info.getForks(),getForkPath);
  DialogManager.show(dialog);
  if (!dialog.isOK()) {
    return null;
  }
  return dialog.getPath();
}
