{
  for (  ForkInfo fork : myForks) {
    if (StringUtil.equalsIgnoreCase(user,fork.getPath().getUser())) {
      return fork;
    }
  }
  try {
    GithubRepo repo=GithubUtil.runTask(myProject,myAuthHolder,indicator,new ThrowableConvertor<GithubConnection,GithubRepo,IOException>(){
      @Nullable @Override public GithubRepo convert(      @NotNull GithubConnection connection) throws IOException {
        try {
          GithubRepoDetailed target=GithubApiUtil.getDetailedRepoInfo(connection,user,mySource.getRepository());
          if (target.getSource() != null && StringUtil.equals(target.getSource().getUserName(),mySource.getUser())) {
            return target;
          }
        }
 catch (        IOException ignore) {
        }
        GithubRepo fork=GithubApiUtil.findForkByUser(connection,mySource.getUser(),mySource.getRepository(),user);
        if (fork != null) {
          return fork;
        }
        return null;
      }
    }
);
    return doAddFork(repo,indicator);
  }
 catch (  IOException e) {
    GithubNotifications.showError(myProject,"Can't find repository",e);
    return null;
  }
}
