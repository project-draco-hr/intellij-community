{
  return GithubUtil.computeValueInModal(project,"Loading data...",new Convertor<ProgressIndicator,GithubCreatePullRequestWorker>(){
    @Override public GithubCreatePullRequestWorker convert(    ProgressIndicator indicator){
      Git git=ServiceManager.getService(Git.class);
      GitRepository gitRepository=GithubUtil.getGitRepository(project,file);
      if (gitRepository == null) {
        GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,"Can't find git repository");
        return null;
      }
      gitRepository.update();
      Pair<GitRemote,String> remote=GithubUtil.findGithubRemote(gitRepository);
      if (remote == null) {
        GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,"Can't find GitHub remote");
        return null;
      }
      String remoteName=remote.getFirst().getName();
      String remoteUrl=remote.getSecond();
      GithubFullPath path=GithubUrlUtil.getUserAndRepositoryFromRemoteUrl(remoteUrl);
      if (path == null) {
        GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,"Can't process remote: " + remoteUrl);
        return null;
      }
      GitLocalBranch currentBranch=gitRepository.getCurrentBranch();
      if (currentBranch == null) {
        GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,"No current branch");
        return null;
      }
      GithubAuthDataHolder authHolder;
      try {
        authHolder=GithubUtil.getValidAuthDataHolderFromConfig(project,indicator);
      }
 catch (      IOException e) {
        GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,e);
        return null;
      }
      GithubCreatePullRequestWorker worker=new GithubCreatePullRequestWorker(project,git,gitRepository,authHolder,path,remoteName,remoteUrl,currentBranch.getName());
      try {
        worker.initForks(indicator);
      }
 catch (      IOException e) {
        GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,e);
        return null;
      }
      return worker;
    }
  }
);
}
