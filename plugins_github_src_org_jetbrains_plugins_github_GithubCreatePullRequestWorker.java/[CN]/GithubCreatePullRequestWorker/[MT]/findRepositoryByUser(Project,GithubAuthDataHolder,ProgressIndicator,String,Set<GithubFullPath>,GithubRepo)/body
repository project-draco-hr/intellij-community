{
  for (  GithubFullPath path : forks) {
    if (StringUtil.equalsIgnoreCase(user,path.getUser())) {
      return path;
    }
  }
  try {
    return GithubUtil.runTask(project,authHolder,indicator,new ThrowableConvertor<GithubConnection,GithubFullPath,IOException>(){
      @Nullable @Override public GithubFullPath convert(      @NotNull GithubConnection connection) throws IOException {
        try {
          GithubRepoDetailed target=GithubApiUtil.getDetailedRepoInfo(connection,user,source.getName());
          if (target.getSource() != null && StringUtil.equals(target.getSource().getUserName(),source.getUserName())) {
            return target.getFullPath();
          }
        }
 catch (        IOException ignore) {
        }
        GithubRepo fork=GithubApiUtil.findForkByUser(connection,source.getUserName(),source.getName(),user);
        if (fork != null) {
          return fork.getFullPath();
        }
        return null;
      }
    }
);
  }
 catch (  IOException e) {
    GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,e);
  }
  return null;
}
