{
  Couple<String> message=branch.getDefaultMessage();
  if (message != null)   return message;
  if (branch.getForkInfo().getRemoteName() == null) {
    return getSimpleDefaultDescriptionMessage(branch);
  }
  return GithubUtil.computeValueInModal(myProject,"Collecting additional data...",true,new Convertor<ProgressIndicator,Couple<String>>(){
    @Override public Couple<String> convert(    ProgressIndicator o){
      String localBranch=myCurrentBranch;
      String targetBranch=branch.getForkInfo().getRemoteName() + "/" + branch.getRemoteName();
      try {
        List<VcsCommitMetadata> commits=GitHistoryUtils.readLastCommits(myProject,myGitRepository.getRoot(),localBranch,targetBranch);
        if (commits == null)         return getSimpleDefaultDescriptionMessage(branch);
        VcsCommitMetadata localCommit=commits.get(0);
        VcsCommitMetadata targetCommit=commits.get(1);
        if (localCommit.getParents().contains(targetCommit.getId())) {
          return Couple.of(localCommit.getSubject(),localCommit.getFullMessage());
        }
        return getSimpleDefaultDescriptionMessage(branch);
      }
 catch (      VcsException e) {
        GithubNotifications.showWarning(myProject,"Can't collect additional data",e);
        return getSimpleDefaultDescriptionMessage(branch);
      }
    }
  }
);
}
