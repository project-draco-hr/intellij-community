{
  if (branch == null) {
    GithubNotifications.showWarningDialog(myProject,CANNOT_CREATE_PULL_REQUEST,"Target branch is not selected");
    return false;
  }
  DiffInfo info;
  try {
    info=GithubUtil.computeValueInModal(myProject,"Collecting diff data...",new ThrowableConvertor<ProgressIndicator,DiffInfo,IOException>(){
      @Override public DiffInfo convert(      ProgressIndicator indicator) throws IOException {
        return GithubUtil.runInterruptable(indicator,new ThrowableComputable<DiffInfo,IOException>(){
          @Override public DiffInfo compute() throws IOException {
            return getDiffInfo(branch);
          }
        }
);
      }
    }
);
  }
 catch (  IOException e) {
    GithubNotifications.showError(myProject,"Can't collect diff data",e);
    return true;
  }
  if (info == null) {
    return true;
  }
  ForkInfo fork=branch.getForkInfo();
  String localBranchName="'" + myCurrentBranch + "'";
  String targetBranchName="'" + fork.getRemoteName() + "/"+ branch.getRemoteName()+ "'";
  if (info.getInfo().getBranchToHeadCommits(myGitRepository).isEmpty()) {
    return GithubNotifications.showYesNoDialog(myProject,"Empty Pull Request","The branch " + localBranchName + " is fully merged to the branch "+ targetBranchName+ '\n'+ "Do you want to proceed anyway?");
  }
  if (!info.getInfo().getHeadToBranchCommits(myGitRepository).isEmpty()) {
    return GithubNotifications.showYesNoDialog(myProject,"Target Branch Is Not Fully Merged","The branch " + targetBranchName + " is not fully merged to the branch "+ localBranchName+ '\n'+ "Do you want to proceed anyway?");
  }
  return true;
}
