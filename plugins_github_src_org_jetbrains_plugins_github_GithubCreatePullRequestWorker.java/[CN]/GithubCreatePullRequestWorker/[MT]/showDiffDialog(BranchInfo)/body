{
  if (branch == null) {
    GithubNotifications.showWarningDialog(myProject,"Can't Show Diff","Target branch is not selected");
    return;
  }
  DiffInfo info;
  try {
    info=GithubUtil.computeValueInModal(myProject,"Collecting diff data...",new ThrowableConvertor<ProgressIndicator,DiffInfo,IOException>(){
      @Override public DiffInfo convert(      ProgressIndicator o) throws IOException {
        return getDiffInfo(branch);
      }
    }
);
  }
 catch (  IOException e) {
    GithubNotifications.showError(myProject,"Can't collect diff data",e);
    return;
  }
  if (info == null) {
    GithubNotifications.showErrorDialog(myProject,"Can't Show Diff","Can't collect diff data");
    return;
  }
  GitCompareBranchesDialog dialog=new GitCompareBranchesDialog(myProject,info.getTo(),info.getFrom(),info.getInfo(),myGitRepository);
  dialog.show();
}
