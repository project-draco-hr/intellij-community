{
  try {
    return GithubUtil.computeValueInModal(project,"Access to GitHub",new ThrowableConvertor<ProgressIndicator,GithubInfo2,IOException>(){
      @NotNull @Override public GithubInfo2 convert(      ProgressIndicator indicator) throws IOException {
        final Set<GithubFullPath> forks=new HashSet<GithubFullPath>();
        GithubRepoDetailed repo=GithubApiUtil.getDetailedRepoInfo(auth,path.getUser(),path.getRepository());
        forks.add(path);
        if (repo.getParent() != null) {
          forks.add(repo.getParent().getFullPath());
        }
        if (repo.getSource() != null) {
          forks.add(repo.getSource().getFullPath());
        }
        forks.addAll(getAvailableForksFromGit(gitRepository));
        GithubRepo forkTreeRoot=repo.getSource() == null ? repo : repo.getSource();
        return new GithubInfo2(forks,forkTreeRoot);
      }
    }
);
  }
 catch (  GithubOperationCanceledException e) {
    return null;
  }
catch (  IOException e) {
    GithubNotifications.showErrorDialog(project,CANNOT_CREATE_PULL_REQUEST,e);
    return null;
  }
}
