{
  try {
    return GithubUtil.runTask(project,authHolder,indicator,new ThrowableConvertor<GithubAuthData,GithubPullRequest,IOException>(){
      @NotNull @Override public GithubPullRequest convert(      @NotNull GithubAuthData auth) throws IOException {
        return GithubApiUtil.createPullRequest(auth,targetRepo.getUser(),targetRepo.getRepository(),title,description,head,base);
      }
    }
);
  }
 catch (  IOException e) {
    GithubNotifications.showError(project,CANNOT_CREATE_PULL_REQUEST,e);
    return null;
  }
}
