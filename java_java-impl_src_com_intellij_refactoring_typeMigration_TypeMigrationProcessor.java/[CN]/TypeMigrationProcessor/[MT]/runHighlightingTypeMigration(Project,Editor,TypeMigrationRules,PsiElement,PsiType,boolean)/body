{
  final PsiFile containingFile=root.getContainingFile();
  final TypeMigrationProcessor processor=new TypeMigrationProcessor(project,root,migrationType,rules){
    @Override public void performRefactoring(    @NotNull final UsageInfo[] usages){
      super.performRefactoring(usages);
      if (editor != null) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            final List<PsiElement> result=new ArrayList<PsiElement>();
            for (            UsageInfo usage : usages) {
              final PsiElement element=usage.getElement();
              if (element == null || containingFile != element.getContainingFile())               continue;
              if (element instanceof PsiMethod) {
                result.add(((PsiMethod)element).getReturnTypeElement());
              }
 else               if (element instanceof PsiVariable) {
                result.add(((PsiVariable)element).getTypeElement());
              }
 else {
                result.add(element);
              }
            }
            RefactoringUtil.highlightAllOccurrences(project,PsiUtilCore.toPsiElementArray(result),editor);
          }
        }
);
      }
      if (optimizeImports) {
        final JavaCodeStyleManager javaCodeStyleManager=JavaCodeStyleManager.getInstance(myProject);
        final Set<PsiFile> affectedFiles=new THashSet<PsiFile>();
        for (        UsageInfo usage : usages) {
          final PsiFile usageFile=usage.getFile();
          if (usageFile != null) {
            affectedFiles.add(usageFile);
          }
        }
        for (        PsiFile file : affectedFiles) {
          javaCodeStyleManager.optimizeImports(file);
          javaCodeStyleManager.shortenClassReferences(file);
        }
      }
    }
  }
;
  processor.run();
}
