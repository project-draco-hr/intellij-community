{
  final PsiClass languageClass=DomJavaUtil.findClass(Language.class.getName(),context.getInvocationElement());
  if (languageClass == null) {
    return Collections.emptyList();
  }
  final Project project=context.getProject();
  final GlobalSearchScope projectProductionScope=GlobalSearchScopesCore.projectProductionScope(project);
  final Collection<PsiClass> allLanguages=CachedValuesManager.getCachedValue(languageClass,new CachedValueProvider<Collection<PsiClass>>(){
    @Nullable @Override public Result<Collection<PsiClass>> compute(){
      GlobalSearchScope allScope=projectProductionScope.union(ProjectScope.getLibrariesScope(project));
      return Result.create(ClassInheritorsSearch.search(languageClass,allScope,true).findAll(),PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);
    }
  }
);
  ;
  final List<LanguageDefinition> libraryDefinitions=collectLibraryLanguages(context,allLanguages);
  final Collection<PsiClass> projectLanguages=ContainerUtil.filter(allLanguages,new Condition<PsiClass>(){
    @Override public boolean value(    PsiClass aClass){
      return PsiSearchScopeUtil.isInScope(projectProductionScope,aClass);
    }
  }
);
  final List<LanguageDefinition> projectDefinitions=collectProjectLanguages(projectLanguages,libraryDefinitions);
  final List<LanguageDefinition> all=new ArrayList<LanguageDefinition>(libraryDefinitions);
  all.addAll(projectDefinitions);
  return all;
}
