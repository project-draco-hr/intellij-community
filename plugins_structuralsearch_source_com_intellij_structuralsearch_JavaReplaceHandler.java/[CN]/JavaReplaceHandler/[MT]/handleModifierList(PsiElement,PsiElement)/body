{
  Map<String,String> newNameToSearchPatternNameMap=myContext.getNewName2PatternNameMap();
  ModifierListOwnerCollector collector=new ModifierListOwnerCollector();
  el.accept(collector);
  Map<String,PsiNamedElement> originalNamedElements=(Map<String,PsiNamedElement>)collector.namedElements.clone();
  collector.namedElements.clear();
  replacement.accept(collector);
  Map<String,PsiNamedElement> replacedNamedElements=(Map<String,PsiNamedElement>)collector.namedElements.clone();
  collector.namedElements.clear();
  if (originalNamedElements.size() == 0 && replacedNamedElements.size() == 0) {
    ReplacerImpl.handleComments(el,replacement,myContext);
    return;
  }
  final PsiStatement[] statements=getCodeBlock().getStatements();
  if (statements.length > 0) {
    statements[0].getParent().accept(collector);
  }
  Map<String,PsiNamedElement> searchedNamedElements=(Map<String,PsiNamedElement>)collector.namedElements.clone();
  collector.namedElements.clear();
  for (  String name : originalNamedElements.keySet()) {
    PsiNamedElement originalNamedElement=originalNamedElements.get(name);
    PsiNamedElement replacementNamedElement=replacedNamedElements.get(name);
    String key=newNameToSearchPatternNameMap.get(name);
    if (key == null)     key=name;
    PsiNamedElement searchNamedElement=searchedNamedElements.get(key);
    if (replacementNamedElement == null && originalNamedElements.size() == 1 && replacedNamedElements.size() == 1) {
      replacementNamedElement=replacedNamedElements.entrySet().iterator().next().getValue();
    }
    PsiElement comment=null;
    if (originalNamedElement instanceof PsiDocCommentOwner) {
      comment=((PsiDocCommentOwner)originalNamedElement).getDocComment();
      if (comment == null) {
        PsiElement prevElement=originalNamedElement.getPrevSibling();
        if (prevElement instanceof PsiWhiteSpace) {
          prevElement=prevElement.getPrevSibling();
        }
        if (prevElement instanceof PsiComment) {
          comment=prevElement;
        }
      }
    }
    if (replacementNamedElement != null && searchNamedElement != null) {
      ReplacerImpl.handleComments(originalNamedElement,replacementNamedElement,myContext);
    }
    if (comment != null && replacementNamedElement instanceof PsiDocCommentOwner && !(replacementNamedElement.getFirstChild() instanceof PsiDocComment)) {
      final PsiElement nextSibling=comment.getNextSibling();
      PsiElement prevSibling=comment.getPrevSibling();
      replacementNamedElement.addRangeBefore(prevSibling instanceof PsiWhiteSpace ? prevSibling : comment,nextSibling instanceof PsiWhiteSpace ? nextSibling : comment,replacementNamedElement.getFirstChild());
    }
    if (originalNamedElement instanceof PsiModifierListOwner && replacementNamedElement instanceof PsiModifierListOwner) {
      PsiModifierList modifierList=((PsiModifierListOwner)originalNamedElements.get(name)).getModifierList();
      if (searchNamedElement instanceof PsiModifierListOwner && ((PsiModifierListOwner)searchNamedElement).getModifierList().getTextLength() == 0 && ((PsiModifierListOwner)replacementNamedElement).getModifierList().getTextLength() == 0 && modifierList.getTextLength() > 0) {
        final PsiModifierListOwner modifierListOwner=((PsiModifierListOwner)replacementNamedElement);
        PsiElement space=modifierList.getNextSibling();
        if (!(space instanceof PsiWhiteSpace)) {
          space=createWhiteSpace(space);
        }
        modifierListOwner.getModifierList().replace(modifierList);
        if (space instanceof PsiWhiteSpace) {
          modifierListOwner.addRangeAfter(space,space,modifierListOwner.getModifierList());
        }
      }
    }
  }
}
