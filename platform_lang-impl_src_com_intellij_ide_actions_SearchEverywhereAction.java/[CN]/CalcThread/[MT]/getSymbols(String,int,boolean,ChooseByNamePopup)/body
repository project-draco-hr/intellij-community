{
  final SearchResult symbols=new SearchResult();
  if (!Registry.is("search.everywhere.symbols") || shouldSkipPattern(pattern)) {
    return symbols;
  }
  final GlobalSearchScope scope=GlobalSearchScope.projectScope(project);
  if (chooseByNamePopup == null)   return symbols;
  final ChooseByNameItemProvider provider=chooseByNamePopup.getProvider();
  provider.filterElements(chooseByNamePopup,pattern,includeLibs,myProgressIndicator,new Processor<Object>(){
    @Override public boolean process(    Object o){
      if (SearchEverywhereClassifier.EP_Manager.isSymbol(o) && !myListModel.contains(o) && !symbols.contains(o)) {
        PsiElement element=null;
        if (o instanceof PsiElement) {
          element=(PsiElement)o;
        }
 else         if (o instanceof PsiElementNavigationItem) {
          element=((PsiElementNavigationItem)o).getTargetElement();
        }
        VirtualFile virtualFile=SearchEverywhereClassifier.EP_Manager.getVirtualFile(o);
        boolean isElementWithoutFile=element != null && element.getContainingFile() == null;
        boolean isFileInScope=virtualFile != null && (includeLibs || scope.accept(virtualFile));
        if (isElementWithoutFile || isFileInScope) {
          symbols.add(o);
        }
      }
      symbols.needMore=symbols.size() == max;
      return !symbols.needMore;
    }
  }
);
  if (!includeLibs && symbols.isEmpty()) {
    return getSymbols(pattern,max,true,chooseByNamePopup);
  }
  return symbols;
}
