{
  try {
    check();
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        myList.getEmptyText().setText("Searching...");
        myAlarm.cancelAllRequests();
        if (myList.getModel() instanceof SearchListModel) {
          myAlarm.addRequest(new Runnable(){
            @Override public void run(){
              if (!myDone.isRejected()) {
                myList.setModel(myListModel);
                updatePopup();
              }
            }
          }
,50);
        }
 else {
          myList.setModel(myListModel);
        }
      }
    }
);
    if (pattern.trim().length() == 0) {
      buildModelFromRecentFiles();
      updatePopup();
      return;
    }
    checkModelsUpToDate();
    check();
    buildTopHit(pattern);
    check();
    if (!pattern.startsWith("#")) {
      buildRecentFiles(pattern);
      check();
      updatePopup();
      check();
      buildToolWindows(pattern);
      check();
      updatePopup();
      check();
      runReadAction(new Runnable(){
        public void run(){
          buildRunConfigurations(pattern);
        }
      }
,true);
      runReadAction(new Runnable(){
        public void run(){
          buildClasses(pattern);
        }
      }
,true);
      runReadAction(new Runnable(){
        public void run(){
          buildFiles(pattern);
        }
      }
,false);
      buildActionsAndSettings(pattern);
      updatePopup();
      runReadAction(new Runnable(){
        public void run(){
          buildSymbols(pattern);
        }
      }
,true);
    }
    updatePopup();
  }
 catch (  ProcessCanceledException ignore) {
    myDone.setRejected();
  }
catch (  Exception e) {
    LOG.error(e);
    myDone.setRejected();
  }
 finally {
    if (!isCanceled()) {
      myList.getEmptyText().setText(StatusText.DEFAULT_EMPTY_TEXT);
      updatePopup();
    }
    if (!myDone.isProcessed()) {
      myDone.setDone();
    }
  }
}
