{
  field=new MySearchTextField();
  final JTextField editor=field.getTextEditor();
  onFocusLost(editor);
  editor.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      final String pattern=editor.getText();
      myAlarm.cancelAllRequests();
      myAlarm.addRequest(new Runnable(){
        @Override public void run(){
          if (StringUtil.isEmpty(pattern.trim())) {
            SwingUtilities.invokeLater(new Runnable(){
              @Override public void run(){
                if (myPopup != null && myPopup.isVisible()) {
                  myPopup.cancel();
                }
              }
            }
);
            return;
          }
          rebuildList(pattern);
        }
      }
,Registry.intValue("ide.goto.rebuild.delay"));
    }
  }
);
  editor.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    FocusEvent e){
      field.setText("");
      field.getTextEditor().setForeground(UIUtil.getLabelForeground());
      editor.setColumns(25);
      myFocusComponent=e.getOppositeComponent();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          final JComponent parent=(JComponent)editor.getParent();
          parent.revalidate();
          parent.repaint();
        }
      }
);
    }
    @Override public void focusLost(    FocusEvent e){
      onFocusLost(editor);
    }
  }
);
  editor.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      int keyCode=e.getKeyCode();
      if (keyCode == KeyEvent.VK_ESCAPE && (myPopup == null || !myPopup.isVisible())) {
        IdeFocusManager focusManager=IdeFocusManager.findInstanceByComponent(editor);
        focusManager.requestDefaultFocus(true);
      }
 else       if (keyCode == KeyEvent.VK_ENTER) {
        doNavigate();
      }
    }
  }
);
}
