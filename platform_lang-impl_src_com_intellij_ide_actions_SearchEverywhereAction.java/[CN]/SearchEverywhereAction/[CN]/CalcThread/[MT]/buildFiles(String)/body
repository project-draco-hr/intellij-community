{
  int filesCounter=0;
  if (myFiles == null) {
    myFiles=myFileModel.getNames(false);
  }
  final Set<Object> elements=new LinkedHashSet<Object>();
  final GlobalSearchScope scope=GlobalSearchScope.projectScope(project);
  myFileChooseByName.getProvider().filterElements(myFileChooseByName,pattern,true,myProgressIndicator,new Processor<Object>(){
    @Override public boolean process(    Object o){
      VirtualFile file=null;
      if (o instanceof VirtualFile) {
        file=(VirtualFile)o;
      }
 else       if (o instanceof PsiFile) {
        file=((PsiFile)o).getVirtualFile();
      }
 else       if (o instanceof PsiDirectory) {
        file=((PsiDirectory)o).getVirtualFile();
      }
      if (file != null && scope.accept(file)) {
        elements.add(o);
      }
      return elements.size() < 30;
    }
  }
);
  final List<Object> files=new ArrayList<Object>();
  final int maxFiles=8;
  for (  Object object : elements) {
    if (filesCounter > maxFiles)     break;
    if (!myListModel.contains(object)) {
      if (object instanceof PsiFile) {
        object=((PsiFile)object).getVirtualFile();
      }
      if ((object instanceof VirtualFile || object instanceof PsiDirectory) && !myAlreadyAddedFiles.contains(object)) {
        files.add(object);
        if (object instanceof VirtualFile) {
          myAlreadyAddedFiles.add((VirtualFile)object);
        }
        filesCounter++;
        if (filesCounter > maxFiles)         break;
      }
    }
  }
  myProgressIndicator.checkCanceled();
  if (files.size() > 0) {
    UIUtil.invokeLaterIfNeeded(new Runnable(){
      @Override public void run(){
        if (!myProgressIndicator.isCanceled()) {
          myTitleIndexes.files=myListModel.size();
          for (          Object file : files) {
            myListModel.addElement(file);
          }
          myMoreFilesIndex=files.size() >= maxFiles ? myListModel.size() - 1 : -1;
        }
      }
    }
);
  }
}
