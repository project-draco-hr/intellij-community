{
  if (pattern.indexOf('.') != -1) {
    return;
  }
  check();
  boolean includeLibs=includeLibraries || showAll.get();
  int filesCounter=0;
  final Set<Object> elements=new LinkedHashSet<Object>();
  myClassChooseByName.getProvider().filterElements(myClassChooseByName,pattern,includeLibs,myProgressIndicator,new Processor<Object>(){
    @Override public boolean process(    Object o){
      elements.add(o);
      return elements.size() < 30;
    }
  }
);
  final List<Object> classes=new ArrayList<Object>();
  for (  Object object : elements) {
    check();
    if (filesCounter > MAX_FILES)     break;
    if (!myListModel.contains(object)) {
      if (object instanceof PsiElement) {
        classes.add(object);
      }
      filesCounter++;
      if (filesCounter > MAX_FILES)       break;
    }
  }
  check();
  if (classes.size() > 0) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        if (isCanceled())         return;
        myListModel.myTitleIndexes.classes=myListModel.size();
        for (        Object file : classes) {
          myListModel.addElement(file);
        }
        myListModel.myMoreClassesIndex=classes.size() >= MAX_CLASSES ? myListModel.size() - 1 : -1;
      }
    }
);
  }
 else {
    if (!includeLibs) {
      buildClasses(pattern,true);
    }
  }
}
