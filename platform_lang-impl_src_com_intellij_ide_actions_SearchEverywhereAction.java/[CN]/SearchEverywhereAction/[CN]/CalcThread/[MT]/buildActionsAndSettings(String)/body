{
  final Set<AnAction> actions=new HashSet<AnAction>();
  final Set<Object> settings=new HashSet<Object>();
  final HashSet<AnAction> toolWindows=new HashSet<AnAction>();
  List<MatchResult> matches=collectResults(pattern,myActions,myActionModel);
  for (  MatchResult o : matches) {
    myProgressIndicator.checkCanceled();
    Object[] objects=myActionModel.getElementsByName(o.elementName,true,pattern);
    for (    Object object : objects) {
      myProgressIndicator.checkCanceled();
      if (isSetting(object) && settings.size() < 5) {
        settings.add(object);
      }
 else       if (isToolWindowAction(object) && toolWindows.size() < 10) {
        toolWindows.add((AnAction)((Map.Entry)object).getKey());
      }
 else       if (isActionValue(object) && actions.size() < 5) {
        actions.add((AnAction)((Map.Entry)object).getKey());
      }
    }
  }
  myProgressIndicator.checkCanceled();
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      if (myProgressIndicator.isCanceled())       return;
      if (toolWindows.size() > 0) {
        myTitleIndexes.toolWindows=myListModel.size();
        for (        Object toolWindow : toolWindows) {
          myListModel.addElement(toolWindow);
        }
      }
      if (actions.size() > 0) {
        myTitleIndexes.actions=myListModel.size();
        for (        Object action : actions) {
          myListModel.addElement(action);
        }
      }
      myMoreActionsIndex=actions.size() >= 5 ? myListModel.size() - 1 : -1;
      if (settings.size() > 0) {
        myTitleIndexes.settings=myListModel.size();
        for (        Object setting : settings) {
          myListModel.addElement(setting);
        }
      }
      myMoreSettingsIndex=settings.size() >= 5 ? myListModel.size() - 1 : -1;
    }
  }
);
}
