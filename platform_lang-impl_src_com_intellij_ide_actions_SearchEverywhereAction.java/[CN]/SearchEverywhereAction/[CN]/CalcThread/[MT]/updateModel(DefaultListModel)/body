{
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      myProgressIndicator.checkCanceled();
      final DataContext dataContext=DataManager.getInstance().getDataContext(myContextComponent);
      int settings=0;
      int actions=0;
      final DefaultListModel model=new DefaultListModel();
      final String pattern=field.getText();
      final Consumer<Object> consumer=new Consumer<Object>(){
        @Override public void consume(        Object o){
          if (isSetting(o) || isVirtualFile(o) || isActionValue(o)|| o instanceof PsiElement) {
            model.addElement(o);
          }
        }
      }
;
      for (      SearchTopHitProvider provider : SearchTopHitProvider.EP_NAME.getExtensions()) {
        provider.consumeTopHits(pattern,consumer);
      }
      myTopHitsCount=model.size();
      for (      Object o : listModel.toArray()) {
        if (model.contains(o)) {
          continue;
        }
        if (isSetting(o)) {
          if (settings < 15) {
            settings++;
            model.addElement(o);
          }
        }
 else         if (isActionValue(o)) {
          if (actions < 15) {
            final AnAction action=(AnAction)((Map.Entry)o).getKey();
            if (model.contains(action)) {
              continue;
            }
            final AnActionEvent event=GotoActionModel.updateActionBeforeShow(action,dataContext);
            if (event.getPresentation().isEnabledAndVisible()) {
              actions++;
              model.addElement(action);
            }
          }
        }
 else {
          model.addElement(o);
        }
      }
      myList.setModel(model);
      myRenderer.recalculateWidth();
      if (myPopup == null || !myPopup.isVisible()) {
        final ActionCallback callback=ListDelegationUtil.installKeyboardDelegation(field.getTextEditor(),myList);
        myPopup=JBPopupFactory.getInstance().createListPopupBuilder(myList).setRequestFocus(false).createPopup();
        Disposer.register(myPopup,new Disposable(){
          @Override public void dispose(){
            callback.setDone();
          }
        }
);
        myPopup.showUnderneathOf(field);
        ActionManager.getInstance().addAnActionListener(new AnActionListener.Adapter(){
          @Override public void beforeActionPerformed(          AnAction action,          DataContext dataContext,          AnActionEvent event){
            myPopup.cancel();
          }
        }
,myPopup);
      }
 else {
        myList.revalidate();
        myList.repaint();
      }
      ListScrollingUtil.ensureSelectionExists(myList);
      if (myList.getModel().getSize() == 0) {
        myPopup.cancel();
      }
 else {
        final Dimension size=myList.getPreferredSize();
        myPopup.setSize(new Dimension(Math.min(600,Math.max(field.getWidth(),size.width + 15)),Math.min(600,size.height + 10)));
        final Point screen=field.getLocationOnScreen();
        final int x=screen.x + field.getWidth() - myPopup.getSize().width;
        myPopup.setLocation(new Point(x,myPopup.getLocationOnScreen().y));
      }
    }
  }
);
}
