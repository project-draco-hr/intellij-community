{
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      myProgressIndicator.checkCanceled();
      myList.setModel(listModel);
      if (myPopup == null || !myPopup.isVisible()) {
        final ActionCallback callback=ListDelegationUtil.installKeyboardDelegation(field.getTextEditor(),myList);
        myPopup=JBPopupFactory.getInstance().createListPopupBuilder(myList).setRequestFocus(false).createPopup();
        Disposer.register(myPopup,new Disposable(){
          @Override public void dispose(){
            callback.setDone();
          }
        }
);
        myPopup.showUnderneathOf(field);
        ActionManager.getInstance().addAnActionListener(new AnActionListener.Adapter(){
          @Override public void beforeActionPerformed(          AnAction action,          DataContext dataContext,          AnActionEvent event){
            myPopup.cancel();
          }
        }
,myPopup);
      }
 else {
        myList.revalidate();
        myList.repaint();
      }
      ListScrollingUtil.ensureSelectionExists(myList);
      if (myList.getModel().getSize() == 0) {
        myPopup.cancel();
      }
 else {
        final Dimension size=myList.getPreferredSize();
        myPopup.setSize(new Dimension(Math.min(600,Math.max(field.getWidth(),size.width + 15)),Math.min(600,size.height + 10)));
        final Point screen=field.getLocationOnScreen();
        final int x=screen.x + field.getWidth() - myPopup.getSize().width;
        myPopup.setLocation(new Point(x,myPopup.getLocationOnScreen().y));
      }
    }
  }
);
}
