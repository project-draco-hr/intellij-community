{
  int symbolCounter=0;
  if (mySymbols == null) {
    mySymbols=mySymbolsModel.getNames(false);
  }
  List<MatchResult> matches=collectResults(pattern,mySymbols,mySymbolsModel);
  final List<Object> symbols=new ArrayList<Object>();
  final int maxFiles=8;
  for (  MatchResult o : matches) {
    if (symbolCounter > maxFiles)     break;
    Object[] objects=mySymbolsModel.getElementsByName(o.elementName,false,pattern);
    for (    Object object : objects) {
      if (!myListModel.contains(object)) {
        symbols.add(object);
        symbolCounter++;
        if (symbolCounter > maxFiles)         break;
      }
    }
  }
  myProgressIndicator.checkCanceled();
  if (symbols.size() > 0) {
    UIUtil.invokeAndWaitIfNeeded(new Runnable(){
      @Override public void run(){
        if (!myProgressIndicator.isCanceled()) {
          myTitleIndexes.symbols=myListModel.size();
          for (          Object file : symbols) {
            myListModel.addElement(file);
          }
          myMoreFilesIndex=symbols.size() >= maxFiles ? myListModel.size() - 1 : -1;
        }
      }
    }
);
  }
}
