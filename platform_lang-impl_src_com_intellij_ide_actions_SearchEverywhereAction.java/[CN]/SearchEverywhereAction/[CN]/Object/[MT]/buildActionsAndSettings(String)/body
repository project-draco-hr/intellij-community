{
  final Set<java.lang.Object> actions=new HashSet<java.lang.Object>();
  final Set<java.lang.Object> settings=new HashSet<java.lang.Object>();
  final MinusculeMatcher matcher=new MinusculeMatcher("*" + pattern,NameUtil.MatchingCaseSensitivity.NONE);
  if (myActions == null) {
    if (myActionModel == null) {
      myActionModel=createActionModel();
    }
    myActions=myActionModel.getNames(true);
  }
  List<MatchResult> matches=collectResults(pattern,myActions,myActionModel);
  for (  MatchResult o : matches) {
    check();
    java.lang.Object[] objects=myActionModel.getElementsByName(o.elementName,true,pattern);
    for (    java.lang.Object object : objects) {
      check();
      if (isSetting(object) && settings.size() < MAX_SETTINGS) {
        if (matcher.matches(getSettingText((OptionDescription)object))) {
          settings.add(object);
        }
      }
 else       if (!isToolWindowAction(object) && isActionValue(object) && actions.size() < MAX_ACTIONS) {
        actions.add(object);
      }
    }
  }
  check();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      if (isCanceled())       return;
      if (actions.size() > 0) {
        myListModel.myTitleIndexes.actions=myListModel.size();
        for (        java.lang.Object action : actions) {
          myListModel.addElement(action);
        }
      }
      myListModel.myMoreActionsIndex=actions.size() >= MAX_ACTIONS ? myListModel.size() - 1 : -1;
      if (settings.size() > 0) {
        myListModel.myTitleIndexes.settings=myListModel.size();
        for (        java.lang.Object setting : settings) {
          myListModel.addElement(setting);
        }
      }
      myListModel.myMoreSettingsIndex=settings.size() >= MAX_SETTINGS ? myListModel.size() - 1 : -1;
    }
  }
);
}
