{
  check();
  int symbolsCounter=0;
  final Set<java.lang.Object> elements=new LinkedHashSet<java.lang.Object>();
  final GlobalSearchScope scope=GlobalSearchScope.projectScope(project);
  mySymbolsChooseByName.getProvider().filterElements(mySymbolsChooseByName,pattern,false,myProgressIndicator,new Processor<java.lang.Object>(){
    @Override public boolean process(    java.lang.Object o){
      if (o instanceof PsiElement) {
        final PsiElement element=(PsiElement)o;
        final PsiFile file=element.getContainingFile();
        if (file != null && file.getVirtualFile() != null && scope.accept(file.getVirtualFile())) {
          elements.add(o);
        }
      }
      return elements.size() < 30;
    }
  }
);
  final List<java.lang.Object> symbols=new ArrayList<java.lang.Object>();
  for (  java.lang.Object object : elements) {
    if (symbolsCounter > MAX_SYMBOLS)     break;
    if (!myListModel.contains(object)) {
      symbols.add(object);
      symbolsCounter++;
      if (symbolsCounter > MAX_SYMBOLS)       break;
    }
  }
  check();
  if (symbols.size() > 0) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        if (isCanceled())         return;
        myListModel.myTitleIndexes.symbols=myListModel.size();
        for (        java.lang.Object file : symbols) {
          myListModel.addElement(file);
        }
        myListModel.myMoreSymbolsIndex=symbols.size() >= MAX_SYMBOLS ? myListModel.size() - 1 : -1;
      }
    }
);
  }
}
