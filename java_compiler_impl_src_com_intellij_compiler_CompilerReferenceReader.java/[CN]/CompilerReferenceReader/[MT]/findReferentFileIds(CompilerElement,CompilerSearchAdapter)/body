{
  LightUsage usage=null;
  for (  CompilerElementAsLightUsageConverter converter : CompilerElementAsLightUsageConverter.INSTANCES) {
    usage=converter.asLightUsage(element,myIndex.getByteSeqEum());
    if (usage != null) {
      break;
    }
  }
  LOG.assertTrue(usage != null);
  TIntHashSet set=new TIntHashSet();
  if (adapter.needOverrideElement()) {
    for (    int classId : getWholeHierarchy(usage.getOwner())) {
      final LightUsage overriderUsage=usage.override(classId);
      addUsages(overriderUsage,set);
    }
  }
 else {
    addUsages(usage,set);
  }
  return set;
}
