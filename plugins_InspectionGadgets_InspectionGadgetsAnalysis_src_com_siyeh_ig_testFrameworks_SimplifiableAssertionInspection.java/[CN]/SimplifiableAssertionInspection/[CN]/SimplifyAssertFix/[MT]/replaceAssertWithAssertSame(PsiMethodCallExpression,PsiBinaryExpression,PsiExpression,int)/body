{
  PsiExpression lhs=position.getLOperand();
  PsiExpression rhs=position.getROperand();
  final IElementType tokenType=position.getOperationTokenType();
  if (!(lhs instanceof PsiLiteralExpression) && rhs instanceof PsiLiteralExpression) {
    final PsiExpression temp=lhs;
    lhs=rhs;
    rhs=temp;
  }
  if (rhs == null) {
    return;
  }
  @NonNls final StringBuilder newExpression=new StringBuilder();
  final PsiReferenceExpression methodExpression=callExpression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  @NonNls final String memberName;
  if ("assertFalse".equals(methodName) ^ tokenType.equals(JavaTokenType.NE)) {
    memberName="assertNotSame";
  }
 else {
    memberName="assertSame";
  }
  compoundMethodCall(callExpression,memberName,message,positionIndex,lhs.getText() + "," + rhs.getText(),newExpression);
  PsiReplacementUtil.replaceExpressionAndShorten(callExpression,newExpression.toString());
}
