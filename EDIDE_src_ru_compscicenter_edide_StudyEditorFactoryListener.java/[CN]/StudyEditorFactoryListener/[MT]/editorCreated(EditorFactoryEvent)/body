{
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          try {
            final Editor editor=event.getEditor();
            VirtualFile vfOpenedFile=FileDocumentManager.getInstance().getFile(editor.getDocument());
            if (vfOpenedFile != null) {
              if (fileChanged(vfOpenedFile)) {
                return;
              }
              TaskManager taskManager=TaskManager.getInstance();
              int currentTask=taskManager.getTaskNumForFile(vfOpenedFile.getName());
              int finishedTask=taskManager.getCurrentTask();
              if (currentTask < finishedTask) {
                return;
              }
              int startOffset0=0;
              final Project project=editor.getProject();
              if (project == null) {
                return;
              }
              PsiFile psiOpenFile=PsiManager.getInstance(project).findFile(vfOpenedFile);
              final TemplateBuilder builder=TemplateBuilderFactory.getInstance().createTemplateBuilder(psiOpenFile);
              for (int i=0; i < taskManager.getTaskFile(currentTask,vfOpenedFile.getName()).getTaskWindowNum(); i++) {
                TaskWindow tw=taskManager.getTaskFile(currentTask,vfOpenedFile.getName()).getTaskWindowByIndex(i);
                int line=tw.getLine() - 1;
                int lineOffset=editor.getDocument().getLineStartOffset(line);
                int startOffset=lineOffset + tw.getStartOffset();
                if (i == 0) {
                  startOffset0=startOffset;
                }
                String textToWrite=tw.getText();
                editor.getDocument().createRangeMarker(startOffset,startOffset + textToWrite.length());
                int endOffset=startOffset + textToWrite.length();
                TextRange range=new TextRange(startOffset,endOffset);
                builder.replaceRange(range,textToWrite);
              }
              final int finalStartOffset=startOffset0;
              CommandProcessor.getInstance().executeCommand(project,new Runnable(){
                @Override public void run(){
                  Template template=((TemplateBuilderImpl)builder).buildInlineTemplate();
                  TemplateManager.getInstance(project).startTemplate(editor,template);
                  editor.getCaretModel().moveToOffset(finalStartOffset);
                }
              }
,null,null);
            }
          }
 catch (          Exception e) {
            Log.print("Something wrong with meta file:" + e.getCause());
            Log.print(String.valueOf(e.getStackTrace()));
            Log.print(e.getMessage());
            Log.flush();
          }
        }
      }
);
    }
  }
);
}
