{
  Symbol.ClassSymbol sym=((JCTree.JCClassDecl)node).sym;
  sink.sinkReference(new JavacRefSymbol(sym,Tree.Kind.CLASS));
  Type superclass=sym.getSuperclass();
  List<Type> interfaces=sym.getInterfaces();
  final Symbol[] supers;
  if (superclass != Type.noType) {
    supers=new Symbol[interfaces.size() + 1];
    supers[interfaces.size()]=superclass.asElement();
  }
 else {
    supers=interfaces.isEmpty() ? EMPTY_SYMBOL_ARRAY : new Symbol[interfaces.size()];
  }
  int i=0;
  for (  Type anInterface : interfaces) {
    supers[i++]=anInterface.asElement();
  }
  sink.sinkClassDeclaration(sym,supers);
  return super.visitClass(node,sink);
}
