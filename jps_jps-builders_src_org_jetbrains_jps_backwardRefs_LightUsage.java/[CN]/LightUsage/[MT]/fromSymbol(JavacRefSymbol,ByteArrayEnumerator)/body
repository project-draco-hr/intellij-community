{
  Symbol symbol=refSymbol.getSymbol();
  final Tree.Kind kind=refSymbol.getPlaceKind();
  if (symbol instanceof Symbol.ClassSymbol) {
    if (kind == LAMBDA_EXPRESSION || kind == MEMBER_REFERENCE) {
      return new LightFunExprUsage(id(symbol,byteArrayEnumerator),((JavacDefSymbol)refSymbol).getOffset());
    }
 else     if (!isPrivate(symbol) && !symbol.isAnonymous()) {
      return new LightClassUsage(id(symbol,byteArrayEnumerator));
    }
  }
 else {
    Symbol owner=symbol.owner;
    if (isPrivate(symbol)) {
      return null;
    }
    if (symbol instanceof Symbol.VarSymbol) {
      return new LightFieldUsage(id(owner,byteArrayEnumerator),id(symbol,byteArrayEnumerator));
    }
 else     if (symbol instanceof Symbol.MethodSymbol) {
      int paramCount=((Symbol.MethodSymbol)symbol).type.getParameterTypes().size();
      return new LightMethodUsage(id(owner,byteArrayEnumerator),id(symbol,byteArrayEnumerator),paramCount);
    }
 else {
      throw new AssertionError("unexpected symbol: " + symbol + " class: "+ symbol.getClass()+ " kind: "+ kind);
    }
  }
  return null;
}
