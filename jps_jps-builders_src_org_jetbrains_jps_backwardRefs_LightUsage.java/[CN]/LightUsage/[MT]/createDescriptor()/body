{
  return new KeyDescriptor<LightUsage>(){
    @Override public int getHashCode(    LightUsage value){
      return value.hashCode();
    }
    @Override public boolean isEqual(    LightUsage val1,    LightUsage val2){
      return val1.equals(val2);
    }
    @Override public void save(    @NotNull DataOutput out,    LightUsage value) throws IOException {
      value.save(out);
    }
    @Override public LightUsage read(    @NotNull DataInput in) throws IOException {
      final byte type=in.readByte();
switch (type) {
case CLASS_MARKER:
        return new LightClassUsage(DataInputOutputUtil.readINT(in));
case METHOD_MARKER:
      return new LightMethodUsage(DataInputOutputUtil.readINT(in),DataInputOutputUtil.readINT(in),DataInputOutputUtil.readINT(in));
case FIELD_MARKER:
    return new LightFieldUsage(DataInputOutputUtil.readINT(in),DataInputOutputUtil.readINT(in));
}
throw new AssertionError();
}
}
;
}
