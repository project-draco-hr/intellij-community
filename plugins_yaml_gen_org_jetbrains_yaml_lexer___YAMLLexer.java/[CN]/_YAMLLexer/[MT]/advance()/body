{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    int zzAttributes=zzAttrL[zzState];
    if ((zzAttributes & 1) == 1) {
      zzAction=zzState;
    }
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL) {
          zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL);
          zzCurrentPosL+=Character.charCount(zzInput);
        }
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL);
            zzCurrentPosL+=Character.charCount(zzInput);
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
      zzAtEOF=true;
      zzDoEOF();
      return null;
    }
 else {
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 1:
{
          return tokenOrForbidden(TEXT);
        }
case 27:
      break;
case 2:
{
      if (braceCount == 0) {
        yyBegin(YYINITIAL);
      }
      currentLineIndent=0;
      return EOL;
    }
case 28:
  break;
case 3:
{
  return TEXT;
}
case 29:
break;
case 4:
{
if (braceCount > 0) {
yyBegin(BRACES);
return COMMA;
}
yyBegin(VALUE);
return TEXT;
}
case 30:
break;
case 5:
{
return QUESTION;
}
case 31:
break;
case 6:
{
return (isAfterEol() || isAfterSpace()) ? COMMENT : TEXT;
}
case 32:
break;
case 7:
{
return getWhitespaceTypeAndUpdateIndent();
}
case 33:
break;
case 8:
{
if (braceCount == 0) {
yyBegin(VALUE);
return TEXT;
}
braceCount--;
if (yystate() == BRACES && braceCount == 0) {
yyBegin(previousState);
}
return RBRACKET;
}
case 34:
break;
case 9:
{
braceCount++;
if (braceCount != 0 && yystate() != BRACES) {
previousState=yystate();
}
yyBegin(braceCount == 0 ? previousState : BRACES);
return LBRACE;
}
case 35:
break;
case 10:
{
if (braceCount == 0) {
yyBegin(VALUE);
return TEXT;
}
braceCount--;
if (yystate() == BRACES && braceCount == 0) {
yyBegin(previousState);
}
return RBRACE;
}
case 36:
break;
case 11:
{
braceCount++;
if (braceCount != 0 && yystate() != BRACES) {
previousState=yystate();
}
yyBegin(braceCount == 0 ? previousState : BRACES);
return LBRACKET;
}
case 37:
break;
case 12:
{
if (currentLineIndent <= valueIndent) {
yypushback(yylength());
yyBegin(YYINITIAL);
break;
}
 else {
return valueTokenType;
}
}
case 38:
break;
case 13:
{
currentLineIndent=0;
return EOL;
}
case 39:
break;
case 14:
{
IElementType type=getWhitespaceTypeAndUpdateIndent();
if (currentLineIndent <= valueIndent) {
yyBegin(YYINITIAL);
}
return type;
}
case 40:
break;
case 15:
{
if (zzMarkedPos == zzEndRead) {
return SCALAR_KEY;
}
yyBegin(VALUE);
return tokenOrForbidden(TEXT);
}
case 41:
break;
case 16:
zzMarkedPos=Character.offsetByCodePoints(zzBufferL,zzStartRead,1);
{
return COLON;
}
case 42:
break;
case 17:
zzMarkedPos=Character.offsetByCodePoints(zzBufferL,zzStartRead,1);
{
yyBegin(VALUE_OR_KEY);
return SEQUENCE_MARKER;
}
case 43:
break;
case 18:
{
int zzFState=12;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length()) {
zzFin=new boolean[zzBufferL.length() + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);
zzInput=Character.codePointAt(zzBufferL,zzFPos);
zzFPos+=Character.charCount(zzInput);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1) {
zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);
}
while (zzFPos <= zzMarkedPos) {
zzFinL[zzFPos++]=false;
}
zzFState=7;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=Character.codePointBefore(zzBufferL,zzFPos);
zzFPos-=Character.charCount(zzInput);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
yyBegin(INDENT_VALUE);
valueIndent=currentLineIndent;
valueTokenType=SCALAR_TEXT;
return valueTokenType;
}
case 44:
break;
case 19:
{
return SCALAR_DSTRING;
}
case 45:
break;
case 20:
{
return SCALAR_STRING;
}
case 46:
break;
case 21:
{
int zzFState=6;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length()) {
zzFin=new boolean[zzBufferL.length() + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);
zzInput=Character.codePointAt(zzBufferL,zzFPos);
zzFPos+=Character.charCount(zzInput);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1) {
zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);
}
while (zzFPos <= zzMarkedPos) {
zzFinL[zzFPos++]=false;
}
zzFState=7;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=Character.codePointBefore(zzBufferL,zzFPos);
zzFPos-=Character.charCount(zzInput);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
return TAG;
}
case 47:
break;
case 22:
{
int zzFState=13;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length()) {
zzFin=new boolean[zzBufferL.length() + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);
zzInput=Character.codePointAt(zzBufferL,zzFPos);
zzFPos+=Character.charCount(zzInput);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1) {
zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);
}
while (zzFPos <= zzMarkedPos) {
zzFinL[zzFPos++]=false;
}
zzFState=7;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=Character.codePointBefore(zzBufferL,zzFPos);
zzFPos-=Character.charCount(zzInput);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
yyBegin(INDENT_VALUE);
valueIndent=currentLineIndent;
valueTokenType=SCALAR_LIST;
return valueTokenType;
}
case 48:
break;
case 23:
zzMarkedPos=Character.offsetByCodePoints(zzBufferL,zzMarkedPos,-1);
{
return getWhitespaceTypeAndUpdateIndent();
}
case 49:
break;
case 24:
{
int zzFState=10;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length()) {
zzFin=new boolean[zzBufferL.length() + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);
zzInput=Character.codePointAt(zzBufferL,zzFPos);
zzFPos+=Character.charCount(zzInput);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1) {
zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);
}
while (zzFPos <= zzMarkedPos) {
zzFinL[zzFPos++]=false;
}
zzFState=11;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=Character.codePointBefore(zzBufferL,zzFPos);
zzFPos-=Character.charCount(zzInput);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
yyBegin(VALUE);
return SCALAR_KEY;
}
case 50:
break;
case 25:
{
return SCALAR_KEY;
}
case 51:
break;
case 26:
{
int zzFState=8;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length()) {
zzFin=new boolean[zzBufferL.length() + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
zzFinL[zzFPos]=((zzAttrL[zzFState] & 1) == 1);
zzInput=Character.codePointAt(zzBufferL,zzFPos);
zzFPos+=Character.charCount(zzInput);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1) {
zzFinL[zzFPos++]=((zzAttrL[zzFState] & 1) == 1);
}
while (zzFPos <= zzMarkedPos) {
zzFinL[zzFPos++]=false;
}
zzFState=9;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=Character.codePointBefore(zzBufferL,zzFPos);
zzFPos-=Character.charCount(zzInput);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
yyBegin(VALUE_BRACE);
return SCALAR_KEY;
}
case 52:
break;
default :
zzScanError(ZZ_NO_MATCH);
}
}
}
}
