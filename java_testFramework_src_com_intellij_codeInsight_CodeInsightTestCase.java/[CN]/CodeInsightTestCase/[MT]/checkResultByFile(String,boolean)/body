{
  new WriteCommandAction<Document>(getProject()){
    @SuppressWarnings("ConstantConditions") @Override protected void run(    @NotNull Result<Document> result) throws Throwable {
      getProject().getComponent(PostprocessReformattingAspect.class).doPostponedFormatting();
      if (stripTrailingSpaces) {
        ((DocumentImpl)myEditor.getDocument()).stripTrailingSpaces(getProject());
      }
      PsiDocumentManager.getInstance(myProject).commitAllDocuments();
      VirtualFile vFile=findVirtualFile(filePath);
      String ft;
      try {
        ft=VfsUtilCore.loadText(vFile);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      String fileText=StringUtil.convertLineSeparators(ft);
      Document document=EditorFactory.getInstance().createDocument(fileText);
      EditorTestUtil.CaretAndSelectionState caretState=EditorTestUtil.extractCaretAndSelectionMarkers(document);
      String newFileText=document.getText();
      String newFileText1=newFileText;
      if (stripTrailingSpaces) {
        Document document1=EditorFactory.getInstance().createDocument(newFileText);
        ((DocumentImpl)document1).stripTrailingSpaces(getProject());
        newFileText1=document1.getText();
      }
      if (myEditor instanceof EditorWindow) {
        myEditor=((EditorWindow)myEditor).getDelegate();
      }
      myFile=PsiDocumentManager.getInstance(getProject()).getPsiFile(myEditor.getDocument());
      String text=myFile.getText();
      text=StringUtil.convertLineSeparators(text);
      assertEquals("Text mismatch in file " + filePath,newFileText1,text);
      EditorTestUtil.verifyCaretAndSelectionState(myEditor,caretState);
    }
  }
.execute();
}
