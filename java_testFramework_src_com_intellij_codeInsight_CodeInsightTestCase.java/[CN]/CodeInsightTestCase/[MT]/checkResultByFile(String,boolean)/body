{
  new WriteCommandAction<Document>(getProject()){
    @SuppressWarnings("ConstantConditions") @Override protected void run(    @NotNull Result<Document> result) throws Throwable {
      getProject().getComponent(PostprocessReformattingAspect.class).doPostponedFormatting();
      if (stripTrailingSpaces) {
        ((DocumentImpl)myEditor.getDocument()).stripTrailingSpaces(getProject());
      }
      PsiDocumentManager.getInstance(myProject).commitAllDocuments();
      String fullPath=getTestDataPath() + filePath;
      final VirtualFile vFile=LocalFileSystem.getInstance().findFileByPath(fullPath.replace(File.separatorChar,'/'));
      assertNotNull("Cannot find file " + fullPath,vFile);
      String ft;
      try {
        ft=VfsUtilCore.loadText(vFile);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      String fileText=StringUtil.convertLineSeparators(ft);
      Document document=EditorFactory.getInstance().createDocument(fileText);
      EditorTestUtil.CaretsState caretState=EditorTestUtil.extractCaretAndSelectionMarkers(document);
      String newFileText=document.getText();
      String newFileText1=newFileText;
      if (stripTrailingSpaces) {
        Document document1=EditorFactory.getInstance().createDocument(newFileText);
        ((DocumentImpl)document1).stripTrailingSpaces(getProject());
        newFileText1=document1.getText();
      }
      if (myEditor instanceof EditorWindow) {
        myEditor=((EditorWindow)myEditor).getDelegate();
        myFile=PsiDocumentManager.getInstance(getProject()).getPsiFile(myEditor.getDocument());
      }
      String text=myFile.getText();
      text=StringUtil.convertLineSeparators(text);
      assertEquals("Text mismatch in file " + filePath,newFileText1,text);
      CaretModel caretModel=myEditor.getCaretModel();
      List<Caret> allCarets=caretModel.supportsMultipleCarets() ? new ArrayList<Caret>(caretModel.getAllCarets()) : null;
      assertEquals("Unexpected number of carets",caretState.carets.size(),caretModel.supportsMultipleCarets() ? allCarets.size() : 1);
      for (int i=0; i < caretState.carets.size(); i++) {
        String caretDescription=caretState.carets.size() == 1 ? "" : "caret " + (i + 1) + "/"+ caretState.carets.size()+ " ";
        Caret currentCaret=caretModel.supportsMultipleCarets() ? allCarets.get(i) : null;
        LogicalPosition actualCaretPosition;
        if (caretModel.supportsMultipleCarets()) {
          actualCaretPosition=currentCaret.getLogicalPosition();
        }
 else {
          actualCaretPosition=caretModel.getLogicalPosition();
        }
        EditorTestUtil.Caret expected=caretState.carets.get(i);
        if (expected.offset != null) {
          int caretLine=StringUtil.offsetToLineNumber(newFileText,expected.offset);
          int caretCol=expected.offset - StringUtil.lineColToOffset(newFileText,caretLine,0);
          assertEquals(caretDescription + "caretLine",caretLine + 1,actualCaretPosition.line + 1);
          assertEquals(caretDescription + "caretColumn",caretCol + 1,actualCaretPosition.column + 1);
        }
        int actualSelectionStart=caretModel.supportsMultipleCarets() ? currentCaret.getSelectionStart() : myEditor.getSelectionModel().getSelectionStart();
        int actualSelectionEnd=caretModel.supportsMultipleCarets() ? currentCaret.getSelectionEnd() : myEditor.getSelectionModel().getSelectionEnd();
        if (expected.selection != null) {
          int selStartLine=StringUtil.offsetToLineNumber(newFileText,expected.selection.getStartOffset());
          int selStartCol=expected.selection.getStartOffset() - StringUtil.lineColToOffset(newFileText,selStartLine,0);
          int selEndLine=StringUtil.offsetToLineNumber(newFileText,expected.selection.getEndOffset());
          int selEndCol=expected.selection.getEndOffset() - StringUtil.lineColToOffset(newFileText,selEndLine,0);
          assertEquals(caretDescription + "selectionStartLine",selStartLine + 1,StringUtil.offsetToLineNumber(newFileText,actualSelectionStart) + 1);
          assertEquals(caretDescription + "selectionStartCol",selStartCol + 1,actualSelectionStart - StringUtil.lineColToOffset(newFileText,selStartLine,0) + 1);
          assertEquals(caretDescription + "selectionEndLine",selEndLine + 1,StringUtil.offsetToLineNumber(newFileText,actualSelectionEnd) + 1);
          assertEquals(caretDescription + "selectionEndCol",selEndCol + 1,actualSelectionEnd - StringUtil.lineColToOffset(newFileText,selEndLine,0) + 1);
        }
 else {
          assertFalse(caretDescription + "should has no selection, but was: (" + actualSelectionStart+ ", "+ actualSelectionEnd+ ")",caretModel.supportsMultipleCarets() ? currentCaret.hasSelection() : myEditor.getSelectionModel().hasSelection());
        }
      }
    }
  }
.execute();
}
