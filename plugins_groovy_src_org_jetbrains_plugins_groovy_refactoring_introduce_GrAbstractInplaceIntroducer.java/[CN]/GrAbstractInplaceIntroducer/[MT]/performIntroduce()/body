{
  final List<RangeMarker> markers=getOccurrenceMarkers();
  GrIntroduceContext context=new GrIntroduceContext(){
    @NotNull @Override public Project getProject(){
      return myProject;
    }
    @Override public Editor getEditor(){
      return myEditor;
    }
    @Nullable @Override public GrExpression getExpression(){
      return (GrExpression)getExpr();
    }
    @Nullable @Override public GrVariable getVar(){
      return getLocalVariable();
    }
    @Nullable @Override public StringPartInfo getStringPart(){
      return null;
    }
    @NotNull @Override public PsiElement[] getOccurrences(){
      List<PsiElement> result=ContainerUtil.map(markers,new Function<RangeMarker,PsiElement>(){
        @Override public PsiElement fun(        RangeMarker marker){
          return GroovyRefactoringUtil.findElementInRange(myFile,marker.getStartOffset(),marker.getEndOffset(),GrExpression.class);
        }
      }
);
      return PsiUtilCore.toPsiElementArray(result);
    }
    @Override public PsiElement getScope(){
      return myScope;
    }
    @NotNull @Override public PsiElement getPlace(){
      GrExpression expression=getExpression();
      return expression != null ? expression : getLocalVariable();
    }
  }
;
  runRefactoring(context,getSettings(),true);
}
