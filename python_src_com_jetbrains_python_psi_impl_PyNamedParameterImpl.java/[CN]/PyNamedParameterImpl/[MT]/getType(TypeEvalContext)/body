{
  if (getParent() instanceof PyParameterList) {
    PyParameterList parameterList=(PyParameterList)getParent();
    final PyParameter[] params=parameterList.getParameters();
    if (parameterList.getParent() instanceof PyFunction) {
      PyFunction func=(PyFunction)parameterList.getParent();
      final Set<PyFunction.Flag> flags=PyUtil.detectDecorationsAndWrappersOf(func);
      if (params[0] == this && !flags.contains(PyFunction.Flag.STATICMETHOD)) {
        final PyClass containingClass=func.getContainingClass();
        if (containingClass != null) {
          return new PyClassType(containingClass,flags.contains(PyFunction.Flag.CLASSMETHOD));
        }
      }
      if (isKeywordContainer()) {
        return PyBuiltinCache.getInstance(this).getDictType();
      }
      if (isPositionalContainer()) {
        return PyBuiltinCache.getInstance(this).getTupleType();
      }
      PyAnnotation anno=getAnnotation();
      if (anno != null) {
        final PyClass pyClass=anno.resolveToClass();
        if (pyClass != null) {
          return new PyClassType(pyClass,false);
        }
      }
      final String docString=PyUtil.strValue(func.getDocStringExpression());
      StructuredDocString epydocString=StructuredDocString.parse(docString);
      if (epydocString != null) {
        String typeName=epydocString.getParamType(getName());
        if (typeName != null) {
          return PyTypeParser.getTypeByName(this,typeName);
        }
      }
      for (      PyTypeProvider provider : Extensions.getExtensions(PyTypeProvider.EP_NAME)) {
        PyType result=provider.getParameterType(this,func,context);
        if (result != null)         return result;
      }
    }
  }
  return null;
}
