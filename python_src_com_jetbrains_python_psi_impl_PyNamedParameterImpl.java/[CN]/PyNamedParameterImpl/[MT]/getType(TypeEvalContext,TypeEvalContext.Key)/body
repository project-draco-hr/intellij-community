{
  final PsiElement parent=getStubOrPsiParent();
  if (parent instanceof PyParameterList) {
    PyParameterList parameterList=(PyParameterList)parent;
    PyFunction func=parameterList.getContainingFunction();
    if (func != null) {
      final PyFunction.Modifier modifier=func.getModifier();
      if (isSelf()) {
        final PyClass containingClass=func.getContainingClass();
        if (containingClass != null) {
          PyType initType=null;
          final PyFunction init=containingClass.findInitOrNew(true);
          if (init != null && init != func) {
            initType=init.getReturnType(context,null);
            if (init.getContainingClass() != containingClass) {
              if (initType instanceof PyCollectionType) {
                final PyType elementType=((PyCollectionType)initType).getElementType(context);
                return new PyCollectionTypeImpl(containingClass,false,elementType);
              }
            }
          }
 else {
            final PyStdlibTypeProvider stdlib=PyStdlibTypeProvider.getInstance();
            if (stdlib != null) {
              initType=stdlib.getConstructorType(containingClass,context);
            }
          }
          if (initType != null && !(initType instanceof PyNoneType || initType instanceof PyReturnTypeReference)) {
            return initType;
          }
          return new PyClassTypeImpl(containingClass,modifier == PyFunction.Modifier.CLASSMETHOD);
        }
      }
      if (isKeywordContainer()) {
        return PyBuiltinCache.getInstance(this).getDictType();
      }
      if (isPositionalContainer()) {
        return PyBuiltinCache.getInstance(this).getTupleType();
      }
      PyAnnotation anno=getAnnotation();
      if (anno != null) {
        final PyClass pyClass=anno.resolveToClass();
        if (pyClass != null) {
          return new PyClassTypeImpl(pyClass,false);
        }
      }
      String docString=func.getDocStringValue();
      if (PyNames.INIT.equals(func.getName()) && docString == null) {
        PyClass pyClass=func.getContainingClass();
        if (pyClass != null)         docString=pyClass.getDocStringValue();
      }
      StructuredDocString epydocString=StructuredDocString.parse(docString);
      if (epydocString != null) {
        String typeName=epydocString.getParamType(getName());
        if (typeName != null) {
          return PyTypeParser.getTypeByName(this,typeName);
        }
      }
      if (context.maySwitchToAST(this)) {
        final PyExpression defaultValue=getDefaultValue();
        if (defaultValue != null) {
          final PyType type=context.getType(defaultValue);
          if (type != null && !(type instanceof PyNoneType)) {
            return type;
          }
        }
      }
      for (      PyTypeProvider provider : Extensions.getExtensions(PyTypeProvider.EP_NAME)) {
        PyType result=provider.getParameterType(this,func,context);
        if (result != null)         return result;
      }
    }
  }
  return null;
}
