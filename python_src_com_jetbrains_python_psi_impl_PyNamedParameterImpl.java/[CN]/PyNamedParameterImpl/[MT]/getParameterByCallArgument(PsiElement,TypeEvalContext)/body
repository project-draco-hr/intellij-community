{
  final PyArgumentList argumentList=PsiTreeUtil.getParentOfType(element,PyArgumentList.class);
  if (argumentList != null) {
    boolean elementIsArgument=false;
    for (    PyExpression argument : argumentList.getArgumentExpressions()) {
      if (PyPsiUtils.flattenParens(argument) == element) {
        elementIsArgument=true;
        break;
      }
    }
    final PyCallExpression callExpression=argumentList.getCallExpression();
    if (elementIsArgument && callExpression != null) {
      final PyExpression callee=callExpression.getCallee();
      if (callee instanceof PyReferenceExpression) {
        final PyReferenceExpression calleeReferenceExpr=(PyReferenceExpression)callee;
        final PyExpression firstQualifier=PyPsiUtils.getFirstQualifier(calleeReferenceExpr);
        if (firstQualifier != null) {
          final PsiReference ref=firstQualifier.getReference();
          if (ref != null && ref.isReferenceTo(this)) {
            return null;
          }
        }
      }
      final PyResolveContext resolveContext=PyResolveContext.noImplicits().withTypeEvalContext(context);
      final PyCallExpression.PyArgumentsMapping mapping=callExpression.mapArguments(resolveContext);
      for (      Map.Entry<PyExpression,PyNamedParameter> entry : mapping.getMappedParameters().entrySet()) {
        if (entry.getKey() == element) {
          return entry.getValue();
        }
      }
    }
  }
  return null;
}
