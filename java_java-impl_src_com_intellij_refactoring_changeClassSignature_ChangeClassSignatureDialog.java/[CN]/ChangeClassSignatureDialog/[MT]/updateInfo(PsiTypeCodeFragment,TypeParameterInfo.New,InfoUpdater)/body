{
  PsiType valueType;
  try {
    valueType=source.getType();
    if (valueType instanceof PsiPrimitiveType) {
      return "Type parameter can't be primitive";
    }
  }
 catch (  PsiTypeCodeFragment.TypeSyntaxException e) {
    return RefactoringBundle.message("changeClassSignature.bad.value",updater.getValueName(),source.getText(),info.getName(null));
  }
catch (  PsiTypeCodeFragment.NoTypeException e) {
    return updater == InfoUpdater.DEFAULT_VALUE ? RefactoringBundle.message("changeSignature.no.type.for.parameter",info.getName(null)) : null;
  }
  updater.updateInfo(info,valueType);
  return null;
}
