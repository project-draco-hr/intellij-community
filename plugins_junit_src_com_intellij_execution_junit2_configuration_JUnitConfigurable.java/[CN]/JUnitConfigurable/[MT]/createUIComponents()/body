{
  myPackage=new LabeledComponent<EditorTextFieldWithBrowseButton>();
  myPackage.setComponent(new EditorTextFieldWithBrowseButton(myProject,false));
  myClass=new LabeledComponent<EditorTextFieldWithBrowseButton>();
  final TestClassBrowser classBrowser=new TestClassBrowser(myProject);
  myClass.setComponent(new EditorTextFieldWithBrowseButton(myProject,true,new JavaCodeFragment.VisibilityChecker(){
    @Override public Visibility isDeclarationVisible(    PsiElement declaration,    PsiElement place){
      try {
        if (declaration instanceof PsiClass && (classBrowser.getFilter().isAccepted(((PsiClass)declaration)) || classBrowser.findClass(((PsiClass)declaration).getQualifiedName()) != null && place.getParent() != null)) {
          return Visibility.VISIBLE;
        }
      }
 catch (      ClassBrowser.NoFilterException e) {
        return Visibility.NOT_VISIBLE;
      }
      return Visibility.NOT_VISIBLE;
    }
  }
));
  myCategory=new LabeledComponent<EditorTextFieldWithBrowseButton>();
  myCategory.setComponent(new EditorTextFieldWithBrowseButton(myProject,true,new JavaCodeFragment.VisibilityChecker(){
    @Override public Visibility isDeclarationVisible(    PsiElement declaration,    PsiElement place){
      if (declaration instanceof PsiClass) {
        return Visibility.VISIBLE;
      }
      return Visibility.NOT_VISIBLE;
    }
  }
));
  myMethod=new LabeledComponent<EditorTextFieldWithBrowseButton>();
  final EditorTextFieldWithBrowseButton textFieldWithBrowseButton=new EditorTextFieldWithBrowseButton(myProject,true,JavaCodeFragment.VisibilityChecker.EVERYTHING_VISIBLE,PlainTextLanguage.INSTANCE.getAssociatedFileType());
  myMethod.setComponent(textFieldWithBrowseButton);
}
