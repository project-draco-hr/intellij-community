{
  super.visitMethodCallExpression(expression);
  PsiElement parent=expression.getParent();
  while (parent instanceof PsiParenthesizedExpression || parent instanceof PsiTypeCastExpression) {
    parent=parent.getParent();
  }
  if (canBeThrown(parent)) {
    return;
  }
  if (!TypeUtils.expressionHasTypeOrSubtype(expression,CommonClassNames.JAVA_LANG_THROWABLE)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null || PropertyUtil.isSimpleGetter(method)) {
    return;
  }
  if (!method.hasModifierProperty(PsiModifier.STATIC)) {
    final PsiClass containingClass=method.getContainingClass();
    if (InheritanceUtil.isInheritor(containingClass,CommonClassNames.JAVA_LANG_THROWABLE)) {
      return;
    }
  }
  if ("propagate".equals(method.getName()) && method.getContainingClass() != null && "com.google.common.base.Throwables".equals(method.getContainingClass().getQualifiedName())) {
    return;
  }
  final PsiElement var=getVariable(parent,expression);
  if (var == null) {
    return;
  }
  if (var instanceof PsiLocalVariable) {
    final Query<PsiReference> query=ReferencesSearch.search(var,var.getUseScope());
    for (    PsiReference reference : query) {
      final PsiElement usage=reference.getElement();
      PsiElement usageParent=usage.getParent();
      while (usageParent instanceof PsiParenthesizedExpression) {
        usageParent=usageParent.getParent();
      }
      if (canBeThrown(usageParent)) {
        return;
      }
    }
  }
  registerMethodCallError(expression);
}
