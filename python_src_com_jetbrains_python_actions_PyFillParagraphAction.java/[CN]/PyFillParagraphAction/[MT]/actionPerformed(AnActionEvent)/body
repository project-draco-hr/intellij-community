{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null)   return;
  PsiElement element=e.getData(LangDataKeys.PSI_ELEMENT);
  Editor editor=e.getData(PlatformDataKeys.EDITOR);
  if (element == null) {
    final PsiElement file=e.getData(LangDataKeys.PSI_FILE);
    if (file != null && editor != null) {
      final int offset=editor.getCaretModel().getOffset();
      element=file.findElementAt(offset);
    }
  }
  if (element instanceof PsiComment) {
    processComment(element,editor.getDocument());
  }
 else {
    element=PsiTreeUtil.getParentOfType(element,PyStringLiteralExpression.class);
    if (element != null) {
      final String text=element.getText();
      final List<String> substrings=StringUtil.split(text,"\n",true);
      StringBuilder stringBuilder=new StringBuilder();
      for (      String string : substrings) {
        stringBuilder.append(StringUtil.trimStart(string.trim(),getCommentPrefix())).append(" ");
      }
      String replacementString=stringBuilder.toString();
      final PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
      final PsiElement docstring=elementGenerator.createFromText(LanguageLevel.forElement(element),PyExpressionStatement.class,replacementString).getExpression();
      final PsiElement finalElement=element;
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          PsiElement replacementElement=finalElement.replace(docstring);
          replacementElement=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(replacementElement);
          final TextRange textRange=getTextRange(replacementElement);
          CodeStyleManager.getInstance(project).reformatText(replacementElement.getContainingFile(),textRange.getStartOffset(),textRange.getEndOffset());
        }
      }
);
    }
  }
}
