{
  final String methodName=JUnit4ReflectionUtil.getMethodName(description);
  final String classFQN=JUnit4ReflectionUtil.getClassName(description);
  final List parents=(List)myParents.get(description);
  if (parents != null) {
    List parentsHierarchy=(List)parents.remove(0);
    int idx=0;
    String currentClass;
    String currentParent;
    while (idx < myStartedSuites.size() && idx < parentsHierarchy.size()) {
      currentClass=(String)myStartedSuites.get(idx);
      currentParent=getShortName(JUnit4ReflectionUtil.getClassName((Description)parentsHierarchy.get(parentsHierarchy.size() - 1 - idx)));
      if (!currentClass.equals(currentParent))       break;
      idx++;
    }
    for (int i=myStartedSuites.size() - 1; i >= idx; i--) {
      currentClass=(String)myStartedSuites.remove(i);
      myPrintStream.println("##teamcity[testSuiteFinished name=\'" + escapeName(currentClass) + "\']");
    }
    for (int i=idx; i < parentsHierarchy.size(); i++) {
      Description parent=(Description)parentsHierarchy.get(parentsHierarchy.size() - 1 - i);
      final String className=getShortName(JUnit4ReflectionUtil.getClassName(parent));
      if (!className.equals(myRootName)) {
        myPrintStream.println("##teamcity[testSuiteStarted name=\'" + escapeName(className) + "\']");
        myStartedSuites.add(className);
      }
    }
  }
  myPrintStream.println("##teamcity[testStarted name=\'" + escapeName(methodName) + "\' "+ getTestMethodLocation(methodName,classFQN)+ "]");
}
