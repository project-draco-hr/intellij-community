{
  if (tests.isEmpty()) {
    final String methodName=JUnit4ReflectionUtil.getMethodName((Description)description);
    System.out.println("##teamcity[suiteTreeNode name=\'" + escapeName(methodName) + "\' locationHint=\'java:test://"+ escapeName(JUnit4ReflectionUtil.getClassName((Description)description) + "." + methodName)+ "\']");
  }
  boolean pass=false;
  for (Iterator iterator=tests.iterator(); iterator.hasNext(); ) {
    final Object next=iterator.next();
    final List childTests=runner.getChildTests(next);
    final Description nextDescription=(Description)next;
    if ((childTests.isEmpty() || isParameter(nextDescription)) && !pass) {
      pass=true;
      final String className=JUnit4ReflectionUtil.getClassName((Description)description);
      String locationHint=className;
      if (isParameter((Description)description)) {
        final String displayName=nextDescription.getDisplayName();
        final int paramIdx=displayName.indexOf(locationHint);
        if (paramIdx > -1) {
          locationHint=displayName.substring(paramIdx + locationHint.length());
          if (locationHint.startsWith("(") && locationHint.endsWith(")")) {
            locationHint=locationHint.substring(1,locationHint.length() - 1) + "." + className;
          }
        }
      }
      System.out.println("##teamcity[suiteTreeStarted name=\'" + escapeName(className) + "\' locationHint=\'java:suite://"+ escapeName(locationHint)+ "\']");
    }
    sendTree(runner,next,childTests);
  }
  if (pass) {
    System.out.println("##teamcity[suiteTreeEnded name=\'" + escapeName(JUnit4ReflectionUtil.getClassName((Description)description)) + "\']");
  }
}
