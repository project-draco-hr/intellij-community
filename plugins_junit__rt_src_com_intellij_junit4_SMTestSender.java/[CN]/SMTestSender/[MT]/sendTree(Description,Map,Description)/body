{
  final String className=JUnit4ReflectionUtil.getClassName(description);
  if (description.getChildren().isEmpty()) {
    final String methodName=JUnit4ReflectionUtil.getMethodName((Description)description);
    if (methodName != null) {
      myPrintStream.println("##teamcity[suiteTreeNode name=\'" + escapeName(methodName) + "\' "+ getTestMethodLocation(methodName,className)+ "]");
      if (isWarning(methodName,className)) {
        myEmptyTests.add(getShortName(JUnit4ReflectionUtil.getClassName(parent)));
      }
    }
    return;
  }
  List tests=(List)groups.get(description);
  if (isParameter(description)) {
    tests=description.getChildren();
  }
  if (tests == null) {
    return;
  }
  boolean pass=false;
  for (Iterator iterator=tests.iterator(); iterator.hasNext(); ) {
    final Object next=iterator.next();
    final List childTests=((Description)next).getChildren();
    final Description nextDescription=(Description)next;
    if (((myCurrentClassName == null || !myCurrentClassName.equals(getShortName(className))) && childTests.isEmpty() && JUnit4ReflectionUtil.getMethodName(nextDescription) != null || isParameter(nextDescription)) && !pass) {
      pass=true;
      String locationHint=className;
      if (isParameter((Description)description)) {
        final String displayName=nextDescription.getDisplayName();
        final int paramIdx=displayName.indexOf(locationHint);
        if (paramIdx > -1) {
          locationHint=displayName.substring(paramIdx + locationHint.length());
          if (locationHint.startsWith("(") && locationHint.endsWith(")")) {
            locationHint=locationHint.substring(1,locationHint.length() - 1) + "." + className;
          }
        }
      }
      myPrintStream.println("##teamcity[suiteTreeStarted name=\'" + escapeName(getShortName(className)) + "\' locationHint=\'java:suite://"+ escapeName(locationHint)+ "\']");
    }
    sendTree(nextDescription,groups,description);
  }
  if (pass) {
    myPrintStream.println("##teamcity[suiteTreeEnded name=\'" + escapeName(getShortName(JUnit4ReflectionUtil.getClassName((Description)description))) + "\']");
    groups.remove(description);
  }
}
