{
  Map<String,PsiElement> localDeclarations=new HashMap<String,PsiElement>();
  List<PsiElement> nameDefiners=new ArrayList<PsiElement>();
  final List<PsiElement> children=PyPsiUtils.collectAllStubChildren(this,getStub());
  final List<PyExceptPart> exceptParts=new ArrayList<PyExceptPart>();
  for (  PsiElement child : children) {
    if (child instanceof PyExceptPart) {
      exceptParts.add((PyExceptPart)child);
    }
 else {
      addDeclaration(child,localDeclarations,nameDefiners);
    }
  }
  if (!exceptParts.isEmpty()) {
    final Map<String,PsiElement> exceptPartDeclarations=new HashMap<String,PsiElement>();
    for (    PyExceptPart part : exceptParts) {
      final List<PsiElement> exceptChildren=PyPsiUtils.collectAllStubChildren(part,part.getStub());
      for (      PsiElement child : exceptChildren) {
        addDeclaration(child,exceptPartDeclarations,nameDefiners);
      }
    }
    for (    Map.Entry<String,PsiElement> entry : exceptPartDeclarations.entrySet()) {
      if (!localDeclarations.containsKey(entry.getKey())) {
        localDeclarations.put(entry.getKey(),entry.getValue());
      }
    }
  }
  myLocalDeclarations=localDeclarations;
  myNameDefiners=nameDefiners;
}
