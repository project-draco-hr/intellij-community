{
  final List<String> stack=myFindExportedNameStack.get();
  if (stack.contains(name)) {
    return null;
  }
  stack.add(name);
  try {
    final StubElement stub=getStub();
    if (stub != null) {
      final List children=stub.getChildrenStubs();
      for (int i=children.size() - 1; i >= 0; i--) {
        Object child=children.get(i);
        if (child instanceof NamedStub && name.equals(((NamedStub)child).getName())) {
          return ((NamedStub)child).getPsi();
        }
 else         if (child instanceof PyFromImportStatementStub) {
          if (((PyFromImportStatementStub)child).isStarImport()) {
            final PyFromImportStatement statement=((PyFromImportStatementStub)child).getPsi();
            PsiElement starImportSource=ResolveImportUtil.resolveFromImportStatementSource(statement);
            if (starImportSource != null) {
              starImportSource=PyUtil.turnDirIntoInit(starImportSource);
              if (starImportSource instanceof PyFile) {
                final PsiElement result=((PyFile)starImportSource).getElementNamed(name);
                if (result != null) {
                  return result;
                }
              }
            }
          }
 else {
            final List<StubElement> importElements=((StubElement)child).getChildrenStubs();
            for (            StubElement importElement : importElements) {
              final PsiElement psi=importElement.getPsi();
              if (psi instanceof PyImportElement && name.equals(((PyImportElement)psi).getVisibleName())) {
                final PsiElement resolved=((PyImportElement)psi).getElementNamed(name);
                if (resolved != null) {
                  return resolved;
                }
              }
            }
          }
        }
 else         if (child instanceof PyImportStatementStub) {
          final List<StubElement> importElements=((StubElement)child).getChildrenStubs();
          for (          StubElement importElementStub : importElements) {
            final PsiElement psi=importElementStub.getPsi();
            if (psi instanceof PyImportElement) {
              final PyImportElement importElement=(PyImportElement)psi;
              final String asName=importElement.getAsName();
              if (asName != null && asName.equals(name)) {
                final PsiElement resolved=importElement.getElementNamed(name);
                if (resolved != null) {
                  return resolved;
                }
              }
              final PyQualifiedName qName=importElement.getImportedQName();
              if (qName != null && qName.getComponentCount() > 0) {
                if (qName.getComponents().get(0).equals(name)) {
                  if (qName.getComponentCount() == 1) {
                    return psi;
                  }
                  return new PyImportedModule(this,PyQualifiedName.fromComponents(name));
                }
                if (name.equals(((PyImportElement)psi).getVisibleName())) {
                  final PsiElement resolved=importElement.getElementNamed(name);
                  if (resolved != null) {
                    return resolved;
                  }
                }
              }
            }
          }
        }
      }
      return null;
    }
 else {
      ResolveProcessor proc=new ResolveProcessor(name);
      PyResolveUtil.treeCrawlUp(proc,true,getLastChild());
      return proc.getResult();
    }
  }
  finally {
    stack.remove(name);
  }
}
