{
  final List<String> stack=myFindExportedNameStack.get();
  if (stack.contains(name)) {
    return null;
  }
  stack.add(name);
  try {
    final StubElement stub=getStub();
    if (stub != null) {
      final List children=stub.getChildrenStubs();
      final List<PyExceptPartStub> exceptParts=new ArrayList<PyExceptPartStub>();
      for (int i=children.size() - 1; i >= 0; i--) {
        Object child=children.get(i);
        if (child instanceof PyExceptPartStub) {
          exceptParts.add((PyExceptPartStub)child);
        }
 else {
          PsiElement element=findNameInStub(child,name);
          if (element != null) {
            return element;
          }
        }
      }
      for (int i=exceptParts.size() - 1; i >= 0; i--) {
        PyExceptPartStub part=exceptParts.get(i);
        final List<StubElement> exceptChildren=part.getChildrenStubs();
        for (int j=exceptChildren.size() - 1; j >= 0; j--) {
          Object child=exceptChildren.get(j);
          PsiElement element=findNameInStub(child,name);
          if (element != null) {
            return element;
          }
        }
      }
    }
 else {
      ResolveProcessor proc=new ResolveProcessor(name);
      PyResolveUtil.treeCrawlUp(proc,true,getLastChild());
      if (proc.getResult() != null) {
        return proc.getResult();
      }
    }
    List<String> allNames=getDunderAll();
    if (allNames != null && allNames.contains(name)) {
      return findExportedName(PyNames.ALL);
    }
    return null;
  }
  finally {
    stack.remove(name);
  }
}
