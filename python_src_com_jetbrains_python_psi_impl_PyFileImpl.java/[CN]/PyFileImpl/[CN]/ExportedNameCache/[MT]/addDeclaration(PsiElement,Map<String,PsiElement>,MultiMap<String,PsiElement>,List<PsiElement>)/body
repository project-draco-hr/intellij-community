{
  if (child instanceof PsiNamedElement) {
    final String name=((PsiNamedElement)child).getName();
    localDeclarations.put(name,child);
  }
 else   if (child instanceof PyFromImportStatement) {
    final PyFromImportStatement fromImportStatement=(PyFromImportStatement)child;
    if (fromImportStatement.isStarImport()) {
      nameDefiners.add(fromImportStatement);
    }
 else {
      for (      PyImportElement importElement : fromImportStatement.getImportElements()) {
        addImportElementDeclaration(importElement,localDeclarations,ambiguousDeclarations);
      }
    }
    if (PyNames.INIT_DOT_PY.equals(getName())) {
      final PyQualifiedName qName=fromImportStatement.getImportSourceQName();
      if (qName != null) {
        localDeclarations.put(qName.getLastComponent(),fromImportStatement);
      }
    }
  }
 else   if (child instanceof PyImportStatement) {
    final PyImportStatement importStatement=(PyImportStatement)child;
    for (    PyImportElement importElement : importStatement.getImportElements()) {
      addImportElementDeclaration(importElement,localDeclarations,ambiguousDeclarations);
      if (PyNames.INIT_DOT_PY.equals(getName())) {
        final PyQualifiedName qName=importElement.getImportedQName();
        String parentPackage=getContainingDirectory().getName();
        if (qName != null && qName.getComponentCount() > 1) {
          final List<String> components=qName.getComponents();
          if (components.get(components.size() - 2).equals(parentPackage)) {
            localDeclarations.put(components.get(components.size() - 1),importElement);
          }
        }
      }
    }
  }
 else   if (child instanceof NameDefiner) {
    nameDefiners.add(child);
  }
}
