{
  final PsiElement parent=element.getParent();
  if (element instanceof PsiReferenceExpression) {
    if (!visitor.visitReference((PsiReferenceExpression)element))     return false;
  }
 else   if (element instanceof PsiNameValuePair && parent != null && parent.getParent() instanceof PsiAnnotation) {
    return visitor.visitAnnotationParameter((PsiNameValuePair)element,(PsiAnnotation)parent.getParent());
  }
  if (parent instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression p=(PsiAssignmentExpression)parent;
    if (p.getRExpression() == element || p.getOperationTokenType() == JavaTokenType.PLUSEQ) {
      final PsiExpression left=p.getLExpression();
      if (left instanceof PsiReferenceExpression) {
        if (!visitor.visitReference((PsiReferenceExpression)left))         return false;
      }
    }
  }
 else   if (parent instanceof PsiConditionalExpression && ((PsiConditionalExpression)parent).getCondition() == element) {
    return false;
  }
 else   if (parent instanceof PsiFunctionalExpression) {
    PsiMethod m=LambdaUtil.getFunctionalInterfaceMethod(parent);
    if (m != null) {
      if (!visitor.visitMethodReturnStatement(element,m))       return false;
    }
  }
 else   if (parent instanceof PsiReturnStatement) {
    PsiElement e=PsiTreeUtil.getParentOfType(parent,PsiMethod.class,PsiFunctionalExpression.class);
    PsiMethod m=e == null ? null : e instanceof PsiMethod ? (PsiMethod)e : LambdaUtil.getFunctionalInterfaceMethod(e);
    if (m != null) {
      if (!visitor.visitMethodReturnStatement(parent,m))       return false;
    }
  }
 else   if (parent instanceof PsiVariable) {
    return visitor.visitVariable((PsiVariable)parent);
  }
 else   if (parent instanceof PsiModifierListOwner) {
    return false;
  }
 else   if (parent instanceof PsiArrayInitializerMemberValue || parent instanceof PsiNameValuePair) {
    return true;
  }
 else   if (parent instanceof PsiExpressionList && parent.getParent() instanceof PsiCallExpression) {
    return visitor.visitMethodParameter((PsiExpression)element,(PsiCallExpression)parent.getParent());
  }
  return true;
}
