{
  myCompilingVisitor.handle(expr);
  super.visitExpressionStatement(expr);
  final PsiElement child=expr.getLastChild();
  if (!(child instanceof PsiJavaToken) && !(child instanceof PsiComment)) {
    final PsiElement reference=expr.getFirstChild();
    MatchingHandler referenceHandler=myCompilingVisitor.getContext().getPattern().getHandler(reference);
    if (referenceHandler instanceof SubstitutionHandler && (reference instanceof PsiReferenceExpression)) {
      myCompilingVisitor.getContext().getPattern().setHandler(expr,referenceHandler);
      referenceHandler.setFilter(SymbolNodeFilter.getInstance());
      myCompilingVisitor.setHandler(expr,new SymbolHandler((SubstitutionHandler)referenceHandler));
    }
 else     if (reference instanceof PsiLiteralExpression) {
      MatchingHandler handler=new ExpressionHandler();
      myCompilingVisitor.setHandler(expr,handler);
      handler.setFilter(ConstantFilter.getInstance());
    }
 else {
      MatchingHandler handler;
      myCompilingVisitor.setHandler(expr,handler=new ExpressionHandler());
      handler.setFilter(ExpressionFilter.getInstance());
    }
  }
 else   if (expr.getExpression() instanceof PsiReferenceExpression && (myCompilingVisitor.getContext().getPattern().isRealTypedVar(expr.getExpression()))) {
    final MatchingHandler exprHandler=myCompilingVisitor.getContext().getPattern().getHandler(expr);
    if (exprHandler instanceof SubstitutionHandler) {
      SubstitutionHandler handler=(SubstitutionHandler)exprHandler;
      handler.setFilter(new StatementFilter());
      handler.setMatchHandler(new StatementHandler());
    }
  }
}
