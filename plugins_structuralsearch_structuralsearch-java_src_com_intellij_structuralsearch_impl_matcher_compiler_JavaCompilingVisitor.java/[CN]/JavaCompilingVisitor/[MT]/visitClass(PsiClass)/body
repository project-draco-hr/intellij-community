{
  super.visitClass(psiClass);
  CompiledPattern pattern=myCompilingVisitor.getContext().getPattern();
  final MatchingHandler handler=pattern.getHandler(psiClass);
  if (needsSupers(psiClass,handler)) {
    ((JavaCompiledPattern)pattern).setRequestsSuperInners(true);
  }
  handleReferenceText(psiClass.getName(),myCompilingVisitor.getContext());
  GlobalCompilingVisitor.setFilter(handler,ClassFilter.getInstance());
  boolean hasSubstitutionHandler=false;
  for (PsiElement element=psiClass.getFirstChild(); element != null; element=element.getNextSibling()) {
    if (element instanceof PsiTypeElement && element.getNextSibling() instanceof PsiErrorElement) {
      MatchingHandler unmatchedSubstitutionHandler=pattern.getHandler(element);
      if (unmatchedSubstitutionHandler != null) {
        psiClass.putUserData(JavaCompiledPattern.ALL_CLASS_CONTENT_VAR_NAME_KEY,pattern.getTypedVarString(element));
        hasSubstitutionHandler=true;
      }
    }
  }
  if (!hasSubstitutionHandler) {
    String name=CompiledPattern.ALL_CLASS_UNMATCHED_CONTENT_VAR_ARTIFICIAL_NAME;
    psiClass.putUserData(JavaCompiledPattern.ALL_CLASS_CONTENT_VAR_NAME_KEY,name);
    MatchOptions options=myCompilingVisitor.getContext().getOptions();
    if (options.getVariableConstraint(name) == null) {
      pattern.createSubstitutionHandler(name,name,false,0,Integer.MAX_VALUE,true);
      MatchVariableConstraint constraint=new MatchVariableConstraint(true);
      constraint.setName(name);
      constraint.setMinCount(0);
      constraint.setMaxCount(Integer.MAX_VALUE);
      options.addVariableConstraint(constraint);
    }
  }
}
