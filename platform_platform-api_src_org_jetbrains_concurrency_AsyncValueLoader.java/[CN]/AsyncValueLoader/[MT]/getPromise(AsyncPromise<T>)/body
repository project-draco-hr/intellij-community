{
  final Promise<T> effectivePromise;
  try {
    effectivePromise=load(promise);
    if (effectivePromise != promise) {
      ref.compareAndSet(promise,effectivePromise);
    }
  }
 catch (  Throwable e) {
    ref.compareAndSet(promise,null);
    rejectAndDispose(promise);
    throw e instanceof RuntimeException ? ((RuntimeException)e) : new RuntimeException(e);
  }
  effectivePromise.done(doneHandler);
  if (isCancelOnReject()) {
    effectivePromise.rejected(new Consumer<Throwable>(){
      @Override public void consume(      Throwable throwable){
        ref.compareAndSet(effectivePromise,null);
      }
    }
);
  }
  if (effectivePromise != promise) {
    effectivePromise.notify(promise);
  }
  return effectivePromise;
}
