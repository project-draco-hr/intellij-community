{
  PsiBuilder.Marker pdMarker=builder.mark();
  parseOptionalModifier(builder,parser);
  PsiBuilder.Marker rb=builder.mark();
  final ReferenceElement.ReferenceElementResult result=TypeSpec.parseStrict(builder,false);
  if (GroovyTokenTypes.mIDENT.equals(builder.getTokenType()) || (GroovyTokenTypes.mTRIPLE_DOT.equals(builder.getTokenType()))) {
    rb.drop();
  }
 else   if (result == ReferenceElement.ReferenceElementResult.REF_WITH_TYPE_PARAMS || result == ReferenceElement.ReferenceElementResult.PATH_REF) {
    rb.drop();
    pdMarker.drop();
    builder.error(GroovyBundle.message("identifier.expected"));
    return true;
  }
 else {
    rb.rollbackTo();
  }
  boolean hasDots=ParserUtils.getToken(builder,GroovyTokenTypes.mTRIPLE_DOT);
  if (ParserUtils.getToken(builder,GroovyTokenTypes.mIDENT)) {
    if (GroovyTokenTypes.mASSIGN.equals(builder.getTokenType())) {
      VariableInitializer.parse(builder,parser);
    }
    pdMarker.done(GroovyElementTypes.PARAMETER);
    return true;
  }
 else   if (hasDots) {
    pdMarker.error(GroovyBundle.message("identifier.expected"));
    return true;
  }
 else {
    pdMarker.rollbackTo();
    return false;
  }
}
