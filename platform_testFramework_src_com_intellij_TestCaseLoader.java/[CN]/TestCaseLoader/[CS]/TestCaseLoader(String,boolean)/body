{
  myForceLoadPerformanceTests=forceLoadPerformanceTests;
  String patterns=System.getProperty(TARGET_TEST_PATTERNS);
  if (patterns != null) {
    myTestClassesFilter=new PatternListTestClassFilter(StringUtil.split(patterns,";"));
    System.out.println("Using patterns: [" + patterns + "]");
  }
 else {
    List<URL> groupingFileUrls=Collections.emptyList();
    if (!StringUtil.isEmpty(classFilterName)) {
      try {
        groupingFileUrls=Collections.list(getClass().getClassLoader().getResources(classFilterName));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    List<String> testGroupNames=StringUtil.split(System.getProperty(TARGET_TEST_GROUP,"").trim(),";");
    MultiMap<String,String> groups=MultiMap.createLinked();
    for (    URL fileUrl : groupingFileUrls) {
      try {
        InputStreamReader reader=new InputStreamReader(fileUrl.openStream());
        try {
          groups.putAllValues(GroupBasedTestClassFilter.readGroups(reader));
        }
  finally {
          reader.close();
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
        System.err.println("Failed to load test groups from " + fileUrl);
      }
    }
    if (groups.isEmpty()) {
      System.out.println("Using all classes");
      myTestClassesFilter=TestClassesFilter.ALL_CLASSES;
    }
 else {
      System.out.println("Using test groups: " + testGroupNames);
      myTestClassesFilter=new GroupBasedTestClassFilter(groups,testGroupNames);
    }
  }
}
