{
  Boolean isInner=IS_INNER_CLASS.get(file);
  if (isInner != null)   return isInner;
  final Ref<Boolean> ref=Ref.create(Boolean.FALSE);
  try {
    ClassReader reader=new ClassReader(file.contentsToByteArray(false));
    final String className=reader.getClassName();
    reader.accept(new ClassVisitor(Opcodes.ASM5){
      @Override public void visitOuterClass(      String owner,      String name,      String desc){
        ref.set(Boolean.TRUE);
        throw new ProcessCanceledException();
      }
      @Override public void visitInnerClass(      String name,      String outer,      String inner,      int access){
        if (className.equals(name)) {
          ref.set(Boolean.TRUE);
          throw new ProcessCanceledException();
        }
      }
      @Override public FieldVisitor visitField(      int access,      String name,      String desc,      String signature,      Object value){
        throw new ProcessCanceledException();
      }
    }
,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
  }
 catch (  ProcessCanceledException ignored) {
  }
catch (  Exception e) {
    Logger.getInstance(ClassFileViewProvider.class).warn(file.getPath(),e);
  }
  isInner=ref.get();
  IS_INNER_CLASS.set(file,isInner);
  return isInner;
}
