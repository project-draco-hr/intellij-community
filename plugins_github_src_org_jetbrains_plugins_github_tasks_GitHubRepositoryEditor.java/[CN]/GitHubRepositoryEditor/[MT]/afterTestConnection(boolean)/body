{
  if (b) {
    final Ref<Collection<String>> scopesRef=new Ref<Collection<String>>();
    final Ref<IOException> exceptionRef=new Ref<IOException>();
    ProgressManager.getInstance().run(new Task.Modal(myProject,"Access to GitHub",true){
      public void run(      @NotNull ProgressIndicator indicator){
        try {
          scopesRef.set(GithubApiUtil.getTokenScopes(GithubAuthData.createTokenAuth(myURLText.getText().trim(),myToken.getText().trim())));
        }
 catch (        IOException e) {
          exceptionRef.set(e);
        }
      }
    }
);
    if (!exceptionRef.isNull()) {
      GithubNotifications.showErrorDialog(myProject,"Error","Can't check token scopes");
      return;
    }
    Collection<String> scopes=scopesRef.get();
    if (scopes == null) {
      GithubNotifications.showErrorDialog(myProject,"Error","Can't check token scopes");
      return;
    }
    if (myPrivateRepo.isSelected()) {
      scopes.remove("repo");
    }
    if (scopes.isEmpty()) {
      return;
    }
    GithubNotifications.showWarningDialog(myProject,"Unneeded token scopes detected","Unneeded scopes: " + StringUtil.join(scopes,", "));
  }
}
