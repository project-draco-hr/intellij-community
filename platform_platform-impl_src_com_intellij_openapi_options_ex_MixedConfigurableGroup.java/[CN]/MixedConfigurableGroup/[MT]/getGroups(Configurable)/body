{
  HashMap<String,ArrayList<Configurable>> map=new HashMap<String,ArrayList<Configurable>>();
  for (  Configurable configurable : configurables) {
    String groupId=null;
    if (configurable instanceof ConfigurableWrapper) {
      groupId=((ConfigurableWrapper)configurable).getExtensionPoint().groupId;
    }
    ArrayList<Configurable> list=map.get(groupId);
    if (list == null) {
      map.put(groupId,list=new ArrayList<Configurable>());
    }
    list.add(configurable);
  }
  ArrayList<Configurable> buildList=map.get("build");
  if (buildList != null) {
    NodeConfigurable buildTools=new NodeConfigurable("build.tools",1000);
    buildTools.add(find("MavenSettings",buildList.iterator()));
    buildTools.add(find("reference.settingsdialog.project.gradle",buildList.iterator()));
    buildTools.add(find("reference.settingsdialog.project.gant",buildList.iterator()));
    if (buildTools.getConfigurables() != null) {
      buildList.add(0,buildTools);
    }
  }
  ArrayList<ConfigurableGroup> groups=new ArrayList<ConfigurableGroup>(map.size());
  groups.add(new MixedConfigurableGroup("appearance",map));
  groups.add(new MixedConfigurableGroup("editor",map));
  groups.add(new MixedConfigurableGroup("project",map));
  groups.add(new MixedConfigurableGroup("build",map));
  groups.add(new MixedConfigurableGroup("language",map));
  groups.add(new MixedConfigurableGroup("tools",map));
  ConfigurableGroup other=new MixedConfigurableGroup(null,map);
  for (  Entry<String,ArrayList<Configurable>> entry : map.entrySet()) {
    groups.add(new MixedConfigurableGroup(entry.getKey(),entry.getValue()));
  }
  groups.add(other);
  return groups.toArray(new ConfigurableGroup[groups.size()]);
}
