{
  PsiFile existing_import_file=null;
  AutoImportQuickFix fix=new AutoImportQuickFix(node,reference,ref_text,!PyCodeInsightSettings.getInstance().PREFER_FROM_IMPORT);
  Set<String> seen_file_names=new HashSet<String>();
  CollectProcessor import_prc=new CollectProcessor(IS_IMPORT_STATEMENT);
  PyResolveUtil.treeCrawlUp(import_prc,node);
  List<PsiElement> result=import_prc.getResult();
  if (result.size() > 0) {
    for (    PsiElement stmt : import_prc.getResult()) {
      for (      PyImportElement ielt : ((PyImportStatement)stmt).getImportElements()) {
        final PyReferenceExpression src=ielt.getImportReference();
        if (src != null) {
          PsiElement dst=src.getReference().resolve();
          if (dst instanceof PyFile) {
            PyFile dst_file=(PyFile)dst;
            String name=ielt.getImportReference().getReferencedName();
            seen_file_names.add(name);
            PsiElement res=dst_file.findExportedName(ref_text);
            if (res != null && !(res instanceof PyFile) && !(res instanceof PyImportElement) && dst_file.equals(res.getContainingFile())) {
              existing_import_file=dst_file;
              fix.addImport(res,dst_file,ielt);
            }
          }
        }
      }
    }
  }
  ProgressManager.checkCanceled();
  Project project=node.getProject();
  List<PsiElement> symbols=new ArrayList<PsiElement>();
  symbols.addAll(PyClassNameIndex.find(ref_text,project,true));
  GlobalSearchScope scope=PyClassNameIndex.projectWithLibrariesScope(project);
  if (!isQualifier(node)) {
    symbols.addAll(PyFunctionNameIndex.find(ref_text,project,scope));
  }
  symbols.addAll(PyVariableNameIndex.find(ref_text,project,scope));
  if (!isCall(node)) {
    symbols.addAll(findImportableModules(node.getContainingFile(),ref_text,project,scope));
  }
  if (symbols.size() > 0) {
    for (    PsiElement symbol : symbols) {
      if (isTopLevel(symbol)) {
        PsiFileSystemItem srcfile=symbol instanceof PsiFileSystemItem ? ((PsiFileSystemItem)symbol).getParent() : symbol.getContainingFile();
        if (srcfile != null && srcfile != existing_import_file && srcfile != node.getContainingFile() && PyNames.isIdentifier(FileUtil.getNameWithoutExtension(srcfile.getName()))) {
          PyQualifiedName import_path=ResolveImportUtil.findCanonicalImportPath(srcfile,node);
          if (import_path != null && !seen_file_names.contains(import_path.toString())) {
            fix.addImport(symbol,srcfile,import_path,proposeAsName(node.getContainingFile(),ref_text,import_path));
            seen_file_names.add(import_path.toString());
          }
        }
      }
    }
  }
  for (  PyImportCandidateProvider provider : Extensions.getExtensions(PyImportCandidateProvider.EP_NAME)) {
    provider.addImportCandidates(reference,ref_text,fix);
  }
  if (fix.getCandidatesCount() > 0) {
    fix.sortCandidates();
    return fix;
  }
  return null;
}
