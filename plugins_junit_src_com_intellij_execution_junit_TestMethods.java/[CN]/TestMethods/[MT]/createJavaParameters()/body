{
  final JavaParameters javaParameters=super.createDefaultJavaParameters();
  final JUnitConfiguration.Data data=getConfiguration().getPersistentData();
  RunConfigurationModule module=getConfiguration().getConfigurationModule();
  final Project project=module.getProject();
  final LinkedHashSet<TestInfo> methods=new LinkedHashSet<TestInfo>();
  final GlobalSearchScope searchScope=getConfiguration().getConfigurationModule().getSearchScope();
  for (  AbstractTestProxy failedTest : myFailedTests) {
    Location location=failedTest.getLocation(project,searchScope);
    if (location instanceof PsiMemberParameterizedLocation) {
      final PsiElement element=location.getPsiElement();
      if (element instanceof PsiMethod) {
        location=MethodLocation.elementInClass(((PsiMethod)element),((PsiMemberParameterizedLocation)location).getContainingClass());
      }
    }
    if (!(location instanceof MethodLocation))     continue;
    PsiElement psiElement=location.getPsiElement();
    LOG.assertTrue(psiElement instanceof PsiMethod);
    methods.add(((TestProxy)failedTest).getInfo());
  }
  addClassesListToJavaParameters(methods,new Function<TestInfo,String>(){
    @Override public String fun(    TestInfo testInfo){
      if (testInfo != null) {
        final MethodLocation location=(MethodLocation)testInfo.getLocation(project,searchScope);
        LOG.assertTrue(location != null);
        return JavaExecutionUtil.getRuntimeQualifiedName(location.getContainingClass()) + "," + testInfo.getName();
      }
      return null;
    }
  }
,data.getPackageName(),true,javaParameters);
  return javaParameters;
}
