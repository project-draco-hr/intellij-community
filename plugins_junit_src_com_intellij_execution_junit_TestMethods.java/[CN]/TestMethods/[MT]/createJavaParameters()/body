{
  final JavaParameters javaParameters=super.createDefaultJavaParameters();
  final JUnitConfiguration.Data data=getConfiguration().getPersistentData();
  RunConfigurationModule module=getConfiguration().getConfigurationModule();
  final Project project=module.getProject();
  final GlobalSearchScope searchScope=getConfiguration().getConfigurationModule().getSearchScope();
  addClassesListToJavaParameters(myFailedTests,new Function<AbstractTestProxy,String>(){
    @Override public String fun(    AbstractTestProxy testInfo){
      if (testInfo != null) {
        final Location location=testInfo.getLocation(project,searchScope);
        LOG.assertTrue(location != null);
        final PsiElement element=location.getPsiElement();
        if (element instanceof PsiMethod) {
          final PsiClass containingClass=location instanceof MethodLocation ? ((MethodLocation)location).getContainingClass() : ((PsiMethod)element).getContainingClass();
          if (containingClass != null) {
            return JavaExecutionUtil.getRuntimeQualifiedName(containingClass) + "," + testInfo.getName();
          }
        }
      }
      return null;
    }
  }
,data.getPackageName(),true,javaParameters);
  return javaParameters;
}
