{
  if (!CodeInsightUtilBase.prepareEditorForWrite(editor))   return;
  final JBList list=new JBList(myPlugins);
  list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  list.setCellRenderer(new MyListCellRenderer());
  Runnable runnable=new Runnable(){
    @Override public void run(){
      final KeyValue selected=(KeyValue)list.getSelectedValue();
      new WriteCommandAction.Simple(project,GradleBundle.message("gradle.codeInsight.action.apply_plugin.text"),file){
        @Override protected void run(){
          if (selected == null)           return;
          GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(project);
          GrStatement grStatement=factory.createStatementFromText(String.format("apply plugin: '%s'",selected.getKey()),null);
          PsiElement anchor=file.findElementAt(editor.getCaretModel().getOffset());
          PsiElement currentElement=PsiTreeUtil.getParentOfType(anchor,GrClosableBlock.class,GroovyFile.class);
          if (currentElement != null) {
            currentElement.addAfter(grStatement,anchor);
          }
 else {
            file.addAfter(grStatement,file.findElementAt(editor.getCaretModel().getOffset() - 1));
          }
          PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
          Document document=documentManager.getDocument(file);
          if (document != null) {
            documentManager.commitDocument(document);
          }
        }
      }
.execute();
    }
  }
;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    KeyValue descriptor=ContainerUtil.find(myPlugins,new Condition<KeyValue>(){
      @Override public boolean value(      KeyValue value){
        return value.getKey().equals(AddGradleDslPluginAction.TEST_THREAD_LOCAL.get());
      }
    }
);
    list.setSelectedValue(descriptor,false);
    runnable.run();
  }
 else {
    JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle(GradleBundle.message("gradle.codeInsight.action.apply_plugin.popup.title")).setItemChoosenCallback(runnable).setFilteringEnabled(new Function<Object,String>(){
      @Override public String fun(      Object o){
        return String.valueOf(((KeyValue)o).getKey());
      }
    }
).createPopup().showInBestPositionFor(editor);
  }
}
