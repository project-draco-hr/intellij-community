{
  BuildMessage.Kind kind=msg.getKind();
  String text=msg.getMessageText();
switch (kind) {
case ERROR:
    String compilerName;
  String messageText;
if (msg instanceof CompilerMessage) {
  CompilerMessage compilerMessage=(CompilerMessage)msg;
  compilerName=compilerMessage.getCompilerName();
  String sourcePath=compilerMessage.getSourcePath();
  if (sourcePath != null) {
    messageText=sourcePath + (compilerMessage.getLine() != -1 ? ":" + compilerMessage.getLine() : "") + ":\n"+ text;
  }
 else {
    messageText=text;
  }
}
 else {
  compilerName="";
  messageText=text;
}
myFailed=true;
myBuildInfoPrinter.printCompilationErrors(JpsGantProjectBuilder.this,compilerName,messageText);
break;
case WARNING:
warning(text);
break;
case INFO:
if (msg instanceof BuilderStatisticsMessage) {
BuilderStatisticsMessage message=(BuilderStatisticsMessage)msg;
String buildKind=myBuildIncrementally ? " (incremental)" : "";
myBuildInfoPrinter.printStatisticsMessage(JpsGantProjectBuilder.this,"Compilation time '" + message.getBuilderName() + "'"+ buildKind+ ", ms",String.valueOf(message.getElapsedTimeMs()));
int sources=message.getNumberOfProcessedSources();
myBuildInfoPrinter.printStatisticsMessage(JpsGantProjectBuilder.this,"Processed files by '" + message.getBuilderName() + "'"+ buildKind,String.valueOf(sources));
if (!myBuildIncrementally && sources > 0) {
myBuildInfoPrinter.printStatisticsMessage(JpsGantProjectBuilder.this,"Compilation time per file for '" + message.getBuilderName() + "', ms",String.format(Locale.US,"%.2f",(double)message.getElapsedTimeMs() / sources));
}
}
 else if (!text.isEmpty()) {
info(text);
}
break;
case PROGRESS:
if (msg instanceof BuildingTargetProgressMessage) {
String targetsString=StringUtil.join(((BuildingTargetProgressMessage)msg).getTargets(),new NotNullFunction<BuildTarget<?>,String>(){
@NotNull @Override public String fun(BuildTarget<?> dom){
return dom.getPresentableName();
}
}
,",");
switch (((BuildingTargetProgressMessage)msg).getEventType()) {
case STARTED:
myBuildInfoPrinter.printBlockOpenedMessage(JpsGantProjectBuilder.this,targetsString);
break;
case FINISHED:
myBuildInfoPrinter.printBlockClosedMessage(JpsGantProjectBuilder.this,targetsString);
break;
}
}
break;
}
}
