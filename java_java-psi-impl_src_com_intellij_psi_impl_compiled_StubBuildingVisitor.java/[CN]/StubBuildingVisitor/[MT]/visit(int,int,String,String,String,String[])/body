{
  myInternalName=name;
  String parentName=myParent instanceof PsiClassStub ? ((PsiClassStub)myParent).getQualifiedName() : myParent instanceof PsiJavaFileStub ? ((PsiJavaFileStub)myParent).getPackageName() : null;
  String fqn=getFqn(name,myShortName,parentName);
  String shortName=myShortName != null && name.endsWith(myShortName) ? myShortName : PsiNameHelper.getShortClassName(fqn);
  int flags=myAccess | access;
  boolean isDeprecated=isSet(flags,Opcodes.ACC_DEPRECATED);
  boolean isInterface=isSet(flags,Opcodes.ACC_INTERFACE);
  boolean isEnum=isSet(flags,Opcodes.ACC_ENUM);
  boolean isAnnotationType=isSet(flags,Opcodes.ACC_ANNOTATION);
  byte stubFlags=PsiClassStubImpl.packFlags(isDeprecated,isInterface,isEnum,false,false,isAnnotationType,false,false);
  myResult=new PsiClassStubImpl(JavaStubElementTypes.CLASS,myParent,fqn,shortName,null,stubFlags);
  LanguageLevel languageLevel=ClsParsingUtil.getLanguageLevelByVersion(version);
  if (languageLevel == null)   languageLevel=LanguageLevel.HIGHEST;
  ((PsiClassStubImpl)myResult).setLanguageLevel(languageLevel);
  myModList=new PsiModifierListStubImpl(myResult,packClassFlags(flags));
  ClassInfo info=null;
  if (signature != null) {
    try {
      info=parseClassSignature(signature);
    }
 catch (    ClsFormatException e) {
      if (LOG.isDebugEnabled())       LOG.debug("source=" + mySource + " signature="+ signature,e);
    }
  }
  if (info == null) {
    info=parseClassDescription(superName,interfaces);
  }
  PsiTypeParameterListStub typeParameterList=new PsiTypeParameterListStubImpl(myResult);
  for (  Pair<String,String[]> parameter : info.typeParameters) {
    PsiTypeParameterStub parameterStub=new PsiTypeParameterStubImpl(typeParameterList,StringRef.fromString(parameter.first));
    newReferenceList(JavaStubElementTypes.EXTENDS_BOUND_LIST,parameterStub,parameter.second);
  }
  if (myResult.isInterface()) {
    if (info.interfaceNames != null && myResult.isAnnotationType()) {
      info.interfaceNames.remove(CommonClassNames.JAVA_LANG_ANNOTATION_ANNOTATION);
    }
    newReferenceList(JavaStubElementTypes.EXTENDS_LIST,myResult,ArrayUtil.toStringArray(info.interfaceNames));
    newReferenceList(JavaStubElementTypes.IMPLEMENTS_LIST,myResult,ArrayUtil.EMPTY_STRING_ARRAY);
  }
 else {
    if (info.superName == null || "java/lang/Object".equals(superName) || myResult.isEnum() && "java/lang/Enum".equals(superName)) {
      newReferenceList(JavaStubElementTypes.EXTENDS_LIST,myResult,ArrayUtil.EMPTY_STRING_ARRAY);
    }
 else {
      newReferenceList(JavaStubElementTypes.EXTENDS_LIST,myResult,new String[]{info.superName});
    }
    newReferenceList(JavaStubElementTypes.IMPLEMENTS_LIST,myResult,ArrayUtil.toStringArray(info.interfaceNames));
  }
}
