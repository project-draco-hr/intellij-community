{
  final RunResult<T> result=new RunResult<T>(this);
  final Application application=ApplicationManager.getApplication();
  if (application.isWriteAccessAllowed()) {
    result.run();
    return result;
  }
  try {
    boolean dispatchThread=application.isDispatchThread();
    if (!dispatchThread && application.isReadAccessAllowed()) {
      LOG.error("Must not start write action from within read action in the other thread - deadlock is coming");
    }
    Runnable runnable=new Runnable(){
      @Override public void run(){
        application.runWriteAction(new Runnable(){
          @Override public void run(){
            result.run();
          }
        }
);
      }
    }
;
    if (dispatchThread) {
      runnable.run();
    }
 else     if (application.isReadAccessAllowed()) {
      LOG.error("Calling write action from read-action leads to deadlock.");
    }
 else {
      SwingUtilities.invokeAndWait(runnable);
    }
  }
 catch (  Exception e) {
    if (isSilentExecution()) {
      result.setThrowable(e);
    }
 else {
      if (e instanceof RuntimeException)       throw (RuntimeException)e;
      throw new Error(e);
    }
  }
  return result;
}
