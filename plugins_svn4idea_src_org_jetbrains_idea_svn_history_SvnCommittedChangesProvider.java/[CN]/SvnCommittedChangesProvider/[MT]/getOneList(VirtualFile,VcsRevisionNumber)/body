{
  final RootUrlInfo rootUrlInfo=myVcs.getSvnFileUrlMapping().getWcRootForFilePath(new File(file.getPath()));
  if (rootUrlInfo == null)   return null;
  final SvnChangeList[] result=new SvnChangeList[1];
  final SVNRevision revisionBefore=((SvnRevisionNumber)number).getRevision();
  final SVNURL repositoryUrl=rootUrlInfo.getRepositoryUrlUrl();
  final SVNURL svnRootUrl=rootUrlInfo.getAbsoluteUrlAsUrl();
  final SvnRepositoryLocation svnRootLocation=new SvnRepositoryLocation(rootUrlInfo.getAbsoluteUrl());
  final String repositoryRelativeUrl=SvnUtil.ensureStartSlash(SvnUtil.join(SvnUtil.getRelativeUrl(repositoryUrl.toDecodedString(),svnRootUrl.toDecodedString()),SvnUtil.getRelativePath(rootUrlInfo.getPath(),file.getPath())));
  FilePath filePath=VcsUtil.getFilePath(file);
  SVNLogClient logger=myVcs.createLogClient();
  if (!tryExactHit(svnRootLocation,result,logger,revisionBefore,repositoryUrl,svnRootUrl) && !tryByRoot(result,logger,revisionBefore,repositoryUrl)) {
    filePath=getOneListStepByStep(svnRootLocation,result,logger,revisionBefore,svnRootUrl,repositoryUrl,repositoryRelativeUrl,filePath);
  }
 else {
    Change change=ContainerUtil.getFirstItem(result[0].getChanges());
    if (change != null) {
      final ContentRevision afterRevision=change.getAfterRevision();
      filePath=afterRevision != null ? afterRevision.getFile() : filePath;
    }
 else {
      final Change targetChange=result[0].getByPath(repositoryRelativeUrl);
      filePath=targetChange == null ? getOneListStepByStep(svnRootLocation,result,logger,revisionBefore,svnRootUrl,repositoryUrl,repositoryRelativeUrl,filePath) : filePath;
    }
  }
  return Pair.create(result[0],filePath);
}
