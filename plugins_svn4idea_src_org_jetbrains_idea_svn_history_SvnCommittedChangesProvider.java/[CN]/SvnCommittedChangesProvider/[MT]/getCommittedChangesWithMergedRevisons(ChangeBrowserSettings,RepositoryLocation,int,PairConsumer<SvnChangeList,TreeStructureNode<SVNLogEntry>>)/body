{
  final SvnRepositoryLocation svnLocation=(SvnRepositoryLocation)location;
  final String repositoryRoot=getRepositoryRoot(svnLocation);
  final MergeTrackerProxy proxy=new MergeTrackerProxy(new Consumer<TreeStructureNode<SVNLogEntry>>(){
    public void consume(    TreeStructureNode<SVNLogEntry> node){
      finalConsumer.consume(new SvnChangeList(myVcs,svnLocation,node.getMe(),repositoryRoot),node);
    }
  }
);
  final SvnMergeSourceTracker mergeSourceTracker=new SvnMergeSourceTracker(new ThrowableConsumer<Pair<SVNLogEntry,Integer>,SVNException>(){
    public void consume(    Pair<SVNLogEntry,Integer> svnLogEntryIntegerPair) throws SVNException {
      proxy.consume(svnLogEntryIntegerPair);
    }
  }
);
  getCommittedChangesImpl(settings,svnLocation.getURL(),new String[]{""},maxCount,new Consumer<SVNLogEntry>(){
    public void consume(    final SVNLogEntry svnLogEntry){
      try {
        mergeSourceTracker.consume(svnLogEntry);
      }
 catch (      SVNException e) {
        throw new RuntimeException(e);
      }
    }
  }
,true,false);
  proxy.finish();
}
