{
  final SvnRepositoryLocation svnLocation=(SvnRepositoryLocation)location;
  final String repositoryRoot=getRepositoryRoot(svnLocation);
  final MergeSourceHierarchyBuilder builder=new MergeSourceHierarchyBuilder(new Consumer<TreeStructureNode<LogEntry>>(){
    public void consume(    TreeStructureNode<LogEntry> node){
      finalConsumer.consume(new SvnChangeList(myVcs,svnLocation,node.getMe(),repositoryRoot),node);
    }
  }
);
  final SvnMergeSourceTracker mergeSourceTracker=new SvnMergeSourceTracker(new ThrowableConsumer<Pair<LogEntry,Integer>,SVNException>(){
    public void consume(    Pair<LogEntry,Integer> svnLogEntryIntegerPair) throws SVNException {
      builder.consume(svnLogEntryIntegerPair);
    }
  }
);
  getCommittedChangesImpl(settings,svnLocation,maxCount,new Consumer<LogEntry>(){
    public void consume(    final LogEntry svnLogEntry){
      try {
        mergeSourceTracker.consume(svnLogEntry);
      }
 catch (      SVNException e) {
        throw new RuntimeException(e);
      }
    }
  }
,true,false);
  builder.finish();
}
