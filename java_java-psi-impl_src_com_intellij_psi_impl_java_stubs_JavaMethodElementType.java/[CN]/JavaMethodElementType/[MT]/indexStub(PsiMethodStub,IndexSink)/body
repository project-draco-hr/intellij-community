{
  final String name=stub.getName();
  if (name != null) {
    sink.occurrence(JavaStubIndexKeys.METHODS,name);
    if (RecordUtil.isStaticNonPrivateMember(stub)) {
      sink.occurrence(JavaStubIndexKeys.JVM_STATIC_MEMBERS_NAMES,name);
      sink.occurrence(JavaStubIndexKeys.JVM_STATIC_MEMBERS_TYPES,stub.getReturnTypeText(false).getShortTypeText());
    }
  }
  Set<String> methodTypeParams=null;
  for (  StubElement stubElement : stub.getChildrenStubs()) {
    if (stubElement instanceof PsiTypeParameterListStub) {
      for (      Object tStub : stubElement.getChildrenStubs()) {
        if (tStub instanceof PsiTypeParameterStub) {
          if (methodTypeParams == null) {
            methodTypeParams=new HashSet<String>();
          }
          methodTypeParams.add(((PsiTypeParameterStub)tStub).getName());
        }
      }
    }
 else     if (stubElement instanceof PsiParameterListStub) {
      for (      StubElement paramStub : ((PsiParameterListStub)stubElement).getChildrenStubs()) {
        if (paramStub instanceof PsiParameterStub) {
          TypeInfo type=((PsiParameterStub)paramStub).getType(false);
          String typeName=PsiNameHelper.getShortClassName(type.text);
          if (TypeConversionUtil.isPrimitive(typeName) || TypeConversionUtil.isPrimitiveWrapper(typeName))           continue;
          sink.occurrence(JavaStubIndexKeys.METHOD_TYPES,typeName);
          if (methodTypeParams != null && methodTypeParams.contains(typeName)) {
            sink.occurrence(JavaStubIndexKeys.METHOD_TYPES,TYPE_PARAMETER_PSEUDO_NAME);
            methodTypeParams=null;
          }
        }
      }
      break;
    }
  }
}
