{
  List<Map.Entry<GitRepository,GitPushRepoResult>> entries=ContainerUtil.sorted(results.entrySet(),new Comparator<Map.Entry<GitRepository,GitPushRepoResult>>(){
    @Override public int compare(    Map.Entry<GitRepository,GitPushRepoResult> o1,    Map.Entry<GitRepository,GitPushRepoResult> o2){
      int compareResultTypes=GitPushRepoResult.TYPE_COMPARATOR.compare(o1.getValue().getType(),o2.getValue().getType());
      if (compareResultTypes != 0) {
        return compareResultTypes;
      }
      return DvcsUtil.REPOSITORY_COMPARATOR.compare(o1.getKey(),o2.getKey());
    }
  }
);
  return StringUtil.join(entries,new Function<Map.Entry<GitRepository,GitPushRepoResult>,String>(){
    @Override public String fun(    Map.Entry<GitRepository,GitPushRepoResult> entry){
      GitRepository repository=entry.getKey();
      GitPushRepoResult result=entry.getValue();
      String description=formRepoDescription(result);
      if (!multiRepoProject) {
        description=StringUtil.capitalize(description);
      }
 else {
        description=DvcsUtil.getShortRepositoryName(repository) + ": " + description;
      }
      return description;
    }
  }
,"<br/>");
}
