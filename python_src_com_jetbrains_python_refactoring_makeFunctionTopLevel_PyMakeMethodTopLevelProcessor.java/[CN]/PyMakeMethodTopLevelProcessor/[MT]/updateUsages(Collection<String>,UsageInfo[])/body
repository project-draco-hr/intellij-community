{
  for (  String attrName : myAttributeReferences.keySet()) {
    final Collection<PyReferenceExpression> reads=myAttributeReferences.get(attrName);
    final String paramName=myAttributeToParameterName.get(attrName);
    if (!attrName.equals(paramName)) {
      for (      PyReferenceExpression read : reads) {
        read.replace(myGenerator.createExpressionFromText(LanguageLevel.forElement(read),paramName));
      }
    }
 else {
      for (      PyReferenceExpression read : reads) {
        removeQualifier(read);
      }
    }
  }
  final Collection<String> attrNames=myAttributeToParameterName.keySet();
  for (  UsageInfo usage : usages) {
    final PsiElement usageElem=usage.getElement();
    if (usageElem == null) {
      continue;
    }
    if (usageElem instanceof PyReferenceExpression) {
      final PyExpression qualifier=((PyReferenceExpression)usageElem).getQualifier();
      final PyCallExpression callExpr=as(usageElem.getParent(),PyCallExpression.class);
      if (qualifier != null && callExpr != null && callExpr.getArgumentList() != null) {
        PyExpression instanceExpr=qualifier;
        final PyArgumentList argumentList=callExpr.getArgumentList();
        if (resolvesToClass(qualifier)) {
          final PyExpression[] arguments=argumentList.getArguments();
          instanceExpr=arguments[0];
          if (arguments.length > 0) {
            arguments[0].delete();
          }
        }
        if (isPureReferenceExpression(instanceExpr)) {
          if (myReadsOfSelfParam.contains(instanceExpr)) {
            addArguments(argumentList,newParamNames);
          }
 else {
            final String instanceExprText=instanceExpr.getText();
            addArguments(argumentList,ContainerUtil.map(attrNames,new Function<String,String>(){
              @Override public String fun(              String attribute){
                return instanceExprText + "." + attribute;
              }
            }
));
          }
        }
 else         if (newParamNames.size() == 1) {
          addArguments(argumentList,Collections.singleton(instanceExpr.getText() + "." + ContainerUtil.getFirstItem(attrNames)));
        }
 else         if (!newParamNames.isEmpty()) {
          final PyStatement anchor=PsiTreeUtil.getParentOfType(callExpr,PyStatement.class);
          final String targetName=selectUniqueName(usageElem);
          final String assignmentText=targetName + " = " + instanceExpr.getText();
          final PyAssignmentStatement assignment=myGenerator.createFromText(LanguageLevel.forElement(callExpr),PyAssignmentStatement.class,assignmentText);
          anchor.getParent().addBefore(assignment,anchor);
          addArguments(argumentList,ContainerUtil.map(attrNames,new Function<String,String>(){
            @Override public String fun(            String attribute){
              return targetName + "." + attribute;
            }
          }
));
        }
      }
      final PsiFile usageFile=usage.getFile();
      final PsiFile origFile=myFunction.getContainingFile();
      if (usageFile != origFile) {
        final String funcName=myFunction.getName();
        final String origModuleName=QualifiedNameFinder.findShortestImportableName(origFile,origFile.getVirtualFile());
        if (usageFile != null && origModuleName != null && funcName != null) {
          AddImportHelper.addOrUpdateFromImportStatement(usageFile,origModuleName,funcName,null,ImportPriority.PROJECT,null);
        }
      }
      removeQualifier((PyReferenceExpression)usageElem);
    }
  }
}
