{
  final Project project=panel.getProject();
  final Collection<VirtualFile> commitRoots=panel.getRoots();
  return new CheckinHandler(){
    private Collection<Change> myChanges=panel.getSelectedChanges();
    @Override public RefreshableOnComponent getBeforeCheckinConfigurationPanel(){
      return null;
    }
    @Override public ReturnResult beforeCheckin(    @Nullable CommitExecutor executor,    PairConsumer<Object,Object> additionalDataConsumer){
      if (executor instanceof LocalCommitExecutor)       return ReturnResult.COMMIT;
      final SvnVcs vcs=SvnVcs.getInstance(project);
      final MultiMap<String,WorkingCopyFormat> copiesInfo=splitIntoCopies(vcs,myChanges);
      final List<String> repoUrls=new ArrayList<>();
      for (      Map.Entry<String,Collection<WorkingCopyFormat>> entry : copiesInfo.entrySet()) {
        if (entry.getValue().size() > 1) {
          repoUrls.add(entry.getKey());
        }
      }
      if (!repoUrls.isEmpty()) {
        final String join=StringUtil.join(repoUrls,",\n");
        final int isOk=Messages.showOkCancelDialog(project,SvnBundle.message("checkin.different.formats.involved",repoUrls.size() > 1 ? 1 : 0,join),"Subversion: Commit Will Split",Messages.getWarningIcon());
        return Messages.OK == isOk ? ReturnResult.COMMIT : ReturnResult.CANCEL;
      }
      return ReturnResult.COMMIT;
    }
    @Override public void includedChangesChanged(){
      myChanges=panel.getSelectedChanges();
    }
    @Override public void checkinSuccessful(){
      if (SvnConfiguration.getInstance(project).isAutoUpdateAfterCommit()) {
        final VirtualFile[] roots=ProjectLevelVcsManager.getInstance(project).getRootsUnderVcs(SvnVcs.getInstance(project));
        final List<FilePath> paths=new ArrayList<>();
        for (        VirtualFile root : roots) {
          boolean take=false;
          for (          VirtualFile commitRoot : commitRoots) {
            if (VfsUtilCore.isAncestor(root,commitRoot,false)) {
              take=true;
              break;
            }
          }
          if (take) {
            paths.add(VcsUtil.getFilePath(root));
          }
        }
        if (paths.isEmpty())         return;
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            AutoSvnUpdater.run(new AutoSvnUpdater(project,paths.toArray(new FilePath[paths.size()])),ActionInfo.UPDATE.getActionName());
          }
        }
,ModalityState.NON_MODAL);
      }
    }
  }
;
}
