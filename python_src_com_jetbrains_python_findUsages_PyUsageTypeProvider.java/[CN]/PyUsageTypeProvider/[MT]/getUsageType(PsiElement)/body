{
  if (element instanceof PyElement) {
    if (PsiTreeUtil.getParentOfType(element,PyImportStatement.class,PyFromImportStatement.class) != null) {
      return IN_IMPORT;
    }
    if (element instanceof PyQualifiedExpression) {
      final PyExpression qualifier=((PyQualifiedExpression)element).getQualifier();
      if (qualifier != null && qualifier.getType(TypeEvalContext.fast()) == null) {
        return UNTYPED;
      }
    }
    if (element instanceof PyReferenceExpression) {
      final PyCallExpression call=PsiTreeUtil.getParentOfType(element,PyCallExpression.class);
      if (call != null && call.isCalleeText(PyNames.ISINSTANCE)) {
        final PyExpression[] args=call.getArguments();
        if (args.length == 2) {
          PyExpression typeExpression=args[1];
          if (element == typeExpression) {
            return USAGE_IN_ISINSTANCE;
          }
          typeExpression=PyUtil.flattenParens(typeExpression);
          if (typeExpression instanceof PySequenceExpression && element.getParent() == typeExpression) {
            return USAGE_IN_ISINSTANCE;
          }
        }
      }
      final PyClass pyClass=PsiTreeUtil.getParentOfType(element,PyClass.class);
      if (pyClass != null && PsiTreeUtil.isAncestor(pyClass.getSuperClassExpressionList(),element,true)) {
        return USAGE_IN_SUPERCLASS;
      }
    }
  }
  return null;
}
