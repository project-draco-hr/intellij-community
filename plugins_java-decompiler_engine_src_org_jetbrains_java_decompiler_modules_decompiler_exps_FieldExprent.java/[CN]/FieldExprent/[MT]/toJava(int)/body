{
  StringBuilder buf=new StringBuilder();
  if (isStatic) {
    ClassNode node=(ClassNode)DecompilerContext.getProperty(DecompilerContext.CURRENT_CLASS_NODE);
    if (node == null || !classname.equals(node.classStruct.qualifiedName)) {
      buf.append(DecompilerContext.getImportCollector().getShortName(ExprProcessor.buildJavaClassName(classname)));
      buf.append(".");
    }
  }
 else {
    String super_qualifier=null;
    if (instance != null && instance.type == Exprent.EXPRENT_VAR) {
      VarExprent instvar=(VarExprent)instance;
      VarVersionPaar varpaar=new VarVersionPaar(instvar);
      MethodWrapper current_meth=(MethodWrapper)DecompilerContext.getProperty(DecompilerContext.CURRENT_METHOD_WRAPPER);
      if (current_meth != null) {
        String this_classname=current_meth.varproc.getThisvars().get(varpaar);
        if (this_classname != null) {
          if (!classname.equals(this_classname)) {
            super_qualifier=this_classname;
          }
        }
      }
    }
    if (super_qualifier != null) {
      StructClass current_class=((ClassNode)DecompilerContext.getProperty(DecompilerContext.CURRENT_CLASS_NODE)).classStruct;
      if (!super_qualifier.equals(current_class.qualifiedName)) {
        buf.append(DecompilerContext.getImportCollector().getShortName(ExprProcessor.buildJavaClassName(super_qualifier)));
        buf.append(".");
      }
      buf.append("super");
    }
 else {
      StringBuilder buff=new StringBuilder();
      boolean casted=ExprProcessor.getCastedExprent(instance,new VarType(CodeConstants.TYPE_OBJECT,0,classname),buff,indent,true);
      String res=buff.toString();
      if (casted || instance.getPrecedence() > getPrecedence()) {
        res="(" + res + ")";
      }
      buf.append(res);
    }
    if (buf.toString().equals(VarExprent.VAR_NAMELESS_ENCLOSURE)) {
      buf.setLength(0);
    }
 else {
      buf.append(".");
    }
  }
  buf.append(name);
  return buf.toString();
}
