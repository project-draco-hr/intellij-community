{
  PsiElement element=location.getPsiElement();
  if (!(TestRunnerService.getInstance(element.getProject()).getProjectConfiguration().equals(PythonTestConfigurationsModel.PY_TEST_NAME)))   return null;
  PsiFileSystemItem file=element instanceof PsiDirectory ? (PsiDirectory)element : element.getContainingFile();
  if (file == null)   return null;
  myPsiElement=file;
  String path=file.getVirtualFile().getPath();
  if (file instanceof PyFile || file instanceof PsiDirectory) {
    final List<PyStatement> testCases=PyTestUtil.getPyTestCasesFromFile(file);
    if (testCases.isEmpty())     return null;
  }
 else   return null;
  final RunnerAndConfigurationSettings result=RunManager.getInstance(location.getProject()).createRunConfiguration(file.getName(),getConfigurationFactory());
  PyTestRunConfiguration configuration=(PyTestRunConfiguration)result.getConfiguration();
  configuration.setUseModuleSdk(true);
  configuration.setModule(ModuleUtil.findModuleForPsiElement(myPsiElement));
  final Sdk sdk=PythonSdkType.findPythonSdk(location.getModule());
  if (sdk == null || !PyTestUtil.isPyTestInstalled(sdk.getHomePath()))   return null;
  configuration.setTestToRun(path);
  PyFunction pyFunction=findTestFunction(location);
  PyClass pyClass=PsiTreeUtil.getParentOfType(location.getPsiElement(),PyClass.class,false);
  if (pyFunction != null) {
    String name=pyFunction.getName();
    if (pyClass != null)     name=pyClass.getName() + "." + name;
    configuration.setKeywords(name);
    configuration.setName(name + " in " + configuration.getName());
    myPsiElement=pyFunction;
  }
 else   if (pyClass != null) {
    String name=pyClass.getName();
    configuration.setKeywords(name);
    configuration.setName(name + " in " + configuration.getName());
    myPsiElement=pyClass;
  }
  configuration.setName(configuration.suggestedName());
  return result;
}
