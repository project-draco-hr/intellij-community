{
  final EditorNotificationPanel panel=new EditorNotificationPanel();
  panel.setText("Plugins supporting *." + extension + " are found");
  final List<String> disabledPlugins=new ArrayList<String>(PluginManagerCore.getDisabledPlugins());
  disabledPlugins.retainAll(plugins);
  if (disabledPlugins.size() == 1) {
    panel.createActionLabel("Enable disabled plugin",new Runnable(){
      @Override public void run(){
        myEnabledExtensions.add(extension);
        PluginManagerCore.enablePlugin(disabledPlugins.get(0));
        myNotifications.updateAllNotifications();
        PluginManagerMain.notifyPluginsWereUpdated("Plugin was successfully enabled");
      }
    }
);
  }
 else {
    panel.createActionLabel("Install plugins",new Runnable(){
      @Override public void run(){
        ProgressManager.getInstance().run(new Task.Modal(null,"Search for plugins in repository",true){
          private final Set<PluginDownloader> myPlugins=new HashSet<PluginDownloader>();
          private List<IdeaPluginDescriptor> myAllPlugins;
          @Override public void run(          @NotNull ProgressIndicator indicator){
            try {
              myAllPlugins=RepositoryHelper.loadPluginsFromRepository(indicator);
              for (              IdeaPluginDescriptor loadedPlugin : myAllPlugins) {
                if (plugins.contains(loadedPlugin.getPluginId().getIdString())) {
                  myPlugins.add(PluginDownloader.createDownloader(loadedPlugin));
                }
              }
            }
 catch (            Exception ignore) {
            }
          }
          @Override public void onSuccess(){
            final PluginsAdvertiserDialog advertiserDialog=new PluginsAdvertiserDialog(null,myPlugins.toArray(new PluginDownloader[myPlugins.size()]),myAllPlugins);
            advertiserDialog.show();
            if (advertiserDialog.isOK()) {
              myEnabledExtensions.add(extension);
              myNotifications.updateAllNotifications();
            }
          }
        }
);
      }
    }
);
  }
  panel.createActionLabel("Ignore extension",new Runnable(){
    @Override public void run(){
      final UnknownFeaturesCollector collectorSuggester=UnknownFeaturesCollector.getInstance(myProject);
      collectorSuggester.ignoreFeature(createExtensionFeature(extension));
      myNotifications.updateAllNotifications();
    }
  }
);
  return panel;
}
