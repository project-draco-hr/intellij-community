{
  final EditorNotificationPanel panel=new EditorNotificationPanel();
  panel.setText("Plugins supporting files with " + extension + " are found");
  final IdeaPluginDescriptor disabledPlugin=PluginsAdvertiser.getDisabledPlugin(plugins);
  if (disabledPlugin != null) {
    panel.createActionLabel("Enable " + disabledPlugin.getName() + " plugin",new Runnable(){
      @Override public void run(){
        myEnabledExtensions.add(extension);
        myNotifications.updateAllNotifications();
        PluginsAdvertiser.enablePlugins(myProject,Collections.singletonList(disabledPlugin));
      }
    }
);
  }
 else   if (hasNonBundledPlugin(plugins)) {
    panel.createActionLabel("Install plugins",new Runnable(){
      @Override public void run(){
        ProgressManager.getInstance().run(new Task.Modal(null,"Search for plugins in repository",true){
          private final Set<PluginDownloader> myPlugins=new HashSet<PluginDownloader>();
          private List<IdeaPluginDescriptor> myAllPlugins;
          @Override public void run(          @NotNull ProgressIndicator indicator){
            try {
              myAllPlugins=RepositoryHelper.loadPluginsFromRepository(indicator);
              for (              IdeaPluginDescriptor loadedPlugin : myAllPlugins) {
                if (plugins.contains(new PluginsAdvertiser.Plugin(loadedPlugin.getPluginId(),loadedPlugin.getName(),false))) {
                  myPlugins.add(PluginDownloader.createDownloader(loadedPlugin));
                }
              }
            }
 catch (            Exception ignore) {
            }
          }
          @Override public void onSuccess(){
            final PluginsAdvertiserDialog advertiserDialog=new PluginsAdvertiserDialog(null,myPlugins.toArray(new PluginDownloader[myPlugins.size()]),myAllPlugins);
            advertiserDialog.show();
            if (advertiserDialog.isOK()) {
              myEnabledExtensions.add(extension);
              myNotifications.updateAllNotifications();
            }
          }
        }
);
      }
    }
);
  }
 else   if (PluginsAdvertiser.hasBundledPluginToInstall(plugins) != null) {
    if (PropertiesComponent.getInstance().isTrueValue(PluginsAdvertiser.IGNORE_ULTIMATE_EDITION)) {
      return null;
    }
    panel.createActionLabel(PluginsAdvertiser.CHECK_ULTIMATE_EDITION_TITLE,new Runnable(){
      @Override public void run(){
        myEnabledExtensions.add(extension);
        PluginsAdvertiser.openDownloadPage();
      }
    }
);
    panel.createActionLabel(PluginsAdvertiser.ULTIMATE_EDITION_SUGGESTION,new Runnable(){
      @Override public void run(){
        PropertiesComponent.getInstance().setValue(PluginsAdvertiser.IGNORE_ULTIMATE_EDITION,"true");
        myNotifications.updateAllNotifications();
      }
    }
);
  }
 else {
    return null;
  }
  panel.createActionLabel("Ignore extension",new Runnable(){
    @Override public void run(){
      UnknownFeaturesCollector.getInstance(myProject).ignoreFeature(createExtensionFeature(extension));
      myNotifications.updateAllNotifications();
    }
  }
);
  return panel;
}
