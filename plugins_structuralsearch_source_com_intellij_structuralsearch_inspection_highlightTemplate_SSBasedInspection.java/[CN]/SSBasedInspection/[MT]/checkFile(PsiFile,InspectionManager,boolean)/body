{
  final Project project=file.getProject();
  if (compiledConfigurations == null)   return null;
  final List<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
  final List<Pair<MatchContext,Configuration>> contexts=compiledConfigurations.getMatchContexts();
  for (  Pair<MatchContext,Configuration> pair : contexts) {
    Configuration configuration=pair.second;
    MatchContext context=pair.first;
    try {
      new Matcher(project).processMatchesInFile(context,configuration,file,new PairProcessor<MatchResult,Configuration>(){
        public boolean process(        MatchResult matchResult,        Configuration configuration){
          PsiElement element=matchResult.getMatch();
          String name=configuration.getName();
          LocalQuickFix fix=createQuickFix(project,matchResult,configuration);
          ProblemDescriptor problemDescriptor=manager.createProblemDescriptor(element,name,fix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly);
synchronized (problems) {
            problems.add(problemDescriptor);
          }
          return true;
        }
      }
);
    }
 catch (    StackOverflowError ignored) {
    }
  }
synchronized (problems) {
    return problems.toArray(new ProblemDescriptor[problems.size()]);
  }
}
