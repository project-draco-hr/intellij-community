{
  if (left.size() == 0) {
    return CompareResult.RIGHT_CONTAINS_LEFT;
  }
  if (right.size() == 0) {
    return CompareResult.LEFT_CONTAINS_RIGHT;
  }
  final Iterator<PsiMethod[]> leftIterator=left.myRevertedPath.iterator();
  final Iterator<PsiMethod[]> rightIterator=right.myRevertedPath.iterator();
  final PsiManager psiManager=PsiManager.getInstance(left.getFirstQualifierClass().getProject());
  while (leftIterator.hasNext() && rightIterator.hasNext()) {
    final PsiMethod thisNext=leftIterator.next()[0];
    final PsiMethod thatNext=rightIterator.next()[0];
    if (((thisNext.isConstructor() != thatNext.isConstructor())) || !thisNext.getName().equals(thatNext.getName()) || !psiManager.areElementsEquivalent(thisNext.getContainingClass(),thatNext.getContainingClass())) {
      return CompareResult.NOT_EQUAL;
    }
  }
  if (leftIterator.hasNext() && !rightIterator.hasNext()) {
    return CompareResult.LEFT_CONTAINS_RIGHT;
  }
  if (!leftIterator.hasNext() && rightIterator.hasNext()) {
    return CompareResult.RIGHT_CONTAINS_LEFT;
  }
  return CompareResult.EQUAL;
}
