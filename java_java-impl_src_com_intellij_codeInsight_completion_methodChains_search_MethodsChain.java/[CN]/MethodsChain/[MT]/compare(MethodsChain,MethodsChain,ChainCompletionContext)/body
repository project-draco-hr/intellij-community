{
  if (left.size() == 0) {
    return CompareResult.RIGHT_CONTAINS_LEFT;
  }
  if (right.size() == 0) {
    return CompareResult.LEFT_CONTAINS_RIGHT;
  }
  final Iterator<PsiMethod[]> leftIterator=left.myRevertedPath.iterator();
  final Iterator<PsiMethod[]> rightIterator=right.myRevertedPath.iterator();
  while (leftIterator.hasNext() && rightIterator.hasNext()) {
    final PsiMethod thisNext=leftIterator.next()[0];
    final PsiMethod thatNext=rightIterator.next()[0];
    if (thisNext == null || thatNext == null) {
      throw new NullPointerException();
    }
    if (((thisNext.isConstructor() != thatNext.isConstructor())) || !thisNext.getName().equals(thatNext.getName())) {
      return CompareResult.NOT_EQUAL;
    }
  }
  if (leftIterator.hasNext() && !rightIterator.hasNext()) {
    return CompareResult.LEFT_CONTAINS_RIGHT;
  }
  if (!leftIterator.hasNext() && rightIterator.hasNext()) {
    return CompareResult.RIGHT_CONTAINS_LEFT;
  }
  return hasBaseMethod(left.getPath().get(0),right.getPath().get(0),PsiManager.getInstance(context.getProject())) ? CompareResult.EQUAL : CompareResult.NOT_EQUAL;
}
