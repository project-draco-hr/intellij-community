{
  final PsiMethod methodElement=(PsiMethod)method.getElement();
  final PsiMethod conflictElement=(PsiMethod)conflict.getElement();
  final PsiType interfaceReturnType=getReturnType(functionalInterfaceIdx,method);
  final PsiType interfaceReturnType1=getReturnType(functionalInterfaceIdx,conflict);
  if (paramType instanceof PsiLambdaExpressionType) {
    final PsiLambdaExpression lambdaExpression=((PsiLambdaExpressionType)paramType).getExpression();
    if (!lambdaExpression.hasFormalParameterTypes()) {
      return Specifics.NEITHER;
    }
  }
  if (paramType instanceof PsiMethodReferenceType) {
    final PsiMethodReferenceExpression methodReferenceExpression=((PsiMethodReferenceType)paramType).getExpression();
    if (!methodReferenceExpression.isExact()) {
      return Specifics.NEITHER;
    }
  }
  if (paramType instanceof PsiLambdaExpressionType || paramType instanceof PsiMethodReferenceType) {
    if (interfaceReturnType != null && interfaceReturnType1 != null && !Comparing.equal(interfaceReturnType,interfaceReturnType1)) {
      Specifics moreSpecific1=comparePrimitives(paramType,interfaceReturnType,interfaceReturnType1);
      if (moreSpecific1 == Specifics.NEITHER && (interfaceReturnType != PsiType.VOID && interfaceReturnType1 != PsiType.VOID)) {
        return compareConflicts((MethodCandidateInfo)method,(MethodCandidateInfo)conflict,methodElement,conflictElement,interfaceReturnType,interfaceReturnType1,languageLevel);
      }
      return moreSpecific1;
    }
  }
  return Specifics.NEITHER;
}
