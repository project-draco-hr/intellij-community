{
  if (languageLevel.isAtLeast(LanguageLevel.JDK_1_8) && method1.getTypeParameters().length > 0 && myArgumentsList instanceof PsiExpressionList) {
    final PsiElement parent=myArgumentsList.getParent();
    if (parent instanceof PsiCallExpression) {
      return InferenceSession.isMoreSpecific(method2,method1,siteSubstitutor1,((PsiExpressionList)myArgumentsList).getExpressions(),myArgumentsList,varargsPosition);
    }
  }
  final PsiUtil.ApplicabilityChecker applicabilityChecker=languageLevel.isAtLeast(LanguageLevel.JDK_1_8) ? new PsiUtil.ApplicabilityChecker(){
    @Override public boolean isApplicable(    PsiType left,    PsiType right,    boolean allowUncheckedConversion,    int argId){
      return isTypeMoreSpecific(left,right,argId);
    }
  }
 : PsiUtil.ApplicabilityChecker.ASSIGNABILITY_CHECKER;
  final int applicabilityLevel=PsiUtil.getApplicabilityLevel(method1,methodSubstitutor1,types2AtSite,languageLevel,false,varargsPosition,applicabilityChecker);
  return applicabilityLevel > MethodCandidateInfo.ApplicabilityLevel.NOT_APPLICABLE;
}
