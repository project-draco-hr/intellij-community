{
  if (conflicts.isEmpty())   return null;
  if (conflicts.size() == 1)   return conflicts.get(0);
  boolean atLeastOneMatch=checkParametersNumber(conflicts,getActualParametersLength(),true);
  if (conflicts.size() == 1)   return conflicts.get(0);
  final FactoryMap<MethodCandidateInfo,PsiSubstitutor> map=new FactoryMap<MethodCandidateInfo,PsiSubstitutor>(){
    @Nullable @Override protected PsiSubstitutor create(    MethodCandidateInfo key){
      return key.getSubstitutor(false);
    }
  }
;
  checkSameSignatures(conflicts,map);
  if (conflicts.size() == 1)   return conflicts.get(0);
  checkAccessStaticLevels(conflicts,true);
  if (conflicts.size() == 1)   return conflicts.get(0);
  checkParametersNumber(conflicts,getActualParametersLength(),false);
  if (conflicts.size() == 1)   return conflicts.get(0);
  checkStaticMethodsOfInterfaces(conflicts);
  if (conflicts.size() == 1)   return conflicts.get(0);
  final int applicabilityLevel=checkApplicability(conflicts);
  if (conflicts.size() == 1)   return conflicts.get(0);
  if (!atLeastOneMatch)   return null;
  checkSpecifics(conflicts,applicabilityLevel,map,myLanguageLevel);
  if (conflicts.size() == 1)   return conflicts.get(0);
  checkPrimitiveVarargs(conflicts,getActualParametersLength());
  if (conflicts.size() == 1)   return conflicts.get(0);
  checkAccessStaticLevels(conflicts,false);
  if (conflicts.size() == 1)   return conflicts.get(0);
  Set<CandidateInfo> uniques=new THashSet<CandidateInfo>(conflicts);
  if (uniques.size() == 1)   return uniques.iterator().next();
  return null;
}
