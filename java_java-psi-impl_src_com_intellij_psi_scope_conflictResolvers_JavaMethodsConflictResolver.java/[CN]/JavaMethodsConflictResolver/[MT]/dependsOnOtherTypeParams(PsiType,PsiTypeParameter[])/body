{
  return type.accept(new PsiTypeVisitor<Boolean>(){
    @Nullable @Override public Boolean visitClassType(    PsiClassType classType){
      for (      PsiType psiType : classType.getParameters()) {
        if (psiType.accept(this))         return true;
      }
      return ArrayUtilRt.find(params,classType.resolve()) > -1;
    }
    @Nullable @Override public Boolean visitArrayType(    PsiArrayType arrayType){
      return arrayType.getComponentType().accept(this);
    }
    @Nullable @Override public Boolean visitWildcardType(    PsiWildcardType wildcardType){
      final PsiType bound=wildcardType.getBound();
      return bound != null && bound.accept(this);
    }
    @Nullable @Override public Boolean visitType(    PsiType type){
      return false;
    }
  }
);
}
