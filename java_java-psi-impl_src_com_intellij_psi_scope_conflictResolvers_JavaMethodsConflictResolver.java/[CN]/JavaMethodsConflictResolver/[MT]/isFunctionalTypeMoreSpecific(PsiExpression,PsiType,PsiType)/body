{
  if (expr instanceof PsiParenthesizedExpression) {
    return isFunctionalTypeMoreSpecific(((PsiParenthesizedExpression)expr).getExpression(),sType,tType);
  }
  if (expr instanceof PsiConditionalExpression) {
    final Specifics thenSpecifics=isFunctionalTypeMoreSpecific(((PsiConditionalExpression)expr).getThenExpression(),sType,tType);
    final Specifics elseSpecifics=isFunctionalTypeMoreSpecific(((PsiConditionalExpression)expr).getElseExpression(),sType,tType);
    return thenSpecifics == elseSpecifics ? thenSpecifics : Specifics.NEITHER;
  }
  if (expr instanceof PsiFunctionalExpression) {
    if (expr instanceof PsiLambdaExpression && !((PsiLambdaExpression)expr).hasFormalParameterTypes()) {
      return Specifics.NEITHER;
    }
    if (expr instanceof PsiMethodReferenceExpression && !((PsiMethodReferenceExpression)expr).isExact()) {
      return Specifics.NEITHER;
    }
    if (LambdaUtil.isFunctionalType(sType) && LambdaUtil.isFunctionalType(tType) && !TypeConversionUtil.erasure(tType).isAssignableFrom(sType)&& !TypeConversionUtil.erasure(sType).isAssignableFrom(tType)) {
      final boolean specific12=InferenceSession.isFunctionalTypeMoreSpecificOnExpression(sType,tType,expr);
      final boolean specific21=InferenceSession.isFunctionalTypeMoreSpecificOnExpression(tType,sType,expr);
      if (specific12 && !specific21)       return Specifics.FIRST;
      if (!specific12 && specific21)       return Specifics.SECOND;
    }
  }
  return Specifics.NEITHER;
}
