{
  MavenProjectsManager mavenProjectManager=MavenProjectsManager.getInstance(project);
  mavenProjectManager.addManagerListener(new MavenProjectsManager.Listener(){
    @Override public void activated(){
      rehighlight(project,null);
    }
    @Override public void projectsScheduled(){
    }
    @Override public void importAndResolveScheduled(){
    }
  }
);
  mavenProjectManager.addProjectsTreeListener(new MavenProjectsTree.ListenerAdapter(){
    @Override public void projectsUpdated(    List<Pair<MavenProject,MavenProjectChanges>> updated,    List<MavenProject> deleted){
      for (      Pair<MavenProject,MavenProjectChanges> each : updated) {
        rehighlight(project,each.first);
      }
    }
    @Override public void projectResolved(    Pair<MavenProject,MavenProjectChanges> projectWithChanges,    NativeMavenProjectHolder nativeMavenProject){
      rehighlight(project,projectWithChanges.first);
    }
    @Override public void pluginsResolved(    MavenProject mavenProject){
      rehighlight(project,mavenProject);
    }
    @Override public void foldersResolved(    Pair<MavenProject,MavenProjectChanges> projectWithChanges){
      rehighlight(project,projectWithChanges.first);
    }
    @Override public void artifactsDownloaded(    MavenProject mavenProject){
      rehighlight(project,mavenProject);
    }
  }
);
}
