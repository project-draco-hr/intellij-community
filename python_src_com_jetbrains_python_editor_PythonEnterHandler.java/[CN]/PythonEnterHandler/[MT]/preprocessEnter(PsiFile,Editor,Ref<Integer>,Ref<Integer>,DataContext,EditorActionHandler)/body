{
  int offset=caretOffset.get();
  if (editor instanceof EditorWindow) {
    file=InjectedLanguageUtil.getTopLevelFile(file);
    editor=InjectedLanguageUtil.getTopLevelEditor(editor);
    offset=editor.getCaretModel().getOffset();
  }
  if (!(file instanceof PyFile)) {
    return Result.Continue;
  }
  final Boolean isSplitLine=DataManager.getInstance().loadFromDataContext(dataContext,SplitLineAction.SPLIT_LINE_KEY);
  if (isSplitLine != null) {
    return Result.Continue;
  }
  Document doc=editor.getDocument();
  PsiDocumentManager.getInstance(file.getProject()).commitDocument(doc);
  final PsiElement element=file.findElementAt(offset);
  CodeInsightSettings codeInsightSettings=CodeInsightSettings.getInstance();
  if (codeInsightSettings.JAVADOC_STUB_ON_ENTER) {
    PsiElement comment=element;
    if (comment == null && offset != 0) {
      comment=file.findElementAt(offset - 1);
    }
    int expectedStringStart=editor.getCaretModel().getOffset() - 3;
    if (PythonDocCommentUtil.atDocCommentStart(comment,expectedStringStart)) {
      insertDocStringStub(editor,comment);
      return Result.Continue;
    }
  }
  if (element == null) {
    return Result.Continue;
  }
  final PsiElement elementParent=element.getParent();
  if (elementParent instanceof PyParenthesizedExpression)   return Result.Continue;
  if (offset > 0 && !(PyTokenTypes.STRING_NODES.contains(element.getNode().getElementType()))) {
    final PsiElement prevElement=file.findElementAt(offset - 1);
    if (prevElement == element)     return Result.Continue;
  }
  if (PyTokenTypes.TRIPLE_NODES.contains(element.getNode().getElementType()) || element.getNode().getElementType() == PyTokenTypes.DOCSTRING) {
    return Result.Continue;
  }
  final PyStringLiteralExpression string=PsiTreeUtil.findElementOfClassAtOffset(file,offset + 1,PyStringLiteralExpression.class,false);
  if (string != null && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) {
    final String stringText=element.getText();
    final int prefixLength=PyStringLiteralExpressionImpl.getPrefixLength(stringText);
    if (string.getTextOffset() + prefixLength >= offset) {
      return Result.Continue;
    }
    final String pref=element.getText().substring(0,prefixLength);
    final String quote=element.getText().substring(prefixLength,prefixLength + 1);
    final boolean nextIsBackslash="\\".equals(doc.getText(TextRange.create(offset - 1,offset)));
    final boolean isEscapedQuote=quote.equals(doc.getText(TextRange.create(offset,offset + 1))) && nextIsBackslash;
    final boolean isEscapedBackslash="\\".equals(doc.getText(TextRange.create(offset - 2,offset - 1))) && nextIsBackslash;
    if (nextIsBackslash && !isEscapedQuote && !isEscapedBackslash)     return Result.Continue;
    final PsiElement parent=string.getParent();
    final StringBuilder replacementString=new StringBuilder();
    if (parent instanceof PySequenceExpression || parent instanceof PyParenthesizedExpression || parent instanceof PyBinaryExpression|| parent instanceof PyKeyValueExpression|| parent instanceof PyNamedParameter|| parent instanceof PyArgumentList) {
      replacementString.append(quote + pref + quote);
      doc.insertString(offset,replacementString);
      caretOffset.set(caretOffset.get() + 1);
      return Result.Continue;
    }
 else {
      if (isEscapedQuote) {
        replacementString.append(quote);
        caretOffset.set(caretOffset.get() + 1);
      }
      replacementString.append(quote + " \\" + pref);
      if (!isEscapedQuote)       replacementString.append(quote);
      doc.insertString(offset,replacementString.toString());
      caretOffset.set(caretOffset.get() + 3);
      return Result.Continue;
    }
  }
  if (!PyCodeInsightSettings.getInstance().INSERT_BACKSLASH_ON_WRAP) {
    return Result.Continue;
  }
  if (offset > 0) {
    final PsiElement beforeCaret=file.findElementAt(offset - 1);
    if (beforeCaret instanceof PsiWhiteSpace && beforeCaret.getText().indexOf('\\') >= 0) {
      return Result.Continue;
    }
  }
  PsiElement statementBefore=findStatementBeforeCaret(file,offset);
  PsiElement statementAfter=findStatementAfterCaret(file,offset);
  if (statementBefore != statementAfter) {
    return Result.Continue;
  }
  if (statementBefore == null) {
    return Result.Continue;
  }
  if (PsiTreeUtil.hasErrorElements(statementBefore)) {
    final Boolean autoWrapping=DataManager.getInstance().loadFromDataContext(dataContext,AutoHardWrapHandler.AUTO_WRAP_LINE_IN_PROGRESS_KEY);
    if (autoWrapping == null) {
      return Result.Continue;
    }
  }
  if (inFromImportParentheses(statementBefore,offset)) {
    return Result.Continue;
  }
  PsiElement wrappableBefore=findWrappable(file,offset,true);
  PsiElement wrappableAfter=findWrappable(file,offset,false);
  if (!(wrappableBefore instanceof PsiComment)) {
    while (wrappableBefore != null) {
      PsiElement next=PsiTreeUtil.getParentOfType(wrappableBefore,IMPLICIT_WRAP_CLASSES);
      if (next == null) {
        break;
      }
      wrappableBefore=next;
    }
  }
  if (!(wrappableAfter instanceof PsiComment)) {
    while (wrappableAfter != null) {
      PsiElement next=PsiTreeUtil.getParentOfType(wrappableAfter,IMPLICIT_WRAP_CLASSES);
      if (next == null) {
        break;
      }
      wrappableAfter=next;
    }
  }
  if (wrappableBefore instanceof PsiComment || wrappableAfter instanceof PsiComment) {
    return Result.Continue;
  }
  if (wrappableAfter == null || wrappableBefore != wrappableAfter) {
    doc.insertString(offset,"\\");
    caretOffset.set(caretOffset.get() + 1);
  }
  return Result.Continue;
}
