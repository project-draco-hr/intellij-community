{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"print".equals(methodName) && !"println".equals(methodName)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiExpression argument=arguments[0];
  if (!(argument instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)argument;
  if (!TypeUtils.expressionHasTypeOrSubtype(referenceExpression,CommonClassNames.JAVA_LANG_THROWABLE)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (!(qualifier instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiReferenceExpression qualifierReference=(PsiReferenceExpression)qualifier;
  final PsiElement target=qualifierReference.resolve();
  if (!(target instanceof PsiField)) {
    return;
  }
  final PsiField field=(PsiField)target;
  @NonNls final String fieldName=field.getName();
  if (!"out".equals(fieldName) && !"err".equals(fieldName)) {
    return;
  }
  final PsiClass aClass=field.getContainingClass();
  if (aClass == null || !"java.lang.System".equals(aClass.getQualifiedName())) {
    return;
  }
  registerError(argument,fieldName,methodName);
}
