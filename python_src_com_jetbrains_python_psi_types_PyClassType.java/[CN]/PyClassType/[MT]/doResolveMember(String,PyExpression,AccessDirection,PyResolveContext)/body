{
  if (resolveContext.allowProperties()) {
    Property property=myClass.findProperty(name);
    if (property != null) {
      Maybe<PyFunction> accessor=property.getByDirection(direction);
      if (accessor.isDefined()) {
        Callable accessor_code=accessor.value();
        ResolveResultList ret=new ResolveResultList();
        if (accessor_code != null)         ret.poke(accessor_code,RatedResolveResult.RATE_NORMAL);
        PyTargetExpression site=property.getDefinitionSite();
        if (site != null)         ret.poke(site,RatedResolveResult.RATE_LOW);
        if (ret.size() > 0) {
          return ret;
        }
 else {
          return null;
        }
      }
    }
  }
  final PsiElement classMember=resolveClassMember(this,name,location);
  if (classMember != null) {
    return ResolveResultList.to(classMember);
  }
  for (  PyClassRef superClass : myClass.iterateAncestors()) {
    final PyClass pyClass=superClass.getPyClass();
    if (pyClass != null) {
      PsiElement superMember=resolveClassMember(new PyClassType(pyClass,isDefinition()),name,null);
      if (superMember != null) {
        return ResolveResultList.to(superMember);
      }
    }
 else {
      final PsiElement element=superClass.getElement();
      if (element != null) {
        for (        PyTypeProvider typeProvider : Extensions.getExtensions(PyTypeProvider.EP_NAME)) {
          final PyType refType=typeProvider.getReferenceType(element,resolveContext.getTypeEvalContext(),myClass);
          if (refType != null) {
            return refType.resolveMember(name,location,direction,resolveContext);
          }
        }
      }
    }
  }
  return Collections.emptyList();
}
