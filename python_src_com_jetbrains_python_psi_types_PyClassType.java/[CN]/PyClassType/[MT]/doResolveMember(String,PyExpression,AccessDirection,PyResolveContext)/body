{
  if (myClass == null) {
    return null;
  }
  if (resolveContext.allowProperties()) {
    Property property=myClass.findProperty(name);
    if (property != null) {
      Maybe<Callable> accessor=property.getByDirection(direction);
      if (accessor.isDefined()) {
        Callable accessor_code=accessor.value();
        ResolveResultList ret=new ResolveResultList();
        if (accessor_code != null)         ret.poke(accessor_code,RatedResolveResult.RATE_NORMAL);
        PyTargetExpression site=property.getDefinitionSite();
        if (site != null)         ret.poke(site,RatedResolveResult.RATE_LOW);
        if (ret.size() > 0) {
          return ret;
        }
 else {
          return null;
        }
      }
    }
  }
  if ("super".equals(getClassQName()) && isBuiltin(resolveContext.getTypeEvalContext()) && location instanceof PyCallExpression) {
    PyExpression first_arg=((PyCallExpression)location).getArgument(0,PyExpression.class);
    if (first_arg != null) {
      PyType first_arg_type=first_arg.getType(resolveContext.getTypeEvalContext());
      if (first_arg_type instanceof PyClassType) {
        PyClass derived_class=((PyClassType)first_arg_type).getPyClass();
        if (derived_class != null) {
          final Iterator<PyClass> base_it=derived_class.iterateAncestorClasses().iterator();
          if (base_it.hasNext()) {
            return new PyClassType(base_it.next(),true).resolveMember(name,location,direction,resolveContext);
          }
 else {
            return null;
          }
        }
      }
    }
  }
  PsiElement classMember=resolveClassMember(myClass,myIsDefinition,name,location);
  if (classMember != null) {
    return ResolveResultList.to(classMember);
  }
  for (  PyClassRef superClass : myClass.iterateAncestors()) {
    final PyClass pyClass=superClass.getPyClass();
    if (pyClass != null) {
      PsiElement superMember=resolveClassMember(pyClass,myIsDefinition,name,null);
      if (superMember != null) {
        return ResolveResultList.to(superMember);
      }
    }
 else {
      final PsiElement element=superClass.getElement();
      if (element != null) {
        for (        PyTypeProvider typeProvider : Extensions.getExtensions(PyTypeProvider.EP_NAME)) {
          final PyType refType=typeProvider.getReferenceType(element,resolveContext.getTypeEvalContext(),myClass);
          if (refType != null) {
            return refType.resolveMember(name,location,direction,resolveContext);
          }
        }
      }
    }
  }
  if (isDefinition() && myClass.isNewStyleClass()) {
    PyClassType typeType=getMetaclassType();
    if (typeType != null) {
      List<? extends RatedResolveResult> typeMembers=typeType.resolveMember(name,location,direction,resolveContext);
      if (typeMembers != null && !typeMembers.isEmpty()) {
        return typeMembers;
      }
    }
  }
  classMember=resolveByMembersProviders(this,name);
  if (classMember != null) {
    return ResolveResultList.to(classMember);
  }
  for (  PyClassRef superClass : myClass.iterateAncestors()) {
    final PyClass pyClass=superClass.getPyClass();
    if (pyClass != null) {
      PsiElement superMember=resolveByMembersProviders(new PyClassType(pyClass,isDefinition()),name);
      if (superMember != null) {
        return ResolveResultList.to(superMember);
      }
    }
  }
  return Collections.emptyList();
}
