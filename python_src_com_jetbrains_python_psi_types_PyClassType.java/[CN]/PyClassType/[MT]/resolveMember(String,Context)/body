{
  if (myClass == null)   return null;
  Property property=myClass.findProperty(name);
  if (property != null) {
    PyTargetExpression prop_definition=property.getDefinitionSite();
switch (context) {
case READ:
      return valueOrTarget(property.getGetter(),prop_definition);
case WRITE:
    return valueOrTarget(property.getSetter(),prop_definition);
case DELETE:
  return valueOrTarget(property.getDeleter(),prop_definition);
}
}
final PsiElement classMember=resolveClassMember(myClass,name);
if (classMember != null) {
return new Maybe<PsiElement>(classMember);
}
boolean hasSuperClasses=false;
for (PyClass superClass : myClass.iterateAncestors()) {
hasSuperClasses=true;
PsiElement superMember=resolveClassMember(superClass,name);
if (superMember != null) {
return new Maybe<PsiElement>(superMember);
}
}
if (!hasSuperClasses) {
if (getClass() != null) {
PyClassType oldstyle=PyBuiltinCache.getInstance(myClass).getOldstyleClassobjType();
if (oldstyle != null) {
  final PyClass myclass=getPyClass();
  if (myclass != null) {
    final String myname=myclass.getName();
    final PyClass oldstyleclass=oldstyle.getPyClass();
    if (oldstyleclass != null) {
      final String oldstylename=oldstyleclass.getName();
      if ((myname != null) && (oldstylename != null) && !myname.equals(oldstylename)&& !myname.equals("object")) {
        return oldstyle.resolveMember(name,context);
      }
    }
  }
}
}
}
return NOT_RESOLVED_YET;
}
