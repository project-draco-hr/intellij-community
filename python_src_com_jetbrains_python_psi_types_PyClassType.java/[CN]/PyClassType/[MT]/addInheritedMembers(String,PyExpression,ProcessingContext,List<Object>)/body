{
  for (  PyClass ancestor : myClass.getSuperClasses()) {
    Object[] ancestry=(new PyClassType(ancestor,true)).getCompletionVariants(name,expressionHook,context);
    for (    Object ob : ancestry) {
      if (ob instanceof LookupElementBuilder) {
        final LookupElementBuilder lookupElt=(LookupElementBuilder)ob;
        if (!isClassPrivate(lookupElt.getLookupString()))         ret.add(lookupElt.setTypeText(ancestor.getName()));
      }
 else {
        if (!isClassPrivate(ob.toString()))         ret.add(ob);
      }
    }
    ContainerUtil.addAll(ret,ancestry);
  }
}
