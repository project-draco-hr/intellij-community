{
  if (myClass == null)   return null;
  final Set<Pair<PyClass,String>> resolving=ourResolveMemberStack.get();
  final Pair<PyClass,String> key=Pair.create(myClass,name);
  if (resolving.contains(key)) {
    return Collections.emptyList();
  }
  resolving.add(key);
  try {
    if (resolveContext.allowProperties()) {
      Property property=myClass.findProperty(name);
      if (property != null) {
        Maybe<PyFunction> accessor=property.getByDirection(direction);
        if (accessor.isDefined()) {
          Callable accessor_code=accessor.value();
          SmartList<PsiElement> ret=new SmartList<PsiElement>();
          if (accessor_code != null)           ret.add(accessor_code);
          PyTargetExpression site=property.getDefinitionSite();
          if (site != null)           ret.add(site);
          if (ret.size() > 0) {
            return ret;
          }
 else {
            return null;
          }
        }
      }
    }
    final PsiElement classMember=resolveClassMember(this,name,location);
    if (classMember != null) {
      return new SmartList<PsiElement>(classMember);
    }
    for (    PyClassRef superClass : myClass.iterateAncestors()) {
      final PyClass pyClass=superClass.getPyClass();
      if (pyClass != null) {
        PsiElement superMember=resolveClassMember(new PyClassType(pyClass,isDefinition()),name,null);
        if (superMember != null) {
          return new SmartList<PsiElement>(superMember);
        }
      }
 else {
        final PsiElement element=superClass.getElement();
        if (element != null) {
          for (          PyTypeProvider typeProvider : Extensions.getExtensions(PyTypeProvider.EP_NAME)) {
            final PyType refType=typeProvider.getReferenceType(element,resolveContext.getTypeEvalContext(),myClass);
            if (refType != null) {
              return refType.resolveMember(name,location,direction,resolveContext);
            }
          }
        }
      }
    }
    return Collections.emptyList();
  }
  finally {
    resolving.remove(key);
  }
}
