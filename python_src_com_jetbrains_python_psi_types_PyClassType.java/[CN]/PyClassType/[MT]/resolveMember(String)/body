{
  if (myClass == null)   return null;
  for (  PyClassMembersProvider provider : Extensions.getExtensions(PyClassMembersProvider.EP_NAME)) {
    final PsiElement resolveResult=provider.resolveMember(myClass,name);
    if (resolveResult != null)     return resolveResult;
  }
  ResolveProcessor processor=new ResolveProcessor(name);
  myClass.processDeclarations(processor,ResolveState.initial(),null,myClass);
  final PsiElement resolveResult=processor.getResult();
  if (resolveResult != null) {
    return resolveResult;
  }
  PyExpression[] superClassExpressions=myClass.getSuperClassExpressions();
  if (superClassExpressions.length > 0) {
    for (    PyExpression expr : superClassExpressions) {
      PyType superType=expr.getType();
      if (superType != null) {
        PsiElement superMember=superType.resolveMember(name);
        if (superMember != null) {
          return superMember;
        }
      }
    }
  }
 else {
    if (getClass() != null) {
      PyClassType oldstyle=PyBuiltinCache.getInstance(myClass).getOldstyleClassobjType();
      if (oldstyle != null) {
        final PyClass myclass=getPyClass();
        if (myclass != null) {
          final String myname=myclass.getName();
          final PyClass oldstyleclass=oldstyle.getPyClass();
          if (oldstyleclass != null) {
            final String oldstylename=oldstyleclass.getName();
            if ((myname != null) && (oldstylename != null) && !myname.equals(oldstylename)&& !myname.equals("object")) {
              return oldstyle.resolveMember(name);
            }
          }
        }
      }
    }
  }
  return null;
}
