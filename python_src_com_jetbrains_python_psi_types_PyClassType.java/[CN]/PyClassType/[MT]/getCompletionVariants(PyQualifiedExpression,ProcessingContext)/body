{
  List<? extends PsiElement> classList=new ParentMatcher(PyClass.class).search(referenceExpression);
  boolean withinOurClass=classList != null && classList.get(0) == this;
  Set<String> namesAlready=context.get(CTX_NAMES);
  List<Object> ret=new ArrayList<Object>();
  Condition<String> underscoreFilter=new PyUtil.UnderscoreFilter(PyUtil.getInitialUnderscores(referenceExpression.getName()));
  for (  PyClassMembersProvider provider : Extensions.getExtensions(PyClassMembersProvider.EP_NAME)) {
    for (    PyDynamicMember member : provider.getMembers(myClass)) {
      final String name=member.getName();
      if (underscoreFilter.value(name) || provider.hasUnderscoreWildCard(name)) {
        ret.add(LookupElementBuilder.create(name).setIcon(member.getIcon()).setTypeText(member.getShortType()));
      }
    }
  }
  final VariantsProcessor processor=new VariantsProcessor(referenceExpression,new PyResolveUtil.FilterNotInstance(myClass),underscoreFilter);
  myClass.processDeclarations(processor,ResolveState.initial(),null,referenceExpression);
  if (namesAlready != null) {
    for (    LookupElement le : processor.getResultList()) {
      String name=le.getLookupString();
      if (namesAlready.contains(name))       continue;
      if (!withinOurClass && isClassPrivate(name))       continue;
      namesAlready.add(name);
      ret.add(le);
    }
  }
 else {
    ret.addAll(processor.getResultList());
  }
  for (  PyClass ancestor : myClass.getSuperClasses()) {
    Object[] ancestry=(new PyClassType(ancestor,true)).getCompletionVariants(referenceExpression,context);
    for (    Object ob : ancestry) {
      if (ob instanceof LookupElementBuilder) {
        final LookupElementBuilder lookupElt=(LookupElementBuilder)ob;
        if (!isClassPrivate(lookupElt.getLookupString()))         ret.add(lookupElt.setTypeText(ancestor.getName()));
      }
 else {
        if (!isClassPrivate(ob.toString()))         ret.add(ob);
      }
    }
    ret.addAll(Arrays.asList(ancestry));
  }
  return ret.toArray();
}
