{
  List<? extends PsiElement> classList=new ParentMatcher(PyClass.class).search(expressionHook);
  boolean withinOurClass=classList != null && classList.get(0) == this;
  final VariantsProcessor processor=new VariantsProcessor(expressionHook,new PyResolveUtil.FilterNotInstance(myClass),underscoreFilter);
  processor.setNotice(myClass.getName());
  ((PyClassImpl)myClass).processClassLevelDeclarations(processor);
  List<String> slots=myClass.isNewStyleClass() ? myClass.getSlots() : null;
  if (slots != null) {
    processor.setAllowedNames(slots);
  }
  ((PyClassImpl)myClass).processInstanceLevelDeclarations(processor);
  for (  LookupElement le : processor.getResultList()) {
    String name=le.getLookupString();
    if (namesAlready.contains(name))     continue;
    if (!withinOurClass && isClassPrivate(name))     continue;
    namesAlready.add(name);
    ret.add(le);
  }
  if (slots != null) {
    for (    String name : slots) {
      if (!namesAlready.contains(name)) {
        ret.add(LookupElementBuilder.create(name));
      }
    }
  }
}
