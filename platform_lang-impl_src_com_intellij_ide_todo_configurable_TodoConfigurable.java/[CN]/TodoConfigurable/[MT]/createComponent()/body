{
  myPatternsTable=new JBTable(myPatternsModel);
  myPatternsTable.getEmptyText().setText(IdeBundle.message("text.todo.no.patterns"));
  TableColumn typeColumn=myPatternsTable.getColumnModel().getColumn(0);
  int width=myPatternsTable.getFontMetrics(myPatternsTable.getFont()).stringWidth(myPatternsTable.getColumnName(0)) + 10;
  typeColumn.setPreferredWidth(width);
  typeColumn.setMaxWidth(width);
  typeColumn.setMinWidth(width);
  typeColumn.setCellRenderer(new IconTableCellRenderer<Icon>(){
    @Nullable @Override protected Icon getIcon(    @NotNull Icon value,    JTable table,    int row){
      return value;
    }
    @Override public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean selected,    boolean focus,    int row,    int column){
      super.getTableCellRendererComponent(table,value,selected,focus,row,column);
      setText("");
      return this;
    }
    @Override protected boolean isCenterAlignment(){
      return true;
    }
  }
);
  TableColumn todoCaseSensitiveColumn=myPatternsTable.getColumnModel().getColumn(1);
  width=myPatternsTable.getFontMetrics(myPatternsTable.getFont()).stringWidth(myPatternsTable.getColumnName(1)) + 10;
  todoCaseSensitiveColumn.setPreferredWidth(width);
  todoCaseSensitiveColumn.setMaxWidth(width);
  todoCaseSensitiveColumn.setMinWidth(width);
  todoCaseSensitiveColumn.setCellRenderer(new BooleanTableCellRenderer());
  todoCaseSensitiveColumn.setCellEditor(new BooleanTableCellEditor());
  TodoPatternTableCellRenderer todoPatternRenderer=new TodoPatternTableCellRenderer(myPatterns);
  TableColumn patternColumn=myPatternsTable.getColumnModel().getColumn(2);
  patternColumn.setCellRenderer(todoPatternRenderer);
  JPanel patternsPanel=new JPanel(new BorderLayout());
  patternsPanel.setBorder(IdeBorderFactory.createTitledBorder(IdeBundle.message("label.todo.patterns"),false));
  patternsPanel.add(ToolbarDecorator.createDecorator(myPatternsTable).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      stopEditing();
      TodoPattern pattern=new TodoPattern(TodoAttributesUtil.createDefault());
      PatternDialog dialog=new PatternDialog(myPanel,pattern);
      if (!dialog.showAndGet()) {
        return;
      }
      myPatterns.add(pattern);
      int index=myPatterns.size() - 1;
      myPatternsModel.fireTableRowsInserted(index,index);
      myPatternsTable.getSelectionModel().setSelectionInterval(index,index);
      myPatternsTable.scrollRectToVisible(myPatternsTable.getCellRect(index,0,true));
    }
  }
).setEditAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      editSelectedPattern();
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      stopEditing();
      int selectedIndex=myPatternsTable.getSelectedRow();
      if (selectedIndex < 0 || selectedIndex >= myPatternsModel.getRowCount()) {
        return;
      }
      TodoPattern patternToBeRemoved=myPatterns.get(selectedIndex);
      TableUtil.removeSelectedItems(myPatternsTable);
      for (int i=0; i < myFilters.size(); i++) {
        TodoFilter filter=myFilters.get(i);
        if (filter.contains(patternToBeRemoved)) {
          filter.removeTodoPattern(patternToBeRemoved);
          myFiltersModel.fireTableRowsUpdated(i,i);
        }
      }
    }
  }
).disableUpDownActions().createPanel(),BorderLayout.CENTER);
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      editSelectedPattern();
      return true;
    }
  }
.installOn(myPatternsTable);
  myFiltersTable=new JBTable(myFiltersModel);
  myFiltersTable.getEmptyText().setText(IdeBundle.message("text.todo.no.filters"));
  TableColumn nameColumn=myFiltersTable.getColumnModel().getColumn(0);
  width=myPatternsTable.getColumnModel().getColumn(0).getPreferredWidth() + myPatternsTable.getColumnModel().getColumn(1).getPreferredWidth();
  nameColumn.setPreferredWidth(width);
  nameColumn.setMaxWidth(width);
  nameColumn.setMinWidth(width);
  nameColumn.setCellRenderer(new MyFilterNameTableCellRenderer());
  JPanel filtersPanel=new JPanel(new BorderLayout());
  filtersPanel.setBorder(IdeBorderFactory.createTitledBorder(IdeBundle.message("label.todo.filters"),false));
  filtersPanel.add(ToolbarDecorator.createDecorator(myFiltersTable).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      stopEditing();
      TodoFilter filter=new TodoFilter();
      FilterDialog dialog=new FilterDialog(myPanel,filter,-1,myFilters,myPatterns);
      if (dialog.showAndGet()) {
        myFilters.add(filter);
        int index=myFilters.size() - 1;
        myFiltersModel.fireTableRowsInserted(index,index);
        myFiltersTable.getSelectionModel().setSelectionInterval(index,index);
        myFiltersTable.scrollRectToVisible(myFiltersTable.getCellRect(index,0,true));
      }
    }
  }
).setEditAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      editSelectedFilter();
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      stopEditing();
      TableUtil.removeSelectedItems(myFiltersTable);
    }
  }
).disableUpDownActions().createPanel());
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      editSelectedFilter();
      return true;
    }
  }
.installOn(myFiltersTable);
  myPanel=FormBuilder.createFormBuilder().addComponentFillVertically(patternsPanel,0).addComponentFillVertically(filtersPanel,0).getPanel();
  return myPanel;
}
