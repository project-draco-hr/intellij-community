{
  if (expression instanceof PsiNewExpression) {
    final PsiAnonymousClass anonymousClass=((PsiNewExpression)expression).getAnonymousClass();
    if (anonymousClass != null) {
      if (AnonymousCanBeLambdaInspection.canBeConvertedToLambda(anonymousClass,true)) {
        AnonymousCanBeLambdaInspection.replacePsiElementWithLambda(expression,true,true);
      }
    }
 else {
      return addApplyReference(expression,evaluator);
    }
  }
 else   if (!(expression instanceof PsiFunctionalExpression)) {
    return addApplyReference(expression,evaluator);
  }
 else   if (expression instanceof PsiMethodReferenceExpression) {
    final PsiElement qualifier=((PsiMethodReferenceExpression)expression).getQualifier();
    PsiType qualifierType;
    if (qualifier instanceof PsiExpression && (qualifierType=evaluator.evaluateType((PsiExpression)qualifier)) != null) {
      final PsiClass qualifierClass=PsiTypesUtil.getPsiClass(qualifierType);
      if (qualifierClass != null && (Comparing.equal(qualifierClass.getQualifiedName(),GuavaFunctionConversionRule.JAVA_UTIL_FUNCTION_FUNCTION) || Comparing.equal(qualifierClass.getQualifiedName(),GuavaOptionalConversionRule.JAVA_OPTIONAL) || Comparing.equal(qualifierClass.getQualifiedName(),GuavaSupplierConversionRule.JAVA_SUPPLIER)|| Comparing.equal(qualifierClass.getQualifiedName(),GuavaPredicateConversionRule.JAVA_PREDICATE)))       return (PsiExpression)expression.replace(qualifier);
    }
  }
  return expression;
}
