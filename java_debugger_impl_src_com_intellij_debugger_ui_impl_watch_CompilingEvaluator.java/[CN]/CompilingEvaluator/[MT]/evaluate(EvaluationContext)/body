{
  try {
    DebugProcess process=evaluationContext.getDebugProcess();
    ThreadReference threadReference=evaluationContext.getSuspendContext().getThread().getThreadReference();
    ClassLoaderReference classLoader=getClassLoader(evaluationContext);
    Collection<OutputFileObject> classes=compile();
    ClassType mainClass=defineClasses(classes,evaluationContext,process,threadReference,classLoader);
    final Project project=myPsiContext.getProject();
    ExpressionEvaluator evaluator=DebuggerInvocationUtil.commitAndRunReadAction(project,new EvaluatingComputable<ExpressionEvaluator>(){
      @Override public ExpressionEvaluator compute() throws EvaluateException {
        final TextWithImports callCode=getCallCode();
        PsiFile file=myData.getGeneratedInnerClass().getContainingFile();
        final TextRange range=myPsiContext.getTextRange();
        final PsiElement copyContext=CodeInsightUtil.findElementInRange(file,range.getStartOffset(),range.getEndOffset(),myPsiContext.getClass());
        final CodeFragmentFactory factory=DebuggerUtilsEx.findAppropriateCodeFragmentFactory(callCode,copyContext);
        return factory.getEvaluatorBuilder().build(factory.createCodeFragment(callCode,copyContext,project),ContextUtil.getSourcePosition(evaluationContext));
      }
    }
);
    ((EvaluationContextImpl)evaluationContext).setClassLoader(classLoader);
    return evaluator.evaluate(evaluationContext);
  }
 catch (  Exception e) {
    throw new EvaluateException(e.getMessage());
  }
}
