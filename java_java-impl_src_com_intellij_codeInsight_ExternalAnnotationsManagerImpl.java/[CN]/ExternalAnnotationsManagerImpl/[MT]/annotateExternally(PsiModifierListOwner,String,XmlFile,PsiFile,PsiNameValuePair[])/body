{
  if (xmlFile == null) {
    notifyAfterAnnotationChanging(listOwner,annotationFQName,false);
    return;
  }
  try {
    final XmlDocument document=xmlFile.getDocument();
    if (document != null) {
      final XmlTag rootTag=document.getRootTag();
      final String externalName=getExternalName(listOwner,false);
      if (externalName == null) {
        LOG.info("member without external name: " + listOwner);
      }
      if (rootTag != null && externalName != null) {
        XmlTag anchor=null;
        for (        XmlTag item : rootTag.getSubTags()) {
          int compare=Comparing.compare(externalName,StringUtil.unescapeXml(item.getAttributeValue("name")));
          if (compare == 0) {
            anchor=null;
            for (            XmlTag annotation : item.getSubTags()) {
              compare=Comparing.compare(annotationFQName,annotation.getAttributeValue("name"));
              if (compare == 0) {
                annotation.delete();
                break;
              }
              anchor=annotation;
            }
            XmlTag newTag=XmlElementFactory.getInstance(myPsiManager.getProject()).createTagFromText(createAnnotationTag(annotationFQName,values));
            item.addAfter(newTag,anchor);
            commitChanges(xmlFile);
            notifyAfterAnnotationChanging(listOwner,annotationFQName,true);
            return;
          }
          if (compare < 0)           break;
          anchor=item;
        }
        @NonNls String text="<item name=\'" + StringUtil.escapeXml(externalName) + "\'>\n";
        text+=createAnnotationTag(annotationFQName,values);
        text+="</item>";
        rootTag.addAfter(XmlElementFactory.getInstance(myPsiManager.getProject()).createTagFromText(text),anchor);
        commitChanges(xmlFile);
        notifyAfterAnnotationChanging(listOwner,annotationFQName,true);
        return;
      }
    }
    notifyAfterAnnotationChanging(listOwner,annotationFQName,false);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
    notifyAfterAnnotationChanging(listOwner,annotationFQName,false);
  }
 finally {
    dropCache();
    if (codeUsageFile.getVirtualFile().isInLocalFileSystem()) {
      UndoUtil.markPsiFileForUndo(codeUsageFile);
    }
  }
}
