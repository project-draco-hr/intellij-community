{
  try {
    final List<XmlFile> files=findExternalAnnotationsXmlFiles(listOwner);
    if (files == null) {
      notifyAfterAnnotationChanging(listOwner,annotationFQN,false);
      return false;
    }
    boolean processedAnything=false;
    for (    final XmlFile file : files) {
      if (!file.isValid()) {
        continue;
      }
      if (ReadonlyStatusHandler.getInstance(myPsiManager.getProject()).ensureFilesWritable(file.getVirtualFile()).hasReadonlyFiles()) {
        continue;
      }
      final XmlDocument document=file.getDocument();
      if (document == null) {
        continue;
      }
      final XmlTag rootTag=document.getRootTag();
      if (rootTag == null) {
        continue;
      }
      final String externalName=getExternalName(listOwner,false);
      final String oldExternalName=getNormalizedExternalName(listOwner);
      final List<XmlTag> tagsToProcess=new ArrayList<XmlTag>();
      for (      XmlTag tag : rootTag.getSubTags()) {
        String className=StringUtil.unescapeXml(tag.getAttributeValue("name"));
        if (!Comparing.strEqual(className,externalName) && !Comparing.strEqual(className,oldExternalName)) {
          continue;
        }
        for (        XmlTag annotationTag : tag.getSubTags()) {
          if (!Comparing.strEqual(annotationTag.getAttributeValue("name"),annotationFQN)) {
            continue;
          }
          tagsToProcess.add(annotationTag);
          processedAnything=true;
        }
      }
      if (tagsToProcess.isEmpty()) {
        continue;
      }
      CommandProcessor.getInstance().executeCommand(myPsiManager.getProject(),new Runnable(){
        @Override public void run(){
          PsiDocumentManager.getInstance(myPsiManager.getProject()).commitAllDocuments();
          try {
            for (            XmlTag annotationTag : tagsToProcess) {
              annotationTagProcessor.process(annotationTag);
            }
            commitChanges(file);
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
      }
,ExternalAnnotationsManagerImpl.class.getName(),null);
    }
    notifyAfterAnnotationChanging(listOwner,annotationFQN,processedAnything);
    return processedAnything;
  }
  finally {
    dropCache();
  }
}
