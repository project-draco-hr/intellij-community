{
  super.visitMethodCallExpression(expression);
  if (!MethodCallUtils.isCallDuringObjectConstruction(expression)) {
    return;
  }
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier != null) {
    if (!(qualifier instanceof PsiThisExpression || qualifier instanceof PsiSuperExpression)) {
      return;
    }
  }
  final PsiClass containingClass=PsiTreeUtil.getParentOfType(expression,PsiClass.class);
  if (containingClass == null || containingClass.hasModifierProperty(PsiModifier.FINAL)) {
    return;
  }
  final PsiMethod calledMethod=expression.resolveMethod();
  if (calledMethod == null || !PsiUtil.canBeOverriden(calledMethod)) {
    return;
  }
  final PsiClass calledMethodClass=calledMethod.getContainingClass();
  if (!InheritanceUtil.isInheritorOrSelf(containingClass,calledMethodClass,true)) {
    return;
  }
  if (!MethodUtils.isOverriddenInHierarchy(calledMethod,containingClass)) {
    return;
  }
  if (CloneUtils.isClone(calledMethod)) {
    final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(expression,PsiMethod.class);
    if (CloneUtils.isClone(containingMethod)) {
      return;
    }
  }
  registerMethodCallError(expression);
}
