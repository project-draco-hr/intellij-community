{
  final String text=myHost.getText();
  final List<TextRange> contentRanges=myHost.getContentRanges();
  int currentOffsetInDecoded=0;
  for (int i=0; i < contentRanges.size(); i++) {
    final TextRange range=contentRanges.get(i);
    String curString=range.subSequence(text).toString();
    if (i + 1 != contentRanges.size()) {
      final String joiner=myHost.getRangesJoiner(text,contentRanges,i);
      curString+=joiner;
    }
    final List<Pair<TextRange,String>> replacementsForThisLine=myHost.getDecodeReplacements(curString);
    int encodedOffsetInCurrentLine=0;
    for (    Pair<TextRange,String> replacement : replacementsForThisLine) {
      final int deltaLength=replacement.getFirst().getStartOffset() - encodedOffsetInCurrentLine;
      if (currentOffsetInDecoded + deltaLength >= offsetInDecoded) {
        return range.getStartOffset() + encodedOffsetInCurrentLine + (offsetInDecoded - currentOffsetInDecoded);
      }
      currentOffsetInDecoded+=deltaLength + replacement.getSecond().length();
      encodedOffsetInCurrentLine+=deltaLength + replacement.getFirst().getLength();
    }
    final int deltaLength=curString.length() - encodedOffsetInCurrentLine;
    if (currentOffsetInDecoded + deltaLength > offsetInDecoded) {
      return range.getStartOffset() + encodedOffsetInCurrentLine + (offsetInDecoded - currentOffsetInDecoded);
    }
    currentOffsetInDecoded+=deltaLength;
  }
  return ContainerUtil.getLastItem(contentRanges,rangeInsideHost).getEndOffset();
}
