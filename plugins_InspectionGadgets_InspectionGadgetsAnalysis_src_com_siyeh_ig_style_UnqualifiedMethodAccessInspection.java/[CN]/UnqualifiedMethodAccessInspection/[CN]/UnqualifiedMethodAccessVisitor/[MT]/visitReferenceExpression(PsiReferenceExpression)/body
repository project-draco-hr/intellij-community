{
  super.visitReferenceExpression(expression);
  final PsiExpression qualifierExpression=expression.getQualifierExpression();
  if (qualifierExpression != null) {
    return;
  }
  final PsiReferenceParameterList parameterList=expression.getParameterList();
  if (parameterList == null) {
    return;
  }
  final PsiElement element=expression.resolve();
  if (!(element instanceof PsiMethod)) {
    return;
  }
  final PsiMethod method=(PsiMethod)element;
  if (method.isConstructor() || method.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  if (PsiUtil.isLocalOrAnonymousClass(containingClass)) {
    final PsiClass expressionClass=PsiTreeUtil.getParentOfType(expression,PsiClass.class);
    if (expressionClass == null || !expressionClass.equals(containingClass)) {
      return;
    }
  }
  registerError(expression);
}
