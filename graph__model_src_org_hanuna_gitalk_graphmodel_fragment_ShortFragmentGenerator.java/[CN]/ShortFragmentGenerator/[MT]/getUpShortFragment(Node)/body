{
  if (startNode.getType() == Node.Type.EDGE_NODE) {
    throw new IllegalArgumentException("small fragment may start only with COMMIT_NODE, but this node is: " + startNode);
  }
  Set<Node> downNodes=new HashSet<Node>();
  downNodes.add(startNode);
  Set<Node> notAddedNodes=new HashSet<Node>();
  addUpNodeToSet(notAddedNodes,startNode);
  Node endNode=null;
  int startRowIndex=startNode.getRowIndex() - 1;
  int lastIndex=0;
  boolean isEnd=false;
  for (int currentRowIndex=startRowIndex; currentRowIndex >= lastIndex && !isEnd; currentRowIndex--) {
    for (    Node node : graph.getNodeRows().get(currentRowIndex).getNodes()) {
      if (notAddedNodes.remove(node)) {
        if (notAddedNodes.isEmpty() && node.getType() != Node.Type.EDGE_NODE) {
          if (allDownNodeHere(downNodes,node)) {
            endNode=node;
          }
          isEnd=true;
          break;
        }
 else {
          if (!allDownNodeHere(downNodes,node) || unhiddenNodes.get(node)) {
            isEnd=true;
          }
          downNodes.add(node);
          addUpNodeToSet(notAddedNodes,node);
        }
      }
    }
  }
  if (endNode == null) {
    return null;
  }
 else {
    downNodes.remove(startNode);
    return new SimpleGraphFragment(endNode,startNode,downNodes);
  }
}
