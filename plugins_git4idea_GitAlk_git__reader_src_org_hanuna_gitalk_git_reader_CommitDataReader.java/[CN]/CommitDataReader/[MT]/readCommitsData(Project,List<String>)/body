{
  Map<String,String> fakeHashes=new HashMap<String,String>();
  Set<String> trueHashes=new HashSet<String>();
  for (  String hash : hashes) {
    if (FakeCommitParents.isFake(hash)) {
      String trueHash=FakeCommitParents.getOriginal(hash);
      fakeHashes.put(trueHash,hash);
      trueHashes.add(trueHash);
    }
 else {
      trueHashes.add(hash);
    }
  }
  GitRepository repository=ServiceManager.getService(project,GitLogComponent.class).getRepository();
  List<GitCommit> gitCommits;
  try {
    MyTimer timer=new MyTimer();
    timer.clear();
    gitCommits=GitHistoryUtils.commitsDetails(project,new FilePathImpl(repository.getRoot()),null,trueHashes);
    System.out.println("Details loading took " + timer.get() + "ms for "+ trueHashes.size()+ " hashes");
  }
 catch (  VcsException e) {
    throw new IllegalStateException(e);
  }
  SmartList<CommitData> result=new SmartList<CommitData>();
  for (  GitCommit gitCommit : gitCommits) {
    String longHash=gitCommit.getHash().getValue();
    String fakeHash=null;
    for (    Map.Entry<String,String> entry : fakeHashes.entrySet()) {
      if (longHash.startsWith(entry.getKey())) {
        fakeHash=entry.getValue();
        break;
      }
    }
    if (fakeHash != null) {
      result.add(new CommitData(gitCommit,Hash.build(fakeHash)));
    }
    result.add(new CommitData(gitCommit));
  }
  return result;
}
