{
  FormatterTestCase.getSettings(JavaLanguage.INSTANCE).PARAMETER_ANNOTATION_WRAP=CommonCodeStyleSettings.WRAP_ALWAYS;
  FormatterTestCase.getSettings(JavaLanguage.INSTANCE).VARIABLE_ANNOTATION_WRAP=CommonCodeStyleSettings.WRAP_ALWAYS;
  doTextTest("class Foo {\n" + "    public void foo(@Ann1 @Ann2 int p1, @Ann3 boolean p1){}\n" + "}","class Foo {\n" + "    public void foo(\n" + "            @Ann1\n"+ "            @Ann2\n"+ "                    int p1,\n"+ "            @Ann3\n"+ "                    boolean p1) {\n"+ "    }\n"+ "}");
  doTextTest("public interface PsiClass{\n" + "  @Nullable(documentation = \"return null for anonymous and local classes, and for type parameters\", doc2=\"\")\n" + "  String getQualifiedName();\n"+ "}","public interface PsiClass {\n" + "    @Nullable(documentation = \"return null for anonymous and local classes, and for type parameters\", doc2 = \"\")\n" + "    String getQualifiedName();\n"+ "}");
  FormatterTestCase.getSettings(JavaLanguage.INSTANCE).CLASS_ANNOTATION_WRAP=CommonCodeStyleSettings.WRAP_ALWAYS;
  doTextTest("@Ann1 @Ann2 class Foo {}","@Ann1\n" + "@Ann2\n" + "class Foo {\n"+ "}");
  doTextTest("@Ann1 @Ann2 interface Foo {}","@Ann1\n" + "@Ann2\n" + "interface Foo {\n"+ "}");
  doTextTest("class Foo { @Ann1 @Ann2 public static int myField;}","class Foo {\n" + "    @Ann1\n" + "    @Ann2\n"+ "    public static int myField;\n"+ "}");
  doTextTest("class Foo {\n" + "    void foo() {\n" + "        @Ann1 @Ann2 final int i = 0;"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        @Ann1\n"+ "        @Ann2\n"+ "        final int i = 0;\n"+ "    }\n"+ "}");
  getCustomJavaSettings().ANNOTATION_PARAMETER_WRAP=CommonCodeStyleSettings.WRAP_AS_NEEDED;
  FormatterTestCase.getSettings(JavaLanguage.INSTANCE).CLASS_ANNOTATION_WRAP=CommonCodeStyleSettings.WRAP_AS_NEEDED;
  FormatterTestCase.getSettings(JavaLanguage.INSTANCE).RIGHT_MARGIN=40;
  doTextTest("@Annotation1 @Annotation2 @Annotation3(param1=\"value1\", param2=\"value2\") @Annotation4 class Foo {}","@Annotation1 @Annotation2\n" + "@Annotation3(param1 = \"value1\",\n" + "        param2 = \"value2\") @Annotation4\n"+ "class Foo {\n"+ "}");
}
