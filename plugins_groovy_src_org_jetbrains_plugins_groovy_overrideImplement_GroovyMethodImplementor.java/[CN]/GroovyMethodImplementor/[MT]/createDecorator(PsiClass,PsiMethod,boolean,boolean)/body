{
  return new Consumer<PsiMethod>(){
    @Override public void consume(    PsiMethod method){
      Project project=targetClass.getProject();
      if (toCopyJavaDoc) {
        PsiDocComment baseMethodDocComment=baseMethod.getDocComment();
        if (baseMethodDocComment != null) {
          GrDocComment docComment=GroovyPsiElementFactory.getInstance(project).createDocCommentFromText(baseMethodDocComment.getText());
          GrDocCommentUtil.setDocComment(((GrMethod)method),docComment);
        }
      }
 else {
        PsiDocComment docComment=method.getDocComment();
        if (docComment != null) {
          docComment.delete();
        }
      }
      if (insertOverrideIfPossible) {
        if (OverrideImplementUtil.canInsertOverride(method,targetClass) && JavaPsiFacade.getInstance(project).findClass(CommonClassNames.JAVA_LANG_OVERRIDE,targetClass.getResolveScope()) != null && method.getModifierList().findAnnotation(CommonClassNames.JAVA_LANG_OVERRIDE) == null) {
          method.getModifierList().addAnnotation(CommonClassNames.JAVA_LANG_OVERRIDE);
        }
      }
 else {
        PsiAnnotation annotation=method.getModifierList().findAnnotation(CommonClassNames.JAVA_LANG_OVERRIDE);
        if (annotation != null) {
          annotation.delete();
        }
      }
    }
  }
;
}
