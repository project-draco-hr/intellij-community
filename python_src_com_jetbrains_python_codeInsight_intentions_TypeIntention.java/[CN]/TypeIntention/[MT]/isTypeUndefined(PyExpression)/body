{
  final TypeEvalContext context=TypeEvalContext.fastStubOnly(problemElement.getContainingFile());
  final PyType type=context.getType(problemElement);
  if (type == null || type instanceof PyReturnTypeReference || type instanceof PyDynamicallyEvaluatedType) {
    PsiReference reference=problemElement.getReference();
    if (problemElement instanceof PyQualifiedExpression) {
      final PyExpression qualifier=((PyQualifiedExpression)problemElement).getQualifier();
      if (qualifier != null && !qualifier.getText().equals(PyNames.CANONICAL_SELF))       reference=qualifier.getReference();
    }
    if (isDefinedInDocstring(problemElement,reference))     return false;
    return !isDefinedInAnnotation(problemElement,reference);
  }
  return false;
}
