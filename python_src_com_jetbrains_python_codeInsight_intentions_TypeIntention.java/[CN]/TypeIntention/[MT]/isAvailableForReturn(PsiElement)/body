{
  final PyFunction parentFunction=PsiTreeUtil.getParentOfType(elementAt,PyFunction.class);
  if (parentFunction != null) {
    final ASTNode nameNode=parentFunction.getNameNode();
    if (nameNode != null) {
      final PsiElement prev=elementAt.getPrevSibling();
      if (nameNode.getPsi() == elementAt || nameNode.getPsi() == prev) {
        return !isReturnTypeDefined(parentFunction);
      }
    }
  }
  final PyCallExpression callExpression=getCallExpression(elementAt);
  if (callExpression == null)   return false;
  final PyExpression callee=callExpression.getCallee();
  if (callee == null)   return false;
  final PsiReference reference=callee.getReference();
  if (reference instanceof PsiPolyVariantReference) {
    final ResolveResult[] results=((PsiPolyVariantReference)reference).multiResolve(false);
    if (results.length == 1) {
      final PsiElement result=results[0].getElement();
      if (!(result instanceof PyFunction))       return false;
      final PsiFile psiFile=result.getContainingFile();
      if (psiFile == null)       return false;
      final VirtualFile virtualFile=psiFile.getVirtualFile();
      if (virtualFile != null) {
        if (ProjectRootManager.getInstance(psiFile.getProject()).getFileIndex().isInLibraryClasses(virtualFile)) {
          return false;
        }
      }
      return !isReturnTypeDefined((PyFunction)result);
    }
  }
  return false;
}
