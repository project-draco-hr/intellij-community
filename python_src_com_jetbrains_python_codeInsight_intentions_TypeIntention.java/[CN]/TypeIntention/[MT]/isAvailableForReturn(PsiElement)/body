{
  PyCallExpression callExpression=getCallExpression(elementAt);
  if (callExpression != null) {
    final PyExpression callee=callExpression.getCallee();
    if (callee instanceof PyQualifiedExpression) {
      final TypeEvalContext context=TypeEvalContext.fastStubOnly(callee.getContainingFile());
      final Callable pyFunction=callExpression.resolveCalleeFunction(PyResolveContext.defaultContext().withTypeEvalContext(context));
      if (pyFunction instanceof PyFunction) {
        PyType type=pyFunction.getReturnType(context,(PyQualifiedExpression)callee);
        if (type == null || type instanceof PyReturnTypeReference) {
          final PsiReference reference=callee.getReference();
          if (reference instanceof PsiPolyVariantReference) {
            final ResolveResult[] results=((PsiPolyVariantReference)reference).multiResolve(false);
            if (results.length == 1) {
              updateText(true);
              return true;
            }
          }
        }
      }
    }
  }
  PyFunction parentFunction=PsiTreeUtil.getParentOfType(elementAt,PyFunction.class);
  if (parentFunction != null) {
    final ASTNode nameNode=parentFunction.getNameNode();
    if (nameNode != null && nameNode.getPsi() == elementAt) {
      updateText(true);
      return true;
    }
  }
  return false;
}
