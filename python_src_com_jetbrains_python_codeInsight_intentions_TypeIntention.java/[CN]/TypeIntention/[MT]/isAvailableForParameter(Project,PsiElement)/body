{
  final PyExpression problemElement=getProblemElement(elementAt);
  if (problemElement == null)   return false;
  if (PsiTreeUtil.getParentOfType(problemElement,PyLambdaExpression.class) != null) {
    return false;
  }
  final PsiReference reference=problemElement.getReference();
  if (reference instanceof PsiPolyVariantReference) {
    final ResolveResult[] results=((PsiPolyVariantReference)reference).multiResolve(false);
    if (results.length != 1)     return false;
  }
  final VirtualFile virtualFile=problemElement.getContainingFile().getVirtualFile();
  if (virtualFile != null) {
    if (ProjectRootManager.getInstance(project).getFileIndex().isInLibraryClasses(virtualFile)) {
      return false;
    }
  }
  final PsiElement resolved=reference != null ? reference.resolve() : null;
  final PyParameter parameter=getParameter(problemElement,resolved);
  return parameter != null && !isParamTypeDefined(parameter);
}
