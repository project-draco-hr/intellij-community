{
  super(new BorderLayout());
  final DefaultActionGroup actionGroup=new DefaultActionGroup(null,false);
  actionGroup.addAction(new ToggleBooleanProperty(ExecutionBundle.message("junit.run.hide.passed.action.name"),ExecutionBundle.message("junit.run.hide.passed.action.description"),AllIcons.RunConfigurations.HidePassed,properties,TestConsoleProperties.HIDE_PASSED_TESTS));
  actionGroup.addSeparator();
  actionGroup.addAction(new ToggleBooleanProperty(ExecutionBundle.message("junit.runing.info.sort.alphabetically.action.name"),ExecutionBundle.message("junit.runing.info.sort.alphabetically.action.description"),AllIcons.ObjectBrowser.Sorted,properties,TestConsoleProperties.SORT_ALPHABETICALLY));
  actionGroup.addSeparator();
  AnAction action=CommonActionsManager.getInstance().createExpandAllAction(myTreeExpander,parent);
  action.getTemplatePresentation().setDescription(ExecutionBundle.message("junit.runing.info.expand.test.action.name"));
  actionGroup.add(action);
  action=CommonActionsManager.getInstance().createCollapseAllAction(myTreeExpander,parent);
  action.getTemplatePresentation().setDescription(ExecutionBundle.message("junit.runing.info.collapse.test.action.name"));
  actionGroup.add(action);
  actionGroup.addSeparator();
  final CommonActionsManager actionsManager=CommonActionsManager.getInstance();
  myOccurenceNavigator=new FailedTestsNavigator();
  actionGroup.add(actionsManager.createPrevOccurenceAction(myOccurenceNavigator));
  actionGroup.add(actionsManager.createNextOccurenceAction(myOccurenceNavigator));
  for (  ToggleModelActionProvider actionProvider : Extensions.getExtensions(ToggleModelActionProvider.EP_NAME)) {
    final ToggleModelAction toggleModelAction=actionProvider.createToggleModelAction(properties);
    myActions.add(toggleModelAction);
    actionGroup.add(toggleModelAction);
  }
  myExportAction=ExportTestResultsAction.create(properties.getExecutor().getToolWindowId(),properties.getConfiguration());
  actionGroup.addAction(myExportAction);
  final DefaultActionGroup secondaryGroup=new DefaultActionGroup();
  secondaryGroup.setPopup(true);
  secondaryGroup.getTemplatePresentation().setIcon(AllIcons.General.SecondaryGroup);
  secondaryGroup.add(new ToggleBooleanProperty(ExecutionBundle.message("junit.runing.info.track.test.action.name"),ExecutionBundle.message("junit.runing.info.track.test.action.description"),null,properties,TestConsoleProperties.TRACK_RUNNING_TEST));
  secondaryGroup.add(new ToggleBooleanProperty("Hide Ignored",null,null,properties,TestConsoleProperties.HIDE_IGNORED_TEST));
  secondaryGroup.add(new ToggleBooleanProperty(ExecutionBundle.message("junit.runing.info.select.first.failed.action.name"),null,null,properties,TestConsoleProperties.SELECT_FIRST_DEFECT));
  secondaryGroup.add(new ToggleBooleanProperty(ExecutionBundle.message("junit.runing.info.scroll.to.stacktrace.action.name"),ExecutionBundle.message("junit.runing.info.scroll.to.stacktrace.action.description"),null,properties,TestConsoleProperties.SCROLL_TO_STACK_TRACE));
  myScrollToSource=new ScrollToTestSourceAction(properties);
  secondaryGroup.add(myScrollToSource);
  secondaryGroup.add(new ToggleBooleanProperty(ExecutionBundle.message("junit.runing.info.open.source.at.exception.action.name"),ExecutionBundle.message("junit.runing.info.open.source.at.exception.action.description"),null,properties,TestConsoleProperties.OPEN_FAILURE_LINE));
  secondaryGroup.add(new ShowStatisticsAction(properties));
  secondaryGroup.add(new AdjustAutotestDelayActionGroup(parent));
  properties.appendAdditionalActions(secondaryGroup,environment,parent);
  actionGroup.add(secondaryGroup);
  add(ActionManager.getInstance().createActionToolbar(ActionPlaces.TESTTREE_VIEW_TOOLBAR,actionGroup,true).getComponent(),BorderLayout.CENTER);
}
