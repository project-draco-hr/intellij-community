{
  ParameterInfoImpl[] paramsToMerge=getParamsToMerge();
  if (paramsToMerge.length == 1) {
    final ParameterInfoImpl parameterInfo=paramsToMerge[0];
    final PsiType paramType=parameterInfo.getTypeWrapper().getType(aClass,aClass.getManager());
    if (TypeConversionUtil.isPrimitiveWrapper(aClass.getQualifiedName())) {
      ParameterBean bean=new ParameterBean();
      bean.setField(aClass.findFieldByName("value",false));
      bean.setGetter(paramType.getCanonicalText() + "Value");
      myExistingClassProperties.put(parameterInfo,bean);
      for (      PsiMethod constructor : aClass.getConstructors()) {
        if (constructorIsCompatible(constructor,new ParameterInfoImpl[]{parameterInfo},aClass))         return constructor;
      }
    }
  }
  final PsiMethod[] constructors=aClass.getConstructors();
  PsiMethod compatibleConstructor=null;
  for (  PsiMethod constructor : constructors) {
    if (constructorIsCompatible(constructor,paramsToMerge,aClass)) {
      compatibleConstructor=constructor;
      break;
    }
  }
  if (compatibleConstructor == null) {
    return null;
  }
  final PsiParameterList parameterList=compatibleConstructor.getParameterList();
  final PsiParameter[] constructorParams=parameterList.getParameters();
  for (int i=0; i < constructorParams.length; i++) {
    final PsiParameter param=constructorParams[i];
    final ParameterInfoImpl methodParam=getParameterInfo(i);
    final ParameterBean bean=new ParameterBean();
    myExistingClassProperties.put(methodParam,bean);
    final PsiField field=findFieldAssigned(param,compatibleConstructor);
    if (field == null) {
      return null;
    }
    bean.setField(field);
    final PsiMethod getterForField=PropertyUtil.findGetterForField(field);
    if (getterForField != null) {
      bean.setGetter(getterForField.getName());
    }
    final PsiMethod setterForField=PropertyUtil.findSetterForField(field);
    if (setterForField != null) {
      bean.setSetter(setterForField.getName());
    }
  }
  return compatibleConstructor;
}
