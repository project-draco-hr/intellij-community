{
  super(className,calcPackageName(packageName,createInnerClass,method),useExistingClass,createInnerClass,newVisibility,generateAccessors,paramsToMerge);
  myMoveDestination=moveDestination;
  final PsiTypeVisitor<Object> typeParametersVisitor=new PsiTypeVisitor<Object>(){
    @Override public Object visitClassType(    PsiClassType classType){
      final PsiClass referent=classType.resolve();
      if (referent instanceof PsiTypeParameter) {
        myTypeParameters.add((PsiTypeParameter)referent);
      }
      for (      PsiType type : classType.getParameters()) {
        type.accept(this);
      }
      return super.visitClassType(classType);
    }
  }
;
  for (  ParameterInfoImpl parameterInfo : paramsToMerge) {
    parameterInfo.getTypeWrapper().getType(method).accept(typeParametersVisitor);
  }
}
