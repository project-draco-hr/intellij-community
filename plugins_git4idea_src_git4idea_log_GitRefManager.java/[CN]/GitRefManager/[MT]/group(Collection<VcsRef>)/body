{
  List<RefGroup> simpleGroups=ContainerUtil.newArrayList();
  List<VcsRef> localBranches=ContainerUtil.newArrayList();
  List<VcsRef> trackedBranches=ContainerUtil.newArrayList();
  MultiMap<GitRemote,VcsRef> remoteRefGroups=MultiMap.create();
  for (  VcsRef ref : refs) {
    if (ref.getType() == HEAD) {
      simpleGroups.add(new SingletonRefGroup(ref));
    }
 else {
      GitRepository repository=myRepositoryManager.getRepositoryForRoot(ref.getRoot());
      if (repository == null) {
        LOG.warn("No repository for root: " + ref.getRoot());
        continue;
      }
      Collection<GitBranchTrackInfo> trackInfos=repository.getBranchTrackInfos();
      GitBranchesCollection branches=repository.getBranches();
      GitLocalBranch localBranch=findBranchByName(ref,branches.getLocalBranches());
      if (localBranch != null) {
        localBranches.add(ref);
      }
 else {
        GitRemoteBranch remoteBranch=findBranchByName(ref,branches.getRemoteBranches());
        if (remoteBranch != null) {
          if (isTracked(trackInfos,remoteBranch)) {
            trackedBranches.add(ref);
          }
 else {
            remoteRefGroups.putValue(remoteBranch.getRemote(),ref);
          }
        }
 else {
          LOG.warn("Didn't find ref neither in local nor in remote branches: " + ref);
        }
      }
    }
  }
  List<RefGroup> result=ContainerUtil.newArrayList();
  result.addAll(simpleGroups);
  result.add(new LogicalRefGroup("Local",localBranches));
  result.add(new LogicalRefGroup("Tracked",trackedBranches));
  for (  Map.Entry<GitRemote,Collection<VcsRef>> entry : remoteRefGroups.entrySet()) {
    final GitRemote remote=entry.getKey();
    final Collection<VcsRef> branches=entry.getValue();
    result.add(new RemoteRefGroup(remote,branches));
  }
  return result;
}
