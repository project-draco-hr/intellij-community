{
  return new ExternalProjectsStateProvider(){
    @Override public List<TasksActivation> getAllTasksActivation(){
      List<TasksActivation> result=new SmartList<TasksActivation>();
      for (      Map.Entry<String,ExternalProjectsState.State> systemState : myState.getExternalSystemsState().entrySet()) {
        ProjectSystemId systemId=new ProjectSystemId(systemState.getKey());
        for (        Map.Entry<String,TaskActivationState> activationStateEntry : systemState.getValue().getExternalSystemsTaskActivation().entrySet()) {
          result.add(new TasksActivation(systemId,activationStateEntry.getKey(),activationStateEntry.getValue()));
        }
      }
      return result;
    }
    @Override public List<TasksActivation> getTasksActivation(    @NotNull final ProjectSystemId systemId){
      final Set<Map.Entry<String,TaskActivationState>> entries=myState.getExternalSystemsState().get(systemId.getId()).getExternalSystemsTaskActivation().entrySet();
      return ContainerUtil.map(entries,new Function<Map.Entry<String,TaskActivationState>,TasksActivation>(){
        @Override public TasksActivation fun(        Map.Entry<String,TaskActivationState> entry){
          return new TasksActivation(systemId,entry.getKey(),entry.getValue());
        }
      }
);
    }
    @Override public TaskActivationState getTasksActivation(    @NotNull ProjectSystemId systemId,    @NotNull String projectPath){
      return myState.getExternalSystemsState().get(systemId.getId()).getExternalSystemsTaskActivation().get(projectPath);
    }
  }
;
}
