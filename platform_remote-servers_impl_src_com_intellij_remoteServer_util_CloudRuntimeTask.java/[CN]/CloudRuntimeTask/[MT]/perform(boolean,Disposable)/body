{
  final Semaphore semaphore=new Semaphore();
  semaphore.down();
  final AtomicReference<T> result=new AtomicReference<T>();
  final Progressive progressive=new Progressive(){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      while (!indicator.isCanceled()) {
        if (semaphore.waitFor(500)) {
          if (mySuccess.get()) {
            UIUtil.invokeLaterIfNeeded(new Runnable(){
              @Override public void run(){
                if (disposable == null || !Disposer.isDisposed(disposable)) {
                  postPerform(result.get());
                }
              }
            }
);
          }
          break;
        }
      }
    }
  }
;
  Task task;
  boolean cancellable=isCancellable(modal);
  if (modal) {
    task=new Task.Modal(myProject,myTitle,cancellable){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        progressive.run(indicator);
      }
    }
;
  }
 else {
    task=new Task.Backgroundable(myProject,myTitle,cancellable){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        progressive.run(indicator);
      }
      @Override public boolean shouldStartInBackground(){
        return CloudRuntimeTask.this.shouldStartInBackground();
      }
    }
;
  }
  mySuccess.set(false);
  myErrorMessage.set(null);
  run(semaphore,result);
  task.queue();
  return result.get();
}
