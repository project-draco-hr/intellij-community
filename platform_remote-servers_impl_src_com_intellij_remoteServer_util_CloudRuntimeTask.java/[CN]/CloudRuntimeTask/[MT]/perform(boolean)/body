{
  final Semaphore semaphore=new Semaphore();
  semaphore.down();
  final Progressive progressive=new Progressive(){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      while (!indicator.isCanceled()) {
        if (semaphore.waitFor(500)) {
          break;
        }
      }
    }
  }
;
  Task task;
  boolean cancellable=isCancellable(modal);
  if (modal) {
    task=new Task.Modal(myProject,myTitle,cancellable){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        progressive.run(indicator);
      }
    }
;
  }
 else {
    task=new Task.Backgroundable(myProject,myTitle,cancellable){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        progressive.run(indicator);
      }
    }
;
  }
  AtomicReference<T> result=new AtomicReference<T>();
  run(semaphore,result);
  task.queue();
  return result.get();
}
