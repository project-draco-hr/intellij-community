{
  boolean result;
  PsiElement el=_type;
  PsiElement el2=_type2;
  PsiType type1=null;
  PsiType type2=null;
  if (_type instanceof PsiTypeElement && ((PsiTypeElement)_type).getInnermostComponentReferenceElement() != null) {
    el=((PsiTypeElement)_type).getInnermostComponentReferenceElement();
    type1=((PsiTypeElement)_type).getType();
    PsiReferenceParameterList list=((PsiJavaCodeReferenceElement)el).getParameterList();
    PsiElement[] typeparams=null;
    if (_type2 instanceof PsiTypeElement && ((PsiTypeElement)_type2).getInnermostComponentReferenceElement() != null) {
      el2=((PsiTypeElement)_type2).getInnermostComponentReferenceElement();
      type2=((PsiTypeElement)_type2).getType();
    }
    if (el2 instanceof PsiJavaCodeReferenceElement) {
      typeparams=((PsiJavaCodeReferenceElement)el2).getParameterList().getTypeParameterElements();
      if (typeparams.length > 0) {
        el2=((PsiJavaCodeReferenceElement)el2).getReferenceNameElement();
      }
    }
 else     if (el2 instanceof PsiTypeParameter) {
      el2=((PsiTypeParameter)el2).getNameIdentifier();
    }
 else     if (el2 instanceof PsiClass && ((PsiClass)el2).getTypeParameters().length > 0) {
      typeparams=((PsiClass)el2).getTypeParameters();
      el2=((PsiClass)el2).getNameIdentifier();
    }
 else     if (el2 instanceof PsiMethod && ((PsiMethod)el2).getTypeParameters().length > 0) {
      typeparams=((PsiMethod)_type2).getTypeParameters();
      el2=((PsiMethod)_type2).getNameIdentifier();
    }
    if (list != null && list.getTypeParameterElements().length > 0) {
      result=typeparams != null && matchInAnyOrder(list.getTypeParameterElements(),typeparams);
      if (!result)       return false;
      el=((PsiJavaCodeReferenceElement)el).getReferenceNameElement();
    }
 else {
      if (_type2 instanceof PsiTypeElement) {
        type2=((PsiTypeElement)_type2).getType();
        if (typeparams == null || typeparams.length == 0) {
          final PsiJavaCodeReferenceElement innermostComponentReferenceElement=((PsiTypeElement)_type2).getInnermostComponentReferenceElement();
          if (innermostComponentReferenceElement != null)           el2=innermostComponentReferenceElement;
        }
 else {
          el2=_type2;
        }
      }
    }
  }
  final int array2Dims=(type2 != null ? type2.getArrayDimensions() : 0) + countCStyleArrayDeclarationDims(_type2);
  final int arrayDims=(type1 != null ? type1.getArrayDimensions() : 0) + countCStyleArrayDeclarationDims(_type);
  if (matchContext.getPattern().isTypedVar(el)) {
    final SubstitutionHandler handler=(SubstitutionHandler)matchContext.getPattern().getHandler(el);
    RegExpPredicate regExpPredicate=null;
    if (arrayDims != 0) {
      if (arrayDims != array2Dims) {
        return false;
      }
    }
 else     if (array2Dims != 0) {
      regExpPredicate=Handler.getSimpleRegExpPredicate(handler);
      if (regExpPredicate != null) {
        regExpPredicate.setNodeTextGenerator(new RegExpPredicate.NodeTextGenerator(){
          public String getText(          PsiElement element){
            StringBuilder builder=new StringBuilder(RegExpPredicate.getMeaningfulText(element));
            for (int i=0; i < array2Dims; ++i)             builder.append("[]");
            return builder.toString();
          }
        }
);
      }
    }
    try {
      if (handler.isSubtype() || handler.isStrictSubtype()) {
        final NodeIterator node=new HierarchyNodeIterator(el2,true,true);
        if (handler.isStrictSubtype()) {
          node.advance();
        }
        while (node.hasNext() && !handler.validate(node.current(),0,-1,matchContext)) {
          node.advance();
        }
        if (node.hasNext()) {
          handler.addResult(el2,0,-1,matchContext);
          return true;
        }
 else {
          return false;
        }
      }
 else {
        return handler.handle(el2,matchContext);
      }
    }
  finally {
      if (regExpPredicate != null)       regExpPredicate.setNodeTextGenerator(null);
    }
  }
  if (array2Dims != arrayDims) {
    return false;
  }
  final String text=el.getText();
  if (text.indexOf('.') == -1 || !(el2 instanceof PsiJavaReference)) {
    return MatchUtils.compareWithNoDifferenceToPackage(text,el2.getText());
  }
 else {
    PsiElement element2=((PsiJavaReference)el2).resolve();
    if (element2 != null) {
      return text.equals(((PsiClass)element2).getQualifiedName());
    }
 else {
      return MatchUtils.compareWithNoDifferenceToPackage(text,el2.getText());
    }
  }
}
