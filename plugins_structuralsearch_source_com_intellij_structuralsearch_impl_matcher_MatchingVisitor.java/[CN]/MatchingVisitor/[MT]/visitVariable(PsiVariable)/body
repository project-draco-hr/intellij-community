{
  matchContext.pushResult();
  final PsiIdentifier nameIdentifier=var.getNameIdentifier();
  boolean isTypedVar=matchContext.getPattern().isTypedVar(nameIdentifier);
  boolean isTypedInitializer=var.getInitializer() != null && matchContext.getPattern().isTypedVar(var.getInitializer()) && var.getInitializer() instanceof PsiReferenceExpression;
  final PsiVariable var2=(PsiVariable)element;
  try {
    result=(var.getName().equals(var2.getName()) || isTypedVar) && ((var.getParent() instanceof PsiClass && ((PsiClass)var.getParent()).isInterface()) || match(var.getModifierList(),var2.getModifierList())) && match(var.getTypeElement(),var2.getTypeElement());
    if (result) {
      final PsiExpression var2Initializer=var2.getInitializer();
      result=match(var.getInitializer(),var2Initializer) || (isTypedInitializer && var2Initializer == null && allowsAbsenceOfMatch(var.getInitializer()));
    }
    if (result && isTypedVar) {
      result=handleTypedElement(nameIdentifier,var2.getNameIdentifier());
    }
  }
  finally {
    saveOrDropResult(nameIdentifier,isTypedVar,var2.getNameIdentifier());
  }
}
