{
  final boolean isTypedVar=matchContext.getPattern().isTypedVar(method.getNameIdentifier());
  final PsiMethod method2=(PsiMethod)element;
  matchContext.pushResult();
  try {
    if (method.getTypeParameters().length > 0) {
      result=match(method.getTypeParameterList(),((PsiMethod)element).getTypeParameterList());
      if (!result)       return;
    }
    if (!checkHierarchy(method2,method)) {
      result=false;
      return;
    }
    result=(method.getName().equals(method2.getName()) || isTypedVar) && match(method.getModifierList(),method2.getModifierList()) && matchSons(method.getParameterList(),method2.getParameterList())&& match(method.getReturnTypeElement(),method2.getReturnTypeElement())&& matchInAnyOrder(method.getThrowsList(),method2.getThrowsList())&& matchSonsOptionally(method.getBody(),method2.getBody());
  }
  finally {
    MatchResultImpl ourResult=matchContext.hasResult() ? matchContext.getResult() : null;
    matchContext.popResult();
    if (result) {
      if (isTypedVar) {
        final SubstitutionHandler handler=(SubstitutionHandler)matchContext.getPattern().getHandler(method.getNameIdentifier());
        if (ourResult != null)         ourResult.setScopeMatch(true);
        handler.setNestedResult(ourResult);
        result=handler.handle(method2.getNameIdentifier(),matchContext);
        if (handler.getNestedResult() != null) {
          handler.setNestedResult(null);
          copyResults(ourResult);
        }
      }
 else       if (ourResult != null) {
        copyResults(ourResult);
      }
    }
  }
}
