{
  final CompiledPattern pattern=matchContext.getPattern();
  final NodeIterator patternNodes=pattern.getNodes().clone();
  final MatchResultImpl saveResult=matchContext.hasResult() ? matchContext.getResult() : null;
  final LinkedList<PsiElement> saveMatchedNodes=matchContext.getMatchedNodes();
  try {
    matchContext.setResult(null);
    matchContext.setMatchedNodes(null);
    if (!patternNodes.hasNext())     return;
    final MatchingHandler firstMatchingHandler=matchContext.getPattern().getHandler(patternNodes.current());
    for (; elements.hasNext(); elements.advance()) {
      final boolean matched=firstMatchingHandler.matchSequentially(patternNodes,elements,matchContext);
      final LinkedList<PsiElement> matchedNodes=matchContext.getMatchedNodes();
      if (matched) {
        dispatchMatched(matchedNodes,matchContext.getResult());
      }
      matchContext.setMatchedNodes(null);
      matchContext.setResult(null);
      patternNodes.reset();
      if (matchedNodes != null && matchedNodes.size() > 0 && matched) {
        elements.rewind();
      }
    }
  }
  finally {
    matchContext.setResult(saveResult);
    matchContext.setMatchedNodes(saveMatchedNodes);
  }
}
