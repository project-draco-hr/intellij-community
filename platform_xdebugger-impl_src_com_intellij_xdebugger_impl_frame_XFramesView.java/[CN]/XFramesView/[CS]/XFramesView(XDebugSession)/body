{
  mySession=session;
  myMainPanel=new JPanel(new BorderLayout());
  myFramesList=new XDebuggerFramesList(session.getProject());
  myFramesList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    final ListSelectionEvent e){
      if (e.getValueIsAdjusting())       return;
      processFrameSelection();
    }
  }
);
  myFramesList.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      int i=myFramesList.locationToIndex(e.getPoint());
      if (i != -1 && myFramesList.isSelectedIndex(i)) {
        processFrameSelection();
      }
    }
  }
);
  final ActionManager actionManager=ActionManager.getInstance();
  myFramesList.addMouseListener(new PopupHandler(){
    @Override public void invokePopup(    final Component comp,    final int x,    final int y){
      ActionGroup group=(ActionGroup)actionManager.getAction(XDebuggerActions.FRAMES_TREE_POPUP_GROUP);
      actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN,group).getComponent().show(comp,x,y);
    }
  }
);
  myMainPanel.add(ScrollPaneFactory.createScrollPane(myFramesList),BorderLayout.CENTER);
  myThreadComboBox=new ComboBox();
  myThreadComboBox.setRenderer(new ThreadComboBoxRenderer(myThreadComboBox));
  myThreadComboBox.addItemListener(new MyItemListener());
  myThreadComboBox.addPopupMenuListener(new PopupMenuListenerAdapter(){
    @Override public void popupMenuWillBecomeVisible(    PopupMenuEvent e){
      XSuspendContext context=mySession.getSuspendContext();
      if (context != null && !myThreadsCalculated) {
        myThreadsCalculated=true;
        myThreadComboBox.addItem(null);
        context.computeExecutionStacks(new XSuspendContext.XExecutionStackContainer(){
          @Override public void addExecutionStack(          @NotNull final List<? extends XExecutionStack> executionStacks,          boolean last){
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              @Override public void run(){
                myThreadComboBox.removeItem(null);
                addExecutionStacks(executionStacks);
                ComboPopup popup=myThreadComboBox.getPopup();
                if (popup != null && popup.isVisible()) {
                  popup.hide();
                  popup.show();
                }
              }
            }
);
          }
          @Override public void errorOccurred(          @NotNull String errorMessage){
          }
        }
);
      }
    }
  }
);
  new ComboboxSpeedSearch(myThreadComboBox){
    @Override protected String getElementText(    Object element){
      return ((XExecutionStack)element).getDisplayName();
    }
  }
;
  myToolbar=createToolbar();
  myThreadsPanel=new Wrapper();
  CustomLineBorder border=new CustomLineBorder(CaptionPanel.CNT_ACTIVE_BORDER_COLOR,0,0,1,0);
  myThreadsPanel.setBorder(border);
  myThreadsPanel.add(myToolbar.getComponent(),BorderLayout.EAST);
  myMainPanel.add(myThreadsPanel,BorderLayout.NORTH);
  processSessionEvent(SessionEvent.RESUMED);
}
