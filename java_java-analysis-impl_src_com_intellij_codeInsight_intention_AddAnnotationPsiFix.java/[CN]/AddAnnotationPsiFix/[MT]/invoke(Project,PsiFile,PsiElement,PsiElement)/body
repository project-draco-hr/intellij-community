{
  final PsiModifierListOwner myModifierListOwner=(PsiModifierListOwner)startElement;
  final ExternalAnnotationsManager annotationsManager=ExternalAnnotationsManager.getInstance(project);
  final PsiModifierList modifierList=myModifierListOwner.getModifierList();
  LOG.assertTrue(modifierList != null,myModifierListOwner + " (" + myModifierListOwner.getClass()+ ")");
  if (modifierList.findAnnotation(myAnnotation) != null)   return;
  final ExternalAnnotationsManager.AnnotationPlace annotationAnnotationPlace=annotationsManager.chooseAnnotationsPlace(myModifierListOwner);
  if (annotationAnnotationPlace == ExternalAnnotationsManager.AnnotationPlace.NOWHERE)   return;
  if (annotationAnnotationPlace == ExternalAnnotationsManager.AnnotationPlace.EXTERNAL) {
    for (    String fqn : myAnnotationsToRemove) {
      annotationsManager.deannotate(myModifierListOwner,fqn);
    }
    annotationsManager.annotateExternally(myModifierListOwner,myAnnotation,file,myPairs);
  }
 else {
    final PsiFile containingFile=myModifierListOwner.getContainingFile();
    if (!FileModificationService.getInstance().preparePsiElementForWrite(containingFile))     return;
    removePhysicalAnnotations(myModifierListOwner,myAnnotationsToRemove);
    PsiAnnotation inserted=addPhysicalAnnotation(myAnnotation,myPairs,modifierList);
    JavaCodeStyleManager.getInstance(project).shortenClassReferences(inserted);
    if (containingFile != file) {
      UndoUtil.markPsiFileForUndo(file);
    }
  }
}
