{
  PsiElement element=descriptor.getPsiElement();
  if (element instanceof PyAssignmentStatement && element.isWritable()) {
    PyAssignmentStatement statement=(PyAssignmentStatement)element;
    PyExpression target=statement.getLeftHandSideExpression();
    PyBinaryExpression expression=(PyBinaryExpression)statement.getAssignedValue();
    PyExpression leftExpression=expression.getLeftExpression();
    PyExpression rightExpression=expression.getRightExpression();
    if (rightExpression.getText().equals(target.getText())) {
      PyExpression tmp=rightExpression;
      rightExpression=leftExpression;
      leftExpression=tmp;
    }
    if (leftExpression != null && (leftExpression instanceof PyReferenceExpression || leftExpression instanceof PySubscriptionExpression)) {
      if (leftExpression.getText().equals(target.getText())) {
        if (rightExpression instanceof PyNumericLiteralExpression || rightExpression instanceof PyStringLiteralExpression || rightExpression instanceof PyReferenceExpression|| isPercentage(rightExpression)|| isCompound(rightExpression)|| isMathOperation(rightExpression,expression.getOperator())) {
          PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
          StringBuilder stringBuilder=new StringBuilder();
          stringBuilder.append(target.getText()).append(" ").append(expression.getPsiOperator().getText()).append("= ").append(rightExpression.getText());
          PyAugAssignmentStatementImpl augAssignment=elementGenerator.createFromText(LanguageLevel.forElement(element),PyAugAssignmentStatementImpl.class,stringBuilder.toString());
          statement.replace(augAssignment);
        }
      }
    }
  }
}
