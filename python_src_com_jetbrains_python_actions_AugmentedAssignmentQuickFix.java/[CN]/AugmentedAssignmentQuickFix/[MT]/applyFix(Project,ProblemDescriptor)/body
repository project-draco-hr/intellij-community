{
  PsiElement element=descriptor.getPsiElement();
  if (element != null && element instanceof PyAssignmentStatement && element.isWritable()) {
    PyAssignmentStatement statement=(PyAssignmentStatement)element;
    PyTargetExpression target=((PyTargetExpression)statement.getLeftHandSideExpression());
    PyBinaryExpression expression=(PyBinaryExpression)statement.getAssignedValue();
    PyExpression leftExpression=expression.getLeftExpression();
    PyExpression rightExpression=expression.getRightExpression();
    if (leftExpression != null && leftExpression instanceof PyReferenceExpression) {
      if (leftExpression.getName().equals(target.getName())) {
        if (rightExpression instanceof PyNumericLiteralExpression || rightExpression instanceof PyStringLiteralExpression || rightExpression instanceof PyReferenceExpression) {
          PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
          StringBuilder stringBuilder=new StringBuilder();
          stringBuilder.append(target.getName()).append(" ").append(expression.getPsiOperator().getText()).append("= ").append(rightExpression.getText());
          PyAugAssignmentStatementImpl augAssignment=elementGenerator.createFromText(LanguageLevel.getDefault(),PyAugAssignmentStatementImpl.class,stringBuilder.toString());
          statement.replace(augAssignment);
        }
      }
    }
  }
}
