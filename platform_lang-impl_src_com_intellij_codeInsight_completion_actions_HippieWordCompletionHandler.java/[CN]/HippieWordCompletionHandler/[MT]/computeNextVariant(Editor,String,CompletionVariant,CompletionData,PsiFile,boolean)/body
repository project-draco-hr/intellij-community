{
  final List<CompletionVariant> variants=computeVariants(editor,new CamelHumpMatcher(StringUtil.notNullize(prefix)),file,includeWordsFromOtherFiles);
  if (variants.isEmpty())   return null;
  if (lastProposedVariant != null) {
    for (    CompletionVariant variant : variants) {
      if (variant.variant.equals(lastProposedVariant.variant)) {
        if (lastProposedVariant.offset > data.startOffset && variant.offset > data.startOffset)         lastProposedVariant=variant;
        if (lastProposedVariant.offset < data.startOffset && variant.offset < data.startOffset)         lastProposedVariant=variant;
      }
    }
  }
  if (lastProposedVariant == null) {
    CompletionVariant result=null;
    if (myForward) {
      for (      CompletionVariant variant : variants) {
        if (variant.offset < data.startOffset) {
          result=variant;
        }
 else         if (result == null) {
          result=variant;
          break;
        }
      }
    }
 else {
      for (      CompletionVariant variant : variants) {
        if (variant.offset > data.startOffset) {
          return variant;
        }
      }
      return variants.iterator().next();
    }
    return result;
  }
  if (myForward) {
    CompletionVariant result=null;
    for (    CompletionVariant variant : variants) {
      if (variant == lastProposedVariant) {
        if (result == null) {
          return computeNextVariant(editor,prefix,null,data,file,!includeWordsFromOtherFiles);
        }
        return result;
      }
      result=variant;
    }
    return variants.get(variants.size() - 1);
  }
 else {
    for (Iterator<CompletionVariant> i=variants.iterator(); i.hasNext(); ) {
      CompletionVariant variant=i.next();
      if (variant == lastProposedVariant) {
        if (i.hasNext()) {
          return i.next();
        }
 else {
          return computeNextVariant(editor,prefix,null,data,file,!includeWordsFromOtherFiles);
        }
      }
    }
  }
  return null;
}
