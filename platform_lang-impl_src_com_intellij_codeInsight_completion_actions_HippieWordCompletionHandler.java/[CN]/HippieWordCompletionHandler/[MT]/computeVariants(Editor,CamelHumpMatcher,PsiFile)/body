{
  final CharSequence chars=editor.getDocument().getCharsSequence();
  final ArrayList<CompletionVariant> words=new ArrayList<CompletionVariant>();
  final List<CompletionVariant> afterWords=new ArrayList<CompletionVariant>();
  final int caretOffset=editor.getCaretModel().getOffset();
  HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(0);
  while (!iterator.atEnd()) {
    int start=iterator.getStart();
    int end=iterator.getEnd();
    if ((start > caretOffset || end < caretOffset) && end - start > matcher.getPrefix().length() && isWordLike(chars,start,end)) {
      final String word=chars.subSequence(start,end).toString();
      if (matcher.prefixMatches(word)) {
        CompletionVariant v=new CompletionVariant(word,start);
        if (end > caretOffset) {
          afterWords.add(v);
        }
 else {
          words.add(v);
        }
      }
    }
    iterator.advance();
  }
  Set<String> allWords=new HashSet<String>();
  List<CompletionVariant> result=new ArrayList<CompletionVariant>();
  Collections.reverse(words);
  for (  CompletionVariant variant : words) {
    if (!allWords.contains(variant.variant)) {
      result.add(variant);
      allWords.add(variant.variant);
    }
  }
  Collections.reverse(result);
  allWords.clear();
  for (  CompletionVariant variant : afterWords) {
    if (!allWords.contains(variant.variant)) {
      result.add(variant);
      allWords.add(variant.variant);
    }
  }
  return result;
}
