{
  if (!FileModificationService.getInstance().prepareFileForWrite(file))   return;
  int caretOffset=editor.getCaretModel().getOffset();
  if (editor.isViewer() || editor.getDocument().getRangeGuard(caretOffset,caretOffset) != null) {
    editor.getDocument().fireReadOnlyModificationAttempt();
    CodeInsightUtilBase.showReadOnlyViewWarning(editor);
    return;
  }
  LookupManager.getInstance(project).hideActiveLookup();
  final CharSequence charsSequence=editor.getDocument().getCharsSequence();
  final CompletionData data=computeData(editor,charsSequence);
  String currentPrefix=data.myPrefix;
  final CompletionState completionState=getCompletionState(editor);
  String oldPrefix=completionState.oldPrefix;
  CompletionVariant lastProposedVariant=completionState.lastProposedVariant;
  boolean fromOtherFiles=completionState.fromOtherFiles;
  if (lastProposedVariant == null || oldPrefix == null || !new CamelHumpMatcher(oldPrefix).isStartMatch(currentPrefix) || !currentPrefix.equals(lastProposedVariant.variant)) {
    oldPrefix=currentPrefix;
    completionState.oldPrefix=oldPrefix;
    lastProposedVariant=null;
    fromOtherFiles=false;
  }
  CompletionVariant nextVariant=computeNextVariant(editor,oldPrefix,lastProposedVariant,data,file,fromOtherFiles,false);
  if (nextVariant == null)   return;
  nextVariant.fastenBelts();
  try {
    insertStringForEachCaret(editor,nextVariant.variant,caretOffset - data.startOffset);
  }
  finally {
    nextVariant.unfastenBelts();
  }
  completionState.lastProposedVariant=nextVariant;
  completionState.fromOtherFiles=nextVariant.editor != editor;
  if (nextVariant.editor == editor)   highlightWord(nextVariant,project);
}
