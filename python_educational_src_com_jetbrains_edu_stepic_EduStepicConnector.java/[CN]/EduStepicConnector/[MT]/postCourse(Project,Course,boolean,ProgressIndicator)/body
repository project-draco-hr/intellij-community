{
  indicator.setText("Uploading course to " + stepicUrl);
  final HttpPost request=new HttpPost(stepicApiUrl + "courses");
  if (ourClient == null || !relogin) {
    if (!login())     return;
  }
  final AuthorWrapper user=getCurrentUser();
  if (user != null) {
    course.setAuthors(user.users);
  }
  setHeaders(request,"application/json");
  String requestBody=new Gson().toJson(new CourseWrapper(course));
  request.setEntity(new StringEntity(requestBody,ContentType.APPLICATION_JSON));
  try {
    final CloseableHttpResponse response=ourClient.execute(request);
    final HttpEntity responseEntity=response.getEntity();
    final String responseString=responseEntity != null ? EntityUtils.toString(responseEntity) : "";
    final StatusLine line=response.getStatusLine();
    if (line.getStatusCode() != 201) {
      if (!relogin) {
        login();
        postCourse(project,course,true,indicator);
      }
      LOG.error("Failed to push " + responseString);
      return;
    }
    final CourseInfo postedCourse=new Gson().fromJson(responseString,CoursesContainer.class).courses.get(0);
    final int sectionId=postModule(postedCourse.id,1,String.valueOf(postedCourse.getName()));
    int position=1;
    for (    Lesson lesson : course.getLessons()) {
      indicator.checkCanceled();
      final int lessonId=postLesson(project,lesson,indicator);
      postUnit(lessonId,position,sectionId);
      position+=1;
    }
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      @Override public void run(){
        postAdditionalFiles(project,postedCourse.id,indicator);
      }
    }
);
  }
 catch (  IOException e) {
    LOG.error(e.getMessage());
  }
}
