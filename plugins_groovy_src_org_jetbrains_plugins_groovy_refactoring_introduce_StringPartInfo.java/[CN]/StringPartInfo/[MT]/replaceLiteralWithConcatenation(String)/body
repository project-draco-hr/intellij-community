{
  String prefix=preparePrefix();
  String suffix=prepareSuffix();
  StringBuilder buffer=new StringBuilder();
  boolean prefixExists=!removeQuotes(prefix).isEmpty();
  if (prefixExists) {
    buffer.append(prefix).append('+');
  }
  buffer.append(varName != null ? varName : prepareSelected());
  boolean suffixExists=!removeQuotes(suffix).isEmpty();
  if (suffixExists) {
    buffer.append('+').append(suffix);
  }
  final GrExpression concatenation=GroovyPsiElementFactory.getInstance(myLiteral.getProject()).createExpressionFromText(buffer);
  final GrExpression replaced=getLiteral().replaceWithExpression(concatenation,false);
  try {
    if (prefixExists && suffixExists) {
      return ((GrBinaryExpression)((GrBinaryExpression)replaced).getLeftOperand()).getRightOperand();
    }
    if (!prefixExists && suffixExists) {
      return ((GrBinaryExpression)replaced).getLeftOperand();
    }
    if (prefixExists && !suffixExists) {
      return ((GrBinaryExpression)replaced).getRightOperand();
    }
    if (!prefixExists && !suffixExists) {
      return replaced;
    }
  }
 catch (  ClassCastException c) {
    throw new IncorrectOperationException(buffer.toString());
  }
  throw new IncorrectOperationException(buffer.toString());
}
