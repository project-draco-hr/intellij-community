{
  String[] lines=description.split("\n");
  int depth=0;
  LinkedList<MatchNode> stack=new LinkedList<>();
  for (  String line : lines) {
    List<String> properties=new ArrayList<>(Arrays.asList(line.split("\\s+")));
    if (properties.get(0).isEmpty()) {
      properties.remove(0);
    }
    int node_type="statement".equals(properties.get(0)) ? MatchNode.MATCHNODE_STATEMENT : MatchNode.MATCHNODE_EXPRENT;
    MatchNode matchNode=new MatchNode(node_type);
    for (int i=1; i < properties.size(); ++i) {
      String[] values=properties.get(i).split(":");
      MatchProperties property=(node_type == MatchNode.MATCHNODE_STATEMENT ? stat_properties : expr_properties).get(values[0]);
      if (property == null) {
        throw new RuntimeException("Unknown matching property");
      }
 else {
        Object value=null;
        int parameter=0;
        String strValue=values[1];
        if (values.length == 3) {
          parameter=Integer.parseInt(values[1]);
          strValue=values[2];
        }
switch (property) {
case STATEMENT_TYPE:
          value=stat_type.get(strValue);
        break;
case STATEMENT_STATSIZE:
case STATEMENT_EXPRSIZE:
      value=Integer.valueOf(strValue);
    break;
case STATEMENT_POSITION:
case EXPRENT_POSITION:
case EXPRENT_INVOCATION_CLASS:
case EXPRENT_INVOCATION_SIGNATURE:
case EXPRENT_INVOCATION_PARAMETER:
case EXPRENT_VAR_INDEX:
case EXPRENT_FIELD_NAME:
case EXPRENT_CONSTVALUE:
case STATEMENT_RET:
case EXPRENT_RET:
  value=strValue;
break;
case STATEMENT_IFTYPE:
value=stat_if_type.get(strValue);
break;
case EXPRENT_FUNCTYPE:
value=expr_func_type.get(strValue);
break;
case EXPRENT_EXITTYPE:
value=expr_exit_type.get(strValue);
break;
case EXPRENT_CONSTTYPE:
value=expr_const_type.get(strValue);
break;
case EXPRENT_TYPE:
value=expr_type.get(strValue);
break;
default :
throw new RuntimeException("Unhandled matching property");
}
matchNode.addRule(property,new RuleValue(parameter,value));
}
}
if (stack.isEmpty()) {
stack.push(matchNode);
}
 else {
int new_depth=line.lastIndexOf(' ',depth) + 1;
for (int i=new_depth; i <= depth; ++i) {
stack.pop();
}
stack.getFirst().addChild(matchNode);
stack.push(matchNode);
depth=new_depth;
}
}
this.rootNode=stack.getLast();
}
