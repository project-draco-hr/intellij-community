{
  super.visitReferenceElement(reference);
  final PsiElement resolved=reference.resolve();
  if (resolved instanceof PsiCompiledElement && resolved instanceof PsiMember) {
    final Module module=ModuleUtilCore.findModuleForPsiElement(reference.getElement());
    if (module != null) {
      final LanguageLevel languageLevel=getEffectiveLanguageLevel(module);
      if (isForbiddenApiUsage((PsiMember)resolved,languageLevel)) {
        PsiClass psiClass=null;
        final PsiElement qualifier=reference.getQualifier();
        if (qualifier != null) {
          if (qualifier instanceof PsiExpression) {
            psiClass=PsiUtil.resolveClassInType(((PsiExpression)qualifier).getType());
          }
        }
 else {
          psiClass=PsiTreeUtil.getParentOfType(reference,PsiClass.class);
        }
        if (psiClass != null) {
          if (isIgnored(psiClass))           return;
          for (          PsiClass superClass : psiClass.getSupers()) {
            if (isIgnored(superClass))             return;
          }
        }
        registerError(reference,languageLevel);
      }
 else       if (resolved instanceof PsiClass && isInProject(reference) && !languageLevel.isAtLeast(LanguageLevel.JDK_1_7)) {
        final PsiReferenceParameterList parameterList=reference.getParameterList();
        if (parameterList != null && parameterList.getTypeParameterElements().length > 0) {
          for (          String generifiedClass : ourGenerifiedClasses) {
            if (InheritanceUtil.isInheritor((PsiClass)resolved,generifiedClass)) {
              String message=InspectionsBundle.message("inspection.1.7.problem.descriptor",getJdkName(languageLevel));
              myHolder.registerProblem(reference,message);
              break;
            }
          }
        }
      }
    }
  }
}
