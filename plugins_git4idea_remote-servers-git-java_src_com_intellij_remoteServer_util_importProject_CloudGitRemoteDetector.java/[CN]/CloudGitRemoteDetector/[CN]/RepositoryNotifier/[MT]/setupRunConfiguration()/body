{
  Module targetModule=null;
  for (  Module module : ModuleManager.getInstance(myProject).getModules()) {
    if (myRepositoryRoot.equals(ModuleDeploymentSourceImpl.getContentRoot(module))) {
      targetModule=module;
      break;
    }
  }
  if (targetModule == null) {
    AddModuleWizard wizard=new AddModuleWizard(myProject,myRepositoryRoot.getPath(),new ImportFromSourcesProvider());
    wizard.navigateToStep(new Function<Step,Boolean>(){
      @Override public Boolean fun(      Step step){
        return step instanceof RootsDetectionStep;
      }
    }
);
    if (wizard.getStepCount() > 0 && !wizard.showAndGet()) {
      return;
    }
    ImportModuleAction.createFromWizard(myProject,wizard);
  }
 else {
    final Ref<CloudGitChooseAccountStepBase> chooseAccountStepRef=new Ref<CloudGitChooseAccountStepBase>();
    if (!new AbstractProjectWizard(CloudBundle.getText("choose.account.wizzard.title",myCloudName),myProject,(String)null){
      final StepSequence myStepSequence;
{
        CloudGitChooseAccountStepBase chooseAccountStep=new CloudGitChooseAccountStepBase(myDeploymentDetector,myWizardContext);
        chooseAccountStepRef.set(chooseAccountStep);
        myStepSequence=new StepSequence(chooseAccountStep);
        addStep(chooseAccountStep);
        init();
      }
      @Override public StepSequence getSequence(){
        return myStepSequence;
      }
    }
.showAndGet()) {
      return;
    }
    chooseAccountStepRef.get().createRunConfiguration(targetModule,myApplicationName);
  }
}
