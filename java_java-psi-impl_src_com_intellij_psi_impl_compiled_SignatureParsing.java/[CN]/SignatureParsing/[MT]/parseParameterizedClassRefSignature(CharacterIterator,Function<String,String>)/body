{
  StringBuilder canonicalText=new StringBuilder();
  boolean mapped=false, firstArg;
  signature.next();
  while (signature.current() != ';' && signature.current() != CharacterIterator.DONE) {
    char c=signature.current();
    if (c == '<') {
      canonicalText=new StringBuilder(mapping.fun(canonicalText.toString()));
      mapped=true;
      firstArg=true;
      signature.next();
      do {
        canonicalText.append(firstArg ? '<' : ',').append(parseClassOrTypeVariableElement(signature,mapping));
        firstArg=false;
      }
 while (signature.current() != '>');
      canonicalText.append('>');
    }
 else     if (c != ' ') {
      canonicalText.append(c);
    }
    signature.next();
  }
  if (signature.current() == CharacterIterator.DONE) {
    throw new ClsFormatException();
  }
  signature.next();
  String text=canonicalText.toString();
  if (!mapped)   text=mapping.fun(text);
  return text;
}
