{
  try {
    Element courseElement=getChildWithName(state,COURSE).getChild(COURSE_TITLED);
    for (    Element lesson : getChildList(courseElement,LESSONS,true)) {
      int lessonIndex=getAsInt(lesson,INDEX);
      for (      Element task : getChildList(lesson,TASK_LIST,true)) {
        int taskIndex=getAsInt(task,INDEX);
        Map<String,Element> taskFiles=getChildMap(task,TASK_FILES,true);
        for (        Map.Entry<String,Element> entry : taskFiles.entrySet()) {
          Element taskFileElement=entry.getValue();
          String name=entry.getKey();
          String answerName=FileUtil.getNameWithoutExtension(name) + CCUtils.ANSWER_EXTENSION_DOTTED + FileUtilRt.getExtension(name);
          Document document=StudyUtils.getDocument(myProject.getBasePath(),lessonIndex,taskIndex,answerName);
          if (document == null) {
            continue;
          }
          for (          Element placeholder : getChildList(taskFileElement,ANSWER_PLACEHOLDERS,true)) {
            Element lineElement=getChildWithName(placeholder,LINE,true);
            int line=lineElement != null ? Integer.valueOf(lineElement.getAttributeValue(VALUE)) : 0;
            Element startElement=getChildWithName(placeholder,START,true);
            int start=startElement != null ? Integer.valueOf(startElement.getAttributeValue(VALUE)) : 0;
            int offset=document.getLineStartOffset(line) + start;
            addChildWithName(placeholder,OFFSET,offset);
            addChildWithName(placeholder,"useLength","false");
            addHints(placeholder);
          }
        }
      }
    }
    XmlSerializer.deserializeInto(this,state);
  }
 catch (  StudyUnrecognizedFormatException e) {
    LOG.error(e);
  }
}
