{
  if (StringUtil.containsIgnoreCase(processInfo.getExecutableName(),"python")) {
    List<XLocalAttachDebugger> result=contextHolder.getUserData(DEBUGGERS_KEY);
    if (result != null)     return result;
    if (processInfo.getExecutableCannonicalPath().isPresent() && new File(processInfo.getExecutableCannonicalPath().get()).exists()) {
      result=Lists.newArrayList(new PyLocalAttachDebugger(processInfo.getExecutableCannonicalPath().get()));
    }
 else {
      result=ContainerUtil.map(PythonSdkType.getAllLocalCPythons(),new Function<Sdk,XLocalAttachDebugger>(){
        @Override public XLocalAttachDebugger fun(        Sdk sdk){
          return new PyLocalAttachDebugger(sdk);
        }
      }
);
    }
    Collections.sort(result,new Comparator<XLocalAttachDebugger>(){
      @Override public int compare(      XLocalAttachDebugger a,      XLocalAttachDebugger b){
        return -a.getDebuggerDisplayName().compareToIgnoreCase(b.getDebuggerDisplayName());
      }
    }
);
    contextHolder.putUserData(DEBUGGERS_KEY,Collections.unmodifiableList(result));
    return result;
  }
  return Collections.emptyList();
}
