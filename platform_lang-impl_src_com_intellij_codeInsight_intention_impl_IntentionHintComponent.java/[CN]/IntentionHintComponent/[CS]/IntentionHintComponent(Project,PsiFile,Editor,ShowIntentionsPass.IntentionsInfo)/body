{
  ApplicationManager.getApplication().assertIsDispatchThread();
  myFile=file;
  myEditor=editor;
  setLayout(new BorderLayout());
  setOpaque(false);
  boolean showRefactoringsBulb=ContainerUtil.exists(intentions.inspectionFixesToShow,new Condition<HighlightInfo.IntentionActionDescriptor>(){
    @Override public boolean value(    HighlightInfo.IntentionActionDescriptor descriptor){
      return descriptor.getAction() instanceof BaseRefactoringIntentionAction;
    }
  }
);
  boolean showFix=!showRefactoringsBulb && ContainerUtil.exists(intentions.errorFixesToShow,new Condition<HighlightInfo.IntentionActionDescriptor>(){
    @Override public boolean value(    HighlightInfo.IntentionActionDescriptor descriptor){
      return IntentionManagerSettings.getInstance().isShowLightBulb(descriptor.getAction());
    }
  }
);
  Icon smartTagIcon=showRefactoringsBulb ? AllIcons.Actions.RefactoringBulb : showFix ? AllIcons.Actions.QuickfixBulb : AllIcons.Actions.IntentionBulb;
  myHighlightedIcon=new RowIcon(2);
  myHighlightedIcon.setIcon(smartTagIcon,0);
  myHighlightedIcon.setIcon(AllIcons.General.ArrowDown,1);
  myInactiveIcon=new RowIcon(2);
  myInactiveIcon.setIcon(smartTagIcon,0);
  myInactiveIcon.setIcon(ourInactiveArrowIcon,1);
  myIconLabel=new JLabel(myInactiveIcon);
  myIconLabel.setOpaque(false);
  add(myIconLabel,BorderLayout.CENTER);
  setBorder(editor.isOneLineMode() ? INACTIVE_BORDER_SMALL : INACTIVE_BORDER);
  myIconLabel.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    @NotNull MouseEvent e){
      if (!e.isPopupTrigger() && e.getButton() == MouseEvent.BUTTON1) {
        showPopup(true);
      }
    }
    @Override public void mouseEntered(    @NotNull MouseEvent e){
      onMouseEnter(editor.isOneLineMode());
    }
    @Override public void mouseExited(    @NotNull MouseEvent e){
      onMouseExit(editor.isOneLineMode());
    }
  }
);
  myComponentHint=new MyComponentHint(this);
  ListPopupStep step=new IntentionListStep(this,intentions,myEditor,myFile,project);
  recreateMyPopup(step);
  EditorFactory.getInstance().addEditorFactoryListener(new EditorFactoryAdapter(){
    @Override public void editorReleased(    @NotNull EditorFactoryEvent event){
      if (event.getEditor() == myEditor) {
        hide();
      }
    }
  }
,this);
}
