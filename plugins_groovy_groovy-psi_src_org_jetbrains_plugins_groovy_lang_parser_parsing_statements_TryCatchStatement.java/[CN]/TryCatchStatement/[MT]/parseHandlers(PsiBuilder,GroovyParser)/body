{
  PsiBuilder.Marker catchMarker=builder.mark();
  ParserUtils.getToken(builder,GroovyTokenTypes.kCATCH);
  if (!ParserUtils.getToken(builder,GroovyTokenTypes.mLPAREN,GroovyBundle.message("lparen.expected"))) {
    catchMarker.done(GroovyElementTypes.CATCH_CLAUSE);
    return;
  }
  if (!ParameterDeclaration.parseCatchParameter(builder,parser)) {
    builder.error(GroovyBundle.message("param.expected"));
  }
  if (!ParserUtils.getToken(builder,GroovyTokenTypes.mRPAREN,GroovyBundle.message("rparen.expected"))) {
    catchMarker.done(GroovyElementTypes.CATCH_CLAUSE);
    return;
  }
  PsiBuilder.Marker warn=builder.mark();
  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  if (!GroovyTokenTypes.mLCURLY.equals(builder.getTokenType()) || !OpenOrClosableBlock.parseOpenBlock(builder,parser)) {
    warn.rollbackTo();
    builder.error(GroovyBundle.message("lcurly.expected"));
  }
 else {
    warn.drop();
  }
  catchMarker.done(GroovyElementTypes.CATCH_CLAUSE);
  if (builder.getTokenType() == GroovyTokenTypes.kCATCH || ParserUtils.lookAhead(builder,GroovyTokenTypes.mNLS,GroovyTokenTypes.kCATCH)) {
    ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
    parseHandlers(builder,parser);
  }
}
