{
  if (type1.isSuper() && type2.isSuper())   return false;
  if (type1.isExtends() && type2.isExtends()) {
    final PsiType extendsBound1=type1.getExtendsBound();
    final PsiType extendsBound2=type2.getExtendsBound();
    if (extendsBound1 instanceof PsiArrayType && proveArrayTypeDistinct((PsiArrayType)extendsBound1,extendsBound2) || extendsBound2 instanceof PsiArrayType && proveArrayTypeDistinct((PsiArrayType)extendsBound2,extendsBound1))     return true;
    final PsiClass boundClass1=PsiUtil.resolveClassInType(extendsBound1);
    final PsiClass boundClass2=PsiUtil.resolveClassInType(extendsBound2);
    if (boundClass1 != null && boundClass2 != null) {
      if (rejectInconsistentRaw && level > 0 && extendsBound1 instanceof PsiClassType && extendsBound2 instanceof PsiClassType && (((PsiClassType)extendsBound1).isRaw() ^ ((PsiClassType)extendsBound2).isRaw()))       return true;
      return proveExtendsBoundsDistinct(type1,type2,boundClass1,boundClass2);
    }
    return provablyDistinct(extendsBound1,extendsBound2,1);
  }
  if (type2.isExtends())   return provablyDistinct(type2,type1,rejectInconsistentRaw,level);
  if (type1.isExtends() && !type2.isBounded() && level > 1)   return PsiUtil.resolveClassInType(type1.getExtendsBound()) instanceof PsiTypeParameter;
  if (type1.isExtends() && type2.isSuper()) {
    final PsiType extendsBound=type1.getExtendsBound();
    final PsiType superBound=type2.getSuperBound();
    if (extendsBound instanceof PsiArrayType && proveArrayTypeDistinct((PsiArrayType)extendsBound,superBound) || superBound instanceof PsiArrayType && proveArrayTypeDistinct((PsiArrayType)superBound,extendsBound))     return true;
    final PsiClass extendsBoundClass=PsiUtil.resolveClassInType(extendsBound);
    final PsiClass superBoundClass=PsiUtil.resolveClassInType(superBound);
    if (extendsBoundClass != null && superBoundClass != null) {
      if (extendsBoundClass instanceof PsiTypeParameter) {
        return try2ProveTypeParameterDistinct(type2,extendsBoundClass);
      }
      if (superBoundClass instanceof PsiTypeParameter)       return false;
      return !InheritanceUtil.isInheritorOrSelf(superBoundClass,extendsBoundClass,true);
    }
    return provablyDistinct(extendsBound,superBound);
  }
  if (!type1.isBounded() || !type2.isBounded()) {
    return false;
  }
  return !type1.equals(type2);
}
