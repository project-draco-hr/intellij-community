{
  initComponent();
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    final ExecutorService myExecutorService=Executors.newSingleThreadExecutor();
    @Override public void run(){
      final PyDebugValue value=getDebugValue();
      PyDebugValue parent=value.getParent();
      final PyDebugValue slicedValue=new PyDebugValue(slice,value.getType(),value.getValue(),value.isContainer(),value.isErrorOnEval(),parent,value.getFrameAccessor());
      final String format=getFormat().isEmpty() ? "%" : getFormat();
      final ListenableFutureTask<ArrayChunk> task=ListenableFutureTask.create(new Callable<ArrayChunk>(){
        @Override public ArrayChunk call() throws Exception {
          return value.getFrameAccessor().getArrayItems(slicedValue,0,0,-1,-1,format);
        }
      }
);
      task.addListener(new Runnable(){
        @Override public void run(){
          if (task.isDone()) {
            try {
              initUi(task.get(),inPlace);
            }
 catch (            Exception e) {
              showError(e.getMessage());
            }
          }
        }
      }
,myExecutorService);
      myExecutorService.execute(task);
    }
  }
);
}
