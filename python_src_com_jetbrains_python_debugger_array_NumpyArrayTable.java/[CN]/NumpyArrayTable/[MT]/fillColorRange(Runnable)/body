{
  Consumer<PyDebugValue> callback=new Consumer<PyDebugValue>(){
    @Override public void consume(    @NotNull PyDebugValue result){
      String rawValue=result.getValue();
      double min;
      double max;
      String minValue=rawValue.substring(1,rawValue.indexOf(","));
      String maxValue=rawValue.substring(rawValue.indexOf(", ") + 2,rawValue.length() - 1);
      if ("c".equals(myDtypeKind)) {
        min=0;
        max=1;
        myTableCellRenderer.setComplexMin(minValue);
        myTableCellRenderer.setComplexMax(maxValue);
      }
 else       if ("b".equals(myDtypeKind)) {
        min=minValue.equals("True") ? 1 : 0;
        max=maxValue.equals("True") ? 1 : 0;
      }
 else {
        min=Double.parseDouble(minValue);
        max=Double.parseDouble(maxValue);
      }
      myTableCellRenderer.setMin(min);
      myTableCellRenderer.setMax(max);
      returnToMain.run();
    }
  }
;
  if (getMaxRow(myShape) * getMaxColumn(myShape) > HUGE_ARRAY_SIZE) {
    disableColor();
    returnToMain.run();
  }
  String evalTypeCommand="[" + getNodeName() + ".min(), "+ getNodeName()+ ".max()]";
  try {
    PyDebugValue value=getEvaluator().evaluate(evalTypeCommand,false,false);
    callback.consume(value);
  }
 catch (  PyDebuggerException e) {
    showError(e.getMessage());
  }
}
