{
  final PyTargetExpression firstTarget=PsiTreeUtil.findChildOfType(targetExpr,PyTargetExpression.class,false);
  if (firstTarget == null || firstTarget.getTypeComment() != typeComment) {
    return null;
  }
  final String annotation=PyTypingTypeProvider.getTypeCommentValue(typeComment.getText());
  if (annotation != null) {
    if (targetExpr instanceof PyTargetExpression) {
      return ImmutableMap.of((PyTargetExpression)targetExpr,annotation);
    }
    final PyElementGenerator generator=PyElementGenerator.getInstance(targetExpr.getProject());
    final PyExpression parsed=generator.createExpressionFromText(LanguageLevel.PYTHON36,annotation);
    if (parsed != null) {
      return mapTargetsToAnnotations(targetExpr,parsed);
    }
  }
  return null;
}
