{
  final PyExpression targetsNoParen=PyPsiUtils.flattenParens(targetExpr);
  final PyExpression typesNoParen=PyPsiUtils.flattenParens(typeExpr);
  if (targetsNoParen == null || typesNoParen == null) {
    return null;
  }
  if (targetsNoParen instanceof PySequenceExpression && typesNoParen instanceof PySequenceExpression) {
    final Ref<Map<PyTargetExpression,String>> result=new Ref<>(new LinkedHashMap<>());
    mapTargetsToExpressions((PySequenceExpression)targetsNoParen,(PySequenceExpression)typesNoParen,result);
    return result.get();
  }
 else   if (targetsNoParen instanceof PyTargetExpression && !(typesNoParen instanceof PySequenceExpression)) {
    return ImmutableMap.of((PyTargetExpression)targetsNoParen,typesNoParen.getText());
  }
  return null;
}
