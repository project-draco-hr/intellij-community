{
  if (getTypeElementGroovy() != null)   return null;
  final TextRange range=getRangeForReference();
  if (range == null)   return null;
  final GrVariable[] variables=getVariables();
  if (variables.length == 0)   return null;
  final GrVariable resolved=variables[0];
  final PsiType inferredType=resolved.getTypeGroovy();
  if (inferredType == null)   return null;
  if (inferredType instanceof PsiClassType) {
    return new PsiReferenceBase<GrVariableDeclaration>(this,range,true){
      @Nullable @Override public PsiElement resolve(){
        return ((PsiClassType)inferredType).resolve();
      }
      @NotNull @Override public Object[] getVariants(){
        return EMPTY_ARRAY;
      }
      @Override public PsiElement bindToElement(      @NotNull PsiElement element) throws IncorrectOperationException {
        return getElement();
      }
    }
;
  }
 else {
    return new PsiReferenceBase<GrVariableDeclaration>(this,range,true){
      @Nullable @Override public PsiElement resolve(){
        return resolved;
      }
      @NotNull @Override public Object[] getVariants(){
        return EMPTY_ARRAY;
      }
      @Override public PsiElement bindToElement(      @NotNull PsiElement element) throws IncorrectOperationException {
        return getElement();
      }
    }
;
  }
}
