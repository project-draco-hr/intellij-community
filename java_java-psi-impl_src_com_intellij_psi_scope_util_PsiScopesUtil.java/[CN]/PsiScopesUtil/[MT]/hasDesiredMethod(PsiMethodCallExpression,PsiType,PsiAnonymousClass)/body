{
  if (anonymousClass != null && type.equals(anonymousClass.getBaseClassType())) {
    final PsiMethod[] refMethods=anonymousClass.findMethodsByName(methodCall.getMethodExpression().getReferenceName(),false);
    if (refMethods.length > 0) {
      final PsiClass baseClass=PsiUtil.resolveClassInType(type);
      if (baseClass != null && !hasCovariantOverridingOrNotPublic(baseClass,refMethods)) {
        for (        PsiMethod method : refMethods) {
          if (method.findSuperMethods(baseClass).length > 0) {
            return true;
          }
        }
      }
    }
  }
  return false;
}
