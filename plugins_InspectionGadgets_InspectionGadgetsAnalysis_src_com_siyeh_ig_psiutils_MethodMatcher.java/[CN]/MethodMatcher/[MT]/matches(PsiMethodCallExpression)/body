{
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (methodName == null) {
    return false;
  }
  PsiClass aClass=null;
  for (int i=0, size=myMethodNamePatterns.size(); i < size; i++) {
    final Pattern pattern=getPattern(i);
    if (pattern == null || !pattern.matcher(methodName).matches()) {
      continue;
    }
    if (aClass == null) {
      final PsiMethod method=methodCallExpression.resolveMethod();
      if (method == null || method.isConstructor()) {
        return false;
      }
      aClass=method.getContainingClass();
    }
    final String className=myClassNames.get(i);
    if (InheritanceUtil.isInheritor(aClass,className)) {
      return true;
    }
  }
  return false;
}
