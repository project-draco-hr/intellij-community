{
  boolean hasDoc=false;
  for (  P parameter : mandatoryParameters) {
    if (parameter.description() != null) {
      hasDoc=true;
      break;
    }
  }
  if (hasDoc) {
    out.append("/**").newLine();
    for (    P parameter : mandatoryParameters) {
      if (parameter.description() != null) {
        out.append(" * @param " + parameter.name() + ' '+ parameter.description()).newLine();
      }
    }
    out.append(" */").newLine();
  }
  out.append("public " + getShortClassName() + '(');
  if (mandatoryParameterTypes == null) {
    mandatoryParameterTypes=new BoxableType[mandatoryParameters.size()];
  }
  for (int i=0, length=mandatoryParameterTypes.length; i < length; i++) {
    if (mandatoryParameterTypes[i] == null) {
      P parameter=mandatoryParameters.get(i);
      mandatoryParameterTypes[i]=new OutputMemberScope(parameter.name()).resolveType(parameter).getJavaType();
    }
  }
  boolean needComa=false;
  for (int i=0, size=mandatoryParameters.size(); i < size; i++) {
    P parameter=mandatoryParameters.get(i);
    if (needComa) {
      out.comma();
    }
    out.append(mandatoryParameterTypes[i].getShortText(getClassContextNamespace()));
    out.space().append(parameter.name());
    needComa=true;
  }
  out.append(")").openBlock(false);
  for (int i=0, size=mandatoryParameters.size(); i < size; i++) {
    P parameter=mandatoryParameters.get(i);
    out.newLine();
    appendWriteValueInvocation(out,parameter,parameter.name(),mandatoryParameterTypes[i]);
  }
  out.closeBlock();
}
