{
  if (parameters == null) {
    return;
  }
  List<P> mandatoryParameters=new ArrayList<>();
  List<P> optionalParameters=new ArrayList<>();
  for (  P parameter : parameters) {
    if (parameter.optional()) {
      optionalParameters.add(parameter);
    }
 else {
      mandatoryParameters.add(parameter);
    }
  }
  if (!mandatoryParameters.isEmpty()) {
    generateConstructor(out,mandatoryParameters,null);
    if (mandatoryParameters.size() == 1) {
      P parameter=mandatoryParameters.get(0);
      QualifiedTypeData typeData=new OutputMemberScope(getName(parameter)).resolveType(parameter);
      if (typeData.getType().getFullText().equals("int[]")) {
        BoxableType[] types=new BoxableType[mandatoryParameters.size()];
        types[0]=new ListType(BoxableType.INT){
          @Override String getShortText(          NamePath contextNamespace){
            return getFullText();
          }
          @Override String getFullText(){
            return "gnu.trove.TIntArrayList";
          }
          @Override String getWriteMethodName(){
            return "writeIntList";
          }
        }
;
        out.newLine().newLine();
        generateConstructor(out,mandatoryParameters,types);
        types[0]=new ListType(BoxableType.INT){
          @Override String getShortText(          NamePath contextNamespace){
            return getFullText();
          }
          @Override String getFullText(){
            return "int";
          }
          @Override String getWriteMethodName(){
            return "writeSingletonIntArray";
          }
        }
;
        out.newLine().newLine();
        generateConstructor(out,mandatoryParameters,types);
      }
    }
  }
  for (  P parameter : parameters) {
    if (parameter.getEnum() != null) {
      out.newLine().newLine();
      appendEnumClass(out,parameter.description(),parameter.getEnum(),Generator.capitalizeFirstChar((parameter.name())));
    }
  }
  for (  P parameter : optionalParameters) {
    out.newLine().newLine();
    if (parameter.description() != null) {
      out.append("/**").newLine().append(" * @param v ").append(parameter.description()).newLine().append(" */").newLine();
    }
    CharSequence type=new OutputMemberScope(parameter.name()).resolveType(parameter).getType().getShortText(getClassContextNamespace());
    if (type.equals(JsonReaderEx.class.getCanonicalName())) {
      type="String";
    }
    out.append("public ").append(getShortClassName());
    out.space().append(parameter.name()).append("(").append(type);
    out.space().append("v").append(")").openBlock();
    appendWriteValueInvocation(out,parameter,"v",null);
    out.newLine().append("return this;");
    out.closeBlock();
  }
}
