{
  final PyElementGenerator elementGenerator=PyElementGenerator.getInstance(expression.getProject());
  if (expression instanceof PyBoolLiteralExpression) {
    final String value=((PyBoolLiteralExpression)expression).getValue() ? PyNames.FALSE : PyNames.TRUE;
    return elementGenerator.createExpressionFromText(LanguageLevel.forElement(expression),value);
  }
  if (expression instanceof PyReferenceExpression && (PyNames.FALSE.equals(expression.getText()) || PyNames.TRUE.equals(expression.getText()))) {
    final String value=PyNames.TRUE.equals(expression.getText()) ? PyNames.FALSE : PyNames.TRUE;
    return elementGenerator.createExpressionFromText(LanguageLevel.forElement(expression),value);
  }
 else   if (expression instanceof PyPrefixExpression) {
    if (((PyPrefixExpression)expression).getOperator() == PyTokenTypes.NOT_KEYWORD) {
      final PyExpression operand=((PyPrefixExpression)expression).getOperand();
      if (operand != null)       return elementGenerator.createExpressionFromText(LanguageLevel.forElement(expression),operand.getText());
    }
  }
  return elementGenerator.createExpressionFromText(LanguageLevel.forElement(expression),"not " + expression.getText());
}
