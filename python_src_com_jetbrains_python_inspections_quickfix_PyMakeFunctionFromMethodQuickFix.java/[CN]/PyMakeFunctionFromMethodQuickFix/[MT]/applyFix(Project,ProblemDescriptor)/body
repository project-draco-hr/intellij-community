{
  final PsiElement element=descriptor.getPsiElement();
  final PyFunction problemFunction=PsiTreeUtil.getParentOfType(element,PyFunction.class);
  if (problemFunction == null)   return;
  final PyClass containingClass=problemFunction.getContainingClass();
  if (containingClass == null)   return;
  final List<UsageInfo> usages=PyRefactoringUtil.findUsages(problemFunction,false);
  PyUtil.deleteParameter(problemFunction,0);
  PsiElement copy=problemFunction.copy();
  PyUtil.deleteElementSafely(problemFunction);
  final PsiFile file=containingClass.getContainingFile();
  PyClass aClass=PsiTreeUtil.getTopmostParentOfType(containingClass,PyClass.class);
  if (aClass == null)   aClass=containingClass;
  copy=file.addBefore(copy,aClass);
  for (  UsageInfo usage : usages) {
    final PsiElement usageElement=usage.getElement();
    if (usageElement instanceof PyReferenceExpression) {
      final PsiFile usageFile=usageElement.getContainingFile();
      updateUsage(copy,(PyReferenceExpression)usageElement,usageFile,!usageFile.equals(file));
    }
  }
}
