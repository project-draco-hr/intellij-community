{
  final PsiElement element=descriptor.getPsiElement();
  final PyFunction problemFunction=PsiTreeUtil.getParentOfType(element,PyFunction.class);
  if (problemFunction == null)   return;
  final PyClass containingClass=problemFunction.getContainingClass();
  if (containingClass == null)   return;
  final List<UsageInfo> usages=PyRefactoringUtil.findUsages(problemFunction,false);
  PyUtil.deleteParameter(problemFunction,0);
  final PsiElement copy=problemFunction.copy();
  final PyStatementList classStatementList=containingClass.getStatementList();
  classStatementList.deleteChildRange(problemFunction,problemFunction);
  if (classStatementList.getStatements().length < 1) {
    classStatementList.add(PyElementGenerator.getInstance(project).createPassStatement());
  }
  final PsiFile file=containingClass.getContainingFile();
  file.addAfter(copy,containingClass);
  for (  UsageInfo usage : usages) {
    final PsiElement usageElement=usage.getElement();
    if (usageElement instanceof PyReferenceExpression) {
      PyUtil.removeQualifier((PyReferenceExpression)usageElement);
    }
  }
}
