{
  CreateBranchOrTagDialog dialog=new CreateBranchOrTagDialog(project,true,new File(file.getPath()));
  if (dialog.showAndGet()) {
    final String dstURL=dialog.getToURL();
    final SVNRevision revision=dialog.getRevision();
    final String comment=dialog.getComment();
    final Ref<Exception> exception=new Ref<>();
    final boolean isSrcFile=dialog.isCopyFromWorkingCopy();
    final File srcFile=new File(dialog.getCopyFromPath());
    final SVNURL srcUrl;
    final SVNURL dstSvnUrl;
    final SVNURL parentUrl;
    try {
      srcUrl=SVNURL.parseURIEncoded(dialog.getCopyFromUrl());
      dstSvnUrl=SVNURL.parseURIEncoded(dstURL);
      parentUrl=dstSvnUrl.removePathTail();
    }
 catch (    SVNException e) {
      throw new SvnBindException(e);
    }
    if (!dirExists(activeVcs,parentUrl)) {
      int rc=Messages.showYesNoDialog(project,"The repository path '" + parentUrl + "' does not exist. Would you like to create it?","Branch or Tag",Messages.getQuestionIcon());
      if (rc == Messages.NO) {
        return;
      }
    }
    Runnable copyCommand=new Runnable(){
      public void run(){
        try {
          ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
          CommitEventHandler handler=null;
          if (progress != null) {
            progress.setText(SvnBundle.message("progress.text.copy.to",dstURL));
            handler=new IdeaCommitHandler(progress);
          }
          SvnTarget source=isSrcFile ? SvnTarget.fromFile(srcFile,revision) : SvnTarget.fromURL(srcUrl,revision);
          long newRevision=activeVcs.getFactory(source).createCopyMoveClient().copy(source,SvnTarget.fromURL(dstSvnUrl),revision,true,false,comment,handler);
          updateStatusBar(newRevision,project);
        }
 catch (        Exception e) {
          exception.set(e);
        }
      }
    }
;
    ProgressManager.getInstance().runProcessWithProgressSynchronously(copyCommand,SvnBundle.message("progress.title.copy"),false,project);
    if (!exception.isNull()) {
      throw new VcsException(exception.get());
    }
    if (dialog.isCopyFromWorkingCopy() && dialog.isSwitchOnCreate()) {
      SingleRootSwitcher switcher=new SingleRootSwitcher(project,VcsUtil.getFilePath(srcFile,srcFile.isDirectory()),dstSvnUrl);
      AutoSvnUpdater.run(switcher,SvnBundle.message("action.name.switch"));
    }
    ;
  }
}
