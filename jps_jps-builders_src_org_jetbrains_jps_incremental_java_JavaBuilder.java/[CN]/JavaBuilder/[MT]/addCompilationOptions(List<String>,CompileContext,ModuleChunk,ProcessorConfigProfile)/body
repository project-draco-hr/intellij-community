{
  if (!isEncodingSet(options)) {
    final CompilerEncodingConfiguration config=context.getProjectDescriptor().getEncodingConfiguration();
    final String encoding=config.getPreferredModuleChunkEncoding(chunk);
    if (config.getAllModuleChunkEncodings(chunk).size() > 1) {
      final StringBuilder msgBuilder=new StringBuilder();
      msgBuilder.append("Multiple encodings set for module chunk ").append(chunk.getName());
      if (encoding != null) {
        msgBuilder.append("\n\"").append(encoding).append("\" will be used by compiler");
      }
      context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.INFO,msgBuilder.toString()));
    }
    if (!StringUtil.isEmpty(encoding)) {
      options.add("-encoding");
      options.add(encoding);
    }
  }
  final String langLevel=getLanguageLevel(chunk.getModules().iterator().next());
  if (!StringUtil.isEmpty(langLevel)) {
    options.add("-source");
    options.add(langLevel);
  }
  final JpsJavaCompilerConfiguration compilerConfiguration=JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(context.getProjectDescriptor().getProject());
  String bytecodeTarget=null;
  for (  JpsModule module : chunk.getModules()) {
    final String moduleTarget=compilerConfiguration.getByteCodeTargetLevel(module.getName());
    if (moduleTarget == null) {
      continue;
    }
    if (bytecodeTarget == null) {
      bytecodeTarget=moduleTarget;
    }
 else {
      if (moduleTarget.compareTo(bytecodeTarget) < 0) {
        bytecodeTarget=moduleTarget;
      }
    }
  }
  if (bytecodeTarget == null) {
    bytecodeTarget=USER_DEFINED_BYTECODE_TARGET.get(context);
  }
  final int compilerSdkVersion=getCompilerSdkVersion(context);
  final int chunkSdkVersion=getChunkSdkVersion(chunk);
  if (bytecodeTarget != null) {
    options.add("-target");
    if (chunkSdkVersion > 0 && compilerSdkVersion > chunkSdkVersion) {
      final int userSpecifiedTargetVersion=convertToNumber(bytecodeTarget);
      if (userSpecifiedTargetVersion > 0 && userSpecifiedTargetVersion <= compilerSdkVersion) {
        if (userSpecifiedTargetVersion > chunkSdkVersion) {
          bytecodeTarget="1." + chunkSdkVersion;
        }
      }
    }
    options.add(bytecodeTarget);
  }
 else {
    if (chunkSdkVersion > 0 && compilerSdkVersion > chunkSdkVersion) {
      options.add("-target");
      options.add("1." + chunkSdkVersion);
    }
  }
  if (profile != null && profile.isEnabled()) {
    if (!profile.isObtainProcessorsFromClasspath()) {
      final String processorsPath=profile.getProcessorPath();
      options.add("-processorpath");
      options.add(processorsPath == null ? "" : FileUtil.toSystemDependentName(processorsPath.trim()));
    }
    final Set<String> processors=profile.getProcessors();
    if (!processors.isEmpty()) {
      options.add("-processor");
      options.add(StringUtil.join(processors,","));
    }
    for (    Map.Entry<String,String> optionEntry : profile.getProcessorOptions().entrySet()) {
      options.add("-A" + optionEntry.getKey() + "="+ optionEntry.getValue());
    }
    final File srcOutput=ProjectPaths.getAnnotationProcessorGeneratedSourcesOutputDir(chunk.getModules().iterator().next(),chunk.containsTests(),profile);
    if (srcOutput != null) {
      srcOutput.mkdirs();
      options.add("-s");
      options.add(srcOutput.getPath());
    }
  }
 else {
    options.add("-proc:none");
  }
}
