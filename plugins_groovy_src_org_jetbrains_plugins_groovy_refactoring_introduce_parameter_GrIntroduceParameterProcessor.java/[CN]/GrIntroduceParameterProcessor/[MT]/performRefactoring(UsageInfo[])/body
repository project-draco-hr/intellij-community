{
  GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(myProject);
  PsiType initializerType=mySettings.getSelectedType();
  IntroduceParameterUtil.processUsages(usages,this);
  final GrMethod toReplaceIn=(GrMethod)mySettings.getToReplaceIn();
  final PsiMethod toSearchFor=(PsiMethod)mySettings.getToSearchFor();
  final boolean methodsToProcessAreDifferent=toReplaceIn != toSearchFor;
  if (mySettings.generateDelegate()) {
    GroovyIntroduceParameterUtil.generateDelegate(toReplaceIn,myParameterInitializer,myProject);
    if (methodsToProcessAreDifferent) {
      final GrMethod method=GroovyIntroduceParameterUtil.generateDelegate(toSearchFor,myParameterInitializer,myProject);
      final PsiClass containingClass=method.getContainingClass();
      if (containingClass != null && containingClass.isInterface()) {
        final GrOpenBlock block=method.getBlock();
        if (block != null) {
          block.delete();
        }
      }
    }
  }
  LOG.assertTrue(initializerType == null || initializerType.isValid());
  final FieldConflictsResolver fieldConflictsResolver=new FieldConflictsResolver(mySettings.getName(),toReplaceIn.getBlock());
  IntroduceParameterUtil.changeMethodSignatureAndResolveFieldConflicts(new UsageInfo(toReplaceIn),usages,this);
  if (methodsToProcessAreDifferent) {
    IntroduceParameterUtil.changeMethodSignatureAndResolveFieldConflicts(new UsageInfo(toSearchFor),usages,this);
  }
  for (  UsageInfo usage : usages) {
    if (usage instanceof ChangedMethodCallInfo) {
      PsiElement element=usage.getElement();
      GroovyIntroduceParameterUtil.processChangedMethodCall(element,mySettings,myProject);
    }
 else     if (usage instanceof InternalUsageInfo) {
      PsiElement element=usage.getElement();
      if (element == null)       continue;
      GrExpression newExpr=factory.createExpressionFromText(mySettings.getName());
      if (element instanceof GrExpression) {
        ((GrExpression)element).replaceWithExpression(newExpr,true);
      }
 else {
        element.replace(newExpr);
      }
    }
  }
  final StringPartInfo stringPartInfo=mySettings.getStringPartInfo();
  if (stringPartInfo != null) {
    final GrExpression expr=GrIntroduceHandlerBase.processLiteral(mySettings.getName(),mySettings.getStringPartInfo(),mySettings.getProject());
    final Editor editor=PsiUtilBase.findEditor(expr);
    if (editor != null) {
      editor.getSelectionModel().removeSelection();
      editor.getCaretModel().moveToOffset(expr.getTextRange().getEndOffset());
    }
  }
  final GrVariable var=mySettings.getVar();
  if (var != null && mySettings.removeLocalVariable()) {
    var.delete();
  }
  fieldConflictsResolver.fix();
}
