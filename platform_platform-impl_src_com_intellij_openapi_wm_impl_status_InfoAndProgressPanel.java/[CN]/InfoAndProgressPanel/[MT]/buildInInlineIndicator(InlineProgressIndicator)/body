{
  removeAll();
  setLayout(new InlineLayout());
  add(myRefreshAndInfoPanel);
  final JPanel inlinePanel=new JPanel(new BorderLayout());
  inline.getComponent().setBorder(new EmptyBorder(1,0,0,2));
  final JComponent inlineComponent=inline.getComponent();
  inlineComponent.setOpaque(false);
  inlinePanel.add(inlineComponent,BorderLayout.CENTER);
  inlinePanel.add(myProgressIcon,BorderLayout.WEST);
  inline.updateProgressNow();
  inlinePanel.setOpaque(false);
  add(inlinePanel);
  myRefreshAndInfoPanel.revalidate();
  myRefreshAndInfoPanel.repaint();
  UISettings uiSettings=UISettings.getInstance();
  if (uiSettings.PRESENTATION_MODE || !uiSettings.SHOW_STATUS_BAR && Registry.is("ide.show.progress.without.status.bar")) {
    final JRootPane pane=myInfoPanel.getRootPane();
    final RelativePoint point=new RelativePoint(pane,new Point(pane.getWidth() - 250,60));
    final PresentationModeProgressPanel panel=new PresentationModeProgressPanel(inline);
    final MyInlineProgressIndicator delegate=new MyInlineProgressIndicator(true,inline.getInfo(),inline){
      @Override protected void updateProgress(){
        super.updateProgress();
        panel.update();
      }
    }
;
    Disposer.register(inline,delegate);
    JBPopupFactory.getInstance().createBalloonBuilder(panel.getRootPanel()).setFadeoutTime(0).setFillColor(Gray.TRANSPARENT).setShowCallout(false).setBorderColor(Gray.TRANSPARENT).setBorderInsets(new Insets(0,0,0,0)).setAnimationCycle(0).setCloseButtonEnabled(false).setHideOnClickOutside(false).setDisposable(inline).setHideOnFrameResize(false).setHideOnKeyOutside(false).setBlockClicksThroughBalloon(true).setHideOnAction(false).createBalloon().show(new PositionTracker<Balloon>(pane){
      @Override public RelativePoint recalculateLocation(      Balloon object){
        final EditorComponentImpl editorComponent=UIUtil.findComponentOfType(pane,EditorComponentImpl.class);
        if (editorComponent != null) {
          return new RelativePoint(editorComponent.getParent().getParent(),new Point(editorComponent.getParent().getParent().getWidth() - 150,editorComponent.getParent().getParent().getHeight() - 70));
        }
        return point;
      }
    }
,Balloon.Position.above);
  }
}
