{
  myUpdater.submit(new Runnable(){
    @Override public void run(){
      if (myProject.isDisposed())       return;
      final Application app=ApplicationManager.getApplication();
      Runnable action=new Runnable(){
        public void run(){
          if (!initializedExternalSystem.contains(externalSystemId)) {
            app.runWriteAction(new Runnable(){
              public void run(){
                if (myProject.isDisposed())                 return;
                ExternalSystemUtil.ensureToolWindowContentInitialized(myProject,externalSystemId);
                initializedExternalSystem.add(externalSystemId);
              }
            }
);
          }
          if (myProject.isDisposed())           return;
          NotificationGroup group;
          if (notificationData.getBalloonGroup() == null) {
            ExternalProjectsView externalProjectsView=ExternalProjectsManager.getInstance(myProject).getExternalProjectsView(externalSystemId);
            group=externalProjectsView instanceof ExternalProjectsViewImpl ? ((ExternalProjectsViewImpl)externalProjectsView).getNotificationGroup() : null;
          }
 else {
            final NotificationGroup registeredGroup=NotificationGroup.findRegisteredGroup(notificationData.getBalloonGroup());
            group=registeredGroup != null ? registeredGroup : NotificationGroup.balloonGroup(notificationData.getBalloonGroup());
          }
          if (group == null)           return;
          final Notification notification=group.createNotification(notificationData.getTitle(),notificationData.getMessage(),notificationData.getNotificationCategory().getNotificationType(),notificationData.getListener());
          myNotifications.add(notification);
          if (notificationData.isBalloonNotification()) {
            applyNotification(notification);
          }
 else {
            addMessage(notification,externalSystemId,notificationData);
          }
        }
      }
;
      app.invokeLater(action,ModalityState.defaultModalityState(),myProject.getDisposed());
    }
  }
);
}
