{
  final PsiElement paramParent=param.getParent();
  if (paramParent instanceof PsiParameterList) {
    final int parameterIndex=((PsiParameterList)paramParent).getParameterIndex(param);
    if (parameterIndex > -1) {
      final PsiLambdaExpression lambdaExpression=PsiTreeUtil.getParentOfType(param,PsiLambdaExpression.class);
      if (lambdaExpression != null) {
        PsiType type=FunctionalInterfaceParameterizationUtil.getGroundTargetType(LambdaUtil.getFunctionalInterfaceType(lambdaExpression,true),lambdaExpression);
        if (type instanceof PsiIntersectionType) {
          final PsiType[] conjuncts=((PsiIntersectionType)type).getConjuncts();
          for (          PsiType conjunct : conjuncts) {
            final PsiType lambdaParameterFromType=getLambdaParameterFromType(parameterIndex,lambdaExpression,conjunct);
            if (lambdaParameterFromType != null)             return lambdaParameterFromType;
          }
        }
 else {
          final PsiType lambdaParameterFromType=getLambdaParameterFromType(parameterIndex,lambdaExpression,type);
          if (lambdaParameterFromType != null) {
            return lambdaParameterFromType;
          }
        }
      }
    }
  }
  return new PsiLambdaParameterType(param);
}
