{
  PsiParameter psiParameter=FieldFromParameterUtils.findParameterAtCursor(file,editor);
  if (!FileModificationService.getInstance().prepareFileForWrite(file))   return;
  final PsiMethod method=psiParameter != null ? (PsiMethod)psiParameter.getDeclarationScope() : PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PsiMethod.class);
  LOG.assertTrue(method != null);
  final HashSet<String> usedNames=new HashSet<String>();
  final Iterable<PsiParameter> parameters=selectParameters(project,method,copyUnboundedParamsAndClearOriginal(method),isInteractive);
  final MultiMap<PsiType,PsiParameter> types=new MultiMap<PsiType,PsiParameter>();
  for (  PsiParameter parameter : parameters) {
    types.putValue(parameter.getType(),parameter);
  }
  final CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(project);
  final boolean preferLongerNames=settings.PREFER_LONGER_NAMES;
  for (  PsiParameter selected : parameters) {
    try {
      settings.PREFER_LONGER_NAMES=preferLongerNames || types.get(selected.getType()).size() > 1;
      processParameter(project,selected,usedNames);
    }
  finally {
      settings.PREFER_LONGER_NAMES=preferLongerNames;
    }
  }
}
