{
  final PsiElement element=queryParameters.getElementToSearch();
  if (!(element instanceof PyNamedParameter)) {
    return;
  }
  final ScopeOwner owner=ScopeUtil.getScopeOwner(element);
  if (!(owner instanceof PyFunction)) {
    return;
  }
  SearchScope scope=ApplicationManager.getApplication().runReadAction(new Computable<SearchScope>(){
    @Override public SearchScope compute(){
      return queryParameters.getEffectiveSearchScope();
    }
  }
);
  ReferencesSearch.search(owner,scope).forEach(new Processor<PsiReference>(){
    @Override public boolean process(    PsiReference reference){
      final PsiElement refElement=reference.getElement();
      final PyCallExpression call=PsiTreeUtil.getParentOfType(refElement,PyCallExpression.class);
      if (call != null && PsiTreeUtil.isAncestor(call.getCallee(),refElement,false)) {
        final PyArgumentList argumentList=call.getArgumentList();
        if (argumentList != null) {
          final PyKeywordArgument keywordArgument=argumentList.getKeywordArgument(((PyNamedParameter)element).getName());
          if (keywordArgument != null) {
            return consumer.process(keywordArgument.getReference());
          }
        }
      }
      return true;
    }
  }
);
}
