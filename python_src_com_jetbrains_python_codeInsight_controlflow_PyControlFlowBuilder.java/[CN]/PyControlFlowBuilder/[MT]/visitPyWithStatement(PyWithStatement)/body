{
  boolean withSelfAssertRaises=false;
  final PyWithItem[] items=node.getWithItems();
  if (items.length == 1) {
    final PyWithItem item=items[0];
    final ASTNode callNode=item.getNode().findChildByType(CALL_OR_REF_EXPR);
    if (callNode != null) {
      final PsiElement element=callNode.getPsi();
      if (element instanceof PyCallExpression) {
        final PyExpression callee=((PyCallExpression)element).getCallee();
        if (callee != null) {
          final String repr=PyUtil.getReadableRepr(callee,true);
          withSelfAssertRaises=SELF_ASSERT_RAISES.equals(repr);
        }
      }
      if (element instanceof PyReferenceExpression) {
        withSelfAssertRaises=SELF_ASSERT_RAISES.equals(element.getText());
      }
    }
  }
  super.visitPyWithStatement(node);
  if (withSelfAssertRaises) {
    myBuilder.processPending(new ControlFlowBuilder.PendingProcessor(){
      public void process(      final PsiElement pendingScope,      final Instruction instruction){
        final PsiElement element=instruction.getElement();
        if (element == null) {
          myBuilder.addPendingEdge(pendingScope,instruction);
        }
 else         if (PsiTreeUtil.getParentOfType(element,PyRaiseStatement.class) != null) {
          myBuilder.addPendingEdge(node,instruction);
        }
 else {
          myBuilder.addPendingEdge(pendingScope,instruction);
        }
      }
    }
);
  }
}
