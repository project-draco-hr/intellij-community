{
  myBuilder.startNode(node);
  final PyIfPart ifPart=node.getIfPart();
  PyExpression condition=ifPart.getCondition();
  PyTypeAssertionEvaluator assertionEvaluator=new PyTypeAssertionEvaluator();
  if (condition != null) {
    condition.accept(this);
    condition.accept(assertionEvaluator);
  }
  PyElement lastCondition=condition;
  Instruction lastBranchingPoint=getPrevInstruction(condition);
  myBuilder.prevInstruction=lastBranchingPoint;
  final PyStatementList thenStatements=ifPart.getStatementList();
  if (thenStatements != null) {
    myBuilder.startConditionalNode(thenStatements,condition,true);
    InstructionBuilder.addAssertInstructions(myBuilder,assertionEvaluator);
    thenStatements.accept(this);
    myBuilder.processPending(new ControlFlowBuilder.PendingProcessor(){
      public void process(      final PsiElement pendingScope,      final Instruction instruction){
        if (pendingScope != null && PsiTreeUtil.isAncestor(thenStatements,pendingScope,false)) {
          myBuilder.addPendingEdge(node,instruction);
        }
 else {
          myBuilder.addPendingEdge(pendingScope,instruction);
        }
      }
    }
);
    myBuilder.addPendingEdge(node,myBuilder.prevInstruction);
  }
  for (  PyIfPart part : node.getElifParts()) {
    myBuilder.prevInstruction=lastBranchingPoint;
    myBuilder.startConditionalNode(part,lastCondition,false);
    condition=part.getCondition();
    if (condition != null) {
      lastCondition=condition;
      lastBranchingPoint=getPrevInstruction(lastCondition);
      condition.accept(this);
    }
    myBuilder.prevInstruction=getPrevInstruction(lastCondition);
    myBuilder.startConditionalNode(ifPart,lastCondition,true);
    final PyStatementList statementList=part.getStatementList();
    if (statementList != null) {
      statementList.accept(this);
    }
    myBuilder.processPending(new ControlFlowBuilder.PendingProcessor(){
      public void process(      final PsiElement pendingScope,      final Instruction instruction){
        if (pendingScope != null && PsiTreeUtil.isAncestor(ifPart,pendingScope,false)) {
          myBuilder.addPendingEdge(node,instruction);
        }
 else {
          myBuilder.addPendingEdge(pendingScope,instruction);
        }
      }
    }
);
    myBuilder.addPendingEdge(node,myBuilder.prevInstruction);
  }
  final PyElsePart elseBranch=node.getElsePart();
  if (elseBranch != null) {
    myBuilder.prevInstruction=lastBranchingPoint;
    myBuilder.startConditionalNode(elseBranch,lastCondition,false);
    elseBranch.accept(this);
    myBuilder.addPendingEdge(node,myBuilder.prevInstruction);
  }
 else {
    myBuilder.addPendingEdge(node,lastBranchingPoint);
  }
}
