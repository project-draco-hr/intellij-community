{
  final Instruction instruction=new InstructionImpl(node,myInstructionNumber++);
  addNode(instruction);
  checkPending(instruction);
  final PyExpression expression=node.getExpression();
  if (expression != null) {
    expression.accept(this);
  }
  final List<Pair<PsiElement,Instruction>> pending=myPending;
  myPending=new ArrayList<Pair<PsiElement,Instruction>>();
  for (  Pair<PsiElement,Instruction> pair : pending) {
    final PsiElement pendingScope=pair.getFirst();
    if (pendingScope != null && PsiTreeUtil.isAncestor(node,pendingScope,false)) {
      final Instruction pendingInstruction=pair.getSecond();
      addPendingEdge(null,pendingInstruction);
    }
 else {
      myPending.add(pair);
    }
  }
  addPendingEdge(null,myPrevInstruction);
  flowAbrupted();
}
