{
  myBuilder.startNode(node);
  final PyTryPart tryPart=node.getTryPart();
  myBuilder.startNode(tryPart);
  tryPart.accept(this);
  final Instruction lastBlockInstruction=myBuilder.prevInstruction;
  final PyElsePart elsePart=node.getElsePart();
  if (elsePart != null) {
    myBuilder.startNode(elsePart);
    elsePart.accept(this);
    myBuilder.addPendingEdge(node,myBuilder.prevInstruction);
  }
 else {
    myBuilder.addPendingEdge(node,myBuilder.prevInstruction);
  }
  final ArrayList<Instruction> exceptInstructions=new ArrayList<Instruction>();
  final List<Pair<PsiElement,Instruction>> myPending=myBuilder.pending;
  myBuilder.pending=new ArrayList<Pair<PsiElement,Instruction>>();
  for (  PyExceptPart exceptPart : node.getExceptParts()) {
    myBuilder.prevInstruction=lastBlockInstruction;
    final Instruction exceptInstruction=new InstructionImpl(myBuilder,exceptPart);
    myBuilder.addNode(exceptInstruction);
    exceptInstructions.add(exceptInstruction);
    exceptPart.accept(this);
    myBuilder.addPendingEdge(node,myBuilder.prevInstruction);
  }
  for (  Pair<PsiElement,Instruction> pair : myPending) {
    myBuilder.addPendingEdge(pair.first,pair.second);
  }
  final PyFinallyPart finallyPart=node.getFinallyPart();
  Instruction finallyInstruction=null;
  Instruction lastFinallyInstruction=null;
  if (finallyPart != null) {
    myBuilder.flowAbrupted();
    finallyInstruction=myBuilder.startNode(finallyPart);
    finallyPart.accept(this);
    lastFinallyInstruction=myBuilder.prevInstruction;
    myBuilder.addPendingEdge(finallyPart,lastFinallyInstruction);
  }
  final Ref<Instruction> finallyRef=new Ref<Instruction>(finallyInstruction);
  final Ref<Instruction> lastFinallyRef=new Ref<Instruction>(lastFinallyInstruction);
  myBuilder.processPending(new ControlFlowBuilder.PendingProcessor(){
    public void process(    final PsiElement pendingScope,    final Instruction instruction){
      final PsiElement pendingElement=instruction.getElement();
      if (pendingElement == null) {
        myBuilder.addPendingEdge(pendingScope,instruction);
        return;
      }
      if (PsiTreeUtil.isAncestor(tryPart,pendingElement,false) && PsiTreeUtil.getParentOfType(pendingElement,PyRaiseStatement.class) != null) {
        for (        Instruction rescueInstruction : exceptInstructions) {
          myBuilder.addEdge(instruction,rescueInstruction);
        }
        myBuilder.addPendingEdge(pendingScope,instruction);
        return;
      }
      if (PsiTreeUtil.isAncestor(tryPart,pendingElement,false)) {
        for (        Instruction rescueInstruction : exceptInstructions) {
          myBuilder.addEdge(instruction,rescueInstruction);
        }
      }
      if (!finallyRef.isNull()) {
        myBuilder.addEdge(instruction,finallyRef.get());
        if (!lastFinallyRef.isNull() && PsiTreeUtil.getParentOfType(pendingElement,PyReturnStatement.class,false) != null) {
          myBuilder.addPendingEdge(null,lastFinallyRef.get());
        }
        return;
      }
      myBuilder.addPendingEdge(pendingScope,instruction);
    }
  }
);
}
