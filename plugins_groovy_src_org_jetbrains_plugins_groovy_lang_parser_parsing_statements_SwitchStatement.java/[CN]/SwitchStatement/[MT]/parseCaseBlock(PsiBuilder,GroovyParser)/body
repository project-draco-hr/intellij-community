{
  ParserUtils.getToken(builder,GroovyTokenTypes.mLCURLY);
  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  while (!ParserUtils.getToken(builder,GroovyTokenTypes.mRCURLY)) {
    if (builder.getTokenType() != GroovyTokenTypes.kCASE && builder.getTokenType() != GroovyTokenTypes.kDEFAULT) {
      builder.error("case, default or } expected");
      ParserUtils.skipCountingBraces(builder,SKIP_SET);
      if (builder.eof() || ParserUtils.getToken(builder,GroovyTokenTypes.mRCURLY)) {
        return;
      }
    }
    PsiBuilder.Marker sectionMarker=builder.mark();
    parseCaseLabel(builder,parser);
    final PsiBuilder.Marker warn=builder.mark();
    ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
    if (builder.getTokenType() == GroovyTokenTypes.mRCURLY) {
      warn.rollbackTo();
      builder.error(GroovyBundle.message("statement.expected"));
    }
 else {
      warn.drop();
      parser.parseSwitchCaseList(builder);
    }
    sectionMarker.done(GroovyElementTypes.CASE_SECTION);
    ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  }
}
