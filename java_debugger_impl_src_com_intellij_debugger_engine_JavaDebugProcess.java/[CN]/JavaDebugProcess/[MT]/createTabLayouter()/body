{
  return new XDebugTabLayouter(){
    @Override public void registerAdditionalContent(    @NotNull RunnerLayoutUi ui){
      final ThreadsPanel panel=new ThreadsPanel(myJavaSession.getProject(),getDebuggerStateManager());
      final Content threadsContent=ui.createContent(DebuggerContentInfo.THREADS_CONTENT,panel,XDebuggerBundle.message("debugger.session.tab.threads.title"),AllIcons.Debugger.Threads,null);
      Disposer.register(threadsContent,panel);
      threadsContent.setCloseable(false);
      ui.addContent(threadsContent,0,PlaceInGrid.left,true);
      ui.addListener(new ContentManagerAdapter(){
        @Override public void selectionChanged(        ContentManagerEvent event){
          if (event.getContent() == threadsContent) {
            if (threadsContent.isSelected()) {
              panel.setUpdateEnabled(true);
              if (panel.isRefreshNeeded()) {
                panel.rebuildIfVisible(DebuggerSession.Event.CONTEXT);
              }
            }
 else {
              panel.setUpdateEnabled(false);
            }
          }
        }
      }
,threadsContent);
    }
    @NotNull @Override public Content registerConsoleContent(    @NotNull RunnerLayoutUi ui,    @NotNull ExecutionConsole console){
      Content content=null;
      if (console instanceof ExecutionConsoleEx) {
        ((ExecutionConsoleEx)console).buildUi(ui);
        content=ui.findContent(DebuggerContentInfo.CONSOLE_CONTENT);
      }
      if (content == null) {
        content=super.registerConsoleContent(ui,console);
      }
      return content;
    }
  }
;
}
