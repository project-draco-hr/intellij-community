{
  super(session);
  myJavaSession=javaSession;
  myEditorsProvider=new JavaDebuggerEditorsProvider();
  DebugProcessImpl process=javaSession.getProcess();
  myBreakpointHandlers=new XBreakpointHandler[]{new JavaBreakpointHandler.JavaLineBreakpointHandler(process),new JavaBreakpointHandler.JavaExceptionBreakpointHandler(process),new JavaBreakpointHandler.JavaFieldBreakpointHandler(process),new JavaBreakpointHandler.JavaMethodBreakpointHandler(process),new JavaBreakpointHandler.JavaWildcardBreakpointHandler(process)};
  process.addDebugProcessListener(new DebugProcessAdapter(){
    @Override public void paused(    final SuspendContext suspendContext){
      ((SuspendContextImpl)suspendContext).initExecutionStacks();
      getSession().positionReached((XSuspendContext)suspendContext);
    }
  }
);
  myJavaSession.getContextManager().addListener(new DebuggerContextListener(){
    @Override public void changeEvent(    DebuggerContextImpl newContext,    int event){
      myStateManager.fireStateChanged(newContext,event);
    }
  }
);
  myNodeManager=new NodeManagerImpl(session.getProject(),null){
    @Override public DebuggerTreeNodeImpl createNode(    final NodeDescriptor descriptor,    EvaluationContext evaluationContext){
      ((NodeDescriptorImpl)descriptor).setContext((EvaluationContextImpl)evaluationContext);
      final DebuggerTreeNodeImpl node=new DebuggerTreeNodeImpl(null,descriptor);
      ((NodeDescriptorImpl)descriptor).updateRepresentation((EvaluationContextImpl)evaluationContext,DescriptorLabelListener.DUMMY_LISTENER);
      return node;
    }
  }
;
  session.addSessionListener(new XDebugSessionAdapter(){
    @Override public void beforeSessionResume(){
      myNodeManager.setHistoryByContext(myStateManager.getContext());
    }
  }
);
}
