{
  final String tripleStateStorageKey=stateStorageKey != null ? stateStorageKey + "_str" : null;
  if (stateStorageKey != null && isTaskConsoleEnabledByDefault && !PropertiesComponent.getInstance().isValueSet(tripleStateStorageKey)) {
    PropertiesComponent.getInstance().setValue(tripleStateStorageKey,Boolean.TRUE.toString());
    PropertiesComponent.getInstance().setValue(stateStorageKey,Boolean.TRUE);
  }
  final TaskExecutionView gradleExecutionConsole=new TaskExecutionView(project);
  final Ref<DuplexConsoleView> duplexConsoleViewRef=Ref.create();
  final DuplexConsoleView duplexConsoleView=new DuplexConsoleView<ConsoleView,ConsoleView>(gradleExecutionConsole,consoleView,stateStorageKey){
    @Override public void enableConsole(    boolean primary){
      super.enableConsole(primary);
      if (stateStorageKey != null) {
        PropertiesComponent.getInstance().setValue(tripleStateStorageKey,Boolean.toString(primary));
      }
    }
    @NotNull @Override public AnAction[] createConsoleActions(){
      final DefaultActionGroup textActionGroup=new DefaultActionGroup(){
        @Override public void update(        AnActionEvent e){
          super.update(e);
          if (duplexConsoleViewRef.get() != null) {
            e.getPresentation().setVisible(!duplexConsoleViewRef.get().isPrimaryConsoleEnabled());
          }
        }
      }
;
      final AnAction[] consoleActions=consoleView.createConsoleActions();
      for (      AnAction anAction : consoleActions) {
        textActionGroup.add(anAction);
      }
      final List<AnAction> anActions=ContainerUtil.newArrayList(super.createConsoleActions());
      anActions.add(textActionGroup);
      return ArrayUtil.toObjectArray(anActions,AnAction.class);
    }
  }
;
  duplexConsoleViewRef.set(duplexConsoleView);
  duplexConsoleView.setDisableSwitchConsoleActionOnProcessEnd(false);
  duplexConsoleView.getSwitchConsoleActionPresentation().setIcon(AllIcons.Actions.ChangeView);
  duplexConsoleView.getSwitchConsoleActionPresentation().setText(GradleBundle.message("gradle.runner.toggle.tree.text.action.name"));
  final ExternalSystemProgressNotificationManager progressManager=ServiceManager.getService(ExternalSystemProgressNotificationManager.class);
  final ExternalSystemTaskNotificationListenerAdapter taskListener=new ExternalSystemTaskNotificationListenerAdapter(){
    @Override public void onStatusChange(    @NotNull final ExternalSystemTaskNotificationEvent event){
      if (event instanceof ExternalSystemTaskExecutionEvent) {
        UIUtil.invokeLaterIfNeeded(new Runnable(){
          @Override public void run(){
            if (((ExternalSystemTaskExecutionEvent)event).getProgressEvent() instanceof ExternalSystemProgressEventUnsupported) {
              duplexConsoleView.enableConsole(false);
            }
            gradleExecutionConsole.onStatusChange((ExternalSystemTaskExecutionEvent)event);
          }
        }
);
      }
    }
    @Override public void onQueued(    @NotNull ExternalSystemTaskId id,    final String workingDir){
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          gradleExecutionConsole.setWorkingDir(workingDir);
        }
      }
);
    }
    @Override public void onFailure(    @NotNull ExternalSystemTaskId id,    @NotNull final Exception e){
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          gradleExecutionConsole.onFailure(e);
        }
      }
);
    }
    @Override public void onEnd(    @NotNull ExternalSystemTaskId id){
      progressManager.removeNotificationListener(this);
    }
  }
;
  progressManager.addNotificationListener(taskId,taskListener);
  return duplexConsoleView;
}
