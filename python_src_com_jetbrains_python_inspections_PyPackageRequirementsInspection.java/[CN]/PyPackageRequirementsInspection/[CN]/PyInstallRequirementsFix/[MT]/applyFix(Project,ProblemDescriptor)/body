{
  boolean installManagement=false;
  final PyPackageManager manager=PyPackageManager.getInstance(mySdk);
  if (!manager.hasManagement(false)) {
    final int result=Messages.showYesNoDialog(project,"Python packaging tools are required for installing packages. Do you want to " + "install 'pip' and 'setuptools' for your interpreter?","Install Python Packaging Tools",Messages.getQuestionIcon());
    if (result == Messages.YES) {
      installManagement=true;
    }
 else {
      return;
    }
  }
  final List<PyRequirement> chosen;
  if (myUnsatisfied.size() > 1) {
    final PyChooseRequirementsDialog dialog=new PyChooseRequirementsDialog(project,myUnsatisfied);
    chosen=dialog.showAndGetResult();
  }
 else {
    chosen=myUnsatisfied;
  }
  if (chosen.isEmpty()) {
    return;
  }
  if (installManagement) {
    final PyPackageManagerUI ui=new PyPackageManagerUI(project,mySdk,new UIListener(myModule){
      @Override public void finished(      List<PyExternalProcessException> exceptions){
        super.finished(exceptions);
        if (exceptions.isEmpty()) {
          installRequirements(project,chosen);
        }
      }
    }
);
    ui.installManagement();
  }
 else {
    installRequirements(project,chosen);
  }
}
