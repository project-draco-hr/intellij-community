{
  for (  PyInspectionExtension extension : Extensions.getExtensions(PyInspectionExtension.EP_NAME)) {
    if (extension.ignorePackageNameInRequirements(importedExpression)) {
      return;
    }
  }
  final PyExpression packageReferenceExpression=PyPsiUtils.getFirstQualifier(importedExpression);
  if (packageReferenceExpression != null) {
    final String packageName=packageReferenceExpression.getName();
    if (packageName != null && !myIgnoredPackages.contains(packageName)) {
      if (!ApplicationManager.getApplication().isUnitTestMode() && !PyPIPackageUtil.INSTANCE.isInPyPI(packageName)) {
        return;
      }
      final Collection<String> stdlibPackages=PyStdlibUtil.getPackages();
      if (stdlibPackages != null) {
        if (stdlibPackages.contains(packageName)) {
          return;
        }
      }
      if (PyPackageUtil.SETUPTOOLS.equals(packageName)) {
        return;
      }
      final Module module=ModuleUtilCore.findModuleForPsiElement(packageReferenceExpression);
      if (module != null) {
        final Sdk sdk=PythonSdkType.findPythonSdk(module);
        if (sdk != null) {
          final PyPackageManager manager=PyPackageManager.getInstance(sdk);
          Collection<PyRequirement> requirements=manager.getRequirements(module);
          if (requirements != null) {
            requirements=getTransitiveRequirements(sdk,requirements,new HashSet<>());
          }
          if (requirements == null)           return;
          for (          PyRequirement req : requirements) {
            if (packageName.equalsIgnoreCase(req.getName())) {
              return;
            }
          }
          if (!ApplicationManager.getApplication().isUnitTestMode()) {
            final PsiReference reference=packageReferenceExpression.getReference();
            if (reference != null) {
              final PsiElement element=reference.resolve();
              if (element != null) {
                final PsiFile file=element.getContainingFile();
                if (file != null) {
                  final VirtualFile virtualFile=file.getVirtualFile();
                  if (ModuleUtilCore.moduleContainsFile(module,virtualFile,false)) {
                    return;
                  }
                }
              }
            }
          }
          final List<LocalQuickFix> quickFixes=new ArrayList<>();
          quickFixes.add(new AddToRequirementsFix(module,packageName,LanguageLevel.forElement(importedExpression)));
          quickFixes.add(new IgnoreRequirementFix(Collections.singleton(packageName)));
          registerProblem(packageReferenceExpression,String.format("Package '%s' is not listed in project requirements",packageName),ProblemHighlightType.WEAK_WARNING,null,quickFixes.toArray(new LocalQuickFix[quickFixes.size()]));
        }
      }
    }
  }
}
