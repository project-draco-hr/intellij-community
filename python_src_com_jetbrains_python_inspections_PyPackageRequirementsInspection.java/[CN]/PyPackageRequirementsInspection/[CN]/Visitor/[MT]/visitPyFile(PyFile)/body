{
  final Module module=ModuleUtil.findModuleForPsiElement(node);
  if (module != null) {
    final List<PyRequirement> unsatisfied=findUnsatisfiedRequirements(module);
    if (unsatisfied != null) {
      final int n=unsatisfied.size();
      String msg=null;
      if (n == 1) {
        msg=String.format("Package requirement '%s' is not satisfied",unsatisfied.get(0));
      }
 else       if (n > 1) {
        final String pkgs=StringUtil.join(unsatisfied,new Function<PyRequirement,String>(){
          @Override public String fun(          PyRequirement requirement){
            return String.format("'%s'",requirement.toString());
          }
        }
,", ");
        msg=String.format("Package requirements %s are not satisfied",pkgs);
      }
      if (msg != null) {
        registerProblem(node,msg,new InstallRequirementsFix(module,unsatisfied));
      }
    }
  }
}
