{
  PsiReference[] refs=ReferencesSearch.search(myClass,GlobalSearchScope.projectScope(myProject),false).toArray(PsiReference.EMPTY_ARRAY);
  final ArrayList<UsageInfo> result=new ArrayList<>();
  detectTurnToSuperRefs(refs,result);
  final PsiPackage originalPackage=JavaDirectoryService.getInstance().getPackage(myClass.getContainingFile().getContainingDirectory());
  if (Comparing.equal(JavaDirectoryService.getInstance().getPackage(myTargetDirectory),originalPackage)) {
    result.clear();
  }
  for (  final PsiReference ref : refs) {
    final PsiElement element=ref.getElement();
    if (!canTurnToSuper(element) && !RefactoringUtil.inImportStatement(ref,element)) {
      result.add(new BindToOldUsageInfo(element,ref,myClass));
    }
  }
  UsageInfo[] usageInfos=result.toArray(new UsageInfo[result.size()]);
  return UsageViewUtil.removeDuplicatedUsages(usageInfos);
}
