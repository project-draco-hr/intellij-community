{
  nextResponse=null;
  if (waitingForInput) {
    inputReceived=command.getText();
    waitingForInput=false;
  }
 else {
    new Task.Backgroundable(myProject,"REPL Communication",true){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        boolean needInput=false;
        try {
          Pair<String,Boolean> executed=null;
          int commAttempts=0;
          while (true) {
            if (indicator.isCanceled()) {
              return;
            }
            executed=exec(command);
            String refusedConnPattern="Failed to read servers response";
            if (executed.first != null && executed.first.indexOf(refusedConnPattern) != -1) {
              if (firstCommWorked) {
                break;
              }
 else {
                if (commAttempts < MAX_ATTEMPTS) {
                  commAttempts+=1;
                  Thread.sleep(250);
                  executed=Pair.create("",executed.second);
                }
 else {
                  break;
                }
              }
            }
 else {
              break;
            }
          }
          firstCommWorked=true;
          boolean more=executed.second;
          nextResponse=new InterpreterResponse(more,needInput);
        }
 catch (        Exception e) {
          nextResponse=new InterpreterResponse(false,needInput);
        }
      }
    }
.queue();
    ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      @Override public void run(){
        final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
        progressIndicator.setText("Waiting for REPL response with " + (int)(TIMEOUT / 10e8) + "s timeout");
        final long startTime=System.nanoTime();
        while (nextResponse == null) {
          if (progressIndicator.isCanceled()) {
            LOG.debug("Canceled");
            nextResponse=new InterpreterResponse(false,false);
          }
          final long time=System.nanoTime() - startTime;
          progressIndicator.setFraction(((double)time) / TIMEOUT);
          if (time > TIMEOUT) {
            LOG.debug("Timeout exceeded");
            nextResponse=new InterpreterResponse(false,false);
          }
synchronized (lock2) {
            try {
              lock2.wait(20);
            }
 catch (            InterruptedException e) {
              LOG.error(e);
            }
          }
        }
        onResponseReceived.fun(nextResponse);
      }
    }
,"Waiting for REPL response",true,myProject);
  }
}
