{
  final Project project=CommonDataKeys.PROJECT.getData(dataContext);
  if (project == null) {
    return;
  }
  FileDocumentManager.getInstance().saveAllDocuments();
  try {
    if (isUseConsole()) {
      ExecutionEnvironment environment=ExecutionEnvironmentBuilder.create(project,DefaultRunExecutor.getRunExecutorInstance(),new ToolRunProfile(this,dataContext)).build();
      environment.setExecutionId(executionId);
      environment.getRunner().execute(environment,new ProgramRunner.Callback(){
        @Override public void processStarted(        RunContentDescriptor descriptor){
          ProcessHandler processHandler=descriptor.getProcessHandler();
          if (processHandler != null && processListener != null) {
            LOG.assertTrue(!processHandler.isStartNotified(),"ProcessHandler is already startNotified, the listener won't be correctly notified");
            processHandler.addProcessListener(processListener);
          }
        }
      }
);
    }
 else {
      GeneralCommandLine commandLine=createCommandLine(dataContext);
      if (commandLine == null) {
        return;
      }
      OSProcessHandler handler=new OSProcessHandler(commandLine);
      handler.addProcessListener(new ToolProcessAdapter(project,synchronizeAfterExecution(),getName()));
      if (processListener != null) {
        handler.addProcessListener(processListener);
      }
      handler.startNotify();
    }
  }
 catch (  ExecutionException ex) {
    ExecutionErrorDialog.show(ex,ToolsBundle.message("tools.process.start.error"),project);
  }
}
