{
  JPanel panel=new JPanel(new BorderLayout());
  final JLabel ctxLabel=new JLabel();
  final JLabel change=new JLabel();
  change.setForeground(PlatformColors.BLUE);
  change.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
  panel.add(ctxLabel,BorderLayout.CENTER);
  panel.add(change,BorderLayout.EAST);
  final Runnable updateLabel=new Runnable(){
    @Override public void run(){
      myExpandByCombo.setEnabled(isExpandableFromEditor());
      updateHighlighter();
      StringBuilder sb=new StringBuilder();
      String oldPrefix="";
      for (      TemplateContextType type : getApplicableContexts()) {
        final TemplateContextType base=type.getBaseContextType();
        String ownName=UIUtil.removeMnemonic(type.getPresentableName());
        String prefix="";
        if (base != null && !(base instanceof EverywhereContextType)) {
          prefix=UIUtil.removeMnemonic(base.getPresentableName()) + ": ";
          ownName=StringUtil.decapitalize(ownName);
        }
        if (type instanceof EverywhereContextType) {
          ownName="Other";
        }
        if (sb.length() > 0) {
          sb.append(oldPrefix.equals(prefix) ? ", " : "; ");
        }
        if (!oldPrefix.equals(prefix)) {
          sb.append(prefix);
          oldPrefix=prefix;
        }
        sb.append(ownName);
      }
      final boolean noContexts=sb.length() == 0;
      String contexts=(noContexts ? "No applicable contexts" + (allowNoContexts ? "" : " yet") : "Applicable in " + sb.toString()) + ".  ";
      ctxLabel.setText(StringUtil.first(contexts,100,true));
      ctxLabel.setForeground(noContexts ? allowNoContexts ? JBColor.GRAY : JBColor.RED : UIUtil.getLabelForeground());
      change.setText(noContexts ? "Define" : "Change");
      myTemplateOptionsPanel.removeAll();
      myTemplateOptionsPanel.add(createTemplateOptionsPanel());
    }
  }
;
  new ClickListener(){
    @Override public boolean onClick(    @NotNull MouseEvent e,    int clickCount){
      if (disposeContextPopup())       return false;
      final JPanel content=createPopupContextPanel(updateLabel,myContext);
      Dimension prefSize=content.getPreferredSize();
      if (myLastSize != null && (myLastSize.width > prefSize.width || myLastSize.height > prefSize.height)) {
        content.setPreferredSize(new Dimension(Math.max(prefSize.width,myLastSize.width),Math.max(prefSize.height,myLastSize.height)));
      }
      myContextPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(content,null).setResizable(true).createPopup();
      myContextPopup.show(new RelativePoint(change,new Point(change.getWidth(),-content.getPreferredSize().height - 10)));
      myContextPopup.addListener(new JBPopupAdapter(){
        @Override public void onClosed(        LightweightWindowEvent event){
          myLastSize=content.getSize();
        }
      }
);
      return true;
    }
  }
.installOn(change);
  updateLabel.run();
  return panel;
}
