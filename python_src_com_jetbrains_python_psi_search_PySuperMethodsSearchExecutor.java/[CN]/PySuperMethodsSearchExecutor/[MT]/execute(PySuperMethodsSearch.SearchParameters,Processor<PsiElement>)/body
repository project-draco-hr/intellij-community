{
  PyFunction func=queryParameters.getDerivedMethod();
  String name=func.getName();
  PyClass containingClass=func.getContainingClass();
  Set<PyClass> foundMethodContainingClasses=new HashSet<PyClass>();
  if (name != null && containingClass != null) {
    for (    PyClass superClass : containingClass.iterateAncestors()) {
      if (!queryParameters.isDeepSearch()) {
        boolean isAlreadyFound=false;
        for (        PyClass alreadyFound : foundMethodContainingClasses) {
          if (alreadyFound.isSubclass(superClass)) {
            isAlreadyFound=true;
          }
        }
        if (isAlreadyFound) {
          continue;
        }
      }
      PyFunction superMethod=superClass.findMethodByName(name,false);
      if (superMethod != null) {
        foundMethodContainingClasses.add(superClass);
        if (!consumer.process(superMethod))         return false;
      }
    }
  }
  return true;
}
