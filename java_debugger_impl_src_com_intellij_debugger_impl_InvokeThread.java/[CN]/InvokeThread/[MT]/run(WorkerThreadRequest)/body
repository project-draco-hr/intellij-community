{
  try {
    DumbService.getInstance(myProject).setAlternativeResolveEnabled(true);
    while (true) {
      try {
        if (threadRequest.isStopRequested()) {
          break;
        }
        final WorkerThreadRequest currentRequest=getCurrentRequest();
        if (currentRequest != threadRequest) {
          LOG.error("Expected " + threadRequest + " instead of "+ currentRequest);
          if (currentRequest != null && !currentRequest.isDone()) {
            continue;
          }
        }
        processEvent(myEvents.get());
      }
 catch (      VMDisconnectedException ignored) {
        break;
      }
catch (      EventQueueClosedException ignored) {
        break;
      }
catch (      ProcessCanceledException ignored) {
      }
catch (      RuntimeException e) {
        if (e.getCause() instanceof InterruptedException) {
          break;
        }
        LOG.error(e);
      }
catch (      Throwable e) {
        LOG.error(e);
      }
    }
  }
  finally {
    if (threadRequest == getCurrentRequest()) {
      for (      E event : myEvents.clearQueue()) {
        try {
          processEvent(event);
        }
 catch (        Throwable ignored) {
        }
      }
    }
    LOG.debug("Request " + toString() + " exited");
    DumbService.getInstance(myProject).setAlternativeResolveEnabled(false);
  }
}
