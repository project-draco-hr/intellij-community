{
  final UsageInfo[] usages=ref.get();
  final PyPushDownConflicts conflicts=new PyPushDownConflicts(myClass,mySelectedMemberInfos);
  conflicts.checkSourceClassConflicts();
  if (usages.length == 0) {
    final String message=RefactoringBundle.message("class.0.does.not.have.inheritors",myClass.getName()) + "\nPushing members down will result in them being deleted";
    final int answer=Messages.showYesNoDialog(message,PyPushDownHandler.REFACTORING_NAME,Messages.getWarningIcon());
    if (answer != 0) {
      return false;
    }
  }
  for (  UsageInfo usage : usages) {
    conflicts.checkTargetClassConflicts((PyClass)usage.getElement());
  }
  return showConflicts(conflicts.getConflicts());
}
