{
  final Collection<DataNode<?>> moduleDeps=dataNodes.get(ProjectKeys.MODULE_DEPENDENCY);
  final Collection<DataNode<?>> libDeps=dataNodes.get(ProjectKeys.LIBRARY_DEPENDENCY);
  if (!moduleDeps.isEmpty() || !libDeps.isEmpty()) {
    final ExternalSystemNode depNode=new MyDependenciesNode(externalProjectsView);
    for (    DataNode<?> dataNode : moduleDeps) {
      if (!(dataNode.getData() instanceof ModuleDependencyData))       continue;
      ModuleDependencyDataExternalSystemNode moduleDependencyDataExternalSystemNode=new ModuleDependencyDataExternalSystemNode(externalProjectsView,(DataNode<ModuleDependencyData>)dataNode);
      if (dataNode.getParent() != null && dataNode.getParent().getData() instanceof ModuleDependencyData) {
        result.add(moduleDependencyDataExternalSystemNode);
      }
 else {
        depNode.add(moduleDependencyDataExternalSystemNode);
      }
    }
    for (    DataNode<?> dataNode : libDeps) {
      if (!(dataNode.getData() instanceof LibraryDependencyData))       continue;
      final ExternalSystemNode<LibraryDependencyData> libraryDependencyDataExternalSystemNode=new LibraryDependencyDataExternalSystemNode(externalProjectsView,(DataNode<LibraryDependencyData>)dataNode);
      if (((LibraryDependencyData)dataNode.getData()).getTarget().isUnresolved()) {
        libraryDependencyDataExternalSystemNode.setErrorLevel(ExternalProjectsStructure.ErrorLevel.ERROR,"Unable to resolve " + ((LibraryDependencyData)dataNode.getData()).getTarget().getExternalName());
      }
 else {
        libraryDependencyDataExternalSystemNode.setErrorLevel(ExternalProjectsStructure.ErrorLevel.NONE);
      }
      if (dataNode.getParent() != null && dataNode.getParent().getData() instanceof ModuleData) {
        depNode.add(libraryDependencyDataExternalSystemNode);
      }
 else {
        result.add(libraryDependencyDataExternalSystemNode);
      }
    }
    if (depNode.hasChildren()) {
      result.add(depNode);
    }
  }
}
