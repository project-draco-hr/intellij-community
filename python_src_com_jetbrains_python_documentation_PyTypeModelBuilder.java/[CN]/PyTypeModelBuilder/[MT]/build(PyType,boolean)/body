{
  final TypeModel evaluated=myVisited.get(type);
  if (evaluated != null) {
    return evaluated;
  }
  if (myVisited.containsKey(type)) {
    return type != null ? _(type.getName()) : _(PyNames.UNKNOWN_TYPE);
  }
  myVisited.put(type,null);
  TypeModel result=null;
  if (type instanceof PyCollectionType) {
    final String name=type.getName();
    final List<PyType> elementTypes=((PyCollectionType)type).getElementTypes(myContext);
    boolean nullOnlyTypes=true;
    for (    PyType elementType : elementTypes) {
      if (elementType != null) {
        nullOnlyTypes=false;
        break;
      }
    }
    final List<TypeModel> elementModels=new ArrayList<TypeModel>();
    if (!nullOnlyTypes) {
      for (      PyType elementType : elementTypes) {
        elementModels.add(build(elementType,true));
      }
      if (!elementModels.isEmpty()) {
        result=new CollectionOf(name,elementModels);
      }
    }
  }
 else   if (type instanceof PyUnionType && allowUnions) {
    final PyUnionType unionType=(PyUnionType)type;
    if (type instanceof PyDynamicallyEvaluatedType || PyTypeChecker.isUnknown(type)) {
      result=new UnknownType(build(unionType.excludeNull(myContext),true));
    }
 else {
      final PyType optionalType=getOptionalType(unionType);
      if (optionalType != null) {
        return new OptionalType(build(optionalType,true));
      }
      result=new OneOf(Collections2.transform(unionType.getMembers(),new Function<PyType,TypeModel>(){
        @Override public TypeModel apply(        PyType t){
          return build(t,false);
        }
      }
));
    }
  }
 else   if (type instanceof PyCallableType && !(type instanceof PyClassLikeType)) {
    result=build((PyCallableType)type);
  }
 else   if (type instanceof PyTupleType) {
    final List<TypeModel> elementModels=new ArrayList<TypeModel>();
    final PyTupleType tupleType=(PyTupleType)type;
    for (int i=0; i < tupleType.getElementCount(); i++) {
      final PyType elementType=tupleType.getElementType(i);
      elementModels.add(build(elementType,true));
    }
    result=new TupleType(elementModels);
  }
  if (result == null) {
    result=type != null ? _(type.getName()) : _(PyNames.UNKNOWN_TYPE);
  }
  myVisited.put(type,result);
  return result;
}
