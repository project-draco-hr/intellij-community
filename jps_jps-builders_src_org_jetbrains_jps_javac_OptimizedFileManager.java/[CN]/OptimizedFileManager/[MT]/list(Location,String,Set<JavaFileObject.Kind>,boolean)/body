{
  Iterable<? extends File> locationRoots=getLocation(location);
  if (locationRoots == null) {
    return Collections.emptyList();
  }
  final String relativePath=packageName.replace('.',File.separatorChar);
  ListBuffer<JavaFileObject> results=new ListBuffer<JavaFileObject>();
  final Set<File> outputRoots;
  if (location.isOutputLocation() || location != StandardLocation.CLASS_PATH) {
    outputRoots=Collections.emptySet();
  }
 else {
    final Iterable<? extends File> outputs=getLocation(StandardLocation.CLASS_OUTPUT);
    if (outputs == null) {
      outputRoots=Collections.emptySet();
    }
 else {
      outputRoots=new HashSet<File>(1,0.98f);
      for (      File file : outputs) {
        outputRoots.add(file);
      }
    }
  }
  for (  File root : locationRoots) {
    final Archive archive=myArchives.get(root);
    final boolean isFile;
    if (archive != null) {
      isFile=true;
    }
 else {
      isFile=isFile(root);
    }
    if (isFile) {
      collectFromArchive(root,archive,relativePath,kinds,recurse,results);
    }
 else {
      final File directory=relativePath.length() != 0 ? new File(root,relativePath) : root;
      final boolean canUseCache=!location.isOutputLocation() && !outputRoots.contains(root);
      if (recurse) {
        collectFromDirectoryRecursively(directory,kinds,results,true,canUseCache);
      }
 else {
        collectFromDirectory(directory,kinds,results,canUseCache);
      }
    }
  }
  return results.toList();
}
