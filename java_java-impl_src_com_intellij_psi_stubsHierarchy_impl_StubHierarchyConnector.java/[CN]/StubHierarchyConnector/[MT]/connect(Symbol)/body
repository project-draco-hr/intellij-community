{
  Symbol.ClassSymbol c=(Symbol.ClassSymbol)sym;
  if (c.myOwner instanceof Symbol.ClassSymbol) {
    ((Symbol.ClassSymbol)c.myOwner).connect(this);
  }
  Object supers=c.mySuperClasses;
  if (supers == null) {
    c.setSupers(Collections.emptySet());
    return;
  }
  Set<Symbol.ClassSymbol> supertypes=new HashSet<>();
  try {
    if (supers instanceof QualifiedName[]) {
      for (      QualifiedName name : (QualifiedName[])supers) {
        name.resolveCandidates(myResolve,c,supertypes);
      }
    }
 else {
      ((QualifiedName)supers).resolveCandidates(myResolve,c,supertypes);
    }
  }
 catch (  IncompleteHierarchyException ignore) {
    c.markHierarchyIncomplete();
    return;
  }
  for (Iterator<Symbol.ClassSymbol> iterator=supertypes.iterator(); iterator.hasNext(); ) {
    if (isJavaLangObject(iterator.next())) {
      iterator.remove();
    }
  }
  c.setSupers(supertypes);
}
