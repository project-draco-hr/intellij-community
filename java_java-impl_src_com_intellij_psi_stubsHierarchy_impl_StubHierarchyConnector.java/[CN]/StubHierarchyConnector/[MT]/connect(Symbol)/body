{
  Symbol.ClassSymbol c=(Symbol.ClassSymbol)sym;
  if (c.myOwner instanceof Symbol.ClassSymbol) {
    ((Symbol.ClassSymbol)c.myOwner).connect(this);
  }
  Set<Symbol> supertypes=new HashSet<Symbol>();
  for (  QualifiedName name : c.mySuperNames) {
    if (c.isCompiled()) {
      if (name != null) {
        Collections.addAll(supertypes,myResolve.findGlobalType(name));
      }
    }
 else {
      try {
        supertypes.addAll(myResolve.resolveBase(c,name.myComponents));
      }
 catch (      IncompleteHierarchyException ignore) {
        c.markHierarchyIncomplete();
        break;
      }
    }
  }
  if (c.myQualifiedName == myNameEnvironment.java_lang_Object || c.isHierarchyIncomplete()) {
    c.mySuperClasses=Symbol.ClassSymbol.EMPTY_ARRAY;
  }
 else {
    for (Iterator<Symbol> iter=supertypes.iterator(); iter.hasNext(); ) {
      Symbol s=iter.next();
      if (!(s instanceof Symbol.ClassSymbol) || s.myQualifiedName == myNameEnvironment.java_lang_Object) {
        iter.remove();
      }
    }
    if (supertypes.isEmpty()) {
      c.mySuperClasses=Symbol.ClassSymbol.EMPTY_ARRAY;
    }
 else {
      c.mySuperClasses=supertypes.toArray(new Symbol.ClassSymbol[supertypes.size()]);
    }
  }
  c.mySuperNames=null;
  c.myUnitInfo=null;
}
