{
  final AbstractProjectViewPane projectViewPane=ProjectView.getInstance(myProject).getCurrentProjectViewPane();
  if (projectViewPane == null || myInitialized)   return;
  JTree tree=projectViewPane.getTree();
  if (tree == null) {
    return;
  }
  tree.updateUI();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      LocalFileSystem.getInstance().refresh(false);
      final Lesson firstLesson=StudyUtils.getFirst(myCourse.getLessons());
      final Task firstTask=StudyUtils.getFirst(firstLesson.getTaskList());
      final VirtualFile taskDir=firstTask.getTaskDir(myProject);
      if (taskDir == null)       return;
      final Map<String,TaskFile> taskFiles=firstTask.getTaskFiles();
      VirtualFile activeVirtualFile=null;
      for (      Map.Entry<String,TaskFile> entry : taskFiles.entrySet()) {
        final String name=entry.getKey();
        final TaskFile taskFile=entry.getValue();
        final VirtualFile virtualFile=((VirtualDirectoryImpl)taskDir).refreshAndFindChild(name);
        if (virtualFile != null) {
          FileEditorManager.getInstance(myProject).openFile(virtualFile,true);
          if (!taskFile.getAnswerPlaceholders().isEmpty()) {
            activeVirtualFile=virtualFile;
          }
        }
      }
      if (activeVirtualFile != null) {
        final PsiFile file=PsiManager.getInstance(myProject).findFile(activeVirtualFile);
        ProjectView.getInstance(myProject).select(file,activeVirtualFile,true);
      }
 else {
        String first=StudyUtils.getFirst(taskFiles.keySet());
        if (first != null) {
          NewVirtualFile firstFile=((VirtualDirectoryImpl)taskDir).refreshAndFindChild(first);
          if (firstFile != null) {
            FileEditorManager.getInstance(myProject).openFile(firstFile,true);
          }
        }
      }
      myInitialized=true;
    }
  }
,ModalityState.current(),new Condition(){
    @Override public boolean value(    Object o){
      return myProject.isDisposed();
    }
  }
);
}
