{
  final Course course=StudyStepicConnector.getCourse(mySelectedCourseInfo);
  if (course == null)   return;
  flushCourse(course);
  course.init(false);
  final File courseDirectory=new File(myCoursesDir,course.getName());
  course.create(baseDir,courseDirectory,project);
  course.setCourseDirectory(new File(myCoursesDir,mySelectedCourseInfo.getName()).getAbsolutePath());
  VirtualFileManager.getInstance().refreshWithoutFileWatcher(true);
  StudyTaskManager.getInstance(project).setCourse(course);
  final boolean[] initialized={false};
  ToolWindowManagerEx.getInstanceEx(project).addToolWindowManagerListener(new ToolWindowManagerAdapter(){
    @Override public void stateChanged(){
      final AbstractProjectViewPane projectViewPane=ProjectView.getInstance(project).getCurrentProjectViewPane();
      if (projectViewPane == null || initialized[0])       return;
      JTree tree=projectViewPane.getTree();
      if (tree == null) {
        return;
      }
      tree.updateUI();
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          LocalFileSystem.getInstance().refresh(false);
          final Lesson firstLesson=StudyUtils.getFirst(course.getLessons());
          final Task firstTask=StudyUtils.getFirst(firstLesson.getTaskList());
          final VirtualFile taskDir=firstTask.getTaskDir(project);
          if (taskDir == null)           return;
          final Map<String,TaskFile> taskFiles=firstTask.getTaskFiles();
          VirtualFile activeVirtualFile=null;
          for (          Map.Entry<String,TaskFile> entry : taskFiles.entrySet()) {
            final String name=entry.getKey();
            final TaskFile taskFile=entry.getValue();
            final VirtualFile virtualFile=((VirtualDirectoryImpl)taskDir).refreshAndFindChild(name);
            if (virtualFile != null) {
              FileEditorManager.getInstance(project).openFile(virtualFile,true);
              if (!taskFile.getTaskWindows().isEmpty()) {
                activeVirtualFile=virtualFile;
              }
            }
          }
          if (activeVirtualFile != null) {
            final PsiFile file=PsiManager.getInstance(project).findFile(activeVirtualFile);
            ProjectView.getInstance(project).select(file,activeVirtualFile,true);
          }
 else {
            String first=StudyUtils.getFirst(taskFiles.keySet());
            if (first != null) {
              NewVirtualFile firstFile=((VirtualDirectoryImpl)taskDir).refreshAndFindChild(first);
              if (firstFile != null) {
                FileEditorManager.getInstance(project).openFile(firstFile,true);
              }
            }
          }
          initialized[0]=true;
        }
      }
,ModalityState.current(),new Condition(){
        @Override public boolean value(        Object o){
          return project.isDisposed();
        }
      }
);
    }
  }
);
}
