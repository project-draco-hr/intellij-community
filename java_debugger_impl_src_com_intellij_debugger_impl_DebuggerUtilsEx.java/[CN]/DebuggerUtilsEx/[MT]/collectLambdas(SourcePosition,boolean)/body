{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  PsiFile file=position.getFile();
  final int line=position.getLine();
  final Document document=PsiDocumentManager.getInstance(file.getProject()).getDocument(file);
  if (document == null || line >= document.getLineCount()) {
    return Collections.emptyList();
  }
  PsiElement element=position.getElementAt();
  final TextRange lineRange=DocumentUtil.getLineTextRange(document,line);
  do {
    PsiElement parent=element.getParent();
    if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) {
      break;
    }
    element=parent;
  }
 while (true);
  final List<PsiLambdaExpression> lambdas=new SmartList<>();
  final PsiElementVisitor lambdaCollector=new JavaRecursiveElementVisitor(){
    @Override public void visitLambdaExpression(    PsiLambdaExpression expression){
      super.visitLambdaExpression(expression);
      if (!onlyOnTheLine || getFirstElementOnTheLine(expression,document,line) != null) {
        lambdas.add(expression);
      }
    }
  }
;
  element.accept(lambdaCollector);
  for (PsiElement sibling=getNextElement(element); sibling != null; sibling=getNextElement(sibling)) {
    if (!intersects(lineRange,sibling)) {
      break;
    }
    sibling.accept(lambdaCollector);
  }
  PsiElement method=getContainingMethod(element);
  if (method instanceof PsiLambdaExpression && !lambdas.contains(method)) {
    lambdas.add((PsiLambdaExpression)method);
  }
  return lambdas;
}
