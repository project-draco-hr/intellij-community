{
  PyClass source=PsiTreeUtil.getParentOfType(element,PyClass.class);
  if (source == null)   return Collections.emptySet();
  List<Pair<? extends PsiNamedElement,Integer>> classesWithWeights=new ArrayList<Pair<? extends PsiNamedElement,Integer>>();
  for (  Pair<String,Integer> eachNameWithWeight : TestFinderHelper.collectPossibleClassNamesWithWeights(source.getName())) {
    for (    PyClass eachClass : PyClassNameIndex.find(eachNameWithWeight.first,element.getProject(),GlobalSearchScope.projectScope(element.getProject()))) {
      if (!PyTestUtil.isPyTestClass(eachClass))       classesWithWeights.add(new Pair<PsiNamedElement,Integer>(eachClass,eachNameWithWeight.second));
    }
    for (    PyFunction function : PyFunctionNameIndex.find(eachNameWithWeight.first,element.getProject(),GlobalSearchScope.projectScope(element.getProject()))) {
      if (!PyTestUtil.isPyTestFunction(function))       classesWithWeights.add(new Pair<PsiNamedElement,Integer>(function,eachNameWithWeight.second));
    }
  }
  return TestFinderHelper.getSortedElements(classesWithWeights,false);
}
