{
  CommandLineParser gradleCmdParser=new CommandLineParser();
  GradleCommandLineOptionsConverter commandLineConverter=new GradleCommandLineOptionsConverter();
  commandLineConverter.configure(gradleCmdParser);
  ParsedCommandLine parsedCommandLine=gradleCmdParser.parse(StringUtil.split(fullCommandLine," "));
  final Map<String,List<String>> optionsMap=commandLineConverter.convert(parsedCommandLine,new HashMap<String,List<String>>());
  final List<String> systemProperties=optionsMap.remove("system-prop");
  final String vmOptions=systemProperties == null ? "" : StringUtil.join(systemProperties,new Function<String,String>(){
    @Override public String fun(    String entry){
      return "-D" + entry;
    }
  }
," ");
  final String scriptParameters=StringUtil.join(optionsMap.entrySet(),new Function<Map.Entry<String,List<String>>,String>(){
    @Override public String fun(    Map.Entry<String,List<String>> entry){
      final List<String> values=entry.getValue();
      final String longOptionName=entry.getKey();
      if (values != null && !values.isEmpty()) {
        return StringUtil.join(values,new Function<String,String>(){
          @Override public String fun(          String entry){
            return "--" + longOptionName + ' '+ entry;
          }
        }
," ");
      }
 else {
        return "--" + longOptionName;
      }
    }
  }
," ");
  final List<String> tasks=parsedCommandLine.getExtraArguments();
  ExternalSystemTaskExecutionSettings settings=new ExternalSystemTaskExecutionSettings();
  settings.setExternalProjectPath(projectPath);
  settings.setTaskNames(tasks);
  settings.setScriptParameters(scriptParameters);
  settings.setVmOptions(vmOptions);
  settings.setExternalSystemIdString(GradleConstants.SYSTEM_ID.toString());
  return new ExternalTaskExecutionInfo(settings,DefaultRunExecutor.EXECUTOR_ID);
}
