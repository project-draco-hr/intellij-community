{
  if (myRef instanceof PsiJavaReference) {
    JavaResolveResult result=((PsiJavaReference)myRef).advancedResolve(true);
    PsiElement element=result.getElement();
    if (element instanceof PsiClass && result.isValidResult())     return Collections.emptyList();
  }
  String name=getReferenceName(myRef);
  GlobalSearchScope scope=myElement.getResolveScope();
  if (name == null) {
    return Collections.emptyList();
  }
  if (!canReferenceClass(myRef)) {
    return Collections.emptyList();
  }
  boolean referenceHasTypeParameters=hasTypeParameters(myRef);
  PsiClass[] classes=PsiShortNamesCache.getInstance(myElement.getProject()).getClassesByName(name,scope);
  if (classes.length == 0)   return Collections.emptyList();
  List<PsiClass> classList=new ArrayList<PsiClass>(classes.length);
  boolean isAnnotationReference=myElement.getParent() instanceof PsiAnnotation;
  final PsiFile file=myElement.getContainingFile();
  for (  PsiClass aClass : classes) {
    if (isAnnotationReference && !aClass.isAnnotationType())     continue;
    if (JavaCompletionUtil.isInExcludedPackage(aClass,false))     continue;
    if (referenceHasTypeParameters && !aClass.hasTypeParameters())     continue;
    String qName=aClass.getQualifiedName();
    if (qName != null) {
      if (qName.indexOf('.') == -1)       continue;
      if (qName.endsWith(name) && (file == null || ImportFilter.shouldImport(file,qName))) {
        if (isAccessible(aClass,myElement)) {
          classList.add(aClass);
        }
      }
    }
  }
  classList=filterByRequiredMemberName(classList);
  List<PsiClass> filtered=filterByContext(classList,myElement);
  if (!filtered.isEmpty()) {
    classList=filtered;
  }
  filterAlreadyImportedButUnresolved(classList);
  return classList;
}
