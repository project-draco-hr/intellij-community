{
  if (indentArray.length == 0) {
    return;
  }
  int minIndent=Integer.MAX_VALUE;
  for (int i=0; i < indentArray.length; i++) {
    minIndent=Math.min(minIndent,indentArray[i]);
  }
  if (indentArray[0] == minIndent) {
    for (int i=0; i < indentArray.length; i++) {
      indentArray[i]-=minIndent;
    }
    return;
  }
  int indent=indentArray[0];
  int lastIndent=Integer.MAX_VALUE;
  boolean lastIndented=false;
  boolean insideMultiline=false;
  boolean shouldSkipNext=false;
  Map<String,Integer> openedBrackets=new HashMap<String,Integer>();
  openedBrackets.put("(",0);
  openedBrackets.put("[",0);
  openedBrackets.put("{",0);
  for (int i=0; i < indentArray.length; i++) {
    if (!StringUtil.isEmpty(lines.get(i))) {
      if (i > 0 && shouldSkipNext(lines.get(i - 1),openedBrackets)) {
        shouldSkipNext=true;
      }
      openedBrackets=countOpenedBrackets(openedBrackets,lines.get(i));
      if (shouldSkipNext || shouldSkip(lines.get(i),insideMultiline)) {
        if (!lines.get(i).startsWith("#")) {
          shouldSkipNext=false;
        }
        insideMultiline=insideMultiline ^ startOrEndNewMultiline(lines.get(i));
        indentArray[i]-=indent;
        continue;
      }
      if (indentArray[i] < indent || indentArray[i] > lastIndent && !lastIndented) {
        indent=indentArray[i];
      }
      lastIndent=indentArray[i];
      indentArray[i]-=indent;
      if (shouldIndent(lines.get(i))) {
        lastIndented=true;
      }
 else {
        lastIndented=false;
      }
    }
  }
}
