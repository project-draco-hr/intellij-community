{
  PsiTypeParameter[] methodTypeParameters=methodSignature.getTypeParameters();
  PsiTypeParameter[] superTypeParameters=superMethodSignature.getTypeParameters();
  if (methodTypeParameters.length != superTypeParameters.length)   return null;
  PsiSubstitutor result=superMethodSignature.getSubstitutor();
  for (int i=0; i < methodTypeParameters.length; i++) {
    PsiTypeParameter methodTypeParameter=methodTypeParameters[i];
    PsiElementFactory factory=JavaPsiFacade.getInstance(methodTypeParameter.getProject()).getElementFactory();
    result=result.put(superTypeParameters[i],factory.createType(methodTypeParameter));
  }
  for (int i=0; i < methodTypeParameters.length; i++) {
    PsiTypeParameter methodTypeParameter=methodTypeParameters[i];
    PsiTypeParameter superTypeParameter=superTypeParameters[i];
    final Set<PsiType> methodSupers=new HashSet<PsiType>();
    Collections.addAll(methodSupers,methodTypeParameter.getSuperTypes());
    final Set<PsiType> superSupers=new HashSet<PsiType>();
    for (    PsiClassType superSuper : superTypeParameter.getSuperTypes()) {
      superSupers.add(result.substitute(superSuper));
    }
    methodSupers.remove(PsiType.getJavaLangObject(methodTypeParameter.getManager(),methodTypeParameter.getResolveScope()));
    superSupers.remove(PsiType.getJavaLangObject(superTypeParameter.getManager(),superTypeParameter.getResolveScope()));
    if (!methodSupers.equals(superSupers))     return null;
  }
  return result;
}
