{
  int y=visualLineToY(pos.line);
  float x=pos.line == 0 ? myView.getPrefixTextWidthInPixels() : 0;
  int column=pos.column;
  if (pos.line < myDocument.getLineCount() && (column > 0 || leanTowardsLargerColumns)) {
    LineLayout lineLayout=myView.getLineLayout(pos.line);
    int lastEndOffset=0;
    for (    LineLayout.Fragment fragment : lineLayout.getFragmentsInVisualOrder()) {
      column-=fragment.getVisualStartOffset() - lastEndOffset;
      lastEndOffset=fragment.getVisualEndOffset();
      int nextColumn=fragment.isRtl() ? column + fragment.getColumnCount(x) : column - fragment.getColumnCount(x);
      if (column > 0 && nextColumn < 0 || column < 0 && nextColumn > 0 || Math.max(column,nextColumn) == 0 && leanTowardsLargerColumns || Math.min(column,nextColumn) == 0 && !leanTowardsLargerColumns) {
        x=fragment.columnToX(x,Math.abs(column));
        return new Point((int)x,y);
      }
 else {
        column=nextColumn;
        x=fragment.advance(x);
      }
    }
    int lineLength=myDocument.getLineEndOffset(pos.line) - myDocument.getLineStartOffset(pos.line);
    column-=lineLength - lastEndOffset;
  }
  return new Point((int)(spaceColumnsToPixels(column) + x),y);
}
