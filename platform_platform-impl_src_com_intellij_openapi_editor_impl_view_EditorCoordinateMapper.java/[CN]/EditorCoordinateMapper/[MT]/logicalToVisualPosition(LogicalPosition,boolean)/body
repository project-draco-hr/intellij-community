{
  int line=pos.line;
  int column=pos.column;
  int logicalLineCount=myDocument.getLineCount();
  if (line >= logicalLineCount) {
    return new VisualPosition(line - logicalLineCount + myView.getEditor().getVisibleLineCount(),column);
  }
  int offset=logicalPositionToOffset(pos);
  int visualLine=offsetToVisualLine(offset);
  int maxVisualColumn=0;
  int maxLogicalColumn=0;
  for (  VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView,offset)) {
    if (column == 0 && !leanTowardsLargerLogicalColumns && fragment.getStartVisualColumn() == 0 && fragment.getStartLogicalLine() == line) {
      return new VisualPosition(visualLine,0);
    }
    if (fragment.isCollapsedFoldRegion()) {
      int startLogicalLine=fragment.getStartLogicalLine();
      int endLogicalLine=fragment.getEndLogicalLine();
      int startLogicalColumn=fragment.getStartLogicalColumn();
      int endLogicalColumn=fragment.getEndLogicalColumn();
      if ((line > startLogicalLine || line == startLogicalLine && (column > startLogicalColumn || column == startLogicalColumn && leanTowardsLargerLogicalColumns)) && (line < endLogicalLine || line == endLogicalLine && column < endLogicalColumn)) {
        return new VisualPosition(visualLine,fragment.getStartVisualColumn());
      }
      if (line == endLogicalLine && column == endLogicalColumn && !leanTowardsLargerLogicalColumns) {
        return new VisualPosition(visualLine,fragment.getEndVisualColumn());
      }
      maxLogicalColumn=startLogicalLine == endLogicalLine ? Math.max(maxLogicalColumn,endLogicalColumn) : endLogicalColumn;
    }
 else {
      int minColumn=fragment.getMinLogicalColumn();
      int maxColumn=fragment.getMaxLogicalColumn();
      if (line == fragment.getStartLogicalLine() && (column > minColumn && column < maxColumn || column == minColumn && leanTowardsLargerLogicalColumns || column == maxColumn && !leanTowardsLargerLogicalColumns)) {
        return new VisualPosition(visualLine,fragment.logicalToVisualColumn(column));
      }
      maxLogicalColumn=Math.max(maxLogicalColumn,maxColumn);
    }
    maxVisualColumn=fragment.getEndVisualColumn();
  }
  return new VisualPosition(visualLine,column - maxLogicalColumn + maxVisualColumn);
}
