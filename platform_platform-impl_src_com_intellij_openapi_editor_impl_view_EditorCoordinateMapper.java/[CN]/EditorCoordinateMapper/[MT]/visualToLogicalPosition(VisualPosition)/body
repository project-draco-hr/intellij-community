{
  int line=pos.line;
  int column=pos.column;
  int logicalLine=visualToLogicalLine(line);
  if (logicalLine >= myDocument.getLineCount()) {
    return new LogicalPosition(logicalLine,column,pos.leansRight);
  }
  if (column == 0 && !pos.leansRight) {
    return new LogicalPosition(logicalLine,0);
  }
  int offset=myDocument.getLineStartOffset(logicalLine);
  int maxVisualColumn=0;
  int maxLogicalColumn=0;
  for (  VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView,offset)) {
    int minColumn=fragment.getStartVisualColumn();
    int maxColumn=fragment.getEndVisualColumn();
    if (column > minColumn && column < maxColumn || column == minColumn && pos.leansRight || column == maxColumn && !pos.leansRight) {
      return new LogicalPosition(column == maxColumn ? fragment.getEndLogicalLine() : fragment.getStartLogicalLine(),fragment.visualToLogicalColumn(column),fragment.isCollapsedFoldRegion() ? column < maxColumn : fragment.isRtl() ^ pos.leansRight);
    }
    maxLogicalColumn=logicalLine == fragment.getEndLogicalLine() ? Math.max(maxLogicalColumn,fragment.getMaxLogicalColumn()) : fragment.getMaxLogicalColumn();
    maxVisualColumn=maxColumn;
    logicalLine=fragment.getEndLogicalLine();
  }
  return new LogicalPosition(logicalLine,column - maxVisualColumn + maxLogicalColumn,true);
}
