{
  myAlarm=new Alarm(application);
  projectManager.addProjectManagerListener(new ProjectManagerAdapter(){
    public void projectOpened(    final Project project){
      myAlarm.cancelAllRequests();
    }
    public void projectClosed(    final Project project){
      myAlarm.cancelAllRequests();
      myAlarm.addRequest(new Runnable(){
        public void run(){
          final IdeFrameImpl frame;
          final Window window=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusedWindow();
          if (window instanceof IdeFrameImpl) {
            frame=(IdeFrameImpl)window;
          }
 else {
            frame=(IdeFrameImpl)SwingUtilities.getAncestorOfClass(IdeFrameImpl.class,window);
          }
          if (frame != null) {
            final Application app=ApplicationManager.getApplication();
            if (app != null && app.isActive()) {
              StatusBar statusBar=frame.getStatusBar();
              if (statusBar != null)               ((JComponent)statusBar).requestFocus();
            }
          }
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              ReflectionUtil.resetStaticField(KeyboardFocusManager.class,"newFocusOwner");
              final KeyboardFocusManager focusManager=KeyboardFocusManager.getCurrentKeyboardFocusManager();
              resetField(focusManager,Component.class,"realOppositeComponent");
              resetField(focusManager,Window.class,"realOppositeWindow");
              try {
                Object helperObject=ReflectionUtil.getStaticFieldValue(BasicPopupMenuUI.class,Object.class,"menuKeyboardHelper");
                if (helperObject != null) {
                  resetField(helperObject,Component.class,"lastFocused");
                }
              }
 catch (              Exception e) {
              }
              try {
                DragGestureRecognizer recognizer=ReflectionUtil.getStaticFieldValue(TransferHandler.class,DragGestureRecognizer.class,"recognizer");
                if (recognizer != null) {
                  recognizer.setComponent(null);
                }
              }
 catch (              Exception e) {
              }
              try {
                fixJTextComponentMemoryLeak();
              }
 catch (              Exception e) {
              }
              focusManager.setGlobalCurrentFocusCycleRoot(null);
              try {
                final Method m=ReflectionUtil.getDeclaredMethod(KeyboardFocusManager.class,"setGlobalFocusOwner",Component.class);
                m.invoke(focusManager,new Object[]{null});
              }
 catch (              Exception e) {
              }
              ReflectionUtil.resetStaticField(KeyboardFocusManager.class,"newFocusOwner");
              ReflectionUtil.resetStaticField(KeyboardFocusManager.class,"permanentFocusOwner");
              ReflectionUtil.resetStaticField(KeyboardFocusManager.class,"currentFocusCycleRoot");
            }
          }
);
        }
      }
,2500);
    }
  }
);
  if (SystemInfo.isMac) {
    Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener(){
      private Field nativeAXResource_Field=null;
      private Field accessibleContext_Field=null;
{
        try {
          nativeAXResource_Field=ReflectionUtil.findField(AccessibleContext.class,Object.class,"nativeAXResource");
          accessibleContext_Field=ReflectionUtil.findField(Component.class,AccessibleContext.class,"accessibleContext");
        }
 catch (        NoSuchFieldException ignored) {
        }
      }
      @Override public void eventDispatched(      AWTEvent event){
        if (!Registry.is("ide.mac.fix.accessibleLeak"))         return;
        HierarchyEvent he=(HierarchyEvent)event;
        if ((he.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) > 0) {
          if (he.getComponent() != null && !he.getComponent().isShowing()) {
            Component c=he.getComponent();
            if (c instanceof JTextComponent) {
              JTextComponent textComponent=(JTextComponent)c;
              CaretListener[] carets=textComponent.getListeners(CaretListener.class);
              for (              CaretListener each : carets) {
                if (isCAccessibleListener(each)) {
                  textComponent.removeCaretListener(each);
                }
              }
              Document document=textComponent.getDocument();
              if (document instanceof AbstractDocument) {
                DocumentListener[] documentListeners=((AbstractDocument)document).getDocumentListeners();
                for (                DocumentListener each : documentListeners) {
                  if (isCAccessibleListener(each)) {
                    document.removeDocumentListener(each);
                  }
                }
              }
            }
 else             if (c instanceof JProgressBar) {
              JProgressBar bar=(JProgressBar)c;
              ChangeListener[] changeListeners=bar.getChangeListeners();
              for (              ChangeListener each : changeListeners) {
                if (isCAccessibleListener(each)) {
                  bar.removeChangeListener(each);
                }
              }
            }
 else             if (c instanceof JSlider) {
              JSlider slider=(JSlider)c;
              ChangeListener[] changeListeners=slider.getChangeListeners();
              for (              ChangeListener each : changeListeners) {
                if (isCAccessibleListener(each)) {
                  slider.removeChangeListener(each);
                }
              }
            }
            if (accessibleContext_Field != null && nativeAXResource_Field != null) {
              try {
                AccessibleContext ac=(AccessibleContext)accessibleContext_Field.get(c);
                if (ac != null) {
                  ac=c.getAccessibleContext();
                  if (ac != null) {
                    Object resource=nativeAXResource_Field.get(ac);
                    if (resource != null && isCAccessible(resource)) {
                      Field accessible=ReflectionUtil.findField(resource.getClass(),Accessible.class,"accessible");
                      accessible.set(resource,null);
                    }
                  }
                }
              }
 catch (              Exception ignored) {
              }
            }
          }
        }
      }
    }
,AWTEvent.HIERARCHY_EVENT_MASK);
  }
}
