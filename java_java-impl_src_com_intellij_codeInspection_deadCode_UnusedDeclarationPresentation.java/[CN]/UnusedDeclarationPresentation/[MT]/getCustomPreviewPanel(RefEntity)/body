{
  final Project project=entity.getRefManager().getProject();
  JEditorPane htmlView=new JEditorPane(){
    @Override public String getToolTipText(    MouseEvent evt){
      int pos=viewToModel(evt.getPoint());
      if (pos >= 0) {
        HTMLDocument hdoc=(HTMLDocument)getDocument();
        javax.swing.text.Element e=hdoc.getCharacterElement(pos);
        AttributeSet a=e.getAttributes();
        SimpleAttributeSet value=(SimpleAttributeSet)a.getAttribute(HTML.Tag.A);
        if (value != null) {
          String objectPackage=(String)value.getAttribute("qualifiedname");
          if (objectPackage != null) {
            return objectPackage;
          }
        }
      }
      return null;
    }
  }
;
  htmlView.setContentType(UIUtil.HTML_MIME);
  htmlView.setEditable(false);
  htmlView.setOpaque(false);
  htmlView.addHyperlinkListener(new HyperlinkAdapter(){
    @Override protected void hyperlinkActivated(    HyperlinkEvent e){
      URL url=e.getURL();
      if (url == null) {
        return;
      }
      @NonNls String ref=url.getRef();
      int offset=Integer.parseInt(ref);
      String fileURL=url.toExternalForm();
      fileURL=fileURL.substring(0,fileURL.indexOf('#'));
      VirtualFile vFile=VirtualFileManager.getInstance().findFileByUrl(fileURL);
      if (vFile == null) {
        vFile=VfsUtil.findFileByURL(url);
      }
      if (vFile != null) {
        final OpenFileDescriptor descriptor=new OpenFileDescriptor(project,vFile,offset);
        FileEditorManager.getInstance(project).openTextEditor(descriptor,true);
      }
    }
  }
);
  final StyleSheet css=((HTMLEditorKit)htmlView.getEditorKit()).getStyleSheet();
  css.addRule("p.problem-description-group {text-indent: " + JBUI.scale(9) + "px;font-weight:bold;}");
  css.addRule("div.problem-description {margin-left: " + JBUI.scale(9) + "px;}");
  css.addRule("ul {margin-left:" + JBUI.scale(10) + "px;text-indent: 0}");
  css.addRule("code {font-family:" + UIUtil.getLabelFont().getFamily() + "}");
  final StringBuffer buf=new StringBuffer();
  getComposer().compose(buf,entity,false);
  final String text=buf.toString();
  SingleInspectionProfilePanel.readHTML(htmlView,SingleInspectionProfilePanel.toHTML(htmlView,text,false));
  return ScrollPaneFactory.createScrollPane(htmlView,true);
}
