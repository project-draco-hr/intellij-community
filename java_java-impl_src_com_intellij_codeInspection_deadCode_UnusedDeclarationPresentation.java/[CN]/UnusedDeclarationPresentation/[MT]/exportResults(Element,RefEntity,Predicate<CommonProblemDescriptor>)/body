{
  if (!(refEntity instanceof RefJavaElement))   return;
  final RefFilter filter=getFilter();
  if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement)refEntity)) {
    refEntity=getRefManager().getRefinedElement(refEntity);
    if (!refEntity.isValid())     return;
    RefJavaElement refElement=(RefJavaElement)refEntity;
    if (!compareVisibilities(refElement,getTool().getSharedLocalInspectionTool()))     return;
    if (getTool().isEntryPoint(refElement))     return;
    Element element=refEntity.getRefManager().export(refEntity,parentNode,-1);
    if (element == null)     return;
    @NonNls Element problemClassElement=new Element(InspectionsBundle.message("inspection.export.results.problem.element.tag"));
    final HighlightSeverity severity=getSeverity(refElement);
    final String attributeKey=getTextAttributeKey(refElement.getRefManager().getProject(),severity,ProblemHighlightType.LIKE_UNUSED_SYMBOL);
    problemClassElement.setAttribute("severity",severity.myName);
    problemClassElement.setAttribute("attribute_key",attributeKey);
    problemClassElement.addContent(InspectionsBundle.message("inspection.export.results.dead.code"));
    element.addContent(problemClassElement);
    @NonNls Element hintsElement=new Element("hints");
    for (    UnusedDeclarationHint hint : UnusedDeclarationHint.values()) {
      @NonNls Element hintElement=new Element("hint");
      hintElement.setAttribute("value",hint.toString().toLowerCase());
      hintsElement.addContent(hintElement);
    }
    element.addContent(hintsElement);
    Element descriptionElement=new Element(InspectionsBundle.message("inspection.export.results.description.tag"));
    StringBuffer buf=new StringBuffer();
    DeadHTMLComposer.appendProblemSynopsis((RefElement)refEntity,buf);
    descriptionElement.addContent(buf.toString());
    element.addContent(descriptionElement);
  }
  super.exportResults(parentNode,refEntity,excludedDescriptions);
}
