{
  return new JavaElementVisitor(){
    @Override public void visitMethodReferenceExpression(    PsiMethodReferenceExpression expression){
      PsiExpression qualifierExpression=expression.getQualifierExpression();
      PsiElement referenceNameElement=expression.getReferenceNameElement();
      if (!(qualifierExpression instanceof PsiReferenceExpressionBase) || referenceNameElement == null) {
        return;
      }
      String name=referenceNameElement.getText();
      if (!name.equals("min") && !name.equals("max")) {
        return;
      }
      PsiType functionalInterfaceType=expression.getFunctionalInterfaceType();
      if (!(functionalInterfaceType instanceof PsiClassType)) {
        return;
      }
      PsiClass targetType=((PsiClassType)functionalInterfaceType).resolve();
      if (targetType == null) {
        return;
      }
      String targetClassName=targetType.getQualifiedName();
      if (targetClassName == null || !targetClassName.equals(CommonClassNames.JAVA_UTIL_COMPARATOR)) {
        return;
      }
      PsiElement refType=((PsiReference)qualifierExpression).resolve();
      if (!(refType instanceof PsiClass)) {
        return;
      }
      String className=((PsiClass)refType).getQualifiedName();
      if (className == null || (!className.equals(CommonClassNames.JAVA_LANG_INTEGER) && !className.equals(Math.class.getName()))) {
        return;
      }
      holder.registerProblem(expression,"Method reference mapped to Comparator interface does not fulfill the Comparator contract",new ReplaceWithComparatorQuickFix(name.equals("min")));
    }
  }
;
}
