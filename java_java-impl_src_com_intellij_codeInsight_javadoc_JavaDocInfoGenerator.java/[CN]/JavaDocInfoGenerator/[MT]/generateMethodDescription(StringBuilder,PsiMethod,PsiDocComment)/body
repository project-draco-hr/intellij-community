{
  final DocTagLocator<PsiElement[]> descriptionLocator=new DocTagLocator<PsiElement[]>(){
    @Override public PsiElement[] find(    PsiDocCommentOwner owner,    PsiDocComment comment){
      return comment != null && !isEmptyDescription(comment) ? comment.getDescriptionElements() : null;
    }
  }
;
  if (comment != null && !isEmptyDescription(comment)) {
    generateValue(buffer,comment.getDescriptionElements(),new InheritDocProvider<PsiElement[]>(){
      @Override public Pair<PsiElement[],InheritDocProvider<PsiElement[]>> getInheritDoc(){
        return findInheritDocTag(method,descriptionLocator);
      }
      @Override public PsiClass getElement(){
        return method.getContainingClass();
      }
    }
);
    return;
  }
  Pair<PsiElement[],InheritDocProvider<PsiElement[]>> pair=findInheritDocTag(method,descriptionLocator);
  if (pair != null) {
    PsiElement[] elements=pair.first;
    if (elements != null) {
      PsiClass aClass=pair.second.getElement();
      buffer.append("<DD><DL>");
      buffer.append("<DT><b>");
      buffer.append(CodeInsightBundle.message(aClass.isInterface() ? "javadoc.description.copied.from.interface" : "javadoc.description.copied.from.class"));
      buffer.append("</b>&nbsp;");
      generateLink(buffer,aClass,JavaDocUtil.getShortestClassName(aClass,method),false);
      buffer.append(BR_TAG);
      generateValue(buffer,elements,pair.second);
      buffer.append("</DD></DL></DD>");
    }
  }
}
