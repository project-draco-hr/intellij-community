{
  String referenceName=qualifier.getReferenceName();
  if (referenceName == null)   return Collections.emptySet();
  PrefixMatcher qualifierMatcher=new CamelHumpMatcher(referenceName);
  ElementFilter filter=JavaCompletionContributor.getReferenceFilter(parameters.getPosition());
  if (filter == null)   return Collections.emptySet();
  Set<LookupElement> variants=completeReference(qualifier,qualifier,filter,parameters,qualifierMatcher);
  PsiShortNamesCache namesCache=PsiShortNamesCache.getInstance(qualifier.getProject());
  for (  PsiClass aClass : namesCache.getClassesByName(referenceName,qualifier.getResolveScope())) {
    variants.add(JavaClassNameCompletionContributor.createClassLookupItem(aClass,true));
  }
  if (!variants.isEmpty())   return variants;
  Set<LookupElement> allClasses=new LinkedHashSet<LookupElement>();
  CompletionParameters qualifierParameters=parameters.withPosition(qualifier.getReferenceNameElement(),qualifier.getTextRange().getEndOffset());
  JavaClassNameCompletionContributor.addAllClasses(qualifierParameters,true,qualifierMatcher,new CollectConsumer<LookupElement>(allClasses));
  return allClasses;
}
