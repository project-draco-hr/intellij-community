{
  PsiElement position=parameters.getPosition(), parent=position.getParent();
  if ((!(parent instanceof PsiJavaCodeReferenceElement)))   return;
  if (executionContext.insideCodeFragment)   return;
  PsiElement qualifier=((PsiJavaCodeReferenceElement)parent).getQualifier();
  if (!(qualifier instanceof PsiJavaCodeReferenceElement))   return;
  PsiJavaCodeReferenceElement qualifierReference=(PsiJavaCodeReferenceElement)qualifier;
  if (qualifierReference.isQualified())   return;
  PsiElement target=qualifierReference.resolve();
  if (target != null && !(target instanceof PsiPackage))   return;
  int startOffset=parent.getTextRange().getStartOffset();
  String fullPrefix=parent.getText().substring(0,parameters.getOffset() - startOffset);
  CompletionResultSet filteredResultSet=resultSet.withPrefixMatcher(fullPrefix);
  PostfixTemplatesService templatesService=PostfixTemplatesService.getInstance();
  if (templatesService == null) {
    return;
  }
  for (  LookupElement qualifierElement : suggestQualifierItems(parameters,qualifierReference)) {
    PsiType type=JavaCompletionUtil.getLookupElementType(qualifierElement);
    if (type == null || PsiType.VOID == type)     continue;
    final PsiReferenceExpression mockReference=ReferenceExpressionCompletionContributor.createMockReference(position,type,qualifierElement);
    if (mockReference == null)     continue;
    final PsiElement mockReferenceQualifier=mockReference.getQualifier();
    if (mockReferenceQualifier == null)     continue;
    PostfixTemplateContext mockTemplateContext=new PostfixTemplateContext((PsiJavaCodeReferenceElement)parent,qualifierReference,executionContext){
      @NotNull @Override protected List<PrefixExpressionContext> buildExpressionContexts(      @NotNull PsiElement reference,      @NotNull PsiElement expression){
        return Collections.<PrefixExpressionContext>singletonList(new PrefixExpressionContext(this,expression){
          @Nullable @Override protected PsiType calculateExpressionType(          @NotNull PsiElement expression){
            return super.calculateExpressionType(mockReferenceQualifier);
          }
          @Nullable @Override protected PsiElement calculateReferencedElement(          @NotNull PsiElement expression){
            return super.calculateReferencedElement(mockReferenceQualifier);
          }
        }
);
      }
      @NotNull @Override public PrefixExpressionContext fixExpression(      @NotNull PrefixExpressionContext context){
        return context;
      }
    }
;
    for (    LookupElement postfixElement : templatesService.collectTemplates(mockTemplateContext)) {
      PostfixChainLookupElement chainedPostfix=new PostfixChainLookupElement(qualifierElement,postfixElement);
      PrefixMatcher prefixMatcher=new CamelHumpMatcher(fullPrefix);
      boolean b=prefixMatcher.prefixMatches(chainedPostfix);
      filteredResultSet.addElement(chainedPostfix);
    }
  }
}
