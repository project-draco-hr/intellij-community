{
  super(project,true);
  myWorker=worker;
  myProjectSettings=GithubProjectSettings.getInstance(project);
  myPanel=new GithubCreatePullRequestPanel();
  myPanel.getShowDiffButton().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myWorker.showDiffDialog(myPanel.getSelectedBranch());
    }
  }
);
  myPanel.getSelectForkButton().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ForkInfo fork=myWorker.showTargetDialog();
      if (fork != null) {
        myPanel.setForks(myWorker.getForks());
        myPanel.setSelectedFork(fork.getPath());
      }
    }
  }
);
  myPanel.getForkComboBox().addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.DESELECTED) {
        myPanel.setBranches(Collections.<BranchInfo>emptyList());
      }
      if (e.getStateChange() == ItemEvent.SELECTED) {
        final ForkInfo fork=(ForkInfo)e.getItem();
        if (fork == null)         return;
        myPanel.setBranches(fork.getBranches());
        myPanel.setSelectedBranch(fork.getDefaultBranch());
        if (fork.getRemoteName() == null && !fork.isProposedToCreateRemote()) {
          if (Messages.YES == GithubNotifications.showYesNoDialog(project,"Can't Find Remote","Configure remote for '" + fork.getPath().getUser() + "'?",new CreateRemoteDoNotAskOption())) {
            myWorker.configureRemote(fork);
          }
          fork.setProposedToCreateRemote(true);
        }
        if (fork.getRemoteName() == null) {
          myPanel.setDiffEnabled(false);
        }
 else {
          myPanel.setDiffEnabled(true);
          myWorker.launchFetchRemote(fork);
        }
      }
    }
  }
);
  myPanel.getBranchComboBox().addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        BranchInfo branch=(BranchInfo)e.getItem();
        if (branch == null)         return;
        if (branch.getForkInfo().getRemoteName() != null) {
          if (branch.getDiffInfoTask() != null && branch.getDiffInfoTask().isDone() && branch.getDiffInfoTask().safeGet() == null) {
            myPanel.setDiffEnabled(false);
          }
 else {
            myPanel.setDiffEnabled(true);
          }
        }
        if (myPanel.isTitleDescriptionEmptyOrNotModified()) {
          Pair<String,String> description=myWorker.getDefaultDescriptionMessage(branch);
          myPanel.setTitle(description.getFirst());
          myPanel.setDescription(description.getSecond());
        }
        if (branch.getForkInfo().getRemoteName() != null) {
          myWorker.launchLoadDiffInfo(branch);
        }
      }
    }
  }
);
  myPanel.setForks(myWorker.getForks());
  myPanel.setSelectedFork(myProjectSettings.getCreatePullRequestDefaultRepo());
  myPanel.setSelectedBranch(myProjectSettings.getCreatePullRequestDefaultBranch());
  setTitle("Create Pull Request - " + myWorker.getCurrentBranch());
  init();
}
