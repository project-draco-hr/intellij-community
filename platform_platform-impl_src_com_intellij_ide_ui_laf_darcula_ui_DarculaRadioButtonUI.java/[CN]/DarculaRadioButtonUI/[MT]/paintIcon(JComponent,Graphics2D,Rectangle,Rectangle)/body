{
  Insets i=c.getInsets();
  viewRect.x+=i.left;
  viewRect.y+=i.top;
  viewRect.width-=(i.right + viewRect.x);
  viewRect.height-=(i.bottom + viewRect.y);
  int rad=JBUI.scale(5);
  final int x=iconRect.x + (rad - (rad % 2 == 1 ? 1 : 0)) / 2;
  final int y=iconRect.y + (rad - (rad % 2 == 1 ? 1 : 0)) / 2;
  final int w=iconRect.width - rad;
  final int h=iconRect.height - rad;
  g.translate(x,y);
  final JBGradientPaint ijGradient=new JBGradientPaint(c,new Color(0x4985e4),new Color(0x4074c9));
  final GraphicsConfig config=GraphicsUtil.setupAAPainting(g);
  final boolean focus=c.hasFocus();
  final boolean selected=((AbstractButton)c).isSelected();
  if (UIUtil.isUnderDarcula() || !selected) {
    g.setPaint(UIUtil.getGradientPaint(0,0,ColorUtil.shift(c.getBackground(),1.5),0,c.getHeight(),ColorUtil.shift(c.getBackground(),1.2)));
  }
 else {
    g.setPaint(ijGradient);
  }
  if (!UIUtil.isUnderDarcula() && selected) {
    final GraphicsConfig fillOvalConf=new GraphicsConfig(g);
    g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_PURE);
    g.fillOval(0,1,w,h);
    fillOvalConf.restore();
  }
 else {
    if (focus) {
      g.fillOval(0,JBUI.scale(1),w,h);
    }
 else {
      g.fillOval(0,JBUI.scale(1),w - JBUI.scale(1),h - JBUI.scale(1));
    }
  }
  if (focus) {
    if (UIUtil.isRetina() || JBUI.isHiDPI()) {
      DarculaUIUtil.paintFocusOval(g,JBUI.scale(1),JBUI.scale(1) + 1,w - JBUI.scale(2),h - JBUI.scale(2));
    }
 else {
      DarculaUIUtil.paintFocusOval(g,0,JBUI.scale(1),w,h);
    }
  }
 else {
    if (UIUtil.isUnderDarcula()) {
      g.setPaint(UIUtil.getGradientPaint(w / 2,1,Gray._160.withAlpha(90),w / 2,h,Gray._100.withAlpha(90)));
      g.drawOval(0,JBUI.scale(1) + 1,w - 1,h - 1);
      g.setPaint(Gray._40.withAlpha(200));
      g.drawOval(0,JBUI.scale(1),w - 1,h - 1);
    }
 else {
      g.setPaint(selected ? ijGradient : c.isEnabled() ? Gray._30 : Gray._130);
      if (!selected) {
        g.drawOval(0,JBUI.scale(1),w - 1,h - 1);
      }
    }
  }
  if (selected) {
    final boolean enabled=c.isEnabled();
    g.setColor(UIManager.getColor(enabled ? "RadioButton.darcula.selectionEnabledShadowColor" : "RadioButton.darcula.selectionDisabledShadowColor"));
    final int yOff=1 + JBUI.scale(1);
    g.fillOval(w / 2 - rad / 2,h / 2 - rad / 2 + yOff,rad,rad);
    g.setColor(UIManager.getColor(enabled ? "RadioButton.darcula.selectionEnabledColor" : "RadioButton.darcula.selectionDisabledColor"));
    g.fillOval(w / 2 - rad / 2,h / 2 - rad / 2 - 1 + yOff,rad,rad);
  }
  config.restore();
  g.translate(-x,-y);
}
