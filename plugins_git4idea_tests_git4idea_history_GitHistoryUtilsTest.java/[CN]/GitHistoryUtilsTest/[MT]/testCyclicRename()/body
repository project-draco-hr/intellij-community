{
  List<TestCommit> commits=new ArrayList<>();
  File source=mkdir("source");
  File initialFile=touch("source/PostHighlightingPass.java","Initial content");
  String initMessage="Created PostHighlightingPass.java in source";
  addCommit(initMessage);
  String hash=last();
  commits.add(new TestCommit(hash,initMessage,initialFile.getPath()));
  String filePath=initialFile.getPath();
  commits.add(modify(filePath));
  TestCommit commit=move(filePath,mkdir("codeInside-impl"),"Moved from source to codeInside-impl");
  filePath=commit.myPath;
  commits.add(commit);
  commits.add(modify(filePath));
  commit=move(filePath,mkdir("codeInside"),"Moved from codeInside-impl to codeInside");
  filePath=commit.myPath;
  commits.add(commit);
  commits.add(modify(filePath));
  commit=move(filePath,mkdir("lang-impl"),"Moved from codeInside to lang-impl");
  filePath=commit.myPath;
  commits.add(commit);
  commits.add(modify(filePath));
  commit=move(filePath,source,"Moved from lang-impl back to source");
  filePath=commit.myPath;
  commits.add(commit);
  commits.add(modify(filePath));
  commit=move(filePath,mkdir("java"),"Moved from source to java");
  filePath=commit.myPath;
  commits.add(commit);
  commits.add(modify(filePath));
  Collections.reverse(commits);
  VirtualFile vFile=VcsUtil.getVirtualFileWithRefresh(new File(filePath));
  assertNotNull(vFile);
  List<VcsFileRevision> history=GitHistoryUtils.history(myProject,VcsUtil.getFilePath(vFile));
  assertEquals("History size doesn't match. Actual history: \n" + toReadable(history),commits.size(),history.size());
  assertEquals("History is different.",toReadable(commits),toReadable(history));
}
