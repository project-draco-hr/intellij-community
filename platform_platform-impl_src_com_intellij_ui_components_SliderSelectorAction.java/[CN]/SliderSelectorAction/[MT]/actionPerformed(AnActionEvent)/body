{
  final JPanel result=new JPanel(new BorderLayout());
  final JLabel label=new JLabel(myConfiguration.getSelectText());
  label.setBorder(BorderFactory.createEmptyBorder(4,4,0,0));
  JPanel wrapper=new JPanel(new BorderLayout());
  wrapper.add(label,BorderLayout.NORTH);
  result.add(wrapper,BorderLayout.WEST);
  final JSlider slider=new JSlider(SwingConstants.HORIZONTAL,myConfiguration.getMin(),myConfiguration.getMax(),myConfiguration.getSelected());
  slider.setMinorTickSpacing(1);
  slider.setPaintTicks(true);
  slider.setPaintTrack(true);
  slider.setSnapToTicks(true);
  UIUtil.setSliderIsFilled(slider,true);
  slider.setPaintLabels(true);
  slider.setLabelTable(myConfiguration.getDictionary());
  result.add(slider,BorderLayout.CENTER);
  final Runnable[] closeMe=new Runnable[1];
  if (myConfiguration.isShowOk()) {
    final JButton done=new JButton("Done");
    result.add(SwingHelper.wrapWithoutStretch(done),BorderLayout.SOUTH);
    done.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        if (closeMe[0] != null)         closeMe[0].run();
      }
    }
);
  }
  final JBPopup popup=JBPopupFactory.getInstance().createComponentPopupBuilder(result,slider).setMovable(true).createPopup();
  final Runnable finalRunnable=new Runnable(){
    @Override public void run(){
      int value=slider.getModel().getValue();
      myConfiguration.getResultConsumer().consume(value);
    }
  }
;
  closeMe[0]=new Runnable(){
    @Override public void run(){
      finalRunnable.run();
      popup.closeOk(null);
    }
  }
;
  popup.setFinalRunnable(finalRunnable);
  InputEvent inputEvent=e.getInputEvent();
  show(e,result,popup,inputEvent);
}
