{
  MouseEvent me=e;
  Set<RangeHighlighter> highlighters=new THashSet<RangeHighlighter>();
  getNearestHighlighters(this,me,width,highlighters);
  getNearestHighlighters((MarkupModelEx)DocumentMarkupModel.forDocument(myEditor.getDocument(),getEditor().getProject(),true),me,width,highlighters);
  int minDelta=Integer.MAX_VALUE;
  int y=e.getY();
  for (  RangeHighlighter each : highlighters) {
    ProperTextRange range=offsetsToYPositions(each.getStartOffset(),each.getEndOffset());
    int eachStartY=range.getStartOffset();
    int eachEndY=range.getEndOffset();
    int eachY=eachStartY + (eachEndY - eachStartY) / 2;
    if (Math.abs(e.getY() - eachY) < minDelta) {
      y=eachY;
    }
  }
  me=new MouseEvent((Component)e.getSource(),e.getID(),e.getWhen(),e.getModifiers(),e.getX(),y + 1,e.getClickCount(),e.isPopupTrigger());
  boolean bigEditorView=false;
  TooltipRenderer bigRenderer=null;
  if (ApplicationManager.getApplication().isInternal()) {
    int line=myEditor.offsetToLogicalLine(yPositionToOffset(y,true));
    int startOffset=myEditor.logicalPositionToOffset(new LogicalPosition(Math.max(0,line - getMinHeight()),0));
    LogicalPosition endPosition=new LogicalPosition(Math.max(0,line + getMinHeight()),0);
    int endOffset=myEditor.logicalPositionToOffset(endPosition);
    Rectangle rect=myEditor.getScrollingModel().getVisibleArea();
    Point point=myEditor.visualPositionToXY(myEditor.offsetToVisualPosition(startOffset));
    bigEditorView=!rect.contains(point);
    if (bigEditorView) {
      getNearestHighlighters(this,me,width,highlighters,false);
      getNearestHighlighters((MarkupModelEx)DocumentMarkupModel.forDocument(myEditor.getDocument(),getEditor().getProject(),true),me,width,highlighters,false);
      bigRenderer=new MyTooltipRenderer(new DocumentFragment(myEditor.getDocument(),startOffset,endOffset),highlighters);
    }
  }
  if (!bigEditorView) {
    if (highlighters.isEmpty())     return false;
    bigRenderer=myTooltipRendererProvider.calcTooltipRenderer(highlighters);
  }
  if (bigRenderer != null) {
    showTooltip(me,bigRenderer,new HintHint(me).setAwtTooltip(true).setPreferredPosition(Balloon.Position.atLeft));
    return true;
  }
  return false;
}
