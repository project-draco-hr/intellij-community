{
  MouseEvent me=new MouseEvent(e.getComponent(),e.getID(),e.getWhen(),e.getModifiers(),0,e.getY() + 1,e.getClickCount(),e.isPopupTrigger());
  final int line=getLineByEvent(e);
  Rectangle area=myEditor.getScrollingModel().getVisibleArea();
  int realY=myEditor.getLineHeight() * line;
  boolean isVisible=area.contains(area.x,realY);
  TooltipRenderer bigRenderer;
  if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(),EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) {
    final Set<RangeHighlighter> highlighters=new THashSet<RangeHighlighter>();
    getNearestHighlighters(this,me.getY(),highlighters);
    getNearestHighlighters((MarkupModelEx)DocumentMarkupModel.forDocument(myEditor.getDocument(),getEditor().getProject(),true),me.getY(),highlighters);
    if (highlighters.isEmpty())     return false;
    int y=e.getY();
    RangeHighlighter nearest=getNearestRangeHighlighter(e);
    if (nearest != null) {
      ProperTextRange range=offsetsToYPositions(nearest.getStartOffset(),nearest.getEndOffset());
      int eachStartY=range.getStartOffset();
      int eachEndY=range.getEndOffset();
      y=eachStartY + (eachEndY - eachStartY) / 2;
    }
    me=new MouseEvent(e.getComponent(),e.getID(),e.getWhen(),e.getModifiers(),me.getX(),y + 1,e.getClickCount(),e.isPopupTrigger());
    bigRenderer=myTooltipRendererProvider.calcTooltipRenderer(highlighters);
    if (bigRenderer != null) {
      HintHint hint=new HintHint(me).setAwtTooltip(true).setPreferredPosition(Balloon.Position.atLeft).setShowImmediately(true).setAnimationEnabled(false);
      showTooltip(me,bigRenderer,hint);
      return true;
    }
    return false;
  }
 else {
    me=new MouseEvent(me.getComponent(),me.getID(),me.getWhen(),me.getModifiers(),me.getX(),me.getY() + myRowAdjuster,me.getClickCount(),me.isPopupTrigger());
    final List<RangeHighlighterEx> highlighters=new ArrayList<RangeHighlighterEx>();
    collectRangeHighlighters(this,line,highlighters);
    collectRangeHighlighters((MarkupModelEx)DocumentMarkupModel.forDocument(myEditor.getDocument(),getEditor().getProject(),true),line,highlighters);
    myEditorFragmentRenderer.update(line,highlighters);
    HintHint hint=new HintHint(me).setAwtTooltip(true).setPreferredPosition(Balloon.Position.atLeft).setShowImmediately(true).setAnimationEnabled(false);
    myEditorFragmentRenderer.show(myEditor,me.getPoint(),true,ERROR_STRIPE_TOOLTIP_GROUP,hint);
    return true;
  }
}
