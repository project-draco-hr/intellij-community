{
  int startOffset=myEditor.getDocument().getLineStartOffset(Math.max(0,currentLine - myPreviewLines));
  int endOffset=myEditor.getDocument().getLineEndOffset(Math.min(myEditor.getDocument().getLineCount() - 1,currentLine + myPreviewLines));
  markupModel.processRangeHighlightersOverlappingWith(startOffset,endOffset,new Processor<RangeHighlighterEx>(){
    @Override public boolean process(    RangeHighlighterEx highlighter){
      if (highlighter.getErrorStripeMarkColor() != null) {
        int startLine=offsetToLine(highlighter.getStartOffset(),myEditor.getDocument());
        int endLine=offsetToLine(highlighter.getStartOffset(),myEditor.getDocument());
        if (startLine <= currentLine + myPreviewLines && endLine >= currentLine - myPreviewLines) {
          highlighters.add(highlighter);
        }
      }
      return true;
    }
  }
);
}
