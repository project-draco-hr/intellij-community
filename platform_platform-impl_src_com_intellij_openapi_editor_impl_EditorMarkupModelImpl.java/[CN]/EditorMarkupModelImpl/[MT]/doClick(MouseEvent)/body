{
  RangeHighlighter marker=getNearestRangeHighlighter(e);
  int offset;
  if (marker == null) {
    if (myEditorPreviewHint != null) {
      offset=myEditor.getDocument().getLineEndOffset(getLineByEvent(e));
    }
 else {
      return;
    }
  }
 else {
    offset=marker.getStartOffset();
  }
  final Document doc=myEditor.getDocument();
  if (doc.getLineCount() > 0) {
    int lineEnd=doc.getLineEndOffset(doc.getLineNumber(offset));
    myEditor.getCaretModel().moveToOffset(lineEnd);
  }
  myEditor.getCaretModel().moveToOffset(offset);
  myEditor.getSelectionModel().removeSelection();
  ScrollingModel scrollingModel=myEditor.getScrollingModel();
  scrollingModel.disableAnimation();
  if (myEditorPreviewHint != null) {
    JComponent c=myEditorPreviewHint.getComponent();
    int relativePopupOffset=SwingUtilities.convertPoint(c,c.getLocation(),myEditor.getScrollPane()).y;
    relativePopupOffset+=myEditor.getLineHeight() * myPreviewLines;
    scrollingModel.scrollToCaret(ScrollType.CENTER);
    Point caretLocation=myEditor.visualPositionToXY(myEditor.getCaretModel().getVisualPosition()).getLocation();
    caretLocation=SwingUtilities.convertPoint(myEditor.getContentComponent(),caretLocation,myEditor.getScrollPane());
    scrollingModel.scrollVertically(scrollingModel.getVerticalScrollOffset() - (relativePopupOffset - caretLocation.y));
  }
 else {
    scrollingModel.scrollToCaret(ScrollType.CENTER);
  }
  scrollingModel.enableAnimation();
  if (marker != null) {
    fireErrorMarkerClicked(marker,e);
  }
}
