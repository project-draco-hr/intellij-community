{
  final HintManagerImpl hintManager=HintManagerImpl.getInstanceImpl();
  if (myEditorPreviewHint == null) {
    final JPanel editorFragmentPreviewPanel=new JPanel(){
      private static final int R=6;
      private static final int LEFT_INDENT=BalloonImpl.ARC + 5;
      @Override public Dimension getPreferredSize(){
        int width=myEditor.getGutterComponentEx().getWidth();
        width+=Math.min(myEditor.getScrollingModel().getVisibleArea().width,myEditor.getContentComponent().getWidth());
        return new Dimension(width - BalloonImpl.POINTER_WIDTH - LEFT_INDENT,myEditor.getLineHeight() * (myEndLine - myStartLine));
      }
      @Override protected void paintComponent(      Graphics g){
        if (myImage == null) {
          myRelativeY=SwingUtilities.convertPoint(this,0,0,myEditor.getScrollPane()).y;
          Dimension size=getPreferredSize();
          myImage=UIUtil.createImage(size.width,size.height,BufferedImage.TYPE_INT_RGB);
          Graphics2D g2d=myImage.createGraphics();
          AffineTransform transform;
          if (UIUtil.isRetina()) {
            transform=AffineTransform.getScaleInstance(2,2);
          }
 else {
            transform=AffineTransform.getScaleInstance(1,1);
          }
          UISettings.setupAntialiasing(g2d);
          g2d.setColor(myEditor.getBackgroundColor());
          g2d.fillRect(0,0,getWidth(),getHeight());
          int lineShift=-myEditor.getLineHeight() * myStartLine;
          int popupStartOffset=myEditor.getDocument().getLineStartOffset(myStartLine);
          int popupEndOffset=myEditor.getDocument().getLineEndOffset(myEndLine);
          List<RangeHighlighterEx> exs=new ArrayList<RangeHighlighterEx>();
          for (          RangeHighlighterEx rangeHighlighter : myHighlighters) {
            if (rangeHighlighter.getEndOffset() > popupStartOffset && rangeHighlighter.getStartOffset() < popupEndOffset) {
              exs.add(rangeHighlighter);
            }
          }
          AffineTransform translateInstance=AffineTransform.getTranslateInstance(-LEFT_INDENT,lineShift);
          translateInstance.preConcatenate(transform);
          g2d.setTransform(translateInstance);
          EditorGutterComponentEx gutterComponentEx=myEditor.getGutterComponentEx();
          int width=gutterComponentEx.getWidth();
          g2d.setClip(0,0,width,gutterComponentEx.getHeight());
          gutterComponentEx.paint(g2d);
          JComponent contentComponent=myEditor.getContentComponent();
          g2d.setClip(width,0,contentComponent.getWidth(),contentComponent.getHeight());
          translateInstance=AffineTransform.getTranslateInstance(width - LEFT_INDENT,lineShift);
          translateInstance.preConcatenate(transform);
          g2d.setTransform(translateInstance);
          contentComponent.paint(g2d);
          Collections.sort(exs,new Comparator<RangeHighlighterEx>(){
            public int compare(            RangeHighlighterEx ex1,            RangeHighlighterEx ex2){
              LogicalPosition startPos1=myEditor.offsetToLogicalPosition(ex1.getAffectedAreaStartOffset());
              LogicalPosition startPos2=myEditor.offsetToLogicalPosition(ex2.getAffectedAreaStartOffset());
              if (startPos1.line != startPos2.line)               return 0;
              return startPos1.column - startPos2.column;
            }
          }
);
          TIntIntHashMap rightEdges=new TIntIntHashMap();
          for (          RangeHighlighterEx ex : exs) {
            int hEndOffset=ex.getAffectedAreaEndOffset();
            Object tooltip=ex.getErrorStripeTooltip();
            if (tooltip == null)             continue;
            String s=String.valueOf(tooltip);
            if (s.isEmpty())             continue;
            LogicalPosition logicalPosition=myEditor.offsetToLogicalPosition(hEndOffset);
            int endOfLineOffset=myEditor.getDocument().getLineEndOffset(logicalPosition.line);
            logicalPosition=myEditor.offsetToLogicalPosition(endOfLineOffset);
            Point placeToShow=myEditor.logicalPositionToXY(logicalPosition);
            logicalPosition=myEditor.xyToLogicalPosition(placeToShow);
            placeToShow.x+=R * 3 / 2;
            placeToShow.y+=myEditor.getLineHeight() - R / 2;
            int w=g2d.getFontMetrics().stringWidth(s);
            int a=g2d.getFontMetrics().getAscent();
            int h=myEditor.getLineHeight();
            int rightEdge=rightEdges.get(logicalPosition.line);
            placeToShow.x=Math.max(placeToShow.x,rightEdge);
            rightEdge=Math.max(rightEdge,placeToShow.x + w + 3 * R);
            rightEdges.put(logicalPosition.line,rightEdge);
            GraphicsUtil.setupAAPainting(g2d);
            g2d.setColor(MessageType.WARNING.getPopupBackground());
            g2d.fillRoundRect(placeToShow.x - R,placeToShow.y - a,w + 2 * R,h,R,R);
            g2d.setColor(new JBColor(JBColor.GRAY,Gray._200));
            g2d.drawRoundRect(placeToShow.x - R,placeToShow.y - a,w + 2 * R,h,R,R);
            g2d.setColor(JBColor.foreground());
            g2d.drawString(s,placeToShow.x,placeToShow.y);
          }
        }
        UIUtil.drawImage(g,myImage,0,0,this);
      }
    }
;
    myEditorPreviewHint=new LightweightHint(editorFragmentPreviewPanel);
  }
  Point point=hintInfo.getOriginalPoint();
  hintInfo.setTextBg(myEditor.getColorsScheme().getDefaultBackground());
  hintInfo.setBorderColor(new JBColor(Gray._0,Gray._111));
  point=SwingUtilities.convertPoint(((EditorImpl)editor).getVerticalScrollBar(),point,myEditor.getComponent().getRootPane());
  hintManager.showEditorHint(myEditorPreviewHint,myEditor,point,HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_MOUSEOVER| HintManager.HIDE_BY_ESCAPE| HintManager.HIDE_BY_SCROLLING,0,false,hintInfo);
  return myEditorPreviewHint;
}
