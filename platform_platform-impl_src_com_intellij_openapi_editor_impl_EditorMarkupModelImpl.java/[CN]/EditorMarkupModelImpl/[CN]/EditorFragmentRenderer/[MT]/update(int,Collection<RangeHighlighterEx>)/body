{
  myLine=currentLine;
  myHighlighters.clear();
  if (myLine == -1)   return;
  int oldStartLine=myStartLine;
  int oldEndLine=myEndLine;
  myStartLine=Math.max(0,myLine - myPreviewLines);
  myEndLine=Math.min(myEditor.getDocument().getLineCount() - 1,myLine + myPreviewLines + 1);
  isDirty=oldStartLine != myStartLine || oldEndLine != myEndLine;
  int popupStartOffset=myEditor.getDocument().getLineStartOffset(myStartLine);
  int popupEndOffset=myEditor.getDocument().getLineEndOffset(myEndLine);
  for (  RangeHighlighterEx rangeHighlighter : rangeHighlighters) {
    if (rangeHighlighter.getEndOffset() > popupStartOffset && rangeHighlighter.getStartOffset() < popupEndOffset) {
      myHighlighters.add(rangeHighlighter);
    }
  }
  Collections.sort(myHighlighters,new Comparator<RangeHighlighterEx>(){
    public int compare(    RangeHighlighterEx ex1,    RangeHighlighterEx ex2){
      LogicalPosition startPos1=myEditor.offsetToLogicalPosition(ex1.getAffectedAreaStartOffset());
      LogicalPosition startPos2=myEditor.offsetToLogicalPosition(ex2.getAffectedAreaStartOffset());
      if (startPos1.line != startPos2.line)       return 0;
      return startPos1.column - startPos2.column;
    }
  }
);
}
