{
  if (isEmpty(element)) {
    if (!file.exists()) {
      return null;
    }
    VirtualFile virtualFile=cachedVirtualFile;
    if (virtualFile == null || !virtualFile.isValid()) {
      virtualFile=LocalFileSystem.getInstance().findFileByIoFile(file);
    }
    if (virtualFile == null) {
      LOG.info("Cannot find virtual file " + file.getAbsolutePath());
      FileUtil.delete(file);
    }
 else {
      AccessToken token=ApplicationManager.getApplication().acquireWriteActionLock(DocumentRunnable.IgnoreDocumentRunnable.class);
      try {
        virtualFile.delete(requestor);
      }
 catch (      IOException e) {
        throw new StateStorageException(e);
      }
 finally {
        token.finish();
      }
    }
    return null;
  }
  VirtualFile virtualFile=cachedVirtualFile == null || !cachedVirtualFile.isValid() ? null : cachedVirtualFile;
  Parent document=!wrapAsDocument || element instanceof Document ? element : new Document((Element)element);
  try {
    BufferExposingByteArrayOutputStream byteOut;
    if (file.exists()) {
      if (virtualFile == null) {
        virtualFile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file);
      }
      Pair<byte[],String> pair=loadFile(virtualFile);
      byteOut=writeToBytes(document,pair.second);
      if (equal(pair.first,byteOut)) {
        return null;
      }
    }
 else {
      FileUtil.createParentDirs(file);
      byteOut=writeToBytes(document,SystemProperties.getLineSeparator());
    }
    AccessToken token=ApplicationManager.getApplication().acquireWriteActionLock(DocumentRunnable.IgnoreDocumentRunnable.class);
    try {
      if (virtualFile == null) {
        virtualFile=getOrCreateVirtualFile(requestor,file);
      }
      OutputStream virtualFileOut=virtualFile.getOutputStream(requestor);
      try {
        byteOut.writeTo(virtualFileOut);
      }
  finally {
        virtualFileOut.close();
      }
      return virtualFile;
    }
  finally {
      token.finish();
    }
  }
 catch (  IOException e) {
    throw new StateStorageException(e);
  }
}
