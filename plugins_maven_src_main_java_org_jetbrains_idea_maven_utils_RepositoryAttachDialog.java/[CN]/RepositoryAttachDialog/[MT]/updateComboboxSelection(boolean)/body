{
  final String prevFilter=myFilterString;
  final JTextComponent field=(JTextComponent)myCombobox.getEditor().getEditorComponent();
  final int caret=field.getCaretPosition();
  myFilterString=field.getText();
  if (!force && Comparing.equal(myFilterString,prevFilter))   return;
  int prevSize=myShownItems.size();
  myShownItems.clear();
  myInUpdate=true;
  final boolean itemSelected=myCoordinates.containsKey(myFilterString) && Comparing.strEqual((String)myCombobox.getSelectedItem(),myFilterString,false);
  final boolean filtered;
  if (itemSelected) {
    myShownItems.addAll(myCoordinates.keySet());
    filtered=false;
  }
 else {
    final String[] parts=myFilterString.split(" ");
    main:     for (    String coordinate : myCoordinates.keySet()) {
      for (      String part : parts) {
        if (!StringUtil.containsIgnoreCase(coordinate,part))         continue main;
      }
      myShownItems.add(coordinate);
    }
    filtered=!myShownItems.isEmpty();
    if (!filtered) {
      myShownItems.addAll(myCoordinates.keySet());
    }
    myCombobox.setSelectedItem(null);
  }
  ArrayList<Comparable> comparables=new ArrayList<>(myShownItems.size());
  for (  String item : myShownItems) {
    comparables.add(new MavenVersionComparable(item));
  }
  Collections.sort(comparables);
  myShownItems.clear();
  for (  Comparable comparable : comparables) {
    myShownItems.add(comparable.toString());
  }
  ((CollectionComboBoxModel)myCombobox.getModel()).update();
  myInUpdate=false;
  field.setText(myFilterString);
  field.setCaretPosition(caret);
  updateInfoLabel();
  if (filtered) {
    if (prevSize < 10 && myShownItems.size() > prevSize && myCombobox.isPopupVisible()) {
      myCombobox.setPopupVisible(false);
    }
    if (!myCombobox.isPopupVisible()) {
      myCombobox.setPopupVisible(true);
    }
  }
}
