{
  super(project,true);
  myProject=project;
  myProgressIcon.suspend();
  myCaptionLabel.setText(XmlStringUtil.wrapInHtml(StringUtil.escapeXml("keyword or class name to search by or exact Maven coordinates, " + "i.e. 'spring', 'Logger' or 'ant:ant-junit:1.6.5'")));
  myInfoLabel.setPreferredSize(new Dimension(myInfoLabel.getFontMetrics(myInfoLabel.getFont()).stringWidth("Showing: 1000"),myInfoLabel.getPreferredSize().height));
  myComboComponent.setButtonIcon(AllIcons.Actions.Menu_find);
  myComboComponent.getButton().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      performSearch();
    }
  }
);
  myCombobox=myComboComponent.getComboBox();
  myCombobox.setModel(new CollectionComboBoxModel(myShownItems,null));
  myCombobox.setEditable(true);
  final JTextField textField=(JTextField)myCombobox.getEditor().getEditorComponent();
  textField.setColumns(20);
  if (initialFilter != null) {
    textField.setText(initialFilter);
  }
  textField.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          if (myProgressIcon.isDisposed())           return;
          updateComboboxSelection(false);
        }
      }
);
    }
  }
);
  myCombobox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final boolean popupVisible=myCombobox.isPopupVisible();
      if (!myInUpdate && (!popupVisible || myCoordinates.isEmpty())) {
        performSearch();
      }
 else {
        final String item=(String)myCombobox.getSelectedItem();
        if (StringUtil.isNotEmpty(item)) {
          ((JTextField)myCombobox.getEditor().getEditorComponent()).setText(item);
        }
      }
    }
  }
);
  VirtualFile baseDir=!myProject.isDefault() ? myProject.getBaseDir() : null;
  myDefaultDownloadFolder=baseDir != null ? FileUtil.toSystemDependentName(baseDir.getPath() + "/lib") : "";
  PropertiesComponent storage=PropertiesComponent.getInstance(myProject);
  myDownloadToCheckBox.setSelected(storage.isTrueValue(PROPERTY_DOWNLOAD_TO_PATH_ENABLED));
  myDirectoryField.setText(StringUtil.notNullize(StringUtil.nullize(storage.getValue(PROPERTY_DOWNLOAD_TO_PATH)),myDefaultDownloadFolder));
  myDirectoryField.setEnabled(myDownloadToCheckBox.isSelected());
  myDownloadToCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myDirectoryField.setEnabled(myDownloadToCheckBox.isSelected());
    }
  }
);
  myJavaDocCheckBox.setSelected(storage.isTrueValue(PROPERTY_ATTACH_JAVADOC));
  mySourcesCheckBox.setSelected(storage.isTrueValue(PROPERTY_ATTACH_SOURCES));
  final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  descriptor.putUserData(FileChooserDialog.PREFER_LAST_OVER_TO_SELECT,Boolean.TRUE);
  myDirectoryField.addBrowseFolderListener(ProjectBundle.message("file.chooser.directory.for.downloaded.libraries.title"),ProjectBundle.message("file.chooser.directory.for.downloaded.libraries.description"),null,descriptor);
  updateInfoLabel();
  setOKActionEnabled(false);
  init();
}
