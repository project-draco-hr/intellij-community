{
  if (myVisitedFiles.contains(file)) {
    return;
  }
  myVisitedFiles.add(file);
  file.acceptChildren(new PyElementVisitor(){
    @Override public void visitPyAssignmentStatement(    PyAssignmentStatement node){
      PyExpression expression=node.getLeftHandSideExpression();
      if (expression instanceof PyTargetExpression) {
        String name=expression.getName();
        PyExpression value=((PyTargetExpression)expression).findAssignedValue();
        myNamespace.put(name,createEvaluator(name).evaluate(value));
      }
    }
    @Override public void visitPyAugAssignmentStatement(    PyAugAssignmentStatement node){
      PyExpression target=node.getTarget();
      if (target instanceof PyReferenceExpression && ((PyReferenceExpression)target).getQualifier() == null && target.getName() != null) {
        Object currentValue=myNamespace.get(target.getName());
        if (currentValue != null) {
          Object rhs=createEvaluator(target.getName()).evaluate(node.getValue());
          myNamespace.put(target.getName(),PyEvaluator.concatenate(currentValue,rhs));
        }
      }
    }
    @Override public void visitPyExpressionStatement(    PyExpressionStatement node){
      node.getExpression().accept(this);
    }
    @Override public void visitPyCallExpression(    PyCallExpression node){
      PyExpression callee=node.getCallee();
      if (callee instanceof PyReferenceExpression) {
        PyReferenceExpression calleeRef=(PyReferenceExpression)callee;
        if (PyNames.EXTEND.equals(calleeRef.getReferencedName()) && node.getArguments().length == 1) {
          PyExpression qualifier=calleeRef.getQualifier();
          if (qualifier instanceof PyReferenceExpression) {
            PyReferenceExpression qualifierRef=(PyReferenceExpression)qualifier;
            if (qualifierRef.getQualifier() == null) {
              String nameBeingExtended=qualifierRef.getReferencedName();
              Object value=myNamespace.get(nameBeingExtended);
              if (value instanceof List) {
                Object arg=createEvaluator(nameBeingExtended).evaluate(node.getArguments()[0]);
                myNamespace.put(nameBeingExtended,PyEvaluator.concatenate(value,arg));
              }
            }
          }
        }
      }
    }
    @Override public void visitPyFromImportStatement(    PyFromImportStatement node){
      if (node.isFromFuture())       return;
      PsiElement source=PyUtil.turnDirIntoInit(node.resolveImportSource());
      if (source instanceof PyFile) {
        PyFileEvaluator importEvaluator=new PyFileEvaluator(myVisitedFiles);
        importEvaluator.evaluate((PyFile)source);
        if (node.isStarImport()) {
          myNamespace.putAll(importEvaluator.myNamespace);
        }
 else {
          for (          PyImportElement element : node.getImportElements()) {
            Object value=importEvaluator.myNamespace.get(element.getName());
            String name=element.getAsName();
            if (name == null) {
              name=element.getName();
            }
            myNamespace.put(name,value);
          }
        }
      }
    }
  }
);
}
