{
  VirtualFile vFile=element.getContainingFile().getVirtualFile();
  myCurrentFilePath=vFile != null ? vFile.getPath() : null;
  if (myVisitedFiles.contains(element)) {
    return;
  }
  myVisitedFiles.add((PyFile)element.getContainingFile());
  PyElement statementContainer=element instanceof PyFunction ? ((PyFunction)element).getStatementList() : element;
  if (statementContainer == null) {
    return;
  }
  statementContainer.acceptChildren(new PyElementVisitor(){
    @Override public void visitPyAssignmentStatement(    PyAssignmentStatement node){
      PyExpression expression=node.getLeftHandSideExpression();
      if (expression instanceof PyTargetExpression) {
        String name=expression.getName();
        PyExpression value=((PyTargetExpression)expression).findAssignedValue();
        myNamespace.put(name,prepareEvaluator().evaluate(value));
        if (myDeclarationsToTrack.contains(name)) {
          List<PyExpression> declarations=new ArrayList<PyExpression>();
          PyPsiUtils.sequenceToList(declarations,value);
          myDeclarations.put(name,declarations);
        }
      }
 else       if (expression instanceof PySubscriptionExpression) {
        PyExpression operand=((PySubscriptionExpression)expression).getOperand();
        PyExpression indexExpression=((PySubscriptionExpression)expression).getIndexExpression();
        if (operand instanceof PyReferenceExpression && ((PyReferenceExpression)operand).getQualifier() == null) {
          Object currentValue=myNamespace.get(((PyReferenceExpression)operand).getReferencedName());
          if (currentValue instanceof Map) {
            Object mapKey=prepareEvaluator().evaluate(indexExpression);
            if (mapKey != null) {
              ((Map)currentValue).put(mapKey,prepareEvaluator().evaluate(node.getAssignedValue()));
            }
          }
        }
      }
    }
    @Override public void visitPyAugAssignmentStatement(    PyAugAssignmentStatement node){
      PyExpression target=node.getTarget();
      String name=target.getName();
      if (target instanceof PyReferenceExpression && ((PyReferenceExpression)target).getQualifier() == null && name != null) {
        Object currentValue=myNamespace.get(name);
        if (currentValue != null) {
          Object rhs=prepareEvaluator().evaluate(node.getValue());
          myNamespace.put(name,PyEvaluator.concatenate(currentValue,rhs));
        }
        if (myDeclarationsToTrack.contains(name)) {
          List<PyExpression> declarations=myDeclarations.get(name);
          if (declarations != null) {
            PyPsiUtils.sequenceToList(declarations,node.getValue());
          }
        }
      }
    }
    @Override public void visitPyExpressionStatement(    PyExpressionStatement node){
      node.getExpression().accept(this);
    }
    @Override public void visitPyCallExpression(    PyCallExpression node){
      PyExpression callee=node.getCallee();
      if (callee instanceof PyReferenceExpression) {
        PyReferenceExpression calleeRef=(PyReferenceExpression)callee;
        PyExpression qualifier=calleeRef.getQualifier();
        if (qualifier instanceof PyReferenceExpression) {
          PyReferenceExpression qualifierRef=(PyReferenceExpression)qualifier;
          if (qualifierRef.getQualifier() == null) {
            if (PyNames.EXTEND.equals(calleeRef.getReferencedName()) && node.getArguments().length == 1) {
              processExtendCall(node,qualifierRef.getReferencedName());
            }
 else             if (PyNames.UPDATE.equals(calleeRef.getReferencedName()) && node.getArguments().length == 1) {
              processUpdateCall(node,qualifierRef.getReferencedName());
            }
          }
        }
      }
    }
    @Override public void visitPyFromImportStatement(    PyFromImportStatement node){
      if (node.isFromFuture())       return;
      PsiElement source=PyUtil.turnDirIntoInit(node.resolveImportSource());
      if (source instanceof PyFile) {
        PyFileEvaluator importEvaluator=new PyFileEvaluator(myVisitedFiles);
        importEvaluator.evaluate((PyFile)source);
        if (node.isStarImport()) {
          myNamespace.putAll(importEvaluator.myNamespace);
        }
 else {
          for (          PyImportElement element : node.getImportElements()) {
            Object value=importEvaluator.myNamespace.get(element.getName());
            String name=element.getAsName();
            if (name == null) {
              name=element.getName();
            }
            myNamespace.put(name,value);
          }
        }
      }
    }
    @Override public void visitPyReturnStatement(    PyReturnStatement node){
      myReturnValue=prepareEvaluator().evaluate(node.getExpression());
    }
  }
);
}
