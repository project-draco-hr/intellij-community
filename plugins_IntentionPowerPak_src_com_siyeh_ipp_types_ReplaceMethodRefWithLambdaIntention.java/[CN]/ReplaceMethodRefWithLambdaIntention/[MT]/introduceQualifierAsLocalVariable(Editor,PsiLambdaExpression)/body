{
  if (lambdaExpression != null && lambdaExpression.isValid()) {
    final PsiElement body=lambdaExpression.getBody();
    PsiExpression methodCall=null;
    if (body instanceof PsiCodeBlock) {
      final PsiStatement[] statements=((PsiCodeBlock)body).getStatements();
      LOG.assertTrue(statements.length == 1);
      final PsiStatement statement=statements[0];
      if (statement instanceof PsiReturnStatement) {
        methodCall=((PsiReturnStatement)statement).getReturnValue();
      }
 else       if (statement instanceof PsiExpressionStatement) {
        methodCall=((PsiExpressionStatement)statement).getExpression();
      }
    }
 else {
      methodCall=(PsiExpression)body;
    }
    PsiExpression qualifierExpression=null;
    if (methodCall instanceof PsiMethodCallExpression) {
      qualifierExpression=((PsiMethodCallExpression)methodCall).getMethodExpression().getQualifierExpression();
    }
 else     if (methodCall instanceof PsiNewExpression) {
      qualifierExpression=((PsiNewExpression)methodCall).getQualifier();
    }
    if (qualifierExpression != null) {
      final List<PsiElement> sideEffects=new ArrayList<PsiElement>();
      SideEffectChecker.checkSideEffects(qualifierExpression,sideEffects);
      if (!sideEffects.isEmpty()) {
        qualifierExpression.putUserData(ElementToWorkOn.PARENT,lambdaExpression);
        new IntroduceVariableHandler().invoke(qualifierExpression.getProject(),editor,qualifierExpression);
      }
    }
  }
}
