{
  ProjectFileIndex index=ProjectFileIndex.SERVICE.getInstance(project);
  if (!index.isInLibraryClasses(directory))   return;
  VirtualFile classRoot=index.getClassRootForFile(directory);
  if (classRoot == null)   return;
  String relativePath=VfsUtilCore.getRelativePath(directory,classRoot);
  if (relativePath == null)   return;
  Collection<VirtualFile> otherSourceRoots=new THashSet<>();
  searchForOtherSourceDirs:   for (  OrderEntry entry : index.getOrderEntriesForFile(directory)) {
    if (entry instanceof LibraryOrderEntry) {
      Library library=((LibraryOrderEntry)entry).getLibrary();
      if (library == null)       continue;
      String[] sourceUrls=library.getUrls(OrderRootType.SOURCES);
      for (      String sourceUrl : sourceUrls) {
        if (VfsUtilCore.isEqualOrAncestor(sourceUrl,directory.getUrl())) {
          otherSourceRoots.clear();
          break searchForOtherSourceDirs;
        }
      }
    }
    for (    VirtualFile sourceRoot : entry.getFiles(OrderRootType.SOURCES)) {
      VirtualFile sourceFile=sourceRoot.findFileByRelativePath(relativePath);
      if (sourceFile != null) {
        otherSourceRoots.add(sourceFile);
      }
    }
  }
  outSourceRoots.addAll(otherSourceRoots);
}
