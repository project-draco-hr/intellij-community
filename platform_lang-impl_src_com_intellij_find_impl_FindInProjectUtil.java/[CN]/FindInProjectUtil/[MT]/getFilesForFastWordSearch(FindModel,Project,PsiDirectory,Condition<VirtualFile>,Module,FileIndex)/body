{
  if (DumbService.getInstance(project).isDumb()) {
    return new Pair<Boolean,Collection<PsiFile>>(false,Collections.<PsiFile>emptyList());
  }
  final PsiManager pm=PsiManager.getInstance(project);
  CacheManager cacheManager=CacheManager.SERVICE.getInstance(project);
  SearchScope customScope=findModel.getCustomScope();
  GlobalSearchScope scope=psiDirectory != null ? GlobalSearchScopesCore.directoryScope(psiDirectory,true) : module != null ? module.getModuleContentScope() : customScope instanceof GlobalSearchScope ? (GlobalSearchScope)customScope : toGlobal(project,customScope);
  if (scope == null) {
    scope=ProjectScope.getContentScope(project);
  }
  Set<Integer> keys=new THashSet<Integer>(30);
  final Set<PsiFile> resultFiles=new THashSet<PsiFile>();
  boolean fast=false;
  String stringToFind=findModel.getStringToFind();
  if (TrigramIndex.ENABLED) {
    TIntHashSet trigrams=TrigramBuilder.buildTrigram(stringToFind);
    TIntIterator it=trigrams.iterator();
    while (it.hasNext()) {
      keys.add(it.next());
    }
    if (!keys.isEmpty()) {
      fast=true;
      List<VirtualFile> hits=new ArrayList<VirtualFile>();
      FileBasedIndex.getInstance().getFilesWithKey(TrigramIndex.INDEX_ID,keys,new CommonProcessors.CollectProcessor<VirtualFile>(hits),scope);
      for (      VirtualFile hit : hits) {
        if (fileMask.value(hit)) {
          resultFiles.add(findFile(pm,hit));
        }
      }
      if (resultFiles.isEmpty())       return new Pair<Boolean,Collection<PsiFile>>(true,resultFiles);
    }
  }
  fast|=findModel.isWholeWordsOnly() && stringToFind.indexOf('$') < 0;
  PsiSearchHelperImpl helper=(PsiSearchHelperImpl)PsiSearchHelper.SERVICE.getInstance(project);
  helper.processFilesWithText(scope,UsageSearchContext.ANY,findModel.isCaseSensitive(),stringToFind,new Processor<VirtualFile>(){
    @Override public boolean process(    VirtualFile file){
      if (fileMask.value(file)) {
        ContainerUtil.addIfNotNull(resultFiles,findFile(pm,file));
      }
      return true;
    }
  }
);
  if (stringToFind.isEmpty()) {
    fileIndex.iterateContent(new ContentIterator(){
      @Override public boolean processFile(      VirtualFile file){
        if (!file.isDirectory() && fileMask.value(file)) {
          ContainerUtil.addIfNotNull(resultFiles,findFile(pm,file));
        }
        return true;
      }
    }
);
  }
 else {
    for (    PsiFile file : cacheManager.getFilesWithWord(stringToFind,UsageSearchContext.ANY,scope,findModel.isCaseSensitive())) {
      if (fileMask.value(file.getVirtualFile())) {
        resultFiles.add(file);
      }
    }
  }
  return new Pair<Boolean,Collection<PsiFile>>(fast,resultFiles);
}
