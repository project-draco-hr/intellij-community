{
  final WindowInfoImpl toBeShownInfo=getInfo(id);
  ToolWindow window=getToolWindow(id);
  if (window != null && toBeShownInfo.isWindowed()) {
    UIUtil.toFront(UIUtil.getWindow(window.getComponent()));
  }
  if (toBeShownInfo.isVisible() || window == null || !window.isAvailable()) {
    return;
  }
  if (DumbService.getInstance(myProject).isDumb() && !myDumbAwareIds.contains(id)) {
    return;
  }
  toBeShownInfo.setVisible(true);
  final InternalDecorator decorator=getInternalDecorator(id);
  if (toBeShownInfo.isFloating()) {
    commandsList.add(new AddFloatingDecoratorCmd(decorator,toBeShownInfo));
  }
 else   if (toBeShownInfo.isWindowed()) {
    commandsList.add(new AddWindowedDecoratorCmd(decorator,toBeShownInfo));
  }
 else {
    final WindowInfoImpl[] infos=myLayout.getInfos();
    for (    final WindowInfoImpl info : infos) {
      if (id.equals(info.getId())) {
        continue;
      }
      if (info.isVisible() && info.getType() == toBeShownInfo.getType() && info.getAnchor() == toBeShownInfo.getAnchor() && info.isSplit() == toBeShownInfo.isSplit()) {
        info.setVisible(false);
        appendRemoveDecoratorCmd(info.getId(),false,commandsList);
        if (info.isActive()) {
          info.setActive(false);
        }
        appendApplyWindowInfoCmd(info,commandsList);
        if (info.isDocked() && !info.isAutoHide()) {
          mySideStack.push(info);
        }
      }
    }
    appendAddDecoratorCmd(decorator,toBeShownInfo,dirtyMode,commandsList);
    mySideStack.remove(id);
  }
  if (!toBeShownInfo.isShowStripeButton()) {
    toBeShownInfo.setShowStripeButton(true);
  }
  appendApplyWindowInfoCmd(toBeShownInfo,commandsList);
}
