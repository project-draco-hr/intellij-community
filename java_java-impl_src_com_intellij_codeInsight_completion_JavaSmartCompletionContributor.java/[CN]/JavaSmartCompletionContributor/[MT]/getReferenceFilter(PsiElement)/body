{
  if (AFTER_THROW_NEW.accepts(element)) {
    return THROWABLES_FILTER;
  }
  if (psiElement().afterLeaf(psiElement().withText(".")).withSuperParent(2,psiElement(PsiNewExpression.class)).accepts(element)) {
    if (((PsiNewExpression)element.getParent().getParent()).getClassReference() == element.getParent()) {
      PsiType[] types=ExpectedTypesGetter.getExpectedTypes(element,false);
      return new OrFilter(ContainerUtil.map2Array(types,ElementFilter.class,new Function<PsiType,ElementFilter>(){
        @Override public ElementFilter fun(        PsiType type){
          return new AssignableFromFilter(type);
        }
      }
));
    }
  }
  return null;
}
