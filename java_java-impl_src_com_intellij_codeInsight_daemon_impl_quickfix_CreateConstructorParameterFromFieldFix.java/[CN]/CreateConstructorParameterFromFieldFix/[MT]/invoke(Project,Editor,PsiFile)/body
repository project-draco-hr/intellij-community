{
  if (!FileModificationService.getInstance().prepareFileForWrite(file))   return;
  PsiMethod[] constructors=myClass.getConstructors();
  if (constructors.length == 0) {
    final AddDefaultConstructorFix defaultConstructorFix=new AddDefaultConstructorFix(myClass);
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      @Override public void run(){
        defaultConstructorFix.invoke(project,editor,file);
      }
    }
);
    constructors=myClass.getConstructors();
  }
  Arrays.sort(constructors,new Comparator<PsiMethod>(){
    @Override public int compare(    PsiMethod c1,    PsiMethod c2){
      final PsiMethod cc1=RefactoringUtil.getChainedConstructor(c1);
      final PsiMethod cc2=RefactoringUtil.getChainedConstructor(c2);
      if (cc1 == c2)       return 1;
      if (cc2 == c1)       return -1;
      if (cc1 == null) {
        return cc2 == null ? 0 : compare(c1,cc2);
      }
 else {
        return cc2 == null ? compare(cc1,c2) : compare(cc1,cc2);
      }
    }
  }
);
  final List<PsiElement> cleanupElements=new ArrayList<PsiElement>();
  final List<PsiMethod> filtered=filterConstructorsIfFieldAlreadyAssigned(constructors,getField());
  if (filtered.size() > 1) {
    final PsiMethodMember[] members=new PsiMethodMember[filtered.size()];
    int i=0;
    for (    PsiMethod constructor : filtered) {
      members[i++]=new PsiMethodMember(constructor);
    }
    final List<PsiMethodMember> elements;
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      elements=Arrays.asList(members);
    }
 else {
      final MemberChooser<PsiMethodMember> chooser=new MemberChooser<PsiMethodMember>(members,false,true,project);
      chooser.setTitle("Choose Constructors to Add Parameter to");
      chooser.show();
      elements=chooser.getSelectedElements();
      if (elements == null)       return;
    }
    for (    PsiMethodMember member : elements) {
      if (!addParameterToConstructor(project,file,editor,member.getElement(),new PsiField[]{getField()},cleanupElements)) {
        break;
      }
    }
  }
 else   if (!filtered.isEmpty()) {
    final Collection<SmartPsiElementPointer<PsiField>> fieldsToFix=getFieldsToFix();
    try {
      final PsiMethod constructor=filtered.get(0);
      final LinkedHashSet<PsiField> fields=new LinkedHashSet<PsiField>();
      getFieldsToFix().add(myField);
      for (      SmartPsiElementPointer<PsiField> elementPointer : fieldsToFix) {
        final PsiField field=elementPointer.getElement();
        if (field != null && isAvailable(field) && filterConstructorsIfFieldAlreadyAssigned(new PsiMethod[]{constructor},field).contains(constructor)) {
          fields.add(field);
        }
      }
      if (filtered.size() == constructors.length && fields.size() > 1 && !ApplicationManager.getApplication().isUnitTestMode()) {
        PsiFieldMember[] members=new PsiFieldMember[fields.size()];
        int i=0;
        for (        PsiField field : fields) {
          members[i++]=new PsiFieldMember(field);
        }
        MemberChooser<PsiElementClassMember> chooser=new MemberChooser<PsiElementClassMember>(members,false,true,project);
        chooser.setTitle("Choose Fields to Generate Constructor Parameters for");
        chooser.show();
        if (chooser.getExitCode() != DialogWrapper.OK_EXIT_CODE)         return;
        final List<PsiElementClassMember> selectedElements=chooser.getSelectedElements();
        if (selectedElements == null)         return;
        fields.clear();
        for (        PsiElementClassMember member : selectedElements) {
          fields.add((PsiField)member.getElement());
        }
      }
      addParameterToConstructor(project,file,editor,constructor,filtered.size() == constructors.length ? fields.toArray(new PsiField[fields.size()]) : new PsiField[]{getField()},cleanupElements);
    }
  finally {
      fieldsToFix.clear();
    }
  }
  GlobalInspectionContextBase.cleanupElements(project,null,cleanupElements.toArray(new PsiElement[cleanupElements.size()]));
}
