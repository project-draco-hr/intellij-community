{
  final PsiParameterList parameterList=constructor.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  ParameterInfoImpl[] newParamInfos=new ParameterInfoImpl[parameters.length + fields.length];
  final List<PsiVariable> params=new ArrayList<PsiVariable>(Arrays.asList(parameters));
  Collections.addAll(params,fields);
  Collections.sort(params,new FieldParameterComparator(parameterList));
  int i=0;
  final HashMap<PsiField,String> usedFields=new HashMap<PsiField,String>();
  final MultiMap<PsiType,PsiVariable> types=new MultiMap<PsiType,PsiVariable>();
  for (  PsiVariable param : params) {
    types.putValue(param.getType(),param);
  }
  final CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(project);
  final boolean preferLongerNames=settings.PREFER_LONGER_NAMES;
  for (  PsiVariable param : params) {
    final PsiType paramType=param.getType();
    if (param instanceof PsiParameter) {
      newParamInfos[i++]=new ParameterInfoImpl(parameterList.getParameterIndex((PsiParameter)param),param.getName(),paramType,param.getName());
    }
 else {
      try {
        settings.PREFER_LONGER_NAMES=preferLongerNames || types.get(paramType).size() > 1;
        final String uniqueParameterName=getUniqueParameterName(parameters,param,usedFields);
        usedFields.put((PsiField)param,uniqueParameterName);
        newParamInfos[i++]=new ParameterInfoImpl(-1,uniqueParameterName,paramType,uniqueParameterName);
      }
  finally {
        settings.PREFER_LONGER_NAMES=preferLongerNames;
      }
    }
  }
  final SmartPointerManager manager=SmartPointerManager.getInstance(project);
  final SmartPsiElementPointer constructorPointer=manager.createSmartPsiElementPointer(constructor);
  final PsiMethod fromText=JavaPsiFacade.getElementFactory(project).createMethodFromText(createDummyMethod(constructor,newParamInfos),constructor);
  final PsiClass containingClass=constructor.getContainingClass();
  if (containingClass == null)   return false;
  final int minUsagesNumber=containingClass.findMethodsBySignature(fromText,false).length > 0 ? 0 : 1;
  final List<ParameterInfoImpl> parameterInfos=ChangeMethodSignatureFromUsageFix.performChange(project,editor,file,constructor,minUsagesNumber,newParamInfos,true,true);
  final ParameterInfoImpl[] resultParams=parameterInfos != null ? parameterInfos.toArray(new ParameterInfoImpl[parameterInfos.size()]) : newParamInfos;
  return ApplicationManager.getApplication().runWriteAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      return doCreate(project,editor,parameters,constructorPointer,resultParams,usedFields,cleanupElements);
    }
  }
);
}
