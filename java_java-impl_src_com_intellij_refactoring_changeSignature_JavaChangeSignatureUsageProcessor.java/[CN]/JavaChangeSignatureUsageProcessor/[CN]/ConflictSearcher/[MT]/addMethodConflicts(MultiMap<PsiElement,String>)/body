{
  String newMethodName=myChangeInfo.getNewName();
  try {
    final PsiMethod method=myChangeInfo.getMethod();
    if (!StdLanguages.JAVA.equals(method.getLanguage()))     return null;
    PsiManager manager=method.getManager();
    PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
    final CanonicalTypes.Type returnType=myChangeInfo.getNewReturnType();
    PsiMethod prototype;
    if (returnType != null) {
      prototype=factory.createMethod(newMethodName,returnType.getType(method,manager));
    }
 else {
      prototype=factory.createConstructor();
      prototype.setName(newMethodName);
    }
    JavaParameterInfo[] parameters=myChangeInfo.getNewParameters();
    for (    JavaParameterInfo info : parameters) {
      PsiType parameterType=info.createType(method,manager);
      if (parameterType == null) {
        parameterType=JavaPsiFacade.getElementFactory(method.getProject()).createTypeFromText(CommonClassNames.JAVA_LANG_OBJECT,method);
      }
      PsiParameter param=factory.createParameter(info.getName(),parameterType);
      prototype.getParameterList().add(param);
    }
    ConflictsUtil.checkMethodConflicts(method.getContainingClass(),myChangeInfo.isGenerateDelegate() ? null : method,prototype,conflicts);
    return prototype;
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return null;
}
