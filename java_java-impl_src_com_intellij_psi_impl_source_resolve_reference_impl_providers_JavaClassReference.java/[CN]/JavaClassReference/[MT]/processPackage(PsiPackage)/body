{
  final ArrayList<LookupElement> list=ContainerUtil.newArrayList();
  final int startOffset=StringUtil.isEmpty(aPackage.getName()) ? 0 : aPackage.getQualifiedName().length() + 1;
  final GlobalSearchScope scope=getScope(getElement().getContainingFile());
  for (  final PsiPackage subPackage : aPackage.getSubPackages(scope)) {
    final String shortName=subPackage.getQualifiedName().substring(startOffset);
    if (PsiNameHelper.getInstance(subPackage.getProject()).isIdentifier(shortName)) {
      list.add(LookupElementBuilder.create(subPackage).withIcon(subPackage.getIcon(Iconable.ICON_FLAG_VISIBILITY)));
    }
  }
  final List<PsiClass> classes=ContainerUtil.filter(aPackage.getClasses(scope),new Condition<PsiClass>(){
    @Override public boolean value(    PsiClass psiClass){
      return StringUtil.isNotEmpty(psiClass.getName());
    }
  }
);
  final Map<CustomizableReferenceProvider.CustomizationKey,Object> options=getOptions();
  if (options != null) {
    final boolean instantiatable=JavaClassReferenceProvider.INSTANTIATABLE.getBooleanValue(options);
    final boolean concrete=JavaClassReferenceProvider.CONCRETE.getBooleanValue(options);
    final boolean notInterface=JavaClassReferenceProvider.NOT_INTERFACE.getBooleanValue(options);
    final boolean notEnum=JavaClassReferenceProvider.NOT_ENUM.getBooleanValue(options);
    final ClassKind classKind=getClassKind();
    for (    PsiClass clazz : classes) {
      if (isClassAccepted(clazz,classKind,instantiatable,concrete,notInterface,notEnum)) {
        list.add(JavaClassNameCompletionContributor.createClassLookupItem(clazz,false));
      }
    }
  }
 else {
    for (    PsiClass clazz : classes) {
      list.add(JavaClassNameCompletionContributor.createClassLookupItem(clazz,false));
    }
  }
  return list.toArray(new LookupElement[list.size()]);
}
