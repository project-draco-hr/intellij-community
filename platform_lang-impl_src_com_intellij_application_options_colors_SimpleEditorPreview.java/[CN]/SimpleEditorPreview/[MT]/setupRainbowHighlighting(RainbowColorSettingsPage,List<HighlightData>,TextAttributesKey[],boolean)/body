{
  int colorCount=rainbowTempKeys.length;
  if (colorCount == 0) {
    return initialMarkup;
  }
  List<HighlightData> rainbowMarkup=new ArrayList<>();
  int tempKeyIndex=0;
  for (  HighlightData d : initialMarkup) {
    final TextAttributesKey highlightKey=d.getHighlightKey();
    final boolean rainbowType=page.isRainbowType(highlightKey);
    final boolean rainbowDemoType=highlightKey == RainbowHighlighter.RAINBOW_GRADIENT_DEMO;
    if (rainbowType || rainbowDemoType) {
      final HighlightData rainbowAnchor=new HighlightData(d.getStartOffset(),d.getEndOffset(),RainbowHighlighter.RAINBOW_ANCHOR);
      if (isRainbowOn) {
        HighlightData rainbowTemp;
        if (rainbowType) {
          rainbowTemp=getRainbowTemp(rainbowTempKeys,d.getStartOffset(),d.getEndOffset());
        }
 else {
          rainbowTemp=new HighlightData(d.getStartOffset(),d.getEndOffset(),rainbowTempKeys[tempKeyIndex++ % colorCount]);
        }
        rainbowMarkup.add(rainbowTemp);
        rainbowMarkup.add(rainbowAnchor);
        rainbowMarkup.add(d);
        rainbowMarkup.add(rainbowAnchor);
        rainbowMarkup.add(rainbowTemp);
      }
 else {
        if (rainbowType) {
          rainbowMarkup.add(d);
          rainbowMarkup.add(rainbowAnchor);
          rainbowMarkup.add(d);
        }
 else {
          rainbowMarkup.add(rainbowAnchor);
        }
      }
    }
 else     if (!(RainbowHighlighter.isRainbowTempKey(highlightKey) || highlightKey == RainbowHighlighter.RAINBOW_ANCHOR)) {
      rainbowMarkup.add(d);
    }
  }
  return rainbowMarkup;
}
