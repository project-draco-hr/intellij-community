{
  RowOfNode prevRow=rows.get(indexPrevRow);
  MutableRowOfNode nextRow=new MutableRowOfNode();
  for (  Node node : prevRow) {
    int commitIndex=node.getCommitIndex();
    if (commitIndex != indexPrevRow) {
      nextRow.add(commitIndex,node.getColorIndex());
    }
 else {
      ReadOnlyList<Commit> parents=commits.get(commitIndex).getParents();
      if (parents.size() > 0) {
        nextRow.add(parents.get(0).index(),node.getColorIndex());
      }
      int startIndexColor=prevRow.getStartIndexColor();
      for (int i=1; i < parents.size(); i++) {
        Commit parent=parents.get(i);
        nextRow.add(parent.index(),startIndexColor + i - 1);
      }
    }
  }
  int p=nextRow.getPositionOfCommit(indexPrevRow + 1);
  if (p == -1) {
    nextRow.add(indexPrevRow + 1,indexColor);
    indexColor++;
    nextRow.setMainPosition(nextRow.size() - 1);
  }
 else {
    nextRow.setMainPosition(p);
  }
  nextRow.setStartIndexColor(indexColor);
  nextRow.setCountAdditionEdges(setAdditionEdges(indexPrevRow + 1));
  rows.add(nextRow);
}
