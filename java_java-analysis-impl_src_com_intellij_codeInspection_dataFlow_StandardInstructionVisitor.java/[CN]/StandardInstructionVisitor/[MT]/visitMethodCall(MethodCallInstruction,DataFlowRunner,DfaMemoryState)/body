{
  DfaValue[] argValues=popCallArguments(instruction,runner,memState);
  final DfaValue qualifier=popQualifier(instruction,runner,memState);
  List<DfaMemoryState> currentStates=ContainerUtil.newArrayList(memState);
  Set<DfaMemoryState> finalStates=ContainerUtil.newLinkedHashSet();
  if (argValues != null) {
    for (    MethodContract contract : instruction.getContracts()) {
      currentStates=addContractResults(argValues,contract,currentStates,instruction,runner.getFactory(),finalStates);
    }
  }
  for (  DfaMemoryState state : currentStates) {
    state.push(getMethodResultValue(instruction,qualifier,runner.getFactory()));
    finalStates.add(state);
  }
  DfaInstructionState[] result=new DfaInstructionState[finalStates.size()];
  int i=0;
  for (  DfaMemoryState state : finalStates) {
    if (instruction.shouldFlushFields()) {
      state.flushFields();
    }
    result[i++]=new DfaInstructionState(runner.getInstruction(instruction.getIndex() + 1),state);
  }
  return result;
}
