{
  if (dfaLeft instanceof DfaVariableValue && dfaRight instanceof DfaVariableValue) {
    Number leftValue=getKnownNumberValue(memState,(DfaVariableValue)dfaLeft);
    Number rightValue=getKnownNumberValue(memState,(DfaVariableValue)dfaRight);
    if (leftValue != null && rightValue != null) {
      return checkComparisonWithKnownValue(instruction,runner,memState,opSign,leftValue,rightValue);
    }
  }
  if (dfaRight instanceof DfaConstValue && dfaLeft instanceof DfaVariableValue) {
    Object value=((DfaConstValue)dfaRight).getValue();
    if (value instanceof Number) {
      DfaInstructionState[] result=checkComparingWithConstant(instruction,runner,memState,(DfaVariableValue)dfaLeft,opSign,(Number)value);
      if (result != null) {
        return result;
      }
    }
  }
  if (dfaRight instanceof DfaVariableValue && dfaLeft instanceof DfaConstValue) {
    return handleConstantComparison(instruction,runner,memState,dfaLeft,dfaRight,DfaRelationValue.getSymmetricOperation(opSign));
  }
  if (EQEQ != opSign && NE != opSign) {
    return null;
  }
  if (dfaLeft instanceof DfaConstValue && dfaRight instanceof DfaConstValue || dfaLeft == runner.getFactory().getConstFactory().getContractFail() || dfaRight == runner.getFactory().getConstFactory().getContractFail()) {
    boolean negated=(NE == opSign) ^ (DfaMemoryStateImpl.isNaN(dfaLeft) || DfaMemoryStateImpl.isNaN(dfaRight));
    if (dfaLeft == dfaRight ^ negated) {
      return alwaysTrue(instruction,runner,memState);
    }
    return alwaysFalse(instruction,runner,memState);
  }
  return null;
}
