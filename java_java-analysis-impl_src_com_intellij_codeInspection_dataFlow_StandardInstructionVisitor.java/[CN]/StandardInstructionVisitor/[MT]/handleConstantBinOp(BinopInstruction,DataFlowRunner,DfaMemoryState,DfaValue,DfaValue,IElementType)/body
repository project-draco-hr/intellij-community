{
  if (dfaRight instanceof DfaConstValue && dfaLeft instanceof DfaVariableValue) {
    Object value=((DfaConstValue)dfaRight).getValue();
    if (value instanceof Number) {
      DfaInstructionState[] result=checkComparingWithConstant(instruction,runner,memState,(DfaVariableValue)dfaLeft,opSign,((Number)value).doubleValue());
      if (result != null) {
        return result;
      }
    }
  }
  if (dfaRight instanceof DfaVariableValue && dfaLeft instanceof DfaConstValue) {
    return handleConstantBinOp(instruction,runner,memState,dfaLeft,dfaRight,DfaRelationValue.getSymmetricOperation(opSign));
  }
  if (EQEQ != opSign && NE != opSign) {
    Object value1=getConstantValue(memState,dfaLeft);
    Object value2=getConstantValue(memState,dfaRight);
    if (instruction.getPsiAnchor() instanceof PsiExpression && value1 != null && value2 != null) {
      Object result=JavaConstantExpressionEvaluator.computeBinaryOperationResult(value1,value2,opSign,false);
      if (result != null) {
        memState.push(runner.getFactory().getConstFactory().createFromValue(result,((PsiExpression)instruction.getPsiAnchor()).getType(),null));
        return nextInstruction(instruction,runner,memState);
      }
    }
    return null;
  }
  if (dfaLeft instanceof DfaConstValue && dfaRight instanceof DfaConstValue || dfaLeft == runner.getFactory().getConstFactory().getContractFail() || dfaRight == runner.getFactory().getConstFactory().getContractFail()) {
    boolean negated=(NE == opSign) ^ (DfaMemoryStateImpl.isNaN(dfaLeft) || DfaMemoryStateImpl.isNaN(dfaRight));
    if (dfaLeft == dfaRight ^ negated) {
      return alwaysTrue(instruction,runner,memState);
    }
    return alwaysFalse(instruction,runner,memState);
  }
  return null;
}
