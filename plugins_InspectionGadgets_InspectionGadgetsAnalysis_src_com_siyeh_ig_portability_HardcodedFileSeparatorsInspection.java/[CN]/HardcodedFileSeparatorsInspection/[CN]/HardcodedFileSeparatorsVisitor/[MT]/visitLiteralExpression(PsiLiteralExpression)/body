{
  super.visitLiteralExpression(expression);
  final PsiType type=expression.getType();
  if (TypeUtils.isJavaLangString(type)) {
    final String value=(String)expression.getValue();
    if (!isHardcodedFilenameString(value)) {
      return;
    }
    final PsiElement parent=ParenthesesUtils.getParentSkipParentheses(expression);
    if (parent != null) {
      final PsiElement grandParent=parent.getParent();
      if (grandParent instanceof PsiMethodCallExpression) {
        final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
        if (MethodCallUtils.isCallToRegexMethod(methodCallExpression) || MethodCallUtils.isCallToMethod(methodCallExpression,"java.lang.Class",null,"getResource",null) || MethodCallUtils.isCallToMethod(methodCallExpression,"java.lang.Class",null,"getResourceAsStream",null)) {
          return;
        }
      }
 else       if (grandParent instanceof PsiNewExpression) {
        final PsiNewExpression newExpression=(PsiNewExpression)grandParent;
        if (TypeUtils.expressionHasTypeOrSubtype(newExpression,"javax.swing.ImageIcon")) {
          return;
        }
      }
    }
    registerErrorAtOffset(expression,1,expression.getTextLength() - 2);
  }
 else   if (type != null && type.equals(PsiType.CHAR)) {
    final Character value=(Character)expression.getValue();
    if (value == null) {
      return;
    }
    final char unboxedValue=value.charValue();
    if (unboxedValue == BACKSLASH || unboxedValue == SLASH) {
      registerErrorAtOffset(expression,1,expression.getTextLength() - 2);
    }
  }
}
