{
  if (location instanceof UsageViewShortNameLocation) {
    if (element instanceof PsiThrowStatement) {
      return UsageViewBundle.message("usage.target.exception");
    }
 else     if (element instanceof PsiAnonymousClass) {
      String name=((PsiAnonymousClass)element).getBaseClassReference().getReferenceName();
      return "anonymous " + StringUtil.notNullize(name,"class");
    }
 else     if (element instanceof PsiClassInitializer) {
      boolean isStatic=((PsiClassInitializer)element).hasModifierProperty(PsiModifier.STATIC);
      return isStatic ? "<clinit>" : "<init>";
    }
  }
  if (location instanceof UsageViewLongNameLocation) {
    if (element instanceof PsiPackage) {
      return ((PsiPackage)element).getQualifiedName();
    }
 else     if (element instanceof PsiClass) {
      if (element instanceof PsiAnonymousClass) {
        String name=((PsiAnonymousClass)element).getBaseClassReference().getReferenceName();
        return "anonymous " + StringUtil.notNullize(name,"class");
      }
 else {
        String ret=((PsiClass)element).getQualifiedName();
        if (ret == null) {
          ret=((PsiClass)element).getName();
        }
        return ret;
      }
    }
 else     if (element instanceof PsiVariable) {
      return ((PsiVariable)element).getName();
    }
 else     if (element instanceof PsiMethod) {
      PsiMethod psiMethod=(PsiMethod)element;
      return PsiFormatUtil.formatMethod(psiMethod,PsiSubstitutor.EMPTY,PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_PARAMETERS,PsiFormatUtilBase.SHOW_TYPE);
    }
  }
  return null;
}
