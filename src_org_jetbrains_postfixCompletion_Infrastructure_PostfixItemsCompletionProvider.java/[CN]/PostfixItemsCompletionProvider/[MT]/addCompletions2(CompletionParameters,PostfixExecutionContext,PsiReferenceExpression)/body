{
  Application application=ApplicationManager.getApplication();
  PostfixTemplatesManager manager=application.getComponent(PostfixTemplatesManager.class);
  PsiElement positionElement=parameters.getPosition();
  PsiElement reference=positionElement.getParent();
  PostfixTemplateContext acceptanceContext=new PostfixTemplateContext(reference,(PsiExpression)reference,executionContext){
    @NotNull @Override protected List<PrefixExpressionContext> buildExpressionContexts(    @NotNull PsiElement reference,    @NotNull PsiExpression expression){
      final PsiReferenceExpression qualifier=(PsiReferenceExpression)mockExpression.getQualifier();
      return Collections.<PrefixExpressionContext>singletonList(new PrefixExpressionContext(this,expression){
        @Nullable @Override protected PsiType calculateExpressionType(){
          return qualifier.getType();
        }
        @Nullable @Override protected PsiElement calculateReferencedElement(){
          return qualifier.resolve();
        }
        @NotNull @Override protected TextRange calculateExpressionRange(){
          return super.calculateExpressionRange();
        }
      }
);
    }
    @NotNull @Override public PrefixExpressionContext fixExpression(    @NotNull PrefixExpressionContext context){
      return context;
    }
    @Override public boolean isBrokenStatement(    @NotNull PsiStatement statement){
      return super.isBrokenStatement(statement);
    }
  }
;
  if (acceptanceContext != null) {
    return manager.collectTemplates(acceptanceContext);
  }
  return Collections.emptyList();
}
