{
  extend(CompletionType.BASIC,PATTERN,new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      PsiElement original=parameters.getPosition();
      PsiFile file=original.getContainingFile();
      int offset=parameters.getOffset();
      String prefix=getPrefix(offset,file);
      if (prefix.length() > 0) {
        result=result.withPrefixMatcher(prefix);
      }
      RestReference[] elements=PsiTreeUtil.getChildrenOfType(file,RestReference.class);
      RestReferenceTarget[] targets=PsiTreeUtil.getChildrenOfType(file,RestReferenceTarget.class);
      Set<String> names=new HashSet<>();
      if (targets != null) {
        for (        RestReferenceTarget t : targets) {
          names.add(t.getReferenceName());
        }
      }
      if (elements != null) {
        for (        RestReference e : elements) {
          String name=e.getReferenceText();
          if (!names.contains(name)) {
            if ((name.startsWith("[") && name.endsWith("]")) || (name.startsWith("|") && name.endsWith("|")))             result.addElement(LookupElementBuilder.create(name));
 else             if (name.equals("__"))             result.addElement(LookupElementBuilder.create(name + ":"));
 else {
              if (name.startsWith("_"))               name="\\" + name;
              result.addElement(LookupElementBuilder.create("_" + name + ":"));
            }
          }
        }
      }
    }
    private String getPrefix(    int offset,    PsiFile file){
      if (offset > 0) {
        offset--;
      }
      final String text=file.getText();
      StringBuilder prefixBuilder=new StringBuilder();
      while (offset > 0 && (Character.isLetterOrDigit(text.charAt(offset)) || text.charAt(offset) == '_' || text.charAt(offset) == '[') || text.charAt(offset) == '|') {
        prefixBuilder.insert(0,text.charAt(offset));
        if (text.charAt(offset) == '_' || text.charAt(offset) == '[' || text.charAt(offset) == '|') {
          break;
        }
        offset--;
      }
      return prefixBuilder.toString();
    }
  }
);
}
