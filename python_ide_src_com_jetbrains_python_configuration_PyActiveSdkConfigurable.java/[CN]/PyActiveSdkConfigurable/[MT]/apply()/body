{
  mySdkSettingsWereModified=false;
  Sdk selectedSdk=getSelectedSdk();
  if (selectedSdk instanceof PyDetectedSdk) {
    final String sdkName=selectedSdk.getName();
    VirtualFile sdkHome=ApplicationManager.getApplication().runWriteAction(new Computable<VirtualFile>(){
      @Override public VirtualFile compute(){
        return LocalFileSystem.getInstance().refreshAndFindFileByPath(sdkName);
      }
    }
);
    selectedSdk=SdkConfigurationUtil.createAndAddSDK(sdkHome.getPath(),PythonSdkType.getInstance());
    if (selectedSdk != null) {
      myProjectSdksModel.addSdk(selectedSdk);
    }
  }
 else   if (myInitialSdkSet.contains(selectedSdk)) {
    final Sdk finalSelectedSdk=selectedSdk;
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        ProgressManager.getInstance().run(new Task.Backgroundable(myProject,PyBundle.message("sdk.gen.updating.skels"),false){
          @Override public void run(          @NotNull ProgressIndicator indicator){
            PythonSdkUpdater.updateSdk(finalSelectedSdk,myProject);
          }
        }
);
      }
    }
);
  }
  if (selectedSdk != null) {
    updateSdkList(false);
    myProjectSdksModel.apply();
    setSelectedSdk(selectedSdk);
    PySdkService.getInstance().solidifySdk(selectedSdk);
  }
  final Sdk prevSdk=getSdk();
  setSdk(selectedSdk);
  rehighlightStringLiterals(selectedSdk,prevSdk);
}
