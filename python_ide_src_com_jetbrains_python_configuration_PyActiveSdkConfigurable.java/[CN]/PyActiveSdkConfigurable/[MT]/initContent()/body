{
  myInterpreterList=PyConfigurableInterpreterList.getInstance(myProject);
  myInterpreterList.setSdkCombo(mySdkCombo);
  myProjectSdksModel=myInterpreterList.getModel();
  mySdkModelListener=new MySdkModelListener(this);
  myProjectSdksModel.addListener(mySdkModelListener);
  mySdkCombo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final Sdk selectedSdk=(Sdk)mySdkCombo.getSelectedItem();
      myPackagesPanel.updatePackages(selectedSdk != null ? new PyPackageManagementService(myProject,selectedSdk) : null);
    }
  }
);
  myDetailsCallback=new NullableConsumer<Sdk>(){
    @Override public void consume(    @Nullable Sdk sdk){
      if (sdk instanceof PyDetectedSdk) {
        final Sdk addedSdk=SdkConfigurationUtil.setupSdk(myProjectSdksModel.getSdks(),sdk.getHomeDirectory(),PythonSdkType.getInstance(),true,null,null);
        myAddedSdk=true;
        myProjectSdksModel.addSdk(addedSdk);
        myProjectSdksModel.removeSdk(sdk);
        mySdkCombo.setSelectedItem(addedSdk);
      }
 else       if (getSdk() != sdk) {
        mySdkCombo.setSelectedItem(sdk);
      }
    }
  }
;
  myDetailsButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      PythonSdkDetailsStep.show(myProject,myProjectSdksModel.getSdks(),myModule == null ? new PythonSdkDetailsDialog(myProject,myDetailsCallback) : new PythonSdkDetailsDialog(myModule,myDetailsCallback),myMainPanel,myDetailsButton.getLocationOnScreen(),true,new NullableConsumer<Sdk>(){
        @Override public void consume(        Sdk sdk){
          if (sdk == null)           return;
          if (myProjectSdksModel.findSdk(sdk) == null) {
            myProjectSdksModel.addSdk(sdk);
            myAddedSdk=true;
          }
          updateSdkList(false);
          mySdkCombo.getModel().setSelectedItem(sdk);
          myPackagesPanel.updatePackages(new PyPackageManagementService(myProject,sdk));
        }
      }
);
    }
  }
);
}
