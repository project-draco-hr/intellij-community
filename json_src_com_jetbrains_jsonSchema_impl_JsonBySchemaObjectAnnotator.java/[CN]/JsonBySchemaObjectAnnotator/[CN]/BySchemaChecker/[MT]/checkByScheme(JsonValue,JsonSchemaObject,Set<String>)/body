{
  if (value == null)   return;
  if (schema.getAnyOf() != null && !schema.getAnyOf().isEmpty()) {
    processAnyOf(value,schema,validatedProperties);
  }
  if (schema.getOneOf() != null && !schema.getOneOf().isEmpty()) {
    processOneOf(value,schema,validatedProperties);
  }
  if (schema.getAllOf() != null && !schema.getAllOf().isEmpty()) {
    processAllOf(value,schema,validatedProperties);
  }
  final JsonSchemaType type=getType(value);
  if (type == null) {
    typeError(value);
    return;
  }
  JsonSchemaType schemaType=matchSchemaType(schema,type);
  if (schemaType == null && schema.hasSpecifiedType()) {
    typeError(value);
    return;
  }
  if (JsonSchemaType._boolean.equals(type)) {
    checkForEnum(value,schema);
    return;
  }
  if (JsonSchemaType._number.equals(type) || JsonSchemaType._integer.equals(type)) {
    checkNumber(value,schema,schemaType);
    checkForEnum(value,schema);
    return;
  }
  if (JsonSchemaType._string.equals(type)) {
    checkString(value,schema);
    checkForEnum(value,schema);
    return;
  }
  if (JsonSchemaType._array.equals(type)) {
    checkArray(value,schema);
    checkForEnum(value,schema);
    return;
  }
  if (JsonSchemaType._object.equals(type)) {
    checkObject(value,schema,validatedProperties);
    checkForEnum(value,schema);
    return;
  }
  if (JsonSchemaType._null.equals(type)) {
    return;
  }
}
