{
  final List<JsonSchemaObject> oneOf=schema.getOneOf();
  final Map<PsiElement,String> errors=new HashMap<PsiElement,String>();
  int cntCorrect=0;
  boolean validatedPropertiesAdded=false;
  for (  JsonSchemaObject object : oneOf) {
    final BySchemaChecker checker=new BySchemaChecker();
    final HashSet<String> local=new HashSet<String>();
    checker.checkByScheme(value,object,local);
    if (checker.isCorrect()) {
      if (!validatedPropertiesAdded) {
        validatedPropertiesAdded=true;
        validatedProperties.addAll(local);
      }
      ++cntCorrect;
    }
 else {
      if (errors.isEmpty() || !checker.getErrors().containsKey(value)) {
        errors.clear();
        errors.putAll(checker.getErrors());
      }
    }
  }
  if (cntCorrect == 1)   return;
  if (cntCorrect > 0) {
    error("Validates to more than one variant",value);
  }
 else {
    if (!errors.isEmpty()) {
      for (      Map.Entry<PsiElement,String> entry : errors.entrySet()) {
        error(entry.getValue(),entry.getKey());
      }
    }
  }
}
