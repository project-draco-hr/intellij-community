{
  if (!(contextComment instanceof GrDocComment)) {
    return null;
  }
  final GrDocCommentOwner owner=GrDocCommentUtil.findDocOwner((GrDocComment)contextComment);
  if (owner == null)   return null;
  Project project=contextComment.getProject();
  final CodeDocumentationAwareCommenter commenter=(CodeDocumentationAwareCommenter)LanguageCommenters.INSTANCE.forLanguage(owner.getLanguage());
  StringBuilder builder=StringBuilderSpinAllocator.alloc();
  try {
    if (owner instanceof GrMethod) {
      final GrMethod method=(GrMethod)owner;
      JavaDocumentationProvider.generateParametersTakingDocFromSuperMethods(project,builder,commenter,method);
      final PsiType returnType=method.getInferredReturnType();
      if ((returnType != null || method.getModifierList().hasModifierProperty(GrModifier.DEF)) && returnType != PsiType.VOID) {
        builder.append(CodeDocumentationUtil.createDocCommentLine(RETURN_TAG,project,commenter));
        builder.append(LINE_SEPARATOR);
      }
      final PsiClassType[] references=method.getThrowsList().getReferencedTypes();
      for (      PsiClassType reference : references) {
        builder.append(CodeDocumentationUtil.createDocCommentLine(THROWS_TAG,project,commenter));
        builder.append(reference.getClassName());
        builder.append(LINE_SEPARATOR);
      }
    }
 else     if (owner instanceof GrTypeDefinition) {
      final PsiTypeParameterList typeParameterList=((PsiClass)owner).getTypeParameterList();
      if (typeParameterList != null) {
        JavaDocumentationProvider.createTypeParamsListComment(builder,project,commenter,typeParameterList);
      }
    }
    return builder.length() > 0 ? builder.toString() : null;
  }
  finally {
    StringBuilderSpinAllocator.dispose(builder);
  }
}
