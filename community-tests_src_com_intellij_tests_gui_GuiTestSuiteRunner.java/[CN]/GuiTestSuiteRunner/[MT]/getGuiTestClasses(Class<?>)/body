{
  List<File> guiTestClassFiles=Lists.newArrayList();
  List<TestGroup> suiteGroups=getSuiteGroups(suiteClass);
  File parentDir=getParentDir(suiteClass);
  String packagePath=suiteClass.getPackage().getName().replace('.',File.separatorChar);
  int packagePathIndex=parentDir.getPath().indexOf(packagePath);
  assertThat(packagePathIndex).isGreaterThan(-1);
  String testDirPath=parentDir.getPath().substring(0,packagePathIndex);
  findPotentialGuiTestClassFiles(parentDir,guiTestClassFiles);
  List<Class<?>> guiTestClasses=Lists.newArrayList();
  ClassLoader classLoader=suiteClass.getClassLoader();
  for (  File classFile : guiTestClassFiles) {
    String path=classFile.getPath();
    String className=path.substring(testDirPath.length(),path.indexOf(DOT_CLASS)).replace(File.separatorChar,'.');
    try {
      Class<?> testClass=classLoader.loadClass(className);
      if (GuiTestCase.class.isAssignableFrom(testClass) && isInGroup(testClass,suiteGroups)) {
        guiTestClasses.add(testClass);
      }
    }
 catch (    ClassNotFoundException e) {
      throw new InitializationError(e);
    }
  }
  return guiTestClasses.toArray(new Class<?>[guiTestClasses.size()]);
}
