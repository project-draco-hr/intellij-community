{
  String namePattern=StringUtil.getShortName(parameters.getCompletePattern());
  boolean hasDollar=namePattern.contains("$");
  if (hasDollar) {
    Matcher matcher=ChooseByNamePopup.patternToDetectAnonymousClasses.matcher(namePattern);
    if (matcher.matches()) {
      namePattern=matcher.group(1);
      hasDollar=namePattern.contains("$");
    }
  }
  final MinusculeMatcher innerMatcher=hasDollar ? NameUtil.buildMatcher("*" + namePattern).build() : null;
  PsiShortNamesCache.getInstance(parameters.getProject()).processClassesWithName(name,new Processor<PsiClass>(){
    final boolean isAnnotation=parameters.getLocalPatternName().startsWith("@");
    @Override public boolean process(    PsiClass aClass){
      if (aClass.getContainingFile().getVirtualFile() == null || !aClass.isPhysical())       return true;
      if (isAnnotation && !aClass.isAnnotationType())       return true;
      if (innerMatcher != null) {
        if (aClass.getContainingClass() == null)         return true;
        String jvmQName=ClassUtil.getJVMClassName(aClass);
        if (jvmQName == null || !innerMatcher.matches(StringUtil.getShortName(jvmQName)))         return true;
      }
      return processor.process(aClass);
    }
  }
,parameters.getSearchScope(),parameters.getIdFilter());
}
