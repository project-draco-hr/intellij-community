{
  return new DataIndexer<String,Multiset<MethodIncompleteSignature>,ClassNode>(){
    @NotNull @Override public Map<String,Multiset<MethodIncompleteSignature>> map(    final ClassNode inputData){
      final Map<String,Multiset<MethodIncompleteSignature>> map=new HashMap<String,Multiset<MethodIncompleteSignature>>();
      for (      final ClassFileData.MethodData data : new ClassFileData(inputData).getMethodDatas()) {
        for (        final ClassFileData.MethodInsnSignature ms : data.getMethodInsnSignatures()) {
          final String ownerClassName=AsmUtil.getQualifiedClassName(ms.getOwner());
          final String returnType=AsmUtil.getReturnType(ms.getDesc());
          if (MethodIncompleteSignature.CONSTRUCTOR_METHOD_NAME.equals(ms.getName())) {
            addToIndex(map,ownerClassName,MethodIncompleteSignature.constructor(ownerClassName));
          }
 else {
            final boolean isStatic=ms.getOpcode() == Opcodes.INVOKESTATIC;
            if (!ownerClassName.equals(returnType) || isStatic) {
              addToIndex(map,returnType,new MethodIncompleteSignature(ownerClassName,returnType,ms.getName(),isStatic));
            }
          }
        }
      }
      return map;
    }
  }
;
}
