{
  if (!file.isValid()) {
    throw new IllegalArgumentException("file is not valid: " + file);
  }
  assertDispatchThread();
  if (isOpenInNewWindow(EventQueue.getCurrentEvent())) {
    return openFileInNewWindow(file);
  }
  EditorWindow wndToOpenIn=null;
  if (searchForSplitter) {
    Set<EditorsSplitters> all=getAllSplitters();
    EditorsSplitters active=getActiveSplitters(true).getResult();
    if (active.getCurrentWindow() != null && active.getCurrentWindow().isFileOpen(file)) {
      wndToOpenIn=active.getCurrentWindow();
    }
 else {
      for (      EditorsSplitters splitters : all) {
        final EditorWindow window=splitters.getCurrentWindow();
        if (window == null)         continue;
        if (window.isFileOpen(file)) {
          wndToOpenIn=window;
          break;
        }
      }
    }
  }
 else {
    wndToOpenIn=getSplitters().getCurrentWindow();
  }
  if (wndToOpenIn == null || !wndToOpenIn.isFileOpen(file)) {
    PreviewManager previewManager=PreviewManager.SERVICE.getInstance(myProject);
    if (previewManager != null) {
      Pair<FileEditor[],FileEditorProvider[]> previewResult=previewManager.preview(FilePreviewPanelProvider.ID,file,focusEditor);
      if (previewResult != null) {
        return previewResult;
      }
    }
  }
  EditorsSplitters splitters=getSplitters();
  if (wndToOpenIn == null) {
    wndToOpenIn=splitters.getOrCreateCurrentWindow(file);
  }
  openAssociatedFile(file,wndToOpenIn,splitters);
  return openFileImpl2(wndToOpenIn,file,focusEditor);
}
