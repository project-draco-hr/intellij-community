{
  myProject=project;
  myDockManager=dockManager;
  myEditorHistoryManager=editorHistoryManager;
  myListenerList=new MessageListenerList<FileEditorManagerListener>(myProject.getMessageBus(),FileEditorManagerListener.FILE_EDITOR_MANAGER);
  if (Extensions.getExtensions(FileEditorAssociateFinder.EP_NAME).length > 0) {
    myListenerList.add(new FileEditorManagerAdapter(){
      @Override public void selectionChanged(      @NotNull FileEditorManagerEvent event){
        EditorsSplitters splitters=getSplitters();
        openAssociatedFile(event.getNewFile(),splitters.getCurrentWindow(),splitters);
      }
    }
);
  }
  myQueue.setTrackUiActivity(true);
  project.getMessageBus().connect().subscribe(DumbService.DUMB_MODE,new DumbService.DumbModeListener(){
    public void enteredDumbMode(){
    }
    public void exitDumbMode(){
      VirtualFile[] files=getOpenFiles();
      for (      VirtualFile file : files) {
        Set<FileEditorProvider> providers=new HashSet<FileEditorProvider>();
        List<EditorWithProviderComposite> composites=getEditorComposites(file);
        for (        EditorWithProviderComposite composite : composites) {
          providers.addAll(Arrays.asList(composite.getProviders()));
        }
        FileEditorProvider[] newProviders=FileEditorProviderManager.getInstance().getProviders(project,file);
        if (newProviders.length > providers.size()) {
          List<FileEditorProvider> toOpen=new ArrayList<FileEditorProvider>(Arrays.asList(newProviders));
          toOpen.removeAll(providers);
          for (          EditorWithProviderComposite composite : composites) {
            for (            FileEditorProvider provider : toOpen) {
              FileEditor editor=provider.createEditor(myProject,file);
              composite.addEditor(editor,provider);
            }
          }
        }
      }
    }
  }
);
}
