{
  AnalysisResultImpl ret=new AnalysisResultImpl();
  PyExpression[] arguments=getArguments();
  PyCallExpression call=getCallExpression();
  if (call != null) {
    PyCallExpression.PyMarkedFunction resolved_callee=call.resolveCallee();
    ret.my_marked_func=resolved_callee;
    if (resolved_callee != null) {
      PyFunction func=resolved_callee.getFunction();
      PyParameter[] params=func.getParameterList().getParameters();
      List<PyExpression> unmatched_args=new LinkedList<PyExpression>();
      Collections.addAll(unmatched_args,arguments);
      Map<String,PyExpression> param_slots=new HashMap<String,PyExpression>();
      PyParameter kwd_slot=null;
      PyParameter tuple_slot=null;
      PyStarArgument kwd_arg=null;
      PyStarArgument tuple_arg=null;
      for (      PyParameter a_param : params) {
        if (a_param.isPositionalContainer())         tuple_slot=a_param;
 else         if (a_param.isKeywordContainer())         kwd_slot=a_param;
 else         param_slots.put(a_param.getName(),null);
      }
      for (      PyExpression arg : arguments) {
        if (arg instanceof PyStarArgument) {
          final PyStarArgument star_arg=(PyStarArgument)arg;
          if (star_arg.isKeyword()) {
            if (kwd_arg == null)             kwd_arg=star_arg;
 else {
              ret.markArgument(arg,ArgFlag.IS_DUP_KWD);
              unmatched_args.remove(arg);
            }
          }
 else {
            if (tuple_arg == null) {
              tuple_arg=star_arg;
            }
 else {
              ret.markArgument(arg,ArgFlag.IS_DUP_TUPLE);
              unmatched_args.remove(arg);
            }
          }
        }
      }
      int param_index=0;
      for (int i=0; i < resolved_callee.getImplicitOffset() && i < params.length; i+=1) {
        param_slots.remove(params[i].getName());
        param_index+=1;
      }
      boolean seen_tuple_arg=false;
      boolean seen_kwd_arg=false;
      ListIterator<PyExpression> unmatched_arg_iter=unmatched_args.listIterator();
      while (unmatched_arg_iter.hasNext() && (param_index < params.length)) {
        PyExpression arg=unmatched_arg_iter.next();
        PyParameter param=params[param_index];
        if (arg instanceof PyKeywordArgument || arg instanceof PyStarArgument || param.isKeywordContainer()|| param.isPositionalContainer()) {
          seen_tuple_arg|=(arg == tuple_arg);
          seen_kwd_arg|=(arg == kwd_arg);
          unmatched_arg_iter.previous();
          break;
        }
        param_slots.put(param.getName(),arg);
        ret.my_plain_mapped_params.put(arg,param);
        unmatched_arg_iter.remove();
        param_index+=1;
      }
      if (!seen_kwd_arg) {
        if (!seen_tuple_arg) {
          if (tuple_slot != null) {
            while (unmatched_arg_iter.hasNext()) {
              PyExpression arg=unmatched_arg_iter.next();
              if (arg instanceof PyKeywordArgument) {
                unmatched_arg_iter.previous();
                break;
              }
              ret.my_plain_mapped_params.put(arg,tuple_slot);
              unmatched_arg_iter.remove();
            }
          }
        }
        boolean seen_kwd=false;
        while (unmatched_arg_iter.hasNext()) {
          PyExpression arg=unmatched_arg_iter.next();
          if (arg instanceof PyKeywordArgument) {
            if (!seen_kwd_arg && !seen_tuple_arg) {
              final String argname=((PyKeywordArgument)arg).getKeyword();
              if (param_slots.containsKey(argname)) {
                if (param_slots.get(argname) == null) {
                  param_slots.put(argname,arg);
                  seen_kwd=true;
                }
 else {
                  ret.markArgument(arg,ArgFlag.IS_DUP);
                }
                unmatched_arg_iter.remove();
              }
            }
 else {
              ret.markArgument(arg,ArgFlag.IS_UNMAPPED);
              unmatched_arg_iter.remove();
            }
          }
 else           if (seen_kwd && (arg != kwd_arg)) {
            ret.markArgument(arg,ArgFlag.IS_POS_PAST_KWD);
            unmatched_arg_iter.remove();
          }
          seen_tuple_arg|=(arg == tuple_arg);
          seen_kwd_arg|=(arg == kwd_arg);
        }
        if (kwd_slot != null) {
          unmatched_arg_iter=unmatched_args.listIterator();
          while (unmatched_arg_iter.hasNext()) {
            PyExpression arg=unmatched_arg_iter.next();
            if (arg instanceof PyKeywordArgument) {
              ret.my_plain_mapped_params.put(arg,kwd_slot);
              unmatched_arg_iter.remove();
            }
          }
        }
      }
      if (seen_tuple_arg) {
        for (        PyParameter param : params) {
          final String param_name=param.getName();
          if ((param.getDefaultValue() == null) && param_slots.containsKey(param_name) && (param_slots.get(param_name) == null)) {
            param_slots.put(param_name,tuple_arg);
            unmatched_args.remove(tuple_arg);
          }
        }
      }
      if (seen_kwd_arg) {
        for (        PyParameter param : params) {
          final String param_name=param.getName();
          if ((param.getDefaultValue() == null) && param_slots.containsKey(param_name) && (param_slots.get(param_name) == null)) {
            param_slots.put(param_name,kwd_arg);
            unmatched_args.remove(kwd_arg);
          }
        }
      }
      Map<String,PyParameter> unfilled_params=new HashMap<String,PyParameter>();
      for (      PyParameter param : params) {
        final String param_name=param.getName();
        if ((param.getDefaultValue() == null) && param_slots.containsKey(param_name) && (param_slots.get(param_name) == null)) {
          if (tuple_arg != null) {
            param_slots.put(param_name,tuple_arg);
            unmatched_args.remove(tuple_arg);
          }
 else {
            unfilled_params.put(param_name,param);
          }
        }
      }
      if (kwd_arg != null && kwd_slot != null) {
        ret.my_kwd_mapped_params.add(kwd_slot);
        unmatched_args.remove(kwd_arg);
      }
      if (tuple_arg != null && tuple_slot != null) {
        ret.my_tuple_mapped_params.add(tuple_slot);
        unmatched_args.remove(tuple_arg);
      }
      if (tuple_arg != null && ret.my_tuple_mapped_params.isEmpty()) {
        for (        PyParameter param : params) {
          final String param_name=param.getName();
          if (param_slots.containsKey(param_name) && (param_slots.get(param_name) == null)) {
            param_slots.put(param_name,tuple_arg);
            unmatched_args.remove(tuple_arg);
          }
        }
      }
      if (kwd_arg != null && ret.my_kwd_mapped_params.isEmpty()) {
        for (        PyParameter param : params) {
          final String param_name=param.getName();
          if (param_slots.containsKey(param_name) && (param_slots.get(param_name) == null)) {
            param_slots.put(param_name,kwd_arg);
            unmatched_args.remove(kwd_arg);
          }
        }
      }
      boolean tuple_arg_consumed_some=false;
      for (      PyExpression arg : param_slots.values()) {
        if (arg != null && arg == tuple_arg) {
          tuple_arg_consumed_some=true;
          break;
        }
      }
      for (      PyExpression arg : unmatched_args) {
        if (arg == kwd_arg && tuple_arg_consumed_some)         continue;
        ret.markArgument(arg,ArgFlag.IS_UNMAPPED);
      }
      for (      final PyParameter param : unfilled_params.values()) {
        ret.my_unmapped_params.add(param);
      }
      for (      PyParameter param : params) {
        PyExpression arg=param_slots.get(param.getName());
        if (arg != null) {
          if (arg instanceof PyStarArgument) {
            PyStarArgument star_arg=(PyStarArgument)arg;
            if (star_arg.isKeyword())             ret.my_kwd_mapped_params.add(param);
 else             ret.my_tuple_mapped_params.add(param);
          }
 else           ret.my_plain_mapped_params.put(arg,param);
        }
      }
      ret.my_kwd_arg=kwd_arg;
      ret.my_tuple_arg=tuple_arg;
    }
  }
  return ret;
}
