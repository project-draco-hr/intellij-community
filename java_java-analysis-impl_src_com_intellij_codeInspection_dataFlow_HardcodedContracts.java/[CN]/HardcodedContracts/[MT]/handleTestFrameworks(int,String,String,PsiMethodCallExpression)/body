{
  if (("assertThat".equals(methodName) || "assumeThat".equals(methodName) || "that".equals(methodName)) && call != null) {
    return handleAssertThat(paramCount,call);
  }
  if (!"junit.framework.Assert".equals(className) && !"junit.framework.TestCase".equals(className) && !"org.junit.Assert".equals(className)&& !"org.junit.Assume".equals(className)&& !"org.testng.Assert".equals(className)&& !"org.testng.AssertJUnit".equals(className)) {
    return Collections.emptyList();
  }
  boolean testng=className.startsWith("org.testng.");
  if ("fail".equals(methodName)) {
    return Collections.singletonList(new MethodContract(createConstraintArray(paramCount),THROW_EXCEPTION));
  }
  if (paramCount == 0)   return Collections.emptyList();
  int checkedParam=testng ? 0 : paramCount - 1;
  MethodContract.ValueConstraint[] constraints=createConstraintArray(paramCount);
  if ("assertTrue".equals(methodName) || "assumeTrue".equals(methodName)) {
    constraints[checkedParam]=FALSE_VALUE;
    return Collections.singletonList(new MethodContract(constraints,THROW_EXCEPTION));
  }
  if ("assertFalse".equals(methodName) || "assumeFalse".equals(methodName)) {
    constraints[checkedParam]=TRUE_VALUE;
    return Collections.singletonList(new MethodContract(constraints,THROW_EXCEPTION));
  }
  if ("assertNull".equals(methodName)) {
    constraints[checkedParam]=NOT_NULL_VALUE;
    return Collections.singletonList(new MethodContract(constraints,THROW_EXCEPTION));
  }
  if ("assertNotNull".equals(methodName) || "assumeNotNull".equals(methodName)) {
    return failIfNull(checkedParam,paramCount);
  }
  return Collections.emptyList();
}
