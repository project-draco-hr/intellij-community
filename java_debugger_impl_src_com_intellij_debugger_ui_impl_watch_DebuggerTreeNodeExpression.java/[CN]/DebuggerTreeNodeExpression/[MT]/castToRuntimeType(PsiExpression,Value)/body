{
  if (!(value instanceof ObjectReference)) {
    return expression;
  }
  ReferenceType valueType=((ObjectReference)value).referenceType();
  if (valueType == null) {
    return expression;
  }
  Project project=expression.getProject();
  PsiClass type=RuntimeTypeEvaluator.getCastableRuntimeType(project,value);
  if (type == null) {
    return expression;
  }
  PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  String typeName=type.getQualifiedName();
  try {
    PsiParenthesizedExpression parenthExpression=(PsiParenthesizedExpression)elementFactory.createExpressionFromText("((" + typeName + ")expression)",null);
    ((PsiTypeCastExpression)parenthExpression.getExpression()).getOperand().replace(expression);
    Set<String> imports=expression.getUserData(ADDITIONAL_IMPORTS_KEY);
    if (imports == null) {
      imports=new SmartHashSet<String>();
    }
    imports.add(typeName);
    parenthExpression.putUserData(ADDITIONAL_IMPORTS_KEY,imports);
    return parenthExpression;
  }
 catch (  IncorrectOperationException e) {
    throw new EvaluateException(DebuggerBundle.message("error.invalid.type.name",typeName),e);
  }
}
