{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final boolean staticEqualsCall;
  if (MethodCallUtils.isEqualsCall(expression)) {
    staticEqualsCall=false;
  }
 else {
    final String name=methodExpression.getReferenceName();
    if (!"equals".equals(name) && !"equal".equals(name)) {
      return;
    }
    final PsiMethod method=expression.resolveMethod();
    if (method == null) {
      return;
    }
    final PsiClass aClass=method.getContainingClass();
    if (aClass == null) {
      return;
    }
    final String qualifiedName=aClass.getQualifiedName();
    if (!"java.util.Objects".equals(qualifiedName) && !"com.google.common.base.Objects".equals(qualifiedName)) {
      return;
    }
    staticEqualsCall=true;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  final PsiExpression expression1;
  final PsiExpression expression2;
  if (staticEqualsCall) {
    if (arguments.length != 2) {
      return;
    }
    expression1=arguments[0];
    expression2=arguments[1];
  }
 else {
    if (arguments.length != 1) {
      return;
    }
    expression1=arguments[0];
    expression2=methodExpression.getQualifierExpression();
  }
  final PsiType comparisonType;
  if (expression2 == null) {
    final PsiClass aClass=PsiTreeUtil.getParentOfType(expression,PsiClass.class);
    if (aClass == null) {
      return;
    }
    comparisonType=TypeUtils.getType(aClass);
  }
 else {
    comparisonType=expression2.getType();
  }
  if (comparisonType == null) {
    return;
  }
  final PsiType comparedType=expression1.getType();
  if (comparedType == null) {
    return;
  }
  final PsiType comparedTypeErasure=TypeConversionUtil.erasure(comparedType);
  final PsiType comparisonTypeErasure=TypeConversionUtil.erasure(comparisonType);
  if (comparedTypeErasure == null || comparisonTypeErasure == null || TypeConversionUtil.areTypesConvertible(comparedType,comparisonType)) {
    return;
  }
  registerMethodCallError(expression,comparedType,comparisonType);
}
