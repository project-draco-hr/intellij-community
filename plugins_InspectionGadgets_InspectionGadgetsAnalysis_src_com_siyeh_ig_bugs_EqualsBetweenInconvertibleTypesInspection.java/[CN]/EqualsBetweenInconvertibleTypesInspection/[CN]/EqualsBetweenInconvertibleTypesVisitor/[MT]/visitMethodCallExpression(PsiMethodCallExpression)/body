{
  super.visitMethodCallExpression(expression);
  if (!MethodCallUtils.isEqualsCall(expression)) {
    return;
  }
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiExpression expression1=arguments[0];
  final PsiExpression expression2=methodExpression.getQualifierExpression();
  final PsiType comparisonType;
  if (expression2 == null) {
    final PsiClass aClass=PsiTreeUtil.getParentOfType(expression,PsiClass.class);
    if (aClass == null) {
      return;
    }
    comparisonType=TypeUtils.getType(aClass);
  }
 else {
    comparisonType=expression2.getType();
  }
  if (comparisonType == null) {
    return;
  }
  final PsiType comparedType=expression1.getType();
  if (comparedType == null) {
    return;
  }
  final PsiType comparedTypeErasure=TypeConversionUtil.erasure(comparedType);
  final PsiType comparisonTypeErasure=TypeConversionUtil.erasure(comparisonType);
  if (comparedTypeErasure == null || comparisonTypeErasure == null || TypeConversionUtil.areTypesConvertible(comparedTypeErasure,comparisonTypeErasure)) {
    return;
  }
  registerMethodCallError(expression,comparedType,comparisonType);
}
