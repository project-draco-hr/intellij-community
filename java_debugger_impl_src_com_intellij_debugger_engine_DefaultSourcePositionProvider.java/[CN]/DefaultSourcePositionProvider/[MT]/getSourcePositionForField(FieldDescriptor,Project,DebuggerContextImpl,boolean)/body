{
  final ReferenceType type=descriptor.getField().declaringType();
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  final String fieldName=descriptor.getField().name();
  if (fieldName.startsWith(FieldDescriptorImpl.OUTER_LOCAL_VAR_FIELD_PREFIX)) {
    String varName=fieldName.substring(fieldName.lastIndexOf('$') + 1);
    PsiElement element=PositionUtil.getContextElement(context);
    if (element == null) {
      return null;
    }
    PsiClass aClass=PsiTreeUtil.getParentOfType(element,PsiClass.class,false);
    if (aClass == null) {
      return null;
    }
    PsiElement navigationElement=aClass.getNavigationElement();
    if (!(navigationElement instanceof PsiClass)) {
      return null;
    }
    aClass=(PsiClass)navigationElement;
    PsiVariable psiVariable=facade.getResolveHelper().resolveReferencedVariable(varName,aClass);
    if (psiVariable == null) {
      return null;
    }
    if (nearest) {
      return DebuggerContextUtil.findNearest(context,psiVariable,aClass.getContainingFile());
    }
    return SourcePosition.createFromElement(psiVariable);
  }
 else {
    final DebuggerSession session=context.getDebuggerSession();
    final GlobalSearchScope scope=session != null ? session.getSearchScope() : GlobalSearchScope.allScope(project);
    PsiClass aClass=facade.findClass(type.name().replace('$','.'),scope);
    if (aClass == null) {
      final DebugProcessImpl debugProcess=context.getDebugProcess();
      if (debugProcess != null) {
        try {
          final List<Location> locations=type.allLineLocations();
          if (!locations.isEmpty()) {
            final Location lastLocation=locations.get(locations.size() - 1);
            final SourcePosition position=debugProcess.getPositionManager().getSourcePosition(lastLocation);
            aClass=JVMNameUtil.getClassAt(position);
          }
        }
 catch (        AbsentInformationException ignored) {
        }
catch (        ClassNotPreparedException ignored) {
        }
      }
    }
    if (aClass != null) {
      PsiField field=aClass.findFieldByName(fieldName,false);
      if (field == null)       return null;
      if (nearest) {
        return DebuggerContextUtil.findNearest(context,field.getNavigationElement(),aClass.getContainingFile());
      }
      return SourcePosition.createFromElement(field);
    }
    return null;
  }
}
