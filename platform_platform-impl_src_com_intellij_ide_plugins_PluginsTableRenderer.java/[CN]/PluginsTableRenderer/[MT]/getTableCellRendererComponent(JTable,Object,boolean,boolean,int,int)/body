{
  if (myPluginDescriptor != null) {
    final PluginId pluginId=myPluginDescriptor.getPluginId();
    myName.setText(myPluginDescriptor.getName() + "  ");
    final Color fg=UIUtil.getTableForeground(isSelected);
    final Color bg=UIUtil.getTableBackground(isSelected);
    final Color grayedFg=isSelected ? fg : new JBColor(Gray._130,Gray._120);
    myName.setForeground(fg);
    myStatus.setForeground(grayedFg);
    myStatus.setIcon(AllIcons.Nodes.Plugin);
    String category=myPluginDescriptor.getCategory();
    myCategory.setForeground(grayedFg);
    if (category != null) {
      myCategory.setText(category.toUpperCase() + " ");
    }
    if (myPluginDescriptor.isBundled()) {
      myCategory.setText(myCategory.getText() + "[Bundled]");
      myStatus.setIcon(AllIcons.Nodes.PluginJB);
    }
    final String vendor=myPluginDescriptor.getVendor();
    if (vendor != null && vendor.toLowerCase().contains("jetbrains")) {
      myStatus.setIcon(AllIcons.Nodes.PluginJB);
    }
    myPanel.setBackground(bg);
    myLastUpdated.setForeground(grayedFg);
    myLastUpdated.setText("");
    myDownloads.setForeground(grayedFg);
    myDownloads.setText("");
    final PluginNode pluginNode=myPluginDescriptor instanceof PluginNode ? (PluginNode)myPluginDescriptor : null;
    if (pluginNode != null && pluginNode.getRepositoryName() == null) {
      String downloads=pluginNode.getDownloads();
      if (downloads == null)       downloads="";
      if (downloads.length() > 3) {
        downloads=new DecimalFormat("#,###").format(Integer.parseInt(downloads));
      }
      myDownloads.setText(downloads);
      myRating.setRate(pluginNode.getRating());
      myLastUpdated.setText(DateFormatUtil.formatBetweenDates(pluginNode.getDate(),System.currentTimeMillis()));
    }
    final IdeaPluginDescriptor installed=PluginManager.getPlugin(pluginId);
    if ((pluginNode != null && PluginManagerColumnInfo.isDownloaded(pluginNode)) || (installed != null && InstalledPluginsTableModel.wasUpdated(installed.getPluginId()))) {
      if (!isSelected)       myName.setForeground(FileStatus.ADDED.getColor());
      myStatus.setIcon(AllIcons.Nodes.PluginRestart);
      if (installed != null) {
        myPanel.setToolTipText("Plugin was updated to the newest version. Changes will be available after restart");
      }
 else {
        myPanel.setToolTipText("Plugin will be activated after restart.");
      }
    }
 else     if (pluginNode != null && pluginNode.getStatus() == PluginNode.STATUS_INSTALLED) {
      final boolean hasNewerVersion=InstalledPluginsTableModel.hasNewerVersion(pluginId);
      if (!isSelected)       myName.setForeground(FileStatus.MODIFIED.getColor());
      if (hasNewerVersion) {
        if (!isSelected) {
          myName.setForeground(FileStatus.MODIFIED.getColor());
        }
        myStatus.setIcon(AllIcons.Nodes.Pluginobsolete);
      }
    }
    if (InstalledPluginsTableModel.hasNewerVersion(pluginId)) {
      myStatus.setIcon(AllIcons.Nodes.Pluginobsolete);
      if (!isSelected) {
        myName.setForeground(FileStatus.MODIFIED.getColor());
      }
    }
    if (!myPluginDescriptor.isEnabled()) {
      myStatus.setIcon(IconLoader.getDisabledIcon(myStatus.getIcon()));
    }
    if (table.getModel() instanceof InstalledPluginsTableModel) {
      final InstalledPluginsTableModel installedPluginsTableModel=(InstalledPluginsTableModel)table.getModel();
      final Set<PluginId> required=installedPluginsTableModel.getRequiredPlugins(pluginId);
      if (required != null && required.size() > 0) {
        final StringBuilder s=new StringBuilder();
        if (!installedPluginsTableModel.isLoaded(pluginId)) {
          s.append("Plugin was not loaded.\n");
        }
        if (required.contains(PluginId.getId("com.intellij.modules.ultimate"))) {
          s.append("The plugin requires IntelliJ IDEA Ultimate");
        }
 else {
          s.append("Required plugin").append(required.size() == 1 ? " \"" : "s \"");
          s.append(StringUtil.join(required,new Function<PluginId,String>(){
            @Override public String fun(            final PluginId id){
              final IdeaPluginDescriptor plugin=PluginManager.getPlugin(id);
              return plugin == null ? id.getIdString() : plugin.getName();
            }
          }
,","));
          s.append(required.size() == 1 ? "\" is not enabled." : "\" are not enabled.");
        }
        myPanel.setToolTipText(s.toString());
      }
 else       if (PluginManagerCore.isIncompatible(myPluginDescriptor)) {
        myPanel.setToolTipText(IdeBundle.message("plugin.manager.incompatible.tooltip.warning",ApplicationNamesInfo.getInstance().getFullProductName()));
      }
    }
  }
  if (!isSelected) {
    if (PluginManagerCore.isIncompatible(myPluginDescriptor)) {
      myName.setForeground(JBColor.RED);
    }
 else     if (myPluginDescriptor != null && table.getModel() instanceof InstalledPluginsTableModel) {
      if (((InstalledPluginsTableModel)table.getModel()).hasProblematicDependencies(myPluginDescriptor.getPluginId())) {
        myName.setForeground(JBColor.RED);
      }
    }
  }
  return myPanel;
}
