{
  final JBList list=new JBList(myElements);
  list.setCellRenderer(new ColoredListCellRenderer<PipelineElement>(){
    @Override protected void customizeCellRenderer(    JList list,    PipelineElement element,    int index,    boolean selected,    boolean hasFocus){
      final String classFQName=element.getHandlerClass();
      final String[] split=classFQName.split("\\.");
      final int classShortNameIndex=classFQName.length() - split[split.length - 1].length();
      append(classFQName.substring(0,classShortNameIndex));
      append(classFQName.substring(classShortNameIndex),SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES.derive(SimpleTextAttributes.STYLE_BOLD,JBColor.BLUE,null,null));
      append("." + element.getMethodName(),SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
    }
  }
);
  return ToolbarDecorator.createDecorator(list).disableUpDownActions().setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final Project currentProject=CommonDataKeys.PROJECT.getData(button.getDataContext());
      if (currentProject == null) {
        return;
      }
      if (DumbService.isDumb(currentProject)) {
        return;
      }
      final AddMethodsDialog dlg=new AddMethodsDialog(currentProject,list,false);
      if (dlg.showAndGet()) {
        final PipelineElement newElement=dlg.getSelectedElement();
        if (myElements.contains(newElement)) {
          return;
        }
        myElements.add(newElement);
        ((DefaultListModel)list.getModel()).addElement(newElement);
      }
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final int[] indices=list.getSelectedIndices();
      final List<PipelineElement> toRemove=new ArrayList<PipelineElement>(indices.length);
      for (      int idx : indices) {
        toRemove.add(myElements.get(idx));
      }
      myElements.removeAll(toRemove);
      ListUtil.removeSelectedItems(list);
    }
  }
).createPanel();
}
