{
  final String text=literal.getText();
  final String quote=GrStringUtil.getStartQuote(text);
  final String value=GrStringUtil.removeQuotes(text);
  final StringBuilder buffer=new StringBuilder();
  buffer.append(quote);
  if (quote == "'") {
    GrStringUtil.escapeAndUnescapeSymbols(value,"","\"$",buffer);
  }
 else   if (quote == "'''") {
    int position=buffer.length();
    GrStringUtil.escapeAndUnescapeSymbols(value,"","\"'$n",buffer);
    GrStringUtil.fixAllTripleQuotes(buffer,position);
  }
 else   if (quote == "\"") {
    if (literal instanceof GrString) {
      final ASTNode node=literal.getNode();
      for (ASTNode child=node.getFirstChildNode(); child != null; child=child.getTreeNext()) {
        final IElementType type=child.getElementType();
        if (type == GroovyTokenTypes.mGSTRING_BEGIN || type == GroovyTokenTypes.mGSTRING_END)         continue;
        if (type == GroovyElementTypes.GSTRING_INJECTION) {
          buffer.append(child.getText());
        }
 else {
          GrStringUtil.escapeAndUnescapeSymbols(child.getText(),"","'",buffer);
        }
      }
    }
 else {
      GrStringUtil.escapeAndUnescapeSymbols(value,"","'",buffer);
    }
  }
 else   if (quote == "\"\"\"") {
    if (literal instanceof GrString) {
      final ASTNode node=literal.getNode();
      for (ASTNode child=node.getFirstChildNode(); child != null; child=child.getTreeNext()) {
        final IElementType type=child.getElementType();
        if (type == mGSTRING_BEGIN || type == mGSTRING_END)         continue;
        if (type == GroovyElementTypes.GSTRING_INJECTION) {
          buffer.append(child.getText());
        }
 else {
          final int position=buffer.length();
          GrStringUtil.escapeAndUnescapeSymbols(child.getText(),"","\"'n",buffer);
          GrStringUtil.fixAllTripleDoubleQuotes(buffer,position);
        }
      }
    }
 else {
      final int position=buffer.length();
      GrStringUtil.escapeAndUnescapeSymbols(value,"","\"'n",buffer);
      GrStringUtil.fixAllTripleDoubleQuotes(buffer,position);
    }
  }
 else {
    return text;
  }
  buffer.append(quote);
  return buffer.toString();
}
