{
  File[] jarDirs;
  if (SystemInfo.isMac && !home.getName().startsWith("mockJDK")) {
    File openJdkRtJar=new File(home,"jre/lib/rt.jar");
    if (openJdkRtJar.exists() && !openJdkRtJar.isDirectory()) {
      File libDir=new File(home,"lib");
      File classesDir=openJdkRtJar.getParentFile();
      File libExtDir=new File(openJdkRtJar.getParentFile(),"ext");
      File libEndorsedDir=new File(libDir,"endorsed");
      jarDirs=new File[]{libEndorsedDir,libDir,classesDir,libExtDir};
    }
 else {
      File libDir=new File(home,"lib");
      File classesDir=new File(home,"../Classes");
      File libExtDir=new File(libDir,"ext");
      File libEndorsedDir=new File(libDir,"endorsed");
      jarDirs=new File[]{libEndorsedDir,libDir,classesDir,libExtDir};
    }
  }
 else   if (new File(home,"lib/modules").exists()) {
    File libDir=new File(home,"lib");
    jarDirs=new File[]{libDir};
  }
 else {
    File libDir=new File(home,isJre ? "lib" : "jre/lib");
    File libExtDir=new File(libDir,"ext");
    File libEndorsedDir=new File(libDir,"endorsed");
    jarDirs=new File[]{libEndorsedDir,libDir,libExtDir};
  }
  FileFilter jarFileFilter=FileFilters.filesWithExtension("jar");
  Set<String> pathFilter=ContainerUtil.newTroveSet(FileUtil.PATH_HASHING_STRATEGY);
  List<File> rootFiles=ContainerUtil.newArrayList();
  for (  File jarDir : jarDirs) {
    if (jarDir != null && jarDir.isDirectory()) {
      File[] jarFiles=notNull(jarDir.listFiles(jarFileFilter),ArrayUtil.EMPTY_FILE_ARRAY);
      for (      File jarFile : jarFiles) {
        String jarFileName=jarFile.getName();
        if (jarFileName.equals("alt-rt.jar") || jarFileName.equals("alt-string.jar")) {
          continue;
        }
        String canonicalPath=getCanonicalPath(jarFile);
        if (canonicalPath == null || !pathFilter.add(canonicalPath)) {
          continue;
        }
        rootFiles.add(jarFile);
      }
    }
  }
  String[] ibmJdkVmJarDirs={"bin/default","lib/i386/default","lib/amd64/default"};
  for (  String relativePath : ibmJdkVmJarDirs) {
    File libDir=new File(home,isJre ? relativePath : "jre/" + relativePath);
    File[] vmJarDirs=notNull(libDir.listFiles(FileUtilRt.ALL_DIRECTORIES),ArrayUtil.EMPTY_FILE_ARRAY);
    for (    File dir : vmJarDirs) {
      if (dir.getName().startsWith("jclSC")) {
        File vmJar=new File(dir,"vm.jar");
        if (vmJar.isFile()) {
          rootFiles.add(vmJar);
        }
      }
    }
  }
  File classesZip=new File(home,"lib/classes.zip");
  if (classesZip.isFile()) {
    rootFiles.add(classesZip);
  }
  if (rootFiles.isEmpty()) {
    File classesDir=new File(home,"classes");
    if (classesDir.isDirectory()) {
      rootFiles.add(classesDir);
    }
  }
  return rootFiles;
}
