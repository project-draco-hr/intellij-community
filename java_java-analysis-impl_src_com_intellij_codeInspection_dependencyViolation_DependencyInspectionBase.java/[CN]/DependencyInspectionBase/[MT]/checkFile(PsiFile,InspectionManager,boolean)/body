{
  if (file.getViewProvider().getPsi(JavaLanguage.INSTANCE) == null) {
    return null;
  }
  final DependencyValidationManager validationManager=DependencyValidationManager.getInstance(file.getProject());
  if (!validationManager.hasRules() || validationManager.getApplicableRules(file).length == 0) {
    return null;
  }
  final List<ProblemDescriptor> problems=ContainerUtil.newSmartList();
  DependenciesBuilder.analyzeFileDependencies(file,new DependenciesBuilder.DependencyProcessor(){
    @SuppressWarnings("MismatchedQueryAndUpdateOfCollection") private final Map<PsiFile,DependencyRule[]> violations=new FactoryMap<PsiFile,DependencyRule[]>(){
      @Nullable @Override protected DependencyRule[] create(      PsiFile dependencyFile){
        return validationManager.getViolatorDependencyRules(file,dependencyFile);
      }
    }
;
    @Override public void process(    PsiElement place,    PsiElement dependency){
      PsiFile dependencyFile=dependency.getContainingFile();
      if (dependencyFile != null && dependencyFile.isPhysical() && dependencyFile.getVirtualFile() != null) {
        for (        DependencyRule dependencyRule : violations.get(dependencyFile)) {
          String message=InspectionsBundle.message("inspection.dependency.violator.problem.descriptor",dependencyRule.getDisplayText());
          LocalQuickFix[] fixes=createEditDependencyFixes(dependencyRule);
          problems.add(manager.createProblemDescriptor(place,message,isOnTheFly,fixes,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
      }
    }
  }
);
  return problems.isEmpty() ? null : problems.toArray(new ProblemDescriptor[problems.size()]);
}
