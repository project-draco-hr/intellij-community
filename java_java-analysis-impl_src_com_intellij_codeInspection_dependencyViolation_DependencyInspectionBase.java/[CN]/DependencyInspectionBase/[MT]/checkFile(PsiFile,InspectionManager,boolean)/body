{
  if (file.getViewProvider().getPsi(JavaLanguage.INSTANCE) == null)   return null;
  final DependencyValidationManager validationManager=DependencyValidationManager.getInstance(file.getProject());
  if (!validationManager.hasRules())   return null;
  if (validationManager.getApplicableRules(file).length == 0)   return null;
  final List<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
  DependenciesBuilder.analyzeFileDependencies(file,new DependenciesBuilder.DependencyProcessor(){
    @Override public void process(    PsiElement place,    PsiElement dependency){
      PsiFile dependencyFile=dependency.getContainingFile();
      if (dependencyFile != null && dependencyFile.isPhysical() && dependencyFile.getVirtualFile() != null) {
        final DependencyRule[] rule=validationManager.getViolatorDependencyRules(file,dependencyFile);
        for (        DependencyRule dependencyRule : rule) {
          problems.add(manager.createProblemDescriptor(place,InspectionsBundle.message("inspection.dependency.violator.problem.descriptor",dependencyRule.getDisplayText()),isOnTheFly,createEditDependencyFixes(dependencyRule),ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
      }
    }
  }
);
  return problems.isEmpty() ? null : problems.toArray(new ProblemDescriptor[problems.size()]);
}
