{
  final String testId=getTestId(eventXml);
  final String parentTestId=getParentTestId(eventXml);
  final String name=getTestName(eventXml);
  final String fqClassName=getTestClassName(eventXml);
  String locationUrl=findLocationUrl(name,fqClassName);
  final GradleSMTestProxy testProxy=new GradleSMTestProxy(name,false,locationUrl,fqClassName);
  testProxy.setStarted();
  testProxy.setLocator(getConsoleManager().getUrlProvider());
  registerTestProxy(testId,testProxy);
  if (StringUtil.isEmpty(parentTestId)) {
    addToInvokeLater(new Runnable(){
      @Override public void run(){
        getResultsViewer().getTestsRootNode().addChild(testProxy);
      }
    }
);
  }
 else {
    final SMTestProxy parentTestProxy=findTestProxy(parentTestId);
    if (parentTestProxy != null) {
      addToInvokeLater(new Runnable(){
        @Override public void run(){
          final List<GradleSMTestProxy> notYetAddedParents=ContainerUtil.newSmartList();
          SMTestProxy currentParentTestProxy=parentTestProxy;
          while (currentParentTestProxy != null && currentParentTestProxy instanceof GradleSMTestProxy) {
            final String parentId=((GradleSMTestProxy)currentParentTestProxy).getParentId();
            if (currentParentTestProxy.getParent() == null && parentId != null) {
              notYetAddedParents.add((GradleSMTestProxy)currentParentTestProxy);
            }
            currentParentTestProxy=findTestProxy(parentId);
          }
          for (          GradleSMTestProxy gradleSMTestProxy : ContainerUtil.reverse(notYetAddedParents)) {
            final SMTestProxy parentTestProxy=findTestProxy(gradleSMTestProxy.getParentId());
            if (parentTestProxy != null) {
              parentTestProxy.addChild(gradleSMTestProxy);
              getResultsViewer().onSuiteStarted(gradleSMTestProxy);
            }
          }
          parentTestProxy.addChild(testProxy);
        }
      }
);
    }
  }
  addToInvokeLater(new Runnable(){
    @Override public void run(){
      getResultsViewer().onTestStarted(testProxy);
    }
  }
);
}
