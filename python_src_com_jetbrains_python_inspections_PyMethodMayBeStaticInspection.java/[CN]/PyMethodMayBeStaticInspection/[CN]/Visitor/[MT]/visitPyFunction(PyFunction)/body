{
  if (PyNames.getBuiltinMethods(LanguageLevel.forElement(node)).containsKey(node.getName()))   return;
  final PyClass containingClass=node.getContainingClass();
  if (containingClass == null)   return;
  if (PythonUnitTestUtil.isUnitTestCaseClass(containingClass))   return;
  final Collection<PsiElement> supers=PySuperMethodsSearch.search(node).findAll();
  if (!supers.isEmpty())   return;
  final Collection<PyFunction> overrides=PyOverridingMethodsSearch.search(node,true).findAll();
  if (!overrides.isEmpty())   return;
  final PyDecoratorList decoratorList=node.getDecoratorList();
  if (decoratorList != null)   return;
  if (node.getModifier() != null)   return;
  final Property property=containingClass.findPropertyByCallable(node);
  if (property != null)   return;
  final PyStatementList statementList=node.getStatementList();
  final PyStatement[] statements=statementList.getStatements();
  if (statements.length == 1 && statements[0] instanceof PyPassStatement)   return;
  final PyParameter[] parameters=node.getParameterList().getParameters();
  final String selfName;
  if (parameters.length > 0) {
    final String name=parameters[0].getName();
    selfName=name != null ? name : parameters[0].getText();
  }
 else {
    selfName=PyNames.CANONICAL_SELF;
  }
  final boolean[] mayBeStatic={true};
  PyRecursiveElementVisitor visitor=new PyRecursiveElementVisitor(){
    @Override public void visitPyRaiseStatement(    PyRaiseStatement node){
      super.visitPyRaiseStatement(node);
      final PyExpression[] expressions=node.getExpressions();
      if (expressions.length == 1) {
        final PyExpression expression=expressions[0];
        if (expression instanceof PyCallExpression) {
          final PyExpression callee=((PyCallExpression)expression).getCallee();
          if (callee != null && PyNames.NOT_IMPLEMENTED_ERROR.equals(callee.getText()))           mayBeStatic[0]=false;
        }
 else         if (PyNames.NOT_IMPLEMENTED_ERROR.equals(expression.getText())) {
          mayBeStatic[0]=false;
        }
      }
    }
    @Override public void visitPyReferenceExpression(    PyReferenceExpression node){
      super.visitPyReferenceExpression(node);
      if (selfName.equals(node.getName())) {
        mayBeStatic[0]=false;
      }
    }
  }
;
  node.accept(visitor);
  final PsiElement identifier=node.getNameIdentifier();
  if (mayBeStatic[0] && identifier != null) {
    registerProblem(identifier,PyBundle.message("INSP.method.may.be.static"),ProblemHighlightType.WEAK_WARNING,null,new PyMakeMethodStaticQuickFix(),new PyMakeFunctionFromMethodQuickFix());
  }
}
