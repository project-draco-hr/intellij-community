{
  myTextLabel.setFont(UIUtil.getLabelFont());
  setPreferredSize(null);
  MyNode node=extractNode(value);
  if (node == null) {
    myTextLabel.setText(value.toString());
  }
 else {
    myTextLabel.setText(node.myDisplayName);
    if (myRoot == node.getParent()) {
      myTextLabel.setFont(myTree.getFont());
    }
  }
  myTextLabel.setForeground(selected ? UIUtil.getTreeSelectionForeground() : FOREGROUND);
  if (!selected && node != null) {
    Configurable configurable=node.myConfigurable;
    if (configurable != null) {
      if (myFilter.myContext.getErrors().containsKey(configurable)) {
        myTextLabel.setForeground(WRONG_CONTENT);
      }
 else       if (myFilter.myContext.getModified().contains(configurable)) {
        myTextLabel.setForeground(MODIFIED_CONTENT);
      }
    }
  }
  Project project=null;
  if (node != null) {
    SimpleNode parent=node.getParent();
    if (parent instanceof MyNode) {
      if (myRoot == parent.getParent()) {
        project=findConfigurableProject(node);
        if (node.myConfigurable instanceof SortedConfigurableGroup) {
          Configurable[] configurables=((SortedConfigurableGroup)node.myConfigurable).getConfigurables();
          if (configurables != null) {
            project=findConfigurableProject(configurables[0]);
          }
        }
      }
 else       if (((MyNode)parent).myConfigurable instanceof SortedConfigurableGroup) {
        if (((MyNode)node.getParent()).myConfigurable instanceof SortedConfigurableGroup) {
          project=findConfigurableProject(node);
        }
      }
    }
  }
  if (project != null) {
    myProjectIcon.setIcon(selected ? AllIcons.General.ProjectConfigurableSelected : AllIcons.General.ProjectConfigurable);
    myProjectIcon.setToolTipText(OptionsBundle.message(project.isDefault() ? "configurable.default.project.tooltip" : "configurable.current.project.tooltip"));
    myProjectIcon.setVisible(true);
  }
 else {
    myProjectIcon.setVisible(false);
  }
  Icon nodeIcon=null;
  if (node != null) {
    if (0 == node.getChildCount()) {
      nodeIcon=myTree.getEmptyHandle();
    }
 else     if (value instanceof DefaultMutableTreeNode) {
      DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)value;
      nodeIcon=myTree.isExpanded(new TreePath(treeNode.getPath())) ? myTree.getExpandedHandle() : myTree.getCollapsedHandle();
    }
  }
  myNodeIcon.setIcon(nodeIcon);
  if (node != null && tree.isVisible()) {
    int width=10 * node.myLevel + getPreferredSize().width;
    Insets insets=tree.getInsets();
    if (insets != null) {
      width+=insets.left + insets.right;
    }
    JScrollBar bar=myScroller.getVerticalScrollBar();
    if (bar != null && bar.isVisible()) {
      width+=bar.getWidth();
    }
    width=Math.min(width,300);
    JComponent view=SettingsTreeView.this;
    Dimension size=view.getMinimumSize();
    if (size.width < width) {
      size.width=width;
      view.setMinimumSize(size);
      view.revalidate();
      view.repaint();
    }
  }
  return this;
}
