{
  myTextLabel.setFont(UIUtil.getLabelFont());
  myRendererComponent.setBackground(selected ? UIUtil.getTreeSelectionBackground() : myTree.getBackground());
  MyNode node=extractNode(value);
  if (node == null) {
    myTextLabel.setText(value.toString());
  }
 else {
    myTextLabel.setText(node.myDisplayName);
    if (myRoot == node.getParent()) {
      myTextLabel.setFont(myTextLabel.getFont().deriveFont(Font.BOLD));
    }
    TreePath path=tree.getPathForRow(row);
    if (path == null) {
      if (value instanceof DefaultMutableTreeNode) {
        path=new TreePath(((DefaultMutableTreeNode)value).getPath());
      }
    }
    int forcedWidth=2000;
    if (path != null && tree.isVisible()) {
      Rectangle visibleRect=tree.getVisibleRect();
      int nestingLevel=tree.isRootVisible() ? path.getPathCount() - 1 : path.getPathCount() - 2;
      int left=UIUtil.getTreeLeftChildIndent();
      int right=UIUtil.getTreeRightChildIndent();
      Insets treeInsets=tree.getInsets();
      int indent=(left + right) * nestingLevel + (treeInsets != null ? treeInsets.left + treeInsets.right : 0);
      forcedWidth=visibleRect.width > 0 ? visibleRect.width - indent : forcedWidth;
    }
    myRendererComponent.setPrefereedWidth(forcedWidth - 4);
  }
  myTextLabel.setForeground(selected ? UIUtil.getTreeSelectionForeground() : NORMAL_NODE);
  if (!selected && node != null) {
    Configurable configurable=node.myConfigurable;
    if (configurable != null) {
      if (myFilter.myContext.getErrors().containsKey(configurable)) {
        myTextLabel.setForeground(WRONG_CONTENT);
      }
 else       if (myFilter.myContext.getModified().contains(configurable)) {
        myTextLabel.setForeground(MODIFIED_CONTENT);
      }
    }
  }
  Project project=null;
  if (node != null) {
    SimpleNode parent=node.getParent();
    if (parent instanceof MyNode) {
      if (myRoot == parent.getParent()) {
        project=findConfigurableProject(node);
        if (node.myConfigurable instanceof NodeConfigurable) {
          Configurable[] configurables=((NodeConfigurable)node.myConfigurable).getConfigurables();
          if (configurables != null) {
            project=findConfigurableProject(configurables[0]);
          }
        }
      }
 else       if (((MyNode)parent).myConfigurable instanceof NodeConfigurable) {
        if (((MyNode)node.getParent()).myConfigurable instanceof NodeConfigurable) {
          project=findConfigurableProject(node);
        }
      }
    }
  }
  if (project != null) {
    myProjectIcon.setIcon(selected ? AllIcons.General.ProjectConfigurableSelected : AllIcons.General.ProjectConfigurable);
    myProjectIcon.setToolTipText(OptionsBundle.message(project.isDefault() ? "configurable.default.project.tooltip" : "configurable.current.project.tooltip"));
    myProjectIcon.setVisible(true);
  }
 else {
    myProjectIcon.setVisible(false);
  }
  if (value instanceof DefaultMutableTreeNode) {
    DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)value;
    TreePath treePath=new TreePath(treeNode.getPath());
    myNodeIcon.setIcon(myTree.getHandleIcon(treeNode,treePath));
  }
 else {
    myNodeIcon.setIcon(null);
  }
  return myRendererComponent;
}
