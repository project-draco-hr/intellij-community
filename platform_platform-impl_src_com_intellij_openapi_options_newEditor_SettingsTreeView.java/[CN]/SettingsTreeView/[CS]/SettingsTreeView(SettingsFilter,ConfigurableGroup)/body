{
  myFilter=filter;
  myRoot=new MyRoot(groups);
  myTree=new MyTree();
  myTree.putClientProperty(WideSelectionTreeUI.TREE_TABLE_TREE_KEY,Boolean.TRUE);
  myTree.setBackground(BACKGROUND);
  myTree.getInputMap().clear();
  TreeUtil.installActions(myTree);
  myTree.setOpaque(true);
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  myTree.setCellRenderer(new MyRenderer());
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(false);
  myTree.setExpandableItemsEnabled(false);
  RelativeFont.BOLD.install(myTree);
  myScroller=ScrollPaneFactory.createScrollPane(myTree,true);
  myScroller.getVerticalScrollBar().setUI(ButtonlessScrollBarUI.createTransparent());
  myScroller.setBackground(BACKGROUND);
  myScroller.getViewport().setBackground(BACKGROUND);
  myScroller.getVerticalScrollBar().setBackground(BACKGROUND);
  add(myScroller);
  mySeparator=new JLabel();
  mySeparator.setForeground(FOREGROUND);
  mySeparator.setIconTextGap(10);
  mySeparator.setBorder(BorderFactory.createEmptyBorder(1,19,0,0));
  myTree.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      myBuilder.revalidateTree();
    }
    @Override public void componentMoved(    ComponentEvent e){
      myBuilder.revalidateTree();
    }
    @Override public void componentShown(    ComponentEvent e){
      myBuilder.revalidateTree();
    }
  }
);
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent event){
      MyNode node=extractNode(event.getNewLeadSelectionPath());
      select(node == null ? null : node.myConfigurable);
    }
  }
);
  myBuilder=new MyBuilder(new SimpleTreeStructure.Impl(myRoot));
  myBuilder.setFilteringMerge(300,null);
  Disposer.register(this,myBuilder);
}
