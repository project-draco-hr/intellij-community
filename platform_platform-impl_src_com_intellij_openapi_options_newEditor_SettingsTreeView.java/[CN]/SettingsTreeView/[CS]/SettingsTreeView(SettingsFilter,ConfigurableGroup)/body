{
  myFilter=filter;
  myRoot=new MyRoot(groups);
  myTree=new MyTree();
  myTree.getInputMap().clear();
  TreeUtil.installActions(myTree);
  myTree.setOpaque(true);
  myTree.setBorder(BorderFactory.createEmptyBorder(0,1,0,0));
  myTree.setRowHeight(-1);
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  myTree.setCellRenderer(myRenderer);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(false);
  myScroller=ScrollPaneFactory.createScrollPane(myTree);
  myScroller.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
  add(myScroller);
  myTree.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      myBuilder.revalidateTree();
    }
    @Override public void componentMoved(    ComponentEvent e){
      myBuilder.revalidateTree();
    }
    @Override public void componentShown(    ComponentEvent e){
      myBuilder.revalidateTree();
    }
  }
);
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent event){
      MyNode node=extractNode(event.getNewLeadSelectionPath());
      select(node == null ? null : node.myConfigurable);
    }
  }
);
  myBuilder=new MyBuilder(new SimpleTreeStructure.Impl(myRoot));
  myBuilder.setFilteringMerge(300,null);
  Disposer.register(this,myBuilder);
}
