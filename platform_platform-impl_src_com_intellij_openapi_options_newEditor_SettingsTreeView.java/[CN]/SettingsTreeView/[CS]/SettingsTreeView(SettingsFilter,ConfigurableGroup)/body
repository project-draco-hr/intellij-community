{
  myFilter=filter;
  myRoot=new MyRoot(groups);
  myTree=new MyTree();
  myTree.putClientProperty(WideSelectionTreeUI.TREE_TABLE_TREE_KEY,Boolean.TRUE);
  myTree.setBackground(UIUtil.SIDE_PANEL_BACKGROUND);
  myTree.getInputMap().clear();
  TreeUtil.installActions(myTree);
  myTree.setOpaque(true);
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  myTree.setCellRenderer(new MyRenderer());
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(false);
  myTree.setExpandableItemsEnabled(false);
  RelativeFont.BOLD.install(myTree);
  myTree.setTransferHandler(new TransferHandler(){
    @Nullable @Override protected Transferable createTransferable(    JComponent c){
      MyNode node=extractNode(myTree.getPathForRow(myTree.getLeadSelectionRow()));
      if (node != null) {
        StringBuilder sb=new StringBuilder("File | Settings");
        for (        String name : getPathNames(node)) {
          sb.append(" | ").append(name);
        }
        return new TextTransferable(sb.toString());
      }
      return null;
    }
    @Override public int getSourceActions(    JComponent c){
      return COPY;
    }
  }
);
  myScroller=ScrollPaneFactory.createScrollPane(null,true);
  myScroller.setViewport(new GradientViewport(myTree,JBUI.insetsTop(5),true){
    private JLabel myHeader;
    @Override protected Component getHeader(){
      if (0 == myTree.getY()) {
        return null;
      }
      if (myHeader == null) {
        myHeader=new JLabel();
        myHeader.setForeground(FOREGROUND);
        myHeader.setIconTextGap(ICON_GAP);
        myHeader.setBorder(BorderFactory.createEmptyBorder(1,10 + getLeftMargin(0),0,0));
      }
      myHeader.setFont(myTree.getFont());
      myHeader.setIcon(myTree.getEmptyHandle());
      int height=myHeader.getPreferredSize().height;
      String group=findGroupNameAt(0,height + 3);
      if (group == null || !group.equals(findGroupNameAt(0,0))) {
        return null;
      }
      myHeader.setText(group);
      return myHeader;
    }
  }
);
  if (!Registry.is("ide.scroll.new.layout")) {
    myScroller.getVerticalScrollBar().setUI(ButtonlessScrollBarUI.createTransparent());
  }
  if (!Registry.is("ide.scroll.background.auto")) {
    myScroller.setBackground(UIUtil.SIDE_PANEL_BACKGROUND);
    myScroller.getViewport().setBackground(UIUtil.SIDE_PANEL_BACKGROUND);
    myScroller.getVerticalScrollBar().setBackground(UIUtil.SIDE_PANEL_BACKGROUND);
  }
  add(myScroller);
  myTree.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      myBuilder.revalidateTree();
    }
    @Override public void componentMoved(    ComponentEvent e){
      myBuilder.revalidateTree();
    }
    @Override public void componentShown(    ComponentEvent e){
      myBuilder.revalidateTree();
    }
  }
);
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent event){
      MyNode node=extractNode(event.getNewLeadSelectionPath());
      select(node == null ? null : node.myConfigurable);
    }
  }
);
  myBuilder=new MyBuilder(new SimpleTreeStructure.Impl(myRoot));
  myBuilder.setFilteringMerge(300,null);
  Disposer.register(this,myBuilder);
}
