{
  final PsiElement[] elements=childDescriptor.getElements();
  if (elements == null) {
    return new TreeHashResult(0,0,parentFragment);
  }
switch (childDescriptor.getType()) {
case OPTIONALLY_IN_PATTERN:
case DEFAULT:
    TreeHashResult[] childResults=computeHashes(elements,parentFragment,nodeSpecificHasher);
  int[] hashes=getHashes(childResults);
int[] costs=getCosts(childResults);
int hash=AbstractTreeHasher.vector(hashes,31);
int cost=AbstractTreeHasher.vector(costs);
return new TreeHashResult(hash,cost,parentFragment);
case IN_ANY_ORDER:
childResults=computeHashes(elements,parentFragment,nodeSpecificHasher);
hashes=getHashes(childResults);
costs=getCosts(childResults);
hash=AbstractTreeHasher.vector(hashes);
cost=AbstractTreeHasher.vector(costs);
return new TreeHashResult(hash,cost,parentFragment);
default :
return new TreeHashResult(0,0,parentFragment);
}
}
