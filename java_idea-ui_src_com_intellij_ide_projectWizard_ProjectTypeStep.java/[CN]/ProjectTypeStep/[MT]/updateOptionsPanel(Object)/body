{
  String card=GROUP_CARD;
  if (object instanceof ProjectCategory) {
    final ProjectCategory projectCategory=(ProjectCategory)object;
    ModuleBuilder builder=myBuilders.get(projectCategory);
    JComponent panel=builder.getCustomOptionsPanel(new Disposable(){
      @Override public void dispose(){
        disposeUIResources();
      }
    }
);
    if (panel != null) {
      card=builder.getBuilderId();
      if (myCards.add(card)) {
        myOptionsPanel.add(panel,card);
      }
    }
 else {
      card=FRAMEWORKS_CARD;
      List<FrameworkSupportInModuleProvider> allProviders=FrameworkSupportUtil.getProviders(builder);
      List<FrameworkSupportInModuleProvider> matched=ContainerUtil.filter(allProviders,new Condition<FrameworkSupportInModuleProvider>(){
        @Override public boolean value(        FrameworkSupportInModuleProvider provider){
          return matchFramework(projectCategory,provider);
        }
      }
);
      myFrameworksPanel.setProviders(matched,new HashSet<String>(Arrays.asList(projectCategory.getAssociatedFrameworkIds())),new HashSet<String>(Arrays.asList(projectCategory.getPreselectedFrameworkIds())));
      List<ProjectCategory> templates=getTemplates(projectCategory.getId());
      myFrameworksTab.setHidden(matched.isEmpty() && !templates.isEmpty());
      myTemplatesList.setModel(new CollectionListModel<ProjectCategory>(templates));
      myTemplatesTab.setHidden(templates.isEmpty());
      if (!templates.isEmpty()) {
        myTemplatesList.setSelectedIndex(0);
      }
    }
  }
  ((CardLayout)myOptionsPanel.getLayout()).show(myOptionsPanel,card);
}
