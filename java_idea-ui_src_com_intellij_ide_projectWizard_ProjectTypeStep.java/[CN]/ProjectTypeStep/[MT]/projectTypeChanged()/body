{
  TemplatesGroup group=getSelectedGroup();
  if (group == null || group == myLastSelectedGroup)   return;
  myLastSelectedGroup=group;
  PropertiesComponent.getInstance().setValue(PROJECT_WIZARD_GROUP,group.getId());
  ModuleBuilder groupModuleBuilder=group.getModuleBuilder();
  mySettingsStep=null;
  myHeaderPanel.removeAll();
  if (groupModuleBuilder != null && groupModuleBuilder.getModuleType() != null) {
    mySettingsStep=groupModuleBuilder.modifyProjectTypeStep(this);
  }
  if (groupModuleBuilder == null || groupModuleBuilder.isTemplateBased()) {
    showTemplates(group);
  }
 else   if (!showCustomOptions(groupModuleBuilder)) {
    List<FrameworkSupportInModuleProvider> providers=FrameworkSupportUtil.getProviders(groupModuleBuilder);
    final ProjectCategory category=group.getProjectCategory();
    if (category != null) {
      List<FrameworkSupportInModuleProvider> filtered=ContainerUtil.filter(providers,new Condition<FrameworkSupportInModuleProvider>(){
        @Override public boolean value(        FrameworkSupportInModuleProvider provider){
          return matchFramework(category,provider);
        }
      }
);
      Map<String,FrameworkSupportInModuleProvider> map=ContainerUtil.newMapFromValues(providers.iterator(),PROVIDER_STRING_CONVERTOR);
      Set<FrameworkSupportInModuleProvider> set=new HashSet<FrameworkSupportInModuleProvider>(filtered);
      for (      FrameworkSupportInModuleProvider provider : filtered) {
        for (        FrameworkSupportInModuleProvider.FrameworkDependency depId : provider.getDependenciesFrameworkIds()) {
          FrameworkSupportInModuleProvider dependency=map.get(depId.getFrameworkId());
          set.add(dependency);
        }
      }
      myFrameworksPanel.setProviders(new ArrayList<FrameworkSupportInModuleProvider>(set),new HashSet<String>(Arrays.asList(category.getAssociatedFrameworkIds())),new HashSet<String>(Arrays.asList(category.getPreselectedFrameworkIds())));
    }
 else {
      myFrameworksPanel.setProviders(providers);
    }
    getSelectedBuilder().addModuleConfigurationUpdater(myConfigurationUpdater);
    showCard(FRAMEWORKS_CARD);
  }
  myHeaderPanel.setVisible(myHeaderPanel.getComponentCount() > 0);
  List<JLabel> labels=UIUtil.findComponentsOfType(myHeaderPanel,JLabel.class);
  int width=0;
  for (  JLabel label : labels) {
    int width1=label.getPreferredSize().width;
    width=Math.max(width,width1);
  }
  for (  JLabel label : labels) {
    label.setPreferredSize(new Dimension(width,label.getPreferredSize().height));
  }
  myHeaderPanel.revalidate();
  myHeaderPanel.repaint();
  updateSelection();
}
