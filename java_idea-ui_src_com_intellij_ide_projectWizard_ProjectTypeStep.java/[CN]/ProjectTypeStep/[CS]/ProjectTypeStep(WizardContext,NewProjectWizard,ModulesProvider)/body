{
  myContext=context;
  myWizard=wizard;
  myModulesProvider=modulesProvider;
  Project project=context.getProject();
  final LibrariesContainer container=LibrariesContainerFactory.createContainer(project);
  FrameworkSupportModelBase model=new FrameworkSupportModelBase(project,null,container){
    @NotNull @Override public String getBaseDirectoryForLibrariesPath(){
      return StringUtil.notNullize(getSelectedBuilder().getContentEntryPath());
    }
  }
;
  myConfigurationUpdater=new ModuleBuilder.ModuleConfigurationUpdater(){
    @Override public void update(    @NotNull Module module,    @NotNull ModifiableRootModel rootModel){
      myFrameworksPanel.addSupport(module,rootModel);
    }
  }
;
  myProjectTypeList.setCellRenderer(new ColoredListCellRenderer(){
    @Override protected void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      ProjectCategory category=(ProjectCategory)value;
      append(category.getDisplayName());
      setIcon(category.getIcon());
    }
  }
);
  List<ProjectCategory> categories=new ArrayList<ProjectCategory>();
  categories.addAll(ContainerUtil.map(ModuleBuilder.getAllBuilders(),new Function<ModuleBuilder,ProjectCategory>(){
    @Override public ProjectCategory fun(    ModuleBuilder builder){
      return new BuilderBasedProjectType(builder);
    }
  }
));
  categories.addAll(Arrays.asList(ProjectCategory.EXTENSION_POINT_NAME.getExtensions()));
  final MultiMap<String,ProjectCategory> map=new MultiMap<String,ProjectCategory>();
  for (  ProjectCategory category : categories) {
    map.putValue(category.getGroupName(),category);
  }
  Collections.sort(categories,new Comparator<ProjectCategory>(){
    @Override public int compare(    ProjectCategory o1,    ProjectCategory o2){
      return map.get(o2.getGroupName()).size() - map.get(o1.getGroupName()).size();
    }
  }
);
  myProjectTypeList.setModel(new CollectionListModel<ProjectCategory>(categories));
  myProjectTypeList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      ModuleBuilder builder=getSelectedBuilder();
      myContext.setProjectBuilder(builder);
      myWizard.getSequence().setType(builder.getBuilderId());
      builder.addModuleConfigurationUpdater(myConfigurationUpdater);
      updateOptionsPanel((ProjectCategory)myProjectTypeList.getSelectedValue());
    }
  }
);
  for (  ProjectCategory category : categories) {
    myWizard.getSequence().addStepsForBuilder(myBuilders.get(category),context,modulesProvider,true);
  }
  myFrameworksPanel=new AddSupportForFrameworksPanel(Collections.<FrameworkSupportInModuleProvider>emptyList(),model,true);
  Disposer.register(wizard.getDisposable(),myFrameworksPanel);
  myOptionsPanel.add(myFrameworksPanel.getMainPanel(),FRAMEWORKS_CARD);
  myProjectTypeList.setSelectedIndex(0);
}
