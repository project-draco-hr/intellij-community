{
  myContext=context;
  myWizard=wizard;
  myTemplatesMap=new ConcurrentMultiMap<TemplatesGroup,ProjectTemplate>();
  final List<TemplatesGroup> groups=fillTemplatesMap(context);
  myProjectTypeList.setModel(new CollectionListModel<TemplatesGroup>(groups));
  myProjectTypeList.setSelectionModel(new SingleSelectionModel());
  myProjectTypeList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      updateSelection();
    }
  }
);
  myProjectTypeList.setCellRenderer(new GroupedItemsListRenderer(new ListItemDescriptor<TemplatesGroup>(){
    @Nullable @Override public String getTextFor(    TemplatesGroup value){
      return value.getName();
    }
    @Nullable @Override public String getTooltipFor(    TemplatesGroup value){
      return value.getDescription();
    }
    @Nullable @Override public Icon getIconFor(    TemplatesGroup value){
      return value.getIcon();
    }
    @Override public boolean hasSeparatorAboveOf(    TemplatesGroup value){
      int index=groups.indexOf(value);
      if (index < 1)       return false;
      TemplatesGroup upper=groups.get(index - 1);
      if (upper.getParentGroup() == null && value.getParentGroup() == null)       return true;
      return !Comparing.equal(upper.getParentGroup(),value.getParentGroup()) && !Comparing.equal(upper.getName(),value.getParentGroup());
    }
    @Nullable @Override public String getCaptionAboveOf(    TemplatesGroup value){
      return null;
    }
  }
){
    @Override protected JComponent createItemComponent(){
      JComponent component=super.createItemComponent();
      myTextLabel.setBorder(IdeBorderFactory.createEmptyBorder(3));
      return component;
    }
  }
);
  new ListSpeedSearch(myProjectTypeList){
    @Override protected String getElementText(    Object element){
      return ((TemplatesGroup)element).getName();
    }
  }
;
  myModulesProvider=modulesProvider;
  Project project=context.getProject();
  final LibrariesContainer container=LibrariesContainerFactory.createContainer(project);
  FrameworkSupportModelBase model=new FrameworkSupportModelBase(project,null,container){
    @NotNull @Override public String getBaseDirectoryForLibrariesPath(){
      ModuleBuilder builder=getSelectedBuilder();
      return StringUtil.notNullize(builder.getContentEntryPath());
    }
  }
;
  myFrameworksPanel=new AddSupportForFrameworksPanel(Collections.<FrameworkSupportInModuleProvider>emptyList(),model,true);
  Disposer.register(this,myFrameworksPanel);
  myFrameworksPanelPlaceholder.add(myFrameworksPanel.getMainPanel());
  myConfigurationUpdater=new ModuleBuilder.ModuleConfigurationUpdater(){
    @Override public void update(    @NotNull Module module,    @NotNull ModifiableRootModel rootModel){
      if (isFrameworksMode()) {
        myFrameworksPanel.addSupport(module,rootModel);
      }
    }
  }
;
  myProjectTypeList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      projectTypeChanged();
    }
  }
);
  myTemplatesList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      updateSelection();
    }
  }
);
  for (  TemplatesGroup templatesGroup : myTemplatesMap.keySet()) {
    ModuleBuilder builder=templatesGroup.getModuleBuilder();
    if (builder != null) {
      myWizard.getSequence().addStepsForBuilder(builder,context,modulesProvider);
    }
    for (    ProjectTemplate template : myTemplatesMap.get(templatesGroup)) {
      myWizard.getSequence().addStepsForBuilder(myBuilders.get(template),context,modulesProvider);
    }
  }
  final String groupId=PropertiesComponent.getInstance().getValue(PROJECT_WIZARD_GROUP);
  if (groupId != null) {
    TemplatesGroup group=ContainerUtil.find(groups,new Condition<TemplatesGroup>(){
      @Override public boolean value(      TemplatesGroup group){
        return groupId.equals(group.getId());
      }
    }
);
    if (group != null) {
      myProjectTypeList.setSelectedValue(group,true);
    }
  }
  if (myProjectTypeList.getSelectedValue() == null) {
    myProjectTypeList.setSelectedIndex(0);
  }
  myTemplatesList.restoreSelection();
}
