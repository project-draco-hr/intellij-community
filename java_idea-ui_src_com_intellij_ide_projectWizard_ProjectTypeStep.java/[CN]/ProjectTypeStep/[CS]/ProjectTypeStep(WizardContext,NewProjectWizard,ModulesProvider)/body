{
  myContext=context;
  myWizard=wizard;
  myModulesProvider=modulesProvider;
  myTemplatesMap=new ConcurrentMultiMap<TemplatesGroup,ProjectTemplate>();
  myTemplatesMap.putAllValues(CreateFromTemplateMode.getTemplatesMap(context,false));
  for (  ProjectCategory category : ProjectCategory.EXTENSION_POINT_NAME.getExtensions()) {
    myTemplatesMap.put(new TemplatesGroup(category),new ArrayList<ProjectTemplate>());
  }
  if (context.isCreatingNewProject()) {
    MultiMap<String,ProjectTemplate> localTemplates=loadLocalTemplates();
    for (    TemplatesGroup group : myTemplatesMap.keySet()) {
      myTemplatesMap.putValues(group,localTemplates.get(group.getId()));
    }
  }
  for (Iterator<Map.Entry<TemplatesGroup,Collection<ProjectTemplate>>> iterator=myTemplatesMap.entrySet().iterator(); iterator.hasNext(); ) {
    Map.Entry<TemplatesGroup,Collection<ProjectTemplate>> entry=iterator.next();
    if (entry.getValue().isEmpty()) {
      iterator.remove();
    }
  }
  List<TemplatesGroup> groups=new ArrayList<TemplatesGroup>(myTemplatesMap.keySet());
  Collections.sort(groups);
  MultiMap<String,TemplatesGroup> subGroups=new MultiMap<String,TemplatesGroup>();
  for (ListIterator<TemplatesGroup> iterator=groups.listIterator(); iterator.hasNext(); ) {
    TemplatesGroup group=iterator.next();
    if (group.getParentGroup() != null) {
      subGroups.putValue(group.getParentGroup(),group);
      iterator.remove();
    }
  }
  for (ListIterator<TemplatesGroup> iterator=groups.listIterator(); iterator.hasNext(); ) {
    TemplatesGroup group=iterator.next();
    for (    TemplatesGroup subGroup : subGroups.get(group.getName())) {
      iterator.add(subGroup);
    }
  }
  myProjectTypeList.setModel(new CollectionListModel<TemplatesGroup>(groups));
  myProjectTypeList.setCellRenderer(new ColoredListCellRenderer<TemplatesGroup>(){
    @Override protected void customizeCellRenderer(    JList list,    TemplatesGroup value,    int index,    boolean selected,    boolean hasFocus){
      if (value.getParentGroup() != null) {
        append("         ");
      }
 else {
        setBorder(IdeBorderFactory.createEmptyBorder(3,10,3,5));
      }
      append(value.getName());
      setIcon(value.getIcon());
    }
  }
);
  myProjectTypeList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      projectTypeChanged();
    }
  }
);
  myTemplatesList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      updateSelection();
    }
  }
);
  for (  ProjectTemplate category : myTemplatesMap.values()) {
    myWizard.getSequence().addStepsForBuilder(myBuilders.get(category),context,modulesProvider);
  }
  myProjectTypeList.setSelectedIndex(0);
}
