{
  myContext=context;
  Project project=context.getProject();
  final LibrariesContainer container=LibrariesContainerFactory.createContainer(project);
  myModel=new FrameworkSupportModelBase(project,null,container){
    @NotNull @Override public String getBaseDirectoryForLibrariesPath(){
      return StringUtil.notNullize(getSelectedBuilder().getContentEntryPath());
    }
  }
;
  ProjectCategory[] projectCategories=ProjectCategory.EXTENSION_POINT_NAME.getExtensions();
  myProjectTypeList.setModel(new CollectionListModel<ProjectCategory>(Arrays.asList(projectCategories)));
  myProjectTypeList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      myContext.setProjectBuilder(getSelectedBuilder());
      updateFrameworks((ProjectCategory)myProjectTypeList.getSelectedValue());
    }
  }
);
  myFrameworksPanel=new AddSupportForFrameworksPanel(Collections.<FrameworkSupportInModuleProvider>emptyList(),myModel,true);
  Disposer.register(disposable,myFrameworksPanel);
  myOptionsPanel.add(myFrameworksPanel.getMainPanel(),BorderLayout.CENTER);
  myProjectTypeList.setSelectedIndex(0);
}
