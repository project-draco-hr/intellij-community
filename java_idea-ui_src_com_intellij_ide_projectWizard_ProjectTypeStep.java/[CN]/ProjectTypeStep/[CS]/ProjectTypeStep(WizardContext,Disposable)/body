{
  myContext=context;
  Project project=context.getProject();
  final LibrariesContainer container=LibrariesContainerFactory.createContainer(project);
  myModel=new FrameworkSupportModelBase(project,null,container){
    @NotNull @Override public String getBaseDirectoryForLibrariesPath(){
      return StringUtil.notNullize(getSelectedBuilder().getContentEntryPath());
    }
  }
;
  myConfigurationUpdater=new ModuleBuilder.ModuleConfigurationUpdater(){
    @Override public void update(    @NotNull Module module,    @NotNull ModifiableRootModel rootModel){
      myFrameworksPanel.addSupport(module,rootModel);
    }
  }
;
  ProjectCategory[] projectCategories=ProjectCategory.EXTENSION_POINT_NAME.getExtensions();
  myProjectTypeList.setModel(new CollectionListModel<ProjectCategory>(Arrays.asList(projectCategories)));
  myProjectTypeList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      ModuleBuilder builder=getSelectedBuilder();
      myContext.setProjectBuilder(builder);
      builder.addModuleConfigurationUpdater(myConfigurationUpdater);
      updateFrameworks((ProjectCategory)myProjectTypeList.getSelectedValue());
    }
  }
);
  myFrameworksPanel=new AddSupportForFrameworksPanel(Collections.<FrameworkSupportInModuleProvider>emptyList(),myModel,true);
  Disposer.register(disposable,myFrameworksPanel);
  myOptionsPanel.add(myFrameworksPanel.getMainPanel(),BorderLayout.CENTER);
  myProjectTypeList.setSelectedIndex(0);
}
