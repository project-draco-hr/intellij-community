{
  PsiType type=variable.getType();
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(variable.getProject());
  if (type instanceof PsiClassType) {
    final PsiClass aClass=PsiTypesUtil.getPsiClass(type);
    if (aClass != null) {
      final LookupElement nullLookupItem=new ExpressionLookupItem(elementFactory.createExpressionFromText(PsiKeyword.NULL,variable));
      if (InheritanceUtil.isInheritor(aClass,CommonClassNames.JAVA_LANG_ITERABLE) || InheritanceUtil.isInheritor(aClass,CommonClassNames.JAVA_UTIL_MAP)) {
        final List<PsiType> suggestedTypes=new SmartList<PsiType>();
        JavaInheritorsGetter.processInheritors(variable.getContainingFile(),variable,Collections.singleton((PsiClassType)type),PrefixMatcher.ALWAYS_TRUE,new Consumer<PsiType>(){
          @Override public void consume(          PsiType type){
            LOG.assertTrue(type instanceof PsiClassType);
            final PsiClass psiClass=PsiTypesUtil.getPsiClass(type);
            if (psiClass != null && !psiClass.isInterface() && !psiClass.hasModifierProperty(PsiModifier.ABSTRACT) && PsiUtil.hasDefaultConstructor(psiClass)) {
              suggestedTypes.add(type);
            }
          }
        }
);
        List<LookupElement> sortedLookups=map(sorted(map(suggestedTypes,new Function<PsiType,LookupElement>(){
          @Override public LookupElement fun(          PsiType type){
            return PsiTypeLookupItem.createLookupItem(type,variable);
          }
        }
),new Comparator<LookupElement>(){
          @Override public int compare(          LookupElement o1,          LookupElement o2){
            final int count1=StatisticsWeigher.getBaseStatisticsInfo(o1,null).getUseCount();
            final int count2=StatisticsWeigher.getBaseStatisticsInfo(o2,null).getUseCount();
            return count2 - count1;
          }
        }
),new Function<LookupElement,LookupElement>(){
          @Override public LookupElement fun(          LookupElement element){
            final LookupElementDecorator<LookupElement> constructorLookupElement=LookupElementDecorator.withInsertHandler(element,ConstructorInsertHandler.BASIC_INSTANCE);
            return new LookupElementDecorator<LookupElement>(constructorLookupElement){
              @Override public void renderElement(              LookupElementPresentation presentation){
                super.renderElement(presentation);
                presentation.setTailText("");
                presentation.setItemText(PsiKeyword.NEW + " " + presentation.getItemText()+ "()");
              }
              @Override public void handleInsert(              InsertionContext context){
                super.handleInsert(context);
                context.getDocument().insertString(context.getStartOffset(),PsiKeyword.NEW + " ");
              }
            }
;
          }
        }
);
        LookupElement[] result=new LookupElement[sortedLookups.size() + 1];
        result[0]=nullLookupItem;
        for (int i=0; i < sortedLookups.size(); i++) {
          LookupElement lookup=sortedLookups.get(i);
          result[i + 1]=lookup;
        }
        return result;
      }
 else {
        if (PsiUtil.hasDefaultConstructor(aClass)) {
          final PsiExpression newExpression=elementFactory.createExpressionFromText(PsiKeyword.NEW + " " + type.getCanonicalText(false)+ "()",variable);
          return new LookupElement[]{nullLookupItem,new ExpressionLookupItem(newExpression)};
        }
      }
    }
  }
  final String defaultValue=PsiTypesUtil.getDefaultValueOfType(type);
  final PsiExpression expression=elementFactory.createExpressionFromText(defaultValue,variable);
  return new LookupElement[]{new ExpressionLookupItem(expression)};
}
