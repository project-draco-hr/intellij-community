{
  try {
    final Manifest manifest=new Manifest();
    manifest.getMainAttributes().putValue("Created-By",ApplicationNamesInfo.getInstance().getFullProductName());
    final boolean writeDynamicVMOptions=javaParameters.isDynamicVMOptions() && useDynamicVMOptions();
    if (writeDynamicVMOptions) {
      List<String> dParams=new ArrayList<String>();
      for (      String param : vmParametersList.getList()) {
        if (param.startsWith("-D")) {
          dParams.add(param);
        }
      }
      manifest.getMainAttributes().putValue("VM-Options",ParametersListUtil.join(dParams));
      final ArrayList<String> restParams=new ArrayList<String>(vmParametersList.getList());
      restParams.removeAll(dParams);
      commandLine.addParameters(restParams);
    }
 else {
      commandLine.addParameters(vmParametersList.getList());
    }
    final boolean notEscape=vmParametersList.hasParameter(PROPERTY_DO_NOT_ESCAPE_CLASSPATH_URL);
    final List<String> classPathList=javaParameters.getClassPath().getPathList();
    final String jarFile=CommandLineWrapperUtil.createClasspathJarFile(manifest,classPathList,notEscape).getAbsolutePath();
    commandLine.addParameter("-classpath");
    if (writeDynamicVMOptions) {
      commandLine.addParameter(PathUtil.getJarPathForClass(commandLineWrapper) + File.pathSeparator + jarFile);
      appendEncoding(javaParameters,commandLine,vmParametersList);
      commandLine.addParameter(commandLineWrapper.getName());
      commandLine.addParameter(jarFile);
    }
 else {
      commandLine.addParameters(jarFile);
      appendEncoding(javaParameters,commandLine,vmParametersList);
    }
  }
 catch (  IOException e) {
    LOG.error(e);
  }
}
