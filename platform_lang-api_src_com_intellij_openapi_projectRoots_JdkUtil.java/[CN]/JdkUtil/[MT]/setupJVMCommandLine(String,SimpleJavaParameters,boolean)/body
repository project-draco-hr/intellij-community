{
  final GeneralCommandLine commandLine=new GeneralCommandLine();
  commandLine.setExePath(exePath);
  final ParametersList vmParametersList=javaParameters.getVMParametersList();
  commandLine.getEnvironment().putAll(javaParameters.getEnv());
  commandLine.setPassParentEnvironment(javaParameters.isPassParentEnvs());
  final Class commandLineWrapper;
  if ((commandLineWrapper=getCommandLineWrapperClass()) != null) {
    if (forceDynamicClasspath && !vmParametersList.hasParameter("-classpath") && !vmParametersList.hasParameter("-cp")) {
      if (isClassPathJarEnabled(javaParameters,PathUtil.getJarPathForClass(ClassPath.class))) {
        appendJarClasspathParams(javaParameters,commandLine,vmParametersList,commandLineWrapper);
      }
 else {
        appendOldCommandLineWrapper(javaParameters,commandLine,vmParametersList,commandLineWrapper);
      }
    }
 else {
      appendParamsEncodingClasspath(javaParameters,commandLine,vmParametersList);
    }
  }
 else {
    appendParamsEncodingClasspath(javaParameters,commandLine,vmParametersList);
  }
  final String mainClass=javaParameters.getMainClass();
  String jarPath=javaParameters.getJarPath();
  if (mainClass != null) {
    commandLine.addParameter(mainClass);
  }
 else   if (jarPath != null) {
    commandLine.addParameter("-jar");
    commandLine.addParameter(jarPath);
  }
  commandLine.addParameters(javaParameters.getProgramParametersList().getList());
  commandLine.withWorkDirectory(javaParameters.getWorkingDirectory());
  return commandLine;
}
