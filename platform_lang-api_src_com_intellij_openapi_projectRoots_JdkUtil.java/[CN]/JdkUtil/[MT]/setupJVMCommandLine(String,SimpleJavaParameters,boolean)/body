{
  final GeneralCommandLine commandLine=new GeneralCommandLine(exePath);
  final ParametersList vmParameters=javaParameters.getVMParametersList();
  commandLine.withEnvironment(javaParameters.getEnv());
  commandLine.withParentEnvironmentType(javaParameters.isPassParentEnvs() ? ParentEnvironmentType.CONSOLE : ParentEnvironmentType.NONE);
  final Class commandLineWrapper;
  boolean passProgramParametersViaClassPathJar=false;
  if (forceDynamicClasspath && !explicitClassPath(vmParameters) && javaParameters.getModulePath().isEmpty()&& (commandLineWrapper=getCommandLineWrapperClass()) != null) {
    if (isClassPathJarEnabled(javaParameters,PathUtil.getJarPathForClass(ClassPath.class))) {
      passProgramParametersViaClassPathJar=javaParameters.isPassProgramParametersViaClasspathJar();
      appendJarClasspathParams(javaParameters,commandLine,vmParameters,commandLineWrapper,passProgramParametersViaClassPathJar);
    }
 else {
      appendOldCommandLineWrapper(javaParameters,commandLine,vmParameters,commandLineWrapper);
    }
  }
 else {
    appendParamsEncodingClasspath(javaParameters,commandLine,vmParameters);
  }
  final String mainClass=javaParameters.getMainClass();
  final String moduleName=javaParameters.getModuleName();
  final String jarPath=javaParameters.getJarPath();
  if (moduleName != null && mainClass != null) {
    commandLine.addParameter("-m");
    commandLine.addParameter(moduleName + '/' + mainClass);
  }
 else   if (mainClass != null) {
    commandLine.addParameter(mainClass);
  }
 else   if (jarPath != null) {
    commandLine.addParameter("-jar");
    commandLine.addParameter(jarPath);
  }
  if (!passProgramParametersViaClassPathJar) {
    commandLine.addParameters(javaParameters.getProgramParametersList().getList());
  }
  commandLine.withWorkDirectory(javaParameters.getWorkingDirectory());
  return commandLine;
}
