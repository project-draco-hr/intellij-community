{
  final GeneralCommandLine commandLine=new GeneralCommandLine();
  commandLine.setExePath(exePath);
  final ParametersList vmParametersList=javaParameters.getVMParametersList();
  commandLine.getEnvironment().putAll(javaParameters.getEnv());
  commandLine.setPassParentEnvironment(javaParameters.isPassParentEnvs());
  final Class commandLineWrapper;
  if ((commandLineWrapper=getCommandLineWrapperClass()) != null) {
    if (forceDynamicClasspath && !vmParametersList.hasParameter("-classpath") && !vmParametersList.hasParameter("-cp")) {
      try {
        final Manifest manifest=new Manifest();
        manifest.getMainAttributes().putValue("Created-By",ApplicationNamesInfo.getInstance().getFullProductName());
        final boolean writeDynamicVMOptions=javaParameters.isDynamicVMOptions() && useDynamicVMOptions();
        if (writeDynamicVMOptions) {
          List<String> dParams=new ArrayList<String>();
          for (          String param : vmParametersList.getList()) {
            if (param.startsWith("-D")) {
              dParams.add(param);
            }
          }
          manifest.getMainAttributes().putValue("VM-Options",ParametersListUtil.join(dParams));
          final ArrayList<String> restParams=new ArrayList<String>(vmParametersList.getList());
          restParams.removeAll(dParams);
          commandLine.addParameters(restParams);
        }
 else {
          commandLine.addParameters(vmParametersList.getList());
        }
        final boolean notEscape=vmParametersList.hasParameter(PROPERTY_DO_NOT_ESCAPE_CLASSPATH_URL);
        final List<String> classPathList=javaParameters.getClassPath().getPathList();
        final String jarFile=CommandLineWrapperUtil.createClasspathJarFile(manifest,classPathList,notEscape).getAbsolutePath();
        commandLine.addParameter("-classpath");
        if (writeDynamicVMOptions) {
          commandLine.addParameter(PathUtil.getJarPathForClass(commandLineWrapper) + File.pathSeparator + jarFile);
          appendEncoding(javaParameters,commandLine,vmParametersList);
          commandLine.addParameter(commandLineWrapper.getName());
          commandLine.addParameter(jarFile);
        }
 else {
          commandLine.addParameters(jarFile);
          appendEncoding(javaParameters,commandLine,vmParametersList);
        }
      }
 catch (      IOException e) {
        LOG.error(e);
      }
    }
 else {
      appendParamsEncodingClasspath(javaParameters,commandLine,vmParametersList);
    }
  }
 else {
    appendParamsEncodingClasspath(javaParameters,commandLine,vmParametersList);
  }
  final String mainClass=javaParameters.getMainClass();
  String jarPath=javaParameters.getJarPath();
  if (mainClass != null) {
    commandLine.addParameter(mainClass);
  }
 else   if (jarPath != null) {
    commandLine.addParameter("-jar");
    commandLine.addParameter(jarPath);
  }
  commandLine.addParameters(javaParameters.getProgramParametersList().getList());
  commandLine.withWorkDirectory(javaParameters.getWorkingDirectory());
  return commandLine;
}
