{
  final String selectedRemote=getRemote();
  myBranchChooser.removeAllElements();
  if (selectedRemote == null) {
    return;
  }
  GitRepository repository=getRepository();
  if (repository == null) {
    return;
  }
  GitBranchTrackInfo trackInfo=GitUtil.getTrackInfoForCurrentBranch(repository);
  GitRemoteBranch currentRemoteBranch=trackInfo == null ? null : trackInfo.getRemoteBranch();
  List<GitRemoteBranch> remoteBranches=new ArrayList<>(repository.getBranches().getRemoteBranches());
  Collections.sort(remoteBranches);
  myBranchChooser.setElements(ContainerUtil.mapNotNull(remoteBranches,new Function<GitRemoteBranch,String>(){
    @Override public String fun(    GitRemoteBranch branch){
      return branch.getRemote().getName().equals(selectedRemote) ? branch.getNameForLocalOperations() : null;
    }
  }
),false);
  if (currentRemoteBranch != null && currentRemoteBranch.getRemote().getName().equals(selectedRemote)) {
    myBranchChooser.setElementMarked(currentRemoteBranch.getNameForLocalOperations(),true);
  }
  validateDialog();
}
