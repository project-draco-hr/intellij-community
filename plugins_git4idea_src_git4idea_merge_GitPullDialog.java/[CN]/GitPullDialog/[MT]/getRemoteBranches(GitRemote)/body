{
  final Ref<GitCommandResult> result=Ref.create();
  ProgressManager.getInstance().run(new Task.Modal(myProject,GitBundle.getString("pull.getting.remote.branches"),false){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      result.set(myGit.lsRemote(GitPullDialog.this.myProject,gitRoot(),remote,"--heads"));
    }
  }
);
  if (!result.isNull() && result.get().success()) {
    return ContainerUtil.mapNotNull(result.get().getOutput(),new Function<String,String>(){
      @Override public String fun(      @NotNull String line){
        if (StringUtil.isEmptyOrSpaces(line))         return null;
        String shortRemoteName=line.trim().substring(line.indexOf(GitBranch.REFS_HEADS_PREFIX) + GitBranch.REFS_HEADS_PREFIX.length());
        return remote.getName() + "/" + shortRemoteName;
      }
    }
);
  }
 else {
    String message=result.isNull() ? "" : result.get().getErrorOutputAsJoinedString();
    Messages.showErrorDialog(this.getRootPane(),message,"Couldn't get the remote branches list from " + remote.getName());
    return null;
  }
}
