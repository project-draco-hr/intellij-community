{
  setDownloadStatus(true);
  new SwingWorker(){
    List<IdeaPluginDescriptor> list=null;
    List<String> errorMessages=new ArrayList<String>();
    public Object construct(){
      try {
        list=RepositoryHelper.loadPluginsFromRepository(null);
      }
 catch (      Exception e) {
        LOG.info(e);
        errorMessages.add(e.getMessage());
      }
      for (      String host : UpdateSettings.getInstance().myPluginHosts) {
        if (!acceptHost(host))         continue;
        final Map<PluginId,PluginDownloader> downloaded=new HashMap<PluginId,PluginDownloader>();
        try {
          UpdateChecker.checkPluginsHost(host,downloaded,false,null,null);
          for (          PluginDownloader downloader : downloaded.values()) {
            final PluginNode pluginNode=PluginDownloader.createPluginNode(host,downloader);
            if (pluginNode != null) {
              if (list == null)               list=new ArrayList<IdeaPluginDescriptor>();
              list.add(pluginNode);
            }
          }
        }
 catch (        ProcessCanceledException ignore) {
        }
catch (        FileNotFoundException e) {
          LOG.info(e);
        }
catch (        Exception e) {
          LOG.info(e);
          errorMessages.add(e.getMessage());
        }
      }
      return list;
    }
    public void finished(){
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        public void run(){
          setDownloadStatus(false);
          if (list != null) {
            modifyPluginsList(list);
            propagateUpdates(list);
          }
          if (!errorMessages.isEmpty()) {
            if (Messages.OK == Messages.showOkCancelDialog(IdeBundle.message("error.list.of.plugins.was.not.loaded",StringUtil.join(errorMessages,", ")),IdeBundle.message("title.plugins"),CommonBundle.message("button.retry"),CommonBundle.getCancelButtonText(),Messages.getErrorIcon())) {
              loadPluginsFromHostInBackground();
            }
          }
        }
      }
);
    }
  }
.start();
}
