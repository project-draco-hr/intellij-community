{
  setDownloadStatus(true);
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      final List<IdeaPluginDescriptor> list=ContainerUtil.newArrayList();
      final List<String> errors=ContainerUtil.newSmartList();
      ProgressIndicator indicator=new EmptyProgressIndicator();
      String builtinPluginsUrl=ApplicationInfoEx.getInstanceEx().getBuiltinPluginsUrl();
      List<String> hosts=ContainerUtil.newArrayList();
      hosts.add(null);
      if (builtinPluginsUrl != null)       hosts.add(builtinPluginsUrl);
      hosts.addAll(UpdateSettings.getInstance().getPluginHosts());
      for (      String host : hosts) {
        try {
          if (host == null || acceptHost(host)) {
            list.addAll(RepositoryHelper.loadPlugins(host,null,indicator));
          }
        }
 catch (        FileNotFoundException e) {
          LOG.info(host,e);
        }
catch (        IOException e) {
          LOG.info(host,e);
          if (host != builtinPluginsUrl) {
            errors.add(e.getMessage());
          }
        }
      }
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          setDownloadStatus(false);
          if (!list.isEmpty()) {
            modifyPluginsList(list);
            propagateUpdates(list);
          }
          if (!errors.isEmpty()) {
            String message=IdeBundle.message("error.list.of.plugins.was.not.loaded",StringUtil.join(errors,", "));
            String title=IdeBundle.message("title.plugins");
            String ok=CommonBundle.message("button.retry"), cancel=CommonBundle.getCancelButtonText();
            if (Messages.showOkCancelDialog(message,title,ok,cancel,Messages.getErrorIcon()) == Messages.OK) {
              loadPluginsFromHostInBackground();
            }
          }
        }
      }
);
    }
  }
);
}
