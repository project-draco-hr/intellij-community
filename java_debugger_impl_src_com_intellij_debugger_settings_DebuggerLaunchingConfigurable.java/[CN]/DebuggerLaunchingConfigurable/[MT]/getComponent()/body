{
  myCbForceClassicVM=new StateRestoringCheckBox(DebuggerBundle.message("label.debugger.launching.configurable.force.classic.vm"));
  myCbDisableJIT=new JCheckBox(DebuggerBundle.message("label.debugger.launching.configurable.disable.jit"));
  myCbShowAlternativeSource=new JCheckBox(DebuggerBundle.message("label.debugger.general.configurable.show.alternative.source"));
  myRbSocket=new JRadioButton(DebuggerBundle.message("label.debugger.launching.configurable.socket"));
  myRbShmem=new JRadioButton(DebuggerBundle.message("label.debugger.launching.configurable.shmem"));
  final ButtonGroup gr=new ButtonGroup();
  gr.add(myRbSocket);
  gr.add(myRbShmem);
  final Box box=Box.createHorizontalBox();
  box.add(myRbSocket);
  box.add(myRbShmem);
  final JPanel transportPanel=new JPanel(new BorderLayout());
  transportPanel.add(new JLabel(DebuggerBundle.message("label.debugger.launching.configurable.debugger.transport")),BorderLayout.WEST);
  transportPanel.add(box,BorderLayout.CENTER);
  VerticalBox panel=new VerticalBox();
  panel.setOpaque(false);
  panel.add(transportPanel);
  panel.add(myCbForceClassicVM);
  panel.add(myCbDisableJIT);
  panel.add(myCbShowAlternativeSource);
  JPanel result=new JPanel(new BorderLayout());
  result.add(panel,BorderLayout.NORTH);
  return result;
}
