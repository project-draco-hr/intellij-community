{
  super(in);
  try {
    this.myContext=context;
    myFileName=DataInputOutputUtil.readINT(in);
    mySuperClass=(TypeRepr.ClassType)TypeRepr.externalizer(context).read(in);
    myInterfaces=(Set<TypeRepr.AbstractType>)RW.read(TypeRepr.externalizer(context),new THashSet<TypeRepr.AbstractType>(1),in);
    myFields=(Set<FieldRepr>)RW.read(FieldRepr.externalizer(context),new THashSet<FieldRepr>(),in);
    myMethods=(Set<MethodRepr>)RW.read(MethodRepr.externalizer(context),new THashSet<MethodRepr>(),in);
    myAnnotationTargets=(Set<ElemType>)RW.read(UsageRepr.AnnotationUsage.elementTypeExternalizer,EnumSet.noneOf(ElemType.class),in);
    final String s=RW.readUTF(in);
    myRetentionPolicy=s.length() == 0 ? null : RetentionPolicy.valueOf(s);
    myOuterClassName=DataInputOutputUtil.readINT(in);
    int flags=DataInputOutputUtil.readINT(in);
    myIsLocal=(flags & LOCAL_MASK) != 0;
    myIsAnonymous=(flags & ANONYMOUS_MASK) != 0;
    myUsages=(Set<UsageRepr.Usage>)RW.read(UsageRepr.externalizer(context),new THashSet<UsageRepr.Usage>(),in);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
