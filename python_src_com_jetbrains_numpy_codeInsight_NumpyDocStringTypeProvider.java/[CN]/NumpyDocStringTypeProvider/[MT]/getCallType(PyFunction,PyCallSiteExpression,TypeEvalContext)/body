{
  if (isApplicable(function)) {
    final PyExpression callee=callSite instanceof PyCallExpression ? ((PyCallExpression)callSite).getCallee() : null;
    final NumPyDocString docString=NumPyDocString.forFunction(function,callee);
    if (docString != null) {
      final List<NumPyDocStringParameter> returns=docString.getReturns();
      final PyPsiFacade facade=getPsiFacade(function);
switch (returns.size()) {
case 0:
        return null;
case 1:
      final String typeName=returns.get(0).getType();
    if (typeName != null) {
      final PyType genericType=getPsiFacade(function).parseTypeAnnotation("T",function);
      if (isUfuncType(function,typeName))       return genericType;
      return parseNumpyDocType(function,typeName);
    }
  return null;
default :
final ArrayList<PyType> unionMembers=new ArrayList<PyType>();
final List<PyType> members=new ArrayList<PyType>();
for (int i=0; i < returns.size(); i++) {
NumPyDocStringParameter ret=returns.get(i);
final String memberTypeName=ret.getType();
final PyType returnType=memberTypeName != null ? parseNumpyDocType(function,memberTypeName) : null;
final boolean isOptional=memberTypeName != null && memberTypeName.contains("optional");
if (isOptional) {
if (i != 0) {
  if (members.size() > 1)   unionMembers.add(facade.createTupleType(members,function));
 else   unionMembers.add(returnType);
}
}
members.add(returnType);
if (i == returns.size() - 1 && isOptional) {
unionMembers.add(facade.createTupleType(members,function));
}
}
if (unionMembers.isEmpty()) {
return facade.createTupleType(members,function);
}
return facade.createUnionType(unionMembers);
}
}
}
return null;
}
