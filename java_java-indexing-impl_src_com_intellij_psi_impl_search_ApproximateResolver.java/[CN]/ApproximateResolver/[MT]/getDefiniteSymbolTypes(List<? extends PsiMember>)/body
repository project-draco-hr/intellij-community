{
  Set<PsiClass> possibleTypes=new HashSet<>();
  for (  PsiMember candidate : candidates) {
    if (candidate instanceof PsiClass) {
      possibleTypes.add((PsiClass)candidate);
    }
 else     if (candidate instanceof PsiMethod && ((PsiMethod)candidate).isConstructor()) {
      ContainerUtil.addIfNotNull(possibleTypes,candidate.getContainingClass());
    }
 else {
      PsiType type=candidate instanceof PsiField ? ((PsiField)candidate).getType() : ((PsiMethod)candidate).getReturnType();
      if (type instanceof PsiPrimitiveType)       continue;
      if (type instanceof PsiArrayType) {
        type=PsiType.getJavaLangObject(candidate.getManager(),candidate.getResolveScope());
      }
      PsiClass typeClass=PsiUtil.resolveClassInClassTypeOnly(type);
      if (typeClass == null || typeClass instanceof PsiTypeParameter) {
        return null;
      }
      possibleTypes.add(typeClass);
    }
  }
  return possibleTypes;
}
