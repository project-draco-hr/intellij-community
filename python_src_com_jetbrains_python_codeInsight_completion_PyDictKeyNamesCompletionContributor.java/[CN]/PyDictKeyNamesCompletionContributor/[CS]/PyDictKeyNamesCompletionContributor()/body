{
  extend(CompletionType.BASIC,psiElement().inside(PySubscriptionExpression.class),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      PsiElement original=parameters.getOriginalPosition();
      int offset=parameters.getOffset();
      final CompletionResultSet dictCompletion=createResult(original,result,offset);
      PySubscriptionExpression subscription=PsiTreeUtil.getParentOfType(original,PySubscriptionExpression.class);
      if (subscription == null)       return;
      PsiElement operand=subscription.getOperand();
      if (operand != null) {
        PsiReference reference=operand.getReference();
        if (reference != null) {
          PsiElement resolvedElement=reference.resolve();
          if (resolvedElement instanceof PyTargetExpression) {
            PyDictLiteralExpression dict=PsiTreeUtil.getNextSiblingOfType(resolvedElement,PyDictLiteralExpression.class);
            if (dict != null) {
              addDictLiteralKeys(dict,dictCompletion);
              PsiFile file=parameters.getOriginalFile();
              addAdditionalKeys(file,operand,dictCompletion);
            }
            PyCallExpression dictConstructor=PsiTreeUtil.getNextSiblingOfType(resolvedElement,PyCallExpression.class);
            if (dictConstructor != null) {
              addDictConstructorKeys(dictConstructor,dictCompletion);
              PsiFile file=parameters.getOriginalFile();
              addAdditionalKeys(file,operand,dictCompletion);
            }
          }
        }
      }
    }
  }
);
}
