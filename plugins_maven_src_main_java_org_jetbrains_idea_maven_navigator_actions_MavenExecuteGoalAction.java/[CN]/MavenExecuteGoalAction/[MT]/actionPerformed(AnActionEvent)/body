{
  final Project project=e.getRequiredData(PlatformDataKeys.PROJECT);
  ExecuteMavenGoalHistoryService historyService=ExecuteMavenGoalHistoryService.getInstance(project);
  MavenExecuteGoalDialog dialog=new MavenExecuteGoalDialog(project,historyService.getHistory());
  String lastWorkingDirectory=historyService.getWorkDirectory();
  if (lastWorkingDirectory.length() == 0) {
    lastWorkingDirectory=obtainAppropriateWorkingDirectory(project);
  }
  dialog.setWorkDirectory(lastWorkingDirectory);
  if (historyService.getCanceledCommand() != null) {
    dialog.setGoals(historyService.getCanceledCommand());
  }
  dialog.show();
  if (!dialog.isOK()) {
    historyService.setCanceledCommand(dialog.getGoals());
    return;
  }
  historyService.setCanceledCommand(null);
  String goals=dialog.getGoals();
  goals=goals.trim();
  if (goals.startsWith("mvn ")) {
    goals=goals.substring("mvn ".length()).trim();
  }
  String workDirectory=dialog.getWorkDirectory();
  historyService.addCommand(goals,workDirectory);
  MavenProjectsManager projectsManager=MavenProjectsManager.getInstance(project);
  File mavenHome=MavenUtil.resolveMavenHomeDirectory(projectsManager.getGeneralSettings().getMavenHome());
  if (mavenHome == null) {
    Notification notification=new Notification(MavenUtil.MAVEN_NOTIFICATION_GROUP,"Failed to execute goal",RunnerBundle.message("external.maven.home.no.default.with.fix"),NotificationType.ERROR,new NotificationListener.Adapter(){
      @Override protected void hyperlinkActivated(      @NotNull Notification notification,      @NotNull HyperlinkEvent e){
        ShowSettingsUtil.getInstance().showSettingsDialog(project,MavenSettings.DISPLAY_NAME);
      }
    }
);
    Notifications.Bus.notify(notification,project);
    return;
  }
  MavenRunnerParameters parameters=new MavenRunnerParameters(true,workDirectory,Arrays.asList(ParametersList.parse(goals)),null);
  MavenGeneralSettings generalSettings=new MavenGeneralSettings();
  generalSettings.setMavenHome(mavenHome.getPath());
  MavenRunnerSettings runnerSettings=MavenRunner.getInstance(project).getSettings().clone();
  runnerSettings.setMavenProperties(new LinkedHashMap<String,String>());
  runnerSettings.setSkipTests(false);
  MavenRunConfigurationType.runConfiguration(project,parameters,generalSettings,runnerSettings,null);
}
