{
  int startOffset=0;
  int data=0;
  int oldStartIndex=0;
  int startIndex=0;
  if (mySegments.getSegmentCount() > 0) {
    final int segmentIndex=mySegments.findSegmentIndex(offset - 1) - 2;
    oldStartIndex=Math.max(0,segmentIndex);
    startIndex=oldStartIndex;
    do {
      data=mySegments.getSegmentData(startIndex);
      if (isInitialState(data) || startIndex == 0)       break;
      startIndex--;
    }
 while (true);
    startOffset=mySegments.getSegmentStart(startIndex);
  }
  myLexer.start(text,startOffset,text.length(),myInitialState);
  while (myLexer.getTokenType() != null) {
    if (startIndex >= oldStartIndex)     break;
    int tokenStart=myLexer.getTokenStart();
    int lexerState=myLexer.getState();
    int tokenEnd=myLexer.getTokenEnd();
    data=packData(myLexer.getTokenType(),lexerState);
    if (mySegments.getSegmentStart(startIndex) != tokenStart || mySegments.getSegmentEnd(startIndex) != tokenEnd || mySegments.getSegmentData(startIndex) != data) {
      break;
    }
    startIndex++;
    myLexer.advance();
  }
  IElementType tokenType1=null;
  IElementType tokenType2=null;
  while (myLexer.getTokenType() != null) {
    int lexerState=myLexer.getState();
    data=packData(myLexer.getTokenType(),lexerState);
    if (tokenType1 == null && myLexer.getTokenEnd() >= offset) {
      tokenType1=unpackToken(data);
    }
    if (myLexer.getTokenEnd() >= offset + 1) {
      tokenType2=unpackToken(data);
      break;
    }
    myLexer.advance();
  }
  return Arrays.asList(tokenType1,tokenType2);
}
