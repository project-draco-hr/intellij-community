{
  if (cache.contains(resolved)) {
    return null;
  }
  cache.add(resolved);
  try {
    final PyType unionType=getUnionType(resolved,context,cache);
    if (unionType != null) {
      return unionType;
    }
    final Ref<PyType> optionalType=getOptionalType(resolved,context,cache);
    if (optionalType != null) {
      return optionalType.get();
    }
    final PyType callableType=getCallableType(resolved,context,cache);
    if (callableType != null) {
      return callableType;
    }
    final PyType parameterizedType=getParameterizedType(resolved,context,cache);
    if (parameterizedType != null) {
      return parameterizedType;
    }
    final PyType builtinCollection=getBuiltinCollection(resolved);
    if (builtinCollection != null) {
      return builtinCollection;
    }
    final PyType genericType=getGenericType(resolved,context,cache);
    if (genericType != null) {
      return genericType;
    }
    final Ref<PyType> classType=getClassType(resolved,context);
    if (classType != null) {
      return classType.get();
    }
    final PyType stringBasedType=getStringBasedType(resolved,context,cache);
    if (stringBasedType != null) {
      return stringBasedType;
    }
    return null;
  }
  finally {
    cache.remove(resolved);
  }
}
