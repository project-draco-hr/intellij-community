{
  if (referenceTarget instanceof PyTargetExpression) {
    final PyTargetExpression target=(PyTargetExpression)referenceTarget;
    final String comment=target.getTypeCommentAnnotation();
    if (comment != null) {
      final PyType type=getStringBasedType(comment,referenceTarget,new Context(context));
      if (type instanceof PyTupleType) {
        final PyTupleExpression tupleExpr=PsiTreeUtil.getParentOfType(target,PyTupleExpression.class);
        if (tupleExpr != null) {
          return PyTypeChecker.getTargetTypeFromTupleAssignment(target,tupleExpr,(PyTupleType)type);
        }
      }
      return type;
    }
  }
  return null;
}
