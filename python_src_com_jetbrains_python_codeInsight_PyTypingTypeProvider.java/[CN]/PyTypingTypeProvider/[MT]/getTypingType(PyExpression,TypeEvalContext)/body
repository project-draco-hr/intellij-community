{
  final PyType unionType=getUnionType(expression,context);
  if (unionType != null) {
    return unionType;
  }
  final Ref<PyType> optionalType=getOptionalType(expression,context);
  if (optionalType != null) {
    return optionalType.get();
  }
  final PyType callableType=getCallableType(expression,context);
  if (callableType != null) {
    return callableType;
  }
  final PyType parameterizedType=getParameterizedType(expression,context);
  if (parameterizedType != null) {
    return parameterizedType;
  }
  final PyType builtinCollection=getBuiltinCollection(expression,context);
  if (builtinCollection != null) {
    return builtinCollection;
  }
  final PyType genericType=getGenericType(expression,context);
  if (genericType != null) {
    return genericType;
  }
  final PyType stringBasedType=getStringBasedType(expression,context);
  if (stringBasedType != null) {
    return stringBasedType;
  }
  return null;
}
