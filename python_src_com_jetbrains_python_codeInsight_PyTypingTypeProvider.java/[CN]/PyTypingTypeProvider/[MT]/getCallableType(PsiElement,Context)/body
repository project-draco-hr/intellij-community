{
  if (resolved instanceof PySubscriptionExpression) {
    final PySubscriptionExpression subscriptionExpr=(PySubscriptionExpression)resolved;
    final PyExpression operand=subscriptionExpr.getOperand();
    final Collection<String> operandNames=resolveToQualifiedNames(operand,context.getTypeContext());
    if (operandNames.contains("typing.Callable")) {
      final PyExpression indexExpr=subscriptionExpr.getIndexExpression();
      if (indexExpr instanceof PyTupleExpression) {
        final PyTupleExpression tupleExpr=(PyTupleExpression)indexExpr;
        final PyExpression[] elements=tupleExpr.getElements();
        if (elements.length == 2) {
          final PyExpression parametersExpr=elements[0];
          final PyExpression returnTypeExpr=elements[1];
          if (parametersExpr instanceof PyListLiteralExpression) {
            final List<PyCallableParameter> parameters=new ArrayList<PyCallableParameter>();
            final PyListLiteralExpression listExpr=(PyListLiteralExpression)parametersExpr;
            for (            PyExpression argExpr : listExpr.getElements()) {
              parameters.add(new PyCallableParameterImpl(null,getType(argExpr,context)));
            }
            final PyType returnType=getType(returnTypeExpr,context);
            return new PyCallableTypeImpl(parameters,returnType);
          }
          if (isEllipsis(parametersExpr)) {
            return new PyCallableTypeImpl(null,getType(returnTypeExpr,context));
          }
        }
      }
    }
  }
  return null;
}
