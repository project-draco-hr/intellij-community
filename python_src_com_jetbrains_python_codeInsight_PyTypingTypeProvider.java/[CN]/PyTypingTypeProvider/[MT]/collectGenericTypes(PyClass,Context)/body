{
  boolean isGeneric=false;
  for (  PyClass ancestor : cls.getAncestorClasses(context.getTypeContext())) {
    if (GENERIC_CLASSES.contains(ancestor.getQualifiedName())) {
      isGeneric=true;
      break;
    }
  }
  if (isGeneric) {
    final ArrayList<PyGenericType> results=new ArrayList<>();
    for (    PyExpression expr : cls.getSuperClassExpressions()) {
      if (expr instanceof PySubscriptionExpression) {
        final PyExpression indexExpr=((PySubscriptionExpression)expr).getIndexExpression();
        if (indexExpr != null) {
          for (          PsiElement resolved : tryResolving(indexExpr,context.getTypeContext())) {
            final PyGenericType genericType=getGenericType(resolved,context);
            if (genericType != null) {
              results.add(genericType);
            }
          }
        }
      }
    }
    return results;
  }
  return Collections.emptyList();
}
