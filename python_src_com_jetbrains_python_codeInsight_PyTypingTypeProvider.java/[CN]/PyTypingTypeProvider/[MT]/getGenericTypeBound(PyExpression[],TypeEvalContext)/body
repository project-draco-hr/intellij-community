{
  final List<PyType> types=new ArrayList<PyType>();
  if (typeVarArguments.length > 1) {
    final PyExpression secondArgument=typeVarArguments[1];
    if (secondArgument instanceof PyKeywordArgument) {
      final PyKeywordArgument valuesArgument=(PyKeywordArgument)secondArgument;
      final PyExpression valueExpr=PyPsiUtils.flattenParens(valuesArgument.getValueExpression());
      if (valueExpr instanceof PyTupleExpression) {
        final PyTupleExpression tupleExpr=(PyTupleExpression)valueExpr;
        for (        PyExpression expr : tupleExpr.getElements()) {
          types.add(getType(expr,context));
        }
      }
    }
  }
  return PyUnionType.union(types);
}
