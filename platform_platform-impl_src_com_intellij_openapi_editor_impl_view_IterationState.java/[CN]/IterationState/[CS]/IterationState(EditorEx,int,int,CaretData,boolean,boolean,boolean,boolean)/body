{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  myDocument=editor.getDocument();
  myStartOffset=start;
  myEnd=end;
  myEditor=editor;
  myUseOnlyFullLineHighlighters=useOnlyFullLineHighlighters;
  myReverseIteration=iterateBackwards;
  LOG.assertTrue(myReverseIteration ? myStartOffset >= myEnd : myStartOffset <= myEnd);
  myHighlighterIterator=useOnlyFullLineHighlighters ? null : editor.getHighlighter().createIterator(start);
  myCaretData=ObjectUtils.notNull(caretData,NULL_CARET_DATA);
  myFoldingModel=useFoldRegions ? editor.getFoldingModel() : null;
  myFoldTextAttributes=useFoldRegions ? myFoldingModel.getPlaceholderAttributes() : null;
  mySelectionAttributes=editor.getSelectionModel().getTextAttributes();
  myReadOnlyColor=myEditor.getColorsScheme().getColor(EditorColors.READONLY_FRAGMENT_BACKGROUND_COLOR);
  CaretModel caretModel=editor.getCaretModel();
  myCaretRowAttributes=editor.isRendererMode() ? null : caretModel.getTextAttributes();
  myDefaultBackground=editor.getColorsScheme().getDefaultBackground();
  myDefaultForeground=editor.getColorsScheme().getDefaultForeground();
  TextAttributes defaultAttributes=editor.getColorsScheme().getAttributes(HighlighterColors.TEXT);
  myDefaultFontType=defaultAttributes == null ? Font.PLAIN : defaultAttributes.getFontType();
  MarkupModelEx editorMarkup=editor.getMarkupModel();
  myView=new HighlighterSweep(editorMarkup,start,myEnd,useOnlyFullLineHighlighters,useOnlyFontOrForegroundAffectingHighlighters);
  MarkupModelEx docMarkup=editor.getFilteredDocumentMarkupModel();
  myDoc=new HighlighterSweep(docMarkup,start,myEnd,useOnlyFullLineHighlighters,useOnlyFontOrForegroundAffectingHighlighters);
  myEndOffset=myStartOffset;
  advance();
}
