{
  final int line=position.getLine();
  if (line < 0) {
    return Collections.emptyList();
  }
  final PsiFile file=position.getFile();
  final VirtualFile vFile=file.getVirtualFile();
  if (vFile == null) {
    return Collections.emptyList();
  }
  final Document doc=FileDocumentManager.getInstance().getDocument(vFile);
  if (doc == null)   return Collections.emptyList();
  if (line >= doc.getLineCount()) {
    return Collections.emptyList();
  }
  final int startOffset=doc.getLineStartOffset(line);
  final TextRange lineRange=new TextRange(startOffset,doc.getLineEndOffset(line));
  final int offset=CharArrayUtil.shiftForward(doc.getCharsSequence(),startOffset," \t");
  PsiElement element=file.findElementAt(offset);
  if (element != null && !(element instanceof PsiCompiledElement)) {
    do {
      final PsiElement parent=element.getParent();
      if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) {
        break;
      }
      element=parent;
    }
 while (true);
    final List<StepTarget> targets=new OrderedSet<StepTarget>();
    final PsiElementVisitor methodCollector=new JavaRecursiveElementVisitor(){
      final Stack<String> myParamNameStack=new Stack<String>();
      @Nullable private String getCurrentParamName(){
        return myParamNameStack.size() > 0 ? myParamNameStack.peek() : null;
      }
      @Override public void visitAnonymousClass(      PsiAnonymousClass aClass){
        for (        PsiMethod psiMethod : aClass.getMethods()) {
          targets.add(new MethodTarget(psiMethod,getCurrentParamName(),psiMethod.getBody(),true));
        }
      }
      @Override public void visitStatement(      PsiStatement statement){
        if (lineRange.intersects(statement.getTextRange())) {
          super.visitStatement(statement);
        }
      }
      @Override public void visitCallExpression(      final PsiCallExpression expression){
        final PsiMethod psiMethod=expression.resolveMethod();
        if (psiMethod != null) {
          final PsiElement highlightElement=expression instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression)expression).getMethodExpression().getReferenceNameElement() : null;
          targets.add(new MethodTarget(psiMethod,null,highlightElement,false));
          final PsiExpressionList argList=expression.getArgumentList();
          if (argList != null) {
            final String methodName=psiMethod.getName();
            final PsiExpression[] expressions=argList.getExpressions();
            final PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
            for (int idx=0; idx < expressions.length; idx++) {
              final String paramName=(idx < parameters.length && !parameters[idx].isVarArgs()) ? parameters[idx].getName() : "arg" + (idx + 1);
              myParamNameStack.push(methodName + ": " + paramName);
              final PsiExpression argExpression=expressions[idx];
              try {
                argExpression.accept(this);
              }
  finally {
                myParamNameStack.pop();
              }
            }
          }
        }
 else {
          super.visitCallExpression(expression);
        }
      }
    }
;
    element.accept(methodCollector);
    for (PsiElement sibling=element.getNextSibling(); sibling != null; sibling=sibling.getNextSibling()) {
      if (!lineRange.intersects(sibling.getTextRange())) {
        break;
      }
      sibling.accept(methodCollector);
    }
    return targets;
  }
  return Collections.emptyList();
}
