{
  List<FileNameMatcher> associations=myPatternsTable.getAssociations(type);
  Set<FileNameMatcher> defaultAssociations=new THashSet<FileNameMatcher>(myInitialAssociations.getAssociations(type));
  for (  FileNameMatcher matcher : associations) {
    if (defaultAssociations.contains(matcher)) {
      defaultAssociations.remove(matcher);
    }
 else     if (shouldSave(type)) {
      if (!(type instanceof ImportedFileType) || !((ImportedFileType)type).hasPattern(matcher)) {
        Element content=AbstractFileType.writeMapping(type.getName(),matcher,specifyTypeName);
        if (content != null) {
          map.addContent(content);
        }
      }
    }
  }
  for (  FileNameMatcher matcher : defaultAssociations) {
    Element content=AbstractFileType.writeRemovedMapping(type,matcher,specifyTypeName,isApproved(matcher));
    if (content != null) {
      map.addContent(content);
    }
  }
  if (type instanceof ImportedFileType) {
    FileNameMatcher[] patterns=((ImportedFileType)type).getOriginalPatterns();
    if (patterns != null) {
      for (      FileNameMatcher matcher : patterns) {
        if (!associations.contains(matcher)) {
          Element content=AbstractFileType.writeRemovedMapping(type,matcher,specifyTypeName,isApproved(matcher));
          if (content != null) {
            map.addContent(content);
          }
        }
      }
    }
  }
}
