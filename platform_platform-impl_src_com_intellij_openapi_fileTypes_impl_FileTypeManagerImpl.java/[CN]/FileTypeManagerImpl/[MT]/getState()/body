{
  Element parentNode=new Element("state");
  parentNode.setAttribute(ATTRIBUTE_VERSION,String.valueOf(VERSION));
  Element element=new Element(ELEMENT_IGNORE_FILES);
  parentNode.addContent(element);
  element.setAttribute(ATTRIBUTE_LIST,getIgnoredFilesList());
  Element map=new Element(AbstractFileType.ELEMENT_EXTENSIONMAP);
  parentNode.addContent(map);
  final List<FileType> fileTypes=Arrays.asList(getRegisteredFileTypes());
  Collections.sort(fileTypes,new Comparator<FileType>(){
    @Override public int compare(    @NotNull FileType o1,    @NotNull FileType o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  for (  FileType type : fileTypes) {
    writeExtensionsMap(map,type,true);
  }
  for (  Map.Entry<FileNameMatcher,String> entry : myUnresolvedMappings.entrySet()) {
    Element content=AbstractFileType.writeMapping(entry.getValue(),entry.getKey(),true);
    if (content != null) {
      map.addContent(content);
    }
  }
  int value=fileTypeChangedCount.get();
  if (value != 0) {
    JDOMExternalizer.write(parentNode,"fileTypeChangedCounter",value);
  }
  return parentNode;
}
