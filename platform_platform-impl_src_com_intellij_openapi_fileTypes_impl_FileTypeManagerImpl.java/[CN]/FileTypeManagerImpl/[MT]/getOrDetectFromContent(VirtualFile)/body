{
  if (!isDetectable(file))   return UnknownFileType.INSTANCE;
  if (file instanceof VirtualFileWithId) {
    int id=((VirtualFileWithId)file).getId();
    if (id < 0)     return UnknownFileType.INSTANCE;
    if (autoDetectWasRun.get(id)) {
      FileType type=autoDetectedAsText.get(id) ? FileTypes.PLAIN_TEXT : autoDetectedAsBinary.get(id) ? UnknownFileType.INSTANCE : ObjectUtils.notNull(file.getUserData(DETECTED_FROM_CONTENT_FILE_TYPE_KEY),FileTypes.PLAIN_TEXT);
      if (toLog()) {
        System.out.println("F: getFileType(" + file.getName() + ") = "+ type.getName());
      }
      return type;
    }
    boolean wasDetectedAsText=false;
    boolean wasDetectedAsBinary=false;
    boolean wasAutoDetectRun=false;
    DataInputStream stream=autoDetectedAttribute.readAttribute(file);
    try {
      try {
        byte status=stream != null ? stream.readByte() : 0;
        wasAutoDetectRun=stream != null;
        wasDetectedAsText=BitUtil.isSet(status,AUTO_DETECTED_AS_TEXT_FLAG);
        wasDetectedAsBinary=BitUtil.isSet(status,AUTO_DETECTED_AS_BINARY_FLAG);
      }
  finally {
        if (stream != null) {
          stream.close();
        }
      }
    }
 catch (    IOException ignored) {
    }
    autoDetectWasRun.set(id,wasAutoDetectRun);
    autoDetectedAsText.set(id,wasDetectedAsText);
    autoDetectedAsBinary.set(id,wasDetectedAsBinary);
    if (wasAutoDetectRun && (wasDetectedAsText || wasDetectedAsBinary)) {
      return wasDetectedAsText ? FileTypes.PLAIN_TEXT : UnknownFileType.INSTANCE;
    }
  }
  FileType fileType=file.getUserData(DETECTED_FROM_CONTENT_FILE_TYPE_KEY);
  if (fileType == null) {
    fileType=detectFromContent(file);
  }
  if (toLog()) {
    System.out.println("F: getFileType after detect run(" + file.getName() + ") = "+ fileType.getName());
  }
  return fileType;
}
