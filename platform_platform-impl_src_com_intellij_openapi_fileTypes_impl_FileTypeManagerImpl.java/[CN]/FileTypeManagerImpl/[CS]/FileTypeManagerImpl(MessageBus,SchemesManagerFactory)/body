{
  myMessageBus=bus;
  mySchemesManager=schemesManagerFactory.createSchemesManager(FILE_SPEC,new BaseSchemeProcessor<AbstractFileType>(){
    @NotNull @Override public AbstractFileType readScheme(    @NotNull Element root){
      ReadFileType type=new ReadFileType(AbstractFileType.readSyntaxTable(root.getChild(AbstractFileType.ELEMENT_HIGHLIGHTING)),root);
      String fileTypeName=root.getAttributeValue(ATTRIBUTE_NAME);
      String fileTypeDescr=root.getAttributeValue(ATTRIBUTE_DESCRIPTION);
      String iconPath=root.getAttributeValue(ATTRIBUTE_ICON);
      setFileTypeAttributes(fileTypeName,fileTypeDescr,iconPath,type);
      return type;
    }
    @Override public boolean shouldBeSaved(    @NotNull final AbstractFileType fileType){
      return shouldBeSavedToFile(fileType);
    }
    @Override public Element writeScheme(    @NotNull final AbstractFileType fileType) throws WriteExternalException {
      Element root=new Element(ELEMENT_FILETYPE);
      root.setAttribute(ATTRIBUTE_BINARY,String.valueOf(fileType.isBinary()));
      root.setAttribute(ATTRIBUTE_DEFAULT_EXTENSION,fileType.getDefaultExtension());
      root.setAttribute(ATTRIBUTE_DESCRIPTION,fileType.getDescription());
      root.setAttribute(ATTRIBUTE_NAME,fileType.getName());
      fileType.writeExternal(root);
      Element map=new Element(AbstractFileType.ELEMENT_EXTENSIONMAP);
      root.addContent(map);
      if (fileType instanceof ImportedFileType) {
        writeImportedExtensionsMap(map,(ImportedFileType)fileType);
      }
 else {
        writeExtensionsMap(map,fileType,false);
      }
      return root;
    }
    @Override public void onSchemeAdded(    @NotNull final AbstractFileType scheme){
      fireBeforeFileTypesChanged();
      if (scheme instanceof ReadFileType) {
        loadFileType((ReadFileType)scheme);
      }
      fireFileTypesChanged();
    }
    @Override public void onSchemeDeleted(    @NotNull final AbstractFileType scheme){
      fireBeforeFileTypesChanged();
      myPatternsTable.removeAllAssociations(scheme);
      fireFileTypesChanged();
    }
  }
,RoamingType.PER_USER);
  bus.connect().subscribe(VirtualFileManager.VFS_CHANGES,new BulkFileListener.Adapter(){
    @Override public void after(    @NotNull List<? extends VFileEvent> events){
      Collection<VirtualFile> files=ContainerUtil.map2Set(events,new Function<VFileEvent,VirtualFile>(){
        @Override public VirtualFile fun(        VFileEvent event){
          VirtualFile file=event instanceof VFileCreateEvent ? null : event.getFile();
          return file != null && wasAutoDetectedBefore(file) && isDetectable(file) ? file : null;
        }
      }
);
      files.remove(null);
      if (toLog()) {
        log("F: VFS events: " + events);
      }
      if (!files.isEmpty() && RE_DETECT_ASYNC) {
        if (toLog()) {
          log("F: queued to redetect: " + files);
        }
        reDetectQueue.offerIfAbsent(files);
      }
    }
  }
);
  initStandardFileTypes();
}
