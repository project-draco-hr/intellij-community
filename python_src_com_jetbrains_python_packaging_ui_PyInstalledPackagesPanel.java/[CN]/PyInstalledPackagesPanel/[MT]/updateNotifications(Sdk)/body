{
  if (selectedSdk == null) {
    myNotificationArea.hide();
    return;
  }
  final Application application=ApplicationManager.getApplication();
  application.executeOnPooledThread(new Runnable(){
    @Override public void run(){
      PyExecutionException exception=null;
      try {
        myHasManagement=PyPackageManager.getInstance(selectedSdk).hasManagement(false);
        if (!myHasManagement) {
          throw new PyExecutionException("pip",Collections.<String>emptyList(),"Python packaging tools not found",ImmutableList.of(new PyInstallPackageManagementFix()));
        }
      }
 catch (      PyExecutionException e) {
        exception=e;
      }
      final PyExecutionException problem=exception;
      application.invokeLater(new Runnable(){
        @Override public void run(){
          if (selectedSdk == getSelectedSdk()) {
            myNotificationArea.hide();
            if (problem != null) {
              final boolean invalid=PythonSdkType.isInvalid(selectedSdk);
              if (!invalid) {
                final StringBuilder builder=new StringBuilder(problem.getMessage());
                builder.append(". ");
                for (                final PyExecutionFix fix : problem.getFixes()) {
                  final String key="id" + fix.hashCode();
                  final String link="<a href=\"" + key + "\">"+ fix.getName()+ "</a>";
                  builder.append(link);
                  builder.append(" ");
                  myNotificationArea.addLinkHandler(key,new Runnable(){
                    @Override public void run(){
                      final Sdk sdk=getSelectedSdk();
                      if (sdk != null) {
                        fix.run(sdk);
                        myNotificationArea.removeLinkHandler(key);
                      }
                    }
                  }
);
                }
                myNotificationArea.showWarning(builder.toString());
              }
              myInstallButton.setEnabled(!invalid && myHasManagement);
            }
          }
        }
      }
,ModalityState.any());
    }
  }
);
}
