{
  if (selectedSdk == null) {
    myNotificationArea.hide();
    return;
  }
  final Application application=ApplicationManager.getApplication();
  application.executeOnPooledThread(new Runnable(){
    @Override public void run(){
      PyPackageManager packageManager=PyPackageManager.getInstance(selectedSdk);
      myHasManagement=packageManager.hasManagement(false);
      application.invokeLater(new Runnable(){
        @Override public void run(){
          if (selectedSdk == getSelectedSdk()) {
            final PythonSdkFlavor flavor=PythonSdkFlavor.getFlavor(selectedSdk);
            final boolean invalid=PythonSdkType.isInvalid(selectedSdk);
            boolean allowCreateVirtualEnv=!(PythonSdkType.isRemote(selectedSdk) || flavor instanceof IronPythonSdkFlavor) && !PythonSdkType.isVirtualEnv(selectedSdk) && myNotificationArea.hasLinkHandler(CREATE_VENV);
            final String createVirtualEnvLink="<a href=\"" + CREATE_VENV + "\">create new VirtualEnv</a>";
            myNotificationArea.hide();
            if (!invalid) {
              String text=null;
              if (!myHasManagement) {
                myNotificationArea.addLinkHandler(INSTALL_MANAGEMENT,new Runnable(){
                  @Override public void run(){
                    final Sdk sdk=getSelectedSdk();
                    if (sdk != null) {
                      installManagementTools(sdk);
                    }
                    myNotificationArea.removeLinkHandler(INSTALL_MANAGEMENT);
                    updateNotifications(selectedSdk);
                  }
                }
);
              }
              if (!myHasManagement) {
                text="Python packaging tools not found. <a href=\"" + INSTALL_MANAGEMENT + "\">Install packaging tools</a>";
              }
              if (text != null) {
                if (allowCreateVirtualEnv) {
                  text+=" or " + createVirtualEnvLink;
                }
                myNotificationArea.showWarning(text);
              }
            }
            myInstallButton.setEnabled(!invalid && myHasManagement);
          }
        }
      }
,ModalityState.any());
    }
  }
);
}
