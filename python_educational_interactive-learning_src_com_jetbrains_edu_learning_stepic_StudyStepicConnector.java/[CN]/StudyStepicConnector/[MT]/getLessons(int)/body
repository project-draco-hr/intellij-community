{
  final List<Lesson> lessons;
  if (sectionId == 0) {
    lessons=HttpRequests.request(stepicApiUrl + "lessons/9205").connect(new HttpRequests.RequestProcessor<List<Lesson>>(){
      @Override public List<Lesson> process(      @NotNull HttpRequests.Request request) throws IOException {
        final BufferedReader reader=request.getReader();
        Gson gson=new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
        return gson.fromJson(reader,Section.class).lessons;
      }
    }
);
  }
 else {
    lessons=HttpRequests.request(stepicApiUrl + "sections/" + String.valueOf(sectionId)).connect(new HttpRequests.RequestProcessor<List<Lesson>>(){
      @Override public List<Lesson> process(      @NotNull HttpRequests.Request request) throws IOException {
        final BufferedReader reader=request.getReader();
        Gson gson=new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
        return gson.fromJson(reader,Section.class).lessons;
      }
    }
);
  }
  for (  Lesson lesson : lessons) {
    lesson.taskList=new ArrayList<Task>();
    for (    Integer s : lesson.steps) {
      final Step step=getStep(s);
      final Task task=new Task();
      task.name=step.name;
      task.text=step.text;
      task.testsText=step.options.test;
      task.taskFiles=new HashMap<String,TaskFile>();
      if (step.options.files != null) {
        for (        TaskFile taskFile : step.options.files) {
          task.taskFiles.put(taskFile.name,taskFile);
        }
      }
      lesson.taskList.add(task);
    }
  }
  return lessons;
}
