{
  final PsiPolyadicExpression polyadicExpression=PsiTreeUtil.getParentOfType(expression,PsiPolyadicExpression.class,true,PsiStatement.class,PsiVariable.class);
  if (polyadicExpression == null) {
    return false;
  }
  final IElementType tokenType=polyadicExpression.getOperationTokenType();
  for (  PsiExpression operand : polyadicExpression.getOperands()) {
    if (PsiTreeUtil.isAncestor(operand,expression,true)) {
      return false;
    }
    if (!(operand instanceof PsiBinaryExpression)) {
      continue;
    }
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)operand;
    final IElementType operationTokenType=binaryExpression.getOperationTokenType();
    if (JavaTokenType.ANDAND.equals(tokenType)) {
      if (!JavaTokenType.NE.equals(operationTokenType)) {
        continue;
      }
    }
 else     if (JavaTokenType.OROR.equals(tokenType)) {
      if (!JavaTokenType.EQEQ.equals(operationTokenType)) {
        continue;
      }
    }
 else {
      continue;
    }
    final PsiExpression lhs=binaryExpression.getLOperand();
    final PsiExpression rhs=binaryExpression.getROperand();
    if (rhs == null) {
      continue;
    }
    if (PsiType.NULL.equals(lhs.getType()) && EquivalenceChecker.getCanonicalPsiEquivalence().expressionsAreEquivalent(expression,rhs)) {
      return true;
    }
 else     if (PsiType.NULL.equals(rhs.getType()) && EquivalenceChecker.getCanonicalPsiEquivalence().expressionsAreEquivalent(expression,lhs)) {
      return true;
    }
  }
  return false;
}
