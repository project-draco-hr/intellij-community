{
  if (!containsOptionalGetCall(element)) {
    return;
  }
  final StandardDataFlowRunner dfaRunner=new StandardDataFlowRunner(false,true,isOnTheFly());
  dfaRunner.analyzeMethod(element,new InstructionVisitor(){
    @Override public DfaInstructionState[] visitAssign(    AssignInstruction instruction,    DataFlowRunner runner,    DfaMemoryState memState){
      DfaValue dfaSource=memState.pop();
      DfaValue dfaDest=memState.pop();
      if (dfaDest instanceof DfaVariableValue) {
        DfaVariableValue var=(DfaVariableValue)dfaDest;
        final PsiModifierListOwner psi=var.getPsiVariable();
        if (!(psi instanceof PsiField) || !psi.hasModifierProperty(PsiModifier.VOLATILE)) {
          memState.setVarValue(var,dfaSource);
        }
      }
      memState.push(dfaDest);
      return nextInstruction(instruction,runner,memState);
    }
    @Override public DfaInstructionState[] visitMethodCall(    MethodCallInstruction instruction,    DataFlowRunner runner,    DfaMemoryState memState){
      final DfaInstructionState[] states=super.visitMethodCall(instruction,runner,memState);
      final PsiMethod targetMethod=instruction.getTargetMethod();
      if (targetMethod != null) {
        final PsiClass aClass=targetMethod.getContainingClass();
        if (TypeUtils.isOptional(aClass)) {
          final String name=targetMethod.getName();
          if (name.equals("isPresent")) {
            memState.pop();
            memState.push(runner.getFactory().getConstFactory().getFalse());
          }
 else           if (name.equals("get") || name.equals("getAsDouble") || name.equals("getAsInt")|| name.equals("getAsLong")) {
            final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)instruction.getCallExpression();
            if (methodCallExpression != null) {
              registerMethodCallError(methodCallExpression,aClass);
            }
          }
        }
      }
      return states;
    }
  }
);
}
