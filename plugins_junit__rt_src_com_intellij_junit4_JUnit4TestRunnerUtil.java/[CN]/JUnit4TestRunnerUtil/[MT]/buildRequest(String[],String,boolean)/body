{
  if (suiteClassNames.length == 0) {
    return null;
  }
  Vector result=new Vector();
  for (int i=0; i < suiteClassNames.length; i++) {
    String suiteClassName=suiteClassNames[i];
    if (suiteClassName.charAt(0) == '@') {
      try {
        final Map classMethods=new HashMap();
        BufferedReader reader=new BufferedReader(new FileReader(suiteClassName.substring(1)));
        try {
          final String packageName=reader.readLine();
          if (packageName == null)           return null;
          final String categoryName=reader.readLine();
          final Class category=categoryName != null && categoryName.length() > 0 ? loadTestClass(categoryName) : null;
          String line;
          while ((line=reader.readLine()) != null) {
            String className=line;
            final int idx=line.indexOf(',');
            if (idx != -1) {
              className=line.substring(0,idx);
              Set methodNames=(Set)classMethods.get(className);
              if (methodNames == null) {
                methodNames=new HashSet();
                classMethods.put(className,methodNames);
              }
              methodNames.add(line.substring(idx + 1));
            }
            appendTestClass(result,className);
          }
          String suiteName=packageName.length() == 0 ? "<default package>" : packageName;
          Class[] classes=getArrayOfClasses(result);
          if (classes.length == 0) {
            System.out.println(TestRunnerUtil.testsFoundInPackageMesage(0,suiteName));
            return null;
          }
          Request allClasses;
          try {
            Class.forName("org.junit.runner.Computer");
            allClasses=JUnit46ClassesRequestBuilder.getClassesRequest(suiteName,classes,classMethods,category);
          }
 catch (          ClassNotFoundException e) {
            allClasses=getClassRequestsUsing44API(suiteName,classes);
          }
catch (          NoSuchMethodError e) {
            allClasses=getClassRequestsUsing44API(suiteName,classes);
          }
          return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter(){
            public boolean shouldRun(            Description description){
              if (description.isTest()) {
                final Set methods=(Set)classMethods.get(JUnit4ReflectionUtil.getClassName(description));
                if (methods == null) {
                  return true;
                }
                String methodName=JUnit4ReflectionUtil.getMethodName(description);
                if (methods.contains(methodName)) {
                  return true;
                }
                if (name != null) {
                  return methodName.endsWith(name) && methods.contains(methodName.substring(0,methodName.length() - name.length()));
                }
                final Class testClass=description.getTestClass();
                if (testClass != null) {
                  final RunWith classAnnotation=(RunWith)testClass.getAnnotation(RunWith.class);
                  if (classAnnotation != null && Parameterized.class.isAssignableFrom(classAnnotation.value())) {
                    final int idx=methodName.indexOf("[");
                    if (idx > -1) {
                      return methods.contains(methodName.substring(0,idx));
                    }
                  }
                }
                return false;
              }
              return true;
            }
            public String describe(){
              return "Tests";
            }
          }
);
        }
  finally {
          reader.close();
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
        System.exit(1);
      }
    }
 else {
      int index=suiteClassName.indexOf(',');
      if (index != -1) {
        final Class clazz=loadTestClass(suiteClassName.substring(0,index));
        final String methodName=suiteClassName.substring(index + 1);
        final RunWith clazzAnnotation=(RunWith)clazz.getAnnotation(RunWith.class);
        final Description testMethodDescription=Description.createTestDescription(clazz,methodName);
        if (clazzAnnotation == null) {
          try {
            final Method method=clazz.getMethod(methodName,null);
            if (method != null && notForked && (method.getAnnotation(Ignore.class) != null || clazz.getAnnotation(Ignore.class) != null)) {
              final Request classRequest=createIgnoreIgnoredClassRequest(clazz,true);
              final Filter ignoredTestFilter=Filter.matchMethodDescription(testMethodDescription);
              return classRequest.filterWith(new Filter(){
                public boolean shouldRun(                Description description){
                  return ignoredTestFilter.shouldRun(description);
                }
                public String describe(){
                  return "Ignored " + methodName;
                }
              }
);
            }
          }
 catch (          Exception ignored) {
          }
        }
 else {
          final Request request=getParameterizedRequest(name,methodName,clazz,clazzAnnotation);
          if (request != null) {
            return request;
          }
        }
        try {
          if (clazz.getMethod("suite",new Class[0]) != null && !methodName.equals("suite")) {
            return Request.classWithoutSuiteMethod(clazz).filterWith(testMethodDescription);
          }
        }
 catch (        Throwable e) {
        }
        final Filter methodFilter;
        try {
          methodFilter=Filter.matchMethodDescription(testMethodDescription);
        }
 catch (        NoSuchMethodError e) {
          return Request.method(clazz,methodName);
        }
        return Request.aClass(clazz).filterWith(new Filter(){
          public boolean shouldRun(          Description description){
            if (description.isTest() && description.getDisplayName().startsWith("warning(junit.framework.TestSuite$")) {
              return true;
            }
            return methodFilter.shouldRun(description);
          }
          public String describe(){
            return methodFilter.describe();
          }
        }
);
      }
 else       if (name != null && suiteClassNames.length == 1) {
        final Class clazz=loadTestClass(suiteClassName);
        if (clazz != null) {
          final RunWith clazzAnnotation=(RunWith)clazz.getAnnotation(RunWith.class);
          final Request request=getParameterizedRequest(name,null,clazz,clazzAnnotation);
          if (request != null) {
            return request;
          }
        }
      }
      appendTestClass(result,suiteClassName);
    }
  }
  if (result.size() == 1) {
    final Class clazz=(Class)result.get(0);
    try {
      if (clazz.getAnnotation(Ignore.class) != null) {
        return createIgnoreIgnoredClassRequest(clazz,false);
      }
    }
 catch (    ClassNotFoundException e) {
    }
    return Request.aClass(clazz);
  }
  return Request.classes(getArrayOfClasses(result));
}
