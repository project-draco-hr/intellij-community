{
  if (clazzAnnotation == null)   return null;
  final Class runnerClass=clazzAnnotation.value();
  if (Parameterized.class.isAssignableFrom(runnerClass)) {
    try {
      if (methodName != null) {
        final Method method=clazz.getMethod(methodName,new Class[0]);
        if (method != null && !method.isAnnotationPresent(Test.class) && TestCase.class.isAssignableFrom(clazz)) {
          return Request.runner(createIgnoreAnnotationAndJUnit4ClassRunner(clazz));
        }
      }
      Class.forName("org.junit.runners.BlockJUnit4ClassRunner");
      final Constructor runnerConstructor=runnerClass.getConstructor(new Class[]{Class.class});
      return Request.runner((Runner)runnerConstructor.newInstance(new Object[]{clazz})).filterWith(new Filter(){
        public boolean shouldRun(        Description description){
          final String descriptionMethodName=description.getMethodName();
          if (parameterString != null && descriptionMethodName != null && !descriptionMethodName.endsWith(parameterString)) {
            return false;
          }
          if (methodName != null && descriptionMethodName != null && !descriptionMethodName.startsWith(methodName + "[") && !descriptionMethodName.equals(methodName)) {
            return false;
          }
          return true;
        }
        public String describe(){
          if (parameterString == null) {
            return methodName + " with any parameter";
          }
          if (methodName == null) {
            return "Parameter " + parameterString + " for any method";
          }
          return methodName + " with parameter " + parameterString;
        }
      }
);
    }
 catch (    Throwable throwable) {
    }
  }
  return null;
}
