{
  List children;
  try {
    Method getChildren=Parameterized.class.getDeclaredMethod("getChildren",new Class[0]);
    getChildren.setAccessible(true);
    children=(List)getChildren.invoke(myRunnerClass,new Object[0]);
  }
 catch (  Throwable e) {
    children=super.getChildren();
  }
  if (myName != null) {
    for (Iterator iterator=children.iterator(); iterator.hasNext(); ) {
      Object child=iterator.next();
      try {
        Class aClass=child.getClass();
        Field f;
        try {
          f=aClass.getDeclaredField("fName");
        }
 catch (        NoSuchFieldException e) {
          try {
            f=aClass.getDeclaredField("name");
          }
 catch (          NoSuchFieldException e1) {
            continue;
          }
        }
        f.setAccessible(true);
        String fName=(String)f.get(child);
        if (!myName.equals(fName)) {
          iterator.remove();
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (children.isEmpty()) {
      System.err.println("No tests were found by passed name: " + myName);
      System.exit(1);
    }
  }
  if (myMethodName != null) {
    for (int i=0; i < children.size(); i++) {
      try {
        final BlockJUnit4ClassRunner child=(BlockJUnit4ClassRunner)children.get(i);
        final Method getChildrenMethod=BlockJUnit4ClassRunner.class.getDeclaredMethod("getChildren",new Class[0]);
        getChildrenMethod.setAccessible(true);
        final List list=(List)getChildrenMethod.invoke(child,new Object[0]);
        for (Iterator iterator=list.iterator(); iterator.hasNext(); ) {
          final FrameworkMethod description=(FrameworkMethod)iterator.next();
          if (!description.getName().equals(myMethodName)) {
            iterator.remove();
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return children;
}
