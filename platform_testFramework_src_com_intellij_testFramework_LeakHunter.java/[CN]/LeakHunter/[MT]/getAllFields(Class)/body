{
  Field[] cached=allFields.get(aClass);
  if (cached == null) {
    try {
      Field[] declaredFields=aClass.getDeclaredFields();
      List<Field> fields=new ArrayList<Field>(declaredFields.length + 5);
      for (      Field declaredField : declaredFields) {
        declaredField.setAccessible(true);
        Class<?> type=declaredField.getType();
        if (isTrivial(type))         continue;
        fields.add(declaredField);
      }
      Class superclass=aClass.getSuperclass();
      if (superclass != null) {
        for (        Field sup : getAllFields(superclass)) {
          if (!fields.contains(sup)) {
            fields.add(sup);
          }
        }
      }
      cached=fields.isEmpty() ? EMPTY_FIELD_ARRAY : fields.toArray(new Field[fields.size()]);
    }
 catch (    IncompatibleClassChangeError e) {
      throw new RuntimeException("Failed to get fields of " + aClass,e);
    }
catch (    SecurityException e) {
      cached=EMPTY_FIELD_ARRAY;
    }
catch (    NoClassDefFoundError e) {
      cached=EMPTY_FIELD_ARRAY;
    }
    allFields.put(aClass,cached);
  }
  return cached;
}
