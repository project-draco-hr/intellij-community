{
  TIntHashSet visited=new TIntHashSet();
  Queue<BackLink> toVisit=new Queue<BackLink>(1000000);
  toVisit.addLast(new BackLink(startRoot,null,null));
  while (true) {
    if (toVisit.isEmpty())     return;
    BackLink backLink=toVisit.pullFirst();
    Object root=backLink.value;
    if (!visited.add(System.identityHashCode(root)))     continue;
    Class rootClass=root.getClass();
    for (    Field field : getAllFields(rootClass)) {
      String fieldName=field.getName();
      if (root instanceof Reference && "referent".equals(fieldName))       continue;
      Object value;
      try {
        value=field.get(root);
      }
 catch (      IllegalArgumentException e) {
        throw new RuntimeException(e);
      }
catch (      IllegalAccessException e) {
        throw new RuntimeException(e);
      }
      if (value == null)       continue;
      Class<?> valueClass=value.getClass();
      if (lookFor.isAssignableFrom(valueClass) && isReallyLeak(field,fieldName,value,valueClass)) {
        BackLink newBackLink=new BackLink(value,field,backLink);
        leakProcessor.process(newBackLink);
      }
 else {
        BackLink newBackLink=new BackLink(value,field,backLink);
        toVisit.addLast(newBackLink);
      }
    }
    if (rootClass.isArray()) {
      try {
        for (        Object o : (Object[])root) {
          if (o == null)           continue;
          if (isTrivial(o.getClass()))           continue;
          toVisit.addLast(new BackLink(o,null,backLink));
        }
      }
 catch (      ClassCastException ignored) {
      }
    }
  }
}
