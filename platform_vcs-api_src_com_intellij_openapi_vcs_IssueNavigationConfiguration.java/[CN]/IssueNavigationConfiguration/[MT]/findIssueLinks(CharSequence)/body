{
  final List<LinkMatch> result=new ArrayList<>();
  for (  IssueNavigationLink link : myLinks) {
    Pattern issuePattern=link.getIssuePattern();
    Matcher m=issuePattern.matcher(text);
    while (m.find()) {
      try {
        String replacement=issuePattern.matcher(m.group(0)).replaceFirst(link.getLinkRegexp());
        addMatch(result,new TextRange(m.start(),m.end()),replacement);
      }
 catch (      Exception e) {
        LOG.debug("Malformed regex replacement. IssueLink: " + link + "; text: "+ text,e);
      }
    }
  }
  Matcher m=URLUtil.URL_PATTERN.matcher(text);
  while (m.find()) {
    addMatch(result,new TextRange(m.start(),m.end()),m.group());
  }
  Collections.sort(result);
  return result;
}
