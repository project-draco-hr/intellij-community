{
  final String text=node.getText();
  if (text == null) {
    return false;
  }
  List<String> docstringParams=getDocstringParams(node,text);
  if (docstringParams == null) {
    return false;
  }
  if (pyDocStringOwner instanceof PyFunction) {
    PyDecoratorList decoratorList=((PyFunction)pyDocStringOwner).getDecoratorList();
    boolean isClassMethod=false;
    if (decoratorList != null) {
      isClassMethod=decoratorList.findDecorator(PyNames.CLASSMETHOD) != null;
    }
    PyParameter[] realParams=((PyFunction)pyDocStringOwner).getParameterList().getParameters();
    List<PyParameter> missingParams=getMissingParams(realParams,docstringParams,isClassMethod);
    boolean registered=false;
    if (!missingParams.isEmpty()) {
      for (      PyParameter param : missingParams) {
        registerProblem(param,"Missing parameter " + param.getName() + " in docstring",new DocstringQuickFix(param,null));
      }
      registered=true;
    }
    List<String> unexpectedParams=getUnexpectedParams(docstringParams,realParams,node);
    if (!unexpectedParams.isEmpty()) {
      for (      String param : unexpectedParams) {
        ProblemsHolder holder=getHolder();
        int index=text.indexOf("param " + param + ":");
        if (index != -1) {
          index+=6;
          if (holder != null) {
            holder.registerProblem(node,TextRange.create(index,index + param.length()),"Unexpected parameter " + param + " in docstring",new DocstringQuickFix(null,param));
          }
        }
      }
      registered=true;
    }
    return registered;
  }
  return false;
}
