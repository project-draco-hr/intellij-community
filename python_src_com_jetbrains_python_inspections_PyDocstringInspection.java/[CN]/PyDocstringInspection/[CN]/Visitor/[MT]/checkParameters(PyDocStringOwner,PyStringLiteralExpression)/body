{
  final String text=node.getText();
  if (text == null) {
    return false;
  }
  StructuredDocString docString=DocStringUtil.parse(text,node);
  if (docString instanceof PlainDocString) {
    return false;
  }
  if (pyDocStringOwner instanceof PyFunction) {
    PyParameter[] realParams=((PyFunction)pyDocStringOwner).getParameterList().getParameters();
    List<PyParameter> missingParams=getMissingParams(docString,realParams);
    boolean registered=false;
    if (!missingParams.isEmpty()) {
      for (      PyParameter param : missingParams) {
        final DocStringFormat format=DocStringUtil.getConfiguredDocStringFormat(pyDocStringOwner);
        final String docParamName=DocStringUtil.getPreferredParameterName(format,param);
        registerProblem(param,"Missing parameter " + param.getName() + " in docstring",new DocstringQuickFix(docParamName,null));
      }
      registered=true;
    }
    List<Substring> unexpectedParams=getUnexpectedParams(docString,realParams);
    if (!unexpectedParams.isEmpty()) {
      for (      Substring param : unexpectedParams) {
        ProblemsHolder holder=getHolder();
        if (holder != null) {
          holder.registerProblem(node,param.getTextRange(),"Unexpected parameter " + param + " in docstring",new DocstringQuickFix(null,param.getValue()));
        }
      }
      registered=true;
    }
    return registered;
  }
  return false;
}
