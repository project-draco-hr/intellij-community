{
  List<Location> results=Collections.emptyList();
  String className=StringUtil.getPackageName(path);
  if (!StringUtil.isEmpty(className)) {
    String methodName=StringUtil.getShortName(path);
    PsiClass aClass=ClassUtil.findPsiClass(PsiManager.getInstance(project),className,null,true,scope);
    if (aClass != null) {
      results=ContainerUtil.newSmartList();
      if (methodName.trim().equals(aClass.getName())) {
        results.add(createClassNavigatable(paramName,aClass));
      }
 else {
        PsiMethod[] methods=aClass.findMethodsByName(methodName.trim(),true);
        if (methods.length > 0) {
          for (          PsiMethod method : methods) {
            results.add(paramName != null ? new PsiMemberParameterizedLocation(project,method,aClass,paramName) : MethodLocation.elementInClass(method,aClass));
          }
        }
      }
    }
  }
  return results;
}
