{
  List<Location> results=Collections.emptyList();
  String paramName=null;
  int idx=path.indexOf('[');
  if (idx >= 0) {
    paramName=path.substring(idx);
    path=path.substring(0,idx);
  }
  if (SUITE_PROTOCOL.equals(protocol)) {
    path=StringUtil.trimEnd(path,".");
    PsiClass aClass=ClassUtil.findPsiClass(PsiManager.getInstance(project),path,null,true,scope);
    if (aClass != null) {
      results=ContainerUtil.newSmartList();
      results.add(paramName != null ? PsiMemberParameterizedLocation.getParameterizedLocation(aClass,paramName) : new PsiLocation<PsiClass>(project,aClass));
    }
  }
 else   if (TEST_PROTOCOL.equals(protocol)) {
    String className=StringUtil.getPackageName(path);
    if (!StringUtil.isEmpty(className)) {
      String methodName=StringUtil.getShortName(path);
      PsiClass aClass=ClassUtil.findPsiClass(PsiManager.getInstance(project),className,null,true,scope);
      if (aClass != null) {
        results=ContainerUtil.newSmartList();
        PsiMethod[] methods=aClass.findMethodsByName(methodName.trim(),true);
        if (methods.length > 0) {
          for (          PsiMethod method : methods) {
            results.add(paramName != null ? new PsiMemberParameterizedLocation(project,method,aClass,paramName) : MethodLocation.elementInClass(method,aClass));
          }
        }
      }
    }
  }
  return results;
}
