{
  IElementType parentType=_node.getElementType();
  IElementType grandparentType=_node.getTreeParent() == null ? null : _node.getTreeParent().getElementType();
  IElementType childType=child.getElementType();
  Wrap wrap=null;
  Indent childIndent=Indent.getNoneIndent();
  Alignment childAlignment=null;
  if (parentType == PyElementTypes.BINARY_EXPRESSION && !isInControlStatement()) {
    childAlignment=getAlignmentForChildren();
    PyBlock p=myParent;
    while (p != null) {
      ASTNode pNode=p.getNode();
      if (ourListElementTypes.contains(pNode.getElementType())) {
        if (needListAlignment(child) && !isEmptyList(_node.getPsi())) {
          childAlignment=p.getChildAlignment();
          break;
        }
      }
 else       if (pNode == PyElementTypes.BINARY_EXPRESSION) {
        childAlignment=p.getChildAlignment();
      }
      if (!breaksAlignment(pNode.getElementType())) {
        p=p.myParent;
      }
 else {
        break;
      }
    }
  }
  if (childType == PyElementTypes.STATEMENT_LIST) {
    if (hasLineBreaksBefore(child,1) || needLineBreakInStatement()) {
      childIndent=Indent.getNormalIndent();
    }
  }
 else   if (childType == PyElementTypes.IMPORT_ELEMENT) {
    wrap=Wrap.createWrap(WrapType.NORMAL,true);
    childIndent=Indent.getNormalIndent();
  }
  if (childType == PyTokenTypes.END_OF_LINE_COMMENT && parentType == PyElementTypes.FROM_IMPORT_STATEMENT) {
    childIndent=Indent.getNormalIndent();
  }
  if (ourListElementTypes.contains(parentType)) {
    if ((parentType != PyElementTypes.TUPLE_EXPRESSION || grandparentType == PyElementTypes.PARENTHESIZED_EXPRESSION) && !ourBrackets.contains(childType) && childType != PyTokenTypes.COMMA && !isSliceOperand(child)) {
      wrap=Wrap.createWrap(WrapType.NORMAL,true);
    }
    if (needListAlignment(child) && !isEmptyList(_node.getPsi())) {
      childAlignment=getAlignmentForChildren();
    }
    if (childType == PyTokenTypes.END_OF_LINE_COMMENT) {
      childIndent=Indent.getNormalIndent();
    }
  }
 else   if (parentType == PyElementTypes.BINARY_EXPRESSION && (PythonDialectsTokenSetProvider.INSTANCE.getExpressionTokens().contains(childType) || PyTokenTypes.OPERATIONS.contains(childType))) {
    if (isInControlStatement()) {
      PyParenthesizedExpression parens=PsiTreeUtil.getParentOfType(_node.getPsi(),PyParenthesizedExpression.class,true,PyStatementPart.class);
      childIndent=parens != null ? Indent.getNormalIndent() : Indent.getContinuationIndent();
    }
  }
  if (parentType == PyElementTypes.LIST_LITERAL_EXPRESSION || parentType == PyElementTypes.LIST_COMP_EXPRESSION) {
    if (childType == PyTokenTypes.RBRACKET || childType == PyTokenTypes.LBRACKET) {
      childIndent=Indent.getNoneIndent();
    }
 else {
      childIndent=Indent.getNormalIndent();
    }
  }
 else   if (parentType == PyElementTypes.DICT_LITERAL_EXPRESSION || parentType == PyElementTypes.SET_LITERAL_EXPRESSION || parentType == PyElementTypes.SET_COMP_EXPRESSION || parentType == PyElementTypes.DICT_COMP_EXPRESSION) {
    if (childType == PyTokenTypes.RBRACE || !hasLineBreaksBefore(child,1)) {
      childIndent=Indent.getNoneIndent();
    }
 else {
      childIndent=Indent.getNormalIndent();
    }
  }
 else   if (parentType == PyElementTypes.STRING_LITERAL_EXPRESSION) {
    if (PyTokenTypes.STRING_NODES.contains(childType)) {
      childAlignment=getAlignmentForChildren();
    }
  }
 else   if (parentType == PyElementTypes.FROM_IMPORT_STATEMENT) {
    if (_node.findChildByType(PyTokenTypes.LPAR) != null) {
      if (childType == PyElementTypes.IMPORT_ELEMENT) {
        if (myContext.getPySettings().ALIGN_MULTILINE_IMPORTS) {
          childAlignment=getAlignmentForChildren();
        }
 else {
          childIndent=Indent.getNormalIndent();
        }
      }
      if (childType == PyTokenTypes.RPAR) {
        childIndent=Indent.getNoneIndent();
      }
    }
  }
 else   if (parentType == PyElementTypes.KEY_VALUE_EXPRESSION) {
    PyKeyValueExpression keyValue=(PyKeyValueExpression)_node.getPsi();
    if (keyValue != null && child.getPsi() == keyValue.getValue()) {
      childIndent=Indent.getNormalIndent();
    }
  }
 else   if (!hasHangingIndent(_node.getPsi()) && ((parentType == PyElementTypes.PARENTHESIZED_EXPRESSION && myContext.getSettings().ALIGN_MULTILINE_PARENTHESIZED_EXPRESSION) || (parentType == PyElementTypes.ARGUMENT_LIST && myContext.getSettings().ALIGN_MULTILINE_PARAMETERS_IN_CALLS) || (parentType == PyElementTypes.PARAMETER_LIST && myContext.getSettings().ALIGN_MULTILINE_PARAMETERS)) && !isIndentNext(child)&& !hasLineBreaksBefore(_node.getFirstChildNode(),1)&& !ourListElementTypes.contains(childType)) {
    if (!ourBrackets.contains(childType)) {
      childAlignment=getAlignmentForChildren();
      if (parentType != PyElementTypes.CALL_EXPRESSION) {
        childIndent=Indent.getNormalIndent();
      }
    }
 else     if (childType == PyTokenTypes.RPAR) {
      childIndent=Indent.getNoneIndent();
    }
  }
 else   if (parentType == PyElementTypes.GENERATOR_EXPRESSION || parentType == PyElementTypes.PARENTHESIZED_EXPRESSION) {
    if (childType == PyTokenTypes.RPAR || !hasLineBreaksBefore(child,1)) {
      childIndent=Indent.getNoneIndent();
    }
 else {
      childIndent=isIndentNext(child) ? Indent.getContinuationIndent() : Indent.getNormalIndent();
    }
  }
 else   if (parentType == PyElementTypes.ARGUMENT_LIST || parentType == PyElementTypes.PARAMETER_LIST) {
    if (childType == PyTokenTypes.RPAR) {
      childIndent=Indent.getNoneIndent();
    }
 else {
      if (parentType == PyElementTypes.PARAMETER_LIST || argumentMayHaveSameIndentAsFollowingStatementList()) {
        childIndent=Indent.getContinuationIndent();
      }
 else {
        childIndent=Indent.getNormalIndent();
      }
    }
  }
 else   if (parentType == PyElementTypes.SUBSCRIPTION_EXPRESSION) {
    PyExpression indexExpression=((PySubscriptionExpression)_node.getPsi()).getIndexExpression();
    if (indexExpression != null && child == indexExpression.getNode()) {
      childIndent=Indent.getNormalIndent();
    }
  }
 else   if (parentType == PyElementTypes.REFERENCE_EXPRESSION) {
    if (child != _node.getFirstChildNode()) {
      childIndent=Indent.getNormalIndent();
      if (hasLineBreaksBefore(child,1)) {
        if (isInControlStatement()) {
          childIndent=Indent.getContinuationIndent();
        }
 else {
          PyBlock b=myParent;
          while (b != null) {
            if (b.getNode().getPsi() instanceof PyParenthesizedExpression || b.getNode().getPsi() instanceof PyArgumentList || b.getNode().getPsi() instanceof PyParameterList) {
              childAlignment=getAlignmentOfChild(b,1);
              break;
            }
            b=b.myParent;
          }
        }
      }
    }
  }
  if (isAfterStatementList(child) && !hasLineBreaksBefore(child,2) && child.getElementType() != PyTokenTypes.END_OF_LINE_COMMENT) {
    childIndent=Indent.getNormalIndent();
  }
  ASTNode prev=child.getTreePrev();
  while (prev != null && prev.getElementType() == TokenType.WHITE_SPACE) {
    if (prev.textContains('\\') && !childIndent.equals(Indent.getContinuationIndent(false)) && !childIndent.equals(Indent.getContinuationIndent(true))) {
      childIndent=isIndentNext(child) ? Indent.getContinuationIndent() : Indent.getNormalIndent();
      break;
    }
    prev=prev.getTreePrev();
  }
  return new PyBlock(this,child,childAlignment,childIndent,wrap,myContext);
}
