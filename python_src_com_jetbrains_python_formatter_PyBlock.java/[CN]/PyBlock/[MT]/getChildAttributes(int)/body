{
  int statementListsBelow=0;
  if (newChildIndex > 0) {
    if (myNode.getPsi() instanceof PyFile || myNode.getElementType() == PyTokenTypes.COLON) {
      return ChildAttributes.DELEGATE_TO_PREV_CHILD;
    }
    final PyBlock insertAfterBlock=getSubBlockByIndex(newChildIndex - 1);
    final ASTNode prevNode=insertAfterBlock.getNode();
    final PsiElement prevElt=prevNode.getPsi();
    if (prevElt instanceof PyStatementList) {
      if (dedentAfterLastStatement((PyStatementList)prevElt)) {
        return new ChildAttributes(Indent.getNoneIndent(),getChildAlignment());
      }
      return ChildAttributes.DELEGATE_TO_PREV_CHILD;
    }
 else     if (prevElt instanceof PyStatementPart) {
      return ChildAttributes.DELEGATE_TO_PREV_CHILD;
    }
    ASTNode lastChild=insertAfterBlock.getNode();
    while (lastChild != null) {
      final IElementType last_type=lastChild.getElementType();
      if (last_type == PyElementTypes.STATEMENT_LIST && hasLineBreaksBeforeInSameParent(lastChild,1)) {
        if (dedentAfterLastStatement((PyStatementList)lastChild.getPsi())) {
          break;
        }
        statementListsBelow++;
      }
 else       if (statementListsBelow > 0 && lastChild.getPsi() instanceof PsiErrorElement) {
        statementListsBelow++;
      }
      if (myNode.getElementType() == PyElementTypes.STATEMENT_LIST && lastChild.getPsi() instanceof PsiErrorElement) {
        return ChildAttributes.DELEGATE_TO_PREV_CHILD;
      }
      lastChild=getLastNonSpaceChild(lastChild,true);
    }
  }
  if (statementListsBelow > 0) {
    @SuppressWarnings("ConstantConditions") final int indent=myContext.getSettings().getIndentOptions().INDENT_SIZE;
    return new ChildAttributes(Indent.getSpaceIndent(indent * statementListsBelow),null);
  }
  final Indent childIndent=getChildIndent(newChildIndex);
  final Alignment childAlignment=getChildAlignment();
  return new ChildAttributes(childIndent,childAlignment);
}
