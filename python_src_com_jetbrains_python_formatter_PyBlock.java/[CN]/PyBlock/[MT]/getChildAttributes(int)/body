{
  int statementListsBelow=0;
  if (newChildIndex > 0) {
    if (myNode.getPsi() instanceof PyFile || myNode.getElementType() == PyTokenTypes.COLON) {
      return ChildAttributes.DELEGATE_TO_PREV_CHILD;
    }
    PyBlock insertAfterBlock=(PyBlock)mySubBlocks.get(newChildIndex - 1);
    ASTNode prevNode=insertAfterBlock.getNode();
    PsiElement prevElt=prevNode.getPsi();
    if (prevElt instanceof PyStatementList || prevElt instanceof PyStatementPart) {
      return ChildAttributes.DELEGATE_TO_PREV_CHILD;
    }
    ASTNode lastChild=insertAfterBlock.getNode();
    while (lastChild != null) {
      IElementType last_type=lastChild.getElementType();
      if (last_type == PyElementTypes.STATEMENT_LIST && hasLineBreakBefore(lastChild)) {
        statementListsBelow++;
      }
 else       if (statementListsBelow > 0 && lastChild.getPsi() instanceof PsiErrorElement) {
        statementListsBelow++;
      }
      if (myNode.getElementType() == PyElementTypes.STATEMENT_LIST && lastChild.getPsi() instanceof PsiErrorElement) {
        return ChildAttributes.DELEGATE_TO_PREV_CHILD;
      }
      lastChild=getLastNonSpaceChild(lastChild,true);
    }
  }
  if (statementListsBelow > 0) {
    int indent=mySettings.getIndentSize(myLanguage.getAssociatedFileType());
    return new ChildAttributes(Indent.getSpaceIndent(indent * statementListsBelow),null);
  }
  return new ChildAttributes(getChildIndent(newChildIndex),getChildAlignment());
}
