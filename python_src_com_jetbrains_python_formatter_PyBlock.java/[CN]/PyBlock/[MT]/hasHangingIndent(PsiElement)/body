{
  final PsiElement[] items;
  if (elem instanceof PyCallExpression) {
    final PyArgumentList argumentList=((PyCallExpression)elem).getArgumentList();
    return argumentList != null && hasHangingIndent(argumentList);
  }
 else   if (elem instanceof PyFunction) {
    return hasHangingIndent(((PyFunction)elem).getParameterList());
  }
  final PsiElement firstChild=elem.getFirstChild();
  if (firstChild == null) {
    return false;
  }
  if (PyTokenTypes.OPEN_BRACES.contains(firstChild.getNode().getElementType()) && hasLineBreaksAfter(firstChild.getNode(),1)) {
    return true;
  }
  if (elem instanceof PySequenceExpression) {
    items=((PySequenceExpression)elem).getElements();
  }
 else   if (elem instanceof PyParameterList) {
    items=((PyParameterList)elem).getParameters();
  }
 else   if (elem instanceof PyArgumentList) {
    items=((PyArgumentList)elem).getArguments();
  }
 else   if (elem instanceof PyParenthesizedExpression) {
    final PyParenthesizedExpression parenthesizedExpr=(PyParenthesizedExpression)elem;
    if (parenthesizedExpr.getContainedExpression() instanceof PyTupleExpression) {
      items=(((PyTupleExpression)parenthesizedExpr.getContainedExpression()).getElements());
    }
 else {
      items=new PsiElement[]{parenthesizedExpr.getContainedExpression()};
    }
  }
 else {
    return false;
  }
  return items.length == 0 || hasHangingIndent(items[0]);
}
