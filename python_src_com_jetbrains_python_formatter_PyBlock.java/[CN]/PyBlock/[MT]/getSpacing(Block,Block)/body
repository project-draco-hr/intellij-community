{
  if (child1 instanceof ASTBlock && child2 instanceof ASTBlock) {
    final ASTNode node1=((ASTBlock)child1).getNode();
    ASTNode node2=((ASTBlock)child2).getNode();
    final IElementType childType1=node1.getElementType();
    final PsiElement psi1=node1.getPsi();
    PsiElement psi2=node2.getPsi();
    if (psi2 instanceof PsiComment && hasLineBreaksBeforeInSameParent(node2,1)) {
      final PsiElement nonCommentAfter=PyPsiUtils.getNextNonCommentSibling(psi2,true);
      if (nonCommentAfter != null) {
        psi2=nonCommentAfter;
      }
    }
    node2=psi2.getNode();
    final IElementType childType2=psi2.getNode().getElementType();
    child2=getSubBlockByNode(node2);
    final CommonCodeStyleSettings settings=myContext.getSettings();
    if ((childType1 == PyTokenTypes.EQ || childType2 == PyTokenTypes.EQ)) {
      final PyNamedParameter namedParameter=as(myNode.getPsi(),PyNamedParameter.class);
      if (namedParameter != null && namedParameter.getAnnotation() != null) {
        return Spacing.createSpacing(1,1,0,settings.KEEP_LINE_BREAKS,settings.KEEP_BLANK_LINES_IN_CODE);
      }
    }
    if (childType1 == PyTokenTypes.COLON && psi2 instanceof PyStatementList) {
      if (needLineBreakInStatement()) {
        return Spacing.createSpacing(0,0,1,true,settings.KEEP_BLANK_LINES_IN_CODE);
      }
    }
    if ((PyElementTypes.CLASS_OR_FUNCTION.contains(childType1) && STATEMENT_OR_DECLARATION.contains(childType2)) || STATEMENT_OR_DECLARATION.contains(childType1) && PyElementTypes.CLASS_OR_FUNCTION.contains(childType2)) {
      if (PyUtil.isTopLevel(psi1)) {
        return getBlankLinesForOption(myContext.getPySettings().BLANK_LINES_AROUND_TOP_LEVEL_CLASSES_FUNCTIONS);
      }
    }
    if (psi1 instanceof PyImportStatementBase) {
      if (psi2 instanceof PyImportStatementBase) {
        final Boolean leftImportIsGroupStart=psi1.getCopyableUserData(IMPORT_GROUP_BEGIN);
        final Boolean rightImportIsGroupStart=psi2.getCopyableUserData(IMPORT_GROUP_BEGIN);
        psi1.putCopyableUserData(IMPORT_GROUP_BEGIN,null);
        if (rightImportIsGroupStart != null) {
          return Spacing.createSpacing(0,0,2,true,1);
        }
 else         if (leftImportIsGroupStart != null) {
          return Spacing.createSpacing(0,0,1,false,0);
        }
      }
      if (psi2 instanceof PyStatement && !(psi2 instanceof PyImportStatementBase)) {
        if (PyUtil.isTopLevel(psi1)) {
          return getBlankLinesForOption(settings.BLANK_LINES_AFTER_IMPORTS);
        }
 else {
          return getBlankLinesForOption(myContext.getPySettings().BLANK_LINES_AFTER_LOCAL_IMPORTS);
        }
      }
    }
    if (psi2 instanceof PsiComment && !hasLineBreaksBeforeInSameParent(psi2.getNode(),1) && myContext.getPySettings().SPACE_BEFORE_NUMBER_SIGN) {
      return Spacing.createSpacing(2,0,0,false,0);
    }
  }
  return myContext.getSpacingBuilder().getSpacing(this,child1,child2);
}
