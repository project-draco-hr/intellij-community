{
  if (child1 instanceof ASTBlock && child2 instanceof ASTBlock) {
    final ASTNode node1=((ASTBlock)child1).getNode();
    final ASTNode node2=((ASTBlock)child2).getNode();
    final PsiElement psi1=node1.getPsi();
    final PsiElement psi2=((ASTBlock)child2).getNode().getPsi();
    final IElementType childType1=node1.getElementType();
    final IElementType childType2=node2.getElementType();
    if (psi1 instanceof PyImportStatementBase && psi2 instanceof PyImportStatementBase && psi2.getCopyableUserData(IMPORT_GROUP_BEGIN) != null) {
      return Spacing.createSpacing(0,0,2,true,1);
    }
    final CommonCodeStyleSettings settings=myContext.getSettings();
    if (childType1 == PyTokenTypes.COLON && psi2 instanceof PyStatementList) {
      if (needLineBreakInStatement()) {
        return Spacing.createSpacing(0,0,1,true,settings.KEEP_BLANK_LINES_IN_CODE);
      }
    }
    if ((PyElementTypes.CLASS_OR_FUNCTION.contains(childType1) && hasTypeIgnoringPrecedingComments(psi2,STATEMENT_OR_DECLARATION)) || STATEMENT_OR_DECLARATION.contains(childType1) && hasTypeIgnoringPrecedingComments(psi2,PyElementTypes.CLASS_OR_FUNCTION)) {
      if (PyUtil.isTopLevel(psi1)) {
        return getBlankLinesForOption(myContext.getPySettings().BLANK_LINES_AROUND_TOP_LEVEL_CLASSES_FUNCTIONS);
      }
    }
    if (psi2 instanceof PsiComment && !hasLineBreaksBefore(psi2.getNode(),1) && myContext.getPySettings().SPACE_BEFORE_NUMBER_SIGN) {
      return Spacing.createSpacing(2,0,0,false,0);
    }
  }
  return myContext.getSpacingBuilder().getSpacing(this,child1,child2);
}
