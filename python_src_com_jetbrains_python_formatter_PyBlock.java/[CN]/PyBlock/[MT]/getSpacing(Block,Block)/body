{
  ASTNode childNode1=((PyBlock)child1).getNode();
  ASTNode childNode2=((PyBlock)child2).getNode();
  IElementType parentType=_node.getElementType();
  IElementType type1=childNode1.getElementType();
  IElementType type2=childNode2.getElementType();
  if (type1 == PyElementTypes.CLASS_DECLARATION) {
    int blankLines=mySettings.BLANK_LINES_AROUND_CLASS + 1;
    return Spacing.createSpacing(0,0,blankLines,mySettings.KEEP_LINE_BREAKS,mySettings.KEEP_BLANK_LINES_IN_DECLARATIONS);
  }
  if (type1 == PyElementTypes.FUNCTION_DECLARATION || (type2 == PyElementTypes.FUNCTION_DECLARATION && type1 == PyElementTypes.CLASS_DECLARATION)) {
    int blankLines=mySettings.BLANK_LINES_AROUND_METHOD + 1;
    return Spacing.createSpacing(0,0,blankLines,mySettings.KEEP_LINE_BREAKS,mySettings.KEEP_BLANK_LINES_IN_DECLARATIONS);
  }
  if (isStatementOrDeclaration(type1) && isStatementOrDeclaration(type2)) {
    return Spacing.createSpacing(0,Integer.MAX_VALUE,1,false,1);
  }
  if (type1 == PyTokenTypes.COLON && type2 == PyElementTypes.STATEMENT_LIST) {
    return Spacing.createSpacing(1,Integer.MAX_VALUE,0,true,0);
  }
  if (type2 == PyTokenTypes.COLON) {
    return getSpacingForOption(getPySettings().SPACE_BEFORE_COLON);
  }
  if (type1 == PyTokenTypes.COMMA) {
    return getSpacingForOption(mySettings.SPACE_AFTER_COMMA);
  }
  if (type2 == PyTokenTypes.COMMA) {
    return getSpacingForOption(mySettings.SPACE_BEFORE_COMMA);
  }
  if (type2 == PyTokenTypes.SEMICOLON) {
    return getSpacingForOption(mySettings.SPACE_BEFORE_SEMICOLON);
  }
  if (type1 == PyTokenTypes.LPAR || type2 == PyTokenTypes.RPAR) {
    if (parentType == PyElementTypes.ARGUMENT_LIST) {
      return getSpacingForOption(mySettings.SPACE_WITHIN_METHOD_CALL_PARENTHESES);
    }
  }
  if (type2 == PyTokenTypes.LBRACKET) {
    return getSpacingForOption(getPySettings().SPACE_BEFORE_LBRACKET);
  }
  if (type1 == PyTokenTypes.LBRACKET || type2 == PyTokenTypes.RBRACKET) {
    return getSpacingForOption(mySettings.SPACE_WITHIN_BRACKETS);
  }
  if (type1 == PyTokenTypes.LBRACE || type2 == PyTokenTypes.RBRACE) {
    return getSpacingForOption(getPySettings().SPACE_WITHIN_BRACES);
  }
  if (type2 == PyElementTypes.ARGUMENT_LIST) {
    return getSpacingForOption(mySettings.SPACE_BEFORE_METHOD_CALL_PARENTHESES);
  }
  if (type1 == PyTokenTypes.EQ || type2 == PyTokenTypes.EQ) {
    if (parentType == PyElementTypes.ASSIGNMENT_STATEMENT) {
      return getSpacingForOption(mySettings.SPACE_AROUND_ASSIGNMENT_OPERATORS);
    }
    if (parentType == PyElementTypes.NAMED_PARAMETER) {
      return getSpacingForOption(getPySettings().SPACE_AROUND_EQ_IN_NAMED_PARAMETER);
    }
    if (parentType == PyElementTypes.KEYWORD_ARGUMENT_EXPRESSION) {
      return getSpacingForOption(getPySettings().SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT);
    }
  }
  if (isAround(type1,type2,PyTokenTypes.AUG_ASSIGN_OPERATIONS)) {
    return getSpacingForOption(mySettings.SPACE_AROUND_ASSIGNMENT_OPERATORS);
  }
  if (isAround(type1,type2,PyTokenTypes.ADDITIVE_OPERATIONS)) {
    return getSpacingForOption(mySettings.SPACE_AROUND_ADDITIVE_OPERATORS);
  }
  if (isAround(type1,type2,PyTokenTypes.MULTIPLICATIVE_OPERATIONS)) {
    return getSpacingForOption(mySettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS);
  }
  if (isAround(type1,type2,PyTokenTypes.SHIFT_OPERATIONS)) {
    return getSpacingForOption(mySettings.SPACE_AROUND_SHIFT_OPERATORS);
  }
  if (isAround(type1,type2,PyTokenTypes.BITWISE_OPERATIONS)) {
    return getSpacingForOption(mySettings.SPACE_AROUND_BITWISE_OPERATORS);
  }
  if (isAround(type1,type2,PyTokenTypes.EQUALITY_OPERATIONS)) {
    return getSpacingForOption(mySettings.SPACE_AROUND_EQUALITY_OPERATORS);
  }
  if (isAround(type1,type2,PyTokenTypes.RELATIONAL_OPERATIONS)) {
    return getSpacingForOption(mySettings.SPACE_AROUND_RELATIONAL_OPERATORS);
  }
  return null;
}
