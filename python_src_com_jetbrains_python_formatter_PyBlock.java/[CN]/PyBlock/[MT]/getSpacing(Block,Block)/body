{
  ASTNode childNode1=((PyBlock)child1).getNode();
  ASTNode childNode2=((PyBlock)child2).getNode();
  IElementType parentType=myNode.getElementType();
  IElementType type1=childNode1.getElementType();
  IElementType type2=childNode2.getElementType();
  if (type1 == PyElementTypes.FUNCTION_DECLARATION) {
    PyStatementList func_statement_list=((PyFunction)(childNode1.getPsi())).getStatementList();
    if (childNode2.getTreeParent().getPsi() == func_statement_list) {
      int blankLines=mySettings.BLANK_LINES_AROUND_METHOD + 1;
      return Spacing.createSpacing(0,0,blankLines,mySettings.KEEP_LINE_BREAKS,mySettings.KEEP_BLANK_LINES_IN_DECLARATIONS);
    }
 else     if (func_statement_list.getStatements().length == 0) {
      Document doc=func_statement_list.getContainingFile().getViewProvider().getDocument();
      if (doc != null) {
        final int declaration_offset=childNode1.getStartOffset();
        int line=doc.getLineNumber(declaration_offset);
        int declaration_indent=declaration_offset - doc.getLineStartOffset(line);
        final int indent_size=mySettings.getIndentSize(PythonFileType.INSTANCE) + declaration_indent;
        return Spacing.createSpacing(indent_size,indent_size,0,mySettings.KEEP_LINE_BREAKS,mySettings.KEEP_BLANK_LINES_IN_DECLARATIONS);
      }
    }
  }
  if (isStatementOrDeclaration(type1) && isStatementOrDeclaration(type2)) {
    return Spacing.createSpacing(0,Integer.MAX_VALUE,1,false,1);
  }
  return null;
}
