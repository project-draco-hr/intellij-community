{
  myProject=project;
  myContext=context;
  myRecentsId=recentsId;
  PsiManager.getInstance(project).addPsiTreeChangeListener(new PsiTreeChangeAdapter(){
    @Override public void childRemoved(    @NotNull PsiTreeChangeEvent event){
      checkContext();
    }
    @Override public void childReplaced(    @NotNull PsiTreeChangeEvent event){
      checkContext();
    }
    @Override public void childMoved(    @NotNull PsiTreeChangeEvent event){
      checkContext();
    }
    private void checkContext(){
      PsiElement contextElement=getContext();
      if (contextElement == null || !contextElement.isValid()) {
        DebuggerManagerEx manager=DebuggerManagerEx.getInstanceEx(myProject);
        if (manager == null) {
          LOG.error("Cannot obtain debugger manager for project " + myProject);
          return;
        }
        PsiElement newContextElement=PositionUtil.getContextElement(manager.getContextManager().getContext());
        setContext(newContextElement != null && newContextElement.isValid() ? newContextElement : null);
      }
    }
  }
,parentDisposable);
  setFactory(factory);
  myInitialFactory=true;
  setFocusable(false);
  myChooseFactory.setToolTipText("Click to change the language");
  myChooseFactory.setBorder(new EmptyBorder(0,3,0,3));
  new ClickListener(){
    @Override public boolean onClick(    @NotNull MouseEvent e,    int clickCount){
      ListPopup oldPopup=SoftReference.dereference(myPopup);
      if (oldPopup != null && !oldPopup.isDisposed()) {
        oldPopup.cancel();
        myPopup=null;
        return true;
      }
      if (myContext == null) {
        return true;
      }
      ListPopup popup=createLanguagePopup();
      popup.showUnderneathOf(myChooseFactory);
      myPopup=new WeakReference<>(popup);
      return true;
    }
  }
.installOn(myChooseFactory);
}
