{
  myDefaultEditor=TextEditorProvider.getInstance().createEditor(project,file);
  myComponent=myDefaultEditor.getComponent();
  JPanel studyPanel=new JPanel();
  studyPanel.setLayout(new BoxLayout(studyPanel,BoxLayout.Y_AXIS));
  final JLabel taskText=new JLabel(getTextForTask(file,project));
  int fontSize=EditorColorsManager.getInstance().getGlobalScheme().getEditorFontSize();
  String fontName=EditorColorsManager.getInstance().getGlobalScheme().getEditorFontName();
  taskText.setFont(new Font(fontName,Font.PLAIN,fontSize));
  HideableTitledPanel taskTextPanel=new HideableTitledPanel("Task Text",taskText,true);
  studyPanel.add(taskTextPanel);
  JPanel studyButtonPanel=new JPanel(new GridLayout(1,2));
  JPanel taskActionsPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
  studyButtonPanel.add(taskActionsPanel);
  studyButtonPanel.add(new JPanel());
  myCheckButton=addButton(taskActionsPanel,"Check task",StudyIcons.Resolve);
  myPrevTaskButton=addButton(taskActionsPanel,"Prev Task",StudyIcons.Prev);
  myNextTaskButton=addButton(taskActionsPanel,"Next Task",StudyIcons.Next);
  addButton(taskActionsPanel,"Start task again",StudyIcons.Refresh24);
  addButton(taskActionsPanel,"Remind shortcuts",StudyIcons.ShortcutReminder);
  addButton(taskActionsPanel,"Watch test input",StudyIcons.WatchInput);
  addButton(taskActionsPanel,"Run",StudyIcons.Run);
  studyPanel.add(studyButtonPanel);
  myComponent.add(studyPanel,BorderLayout.NORTH);
  myCheckButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      CheckAction checkAction=(CheckAction)ActionManager.getInstance().getAction("CheckAction");
      checkAction.check(project);
    }
  }
);
  myNextTaskButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      NextTaskAction nextTaskAction=(NextTaskAction)ActionManager.getInstance().getAction("NextTaskAction");
      nextTaskAction.nextTask(project);
    }
  }
);
  myPrevTaskButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      PreviousTaskAction prevTaskAction=(PreviousTaskAction)ActionManager.getInstance().getAction("PreviousTaskAction");
      prevTaskAction.previousTask(project);
    }
  }
);
}
