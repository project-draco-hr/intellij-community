{
  Set<String> names_already=context.get(CTX_NAMES);
  List<Object> result=new ArrayList<Object>();
  ResolveImportUtil.PointInImport point=ResolveImportUtil.getPointInImport(location);
  for (  PyModuleMembersProvider provider : Extensions.getExtensions(PyModuleMembersProvider.EP_NAME)) {
    for (    PyDynamicMember member : provider.getMembers(myModule,point)) {
      final String name=member.getName();
      result.add(LookupElementBuilder.create(name).setIcon(member.getIcon()).setTypeText(member.getShortType()));
    }
  }
  if (point == ResolveImportUtil.PointInImport.NONE || point == ResolveImportUtil.PointInImport.AS_NAME) {
    final VariantsProcessor processor=new VariantsProcessor(location);
    processor.setPlainNamesOnly(point == ResolveImportUtil.PointInImport.AS_NAME);
    myModule.processDeclarations(processor,ResolveState.initial(),null,location);
    if (names_already != null) {
      for (      LookupElement le : processor.getResultList()) {
        String name=le.getLookupString();
        if (!names_already.contains(name)) {
          result.add(le);
          names_already.add(name);
        }
      }
    }
 else {
      result.addAll(processor.getResultList());
    }
  }
  if (point == ResolveImportUtil.PointInImport.AS_MODULE || point == ResolveImportUtil.PointInImport.AS_NAME) {
    for (    PsiFileSystemItem pfsi : getSubmodulesList()) {
      if (pfsi == location.getContainingFile().getOriginalFile())       continue;
      String s=pfsi.getName();
      int pos=s.lastIndexOf('.');
      if (pos > 0)       s=s.substring(0,pos);
      if (!PyNames.isIdentifier(s))       continue;
      if (names_already != null) {
        if (names_already.contains(s))         continue;
 else         names_already.add(s);
      }
      result.add(LookupElementBuilder.create(pfsi,s).setPresentableText(s).setIcon(pfsi.getIcon(0)));
    }
  }
  return result.toArray();
}
