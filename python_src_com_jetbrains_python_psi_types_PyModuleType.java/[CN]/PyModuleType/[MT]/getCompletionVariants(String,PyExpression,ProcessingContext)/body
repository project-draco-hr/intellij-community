{
  Set<String> names_already=context.get(CTX_NAMES);
  List<Object> result=new ArrayList<Object>();
  ResolveImportUtil.PointInImport point=ResolveImportUtil.getPointInImport(location);
  for (  PyModuleMembersProvider provider : Extensions.getExtensions(PyModuleMembersProvider.EP_NAME)) {
    for (    PyDynamicMember member : provider.getMembers(myModule,point)) {
      final String name=member.getName();
      result.add(LookupElementBuilder.create(name).withIcon(member.getIcon()).withTypeText(member.getShortType()));
    }
  }
  if (point == ResolveImportUtil.PointInImport.NONE || point == ResolveImportUtil.PointInImport.AS_NAME) {
    final CompletionVariantsProcessor processor=new CompletionVariantsProcessor(location,new Condition<PsiElement>(){
      @Override public boolean value(      PsiElement psiElement){
        return !(psiElement instanceof PyImportElement) || PsiTreeUtil.getParentOfType(psiElement,PyImportStatementBase.class) instanceof PyFromImportStatement;
      }
    }
,new PyUtil.UnderscoreFilter(0));
    processor.setPlainNamesOnly(point == ResolveImportUtil.PointInImport.AS_NAME);
    myModule.processDeclarations(processor,ResolveState.initial(),null,location);
    if (names_already != null) {
      for (      LookupElement le : processor.getResultList()) {
        String name=le.getLookupString();
        if (!names_already.contains(name)) {
          result.add(le);
          names_already.add(name);
        }
      }
    }
 else {
      result.addAll(processor.getResultList());
    }
  }
  if (PyNames.INIT_DOT_PY.equals(myModule.getName())) {
    if (point == ResolveImportUtil.PointInImport.AS_MODULE || point == ResolveImportUtil.PointInImport.AS_NAME) {
      result.addAll(getSubmoduleVariants(myModule.getContainingDirectory(),location,names_already));
    }
 else {
      addImportedSubmodules(location,names_already,result);
    }
  }
  return result.toArray();
}
