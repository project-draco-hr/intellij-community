{
  final ScopeOwner owner=ScopeUtil.getScopeOwner(location);
  final PyQualifiedName packageQName=ResolveImportUtil.findCanonicalImportPath(myModule,location);
  if (owner != null && packageQName != null) {
    for (    PyImportElement importElement : getVisibleImports(owner)) {
      final PyStatement stmt=importElement.getContainingImportStatement();
      PyQualifiedName importedQName=null;
      PyQualifiedName implicitSubmoduleQName=null;
      if (stmt instanceof PyFromImportStatement) {
        final PyFromImportStatement fromImportStatement=(PyFromImportStatement)stmt;
        importedQName=fromImportStatement.getImportSourceQName();
        final String visibleName=importElement.getVisibleName();
        if (importedQName != null) {
          implicitSubmoduleQName=importedQName.append(visibleName);
        }
      }
 else       if (stmt instanceof PyImportStatement) {
        importedQName=importElement.getImportedQName();
      }
      final PyQualifiedName resolvedQName=packageQName.append(name);
      if ((importedQName != null && importedQName.matchesPrefix(resolvedQName)) || (implicitSubmoduleQName != null && implicitSubmoduleQName.equals(resolvedQName))) {
        final PsiElement submodule=ResolveImportUtil.resolveChild(myModule,name,myModule,null,null,false,true);
        if (submodule != null) {
          final ResolveResultList results=new ResolveResultList();
          results.add(new ImportedResolveResult(submodule,RatedResolveResult.RATE_NORMAL,Collections.<PsiElement>singletonList(importElement)));
          return results;
        }
      }
    }
  }
  return null;
}
