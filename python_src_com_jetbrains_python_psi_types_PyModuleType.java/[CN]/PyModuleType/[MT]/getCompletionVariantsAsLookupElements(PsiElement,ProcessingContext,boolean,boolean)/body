{
  List<LookupElement> result=new ArrayList<LookupElement>();
  Set<String> namesAlready=context.get(CTX_NAMES);
  PointInImport point=ResolveImportUtil.getPointInImport(location);
  for (  PyModuleMembersProvider provider : Extensions.getExtensions(PyModuleMembersProvider.EP_NAME)) {
    for (    PyDynamicMember member : provider.getMembers(myModule,point)) {
      final String name=member.getName();
      if (namesAlready != null) {
        namesAlready.add(name);
      }
      if (PyUtil.isClassPrivateName(name)) {
        continue;
      }
      result.add(LookupElementBuilder.create(name).withIcon(member.getIcon()).withTypeText(member.getShortType()));
    }
  }
  if (point == PointInImport.NONE || point == PointInImport.AS_NAME) {
    final CompletionVariantsProcessor processor=new CompletionVariantsProcessor(location,new Condition<PsiElement>(){
      @Override public boolean value(      PsiElement psiElement){
        return !(psiElement instanceof PyImportElement) || PsiTreeUtil.getParentOfType(psiElement,PyImportStatementBase.class) instanceof PyFromImportStatement;
      }
    }
,new PyUtil.UnderscoreFilter(0));
    if (suppressParentheses) {
      processor.suppressParentheses();
    }
    processor.setPlainNamesOnly(point == PointInImport.AS_NAME);
    myModule.processDeclarations(processor,ResolveState.initial(),null,location);
    if (namesAlready != null) {
      for (      LookupElement le : processor.getResultList()) {
        String name=le.getLookupString();
        if (!namesAlready.contains(name)) {
          result.add(le);
          namesAlready.add(name);
        }
      }
    }
 else {
      result.addAll(processor.getResultList());
    }
  }
  if (PyUtil.isPackage(myModule)) {
    if (point == PointInImport.AS_MODULE || point == PointInImport.AS_NAME || wantAllSubmodules) {
      result.addAll(getSubModuleVariants(myModule.getContainingDirectory(),location,namesAlready));
    }
 else {
      addImportedSubmodules(location,namesAlready,result);
    }
  }
  return result;
}
