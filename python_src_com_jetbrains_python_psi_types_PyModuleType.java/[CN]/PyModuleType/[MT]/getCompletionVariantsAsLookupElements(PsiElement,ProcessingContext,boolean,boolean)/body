{
  List<LookupElement> result=new ArrayList<LookupElement>();
  Set<String> namesAlready=context.get(CTX_NAMES);
  PointInImport point=ResolveImportUtil.getPointInImport(location);
  for (  PyModuleMembersProvider provider : Extensions.getExtensions(PyModuleMembersProvider.EP_NAME)) {
    for (    PyCustomMember member : provider.getMembers(myModule,point)) {
      final String name=member.getName();
      if (namesAlready != null) {
        namesAlready.add(name);
      }
      if (PyUtil.isClassPrivateName(name)) {
        continue;
      }
      final CompletionVariantsProcessor processor=createCompletionVariantsProcessor(location,suppressParentheses,point);
      final PsiElement resolved=member.resolve(location);
      if (resolved != null) {
        processor.execute(resolved,ResolveState.initial());
        final List<LookupElement> lookupList=processor.getResultList();
        if (!lookupList.isEmpty()) {
          final LookupElement element=lookupList.get(0);
          if (name.equals(element.getLookupString())) {
            result.add(element);
            continue;
          }
        }
      }
      result.add(LookupElementBuilder.create(name).withIcon(member.getIcon()).withTypeText(member.getShortType()));
    }
  }
  if (point == PointInImport.NONE || point == PointInImport.AS_NAME) {
    final CompletionVariantsProcessor processor=createCompletionVariantsProcessor(location,suppressParentheses,point);
    myModule.processDeclarations(processor,ResolveState.initial(),null,location);
    if (namesAlready != null) {
      for (      LookupElement le : processor.getResultList()) {
        String name=le.getLookupString();
        if (!namesAlready.contains(name)) {
          result.add(le);
          namesAlready.add(name);
        }
      }
    }
 else {
      result.addAll(processor.getResultList());
    }
  }
  if (PyUtil.isPackage(myModule)) {
    if (point == PointInImport.AS_MODULE || point == PointInImport.AS_NAME || wantAllSubmodules) {
      result.addAll(getSubModuleVariants(myModule.getContainingDirectory(),location,namesAlready));
    }
 else {
      result.addAll(collectImportedSubmodulesAsLookupElements(myModule,location,namesAlready));
    }
  }
  return result;
}
