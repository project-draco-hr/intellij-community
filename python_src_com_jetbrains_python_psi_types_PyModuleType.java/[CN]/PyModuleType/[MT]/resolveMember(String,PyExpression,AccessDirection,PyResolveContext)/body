{
  final PsiElement overridingMember=resolveByOverridingMembersProviders(myModule,name);
  if (overridingMember != null) {
    return ResolveResultList.to(overridingMember);
  }
  final PsiElement attribute=myModule.getElementNamed(name);
  if (attribute != null) {
    return ResolveResultList.to(attribute);
  }
  if (PyUtil.isPackage(myModule)) {
    final List<PyImportElement> importElements=new ArrayList<PyImportElement>();
    if (myImportedModule != null && (location == null || !inSameFile(location,myImportedModule))) {
      final PyImportElement importElement=myImportedModule.getImportElement();
      if (importElement != null) {
        importElements.add(importElement);
      }
    }
 else     if (location != null) {
      final ScopeOwner owner=ScopeUtil.getScopeOwner(location);
      if (owner != null) {
        importElements.addAll(getVisibleImports(owner));
      }
      if (!inSameFile(location,myModule)) {
        importElements.addAll(myModule.getImportTargets());
      }
      final List<PyFromImportStatement> imports=myModule.getFromImports();
      for (      PyFromImportStatement anImport : imports) {
        Collections.addAll(importElements,anImport.getImportElements());
      }
    }
    final List<? extends RatedResolveResult> implicitMembers=resolveImplicitPackageMember(name,importElements);
    if (implicitMembers != null) {
      return implicitMembers;
    }
  }
  final PsiElement member=resolveByMembersProviders(myModule,name);
  if (member != null) {
    return ResolveResultList.to(member);
  }
  return null;
}
