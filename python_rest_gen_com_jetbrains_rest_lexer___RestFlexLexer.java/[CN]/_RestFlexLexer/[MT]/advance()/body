{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    if (zzMarkedPosL > zzStartRead) {
switch (zzBufferL.charAt(zzMarkedPosL - 1)) {
case '\n':
case '\u000B':
case '\u000C':
case '\u0085':
case '\u2028':
case '\u2029':
        zzAtBOL=true;
      break;
case '\r':
    if (zzMarkedPosL < zzEndReadL)     zzAtBOL=zzBufferL.charAt(zzMarkedPosL) != '\n';
 else     if (zzAtEOF)     zzAtBOL=false;
 else {
      boolean eof=zzRefill();
      zzMarkedPosL=zzMarkedPos;
      zzEndReadL=zzEndRead;
      zzBufferL=zzBuffer;
      if (eof)       zzAtBOL=false;
 else       zzAtBOL=zzBufferL.charAt(zzMarkedPosL) != '\n';
    }
  break;
default :
zzAtBOL=false;
}
}
zzAction=-1;
zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
if (zzAtBOL) zzState=ZZ_LEXSTATE[zzLexicalState + 1];
 else zzState=ZZ_LEXSTATE[zzLexicalState];
int zzAttributes=zzAttrL[zzState];
if ((zzAttributes & 1) == 1) {
zzAction=zzState;
}
zzForAction: {
while (true) {
if (zzCurrentPosL < zzEndReadL) {
zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL);
zzCurrentPosL+=Character.charCount(zzInput);
}
 else if (zzAtEOF) {
zzInput=YYEOF;
break zzForAction;
}
 else {
zzCurrentPos=zzCurrentPosL;
zzMarkedPos=zzMarkedPosL;
boolean eof=zzRefill();
zzCurrentPosL=zzCurrentPos;
zzMarkedPosL=zzMarkedPos;
zzBufferL=zzBuffer;
zzEndReadL=zzEndRead;
if (eof) {
  zzInput=YYEOF;
  break zzForAction;
}
 else {
  zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL);
  zzCurrentPosL+=Character.charCount(zzInput);
}
}
if (zzInput >= zzCMapL.length) ZZ_CMAP=zzCMapL=zzInput >= ZZ_MX ? L.MAP : M.MAP;
int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
if (zzNext == -1) break zzForAction;
zzState=zzNext;
zzAttributes=zzAttrL[zzState];
if ((zzAttributes & 1) == 1) {
zzAction=zzState;
zzMarkedPosL=zzCurrentPosL;
if ((zzAttributes & 8) == 8) break zzForAction;
}
}
}
zzMarkedPos=zzMarkedPosL;
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
return null;
}
 else {
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 1:
{
yybegin(IN_COMMENT);
return COMMENT;
}
case 44:
break;
case 2:
{
yybegin(INDENTED);
return chooseType();
}
case 45:
break;
case 3:
{
return chooseType();
}
case 46:
break;
case 4:
{
yybegin(INIT);
return LINE;
}
case 47:
break;
case 5:
{
yypushback(1);
yybegin(INIT);
}
case 48:
break;
case 6:
{
yybegin(INIT);
return WHITESPACE;
}
case 49:
break;
case 7:
{
yybegin(INIT);
return ERROR;
}
case 50:
break;
case 8:
{
return WHITESPACE;
}
case 51:
break;
case 9:
{
return COMMENT;
}
case 52:
break;
case 10:
{
yybegin(PRE_INDENTED);
myIndent=yylength();
return chooseType();
}
case 53:
break;
case 11:
{
yybegin(PRE_QUOTED);
return SPEC_SYMBOL;
}
case 54:
break;
case 12:
{
yypushback(1);
myIndent=0;
myState=0;
yybegin(INIT);
}
case 55:
break;
case 13:
{
if (yylength() >= myIndent) {
yybegin(PRE_INDENTED);
return chooseType();
}
 else {
myIndent=0;
yypushback(yylength());
yybegin(INIT);
}
}
case 56:
break;
case 14:
{
yypushback(1);
myState=0;
yybegin(INIT);
}
case 57:
break;
case 15:
{
yybegin(PRE_QUOTED);
return chooseType();
}
case 58:
break;
case 16:
{
yybegin(QUOTED);
return chooseType();
}
case 59:
break;
case 17:
{
yybegin(IN_FOOTNOTE);
return LINE;
}
case 60:
break;
case 18:
{
return LINE;
}
case 61:
break;
case 19:
{
yypushback(1);
yybegin(IN_LINE);
}
case 62:
break;
case 20:
{
yybegin(IN_LINEBEGIN);
return WHITESPACE;
}
case 63:
break;
case 21:
{
yybegin(IN_LINE);
return SPEC_SYMBOL;
}
case 64:
break;
case 22:
{
yybegin(INIT);
return COMMENT;
}
case 65:
break;
case 23:
{
yybegin(IN_VALUE);
return CUSTOM_DIRECTIVE;
}
case 66:
break;
case 24:
{
yybegin(IN_VALUE);
return ANONYMOUS_HYPERLINK;
}
case 67:
break;
case 25:
{
return SUBSTITUTION;
}
case 68:
break;
case 26:
{
yybegin(INIT);
return FOOTNOTE;
}
case 69:
break;
case 27:
{
yybegin(INIT);
return CITATION;
}
case 70:
break;
case 28:
{
String value=yytext().toString().trim();
if ("python".equalsIgnoreCase(value)) {
myState=1;
yybegin(IN_INLINE);
}
 else if ("django".equalsIgnoreCase(value) || "html+django".equalsIgnoreCase(value)) {
myState=2;
yybegin(IN_INLINE);
}
 else if ("javascript".equalsIgnoreCase(value)) {
myState=3;
yybegin(IN_INLINE);
}
 else {
yybegin(INIT);
}
return LINE;
}
case 71:
break;
case 29:
{
yybegin(IN_EXPLISIT_MARKUP);
return EXPLISIT_MARKUP_START;
}
case 72:
break;
case 30:
{
yypushback(1);
return REFERENCE_NAME;
}
case 73:
break;
case 31:
{
yybegin(INIT);
return HYPERLINK;
}
case 74:
break;
case 32:
{
yypushback(1);
yybegin(INIT);
return REFERENCE_NAME;
}
case 75:
break;
case 33:
{
return INTERPRETED;
}
case 76:
break;
case 34:
{
yybegin(IN_INLINE);
return LITERAL_BLOCK_START;
}
case 77:
break;
case 35:
{
return ITALIC;
}
case 78:
break;
case 36:
{
yypushback(1);
return FIELD;
}
case 79:
break;
case 37:
{
yybegin(IN_VALUE);
return DIRECTIVE;
}
case 80:
break;
case 38:
{
yypushback(1);
yybegin(INIT);
return FIELD;
}
case 81:
break;
case 39:
{
return FIXED;
}
case 82:
break;
case 40:
{
return BOLD;
}
case 83:
break;
case 41:
{
return TITLE;
}
case 84:
break;
case 42:
{
return DIRECT_HYPERLINK;
}
case 85:
break;
case 43:
{
yybegin(IN_HIGHLIGHT);
return CUSTOM_DIRECTIVE;
}
case 86:
break;
default :
zzScanError(ZZ_NO_MATCH);
}
}
}
}
