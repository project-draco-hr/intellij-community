{
  this();
  first=head;
  stats.addWithKey(head,head.id);
  List<StatEdge> lstHeadSuccs=head.getSuccessorEdges(STATEDGE_DIRECT_ALL);
switch (regedges) {
case 0:
    ifstat=null;
  elsestat=null;
break;
case 1:
ifstat=null;
elsestat=null;
StatEdge edgeif=lstHeadSuccs.get(1);
if (edgeif.getType() != StatEdge.TYPE_REGULAR) {
post=lstHeadSuccs.get(0).getDestination();
}
 else {
post=edgeif.getDestination();
negated=true;
}
break;
case 2:
elsestat=lstHeadSuccs.get(0).getDestination();
ifstat=lstHeadSuccs.get(1).getDestination();
List<StatEdge> lstSucc=ifstat.getSuccessorEdges(StatEdge.TYPE_REGULAR);
List<StatEdge> lstSucc1=elsestat.getSuccessorEdges(StatEdge.TYPE_REGULAR);
if (ifstat.getPredecessorEdges(StatEdge.TYPE_REGULAR).size() > 1 || lstSucc.size() > 1) {
post=ifstat;
}
 else if (elsestat.getPredecessorEdges(StatEdge.TYPE_REGULAR).size() > 1 || lstSucc1.size() > 1) {
post=elsestat;
}
 else {
if (lstSucc.size() == 0) {
post=elsestat;
}
 else if (lstSucc1.size() == 0) {
post=ifstat;
}
}
if (ifstat == post) {
if (elsestat != post) {
ifstat=elsestat;
negated=true;
}
 else {
ifstat=null;
}
elsestat=null;
}
 else if (elsestat == post) {
elsestat=null;
}
 else {
post=postst;
}
if (elsestat == null) {
regedges=1;
}
}
ifedge=lstHeadSuccs.get(negated ? 0 : 1);
elseedge=(regedges == 2) ? lstHeadSuccs.get(negated ? 1 : 0) : null;
iftype=(regedges == 2) ? IFTYPE_IFELSE : IFTYPE_IF;
if (iftype == IFTYPE_IF) {
if (regedges == 0) {
StatEdge edge=lstHeadSuccs.get(0);
head.removeSuccessor(edge);
edge.setSource(this);
this.addSuccessor(edge);
}
 else if (regedges == 1) {
StatEdge edge=lstHeadSuccs.get(negated ? 1 : 0);
head.removeSuccessor(edge);
}
}
if (ifstat != null) {
stats.addWithKey(ifstat,ifstat.id);
}
if (elsestat != null) {
stats.addWithKey(elsestat,elsestat.id);
}
if (post == head) {
post=this;
}
}
