{
  JavaRefactoringSettings.getInstance().INTRODUCE_CONSTANT_MOVE_TO_ANOTHER_CLASS=myPanel.isMoveToAnotherClass();
  if (myPanel.isMoveToAnotherClass()) {
    myEditor.putUserData(INTRODUCE_RESTART,true);
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        myEditor.putUserData(ACTIVE_INTRODUCE,GrInplaceConstantIntroducer.this);
        try {
          final GrIntroduceConstantHandler constantHandler=new GrIntroduceConstantHandler();
          final PsiLocalVariable localVariable=(PsiLocalVariable)getLocalVariable();
          constantHandler.getContextAndInvoke(myProject,myEditor,((GrExpression)myExpr),(GrVariable)localVariable,null);
        }
  finally {
          myEditor.putUserData(INTRODUCE_RESTART,false);
          myEditor.putUserData(ACTIVE_INTRODUCE,null);
          releaseResources();
          if (myLocalMarker != null) {
            myLocalMarker.dispose();
          }
          if (myExprMarker != null) {
            myExprMarker.dispose();
          }
        }
      }
    }
);
    return false;
  }
  return super.performRefactoring();
}
