{
  final VirtualFile depJar=createProjectJarSubFile("lib/dep/dep/1.0/dep-1.0.jar");
  importProject("apply plugin: 'java'\n" + "\n" + "repositories {\n"+ "  maven { url file('lib') }\n"+ "}\n"+ "dependencies {\n"+ "  compile 'dep:dep:1.0'\n"+ "  compile 'some:unresolvable-lib:0.1'\n"+ "}\n");
  assertModules("project","project_main","project_test");
  final String depName="Gradle: dep:dep:1.0";
  assertModuleLibDep("project_main",depName,depJar.getUrl());
  assertModuleLibDepScope("project_main",depName,DependencyScope.COMPILE);
  assertModuleLibDepScope("project_main","Gradle: some:unresolvable-lib:0.1",DependencyScope.COMPILE);
  List<LibraryOrderEntry> unresolvableDep=getModuleLibDeps("project_main","Gradle: some:unresolvable-lib:0.1");
  assertEquals(1,unresolvableDep.size());
  LibraryOrderEntry unresolvableEntry=unresolvableDep.iterator().next();
  assertFalse(unresolvableEntry.isModuleLevel());
  assertEquals(DependencyScope.COMPILE,unresolvableEntry.getScope());
  String[] unresolvableEntryUrls=unresolvableEntry.getUrls(OrderRootType.CLASSES);
  assertEquals(1,unresolvableEntryUrls.length);
  assertTrue(unresolvableEntryUrls[0].contains("Could not find some:unresolvable-lib:0.1"));
  assertModuleLibDep("project_test",depName,depJar.getUrl());
  assertModuleLibDepScope("project_test",depName,DependencyScope.COMPILE);
  importProjectUsingSingeModulePerGradleProject();
  assertModules("project");
  assertModuleLibDep("project",depName,depJar.getUrl());
  assertModuleLibDepScope("project",depName,DependencyScope.COMPILE);
  assertModuleLibDepScope("project","Gradle: unresolvable-lib-0.1:1",DependencyScope.COMPILE);
  unresolvableDep=getModuleLibDeps("project","Gradle: unresolvable-lib-0.1:1");
  assertEquals(1,unresolvableDep.size());
  unresolvableEntry=unresolvableDep.iterator().next();
  assertTrue(unresolvableEntry.isModuleLevel());
  assertEquals(DependencyScope.COMPILE,unresolvableEntry.getScope());
  unresolvableEntryUrls=unresolvableEntry.getUrls(OrderRootType.CLASSES);
  assertEquals(0,unresolvableEntryUrls.length);
}
