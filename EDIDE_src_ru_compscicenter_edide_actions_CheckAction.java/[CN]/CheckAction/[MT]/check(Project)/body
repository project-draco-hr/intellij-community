{
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        @Override public void run(){
          final Editor selectedEditor=StudyEditor.getSelectedEditor(project);
          final FileDocumentManager fileDocumentManager=FileDocumentManager.getInstance();
          final VirtualFile openedFile=fileDocumentManager.getFile(selectedEditor.getDocument());
          StudyTaskManager taskManager=StudyTaskManager.getInstance(selectedEditor.getProject());
          final TaskFile selectedTaskFile=taskManager.getTaskFile(openedFile);
          FileDocumentManager.getInstance().saveAllDocuments();
          if (!(project != null && project.isOpen())) {
            return;
          }
          String basePath=project.getBasePath();
          if (basePath == null)           return;
          if (openedFile == null)           return;
          final VirtualFile taskDir=openedFile.getParent();
          Task currentTask=selectedTaskFile.getTask();
          final StudyTestRunner testRunner=new StudyTestRunner(currentTask,taskDir);
          Process testProcess=null;
          try {
            testProcess=testRunner.launchTests(project,openedFile.getNameWithoutExtension());
          }
 catch (          ExecutionException e) {
            LOG.error(e);
          }
          if (testProcess != null) {
            final int testNum=currentTask.getTestNum();
            final int testPassed=testRunner.getPassedTests(testProcess);
            if (testPassed == testNum) {
              currentTask.setStatus(StudyStatus.Solved);
              selectedTaskFile.drawAllWindows(selectedEditor);
              ProjectView.getInstance(project).refresh();
              createTestResultPopUp("Congratulations!",JBColor.GREEN,project);
              return;
            }
            if (testPassed == 0) {
              String message=testRunner.getRunFailedMessage(testProcess);
              if (message.length() != 0) {
                Messages.showErrorDialog(project,message,"Failed to Run");
                currentTask.setStatus(StudyStatus.Failed);
                selectedTaskFile.drawAllWindows(selectedEditor);
                ProjectView.getInstance(project).refresh();
                return;
              }
            }
            final TaskFile taskFileCopy=new TaskFile();
            final VirtualFile copyWithAnswers=getCopyWithAnswers(taskDir,openedFile,selectedTaskFile,taskFileCopy);
            for (            final Window window : taskFileCopy.getWindows()) {
              check(project,window,copyWithAnswers,taskFileCopy,selectedTaskFile,selectedEditor.getDocument(),testRunner);
            }
            System.out.println();
            try {
              copyWithAnswers.delete(this);
            }
 catch (            IOException e) {
              LOG.error(e);
            }
            selectedTaskFile.drawAllWindows(selectedEditor);
            String result=String.format("%d from %d tests failed",testNum - testPassed,testNum);
            createTestResultPopUp(result,JBColor.RED,project);
          }
        }
      }
,null,null);
    }
  }
);
}
