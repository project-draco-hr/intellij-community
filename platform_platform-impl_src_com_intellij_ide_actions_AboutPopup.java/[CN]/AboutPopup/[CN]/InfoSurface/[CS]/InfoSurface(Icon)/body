{
  ApplicationInfoImpl appInfo=(ApplicationInfoImpl)ApplicationInfoEx.getInstanceEx();
  myImage=image;
  myColor=Color.white;
  myLinkColor=appInfo.getAboutLinkColor() != null ? appInfo.getAboutLinkColor() : UI.getColor("link.foreground");
  setOpaque(false);
  setBackground(myColor);
  setFocusable(true);
  Calendar cal=appInfo.getBuildDate();
  myLines.add(new AboutBoxLine(appInfo.getFullApplicationName(),true,null));
  appendLast();
  String buildInfo=IdeBundle.message("about.box.build.number",appInfo.getBuild().asString());
  String buildDate="";
  if (appInfo.getBuild().isSnapshot()) {
    buildDate=new SimpleDateFormat("HH:mm, ").format(cal.getTime());
  }
  buildDate+=DateFormatUtil.formatAboutDialogDate(cal.getTime());
  buildInfo+=IdeBundle.message("about.box.build.date",buildDate);
  myLines.add(new AboutBoxLine(buildInfo));
  appendLast();
  myLines.add(new AboutBoxLine(""));
  LicensingFacade provider=LicensingFacade.getInstance();
  if (provider != null) {
    myLines.add(new AboutBoxLine(provider.getLicensedToMessage(),true,null));
    for (    String message : provider.getLicenseRestrictionsMessages()) {
      myLines.add(new AboutBoxLine(message));
    }
  }
  myLines.add(new AboutBoxLine(""));
  Properties properties=System.getProperties();
  String javaVersion=properties.getProperty("java.runtime.version",properties.getProperty("java.version","unknown"));
  String arch=properties.getProperty("os.arch","");
  myLines.add(new AboutBoxLine(IdeBundle.message("about.box.jre",javaVersion,arch)));
  appendLast();
  String vmVersion=properties.getProperty("java.vm.name","unknown");
  String vmVendor=properties.getProperty("java.vendor","unknown");
  myLines.add(new AboutBoxLine(IdeBundle.message("about.box.vm",vmVersion,vmVendor)));
  appendLast();
  String thirdParty=appInfo.getThirdPartySoftwareURL();
  if (thirdParty != null) {
    myLines.add(new AboutBoxLine(""));
    myLines.add(new AboutBoxLine(""));
    myLines.add(new AboutBoxLine("Powered by ").keepWithNext());
    myLines.add(new AboutBoxLine("open-source software",false,thirdParty).keepWithNext());
  }
  addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent event){
      if (myActiveLink != null) {
        event.consume();
        BrowserUtil.browse(myActiveLink.myUrl);
      }
    }
  }
);
  addMouseMotionListener(new MouseMotionAdapter(){
    @Override public void mouseMoved(    MouseEvent event){
      boolean hadLink=(myActiveLink != null);
      myActiveLink=null;
      for (      Link link : myLinks) {
        if (link.myRectangle.contains(event.getPoint())) {
          myActiveLink=link;
          if (!hadLink) {
            setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
          }
          break;
        }
      }
      if (hadLink && myActiveLink == null) {
        setCursor(Cursor.getDefaultCursor());
      }
    }
  }
);
}
