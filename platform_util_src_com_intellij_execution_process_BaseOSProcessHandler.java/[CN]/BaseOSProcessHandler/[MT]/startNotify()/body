{
  if (myCommandLine != null) {
    notifyTextAvailable(myCommandLine + '\n',ProcessOutputTypes.SYSTEM);
  }
  addProcessListener(new ProcessAdapter(){
    @Override public void startNotified(    final ProcessEvent event){
      try {
        final BaseDataReader stdOutReader=createOutputDataReader(getPolicy());
        final BaseDataReader stdErrReader=processHasSeparateErrorStream() ? createErrorDataReader(getPolicy()) : null;
        ProcessWaitFor.attach(myProcess,myCallback=new Consumer<Integer>(){
          @Override public void consume(          Integer exitCode){
            try {
              if (stdErrReader != null)               stdErrReader.stop();
              stdOutReader.stop();
              try {
                if (stdErrReader != null)                 stdErrReader.waitFor();
                stdOutReader.waitFor();
              }
 catch (              InterruptedException ignore) {
              }
            }
  finally {
              onOSProcessTerminated(exitCode);
            }
          }
        }
);
      }
  finally {
        removeProcessListener(this);
      }
    }
  }
);
  super.startNotify();
}
