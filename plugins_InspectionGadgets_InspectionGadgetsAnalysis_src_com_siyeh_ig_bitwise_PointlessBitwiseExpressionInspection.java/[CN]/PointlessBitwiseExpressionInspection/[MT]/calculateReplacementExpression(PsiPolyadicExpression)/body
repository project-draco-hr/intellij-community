{
  final IElementType tokenType=expression.getOperationTokenType();
  final PsiExpression[] operands=expression.getOperands();
  PsiExpression previousOperand=null;
  for (int i=0, length=operands.length; i < length; i++) {
    final PsiExpression operand=operands[i];
    if (isZero(operand)) {
      if (tokenType.equals(JavaTokenType.AND) || (tokenType.equals(JavaTokenType.LTLT) || tokenType.equals(JavaTokenType.GTGT) || tokenType.equals(JavaTokenType.GTGTGT)) && previousOperand == null) {
        return getText(expression,operands[0],operands[length - 1],PsiType.LONG.equals(expression.getType()) ? "0L" : "0");
      }
 else       if (tokenType.equals(JavaTokenType.OR) || tokenType.equals(JavaTokenType.XOR) || (tokenType.equals(JavaTokenType.LTLT) || tokenType.equals(JavaTokenType.GTGT) || tokenType.equals(JavaTokenType.GTGTGT)) && previousOperand != null) {
        return getText(expression,i == length - 1 ? expression.getTokenBeforeOperand(operand) : operand);
      }
    }
 else     if (isAllOnes(operand)) {
      if (tokenType.equals(JavaTokenType.AND)) {
        return getText(expression,i == length - 1 ? expression.getTokenBeforeOperand(operand) : operand);
      }
      if (tokenType.equals(JavaTokenType.OR)) {
        return operand.getText();
      }
 else       if (tokenType.equals(JavaTokenType.XOR)) {
        if (previousOperand != null) {
          return getText(expression,previousOperand,operand,"~" + previousOperand.getText());
        }
 else {
          final PsiExpression nextOperand=operands[i + 1];
          return getText(expression,operand,nextOperand,"~" + nextOperand.getText());
        }
      }
    }
 else     if (EquivalenceChecker.expressionsAreEquivalent(previousOperand,operand)) {
      if (tokenType.equals(JavaTokenType.OR) || tokenType.equals(JavaTokenType.AND)) {
        return getText(expression,previousOperand,operand,operand.getText());
      }
 else       if (tokenType.equals(JavaTokenType.XOR)) {
        return getText(expression,previousOperand,operand,PsiType.LONG.equals(expression.getType()) ? "0L" : "0");
      }
    }
    previousOperand=operand;
  }
  return "";
}
