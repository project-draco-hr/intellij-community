{
  if (!traceDirDumped) {
    ClassLoader classLoader=TestDiscoveryInstrumentator.class.getClassLoader();
    System.out.println(ourData + "; cl: " + classLoader+ ","+ classLoader.getParent());
    System.out.println("Trace dir:" + myTraceDir);
    traceDirDumped=true;
  }
  new File(myTraceDir).mkdirs();
  final File traceFile=new File(myTraceDir,name + ".tr");
  try {
    if (!traceFile.exists()) {
      traceFile.createNewFile();
    }
    DataOutputStream os=null;
    try {
      os=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(traceFile),64 * 1024));
      final byte[] buffer=new byte[STRING_LENGTH_THRESHOLD + STRING_HEADER_SIZE];
      Map<String,Integer> classToUsedMethods=new HashMap<String,Integer>();
      for (      Map.Entry<String,boolean[]> e : myTrace2.entrySet()) {
        boolean[] used=e.getValue();
        int usedMethodsCount=0;
        for (        boolean anUsed : used) {
          if (anUsed)           ++usedMethodsCount;
        }
        if (usedMethodsCount > 0) {
          classToUsedMethods.put(e.getKey(),usedMethodsCount);
        }
      }
      writeINT(os,classToUsedMethods.size());
      for (      Map.Entry<String,boolean[]> e : myTrace2.entrySet()) {
        final boolean[] used=e.getValue();
        final String className=e.getKey();
        Integer integer=classToUsedMethods.get(className);
        if (integer == null)         continue;
        ;
        int usedMethodsCount=integer;
        writeUTF(os,buffer,className);
        writeINT(os,usedMethodsCount);
        String[] methodNames=myTrace3.get(className);
        for (int i=0, len=used.length; i < len; ++i) {
          if (used[i] && usedMethodsCount-- > 0)           writeUTF(os,buffer,methodNames[i]);
        }
      }
    }
  finally {
      if (os != null) {
        os.close();
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
