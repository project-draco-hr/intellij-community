{
  GitRepositoryManager repositoryManager=GitUtil.getRepositoryManager(project);
  VirtualFile root=repository.getRoot();
  if (result.success() || mergeConflictDetector.hasHappened()) {
    VfsUtil.markDirtyAndRefresh(false,true,false,root);
    List<VcsException> exceptions=new ArrayList<>();
    GitMergeUtil.showUpdates(project,exceptions,root,currentRev,beforeLabel,getActionName(),ActionInfo.UPDATE);
    repositoryManager.updateRepository(root);
    showErrors(project,getActionName(),exceptions);
  }
 else   if (localChangesDetector.wasMessageDetected()) {
    LocalChangesWouldBeOverwrittenHelper.showErrorNotification(project,repository.getRoot(),getActionName(),localChangesDetector.getRelativeFilePaths());
  }
 else   if (untrackedFilesDetector.wasMessageDetected()) {
    GitUntrackedFilesHelper.notifyUntrackedFilesOverwrittenBy(project,root,untrackedFilesDetector.getRelativeFilePaths(),getActionName(),null);
  }
 else {
    GitUIUtil.notifyError(project,"Git " + getActionName() + " Failed",result.getErrorOutputAsJoinedString(),true,null);
    repositoryManager.updateRepository(root);
  }
}
