{
  List<SmartPsiElementPointer> l=new ArrayList<SmartPsiElementPointer>();
  SmartPointerManager manager=SmartPointerManager.getInstance(project);
  if (MatchResult.MULTI_LINE_MATCH.equals(result.getName())) {
    for (Iterator<MatchResult> i=result.getAllSons().iterator(); i.hasNext(); ) {
      final MatchResult r=i.next();
      if (MatchResult.LINE_MATCH.equals(r.getName())) {
        PsiElement element=r.getMatchRef().getElement();
        if (element instanceof PsiDocCommentBase) {
          if (i.hasNext()) {
            MatchResult matchResult=i.next();
            if (MatchResult.LINE_MATCH.equals(matchResult.getName()) && StructuralSearchUtil.isDocCommentOwner(matchResult.getMatch())) {
              element=matchResult.getMatch();
            }
 else {
              l.add(manager.createSmartPsiElementPointer(element));
              element=matchResult.getMatch();
            }
          }
        }
        l.add(manager.createSmartPsiElementPointer(element));
      }
    }
  }
 else {
    l.add(manager.createSmartPsiElementPointer(result.getMatchRef().getElement()));
  }
  ReplacementInfoImpl replacementInfo=new ReplacementInfoImpl();
  replacementInfo.matchesPtrList=l;
  if (replacementBuilder == null) {
    replacementBuilder=new ReplacementBuilder(project,options);
  }
  replacementInfo.result=replacementBuilder.process(result,replacementInfo,options.getMatchOptions().getFileType());
  replacementInfo.matchResult=result;
  return replacementInfo;
}
