{
  final Ref<Boolean> checkoutSuccessful=new Ref<Boolean>();
  final Exception[] exception=new Exception[1];
  final Task.Backgroundable checkoutBackgroundTask=new Task.Backgroundable(project,message("message.title.check.out"),true,VcsConfiguration.getInstance(project).getCheckoutOption()){
    public void run(    @NotNull final ProgressIndicator indicator){
      final WorkingCopyFormat format=selectedFormat == null ? UNKNOWN : selectedFormat;
      SvnWorkingCopyFormatHolder.setPresetFormat(format);
      SvnVcs vcs=SvnVcs.getInstance(project);
      ProgressTracker handler=new CheckoutEventHandler(vcs,false,ProgressManager.getInstance().getProgressIndicator());
      ProgressManager.progress(message("progress.text.checking.out",target.getAbsolutePath()));
      try {
        getFactory(vcs,format).createCheckoutClient().checkout(SvnTarget.fromURL(SVNURL.parseURIEncoded(url)),target,revision,depth,ignoreExternals,true,format,handler);
        ProgressManager.checkCanceled();
        checkoutSuccessful.set(Boolean.TRUE);
      }
 catch (      SVNCancelException ignore) {
      }
catch (      SVNException e) {
        exception[0]=e;
      }
catch (      VcsException e) {
        exception[0]=e;
      }
 finally {
        SvnWorkingCopyFormatHolder.setPresetFormat(null);
      }
    }
    public void onCancel(){
      onSuccess();
    }
    public void onSuccess(){
      if (exception[0] != null) {
        showErrorDialog(message("message.text.cannot.checkout",exception[0].getMessage()),message("message.title.check.out"));
      }
      VirtualFile vf=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(target);
      if (vf != null) {
        vf.refresh(true,true,new Runnable(){
          public void run(){
            SwingUtilities.invokeLater(new Runnable(){
              @Override public void run(){
                notifyListener();
              }
            }
);
          }
        }
);
      }
 else {
        notifyListener();
      }
    }
    private void notifyListener(){
      notifyRootManagerIfUnderProject(project,target);
      if (listener != null) {
        if (!checkoutSuccessful.isNull()) {
          listener.directoryCheckedOut(target,SvnVcs.getKey());
        }
        listener.checkoutCompleted();
      }
    }
  }
;
  ProgressManager.getInstance().run(checkoutBackgroundTask);
}
