{
  mySettings=GithubSettings.getInstance();
  mySignupTextField.addHyperlinkListener(new HyperlinkAdapter(){
    @Override protected void hyperlinkActivated(    final HyperlinkEvent e){
      BrowserUtil.browse(e.getURL());
    }
  }
);
  mySignupTextField.setText("<html>Do not have an account at github.com? <a href=\"https://github.com\">" + "Sign up" + "</a></html>");
  mySignupTextField.setBackground(myPane.getBackground());
  mySignupTextField.setCursor(new Cursor(Cursor.HAND_CURSOR));
  myAuthTypeLabel.setBorder(BorderFactory.createEmptyBorder(0,10,0,0));
  myAuthTypeComboBox.addItem(AUTH_PASSWORD);
  myAuthTypeComboBox.addItem(AUTH_TOKEN);
  final Project project=ProjectManager.getInstance().getDefaultProject();
  myTestButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        final GithubAuthData auth=getAuthData();
        GithubUser user=GithubUtil.computeValueInModal(project,"Access to GitHub",new ThrowableConvertor<ProgressIndicator,GithubUser,IOException>(){
          @NotNull @Override public GithubUser convert(          ProgressIndicator indicator) throws IOException {
            return GithubUtil.checkAuthData(project,new GithubAuthDataHolder(auth),indicator);
          }
        }
);
        if (GithubAuthData.AuthType.TOKEN.equals(getAuthType())) {
          GithubNotifications.showInfoDialog(myPane,"Success","Connection successful for user " + user.getLogin());
        }
 else {
          GithubNotifications.showInfoDialog(myPane,"Success","Connection successful");
        }
      }
 catch (      GithubAuthenticationException ex) {
        GithubNotifications.showErrorDialog(myPane,"Login Failure","Can't login using given credentials: ",ex);
      }
catch (      IOException ex) {
        GithubNotifications.showErrorDialog(myPane,"Login Failure","Can't login: ",ex);
      }
    }
  }
);
  myCreateTokenButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        myPasswordField.setText(GithubUtil.computeValueInModal(project,"Access to GitHub",new ThrowableConvertor<ProgressIndicator,String,IOException>(){
          @NotNull @Override public String convert(          ProgressIndicator indicator) throws IOException {
            return GithubUtil.runTaskWithBasicAuthForHost(project,GithubAuthDataHolder.createFromSettings(),indicator,getHost(),new ThrowableConvertor<GithubConnection,String,IOException>(){
              @NotNull @Override public String convert(              @NotNull GithubConnection connection) throws IOException {
                return GithubApiUtil.getMasterToken(connection,"IntelliJ plugin");
              }
            }
);
          }
        }
));
      }
 catch (      IOException ex) {
        GithubNotifications.showErrorDialog(myPane,"Can't Create API Token",ex);
      }
    }
  }
);
  myPasswordField.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      myCredentialsModified=true;
    }
  }
);
  DocumentListener passwordEraser=new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      if (!myCredentialsModified) {
        erasePassword();
      }
    }
  }
;
  myHostTextField.getDocument().addDocumentListener(passwordEraser);
  myLoginTextField.getDocument().addDocumentListener(passwordEraser);
  myPasswordField.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      if (!myCredentialsModified && !getPassword().isEmpty()) {
        erasePassword();
      }
    }
    @Override public void focusLost(    FocusEvent e){
    }
  }
);
  myAuthTypeComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        String item=e.getItem().toString();
        if (AUTH_PASSWORD.equals(item)) {
          ((CardLayout)myCardPanel.getLayout()).show(myCardPanel,AUTH_PASSWORD);
        }
 else         if (AUTH_TOKEN.equals(item)) {
          ((CardLayout)myCardPanel.getLayout()).show(myCardPanel,AUTH_TOKEN);
        }
        erasePassword();
      }
    }
  }
);
  reset();
}
