{
  final List<PsiReference> refs=new ArrayList<PsiReference>();
  int idx=0;
  int d;
  final String fileName=getName();
  while ((d=fileName.indexOf(".",idx)) > -1) {
    final int dotIdx=d;
    final PsiPackage aPackage=ApplicationManager.getApplication().runReadAction(new Computable<PsiPackage>(){
      @Override public PsiPackage compute(){
        return JavaPsiFacade.getInstance(getProject()).findPackage(fileName.substring(0,dotIdx));
      }
    }
);
    if (aPackage != null) {
      refs.add(new SPIFileName2PackageReference(this,aPackage));
    }
    idx=d + 1;
  }
  final PsiReference reference=getReference();
  PsiElement resolve=reference.resolve();
  while (resolve instanceof PsiClass) {
    resolve=((PsiClass)resolve).getContainingClass();
    if (resolve != null) {
      final PsiElement finalResolve=resolve;
      final String jvmClassName=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
        @Override public String compute(){
          return ClassUtil.getJVMClassName((PsiClass)finalResolve);
        }
      }
);
      if (jvmClassName != null) {
        refs.add(new SPIFileName2PackageReference(this,resolve));
      }
    }
  }
  refs.add(reference);
  return refs.toArray(new PsiReference[refs.size()]);
}
