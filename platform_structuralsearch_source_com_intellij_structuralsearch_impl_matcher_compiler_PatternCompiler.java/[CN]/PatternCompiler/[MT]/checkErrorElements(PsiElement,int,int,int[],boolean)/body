{
  final TIntArrayList errorOffsets=new TIntArrayList();
  final boolean[] containsErrorTail={false};
  final TIntHashSet varEndOffsetsSet=new TIntHashSet(varEndOffsets);
  element.accept(new PsiRecursiveElementWalkingVisitor(){
    @Override public void visitErrorElement(    PsiErrorElement element){
      super.visitErrorElement(element);
      final int startOffset=element.getTextRange().getStartOffset();
      if ((strict || !varEndOffsetsSet.contains(startOffset)) && startOffset != patternEndOffset) {
        errorOffsets.add(startOffset);
      }
      if (startOffset == offset) {
        containsErrorTail[0]=true;
      }
    }
  }
);
  for (int i=0; i < errorOffsets.size(); i++) {
    final int errorOffset=errorOffsets.get(i);
    if (errorOffset <= offset) {
      return true;
    }
  }
  return containsErrorTail[0] ? null : false;
}
