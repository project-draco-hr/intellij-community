{
  PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  StringBuilder builder=generateStream(tb.getLastOperation());
  if (tb.getSingleStatement() instanceof PsiReturnStatement) {
    PsiReturnStatement returnStatement=(PsiReturnStatement)tb.getSingleStatement();
    PsiExpression value=returnStatement.getReturnValue();
    if (ExpressionUtils.isLiteral(value,Boolean.TRUE) || ExpressionUtils.isLiteral(value,Boolean.FALSE)) {
      boolean foundResult=(boolean)((PsiLiteralExpression)value).getValue();
      PsiReturnStatement nextReturnStatement=StreamApiMigrationInspection.getNextReturnStatement(loopStatement);
      if (nextReturnStatement != null) {
        PsiExpression returnValue=nextReturnStatement.getReturnValue();
        if (returnValue == null)         return null;
        String methodName=foundResult ? "anyMatch" : "noneMatch";
        String streamText=addTerminalOperation(builder.toString(),methodName,loopStatement,tb);
        restoreComments(loopStatement,body);
        if (nextReturnStatement.getParent() == loopStatement.getParent()) {
          if (!ExpressionUtils.isLiteral(returnValue,!foundResult)) {
            streamText+=(foundResult ? "||" : "&&") + ParenthesesUtils.getText(returnValue,ParenthesesUtils.AND_PRECEDENCE);
          }
          removeLoop(loopStatement);
          return returnValue.replace(elementFactory.createExpressionFromText(streamText,nextReturnStatement));
        }
        PsiElement result=loopStatement.replace(elementFactory.createStatementFromText("return " + streamText + ";",loopStatement));
        if (!isReachable(nextReturnStatement)) {
          nextReturnStatement.delete();
        }
        return result;
      }
    }
  }
  PsiStatement[] statements=tb.getStatements();
  if (!(statements.length == 1 || (statements.length == 2 && ControlFlowUtils.statementBreaksLoop(statements[1],loopStatement)))) {
    return null;
  }
  restoreComments(loopStatement,body);
  String streamText=addTerminalOperation(builder.toString(),"anyMatch",loopStatement,tb);
  PsiStatement statement=statements[0];
  PsiAssignmentExpression assignment=ExpressionUtils.getAssignment(statement);
  if (assignment != null) {
    PsiExpression lValue=assignment.getLExpression();
    PsiExpression rValue=assignment.getRExpression();
    if ((lValue instanceof PsiReferenceExpression) && rValue != null) {
      PsiElement maybeVar=((PsiReferenceExpression)lValue).resolve();
      if (maybeVar instanceof PsiVariable) {
        PsiVariable var=(PsiVariable)maybeVar;
        PsiExpression initializer=var.getInitializer();
        InitializerUsageStatus status=StreamApiMigrationInspection.getInitializerUsageStatus(var,loopStatement);
        if (initializer != null && status != InitializerUsageStatus.UNKNOWN) {
          String replacement;
          if (ExpressionUtils.isLiteral(initializer,Boolean.FALSE) && ExpressionUtils.isLiteral(rValue,Boolean.TRUE)) {
            replacement=streamText;
          }
 else           if (ExpressionUtils.isLiteral(initializer,Boolean.TRUE) && ExpressionUtils.isLiteral(rValue,Boolean.FALSE)) {
            replacement="!" + streamText;
          }
 else {
            replacement=streamText + "?" + rValue.getText()+ ":"+ initializer.getText();
          }
          return replaceInitializer(loopStatement,var,initializer,replacement,status);
        }
      }
    }
  }
  String replacement="if(" + streamText + "){"+ statement.getText()+ "}";
  return loopStatement.replace(elementFactory.createStatementFromText(replacement,loopStatement));
}
