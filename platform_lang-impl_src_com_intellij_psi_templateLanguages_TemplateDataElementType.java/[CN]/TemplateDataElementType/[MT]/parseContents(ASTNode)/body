{
  final CharTable table=SharedImplUtil.findCharTableByTree(chameleon);
  final FileElement fileElement=TreeUtil.getFileElement((TreeElement)chameleon);
  final PsiFile file=(PsiFile)fileElement.getPsi();
  PsiFile originalFile=file.getOriginalFile();
  final TemplateLanguageFileViewProvider viewProvider=(TemplateLanguageFileViewProvider)originalFile.getViewProvider();
  final Language language=getTemplateFileLanguage(viewProvider);
  final CharSequence chars=chameleon.getChars();
  final PsiFile templateFile=createTemplateFile(file,language,chars,viewProvider);
  final FileElement parsed=((PsiFileImpl)templateFile).calcTreeElement();
  DebugUtil.startPsiModification("template language parsing");
  try {
    prepareParsedTemplateFile(parsed);
    Lexer langLexer=LanguageParserDefinitions.INSTANCE.forLanguage(language).createLexer(file.getProject());
    final Lexer lexer=new MergingLexerAdapter(new TemplateBlackAndWhiteLexer(createBaseLexer(viewProvider),langLexer,myTemplateElementType,myOuterElementType),TokenSet.create(myTemplateElementType,myOuterElementType));
    lexer.start(chars);
    insertOuters(parsed,lexer,table);
    TreeElement childNode=parsed.getFirstChildNode();
    DebugUtil.checkTreeStructure(parsed);
    DebugUtil.checkTreeStructure(chameleon);
    if (fileElement != chameleon) {
      DebugUtil.checkTreeStructure(file.getNode());
      DebugUtil.checkTreeStructure(originalFile.getNode());
    }
    return childNode;
  }
  finally {
    DebugUtil.finishPsiModification();
  }
}
