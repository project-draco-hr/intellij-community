{
  if (variable instanceof PsiResourceVariable && PsiUtil.isIgnoredName(variable.getName()))   return null;
  if (isImplicitUsage(myProject,variable,progress))   return null;
  if (!myRefCountHolder.isReferenced(variable)) {
    String message=JavaErrorMessages.message("local.variable.is.never.used",identifier.getText());
    HighlightInfo highlightInfo=createUnusedSymbolInfo(identifier,message,HighlightInfoType.UNUSED_SYMBOL);
    IntentionAction fix=variable instanceof PsiResourceVariable ? QuickFixFactory.getInstance().createRenameToIgnoredFix(variable) : QuickFixFactory.getInstance().createRemoveUnusedVariableFix(variable);
    QuickFixAction.registerQuickFixAction(highlightInfo,fix,myUnusedSymbolKey);
    return highlightInfo;
  }
  boolean referenced=myRefCountHolder.isReferencedForRead(variable);
  if (!referenced && !isImplicitRead(myProject,variable,progress)) {
    String message=JavaErrorMessages.message("local.variable.is.not.used.for.reading",identifier.getText());
    HighlightInfo highlightInfo=createUnusedSymbolInfo(identifier,message,HighlightInfoType.UNUSED_SYMBOL);
    QuickFixAction.registerQuickFixAction(highlightInfo,QuickFixFactory.getInstance().createRemoveUnusedVariableFix(variable),myUnusedSymbolKey);
    return highlightInfo;
  }
  if (!variable.hasInitializer()) {
    referenced=myRefCountHolder.isReferencedForWrite(variable);
    if (!referenced && !isImplicitWrite(myProject,variable,progress)) {
      String message=JavaErrorMessages.message("local.variable.is.not.assigned",identifier.getText());
      final HighlightInfo unusedSymbolInfo=createUnusedSymbolInfo(identifier,message,HighlightInfoType.UNUSED_SYMBOL);
      QuickFixAction.registerQuickFixAction(unusedSymbolInfo,new EmptyIntentionAction(UnusedSymbolLocalInspectionBase.DISPLAY_NAME),myUnusedSymbolKey);
      return unusedSymbolInfo;
    }
  }
  return null;
}
