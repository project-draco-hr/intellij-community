{
  PsiElement declarationScope=parameter.getDeclarationScope();
  if (declarationScope instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)declarationScope;
    if (PsiUtilCore.hasErrorElementChild(method))     return null;
    if ((method.isConstructor() || method.hasModifierProperty(PsiModifier.PRIVATE) || method.hasModifierProperty(PsiModifier.STATIC)|| !method.hasModifierProperty(PsiModifier.ABSTRACT) && myUnusedSymbolInspection.REPORT_PARAMETER_FOR_PUBLIC_METHODS && !isOverriddenOrOverrides(method)) && !method.hasModifierProperty(PsiModifier.NATIVE) && !JavaHighlightUtil.isSerializationRelatedMethod(method,method.getContainingClass())&& !PsiClassImplUtil.isMainOrPremainMethod(method)) {
      if (isInjected(project,method))       return null;
      HighlightInfo highlightInfo=checkUnusedParameter(parameter,identifier,progress);
      if (highlightInfo != null) {
        QuickFixFactory.getInstance().registerFixesForUnusedParameter(parameter,highlightInfo);
        return highlightInfo;
      }
    }
  }
 else   if (declarationScope instanceof PsiForeachStatement && !PsiUtil.isIgnoredName(parameter.getName())) {
    HighlightInfo highlightInfo=checkUnusedParameter(parameter,identifier,progress);
    if (highlightInfo != null) {
      QuickFixAction.registerQuickFixAction(highlightInfo,QuickFixFactory.getInstance().createRenameToIgnoredFix(parameter),myDeadCodeKey);
      return highlightInfo;
    }
  }
  return null;
}
