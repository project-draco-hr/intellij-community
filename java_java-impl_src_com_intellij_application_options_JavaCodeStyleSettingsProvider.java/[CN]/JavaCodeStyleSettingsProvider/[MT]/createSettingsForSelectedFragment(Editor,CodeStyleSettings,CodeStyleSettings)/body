{
  return new TabbedLanguageCodeStylePanel(getLanguage(),currentSettings,settings){
    @Override protected void initTabs(    CodeStyleSettings settings){
      MySpacesPanel spacesPanel=new MySpacesPanel(settings){
        private JPanel myPanel;
        @Override protected void somethingChanged(){
          reformatWithNewSettings();
        }
        @Override protected void init(){
          customizeSettings();
          initTables();
          myOptionsTree=createOptionsTree();
          myOptionsTree.setCellRenderer(new MyTreeCellRenderer());
          JBScrollPane pane=new JBScrollPane(myOptionsTree){
            @Override public Dimension getMinimumSize(){
              return super.getPreferredSize();
            }
          }
;
          myPanel=new JPanel(new BorderLayout());
          myPanel.add(pane);
        }
        @Override public JComponent getPanel(){
          return myPanel;
        }
      }
;
      MyWrappingAndBracesPanel bracesPanel=new MyWrappingAndBracesPanel(settings){
        public JPanel myPanel;
        @Override protected void init(){
          super.init();
          customizeSettings();
          initTables();
          myTreeTable=createOptionsTree(getSettings());
          JBScrollPane scrollPane=new JBScrollPane(myTreeTable){
            @Override public Dimension getMinimumSize(){
              return super.getPreferredSize();
            }
          }
;
          myPanel=new JPanel(new BorderLayout());
          myPanel.add(scrollPane);
          customizeSettings();
        }
        @Override public JComponent getPanel(){
          return myPanel;
        }
        @Override protected void somethingChanged(){
          reformatWithNewSettings();
        }
      }
;
      addTab(spacesPanel);
      addTab(bracesPanel);
      reset(getSettings());
    }
    private void reformatWithNewSettings(){
      final SelectionModel model=editor.getSelectionModel();
      if (model.hasSelection()) {
        try {
          apply(getSettings());
        }
 catch (        ConfigurationException e) {
          e.printStackTrace();
        }
        CodeStyleSettings clone=getSettings().clone();
        Project project=editor.getProject();
        if (project == null)         return;
        try {
          CodeStyleSettingsManager.getInstance(project).setTemporarySettings(clone);
          Document document=editor.getDocument();
          PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(document);
          if (file != null) {
            reformatSelectedFragment(model,file);
          }
        }
  finally {
          CodeStyleSettingsManager.getInstance(project).dropTemporarySettings();
        }
      }
    }
    private void reformatSelectedFragment(    final SelectionModel model,    final PsiFile file){
      final Project project=file.getProject();
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        @Override public void run(){
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            @Override public void run(){
              CodeStyleManager.getInstance(project).reformatText(file,model.getSelectionStart(),model.getSelectionEnd());
            }
          }
);
        }
      }
,"Reformat",null);
    }
  }
;
}
