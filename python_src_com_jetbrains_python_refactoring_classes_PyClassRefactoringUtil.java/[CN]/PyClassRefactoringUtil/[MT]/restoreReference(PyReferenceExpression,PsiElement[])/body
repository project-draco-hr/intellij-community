{
  try {
    PsiNamedElement target=node.getCopyableUserData(ENCODED_IMPORT);
    final String asName=node.getCopyableUserData(ENCODED_IMPORT_AS);
    final Boolean useFromImport=node.getCopyableUserData(ENCODED_USE_FROM_IMPORT);
    if (target instanceof PsiDirectory) {
      target=(PsiNamedElement)PyUtil.getPackageElement((PsiDirectory)target,node);
    }
    if (target instanceof PyFunction) {
      final PyFunction f=(PyFunction)target;
      final PyClass c=f.getContainingClass();
      if (c != null && c.findInitOrNew(false) == f) {
        target=c;
      }
    }
    if (target instanceof PyTargetExpression && PyNames.ALL.equals(target.getName())) {
      final PsiFile srcModule=target.getContainingFile();
      final PsiFile destModule=node.getContainingFile();
      final QualifiedName allModulePath=QualifiedNameFinder.findCanonicalImportPath(srcModule,node);
      final String importedName=node.getCopyableUserData(DYNAMIC_IMPORTED_NAME);
      if (allModulePath != null && importedName != null) {
        final AddImportHelper.ImportPriority priority=AddImportHelper.getImportPriority(destModule,srcModule);
        AddImportHelper.addOrUpdateFromImportStatement(destModule,allModulePath.toString(),importedName,asName,priority,null);
      }
      return;
    }
    if (target == null)     return;
    if (PsiTreeUtil.isAncestor(node.getContainingFile(),target,false))     return;
    if (ArrayUtil.contains(target,otherMovedElements))     return;
    if (target instanceof PyFile || target instanceof PsiDirectory) {
      insertImport(node,target,asName,useFromImport != null ? useFromImport : true);
    }
 else {
      insertImport(node,target,asName,true);
    }
  }
  finally {
    node.putCopyableUserData(ENCODED_IMPORT,null);
    node.putCopyableUserData(ENCODED_IMPORT_AS,null);
    node.putCopyableUserData(ENCODED_USE_FROM_IMPORT,null);
    node.putCopyableUserData(DYNAMIC_IMPORTED_NAME,null);
  }
}
