{
  return evaluateContext.evaluate(expression).then(new AsyncFunction<EvaluateResult,String>(){
    @NotNull @Override public Promise<String> fun(    EvaluateResult result){
      final Value value=result.value;
      if (value == null) {
        return Promise.resolve("Log expression result doesn't have value");
      }
 else {
        if (value instanceof StringValue && ((StringValue)value).isTruncated()) {
          return ((StringValue)value).getFullString();
        }
 else {
          return Promise.resolve(value.getValueString());
        }
      }
    }
  }
);
}
