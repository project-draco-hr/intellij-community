{
  final AsyncResult<String> result=new AsyncResult<String>();
  evaluateContext.evaluate(expression).doWhenDone(new Consumer<Value>(){
    @Override public void consume(    final Value value){
      if (value == null) {
        result.setDone("Log expression result doesn't have value");
      }
 else {
        if (value instanceof StringValue && ((StringValue)value).isTruncated()) {
          ((StringValue)value).reloadHeavyValue().doWhenDone(new Runnable(){
            @Override public void run(){
              result.setDone(value.getValueString());
            }
          }
).doWhenRejected(new Runnable(){
            @Override public void run(){
              result.setRejected(formatErrorMessage("whole expression result can not be loaded"));
            }
          }
);
        }
 else {
          result.setDone(value.getValueString());
        }
      }
    }
  }
).doWhenRejected(new PairConsumer<Value,String>(){
    @Override public void consume(    Value value,    String error){
      if (value == null) {
        result.setRejected(formatErrorMessage(error));
      }
 else {
        result.setRejected(formatErrorMessage(value.getValueString()));
      }
    }
  }
);
  return result;
}
