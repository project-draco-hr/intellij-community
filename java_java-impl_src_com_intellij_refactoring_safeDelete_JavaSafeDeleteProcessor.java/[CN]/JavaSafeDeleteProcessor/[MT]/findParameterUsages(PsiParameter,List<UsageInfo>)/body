{
  final PsiMethod method=(PsiMethod)parameter.getDeclarationScope();
  final int parameterIndex=method.getParameterList().getParameterIndex(parameter);
  ReferencesSearch.search(method).forEach(new Processor<PsiReference>(){
    public boolean process(    final PsiReference reference){
      PsiElement element=reference.getElement();
      if (element != null) {
        JavaSafeDeleteDelegate.EP.forLanguage(element.getLanguage()).createUsageInfoForParameter(reference,usages,parameter,method);
        if (!parameter.isVarArgs()) {
          final PsiParameter paramInCaller=SafeDeleteJavaCallerChooser.isTheOnlyOneParameterUsage(element.getParent(),parameterIndex,method);
          if (paramInCaller != null) {
            if (ApplicationManager.getApplication().isUnitTestMode()) {
              usages.add(new SafeDeleteParameterCallHierarchyUsageInfo((PsiMethod)paramInCaller.getDeclarationScope(),paramInCaller));
            }
 else {
              usages.add(new SafeDeleteParameterCallHierarchyUsageInfo(method,parameter));
            }
          }
        }
      }
      return true;
    }
  }
);
  ReferencesSearch.search(parameter).forEach(new Processor<PsiReference>(){
    public boolean process(    final PsiReference reference){
      PsiElement element=reference.getElement();
      final PsiDocTag docTag=PsiTreeUtil.getParentOfType(element,PsiDocTag.class);
      if (docTag != null) {
        usages.add(new SafeDeleteReferenceJavaDeleteUsageInfo(docTag,parameter,true));
        return true;
      }
      boolean isSafeDelete=false;
      if (element.getParent().getParent() instanceof PsiMethodCallExpression) {
        PsiMethodCallExpression call=(PsiMethodCallExpression)element.getParent().getParent();
        PsiReferenceExpression methodExpression=call.getMethodExpression();
        if (methodExpression.getText().equals(PsiKeyword.SUPER)) {
          isSafeDelete=true;
        }
 else         if (methodExpression.getQualifierExpression() instanceof PsiSuperExpression) {
          final PsiMethod superMethod=call.resolveMethod();
          if (superMethod != null && MethodSignatureUtil.isSuperMethod(superMethod,method)) {
            isSafeDelete=true;
          }
        }
      }
      usages.add(new SafeDeleteReferenceJavaDeleteUsageInfo(element,parameter,isSafeDelete));
      return true;
    }
  }
);
  findFunctionalExpressions(usages,method);
}
