{
  for (  PsiMethod method : methods) {
    final PsiClass containingClass=method.getContainingClass();
    if (LambdaUtil.getFunctionalInterfaceMethod(containingClass) == method) {
      FunctionalExpressionSearch.search(containingClass).forEach(new Processor<PsiFunctionalExpression>(){
        @Override public boolean process(        PsiFunctionalExpression expression){
          usages.add(new SafeDeleteFunctionalExpressionUsageInfo(expression,containingClass));
          return true;
        }
      }
);
    }
  }
}
