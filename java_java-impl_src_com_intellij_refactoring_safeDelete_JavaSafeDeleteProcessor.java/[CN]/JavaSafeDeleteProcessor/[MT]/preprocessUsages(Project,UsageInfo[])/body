{
  final ArrayList<UsageInfo> result=new ArrayList<UsageInfo>();
  final ArrayList<UsageInfo> overridingMethods=new ArrayList<UsageInfo>();
  final ArrayList<SafeDeleteParameterCallHierarchyUsageInfo> delegatingParams=new ArrayList<SafeDeleteParameterCallHierarchyUsageInfo>();
  for (  UsageInfo usage : usages) {
    if (usage.isNonCodeUsage) {
      result.add(usage);
    }
 else     if (usage instanceof SafeDeleteOverridingMethodUsageInfo) {
      overridingMethods.add(usage);
    }
 else     if (usage instanceof SafeDeleteParameterCallHierarchyUsageInfo) {
      delegatingParams.add((SafeDeleteParameterCallHierarchyUsageInfo)usage);
    }
 else {
      result.add(usage);
    }
  }
  if (!overridingMethods.isEmpty()) {
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      result.addAll(overridingMethods);
    }
 else {
      OverridingMethodsDialog dialog=new OverridingMethodsDialog(project,overridingMethods);
      if (!dialog.showAndGet()) {
        return null;
      }
      result.addAll(dialog.getSelected());
    }
  }
  if (delegatingParams.size() == 1) {
    final SafeDeleteParameterCallHierarchyUsageInfo parameterHierarchyUsageInfo=(SafeDeleteParameterCallHierarchyUsageInfo)delegatingParams.get(0);
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      result.addAll(delegatingParams);
    }
 else {
      final PsiMethod method=parameterHierarchyUsageInfo.getCalledMethod();
      final PsiParameter parameter=parameterHierarchyUsageInfo.getReferencedElement();
      final int parameterIndex=method.getParameterList().getParameterIndex(parameter);
      final JavaCallerChooser chooser=new SafeDeleteJavaCallerChooser(method,project,result){
        @Override protected ArrayList<SafeDeleteParameterCallHierarchyUsageInfo> getTopLevelItems(){
          return delegatingParams;
        }
        @Override protected int getParameterIdx(){
          return parameterIndex;
        }
      }
;
      TreeUtil.expand(chooser.getTree(),2);
      if (!chooser.showAndGet()) {
        return null;
      }
    }
  }
  return result.toArray(new UsageInfo[result.size()]);
}
