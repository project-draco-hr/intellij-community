{
  final TreeTraversal original=this;
  return new TreeTraversal(debugName + " (UNIQUE)"){
    @NotNull @Override public TreeTraversal unique(    @NotNull Function<?,?> identity){
      return original.unique(identity);
    }
    @NotNull @Override public <T>It<T> createIterator(    @NotNull Iterable<? extends T> roots,    @NotNull final Function<T,? extends Iterable<? extends T>> tree){
class WrappedTree implements Condition<T>, Function<T,Iterable<? extends T>> {
        HashSet<Object> visited;
        @Override public boolean value(        T e){
          if (visited == null)           visited=new HashSet<Object>();
          return visited.add(((Function<T,Object>)identity).fun(e));
        }
        @Override public Iterable<? extends T> fun(        T t){
          return JBIterable.from(tree.fun(t)).filter(this);
        }
      }
      WrappedTree wrappedTree=new WrappedTree();
      return original.createIterator(JBIterable.from(roots).filter(wrappedTree),wrappedTree);
    }
  }
;
}
