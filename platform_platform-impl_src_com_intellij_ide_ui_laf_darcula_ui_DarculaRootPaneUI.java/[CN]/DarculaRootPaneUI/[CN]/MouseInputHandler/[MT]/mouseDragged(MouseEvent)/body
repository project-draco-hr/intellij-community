{
  Window w=(Window)ev.getSource();
  Point pt=ev.getPoint();
  if (isMovingWindow) {
    Point windowPt;
    try {
      windowPt=(Point)AccessController.doPrivileged(getLocationAction);
      windowPt.x-=dragOffsetX;
      windowPt.y-=dragOffsetY;
      w.setLocation(windowPt);
    }
 catch (    PrivilegedActionException e) {
    }
  }
 else   if (dragCursor != 0) {
    Rectangle r=w.getBounds();
    Rectangle startBounds=new Rectangle(r);
    Dimension min=w.getMinimumSize();
switch (dragCursor) {
case Cursor.E_RESIZE_CURSOR:
      adjust(r,min,0,0,pt.x + (dragWidth - dragOffsetX) - r.width,0);
    break;
case Cursor.S_RESIZE_CURSOR:
  adjust(r,min,0,0,0,pt.y + (dragHeight - dragOffsetY) - r.height);
break;
case Cursor.N_RESIZE_CURSOR:
adjust(r,min,0,pt.y - dragOffsetY,0,-(pt.y - dragOffsetY));
break;
case Cursor.W_RESIZE_CURSOR:
adjust(r,min,pt.x - dragOffsetX,0,-(pt.x - dragOffsetX),0);
break;
case Cursor.NE_RESIZE_CURSOR:
adjust(r,min,0,pt.y - dragOffsetY,pt.x + (dragWidth - dragOffsetX) - r.width,-(pt.y - dragOffsetY));
break;
case Cursor.SE_RESIZE_CURSOR:
adjust(r,min,0,0,pt.x + (dragWidth - dragOffsetX) - r.width,pt.y + (dragHeight - dragOffsetY) - r.height);
break;
case Cursor.NW_RESIZE_CURSOR:
adjust(r,min,pt.x - dragOffsetX,pt.y - dragOffsetY,-(pt.x - dragOffsetX),-(pt.y - dragOffsetY));
break;
case Cursor.SW_RESIZE_CURSOR:
adjust(r,min,pt.x - dragOffsetX,0,-(pt.x - dragOffsetX),pt.y + (dragHeight - dragOffsetY) - r.height);
break;
default :
break;
}
if (!r.equals(startBounds)) {
w.setBounds(r);
if (Toolkit.getDefaultToolkit().isDynamicLayoutActive()) {
w.validate();
getRootPane().repaint();
}
}
}
}
