{
  String stubName=def.myName;
  int name=stubName == null ? 0 : nameEnvironment.simpleName(stubName,true);
  ArrayList<QualifiedName> superList=new ArrayList<QualifiedName>();
  for (  String aSuper : def.mySupers) {
    superList.add(id(nameEnvironment,aSuper));
  }
  if ((def.myMods & IndexTree.ENUM) != 0) {
    superList.add(nameEnvironment.java_lang_Enum);
  }
  ArrayList<Declaration> innerDefList=new ArrayList<Declaration>();
  for (  IndexTree.Decl decl : def.myDecls) {
    Declaration hTree=processMember(nameEnvironment,fileId,decl);
    if (hTree != null) {
      innerDefList.add(hTree);
    }
  }
  ClassAnchor.StubClassAnchor anchor=new ClassAnchor.StubClassAnchor(fileId,def.myStubId);
  QualifiedName[] supers=superList.isEmpty() ? QualifiedName.EMPTY_ARRAY : superList.toArray(new QualifiedName[superList.size()]);
  Declaration[] innerDefs=innerDefList.isEmpty() ? Declaration.EMPTY_ARRAY : innerDefList.toArray(new Declaration[innerDefList.size()]);
  return new ClassDeclaration(anchor,def.myMods,name,supers,innerDefs);
}
