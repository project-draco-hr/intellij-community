{
  int name=def.myName;
  ArrayList<QualifiedName> superList=new ArrayList<QualifiedName>();
  for (  int[] aSuper : def.mySupers) {
    superList.add(nameEnvironment.concat(aSuper,true));
  }
  if (BitUtil.isSet(def.myMods,IndexTree.ENUM)) {
    superList.add(nameEnvironment.java_lang_Enum);
  }
  ArrayList<Declaration> innerDefList=new ArrayList<Declaration>();
  for (  IndexTree.Decl decl : def.myDecls) {
    Declaration hTree=processMember(nameEnvironment,fileId,decl);
    if (hTree != null) {
      innerDefList.add(hTree);
    }
  }
  ClassAnchor anchor=new ClassAnchor(fileId,def.myStubId);
  QualifiedName[] supers=superList.isEmpty() ? QualifiedName.EMPTY_ARRAY : superList.toArray(new QualifiedName[superList.size()]);
  Declaration[] innerDefs=innerDefList.isEmpty() ? Declaration.EMPTY_ARRAY : innerDefList.toArray(new Declaration[innerDefList.size()]);
  return new ClassDeclaration(anchor,def.myMods,name,supers,innerDefs);
}
