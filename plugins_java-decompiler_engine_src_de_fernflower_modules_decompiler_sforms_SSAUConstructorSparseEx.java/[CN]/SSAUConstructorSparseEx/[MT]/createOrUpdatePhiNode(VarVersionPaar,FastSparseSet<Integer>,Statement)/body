{
  FastSparseSet<Integer> versCopy=vers.getCopy();
  HashSet<Integer> phiVers=new HashSet<Integer>();
  VarVersionNode phinode=ssuversions.nodes.getWithKey(phivar);
  List<VarVersionEdge> lstPreds=new ArrayList<VarVersionEdge>(phinode.preds);
  if (lstPreds.size() == 1) {
    VarVersionEdge edge=lstPreds.get(0);
    edge.source.removeSuccessor(edge);
    phinode.removePredecessor(edge);
  }
 else {
    for (    VarVersionEdge edge : lstPreds) {
      int verssrc=edge.source.preds.iterator().next().source.version;
      if (!vers.contains(verssrc)) {
        edge.source.removeSuccessor(edge);
        phinode.removePredecessor(edge);
      }
 else {
        versCopy.remove(verssrc);
        phiVers.add(verssrc);
      }
    }
  }
  List<VarVersionNode> colnodes=new ArrayList<VarVersionNode>();
  List<VarVersionPaar> colpaars=new ArrayList<VarVersionPaar>();
  for (  Integer ver : versCopy) {
    VarVersionNode prenode=ssuversions.nodes.getWithKey(new VarVersionPaar(phivar.var,ver.intValue()));
    Integer tempver=getNextFreeVersion(phivar.var,stat);
    VarVersionNode tempnode=new VarVersionNode(phivar.var,tempver.intValue());
    colnodes.add(tempnode);
    colpaars.add(new VarVersionPaar(phivar.var,tempver.intValue()));
    VarVersionEdge edge=new VarVersionEdge(VarVersionEdge.EDGE_GENERAL,prenode,tempnode);
    prenode.addSuccessor(edge);
    tempnode.addPredecessor(edge);
    edge=new VarVersionEdge(VarVersionEdge.EDGE_GENERAL,tempnode,phinode);
    tempnode.addSuccessor(edge);
    phinode.addPredecessor(edge);
    phiVers.add(tempver);
  }
  ssuversions.addNodes(colnodes,colpaars);
  phi.put(phivar,phiVers);
}
