{
  final MethodJavaDocHelper javaDocHelper=new MethodJavaDocHelper(myMember);
  PsiParameterList paramList=myMember.getParameterList();
  PsiElement addParameterAfter=null;
  PsiDocTag anchor=null;
  List<PsiType> addedTypes=new ArrayList<PsiType>();
  final PsiClass containingClass=myMember.getContainingClass();
  LOG.assertTrue(containingClass != null);
  if (mySettings.isDelegate()) {
    List<ParameterInfoImpl> params=new ArrayList<ParameterInfoImpl>();
    PsiParameter[] parameters=myMember.getParameterList().getParameters();
    if (mySettings.isMakeClassParameter()) {
      params.add(new ParameterInfoImpl(-1,mySettings.getClassParameterName(),factory.createType(containingClass,PsiSubstitutor.EMPTY),"this"));
    }
    if (mySettings.isMakeFieldParameters()) {
      for (      Settings.FieldParameter parameter : mySettings.getParameterOrderList()) {
        params.add(new ParameterInfoImpl(-1,mySettings.getClassParameterName(),parameter.type,parameter.field.getName()));
      }
    }
    for (int i=0; i < parameters.length; i++) {
      params.add(new ParameterInfoImpl(i));
    }
    final PsiType returnType=myMember.getReturnType();
    LOG.assertTrue(returnType != null);
    JavaChangeSignatureUsageProcessor.generateDelegate(new JavaChangeInfoImpl(VisibilityUtil.getVisibilityModifier(myMember.getModifierList()),myMember,myMember.getName(),CanonicalTypes.createTypeWrapper(returnType),params.toArray(new ParameterInfoImpl[params.size()]),new ThrownExceptionInfo[0],false,Collections.<PsiMethod>emptySet(),Collections.<PsiMethod>emptySet()));
  }
  if (mySettings.isMakeClassParameter()) {
    PsiType parameterType=factory.createType(containingClass,PsiSubstitutor.EMPTY);
    addedTypes.add(parameterType);
    final String classParameterName=mySettings.getClassParameterName();
    PsiParameter parameter=factory.createParameter(classParameterName,parameterType);
    if (makeClassParameterFinal(usages)) {
      PsiUtil.setModifierProperty(parameter,PsiModifier.FINAL,true);
    }
    addParameterAfter=paramList.addAfter(parameter,null);
    anchor=javaDocHelper.addParameterAfter(classParameterName,anchor);
  }
  if (mySettings.isMakeFieldParameters()) {
    List<Settings.FieldParameter> parameters=mySettings.getParameterOrderList();
    for (    Settings.FieldParameter fieldParameter : parameters) {
      final PsiType fieldParameterType=fieldParameter.field.getType();
      final PsiParameter parameter=factory.createParameter(fieldParameter.name,fieldParameterType);
      addedTypes.add(fieldParameterType);
      if (makeFieldParameterFinal(fieldParameter.field,usages)) {
        PsiUtil.setModifierProperty(parameter,PsiModifier.FINAL,true);
      }
      addParameterAfter=paramList.addAfter(parameter,addParameterAfter);
      anchor=javaDocHelper.addParameterAfter(fieldParameter.name,anchor);
    }
  }
  makeStatic(myMember);
  if (myAdditionalMethods != null) {
    for (    PsiMethod method : myAdditionalMethods) {
      makeStatic(method);
    }
  }
}
