{
  JsonObject courseObject=json.getAsJsonObject();
  JsonArray lessons=courseObject.getAsJsonArray(LESSONS);
  for (int lessonIndex=1; lessonIndex <= lessons.size(); lessonIndex++) {
    JsonObject lessonObject=lessons.get(lessonIndex - 1).getAsJsonObject();
    JsonArray tasks=lessonObject.getAsJsonArray(TASK_LIST);
    for (int taskIndex=1; taskIndex <= tasks.size(); taskIndex++) {
      JsonObject taskObject=tasks.get(taskIndex - 1).getAsJsonObject();
      for (      Map.Entry<String,JsonElement> taskFile : taskObject.getAsJsonObject(TASK_FILES).entrySet()) {
        String name=taskFile.getKey();
        String filePath=FileUtil.join(myCourseFile.getParent(),EduNames.LESSON + lessonIndex,EduNames.TASK + taskIndex,name);
        VirtualFile resourceFile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(new File(filePath));
        if (resourceFile == null) {
          continue;
        }
        Document document=FileDocumentManager.getInstance().getDocument(resourceFile);
        if (document == null) {
          continue;
        }
        JsonObject taskFileObject=taskFile.getValue().getAsJsonObject();
        JsonArray placeholders=taskFileObject.getAsJsonArray(PLACEHOLDERS);
        for (        JsonElement placeholder : placeholders) {
          JsonObject placeholderObject=placeholder.getAsJsonObject();
          if (placeholderObject.getAsJsonPrimitive(OFFSET) != null) {
            break;
          }
          int line=placeholderObject.getAsJsonPrimitive(LINE).getAsInt();
          int start=placeholderObject.getAsJsonPrimitive(START).getAsInt();
          int offset=document.getLineStartOffset(line) + start;
          placeholderObject.addProperty(OFFSET,offset);
        }
      }
    }
  }
  return new GsonBuilder().create().fromJson(json,Course.class);
}
