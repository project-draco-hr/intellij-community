{
  Element taskManagerElement=state.getChild(MAIN_ELEMENT);
  XMLOutputter outputter=new XMLOutputter();
  Map<String,String> placeholderTextToStatus=fillStatusMap(taskManagerElement,STUDY_STATUS_MAP,outputter);
  Map<String,String> taskFileToStatusMap=fillStatusMap(taskManagerElement,TASK_STATUS_MAP,outputter);
  Element courseElement=getChildWithName(taskManagerElement,COURSE).getChild(COURSE_TITLED);
  for (  Element lesson : getChildList(courseElement,LESSONS)) {
    int lessonIndex=getAsInt(lesson,INDEX);
    for (    Element task : getChildList(lesson,TASK_LIST)) {
      String taskStatus=null;
      int taskIndex=getAsInt(task,INDEX);
      Map<String,Element> taskFiles=getChildMap(task,TASK_FILES);
      for (      Map.Entry<String,Element> entry : taskFiles.entrySet()) {
        Element taskFileElement=entry.getValue();
        String taskFileText=outputter.outputString(taskFileElement);
        String taskFileStatus=taskFileToStatusMap.get(taskFileText);
        if (taskFileStatus != null && (taskStatus == null || taskFileStatus.equals(StudyStatus.Failed.toString()))) {
          taskStatus=taskFileStatus;
        }
        Document document=StudyUtils.getDocument(project.getBasePath(),lessonIndex,taskIndex,entry.getKey());
        if (document == null) {
          continue;
        }
        for (        Element placeholder : getChildList(taskFileElement,ANSWER_PLACEHOLDERS)) {
          taskStatus=addStatus(outputter,placeholderTextToStatus,taskStatus,placeholder);
          addOffset(document,placeholder);
          addInitialState(document,placeholder);
          addHints(placeholder);
        }
      }
      if (taskStatus != null) {
        addChildWithName(task,STATUS,taskStatus);
      }
    }
  }
  return state;
}
