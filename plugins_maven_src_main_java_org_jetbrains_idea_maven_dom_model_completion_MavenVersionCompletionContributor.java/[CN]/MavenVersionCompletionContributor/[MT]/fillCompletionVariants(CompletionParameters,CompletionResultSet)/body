{
  if (parameters.getCompletionType() != CompletionType.BASIC)   return;
  PsiElement element=parameters.getPosition();
  PsiElement xmlText=element.getParent();
  if (!(xmlText instanceof XmlText))   return;
  PsiElement tagElement=xmlText.getParent();
  if (!(tagElement instanceof XmlTag))   return;
  XmlTag tag=(XmlTag)tagElement;
  Project project=element.getProject();
  DomElement domElement=DomManager.getDomManager(project).getDomElement(tag);
  if (!(domElement instanceof GenericDomValue))   return;
  DomElement parent=domElement.getParent();
  if (parent instanceof MavenDomArtifactCoordinates && ((GenericDomValue)domElement).getConverter() instanceof MavenArtifactCoordinatesVersionConverter) {
    MavenDomArtifactCoordinates coordinates=(MavenDomArtifactCoordinates)parent;
    String groupId=coordinates.getGroupId().getStringValue();
    String artifactId=coordinates.getArtifactId().getStringValue();
    if (StringUtil.isEmptyOrSpaces(artifactId))     return;
    CompletionResultSet newResultSet=result.withRelevanceSorter(CompletionService.getCompletionService().emptySorter().weigh(new LookupElementWeigher("mavenVersionWeigher"){
      @Nullable @Override public Comparable weigh(      @NotNull LookupElement element){
        return new NegatingComparable(new MavenVersionComparable(element.getLookupString()));
      }
    }
));
    MavenProjectIndicesManager indicesManager=MavenProjectIndicesManager.getInstance(project);
    Set<String> versions;
    if (StringUtil.isEmptyOrSpaces(groupId)) {
      if (!(coordinates instanceof MavenDomPlugin))       return;
      versions=indicesManager.getVersions(MavenArtifactUtil.DEFAULT_GROUPS[0],artifactId);
      for (int i=0; i < MavenArtifactUtil.DEFAULT_GROUPS.length; i++) {
        versions=Sets.union(versions,indicesManager.getVersions(MavenArtifactUtil.DEFAULT_GROUPS[i],artifactId));
      }
    }
 else {
      versions=indicesManager.getVersions(groupId,artifactId);
    }
    for (    String version : versions) {
      newResultSet.addElement(LookupElementBuilder.create(version));
    }
    newResultSet.addElement(LookupElementBuilder.create(RepositoryUtils.ReleaseVersionId));
    newResultSet.addElement(LookupElementBuilder.create(RepositoryUtils.LatestVersionId));
  }
}
