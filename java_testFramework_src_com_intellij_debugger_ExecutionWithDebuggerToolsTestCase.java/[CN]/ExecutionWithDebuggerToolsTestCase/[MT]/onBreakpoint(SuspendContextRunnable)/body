{
  if (myPauseScriptListener == null) {
    final DebugProcessImpl debugProcess=getDebugProcess();
    assertTrue("Debug process was not started",debugProcess != null);
    myPauseScriptListener=new DelayedEventsProcessListener(new DebugProcessAdapterImpl(){
      @Override public void paused(      SuspendContextImpl suspendContext){
        try {
          if (myScriptRunnables.isEmpty()) {
            print("resuming ",ProcessOutputTypes.SYSTEM);
            printContext(suspendContext);
            resume(suspendContext);
            return;
          }
          SuspendContextRunnable suspendContextRunnable=myScriptRunnables.remove(0);
          suspendContextRunnable.run(suspendContext);
        }
 catch (        Exception e) {
          addException(e);
          error(e);
        }
catch (        AssertionError e) {
          addException(e);
        }
        if (myScriptRunnables.isEmpty()) {
          myScriptRunnablesSema.up();
        }
      }
      @Override public void resumed(      SuspendContextImpl suspendContext){
        final SuspendContextImpl pausedContext=debugProcess.getSuspendManager().getPausedContext();
        if (pausedContext != null) {
          debugProcess.getManagerThread().schedule(new SuspendContextCommandImpl(pausedContext){
            @Override public void contextAction() throws Exception {
              paused(pausedContext);
            }
          }
);
        }
      }
    }
);
    debugProcess.addDebugProcessListener(myPauseScriptListener);
  }
  myScriptRunnables.add(runnable);
}
