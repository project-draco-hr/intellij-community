{
  final Set<PsiTypeVariable> nodes=new HashSet<PsiTypeVariable>();
  final Set<Constraint> candidates=new HashSet<Constraint>();
  final Map<PsiTypeVariable,Set<PsiTypeVariable>> ins=new HashMap<PsiTypeVariable,Set<PsiTypeVariable>>();
  final Map<PsiTypeVariable,Set<PsiTypeVariable>> outs=new HashMap<PsiTypeVariable,Set<PsiTypeVariable>>();
  for (  final Constraint constraint : myConstraints) {
    final PsiType left=constraint.getLeft();
    final PsiType right=constraint.getRight();
    if (left instanceof PsiTypeVariable && right instanceof PsiTypeVariable) {
      final PsiTypeVariable leftVar=(PsiTypeVariable)left;
      final PsiTypeVariable rightVar=(PsiTypeVariable)right;
      candidates.add(constraint);
      nodes.add(leftVar);
      nodes.add(rightVar);
      Set<PsiTypeVariable> in=ins.get(leftVar);
      Set<PsiTypeVariable> out=outs.get(rightVar);
      if (in == null) {
        final Set<PsiTypeVariable> newIn=new HashSet<PsiTypeVariable>();
        newIn.add(rightVar);
        ins.put(leftVar,newIn);
      }
 else {
        in.add(rightVar);
      }
      if (out == null) {
        final Set<PsiTypeVariable> newOut=new HashSet<PsiTypeVariable>();
        newOut.add(leftVar);
        outs.put(rightVar,newOut);
      }
 else {
        out.add(leftVar);
      }
    }
  }
  final DFSTBuilder<PsiTypeVariable> dfstBuilder=new DFSTBuilder<PsiTypeVariable>(new Graph<PsiTypeVariable>(){
    @Override public Collection<PsiTypeVariable> getNodes(){
      return nodes;
    }
    @Override public Iterator<PsiTypeVariable> getIn(    final PsiTypeVariable n){
      final Set<PsiTypeVariable> in=ins.get(n);
      if (in == null) {
        return EmptyIterator.getInstance();
      }
      return in.iterator();
    }
    @Override public Iterator<PsiTypeVariable> getOut(    final PsiTypeVariable n){
      final Set<PsiTypeVariable> out=outs.get(n);
      if (out == null) {
        return EmptyIterator.getInstance();
      }
      return out.iterator();
    }
  }
);
  final TIntArrayList sccs=dfstBuilder.getSCCs();
  final Map<PsiTypeVariable,Integer> index=new HashMap<PsiTypeVariable,Integer>();
  sccs.forEach(new TIntProcedure(){
    int myTNumber;
    @Override public boolean execute(    int size){
      for (int j=0; j < size; j++) {
        index.put(dfstBuilder.getNodeByTNumber(myTNumber + j),myTNumber);
      }
      myTNumber+=size;
      return true;
    }
  }
);
  for (  final Constraint constraint : candidates) {
    if (index.get(constraint.getLeft()).equals(index.get(constraint.getRight()))) {
      myConstraints.remove(constraint);
    }
  }
  Binding binding=myBindingFactory.create();
  for (  final PsiTypeVariable fromVar : index.keySet()) {
    final PsiTypeVariable toVar=dfstBuilder.getNodeByNNumber(index.get(fromVar).intValue());
    if (!fromVar.equals(toVar)) {
      binding=binding.compose(myBindingFactory.create(fromVar,toVar));
      if (binding == null) {
        break;
      }
    }
  }
  if (binding != null && binding.nonEmpty()) {
    myCurrentBinding=myCurrentBinding.compose(binding);
    myConstraints=apply(binding);
  }
}
