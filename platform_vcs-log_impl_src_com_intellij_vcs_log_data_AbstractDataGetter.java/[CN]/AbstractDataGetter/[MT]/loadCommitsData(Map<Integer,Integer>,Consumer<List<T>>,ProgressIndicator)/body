{
  final List<T> result=ContainerUtil.newArrayList();
  final Set<Integer> toLoad=ContainerUtil.newHashSet();
  long taskNumber=myCurrentTaskIndex++;
  for (  Integer id : commits.keySet()) {
    T details=getFromCache(id);
    if (details == null || details instanceof LoadingDetails) {
      toLoad.add(id);
      cacheCommit(id,taskNumber);
    }
 else {
      result.add(details);
    }
  }
  if (toLoad.isEmpty()) {
    sortCommitsByRow(result,commits);
    consumer.consume(result);
  }
 else {
    Task.Backgroundable task=new Task.Backgroundable(null,"Loading Selected Details",true,PerformInBackgroundOption.ALWAYS_BACKGROUND){
      @Override public void run(      @NotNull final ProgressIndicator indicator){
        indicator.checkCanceled();
        try {
          result.addAll(preLoadCommitData(toLoad));
          sortCommitsByRow(result,commits);
          notifyLoaded();
        }
 catch (        VcsException e) {
          LOG.error(e);
        }
      }
      @Override public void onSuccess(){
        consumer.consume(result);
      }
    }
;
    if (indicator != null) {
      ProgressManager.getInstance().runProcessWithProgressAsynchronously(task,indicator);
    }
 else {
      ProgressManager.getInstance().run(task);
    }
  }
}
