{
  if (options.isIncludeInherited) {
    final PsiMethod[] methods=ApplicationManager.getApplication().runReadAction(new Computable<PsiMethod[]>(){
      @Override public PsiMethod[] compute(){
        return aClass.getAllMethods();
      }
    }
);
    for (int i=0; i < methods.length; i++) {
      final PsiMethod method=methods[i];
      final int finalI=i;
      final PsiClass methodClass=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>(){
        @Override public PsiClass compute(){
          MethodSignature methodSignature=method.getSignature(PsiSubstitutor.EMPTY);
          for (int j=0; j < finalI; j++) {
            if (methodSignature.equals(methods[j].getSignature(PsiSubstitutor.EMPTY)))             return null;
          }
          return method.getContainingClass();
        }
      }
);
      if (methodClass == null)       continue;
      if (manager.areElementsEquivalent(methodClass,aClass)) {
        if (!addElementUsages(method,processor,options))         return false;
      }
 else {
        MethodReferencesSearch.SearchParameters parameters=new MethodReferencesSearch.SearchParameters(method,options.searchScope,true,options.fastTrack);
        boolean success=MethodReferencesSearch.search(parameters).forEach(new PsiReferenceProcessorAdapter(new PsiReferenceProcessor(){
          @Override public boolean execute(          PsiReference reference){
            addResultFromReference(reference,methodClass,manager,aClass,processor,options);
            return true;
          }
        }
));
        if (!success)         return false;
      }
    }
  }
 else {
    PsiMethod[] methods=ApplicationManager.getApplication().runReadAction(new Computable<PsiMethod[]>(){
      @Override public PsiMethod[] compute(){
        return aClass.getMethods();
      }
    }
);
    for (    PsiMethod method : methods) {
      if (!addElementUsages(method,processor,options))       return false;
    }
  }
  return true;
}
