{
  final RunContentDescriptor res=super.createContentDescriptor(state,environment);
  final ServerSocket socket=((JavaTestFrameworkRunnableState)state).getForkSocket();
  if (socket != null) {
    Thread thread=new Thread(){
      @Override public void run(){
        try {
          final Socket accept=socket.accept();
          try {
            DataInputStream stream=new DataInputStream(accept.getInputStream());
            try {
              int read=stream.readInt();
              while (read != -1) {
                final DebugProcess process=DebuggerManager.getInstance(environment.getProject()).getDebugProcess(res.getProcessHandler());
                if (process == null)                 break;
                final RemoteConnection connection=new RemoteConnection(true,"127.0.0.1",String.valueOf(read),true);
                final DebugEnvironment env=new DefaultDebugEnvironment(environment,state,connection,true);
                SwingUtilities.invokeLater(new Runnable(){
                  @Override public void run(){
                    try {
                      ((DebugProcessImpl)process).reattach(env);
                      accept.getOutputStream().write(0);
                    }
 catch (                    Exception e) {
                      e.printStackTrace();
                    }
                  }
                }
);
                read=stream.readInt();
              }
            }
  finally {
              stream.close();
            }
          }
  finally {
            accept.close();
          }
        }
 catch (        EOFException ignored) {
        }
catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
;
    thread.setDaemon(true);
    thread.start();
  }
  return res;
}
