{
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(container.getProject()).getElementFactory();
  if (isLoopOrIf(container)) {
    PsiStatement loopBody=getLoopBody(container,finalAnchorStatement);
    PsiStatement loopBodyCopy=loopBody != null ? (PsiStatement)loopBody.copy() : null;
    PsiBlockStatement blockStatement=(PsiBlockStatement)elementFactory.createStatementFromText("{}",null);
    blockStatement=(PsiBlockStatement)CodeStyleManager.getInstance(container.getProject()).reformat(blockStatement);
    final PsiElement prevSibling=loopBody.getPrevSibling();
    if (prevSibling instanceof PsiWhiteSpace) {
      final PsiElement pprev=prevSibling.getPrevSibling();
      if (!(pprev instanceof PsiComment) || !((PsiComment)pprev).getTokenType().equals(JavaTokenType.END_OF_LINE_COMMENT)) {
        prevSibling.delete();
      }
    }
    blockStatement=(PsiBlockStatement)loopBody.replace(blockStatement);
    final PsiCodeBlock codeBlock=blockStatement.getCodeBlock();
    declaration=(PsiStatement)codeBlock.add(declaration);
    JavaCodeStyleManager.getInstance(declaration.getProject()).shortenClassReferences(declaration);
    if (loopBodyCopy != null && !replaceBody)     codeBlock.add(loopBodyCopy);
  }
 else   if (container instanceof PsiLambdaExpression) {
    PsiLambdaExpression lambdaExpression=(PsiLambdaExpression)container;
    final PsiElement invalidBody=lambdaExpression.getBody();
    if (invalidBody == null)     return declaration;
    final PsiLambdaExpression expressionFromText=(PsiLambdaExpression)elementFactory.createExpressionFromText(lambdaExpression.getParameterList().getText() + " -> {}",lambdaExpression.getParent());
    PsiCodeBlock newBody=(PsiCodeBlock)expressionFromText.getBody();
    LOG.assertTrue(newBody != null);
    newBody.add(declaration);
    lambdaExpression=(PsiLambdaExpression)lambdaExpression.replace(elementFactory.createExpressionFromText(lambdaExpression.getParameterList().getText() + " -> " + invalidBody.getText(),lambdaExpression));
    final PsiElement lambdaExpressionBody=lambdaExpression.getBody();
    LOG.assertTrue(lambdaExpressionBody != null);
    final PsiStatement lastBodyStatement;
    if (PsiType.VOID.equals(LambdaUtil.getFunctionalInterfaceReturnType(lambdaExpression))) {
      if (replaceBody) {
        lastBodyStatement=null;
      }
 else {
        lastBodyStatement=elementFactory.createStatementFromText("a;",lambdaExpression);
        ((PsiExpressionStatement)lastBodyStatement).getExpression().replace(lambdaExpressionBody);
      }
    }
 else {
      lastBodyStatement=elementFactory.createStatementFromText("return a;",lambdaExpression);
      final PsiExpression returnValue=((PsiReturnStatement)lastBodyStatement).getReturnValue();
      LOG.assertTrue(returnValue != null);
      returnValue.replace(lambdaExpressionBody);
    }
    if (lastBodyStatement != null) {
      newBody.add(lastBodyStatement);
    }
    final PsiLambdaExpression copy=(PsiLambdaExpression)lambdaExpression.replace(expressionFromText);
    newBody=(PsiCodeBlock)copy.getBody();
    LOG.assertTrue(newBody != null);
    declaration=newBody.getStatements()[0];
    declaration=(PsiStatement)JavaCodeStyleManager.getInstance(declaration.getProject()).shortenClassReferences(declaration);
  }
  return declaration;
}
