{
  if (!"filter".equals(methodCallExpression.getMethodExpression().getReferenceName()))   return false;
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] expressions=argumentList.getExpressions();
  if (expressions.length != 1)   return false;
  if (!(expressions[0] instanceof PsiLambdaExpression))   return false;
  final PsiElement lambdaBody=((PsiLambdaExpression)expressions[0]).getBody();
  if (!(lambdaBody instanceof PsiExpression))   return false;
  final PsiMethod method=methodCallExpression.resolveMethod();
  if (method == null)   return false;
  final PsiClass containingClass=method.getContainingClass();
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  if (parameters.length == 1 && InheritanceUtil.isInheritor(containingClass,false,CommonClassNames.JAVA_UTIL_STREAM_STREAM) && InheritanceUtil.isInheritor(parameters[0].getType(),CommonClassNames.JAVA_UTIL_FUNCTION_PREDICATE)) {
    return true;
  }
  return false;
}
