{
  if (isConditional(element)) {
    return;
  }
  final String name=element.getName();
  final ScopeOwner owner=ScopeUtil.getScopeOwner(element);
  if (owner != null && name != null) {
    final Instruction[] instructions=ControlFlowCache.getControlFlow(owner).getInstructions();
    PsiElement elementInControlFlow=element;
    if (element instanceof PyTargetExpression) {
      final PyImportStatement importStatement=PsiTreeUtil.getParentOfType(element,PyImportStatement.class);
      if (importStatement != null) {
        elementInControlFlow=importStatement;
      }
    }
    final int startInstruction=ControlFlowUtil.findInstructionNumberByElement(instructions,elementInControlFlow);
    if (startInstruction < 0) {
      return;
    }
    final Ref<PsiElement> readElementRef=Ref.create(null);
    final Ref<PsiElement> writeElementRef=Ref.create(null);
    ControlFlowUtil.iteratePrev(startInstruction,instructions,new Function<Instruction,ControlFlowUtil.Operation>(){
      @Override public ControlFlowUtil.Operation fun(      Instruction instruction){
        if (instruction instanceof ReadWriteInstruction && instruction.num() != startInstruction) {
          final ReadWriteInstruction rwInstruction=(ReadWriteInstruction)instruction;
          if (name.equals(rwInstruction.getName())) {
            final PsiElement originalElement=rwInstruction.getElement();
            if (originalElement != null) {
              if (rwInstruction.getAccess().isReadAccess()) {
                readElementRef.set(originalElement);
              }
              if (rwInstruction.getAccess().isWriteAccess()) {
                if (originalElement != element) {
                  writeElementRef.set(originalElement);
                }
              }
            }
            return ControlFlowUtil.Operation.CONTINUE;
          }
        }
        return ControlFlowUtil.Operation.NEXT;
      }
    }
);
    final PsiElement writeElement=writeElementRef.get();
    if (writeElement != null && readElementRef.get() == null) {
      final List<LocalQuickFix> quickFixes=new ArrayList<LocalQuickFix>();
      if (suggestRename(element,writeElement)) {
        quickFixes.add(new PyRenameElementQuickFix());
      }
      final PsiElement identifier=element.getNameIdentifier();
      registerProblem(identifier != null ? identifier : element,PyBundle.message("INSP.redeclared.name",name),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,null,quickFixes.toArray(new LocalQuickFix[quickFixes.size()]));
    }
  }
}
