{
  boolean correct=false;
  try {
    final PsiFile file=myParams.first;
    int offset=-1;
    try {
      final String name=file.getName();
      offset=Integer.parseInt(name.substring(name.lastIndexOf(':') + 1,name.lastIndexOf(')')));
    }
 catch (    Exception ignore) {
    }
    int flags=0;
    if (offset != -1) {
      final PsiFile host=FileContextUtil.getContextFile(file);
      if (host != null) {
        final PsiElement regexpInHost=host.findElementAt(offset);
        if (regexpInHost != null) {
          for (          RegExpModifierProvider provider : RegExpModifierProvider.EP.getExtensions()) {
            final int modifiers=provider.getFlags(regexpInHost,file);
            if (modifiers > 0) {
              flags=modifiers;
              break;
            }
          }
        }
      }
    }
    correct=Pattern.compile(myRegExp.getText(),flags).matcher(mySampleText.getText()).matches();
  }
 catch (  Exception ignore) {
  }
  mySampleText.setBackground(correct ? new JBColor(new Color(231,250,219),new Color(68,85,66)) : new JBColor(new Color(255,177,160),new Color(110,43,40)));
  BalloonImpl balloon=(BalloonImpl)myRef.get();
  if (balloon != null && balloon.isDisposed()) {
    balloon.revalidate();
  }
}
