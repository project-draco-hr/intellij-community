{
  this.project=project;
  final DefaultMutableTreeNode root=new DefaultMutableTreeNode(null);
  patternTreeModel=new DefaultTreeModel(root);
  DefaultMutableTreeNode parent=null;
  String lastCategory=null;
  final List<DefaultMutableTreeNode> nodesToExpand=new ArrayList<DefaultMutableTreeNode>();
  final List<Configuration> predefined=StructuralSearchUtil.getPredefinedTemplates();
  for (  final Configuration info : predefined) {
    final DefaultMutableTreeNode node=new DefaultMutableTreeNode(info);
    if (lastCategory == null || !lastCategory.equals(info.getCategory())) {
      if (info.getCategory().length() > 0) {
        root.add(parent=new DefaultMutableTreeNode(info.getCategory()));
        nodesToExpand.add(parent);
        lastCategory=info.getCategory();
      }
 else {
        root.add(node);
        continue;
      }
    }
    parent.add(node);
  }
  userTemplatesNode=new DefaultMutableTreeNode(SSRBundle.message("user.defined.category"));
  root.add(userTemplatesNode);
  nodesToExpand.add(userTemplatesNode);
  final ConfigurationManager configurationManager=StructuralSearchPlugin.getInstance(this.project).getConfigurationManager();
  if (configurationManager.getConfigurations() != null) {
    for (    final Configuration config : configurationManager.getConfigurations()) {
      userTemplatesNode.add(new DefaultMutableTreeNode(config));
    }
  }
  patternTree=createTree(patternTreeModel);
  for (  final DefaultMutableTreeNode nodeToExpand : nodesToExpand) {
    patternTree.expandPath(new TreePath(new Object[]{root,nodeToExpand}));
  }
  panel=ToolbarDecorator.createDecorator(patternTree).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final Object selection=patternTree.getLastSelectedPathComponent();
      if (!(selection instanceof DefaultMutableTreeNode)) {
        return;
      }
      final DefaultMutableTreeNode node=(DefaultMutableTreeNode)selection;
      if (!(node.getUserObject() instanceof Configuration)) {
        return;
      }
      final Configuration configuration=(Configuration)node.getUserObject();
      if (configuration.isPredefined()) {
        return;
      }
      patternTreeModel.removeNodeFromParent(node);
      configurationManager.removeConfiguration(configuration);
    }
  }
).setRemoveActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      final Object selection=patternTree.getLastSelectedPathComponent();
      if (selection instanceof DefaultMutableTreeNode) {
        final DefaultMutableTreeNode node=(DefaultMutableTreeNode)selection;
        final Object userObject=node.getUserObject();
        if (userObject instanceof Configuration) {
          final Configuration configuration=(Configuration)userObject;
          return !configuration.isPredefined();
        }
      }
      return false;
    }
  }
).createPanel();
  new JPanel(new BorderLayout());
  configureSelectTemplateAction(patternTree);
  historyModel=new CollectionListModel<Configuration>(configurationManager.getHistoryConfigurations());
  historyPanel=new JPanel(new BorderLayout());
  historyPanel.add(BorderLayout.NORTH,new JLabel(SSRBundle.message("used.templates")));
  historyList=new JBList(historyModel);
  historyPanel.add(BorderLayout.CENTER,ScrollPaneFactory.createScrollPane(historyList));
  historyList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  historyList.setSelectedIndex(0);
  final ListSpeedSearch speedSearch=new ListSpeedSearch(historyList,new Convertor<Object,String>(){
    @Override public String convert(    Object o){
      return o instanceof Configuration ? ((Configuration)o).getName() : o.toString();
    }
  }
);
  historyList.setCellRenderer(new ExistingTemplatesListCellRenderer(speedSearch));
  configureSelectTemplateAction(historyList);
}
