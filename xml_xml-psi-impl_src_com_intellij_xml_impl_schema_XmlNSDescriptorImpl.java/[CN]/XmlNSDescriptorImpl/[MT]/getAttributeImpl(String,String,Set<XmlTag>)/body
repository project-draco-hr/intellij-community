{
  if (myTag == null)   return null;
  XmlNSDescriptor nsDescriptor=myTag.getNSDescriptor(namespace,true);
  if (nsDescriptor != this && nsDescriptor instanceof XmlNSDescriptorImpl) {
    return ((XmlNSDescriptorImpl)nsDescriptor).getAttributeImpl(localName,namespace,visited);
  }
  if (visited == null)   visited=new HashSet<XmlTag>(1);
 else   if (visited.contains(myTag))   return null;
  visited.add(myTag);
  XmlTag[] tags=myTag.getSubTags();
  for (  XmlTag tag : tags) {
    if (equalsToSchemaName(tag,ATTRIBUTE_TAG_NAME)) {
      String name=tag.getAttributeValue("name");
      if (name != null) {
        if (checkElementNameEquivalence(localName,namespace,name,tag)) {
          return createAttributeDescriptor(tag);
        }
      }
    }
 else     if (equalsToSchemaName(tag,INCLUDE_TAG_NAME) || (equalsToSchemaName(tag,IMPORT_TAG_NAME) && namespace.equals(tag.getAttributeValue("namespace")))) {
      final String schemaLocation=tag.getAttributeValue("schemaLocation");
      if (schemaLocation != null) {
        final XmlFile xmlFile=XmlUtil.findNamespace(myTag.getContainingFile(),schemaLocation);
        if (xmlFile != null) {
          final XmlDocument includedDocument=xmlFile.getDocument();
          if (includedDocument != null) {
            final PsiMetaData data=includedDocument.getMetaData();
            if (data instanceof XmlNSDescriptorImpl) {
              final XmlAttributeDescriptor attributeDescriptor=((XmlNSDescriptorImpl)data).getAttributeImpl(localName,namespace,visited);
              if (attributeDescriptor != null) {
                final CachedValue<XmlAttributeDescriptor> value=CachedValuesManager.getManager(includedDocument.getProject()).createCachedValue(new CachedValueProvider<XmlAttributeDescriptor>(){
                  @Override public Result<XmlAttributeDescriptor> compute(){
                    Object[] deps=attributeDescriptor.getDependences();
                    if (deps.length == 0) {
                      LOG.error(attributeDescriptor + " (" + attributeDescriptor.getClass()+ ") returned no dependencies");
                    }
                    return new Result<XmlAttributeDescriptor>(attributeDescriptor,deps);
                  }
                }
,false);
                return value.getValue();
              }
            }
          }
        }
      }
    }
  }
  return null;
}
