{
  GlobalSearchScope librariesScope=ProjectScope.getLibrariesScope(myProject);
  HashSet<HKey> queued=new HashSet<HKey>();
  Stack<HKey> queue=new Stack<HKey>();
  for (  HKey key : keys) {
    queue.push(key);
    queued.add(key);
  }
  FileBasedIndex index=FileBasedIndex.getInstance();
  while (!queue.empty()) {
    if (queued.size() > EQUATIONS_LIMIT) {
      throw new EquationsLimitException();
    }
    ProgressManager.checkCanceled();
    HKey hKey=queue.pop();
    Bytes bytes=new Bytes(hKey.key);
    List<HEquations> hEquationss=cache.get(bytes);
    if (hEquationss == null) {
      hEquationss=index.getValues(BytecodeAnalysisIndex.NAME,bytes,librariesScope);
      cache.put(bytes,hEquationss);
    }
    for (    HEquations hEquations : hEquationss) {
      boolean stable=hEquations.stable;
      for (      DirectionResultPair pair : hEquations.results) {
        int dirKey=pair.directionKey;
        if (dirKey == hKey.dirKey) {
          HResult result=pair.hResult;
          solver.addEquation(new HEquation(new HKey(bytes.bytes,dirKey,stable),result));
          if (result instanceof HPending) {
            HPending pending=(HPending)result;
            for (            HComponent component : pending.delta) {
              for (              HKey depKey : component.ids) {
                if (!queued.contains(depKey)) {
                  queue.push(depKey);
                  queued.add(depKey);
                }
              }
            }
          }
        }
      }
    }
  }
}
