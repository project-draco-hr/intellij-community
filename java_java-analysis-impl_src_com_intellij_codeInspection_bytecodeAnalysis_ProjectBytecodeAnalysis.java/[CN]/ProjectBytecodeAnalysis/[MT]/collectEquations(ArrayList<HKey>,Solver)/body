{
  GlobalSearchScope librariesScope=ProjectScope.getLibrariesScope(myProject);
  HashSet<HKey> queued=new HashSet<HKey>();
  Stack<HKey> queue=new Stack<HKey>();
  for (  HKey key : keys) {
    queue.push(key);
    queued.add(key);
    HKey nKey=key.negate();
    queue.push(nKey);
    queued.add(nKey);
  }
  FileBasedIndex index=FileBasedIndex.getInstance();
  while (!queue.empty()) {
    if (queued.size() > EQUATIONS_LIMIT) {
      throw new EquationsLimitException();
    }
    ProgressManager.checkCanceled();
    HKey hKey=queue.pop();
    List<HResult> results=index.getValues(BytecodeAnalysisIndex.NAME,hKey,librariesScope);
    for (    HResult result : results) {
      solver.addEquation(new HEquation(hKey,result));
      if (result instanceof HPending) {
        HPending pending=(HPending)result;
        for (        HComponent component : pending.delta) {
          for (          HKey depKey : component.ids) {
            if (!queued.contains(depKey)) {
              queue.push(depKey);
              queued.add(depKey);
            }
            HKey swapped=depKey.negate();
            if (!queued.contains(swapped)) {
              queue.push(swapped);
              queued.add(swapped);
            }
          }
        }
      }
    }
  }
}
