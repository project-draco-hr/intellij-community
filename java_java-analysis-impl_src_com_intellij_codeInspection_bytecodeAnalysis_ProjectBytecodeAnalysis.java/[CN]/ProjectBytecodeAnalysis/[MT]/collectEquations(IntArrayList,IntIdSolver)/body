{
  GlobalSearchScope librariesScope=ProjectScope.getLibrariesScope(myProject);
  TIntHashSet queued=new TIntHashSet();
  TIntStack queue=new TIntStack();
  for (int i=0; i < keys.size(); i++) {
    int key=keys.get(i);
    queue.push(key);
    queued.add(key);
    queue.push(-key);
    queued.add(-key);
  }
  FileBasedIndex index=FileBasedIndex.getInstance();
  while (queue.size() > 0) {
    List<IntIdEquation> equations=index.getValues(BytecodeAnalysisIndex.NAME,queue.pop(),librariesScope);
    for (    IntIdEquation equation : equations) {
      IntIdResult rhs=equation.rhs;
      solver.addEquation(equation);
      if (rhs instanceof IntIdPending) {
        IntIdPending intIdPending=(IntIdPending)rhs;
        for (        IntIdComponent component : intIdPending.delta) {
          for (          int depKey : component.ids) {
            if (!queued.contains(depKey)) {
              queue.push(depKey);
              queued.add(depKey);
            }
            int swapped=-depKey;
            if (!queued.contains(swapped)) {
              queue.push(swapped);
              queued.add(swapped);
            }
          }
        }
      }
    }
  }
}
