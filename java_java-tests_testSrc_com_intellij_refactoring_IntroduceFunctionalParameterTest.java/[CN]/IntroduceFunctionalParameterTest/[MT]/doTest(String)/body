{
  boolean enabled=true;
  try {
    configureByFile("/refactoring/introduceFunctionalParameter/before" + getTestName(false) + ".java");
    enabled=myEditor.getSettings().isVariableInplaceRenameEnabled();
    myEditor.getSettings().setVariableInplaceRenameEnabled(false);
    final SelectionModel selectionModel=getEditor().getSelectionModel();
    if (selectionModel.hasSelection()) {
      final int selectionStart=selectionModel.getSelectionStart();
      final int selectionEnd=selectionModel.getSelectionEnd();
      PsiElement[] elements=CodeInsightUtil.findStatementsInRange(getFile(),selectionStart,selectionEnd);
      if (elements.length == 0) {
        final PsiExpression expression=CodeInsightUtil.findExpressionInRange(getFile(),selectionStart,selectionEnd);
        if (expression != null) {
          elements=new PsiElement[]{expression};
        }
      }
      new IntroduceParameterHandler().introduceStrategy(getProject(),getEditor(),getFile(),elements);
    }
    checkResultByFile("/refactoring/introduceFunctionalParameter/after" + getTestName(false) + ".java");
    if (conflict != null) {
      fail("Conflict expected");
    }
  }
 catch (  BaseRefactoringProcessor.ConflictsInTestsException e) {
    if (conflict == null) {
      throw e;
    }
    assertEquals(conflict,e.getMessage());
  }
 finally {
    myEditor.getSettings().setVariableInplaceRenameEnabled(enabled);
  }
}
