{
  if (place == null) {
    return;
  }
  if (!(aClass instanceof GroovyScriptClass)) {
    return;
  }
  PsiFile file=aClass.getContainingFile();
  if (file == null || !file.getName().endsWith(GradleConstants.EXTENSION)) {
    return;
  }
  GroovyPsiManager psiManager=GroovyPsiManager.getInstance(aClass.getProject());
  String contributorClassName=ROOT_CONTRIBUTOR_CLASS_NAME;
  for (GrMethodCall current=PsiTreeUtil.getParentOfType(place,GrMethodCall.class); current != null; current=PsiTreeUtil.getParentOfType(current,GrMethodCall.class)) {
    GrExpression expression=current.getInvokedExpression();
    if (expression != null) {
      String text=expression.getText();
      if (text == null || text.equals(place.getText())) {
        continue;
      }
      String s=CONTRIBUTORS.get(text);
      if (s != null) {
        contributorClassName=s;
        break;
      }
    }
  }
  PsiClass contributorClass=psiManager.findClassWithCache(contributorClassName,place.getResolveScope());
  if (contributorClass != null) {
    contributorClass.processDeclarations(processor,state,null,place);
  }
}
