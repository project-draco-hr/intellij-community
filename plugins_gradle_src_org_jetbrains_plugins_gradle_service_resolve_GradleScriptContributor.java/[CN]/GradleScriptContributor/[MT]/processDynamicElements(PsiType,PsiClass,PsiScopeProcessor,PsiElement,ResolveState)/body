{
  if (!(aClass instanceof GroovyScriptClass)) {
    return;
  }
  PsiFile file=aClass.getContainingFile();
  if (file == null || !FileUtilRt.extensionEquals(file.getName(),GradleConstants.EXTENSION) || GradleConstants.SETTINGS_FILE_NAME.equals(file.getName()))   return;
  List<String> methodInfo=ContainerUtilRt.newArrayList();
  for (GrMethodCall current=PsiTreeUtil.getParentOfType(place,GrMethodCall.class); current != null; current=PsiTreeUtil.getParentOfType(current,GrMethodCall.class)) {
    GrExpression expression=current.getInvokedExpression();
    if (expression == null) {
      continue;
    }
    String text=expression.getText();
    if (text != null) {
      methodInfo.add(text);
    }
  }
  final String methodCall=ContainerUtil.getLastItem(methodInfo);
  if (methodInfo.size() > 1 && BUILD_PROJECT_SCRIPT_BLOCKS.contains(methodCall)) {
    methodInfo.remove(methodInfo.size() - 1);
  }
  for (  GradleMethodContextContributor contributor : GradleMethodContextContributor.EP_NAME.getExtensions()) {
    contributor.process(methodInfo,processor,state,place);
  }
}
