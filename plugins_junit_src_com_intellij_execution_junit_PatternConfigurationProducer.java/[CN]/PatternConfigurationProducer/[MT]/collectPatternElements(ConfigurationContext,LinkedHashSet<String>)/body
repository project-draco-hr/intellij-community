{
  final DataContext dataContext=context.getDataContext();
  final Location<?>[] locations=Location.DATA_KEYS.getData(dataContext);
  if (locations != null) {
    List<PsiElement> elements=new ArrayList<PsiElement>();
    for (    Location<?> location : locations) {
      final PsiElement psiElement=location.getPsiElement();
      classes.add(getQName(psiElement,location));
      elements.add(psiElement);
    }
    return elements.toArray(new PsiElement[elements.size()]);
  }
  PsiElement[] elements=LangDataKeys.PSI_ELEMENT_ARRAY.getData(dataContext);
  if (elements != null) {
    for (    PsiElement psiClass : collectTestMembers(elements,true)) {
      classes.add(getQName(psiClass));
    }
    return elements;
  }
 else {
    final VirtualFile[] files=CommonDataKeys.VIRTUAL_FILE_ARRAY.getData(dataContext);
    if (files != null) {
      final List<PsiFile> psiFiles=new ArrayList<PsiFile>();
      final PsiManager psiManager=PsiManager.getInstance(context.getProject());
      for (      VirtualFile file : files) {
        final PsiFile psiFile=psiManager.findFile(file);
        if (psiFile instanceof PsiClassOwner) {
          for (          PsiElement psiMember : collectTestMembers(((PsiClassOwner)psiFile).getClasses(),true)) {
            classes.add(((PsiClass)psiMember).getQualifiedName());
          }
          psiFiles.add(psiFile);
        }
      }
      return psiFiles.toArray(new PsiElement[psiFiles.size()]);
    }
  }
  return null;
}
