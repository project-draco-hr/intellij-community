{
  pendingPush(createStartState());
  int steps=0;
  while (pendingTop > 0 && earlyResult == null) {
    steps++;
    if (steps >= STEPS_LIMIT) {
      throw new AnalyzerException(null,"limit is reached, steps: " + steps + " in method "+ method);
    }
    if (steps % 128 == 0) {
      ProgressManager.checkCanceled();
    }
    State state=pending[--pendingTop];
    int insnIndex=state.conf.insnIndex;
    Conf conf=state.conf;
    List<Conf> history=state.history;
    boolean fold=false;
    if (dfsTree.loopEnters[insnIndex]) {
      for (      Conf prev : history) {
        if (isInstance(conf,prev)) {
          fold=true;
          break;
        }
      }
    }
    if (fold) {
      addComputed(insnIndex,state);
    }
 else {
      State baseState=null;
      List<State> thisComputed=computed[insnIndex];
      if (thisComputed != null) {
        for (        State prevState : thisComputed) {
          if (stateEquiv(state,prevState)) {
            baseState=prevState;
            break;
          }
        }
      }
      if (baseState == null) {
        processState(state);
      }
    }
  }
  if (earlyResult != null) {
    return mkEquation(earlyResult);
  }
 else {
    return mkEquation(internalResult);
  }
}
