{
  final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType);
  if (interfaceMethod == null)   return false;
  final MethodReferenceResolver resolver=new MethodReferenceResolver(){
    @Override protected PsiConflictResolver createResolver(    PsiMethodReferenceExpressionImpl referenceExpression,    PsiMethodReferenceUtil.QualifierResolveResult qualifierResolveResult,    PsiMethod interfaceMethod,    MethodSignature signature){
      return DuplicateConflictResolver.INSTANCE;
    }
  }
;
  final Map<PsiElement,PsiType> map=LambdaUtil.getFunctionalTypeMap();
  final PsiType added=map.put(this,functionalInterfaceType);
  final ResolveResult[] result;
  try {
    result=resolver.resolve(this,getContainingFile(),false);
  }
  finally {
    if (added == null) {
      map.remove(this);
    }
  }
  final PsiMethodReferenceUtil.QualifierResolveResult qualifierResolveResult=PsiMethodReferenceUtil.getQualifierResolveResult(this);
  final int interfaceArity=interfaceMethod.getParameterList().getParametersCount();
  for (  ResolveResult resolveResult : result) {
    final PsiElement element=resolveResult.getElement();
    if (element instanceof PsiMethod) {
      final boolean isStatic=((PsiMethod)element).hasModifierProperty(PsiModifier.STATIC);
      final int parametersCount=((PsiMethod)element).getParameterList().getParametersCount();
      if (qualifierResolveResult.isReferenceTypeQualified() && getReferenceNameElement() instanceof PsiIdentifier) {
        if (parametersCount == interfaceArity && isStatic) {
          return true;
        }
        if (parametersCount == interfaceArity - 1 && !isStatic) {
          return true;
        }
        if (((PsiMethod)element).isVarArgs())         return true;
      }
 else       if (!isStatic) {
        if (parametersCount == interfaceArity || ((PsiMethod)element).isVarArgs()) {
          return true;
        }
      }
    }
 else     if (element instanceof PsiClass) {
      return true;
    }
  }
  return false;
}
