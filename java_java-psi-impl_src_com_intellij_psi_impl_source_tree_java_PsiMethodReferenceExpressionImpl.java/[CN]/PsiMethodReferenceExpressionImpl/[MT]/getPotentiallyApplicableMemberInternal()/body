{
  final PsiElement element=getReferenceNameElement();
  final PsiMethodReferenceUtil.QualifierResolveResult qualifierResolveResult=PsiMethodReferenceUtil.getQualifierResolveResult(this);
  final PsiClass containingClass=qualifierResolveResult.getContainingClass();
  if (containingClass != null) {
    PsiMethod[] methods=null;
    if (element instanceof PsiIdentifier) {
      final String identifierName=element.getText();
      final List<PsiMethod> result=new ArrayList<PsiMethod>();
      for (      HierarchicalMethodSignature signature : containingClass.getVisibleSignatures()) {
        if (identifierName.equals(signature.getName())) {
          result.add(signature.getMethod());
        }
      }
      methods=result.toArray(new PsiMethod[result.size()]);
    }
 else     if (isConstructor()) {
      final PsiElementFactory factory=JavaPsiFacade.getElementFactory(getProject());
      final PsiClass arrayClass=factory.getArrayClass(PsiUtil.getLanguageLevel(this));
      if (arrayClass == containingClass) {
        final PsiType componentType=qualifierResolveResult.getSubstitutor().substitute(arrayClass.getTypeParameters()[0]);
        LOG.assertTrue(componentType != null,qualifierResolveResult.getSubstitutor());
        methods=new PsiMethod[]{factory.createMethodFromText("public " + componentType.createArrayType().getCanonicalText() + " __array__(int i) {return null;}",this)};
      }
 else {
        methods=containingClass.getConstructors();
      }
    }
    if (methods != null) {
      PsiMethod psiMethod=null;
      if (methods.length > 0) {
        for (        PsiMethod method : methods) {
          if (PsiUtil.isAccessible(method,this,null)) {
            if (psiMethod != null)             return null;
            psiMethod=method;
          }
        }
        if (psiMethod == null)         return null;
        if (psiMethod.isVarArgs())         return null;
        if (psiMethod.getTypeParameters().length > 0) {
          final PsiReferenceParameterList parameterList=getParameterList();
          return parameterList != null && parameterList.getTypeParameterElements().length > 0 ? psiMethod : null;
        }
      }
      if (containingClass.isPhysical() && containingClass.hasTypeParameters()) {
        final PsiElement qualifier=getQualifier();
        if (qualifier instanceof PsiTypeElement) {
          final PsiJavaCodeReferenceElement referenceElement=((PsiTypeElement)qualifier).getInnermostComponentReferenceElement();
          if (referenceElement != null) {
            final PsiReferenceParameterList parameterList=referenceElement.getParameterList();
            if (parameterList == null || parameterList.getTypeParameterElements().length == 0) {
              return null;
            }
          }
        }
 else         if (qualifier instanceof PsiReferenceExpression) {
          final PsiReferenceExpression expression=(PsiReferenceExpression)qualifier;
          if (qualifierResolveResult.isReferenceTypeQualified()) {
            final PsiReferenceParameterList parameterList=expression.getParameterList();
            if (parameterList == null || parameterList.getTypeParameterElements().length == 0) {
              return null;
            }
          }
        }
      }
      return psiMethod == null ? containingClass : psiMethod;
    }
  }
  return null;
}
