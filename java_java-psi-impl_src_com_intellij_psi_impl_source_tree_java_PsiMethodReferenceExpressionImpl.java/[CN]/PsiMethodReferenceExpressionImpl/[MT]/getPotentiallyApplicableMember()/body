{
  final PsiElement element=getReferenceNameElement();
  final PsiMethodReferenceUtil.QualifierResolveResult qualifierResolveResult=PsiMethodReferenceUtil.getQualifierResolveResult(this);
  final PsiClass containingClass=qualifierResolveResult.getContainingClass();
  if (containingClass != null) {
    PsiMethod[] methods=null;
    if (element instanceof PsiIdentifier) {
      methods=containingClass.findMethodsByName(element.getText(),false);
    }
 else     if (isConstructor()) {
      methods=containingClass.getConstructors();
      if (methods.length == 0) {
        return containingClass;
      }
    }
    if (methods != null) {
      PsiMethod psiMethod=null;
      for (      PsiMethod method : methods) {
        if (PsiUtil.isAccessible(method,this,null)) {
          if (psiMethod != null)           return null;
          psiMethod=method;
        }
      }
      if (psiMethod == null)       return null;
      if (psiMethod.isVarArgs())       return null;
      if (psiMethod.getTypeParameters().length > 0) {
        final PsiReferenceParameterList parameterList=getParameterList();
        return parameterList != null && parameterList.getTypeParameterElements().length > 0 ? psiMethod : null;
      }
      if (psiMethod.isConstructor() && containingClass.hasTypeParameters()) {
        final PsiElement qualifier=getQualifier();
        if (qualifier instanceof PsiTypeElement) {
          final PsiJavaCodeReferenceElement referenceElement=((PsiTypeElement)qualifier).getInnermostComponentReferenceElement();
          if (referenceElement != null) {
            final PsiReferenceParameterList parameterList=referenceElement.getParameterList();
            return parameterList != null && parameterList.getTypeParameterElements().length > 0 ? psiMethod : null;
          }
        }
      }
      return psiMethod;
    }
  }
  return null;
}
