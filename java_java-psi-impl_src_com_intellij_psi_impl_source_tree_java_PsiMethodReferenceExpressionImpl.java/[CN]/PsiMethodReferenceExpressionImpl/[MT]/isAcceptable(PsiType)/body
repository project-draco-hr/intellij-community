{
  if (left instanceof PsiIntersectionType) {
    for (    PsiType conjunct : ((PsiIntersectionType)left).getConjuncts()) {
      if (isAcceptable(conjunct))       return true;
    }
    return false;
  }
  final PsiExpressionList argsList=PsiTreeUtil.getParentOfType(this,PsiExpressionList.class);
  final boolean isExact=isExact();
  if (MethodCandidateInfo.ourOverloadGuard.currentStack().contains(argsList)) {
    final MethodCandidateInfo.CurrentCandidateProperties candidateProperties=MethodCandidateInfo.getCurrentMethod(argsList);
    if (candidateProperties != null) {
      final PsiMethod method=candidateProperties.getMethod();
      if (isExact && !InferenceSession.isPertinentToApplicability(this,method)) {
        return true;
      }
      if (LambdaUtil.isPotentiallyCompatibleWithTypeParameter(this,argsList,method)) {
        return true;
      }
    }
  }
  left=FunctionalInterfaceParameterizationUtil.getGroundTargetType(left);
  if (!isPotentiallyCompatible(left)) {
    return false;
  }
  if (MethodCandidateInfo.ourOverloadGuard.currentStack().contains(argsList)) {
    if (!isExact) {
      return true;
    }
  }
  Map<PsiElement,PsiType> map=LambdaUtil.getFunctionalTypeMap();
  final JavaResolveResult result;
  try {
    if (map.put(this,left) != null) {
      return false;
    }
    result=advancedResolve(false);
  }
  finally {
    map.remove(this);
  }
  if (result instanceof MethodCandidateInfo && !((MethodCandidateInfo)result).isApplicable()) {
    return false;
  }
  final PsiElement resolve=result.getElement();
  if (resolve == null) {
    return false;
  }
  final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(left);
  final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(resolveResult);
  if (interfaceMethod != null) {
    final PsiType interfaceReturnType=LambdaUtil.getFunctionalInterfaceReturnType(left);
    if (PsiType.VOID.equals(interfaceReturnType) || interfaceReturnType == null) {
      return true;
    }
    PsiSubstitutor subst=result.getSubstitutor();
    PsiType methodReturnType=null;
    PsiClass containingClass=null;
    if (resolve instanceof PsiMethod) {
      containingClass=((PsiMethod)resolve).getContainingClass();
      PsiType returnType=PsiTypesUtil.patchMethodGetClassReturnType(this,this,(PsiMethod)resolve,null,PsiUtil.getLanguageLevel(this));
      if (returnType == null) {
        returnType=((PsiMethod)resolve).getReturnType();
      }
      if (PsiType.VOID.equals(returnType)) {
        return false;
      }
      PsiClass qContainingClass=PsiMethodReferenceUtil.getQualifierResolveResult(this).getContainingClass();
      if (qContainingClass != null && containingClass != null && PsiMethodReferenceUtil.isReceiverType(PsiMethodReferenceUtil.getFirstParameterType(left,this),qContainingClass,subst)) {
        subst=TypeConversionUtil.getClassSubstitutor(containingClass,qContainingClass,subst);
        LOG.assertTrue(subst != null);
      }
      methodReturnType=subst.substitute(returnType);
    }
 else     if (resolve instanceof PsiClass) {
      if (resolve == JavaPsiFacade.getElementFactory(resolve.getProject()).getArrayClass(PsiUtil.getLanguageLevel(resolve))) {
        final PsiTypeParameter[] typeParameters=((PsiClass)resolve).getTypeParameters();
        if (typeParameters.length == 1) {
          final PsiType arrayComponentType=subst.substitute(typeParameters[0]);
          if (arrayComponentType == null) {
            return false;
          }
          methodReturnType=arrayComponentType.createArrayType();
        }
      }
      containingClass=(PsiClass)resolve;
    }
    if (methodReturnType == null) {
      if (containingClass == null) {
        return false;
      }
      methodReturnType=JavaPsiFacade.getElementFactory(getProject()).createType(containingClass,subst);
    }
    return TypeConversionUtil.isAssignable(interfaceReturnType,methodReturnType);
  }
  return false;
}
