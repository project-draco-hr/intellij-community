{
  final PsiMethodReferenceUtil.QualifierResolveResult qualifierResolveResult=PsiMethodReferenceUtil.getQualifierResolveResult(PsiMethodReferenceExpressionImpl.this);
  final PsiClass containingClass=qualifierResolveResult.getContainingClass();
  PsiSubstitutor substitutor=qualifierResolveResult.getSubstitutor();
  if (containingClass != null) {
    final PsiElement element=getReferenceNameElement();
    final boolean isConstructor=isConstructor();
    if (element instanceof PsiIdentifier || isConstructor) {
      if (isConstructor && (containingClass.isEnum() || containingClass.hasModifierProperty(PsiModifier.ABSTRACT))) {
        return JavaResolveResult.EMPTY_ARRAY;
      }
      PsiType functionalInterfaceType=null;
      final Map<PsiMethodReferenceExpression,PsiType> map=PsiMethodReferenceUtil.ourRefs.get();
      if (map != null) {
        functionalInterfaceType=FunctionalInterfaceParameterizationUtil.getGroundTargetType(map.get(PsiMethodReferenceExpressionImpl.this));
      }
      if (functionalInterfaceType == null) {
        functionalInterfaceType=getFunctionalInterfaceType();
      }
      final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(functionalInterfaceType);
      final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(resolveResult);
      final MethodSignature signature=interfaceMethod != null ? interfaceMethod.getSignature(LambdaUtil.getSubstitutor(interfaceMethod,resolveResult)) : null;
      final PsiType interfaceMethodReturnType=LambdaUtil.getFunctionalInterfaceReturnType(functionalInterfaceType);
      if (isConstructor && interfaceMethod != null) {
        final PsiTypeParameter[] typeParameters=containingClass.getTypeParameters();
        final boolean isRawSubst=PsiUtil.isRawSubstitutor(containingClass,substitutor);
        final PsiClassType returnType=JavaPsiFacade.getElementFactory(containingClass.getProject()).createType(containingClass,isRawSubst ? PsiSubstitutor.EMPTY : substitutor);
        final InferenceSession session=new InferenceSession(typeParameters,substitutor,getManager(),null);
        if (!(session.isProperType(returnType) && session.isProperType(interfaceMethodReturnType))) {
          session.registerConstraints(returnType,interfaceMethodReturnType);
          substitutor=session.infer();
        }
        if (containingClass.getConstructors().length == 0) {
          ClassCandidateInfo candidateInfo=null;
          if ((containingClass.getContainingClass() == null || !isLocatedInStaticContext(containingClass)) && signature.getParameterTypes().length == 0 || PsiMethodReferenceUtil.onArrayType(containingClass,signature)) {
            candidateInfo=new ClassCandidateInfo(containingClass,substitutor);
          }
          return candidateInfo == null ? JavaResolveResult.EMPTY_ARRAY : new JavaResolveResult[]{candidateInfo};
        }
      }
      final MethodReferenceConflictResolver conflictResolver=new MethodReferenceConflictResolver(qualifierResolveResult,signature,interfaceMethod != null && interfaceMethod.isVarArgs());
      final PsiConflictResolver[] resolvers;
      if (signature != null) {
        final PsiType[] parameterTypes=signature.getParameterTypes();
        resolvers=new PsiConflictResolver[]{conflictResolver,new MethodRefsSpecificResolver(parameterTypes,PsiUtil.getLanguageLevel(PsiMethodReferenceExpressionImpl.this))};
      }
 else {
        resolvers=new PsiConflictResolver[]{conflictResolver};
      }
      final MethodCandidatesProcessor processor=new MethodCandidatesProcessor(PsiMethodReferenceExpressionImpl.this,getContainingFile(),resolvers,new SmartList<CandidateInfo>()){
        @Override protected MethodCandidateInfo createCandidateInfo(        final PsiMethod method,        final PsiSubstitutor substitutor,        final boolean staticProblem,        final boolean accessible){
          final PsiExpressionList argumentList=getArgumentList();
          final PsiType[] typeParameters=PsiMethodReferenceExpressionImpl.this.getTypeParameters();
          return new MethodCandidateInfo(method,substitutor,!accessible,staticProblem,argumentList,myCurrentFileContext,argumentList != null ? argumentList.getExpressionTypes() : null,typeParameters.length > 0 ? typeParameters : null,getLanguageLevel()){
            @NotNull @Override public PsiSubstitutor inferTypeArguments(            @NotNull ParameterTypeInferencePolicy policy,            boolean includeReturnConstraint){
              if (interfaceMethod == null)               return substitutor;
              final InferenceSession session=new InferenceSession(method.getTypeParameters(),substitutor,getManager(),PsiMethodReferenceExpressionImpl.this);
              final PsiParameter[] functionalMethodParameters=interfaceMethod.getParameterList().getParameters();
              final PsiParameter[] parameters=method.getParameterList().getParameters();
              if (parameters.length == functionalMethodParameters.length) {
                for (int i=0; i < functionalMethodParameters.length; i++) {
                  final PsiType pType=signature.getParameterTypes()[i];
                  session.addConstraint(new TypeCompatibilityConstraint(parameters[i].getType(),pType));
                }
              }
 else               if (parameters.length + 1 == functionalMethodParameters.length) {
                final PsiClass aClass=qualifierResolveResult.getContainingClass();
                session.initBounds(aClass.getTypeParameters());
                final PsiSubstitutor qualifierResultSubstitutor=qualifierResolveResult.getSubstitutor();
                final PsiType pType=signature.getParameterTypes()[0];
                PsiSubstitutor psiSubstitutor=qualifierResultSubstitutor;
                if (PsiUtil.isRawSubstitutor(aClass,qualifierResultSubstitutor)) {
                  final PsiClassType.ClassResolveResult pResult=PsiUtil.resolveGenericsClassInType(pType);
                  final PsiClass pClass=pResult.getElement();
                  final PsiSubstitutor receiverSubstitutor=pClass != null ? TypeConversionUtil.getClassSubstitutor(aClass,pClass,pResult.getSubstitutor()) : null;
                  if (receiverSubstitutor != null) {
                    psiSubstitutor=receiverSubstitutor;
                  }
                }
                final PsiType qType=JavaPsiFacade.getElementFactory(getProject()).createType(aClass,psiSubstitutor);
                session.addConstraint(new TypeCompatibilityConstraint(qType,pType));
                for (int i=0; i < parameters.length; i++) {
                  final PsiType interfaceParamType=signature.getParameterTypes()[i + 1];
                  session.addConstraint(new TypeCompatibilityConstraint(parameters[i].getType(),interfaceParamType));
                }
              }
 else {
                return substitutor;
              }
              boolean success=session.repeatInferencePhases(false);
              final PsiType returnType=method.getReturnType();
              if (returnType != null) {
                session.registerConstraints(returnType,interfaceMethodReturnType);
              }
              return session.infer(parameters,null,null);
            }
          }
;
        }
      }
;
      processor.setIsConstructor(isConstructor);
      processor.setName(isConstructor ? containingClass.getName() : element.getText());
      final PsiExpression expression=getQualifierExpression();
      if (expression == null || !(expression.getType() instanceof PsiArrayType)) {
        processor.setAccessClass(containingClass);
      }
      if (qualifierResolveResult.isReferenceTypeQualified() && isLocatedInStaticContext(containingClass)) {
        processor.handleEvent(JavaScopeProcessorEvent.START_STATIC,null);
      }
      ResolveState state=ResolveState.initial().put(PsiSubstitutor.KEY,substitutor);
      containingClass.processDeclarations(processor,state,PsiMethodReferenceExpressionImpl.this,PsiMethodReferenceExpressionImpl.this);
      return processor.getResult();
    }
  }
  return JavaResolveResult.EMPTY_ARRAY;
}
