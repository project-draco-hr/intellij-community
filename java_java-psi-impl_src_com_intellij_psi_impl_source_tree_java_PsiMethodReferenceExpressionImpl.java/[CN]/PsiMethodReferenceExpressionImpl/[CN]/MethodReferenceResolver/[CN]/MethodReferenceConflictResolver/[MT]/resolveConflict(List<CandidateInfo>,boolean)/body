{
  if (mySignature == null)   return null;
  checkSameSignatures(conflicts);
  checkAccessStaticLevels(conflicts,true);
  final PsiType[] parameterTypes=mySignature.getParameterTypes();
  boolean hasReceiver=PsiMethodReferenceUtil.hasReceiver(parameterTypes,myQualifierResolveResult,PsiMethodReferenceExpressionImpl.this);
  final List<CandidateInfo> firstCandidates=new ArrayList<CandidateInfo>();
  final List<CandidateInfo> secondCandidates=new ArrayList<CandidateInfo>();
  for (  CandidateInfo conflict : conflicts) {
    if (!(conflict instanceof MethodCandidateInfo))     continue;
    final PsiMethod psiMethod=((MethodCandidateInfo)conflict).getElement();
    if (psiMethod == null)     continue;
    final PsiSubstitutor substitutor=conflict.getSubstitutor();
    final PsiType[] signatureParameterTypes2=psiMethod.getSignature(substitutor).getParameterTypes();
    if (varargs && (!psiMethod.isVarArgs() || myFunctionalMethodVarArgs))     continue;
    if ((varargs || parameterTypes.length == signatureParameterTypes2.length) && isCorrectAssignment(signatureParameterTypes2,parameterTypes,substitutor,varargs,0)) {
      firstCandidates.add(conflict);
    }
    if (hasReceiver && (varargs || parameterTypes.length == signatureParameterTypes2.length + 1) && isCorrectAssignment(signatureParameterTypes2,parameterTypes,substitutor,varargs,1)) {
      secondCandidates.add(conflict);
    }
  }
  if (myQualifierResolveResult.isReferenceTypeQualified() && getReferenceNameElement() instanceof PsiIdentifier) {
    CandidateInfo candidateInfo=filterStaticCorrectCandidates(firstCandidates,secondCandidates,true);
    if (candidateInfo != null) {
      return candidateInfo;
    }
    candidateInfo=filterStaticCorrectCandidates(secondCandidates,firstCandidates,false);
    if (candidateInfo != null) {
      return candidateInfo;
    }
  }
  checkSpecifics(firstCandidates,varargs ? MethodCandidateInfo.ApplicabilityLevel.VARARGS : MethodCandidateInfo.ApplicabilityLevel.FIXED_ARITY,myLanguageLevel);
  checkSpecifics(secondCandidates,varargs ? MethodCandidateInfo.ApplicabilityLevel.VARARGS : MethodCandidateInfo.ApplicabilityLevel.FIXED_ARITY,myLanguageLevel);
  final int acceptedCount=firstCandidates.size() + secondCandidates.size();
  if (acceptedCount == 1) {
    return !firstCandidates.isEmpty() ? firstCandidates.get(0) : secondCandidates.get(0);
  }
  if (!varargs) {
    return resolveConflict(conflicts,true);
  }
  conflicts.clear();
  firstCandidates.addAll(secondCandidates);
  conflicts.addAll(firstCandidates);
  return null;
}
