{
  if (mySignature == null)   return null;
  final PsiType[] parameterTypes=mySignature.getParameterTypes();
  boolean hasReceiver=PsiMethodReferenceUtil.hasReceiver(parameterTypes,myQualifierResolveResult,PsiMethodReferenceExpressionImpl.this);
  final List<CandidateInfo> firstCandidates=new ArrayList<CandidateInfo>();
  final List<CandidateInfo> secondCandidates=new ArrayList<CandidateInfo>();
  for (  CandidateInfo conflict : conflicts) {
    if (!(conflict instanceof MethodCandidateInfo))     continue;
    final PsiMethod psiMethod=((MethodCandidateInfo)conflict).getElement();
    if (psiMethod == null)     continue;
    PsiSubstitutor substitutor=conflict.getSubstitutor();
    final PsiType[] signatureParameterTypes2=psiMethod.getSignature(substitutor).getParameterTypes();
    boolean varArgs=psiMethod.isVarArgs();
    if (parameterTypes.length == signatureParameterTypes2.length && isCorrectAssignment(signatureParameterTypes2,parameterTypes,substitutor,false,0)) {
      firstCandidates.add(conflict);
      varArgs=false;
    }
    if (hasReceiver && parameterTypes.length == signatureParameterTypes2.length + 1 && isCorrectAssignment(signatureParameterTypes2,parameterTypes,substitutor,false,1)) {
      secondCandidates.add(conflict);
      varArgs=false;
    }
    if (varArgs && !myFunctionalMethodVarArgs) {
      if (isCorrectAssignment(signatureParameterTypes2,parameterTypes,substitutor,true,0)) {
        firstCandidates.add(conflict);
      }
      if (hasReceiver && isCorrectAssignment(signatureParameterTypes2,parameterTypes,substitutor,true,1)) {
        secondCandidates.add(conflict);
      }
    }
  }
  final List<CandidateInfo> firstCandidateInfos=filterStaticCorrectCandidates(firstCandidates,true);
  final List<CandidateInfo> secondCandidateInfos=filterStaticCorrectCandidates(secondCandidates,false);
  final int acceptedCount=firstCandidateInfos.size() + secondCandidateInfos.size();
  if (acceptedCount == 1) {
    return !firstCandidateInfos.isEmpty() ? firstCandidateInfos.get(0) : secondCandidateInfos.get(0);
  }
  conflicts.clear();
  firstCandidates.addAll(secondCandidates);
  conflicts.addAll(firstCandidates);
  return null;
}
