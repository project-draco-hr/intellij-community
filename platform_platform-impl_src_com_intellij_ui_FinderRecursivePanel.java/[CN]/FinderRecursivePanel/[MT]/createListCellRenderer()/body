{
  return new ColoredListCellRenderer(){
    private final FileColorManager myFileColorManager=FileColorManager.getInstance(getProject());
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      mySelected=isSelected;
      myForeground=UIUtil.getTreeTextForeground();
      mySelectionForeground=cellHasFocus ? list.getSelectionForeground() : UIUtil.getTreeTextForeground();
      clear();
      setFont(UIUtil.getListFont());
      final T t=(T)value;
      try {
        setIcon(getItemIcon(t));
        append(getItemText(t));
      }
 catch (      IndexNotReadyException e) {
        append("loading...");
      }
      try {
        doCustomizeCellRenderer(this,list,t,index,isSelected,cellHasFocus);
      }
 catch (      IndexNotReadyException ignored) {
      }
      Color bg=isSelected ? UIUtil.getTreeSelectionBackground(cellHasFocus) : UIUtil.getTreeTextBackground();
      if (!isSelected && myFileColorManager.isEnabled()) {
        final Color fileBgColor=myFileColorManager.getRendererBackground(getContainingFile(t));
        bg=fileBgColor == null ? bg : fileBgColor;
      }
      setBackground(bg);
      if (hasChildren(t)) {
        JPanel result=new JPanel(new BorderLayout(0,0));
        JLabel childrenLabel=new JLabel();
        childrenLabel.setOpaque(true);
        childrenLabel.setVisible(true);
        childrenLabel.setBackground(bg);
        final boolean isDark=ColorUtil.isDark(UIUtil.getListSelectionBackground());
        childrenLabel.setIcon(isSelected ? isDark ? AllIcons.Icons.Ide.NextStepInverted : AllIcons.Icons.Ide.NextStep : AllIcons.Icons.Ide.NextStepGrayed);
        result.add(this,BorderLayout.CENTER);
        result.add(childrenLabel,BorderLayout.EAST);
        return result;
      }
      return this;
    }
    @Override protected final void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
    }
  }
;
}
