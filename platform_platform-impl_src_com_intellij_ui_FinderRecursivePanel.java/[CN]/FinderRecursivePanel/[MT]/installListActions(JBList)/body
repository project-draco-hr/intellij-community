{
  AnAction previousPanelAction=new AnAction("Previous",null,AllIcons.Actions.Back){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(!isRootPanel());
    }
    @Override public void actionPerformed(    AnActionEvent e){
      IdeFocusManager.getInstance(myProject).requestFocus(myParent.getList(),true);
    }
  }
;
  previousPanelAction.registerCustomShortcutSet(KeyEvent.VK_LEFT,0,list);
  AnAction nextPanelAction=new AnAction("Next",null,AllIcons.Actions.Forward){
    @Override public void update(    AnActionEvent e){
      final T value=getSelectedValue();
      e.getPresentation().setEnabled(value != null && hasChildren(value) && getSecondComponent() instanceof FinderRecursivePanel);
    }
    @Override public void actionPerformed(    AnActionEvent e){
      FinderRecursivePanel finderRecursivePanel=(FinderRecursivePanel)getSecondComponent();
      JBList jbList=finderRecursivePanel.getList();
      if (!jbList.isEmpty()) {
        if (jbList.getSelectedValue() == null) {
          jbList.setSelectedIndex(0);
          finderRecursivePanel.updateRightComponent(true);
        }
      }
      IdeFocusManager.getInstance(myProject).requestFocus(jbList,true);
    }
  }
;
  nextPanelAction.registerCustomShortcutSet(KeyEvent.VK_RIGHT,0,list);
  AnAction editAction=new AnAction("Edit",null,AllIcons.Actions.Edit){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(getSelectedValue() != null);
    }
    @Override public void actionPerformed(    AnActionEvent e){
      performEditAction();
    }
  }
;
  editAction.registerCustomShortcutSet(CommonShortcuts.ENTER,list);
  AnAction[] actions=new AnAction[]{previousPanelAction,nextPanelAction,Separator.getInstance(),editAction};
  final AnAction[] customActions=getCustomListActions();
  if (customActions.length > 0) {
    actions=ArrayUtil.append(actions,Separator.getInstance());
    actions=ArrayUtil.mergeArrays(actions,customActions);
  }
  ActionGroup contextActionGroup=new DefaultActionGroup(actions);
  PopupHandler.installUnknownPopupHandler(list,contextActionGroup,ActionManager.getInstance());
}
