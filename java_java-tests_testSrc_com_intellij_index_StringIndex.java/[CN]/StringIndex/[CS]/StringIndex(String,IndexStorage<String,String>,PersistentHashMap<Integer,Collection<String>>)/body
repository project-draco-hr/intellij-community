{
  myIndex=new MapReduceIndex<String,String,PathContentPair>(new IndexExtension<String,String,PathContentPair>(){
    @NotNull @Override public ID<String,String> getName(){
      return new ID<String,String>(testName + "string_index"){
      }
;
    }
    @NotNull @Override public DataIndexer<String,String,PathContentPair> getIndexer(){
      return new Indexer();
    }
    @NotNull @Override public KeyDescriptor<String> getKeyDescriptor(){
      return new EnumeratorStringDescriptor();
    }
    @NotNull @Override public DataExternalizer<String> getValueExternalizer(){
      return new EnumeratorStringDescriptor();
    }
    @Override public int getVersion(){
      return 0;
    }
  }
,storage){
    protected PersistentHashMap<Integer,Collection<String>> createInputsIndex() throws IOException {
      return inputIndex;
    }
  }
;
}
