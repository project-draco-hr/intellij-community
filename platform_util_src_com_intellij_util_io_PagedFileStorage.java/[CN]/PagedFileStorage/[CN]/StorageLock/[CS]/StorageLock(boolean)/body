{
  myDefaultStorageLockContext=new StorageLockContext(this,checkThreadAccess);
  mySizeLimit=UPPER_LIMIT;
  mySegments=new LinkedHashMap<Integer,ByteBufferWrapper>(10,0.75f,true){
    @Override protected boolean removeEldestEntry(    Map.Entry<Integer,ByteBufferWrapper> eldest){
      return mySize > mySizeLimit;
    }
    @Nullable @Override public ByteBufferWrapper remove(    Object key){
      ByteBufferWrapper wrapper=super.remove(key);
      if (wrapper != null) {
        int intKey=(Integer)key;
        final int storageIndex=(intKey & FILE_INDEX_MASK);
        PagedFileStorage owner=getRegisteredPagedFileStorageByIndex(storageIndex);
        owner.bufferInvalidated(intKey & MAX_PAGES_COUNT,wrapper);
        mySegmentsToRemove.offer(wrapper);
        mySize-=wrapper.allocationSize();
      }
      return wrapper;
    }
  }
;
}
