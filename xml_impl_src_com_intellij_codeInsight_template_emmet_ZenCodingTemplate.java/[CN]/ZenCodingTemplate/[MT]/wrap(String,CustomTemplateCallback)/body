{
  final TextFieldWithStoredHistory field=new TextFieldWithStoredHistory(EMMET_RECENT_WRAP_ABBREVIATIONS_KEY);
  final Dimension fieldPreferredSize=field.getPreferredSize();
  field.setPreferredSize(new Dimension(Math.max(220,fieldPreferredSize.width),fieldPreferredSize.height));
  field.setHistorySize(10);
  final JBPopupFactory popupFactory=JBPopupFactory.getInstance();
  final BalloonImpl balloon=(BalloonImpl)popupFactory.createDialogBalloonBuilder(field,XmlBundle.message("emmet.title")).setCloseButtonEnabled(false).setBlockClicksThroughBalloon(true).setAnimationCycle(0).setHideOnKeyOutside(true).setHideOnClickOutside(true).createBalloon();
  field.addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      validateTemplateKey(field,balloon,field.getText(),callback);
    }
  }
);
  field.addKeyboardListener(new KeyAdapter(){
    @Override public void keyPressed(    @NotNull KeyEvent e){
      if (!field.isPopupVisible()) {
switch (e.getKeyCode()) {
case KeyEvent.VK_ENTER:
          final String abbreviation=field.getText();
        if (validateTemplateKey(field,balloon,abbreviation,callback)) {
          doWrap(abbreviation,callback);
          PropertiesComponent.getInstance().setValue(EMMET_LAST_WRAP_ABBREVIATIONS_KEY,abbreviation);
          field.addCurrentTextToHistory();
          balloon.hide(true);
        }
      break;
case KeyEvent.VK_ESCAPE:
    balloon.hide(false);
  break;
}
}
}
}
);
balloon.addListener(new JBPopupListener.Adapter(){
@Override public void beforeShown(LightweightWindowEvent event){
field.setText(PropertiesComponent.getInstance().getValue(EMMET_LAST_WRAP_ABBREVIATIONS_KEY,""));
}
}
);
balloon.show(popupFactory.guessBestPopupLocation(callback.getEditor()),Balloon.Position.below);
final IdeFocusManager focusManager=IdeFocusManager.getInstance(callback.getProject());
focusManager.doWhenFocusSettlesDown(new Runnable(){
@Override public void run(){
focusManager.requestFocus(field,true);
field.selectText();
}
}
);
}
