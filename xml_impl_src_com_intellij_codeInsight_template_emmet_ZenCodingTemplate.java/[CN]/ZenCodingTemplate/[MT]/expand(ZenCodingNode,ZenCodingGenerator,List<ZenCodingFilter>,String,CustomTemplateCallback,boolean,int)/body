{
  checkTemplateOutputLength(node,callback);
  if (surroundedText != null) {
    surroundedText=surroundedText.trim();
  }
  GenerationNode fakeParentNode=new GenerationNode(TemplateToken.EMPTY_TEMPLATE_TOKEN,-1,1,surroundedText,true,null);
  node.expand(-1,1,surroundedText,callback,true,fakeParentNode);
  if (!expandPrimitiveAbbreviations) {
    if (isPrimitiveNode(node)) {
      return;
    }
  }
  List<GenerationNode> genNodes=fakeParentNode.getChildren();
  LiveTemplateBuilder builder=new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(),segmentsLimit);
  int end=-1;
  for (int i=0, genNodesSize=genNodes.size(); i < genNodesSize; i++) {
    GenerationNode genNode=genNodes.get(i);
    TemplateImpl template=genNode.generate(callback,generator,filters,true,segmentsLimit);
    int e=builder.insertTemplate(builder.length(),template,null);
    if (i < genNodesSize - 1 && genNode.isInsertNewLineBetweenNodes()) {
      builder.insertText(e,"\n",false);
      e++;
    }
    if (end == -1 && end < builder.length()) {
      end=e;
    }
  }
  for (  ZenCodingFilter filter : filters) {
    if (filter instanceof SingleLineEmmetFilter) {
      builder.setIsToReformat(false);
      break;
    }
  }
  callback.startTemplate(builder.buildTemplate(),null,null);
}
