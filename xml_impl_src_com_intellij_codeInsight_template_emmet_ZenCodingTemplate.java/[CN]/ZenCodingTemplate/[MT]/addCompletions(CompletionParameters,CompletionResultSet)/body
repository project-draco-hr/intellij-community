{
  if (!parameters.isAutoPopup()) {
    return;
  }
  PsiFile file=parameters.getPosition().getContainingFile();
  int offset=parameters.getOffset();
  Editor editor=parameters.getEditor();
  ZenCodingGenerator generator=findApplicableDefaultGenerator(CustomTemplateCallback.getContext(file,offset),false);
  if (generator != null && generator.hasCompletionItem()) {
    final CollectCustomTemplateCallback callback=new CollectCustomTemplateCallback(editor,file);
    final String templatePrefix=computeTemplateKeyWithoutContextChecking(callback);
    if (templatePrefix != null) {
      List<TemplateImpl> regularTemplates=TemplateManagerImpl.listApplicableTemplates(file,offset,false);
      boolean regularTemplateWithSamePrefixExists=!ContainerUtil.filter(regularTemplates,new Condition<TemplateImpl>(){
        @Override public boolean value(        TemplateImpl template){
          return templatePrefix.equals(template.getKey());
        }
      }
).isEmpty();
      result=result.withPrefixMatcher(result.getPrefixMatcher().cloneWithPrefix(templatePrefix));
      result.restartCompletionOnPrefixChange(StandardPatterns.string().startsWith(templatePrefix));
      if (!regularTemplateWithSamePrefixExists) {
        final Collection<SingleLineEmmetFilter> extraFilters=ContainerUtil.newLinkedList(new SingleLineEmmetFilter());
        try {
          expand(templatePrefix,callback,generator,extraFilters,false,0);
        }
 catch (        EmmetException ignore) {
        }
        final TemplateImpl template=callback.getGeneratedTemplate();
        if (template != null) {
          template.setKey(templatePrefix);
          template.setDescription(template.getTemplateText());
          final CustomLiveTemplateLookupElement lookupElement=new CustomLiveTemplateLookupElement(this,template.getKey(),template.getKey(),template.getDescription(),!LiveTemplateCompletionContributor.shouldShowAllTemplates(),true){
            @Override public void renderElement(            LookupElementPresentation presentation){
              super.renderElement(presentation);
              presentation.setTailText("\tEmmet abbreviation",true);
            }
          }
;
          result.addElement(lookupElement);
        }
      }
    }
 else     if (result.getPrefixMatcher().getPrefix().isEmpty()) {
      result.restartCompletionOnPrefixChange(StandardPatterns.string().longerThan(0));
    }
  }
}
