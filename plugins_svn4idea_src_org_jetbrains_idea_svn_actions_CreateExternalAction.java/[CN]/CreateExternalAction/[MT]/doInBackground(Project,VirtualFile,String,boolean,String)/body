{
  final SvnVcs vcs=SvnVcs.getInstance(project);
  try {
    final File ioFile=new File(vf.getPath());
    if (addToExternalProperty(vcs,ioFile,target,url))     return;
    final VcsDirtyScopeManager dirtyScopeManager=VcsDirtyScopeManager.getInstance(project);
    final FilePathImpl filePath=new FilePathImpl(ioFile,true);
    dirtyScopeManager.fileDirty(filePath);
    if (checkout) {
      final UpdateClient client=vcs.getFactory(ioFile).createUpdateClient();
      client.setEventHandler(new ProgressTracker(){
        @Override public void consume(        ProgressEvent event) throws SVNException {
        }
        @Override public void checkCancelled() throws SVNCancelException {
          final ProgressIndicator pi=ProgressManager.getInstance().getProgressIndicator();
          if (pi != null && pi.isCanceled())           throw new SVNCancelException();
        }
      }
);
      client.doUpdate(ioFile,SVNRevision.HEAD,Depth.UNKNOWN,false,false);
      vf.refresh(true,true,new Runnable(){
        @Override public void run(){
          dirtyScopeManager.dirDirtyRecursively(filePath);
        }
      }
);
    }
  }
 catch (  SVNException e1) {
    AbstractVcsHelper.getInstance(project).showError(new VcsException(e1),"Create External");
  }
catch (  VcsException e1) {
    AbstractVcsHelper.getInstance(project).showError(e1,"Create External");
  }
}
