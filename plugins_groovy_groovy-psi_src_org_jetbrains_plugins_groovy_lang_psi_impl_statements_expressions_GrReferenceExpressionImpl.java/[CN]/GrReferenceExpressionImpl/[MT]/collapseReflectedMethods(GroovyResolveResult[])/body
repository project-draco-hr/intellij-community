{
  List<GroovyResolveResult> filtered=ContainerUtil.filter(candidates,new Condition<GroovyResolveResult>(){
    @Override public boolean value(    GroovyResolveResult result){
      PsiElement element=result.getElement();
      return !(element instanceof GrReflectedMethod && hasMoreCompleteOverload((GrReflectedMethod)element));
    }
    private boolean hasMoreCompleteOverload(    GrReflectedMethod element){
      final int skipped=element.getSkippedParameters().length;
      return ContainerUtil.or(element.getBaseMethod().getReflectedMethods(),new Condition<GrReflectedMethod>(){
        @Override public boolean value(        GrReflectedMethod method){
          return method.getSkippedParameters().length > skipped;
        }
      }
);
    }
  }
);
  return filtered.toArray(new GroovyResolveResult[filtered.size()]);
}
