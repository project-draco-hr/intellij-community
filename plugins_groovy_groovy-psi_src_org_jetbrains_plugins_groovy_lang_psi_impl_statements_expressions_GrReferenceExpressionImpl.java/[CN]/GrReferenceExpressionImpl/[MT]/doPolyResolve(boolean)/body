{
  final PsiElement nameElement=getReferenceNameElement();
  final String name=getReferenceName();
  if (name == null || nameElement == null)   return GroovyResolveResult.EMPTY_ARRAY;
  try {
    ResolveProfiler.start();
    boolean canBeMethod=ResolveUtil.canResolveToMethod(this);
    if (!canBeMethod) {
      if (ResolveUtil.isDefinitelyKeyOfMap(this))       return GroovyResolveResult.EMPTY_ARRAY;
      final IElementType nameType=nameElement.getNode().getElementType();
      if (nameType == GroovyTokenTypes.kTHIS) {
        final GroovyResolveResult[] results=GrThisReferenceResolver.resolveThisExpression(this);
        if (results != null)         return results;
      }
 else       if (nameType == GroovyTokenTypes.kSUPER) {
        final GroovyResolveResult[] results=GrSuperReferenceResolver.resolveSuperExpression(this);
        if (results != null)         return results;
      }
    }
    final GroovyResolveResult[] results=_resolve(incompleteCode,false,null);
    if (results.length == 0) {
      return GroovyResolveResult.EMPTY_ARRAY;
    }
 else     if (!canBeMethod) {
      if (!ResolveUtil.mayBeKeyOfMap(this)) {
        return results;
      }
 else {
        final List<GroovyResolveResult> filtered=filterMembersFromSuperClasses(results);
        return ContainerUtil.toArray(filtered,new GroovyResolveResult[filtered.size()]);
      }
    }
 else {
      return results;
    }
  }
  finally {
    final long time=ResolveProfiler.finish();
    ResolveProfiler.write("ref",this,time);
  }
}
