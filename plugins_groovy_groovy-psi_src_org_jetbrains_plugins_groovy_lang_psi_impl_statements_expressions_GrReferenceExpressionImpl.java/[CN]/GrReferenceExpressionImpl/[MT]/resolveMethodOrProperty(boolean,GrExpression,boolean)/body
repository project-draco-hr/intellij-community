{
  final String name=getReferenceName();
  if (name == null)   return GroovyResolveResult.EMPTY_ARRAY;
  GrReferenceResolveRunner resolveRunner=new GrReferenceResolveRunner(this);
  PropertyResolverProcessor propertyResolver=new PropertyResolverProcessor(name,this);
  resolveRunner.resolveImpl(propertyResolver);
  final GroovyResolveResult[] propertyCandidates=propertyResolver.getCandidates();
  if (!allVariants) {
    for (    GroovyResolveResult candidate : propertyCandidates) {
      final PsiElement element=candidate.getElement();
      if (element instanceof GrVariable && !(element instanceof GrField || element instanceof GrBindingVariable)) {
        return propertyCandidates;
      }
    }
  }
  final MethodResolverProcessor methodProcessor=new MethodResolverProcessor(name,this,false,PsiImplUtil.getQualifierType(this),PsiUtil.getArgumentTypes(this,false,upToArgument,!genericsMatter),getTypeArguments(),allVariants,!genericsMatter);
  processMethods(resolveRunner,methodProcessor);
  final GroovyResolveResult[] methodCandidates=hasMemberPointer() ? collapseReflectedMethods(methodProcessor.getCandidates()) : methodProcessor.getCandidates();
  assertAllAreValid(methodCandidates);
  if (!allVariants && methodProcessor.hasApplicableCandidates()) {
    return methodCandidates;
  }
  if (!allVariants) {
    for (    GroovyResolveResult candidate : propertyCandidates) {
      final PsiElement element=candidate.getElement();
      if (element instanceof GrField) {
        final PsiClass containingClass=((PsiField)element).getContainingClass();
        if (containingClass != null && PsiTreeUtil.isContextAncestor(containingClass,this,true))         return propertyCandidates;
      }
    }
  }
  List<GroovyResolveResult> allCandidates=new ArrayList<GroovyResolveResult>();
  ContainerUtil.addAll(allCandidates,propertyCandidates);
  ContainerUtil.addAll(allCandidates,methodCandidates);
  filterOutBindings(allCandidates);
  for (  String getterName : GroovyPropertyUtils.suggestGettersName(name)) {
    AccessorResolverProcessor getterResolver=new AccessorResolverProcessor(getterName,name,this,true,genericsMatter,PsiImplUtil.getQualifierType(this),getTypeArguments());
    resolveRunner.resolveImpl(getterResolver);
    final GroovyResolveResult[] candidates=getterResolver.getCandidates();
    if (!allVariants && candidates.length == 1) {
      return candidates;
    }
    ContainerUtil.addAll(allCandidates,candidates);
  }
  if (!allCandidates.isEmpty()) {
    return allCandidates.toArray(new GroovyResolveResult[allCandidates.size()]);
  }
  return GroovyResolveResult.EMPTY_ARRAY;
}
