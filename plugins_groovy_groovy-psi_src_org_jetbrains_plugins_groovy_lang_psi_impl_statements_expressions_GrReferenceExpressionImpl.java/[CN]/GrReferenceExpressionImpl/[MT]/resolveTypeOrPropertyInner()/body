{
  PsiElement nameElement=getReferenceNameElement();
  String name=getReferenceName();
  if (name == null || nameElement == null)   return GroovyResolveResult.EMPTY_ARRAY;
  IElementType nameType=nameElement.getNode().getElementType();
  if (nameType == GroovyTokenTypes.kTHIS) {
    GroovyResolveResult[] results=GrThisReferenceResolver.resolveThisExpression(this);
    if (results != null) {
      return results;
    }
  }
 else   if (nameType == GroovyTokenTypes.kSUPER) {
    GroovyResolveResult[] results=GrSuperReferenceResolver.resolveSuperExpression(this);
    if (results != null) {
      return results;
    }
  }
  EnumSet<ClassHint.ResolveKind> kinds=getParent() instanceof GrReferenceExpression ? ClassHint.RESOLVE_KINDS_CLASS_PACKAGE : ClassHint.RESOLVE_KINDS_CLASS;
  GroovyResolveResult[] classCandidates=null;
  GrReferenceResolveRunner resolveRunner=new GrReferenceResolveRunner(this);
  ResolverProcessor processor=new PropertyResolverProcessor(name,this);
  resolveRunner.resolveImpl(processor);
  final GroovyResolveResult[] fieldCandidates=processor.getCandidates();
  if (hasAt()) {
    return fieldCandidates;
  }
  boolean canBeClassOrPackage=ResolveUtil.canBeClassOrPackage(this);
  if (canBeClassOrPackage && findClassOrPackageAtFirst()) {
    ResolverProcessor classProcessor=new ClassResolverProcessor(name,this,kinds);
    resolveRunner.resolveImpl(classProcessor);
    classCandidates=classProcessor.getCandidates();
    if (classCandidates.length > 0 && containsPackage(classCandidates)) {
      final PsiElement firstNonReferenceExprParent=PsiTreeUtil.skipParentsOfType(this,GrReferenceExpressionImpl.class);
      final GrReferenceExpressionImpl topRef=(GrReferenceExpressionImpl)PsiTreeUtil.findFirstParent(this,new Condition<PsiElement>(){
        @Override public boolean value(        PsiElement parent){
          return parent.getParent() == firstNonReferenceExprParent && parent instanceof GrReferenceExpressionImpl;
        }
      }
);
      if (topRef != null) {
        final String fqn=topRef.getTextSkipWhiteSpaceAndComments();
        if (JavaPsiFacade.getInstance(getProject()).findClass(fqn,getResolveScope()) != null) {
          return classCandidates;
        }
      }
    }
  }
  for (  GroovyResolveResult candidate : fieldCandidates) {
    final PsiElement element=candidate.getElement();
    if (element instanceof PsiField) {
      final PsiClass containingClass=((PsiField)element).getContainingClass();
      if (containingClass != null && PsiUtil.getContextClass(this) == containingClass)       return fieldCandidates;
    }
 else     if (!(element instanceof GrBindingVariable)) {
      return fieldCandidates;
    }
  }
  if (classCandidates != null && classCandidates.length > 0)   return classCandidates;
  final boolean isLValue=PsiUtil.isLValue(this);
  String[] accessorNames=isLValue ? GroovyPropertyUtils.suggestSettersName(name) : GroovyPropertyUtils.suggestGettersName(name);
  List<GroovyResolveResult> accessorResults=new ArrayList<GroovyResolveResult>();
  for (  String accessorName : accessorNames) {
    AccessorResolverProcessor accessorResolver=new AccessorResolverProcessor(accessorName,name,this,!isLValue,false,PsiImplUtil.getQualifierType(this),getTypeArguments());
    resolveRunner.resolveImpl(accessorResolver);
    final GroovyResolveResult[] candidates=accessorResolver.getCandidates();
    if (candidates.length == 1 && candidates[0].isStaticsOK() && candidates[0].isAccessible()) {
      return candidates;
    }
 else {
      ContainerUtil.addAll(accessorResults,candidates);
    }
  }
  final ArrayList<GroovyResolveResult> fieldList=ContainerUtil.newArrayList(fieldCandidates);
  filterOutBindings(fieldList);
  if (!fieldList.isEmpty()) {
    return fieldList.toArray(new GroovyResolveResult[fieldList.size()]);
  }
  if (classCandidates == null && canBeClassOrPackage) {
    ResolverProcessor classProcessor=new ClassResolverProcessor(name,this,kinds);
    resolveRunner.resolveImpl(classProcessor);
    classCandidates=classProcessor.getCandidates();
  }
  if (classCandidates != null && classCandidates.length > 0)   return classCandidates;
  if (!accessorResults.isEmpty())   return new GroovyResolveResult[]{accessorResults.get(0)};
  return GroovyResolveResult.EMPTY_ARRAY;
}
