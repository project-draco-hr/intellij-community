{
  final PsiElement resolved=refExpr.resolve();
  for (  GrExpressionTypeCalculator calculator : GrExpressionTypeCalculator.EP_NAME.getExtensions()) {
    PsiType type=calculator.calculateType(refExpr,resolved);
    if (type != null)     return type;
  }
  if (ResolveUtil.isClassReference(refExpr)) {
    GrExpression qualifier=refExpr.getQualifier();
    LOG.assertTrue(qualifier != null);
    return TypesUtil.createJavaLangClassType(qualifier.getType(),refExpr.getProject(),refExpr.getResolveScope());
  }
  if (PsiUtil.isCompileStatic(refExpr)) {
    final GroovyResolveResult resolveResult=refExpr.advancedResolve();
    final PsiElement resolvedF=resolveResult.getElement();
    final PsiType type;
    if (resolvedF instanceof GrField) {
      type=((GrField)resolvedF).getType();
    }
 else     if (resolvedF instanceof GrAccessorMethod) {
      type=((GrAccessorMethod)resolvedF).getProperty().getType();
    }
 else {
      type=null;
    }
    if (type != null) {
      return resolveResult.getSubstitutor().substitute(type);
    }
  }
  final PsiType nominal=refExpr.getNominalType();
  Boolean reassigned=GrReassignedLocalVarsChecker.isReassignedVar(refExpr);
  if (reassigned != null && reassigned.booleanValue()) {
    return GrReassignedLocalVarsChecker.getReassignedVarType(refExpr,true);
  }
  final PsiType inferred=getInferredTypes(refExpr,resolved);
  if (inferred == null) {
    if (nominal == null) {
      if (resolved instanceof GrVariable) {
        LOG.assertTrue(resolved.isValid());
        return ((GrVariable)resolved).getTypeGroovy();
      }
    }
    return nominal;
  }
  if (nominal == null)   return inferred;
  if (!TypeConversionUtil.isAssignable(TypeConversionUtil.erasure(nominal),inferred,false)) {
    if (resolved instanceof GrVariable && ((GrVariable)resolved).getTypeElementGroovy() != null) {
      return nominal;
    }
  }
  return inferred;
}
