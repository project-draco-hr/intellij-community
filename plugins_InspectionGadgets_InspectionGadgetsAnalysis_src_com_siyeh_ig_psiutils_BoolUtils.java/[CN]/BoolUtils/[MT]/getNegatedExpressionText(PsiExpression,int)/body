{
  expression=ParenthesesUtils.stripParentheses(expression);
  if (expression == null) {
    return "";
  }
  if (isNegation(expression)) {
    final PsiExpression negated=getNegated(expression);
    if (negated == null) {
      return "";
    }
    return ParenthesesUtils.getPrecedence(negated) > precedence ? '(' + negated.getText() + ')' : negated.getText();
  }
 else   if (ComparisonUtils.isComparison(expression)) {
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)expression;
    final String negatedComparison=ComparisonUtils.getNegatedComparison(polyadicExpression.getOperationTokenType());
    final StringBuilder result=new StringBuilder();
    final PsiExpression[] operands=polyadicExpression.getOperands();
    final boolean isEven=(operands.length & 1) != 1;
    for (int i=0, length=operands.length; i < length; i++) {
      final PsiExpression operand=operands[i];
      if (i > 0) {
        if (isEven && (i & 1) != 1) {
          final PsiJavaToken token=polyadicExpression.getTokenBeforeOperand(operand);
          if (token != null) {
            result.append(token.getText());
          }
        }
 else {
          result.append(negatedComparison);
        }
      }
      result.append(operand.getText());
    }
    return result.toString();
  }
 else   return ParenthesesUtils.getPrecedence(expression) > ParenthesesUtils.PREFIX_PRECEDENCE ? "!(" + expression.getText() + ')' : '!' + expression.getText();
}
