{
  if (!context.maySwitchToAST(callable)) {
    return Collections.emptyList();
  }
  final List<PyCustomMember> result=new ArrayList<>();
  callable.getContainingFile().acceptChildren(new PyElementVisitor(){
    @Override public void visitPyElement(    PyElement node){
    }
    @Override public void visitPyAssignmentStatement(    PyAssignmentStatement node){
      final PyTargetExpression lhs=PyUtil.as(node.getLeftHandSideExpression(),PyTargetExpression.class);
      final PyExpression qualifier=lhs == null ? null : lhs.getQualifier();
      final String name=lhs == null ? null : lhs.getName();
      if (lhs != null && qualifier != null && name != null && "patch".equals(qualifier.getName())) {
        result.add(new PyCustomMember(name,lhs));
      }
    }
  }
);
  return result;
}
