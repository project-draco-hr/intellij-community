{
  PyClass clazz=classType.getPyClass();
  final String qualifiedName=clazz.getQualifiedName();
  if ("socket._socketobject".equals(qualifiedName)) {
    final PyFile socketFile=(PyFile)clazz.getContainingFile();
    List<PyCustomMember> socketMembers=socketFile.getUserData(mySocketMembersKey);
    if (socketMembers == null) {
      socketMembers=calcSocketMembers(socketFile);
      socketFile.putUserData(mySocketMembersKey,socketMembers);
    }
    return socketMembers;
  }
  if (location instanceof PyReferenceExpression) {
    final PyCallable mockPatchCallable=mockPatchCallable(classType,((PyReferenceExpression)location).getQualifier(),typeEvalContext);
    if (mockPatchCallable != null) {
      return calcMockPatchMembers(mockPatchCallable,typeEvalContext);
    }
  }
  return Collections.emptyList();
}
