{
  int equationId=in.readInt();
  boolean isFinal=in.readBoolean();
  if (isFinal) {
    int ordinal=DataInputOutputUtil.readINT(in);
    Value value=Value.values()[ordinal];
    return new IntIdEquation(equationId,new IntIdFinal(value));
  }
 else {
    int sumLength=DataInputOutputUtil.readINT(in);
    IntIdComponent[] components=new IntIdComponent[sumLength];
    for (int i=0; i < sumLength; i++) {
      int ordinal=DataInputOutputUtil.readINT(in);
      Value value=Value.values()[ordinal];
      int componentSize=DataInputOutputUtil.readINT(in);
      int[] ids=new int[componentSize];
      for (int j=0; j < componentSize; j++) {
        ids[j]=in.readInt();
      }
      components[i]=new IntIdComponent(value,ids);
    }
    return new IntIdEquation(equationId,new IntIdPending(components));
  }
}
