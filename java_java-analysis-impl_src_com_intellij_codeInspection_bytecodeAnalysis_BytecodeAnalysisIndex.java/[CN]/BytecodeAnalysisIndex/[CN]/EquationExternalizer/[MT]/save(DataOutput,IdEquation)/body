{
  long id=equation.id;
  int sign=id > 0 ? 1 : -1;
  id=Math.abs(id);
  int primaryId=(int)(id / BytecodeAnalysisConverter.SHIFT);
  int secondaryId=(int)(id % BytecodeAnalysisConverter.SHIFT);
  out.writeInt(sign * primaryId);
  DataInputOutputUtil.writeINT(out,secondaryId);
  IdResult rhs=equation.rhs;
  if (rhs instanceof IdFinal) {
    IdFinal finalResult=(IdFinal)rhs;
    out.writeBoolean(true);
    DataInputOutputUtil.writeINT(out,finalResult.value.ordinal());
  }
 else {
    IdPending pendResult=(IdPending)rhs;
    out.writeBoolean(false);
    DataInputOutputUtil.writeINT(out,pendResult.delta.length);
    for (    IntIdComponent component : pendResult.delta) {
      DataInputOutputUtil.writeINT(out,component.value.ordinal());
      long[] ids=component.ids;
      DataInputOutputUtil.writeINT(out,ids.length);
      for (      long id1 : ids) {
        sign=id1 > 0 ? 1 : -1;
        id=Math.abs(id1);
        primaryId=(int)(id / BytecodeAnalysisConverter.SHIFT);
        secondaryId=(int)(id % BytecodeAnalysisConverter.SHIFT);
        out.writeInt(sign * primaryId);
        DataInputOutputUtil.writeINT(out,secondaryId);
      }
    }
  }
}
