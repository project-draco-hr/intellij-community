{
  boolean stable=in.readBoolean();
  int size=DataInputOutputUtil.readINT(in);
  ArrayList<DirectionResultPair> results=new ArrayList<DirectionResultPair>(size);
  for (int k=0; k < size; k++) {
    int directionKey=DataInputOutputUtil.readINT(in);
    boolean isFinal=in.readBoolean();
    if (isFinal) {
      int ordinal=DataInputOutputUtil.readINT(in);
      Value value=Value.values()[ordinal];
      results.add(new DirectionResultPair(directionKey,new HFinal(value)));
    }
 else {
      int sumLength=DataInputOutputUtil.readINT(in);
      HComponent[] components=new HComponent[sumLength];
      for (int i=0; i < sumLength; i++) {
        int ordinal=DataInputOutputUtil.readINT(in);
        Value value=Value.values()[ordinal];
        int componentSize=DataInputOutputUtil.readINT(in);
        HKey[] ids=new HKey[componentSize];
        for (int j=0; j < componentSize; j++) {
          byte[] bytes=new byte[BytecodeAnalysisConverter.HASH_SIZE];
          for (int bi=0; bi < bytes.length; bi++) {
            bytes[bi]=in.readByte();
          }
          int rawDirKey=DataInputOutputUtil.readINT(in);
          ids[j]=new HKey(bytes,Math.abs(rawDirKey),in.readBoolean(),rawDirKey < 0);
        }
        components[i]=new HComponent(value,ids);
      }
      results.add(new DirectionResultPair(directionKey,new HPending(components)));
    }
  }
  return new HEquations(results,stable);
}
