{
  out.writeBoolean(eqs.stable);
  DataInputOutputUtil.writeINT(out,eqs.results.size());
  for (  DirectionResultPair pair : eqs.results) {
    DataInputOutputUtil.writeINT(out,pair.directionKey);
    HResult rhs=pair.hResult;
    if (rhs instanceof HFinal) {
      HFinal finalResult=(HFinal)rhs;
      out.writeBoolean(true);
      DataInputOutputUtil.writeINT(out,finalResult.value.ordinal());
    }
 else {
      HPending pendResult=(HPending)rhs;
      out.writeBoolean(false);
      DataInputOutputUtil.writeINT(out,pendResult.delta.length);
      for (      HComponent component : pendResult.delta) {
        DataInputOutputUtil.writeINT(out,component.value.ordinal());
        HKey[] ids=component.ids;
        DataInputOutputUtil.writeINT(out,ids.length);
        for (        HKey hKey : ids) {
          out.write(hKey.key);
          int rawDirKey=hKey.negated ? -hKey.dirKey : hKey.dirKey;
          DataInputOutputUtil.writeINT(out,rawDirKey);
          out.writeBoolean(hKey.stable);
        }
      }
    }
  }
}
