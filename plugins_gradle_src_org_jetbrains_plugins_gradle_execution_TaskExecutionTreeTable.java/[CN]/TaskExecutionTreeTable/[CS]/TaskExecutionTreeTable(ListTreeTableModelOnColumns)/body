{
  super(model);
  addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER && hasSingleSelection()) {
        handleDoubleClickOrEnter(getTree().getSelectionPath(),e);
      }
      if (e.getKeyCode() == KeyEvent.VK_F2 && e.getModifiers() == 0) {
        e.consume();
      }
    }
  }
);
  addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      if (!e.isPopupTrigger() && SimpleTree.isDoubleClick(e)) {
        handleDoubleClickOrEnter(getTree().getClosestPathForLocation(e.getX(),e.getY()),e);
      }
    }
  }
);
  final ActionManager actionManager=ActionManager.getInstance();
  addMouseListener(new PopupHandler(){
    public void invokePopup(    final Component comp,    final int x,    final int y){
      final String id=getMenuId(getSelectedNodes());
      if (id != null) {
        final ActionGroup actionGroup=(ActionGroup)actionManager.getAction(id);
        if (actionGroup != null) {
          actionManager.createActionPopupMenu("",actionGroup).getComponent().show(comp,x,y);
        }
      }
    }
    @Nullable private String getMenuId(    Collection<? extends ExecutionNode> nodes){
      String id=null;
      for (      ExecutionNode node : nodes) {
        String menuId=node.getMenuId();
        if (menuId == null) {
          return null;
        }
        if (id == null) {
          id=menuId;
        }
 else         if (!id.equals(menuId)) {
          return null;
        }
      }
      return id;
    }
  }
);
}
