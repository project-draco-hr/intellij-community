{
  final PyFunction problemFunction=PsiTreeUtil.getParentOfType(descriptor.getPsiElement(),PyFunction.class);
  if (problemFunction == null)   return;
  final StringBuilder superCall=new StringBuilder();
  final PyClass klass=problemFunction.getContainingClass();
  if (klass == null)   return;
  final PyClass[] superClasses=klass.getSuperClasses();
  if (superClasses.length == 0)   return;
  final PyClass superClass=superClasses[0];
  final PyFunction superInit=superClass.findMethodByName(PyNames.INIT,true);
  if (superInit == null)   return;
  final ParametersInfo origInfo=new ParametersInfo(problemFunction.getParameterList());
  final ParametersInfo superInfo=new ParametersInfo(superInit.getParameterList());
  final boolean addSelfToCall;
  if (klass.isNewStyleClass()) {
    addSelfToCall=false;
    if (LanguageLevel.forElement(klass).isPy3K()) {
      superCall.append("super().__init__(");
    }
 else {
      superCall.append("super(").append(klass.getName()).append(", ").append(getSelfParameterName(origInfo)).append(").__init__(");
    }
  }
 else {
    addSelfToCall=true;
    superCall.append(superClass.getName()).append(".__init__(");
  }
  final StringBuilder newFunction=new StringBuilder("def __init__(");
  final Couple<List<String>> couple=buildNewFunctionParamsAndSuperInitCallArgs(origInfo,superInfo,addSelfToCall);
  StringUtil.join(couple.getFirst(),", ",newFunction);
  newFunction.append(")");
  if (problemFunction.getAnnotation() != null) {
    newFunction.append(problemFunction.getAnnotation().getText());
  }
  newFunction.append(":\n\t");
  StringUtil.join(couple.getSecond(),", ",superCall);
  superCall.append(")");
  final PyStatementList statementList=problemFunction.getStatementList();
  PyExpression docstring=null;
  final PyStatement[] statements=statementList.getStatements();
  if (statements.length != 0 && statements[0] instanceof PyExpressionStatement) {
    final PyExpressionStatement st=(PyExpressionStatement)statements[0];
    if (st.getExpression() instanceof PyStringLiteralExpression) {
      docstring=st.getExpression();
    }
  }
  if (docstring != null) {
    newFunction.append(docstring.getText()).append("\n\t");
  }
  newFunction.append(superCall).append("\n\t");
  boolean first=true;
  for (  PyStatement statement : statements) {
    if (first && docstring != null || statement instanceof PyPassStatement) {
      first=false;
      continue;
    }
    newFunction.append(statement.getText()).append("\n\t");
  }
  final PyElementGenerator generator=PyElementGenerator.getInstance(project);
  problemFunction.replace(generator.createFromText(LanguageLevel.forElement(problemFunction),PyFunction.class,newFunction.toString()));
}
