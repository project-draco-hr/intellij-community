{
  final PsiMethod method=PsiTreeUtil.getParentOfType(descriptor.getPsiElement(),PsiMethod.class);
  if (method != null) {
    if (!PsiType.VOID.equals(method.getReturnType()) || !method.hasModifierProperty(PsiModifier.PUBLIC) || !method.hasModifierProperty(PsiModifier.STATIC)) {
      ChangeSignatureProcessor csp=new ChangeSignatureProcessor(project,method,false,PsiModifier.PUBLIC,method.getName(),PsiType.VOID,new ParameterInfoImpl[0]){
        @Override protected void performRefactoring(        @NotNull UsageInfo[] usages){
          super.performRefactoring(usages);
          final PsiModifierList modifierList=method.getModifierList();
          if (!modifierList.hasModifierProperty(PsiModifier.STATIC)) {
            modifierList.setModifierProperty(PsiModifier.STATIC,true);
          }
        }
      }
;
      csp.run();
    }
  }
}
