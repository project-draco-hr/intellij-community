{
  processRefInAnnotation(refExpr,matcher,consumer);
  final int[] count=new int[]{0};
  final CompleteReferenceProcessor processor=new CompleteReferenceProcessor(refExpr,new Consumer<LookupElement>(){
    @Override public void consume(    LookupElement element){
      count[0]++;
      consumer.consume(element);
    }
  }
,matcher,parameters);
  getVariantsImpl(refExpr,processor);
  final GroovyResolveResult[] candidates=processor.getCandidates();
  List<LookupElement> results=GroovyCompletionUtil.getCompletionVariants(candidates,JavaClassNameCompletionContributor.AFTER_NEW.accepts(refExpr),matcher,refExpr);
  if (count[0] == 0 && results.size() == 0) {
    results=GroovyCompletionUtil.getCompletionVariants(processor.getInapplicableResults(),JavaClassNameCompletionContributor.AFTER_NEW.accepts(refExpr),matcher,refExpr);
  }
  for (  LookupElement o : results) {
    consumer.consume(o);
  }
}
