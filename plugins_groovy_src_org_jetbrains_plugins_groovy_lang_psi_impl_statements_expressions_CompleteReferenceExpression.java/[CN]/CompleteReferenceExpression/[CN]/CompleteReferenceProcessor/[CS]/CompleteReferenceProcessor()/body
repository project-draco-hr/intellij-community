{
  super(null,EnumSet.allOf(ResolveKind.class),myRefExpr,PsiType.EMPTY_ARRAY);
  myConsumer=new Consumer<LookupElement>(){
    @Override public void consume(    LookupElement element){
      myIsEmpty=false;
      CompleteReferenceExpression.this.myConsumer.consume(element);
    }
  }
;
  myPreferredFieldNames=addAllRestrictedProperties();
  mySkipPackages=shouldSkipPackages();
  myEventListener=JavaPsiFacade.getInstance(myRefExpr.getProject()).findClass("java.util.EventListener",myRefExpr.getResolveScope());
  myPropertyNames.addAll(myPreferredFieldNames);
  myFieldPointerOperator=myRefExpr.hasAt();
  myMethodPointerOperator=myRefExpr.getDotTokenType() == GroovyTokenTypes.mMEMBER_POINTER;
  myIsMap=isMap();
  final PsiType thisType=GrReferenceResolveUtil.getQualifierType(myRefExpr);
  mySubstitutorComputer=new SubstitutorComputer(thisType,PsiType.EMPTY_ARRAY,PsiType.EMPTY_ARRAY,myRefExpr,myRefExpr.getParent());
}
