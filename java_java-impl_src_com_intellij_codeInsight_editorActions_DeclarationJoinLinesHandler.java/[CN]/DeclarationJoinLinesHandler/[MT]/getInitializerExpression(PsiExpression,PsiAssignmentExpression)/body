{
  PsiExpression initializerExpression;
  final IElementType originalOpSign=assignment.getOperationTokenType();
  final PsiExpression rExpression=assignment.getRExpression();
  if (originalOpSign == JavaTokenType.EQ) {
    initializerExpression=rExpression;
  }
 else {
    if (initializer == null)     return null;
    String opSign=null;
    if (originalOpSign == JavaTokenType.ANDEQ) {
      opSign="&";
    }
 else     if (originalOpSign == JavaTokenType.ASTERISKEQ) {
      opSign="*";
    }
 else     if (originalOpSign == JavaTokenType.DIVEQ) {
      opSign="/";
    }
 else     if (originalOpSign == JavaTokenType.GTGTEQ) {
      opSign=">>";
    }
 else     if (originalOpSign == JavaTokenType.GTGTGTEQ) {
      opSign=">>>";
    }
 else     if (originalOpSign == JavaTokenType.LTLTEQ) {
      opSign="<<";
    }
 else     if (originalOpSign == JavaTokenType.MINUSEQ) {
      opSign="-";
    }
 else     if (originalOpSign == JavaTokenType.OREQ) {
      opSign="|";
    }
 else     if (originalOpSign == JavaTokenType.PERCEQ) {
      opSign="%";
    }
 else     if (originalOpSign == JavaTokenType.PLUSEQ) {
      opSign="+";
    }
 else     if (originalOpSign == JavaTokenType.XOREQ) {
      opSign="^";
    }
    try {
      final Project project=assignment.getProject();
      String initializerText=initializer.getText() + opSign;
      final String rightText=rExpression.getText();
      if (ParenthesesUtils.areParenthesesNeeded(assignment.getOperationSign(),rExpression)) {
        initializerText+="(" + rightText + ")";
      }
 else {
        initializerText+=rightText;
      }
      initializerExpression=JavaPsiFacade.getElementFactory(project).createExpressionFromText(initializerText,assignment);
      initializerExpression=(PsiExpression)CodeStyleManager.getInstance(project).reformat(initializerExpression);
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
      return null;
    }
  }
  return initializerExpression;
}
