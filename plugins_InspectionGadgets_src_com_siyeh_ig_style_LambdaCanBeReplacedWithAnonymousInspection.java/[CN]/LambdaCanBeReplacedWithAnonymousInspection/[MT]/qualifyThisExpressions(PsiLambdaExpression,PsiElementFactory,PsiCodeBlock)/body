{
  ChangeContextUtil.encodeContextInfo(blockFromText,true);
  final PsiClass thisClass=RefactoringChangeUtil.getThisClass(lambdaExpression);
  final String thisClassName=thisClass != null ? thisClass.getName() : null;
  if (thisClassName != null) {
    final PsiThisExpression thisAccessExpr=thisClass instanceof PsiAnonymousClass ? null : RefactoringChangeUtil.createThisExpression(lambdaExpression.getManager(),thisClass);
    ChangeContextUtil.decodeContextInfo(blockFromText,thisClass,thisAccessExpr);
    final Set<PsiExpression> replacements=new HashSet<>();
    blockFromText.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitClass(      PsiClass aClass){
      }
      @Override public void visitSuperExpression(      PsiSuperExpression expression){
        super.visitSuperExpression(expression);
        if (expression.getQualifier() == null) {
          replacements.add(expression);
        }
      }
      @Override public void visitMethodCallExpression(      PsiMethodCallExpression expression){
        super.visitMethodCallExpression(expression);
        if (thisAccessExpr != null) {
          final PsiMethod psiMethod=expression.resolveMethod();
          final PsiReferenceExpression methodExpression=expression.getMethodExpression();
          if (psiMethod != null && !psiMethod.hasModifierProperty(PsiModifier.STATIC) && methodExpression.getQualifierExpression() == null) {
            replacements.add(expression);
          }
        }
      }
    }
);
    for (    PsiExpression expression : replacements) {
      if (expression instanceof PsiSuperExpression) {
        expression.replace(psiElementFactory.createExpressionFromText(thisClassName + "." + expression.getText(),expression));
      }
 else       if (expression instanceof PsiMethodCallExpression) {
        ((PsiMethodCallExpression)expression).getMethodExpression().setQualifierExpression(thisAccessExpr);
      }
 else {
        LOG.error("Unexpected expression");
      }
    }
  }
}
