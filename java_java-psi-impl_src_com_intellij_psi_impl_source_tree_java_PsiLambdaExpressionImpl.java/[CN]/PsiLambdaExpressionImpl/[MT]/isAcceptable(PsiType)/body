{
  if (leftType instanceof PsiIntersectionType) {
    for (    PsiType conjunctType : ((PsiIntersectionType)leftType).getConjuncts()) {
      if (isAcceptable(conjunctType))       return true;
    }
    return false;
  }
  final PsiExpressionList argsList=PsiTreeUtil.getParentOfType(this,PsiExpressionList.class);
  leftType=FunctionalInterfaceParameterizationUtil.getGroundTargetType(leftType,this);
  final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(leftType);
  if (MethodCandidateInfo.ourOverloadGuard.currentStack().contains(argsList)) {
    final MethodCandidateInfo.CurrentCandidateProperties candidateProperties=MethodCandidateInfo.getCurrentMethod(argsList);
    if (candidateProperties != null) {
      final PsiMethod method=candidateProperties.getMethod();
      if (hasFormalParameterTypes() && !InferenceSession.isPertinentToApplicability(this,method)) {
        return true;
      }
      if (LambdaUtil.isPotentiallyCompatibleWithTypeParameter(this,argsList,method)) {
        return true;
      }
    }
  }
  if (!isPotentiallyCompatible(leftType)) {
    return false;
  }
  if (MethodCandidateInfo.ourOverloadGuard.currentStack().contains(argsList) && !hasFormalParameterTypes()) {
    return true;
  }
  final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(resolveResult);
  if (interfaceMethod == null)   return false;
  final PsiSubstitutor substitutor=LambdaUtil.getSubstitutor(interfaceMethod,resolveResult);
  if (hasFormalParameterTypes()) {
    final PsiParameter[] lambdaParameters=getParameterList().getParameters();
    final PsiType[] parameterTypes=interfaceMethod.getSignature(substitutor).getParameterTypes();
    for (int lambdaParamIdx=0, length=lambdaParameters.length; lambdaParamIdx < length; lambdaParamIdx++) {
      PsiParameter parameter=lambdaParameters[lambdaParamIdx];
      final PsiTypeElement typeElement=parameter.getTypeElement();
      if (typeElement != null) {
        final PsiType lambdaFormalType=toArray(typeElement.getType());
        final PsiType methodParameterType=toArray(parameterTypes[lambdaParamIdx]);
        if (!lambdaFormalType.equals(methodParameterType)) {
          return false;
        }
      }
    }
  }
  PsiType methodReturnType=interfaceMethod.getReturnType();
  if (methodReturnType != null && methodReturnType != PsiType.VOID) {
    Map<PsiElement,PsiType> map=LambdaUtil.getFunctionalTypeMap();
    try {
      if (map.put(this,leftType) != null) {
        return false;
      }
      return LambdaHighlightingUtil.checkReturnTypeCompatible(this,substitutor.substitute(methodReturnType)) == null;
    }
  finally {
      map.remove(this);
    }
  }
  return true;
}
