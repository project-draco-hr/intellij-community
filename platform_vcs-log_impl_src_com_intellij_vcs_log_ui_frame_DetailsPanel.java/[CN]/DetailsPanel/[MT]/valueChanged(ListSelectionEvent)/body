{
  if (event != null && event.getValueIsAdjusting())   return;
  VcsFullCommitDetails newCommitDetails=null;
  int[] rows=myGraphTable.getSelectedRows();
  myLoadingPanel.stopLoading();
  if (rows.length < 1) {
    myEmptyText.setText("No commits selected");
    myMainContentPanel.removeAll();
    return;
  }
  int MAX_ROWS=50;
  myEmptyText.setText("");
  GraphTableModel tableModel=myGraphTable.getModel();
  int count=0;
  for (int i=0; i < Math.min(rows.length,MAX_ROWS); i++) {
    int row=rows[i];
    boolean reuseExisting=count + 1 < myMainContentPanel.getComponentCount();
    ReferencesPanel referencesPanel;
    DataPanel dataPanel;
    if (!reuseExisting) {
      referencesPanel=new ReferencesPanel(myColorManager);
      dataPanel=new DataPanel(myLogData.getProject(),myLogData.isMultiRoot());
      if (i > 0) {
        myMainContentPanel.add(new SeparatorComponent(8,OnePixelDivider.BACKGROUND,null));
        count++;
      }
      referencesPanel.setAlignmentX(LEFT_ALIGNMENT);
      myMainContentPanel.add(referencesPanel);
      count++;
      dataPanel.setAlignmentX(LEFT_ALIGNMENT);
      myMainContentPanel.add(dataPanel);
      count++;
    }
 else {
      if (i > 0)       count++;
      referencesPanel=(ReferencesPanel)myMainContentPanel.getComponent(count++);
      dataPanel=(DataPanel)myMainContentPanel.getComponent(count++);
    }
    VcsFullCommitDetails commitData=tableModel.getFullDetails(row);
    if (commitData instanceof LoadingDetails) {
      myLoadingPanel.startLoading();
      dataPanel.setData(null);
      referencesPanel.setReferences(Collections.emptyList());
      updateDetailsBorder(null);
    }
 else {
      dataPanel.setData(commitData);
      referencesPanel.setReferences(sortRefs(commitData.getId(),commitData.getRoot()));
      updateDetailsBorder(commitData);
      newCommitDetails=commitData;
    }
    List<String> branches=null;
    if (!(commitData instanceof LoadingDetails)) {
      branches=myLogData.getContainingBranchesGetter().requestContainingBranches(commitData.getRoot(),commitData.getId());
    }
    dataPanel.setBranches(branches);
    dataPanel.update();
  }
  while (count < myMainContentPanel.getComponentCount()) {
    myMainContentPanel.remove(count);
  }
  if (rows.length > MAX_ROWS) {
    myMainContentPanel.add(new SeparatorComponent(8,OnePixelDivider.BACKGROUND,null));
    JBLabel label=new JBLabel("(showing " + MAX_ROWS + " of "+ rows.length+ " selected commits)");
    label.setFont(getDataPanelFont());
    label.setAlignmentX(LEFT_ALIGNMENT);
    myMainContentPanel.add(label);
  }
  if (!Comparing.equal(myCurrentCommitDetails,newCommitDetails)) {
    myCurrentCommitDetails=newCommitDetails;
    myScrollPane.getVerticalScrollBar().setValue(0);
  }
}
