{
  if (refElement == null)   return;
  if (descriptors.length == 0)   return;
  if (filterSuppressed) {
    if (!isOutputPathSet() || !(myToolWrapper instanceof LocalInspectionToolWrapper)) {
synchronized (lock) {
        Map<RefEntity,CommonProblemDescriptor[]> problemElements=getProblemElements();
        CommonProblemDescriptor[] problems=problemElements.get(refElement);
        problems=problems == null ? descriptors : mergeDescriptors(problems,descriptors);
        problemElements.put(refElement,problems);
      }
      for (      CommonProblemDescriptor description : descriptors) {
        getProblemToElements().put(description,refElement);
        collectQuickFixes(description.getFixes(),refElement);
      }
    }
 else {
      writeOutput(descriptors,refElement);
    }
  }
 else {
    for (    CommonProblemDescriptor descriptor : descriptors) {
      getProblemToElements().put(descriptor,refElement);
    }
  }
  final GlobalInspectionContextImpl context=getContext();
  if (context.isViewClosed() || !(refElement instanceof RefElement)) {
    return;
  }
  if (myToolWrapper instanceof LocalInspectionToolWrapper && !ApplicationManager.getApplication().isUnitTestMode()) {
    InspectionResultsView view=context.createViewIfNeed();
    if (!isDisposed()) {
      ApplicationManager.getApplication().assertReadAccessAllowed();
synchronized (view.getTreeStructureUpdateLock()) {
        final InspectionNode toolNode;
        final AnalysisUIOptions uiOptions=context.getUIOptions();
        toolNode=myToolNode == null ? view.addTool(myToolWrapper,HighlightDisplayLevel.find(getSeverity((RefElement)refElement)),uiOptions.GROUP_BY_SEVERITY,!view.getCurrentProfile().isEditable()) : myToolNode;
        final Map<RefEntity,CommonProblemDescriptor[]> problems=new HashMap<RefEntity,CommonProblemDescriptor[]>();
        problems.put(refElement,descriptors);
        final Map<String,Set<RefEntity>> contents=new HashMap<String,Set<RefEntity>>();
        final String groupName=refElement.getRefManager().getGroupName((RefElement)refElement);
        Set<RefEntity> content=contents.get(groupName);
        if (content == null) {
          content=new HashSet<RefEntity>();
          contents.put(groupName,content);
        }
        content.add(refElement);
        view.getProvider().appendToolNodeContent(context,toolNode,(InspectionTreeNode)toolNode.getParent(),uiOptions.SHOW_STRUCTURE,true,contents,problems);
      }
    }
  }
}
