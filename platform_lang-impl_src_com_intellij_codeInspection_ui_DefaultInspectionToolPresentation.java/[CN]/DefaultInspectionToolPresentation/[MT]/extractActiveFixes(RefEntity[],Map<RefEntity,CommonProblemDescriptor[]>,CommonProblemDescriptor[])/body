{
  final Set<CommonProblemDescriptor> allowedDescriptorSet=allowedDescriptors == null ? null : ContainerUtil.newHashSet(allowedDescriptors);
  Map<Class,QuickFixAction> result=new com.intellij.util.containers.HashMap<>();
  boolean isFirst=true;
  for (  RefEntity refElement : refElements) {
    final CommonProblemDescriptor[] descriptors=descriptorMap.get(refElement);
    if (descriptors == null)     continue;
    for (    CommonProblemDescriptor d : descriptors) {
      if (allowedDescriptorSet != null && !allowedDescriptorSet.contains(d)) {
        continue;
      }
      QuickFix[] fixes=d.getFixes();
      if (fixes != null) {
        if (isFirst) {
          for (          QuickFix fix : fixes) {
            if (fix == null)             continue;
            final Class klass=getFixClass(fix);
            LocalQuickFixWrapper quickFixWrapper=new LocalQuickFixWrapper(fix,myToolWrapper);
            result.put(klass,quickFixWrapper);
          }
          isFirst=false;
        }
 else {
          for (          Class clazz : new ArrayList<>(result.keySet())) {
            boolean isFound=false;
            for (            QuickFix fix : fixes) {
              if (fix == null)               continue;
              final Class klass=getFixClass(fix);
              if (clazz.equals(klass)) {
                isFound=true;
                final QuickFixAction quickFixAction=result.get(clazz);
                try {
                  String familyName=fix.getFamilyName();
                  ((LocalQuickFixWrapper)quickFixAction).setText(StringUtil.escapeMnemonics(familyName));
                }
 catch (                AbstractMethodError e) {
                  ((LocalQuickFixWrapper)quickFixAction).setText("Name is not available");
                }
                break;
              }
            }
            if (!isFound) {
              result.remove(clazz);
              if (result.isEmpty()) {
                return QuickFixAction.EMPTY;
              }
            }
          }
        }
      }
    }
  }
  return result.values().isEmpty() ? null : result.values().toArray(new QuickFixAction[result.size()]);
}
