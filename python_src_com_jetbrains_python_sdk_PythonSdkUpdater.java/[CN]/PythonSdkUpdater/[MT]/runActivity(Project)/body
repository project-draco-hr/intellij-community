{
  final Application application=ApplicationManager.getApplication();
  if (application.isUnitTestMode()) {
    return;
  }
  final Set<Sdk> sdksToUpdate=new HashSet<Sdk>();
  for (  Module module : ModuleManager.getInstance(project).getModules()) {
    final Sdk sdk=PythonSdkType.findPythonSdk(module);
    if (sdk != null) {
      final SdkType sdkType=sdk.getSdkType();
      if (sdkType instanceof PythonSdkType && !myAlreadyUpdated.contains(sdk.getHomePath())) {
        sdksToUpdate.add(sdk);
      }
    }
  }
  if (!sdksToUpdate.isEmpty()) {
    ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(7000);
        }
 catch (        InterruptedException ignore) {
        }
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            ProgressManager.getInstance().run(new Task.Backgroundable(project,PyBundle.message("sdk.gen.updating.skels"),false){
              @Override public void run(              @NotNull ProgressIndicator indicator){
                for (                Sdk sdk : sdksToUpdate) {
                  PythonSdkType.refreshSkeletonsOfSDK(sdk);
                  long start_time=System.currentTimeMillis();
                  updateSdkPath(sdk,PythonSdkType.getSysPath(sdk.getHomePath()));
                  LOG.info("Updating sys.path took " + (System.currentTimeMillis() - start_time) + " ms");
                  myAlreadyUpdated.add(sdk.getHomePath());
                }
              }
            }
);
          }
        }
);
      }
    }
);
  }
}
