{
  final String homePath=sdk.getHomePath();
synchronized (ourLock) {
    ourScheduledToRefresh.add(homePath);
  }
  if (!updateLocalSdkPaths(sdk,sdkModificator)) {
    return false;
  }
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
synchronized (ourLock) {
        if (!ourScheduledToRefresh.contains(homePath)) {
          return;
        }
        ourScheduledToRefresh.remove(homePath);
      }
      ProgressManager.getInstance().run(new Task.Backgroundable(project,PyBundle.message("sdk.gen.updating.skeletons"),false){
        @Override public void run(        @NotNull ProgressIndicator indicator){
          final Project project=getProject();
          final Sdk sdk=PythonSdkType.findSdkByPath(homePath);
          if (sdk != null) {
            ourUnderRefresh.put(homePath);
            try {
              final String skeletonsPath=PythonSdkType.getSkeletonsPath(PathManager.getSystemPath(),homePath);
              try {
                if (PythonSdkType.isRemote(sdk) && project == null && ownerComponent == null) {
                  LOG.error("For refreshing skeletons of remote SDK, either project or owner component must be specified");
                }
                LOG.info("Performing background update of skeletons for SDK " + sdk.getHomePath());
                PySkeletonRefresher.refreshSkeletonsOfSdk(project,ownerComponent,skeletonsPath,sdk);
                updateRemoteSdkPaths(sdk);
              }
 catch (              InvalidSdkException e) {
                if (PythonSdkType.isVagrant(sdk) || PythonSdkType.isDocker(sdk)) {
                  PythonSdkType.notifyRemoteSdkSkeletonsFail(e,new Runnable(){
                    @Override public void run(){
                      final Sdk sdk=PythonSdkType.findSdkByPath(homePath);
                      if (sdk != null) {
                        update(sdk,null,project,ownerComponent);
                      }
                    }
                  }
);
                }
 else                 if (!PythonSdkType.isInvalid(sdk)) {
                  LOG.error(e);
                }
              }
            }
  finally {
              ourUnderRefresh.remove(homePath);
            }
          }
        }
      }
);
    }
  }
,ModalityState.NON_MODAL);
  return true;
}
