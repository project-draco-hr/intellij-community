{
  final Set<Sdk> sdksToUpdate=new HashSet<Sdk>();
  for (  Module module : ModuleManager.getInstance(project).getModules()) {
    final Sdk sdk=PythonSdkType.findPythonSdk(module);
    if (sdk != null) {
      final SdkTypeId sdkType=sdk.getSdkType();
      if (sdkType instanceof PythonSdkType && !myAlreadyUpdated.contains(sdk.getHomePath())) {
        sdksToUpdate.add(sdk);
      }
    }
  }
  if (!sdksToUpdate.isEmpty()) {
    ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
      public void run(){
        if (delay > 0) {
          try {
            Thread.sleep(delay);
          }
 catch (          InterruptedException ignore) {
          }
        }
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            ProgressManager.getInstance().run(new Task.Backgroundable(project,PyBundle.message("sdk.gen.updating.skels"),false){
              @Override public void run(              @NotNull ProgressIndicator indicator){
                for (                final Sdk sdk : sdksToUpdate) {
                  try {
                    LOG.info("Performing background update of skeletons for SDK " + sdk.getHomePath());
                    updateSdk(project,sdk);
                  }
 catch (                  InvalidSdkException e) {
                    if (!PythonSdkType.isInvalid(sdk)) {
                      LOG.warn(e);
                      final Notification notification=PythonSdkType.createInvalidSdkNotification(myProject);
                      notification.notify(myProject);
                    }
                  }
                  myAlreadyUpdated.add(sdk.getHomePath());
                }
              }
            }
);
          }
        }
);
      }
    }
);
  }
}
