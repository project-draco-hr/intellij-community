{
  final int N=100000000;
  final Application application=ApplicationManager.getApplication();
  String err=null;
  for (int i=0; i < 4; i++) {
    Callable<String> runnable=new Callable<String>(){
      @Override public String call() throws Exception {
        try {
          assertFalse(application.isReadAccessAllowed());
          long l2=PlatformTestUtil.measure(new Runnable(){
            @Override public void run(){
              for (int i=0; i < N; i++) {
                AccessToken token=application.acquireReadActionLock();
                try {
                }
  finally {
                  token.finish();
                }
              }
            }
          }
);
          long l1=PlatformTestUtil.measure(new Runnable(){
            @Override public void run(){
              for (int i=0; i < N; i++) {
                application.runReadAction(new Runnable(){
                  @Override public void run(){
                  }
                }
);
              }
            }
          }
);
          assertFalse(application.isReadAccessAllowed());
          int ratioPercent=(int)((l1 - l2) * 100.0 / l1);
          if (Math.abs(ratioPercent) > 20) {
            return "Suspiciously different times for acquireReadActionLock(" + l2 + "ms) vs runReadAction("+ l1+ "ms). Ratio: "+ ratioPercent+ "%";
          }
        }
 catch (        Throwable e) {
          exception=e;
        }
        return null;
      }
    }
;
    err=application.executeOnPooledThread(runnable).get();
    if (err == null)     break;
    System.err.println("Still trying, attempt " + i + ": "+ err);
  }
  assertNull(err);
  if (exception != null)   throw exception;
}
