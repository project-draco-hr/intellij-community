{
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new ThrowableComputable<Void,Exception>(){
    @Override public Void compute() throws Exception {
      try {
        assertFalse(ApplicationManager.getApplication().isReadAccessAllowed());
        assertFalse(ApplicationManager.getApplication().isDispatchThread());
        for (int i=0; i < 100; i++) {
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              ApplicationManager.getApplication().runWriteAction(new Runnable(){
                @Override public void run(){
                  TimeoutUtil.sleep(20);
                }
              }
);
            }
          }
);
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            @Override public void run(){
              TimeoutUtil.sleep(20);
            }
          }
);
        }
      }
 catch (      Exception e) {
        exception=e;
      }
      return null;
    }
  }
,"cc",false,getProject());
  if (exception != null)   throw exception;
}
