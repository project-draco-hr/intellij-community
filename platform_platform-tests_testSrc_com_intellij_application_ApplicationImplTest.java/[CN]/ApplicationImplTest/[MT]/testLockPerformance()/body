{
  int iterations=Timings.adjustAccordingToMySpeed(3000,true);
  System.out.println("iterations = " + iterations);
  final int readIterations=iterations;
  final int writeIterations=iterations;
  final int numOfThreads=10;
  PlatformTestUtil.startPerformanceTest("lock performance",200,new ThrowableRunnable(){
    @Override public void run() throws Throwable {
      final CountDownLatch reads=new CountDownLatch(numOfThreads);
      for (int i=0; i < numOfThreads; i++) {
        final String name="stress thread " + i;
        new Thread(new Runnable(){
          @Override public void run(){
            System.out.println(name);
            for (int i=0; i < readIterations; i++) {
              ApplicationManager.getApplication().runReadAction(new Runnable(){
                @Override public void run(){
                }
              }
);
            }
            reads.countDown();
          }
        }
,name).start();
      }
      System.out.println("write start");
      for (int i=0; i < writeIterations; i++) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
          }
        }
);
      }
      System.out.println("write end");
      reads.await();
    }
  }
).assertTiming();
}
