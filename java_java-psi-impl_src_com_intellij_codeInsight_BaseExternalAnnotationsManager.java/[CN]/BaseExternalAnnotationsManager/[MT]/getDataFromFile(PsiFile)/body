{
  Pair<MostlySingularMultiMap<String,AnnotationData>,Long> cached=annotationFileToDataAndModStamp.get(file);
  final long fileModificationStamp=file.getModificationStamp();
  if (cached != null && cached.getSecond() == fileModificationStamp) {
    return cached.getFirst();
  }
  MostlySingularMultiMap<String,AnnotationData> data=new MostlySingularMultiMap<String,AnnotationData>();
  try {
    Document document=JDOMUtil.loadDocument(escapeAttributes(file.getText()));
    Element rootElement=document.getRootElement();
    List<Element> itemElements=rootElement == null ? Collections.<Element>emptyList() : (List<Element>)rootElement.getChildren("item");
    boolean sorted=true;
    boolean modified=false;
    String prevItemName=null;
    for (    Element element : itemElements) {
      String externalName=element.getAttributeValue("name");
      if (externalName == null) {
        element.detach();
        modified=true;
        continue;
      }
      if (prevItemName != null && prevItemName.compareTo(externalName) > 0) {
        sorted=false;
      }
      prevItemName=externalName;
      for (      Element annotationElement : (List<Element>)element.getChildren("annotation")) {
        String annotationFQN=annotationElement.getAttributeValue("name");
        if (StringUtil.isEmpty(annotationFQN))         continue;
        annotationFQN=intern(annotationFQN);
        List<Element> children=(List<Element>)annotationElement.getChildren();
        StringBuilder buf=new StringBuilder(children.size() * "name=value,".length());
        for (        Element annotationParameter : children) {
          if (buf.length() != 0) {
            buf.append(",");
          }
          String nameValue=annotationParameter.getAttributeValue("name");
          if (nameValue != null) {
            buf.append(nameValue);
            buf.append("=");
          }
          buf.append(annotationParameter.getAttributeValue("val"));
        }
        String annotationParameters=buf.length() == 0 ? "" : intern(buf.toString());
        for (        AnnotationData existingData : data.get(externalName)) {
          if (existingData.annotationClassFqName.equals(annotationFQN)) {
            duplicateError(file,externalName,"Duplicate annotation '" + annotationFQN + "' ");
          }
        }
        AnnotationData annData=internAnnotationData(new AnnotationData(annotationFQN,annotationParameters,file.getVirtualFile()));
        data.add(externalName,annData);
      }
    }
    if (!sorted) {
      modified=true;
      List<Element> items=new ArrayList<Element>(rootElement.getChildren("item"));
      rootElement.removeChildren("item");
      Collections.sort(items,new Comparator<Element>(){
        @Override public int compare(        Element item1,        Element item2){
          String externalName1=item1.getAttributeValue("name");
          String externalName2=item2.getAttributeValue("name");
          return externalName1.compareTo(externalName2);
        }
      }
);
      for (      Element item : items) {
        rootElement.addContent(item);
      }
    }
    final VirtualFile virtualFile=file.getVirtualFile();
    if (modified && virtualFile.isInLocalFileSystem() && virtualFile.isWritable()) {
      final Project project=file.getProject();
      final FileDocumentManager fileDocumentManager=FileDocumentManager.getInstance();
      final StringWriter string=new StringWriter(file.getTextLength());
      JDOMUtil.writeDocument(document,string,"\n");
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          if (file.getModificationStamp() == fileModificationStamp && !fileDocumentManager.isFileModified(virtualFile)) {
            ApplicationManager.getApplication().runWriteAction(new Runnable(){
              @Override public void run(){
                com.intellij.openapi.editor.Document editorDoc=PsiDocumentManager.getInstance(project).getDocument(file);
                if (editorDoc != null) {
                  editorDoc.setText(string.toString());
                  fileDocumentManager.saveDocument(editorDoc);
                }
              }
            }
);
          }
        }
      }
,project.getDisposed());
    }
  }
 catch (  IOException e) {
    LOG.error(e);
  }
catch (  JDOMException e) {
    LOG.error(e);
  }
  if (data.isEmpty()) {
    data=MostlySingularMultiMap.emptyMap();
  }
  data.compact();
  Pair<MostlySingularMultiMap<String,AnnotationData>,Long> pair=Pair.create(data,file.getModificationStamp());
  annotationFileToDataAndModStamp.put(file,pair);
  return data;
}
