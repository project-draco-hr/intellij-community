{
  final PsiFile containingFile=preferCompiledElement(listOwner).getContainingFile();
  if (!(containingFile instanceof PsiJavaFile))   return null;
  final VirtualFile virtualFile=containingFile.getVirtualFile();
  if (virtualFile == null)   return null;
  final List<PsiFile> files=myExternalAnnotations.get(virtualFile);
  if (files == NULL_LIST)   return null;
  if (files != null) {
    boolean allValid=true;
    for (    PsiFile file : files) {
      if (!file.isValid()) {
        allValid=false;
        break;
      }
    }
    if (allValid) {
      return files;
    }
  }
  Set<PsiFile> possibleAnnotations=new THashSet<PsiFile>();
  String relativePath=((PsiJavaFile)containingFile).getPackageName().replace('.','/') + '/' + ANNOTATIONS_XML;
  for (  VirtualFile root : getExternalAnnotationsRoots(virtualFile)) {
    VirtualFile ext=root.findFileByRelativePath(relativePath);
    if (ext != null && ext.isValid()) {
      PsiFile psiFile=myPsiManager.findFile(ext);
      if (psiFile != null) {
        possibleAnnotations.add(psiFile);
      }
    }
  }
  if (possibleAnnotations.isEmpty()) {
    myExternalAnnotations.put(virtualFile,NULL_LIST);
    return null;
  }
  List<PsiFile> result=new SmartList<PsiFile>(possibleAnnotations);
  Collections.sort(result,new Comparator<PsiFile>(){
    @Override public int compare(    PsiFile f1,    PsiFile f2){
      boolean w1=f1.isWritable();
      boolean w2=f2.isWritable();
      return w1 == w2 ? 0 : w1 ? -1 : 1;
    }
  }
);
  myExternalAnnotations.put(virtualFile,result);
  return result;
}
