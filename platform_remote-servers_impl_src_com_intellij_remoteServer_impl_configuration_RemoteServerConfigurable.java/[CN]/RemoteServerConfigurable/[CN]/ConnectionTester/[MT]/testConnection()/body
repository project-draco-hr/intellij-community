{
  final ServerConnection connection=ServerConnectionManager.getInstance().createTemporaryConnection(myInnerServer);
  final AtomicReference<Boolean> connectedRef=new AtomicReference<Boolean>(null);
  final Semaphore semaphore=new Semaphore();
  semaphore.down();
  connection.connectIfNeeded(new ServerConnector.ConnectionCallback(){
    @Override public void connected(    @NotNull ServerRuntimeInstance serverRuntimeInstance){
      connectedRef.set(true);
      semaphore.up();
      connection.disconnect();
    }
    @Override public void errorOccurred(    @NotNull String errorMessage){
      connectedRef.set(false);
      semaphore.up();
    }
  }
);
  new Task.Backgroundable(null,"Connecting...",true){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      while (!indicator.isCanceled()) {
        if (semaphore.waitFor(500)) {
          break;
        }
      }
      final Boolean connected=connectedRef.get();
      if (connected == null) {
        return;
      }
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          if (myConnectionTester == ConnectionTester.this) {
            setConnectionStatus(connected,connected ? "Connection successful" : "Cannot connect: " + connection.getStatusText());
          }
        }
      }
);
    }
  }
.queue();
}
