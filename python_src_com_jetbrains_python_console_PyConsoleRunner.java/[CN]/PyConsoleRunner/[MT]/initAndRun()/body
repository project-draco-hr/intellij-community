{
  final Process process=createProcess();
  myConsoleView=new PyLanguageConsoleView(myProject,myConsoleTitle);
  myProcessHandler=createProcessHandler(process);
  ProcessTerminatedListener.attach(myProcessHandler);
  for (  Module module : ModuleManager.getInstance(myProject).getModules()) {
    final Sdk pythonSdk=PythonSdkType.findPythonSdk(module);
    if (pythonSdk != null) {
      final LanguageLevel languageLevel=PythonSdkType.getLanguageLevelForSdk(pythonSdk);
      final PsiFile psiFile=getLanguageConsole().getFile();
      psiFile.putUserData(ModuleUtil.KEY_MODULE,module);
      final VirtualFile vFile=psiFile.getVirtualFile();
      if (vFile != null) {
        vFile.putUserData(LanguageLevel.KEY,languageLevel);
      }
      break;
    }
  }
  myProcessHandler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    ProcessEvent event){
      myRunAction.getTemplatePresentation().setEnabled(false);
      myConsoleView.getConsole().setPrompt("");
      myConsoleView.getConsole().getConsoleEditor().setRendererMode(true);
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          myConsoleView.getConsole().getConsoleEditor().getComponent().updateUI();
        }
      }
);
    }
  }
);
  myConsoleView.getConsole().setPrompt(PyConsoleHighlightingUtil.ORDINARY_PROMPT.trim());
  myConsoleView.attachToProcess(myProcessHandler);
  final Executor defaultExecutor=ExecutorRegistry.getInstance().getExecutorById(DefaultRunExecutor.EXECUTOR_ID);
  final DefaultActionGroup toolbarActions=new DefaultActionGroup();
  final ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,toolbarActions,false);
  final JPanel panel=new JPanel(new BorderLayout());
  panel.add(actionToolbar.getComponent(),BorderLayout.WEST);
  panel.add(myConsoleView.getComponent(),BorderLayout.CENTER);
  final RunContentDescriptor myDescriptor=new RunContentDescriptor(myConsoleView,myProcessHandler,panel,myConsoleTitle);
  final AnAction[] actions=fillToolBarActions(toolbarActions,defaultExecutor,myDescriptor);
  registerActionShortcuts(actions,getLanguageConsole().getConsoleEditor().getComponent());
  registerActionShortcuts(actions,panel);
  panel.updateUI();
  ExecutionManager.getInstance(myProject).getContentManager().showRunContent(defaultExecutor,myDescriptor);
  final ToolWindow window=ToolWindowManager.getInstance(myProject).getToolWindow(defaultExecutor.getId());
  window.activate(new Runnable(){
    public void run(){
      IdeFocusManager.getInstance(myProject).requestFocus(getLanguageConsole().getCurrentEditor().getContentComponent(),true);
    }
  }
);
  myProcessHandler.startNotify();
}
