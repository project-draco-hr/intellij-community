{
  final AnAction stopAction=createStopAction();
  toolbarActions.add(stopAction);
  final AnAction closeAction=createCloseAction(defaultExecutor,myDescriptor);
  toolbarActions.add(closeAction);
  myRunAction=new DumbAwareAction(null,null,IconLoader.getIcon("/actions/execute.png")){
    public void actionPerformed(    final AnActionEvent e){
      runExecuteActionInner(true);
    }
    public void update(    final AnActionEvent e){
      final EditorEx editor=getLanguageConsole().getConsoleEditor();
      final Lookup lookup=LookupManager.getActiveLookup(editor);
      e.getPresentation().setEnabled(!myProcessHandler.isProcessTerminated() && (lookup == null || !lookup.isCompletion()));
    }
  }
;
  final ActionManager manager=ActionManager.getInstance();
  if (manager.getAction("Console.Execute") != null) {
    EmptyAction.setupAction(myRunAction,"Console.Execute",null);
    KeymapManager.getInstance().getActiveKeymap().addShortcut("Console.Execute",new KeyboardShortcut(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),null));
  }
 else {
    EmptyAction.setupAction(myRunAction,"Python.Console.Execute",null);
    KeymapManager.getInstance().getActiveKeymap().addShortcut("Python.Console.Execute",new KeyboardShortcut(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),null));
  }
  toolbarActions.add(myRunAction);
  toolbarActions.add(CommonActionsManager.getInstance().createHelpAction("interactive_console"));
  final PairProcessor<AnActionEvent,String> historyProcessor=new PairProcessor<AnActionEvent,String>(){
    public boolean process(    final AnActionEvent e,    final String s){
      new WriteCommandAction(myProject,getLanguageConsole().getFile()){
        protected void run(        final Result result) throws Throwable {
          getLanguageConsole().getEditorDocument().setText(s == null ? "" : s);
        }
      }
.execute();
      return true;
    }
  }
;
  final AnAction historyAction=manager.getAction("Console.History.Next");
  if (historyAction != null) {
    final AnAction historyNextAction=ConsoleHistoryModel.createHistoryAction(myHistory,true,historyProcessor);
    final AnAction historyPrevAction=ConsoleHistoryModel.createHistoryAction(myHistory,false,historyProcessor);
    historyNextAction.getTemplatePresentation().setVisible(false);
    historyPrevAction.getTemplatePresentation().setVisible(false);
    return new AnAction[]{stopAction,closeAction,myRunAction,historyNextAction,historyPrevAction};
  }
 else {
    final AnAction historyNextAction=createHistoryAction(myHistory,true,historyProcessor);
    manager.registerAction("Console.History.Next",historyNextAction);
    EmptyAction.setupAction(historyNextAction,"Console.History.Next",null);
    KeymapManager.getInstance().getActiveKeymap().addShortcut("Console.History.Next",new KeyboardShortcut(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,KeyEvent.CTRL_MASK),null));
    final AnAction historyPrevAction=createHistoryAction(myHistory,false,historyProcessor);
    manager.registerAction("Console.History.Prev",historyPrevAction);
    EmptyAction.setupAction(historyPrevAction,"Console.History.Prev",null);
    KeymapManager.getInstance().getActiveKeymap().addShortcut("Console.History.Prev",new KeyboardShortcut(KeyStroke.getKeyStroke(KeyEvent.VK_UP,KeyEvent.CTRL_MASK),null));
    historyNextAction.getTemplatePresentation().setVisible(false);
    historyPrevAction.getTemplatePresentation().setVisible(false);
    return new AnAction[]{stopAction,closeAction,myRunAction,historyNextAction,historyPrevAction};
  }
}
