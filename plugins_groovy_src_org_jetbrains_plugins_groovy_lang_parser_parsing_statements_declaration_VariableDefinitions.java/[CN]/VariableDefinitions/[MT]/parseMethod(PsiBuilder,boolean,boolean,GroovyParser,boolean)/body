{
  if (!hasModifiers && !constructor) {
    builder.error(GroovyBundle.message("method.definition.without.modifier"));
    return GroovyElementTypes.WRONGWAY;
  }
  builder.advanceLexer();
  ParameterList.parse(builder,GroovyTokenTypes.mRPAREN,parser);
  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  if (!ParserUtils.getToken(builder,GroovyTokenTypes.mRPAREN)) {
    builder.error(GroovyBundle.message("rparen.expected"));
    ThrowClause.parse(builder);
    return methodType(isAnnotationMember,constructor);
  }
  if (isAnnotationMember && builder.getTokenType() == GroovyTokenTypes.kDEFAULT) {
    ParserUtils.getToken(builder,GroovyTokenTypes.kDEFAULT);
    ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
    if (!AnnotationArguments.parseAnnotationMemberValueInitializer(builder,parser)) {
      builder.error(GroovyBundle.message("annotation.initializer.expected"));
    }
  }
  if (ParserUtils.lookAhead(builder,GroovyTokenTypes.mNLS,GroovyTokenTypes.kTHROWS) || ParserUtils.lookAhead(builder,GroovyTokenTypes.mNLS,GroovyTokenTypes.mLCURLY)) {
    ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  }
  if (isAnnotationMember && builder.getTokenType() == GroovyTokenTypes.kTHROWS) {
    builder.error(GroovyBundle.message("throws.clause.is.not.allowed.in.at.interface"));
  }
  ThrowClause.parse(builder);
  if (builder.getTokenType() == GroovyTokenTypes.mLCURLY || ParserUtils.lookAhead(builder,GroovyTokenTypes.mNLS,GroovyTokenTypes.mLCURLY)) {
    ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
    if (isAnnotationMember) {
      builder.error(GroovyBundle.message("separator.or.rcurly.expected"));
    }
    if (constructor) {
      ConstructorBody.parseConstructorBody(builder,parser);
    }
 else {
      OpenOrClosableBlock.parseOpenBlock(builder,parser);
    }
  }
  return methodType(isAnnotationMember,constructor);
}
