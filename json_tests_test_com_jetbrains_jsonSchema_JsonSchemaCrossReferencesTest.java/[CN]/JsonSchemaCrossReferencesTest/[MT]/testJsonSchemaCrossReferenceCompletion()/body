{
  configureByFiles(null,BASE_PATH + "/completion.json",BASE_PATH + "/base.json",BASE_PATH + "/inherited.json");
  String moduleDir=null;
  VirtualFile[] children=getProject().getBaseDir().getChildren();
  for (  VirtualFile child : children) {
    if (child.isDirectory()) {
      moduleDir=child.getName();
      break;
    }
  }
  Assert.assertNotNull(moduleDir);
  final JsonSchemaMappingsProjectConfiguration instance=JsonSchemaMappingsProjectConfiguration.getInstance(getProject());
  final JsonSchemaMappingsConfigurationBase.SchemaInfo base=new JsonSchemaMappingsConfigurationBase.SchemaInfo("base",moduleDir + "/base.json",false,Collections.emptyList());
  instance.addSchema(base);
  final JsonSchemaMappingsConfigurationBase.SchemaInfo inherited=new JsonSchemaMappingsConfigurationBase.SchemaInfo("inherited",moduleDir + "/inherited.json",false,Collections.singletonList(new JsonSchemaMappingsConfigurationBase.Item("*.json",true,false)));
  instance.addSchema(inherited);
  complete();
  assertStringItems("\"one\"","\"two\"");
  LookupImpl lookup=getActiveLookup();
  if (lookup != null)   lookup.hide();
  JsonSchemaService.Impl.get(getProject()).reset();
  complete();
  assertStringItems("\"one\"","\"two\"");
  instance.removeSchema(inherited);
  instance.removeSchema(base);
}
