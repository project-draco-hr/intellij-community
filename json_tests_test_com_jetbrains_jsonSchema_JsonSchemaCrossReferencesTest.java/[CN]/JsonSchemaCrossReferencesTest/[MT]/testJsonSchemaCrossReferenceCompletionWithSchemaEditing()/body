{
  configureByFiles(null,BASE_PATH + "/completion.json",BASE_PATH + "/base.json",BASE_PATH + "/inherited.json");
  String moduleDir=null;
  VirtualFile moduleFile=null;
  VirtualFile[] children=getProject().getBaseDir().getChildren();
  for (  VirtualFile child : children) {
    if (child.isDirectory()) {
      moduleDir=child.getName();
      moduleFile=child;
      break;
    }
  }
  Assert.assertNotNull(moduleDir);
  final JsonSchemaMappingsProjectConfiguration instance=JsonSchemaMappingsProjectConfiguration.getInstance(getProject());
  final JsonSchemaMappingsConfigurationBase.SchemaInfo base=new JsonSchemaMappingsConfigurationBase.SchemaInfo("base","/" + moduleDir + "/base.json",false,Collections.emptyList());
  instance.addSchema(base);
  final JsonSchemaMappingsConfigurationBase.SchemaInfo inherited=new JsonSchemaMappingsConfigurationBase.SchemaInfo("inherited","/" + moduleDir + "/inherited.json",false,Collections.singletonList(new JsonSchemaMappingsConfigurationBase.Item("*.json",true,false)));
  instance.addSchema(inherited);
  complete();
  assertStringItems("\"one\"","\"two\"");
  final VirtualFile baseFile=moduleFile.findChild("base.json");
  Assert.assertNotNull(baseFile);
  FileDocumentManager fileDocumentManager=FileDocumentManager.getInstance();
  Document document=fileDocumentManager.getDocument(baseFile);
  Assert.assertNotNull(document);
  String str="\"enum\": [\"one\", \"two\"]";
  int start=document.getText().indexOf(str);
  Assert.assertTrue(start > 0);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      document.replaceString(start,start + str.length(),"\"enum\": [\"one1\", \"two1\"]");
      fileDocumentManager.saveAllDocuments();
    }
  }
);
  LookupImpl lookup=getActiveLookup();
  if (lookup != null)   lookup.hide();
  complete();
  assertStringItems("\"one1\"","\"two1\"");
  instance.removeSchema(inherited);
  instance.removeSchema(base);
}
