{
  RangeHighlighter[] rm=editor.getMarkupModel().getAllHighlighters();
  int highlighterStartOffset=-1;
  int highlighterEndOffset=-1;
  for (  RangeHighlighter rh : rm) {
    if (rh.getLayer() == (HighlighterLayer.LAST + 1)) {
      highlighterStartOffset=rh.getStartOffset();
      highlighterEndOffset=rh.getEndOffset();
      rh.dispose();
      break;
    }
  }
  if (highlighterStartOffset == -1) {
    return;
  }
  VirtualFile vfOpenedFile=FileDocumentManager.getInstance().getFile(editor.getDocument());
  boolean toBeDrawn=false;
  for (  TaskWindow tw : taskWindows) {
    if (toBeDrawn) {
      if (tw.getResolveStatus()) {
        return;
      }
      tw.draw(editor,true);
      return;
    }
    int startOffset=tw.getRangeHighlighterStartOffset();
    int endOffset=tw.getRangeHighlighterEndOffset();
    if (startOffset != -1 && endOffset != -1) {
      if (startOffset == highlighterStartOffset) {
        tw.setResolved();
        int newLineNum=editor.getDocument().getLineCount();
        int highlighterStartLine=getLineNumByOffset(editor,highlighterStartOffset);
        int highlighterEndLine=getLineNumByOffset(editor,highlighterEndOffset);
        if (newLineNum != myLastLineNum) {
          int deltaLines=newLineNum - myLastLineNum;
          myLastLineNum=newLineNum;
          incrementAllLines(editor,highlighterStartLine - deltaLines,deltaLines);
          tw.incrementLine(-deltaLines);
          incrementAllInLine(editor,highlighterEndLine,endOffset);
        }
 else {
          int delta=highlighterEndOffset - endOffset;
          incrementAllInLineAfterOffset(editor,highlighterEndLine,tw.getStartOffset(),delta);
        }
        tw.setOffsetInLine(highlighterEndOffset - highlighterStartOffset);
        toBeDrawn=true;
        FileDocumentManager.getInstance().saveAllDocuments();
        FileDocumentManager.getInstance().reloadFiles(vfOpenedFile);
      }
    }
  }
}
