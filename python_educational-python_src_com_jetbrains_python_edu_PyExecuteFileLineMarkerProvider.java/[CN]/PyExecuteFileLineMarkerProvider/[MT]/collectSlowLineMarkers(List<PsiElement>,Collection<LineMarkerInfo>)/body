{
  if (elements.isEmpty()) {
    return;
  }
  PsiElement file=elements.get(0).getContainingFile();
  final RunContextAction runAction=new RunContextAction(DefaultRunExecutor.getRunExecutorInstance());
  final PyExecuteFileExtensionPoint[] extensions=ApplicationManager.getApplication().getExtensions(PyExecuteFileExtensionPoint.EP_NAME);
  final List<AnAction> actions=new ArrayList<AnAction>();
  final DefaultActionGroup group=new DefaultActionGroup();
  if (PlatformUtils.isPyCharmEducational()) {
    group.add(runAction);
  }
  for (  PyExecuteFileExtensionPoint extension : extensions) {
    AnAction action=extension.getRunAction();
    if (action != null && extension.accept(file.getProject())) {
      actions.add(action);
      group.add(action);
    }
  }
  if (actions.isEmpty() && !PlatformUtils.isPyCharmEducational()) {
    return;
  }
  Icon icon=PlatformUtils.isPyCharmEducational() ? AllIcons.Actions.Execute : actions.get(0).getTemplatePresentation().getIcon();
  final LineMarkerInfo<PsiElement> markerInfo=new LineMarkerInfo<PsiElement>(file,file.getTextRange(),icon,Pass.UPDATE_OVERRIDEN_MARKERS,new Function<PsiElement,String>(){
    @Override public String fun(    PsiElement e){
      String text="Execute '" + e.getContainingFile().getName() + "'";
      return PlatformUtils.isPyCharmEducational() ? text : actions.get(0).getTemplatePresentation().getText();
    }
  }
,null,GutterIconRenderer.Alignment.RIGHT){
    @Nullable @Override public GutterIconRenderer createGutterRenderer(){
      return new LineMarkerGutterIconRenderer<PsiElement>(this){
        @Override public AnAction getClickAction(){
          return PlatformUtils.isPyCharmEducational() ? runAction : actions.get(0);
        }
        @Nullable @Override public ActionGroup getPopupMenuActions(){
          if (!PlatformUtils.isPyCharmEducational() && actions.isEmpty()) {
            return null;
          }
          if (actions.size() == 1) {
            return null;
          }
          return group;
        }
      }
;
    }
  }
;
  result.add(markerInfo);
}
