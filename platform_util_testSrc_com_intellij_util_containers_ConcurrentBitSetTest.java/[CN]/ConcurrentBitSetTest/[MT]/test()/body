{
  ConcurrentBitSet bitSet=new ConcurrentBitSet();
  final ConcurrentBitSet emptySet=new ConcurrentBitSet();
  int N=3000;
  assertEquals(0,bitSet.nextClearBit(0));
  assertEquals(bitSet,emptySet);
  for (int i=0; i < N; i++) {
    assertEquals(-1,bitSet.nextSetBit(i));
    assertEquals(i,bitSet.nextClearBit(i));
    assertFalse(bitSet.get(i));
    bitSet.set(i);
    assertTrue(bitSet.get(i));
    bitSet.clear(i);
    assertFalse(bitSet.get(i));
    assertEquals(bitSet,emptySet);
  }
  bitSet=new ConcurrentBitSet();
  for (int b=0; b < N; b++) {
    assertEquals(bitSet,emptySet);
    boolean set=bitSet.flip(b);
    assertTrue(set);
    assertEquals(b,bitSet.nextSetBit(0));
    assertEquals(b == 0 ? 1 : 0,bitSet.nextClearBit(0));
    assertEquals(b + 1,bitSet.nextClearBit(b));
    assertFalse(bitSet.get(b == 0 ? 1 : 0));
    assertTrue(bitSet.get(b));
    for (int i=0; i < N; i++) {
      assertEquals(i <= b ? b : -1,bitSet.nextSetBit(i));
      assertEquals(i == b ? b + 1 : i,bitSet.nextClearBit(i));
      assertEquals(i == b,bitSet.get(i));
    }
    boolean after=bitSet.flip(b);
    assertFalse(after);
    assertEquals(-1,bitSet.nextSetBit(0));
    assertEquals(0,bitSet.nextClearBit(0));
    assertEquals(b,bitSet.nextClearBit(b));
    assertFalse(bitSet.get(0));
    assertFalse(bitSet.get(b));
    for (int i=0; i < N; i++) {
      assertEquals(-1,bitSet.nextSetBit(i));
      assertEquals(i,bitSet.nextClearBit(i));
      assertFalse(bitSet.get(i));
    }
  }
  bitSet.set(100,true);
  assertFalse(bitSet.equals(emptySet));
  bitSet.clear();
  assertEquals(bitSet,emptySet);
}
