{
  final Set<Sdk> candidates=new LinkedHashSet<>();
  final Sdk defaultSdk=ProjectRootManager.getInstance(project).getProjectSdk();
  if (defaultSdk != null && defaultSdk.getSdkType() instanceof JavaSdkType) {
    candidates.add(defaultSdk);
  }
  for (  Module module : ModuleManager.getInstance(project).getModules()) {
    final Sdk sdk=ModuleRootManager.getInstance(module).getSdk();
    if (sdk != null && sdk.getSdkType() instanceof JavaSdkType) {
      candidates.add(sdk);
    }
  }
  final JavaSdk javaSdkType=JavaSdk.getInstance();
  Sdk projectJdk=null;
  int sdkMinorVersion=0;
  JavaSdkVersion sdkVersion=null;
  for (  Sdk candidate : candidates) {
    final String vs=candidate.getVersionString();
    if (vs != null) {
      final JavaSdkVersion candidateVersion=getSdkVersion(javaSdkType,vs);
      if (candidateVersion != null) {
        final int candidateMinorVersion=getMinorVersion(vs);
        if (projectJdk == null) {
          sdkVersion=candidateVersion;
          sdkMinorVersion=candidateMinorVersion;
          projectJdk=candidate;
        }
 else {
          final int result=candidateVersion.compareTo(sdkVersion);
          if (result > 0 || result == 0 && candidateMinorVersion > sdkMinorVersion) {
            sdkVersion=candidateVersion;
            sdkMinorVersion=candidateMinorVersion;
            projectJdk=candidate;
          }
        }
      }
    }
  }
  final JavaSdkVersion oldestPossible=getOldestPossiblePlatformForBuildProcess(project);
  if (projectJdk == null || sdkVersion == null || !sdkVersion.isAtLeast(oldestPossible)) {
    final Sdk internalJdk=JavaAwareProjectJdkTableImpl.getInstanceEx().getInternalJdk();
    projectJdk=internalJdk;
    sdkVersion=javaSdkType.getVersion(internalJdk);
  }
  return Pair.create(projectJdk,sdkVersion);
}
