{
  final JPanel panel=new JPanel(new BorderLayout());
  DefaultActionGroup group=new DefaultActionGroup();
  final JComponent toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent();
  final CommonActionsManager commonActionsManager=CommonActionsManager.getInstance();
  final TreeExpander treeExpander=new TreeExpander(){
    public void expandAll(){
      TreeUtil.expandAll(myActionsTree.getTree());
    }
    public boolean canExpand(){
      return true;
    }
    public void collapseAll(){
      TreeUtil.collapseAll(myActionsTree.getTree(),0);
    }
    public boolean canCollapse(){
      return true;
    }
  }
;
  group.add(commonActionsManager.createExpandAllAction(treeExpander,myActionsTree.getTree()));
  group.add(commonActionsManager.createCollapseAllAction(treeExpander,myActionsTree.getTree()));
  panel.add(toolbar,BorderLayout.WEST);
  group=new DefaultActionGroup();
  ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  actionToolbar.setReservePlaceAutoPopupIcon(false);
  final JComponent searchToolbar=actionToolbar.getComponent();
  final Alarm alarm=new Alarm();
  myFilterComponent=new FilterComponent("KEYMAP_IN_QUICK_LISTS",5){
    public void filter(){
      alarm.cancelAllRequests();
      alarm.addRequest(new Runnable(){
        public void run(){
          if (!myFilterComponent.isShowing())           return;
          if (!myTreeExpansionMonitor.isFreeze())           myTreeExpansionMonitor.freeze();
          myFilteringPanel.setShortcut(null);
          final String filter=getFilter();
          myActionsTree.filter(filter,myQuicklists);
          final JTree tree=myActionsTree.getTree();
          TreeUtil.expandAll(tree);
          if (filter == null || filter.length() == 0) {
            TreeUtil.collapseAll(tree,0);
            myTreeExpansionMonitor.restore();
          }
        }
      }
,300);
    }
  }
;
  myFilterComponent.reset();
  panel.add(myFilterComponent,BorderLayout.CENTER);
  group.add(new AnAction(KeyMapBundle.message("filter.shortcut.action.text"),KeyMapBundle.message("filter.shortcut.action.text"),AllIcons.Actions.ShortcutFilter){
    public void actionPerformed(    AnActionEvent e){
      myFilterComponent.reset();
      myActionsTree.reset(myKeymap,myQuicklists);
      myFilteringPanel.showPopup(searchToolbar);
    }
  }
);
  group.add(new AnAction(KeyMapBundle.message("filter.clear.action.text"),KeyMapBundle.message("filter.clear.action.text"),AllIcons.Actions.GC){
    @Override public void update(    AnActionEvent event){
      boolean enabled=null != myFilteringPanel.getShortcut();
      Presentation presentation=event.getPresentation();
      presentation.setEnabled(enabled);
      presentation.setIcon(enabled ? AllIcons.Actions.Cancel : EmptyIcon.ICON_16);
    }
    public void actionPerformed(    AnActionEvent e){
      myFilteringPanel.setShortcut(null);
      myActionsTree.filter(null,myQuicklists);
      TreeUtil.collapseAll(myActionsTree.getTree(),0);
      myTreeExpansionMonitor.restore();
    }
  }
);
  panel.add(searchToolbar,BorderLayout.EAST);
  return panel;
}
