{
  DebuggerInvocationUtil.invokeLater(getProject(),new Runnable(){
    @Override public void run(){
      if (!isHintHidden()) {
        JComponent component;
        if (!isActiveTooltipApplicable(descriptor.getValue())) {
          component=HintUtil.createInformationLabel(text);
        }
 else {
          component=createExpandableHintComponent(text,new Runnable(){
            @Override public void run(){
              final DebuggerContextImpl debuggerContext=DebuggerManagerEx.getInstanceEx(getProject()).getContext();
              final DebugProcessImpl debugProcess=debuggerContext.getDebugProcess();
              debugProcess.getManagerThread().schedule(new DebuggerContextCommandImpl(debuggerContext){
                @Override public void threadAction(){
                  descriptor.setRenderer(debugProcess.getAutoRenderer(descriptor));
                  final String expressionText=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
                    @Override public String compute(){
                      return myCurrentExpression.getText();
                    }
                  }
);
                  createAndShowTree(expressionText,descriptor,debuggerContext);
                }
              }
);
            }
          }
);
        }
        if (!showHint(component))         return;
        if (getType() == ValueHintType.MOUSE_CLICK_HINT) {
          HintUtil.createInformationLabel(text).requestFocusInWindow();
        }
      }
    }
  }
);
}
