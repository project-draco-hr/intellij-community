{
  myCbEnabled=new JBCheckBox(ExecutionBundle.message("run.configuration.use.alternate.jre.checkbox"));
  myFieldWithHistory=new TextFieldWithHistory();
  myFieldWithHistory.setHistorySize(-1);
  final ArrayList<String> foundJDKs=new ArrayList<>();
  final Sdk[] allJDKs=ProjectJdkTable.getInstance().getAllJdks();
  for (  Sdk sdk : allJDKs) {
    foundJDKs.add(sdk.getName());
  }
  for (  JreProvider provider : JreProvider.EP_NAME.getExtensions()) {
    String path=provider.getJrePath();
    if (!StringUtil.isEmpty(path)) {
      foundJDKs.add(path);
    }
  }
  for (  Sdk jdk : allJDKs) {
    String homePath=jdk.getHomePath();
    if (!SystemInfo.isMac) {
      final File jre=new File(jdk.getHomePath(),"jre");
      if (jre.isDirectory()) {
        homePath=jre.getPath();
      }
    }
    if (!foundJDKs.contains(homePath)) {
      foundJDKs.add(homePath);
    }
  }
  myFieldWithHistory.setHistory(foundJDKs);
  myPathField=new ComponentWithBrowseButton<>(myFieldWithHistory,null);
  myPathField.addBrowseFolderListener(ExecutionBundle.message("run.configuration.select.alternate.jre.label"),ExecutionBundle.message("run.configuration.select.jre.dir.label"),null,BrowseFilesListener.SINGLE_DIRECTORY_DESCRIPTOR,TextComponentAccessor.TEXT_FIELD_WITH_HISTORY_WHOLE_TEXT);
  setLayout(new MigLayout("ins 0, gap 10, fill, flowx"));
  add(myCbEnabled,"shrinkx");
  add(myPathField,"growx, pushx");
  InsertPathAction.addTo(myFieldWithHistory.getTextEditor());
  myCbEnabled.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      enabledChanged();
    }
  }
);
  enabledChanged();
  setAnchor(myCbEnabled);
  updateUI();
}
