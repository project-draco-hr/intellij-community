{
  super.visitLocalVariable(variable);
  final PsiCodeBlock codeBlock=PsiTreeUtil.getParentOfType(variable,PsiCodeBlock.class);
  if (codeBlock == null) {
    return;
  }
  final PsiType type=variable.getType();
  if (!TypeUtils.typeEquals(CommonClassNames.JAVA_LANG_STRING_BUFFER,type) && !TypeUtils.typeEquals(CommonClassNames.JAVA_LANG_STRING_BUILDER,type)) {
    return;
  }
  final PsiExpression initializer=variable.getInitializer();
  if (!isNewStringBufferOrStringBuilder(initializer)) {
    return;
  }
  final ReplaceableByStringVisitor visitor=new ReplaceableByStringVisitor(variable);
  codeBlock.accept(visitor);
  if (!visitor.isReplaceable()) {
    return;
  }
  registerVariableError(variable,variable,type);
}
