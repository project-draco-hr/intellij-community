{
  final PsiElement parent=expression.getParent();
  if (!(parent instanceof PsiExpressionList)) {
    return false;
  }
  final PsiElement grandParent=parent.getParent();
  if (!(grandParent instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  PsiExpression qualifier=methodExpression.getQualifierExpression();
  while (qualifier instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression callExpression=(PsiMethodCallExpression)qualifier;
    final PsiReferenceExpression methodExpression1=callExpression.getMethodExpression();
    qualifier=methodExpression1.getQualifierExpression();
  }
  if (qualifier instanceof PsiReferenceExpression) {
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)qualifier;
    final PsiElement target=referenceExpression.resolve();
    if (!myVariable.equals(target)) {
      return false;
    }
  }
  final PsiMethod method=methodCallExpression.resolveMethod();
  if (method == null) {
    return false;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return false;
  }
  final String name1=aClass.getQualifiedName();
  if (CommonClassNames.JAVA_LANG_STRING_BUFFER.equals(name1) || CommonClassNames.JAVA_LANG_STRING_BUILDER.equals(name1)) {
    return true;
  }
  return false;
}
