{
  if (element instanceof PsiNewExpression) {
    final PsiNewExpression newExpression=(PsiNewExpression)element;
    final PsiExpressionList argumentList=newExpression.getArgumentList();
    if (argumentList == null) {
      return null;
    }
    final PsiExpression[] arguments=argumentList.getExpressions();
    if (arguments.length == 1) {
      final PsiExpression argument=arguments[0];
      final PsiType type=argument.getType();
      if (!PsiType.INT.equals(type)) {
        if (type != null && type.equalsToText("java.lang.CharSequence")) {
          result.append("String.valueOf(").append(argument.getText()).append(')');
        }
 else         if (ParenthesesUtils.getPrecedence(argument) > ParenthesesUtils.ADDITIVE_PRECEDENCE) {
          result.append('(').append(argument.getText()).append(')');
        }
 else {
          result.append(argument.getText());
        }
      }
    }
    return result;
  }
  for (  PsiElement child : element.getChildren()) {
    if (child instanceof PsiExpressionList) {
      continue;
    }
    if (buildStringExpression(child,result) == null) {
      return null;
    }
  }
  if (element instanceof PsiWhiteSpace) {
    if (element.getText().contains("\n") && result.length() > 0) {
      result.append('\n');
    }
  }
 else   if (element instanceof PsiComment) {
    result.append(element.getText());
  }
 else   if (element instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)element;
    final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    final String referenceName=methodExpression.getReferenceName();
    if ("toString".equals(referenceName)) {
      if (result.length() == 0) {
        result.append("\"\"");
      }
    }
 else     if ("append".equals(referenceName)) {
      final PsiExpression[] arguments=argumentList.getExpressions();
      if (arguments.length == 0) {
        return null;
      }
      if (arguments.length > 1) {
        if (result.length() != 0) {
          insertPlus(result);
        }
        result.append("String.valueOf").append(argumentList.getText());
        return result;
      }
      final PsiExpression argument=arguments[0];
      final PsiType type=argument.getType();
      final String argumentText=argument.getText();
      if (result.length() != 0) {
        insertPlus(result);
        if (ParenthesesUtils.getPrecedence(argument) > ParenthesesUtils.ADDITIVE_PRECEDENCE || (type instanceof PsiPrimitiveType && ParenthesesUtils.getPrecedence(argument) == ParenthesesUtils.ADDITIVE_PRECEDENCE)) {
          result.append('(').append(argumentText).append(')');
        }
 else {
          if (StringUtil.startsWithChar(argumentText,'+')) {
            result.append(' ');
          }
          result.append(argumentText);
        }
      }
 else {
        if (type instanceof PsiPrimitiveType) {
          if (argument instanceof PsiLiteralExpression) {
            final PsiLiteralExpression literalExpression=(PsiLiteralExpression)argument;
            if (PsiType.CHAR.equals(literalExpression.getType())) {
              result.append('"');
              final Character c=(Character)literalExpression.getValue();
              if (c != null) {
                result.append(StringUtil.escapeStringCharacters(c.toString()));
              }
              result.append('"');
            }
 else {
              result.append('"').append(literalExpression.getValue()).append('"');
            }
          }
 else {
            result.append("String.valueOf(").append(argumentText).append(")");
          }
        }
 else {
          if (ParenthesesUtils.getPrecedence(argument) >= ParenthesesUtils.ADDITIVE_PRECEDENCE) {
            result.append('(').append(argumentText).append(')');
          }
 else {
            if (type != null && !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
              result.append("String.valueOf(").append(argumentText).append(")");
            }
 else {
              result.append(argumentText);
            }
          }
        }
      }
    }
  }
  return result;
}
