{
  List<String> expectedChanges=prepareLocalChangesOverwrittenBy(myUltimate,numFiles);
  final List<Change> actualChanges=ContainerUtil.newArrayList();
  checkoutOrMerge(operation,"feature",new TestUiHandler(){
    @Override public int showSmartOperationDialog(    @NotNull Project project,    @NotNull List<Change> changes,    @NotNull Collection<String> paths,    @NotNull String operation,    @Nullable String forceButton){
      actualChanges.addAll(changes);
      return DialogWrapper.CANCEL_EXIT_CODE;
    }
  }
);
  assertFalse("Local changes were not shown in the dialog",actualChanges.isEmpty());
  if (newGitVersion()) {
    Collection<String> actualPaths=ContainerUtil.map(actualChanges,new Function<Change,String>(){
      @Override public String fun(      Change change){
        return FileUtil.getRelativePath(myUltimate.getRoot().getPath(),change.getAfterRevision().getFile().getPath(),'/');
      }
    }
);
    assertSameElements("Incorrect set of local changes was shown in the dialog",actualPaths,expectedChanges);
  }
}
