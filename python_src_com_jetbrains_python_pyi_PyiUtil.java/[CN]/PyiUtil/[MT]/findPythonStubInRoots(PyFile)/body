{
  final QualifiedName qName=findImportableName(file);
  final Sdk sdk=PythonSdkType.getSdk(file);
  if (qName != null && sdk != null) {
    final List<String> stubQNameComponents=ContainerUtil.newArrayList("python-stubs");
    stubQNameComponents.addAll(qName.getComponents());
    final QualifiedName stubQName=QualifiedName.fromComponents(stubQNameComponents);
    final Project project=file.getProject();
    final PythonSdkPathCache cache=PythonSdkPathCache.getInstance(project,sdk);
    final List<PsiElement> cachedResults=cache.get(stubQName);
    if (cachedResults != null) {
      return getFirstPyiFile(cachedResults);
    }
    final ArrayList<PsiElement> results=new ArrayList<>();
    final PsiManager psiManager=PsiManager.getInstance(project);
    final String nameAsPath=StringUtil.join(qName.getComponents(),"/");
    final List<String> paths=ImmutableList.of(nameAsPath + "/__init__.pyi",nameAsPath + ".pyi");
    final RootVisitor rootVisitor=new RootVisitor(){
      @Override public boolean visitRoot(      VirtualFile root,      @Nullable Module module,      @Nullable Sdk sdk,      boolean isModuleSource){
        if (root.isValid()) {
          for (          String path : paths) {
            final VirtualFile pyiVirtualFile=root.findFileByRelativePath(path);
            if (pyiVirtualFile != null) {
              final PsiFile pyiFile=psiManager.findFile(pyiVirtualFile);
              if (pyiFile instanceof PyiFile) {
                results.add(pyiFile);
                return false;
              }
            }
          }
        }
        return true;
      }
    }
;
    RootVisitorHost.visitRoots(file,rootVisitor);
    RootVisitorHost.visitSdkRoots(sdk,rootVisitor);
    cache.put(stubQName,results);
    return getFirstPyiFile(results);
  }
  return null;
}
