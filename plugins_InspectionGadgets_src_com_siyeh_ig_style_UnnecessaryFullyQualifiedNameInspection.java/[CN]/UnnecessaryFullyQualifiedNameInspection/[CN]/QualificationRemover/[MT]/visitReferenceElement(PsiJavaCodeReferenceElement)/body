{
  super.visitReferenceElement(reference);
  final PsiElement parent=PsiTreeUtil.getParentOfType(reference,PsiImportStatementBase.class);
  if (parent != null) {
    return;
  }
  final String text=reference.getText();
  if (!text.equals(fullyQualifiedText)) {
    return;
  }
  final PsiDocComment containingComment=PsiTreeUtil.getParentOfType(reference,PsiDocComment.class);
  if (containingComment != null) {
    final PsiFile file=reference.getContainingFile();
    if ("package-info.java".equals(file.getName())) {
      return;
    }
    final CodeStyleSettings styleSettings=CodeStyleSettingsManager.getSettings(reference.getProject());
    final JavaCodeStyleSettings javaSettings=styleSettings.getCustomSettings(JavaCodeStyleSettings.class);
    if (javaSettings.useFqNamesInJavadocAlways()) {
      return;
    }
  }
  final PsiElement qualifier=reference.getQualifier();
  if (qualifier == null) {
    return;
  }
  try {
    qualifier.delete();
  }
 catch (  IncorrectOperationException e) {
    final Class<? extends QualificationRemover> aClass=getClass();
    final String className=aClass.getName();
    final Logger logger=Logger.getInstance(className);
    logger.error(e);
  }
  shortenedElements.add(reference);
}
