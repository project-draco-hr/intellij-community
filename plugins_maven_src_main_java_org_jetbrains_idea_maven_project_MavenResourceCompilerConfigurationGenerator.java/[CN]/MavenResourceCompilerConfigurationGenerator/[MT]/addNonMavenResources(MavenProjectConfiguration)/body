{
  Set<VirtualFile> processedRoots=new HashSet<>();
  for (  MavenProject project : myMavenProjectsManager.getProjects()) {
    for (    String dir : ContainerUtil.concat(project.getSources(),project.getTestSources())) {
      VirtualFile file=LocalFileSystem.getInstance().findFileByPath(dir);
      if (file != null) {
        processedRoots.add(file);
      }
    }
    for (    MavenResource resource : ContainerUtil.concat(project.getResources(),project.getTestResources())) {
      VirtualFile file=LocalFileSystem.getInstance().findFileByPath(resource.getDirectory());
      if (file != null) {
        processedRoots.add(file);
      }
    }
  }
  CompilerConfiguration compilerConfiguration=CompilerConfiguration.getInstance(myProject);
  for (  Module module : ModuleManager.getInstance(myProject).getModules()) {
    if (!myMavenProjectsManager.isMavenizedModule(module))     continue;
    for (    ContentEntry contentEntry : ModuleRootManager.getInstance(module).getContentEntries()) {
      for (      SourceFolder folder : contentEntry.getSourceFolders()) {
        VirtualFile file=folder.getFile();
        if (file == null)         continue;
        if (!compilerConfiguration.isExcludedFromCompilation(file) && !isUnderRoots(processedRoots,file)) {
          MavenModuleResourceConfiguration configuration=projectCfg.moduleConfigurations.get(module.getName());
          if (configuration == null)           continue;
          List<ResourceRootConfiguration> resourcesList=folder.isTestSource() ? configuration.testResources : configuration.resources;
          final ResourceRootConfiguration cfg=new ResourceRootConfiguration();
          cfg.directory=FileUtil.toSystemIndependentName(FileUtil.toSystemIndependentName(file.getPath()));
          CompilerModuleExtension compilerModuleExtension=CompilerModuleExtension.getInstance(module);
          if (compilerModuleExtension == null)           continue;
          String compilerOutputUrl=folder.isTestSource() ? compilerModuleExtension.getCompilerOutputUrlForTests() : compilerModuleExtension.getCompilerOutputUrl();
          cfg.targetPath=VfsUtil.urlToPath(compilerOutputUrl);
          convertIdeaExcludesToMavenExcludes(cfg,(CompilerConfigurationImpl)compilerConfiguration);
          resourcesList.add(cfg);
        }
      }
    }
  }
}
