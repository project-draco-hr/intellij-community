{
  if (!myMavenProjectsManager.isMavenizedProject()) {
    return;
  }
  final BuildManager buildManager=BuildManager.getInstance();
  final File projectSystemDir=buildManager.getProjectSystemDirectory(myProject);
  if (projectSystemDir == null) {
    return;
  }
  final File mavenConfigFile=new File(projectSystemDir,MavenProjectConfiguration.CONFIGURATION_FILE_RELATIVE_PATH);
  ProjectRootManager projectRootManager=ProjectRootManager.getInstance(myProject);
  ProjectFileIndex fileIndex=projectRootManager.getFileIndex();
  final int projectRootModificationCount=(int)projectRootManager.getModificationCount();
  final int mavenConfigCrc=myProjectsTree.getFilterConfigCrc(fileIndex);
  final int crc=mavenConfigCrc + projectRootModificationCount;
  final File crcFile=new File(mavenConfigFile.getParent(),"configuration.crc");
  if (!force) {
    try {
      DataInputStream crcInput=new DataInputStream(new FileInputStream(crcFile));
      try {
        final int lastCrc=crcInput.readInt();
        if (lastCrc == crc)         return;
        LOG.debug(String.format("project configuration changed: lastCrc = %d, currentCrc = %d, projectRootModificationCount = %d, mavenConfigCrc = %d",lastCrc,crc,projectRootModificationCount,mavenConfigCrc));
      }
  finally {
        crcInput.close();
      }
    }
 catch (    IOException ignored) {
      LOG.debug("Unable to read or find config file: " + ignored.getMessage());
    }
  }
  MavenProjectConfiguration projectConfig=new MavenProjectConfiguration();
  for (  MavenProject mavenProject : myMavenProjectsManager.getProjects()) {
    VirtualFile pomXml=mavenProject.getFile();
    Module module=fileIndex.getModuleForFile(pomXml);
    if (module == null)     continue;
    if (!Comparing.equal(mavenProject.getDirectoryFile(),fileIndex.getContentRootForFile(pomXml)))     continue;
    MavenModuleResourceConfiguration resourceConfig=new MavenModuleResourceConfiguration();
    MavenId projectId=mavenProject.getMavenId();
    resourceConfig.id=new MavenIdBean(projectId.getGroupId(),projectId.getArtifactId(),projectId.getVersion());
    MavenId parentId=mavenProject.getParentId();
    if (parentId != null) {
      resourceConfig.parentId=new MavenIdBean(parentId.getGroupId(),parentId.getArtifactId(),parentId.getVersion());
    }
    resourceConfig.directory=FileUtil.toSystemIndependentName(mavenProject.getDirectory());
    resourceConfig.delimitersPattern=MavenFilteredPropertyPsiReferenceProvider.getDelimitersPattern(mavenProject).pattern();
    for (    Map.Entry<String,String> entry : mavenProject.getModelMap().entrySet()) {
      String key=entry.getKey();
      String value=entry.getValue();
      if (value != null) {
        resourceConfig.modelMap.put(key,value);
      }
    }
    addEarModelMapEntries(mavenProject,resourceConfig.modelMap);
    Element pluginConfiguration=mavenProject.getPluginConfiguration("org.apache.maven.plugins","maven-resources-plugin");
    resourceConfig.outputDirectory=getResourcesPluginGoalOutputDirectory(mavenProject,pluginConfiguration,"resources");
    resourceConfig.testOutputDirectory=getResourcesPluginGoalOutputDirectory(mavenProject,pluginConfiguration,"testResources");
    addResources(resourceConfig.resources,mavenProject.getResources());
    addResources(resourceConfig.testResources,mavenProject.getTestResources());
    addWebResources(module,projectConfig,mavenProject);
    addEjbClientArtifactConfiguration(module,projectConfig,mavenProject);
    resourceConfig.filteringExclusions.addAll(MavenProjectsTree.getFilterExclusions(mavenProject));
    final Properties properties=getFilteringProperties(mavenProject);
    for (    Map.Entry<Object,Object> propEntry : properties.entrySet()) {
      resourceConfig.properties.put((String)propEntry.getKey(),(String)propEntry.getValue());
    }
    resourceConfig.escapeString=MavenJDOMUtil.findChildValueByPath(pluginConfiguration,"escapeString",null);
    String escapeWindowsPaths=MavenJDOMUtil.findChildValueByPath(pluginConfiguration,"escapeWindowsPaths");
    if (escapeWindowsPaths != null) {
      resourceConfig.escapeWindowsPaths=Boolean.parseBoolean(escapeWindowsPaths);
    }
    String overwrite=MavenJDOMUtil.findChildValueByPath(pluginConfiguration,"overwrite");
    if (overwrite != null) {
      resourceConfig.overwrite=Boolean.parseBoolean(overwrite);
    }
    projectConfig.moduleConfigurations.put(module.getName(),resourceConfig);
    generateManifest(mavenProject,module,resourceConfig);
  }
  addNonMavenResources(projectConfig);
  final Document document=new Document(new Element("maven-project-configuration"));
  XmlSerializer.serializeInto(projectConfig,document.getRootElement());
  buildManager.runCommand(new Runnable(){
    @Override public void run(){
      buildManager.clearState(myProject);
      FileUtil.createIfDoesntExist(mavenConfigFile);
      try {
        JDOMUtil.writeDocument(document,mavenConfigFile,"\n");
        DataOutputStream crcOutput=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(crcFile)));
        try {
          crcOutput.writeInt(crc);
        }
  finally {
          crcOutput.close();
        }
      }
 catch (      IOException e) {
        LOG.debug("Unable to write config file",e);
        throw new RuntimeException(e);
      }
    }
  }
);
}
