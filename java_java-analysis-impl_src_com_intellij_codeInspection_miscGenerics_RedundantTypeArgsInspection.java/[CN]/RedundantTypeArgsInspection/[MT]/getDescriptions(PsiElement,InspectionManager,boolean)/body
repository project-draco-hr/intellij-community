{
  final List<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
  place.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitMethodCallExpression(    PsiMethodCallExpression expression){
      super.visitMethodCallExpression(expression);
      final PsiType[] typeArguments=expression.getTypeArguments();
      if (typeArguments.length > 0) {
        checkCallExpression(expression.getMethodExpression(),typeArguments,expression,inspectionManager,problems);
      }
    }
    @Override public void visitNewExpression(    PsiNewExpression expression){
      super.visitNewExpression(expression);
      final PsiType[] typeArguments=expression.getTypeArguments();
      if (typeArguments.length > 0) {
        final PsiJavaCodeReferenceElement classReference=expression.getClassReference();
        if (classReference != null) {
          checkCallExpression(classReference,typeArguments,expression,inspectionManager,problems);
        }
      }
    }
    @Override public void visitMethodReferenceExpression(    PsiMethodReferenceExpression expression){
      super.visitMethodReferenceExpression(expression);
      checkMethodReference(expression,inspectionManager,problems);
    }
  }
);
  if (problems.isEmpty())   return null;
  return problems.toArray(new ProblemDescriptor[problems.size()]);
}
