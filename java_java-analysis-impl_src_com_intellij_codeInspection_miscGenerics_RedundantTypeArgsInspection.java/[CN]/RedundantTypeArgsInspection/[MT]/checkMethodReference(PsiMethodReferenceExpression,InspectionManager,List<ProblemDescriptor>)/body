{
  final PsiTypeElement qualifierTypeElement=expression.getQualifierType();
  if (qualifierTypeElement != null) {
    final PsiType psiType=qualifierTypeElement.getType();
    if (psiType instanceof PsiClassType && !(((PsiClassType)psiType).isRaw())) {
      final JavaResolveResult result=expression.advancedResolve(false);
      final PsiElement element=result.getElement();
      if (element instanceof PsiTypeParameterListOwner) {
        final PsiMethodReferenceExpression copy=createMethodReference(expression,qualifierTypeElement);
        final JavaResolveResult simplifiedResolve=copy.advancedResolve(false);
        final PsiElement candidate=simplifiedResolve.getElement();
        if (candidate == element) {
          final PsiJavaCodeReferenceElement referenceElement=qualifierTypeElement.getInnermostComponentReferenceElement();
          LOG.assertTrue(referenceElement != null,qualifierTypeElement);
          final PsiReferenceParameterList parameterList=referenceElement.getParameterList();
          LOG.assertTrue(parameterList != null);
          final ProblemDescriptor descriptor=inspectionManager.createProblemDescriptor(parameterList,InspectionsBundle.message("inspection.redundant.type.problem.descriptor"),new MyMethodReferenceFixAction(),ProblemHighlightType.LIKE_UNUSED_SYMBOL,false);
          problems.add(descriptor);
        }
      }
    }
  }
}
