{
  final XmlTag tag=attribute.getParent();
  final PsiFile file=tag.getContainingFile();
  final XmlExtension extension=XmlExtension.getExtension(file);
  final String prefix=attribute.getName().contains(":") && ((XmlAttributeImpl)attribute).getRealLocalName().length() > 0 ? attribute.getNamespacePrefix() + ":" : null;
  CompletionData completionData=CompletionUtil.getCompletionDataByElement(attribute,attribute.getContainingFile().getOriginalFile());
  boolean caseSensitive=!(completionData instanceof HtmlCompletionData) || ((HtmlCompletionData)completionData).isCaseSensitive();
  final List<XmlCompletionExtension> completionExtensions=new ArrayList<XmlCompletionExtension>();
  for (  XmlCompletionExtension completionExtension : XmlCompletionExtension.EP_NAME.getExtensions()) {
    if (completionExtension.isMyContext(tag)) {
      completionExtensions.add(completionExtension);
    }
  }
  for (  XmlAttributeDescriptor descriptor : descriptors) {
    if (isValidVariant(attribute,descriptor,attributes,extension)) {
      final String fullAttrName=descriptor.getName(tag);
      String name=fullAttrName;
      InsertHandler<LookupElement> insertHandler=XmlAttributeInsertHandler.INSTANCE;
      if (replacementInsertHandler != null) {
        insertHandler=replacementInsertHandler;
      }
 else       if (descriptor instanceof NamespaceAwareXmlAttributeDescriptor) {
        final String namespace=((NamespaceAwareXmlAttributeDescriptor)descriptor).getNamespace(tag);
        if (file instanceof XmlFile && namespace != null && namespace.length() > 0 && !name.contains(":") && tag.getPrefixByNamespace(namespace) == null) {
          insertHandler=new XmlAttributeInsertHandler(namespace);
        }
      }
      if (prefix == null || name.startsWith(prefix)) {
        if (prefix != null && name.length() > prefix.length()) {
          name=fullAttrName.substring(prefix.length());
        }
        LookupElementBuilder element=LookupElementBuilder.create(name);
        if (descriptor instanceof PsiPresentableMetaData) {
          element=element.withIcon(((PsiPresentableMetaData)descriptor).getIcon());
        }
        final int separator=name.indexOf(':');
        if (separator > 0) {
          element=element.withLookupString(name.substring(separator + 1));
        }
        element=element.withCaseSensitivity(caseSensitive).withInsertHandler(insertHandler);
        LookupElement e=null;
        for (        XmlCompletionExtension tagNameProvider : completionExtensions) {
          e=tagNameProvider.setupAttributeLookupElement(tag,descriptor,fullAttrName,element);
          if (e != null) {
            break;
          }
        }
        if (e == null) {
          e=descriptor.isRequired() ? PrioritizedLookupElement.withPriority(element.appendTailText("(required)",true),100) : element;
        }
        result.addElement(e);
      }
    }
  }
}
