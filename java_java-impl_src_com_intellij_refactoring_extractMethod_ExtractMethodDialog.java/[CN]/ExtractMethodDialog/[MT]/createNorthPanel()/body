{
  final JPanel main=new JPanel(new BorderLayout());
  final JPanel namePanel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.TOP,0,2,true,false));
  final JLabel nameLabel=new JLabel();
  nameLabel.setText(RefactoringBundle.message("changeSignature.name.prompt"));
  namePanel.add(nameLabel);
  namePanel.add(myNameField);
  nameLabel.setLabelFor(myNameField);
  myNameField.addDataChangedListener(new NameSuggestionsField.DataChanged(){
    @Override public void dataChanged(){
      update();
    }
  }
);
  myVisibilityPanel=createVisibilityPanel();
  final JPanel visibilityAndReturnType=new JPanel(new BorderLayout(2,0));
  visibilityAndReturnType.add(myVisibilityPanel,BorderLayout.WEST);
  final JPanel returnTypePanel=createReturnTypePanel();
  if (returnTypePanel != null) {
    visibilityAndReturnType.add(returnTypePanel,BorderLayout.EAST);
  }
  final JPanel visibilityAndName=new JPanel(new BorderLayout(2,0));
  visibilityAndName.add(visibilityAndReturnType,BorderLayout.WEST);
  visibilityAndName.add(namePanel,BorderLayout.CENTER);
  main.add(visibilityAndName,BorderLayout.CENTER);
  setOKActionEnabled(false);
  setOKActionEnabled(PsiNameHelper.getInstance(myProject).isIdentifier(myNameField.getEnteredName()));
  final JPanel options=new JPanel(new BorderLayout());
  options.add(createOptionsPanel(),BorderLayout.WEST);
  main.add(options,BorderLayout.SOUTH);
  return main;
}
