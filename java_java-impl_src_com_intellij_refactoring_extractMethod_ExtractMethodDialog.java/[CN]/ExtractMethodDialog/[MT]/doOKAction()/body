{
  MultiMap<PsiElement,String> conflicts=new MultiMap<PsiElement,String>();
  checkMethodConflicts(conflicts);
  if (!conflicts.isEmpty()) {
    final ConflictsDialog conflictsDialog=new ConflictsDialog(myProject,conflicts);
    if (!conflictsDialog.showAndGet()) {
      if (conflictsDialog.isShowConflicts())       close(CANCEL_EXIT_CODE);
      return;
    }
  }
  if (myMakeVarargs != null && myMakeVarargs.isSelected()) {
    final VariableData data=myInputVariables[myInputVariables.length - 1];
    if (data.type instanceof PsiArrayType) {
      data.type=new PsiEllipsisType(((PsiArrayType)data.type).getComponentType());
    }
  }
  final PsiMethod containingMethod=getContainingMethod();
  if (containingMethod != null && containingMethod.hasModifierProperty(PsiModifier.PUBLIC)) {
    PropertiesComponent.getInstance(myProject).setValue(EXTRACT_METHOD_DEFAULT_VISIBILITY,getVisibility());
  }
  if (myGenerateAnnotations != null && myGenerateAnnotations.isEnabled()) {
    PropertiesComponent.getInstance(myProject).setValue(EXTRACT_METHOD_GENERATE_ANNOTATIONS,String.valueOf(myGenerateAnnotations.isSelected()));
  }
  super.doOKAction();
}
