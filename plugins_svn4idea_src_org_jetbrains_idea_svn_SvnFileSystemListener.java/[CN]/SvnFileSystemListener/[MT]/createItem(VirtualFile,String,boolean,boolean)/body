{
  SvnVcs vcs=getVCS(dir);
  if (vcs == null) {
    return false;
  }
  final VcsShowConfirmationOption.Value value=vcs.getAddConfirmation().getValue();
  if (VcsShowConfirmationOption.Value.DO_NOTHING_SILENTLY.equals(value))   return false;
  if (isUndo(vcs) && SvnUtil.isAdminDirectory(dir,name)) {
    return false;
  }
  File ioDir=getIOFile(dir);
  boolean pendingAdd=isPendingAdd(vcs.getProject(),dir);
  if (!SvnUtil.isSvnVersioned(vcs.getProject(),ioDir) && !pendingAdd) {
    return false;
  }
  final File targetFile=new File(ioDir,name);
  Status status=getFileStatus(vcs,targetFile);
  if (status == null || status.getContentsStatus() == StatusType.STATUS_NONE || status.getContentsStatus() == StatusType.STATUS_UNVERSIONED) {
    myAddedFiles.putValue(vcs.getProject(),new AddedFileInfo(dir,name,null,recursive));
    return false;
  }
 else   if (SvnVcs.svnStatusIs(status,StatusType.STATUS_MISSING)) {
    return false;
  }
 else   if (SvnVcs.svnStatusIs(status,StatusType.STATUS_DELETED)) {
    NodeKind kind=status.getKind();
    if (directory && !kind.isDirectory() || !directory && !kind.isFile()) {
      return false;
    }
    try {
      if (isUndo(vcs)) {
        createRevertAction(vcs,targetFile,false).execute();
        return true;
      }
      myAddedFiles.putValue(vcs.getProject(),new AddedFileInfo(dir,name,null,recursive));
      return false;
    }
 catch (    VcsException e) {
      SVNFileUtil.deleteAll(targetFile,true);
      return false;
    }
  }
  return false;
}
