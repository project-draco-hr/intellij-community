{
  final StringBuilder result=new StringBuilder();
  StringBuilder markdown=new StringBuilder();
  boolean inCode=false;
  int inMultiStringCode=0;
  boolean inEnd=false;
  boolean escaped=false;
  boolean backQuoted=false;
  for (int i=0; i != source.length(); ++i) {
    final char charAt=source.charAt(i);
    if (charAt == '`') {
      backQuoted=!backQuoted;
      if (source.length() > i + 2 && source.charAt(i + 1) == '`' && source.charAt(i + 2) == '`') {
        markdown.append(escaped ? "</pre>" : "<pre>");
        escaped=!escaped;
        i=i + 2;
        continue;
      }
    }
    if (!escaped && !backQuoted) {
      if (charAt == '$' && source.length() > i + 1 && source.charAt(i + 1) != '$') {
        inCode=!inCode;
      }
      if (charAt == '\\' && source.substring(i).startsWith("\\begin")) {
        inMultiStringCode+=1;
      }
      if (charAt == '\\' && source.substring(i).startsWith("\\end")) {
        inEnd=true;
      }
    }
    final boolean doubleDollar=charAt == '$' && ((source.length() > i + 1 && source.charAt(i + 1) == '$') || (i >= 1 && source.charAt(i - 1) == '$'));
    if (inCode || inMultiStringCode != 0 || (!backQuoted && doubleDollar)) {
      if (markdown.length() != 0) {
        result.append(markdown2Html(markdown.toString()));
        markdown=new StringBuilder();
      }
      result.append(charAt);
    }
 else {
      markdown.append(charAt);
    }
    if (inEnd && charAt == '}') {
      inMultiStringCode-=1;
    }
  }
  if (markdown.length() != 0) {
    result.append(markdown2Html(markdown.toString()));
  }
  return result;
}
