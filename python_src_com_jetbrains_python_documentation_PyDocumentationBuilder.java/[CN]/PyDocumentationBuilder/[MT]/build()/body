{
  final ChainIterable<String> reassignCat=new ChainIterable<String>();
  PsiElement followed=resolveToDocStringOwner(reassignCat);
  PyClass cls;
  PsiElement outer=null;
  boolean is_property=false;
  String accessor_kind="None";
  if (myOriginalElement != null) {
    String elementName=myOriginalElement.getText();
    if (PyUtil.isPythonIdentifier(elementName)) {
      outer=myOriginalElement.getParent();
      if (outer instanceof PyQualifiedExpression) {
        PyExpression qual=((PyQualifiedExpression)outer).getQualifier();
        if (qual != null) {
          PyType type=qual.getType(TypeEvalContext.fast());
          if (type instanceof PyClassType) {
            cls=((PyClassType)type).getPyClass();
            Property property=cls.findProperty(elementName);
            if (property != null) {
              is_property=true;
              final AccessDirection dir=AccessDirection.of((PyElement)outer);
              Maybe<Callable> accessor=property.getByDirection(dir);
              myProlog.addItem("property ").addWith(TagBold,$().addWith(TagCode,$(elementName))).addItem(" of ").add(PythonDocumentationProvider.describeClass(cls,TagCode,true,true));
              if (accessor.isDefined() && property.getDoc() != null) {
                myBody.addItem(": ").addItem(property.getDoc()).addItem(BR);
              }
 else {
                final Callable getter=property.getGetter().valueOrNull();
                if (getter != null && getter != myElement && getter instanceof PyFunction) {
                  PyStringLiteralExpression docstring=((PyFunction)getter).getDocStringExpression();
                  if (docstring != null) {
                    myProlog.addItem(BR).addWith(TagItalic,$("Copied from getter:")).addItem(BR).addItem(docstring.getStringValue());
                  }
                }
                myBody.addItem(BR);
              }
              myBody.addItem(BR);
              if (accessor.isDefined() && accessor.value() == null)               followed=null;
              if (dir == AccessDirection.READ) {
                accessor_kind="Getter";
              }
 else               if (dir == AccessDirection.WRITE) {
                accessor_kind="Setter";
              }
 else {
                accessor_kind="Deleter";
              }
              if (followed != null)               myEpilog.addWith(TagSmall,$(BR,BR,accessor_kind," of property")).addItem(BR);
            }
          }
        }
      }
    }
  }
  if (myProlog.isEmpty() && !is_property && !isAttribute()) {
    myProlog.add(reassignCat);
  }
  if (followed instanceof PyDocStringOwner) {
    String docString=null;
    PyStringLiteralExpression doc_expr=((PyDocStringOwner)followed).getDocStringExpression();
    if (doc_expr != null)     docString=doc_expr.getStringValue();
    if (followed instanceof PyClass) {
      cls=(PyClass)followed;
      myBody.add(PythonDocumentationProvider.describeDecorators(cls,TagItalic,BR,LCombUp));
      myBody.add(PythonDocumentationProvider.describeClass(cls,TagBold,true,false));
    }
 else     if (followed instanceof PyFunction) {
      PyFunction fun=(PyFunction)followed;
      if (!is_property) {
        cls=fun.getContainingClass();
        if (cls != null) {
          myBody.addWith(TagSmall,PythonDocumentationProvider.describeClass(cls,TagCode,true,true)).addItem(BR).addItem(BR);
        }
      }
 else {
        cls=null;
      }
      myBody.add(PythonDocumentationProvider.describeDecorators(fun,TagItalic,BR,LCombUp)).add(PythonDocumentationProvider.describeFunction(fun,TagBold,LCombUp));
      if (docString == null) {
        addInheritedDocString(fun,cls);
      }
    }
 else     if (followed instanceof PyFile) {
      addModulePath((PyFile)followed);
    }
    if (docString != null) {
      myBody.addItem(BR);
      addFormattedDocString(myElement,docString,myBody,myEpilog);
    }
  }
 else   if (is_property) {
    String accessor_message;
    if (followed != null) {
      accessor_message="Declaration: ";
    }
 else {
      accessor_message=accessor_kind + " is not defined.";
    }
    myBody.addWith(TagItalic,$(accessor_message)).addItem(BR);
    if (followed != null)     myBody.addItem(combUp(PyUtil.getReadableRepr(followed,false)));
  }
 else   if (isAttribute()) {
    addAttributeDoc();
  }
 else   if (followed instanceof PyNamedParameter) {
    myBody.addItem(combUp("Named parameter " + PyUtil.getReadableRepr(followed,false)));
    if (!addTypeAndDescriptionFromDocstring((PyNamedParameter)followed)) {
      TypeEvalContext context=TypeEvalContext.slow();
      PyType type=((PyReferenceExpression)outer).getType(context);
      if (type != null) {
        String s;
        if (type instanceof PyDynamicallyEvaluatedType) {
          s="\nDynamically inferred type: %s";
        }
 else {
          s="\nReassigned value has type: %s";
        }
        myBody.addItem(combUp(String.format(s,PythonDocumentationProvider.getTypeName(type,context))));
      }
    }
  }
 else   if (followed != null && outer instanceof PyReferenceExpression) {
    myBody.addItem(BR).addItem(combUp(PythonDocumentationProvider.describeExpressionType((PyReferenceExpression)outer)));
  }
  if (myBody.isEmpty() && myEpilog.isEmpty()) {
    return null;
  }
 else {
    return myResult.toString();
  }
}
