{
  final TypeEvalContext context=TypeEvalContext.userInitiated(myElement.getProject(),myElement.getContainingFile());
  final PsiElement outerElement=myOriginalElement != null ? myOriginalElement.getParent() : null;
  final PsiElement elementDefinition=resolveToDocStringOwner();
  final boolean isProperty=buildForProperty(elementDefinition,outerElement,context);
  if (myProlog.isEmpty() && !isProperty && !isAttribute()) {
    myProlog.add(myReassignmentChain);
  }
  if (elementDefinition instanceof PyDocStringOwner) {
    buildFromDocstring(elementDefinition,isProperty);
  }
 else   if (isAttribute()) {
    buildFromAttributeDoc();
  }
 else   if (elementDefinition instanceof PyNamedParameter) {
    myBody.addItem(combUp("Parameter " + PyUtil.getReadableRepr(elementDefinition,false)));
    boolean typeFromDocstringAdded=addTypeAndDescriptionFromDocstring((PyNamedParameter)elementDefinition);
    if (outerElement instanceof PyExpression) {
      PyType type=context.getType((PyExpression)outerElement);
      if (type != null) {
        String typeString=null;
        if (type instanceof PyDynamicallyEvaluatedType) {
          if (!typeFromDocstringAdded) {
            typeString="\nDynamically inferred type: ";
          }
        }
 else {
          if (outerElement.getReference() != null) {
            PsiElement target=outerElement.getReference().resolve();
            if (target instanceof PyTargetExpression) {
              final String targetName=((PyTargetExpression)target).getName();
              if (targetName != null && targetName.equals(((PyNamedParameter)elementDefinition).getName())) {
                typeString="\nReassigned value has type: ";
              }
            }
          }
        }
        if (typeString == null && !typeFromDocstringAdded) {
          typeString="\nInferred type: ";
        }
        if (typeString != null) {
          myBody.addItem(combUp(typeString));
          PythonDocumentationProvider.describeTypeWithLinks(myBody,elementDefinition,type,context);
        }
      }
    }
  }
 else   if (elementDefinition != null && outerElement instanceof PyReferenceExpression) {
    myBody.addItem(combUp("\nInferred type: "));
    PythonDocumentationProvider.describeExpressionTypeWithLinks(myBody,(PyReferenceExpression)outerElement,context);
  }
  if (myBody.isEmpty() && myEpilog.isEmpty()) {
    return null;
  }
 else {
    return myResult.toString();
  }
}
