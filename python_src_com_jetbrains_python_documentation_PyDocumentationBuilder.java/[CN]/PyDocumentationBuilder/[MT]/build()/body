{
  final ChainIterable<String> reassignmentChain=new ChainIterable<String>();
  final TypeEvalContext context=TypeEvalContext.userInitiated(myElement.getProject(),myElement.getContainingFile());
  PsiElement outerElement=myOriginalElement != null ? myOriginalElement.getParent() : null;
  PsiElement followed=resolveToDocStringOwner(reassignmentChain);
  final boolean isProperty=buildForProperty(followed,outerElement);
  if (myProlog.isEmpty() && !isProperty && !isAttribute()) {
    myProlog.add(reassignmentChain);
  }
  if (followed instanceof PyDocStringOwner) {
    PyClass cls;
    String docString=null;
    PyStringLiteralExpression docStringExpression=((PyDocStringOwner)followed).getDocStringExpression();
    if (docStringExpression != null)     docString=docStringExpression.getStringValue();
    if (followed instanceof PyClass) {
      cls=(PyClass)followed;
      myBody.add(PythonDocumentationProvider.describeDecorators(cls,TagItalic,BR,LCombUp));
      myBody.add(PythonDocumentationProvider.describeClass(cls,TagBold,true,false));
    }
 else     if (followed instanceof PyFunction) {
      PyFunction fun=(PyFunction)followed;
      if (!isProperty) {
        cls=fun.getContainingClass();
        if (cls != null) {
          myBody.addWith(TagSmall,PythonDocumentationProvider.describeClass(cls,TagCode,true,true)).addItem(BR).addItem(BR);
        }
      }
 else {
        cls=null;
      }
      myBody.add(PythonDocumentationProvider.describeDecorators(fun,TagItalic,BR,LCombUp)).add(PythonDocumentationProvider.describeFunction(fun,TagBold,LCombUp));
      if (docString == null) {
        addInheritedDocString(fun,cls);
      }
    }
 else     if (followed instanceof PyFile) {
      addModulePath((PyFile)followed);
    }
    if (docString != null) {
      myBody.addItem(BR);
      addFormattedDocString(myElement,docString,myBody,myEpilog);
    }
  }
 else   if (isAttribute()) {
    addAttributeDoc();
  }
 else   if (followed instanceof PyNamedParameter) {
    myBody.addItem(combUp("Parameter " + PyUtil.getReadableRepr(followed,false)));
    boolean typeFromDocstringAdded=addTypeAndDescriptionFromDocstring((PyNamedParameter)followed);
    if (outerElement instanceof PyExpression) {
      PyType type=context.getType((PyExpression)outerElement);
      if (type != null) {
        String typeString=null;
        if (type instanceof PyDynamicallyEvaluatedType) {
          if (!typeFromDocstringAdded) {
            typeString="\nDynamically inferred type: ";
          }
        }
 else {
          if (outerElement.getReference() != null) {
            PsiElement target=outerElement.getReference().resolve();
            if (target instanceof PyTargetExpression) {
              final String targetName=((PyTargetExpression)target).getName();
              if (targetName != null && targetName.equals(((PyNamedParameter)followed).getName())) {
                typeString="\nReassigned value has type: ";
              }
            }
          }
        }
        if (typeString == null && !typeFromDocstringAdded) {
          typeString="\nInferred type: ";
        }
        if (typeString != null) {
          myBody.addItem(combUp(typeString));
          PythonDocumentationProvider.describeTypeWithLinks(myBody,followed,type,context);
        }
      }
    }
  }
 else   if (followed != null && outerElement instanceof PyReferenceExpression) {
    myBody.addItem(combUp("\nInferred type: "));
    PythonDocumentationProvider.describeExpressionTypeWithLinks(myBody,(PyReferenceExpression)outerElement,context);
  }
  if (myBody.isEmpty() && myEpilog.isEmpty()) {
    return null;
  }
 else {
    return myResult.toString();
  }
}
