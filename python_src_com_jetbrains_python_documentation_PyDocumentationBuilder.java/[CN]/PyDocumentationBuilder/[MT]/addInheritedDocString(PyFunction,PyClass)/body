{
  boolean notFound=true;
  final String methName=fun.getName();
  if (cls != null && methName != null) {
    final boolean isConstructor=PyNames.INIT.equals(methName);
    Iterable<PyClass> classes=cls.getAncestorClasses(null);
    if (isConstructor) {
      classes=new ChainIterable<PyClass>(cls).add(classes);
    }
    for (    PyClass ancestor : classes) {
      PyStringLiteralExpression docElt=null;
      PyFunction inherited=null;
      boolean isFromClass=false;
      if (isConstructor)       docElt=cls.getDocStringExpression();
      if (docElt != null) {
        isFromClass=true;
      }
 else {
        inherited=ancestor.findMethodByName(methName,false);
      }
      if (inherited != null) {
        docElt=inherited.getDocStringExpression();
      }
      if (docElt != null) {
        final String inheritedDoc=docElt.getStringValue();
        if (inheritedDoc.length() > 1) {
          myEpilog.addItem(BR).addItem(BR);
          final String ancestorName=ancestor.getName();
          final String marker=(cls == ancestor) ? PythonDocumentationProvider.LINK_TYPE_CLASS : PythonDocumentationProvider.LINK_TYPE_PARENT;
          final String ancestorLink=$().addWith(new LinkWrapper(marker + ancestorName),$(ancestorName)).toString();
          if (isFromClass) {
            myEpilog.addItem(PyBundle.message("QDOC.copied.from.class.$0",ancestorLink));
          }
 else {
            myEpilog.addItem(PyBundle.message("QDOC.copied.from.$0.$1",ancestorLink,methName));
          }
          myEpilog.addItem(BR).addItem(BR);
          final ChainIterable<String> formatted=new ChainIterable<String>();
          final ChainIterable<String> unformatted=new ChainIterable<String>();
          addFormattedDocString(fun,inheritedDoc,formatted,unformatted);
          myEpilog.addWith(TagCode,formatted).add(unformatted);
          notFound=false;
          break;
        }
      }
    }
    if (notFound) {
      if (PyNames.UnderscoredAttributes.contains(methName)) {
        addPredefinedMethodDoc(fun,methName);
      }
    }
  }
}
