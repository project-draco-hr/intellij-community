{
  boolean notFound=true;
  final String methodName=pyFunction.getName();
  if (pyClass == null || methodName == null) {
    return;
  }
  final boolean isConstructor=PyNames.INIT.equals(methodName);
  Iterable<PyClass> classes=pyClass.getAncestorClasses(null);
  if (isConstructor) {
    classes=new ChainIterable<PyClass>(pyClass).add(classes);
  }
  for (  PyClass ancestor : classes) {
    PyStringLiteralExpression docstringElement=null;
    PyFunction inherited=null;
    boolean isFromClass=false;
    if (isConstructor)     docstringElement=pyClass.getDocStringExpression();
    if (docstringElement != null) {
      isFromClass=true;
    }
 else {
      inherited=ancestor.findMethodByName(methodName,false);
    }
    if (inherited != null) {
      docstringElement=inherited.getDocStringExpression();
    }
    if (docstringElement != null) {
      final String inheritedDoc=docstringElement.getStringValue();
      if (inheritedDoc.length() > 1) {
        myEpilog.addItem(BR).addItem(BR);
        String ancestor_name=ancestor.getName();
        String marker=(pyClass == ancestor) ? PythonDocumentationProvider.LINK_TYPE_CLASS : PythonDocumentationProvider.LINK_TYPE_PARENT;
        final String ancestor_link=$().addWith(new LinkWrapper(marker + ancestor_name),$(ancestor_name)).toString();
        if (isFromClass) {
          myEpilog.addItem(PyBundle.message("QDOC.copied.from.class.$0",ancestor_link));
        }
 else {
          myEpilog.addItem(PyBundle.message("QDOC.copied.from.$0.$1",ancestor_link,methodName));
        }
        myEpilog.addItem(BR).addItem(BR);
        ChainIterable<String> formatted=new ChainIterable<String>();
        ChainIterable<String> unformatted=new ChainIterable<String>();
        addFormattedDocString(pyFunction,inheritedDoc,formatted,unformatted);
        myEpilog.addWith(TagCode,formatted).add(unformatted);
        notFound=false;
        break;
      }
    }
  }
  if (notFound) {
    if (PyNames.UnderscoredAttributes.contains(methodName)) {
      addPredefinedMethodDoc(pyFunction,methodName);
    }
  }
}
