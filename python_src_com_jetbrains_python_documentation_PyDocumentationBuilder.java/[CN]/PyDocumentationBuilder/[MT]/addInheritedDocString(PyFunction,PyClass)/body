{
  boolean not_found=true;
  String meth_name=fun.getName();
  if (cls != null && meth_name != null) {
    final boolean is_constructor=PyNames.INIT.equals(meth_name);
    Iterable<PyClass> classes=cls.getAncestorClasses(null);
    if (is_constructor) {
      classes=new ChainIterable<PyClass>(cls).add(classes);
    }
    for (    PyClass ancestor : classes) {
      PyStringLiteralExpression doc_elt=null;
      PyFunction inherited=null;
      boolean is_from_class=false;
      if (is_constructor)       doc_elt=cls.getDocStringExpression();
      if (doc_elt != null) {
        is_from_class=true;
      }
 else {
        inherited=ancestor.findMethodByName(meth_name,false);
      }
      if (inherited != null) {
        doc_elt=inherited.getDocStringExpression();
      }
      if (doc_elt != null) {
        String inherited_doc=doc_elt.getStringValue();
        if (inherited_doc.length() > 1) {
          myEpilog.addItem(BR).addItem(BR);
          String ancestor_name=ancestor.getName();
          String marker=(cls == ancestor) ? PythonDocumentationProvider.LINK_TYPE_CLASS : PythonDocumentationProvider.LINK_TYPE_PARENT;
          final String ancestor_link=$().addWith(new LinkWrapper(marker + ancestor_name),$(ancestor_name)).toString();
          if (is_from_class) {
            myEpilog.addItem(PyBundle.message("QDOC.copied.from.class.$0",ancestor_link));
          }
 else {
            myEpilog.addItem(PyBundle.message("QDOC.copied.from.$0.$1",ancestor_link,meth_name));
          }
          myEpilog.addItem(BR).addItem(BR);
          ChainIterable<String> formatted=new ChainIterable<String>();
          ChainIterable<String> unformatted=new ChainIterable<String>();
          addFormattedDocString(fun,inherited_doc,formatted,unformatted);
          myEpilog.addWith(TagCode,formatted).add(unformatted);
          not_found=false;
          break;
        }
      }
    }
    if (not_found) {
      if (PyNames.UnderscoredAttributes.contains(meth_name)) {
        addPredefinedMethodDoc(fun,meth_name);
      }
    }
  }
}
