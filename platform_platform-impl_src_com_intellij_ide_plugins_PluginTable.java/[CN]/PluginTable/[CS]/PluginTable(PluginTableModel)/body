{
  super(model);
  getColumnModel().setColumnMargin(0);
  for (int i=0; i < model.getColumnCount(); i++) {
    TableColumn column=getColumnModel().getColumn(i);
    final ColumnInfo columnInfo=model.getColumnInfos()[i];
    column.setCellEditor(columnInfo.getEditor(null));
    if (columnInfo.getColumnClass() == Boolean.class) {
      final int width=new JCheckBox().getPreferredSize().width;
      column.setWidth(width);
      column.setPreferredWidth(width);
      column.setMaxWidth(width);
      column.setMinWidth(width);
    }
  }
  setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  setShowGrid(false);
  setStriped(true);
  setTransferHandler(new TransferHandler(){
    @Nullable @Override protected Transferable createTransferable(    JComponent c){
      final IdeaPluginDescriptor[] selectedValues=getSelectedObjects();
      if (selectedValues == null)       return null;
      final String text=StringUtil.join(selectedValues,new Function<IdeaPluginDescriptor,String>(){
        @Override public String fun(        IdeaPluginDescriptor descriptor){
          return descriptor.getName();
        }
      }
,", ");
      final String htmlText="<body>\n<ul>\n" + StringUtil.join(selectedValues,new Function<IdeaPluginDescriptor,String>(){
        @Override public String fun(        IdeaPluginDescriptor descriptor){
          return descriptor.getName();
        }
      }
,"</li>\n<li>") + "</ul>\n</body>\n";
      return new TextTransferrable(XmlStringUtil.wrapInHtml(htmlText),text);
    }
    @Override public int getSourceActions(    JComponent c){
      return COPY;
    }
  }
);
}
