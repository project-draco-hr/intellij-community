{
  final Course course;
  try {
    course=ProgressManager.getInstance().run(new com.intellij.openapi.progress.Task.WithResult<Course,Exception>(project,"Creating Course",false){
      @Override protected Course compute(      @NotNull ProgressIndicator indicator) throws Exception {
        return getCourse();
      }
    }
);
  }
 catch (  Exception e) {
    LOG.error("Failed to obtain course " + e.getMessage());
    return;
  }
  if (course == null)   return;
  StudyTaskManager.getInstance(project).setCourse(course);
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND,new Runnable(){
        @Override public void run(){
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            @Override public void run(){
              course.initCourse(false);
              final File courseDirectory=new File(ourCoursesDir,course.getName());
              StudyGenerator.createCourse(course,baseDir,courseDirectory,project);
              course.setCourseDirectory(new File(ourCoursesDir,mySelectedCourseInfo.getName()).getAbsolutePath());
              VirtualFileManager.getInstance().refreshWithoutFileWatcher(true);
              StudyProjectComponent.getInstance(project).registerStudyToolWindow(course);
              openFirstTask(course,project);
            }
          }
);
        }
      }
);
    }
  }
);
}
