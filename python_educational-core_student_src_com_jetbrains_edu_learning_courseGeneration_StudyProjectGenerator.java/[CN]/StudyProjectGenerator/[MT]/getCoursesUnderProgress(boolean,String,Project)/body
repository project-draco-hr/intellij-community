{
  try {
    return ProgressManager.getInstance().runProcessWithProgressSynchronously(new ThrowableComputable<List<CourseInfo>,RuntimeException>(){
      @Override public List<CourseInfo> compute() throws RuntimeException {
        ProgressManager.getInstance().getProgressIndicator().setIndeterminate(true);
        return getCoursesAsynchronouslyIfNeeded(force);
      }
    }
,progressTitle,true,project);
  }
 catch (  RuntimeException e) {
    return Collections.singletonList(CourseInfo.INVALID_COURSE);
  }
}
