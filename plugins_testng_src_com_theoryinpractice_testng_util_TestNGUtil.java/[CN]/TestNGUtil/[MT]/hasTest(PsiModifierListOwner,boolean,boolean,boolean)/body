{
  boolean hasAnnotation=AnnotationUtil.isAnnotated(element,TEST_ANNOTATION_FQN,checkHierarchy,true);
  if (hasAnnotation) {
    if (checkDisabled) {
      PsiAnnotation annotation=AnnotationUtil.findAnnotation(element,true,TEST_ANNOTATION_FQN);
      if (annotation != null) {
        if (isDisabled(annotation))         return false;
      }
    }
    return true;
  }
  if (element instanceof PsiDocCommentOwner && checkJavadoc && getTextJavaDoc((PsiDocCommentOwner)element) != null)   return true;
  if (element instanceof PsiClass) {
    PsiClass psiClass=(PsiClass)element;
    for (    PsiMethod method : psiClass.getAllMethods()) {
      PsiAnnotation annotation=AnnotationUtil.findAnnotation(method,true,TEST_ANNOTATION_FQN);
      if (annotation != null) {
        if (checkDisabled) {
          if (isDisabled(annotation))           continue;
        }
        return true;
      }
      if (AnnotationUtil.isAnnotated(method,FACTORY_ANNOTATION_FQN,false,true))       return true;
      if (checkJavadoc && getTextJavaDoc(method) != null)       return true;
    }
    return false;
  }
 else   if (element instanceof PsiMethod) {
    PsiClass psiClass=((PsiMethod)element).getContainingClass();
    if (psiClass != null) {
      final PsiAnnotation annotation=AnnotationUtil.findAnnotation(psiClass,true,TEST_ANNOTATION_FQN);
      if (annotation != null) {
        if (checkDisabled && isDisabled(annotation))         return false;
        boolean isPrivate=element.hasModifierProperty(PsiModifier.PRIVATE);
        return !isPrivate && !element.hasModifierProperty(PsiModifier.STATIC) && !hasConfig(element);
      }
 else       if (checkJavadoc && getTextJavaDoc(psiClass) != null)       return true;
    }
  }
  return false;
}
