{
  this.itemEditor=itemEditor;
  model=new MyListTableModel<T>(columns,new ArrayList<T>(items),this);
  table=new TableView<T>(model);
  table.setDefaultEditor(Enum.class,ComboBoxTableCellEditor.INSTANCE);
  table.setStriped(true);
  new TableSpeedSearch(table);
  if (columns[0].getColumnClass() == Boolean.class && columns[0].getName().isEmpty()) {
    TableUtil.setupCheckboxColumn(table.getColumnModel().getColumn(0));
  }
  table.getEmptyText().setText(emptyText);
  MyRemoveAction removeAction=new MyRemoveAction();
  toolbarDecorator=ToolbarDecorator.createDecorator(table,this).setRemoveAction(removeAction).setRemoveActionUpdater(removeAction);
  if (itemEditor instanceof DialogItemEditor) {
    toolbarDecorator.setEditAction(new AnActionButtonRunnable(){
      @Override public void run(      AnActionButton button){
        T item=table.getSelectedObject();
        if (item != null) {
          Function<T,T> mutator;
          if (model.isMutable(item)) {
            mutator=FunctionUtil.id();
          }
 else {
            final int selectedRow=table.getSelectedRow();
            mutator=new Function<T,T>(){
              @Override public T fun(              T item){
                return model.getMutable(selectedRow,item);
              }
            }
;
          }
          ((DialogItemEditor<T>)TableModelEditor.this.itemEditor).edit(item,mutator);
          table.requestFocus();
        }
      }
    }
).setEditActionUpdater(new AnActionButtonUpdater(){
      @Override public boolean isEnabled(      AnActionEvent e){
        T item=table.getSelectedObject();
        return item != null && ((DialogItemEditor<T>)TableModelEditor.this.itemEditor).isEditable(item);
      }
    }
);
  }
}
