{
  super(new CardLayout());
  if (myProject == null) {
    myProject=JavaDebuggerSupport.getContextProjectForEditorFieldsInDebuggerConfigurables();
  }
  myRbDefaultLabel=new JRadioButton(DebuggerBundle.message("label.compound.renderer.configurable.use.default.renderer"));
  myRbExpressionLabel=new JRadioButton(DebuggerBundle.message("label.compound.renderer.configurable.use.expression"));
  final ButtonGroup labelButtonsGroup=new ButtonGroup();
  labelButtonsGroup.add(myRbDefaultLabel);
  labelButtonsGroup.add(myRbExpressionLabel);
  myShowTypeCheckBox=new JBCheckBox(DebuggerBundle.message("label.compound.renderer.configurable.show.type"));
  myRbDefaultChildrenRenderer=new JRadioButton(DebuggerBundle.message("label.compound.renderer.configurable.use.default.renderer"));
  myRbExpressionChildrenRenderer=new JRadioButton(DebuggerBundle.message("label.compound.renderer.configurable.use.expression"));
  myRbListChildrenRenderer=new JRadioButton(DebuggerBundle.message("label.compound.renderer.configurable.use.expression.list"));
  final ButtonGroup childrenButtonGroup=new ButtonGroup();
  childrenButtonGroup.add(myRbDefaultChildrenRenderer);
  childrenButtonGroup.add(myRbExpressionChildrenRenderer);
  childrenButtonGroup.add(myRbListChildrenRenderer);
  JavaDebuggerEditorsProvider editorsProvider=new JavaDebuggerEditorsProvider();
  myLabelEditor=new XDebuggerExpressionEditor(myProject,editorsProvider,"ClassLabelExpression",null,XExpressionImpl.EMPTY_EXPRESSION,false,false,true);
  myChildrenEditor=new XDebuggerExpressionEditor(myProject,editorsProvider,"ClassChildrenExpression",null,XExpressionImpl.EMPTY_EXPRESSION,false,false,true);
  myChildrenExpandedEditor=new XDebuggerExpressionEditor(myProject,editorsProvider,"ClassChildrenExpression",null,XExpressionImpl.EMPTY_EXPRESSION,false,false,true);
  JComponent myChildrenListEditor=createChildrenListEditor(editorsProvider);
  final ItemListener updateListener=new ItemListener(){
    @Override public void itemStateChanged(    @NotNull ItemEvent e){
      updateEnabledState();
    }
  }
;
  myRbExpressionLabel.addItemListener(updateListener);
  myRbListChildrenRenderer.addItemListener(updateListener);
  myRbExpressionChildrenRenderer.addItemListener(updateListener);
  myClassNameField=new ClassNameEditorWithBrowseButton(new ActionListener(){
    @Override public void actionPerformed(    @NotNull ActionEvent e){
      PsiClass psiClass=DebuggerUtils.getInstance().chooseClassDialog(DebuggerBundle.message("title.compound.renderer.configurable.choose.renderer.reference.type"),myProject);
      if (psiClass != null) {
        String qName=JVMNameUtil.getNonAnonymousClassName(psiClass);
        myClassNameField.setText(qName);
        updateContext(qName);
      }
    }
  }
,myProject);
  myClassNameField.getEditorTextField().addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    @NotNull FocusEvent e){
      updateContext(myClassNameField.getText());
    }
  }
);
  JPanel panel=new JPanel(new GridBagLayout());
  panel.add(new JLabel(DebuggerBundle.message("label.compound.renderer.configurable.apply.to")),new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  panel.add(myClassNameField,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(4,0,0,0),0,0));
  panel.add(new JLabel(DebuggerBundle.message("label.compound.renderer.configurable.when.rendering")),new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(20,0,0,0),0,0));
  panel.add(myShowTypeCheckBox,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,7,0,0),0,0));
  panel.add(myRbDefaultLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,10,0,0),0,0));
  panel.add(myRbExpressionLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,10,0,0),0,0));
  panel.add(myLabelEditor.getComponent(),new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,30,0,0),0,0));
  panel.add(new JLabel(DebuggerBundle.message("label.compound.renderer.configurable.when.expanding")),new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(20,0,0,0),0,0));
  panel.add(myRbDefaultChildrenRenderer,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,10,0,0),0,0));
  panel.add(myRbExpressionChildrenRenderer,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,10,0,0),0,0));
  panel.add(myChildrenEditor.getComponent(),new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,30,0,0),0,0));
  myExpandedLabel=new JLabel(DebuggerBundle.message("label.compound.renderer.configurable.test.can.expand"));
  panel.add(myExpandedLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(4,30,0,0),0,0));
  panel.add(myChildrenExpandedEditor.getComponent(),new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,30,0,0),0,0));
  panel.add(myRbListChildrenRenderer,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,10,0,0),0,0));
  panel.add(myChildrenListEditor,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(4,30,0,0),0,0));
  add(new JPanel(),EMPTY_PANEL_ID);
  add(panel,DATA_PANEL_ID);
}
