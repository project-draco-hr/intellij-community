{
  loadingPanel.setLoadingText("Please wait...");
  loadingPanel.startLoading();
  final DataNode<ProjectData> projectStructure=myProjectInfo.getExternalProjectStructure();
  if (projectStructure != null) {
    final boolean[] isModified={false};
    ExternalSystemApiUtil.visit(projectStructure,new Consumer<DataNode<?>>(){
      @Override public void consume(      DataNode<?> node){
        final DataNode modifiedDataNode=node.getUserData(MODIFIED_NODE_KEY);
        if (modifiedDataNode != null) {
          if (node.isIgnored() != modifiedDataNode.isIgnored()) {
            node.setIgnored(modifiedDataNode.isIgnored());
            isModified[0]=true;
          }
          node.removeUserData(MODIFIED_NODE_KEY);
          node.removeUserData(CONNECTED_UI_NODE_KEY);
        }
      }
    }
);
    if (isModified[0]) {
      DataNode<?> notIgnoredNode=ContainerUtil.find(projectStructure.getChildren(),new Condition<DataNode<?>>(){
        @Override public boolean value(        DataNode<?> node){
          return !node.isIgnored();
        }
      }
);
      projectStructure.setIgnored(notIgnoredNode == null);
      ExternalSystemUtil.invokeLater(myProject,ModalityState.NON_MODAL,new Runnable(){
        @Override public void run(){
          final ProjectData projectData=projectStructure.getData();
          String title=ExternalSystemBundle.message("progress.refresh.text",projectData.getExternalName(),projectData.getOwner().getReadableName());
          new Task.Backgroundable(myProject,title,true,PerformInBackgroundOption.DEAF){
            @Override public void run(            @NotNull ProgressIndicator indicator){
              ServiceManager.getService(ProjectDataManager.class).importData(projectStructure,myProject,false);
            }
          }
.queue();
        }
      }
);
    }
  }
  super.doOKAction();
}
