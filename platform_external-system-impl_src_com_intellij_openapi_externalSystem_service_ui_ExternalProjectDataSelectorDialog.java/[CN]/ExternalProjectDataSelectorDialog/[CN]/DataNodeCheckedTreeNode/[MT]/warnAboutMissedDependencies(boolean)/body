{
  List<DataNode<Identifiable>> selectedModules=ContainerUtil.newSmartList();
  for (  DataNode node : TreeUtil.collectSelectedObjectsOfType(myTree,DataNode.class)) {
    if (myDependencyAwareDataKeys.contains(node.getKey())) {
      selectedModules.add(node);
    }
  }
  final Set<DataNode<Identifiable>> deps=ContainerUtil.newHashSet();
  for (  DataNode<Identifiable> selectedModule : selectedModules) {
    if (checked) {
      deps.addAll(ContainerUtil.filter(dependentNodeMap.get(selectedModule),new Condition<DataNode<Identifiable>>(){
        @Override public boolean value(        DataNode<Identifiable> node){
          final DataNodeCheckedTreeNode uiNode=node.getUserData(CONNECTED_UI_NODE_KEY);
          return uiNode != null && !uiNode.isChecked();
        }
      }
));
    }
 else {
      for (      DataNode<Identifiable> node : dependentNodeMap.keySet()) {
        final DataNodeCheckedTreeNode uiNode=node.getUserData(CONNECTED_UI_NODE_KEY);
        if (uiNode != null && !uiNode.isChecked())         continue;
        Collection<DataNode<Identifiable>> dependencies=dependentNodeMap.get(node);
        if (dependencies.contains(selectedModule)) {
          deps.add(node);
        }
      }
    }
  }
  if (!deps.isEmpty() && !selectedModules.isEmpty()) {
    final String listOfSelectedModules=StringUtil.join(selectedModules,new Function<DataNode<Identifiable>,String>(){
      @Override public String fun(      DataNode<Identifiable> node){
        return node.getData().getId();
      }
    }
,", ");
    final String listOfDependencies=StringUtil.join(deps,new Function<DataNode<Identifiable>,String>(){
      @Override public String fun(      final DataNode<Identifiable> node){
        return node.getData().getId();
      }
    }
,"<br>");
    final String message;
    if (!checked) {
      message=String.format("<html>The following module%s <br><b>%s</b><br>%s enabled and depend%s on selected modules. <br>Would you like to disable %s too?</html>",deps.size() == 1 ? "" : "s",listOfDependencies,deps.size() == 1 ? "is" : "are",deps.size() == 1 ? "s" : "",deps.size() == 1 ? "it" : "them");
    }
 else {
      message=String.format("<html>The following module%s on which <b>%s</b> depend%s %s disabled:<br><b>%s</b><br>Would you like to enable %s?</html>",deps.size() == 1 ? "" : "s",listOfSelectedModules,selectedModules.size() == 1 ? "s" : "",deps.size() == 1 ? "is" : "are",listOfDependencies,deps.size() == 1 ? "it" : "them");
    }
    if (Messages.showOkCancelDialog(message,checked ? "Enable Dependant Modules" : "Disable Modules with Dependency on this",Messages.getQuestionIcon()) == Messages.OK) {
      List<DataNodeCheckedTreeNode> nodes=ContainerUtil.mapNotNull(deps,new Function<DataNode<Identifiable>,DataNodeCheckedTreeNode>(){
        @Override public DataNodeCheckedTreeNode fun(        DataNode<Identifiable> node){
          return node.getUserData(CONNECTED_UI_NODE_KEY);
        }
      }
);
      for (      DataNodeCheckedTreeNode node : nodes) {
        DefaultTreeModel treeModel=(DefaultTreeModel)myTree.getModel();
        myTree.addSelectionPath(new TreePath(treeModel.getPathToRoot(node)));
      }
      for (      DataNodeCheckedTreeNode node : nodes) {
        node.setChecked(checked);
      }
    }
  }
}
