{
  final Project project=e.getProject();
  final JavaStackFrame stackFrame=PopFrameAction.getStackFrame(e);
  if (stackFrame == null || project == null) {
    return;
  }
  final DebuggerContextImpl debuggerContext=DebuggerAction.getDebuggerContext(e.getDataContext());
  final DebugProcessImpl debugProcess=debuggerContext.getDebugProcess();
  if (debugProcess == null) {
    return;
  }
  final StackFrameProxyImpl proxy=stackFrame.getStackFrameProxy();
  final ThreadReferenceProxyImpl thread=proxy.threadProxy();
  debugProcess.getManagerThread().schedule(new DebuggerContextCommandImpl(debuggerContext,thread){
    @Override public void threadAction(){
      Method method;
      try {
        method=proxy.location().method();
      }
 catch (      EvaluateException e) {
        showError(project,DebuggerBundle.message("error.early.return",e.getLocalizedMessage()));
        return;
      }
      if ("void".equals(method.returnTypeName())) {
        forceEarlyReturn(thread.getVirtualMachine().mirrorOf(),thread,debugProcess,null);
      }
 else {
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            new ReturnExpressionDialog(project,debugProcess.getXdebugProcess().getEditorsProvider(),debugProcess,stackFrame).show();
          }
        }
);
      }
    }
  }
);
}
