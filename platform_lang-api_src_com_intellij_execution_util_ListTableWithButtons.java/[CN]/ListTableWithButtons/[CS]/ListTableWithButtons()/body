{
  myTableView=new TableView(createListModel()){
    @Override protected void createDefaultEditors(){
      super.createDefaultEditors();
      Object editor=defaultEditorsByColumnClass.get(String.class);
      if (editor instanceof DefaultCellEditor) {
        ((DefaultCellEditor)editor).getComponent().addKeyListener(new KeyAdapter(){
          @Override public void keyPressed(          KeyEvent e){
            final int column=myTableView.getEditingColumn();
            final int row=myTableView.getEditingRow();
            if (e.getModifiers() == 0 && (e.getKeyCode() == KeyEvent.VK_ENTER || e.getKeyCode() == KeyEvent.VK_TAB)) {
              e.consume();
              SwingUtilities.invokeLater(new Runnable(){
                @Override public void run(){
                  stopEditing();
                  int nextColumn=column < myTableView.getColumnCount() - 1 ? column + 1 : 0;
                  int nextRow=nextColumn == 0 ? row + 1 : row;
                  if (nextRow > myTableView.getRowCount() - 1) {
                    if (myElements.isEmpty() || !ListTableWithButtons.this.isEmpty(myElements.get(myElements.size() - 1))) {
                      ToolbarDecorator.findAddButton(myPanel).actionPerformed(null);
                      return;
                    }
 else {
                      nextRow=0;
                    }
                  }
                  myTableView.scrollRectToVisible(myTableView.getCellRect(nextRow,nextColumn,true));
                  myTableView.editCellAt(nextRow,nextColumn);
                }
              }
);
            }
          }
        }
);
      }
    }
  }
;
  myTableView.setRowHeight(new JTextField().getPreferredSize().height);
  myTableView.setIntercellSpacing(new Dimension(0,0));
  myTableView.setStriped(true);
  myTableView.getTableViewModel().setSortable(false);
  ToolbarDecorator decorator=ToolbarDecorator.createDecorator(myTableView);
  myPanel=decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      myTableView.stopEditing();
      setModified();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          if (myElements.isEmpty() || !isEmpty(myElements.get(myElements.size() - 1))) {
            myElements.add(createElement());
            myTableView.getTableViewModel().setItems(myElements);
          }
          myTableView.scrollRectToVisible(myTableView.getCellRect(myElements.size() - 1,0,true));
          myTableView.getComponent().editCellAt(myElements.size() - 1,0);
        }
      }
);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      myTableView.stopEditing();
      setModified();
      T selected=getSelection();
      if (selected != null) {
        int selectedIndex=myElements.indexOf(selected);
        myTableView.scrollRectToVisible(myTableView.getCellRect(selectedIndex,0,true));
        myElements.remove(selected);
        myTableView.getTableViewModel().setItems(myElements);
        int prev=selectedIndex - 1;
        if (prev >= 0) {
          myTableView.getComponent().getSelectionModel().setSelectionInterval(prev,prev);
        }
 else         if (selectedIndex < myElements.size()) {
          myTableView.getComponent().getSelectionModel().setSelectionInterval(selectedIndex,selectedIndex);
        }
      }
    }
  }
).disableUpDownActions().addExtraActions(createExtraActions()).createPanel();
  ToolbarDecorator.findRemoveButton(myPanel).addCustomUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      T selection=getSelection();
      return selection != null && myIsEnabled && canDeleteElement(selection);
    }
  }
);
  ToolbarDecorator.findAddButton(myPanel).addCustomUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      return myIsEnabled;
    }
  }
);
  myActionsPanel=decorator.getActionsPanel();
  myTableView.getComponent().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
}
