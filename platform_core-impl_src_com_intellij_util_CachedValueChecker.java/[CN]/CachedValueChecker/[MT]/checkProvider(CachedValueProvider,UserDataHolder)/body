{
  if (!DO_CHECKS)   return;
  Class<? extends CachedValueProvider> providerClass=provider.getClass();
  if (!ourCheckedClasses.add(providerClass))   return;
  for (  Field field : providerClass.getDeclaredFields()) {
    try {
      field.setAccessible(true);
      Object o=field.get(provider);
      if (o instanceof PsiElement && o != userDataHolder) {
        LOG.error("Incorrect CachedValue use. Provider references PSI, causing memory leaks and possible invalid element access: field " + field.getName() + " of "+ provider);
        return;
      }
    }
 catch (    IllegalAccessException e) {
      LOG.error(e);
    }
  }
}
