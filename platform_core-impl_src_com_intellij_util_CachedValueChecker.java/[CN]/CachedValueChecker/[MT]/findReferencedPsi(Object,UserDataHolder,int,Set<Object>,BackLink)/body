{
  if (depth == 0 || o == toIgnore || !visited.add(o))   return null;
  if (o instanceof Project || o instanceof Module || o instanceof Application)   return null;
  if (o instanceof PsiElement) {
    if (toIgnore instanceof PsiElement && ((PsiElement)toIgnore).getContainingFile() != null && PsiTreeUtil.isAncestor((PsiElement)o,(PsiElement)toIgnore,true)) {
      return null;
    }
    return backLink;
  }
  final Ref<BackLink> result=Ref.create();
  DebugReflectionUtil.processStronglyReferencedValues(o,new PairProcessor<Object,Field>(){
    @Override public boolean process(    Object next,    Field field){
      result.set(findReferencedPsi(next,toIgnore,depth - 1,visited,new BackLink(next,field,backLink)));
      return result.isNull();
    }
  }
);
  return result.get();
}
