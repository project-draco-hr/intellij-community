{
  setLayout(new MigLayout("ins 0, gap 5, flowx"));
  Insets borderInsets=new Insets(IdeBorderFactory.TITLED_BORDER_TOP_INSET,IdeBorderFactory.TITLED_BORDER_LEFT_INSET,0,IdeBorderFactory.TITLED_BORDER_RIGHT_INSET);
  setBorder(IdeBorderFactory.createTitledBorder(title,false,borderInsets));
  myOptions=options;
  add(myOnlyMonospacedCheckBox,"sgx b, sx 2");
  add(new JLabel(ApplicationBundle.message("primary.font")),"newline, ax right");
  add(myPrimaryCombo,"sgx b");
  add(new JLabel(ApplicationBundle.message("editbox.font.size")),"gapleft 20");
  add(myEditorFontSizeField);
  add(new JLabel(ApplicationBundle.message("editbox.line.spacing")),"gapleft 20");
  add(myLineSpacingField);
  add(new JLabel(ApplicationBundle.message("label.fallback.fonts.list.description"),MessageType.INFO.getDefaultIcon(),SwingConstants.LEFT),"newline, sx 5");
  add(myUseSecondaryFontCheckbox,"newline, ax right");
  add(mySecondaryCombo,"sgx b");
  myOnlyMonospacedCheckBox.setBorder(null);
  myUseSecondaryFontCheckbox.setBorder(null);
  mySecondaryCombo.setEnabled(false);
  myOnlyMonospacedCheckBox.setSelected(EditorColorsManager.getInstance().isUseOnlyMonospacedFonts());
  myOnlyMonospacedCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      EditorColorsManager.getInstance().setUseOnlyMonospacedFonts(myOnlyMonospacedCheckBox.isSelected());
      myPrimaryCombo.updateModel();
      mySecondaryCombo.updateModel();
    }
  }
);
  myUseSecondaryFontCheckbox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      mySecondaryCombo.setEnabled(myUseSecondaryFontCheckbox.isSelected());
      syncFontFamilies();
    }
  }
);
  ItemListener itemListener=new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        syncFontFamilies();
      }
    }
  }
;
  myPrimaryCombo.addItemListener(itemListener);
  mySecondaryCombo.addItemListener(itemListener);
  ActionListener actionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      syncFontFamilies();
    }
  }
;
  myPrimaryCombo.addActionListener(actionListener);
  mySecondaryCombo.addActionListener(actionListener);
  myEditorFontSizeField.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override public void textChanged(    DocumentEvent event){
      if (myIsInSchemeChange || !SwingUtilities.isEventDispatchThread())       return;
      try {
        int fontSize=Integer.parseInt(myEditorFontSizeField.getText());
        if (fontSize < 1)         fontSize=1;
        if (fontSize > OptionsConstants.MAX_EDITOR_FONT_SIZE)         fontSize=OptionsConstants.MAX_EDITOR_FONT_SIZE;
        Object selectedFont=myPrimaryCombo.getSelectedItem();
        if (selectedFont instanceof String) {
          FontPreferences fontPreferences=getFontPreferences();
          fontPreferences.register((String)selectedFont,fontSize);
        }
      }
 catch (      NumberFormatException e) {
      }
 finally {
        updateDescription(true);
      }
    }
  }
);
  myLineSpacingField.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override public void textChanged(    DocumentEvent event){
      if (myIsInSchemeChange)       return;
      float lineSpacing=1;
      try {
        lineSpacing=Float.parseFloat(myLineSpacingField.getText());
      }
 catch (      NumberFormatException e) {
      }
 finally {
        if (lineSpacing <= 0)         lineSpacing=1;
        if (lineSpacing > 30)         lineSpacing=30;
        if (getLineSpacing() != lineSpacing) {
          setCurrentLineSpacing(lineSpacing);
        }
        updateDescription(true);
      }
    }
  }
);
}
