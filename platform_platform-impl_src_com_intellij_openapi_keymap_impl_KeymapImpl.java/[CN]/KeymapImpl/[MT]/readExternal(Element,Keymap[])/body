{
  if (!KEY_MAP.equals(keymapElement.getName())) {
    throw new InvalidDataException("unknown element: " + keymapElement);
  }
  if (keymapElement.getAttributeValue(VERSION_ATTRIBUTE) == null) {
    Converter01.convert(keymapElement);
  }
  String parentName=keymapElement.getAttributeValue(PARENT_ATTRIBUTE);
  if (parentName != null) {
    for (    Keymap existingKeymap : existingKeymaps) {
      if (parentName.equals(existingKeymap.getName())) {
        myParent=(KeymapImpl)existingKeymap;
        myCanModify=true;
        break;
      }
    }
  }
  setName(keymapElement.getAttributeValue(NAME_ATTRIBUTE));
  Map<String,ArrayList<Shortcut>> id2shortcuts=new HashMap<String,ArrayList<Shortcut>>();
  final boolean skipInserts=SystemInfo.isMac && !ApplicationManager.getApplication().isUnitTestMode();
  for (  final Object o : keymapElement.getChildren()) {
    Element actionElement=(Element)o;
    if (ACTION.equals(actionElement.getName())) {
      String id=actionElement.getAttributeValue(ID_ATTRIBUTE);
      if (id == null) {
        throw new InvalidDataException("Attribute 'id' cannot be null; Keymap's name=" + getName());
      }
      id2shortcuts.put(id,new ArrayList<Shortcut>(1));
      for (      final Object o1 : actionElement.getChildren()) {
        Element shortcutElement=(Element)o1;
        if (KEYBOARD_SHORTCUT.equals(shortcutElement.getName())) {
          String firstKeyStrokeStr=shortcutElement.getAttributeValue(FIRST_KEYSTROKE_ATTRIBUTE);
          if (firstKeyStrokeStr == null) {
            throw new InvalidDataException("Attribute '" + FIRST_KEYSTROKE_ATTRIBUTE + "' cannot be null; Action's id="+ id+ "; Keymap's name="+ getName());
          }
          if (skipInserts && firstKeyStrokeStr.contains("INSERT"))           continue;
          KeyStroke firstKeyStroke=KeyStrokeAdapter.getKeyStroke(firstKeyStrokeStr);
          if (firstKeyStroke == null)           continue;
          KeyStroke secondKeyStroke=null;
          String secondKeyStrokeStr=shortcutElement.getAttributeValue(SECOND_KEYSTROKE_ATTRIBUTE);
          if (secondKeyStrokeStr != null) {
            secondKeyStroke=KeyStrokeAdapter.getKeyStroke(secondKeyStrokeStr);
            if (secondKeyStroke == null)             continue;
          }
          Shortcut shortcut=new KeyboardShortcut(firstKeyStroke,secondKeyStroke);
          ArrayList<Shortcut> shortcuts=id2shortcuts.get(id);
          shortcuts.add(shortcut);
        }
 else         if (KEYBOARD_GESTURE_SHORTCUT.equals(shortcutElement.getName())) {
          final String strokeText=shortcutElement.getAttributeValue(KEYBOARD_GESTURE_KEY);
          if (strokeText == null) {
            throw new InvalidDataException("Attribute '" + KEYBOARD_GESTURE_KEY + "' cannot be null; Action's id="+ id+ "; Keymap's name="+ getName());
          }
          KeyStroke stroke=KeyStrokeAdapter.getKeyStroke(strokeText);
          if (stroke == null)           continue;
          final String modifierText=shortcutElement.getAttributeValue(KEYBOARD_GESTURE_MODIFIER);
          KeyboardGestureAction.ModifierType modifier=null;
          if (KeyboardGestureAction.ModifierType.dblClick.toString().equalsIgnoreCase(modifierText)) {
            modifier=KeyboardGestureAction.ModifierType.dblClick;
          }
 else           if (KeyboardGestureAction.ModifierType.hold.toString().equalsIgnoreCase(modifierText)) {
            modifier=KeyboardGestureAction.ModifierType.hold;
          }
          if (modifier == null) {
            throw new InvalidDataException("Wrong modifier=" + modifierText + " action id="+ id+ " keymap="+ getName());
          }
          Shortcut shortcut=KeyboardModifierGestureShortcut.newInstance(modifier,stroke);
          final ArrayList<Shortcut> shortcuts=id2shortcuts.get(id);
          shortcuts.add(shortcut);
        }
 else         if (MOUSE_SHORTCUT.equals(shortcutElement.getName())) {
          String keystrokeString=shortcutElement.getAttributeValue(KEYSTROKE_ATTRIBUTE);
          if (keystrokeString == null) {
            throw new InvalidDataException("Attribute 'keystroke' cannot be null; Action's id=" + id + "; Keymap's name="+ getName());
          }
          try {
            MouseShortcut shortcut=KeymapUtil.parseMouseShortcut(keystrokeString);
            ArrayList<Shortcut> shortcuts=id2shortcuts.get(id);
            shortcuts.add(shortcut);
          }
 catch (          InvalidDataException exc) {
            throw new InvalidDataException("Wrong mouse-shortcut: '" + keystrokeString + "'; Action's id="+ id+ "; Keymap's name="+ getName());
          }
        }
 else {
          throw new InvalidDataException("unknown element: " + shortcutElement + "; Keymap's name="+ getName());
        }
      }
    }
 else {
      throw new InvalidDataException("unknown element: " + actionElement + "; Keymap's name="+ getName());
    }
  }
  for (  String id : id2shortcuts.keySet()) {
    myActionId2ListOfShortcuts.put(id,new OrderedSet<Shortcut>(2));
    ArrayList<Shortcut> shortcuts=id2shortcuts.get(id);
    for (    Shortcut shortcut : shortcuts) {
      addShortcutSilently(id,shortcut,false);
    }
  }
}
