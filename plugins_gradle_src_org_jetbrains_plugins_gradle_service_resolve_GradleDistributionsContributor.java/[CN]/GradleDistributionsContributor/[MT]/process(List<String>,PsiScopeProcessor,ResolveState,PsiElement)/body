{
  if (methodCallInfo.isEmpty()) {
    return;
  }
  String methodCall=ContainerUtil.getLastItem(methodCallInfo);
  if (methodCall == null) {
    return;
  }
  if (methodCallInfo.size() > 1 && DISTRIBUTIONS.equals(place.getText()) && place instanceof GrReferenceExpressionImpl) {
    GradleResolverUtil.addImplicitVariable(processor,state,(GrReferenceExpressionImpl)place,GRADLE_API_DISTRIBUTION_CONTAINER);
  }
  if (methodCallInfo.size() > 1 && methodCall.equals("project")) {
    methodCallInfo.remove(methodCallInfo.size() - 1);
    methodCall=ContainerUtil.getLastItem(methodCallInfo);
  }
  if (methodCall == null || !StringUtil.startsWith(methodCall,DISTRIBUTIONS)) {
    return;
  }
  String closureMethod=null;
  String configureClosureClazz=null;
  String contributorClass=null;
  boolean isRootRelated=StringUtil.startsWith(methodCall,DISTRIBUTIONS + '.');
  if (methodCallInfo.size() == 1) {
    configureClosureClazz=GRADLE_API_DISTRIBUTION_CONTAINER;
    if (place instanceof GrReferenceExpressionImpl) {
      String varClazz=StringUtil.startsWith(methodCall,DISTRIBUTIONS + '.') ? GRADLE_API_DISTRIBUTION_CONTAINER : GRADLE_API_DISTRIBUTION;
      GradleResolverUtil.addImplicitVariable(processor,state,(GrReferenceExpressionImpl)place,varClazz);
    }
 else {
      contributorClass=GRADLE_API_DISTRIBUTION_CONTAINER;
    }
    closureMethod="configure";
  }
 else   if (methodCallInfo.size() == 2) {
    configureClosureClazz=GRADLE_API_DISTRIBUTION;
    contributorClass=GRADLE_API_DISTRIBUTION;
    closureMethod="create";
  }
 else   if (methodCallInfo.size() == 3 && CONTENTS_METHOD.equals(place.getText())) {
    GroovyPsiManager psiManager=GroovyPsiManager.getInstance(place.getProject());
    PsiClass psiClass=psiManager.findClassWithCache(GRADLE_API_DISTRIBUTION,place.getResolveScope());
    GrLightMethodBuilder methodWithClosure=GradleResolverUtil.createMethodWithClosure(CONTENTS_METHOD,GRADLE_API_FILE_COPY_SPEC,null,place,psiManager);
    if (methodWithClosure != null) {
      if (psiClass != null) {
        PsiMethod psiMethod=ArrayUtil.getFirstElement(psiClass.findMethodsByName(CONTENTS_METHOD,false));
        if (psiMethod != null) {
          methodWithClosure.setNavigationElement(psiMethod);
        }
      }
      processor.execute(methodWithClosure,state);
    }
  }
 else   if (methodCallInfo.size() == 4 && CONTENTS_METHOD.equals(methodCallInfo.get(1))) {
    GradleResolverUtil.processDeclarations(methodCallInfo.get(0),GroovyPsiManager.getInstance(place.getProject()),processor,state,place,GRADLE_API_FILE_COPY_SPEC);
  }
  if (configureClosureClazz != null && !isRootRelated) {
    final GroovyPsiManager psiManager=GroovyPsiManager.getInstance(place.getProject());
    GrLightMethodBuilder methodWithClosure=GradleResolverUtil.createMethodWithClosure(closureMethod,configureClosureClazz,null,place,psiManager);
    if (methodWithClosure != null) {
      processor.execute(methodWithClosure,state);
    }
  }
  if (contributorClass != null) {
    GroovyPsiManager psiManager=GroovyPsiManager.getInstance(place.getProject());
    GradleResolverUtil.processDeclarations(psiManager,processor,state,place,contributorClass);
  }
}
