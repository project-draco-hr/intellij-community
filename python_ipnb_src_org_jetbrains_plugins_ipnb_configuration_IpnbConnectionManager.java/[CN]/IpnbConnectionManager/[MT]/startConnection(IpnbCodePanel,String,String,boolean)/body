{
  try {
    final IpnbConnection connection=new IpnbConnection(new URI(url),new IpnbConnectionListenerBase(){
      @Override public void onOpen(      @NotNull IpnbConnection connection){
        final String messageId=connection.execute(codePanel.getCell().getSourceAsString());
        myUpdateMap.put(messageId,codePanel);
      }
      @Override public void onOutput(      @NotNull IpnbConnection connection,      @NotNull String parentMessageId,      @NotNull List<IpnbOutputCell> outputs,      @Nullable Integer execCount){
        if (!myUpdateMap.containsKey(parentMessageId))         return;
        final IpnbCodePanel cell=myUpdateMap.remove(parentMessageId);
        cell.getCell().setPromptNumber(execCount);
        cell.updatePanel(outputs);
      }
    }
);
    myKernels.put(path,connection);
  }
 catch (  URISyntaxException e) {
    if (showNotification)     showWarning(codePanel.getFileEditor(),"Please, check IPython Notebook URL in Settings->IPython Notebook");
    LOG.warn("IPython Notebook URI Syntax Error: " + e.getMessage());
    return false;
  }
catch (  IOException e) {
    if (showNotification)     showWarning(codePanel.getFileEditor(),"IPython Notebook connection refused");
    LOG.warn("IPython Notebook connection refused: " + e.getMessage());
    return false;
  }
  return true;
}
