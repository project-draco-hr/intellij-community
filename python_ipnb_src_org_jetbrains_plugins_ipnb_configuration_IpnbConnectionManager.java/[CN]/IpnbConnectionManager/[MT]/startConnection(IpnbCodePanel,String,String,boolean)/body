{
  try {
    final boolean[] connectionOpened={false};
    final IpnbConnectionListenerBase listener=new IpnbConnectionListenerBase(){
      @Override public void onOpen(      @NotNull IpnbConnection connection){
        connectionOpened[0]=true;
        if (codePanel == null)         return;
        final String messageId=connection.execute(codePanel.getCell().getSourceAsString());
        myUpdateMap.put(messageId,codePanel);
      }
      @Override public void onOutput(      @NotNull IpnbConnection connection,      @NotNull String parentMessageId){
        if (!myUpdateMap.containsKey(parentMessageId))         return;
        final IpnbCodePanel cell=myUpdateMap.get(parentMessageId);
        cell.getCell().setPromptNumber(connection.getExecCount());
        cell.updatePanel(null,(List<IpnbOutputCell>)connection.getOutput().clone());
      }
      @Override public void onPayload(      @Nullable String payload,      @NotNull String parentMessageId){
        if (!myUpdateMap.containsKey(parentMessageId))         return;
        final IpnbCodePanel cell=myUpdateMap.remove(parentMessageId);
        if (payload != null) {
          cell.updatePanel(payload,null);
        }
      }
    }
;
    try {
      final IpnbConnection connection=getConnection(codePanel,urlString,listener);
      int countAttempt=0;
      while (!connectionOpened[0] && countAttempt < MAX_ATTEMPTS) {
        countAttempt+=1;
        TimeoutUtil.sleep(1000);
      }
      myKernels.put(path,connection);
    }
 catch (    URISyntaxException e) {
      if (showNotification && codePanel != null) {
        showWarning(codePanel.getFileEditor(),"Please, check Jupyter Notebook URL in <a href=\"\">Settings->Tools->Jupyter Notebook</a>",new IpnbSettingsAdapter());
        LOG.warn("Jupyter Notebook connection refused: " + e.getMessage());
      }
      return false;
    }
  }
 catch (  IOException e) {
    if (showNotification) {
      LOG.warn("Jupyter Notebook connection refused: " + e.getMessage());
    }
    return false;
  }
  return true;
}
