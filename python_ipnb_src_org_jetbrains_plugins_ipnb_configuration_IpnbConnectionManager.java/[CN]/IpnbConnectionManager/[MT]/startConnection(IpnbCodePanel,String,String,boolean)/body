{
  try {
    final IpnbConnectionListenerBase listener=new IpnbConnectionListenerBase(){
      @Override public void onOpen(      @NotNull IpnbConnection connection){
        final String messageId=connection.execute(codePanel.getCell().getSourceAsString());
        myUpdateMap.put(messageId,codePanel);
      }
      @Override public void onOutput(      @NotNull IpnbConnection connection,      @NotNull String parentMessageId,      @NotNull List<IpnbOutputCell> outputs,      @Nullable Integer execCount){
        if (!myUpdateMap.containsKey(parentMessageId))         return;
        final IpnbCodePanel cell=myUpdateMap.remove(parentMessageId);
        cell.getCell().setPromptNumber(execCount);
        cell.updatePanel(outputs);
      }
    }
;
    HttpRequests.request(urlString + "/api").connect(new HttpRequests.RequestProcessor<Object>(){
      @Override public Object process(      @NotNull HttpRequests.Request request) throws IOException {
        final IpnbConnection connection;
        try {
          if (request.isSuccessful()) {
            connection=new IpnbConnectionV3(urlString,listener);
          }
 else {
            connection=new IpnbConnection(urlString,listener);
          }
          myKernels.put(path,connection);
        }
 catch (        URISyntaxException e) {
          if (showNotification) {
            showWarning(codePanel.getFileEditor(),"Please, check IPython Notebook URL in <a href=\"\">Settings->Tools->IPython Notebook</a>",new IpnbSettingsAdapter());
            LOG.warn("IPython Notebook connection refused: " + e.getMessage());
          }
        }
        return null;
      }
    }
);
  }
 catch (  IOException e) {
    if (showNotification) {
      showWarning(codePanel.getFileEditor(),"IPython Notebook connection refused",null);
      LOG.warn("IPython Notebook connection refused: " + e.getMessage());
    }
    return false;
  }
  return true;
}
