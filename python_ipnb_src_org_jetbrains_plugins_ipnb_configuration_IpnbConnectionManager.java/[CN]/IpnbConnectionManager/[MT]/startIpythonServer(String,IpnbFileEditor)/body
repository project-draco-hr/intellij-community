{
  final Module module=ProjectFileIndex.SERVICE.getInstance(myProject).getModuleForFile(fileEditor.getVirtualFile());
  if (module == null)   return false;
  final Sdk sdk=PythonSdkType.findPythonSdk(module);
  if (sdk == null) {
    showWarning(fileEditor,"Please check Python Interpreter in Settings->Python Interpreter",null);
    return false;
  }
  final List<PyPackage> packages=PyPackageManager.getInstance(sdk).getPackages();
  final PyPackage ipythonPackage=packages != null ? PyPackageUtil.findPackage(packages,"ipython") : null;
  final PyPackage jupyterPackage=packages != null ? PyPackageUtil.findPackage(packages,"jupyter") : null;
  if (ipythonPackage == null && jupyterPackage == null) {
    showWarning(fileEditor,"Add Jupyter to the interpreter of the current project.",null);
    return false;
  }
  String url=showDialogUrl(initUrl);
  if (url == null)   return false;
  IpnbSettings.getInstance(myProject).setURL(url);
  final Pair<String,String> hostPort=getHostPortFromUrl(url);
  if (hostPort == null) {
    showWarning(fileEditor,"Please, check Jupyter Notebook URL in <a href=\"\">Settings->Tools->Jupyter Notebook</a>",new IpnbSettingsAdapter());
    return false;
  }
  final String homePath=sdk.getHomePath();
  if (homePath == null) {
    showWarning(fileEditor,"Python Sdk is invalid, please check Python Interpreter in Settings->Python Interpreter",null);
    return false;
  }
  Map<String,String> env=null;
  final ArrayList<String> parameters=Lists.newArrayList(homePath);
  String ipython=findJupyterRunner(homePath);
  if (ipython == null) {
    ipython=findIPythonRunner(homePath);
    if (ipython == null) {
      ipython=PythonHelper.LOAD_ENTRY_POINT.asParamString();
      env=ImmutableMap.of("PYCHARM_EP_DIST","ipython","PYCHARM_EP_NAME","ipython");
    }
    parameters.add(ipython);
    parameters.add("notebook");
  }
 else {
    parameters.add(ipython);
  }
  parameters.add("--no-browser");
  if (hostPort.getFirst() != null) {
    parameters.add("--ip");
    parameters.add(hostPort.getFirst());
  }
  if (hostPort.getSecond() != null) {
    parameters.add("--port");
    parameters.add(hostPort.getSecond());
  }
  final String baseDir=ModuleRootManager.getInstance(module).getContentRoots()[0].getCanonicalPath();
  final GeneralCommandLine commandLine=new GeneralCommandLine(parameters).withWorkDirectory(baseDir);
  if (env != null) {
    commandLine.withEnvironment(env);
  }
  try {
    final boolean[] serverStarted={false};
    final KillableColoredProcessHandler processHandler=new KillableColoredProcessHandler(commandLine){
      @Override protected void doDestroyProcess(){
        super.doDestroyProcess();
        myKernels.clear();
        UnixProcessManager.sendSigIntToProcessTree(getProcess());
      }
      @Override public void coloredTextAvailable(      @NonNls String text,      Key attributes){
        super.coloredTextAvailable(text,attributes);
        if (text.toLowerCase().contains("active kernels")) {
          serverStarted[0]=true;
        }
      }
      @Override public boolean isSilentlyDestroyOnClose(){
        return true;
      }
    }
;
    processHandler.setShouldDestroyProcessRecursively(true);
    GuiUtils.invokeLaterIfNeeded(new Runnable(){
      @Override public void run(){
        new RunContentExecutor(myProject,processHandler).withTitle("Jupyter Notebook").withStop(new Runnable(){
          @Override public void run(){
            myKernels.clear();
            processHandler.destroyProcess();
            UnixProcessManager.sendSigIntToProcessTree(processHandler.getProcess());
          }
        }
,new Computable<Boolean>(){
          @Override public Boolean compute(){
            return !processHandler.isProcessTerminated();
          }
        }
).withRerun(new Runnable(){
          @Override public void run(){
            startIpythonServer(url,fileEditor);
          }
        }
).withHelpId("reference.manage.py").run();
      }
    }
,ModalityState.defaultModalityState());
    int countAttempt=0;
    while (!serverStarted[0] && countAttempt < MAX_ATTEMPTS) {
      countAttempt+=1;
      TimeoutUtil.sleep(1000);
    }
    return true;
  }
 catch (  ExecutionException e) {
    return false;
  }
}
