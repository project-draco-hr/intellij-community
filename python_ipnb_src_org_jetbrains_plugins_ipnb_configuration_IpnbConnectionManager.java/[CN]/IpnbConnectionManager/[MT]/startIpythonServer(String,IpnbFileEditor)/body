{
  final Module module=ProjectFileIndex.SERVICE.getInstance(myProject).getModuleForFile(fileEditor.getVirtualFile());
  if (module == null)   return false;
  final Sdk sdk=PythonSdkType.findPythonSdk(module);
  if (sdk == null) {
    showWarning(fileEditor,"Please check Python Interpreter in Settings->Python Interpreter");
    return false;
  }
  try {
    final PyPackage ipythonPackage=PyPackageManager.getInstance(sdk).findPackage("ipython",false);
    if (ipythonPackage == null) {
      showWarning(fileEditor,"Add IPython to the interpreter of the current project.");
      return false;
    }
  }
 catch (  ExecutionException ignored) {
  }
  final Map<String,String> env=ImmutableMap.of("PYCHARM_EP_DIST","ipython","PYCHARM_EP_NAME","ipython");
  final Pair<String,String> hostPort=getHostPortFromUrl(url);
  final String ipython=PythonHelpersLocator.getHelperPath("pycharm/pycharm_load_entry_point.py");
  final ArrayList<String> parameters=Lists.newArrayList(sdk.getHomePath(),ipython,"notebook","--no-browser");
  if (hostPort.getFirst() != null) {
    parameters.add("--ip");
    parameters.add(hostPort.getFirst());
  }
  if (hostPort.getSecond() != null) {
    parameters.add("--port");
    parameters.add(hostPort.getSecond());
  }
  final GeneralCommandLine commandLine=new GeneralCommandLine(parameters).withWorkDirectory(myProject.getBasePath()).withEnvironment(env);
  try {
    myProcessHandler=new KillableColoredProcessHandler(commandLine){
      @Override public boolean isSilentlyDestroyOnClose(){
        return true;
      }
    }
;
    myProcessHandler.setShouldDestroyProcessRecursively(true);
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        new RunContentExecutor(myProject,myProcessHandler).withConsole(new IpnbConsole(myProject,myProcessHandler)).run();
      }
    }
);
    return true;
  }
 catch (  ExecutionException e) {
    return false;
  }
}
