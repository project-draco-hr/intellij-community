{
  final Module module=ProjectFileIndex.SERVICE.getInstance(myProject).getModuleForFile(fileEditor.getVirtualFile());
  if (module == null)   return false;
  final Sdk sdk=PythonSdkType.findPythonSdk(module);
  if (sdk == null) {
    showWarning(fileEditor,"Please check Python Interpreter in Settings->Python Interpreter",null);
    return false;
  }
  try {
    final PyPackage ipythonPackage=PyPackageManager.getInstance(sdk).findPackage("ipython",false);
    if (ipythonPackage == null) {
      showWarning(fileEditor,"Add IPython to the interpreter of the current project.",null);
      return false;
    }
  }
 catch (  ExecutionException ignored) {
  }
  final Pair<String,String> hostPort=getHostPortFromUrl(url);
  if (hostPort == null) {
    showWarning(fileEditor,"Please, check IPython Notebook URL in <a href=\"\">Settings->Tools->IPython Notebook</a>",new IpnbSettingsAdapter());
    return false;
  }
  final String homePath=sdk.getHomePath();
  if (homePath == null)   return false;
  final String ipython=PythonSdkType.getExecutablePath(homePath,SystemInfo.isWindows ? "ipython.exe" : "ipython");
  if (ipython == null) {
    showWarning(fileEditor,"IPython executable is not found, please check your IPython installation",null);
    return false;
  }
  final ArrayList<String> parameters=Lists.newArrayList(homePath,ipython,"notebook","--no-browser");
  if (hostPort.getFirst() != null) {
    parameters.add("--ip");
    parameters.add(hostPort.getFirst());
  }
  if (hostPort.getSecond() != null) {
    parameters.add("--port");
    parameters.add(hostPort.getSecond());
  }
  final GeneralCommandLine commandLine=new GeneralCommandLine(parameters).withWorkDirectory(myProject.getBasePath());
  try {
    final KillableColoredProcessHandler processHandler=new KillableColoredProcessHandler(commandLine){
      @Override protected void doDestroyProcess(){
        super.doDestroyProcess();
        UnixProcessManager.sendSigIntToProcessTree(getProcess());
      }
      @Override public boolean isSilentlyDestroyOnClose(){
        return true;
      }
    }
;
    processHandler.setShouldDestroyProcessRecursively(true);
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        new RunContentExecutor(myProject,processHandler).withTitle("IPython Notebook").withStop(new Runnable(){
          @Override public void run(){
            processHandler.destroyProcess();
            UnixProcessManager.sendSigIntToProcessTree(processHandler.getProcess());
          }
        }
,new Computable<Boolean>(){
          @Override public Boolean compute(){
            return !processHandler.isProcessTerminated();
          }
        }
).withRerun(new Runnable(){
          @Override public void run(){
            startIpythonServer(url,fileEditor);
          }
        }
).run();
      }
    }
);
    return true;
  }
 catch (  ExecutionException e) {
    return false;
  }
}
