{
  CompiledPattern pattern=myGlobalVisitor.getContext().getPattern();
  if (myGlobalVisitor.getCodeBlockLevel() == 0) {
    initTopLevelElement(element);
    return;
  }
  if (canBePatternVariable(element) && pattern.isRealTypedVar(element)) {
    myGlobalVisitor.handle(element);
    final MatchingHandler handler=pattern.getHandler(element);
    handler.setFilter(new NodeFilter(){
      public boolean accepts(      PsiElement other){
        return canBePatternVariableValue(other);
      }
    }
);
    super.visitElement(element);
    return;
  }
  super.visitElement(element);
  if (myGlobalVisitor.getContext().getSearchHelper().doOptimizing() && element instanceof LeafElement) {
    ParserDefinition parserDefinition=LanguageParserDefinitions.INSTANCE.forLanguage(element.getLanguage());
    if (parserDefinition != null) {
      String text=element.getText();
      boolean flag=true;
      if (StringUtil.isJavaIdentifier(text) && flag) {
        myGlobalVisitor.processTokenizedName(text,true,GlobalCompilingVisitor.OccurenceKind.CODE);
      }
    }
  }
}
