{
  if (node.type == ClassNode.CLASS_LAMBDA) {
    ClassNode node_content=DecompilerContext.getClassprocessor().getMapRootClasses().get(node.classStruct.qualifiedName);
    if (node_content != null && node_content.wrapper != null) {
      node_content.wrapper.getHideMembers().add(node.lambda_information.content_method_key);
    }
  }
  if (node.nested.isEmpty()) {
    return;
  }
  if (node.type != ClassNode.CLASS_LAMBDA) {
    computeLocalVarsAndDefinitions(node);
    checkNotFoundClasses(root,node);
  }
  for (  ClassNode child : node.nested) {
    if ((child.type == ClassNode.CLASS_LOCAL || child.type == ClassNode.CLASS_MEMBER) && child.simpleName == null) {
      DecompilerContext.getLogger().writeMessage("Nameless local or member class " + child.classStruct.qualifiedName + "!",IFernflowerLogger.WARNING);
      child.simpleName="NamelessClass" + child.hashCode();
    }
  }
  for (  ClassNode child : node.nested) {
    if (child.type == ClassNode.CLASS_LAMBDA) {
      setLambdaVars(node,child);
    }
 else {
      if (child.type != ClassNode.CLASS_MEMBER || (child.access & CodeConstants.ACC_STATIC) == 0) {
        insertLocalVars(node,child);
        if (child.type == ClassNode.CLASS_LOCAL) {
          setLocalClassDefinition(node.wrapper.getMethods().getWithKey(child.enclosingMethod),child);
        }
      }
    }
  }
  for (  ClassNode child : node.nested) {
    processClass(root,child);
  }
}
