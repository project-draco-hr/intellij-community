{
  super(project);
  if (!myProject.isDefault()) {
    final NewFileTracker newFileTracker=NewFileTracker.getInstance();
    Disposer.register(myProject,new Disposable(){
      @Override public void dispose(){
        newFileTracker.clear();
      }
    }
);
    startupManager.runWhenProjectIsInitialized(new Runnable(){
      @Override public void run(){
        DocumentListener listener=new DocumentAdapter(){
          @Override public void documentChanged(          DocumentEvent e){
            final Document document=e.getDocument();
            final VirtualFile virtualFile=fileDocumentManager.getFile(document);
            if (virtualFile == null)             return;
            final Module module=projectRootManager.getFileIndex().getModuleForFile(virtualFile);
            if (module == null)             return;
            if (!newFileTracker.poll(virtualFile))             return;
            if (!fileTypeUtil.isSupportedFile(virtualFile))             return;
            if (psiManager.findFile(virtualFile) == null)             return;
            application.invokeLater(new Runnable(){
              @Override public void run(){
                if (!virtualFile.isValid())                 return;
                final PsiFile file=psiManager.findFile(virtualFile);
                if (file != null && file.isWritable()) {
                  final CopyrightProfile opts=getCopyrightOptions(file);
                  if (opts != null) {
                    new UpdateCopyrightProcessor(myProject,module,file).run();
                  }
                }
              }
            }
,ModalityState.NON_MODAL,myProject.getDisposed());
          }
        }
;
        editorFactory.getEventMulticaster().addDocumentListener(listener,myProject);
      }
    }
);
  }
}
