{
  PsiElement must_be_super_init=((PyReferenceExpression)callee).getReference().resolve();
  if (must_be_super_init instanceof PyFunction) {
    PyClass must_be_super=((PyFunction)must_be_super_init).getContainingClass();
    if (must_be_super == PyBuiltinCache.getInstance(this).getClass(PyNames.SUPER)) {
      PyArgumentList arglist=getArgumentList();
      if (arglist != null) {
        final PyClass containingClass=PsiTreeUtil.getParentOfType(this,PyClass.class);
        PyExpression[] args=arglist.getArguments();
        if (args.length > 1) {
          PyExpression first_arg=args[0];
          if (first_arg instanceof PyReferenceExpression) {
            final PyReferenceExpression firstArgRef=(PyReferenceExpression)first_arg;
            final PyExpression qualifier=firstArgRef.getQualifier();
            if (qualifier != null && PyNames.CLASS.equals(firstArgRef.getReferencedName())) {
              final PsiReference qRef=qualifier.getReference();
              final PsiElement element=qRef == null ? null : qRef.resolve();
              if (element instanceof PyParameter) {
                final PyParameterList parameterList=PsiTreeUtil.getParentOfType(element,PyParameterList.class);
                if (parameterList != null && element == parameterList.getParameters()[0]) {
                  return getSuperCallType(context,containingClass,args[1]);
                }
              }
            }
            PsiElement possible_class=firstArgRef.getReference().resolve();
            if (possible_class instanceof PyClass && ((PyClass)possible_class).isNewStyleClass()) {
              final PyClass first_class=(PyClass)possible_class;
              return getSuperCallType(context,first_class,args[1]);
            }
          }
        }
 else         if (((PyFile)getContainingFile()).getLanguageLevel().isPy3K()) {
          return getFirstSuperClassType(containingClass);
        }
      }
    }
  }
  return null;
}
