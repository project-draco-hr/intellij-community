{
  if (!TypeEvalStack.mayEvaluate(this)) {
    return null;
  }
  try {
    PyExpression callee=getCallee();
    if (callee instanceof PyReferenceExpression) {
      if (PyNames.SUPER.equals(callee.getText())) {
        final Maybe<PyType> superCallType=getSuperCallType(callee,context);
        if (superCallType.isDefined()) {
          return superCallType.value();
        }
      }
      final PyResolveContext resolveContext=PyResolveContext.noImplicits().withTypeEvalContext(context);
      ResolveResult[] targets=((PyReferenceExpression)callee).getReference(resolveContext).multiResolve(false);
      if (targets.length > 0) {
        PsiElement target=targets[0].getElement();
        if (target == null) {
          return null;
        }
        if (target instanceof PyClass) {
          return new PyClassType((PyClass)target,false);
        }
 else         if (target instanceof PyFunction && PyNames.INIT.equals(((PyFunction)target).getName())) {
          return new PyClassType(((PyFunction)target).getContainingClass(),false);
        }
        final PyType providedType=PyReferenceExpressionImpl.getReferenceTypeFromProviders(target,context,this);
        if (providedType != null) {
          return providedType;
        }
        if (target instanceof Callable) {
          final Callable callable=(Callable)target;
          PyType returnType=callable.getReturnType(context,(PyReferenceExpression)callee);
          if (returnType != null) {
            return returnType;
          }
          return new PyReturnTypeReference(callable);
        }
      }
    }
    if (callee == null) {
      return null;
    }
 else {
      final PyType type=context.getType(callee);
      if (type instanceof PyCallableType) {
        return ((PyCallableType)type).getCallType();
      }
      return null;
    }
  }
  finally {
    TypeEvalStack.evaluated(this);
  }
}
