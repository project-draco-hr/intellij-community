{
  if (!TypeEvalStack.mayEvaluate(this)) {
    return null;
  }
  try {
    PyExpression callee=getCallee();
    if (callee instanceof PyReferenceExpression) {
      if ("super".equals(callee.getText())) {
        final PyType superCallType=getSuperCallType(callee,context);
        if (superCallType != null) {
          return superCallType;
        }
      }
      ResolveResult[] targets=((PyReferenceExpression)callee).getReference(PyResolveContext.noImplicits()).multiResolve(false);
      if (targets.length > 0) {
        PsiElement target=targets[0].getElement();
        if (target instanceof PyClass) {
          return new PyClassType((PyClass)target,false);
        }
 else         if (target instanceof PyFunction && PyNames.INIT.equals(((PyFunction)target).getName())) {
          return new PyClassType(((PyFunction)target).getContainingClass(),false);
        }
        final PyType providedType=PyReferenceExpressionImpl.getReferenceTypeFromProviders(target,context);
        if (providedType != null) {
          return providedType;
        }
        if (target instanceof PyFunction) {
          final PyFunction function=(PyFunction)target;
          if (context.allowReturnTypes()) {
            return function.getReturnType();
          }
          final PyType docStringType=function.getReturnTypeFromDocString();
          if (docStringType != null) {
            return docStringType;
          }
          return new PyReturnTypeReference((PyFunction)target);
        }
      }
    }
    if (callee == null) {
      return null;
    }
 else {
      return callee.getType(context);
    }
  }
  finally {
    TypeEvalStack.evaluated(this);
  }
}
