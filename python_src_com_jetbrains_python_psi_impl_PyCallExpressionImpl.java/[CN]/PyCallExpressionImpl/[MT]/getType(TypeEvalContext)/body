{
  if (!TypeEvalStack.mayEvaluate(this)) {
    return null;
  }
  try {
    PyExpression callee=getCallee();
    if (callee instanceof PyReferenceExpression) {
      if (PyNames.SUPER.equals(callee.getText())) {
        final Maybe<PyType> superCallType=getSuperCallType(callee,context);
        if (superCallType.isDefined()) {
          return superCallType.value();
        }
      }
      if ("type".equals(callee.getText())) {
        final PyExpression[] args=getArguments();
        if (args.length == 1) {
          final PyExpression arg=args[0];
          final PyType argType=arg.getType(context);
          if (argType instanceof PyClassType) {
            final PyClassType classType=(PyClassType)argType;
            if (!classType.isDefinition()) {
              final PyClass cls=classType.getPyClass();
              return cls.getType(context);
            }
          }
 else {
            return null;
          }
        }
      }
      final PyResolveContext resolveContext=PyResolveContext.noImplicits().withTypeEvalContext(context);
      ResolveResult[] targets=((PyReferenceExpression)callee).getReference(resolveContext).multiResolve(false);
      if (targets.length > 0) {
        PsiElement target=targets[0].getElement();
        if (target == null) {
          return null;
        }
        PyClass cls=null;
        PyFunction init=null;
        if (target instanceof PyClass) {
          cls=(PyClass)target;
          init=cls.findInitOrNew(true);
        }
 else         if (target instanceof PyFunction) {
          final PyFunction f=(PyFunction)target;
          if (PyNames.INIT.equals(f.getName())) {
            init=f;
            cls=f.getContainingClass();
          }
        }
        if (init != null) {
          final PyType t=init.getReturnType(context,(PyReferenceExpression)callee);
          if (cls != null) {
            if (init.getContainingClass() != cls) {
              if (t instanceof PyCollectionType) {
                final PyType elementType=((PyCollectionType)t).getElementType(context);
                return new PyCollectionTypeImpl(cls,false,elementType);
              }
              return new PyClassTypeImpl(cls,false);
            }
          }
          if (t != null && !(t instanceof PyNoneType)) {
            if (t instanceof PyTypeReference) {
              PyType resolved=((PyTypeReference)t).resolve(callee,context);
              if (resolved == null && cls != null) {
                return PyUnionType.createWeakType(new PyClassTypeImpl(cls,false));
              }
            }
            return t;
          }
        }
        if (cls != null) {
          return new PyClassTypeImpl(cls,false);
        }
        final PyType providedType=PyReferenceExpressionImpl.getReferenceTypeFromProviders(target,context,this);
        if (providedType != null) {
          return providedType;
        }
        if (target instanceof Callable) {
          final Callable callable=(Callable)target;
          PyType returnType=callable.getReturnType(context,(PyReferenceExpression)callee);
          if (returnType != null) {
            return returnType;
          }
          return new PyReturnTypeReference(callable);
        }
      }
    }
    if (callee == null) {
      return null;
    }
 else {
      final PyType type=context.getType(callee);
      if (type instanceof PyCallableType) {
        final PyQualifiedExpression callSite=callee instanceof PyQualifiedExpression ? (PyQualifiedExpression)callee : null;
        return ((PyCallableType)type).getCallType(context,callSite);
      }
      return null;
    }
  }
  finally {
    TypeEvalStack.evaluated(this);
  }
}
