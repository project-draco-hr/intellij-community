{
  if (myPushSupports.isEmpty())   return true;
  boolean isSingleRepositoryProject=myPushSupports.size() == 1;
  for (  final PushSupport support : myPushSupports) {
    RepositoryManager<? extends Repository> repositoryManager=support.getRepositoryManager();
    List<? extends Repository> repositories=repositoryManager.getRepositories();
    isSingleRepositoryProject=isSingleRepositoryProject && repositories.size() == 1;
    for (    Repository repository : repositories) {
      PushTarget target=support.getDefaultTarget(repository);
      final MyRepoModel model=new MyRepoModel(repository,support,preselectedRepositories.contains(repository),new PushSpec(support.getSource(repository),target),DEFAULT_CHILDREN_PRESENTATION_NUMBER);
      RepositoryWithBranchPanel repoPanel=new RepositoryWithBranchPanel(myProject,DvcsUtil.getShortRepositoryName(repository),support.getSource(repository).getPresentation(),target == null ? "" : target.getPresentation(),support.getTargetNames(repository));
      final RepositoryNode repoNode=isSingleRepositoryProject ? new SingleRepositoryNode(repoPanel) : new RepositoryNode(repoPanel);
      myView2Model.put(repoNode,model);
      repoNode.setChecked(model.isSelected());
      repoNode.addRepoNodeListener(new RepositoryNodeListener(){
        @Override public void onTargetChanged(        String newValue){
          myView2Model.get(repoNode).setSpec(new PushSpec(model.getSpec().getSource(),support.createTarget(newValue)));
          myDialog.updateButtons();
          myPushLog.startLoading(repoNode);
          loadCommits(model,repoNode,false);
        }
        @Override public void onSelectionChanged(        boolean isSelected){
          myView2Model.get(repoNode).setSelected(isSelected);
          myDialog.updateButtons();
        }
      }
);
      rootNode.add(repoNode);
    }
  }
  return isSingleRepositoryProject;
}
