{
  T target=support.getDefaultTarget(repository);
  String repoName=getDisplayedRepoName(repository);
  S source=support.getSource(repository);
  final MyRepoModel<R,S,T> model=new MyRepoModel<R,S,T>(repository,support,mySingleRepoProject,source,target,DEFAULT_CHILDREN_PRESENTATION_NUMBER);
  if (target == null) {
    model.setError(VcsError.createEmptyTargetError(repoName));
  }
  final PushTargetPanel<T> pushTargetPanel=support.createTargetPanel(repository,target);
  final RepositoryWithBranchPanel<T> repoPanel=new RepositoryWithBranchPanel<T>(myProject,repoName,source.getPresentation(),pushTargetPanel);
  CheckBoxModel checkBoxModel=model.getCheckBoxModel();
  final RepositoryNode repoNode=mySingleRepoProject ? new SingleRepositoryNode(repoPanel,checkBoxModel) : new RepositoryNode(repoPanel,checkBoxModel,target != null);
  if (!support.shouldRequestIncomingChangesForNotCheckedRepositories()) {
    model.getCheckBoxModel().setChecked(myPreselectedRepositories.contains(repository));
  }
  pushTargetPanel.setFireOnChangeAction(new Runnable(){
    @Override public void run(){
      repoPanel.fireOnChange();
      ((DefaultTreeModel)myPushLog.getTree().getModel()).nodeChanged(repoNode);
    }
  }
);
  myView2Model.put(repoNode,model);
  repoPanel.addRepoNodeListener(new RepositoryNodeListener<T>(){
    @Override public void onTargetChanged(    T newTarget){
      repoNode.setChecked(true);
      model.setTarget(newTarget);
      model.clearErrors();
      loadCommits(model,repoNode,false);
    }
    @Override public void onSelectionChanged(    boolean isSelected){
      myDialog.enableOkActions(isPushAllowed());
      if (isSelected && !model.hasCommitInfo() && !model.getSupport().shouldRequestIncomingChangesForNotCheckedRepositories()) {
        loadCommits(model,repoNode,false);
      }
    }
  }
);
  rootNode.add(repoNode);
}
