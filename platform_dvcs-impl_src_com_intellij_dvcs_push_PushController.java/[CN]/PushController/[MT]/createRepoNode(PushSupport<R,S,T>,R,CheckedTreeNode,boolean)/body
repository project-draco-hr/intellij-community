{
  T target=support.getDefaultTarget(repository);
  String repoName=DvcsUtil.getShortRepositoryName(repository);
  S source=support.getSource(repository);
  final MyRepoModel<R,S,T> model=new MyRepoModel<R,S,T>(repository,support,mySingleRepoProject || isSelected,source,target,DEFAULT_CHILDREN_PRESENTATION_NUMBER);
  if (target == null) {
    model.setError(VcsError.createEmptyTargetError(repoName));
  }
  final PushTargetPanel<T> pushTargetPanel=support.createTargetPanel(repository,target);
  RepositoryWithBranchPanel<T> repoPanel=new RepositoryWithBranchPanel<T>(myProject,repoName,source.getPresentation(),pushTargetPanel);
  final RepositoryNode repoNode=mySingleRepoProject ? new SingleRepositoryNode(repoPanel) : new RepositoryNode(repoPanel);
  myView2Model.put(repoNode,model);
  repoNode.setChecked(model.isSelected());
  repoPanel.addRepoNodeListener(new RepositoryNodeListener<T>(){
    @Override public void onTargetChanged(    T newTarget){
      model.setTarget(newTarget);
      model.clearErrors();
      loadCommits(model,repoNode,false);
      myDialog.updateButtons();
    }
    @Override public void onSelectionChanged(    boolean isSelected){
      model.setSelected(isSelected);
      myDialog.updateButtons();
      if (isSelected && !model.hasCommitInfo() && !model.getSupport().shouldRequestIncomingChangesForNotCheckedRepositories()) {
        loadCommits(model,repoNode,false);
      }
    }
  }
);
  rootNode.add(repoNode);
}
