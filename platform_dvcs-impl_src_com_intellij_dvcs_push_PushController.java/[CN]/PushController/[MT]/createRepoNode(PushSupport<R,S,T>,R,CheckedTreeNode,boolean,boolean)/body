{
  T target=support.getDefaultTarget(repository);
  String repoName=DvcsUtil.getShortRepositoryName(repository);
  final MyRepoModel<R,S,T> model=new MyRepoModel<R,S,T>(repository,support,isSingleRepositoryProject || isSelected,support.getSource(repository),target,DEFAULT_CHILDREN_PRESENTATION_NUMBER);
  if (target == null) {
    model.setError(VcsError.createEmptyTargetError(repoName));
  }
  RepositoryWithBranchPanel repoPanel=new RepositoryWithBranchPanel(myProject,repoName,support.getSource(repository).getPresentation(),target == null ? "" : target.getPresentation(),support.getTargetNames(repository));
  final RepositoryNode repoNode=isSingleRepositoryProject ? new SingleRepositoryNode(repoPanel,support.renderTarget(target)) : new RepositoryNode(repoPanel,support.renderTarget(target));
  myView2Model.put(repoNode,model);
  repoNode.setChecked(model.isSelected());
  repoPanel.addRepoNodeListener(new RepositoryNodeListener(){
    @Override public void onTargetChanged(    String newValue){
      VcsError validationError=support.validate(model.getRepository(),newValue);
      if (validationError == null) {
        T newTarget=support.createTarget(repository,newValue);
        repoNode.setTargetPresentation(support.renderTarget(newTarget));
        model.setTarget(newTarget);
        model.clearErrors();
        loadCommits(model,repoNode,false);
      }
 else {
        repoNode.setTargetPresentation(StringUtil.isEmptyOrSpaces(newValue) ? support.renderTarget(null) : new SimpleColoredText(newValue,SimpleTextAttributes.ERROR_ATTRIBUTES));
        model.setError(validationError);
        model.setTarget(null);
      }
      myDialog.updateButtons();
    }
    @Override public void onSelectionChanged(    boolean isSelected){
      model.setSelected(isSelected);
      repoNode.setChecked(isSelected);
      myDialog.updateButtons();
    }
  }
);
  rootNode.add(repoNode);
}
