{
  List<String> classpath=new ArrayList<String>();
  if (myOptimizeClassLoading) {
    classpath.addAll(GroovyBuilder.getGroovyRtRoots());
    classpath.add(ClasspathBootstrap.getResourcePath(Function.class));
    classpath.add(ClasspathBootstrap.getResourcePath(UrlClassLoader.class));
    classpath.add(ClasspathBootstrap.getResourceFile(THashMap.class).getPath());
  }
 else {
    classpath.addAll(compilationClassPath);
  }
  List<String> vmParams=ContainerUtilRt.newArrayList();
  vmParams.add("-Xmx" + System.getProperty("groovyc.heap.size",settings.heapSize) + "m");
  vmParams.add("-Dfile.encoding=" + System.getProperty("file.encoding"));
  if ("false".equals(System.getProperty(GroovyRtConstants.GROOVYC_ASM_RESOLVING_ONLY))) {
    vmParams.add("-D" + GroovyRtConstants.GROOVYC_ASM_RESOLVING_ONLY + "=false");
  }
  String configScript=settings.configScript;
  if (StringUtil.isNotEmpty(configScript)) {
    vmParams.add("-D" + GroovyRtConstants.GROOVYC_CONFIG_SCRIPT + "="+ configScript);
  }
  String grapeRoot=System.getProperty(GroovycOutputParser.GRAPE_ROOT);
  if (grapeRoot != null) {
    vmParams.add("-D" + GroovycOutputParser.GRAPE_ROOT + "="+ grapeRoot);
  }
  final List<String> cmd=ExternalProcessUtil.buildJavaCommandLine(getJavaExecutable(myChunk),"org.jetbrains.groovy.compiler.rt.GroovycRunner",Collections.<String>emptyList(),classpath,vmParams,getProgramParams(tempFile,settings,forStubs));
  final Process process=Runtime.getRuntime().exec(ArrayUtil.toStringArray(cmd));
  ProcessHandler handler=new BaseOSProcessHandler(process,null,null){
    @NotNull @Override protected Future<?> executeOnPooledThread(    @NotNull Runnable task){
      return SharedThreadPool.getInstance().executeOnPooledThread(task);
    }
    @Override public void notifyTextAvailable(    String text,    Key outputType){
      parser.notifyTextAvailable(text,outputType);
    }
  }
;
  handler.startNotify();
  handler.waitFor();
  parser.notifyFinished(process.exitValue());
  return null;
}
