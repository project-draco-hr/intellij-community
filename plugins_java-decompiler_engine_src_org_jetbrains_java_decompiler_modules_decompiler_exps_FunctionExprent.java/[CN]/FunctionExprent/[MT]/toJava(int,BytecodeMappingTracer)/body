{
  tracer.addMapping(bytecode);
  if (functype <= FUNCTION_USHR) {
    return wrapOperandString(lstOperands.get(0),false,indent,tracer).append(operators[functype]).append(wrapOperandString(lstOperands.get(1),true,indent,tracer));
  }
  if (functype >= FUNCTION_EQ) {
    return wrapOperandString(lstOperands.get(0),false,indent,tracer).append(operators[functype - FUNCTION_EQ + 11]).append(wrapOperandString(lstOperands.get(1),true,indent,tracer));
  }
switch (functype) {
case FUNCTION_BITNOT:
    return wrapOperandString(lstOperands.get(0),true,indent,tracer).prepend("~");
case FUNCTION_BOOLNOT:
  return wrapOperandString(lstOperands.get(0),true,indent,tracer).prepend("!");
case FUNCTION_NEG:
return wrapOperandString(lstOperands.get(0),true,indent,tracer).prepend("-");
case FUNCTION_CAST:
return lstOperands.get(1).toJava(indent,tracer).enclose("(",")").append(wrapOperandString(lstOperands.get(0),true,indent,tracer));
case FUNCTION_ARRAYLENGTH:
Exprent arr=lstOperands.get(0);
TextBuffer res=wrapOperandString(arr,false,indent,tracer);
if (arr.getExprType().arraydim == 0) {
VarType objarr=VarType.VARTYPE_OBJECT.copy();
objarr.arraydim=1;
res.enclose("((" + ExprProcessor.getCastTypeName(objarr) + ")",")");
}
return res.append(".length");
case FUNCTION_IIF:
return wrapOperandString(lstOperands.get(0),true,indent,tracer).append("?").append(wrapOperandString(lstOperands.get(1),true,indent,tracer)).append(":").append(wrapOperandString(lstOperands.get(2),true,indent,tracer));
case FUNCTION_IPP:
return wrapOperandString(lstOperands.get(0),true,indent,tracer).append("++");
case FUNCTION_PPI:
return wrapOperandString(lstOperands.get(0),true,indent,tracer).prepend("++");
case FUNCTION_IMM:
return wrapOperandString(lstOperands.get(0),true,indent,tracer).append("--");
case FUNCTION_MMI:
return wrapOperandString(lstOperands.get(0),true,indent,tracer).prepend("--");
case FUNCTION_INSTANCEOF:
return wrapOperandString(lstOperands.get(0),true,indent,tracer).append(" instanceof ").append(wrapOperandString(lstOperands.get(1),true,indent,tracer));
case FUNCTION_LCMP:
return wrapOperandString(lstOperands.get(0),true,indent,tracer).prepend("__lcmp__(").append(",").append(wrapOperandString(lstOperands.get(1),true,indent,tracer)).append(")");
case FUNCTION_FCMPL:
return wrapOperandString(lstOperands.get(0),true,indent,tracer).prepend("__fcmpl__(").append(",").append(wrapOperandString(lstOperands.get(1),true,indent,tracer)).append(")");
case FUNCTION_FCMPG:
return wrapOperandString(lstOperands.get(0),true,indent,tracer).prepend("__fcmpg__(").append(",").append(wrapOperandString(lstOperands.get(1),true,indent,tracer)).append(")");
case FUNCTION_DCMPL:
return wrapOperandString(lstOperands.get(0),true,indent,tracer).prepend("__dcmpl__(").append(",").append(wrapOperandString(lstOperands.get(1),true,indent,tracer)).append(")");
case FUNCTION_DCMPG:
return wrapOperandString(lstOperands.get(0),true,indent,tracer).prepend("__dcmpg__(").append(",").append(wrapOperandString(lstOperands.get(1),true,indent,tracer)).append(")");
}
if (functype <= FUNCTION_I2S) {
return wrapOperandString(lstOperands.get(0),true,indent,tracer).prepend("(" + ExprProcessor.getTypeName(types[functype - FUNCTION_I2L]) + ")");
}
throw new RuntimeException("invalid function");
}
