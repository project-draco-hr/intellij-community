{
  if (functype <= FUNCTION_USHR) {
    return wrapOperandString(lstOperands.get(0),false,indent) + operators[functype] + wrapOperandString(lstOperands.get(1),true,indent);
  }
  if (functype >= FUNCTION_EQ) {
    return wrapOperandString(lstOperands.get(0),false,indent) + operators[functype - FUNCTION_EQ + 11] + wrapOperandString(lstOperands.get(1),true,indent);
  }
switch (functype) {
case FUNCTION_BITNOT:
    return "~" + wrapOperandString(lstOperands.get(0),true,indent);
case FUNCTION_BOOLNOT:
  return "!" + wrapOperandString(lstOperands.get(0),true,indent);
case FUNCTION_NEG:
return "-" + wrapOperandString(lstOperands.get(0),true,indent);
case FUNCTION_CAST:
return "(" + lstOperands.get(1).toJava(indent) + ")"+ wrapOperandString(lstOperands.get(0),true,indent);
case FUNCTION_ARRAYLENGTH:
Exprent arr=lstOperands.get(0);
String res=wrapOperandString(arr,false,indent);
if (arr.getExprType().arraydim == 0) {
VarType objarr=VarType.VARTYPE_OBJECT.copy();
objarr.arraydim=1;
res="((" + ExprProcessor.getCastTypeName(objarr) + ")"+ res+ ")";
}
return res + ".length";
case FUNCTION_IIF:
return wrapOperandString(lstOperands.get(0),true,indent) + "?" + wrapOperandString(lstOperands.get(1),true,indent)+ ":"+ wrapOperandString(lstOperands.get(2),true,indent);
case FUNCTION_IPP:
return wrapOperandString(lstOperands.get(0),true,indent) + "++";
case FUNCTION_PPI:
return "++" + wrapOperandString(lstOperands.get(0),true,indent);
case FUNCTION_IMM:
return wrapOperandString(lstOperands.get(0),true,indent) + "--";
case FUNCTION_MMI:
return "--" + wrapOperandString(lstOperands.get(0),true,indent);
case FUNCTION_INSTANCEOF:
return wrapOperandString(lstOperands.get(0),true,indent) + " instanceof " + wrapOperandString(lstOperands.get(1),true,indent);
case FUNCTION_LCMP:
return "__lcmp__(" + wrapOperandString(lstOperands.get(0),true,indent) + ","+ wrapOperandString(lstOperands.get(1),true,indent)+ ")";
case FUNCTION_FCMPL:
return "__fcmpl__(" + wrapOperandString(lstOperands.get(0),true,indent) + ","+ wrapOperandString(lstOperands.get(1),true,indent)+ ")";
case FUNCTION_FCMPG:
return "__fcmpg__(" + wrapOperandString(lstOperands.get(0),true,indent) + ","+ wrapOperandString(lstOperands.get(1),true,indent)+ ")";
case FUNCTION_DCMPL:
return "__dcmpl__(" + wrapOperandString(lstOperands.get(0),true,indent) + ","+ wrapOperandString(lstOperands.get(1),true,indent)+ ")";
case FUNCTION_DCMPG:
return "__dcmpg__(" + wrapOperandString(lstOperands.get(0),true,indent) + ","+ wrapOperandString(lstOperands.get(1),true,indent)+ ")";
}
if (functype <= FUNCTION_I2S) {
return "(" + ExprProcessor.getTypeName(types[functype - FUNCTION_I2L]) + ")"+ wrapOperandString(lstOperands.get(0),true,indent);
}
throw new RuntimeException("invalid function");
}
