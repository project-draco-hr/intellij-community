{
  super(project,stateManager);
  final WatchDebuggerTree watchTree=getWatchTree();
  final AnAction removeWatchesAction=ActionManager.getInstance().getAction(DebuggerActions.REMOVE_WATCH);
  removeWatchesAction.registerCustomShortcutSet(CommonShortcuts.DELETE,watchTree);
  final AnAction newWatchAction=ActionManager.getInstance().getAction(DebuggerActions.NEW_WATCH);
  newWatchAction.registerCustomShortcutSet(CommonShortcuts.INSERT,watchTree);
  final Alarm quitePeriod=new Alarm();
  final Alarm editAlarm=new Alarm();
  final ClickListener mouseListener=new ClickListener(){
    @Override public boolean onClick(    @NotNull MouseEvent event,    int clickCount){
      if (!SwingUtilities.isLeftMouseButton(event) || ((event.getModifiers() & (InputEvent.SHIFT_MASK | InputEvent.ALT_MASK | InputEvent.CTRL_MASK| InputEvent.META_MASK)) != 0)) {
        return false;
      }
      Rectangle bounds=watchTree.getRowBounds(watchTree.getLeadSelectionRow());
      bounds.width=watchTree.getWidth();
      if (!bounds.contains(event.getPoint())) {
        return false;
      }
      final AnAction editWatchAction=ActionManager.getInstance().getAction(DebuggerActions.EDIT_WATCH);
      Presentation presentation=editWatchAction.getTemplatePresentation().clone();
      DataContext context=DataManager.getInstance().getDataContext(watchTree);
      final AnActionEvent actionEvent=new AnActionEvent(null,context,"WATCH_TREE",presentation,ActionManager.getInstance(),0);
      Runnable runnable=new Runnable(){
        public void run(){
          editWatchAction.actionPerformed(actionEvent);
        }
      }
;
      if (editAlarm.isEmpty() && quitePeriod.isEmpty()) {
        editAlarm.addRequest(runnable,UIUtil.getMultiClickInterval());
      }
 else {
        editAlarm.cancelAllRequests();
      }
      return false;
    }
  }
;
  ListenerUtil.addClickListener(watchTree,mouseListener);
  final FocusListener focusListener=new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      quitePeriod.addRequest(EmptyRunnable.getInstance(),UIUtil.getMultiClickInterval());
    }
    @Override public void focusLost(    FocusEvent e){
      editAlarm.cancelAllRequests();
    }
  }
;
  ListenerUtil.addFocusListener(watchTree,focusListener);
  final TreeSelectionListener selectionListener=new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      quitePeriod.addRequest(EmptyRunnable.getInstance(),UIUtil.getMultiClickInterval());
    }
  }
;
  watchTree.addTreeSelectionListener(selectionListener);
  final AnAction editWatchAction=ActionManager.getInstance().getAction(DebuggerActions.EDIT_WATCH);
  editWatchAction.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_F2,0)),watchTree);
  registerDisposable(new Disposable(){
    public void dispose(){
      ListenerUtil.removeClickListener(watchTree,mouseListener);
      ListenerUtil.removeFocusListener(watchTree,focusListener);
      watchTree.removeTreeSelectionListener(selectionListener);
      removeWatchesAction.unregisterCustomShortcutSet(watchTree);
      newWatchAction.unregisterCustomShortcutSet(watchTree);
      editWatchAction.unregisterCustomShortcutSet(watchTree);
    }
  }
);
  DnDManager.getInstance().registerTarget(new DnDNativeTarget(){
    public boolean update(    final DnDEvent aEvent){
      Object object=aEvent.getAttachedObject();
      if (object == null)       return true;
      String add=DebuggerBundle.message("watchs.add.text");
      if (object.getClass().isArray()) {
        Class<?> type=object.getClass().getComponentType();
        if (DebuggerTreeNodeImpl.class.isAssignableFrom(type)) {
          aEvent.setHighlighting(myTree,DnDEvent.DropTargetHighlightingType.RECTANGLE | DnDEvent.DropTargetHighlightingType.TEXT);
          aEvent.setDropPossible(add,new DropActionHandler(){
            public void performDrop(            final DnDEvent aEvent){
              addWatchesFrom((DebuggerTreeNodeImpl[])aEvent.getAttachedObject());
            }
          }
);
        }
      }
 else       if (object instanceof EventInfo) {
        EventInfo info=(EventInfo)object;
        final String text=info.getTextForFlavor(DataFlavor.stringFlavor);
        if (text != null) {
          aEvent.setHighlighting(myTree,DnDEvent.DropTargetHighlightingType.RECTANGLE | DnDEvent.DropTargetHighlightingType.TEXT);
          aEvent.setDropPossible(add,new DropActionHandler(){
            public void performDrop(            final DnDEvent aEvent){
              addWatchesFrom(text);
            }
          }
);
        }
      }
      return true;
    }
    public void drop(    final DnDEvent aEvent){
    }
    public void cleanUpOnLeave(){
    }
    public void updateDraggedImage(    final Image image,    final Point dropPoint,    final Point imageOffset){
    }
  }
,myTree);
}
