{
  int offset=editor.getCaretModel().getOffset();
  final PsiFile psiFile=InjectedLanguageUtil.findInjectedPsiNoCommit(file,offset);
  if (psiFile == null) {
    PsiReference reference=file.findReferenceAt(offset);
    if (reference != null) {
      PsiElement element=reference.getElement();
      LanguageInjectionSupport support=element.getUserData(LanguageInjectionSupport.INJECTOR_SUPPORT);
      if (support != null) {
        support.removeInjection(element);
        ((PsiModificationTrackerImpl)PsiManager.getInstance(project).getModificationTracker()).incCounter();
      }
    }
    return;
  }
  final PsiLanguageInjectionHost host=InjectedLanguageManager.getInstance(project).getInjectionHost(psiFile);
  if (host == null)   return;
  final LanguageInjectionSupport support=psiFile.getUserData(LanguageInjectionSupport.INJECTOR_SUPPORT);
  if (support == null)   return;
  try {
    if (psiFile.getUserData(LanguageInjectionSupport.TEMPORARY_INJECTED_LANGUAGE) != null) {
      TemporaryPlacesRegistry temporaryPlacesRegistry=TemporaryPlacesRegistry.getInstance(project);
      for (      PsiLanguageInjectionHost.Shred shred : InjectedLanguageUtil.getShreds(psiFile)) {
        if (temporaryPlacesRegistry.removeHostWithUndo(project,shred.getHost()))         break;
      }
    }
 else     if (!support.removeInjectionInPlace(host)) {
      defaultFunctionalityWorked(host);
    }
  }
  finally {
    FileContentUtil.reparseFiles(project,Collections.<VirtualFile>emptyList(),true);
  }
}
