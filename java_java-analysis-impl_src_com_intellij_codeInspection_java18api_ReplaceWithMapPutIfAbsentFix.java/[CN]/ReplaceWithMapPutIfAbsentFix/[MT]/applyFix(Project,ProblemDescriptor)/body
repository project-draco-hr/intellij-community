{
  final PsiElement conditionalOperator=descriptor.getPsiElement();
  if (conditionalOperator == null)   return;
  final ConditionalOperatorHelper operatorHelper=getHelper(conditionalOperator);
  final PsiMethodCallExpression putExpression=myPutExpressionPointer.getElement();
  if (putExpression == null)   return;
  PsiElement putContainingBranch=null;
  for (  PsiElement branch : operatorHelper.getBranches(conditionalOperator)) {
    if (branch != null && PsiTreeUtil.isAncestor(branch,putExpression,false)) {
      putContainingBranch=branch;
      break;
    }
  }
  if (putContainingBranch == null)   return;
  final PsiExpression[] arguments=putExpression.getArgumentList().getExpressions();
  final PsiElement qualifier=putExpression.getMethodExpression().getQualifier();
  if (qualifier == null) {
    return;
  }
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  final String methodName=getMethodName();
  final PsiElement putContainingElement=operatorHelper.getPutContainingElement(putExpression);
  final Couple<String> boundText=getBoundText(putContainingElement,putExpression);
  final PsiStatement newStatement=elementFactory.createStatementFromText(boundText.getFirst() + qualifier.getText() + "."+ methodName+ "("+ arguments[0].getText()+ ","+ createValueArgument(arguments[0],putExpression,putContainingBranch).getText()+ ")"+ boundText.getSecond(),conditionalOperator);
  conditionalOperator.replace(newStatement);
}
