{
  if (!myLazyValueComputation) {
    return putExpression.getArgumentList().getExpressions()[1];
  }
  final String parameterName=suggestLambdaParameterName(key);
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(key.getProject());
  if (key instanceof PsiReferenceExpression) {
    final PsiElement resolvedReference=((PsiReferenceExpression)key).resolve();
    if (resolvedReference instanceof PsiVariable) {
      final PsiExpression newVariableReference=elementFactory.createExpressionFromText(parameterName,key.getContext());
      for (      PsiReference reference : ReferencesSearch.search(resolvedReference,new LocalSearchScope(putBranch)).findAll()) {
        if (reference instanceof PsiJavaCodeReferenceElement && resolvedReference.isEquivalentTo(reference.resolve())) {
          ((PsiJavaCodeReferenceElement)reference).replace(newVariableReference);
        }
      }
    }
  }
  final PsiElement lambdaBody=replaceLastStatementForLambda(putBranch,putExpression);
  final String lambdaExpression="(" + parameterName + ") -> "+ lambdaBody.getText();
  return elementFactory.createExpressionFromText(lambdaExpression,null);
}
