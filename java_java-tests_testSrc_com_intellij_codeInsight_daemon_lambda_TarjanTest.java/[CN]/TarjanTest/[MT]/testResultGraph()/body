{
  InferenceGraphNode<Integer>[] nodes=new InferenceGraphNode[9];
  for (int i=0; i < nodes.length; i++) {
    nodes[i]=new InferenceGraphNode<Integer>(i + 1);
  }
  nodes[0].getDependencies().add(nodes[1]);
  nodes[1].getDependencies().add(nodes[0]);
  nodes[1].getDependencies().add(nodes[4]);
  nodes[2].getDependencies().add(nodes[3]);
  nodes[3].getDependencies().add(nodes[2]);
  nodes[3].getDependencies().add(nodes[4]);
  nodes[4].getDependencies().add(nodes[5]);
  nodes[5].getDependencies().add(nodes[6]);
  nodes[6].getDependencies().add(nodes[7]);
  nodes[7].getDependencies().add(nodes[5]);
  nodes[7].getDependencies().add(nodes[8]);
  final List<List<InferenceGraphNode<Integer>>> tarjan=InferenceGraphNode.tarjan(Arrays.asList(nodes));
  final String messages=StringUtil.join(tarjan,new Function<List<InferenceGraphNode<Integer>>,String>(){
    @Override public String fun(    List<InferenceGraphNode<Integer>> nodes){
      return StringUtil.join(nodes,new Function<InferenceGraphNode<Integer>,String>(){
        @Override public String fun(        InferenceGraphNode<Integer> node){
          return String.valueOf(node.getValue());
        }
      }
,",");
    }
  }
,"\n");
  Assert.assertEquals("9\n" + "8,7,6\n" + "5\n"+ "2,1\n"+ "4,3",messages);
}
