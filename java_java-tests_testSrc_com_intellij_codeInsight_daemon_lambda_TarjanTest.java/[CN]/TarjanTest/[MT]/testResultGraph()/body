{
  final List<List<InferenceVariablesOrder.InferenceGraphNode<Integer>>> tarjan=InferenceVariablesOrder.tarjan(Arrays.asList(initNodes()));
  final String messages=StringUtil.join(tarjan,new Function<List<InferenceVariablesOrder.InferenceGraphNode<Integer>>,String>(){
    @Override public String fun(    List<InferenceVariablesOrder.InferenceGraphNode<Integer>> nodes){
      return StringUtil.join(nodes,new Function<InferenceVariablesOrder.InferenceGraphNode<Integer>,String>(){
        @Override public String fun(        InferenceVariablesOrder.InferenceGraphNode<Integer> node){
          return String.valueOf(node.getValue());
        }
      }
,",");
    }
  }
,"\n");
  Assert.assertEquals("[9]\n" + "[8],[7],[6]\n" + "[5]\n"+ "[2],[1]\n"+ "[4],[3]",messages);
  final ArrayList<InferenceVariablesOrder.InferenceGraphNode<Integer>> acyclicNodes=InferenceVariablesOrder.initNodes(Arrays.asList(initNodes()));
  final String aMessages=StringUtil.join(acyclicNodes,new Function<InferenceVariablesOrder.InferenceGraphNode<Integer>,String>(){
    @Override public String fun(    InferenceVariablesOrder.InferenceGraphNode<Integer> node){
      return String.valueOf(node.getValue());
    }
  }
,",");
  Assert.assertEquals("[9],[8, 7, 6],[5],[2, 1],[4, 3]",aMessages);
}
