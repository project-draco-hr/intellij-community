{
  final PsiClass clazz=queryParameters.getClassToProcess();
  final SearchScope scope=queryParameters.getScope();
  if (scope instanceof GlobalSearchScope) {
    final List<PsiClass> candidates=ApplicationManager.getApplication().runReadAction(new Computable<List<PsiClass>>(){
      @Override public List<PsiClass> compute(){
        if (!clazz.isValid())         return Collections.emptyList();
        return getDerivingClassCandidates(clazz,(GlobalSearchScope)scope);
      }
    }
);
    for (    final PsiClass candidate : candidates) {
      final boolean isInheritor;
      AccessToken accessToken=ApplicationManager.getApplication().acquireReadActionLock();
      try {
        isInheritor=candidate.isValid() && candidate.isInheritor(clazz,false);
      }
  finally {
        accessToken.finish();
      }
      if (isInheritor) {
        if (!consumer.process(candidate)) {
          return false;
        }
      }
    }
    return true;
  }
  return true;
}
