{
  Pair<Component,Rectangle> rendererAndBounds=getCellRendererAndBounds(key);
  if (rendererAndBounds == null)   return null;
  Component renderer=rendererAndBounds.first;
  if (!(renderer instanceof JComponent))   return null;
  myKeyItemBounds=rendererAndBounds.second;
  myKeyItemBounds.width=Math.min(myKeyItemBounds.width,myComponent.getToolkit().getScreenSize().width);
  Rectangle cellBounds=myKeyItemBounds;
  Rectangle visibleRect=getVisibleRect(key);
  int width=cellBounds.x + cellBounds.width - (visibleRect.x + visibleRect.width);
  int height=cellBounds.height;
  if (width <= 0 || height <= 0)   return null;
  if (cellBounds.y < visibleRect.y)   return null;
  if (cellBounds.y + cellBounds.height > visibleRect.y + visibleRect.height)   return null;
  Dimension size=getImageSize(width,height);
  myImage=UIUtil.createImage(size.width,size.height,BufferedImage.TYPE_INT_RGB);
  Graphics2D g=myImage.createGraphics();
  g.setClip(null);
  doFillBackground(height,width,g);
  g.translate(-(visibleRect.x + visibleRect.width - cellBounds.x),0);
  doPaintTooltipImage(renderer,cellBounds,g,key);
  Point location=new Point(visibleRect.x + visibleRect.width,cellBounds.y);
  CustomLineBorder border=null;
  if (isPaintBorder()) {
    border=new CustomLineBorder(getBorderColor(),1,0,1,1);
    location.y-=1;
    size.width+=1;
    size.height+=2;
  }
  g.dispose();
  myRendererPane.remove(renderer);
  myTipComponent.setBorder(border);
  myTipComponent.setPreferredSize(size);
  return location;
}
