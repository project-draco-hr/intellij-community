{
  final PsiElement namedElem=getReferencedElement(owner);
  if (namedElem == null)   return true;
  final Ref<Boolean> result=new Ref<Boolean>(true);
  final Task task=new Task.Modal(project,GroovyIntentionsBundle.message("find.method.ro.closure.usages.0",owner instanceof GrClosableBlock ? CLOSURE_CAPTION : METHOD_CAPTION),true){
    @Override public void run(    @NotNull final ProgressIndicator indicator){
      final Collection<PsiReference> references=Collections.synchronizedSet(new HashSet<PsiReference>());
      final Processor<PsiReference> consumer=new Processor<PsiReference>(){
        @Override public boolean process(        PsiReference psiReference){
          references.add(psiReference);
          return true;
        }
      }
;
      ReferencesSearch.search(namedElem).forEach(consumer);
      boolean isProperty=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          return namedElem instanceof GrField && ((GrField)namedElem).isProperty();
        }
      }
);
      if (isProperty) {
        final GrAccessorMethod[] getters=ApplicationManager.getApplication().runReadAction(new Computable<GrAccessorMethod[]>(){
          @Override public GrAccessorMethod[] compute(){
            return ((GrField)namedElem).getGetters();
          }
        }
);
        for (        GrAccessorMethod getter : getters) {
          MethodReferencesSearch.search(getter).forEach(consumer);
        }
      }
      for (      final PsiReference reference : references) {
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          @Override public void run(){
            final PsiElement element=reference.getElement();
            if (element != null) {
              occurrences.add(element);
            }
          }
        }
);
      }
    }
    @Override public void onCancel(){
      result.set(false);
    }
    @Override public void onSuccess(){
      result.set(true);
    }
  }
;
  ProgressManager.getInstance().run(task);
  return result.get().booleanValue();
}
