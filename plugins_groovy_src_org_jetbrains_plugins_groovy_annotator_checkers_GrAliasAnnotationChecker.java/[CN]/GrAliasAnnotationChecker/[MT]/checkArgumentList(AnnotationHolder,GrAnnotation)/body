{
  final PsiAnnotation annotationCollector=GrAnnotationCollector.findAnnotationCollector(annotation);
  if (annotationCollector == null) {
    return false;
  }
  final ArrayList<GrAnnotation> annotations=ContainerUtil.newArrayList();
  final Set<String> usedAttributes=GrAnnotationCollector.collectAnnotations(annotations,annotation,annotationCollector);
  AliasedAnnotationHolder aliasedHolder=new AliasedAnnotationHolder(holder,annotation);
  AnnotationChecker checker=new AnnotationChecker(aliasedHolder);
  for (  GrAnnotation aliased : annotations) {
    checker.checkAnnotationArgumentList(aliased);
  }
  final GrAnnotationNameValuePair[] attributes=annotation.getParameterList().getAttributes();
  final String aliasQName=annotation.getQualifiedName();
  if (attributes.length == 1 && attributes[0].getNameIdentifierGroovy() == null && !usedAttributes.contains("value")) {
    holder.createErrorAnnotation(attributes[0],GroovyBundle.message("at.interface.0.does.not.contain.attribute",aliasQName,"value"));
  }
  for (  GrAnnotationNameValuePair pair : attributes) {
    final PsiElement nameIdentifier=pair.getNameIdentifierGroovy();
    if (nameIdentifier != null && !usedAttributes.contains(pair.getName())) {
      holder.createErrorAnnotation(nameIdentifier,GroovyBundle.message("at.interface.0.does.not.contain.attribute",aliasQName,pair.getName()));
    }
  }
  return true;
}
