{
  final PsiElement parent=expression.getParent();
  if (parent instanceof PsiLocalVariable) {
    return isIterable(((PsiLocalVariable)parent).getType());
  }
 else   if (parent instanceof PsiReturnStatement) {
    final PsiElement methodOrLambda=PsiTreeUtil.getParentOfType(parent,PsiMethod.class,PsiLambdaExpression.class);
    PsiType methodReturnType=null;
    if (methodOrLambda instanceof PsiMethod) {
      methodReturnType=((PsiMethod)methodOrLambda).getReturnType();
    }
 else     if (methodOrLambda instanceof PsiLambdaExpression) {
      methodReturnType=LambdaUtil.getFunctionalInterfaceReturnType((PsiFunctionalExpression)methodOrLambda);
    }
    return isIterable(methodReturnType);
  }
 else   if (parent instanceof PsiExpressionList) {
    final PsiExpressionList expressionList=(PsiExpressionList)parent;
    final PsiElement maybeMethodCallExpr=expressionList.getParent();
    if (maybeMethodCallExpr instanceof PsiMethodCallExpression) {
      final PsiMethod method=((PsiMethodCallExpression)maybeMethodCallExpr).resolveMethod();
      if (method != null) {
        final PsiParameter[] parameters=method.getParameterList().getParameters();
        final PsiExpression[] arguments=expressionList.getExpressions();
        if (parameters.length == arguments.length) {
          final int index=ArrayUtil.indexOf(arguments,expression);
          if (index != -1) {
            return isIterable(parameters[index].getType());
          }
        }
      }
    }
  }
  return false;
}
