{
  myParentDisposable=parentDisposable;
  Extensions.cleanRootArea(myParentDisposable);
  myFileTypeRegistry=new CoreFileTypeRegistry();
  myEncodingRegistry=new CoreEncodingRegistry();
  myApplication=createApplication(myParentDisposable);
  ApplicationManager.setApplication(myApplication,new StaticGetter<FileTypeRegistry>(myFileTypeRegistry),new StaticGetter<EncodingRegistry>(myEncodingRegistry),myParentDisposable);
  myLocalFileSystem=createLocalFileSystem();
  myJarFileSystem=createJarFileSystem();
  Extensions.registerAreaClass(ExtensionAreas.IDEA_PROJECT,null);
  final MutablePicoContainer appContainer=myApplication.getPicoContainer();
  registerComponentInstance(appContainer,FileDocumentManager.class,new MockFileDocumentManagerImpl(new Function<CharSequence,Document>(){
    @Override public Document fun(    CharSequence charSequence){
      return new DocumentImpl(charSequence);
    }
  }
,null));
  VirtualFileSystem[] fs={myLocalFileSystem,myJarFileSystem};
  VirtualFileManagerImpl virtualFileManager=new VirtualFileManagerImpl(fs,new MessageBusImpl(myApplication,null));
  registerComponentInstance(appContainer,VirtualFileManager.class,virtualFileManager);
  registerApplicationService(VirtualFilePointerManager.class,createVirtualFilePointerManager());
  myApplication.registerService(DefaultASTFactory.class,new CoreASTFactory());
  myApplication.registerService(PsiBuilderFactory.class,new PsiBuilderFactoryImpl());
  myApplication.registerService(ReferenceProvidersRegistry.class,new MockReferenceProvidersRegistry());
  myApplication.registerService(StubTreeLoader.class,new CoreStubTreeLoader());
  myApplication.registerService(PsiReferenceService.class,new PsiReferenceServiceImpl());
  myApplication.registerService(MetaDataRegistrar.class,new MetaRegistry());
  registerApplicationExtensionPoint(ContentBasedFileSubstitutor.EP_NAME,ContentBasedFileSubstitutor.class);
  registerExtensionPoint(Extensions.getRootArea(),BinaryFileStubBuilders.EP_NAME,FileTypeExtensionPoint.class);
  registerExtensionPoint(Extensions.getRootArea(),FileContextProvider.EP_NAME,FileContextProvider.class);
  registerApplicationExtensionPoint(MetaDataContributor.EP_NAME,MetaDataContributor.class);
  ProgressIndicatorProvider.ourInstance=createProgressIndicatorProvider();
  myApplication.registerService(JobLauncher.class,createJobLauncher());
}
