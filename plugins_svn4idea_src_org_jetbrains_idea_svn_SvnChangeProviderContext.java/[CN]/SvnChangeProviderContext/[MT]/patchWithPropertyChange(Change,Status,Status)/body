{
  if (svnStatus == null)   return change;
  if (svnStatus.isProperty(StatusType.STATUS_CONFLICTED,StatusType.CHANGED,StatusType.STATUS_ADDED,StatusType.STATUS_DELETED,StatusType.STATUS_MODIFIED,StatusType.STATUS_REPLACED,StatusType.MERGED)) {
    final FilePath path=ChangesUtil.getFilePath(change);
    final File ioFile=path.getIOFile();
    final File beforeFile=deletedStatus != null ? deletedStatus.getFile() : ioFile;
    final String beforeList=svnStatus.isProperty(StatusType.STATUS_ADDED) && deletedStatus == null ? null : AbstractShowPropertiesDiffAction.getPropertyList(myVcs,beforeFile,SVNRevision.BASE);
    final String afterList=svnStatus.isProperty(StatusType.STATUS_DELETED) ? null : AbstractShowPropertiesDiffAction.getPropertyList(myVcs,ioFile,SVNRevision.WORKING);
    final String beforeRevisionNu=change.getBeforeRevision() == null ? null : change.getBeforeRevision().getRevisionNumber().asString();
    final String afterRevisionNu=change.getAfterRevision() == null ? null : change.getAfterRevision().getRevisionNumber().asString();
    final Change propertyChange=new Change(beforeList == null ? null : new SimpleContentRevision(beforeList,path,beforeRevisionNu),afterList == null ? null : new SimpleContentRevision(afterList,path,afterRevisionNu),deletedStatus != null ? FileStatus.MODIFIED : SvnStatusConvertor.convertPropertyStatus(svnStatus.getPropertiesStatus()));
    change.addAdditionalLayerElement(SvnChangeProvider.PROPERTY_LAYER,propertyChange);
  }
  return change;
}
