{
  while (true) {
    if (condition == null) {
      return Check.NEITHER;
    }
 else     if (check != Check.CLASS_EQUALITY && isInstanceofExpression(condition)) {
      return Check.INSTANCEOF;
    }
 else     if (condition instanceof PsiPolyadicExpression) {
      if (check != Check.INSTANCEOF && isClassEqualityExpression(condition)) {
        return Check.CLASS_EQUALITY;
      }
      final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)condition;
      final PsiExpression[] operands=polyadicExpression.getOperands();
      for (      PsiExpression operand : operands) {
        final Check chainCheck=chainCheck(operand,check);
        if (chainCheck != Check.NEITHER) {
          return chainCheck;
        }
      }
      return Check.NEITHER;
    }
 else     if (condition instanceof PsiParenthesizedExpression) {
      final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)condition;
      condition=parenthesizedExpression.getExpression();
      continue;
    }
 else     if (condition instanceof PsiPrefixExpression) {
      final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)condition;
      condition=prefixExpression.getOperand();
      continue;
    }
 else     if (condition instanceof PsiPostfixExpression) {
      final PsiPostfixExpression postfixExpression=(PsiPostfixExpression)condition;
      condition=postfixExpression.getOperand();
      continue;
    }
    return Check.NEITHER;
  }
}
