{
  File file=FileUtil.createTempFile("persistent","map");
  PersistentHashMap<Integer,String> map=new PersistentHashMap<>(file,new IntInlineKeyDescriptor(),EnumeratorStringDescriptor.INSTANCE);
  try {
    final int stringsCount=5;
    Map<Integer,String> testMapping=new LinkedHashMap<>(stringsCount);
    for (int i=0; i < stringsCount; ++i) {
      final String key=createRandomString();
      String value=key + "_value";
      testMapping.put(i,value);
      map.put(i,value);
    }
    map.close();
    map=new PersistentHashMap<>(file,new IntInlineKeyDescriptor(),EnumeratorStringDescriptor.INSTANCE);
{
      final Collection<Integer> allKeys=new HashSet<>(map.getAllKeysWithExistingMapping());
      assertEquals(new HashSet<>(testMapping.keySet()),allKeys);
      for (      Integer key : allKeys) {
        final String val=map.get(key);
        assertEquals(testMapping.get(key),val);
      }
    }
    map.compact();
{
      final Collection<Integer> allKeys=new HashSet<>(map.getAllKeysWithExistingMapping());
      assertEquals(new HashSet<>(testMapping.keySet()),allKeys);
      for (      Integer key : allKeys) {
        final String val=map.get(key);
        assertEquals(testMapping.get(key),val);
      }
    }
  }
  finally {
    clearMap(file,map);
  }
}
