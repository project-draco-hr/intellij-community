{
  final PsiFile containingFile=representative.getContainingFile();
  if (!containingFile.isValid()) {
    return ResourceBundleWithCachedFiles.EMPTY;
  }
  final ResourceBundleManager manager=ResourceBundleManager.getInstance(representative.getProject());
  final CustomResourceBundle customResourceBundle=manager.getCustomResourceBundle(representative);
  if (customResourceBundle != null) {
    return new ResourceBundleWithCachedFiles(customResourceBundle,customResourceBundle.getPropertiesFiles());
  }
  final VirtualFile virtualFile=representative.getVirtualFile();
  if (virtualFile == null) {
    return ResourceBundleWithCachedFiles.EMPTY;
  }
  if (manager.isDefaultDissociated(virtualFile)) {
    return new ResourceBundleWithCachedFiles(new ResourceBundleImpl(representative),Collections.singletonList(representative));
  }
  final String baseName=manager.getBaseName(containingFile);
  final PsiDirectory directory=ApplicationManager.getApplication().runReadAction(new Computable<PsiDirectory>(){
    @Nullable public PsiDirectory compute(){
      return containingFile.getContainingDirectory();
    }
  }
);
  if (directory == null)   return ResourceBundleWithCachedFiles.EMPTY;
  final ResourceBundleWithCachedFiles bundle=getResourceBundle(baseName,directory);
  return bundle == null ? new ResourceBundleWithCachedFiles(new ResourceBundleImpl(representative),Collections.singletonList(representative)) : bundle;
}
