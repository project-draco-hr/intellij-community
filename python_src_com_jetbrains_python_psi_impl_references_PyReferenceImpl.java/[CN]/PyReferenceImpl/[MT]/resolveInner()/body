{
  ResolveResultList ret=new ResolveResultList();
  final String referencedName=myElement.getReferencedName();
  if (referencedName == null)   return ret;
  final PsiElement parent=myElement.getParent();
  final boolean isGlobalOrNonlocal=parent instanceof PyGlobalStatement || parent instanceof PyNonlocalStatement;
  if (myElement instanceof PyTargetExpression && !isGlobalOrNonlocal) {
    addResolvedElement(ret,null,myElement);
    return ret;
  }
  final PsiElement realContext=PyPsiUtils.getRealContext(myElement);
  final PsiElement roof=findResolveRoof(referencedName,realContext);
  final ScopeOwner originalOwner=ScopeUtil.getResolveScopeOwner(realContext);
  ScopeOwner owner=originalOwner;
  if (isGlobalOrNonlocal) {
    final ScopeOwner outerScopeOwner=ScopeUtil.getScopeOwner(owner);
    if (outerScopeOwner != null) {
      owner=outerScopeOwner;
    }
  }
  while (owner != null) {
    if (!(owner instanceof PyClass) || owner == originalOwner) {
      final Scope scope=ControlFlowCache.getScope(owner);
      final ScopeDeclaration scopeDeclaration=getScopeDeclaration(referencedName,scope);
      if (scopeDeclaration != null) {
        NameDefiner definer=scopeDeclaration.getNameDefiner();
        PsiElement element=scopeDeclaration.getElement();
        if (owner == originalOwner && definer == null) {
          final List<ReadWriteInstruction> defs=PyDefUseUtil.getLatestDefs(owner,referencedName,myElement,false);
          if (!defs.isEmpty()) {
            for (            ReadWriteInstruction def : defs) {
              element=def.getElement();
              final PyComprehensionElement elementComprh=PsiTreeUtil.getParentOfType(element,PyComprehensionElement.class);
              if (elementComprh != null && elementComprh != PsiTreeUtil.getParentOfType(myElement,PyComprehensionElement.class)) {
                continue;
              }
              if (element instanceof NameDefiner && !(element instanceof PsiNamedElement)) {
                definer=(NameDefiner)element;
                element=definer.getElementNamed(referencedName);
              }
              addResolvedElement(ret,definer,element);
            }
            return ret;
          }
 else           if (!isCythonLevel(myElement)) {
            break;
          }
        }
        addResolvedElement(ret,definer,element);
        return ret;
      }
    }
    if (owner == roof) {
      break;
    }
    owner=ScopeUtil.getScopeOwner(owner);
  }
  PyBuiltinCache builtinsCache=PyBuiltinCache.getInstance(realContext);
  PyType otype=builtinsCache.getObjectType();
  if (otype != null) {
    ret.addAll(otype.resolveMember(myElement.getName(),null,AccessDirection.READ,myContext));
  }
  PsiElement uexpr=null;
  PyFile bfile=builtinsCache.getBuiltinsFile();
  if (bfile != null) {
    uexpr=bfile.getElementNamed(referencedName);
    if (uexpr == null && "__builtins__".equals(referencedName)) {
      uexpr=bfile;
    }
  }
  if (uexpr == null && CythonLanguageDialect.isInsideCythonFile(realContext)) {
    final CythonFile implicit=CythonResolveUtil.findImplicitDefinitionFile(realContext);
    if (implicit != null) {
      uexpr=implicit.getElementNamed(referencedName);
    }
    if (originalOwner instanceof CythonFile) {
      final PsiElement resolved=((CythonFile)originalOwner).getElementNamed(referencedName);
      if ((resolved instanceof CythonFunction && ((CythonFunction)resolved).isCythonLevel()) || resolved instanceof CythonFile) {
        ret.poke(resolved,getRate(resolved));
      }
    }
  }
  if (uexpr != null) {
    ret.add(new ImportedResolveResult(uexpr,getRate(uexpr),Collections.<PsiElement>emptyList()));
  }
  return ret;
}
