{
  final ResolveResultList ret=new ResolveResultList();
  final String referencedName=myElement.getReferencedName();
  if (referencedName == null)   return ret;
  if (myElement instanceof PyTargetExpression) {
    if (PsiTreeUtil.getParentOfType(myElement,PyComprehensionElement.class) != null) {
      ret.poke(myElement,getRate(myElement));
      return ret;
    }
  }
  final ResolveProcessor processor=new ResolveProcessor(referencedName);
  final PsiElement realContext=PyPsiUtils.getRealContext(myElement);
  PsiElement roof=findResolveRoof(referencedName,realContext);
  PyResolveUtil.scopeCrawlUp(processor,myElement,referencedName,roof);
  PsiElement uexpr=processor.getResult();
  final List<PsiElement> definers=processor.getDefiners();
  if (uexpr != null) {
    if (definers.isEmpty()) {
      final ScopeOwner originalOwner=ScopeUtil.getResolveScopeOwner(realContext);
      final ScopeOwner owner=ScopeUtil.getScopeOwner(uexpr);
      if (owner != null) {
        final Scope scope=ControlFlowCache.getScope(owner);
        if (owner == originalOwner && !scope.isGlobal(referencedName)) {
          final ResolveResultList latest=resolveToLatestDefs(owner,myElement,referencedName);
          if (!latest.isEmpty()) {
            return latest;
          }
          if (owner instanceof PyClass) {
            final ScopeOwner classOwner=ScopeUtil.getScopeOwner(owner);
            if (classOwner != null) {
              final ResolveProcessor outerProcessor=new ResolveProcessor(referencedName);
              PyResolveUtil.scopeCrawlUp(outerProcessor,classOwner,referencedName,roof);
              uexpr=outerProcessor.getResult();
            }
          }
 else           if (!isCythonLevel(myElement)) {
            uexpr=null;
          }
        }
      }
    }
    for (    PsiElement hit : processor.getDefiners()) {
      ret.poke(hit,getRate(hit));
    }
    uexpr=PyUtil.turnDirIntoInit(uexpr);
  }
 else   if (!processor.getDefiners().isEmpty()) {
    ret.add(new ImportedResolveResult(null,RatedResolveResult.RATE_LOW,processor.getDefiners()));
  }
  PyBuiltinCache builtins_cache=PyBuiltinCache.getInstance(realContext);
  if (uexpr == null) {
    PyType otype=builtins_cache.getObjectType();
    if (otype != null) {
      ret.addAll(otype.resolveMember(myElement.getName(),null,AccessDirection.READ,myContext));
    }
  }
  if (uexpr == null) {
    PyFile bfile=builtins_cache.getBuiltinsFile();
    if (bfile != null) {
      uexpr=bfile.getElementNamed(referencedName);
      if (uexpr == null && "__builtins__".equals(referencedName)) {
        uexpr=bfile;
      }
    }
  }
  if (uexpr == null && CythonLanguageDialect.isInsideCythonFile(realContext)) {
    final CythonFile implicit=CythonResolveUtil.findImplicitDefinitionFile(realContext);
    if (implicit != null) {
      uexpr=implicit.getElementNamed(referencedName);
    }
    final ScopeOwner owner=PsiTreeUtil.getParentOfType(myElement,ScopeOwner.class);
    if (owner instanceof CythonFile) {
      final PsiElement resolved=((CythonFile)owner).getElementNamed(referencedName);
      if ((resolved instanceof CythonFunction && ((CythonFunction)resolved).isCythonLevel()) || resolved instanceof CythonFile) {
        ret.poke(resolved,getRate(resolved));
      }
    }
  }
  if (uexpr != null) {
    ret.add(new ImportedResolveResult(uexpr,getRate(uexpr),processor.getDefiners()));
  }
  return ret;
}
