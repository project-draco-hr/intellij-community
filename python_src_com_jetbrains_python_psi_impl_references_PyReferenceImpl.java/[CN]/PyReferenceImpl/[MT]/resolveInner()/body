{
  ResolveResultList ret=new ResolveResultList();
  final String referencedName=myElement.getReferencedName();
  if (referencedName == null)   return ret;
  if (myElement instanceof PyTargetExpression) {
    addResolvedElement(ret,null,myElement);
    return ret;
  }
  ResolveProcessor processor=new ResolveProcessor(referencedName);
  PsiElement realContext=PyPsiUtils.getRealContext(myElement);
  PsiElement uexpr=null;
  PsiElement roof=findResolveRoof(referencedName,realContext);
  if (Registry.is("python.new.style.resolve")) {
    final ScopeOwner originalOwner=ScopeUtil.getResolveScopeOwner(realContext);
    ScopeOwner owner=originalOwner;
    while (owner != null) {
      if (!(owner instanceof PyClass) || owner == originalOwner) {
        final Scope scope=ControlFlowCache.getScope(owner);
        final ScopeDeclaration scopeDeclaration=getScopeDeclaration(referencedName,scope);
        if (scopeDeclaration != null) {
          NameDefiner definer=scopeDeclaration.getNameDefiner();
          PsiElement element=scopeDeclaration.getElement();
          if (owner == originalOwner && definer == null) {
            final List<ReadWriteInstruction> defs=PyDefUseUtil.getLatestDefs(owner,referencedName,myElement,false);
            if (!defs.isEmpty()) {
              for (              ReadWriteInstruction def : defs) {
                element=def.getElement();
                final PyComprehensionElement elementComprh=PsiTreeUtil.getParentOfType(element,PyComprehensionElement.class);
                if (elementComprh != null && elementComprh != PsiTreeUtil.getParentOfType(myElement,PyComprehensionElement.class)) {
                  continue;
                }
                if (element instanceof NameDefiner && !(element instanceof PsiNamedElement)) {
                  definer=(NameDefiner)element;
                  element=definer.getElementNamed(referencedName);
                }
                addResolvedElement(ret,definer,element);
              }
              return ret;
            }
            break;
          }
          addResolvedElement(ret,definer,element);
          return ret;
        }
      }
      if (owner == roof) {
        break;
      }
      owner=ScopeUtil.getScopeOwner(owner);
    }
  }
 else {
    uexpr=PyResolveUtil.treeCrawlUp(processor,false,realContext,roof);
    if ((uexpr != null)) {
      for (      PsiElement hit : processor.getDefiners()) {
        ret.poke(hit,getRate(hit));
      }
      uexpr=PyUtil.turnDirIntoInit(uexpr);
    }
 else     if (!processor.getDefiners().isEmpty()) {
      ret.add(new ImportedResolveResult(null,RatedResolveResult.RATE_LOW - 1,processor.getDefiners()));
    }
  }
  PyBuiltinCache builtins_cache=PyBuiltinCache.getInstance(realContext);
  if (uexpr == null) {
    PyType otype=builtins_cache.getObjectType();
    if (otype != null) {
      ret.addAll(otype.resolveMember(myElement.getName(),null,AccessDirection.READ,myContext));
    }
  }
  if (uexpr == null) {
    PyFile bfile=builtins_cache.getBuiltinsFile();
    if (bfile != null) {
      uexpr=bfile.getElementNamed(referencedName);
      if (uexpr == null && "__builtins__".equals(referencedName)) {
        uexpr=bfile;
      }
    }
  }
  if (uexpr == null && !(myElement instanceof PyTargetExpression)) {
    final PsiElement outerContextElement=PyResolveUtil.scanOuterContext(new ResolveProcessor(referencedName),realContext);
    uexpr=PyUtil.turnDirIntoInit(outerContextElement);
  }
  if (uexpr == null && CythonLanguageDialect.isInsideCythonFile(realContext)) {
    final CythonFile implicit=CythonResolveUtil.findImplicitDefinitionFile(realContext);
    if (implicit != null) {
      uexpr=implicit.getElementNamed(referencedName);
    }
    final ScopeOwner owner=PsiTreeUtil.getParentOfType(myElement,ScopeOwner.class);
    if (owner instanceof CythonFile) {
      final PsiElement resolved=((CythonFile)owner).getElementNamed(referencedName);
      if ((resolved instanceof CythonFunction && ((CythonFunction)resolved).isCythonLevel()) || resolved instanceof CythonFile) {
        ret.poke(resolved,getRate(resolved));
      }
    }
  }
  if (uexpr != null) {
    ret.add(new ImportedResolveResult(uexpr,getRate(uexpr),processor.getDefiners()));
  }
  return ret;
}
