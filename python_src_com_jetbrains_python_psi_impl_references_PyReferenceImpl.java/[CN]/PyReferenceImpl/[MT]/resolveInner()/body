{
  ResolveResultList ret=new ResolveResultList();
  final String referencedName=myElement.getReferencedName();
  if (referencedName == null)   return ret;
  ResolveProcessor processor=new ResolveProcessor(referencedName);
  PsiElement realContext=PyPsiUtils.getRealContext(myElement);
  PyClass containingClass=PsiTreeUtil.getParentOfType(realContext,PyClass.class);
  if (containingClass != null && PsiTreeUtil.isAncestor(containingClass.getSuperClassExpressionList(),myElement,false)) {
    realContext=containingClass;
  }
  PsiElement uexpr=null;
  PsiElement roof=findResolveRoof(referencedName,realContext);
  if (Registry.is("python.new.style.resolve")) {
    ScopeOwner scopeOwner=ScopeUtil.getResolveScopeOwner(realContext);
    if (scopeOwner != null) {
      final List<ReadWriteInstruction> defs=PyDefUseUtil.getLatestDefs(scopeOwner,referencedName,myElement,false);
      if (!defs.isEmpty()) {
        for (        ReadWriteInstruction def : defs) {
          addResolvedElement(ret,referencedName,def.getElement());
        }
        return ret;
      }
      final Scope scope=ControlFlowCache.getScope(scopeOwner);
      checkStarDeclarations(ret,referencedName,scope);
      if (!ret.isEmpty()) {
        return ret;
      }
      while (true) {
        scopeOwner=PsiTreeUtil.getParentOfType(scopeOwner,ScopeOwner.class);
        if (scopeOwner == null) {
          break;
        }
        final Scope parentScope=ControlFlowCache.getScope(scopeOwner);
        final PsiElement declaration=parentScope.getDeclaration(referencedName);
        if (declaration != null) {
          addResolvedElement(ret,referencedName,declaration);
        }
 else {
          checkStarDeclarations(ret,referencedName,parentScope);
        }
        if (!ret.isEmpty()) {
          return ret;
        }
        if (scopeOwner == roof) {
          break;
        }
      }
    }
  }
 else {
    uexpr=PyResolveUtil.treeCrawlUp(processor,false,realContext,roof);
    if ((uexpr != null)) {
      for (      PsiElement hit : processor.getDefiners()) {
        ret.poke(hit,getRate(hit));
      }
      uexpr=PyUtil.turnDirIntoInit(uexpr);
    }
 else     if (!processor.getDefiners().isEmpty()) {
      ret.add(new ImportedResolveResult(null,RatedResolveResult.RATE_LOW - 1,processor.getDefiners()));
    }
  }
  PyBuiltinCache builtins_cache=PyBuiltinCache.getInstance(realContext);
  if (uexpr == null) {
    PyType otype=builtins_cache.getObjectType();
    if (otype != null) {
      ret.addAll(otype.resolveMember(myElement.getName(),null,AccessDirection.READ,myContext));
    }
  }
  if (uexpr == null) {
    PyFile bfile=builtins_cache.getBuiltinsFile();
    if (bfile != null) {
      uexpr=bfile.getElementNamed(referencedName);
      if (uexpr == null && "__builtins__".equals(referencedName)) {
        uexpr=bfile;
      }
    }
  }
  if (uexpr == null && !(myElement instanceof PyTargetExpression)) {
    final PsiElement outerContextElement=PyResolveUtil.scanOuterContext(new ResolveProcessor(referencedName),realContext);
    uexpr=PyUtil.turnDirIntoInit(outerContextElement);
  }
  if (uexpr == null && CythonLanguageDialect.isInsideCythonFile(realContext)) {
    final CythonFile implicit=CythonResolveUtil.findImplicitDefinitionFile(realContext);
    if (implicit != null) {
      uexpr=implicit.getElementNamed(referencedName);
    }
    final ScopeOwner owner=PsiTreeUtil.getParentOfType(myElement,ScopeOwner.class);
    if (owner instanceof CythonFile) {
      final PsiElement resolved=((CythonFile)owner).getElementNamed(referencedName);
      if ((resolved instanceof CythonFunction && ((CythonFunction)resolved).isCythonLevel()) || resolved instanceof CythonFile) {
        ret.poke(resolved,getRate(resolved));
      }
    }
  }
  if (uexpr != null) {
    ret.add(new ImportedResolveResult(uexpr,getRate(uexpr),processor.getDefiners()));
  }
  return ret;
}
