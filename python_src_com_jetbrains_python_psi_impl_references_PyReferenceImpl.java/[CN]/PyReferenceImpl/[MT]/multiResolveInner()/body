{
  final String referencedName=myElement.getReferencedName();
  if (referencedName == null)   return ResolveResult.EMPTY_ARRAY;
  List<RatedResolveResult> targets=resolveInner();
  if (targets.size() == 0)   return ResolveResult.EMPTY_ARRAY;
  if (myElement.getParent() instanceof PyCallExpression) {
    ListIterator<RatedResolveResult> it=targets.listIterator();
    while (it.hasNext()) {
      final RatedResolveResult rrr=it.next();
      final PsiElement elt=rrr.getElement();
      if (elt instanceof PyClass) {
        PyClass cls=(PyClass)elt;
        PyFunction init=cls.findMethodByName(PyNames.INIT,false);
        if (init != null) {
          it.set(rrr.replace(init));
        }
 else {
          for (          PyClass ancestor : cls.iterateAncestorClasses()) {
            init=ancestor.findMethodByName(PyNames.INIT,false);
            if (init != null) {
              it.add(new RatedResolveResult(RatedResolveResult.RATE_LOW,init));
              break;
            }
          }
        }
      }
    }
  }
  List<RatedResolveResult> ret=new SortedList<RatedResolveResult>(new Comparator<RatedResolveResult>(){
    public int compare(    final RatedResolveResult one,    final RatedResolveResult another){
      return another.getRate() - one.getRate();
    }
  }
);
  ret.addAll(targets);
  return ret.toArray(new ResolveResult[ret.size()]);
}
