{
  ResolveResultList ret=new ResolveResultList();
  PsiElement uexpr=processor.getResult();
  List<PsiElement> definers=processor.getDefiners();
  if (uexpr != null) {
    if (definers.isEmpty()) {
      final ScopeOwner originalOwner=ScopeUtil.getScopeOwner(realContext);
      final ScopeOwner owner=ScopeUtil.getScopeOwner(uexpr);
      if (owner != null) {
        final Scope scope=ControlFlowCache.getScope(owner);
        if (uexpr == originalOwner && originalOwner instanceof PyClass) {
          uexpr=null;
        }
 else         if (owner == originalOwner && !scope.isGlobal(referencedName)) {
          final List<ReadWriteInstruction> instructions=PyDefUseUtil.getLatestDefs(owner,referencedName,realContext,false);
          final ResolveResultList latest=resolveToLatestDefs(instructions,realContext,referencedName);
          if (!latest.isEmpty()) {
            return latest;
          }
          if (owner instanceof PyClass || (instructions.isEmpty() && isInOwnScopeComprehension(uexpr))) {
            final ScopeOwner parentOwner=ScopeUtil.getScopeOwner(owner);
            if (parentOwner != null) {
              processor=new ResolveProcessor(referencedName);
              PyResolveUtil.scopeCrawlUp(processor,parentOwner,referencedName,roof);
              uexpr=processor.getResult();
              definers=processor.getDefiners();
            }
          }
 else {
            uexpr=null;
          }
        }
 else         if (owner != originalOwner && originalOwner != null && !scope.isGlobal(referencedName)) {
          final Scope originalScope=ControlFlowCache.getScope(originalOwner);
          if (originalScope.containsDeclaration(referencedName)) {
            uexpr=null;
          }
        }
      }
    }
    for (    PsiElement hit : definers) {
      ret.poke(hit,getRate(hit));
    }
    final PsiElement packageInit=PyUtil.turnDirIntoInit(uexpr);
    if (packageInit != null) {
      uexpr=packageInit;
    }
  }
 else   if (!definers.isEmpty()) {
    ret.add(new ImportedResolveResult(null,RatedResolveResult.RATE_LOW,definers));
  }
  PyBuiltinCache builtinCache=PyBuiltinCache.getInstance(realContext);
  if (uexpr == null) {
    String name=myElement.getName();
    if (PyModuleType.MODULE_MEMBERS.contains(name)) {
      PyType objectType=builtinCache.getObjectType();
      if (objectType != null && name != null) {
        ret.addAll(objectType.resolveMember(name,null,AccessDirection.READ,myContext));
      }
    }
  }
  if (uexpr != null) {
    ret.add(new ImportedResolveResult(uexpr,getRate(uexpr),definers));
  }
 else {
    for (    PyReferenceResolveProvider provider : Extensions.getExtensions(PyReferenceResolveProvider.EP_NAME)) {
      final List<RatedResolveResult> results=provider.resolveName(myElement,definers);
      for (      RatedResolveResult res : results) {
        ret.add(res);
      }
    }
  }
  return ret;
}
