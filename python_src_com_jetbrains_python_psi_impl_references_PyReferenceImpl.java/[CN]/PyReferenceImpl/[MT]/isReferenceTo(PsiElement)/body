{
  if (element instanceof PsiFileSystemItem) {
    PsiElement resolveResult=resolve();
    if (resolveResult instanceof PyImportedModule) {
      resolveResult=resolveResult.getNavigationElement();
    }
    if (element instanceof PsiDirectory) {
      if (resolveResult instanceof PyFile) {
        final PyFile file=(PyFile)resolveResult;
        if (PyUtil.isPackage(file) && file.getContainingDirectory() == element) {
          return true;
        }
      }
 else       if (resolveResult instanceof PsiDirectory) {
        final PsiDirectory directory=(PsiDirectory)resolveResult;
        if (PyUtil.isPackage(directory,null) && directory == element) {
          return true;
        }
      }
    }
    return resolveResult == element;
  }
  if (element instanceof PsiNamedElement) {
    final String elementName=((PsiNamedElement)element).getName();
    if ((Comparing.equal(myElement.getReferencedName(),elementName) || PyNames.INIT.equals(elementName))) {
      if (!haveQualifiers(element)) {
        final ScopeOwner ourScopeOwner=ScopeUtil.getScopeOwner(getElement());
        final ScopeOwner theirScopeOwner=ScopeUtil.getScopeOwner(element);
        if (element instanceof PyParameter || element instanceof PyTargetExpression) {
          if (resolvesToSameLocal(element,elementName,ourScopeOwner,theirScopeOwner)) {
            return true;
          }
        }
        final PsiElement resolveResult=resolve();
        if (resolveResult == element) {
          return true;
        }
        if (resolveResult instanceof PsiNamedElement && resolveResult instanceof ScopeOwner && element instanceof ScopeOwner&& theirScopeOwner == ScopeUtil.getScopeOwner(resolveResult)) {
          return true;
        }
        if (!haveQualifiers(element) && ourScopeOwner != null && theirScopeOwner != null) {
          if (resolvesToSameGlobal(element,elementName,ourScopeOwner,theirScopeOwner,resolveResult))           return true;
        }
        if (resolvesToWrapper(element,resolveResult)) {
          return true;
        }
      }
      if (element instanceof PyExpression) {
        final PyExpression expr=(PyExpression)element;
        if (PyUtil.isClassAttribute(myElement) && (PyUtil.isClassAttribute(expr) || PyUtil.isInstanceAttribute(expr))) {
          final PyClass c1=PsiTreeUtil.getParentOfType(element,PyClass.class);
          final PyClass c2=PsiTreeUtil.getParentOfType(myElement,PyClass.class);
          final TypeEvalContext context=myContext.getTypeEvalContext();
          if (c1 != null && c2 != null && (c1.isSubclass(c2,context) || c2.isSubclass(c1,context))) {
            return true;
          }
        }
      }
    }
  }
  return false;
}
