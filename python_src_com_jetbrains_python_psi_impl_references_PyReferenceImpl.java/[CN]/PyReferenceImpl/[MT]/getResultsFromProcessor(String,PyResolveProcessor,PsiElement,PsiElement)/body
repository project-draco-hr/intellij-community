{
  boolean unreachableLocalDeclaration=false;
  boolean resolveInParentScope=false;
  final ResolveResultList resultList=new ResolveResultList();
  final ScopeOwner referenceOwner=ScopeUtil.getScopeOwner(realContext);
  final TypeEvalContext typeEvalContext=myContext.getTypeEvalContext();
  ScopeOwner resolvedOwner=processor.getOwner();
  if (resolvedOwner != null && !processor.getResults().isEmpty()) {
    final Collection<PsiElement> resolvedElements=processor.getElements();
    final Scope resolvedScope=ControlFlowCache.getScope(resolvedOwner);
    if (!resolvedScope.isGlobal(referencedName)) {
      if (resolvedOwner == referenceOwner) {
        final List<Instruction> instructions=PyDefUseUtil.getLatestDefs(resolvedOwner,referencedName,realContext,false,true);
        final ResolveResultList latestDefs=resolveToLatestDefs(instructions,realContext,referencedName,typeEvalContext);
        if (!latestDefs.isEmpty()) {
          return latestDefs;
        }
 else         if (resolvedOwner instanceof PyClass || instructions.isEmpty() && allInOwnScopeComprehensions(resolvedElements)) {
          resolveInParentScope=true;
        }
 else {
          unreachableLocalDeclaration=true;
        }
      }
 else       if (referenceOwner != null) {
        final Scope referenceScope=ControlFlowCache.getScope(referenceOwner);
        if (referenceScope.containsDeclaration(referencedName)) {
          unreachableLocalDeclaration=true;
        }
      }
    }
  }
  if (!unreachableLocalDeclaration) {
    if (resolveInParentScope) {
      processor=new PyResolveProcessor(referencedName);
      resolvedOwner=ScopeUtil.getScopeOwner(resolvedOwner);
      if (resolvedOwner != null) {
        PyResolveUtil.scopeCrawlUp(processor,resolvedOwner,referencedName,resolveRoof);
      }
    }
    for (    Map.Entry<PsiElement,PsiElement> entry : processor.getResults().entrySet()) {
      final PsiElement resolved=entry.getKey();
      final PsiElement definer=entry.getValue();
      if (resolved != null) {
        if (typeEvalContext.maySwitchToAST(resolved) && isInnerComprehension(realContext,resolved)) {
          continue;
        }
        if (resolved == referenceOwner && referenceOwner instanceof PyClass) {
          continue;
        }
        if (definer == null) {
          resultList.poke(resolved,getRate(resolved,typeEvalContext));
        }
 else {
          resultList.poke(definer,getRate(definer,typeEvalContext));
          resultList.add(new ImportedResolveResult(resolved,getRate(resolved,typeEvalContext),Collections.singletonList(definer)));
        }
      }
 else       if (definer != null) {
        resultList.add(new ImportedResolveResult(null,RatedResolveResult.RATE_LOW,Collections.singletonList(definer)));
      }
    }
    if (!resultList.isEmpty()) {
      return resultList;
    }
  }
  return resolveByReferenceResolveProviders();
}
