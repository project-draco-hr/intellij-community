{
  super.setUp();
  myTrunkUrl=myRepoUrl + "/trunk";
  myBranchUrl=myRepoUrl + "/branch";
  myBranchVcsRoot=new File(myTempDirFixture.getTempDirPath(),"branch");
  myBranchVcsRoot.mkdir();
  myProjectLevelVcsManager=(ProjectLevelVcsManagerImpl)ProjectLevelVcsManager.getInstance(myProject);
  myProjectLevelVcsManager.setDirectoryMapping(myBranchVcsRoot.getAbsolutePath(),SvnVcs.VCS_NAME);
  VirtualFile vcsRoot=LocalFileSystem.getInstance().findFileByIoFile(myBranchVcsRoot);
  Node node=new Node(vcsRoot,SVNURL.parseURIEncoded(myBranchUrl),SVNURL.parseURIEncoded(myRepoUrl));
  RootUrlInfo root=new RootUrlInfo(node,WorkingCopyFormat.ONE_DOT_SIX,vcsRoot,null);
  myWCInfo=new WCInfo(root,true,SVNDepth.INFINITY);
  myOneShotMergeInfoHelper=new OneShotMergeInfoHelper(myProject,myWCInfo,myTrunkUrl);
  myVcs=SvnVcs.getInstance(myProject);
  myVcs.getSvnConfiguration().setCheckNestedForQuickMerge(true);
  enableSilentOperation(VcsConfiguration.StandardConfirmation.ADD);
  enableSilentOperation(VcsConfiguration.StandardConfirmation.REMOVE);
  final String repoUrl=SVNURL.parseURIDecoded(myRepoUrl).toString();
  myMergeChecker=new BranchInfo(myVcs,repoUrl,repoUrl + "/branch",repoUrl + "/trunk",repoUrl + "/trunk");
}
