{
  PsiElement element=descriptor.getStartElement();
  if (!(element instanceof PsiExpression))   return;
  PsiIfStatement statement=PsiTreeUtil.getParentOfType(element,PsiIfStatement.class);
  if (statement == null)   return;
  PsiExpression condition=(PsiExpression)element;
  boolean invert=false;
  if (BoolUtils.isNegation(condition)) {
    condition=BoolUtils.getNegated(condition);
    invert=true;
  }
  PsiVariable optionalVariable=extractOptionalFromIfPresentCheck(condition);
  if (optionalVariable == null)   return;
  PsiStatement thenStatement=extractThenStatement(statement,invert);
  PsiStatement elseStatement=extractElseStatement(statement,invert);
  if (!myScenario.isApplicable(optionalVariable,thenStatement,elseStatement))   return;
  if (!FileModificationService.getInstance().preparePsiElementForWrite(element.getContainingFile()))   return;
  PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
  String replacement=myScenario.generateReplacement(factory,optionalVariable,thenStatement,elseStatement);
  final PsiElement parent=statement.getParent();
  for (  PsiElement comment : PsiTreeUtil.findChildrenOfType(statement,PsiComment.class)) {
    if ((thenStatement == null || !PsiTreeUtil.isAncestor(thenStatement,comment,true)) && (elseStatement == null || !PsiTreeUtil.isAncestor(elseStatement,comment,true))) {
      parent.addBefore(comment,statement);
    }
  }
  if (thenStatement != null && !PsiTreeUtil.isAncestor(statement,thenStatement,true))   thenStatement.delete();
  if (elseStatement != null && !PsiTreeUtil.isAncestor(statement,elseStatement,true))   elseStatement.delete();
  PsiElement result=statement.replace(factory.createStatementFromText(replacement,statement));
  LambdaCanBeMethodReferenceInspection.replaceAllLambdasWithMethodReferences(result);
  CodeStyleManager.getInstance(project).reformat(result);
}
