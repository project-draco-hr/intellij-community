{
  if (myRoot.getChildCount() == 0)   return false;
  final MyNode[] nodes=new MyNode[modules.length];
  int i=0;
  for (  Module module : modules) {
    MyNode node=findModuleNode(module);
    LOG.assertTrue(node != null,"Module " + module.getName() + " is not in project.");
    node.removeFromParent();
    nodes[i++]=node;
  }
  for (  final MyNode moduleNode : nodes) {
    final String[] groupPath=myPlainMode ? null : group != null ? group.getGroupPath() : null;
    if (groupPath == null || groupPath.length == 0) {
      myRoot.add(moduleNode);
    }
 else {
      final MyNode moduleGroupNode=ModuleGroupUtil.updateModuleGroupPath(new ModuleGroup(groupPath),myRoot,new Function<ModuleGroup,MyNode>(){
        @Override @Nullable public MyNode fun(        final ModuleGroup group){
          return findNodeByObject(myRoot,group);
        }
      }
,new Consumer<ModuleGroupUtil.ParentChildRelation<MyNode>>(){
        @Override public void consume(        final ModuleGroupUtil.ParentChildRelation<MyNode> parentChildRelation){
          parentChildRelation.getParent().add(parentChildRelation.getChild());
        }
      }
,new Function<ModuleGroup,MyNode>(){
        @Override public MyNode fun(        final ModuleGroup moduleGroup){
          final NamedConfigurable moduleGroupConfigurable=createModuleGroupConfigurable(moduleGroup);
          return new MyNode(moduleGroupConfigurable,true);
        }
      }
);
      moduleGroupNode.add(moduleNode);
    }
    Module module=(Module)moduleNode.getConfigurable().getEditableObject();
    myFacetEditorFacade.addFacetsNodes(module,moduleNode);
    addNodesFromExtensions(module,moduleNode);
  }
  sortDescendants(myRoot);
  return true;
}
