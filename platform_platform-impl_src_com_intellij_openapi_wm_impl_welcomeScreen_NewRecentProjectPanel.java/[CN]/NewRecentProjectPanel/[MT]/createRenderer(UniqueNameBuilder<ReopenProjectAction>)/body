{
  return new RecentProjectItemRenderer(myPathShortener){
    private GridBagConstraints nameCell;
    private GridBagConstraints pathCell;
    private GridBagConstraints closeButtonCell;
    private void initConstraints(){
      nameCell=new GridBagConstraints();
      pathCell=new GridBagConstraints();
      closeButtonCell=new GridBagConstraints();
      nameCell.gridx=0;
      nameCell.gridy=0;
      nameCell.weightx=1.0;
      nameCell.weighty=1.0;
      nameCell.anchor=GridBagConstraints.FIRST_LINE_START;
      nameCell.insets=JBUI.insets(6,5,1,5);
      pathCell.gridx=0;
      pathCell.gridy=1;
      pathCell.insets=JBUI.insets(1,5,6,5);
      pathCell.anchor=GridBagConstraints.LAST_LINE_START;
      closeButtonCell.gridx=1;
      closeButtonCell.gridy=0;
      closeButtonCell.anchor=GridBagConstraints.FIRST_LINE_END;
      closeButtonCell.insets=JBUI.insets(7,7,7,7);
      closeButtonCell.gridheight=2;
    }
    @Override protected Color getListBackground(    boolean isSelected,    boolean hasFocus){
      return isSelected ? FlatWelcomeFrame.getListSelectionColor(hasFocus) : FlatWelcomeFrame.getProjectsBackground();
    }
    @Override protected Color getListForeground(    boolean isSelected,    boolean hasFocus){
      return UIUtil.getListForeground(isSelected && hasFocus);
    }
    @Override protected void layoutComponents(){
      setLayout(new GridBagLayout());
      initConstraints();
      add(myName,nameCell);
      add(myPath,pathCell);
    }
    MySpacer spacer=new MySpacer();
class MySpacer extends NonOpaquePanel {
      boolean selected;
      boolean lastItem;
      @Override public Dimension getPreferredSize(){
        return new Dimension(JBUI.scale(13),super.getPreferredSize().height);
      }
      @Override protected void paintComponent(      Graphics g){
        final int x=getWidth() / 2;
        final int y=getHeight() / 2;
        Color fg=selected ? UIUtil.getListForeground(true) : ColorUtil.withAlpha(UIUtil.getListForeground(),0.5);
        UIUtil.drawVDottedLine((Graphics2D)g,x,0,lastItem ? y : getHeight(),null,fg);
        UIUtil.drawHDottedLine((Graphics2D)g,x,getWidth(),y,null,fg);
      }
    }
    @Override public Component getListCellRendererComponent(    JList list,    final Object value,    int index,    final boolean isSelected,    boolean cellHasFocus){
      super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      return new JPanel(){
{
          myName.setFont(myName.getFont().deriveFont(Font.PLAIN));
          setLayout(new BorderLayout());
          setBackground(UIUtil.getListBackground(isSelected));
          final Color fg=UIUtil.getListForeground(isSelected);
          boolean isGroup=value instanceof ProjectGroupActionGroup;
          boolean isInsideGroup=false;
          boolean isLastInGroup=false;
          if (value instanceof ReopenProjectAction) {
            final String path=((ReopenProjectAction)value).getProjectPath();
            for (            ProjectGroup group : RecentProjectsManager.getInstance().getGroups()) {
              final List<String> projects=group.getProjects();
              if (projects.contains(path)) {
                isInsideGroup=true;
                isLastInGroup=path.equals(projects.get(projects.size() - 1));
                break;
              }
            }
          }
          setBorder(JBUI.Borders.empty(5,7));
          if (isInsideGroup) {
            spacer.selected=isSelected;
            spacer.lastItem=isLastInGroup;
            add(spacer,BorderLayout.WEST);
          }
          if (isGroup) {
            final ProjectGroup group=((ProjectGroupActionGroup)value).getGroup();
            myName.setText(group.getName());
            myName.setFont(myName.getFont().deriveFont(Font.BOLD));
            add(myName);
            add(new JLabel(group.isExpanded() ? UIUtil.getTreeExpandedIcon() : UIUtil.getTreeCollapsedIcon()),BorderLayout.EAST);
          }
 else           if (value instanceof ReopenProjectAction) {
            add(myName,BorderLayout.NORTH);
            add(myPath,BorderLayout.SOUTH);
          }
        }
        @Override public Dimension getPreferredSize(){
          return new Dimension(super.getPreferredSize().width,JBUI.scale(44));
        }
      }
;
    }
  }
;
}
