{
  ElementClassHint classHint=processor.getHint(ElementClassHint.KEY);
  if (ResolveUtil.shouldProcessProperties(classHint)) {
    GrMethod method=PsiTreeUtil.getParentOfType(place,GrMethod.class);
    if (method == null)     return;
    if (aClass != method.getContainingClass())     return;
    Map<String,SpockVariableDescriptor> cachedValue=SpockUtils.getVariableMap(method);
    String nameHint=ResolveUtil.getNameHint(processor);
    if (nameHint == null) {
      for (      SpockVariableDescriptor spockVar : cachedValue.values()) {
        if (!processor.execute(spockVar.getVariable(),state))         return;
      }
    }
 else {
      SpockVariableDescriptor spockVar=cachedValue.get(nameHint);
      if (spockVar != null && spockVar.getNavigationElement() != place) {
        if (!processor.execute(spockVar.getVariable(),state))         return;
      }
    }
  }
  if (ResolveUtil.shouldProcessMethods(classHint)) {
    String nameHint=ResolveUtil.getNameHint(processor);
    if (nameHint == null) {
      nameHint=place instanceof GrReferenceExpression ? ((GrReferenceExpression)place).getReferenceName() : null;
      if (nameHint != null)       nameHint=GroovyPropertyUtils.getGetterNameNonBoolean(nameHint);
    }
    if ("get_".equals(nameHint)) {
      GrLightMethodBuilder m=new GrLightMethodBuilder(aClass.getManager(),"get_");
      m.setReturnType(null);
      if (!processor.execute(m,state))       return;
    }
  }
}
