{
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,local))   return;
  final HighlightManager highlightManager=HighlightManager.getInstance(project);
  final String localName=local.getName();
  final Query<PsiReference> query=ReferencesSearch.search(local,GlobalSearchScope.allScope(project),false);
  if (query.findFirst() == null) {
    LOG.assertTrue(refExpr == null);
    String message=RefactoringBundle.message("variable.is.never.used",localName);
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_VARIABLE);
    return;
  }
  final PsiClass containingClass=PsiTreeUtil.getParentOfType(local,PsiClass.class);
  final List<PsiElement> innerClassesWithUsages=Collections.synchronizedList(new ArrayList<PsiElement>());
  final List<PsiElement> innerClassUsages=Collections.synchronizedList(new ArrayList<PsiElement>());
  query.forEach(new Processor<PsiReference>(){
    public boolean process(    final PsiReference psiReference){
      final PsiElement element=psiReference.getElement();
      PsiElement innerClass=PsiTreeUtil.getParentOfType(element,PsiClass.class,PsiLambdaExpression.class);
      while (innerClass != containingClass && innerClass != null) {
        final PsiClass parentPsiClass=PsiTreeUtil.getParentOfType(innerClass,PsiClass.class,true);
        if (parentPsiClass == containingClass) {
          if (innerClass instanceof PsiLambdaExpression) {
            if (PsiTreeUtil.isAncestor(innerClass,local,false)) {
              innerClassesWithUsages.add(element);
            }
 else {
              innerClassesWithUsages.add(innerClass);
            }
            innerClass=parentPsiClass;
            continue;
          }
          innerClassesWithUsages.add(innerClass);
          innerClassUsages.add(element);
        }
        innerClass=parentPsiClass;
      }
      return true;
    }
  }
);
  final PsiCodeBlock containerBlock=PsiTreeUtil.getParentOfType(local,PsiCodeBlock.class);
  if (containerBlock == null) {
    final String message=RefactoringBundle.getCannotRefactorMessage("Variable is declared outside a code block");
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_VARIABLE);
    return;
  }
  final PsiExpression defToInline=innerClassesWithUsages.isEmpty() ? getDefToInline(local,refExpr,containerBlock) : getDefToInline(local,innerClassesWithUsages.get(0),containerBlock);
  if (defToInline == null) {
    final String key=refExpr == null ? "variable.has.no.initializer" : "variable.has.no.dominating.definition";
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message(key,localName));
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_VARIABLE);
    return;
  }
  List<PsiElement> refsToInlineList=new ArrayList<PsiElement>();
  Collections.addAll(refsToInlineList,DefUseUtil.getRefs(containerBlock,local,defToInline));
  for (  PsiElement innerClassUsage : innerClassUsages) {
    if (!refsToInlineList.contains(innerClassUsage)) {
      refsToInlineList.add(innerClassUsage);
    }
  }
  if (refsToInlineList.size() == 0) {
    String message=RefactoringBundle.message("variable.is.never.used.before.modification",localName);
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_VARIABLE);
    return;
  }
  final Ref<Boolean> inlineAll=new Ref<Boolean>(true);
  if (editor != null && !ApplicationManager.getApplication().isUnitTestMode()) {
    int occurrencesCount=refsToInlineList.size();
    if (refExpr != null && occurrencesCount > 1 || EditorSettingsExternalizable.getInstance().isShowInlineLocalDialog()) {
      final InlineLocalDialog inlineLocalDialog=new InlineLocalDialog(project,local,refExpr,occurrencesCount);
      inlineLocalDialog.show();
      if (!inlineLocalDialog.isOK()) {
        WindowManager.getInstance().getStatusBar(project).setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
        return;
      }
      if (refExpr != null && inlineLocalDialog.isInlineThis()) {
        refsToInlineList=Collections.<PsiElement>singletonList(refExpr);
        inlineAll.set(false);
      }
    }
  }
  final PsiElement[] refsToInline=PsiUtilCore.toPsiElementArray(refsToInlineList);
  final EditorColorsManager manager=EditorColorsManager.getInstance();
  final TextAttributes attributes=manager.getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES);
  final TextAttributes writeAttributes=manager.getGlobalScheme().getAttributes(EditorColors.WRITE_SEARCH_RESULT_ATTRIBUTES);
  if (editor != null && !ApplicationManager.getApplication().isUnitTestMode()) {
    highlightManager.addOccurrenceHighlights(editor,refsToInline,attributes,true,null);
  }
  if (refExpr != null && PsiUtil.isAccessedForReading(refExpr) && ArrayUtil.find(refsToInline,refExpr) < 0) {
    final PsiElement[] defs=DefUseUtil.getDefs(containerBlock,local,refExpr);
    LOG.assertTrue(defs.length > 0);
    highlightManager.addOccurrenceHighlights(editor,defs,attributes,true,null);
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("variable.is.accessed.for.writing",localName));
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_VARIABLE);
    WindowManager.getInstance().getStatusBar(project).setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
    return;
  }
  PsiTryStatement tryStatement=PsiTreeUtil.getParentOfType(defToInline,PsiTryStatement.class);
  if (tryStatement != null) {
    if (ExceptionUtil.getThrownExceptions(defToInline).isEmpty()) {
      tryStatement=null;
    }
  }
  PsiFile workingFile=local.getContainingFile();
  for (  PsiElement ref : refsToInline) {
    final PsiFile otherFile=ref.getContainingFile();
    if (!otherFile.equals(workingFile)) {
      String message=RefactoringBundle.message("variable.is.referenced.in.multiple.files",localName);
      CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_VARIABLE);
      return;
    }
    if (tryStatement != null && !PsiTreeUtil.isAncestor(tryStatement,ref,false)) {
      CommonRefactoringUtil.showErrorHint(project,editor,"Unable to inline outside try/catch statement",REFACTORING_NAME,HelpID.INLINE_VARIABLE);
      return;
    }
  }
  for (  final PsiElement ref : refsToInline) {
    final PsiElement[] defs=DefUseUtil.getDefs(containerBlock,local,ref);
    boolean isSameDefinition=true;
    for (    PsiElement def : defs) {
      isSameDefinition&=isSameDefinition(def,defToInline);
    }
    if (!isSameDefinition) {
      highlightManager.addOccurrenceHighlights(editor,defs,writeAttributes,true,null);
      highlightManager.addOccurrenceHighlights(editor,new PsiElement[]{ref},attributes,true,null);
      String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("variable.is.accessed.for.writing.and.used.with.inlined",localName));
      CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_VARIABLE);
      WindowManager.getInstance().getStatusBar(project).setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
      return;
    }
  }
  final PsiElement writeAccess=checkRefsInAugmentedAssignmentOrUnaryModified(refsToInline,defToInline);
  if (writeAccess != null) {
    HighlightManager.getInstance(project).addOccurrenceHighlights(editor,new PsiElement[]{writeAccess},writeAttributes,true,null);
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("variable.is.accessed.for.writing",localName));
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_VARIABLE);
    WindowManager.getInstance().getStatusBar(project).setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
    return;
  }
  final Runnable runnable=new Runnable(){
    public void run(){
      final String refactoringId="refactoring.inline.local.variable";
      try {
        SmartPsiElementPointer<PsiExpression>[] exprs=new SmartPsiElementPointer[refsToInline.length];
        RefactoringEventData beforeData=new RefactoringEventData();
        beforeData.addElements(refsToInline);
        project.getMessageBus().syncPublisher(RefactoringEventListener.REFACTORING_EVENT_TOPIC).refactoringStarted(refactoringId,beforeData);
        final SmartPointerManager pointerManager=SmartPointerManager.getInstance(project);
        for (int idx=0; idx < refsToInline.length; idx++) {
          PsiJavaCodeReferenceElement refElement=(PsiJavaCodeReferenceElement)refsToInline[idx];
          exprs[idx]=pointerManager.createSmartPsiElementPointer(InlineUtil.inlineVariable(local,defToInline,refElement));
        }
        if (inlineAll.get()) {
          if (!isInliningVariableInitializer(defToInline)) {
            defToInline.getParent().delete();
          }
 else {
            defToInline.delete();
          }
          if (ReferencesSearch.search(local).findFirst() == null) {
            QuickFixFactory.getInstance().createRemoveUnusedVariableFix(local).invoke(project,editor,local.getContainingFile());
          }
        }
        if (editor != null && !ApplicationManager.getApplication().isUnitTestMode()) {
          highlightManager.addOccurrenceHighlights(editor,ContainerUtil.convert(exprs,new PsiExpression[refsToInline.length],new Function<SmartPsiElementPointer<PsiExpression>,PsiExpression>(){
            @Override public PsiExpression fun(            SmartPsiElementPointer<PsiExpression> pointer){
              return pointer.getElement();
            }
          }
),attributes,true,null);
          WindowManager.getInstance().getStatusBar(project).setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
        }
        for (        final SmartPsiElementPointer<PsiExpression> expr : exprs) {
          InlineUtil.tryToInlineArrayCreationForVarargs(expr.getElement());
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
 finally {
        final RefactoringEventData afterData=new RefactoringEventData();
        afterData.addElement(containingClass);
        project.getMessageBus().syncPublisher(RefactoringEventListener.REFACTORING_EVENT_TOPIC).refactoringDone(refactoringId,afterData);
      }
    }
  }
;
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(runnable);
    }
  }
,RefactoringBundle.message("inline.command",localName),null);
}
