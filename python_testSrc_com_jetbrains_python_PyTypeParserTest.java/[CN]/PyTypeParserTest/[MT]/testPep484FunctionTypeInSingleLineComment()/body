{
  myFixture.configureByFile("typeParser/typeParser.py");
  final PyType type=PyTypeParser.parsePep484FunctionTypeComment(myFixture.getFile(),"(bool, MyObject, *str, **int) -> int").getType();
  assertInstanceOf(type,PyCallableType.class);
  final PyCallableType callableType=(PyCallableType)type;
  assertNotNull(callableType);
  final TypeEvalContext context=getTypeEvalContext();
  final PyType returnType=callableType.getReturnType(context);
  assertNotNull(returnType);
  assertEquals("int",returnType.getName());
  final List<PyCallableParameter> parameterTypes=callableType.getParameters(context);
  assertNotNull(parameterTypes);
  assertSize(4,parameterTypes);
  final PyType type1=parameterTypes.get(0).getType(context);
  assertNotNull(type1);
  assertEquals("bool",type1.getName());
  final PyType type2=parameterTypes.get(1).getType(context);
  assertNotNull(type2);
  assertEquals("MyObject",type2.getName());
  final PyClassType type3=as(parameterTypes.get(2).getType(context),PyClassType.class);
  assertNotNull(type3);
  assertEquals("tuple",type3.getName());
  final PyCollectionType type4=as(parameterTypes.get(3).getType(context),PyCollectionType.class);
  assertNotNull(type4);
  assertEquals("dict",type4.getName());
  assertSize(2,type4.getElementTypes(context));
  assertEquals("str",type4.getElementTypes(context).get(0).getName());
  assertEquals("int",type4.getElementTypes(context).get(1).getName());
}
