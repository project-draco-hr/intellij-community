{
  if (elt == null)   return null;
  PsiElement seeker=elt;
  PsiElement cap=getConcealingParent(elt);
  do {
    if (fromunder) {
      fromunder=false;
      seeker=getPrevNodeOf(getInnermostChildOf(seeker),NameDefiner.class);
    }
 else {
      seeker=getPrevNodeOf(seeker,NameDefiner.class);
    }
    if ((seeker != null) && ((NameDefiner)seeker).mustResolveOutside() && PsiTreeUtil.isAncestor(seeker,elt,true)) {
      seeker=getPrevNodeOf(seeker,NameDefiner.class);
    }
    while (true) {
      PsiElement local_cap=getConcealingParent(seeker);
      if ((local_cap != null) && (local_cap != cap)) {
        if (local_cap instanceof NameDefiner)         seeker=local_cap;
 else         seeker=getPrevNodeOf(local_cap,NameDefiner.class);
      }
      if (local_cap == null)       break;
      if (local_cap == cap)       break;
      if ((cap != null) && PsiTreeUtil.isAncestor(local_cap,cap,true))       break;
    }
    PsiElement possible_class_cap=getConcealingParent(seeker);
    if (possible_class_cap instanceof PyClass)     continue;
    if (seeker != null) {
      if (!processor.execute(seeker,ResolveState.initial())) {
        if (processor instanceof ResolveProcessor) {
          return ((ResolveProcessor)processor).getResult();
        }
 else         return seeker;
      }
    }
  }
 while (seeker != null);
  return null;
}
