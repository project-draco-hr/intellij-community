{
  Map<InferenceVariable,InferenceGraphNode<InferenceVariable>> nodes=new HashMap<InferenceVariable,InferenceGraphNode<InferenceVariable>>();
  for (  InferenceVariable var : vars) {
    nodes.put(var,new InferenceGraphNode<InferenceVariable>(var));
  }
  for (  InferenceVariable var : vars) {
    if (var.getInstantiation() != null)     continue;
    final InferenceGraphNode<InferenceVariable> node=nodes.get(var);
    for (    InferenceBound inferenceBound : InferenceBound.values()) {
      for (      PsiType bound : var.getBounds(inferenceBound)) {
        final HashSet<InferenceVariable> dependencies=new HashSet<InferenceVariable>();
        session.collectDependencies(bound,dependencies);
        for (        InferenceVariable dependentVariable : dependencies) {
          final InferenceGraphNode<InferenceVariable> dependency=nodes.get(dependentVariable);
          if (dependency != null) {
            node.addDependency(dependency);
          }
        }
      }
    }
  }
  final ArrayList<InferenceGraphNode<InferenceVariable>> acyclicNodes=initNodes(nodes.values());
  return ContainerUtil.map(acyclicNodes,new Function<InferenceGraphNode<InferenceVariable>,List<InferenceVariable>>(){
    @Override public List<InferenceVariable> fun(    InferenceGraphNode<InferenceVariable> node){
      return node.getValue();
    }
  }
);
}
