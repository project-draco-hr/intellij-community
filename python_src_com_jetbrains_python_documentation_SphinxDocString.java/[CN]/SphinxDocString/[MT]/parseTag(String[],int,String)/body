{
  String line=lines[index].trim();
  int tagEnd=StringUtil.indexOfAny(line," \t:",1,line.length());
  if (tagEnd < 0)   return index;
  String tagName=line.substring(1,tagEnd);
  String tagValue=line.substring(tagEnd).trim();
  tagValue=StringUtil.replace(tagValue,":py:class:","");
  tagValue=StringUtil.replace(tagValue,":class:","");
  tagValue=tagValue.replaceAll("`([^`]+)`","$1");
  int pos=tagValue.indexOf(':');
  if (pos < 0)   return index;
  String value=tagValue.substring(pos + 1).trim();
  while (index + 1 < lines.length && !lines[index + 1].trim().startsWith(tagPrefix)) {
    index++;
    value+=" " + lines[index].trim();
  }
  if (pos == 0) {
    mySimpleTagValues.put(tagName,value);
  }
 else {
    if ("param".equals(tagName) || "parameter".equals(tagName) || "arg".equals(tagName)|| "argument".equals(tagName)) {
      int ws=CharMatcher.anyOf(" \t*").indexIn(tagValue,1);
      if (ws != -1) {
        int next=CharMatcher.anyOf(" \t*").negate().indexIn(tagValue,ws);
        if (next != -1 && !tagValue.substring(0,next).contains(":")) {
          Map<String,String> argValues=myArgTagValues.get("type");
          if (argValues == null) {
            argValues=Maps.newLinkedHashMap();
            myArgTagValues.put("type",argValues);
          }
          CharMatcher identifierMatcher=new CharMatcher(){
            @Override public boolean matches(            char c){
              return Character.isLetterOrDigit(c) || c == '_' || c == '.';
            }
          }
.negate();
          int endType=identifierMatcher.indexIn(tagValue,0);
          int endArg=tagValue.indexOf(':');
          String arg=tagValue.substring(endType,endArg).trim();
          argValues.put(arg,tagValue.substring(0,endType).trim());
          argValues=myArgTagValues.get(tagName);
          if (argValues == null) {
            argValues=Maps.newLinkedHashMap();
            myArgTagValues.put(tagName,argValues);
          }
          argValues.put(arg,value);
          return index;
        }
      }
    }
    String arg=tagValue.substring(0,pos).trim();
    Map<String,String> argValues=myArgTagValues.get(tagName);
    if (argValues == null) {
      argValues=Maps.newLinkedHashMap();
      myArgTagValues.put(tagName,argValues);
    }
    argValues.put(arg,value);
  }
  return index;
}
