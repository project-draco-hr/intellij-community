{
  String line=lines[index].trim();
  if (line.startsWith(tagPrefix)) {
    line=line.substring(tagPrefix.length());
    final Pattern tagPattern=Pattern.compile("([a-z]+)(.*):([^:]*)");
    final Matcher tagMatcher=tagPattern.matcher(line);
    if (tagMatcher.matches()) {
      final String tagName=tagMatcher.group(1);
      final String argName=tagMatcher.group(2).trim();
      final StringBuilder builder=new StringBuilder();
      builder.append(tagMatcher.group(3).trim());
      for (index+=1; index < lines.length && !lines[index].trim().startsWith(tagPrefix); index++) {
        builder.append(" ");
        builder.append(lines[index].trim());
      }
      index--;
      final String argValue=builder.toString().trim();
      if (argName.isEmpty()) {
        mySimpleTagValues.put(tagName,argValue);
      }
 else {
        if ("param".equals(tagName) || "parameter".equals(tagName) || "arg".equals(tagName)|| "argument".equals(tagName)) {
          final Pattern argPattern=Pattern.compile("(.*) ([a-zA-Z_0-9]+)");
          final Matcher argMatcher=argPattern.matcher(argName);
          if (argMatcher.matches()) {
            final String type=argMatcher.group(1).trim();
            final String arg=argMatcher.group(2);
            getTagValuesMap("type").put(arg,type);
            getTagValuesMap(tagName).put(arg,argValue);
          }
        }
 else {
          getTagValuesMap(tagName).put(argName,argValue);
        }
      }
    }
  }
  return index;
}
