{
  if (functionalInterfaceType instanceof PsiIntersectionType) {
    for (    PsiType type : ((PsiIntersectionType)functionalInterfaceType).getConjuncts()) {
      if (checkInterfaceFunctional(type) == null)       return null;
    }
  }
  final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(functionalInterfaceType);
  final PsiClass aClass=resolveResult.getElement();
  if (aClass != null) {
    if (aClass instanceof PsiTypeParameter)     return null;
    final List<MethodSignature> signatures=LambdaUtil.findFunctionCandidates(aClass);
    if (signatures != null && signatures.size() == 1) {
      final MethodSignature functionalMethod=signatures.get(0);
      if (functionalMethod.getTypeParameters().length > 0)       return "Target method is generic";
    }
    if (checkReturnTypeApplicable(resolveResult,aClass)) {
      return "No instance of type " + functionalInterfaceType.getPresentableText() + " exists so that lambda expression can be type-checked";
    }
    return checkInterfaceFunctional(aClass);
  }
  return functionalInterfaceType.getPresentableText() + " is not a functional interface";
}
