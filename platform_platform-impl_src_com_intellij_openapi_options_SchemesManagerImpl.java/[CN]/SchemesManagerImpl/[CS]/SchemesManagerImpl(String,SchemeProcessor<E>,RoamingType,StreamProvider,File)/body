{
  myFileSpec=fileSpec;
  myProcessor=processor;
  myRoamingType=roamingType;
  this.provider=provider;
  myIoDir=baseDir;
  if (processor instanceof SchemeExtensionProvider) {
    mySchemeExtension=((SchemeExtensionProvider)processor).getSchemeExtension();
    myUpdateExtension=((SchemeExtensionProvider)processor).isUpgradeNeeded();
  }
 else {
    mySchemeExtension=DirectoryStorageData.DEFAULT_EXT;
    myUpdateExtension=false;
  }
  Application application=ApplicationManager.getApplication();
  VirtualFileTracker virtualFileTracker=application == null ? null : ServiceManager.getService(VirtualFileTracker.class);
  if (virtualFileTracker != null) {
    final String baseDirPath=myIoDir.getAbsolutePath().replace(File.separatorChar,'/');
    virtualFileTracker.addTracker(LocalFileSystem.PROTOCOL_PREFIX + baseDirPath,new VirtualFileAdapter(){
      @Override public void contentsChanged(      @NotNull VirtualFileEvent event){
        if (event.getRequestor() != null || !isMy(event)) {
          return;
        }
        E scheme=findExternalizableSchemeByFileName(event.getFile().getName());
        T oldCurrentScheme=null;
        if (scheme != null) {
          oldCurrentScheme=getCurrentScheme();
          removeScheme((T)scheme);
          myProcessor.onSchemeDeleted(scheme);
        }
        E readScheme=readSchemeFromFile(event.getFile(),null);
        if (readScheme != null) {
          myProcessor.initScheme(readScheme);
          myProcessor.onSchemeAdded(readScheme);
          T newCurrentScheme=getCurrentScheme();
          if (oldCurrentScheme != null && newCurrentScheme == null) {
            setCurrentSchemeName(readScheme.getName());
            newCurrentScheme=getCurrentScheme();
          }
          if (oldCurrentScheme != newCurrentScheme) {
            myProcessor.onCurrentSchemeChanged(oldCurrentScheme);
          }
        }
      }
      @Override public void fileCreated(      @NotNull VirtualFileEvent event){
        if (event.getRequestor() == null) {
          if (event.getFile().isDirectory()) {
            VirtualFile dir=getDirectory();
            if (event.getFile().equals(dir)) {
              for (              VirtualFile file : dir.getChildren()) {
                if (isMy(file)) {
                  schemeCreatedExternally(file);
                }
              }
            }
          }
 else           if (isMy(event)) {
            schemeCreatedExternally(event.getFile());
          }
        }
      }
      private void schemeCreatedExternally(      @NotNull VirtualFile file){
        E readScheme=readSchemeFromFile(file,null);
        if (readScheme != null) {
          myProcessor.initScheme(readScheme);
          myProcessor.onSchemeAdded(readScheme);
        }
      }
      @Override public void fileDeleted(      @NotNull VirtualFileEvent event){
        if (event.getRequestor() == null) {
          if (event.getFile().isDirectory()) {
            VirtualFile dir=myDir;
            if (event.getFile().equals(dir)) {
              myDir=null;
              for (              VirtualFile file : dir.getChildren()) {
                if (isMy(file)) {
                  schemeDeletedExternally(file);
                }
              }
            }
          }
 else           if (isMy(event)) {
            schemeDeletedExternally(event.getFile());
          }
        }
      }
      private void schemeDeletedExternally(      @NotNull VirtualFile file){
        E scheme=findExternalizableSchemeByFileName(file.getName());
        T oldCurrentScheme=null;
        if (scheme != null) {
          oldCurrentScheme=getCurrentScheme();
          removeScheme((T)scheme);
          myProcessor.onSchemeDeleted(scheme);
        }
        T newCurrentScheme=getCurrentScheme();
        if (oldCurrentScheme != null && newCurrentScheme == null) {
          if (!mySchemes.isEmpty()) {
            setCurrentSchemeName(mySchemes.get(0).getName());
            newCurrentScheme=getCurrentScheme();
          }
        }
        if (oldCurrentScheme != newCurrentScheme) {
          myProcessor.onCurrentSchemeChanged(oldCurrentScheme);
        }
      }
    }
,false,application);
  }
}
