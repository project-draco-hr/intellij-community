{
  StreamProvider provider=getProvider();
  if (provider == null || !provider.isEnabled()) {
    return Collections.emptyList();
  }
  Collection<String> names=new THashSet<String>(getAllSchemeNames(currentSchemeList));
  Map<String,SharedScheme<E>> result=new THashMap<String,SharedScheme<E>>();
  for (  String subPath : provider.listSubFiles(myFileSpec,getRoamingType(provider))) {
    try {
      final Document subDocument=StorageUtil.loadDocument(provider.loadContent(getFileFullPath(subPath),getRoamingType(provider)));
      if (subDocument != null) {
        SharedSchemeData original=unwrap(subDocument);
        final E scheme=myProcessor.readScheme(original.original);
        if (!alreadyShared(subPath,currentSchemeList)) {
          String schemeName=original.name;
          String uniqueName=UniqueNameGenerator.generateUniqueName("[shared] " + schemeName,names);
          renameScheme(scheme,uniqueName);
          schemeName=uniqueName;
          scheme.getExternalInfo().setOriginalPath(getFileFullPath(subPath));
          scheme.getExternalInfo().setIsImported(true);
          result.put(schemeName,new SharedScheme<E>(original.user == null ? "unknown" : original.user,original.description,scheme));
        }
      }
    }
 catch (    Exception e) {
      LOG.debug("Cannot load data from IDEAServer: " + e.getLocalizedMessage());
    }
  }
  for (  SharedScheme<E> t : result.values()) {
    myProcessor.initScheme(t.getScheme());
  }
  return result.values();
}
