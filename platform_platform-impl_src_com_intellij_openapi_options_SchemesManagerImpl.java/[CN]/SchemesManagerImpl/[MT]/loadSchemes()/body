{
  final Map<String,E> result=new LinkedHashMap<String,E>();
  if (myProvider != null && myProvider.isEnabled()) {
    myProvider.processChildren(myFileSpec,myRoamingType,new Condition<String>(){
      @Override public boolean value(      @NotNull String name){
        return canRead(name);
      }
    }
,new StreamProvider.ChildrenProcessor(){
      @Override public boolean process(      @NotNull String name,      @NotNull InputStream input){
        loadScheme(name,input,true,result);
        return true;
      }
    }
);
  }
 else {
    VirtualFile dir=getVirtualDir();
    VirtualFile[] files=dir == null ? null : dir.getChildren();
    if (files != null) {
      for (      VirtualFile file : files) {
        readSchemeFromFile(file,true,result);
      }
    }
  }
  Collection<E> list=result.values();
  for (  E scheme : list) {
    myProcessor.initScheme(scheme);
  }
  return list;
}
