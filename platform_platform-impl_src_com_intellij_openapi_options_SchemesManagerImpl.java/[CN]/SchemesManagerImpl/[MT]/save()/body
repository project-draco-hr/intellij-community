{
  boolean hasSchemes=false;
  UniqueNameGenerator nameGenerator=new UniqueNameGenerator();
  List<E> schemesToSave=new SmartList<E>();
  for (  T scheme : mySchemes) {
    if (scheme instanceof ExternalizableScheme) {
      E eScheme=(E)scheme;
      BaseSchemeProcessor.State state;
      if (myProcessor instanceof BaseSchemeProcessor) {
        state=((BaseSchemeProcessor<E>)myProcessor).getState(eScheme);
      }
 else {
        state=myProcessor.shouldBeSaved(eScheme) ? BaseSchemeProcessor.State.POSSIBLY_CHANGED : BaseSchemeProcessor.State.NON_PERSISTENT;
      }
      if (state == BaseSchemeProcessor.State.NON_PERSISTENT) {
        continue;
      }
      hasSchemes=true;
      if (state != BaseSchemeProcessor.State.UNCHANGED) {
        schemesToSave.add(eScheme);
      }
      String fileName=eScheme.getExternalInfo().getCurrentFileName();
      if (fileName != null && !isRenamed(eScheme)) {
        nameGenerator.addExistingName(fileName);
      }
    }
  }
  VirtualFile dir=getVirtualDir();
  if (!hasSchemes) {
    myFilesToDelete.clear();
    if (dir != null && dir.exists()) {
      try {
        StorageUtil.deleteFile(this,dir);
      }
 catch (      IOException e) {
        throw new StateStorageException(e);
      }
    }
    return;
  }
  List<Throwable> errors=null;
  for (  E scheme : schemesToSave) {
    try {
      saveScheme(scheme,nameGenerator);
    }
 catch (    Throwable e) {
      if (errors == null) {
        errors=new SmartList<Throwable>();
      }
      errors.add(e);
    }
  }
  deleteFiles(dir);
  CompoundRuntimeException.doThrow(errors);
}
