{
  boolean duringLoad=result != null;
  try {
    Element element=JDOMUtil.load(input);
    E scheme;
    if (myProcessor instanceof BaseSchemeProcessor) {
      scheme=((BaseSchemeProcessor<E>)myProcessor).readScheme(element,duringLoad);
    }
 else {
      scheme=myProcessor.readScheme(new Document((Element)element.detach()));
    }
    if (scheme == null) {
      return null;
    }
    String extension=getFileExtension(fileName,false);
    String fileNameWithoutExtension=fileName.subSequence(0,fileName.length() - extension.length()).toString();
    if (duringLoad) {
      if (filesToDelete.contains(fileName.toString())) {
        LOG.warn("Scheme file " + fileName + " is not loaded because marked to delete");
        return null;
      }
      T existingScheme=findSchemeByName(scheme.getName());
      if (existingScheme != null) {
        if (isOverwriteOnLoad(existingScheme)) {
          removeScheme(existingScheme);
        }
 else {
          LOG.warn("Scheme file " + fileName + " is not loaded because defines duplicated name "+ scheme.getName());
          return null;
        }
      }
    }
    ExternalInfo info=schemeToInfo.get(scheme);
    if (info == null) {
      info=new ExternalInfo(fileNameWithoutExtension,extension);
      schemeToInfo.put(scheme,info);
    }
 else {
      info.setFileNameWithoutExtension(fileNameWithoutExtension,extension);
    }
    info.hash=JDOMUtil.getTreeHash(element,true);
    info.schemeName=scheme.getName();
    T s=(T)scheme;
    if (duringLoad) {
      mySchemes.add(s);
    }
 else {
      addScheme(s);
    }
    if (result != null) {
      result.put(scheme.getName(),scheme);
    }
    return scheme;
  }
 catch (  Exception e) {
    LOG.error("Cannot read scheme " + fileName,e);
  }
  return null;
}
