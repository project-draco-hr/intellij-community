{
  int toReplace=-1;
  for (int i=0; i < mySchemes.size(); i++) {
    T existingScheme=mySchemes.get(i);
    if (existingScheme.getName().equals(scheme.getName())) {
      toReplace=i;
      if (replaceExisting && existingScheme instanceof ExternalizableScheme && scheme instanceof ExternalizableScheme) {
        ExternalInfo newInfo=mySchemeToInfo.get((ExternalizableScheme)existingScheme);
        if (newInfo == null || newInfo.getCurrentFileName() == null) {
          ExternalInfo oldInfo=mySchemeToInfo.get((ExternalizableScheme)existingScheme);
          if (oldInfo != null) {
            getExternalInfo((ExternalizableScheme)scheme).setCurrentFileName(oldInfo.getCurrentFileName());
          }
        }
      }
      break;
    }
  }
  if (toReplace == -1) {
    mySchemes.add(scheme);
  }
 else   if (replaceExisting || !(scheme instanceof ExternalizableScheme)) {
    mySchemes.set(toReplace,scheme);
  }
 else {
    renameScheme((ExternalizableScheme)scheme,UniqueNameGenerator.generateUniqueName(scheme.getName(),collectExistingNames(mySchemes)));
    mySchemes.add(scheme);
  }
  schemeAdded(scheme);
  checkCurrentScheme(scheme);
}
