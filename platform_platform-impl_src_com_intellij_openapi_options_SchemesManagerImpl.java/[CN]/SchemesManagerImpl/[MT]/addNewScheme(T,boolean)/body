{
  int toReplace=-1;
  for (int i=0; i < mySchemes.size(); i++) {
    T existing=mySchemes.get(i);
    if (existing.getName().equals(scheme.getName())) {
      if (!Comparing.equal(existing.getClass(),scheme.getClass())) {
        LOG.warn("'" + scheme.getName() + "' "+ existing.getClass().getSimpleName()+ " replaced with "+ scheme.getClass().getSimpleName());
      }
      toReplace=i;
      if (replaceExisting && existing instanceof ExternalizableScheme) {
        ExternalInfo oldInfo=schemeToInfo.remove((ExternalizableScheme)existing);
        if (oldInfo != null && scheme instanceof ExternalizableScheme) {
          ExternalInfo newInfo=schemeToInfo.get((ExternalizableScheme)scheme);
          if (newInfo == null) {
            schemeToInfo.put((ExternalizableScheme)scheme,oldInfo);
          }
        }
      }
      break;
    }
  }
  if (toReplace == -1) {
    mySchemes.add(scheme);
  }
 else   if (replaceExisting || !(scheme instanceof ExternalizableScheme)) {
    mySchemes.set(toReplace,scheme);
  }
 else {
    renameScheme((ExternalizableScheme)scheme,UniqueNameGenerator.generateUniqueName(scheme.getName(),collectExistingNames(mySchemes)));
    mySchemes.add(scheme);
  }
  schemeAdded(scheme);
}
