{
  myPatchSpec.setStrict(true);
  new File(myOlderDir,"delete").mkdirs();
  FileUtil.writeToFile(new File(myOlderDir,"delete/deleteme.txt"),"bye!");
  Patch patch=PatchFileCreator.create(myPatchSpec,myFile,TEST_UI);
  new File(myOlderDir,"unexpected_newdir").mkdirs();
  FileUtil.writeToFile(new File(myOlderDir,"unexpected_newdir/unexpected.txt"),"bye!");
  new File(myOlderDir,"newDir").mkdir();
  PatchFileCreator.PreparationResult preparationResult=PatchFileCreator.prepareAndValidate(myFile,myOlderDir,TEST_UI);
  assertEquals(3,preparationResult.validationResults.size());
  assertEquals(new ValidationResult(ValidationResult.Kind.CONFLICT,"unexpected_newdir/unexpected.txt",ValidationResult.Action.VALIDATE,"Unexpected file",ValidationResult.Option.DELETE),preparationResult.validationResults.get(0));
  assertEquals(new ValidationResult(ValidationResult.Kind.CONFLICT,"unexpected_newdir/",ValidationResult.Action.VALIDATE,"Unexpected file",ValidationResult.Option.DELETE),preparationResult.validationResults.get(1));
  assertEquals(new ValidationResult(ValidationResult.Kind.CONFLICT,"newDir/",ValidationResult.Action.CREATE,ValidationResult.ALREADY_EXISTS_MESSAGE,ValidationResult.Option.REPLACE),preparationResult.validationResults.get(2));
  new File(myOlderDir,"newDir").delete();
  assertAppliedAndRevertedCorrectly(patch,preparationResult);
}
