{
  Map<String,Long> original=patch.digestFiles(myOlderDir,Collections.<String>emptyList(),false,TEST_UI);
  Map<String,Long> target=patch.digestFiles(myNewerDir,Collections.<String>emptyList(),false,TEST_UI);
  File backup=getTempFile("backup");
  HashMap<String,ValidationResult.Option> options=new HashMap<String,ValidationResult.Option>();
  for (  ValidationResult each : preparationResult.validationResults) {
    if (patch.isStrict()) {
      assertFalse(each.options.contains(ValidationResult.Option.NONE));
      assertTrue(each.options.size() > 0);
      options.put(each.path,each.options.get(0));
    }
 else {
      assertTrue(each.toString(),each.kind != ValidationResult.Kind.ERROR);
    }
  }
  List<PatchAction> appliedActions=PatchFileCreator.apply(preparationResult,options,backup,TEST_UI).appliedActions;
  Map<String,Long> patched=patch.digestFiles(myOlderDir,Collections.<String>emptyList(),false,TEST_UI);
  if (patch.isStrict()) {
    assertEquals(patched,target);
  }
 else {
    assertAppliedCorrectly();
  }
  assertNotEquals(original,patched);
  PatchFileCreator.revert(preparationResult,appliedActions,backup,TEST_UI);
  Map<String,Long> reverted=patch.digestFiles(myOlderDir,Collections.<String>emptyList(),false,TEST_UI);
  assertEquals(original,reverted);
}
