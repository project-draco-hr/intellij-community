{
  if (resultQualifiedClassName == null || ChainCompletionStringUtil.isPrimitiveOrArrayOfPrimitives(resultQualifiedClassName) || completionContext.getTarget().equals(resultQualifiedClassName)) {
    return Collections.emptyList();
  }
  final TreeSet<UsageIndexValue> indexValues=myIndexReader.getMethods(resultQualifiedClassName);
  if (!indexValues.isEmpty()) {
    int occurrences=0;
    final List<ContextRelevantStaticMethod> relevantMethods=new ArrayList<ContextRelevantStaticMethod>();
    for (    final UsageIndexValue indexValue : extractStaticMethods(indexValues)) {
      final MethodIncompleteSignature methodInvocation=indexValue.getMethodIncompleteSignature();
      final PsiMethod method;
      if (myCachedResolveResults.containsKey(methodInvocation)) {
        method=myCachedResolveResults.get(methodInvocation);
      }
 else {
        final PsiMethod[] methods=completionContext.resolveNotDeprecated(methodInvocation);
        method=MethodChainsSearchUtil.getMethodWithMinNotPrimitiveParameters(methods,Collections.singleton(completionContext.getTarget().getClassQName()));
        myCachedResolveResults.put(methodInvocation,method);
        if (method == null) {
          return Collections.emptyList();
        }
      }
      if (method == null) {
        return Collections.emptyList();
      }
      if (method.hasModifierProperty(PsiModifier.PUBLIC)) {
        if (isMethodValid(method,completionContext,resultQualifiedClassName)) {
          occurrences+=indexValue.getOccurrences();
          if (myResolveScope.contains(method.getContainingFile().getVirtualFile())) {
            relevantMethods.add(new ContextRelevantStaticMethod(method,null));
          }
          if (occurrences >= minOccurrence) {
            return relevantMethods;
          }
        }
      }
    }
  }
  return Collections.emptyList();
}
