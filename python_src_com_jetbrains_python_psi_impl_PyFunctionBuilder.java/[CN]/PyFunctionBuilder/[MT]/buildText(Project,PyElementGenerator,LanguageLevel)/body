{
  StringBuilder builder=new StringBuilder();
  for (  String decorator : myDecorators) {
    final StringBuilder decoratorAppender=builder.append('@' + decorator);
    if (myDecoratorValues.containsKey(decorator)) {
      final PyCallExpression fakeCall=generator.createCallExpression(languageLevel,"fakeFunction");
      fakeCall.getArgumentList().addArgument(generator.createStringLiteralFromString(myDecoratorValues.get(decorator)));
      decoratorAppender.append(fakeCall.getArgumentList().getText());
    }
    decoratorAppender.append("\n");
  }
  builder.append("def ");
  builder.append(myName).append("(");
  builder.append(StringUtil.join(myParameters,", "));
  builder.append(")");
  if (myAnnotation != null) {
    builder.append(myAnnotation);
  }
  builder.append(":");
  List<String> statements=myStatements.isEmpty() ? Collections.singletonList(PyNames.PASS) : myStatements;
  final String indent=PyIndentUtil.getIndentFromSettings(project);
  myDocStringGenerator.setDocStringIndent(indent);
  if (!myDocStringGenerator.isNewMode() || myDocStringGenerator.hasParametersToAdd()) {
    final String docstring=PyIndentUtil.changeIndent(myDocStringGenerator.buildDocString(),true,indent);
    builder.append('\n').append(indent).append(docstring);
  }
  for (  String statement : statements) {
    builder.append('\n').append(indent).append(statement);
  }
  return builder.toString();
}
