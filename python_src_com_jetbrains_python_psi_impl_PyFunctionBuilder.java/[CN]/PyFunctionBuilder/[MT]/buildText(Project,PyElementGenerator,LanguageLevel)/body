{
  StringBuilder builder=new StringBuilder();
  for (  String decorator : myDecorators) {
    final StringBuilder decoratorAppender=builder.append('@' + decorator);
    if (myDecoratorValues.containsKey(decorator)) {
      final PyCallExpression fakeCall=generator.createCallExpression(languageLevel,"fakeFunction");
      fakeCall.getArgumentList().addArgument(generator.createStringLiteralFromString(myDecoratorValues.get(decorator)));
      decoratorAppender.append(fakeCall.getArgumentList().getText());
    }
    decoratorAppender.append("\n");
  }
  builder.append("def ");
  builder.append(myName).append("(");
  builder.append(StringUtil.join(myParameters,", "));
  builder.append(")");
  if (myAnnotation != null) {
    builder.append(myAnnotation);
  }
  builder.append(":");
  List<String> statements=myStatements.isEmpty() ? Collections.singletonList(PyNames.PASS) : myStatements;
  if (myDocStringLines != null) {
    final List<String> comments=new ArrayList<String>(myDocStringLines.length + 2);
    comments.add(COMMENTS_BOUNDARY);
    comments.addAll(Arrays.asList(myDocStringLines));
    comments.add(COMMENTS_BOUNDARY);
    statements=new ArrayList<String>(statements);
    statements.addAll(0,comments);
  }
  final CodeStyleSettings codeStyleSettings=CodeStyleSettingsManager.getInstance(project).getCurrentSettings();
  int indentSize=codeStyleSettings.getIndentOptions(PythonFileType.INSTANCE).INDENT_SIZE;
  String indent=StringUtil.repeatSymbol(' ',indentSize);
  for (  String statement : statements) {
    builder.append("\n").append(indent).append(statement);
  }
  return builder.toString();
}
