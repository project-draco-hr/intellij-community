{
  checkModelValidness();
  String text="";
  final int offset=editor.logicalPositionToOffset(position);
  final int length=editor.getDocument().getTextLength();
  final CharSequence elements=editor.getDocument().getCharsSequence();
  int start=offset - 1;
  int end=-1;
  while (start >= 0 && Character.isJavaIdentifierPart(elements.charAt(start)) && elements.charAt(start) != '$')   start--;
  if (start >= 0 && elements.charAt(start) == '$') {
    end=offset;
    while (end < length && Character.isJavaIdentifierPart(elements.charAt(end)) && elements.charAt(end) != '$')     end++;
    if (end < length && elements.charAt(end) == '$') {
      String varname=elements.subSequence(start + 1,end).toString();
      Variable foundVar=null;
      for (Iterator<Variable> i=variables.iterator(); i.hasNext(); ) {
        final Variable var=i.next();
        if (var.getName().equals(varname)) {
          foundVar=var;
          break;
        }
      }
      if (foundVar != null) {
        text=UIUtil.getShortParamString(editor.getUserData(CURRENT_CONFIGURATION_KEY),varname);
      }
    }
  }
  if (text.length() > 0) {
    Rectangle visibleArea=editor.getScrollingModel().getVisibleArea();
    Point top=editor.logicalPositionToXY(editor.offsetToLogicalPosition(start));
    Point bottom=editor.logicalPositionToXY(editor.offsetToLogicalPosition(end));
    Point bestPoint=new Point(top.x,bottom.y + editor.getLineHeight());
    if (!visibleArea.contains(bestPoint)) {
      int defaultOffset=editor.logicalPositionToOffset(editor.xyToLogicalPosition(new Point(0,0)));
      bestPoint=editor.logicalPositionToXY(editor.offsetToLogicalPosition(defaultOffset));
    }
    Point p=SwingUtilities.convertPoint(editor.getContentComponent(),bestPoint,editor.getComponent().getRootPane().getLayeredPane());
    HintManager.getInstance().getTooltipController().showTooltip(editor,p,text,false,SS_INFO_TOOLTIP_GROUP);
  }
}
