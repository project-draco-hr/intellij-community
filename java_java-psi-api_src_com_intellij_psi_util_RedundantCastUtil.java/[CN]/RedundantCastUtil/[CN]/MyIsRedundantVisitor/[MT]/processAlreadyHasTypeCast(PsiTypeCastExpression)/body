{
  PsiElement parent=typeCast.getParent();
  while (parent instanceof PsiParenthesizedExpression)   parent=parent.getParent();
  if (parent instanceof PsiExpressionList)   return;
  if (parent instanceof PsiReturnStatement)   return;
  if (parent instanceof PsiTypeCastExpression)   return;
  if (isTypeCastSemantic(typeCast))   return;
  PsiTypeElement typeElement=typeCast.getCastType();
  if (typeElement == null)   return;
  final PsiType castTo=typeElement.getType();
  final PsiExpression operand=typeCast.getOperand();
  PsiType opType=operand.getType();
  final PsiType expectedTypeByParent=PsiTypesUtil.getExpectedTypeByParent(typeCast);
  if (expectedTypeByParent != null) {
    try {
      final Project project=operand.getProject();
      final String uniqueVariableName=JavaCodeStyleManager.getInstance(project).suggestUniqueVariableName("l",parent,false);
      final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)JavaPsiFacade.getElementFactory(project).createStatementFromText(expectedTypeByParent.getCanonicalText() + " " + uniqueVariableName+ " = "+ operand.getText()+ ";",parent);
      final PsiExpression initializer=((PsiLocalVariable)declarationStatement.getDeclaredElements()[0]).getInitializer();
      LOG.assertTrue(initializer != null,operand.getText());
      opType=initializer.getType();
    }
 catch (    IncorrectOperationException ignore) {
    }
  }
  if (opType == null)   return;
  if (parent instanceof PsiReferenceExpression) {
    if (castTo instanceof PsiClassType && opType instanceof PsiPrimitiveType)     return;
    if (opType instanceof PsiClassType) {
      final PsiReferenceExpression refExpression=(PsiReferenceExpression)parent;
      PsiElement element=refExpression.resolve();
      if (!(element instanceof PsiMember))       return;
      PsiClass accessClass=((PsiClassType)opType).resolve();
      if (accessClass == null)       return;
      if (!JavaPsiFacade.getInstance(parent.getProject()).getResolveHelper().isAccessible((PsiMember)element,typeCast,accessClass))       return;
      if (!isCastRedundantInRefExpression(refExpression,operand))       return;
    }
  }
  if (arrayAccessAtTheLeftSideOfAssignment(parent)) {
    if (TypeConversionUtil.isAssignable(opType,castTo,false) && opType.getArrayDimensions() == castTo.getArrayDimensions()) {
      addToResults(typeCast);
    }
  }
 else {
    if (parent instanceof PsiInstanceOfExpression && opType instanceof PsiPrimitiveType) {
      return;
    }
    if (parent instanceof PsiForeachStatement) {
      if (InheritanceUtil.isInheritor(PsiUtil.resolveClassInType(opType),false,CommonClassNames.JAVA_LANG_ITERABLE)) {
        addToResults(typeCast);
        return;
      }
    }
    if (parent instanceof PsiThrowStatement) {
      final PsiClass thrownClass=PsiUtil.resolveClassInType(opType);
      if (InheritanceUtil.isInheritor(thrownClass,false,CommonClassNames.JAVA_LANG_RUNTIME_EXCEPTION)) {
        addToResults(typeCast);
        return;
      }
      if (InheritanceUtil.isInheritor(thrownClass,false,CommonClassNames.JAVA_LANG_THROWABLE)) {
        final PsiMethod method=PsiTreeUtil.getParentOfType(parent,PsiMethod.class);
        if (method != null) {
          for (          PsiClassType thrownType : method.getThrowsList().getReferencedTypes()) {
            if (TypeConversionUtil.isAssignable(thrownType,opType,false)) {
              addToResults(typeCast);
              return;
            }
          }
        }
      }
    }
    if (parent instanceof PsiInstanceOfExpression || (TypeConversionUtil.isAssignable(castTo,opType,false) && (expectedTypeByParent == null || TypeConversionUtil.isAssignable(expectedTypeByParent,opType,false)))) {
      addToResults(typeCast);
    }
  }
}
