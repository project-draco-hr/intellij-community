{
  PsiElement parent=typeCast.getParent();
  while (parent instanceof PsiParenthesizedExpression)   parent=parent.getParent();
  if (parent instanceof PsiExpressionList)   return;
  if (parent instanceof PsiReturnStatement)   return;
  if (parent instanceof PsiTypeCastExpression)   return;
  if (isTypeCastSemantic(typeCast))   return;
  PsiTypeElement typeElement=typeCast.getCastType();
  if (typeElement == null)   return;
  final PsiType castTo=typeElement.getType();
  final PsiExpression operand=typeCast.getOperand();
  PsiType opType=operand.getType();
  final PsiType expectedTypeByParent=PsiTypesUtil.getExpectedTypeByParent(typeCast);
  if (expectedTypeByParent != null) {
    final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)JavaPsiFacade.getElementFactory(operand.getProject()).createStatementFromText(expectedTypeByParent.getCanonicalText() + " l = " + operand.getText()+ ";",parent);
    final PsiExpression initializer=((PsiLocalVariable)declarationStatement.getDeclaredElements()[0]).getInitializer();
    LOG.assertTrue(initializer != null,operand.getText());
    opType=initializer.getType();
  }
  if (opType == null)   return;
  if (parent instanceof PsiReferenceExpression) {
    if (castTo instanceof PsiClassType && opType instanceof PsiPrimitiveType)     return;
    if (opType instanceof PsiClassType) {
      final PsiReferenceExpression refExpression=(PsiReferenceExpression)parent;
      PsiElement element=refExpression.resolve();
      if (!(element instanceof PsiMember))       return;
      PsiClass accessClass=((PsiClassType)opType).resolve();
      if (accessClass == null)       return;
      if (!JavaPsiFacade.getInstance(parent.getProject()).getResolveHelper().isAccessible((PsiMember)element,typeCast,accessClass))       return;
      if (!isCastRedundantInRefExpression(refExpression,operand))       return;
    }
  }
  if (arrayAccessAtTheLeftSideOfAssignment(parent)) {
    if (TypeConversionUtil.isAssignable(opType,castTo,false) && opType.getArrayDimensions() == castTo.getArrayDimensions()) {
      addToResults(typeCast);
    }
  }
 else {
    if (parent instanceof PsiInstanceOfExpression && opType instanceof PsiPrimitiveType) {
      return;
    }
    if (parent instanceof PsiInstanceOfExpression || TypeConversionUtil.isAssignable(castTo,opType,false)) {
      addToResults(typeCast);
    }
  }
}
