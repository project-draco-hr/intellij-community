{
  PsiExpression operand=typeCast.getOperand();
  if (operand == null)   return;
  PsiElement expr=deparenthesizeExpression(operand);
  final PsiType topCastType=typeCast.getType();
  if (expr instanceof PsiTypeCastExpression) {
    PsiTypeElement typeElement=((PsiTypeCastExpression)expr).getCastType();
    if (typeElement == null)     return;
    PsiType castType=typeElement.getType();
    final PsiExpression innerOperand=((PsiTypeCastExpression)expr).getOperand();
    final PsiType operandType=innerOperand != null ? innerOperand.getType() : null;
    if (!(castType instanceof PsiPrimitiveType) && !(topCastType instanceof PsiPrimitiveType)) {
      if (operandType != null && topCastType != null && TypeConversionUtil.areTypesConvertible(operandType,topCastType)) {
        addToResults((PsiTypeCastExpression)expr);
      }
    }
 else     if (Comparing.equal(PsiPrimitiveType.getUnboxedType(operandType),topCastType)) {
      addToResults((PsiTypeCastExpression)expr);
    }
  }
 else {
    PsiElement parent=typeCast.getParent();
    if (parent instanceof PsiConditionalExpression) {
      final PsiType operandType=operand.getType();
      final PsiType conditionalType=((PsiConditionalExpression)parent).getType();
      if (!Comparing.equal(operandType,conditionalType)) {
        if (!PsiUtil.isLanguageLevel5OrHigher(typeCast)) {
          return;
        }
        if (!checkResolveAfterRemoveCast(parent))         return;
        final PsiExpression thenExpression=((PsiConditionalExpression)parent).getThenExpression();
        final PsiExpression elseExpression=((PsiConditionalExpression)parent).getElseExpression();
        final PsiExpression opposite=thenExpression == typeCast ? elseExpression : thenExpression;
        if (opposite == null || conditionalType instanceof PsiPrimitiveType && !Comparing.equal(conditionalType,opposite.getType()))         return;
      }
    }
 else     if (parent instanceof PsiSynchronizedStatement && (expr instanceof PsiExpression && ((PsiExpression)expr).getType() instanceof PsiPrimitiveType)) {
      return;
    }
 else     if (expr instanceof PsiLambdaExpression || expr instanceof PsiMethodReferenceExpression) {
      if (parent instanceof PsiParenthesizedExpression && parent.getParent() instanceof PsiReferenceExpression) {
        return;
      }
      final PsiType functionalInterfaceType=PsiTypesUtil.getExpectedTypeByParent(typeCast);
      if (topCastType != null && functionalInterfaceType != null && !TypeConversionUtil.isAssignable(topCastType,functionalInterfaceType,false))       return;
    }
    processAlreadyHasTypeCast(typeCast);
  }
  super.visitTypeCastExpression(typeCast);
}
