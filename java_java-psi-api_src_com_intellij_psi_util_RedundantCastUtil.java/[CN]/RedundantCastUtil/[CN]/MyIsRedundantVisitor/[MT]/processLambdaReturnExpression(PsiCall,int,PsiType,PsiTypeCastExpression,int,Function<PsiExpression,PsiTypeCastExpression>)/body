{
  final PsiCall newCall=(PsiCall)expression.copy();
  final PsiExpressionList newArgsList=newCall.getArgumentList();
  LOG.assertTrue(newArgsList != null);
  final PsiExpression[] newArgs=newArgsList.getExpressions();
  final PsiLambdaExpression lambdaExpression=(PsiLambdaExpression)deparenthesizeExpression(newArgs[i]);
  LOG.assertTrue(lambdaExpression != null,newCall);
  final PsiExpression newReturnExpression=deparenthesizeExpression(LambdaUtil.getReturnExpressions(lambdaExpression).get(returnExprIdx));
  PsiTypeCastExpression castExpression=computeCastExpression.fun(newReturnExpression);
  PsiExpression castOperand=castExpression.getOperand();
  if (castOperand == null)   return;
  castOperand=(PsiExpression)castExpression.replace(castOperand);
  final PsiType functionalInterfaceType=lambdaExpression.getFunctionalInterfaceType();
  if (interfaceType.equals(functionalInterfaceType)) {
    final PsiType interfaceReturnType=LambdaUtil.getFunctionalInterfaceReturnType(interfaceType);
    final PsiType castExprType=castOperand.getType();
    if (interfaceReturnType != null && castExprType != null && interfaceReturnType.isAssignableFrom(castExprType)) {
      addToResults(returnExpression);
    }
  }
}
