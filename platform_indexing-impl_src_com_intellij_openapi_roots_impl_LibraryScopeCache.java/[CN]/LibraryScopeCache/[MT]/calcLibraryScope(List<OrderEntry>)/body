{
  List<Module> modulesLibraryUsedIn=new ArrayList<Module>();
  LibraryOrderEntry lib=null;
  for (  OrderEntry entry : orderEntries) {
    if (entry instanceof JdkOrderEntry) {
      return getScopeForSdk((JdkOrderEntry)entry);
    }
    if (entry instanceof LibraryOrderEntry) {
      lib=(LibraryOrderEntry)entry;
      modulesLibraryUsedIn.add(entry.getOwnerModule());
    }
 else     if (entry instanceof ModuleOrderEntry) {
      modulesLibraryUsedIn.add(entry.getOwnerModule());
    }
  }
  Comparator<Module> comparator=new Comparator<Module>(){
    @Override public int compare(    @NotNull Module o1,    @NotNull Module o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
;
  Collections.sort(modulesLibraryUsedIn,comparator);
  List<Module> uniquesList=ContainerUtil.removeDuplicatesFromSorted(modulesLibraryUsedIn,comparator);
  Module[] uniques=uniquesList.toArray(new Module[uniquesList.size()]);
  GlobalSearchScope allCandidates=getScopeForLibraryUsedIn(uniques);
  if (lib != null) {
    final LibraryRuntimeClasspathScope preferred=new LibraryRuntimeClasspathScope(myProject,lib);
    return new DelegatingGlobalSearchScope(allCandidates,preferred){
      @Override public int compare(      @NotNull VirtualFile file1,      @NotNull VirtualFile file2){
        boolean c1=preferred.contains(file1);
        boolean c2=preferred.contains(file2);
        if (c1 && !c2)         return 1;
        if (c2 && !c1)         return -1;
        return super.compare(file1,file2);
      }
    }
;
  }
  return allCandidates;
}
