{
  final SvnFileAnnotation annotation=new SvnFileAnnotation(myVcs,vcsAnnotation.getFilePath().getVirtualFile(),annotatedContent,revisionNumber);
  final VcsLineAnnotationData basicAnnotation=vcsAnnotation.getBasicAnnotation();
  final VcsLineAnnotationData data=vcsAnnotation.getAdditionalAnnotations().get(MERGED_KEY);
  final Map<VcsRevisionNumber,VcsFileRevision> historyAsMap=session.getHistoryAsMap();
  final Map<VcsRevisionNumber,VcsFileRevision> cachedOtherRevisions=vcsAnnotation.getCachedOtherRevisions();
  for (int i=0; i < basicAnnotation.getNumLines(); i++) {
    final VcsRevisionNumber revision=basicAnnotation.getRevision(i);
    final VcsRevisionNumber mergedData=data == null ? null : data.getRevision(i);
    final SvnFileRevision fileRevision=(SvnFileRevision)historyAsMap.get(revision);
    if (fileRevision == null)     return null;
    if (mergedData == null) {
      annotation.setLineInfo(i,fileRevision.getCommitInfo(),null);
    }
 else {
      final SvnFileRevision mergedRevision=(SvnFileRevision)cachedOtherRevisions.get(mergedData);
      if (mergedRevision == null)       return null;
      annotation.setLineInfo(i,fileRevision.getCommitInfo(),mergedRevision.getCommitInfo());
    }
  }
  if (vcsAnnotation.getFirstRevision() != null) {
    annotation.setFirstRevision(((SvnRevisionNumber)vcsAnnotation.getFirstRevision()).getRevision());
  }
  for (  VcsFileRevision revision : session.getRevisionList()) {
    annotation.setRevision(((SvnRevisionNumber)revision.getRevisionNumber()).getRevision().getNumber(),(SvnFileRevision)revision);
  }
  return annotation;
}
