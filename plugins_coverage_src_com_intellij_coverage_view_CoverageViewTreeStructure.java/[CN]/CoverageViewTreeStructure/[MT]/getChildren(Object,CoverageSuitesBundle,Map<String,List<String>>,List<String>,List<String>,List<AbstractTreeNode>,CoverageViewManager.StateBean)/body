{
  List<AbstractTreeNode> children=new ArrayList<AbstractTreeNode>();
  if (element instanceof CoverageListNode) {
    Object val=((CoverageListNode)element).getValue();
    if (val instanceof PsiClass)     return ArrayUtil.EMPTY_OBJECT_ARRAY;
    if (val instanceof PsiPackage) {
      final String qualifiedName=((PsiPackage)val).getQualifiedName();
      if (stateBean.myFlattenPackages) {
        if (StringUtil.isEmpty(qualifiedName)) {
          for (          AbstractTreeNode topLevelPackageNode : topLevelPackages) {
            children.add(topLevelPackageNode);
          }
        }
      }
 else {
        final GlobalSearchScope searchScope=GlobalSearchScope.projectScope(((PsiPackage)val).getProject());
        final PsiPackage[] subPackages=((PsiPackage)val).getSubPackages(searchScope);
        for (        PsiPackage aPackage : subPackages) {
          final PsiDirectory[] directories=aPackage.getDirectories(searchScope);
          if (directories.length == 0)           continue;
          if (packages.containsKey(aPackage.getQualifiedName())) {
            children.add(new CoverageListNode(aPackage,bundle,packages,topLevelPackages,stateBean,filteredPackages,filteredClasses));
          }
        }
      }
      boolean found=false;
      for (      String packageName : filteredPackages) {
        if (qualifiedName.startsWith(packageName + ".")) {
          final PsiClass[] classes=((PsiPackage)val).getClasses();
          for (          PsiClass aClass : classes) {
            children.add(new CoverageListNode(aClass,bundle,packages,topLevelPackages,stateBean,filteredPackages,filteredClasses));
          }
          found=true;
          break;
        }
      }
      if (!found && !filteredClasses.isEmpty()) {
        final PsiClass[] classes=((PsiPackage)val).getClasses();
        for (        PsiClass aClass : classes) {
          if (filteredClasses.contains(aClass.getQualifiedName())) {
            children.add(new CoverageListNode(aClass,bundle,packages,topLevelPackages,stateBean,filteredPackages,filteredClasses));
          }
        }
      }
    }
    for (    AbstractTreeNode node : children) {
      node.setParent((AbstractTreeNode)element);
    }
  }
  return children.toArray(new CoverageListNode[children.size()]);
}
