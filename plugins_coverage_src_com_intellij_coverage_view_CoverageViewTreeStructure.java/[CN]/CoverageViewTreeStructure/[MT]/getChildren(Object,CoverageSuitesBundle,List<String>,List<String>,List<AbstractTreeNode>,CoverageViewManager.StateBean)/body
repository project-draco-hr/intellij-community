{
  List<AbstractTreeNode> children=new ArrayList<AbstractTreeNode>();
  if (element instanceof CoverageListNode) {
    Object val=((CoverageListNode)element).getValue();
    if (val instanceof PsiClass)     return ArrayUtil.EMPTY_OBJECT_ARRAY;
    if (val instanceof PsiPackage) {
      final String qualifiedName=((PsiPackage)val).getQualifiedName();
      boolean found=contains(qualifiedName,filteredPackages);
      if (stateBean.myFlattenPackages) {
        if (StringUtil.isEmpty(qualifiedName)) {
          for (          AbstractTreeNode topLevelPackageNode : topLevelPackages) {
            children.add(topLevelPackageNode);
          }
        }
      }
 else {
        collectSubPackages(children,(PsiPackage)val,bundle,topLevelPackages,stateBean,filteredPackages,filteredClasses,false);
      }
      if (found) {
        final PsiClass[] classes=((PsiPackage)val).getClasses();
        for (        PsiClass aClass : classes) {
          children.add(new CoverageListNode(aClass,bundle,topLevelPackages,stateBean,filteredPackages,filteredClasses));
        }
      }
      if (!found && !filteredClasses.isEmpty()) {
        final PsiClass[] classes=((PsiPackage)val).getClasses();
        for (        PsiClass aClass : classes) {
          if (filteredClasses.contains(aClass.getQualifiedName())) {
            children.add(new CoverageListNode(aClass,bundle,topLevelPackages,stateBean,filteredPackages,filteredClasses));
          }
        }
      }
    }
    for (    AbstractTreeNode node : children) {
      node.setParent((AbstractTreeNode)element);
    }
  }
  return children.toArray(new CoverageListNode[children.size()]);
}
