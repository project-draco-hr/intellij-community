{
  List<AbstractTreeNode> children=new ArrayList<AbstractTreeNode>();
  if (element instanceof CoverageListNode) {
    Object val=((CoverageListNode)element).getValue();
    if (val instanceof PsiClass)     return ArrayUtil.EMPTY_OBJECT_ARRAY;
    final ProjectData data=bundle.getCoverageData();
    if (val instanceof PsiPackage) {
      if (stateBean.myFlattenPackages) {
        if (StringUtil.isEmpty(((PsiPackage)val).getQualifiedName())) {
          for (          AbstractTreeNode topLevelPackageNode : topLevelPackages) {
            children.add(topLevelPackageNode);
          }
        }
      }
 else {
        final PsiPackage[] subPackages=((PsiPackage)val).getSubPackages();
        for (        PsiPackage aPackage : subPackages) {
          final PsiDirectory[] directories=aPackage.getDirectories(GlobalSearchScope.projectScope(aPackage.getProject()));
          if (directories.length == 0)           continue;
          if (packages.containsKey(aPackage.getQualifiedName())) {
            children.add(new CoverageListNode(aPackage,bundle,packages,topLevelPackages,stateBean));
          }
        }
      }
      final PsiClass[] classes=((PsiPackage)val).getClasses();
      for (      PsiClass aClass : classes) {
        final ClassData classData=data.getClassData(aClass.getQualifiedName());
        if (classData != null) {
          final CoverageListNode treeNode=new CoverageListNode(aClass,bundle,packages,topLevelPackages,stateBean);
          children.add(treeNode);
        }
      }
    }
    for (    AbstractTreeNode node : children) {
      node.setParent((AbstractTreeNode)element);
    }
  }
  return children.toArray(new CoverageListNode[children.size()]);
}
