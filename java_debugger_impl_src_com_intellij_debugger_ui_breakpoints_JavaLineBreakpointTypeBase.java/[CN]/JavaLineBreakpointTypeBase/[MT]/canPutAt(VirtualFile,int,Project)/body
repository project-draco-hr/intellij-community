{
  PsiFile psiFile=PsiManager.getInstance(project).findFile(file);
  if (psiFile == null || psiFile.getVirtualFile().getFileType() == StdFileTypes.XHTML) {
    return false;
  }
  FileType fileType=psiFile.getFileType();
  if (!StdFileTypes.CLASS.equals(fileType) && !DebuggerUtils.supportsJVMDebugging(fileType) && !DebuggerUtils.supportsJVMDebugging(psiFile)) {
    return false;
  }
  final Document document=FileDocumentManager.getInstance().getDocument(file);
  final Ref<Class<? extends JavaLineBreakpointTypeBase>> result=Ref.create();
  XDebuggerUtil.getInstance().iterateLine(project,document,line,new Processor<PsiElement>(){
    @Override public boolean process(    PsiElement element){
      if ((element instanceof PsiWhiteSpace) || (PsiTreeUtil.getParentOfType(element,PsiComment.class,false) != null)) {
        return true;
      }
      PsiField field=PsiTreeUtil.getParentOfType(element,PsiField.class,false);
      if (field != null) {
        result.set(JavaFieldBreakpointType.class);
        return false;
      }
      PsiMethod method=PsiTreeUtil.getParentOfType(element,PsiMethod.class,false);
      if (method != null && document.getLineNumber(method.getTextOffset()) == line) {
        result.set(JavaMethodBreakpointType.class);
        return false;
      }
      PsiElement child=element;
      while (element != null) {
        final int offset=element.getTextOffset();
        if (offset >= 0) {
          if (document.getLineNumber(offset) != line) {
            break;
          }
        }
        child=element;
        element=element.getParent();
      }
      if (child instanceof PsiMethod && child.getTextRange().getEndOffset() >= document.getLineEndOffset(line)) {
        PsiCodeBlock body=((PsiMethod)child).getBody();
        if (body != null) {
          PsiStatement[] statements=body.getStatements();
          if (statements.length > 0 && document.getLineNumber(statements[0].getTextOffset()) == line) {
            result.set(JavaLineBreakpointType.class);
          }
        }
      }
 else {
        result.set(JavaLineBreakpointType.class);
      }
      return true;
    }
  }
);
  return result.get() == getClass();
}
