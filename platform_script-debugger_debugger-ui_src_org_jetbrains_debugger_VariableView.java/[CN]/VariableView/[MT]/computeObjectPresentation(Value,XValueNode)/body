{
  JSDebuggerSettings.CustomObjectPresentationState presentationState=JSDebuggerSettings.getInstance().getState().getObjectPresentation();
  final ObjectValue object=presentationState.isEnabled() ? value.asObject() : null;
  final List<String> propertiesToShow=presentationState.getPropertiesToShow();
  if (object != null && value.getType() == ValueType.NODE) {
    final String string=value.getValueString();
    node.setPresentation(getIcon(),new XValuePresentation(){
      @Override public void renderValue(      @NotNull XValueTextRenderer renderer){
        int index=string.indexOf('#');
        if (index > 0) {
          renderer.renderComment(string.substring(0,index));
          renderer.renderValue(string.substring(index),CssHighlighter.CSS_IDENT);
        }
 else {
          renderer.renderComment(string);
        }
      }
    }
,true);
    return;
  }
  if (object == null || propertiesToShow.isEmpty()) {
    setObjectPresentation(node,value);
    return;
  }
  ObsolescentAsyncResults.consume(object.getProperties(),node,new PairConsumer<ObjectPropertyData,XValueNode>(){
    @Override public void consume(    ObjectPropertyData data,    final XValueNode node){
      final ArrayList<ObjectProperty> properties=new ArrayList<ObjectProperty>(propertiesToShow.size());
      int getterCount=0;
      for (      ObjectProperty property : data.getProperties()) {
        if (!property.isReadable() || !propertiesToShow.contains(property.getName())) {
          continue;
        }
        properties.add(property);
        if (property.getValue() == null) {
          getterCount++;
        }
      }
      Collections.sort(properties,new Comparator<Variable>(){
        @Override public int compare(        Variable o1,        Variable o2){
          return propertiesToShow.indexOf(o1.getName()) - propertiesToShow.indexOf(o2.getName());
        }
      }
);
      if (getterCount > 0) {
        ActionCallback callback=new ActionCallback(getterCount);
        for (        ObjectProperty variable : properties) {
          if (variable.getValue() == null) {
            variable.evaluateGet(context.getEvaluateContext()).notify(callback);
          }
        }
        callback.doWhenDone(new Runnable(){
          @Override public void run(){
            if (!node.isObsolete()) {
              node.setPresentation(getIcon(),new CustomPropertiesValuePresentation(value,properties),true);
            }
          }
        }
);
      }
 else       if (!node.isObsolete()) {
        if (properties.isEmpty()) {
          setObjectPresentation(node,value);
        }
 else {
          node.setPresentation(getIcon(),new CustomPropertiesValuePresentation(value,properties),true);
        }
      }
    }
  }
);
}
