{
  node.setAlreadySorted(true);
  List<Variable> list=remainingChildren;
  if (list != null) {
    int to=Math.min(remainingChildrenOffset + XCompositeNode.MAX_CHILDREN_TO_SHOW,list.size());
    boolean isLast=to == list.size();
    node.addChildren(Variables.createVariablesList(list,remainingChildrenOffset,to,this),isLast);
    if (!isLast) {
      node.tooManyChildren(list.size() - to);
      remainingChildrenOffset+=XCompositeNode.MAX_CHILDREN_TO_SHOW;
    }
    return;
  }
  boolean hasNamedProperties=value instanceof ObjectValue && ((ObjectValue)value).hasProperties() != ThreeState.NO;
  boolean hasIndexedProperties=value instanceof ArrayValue;
  ActionCallback.Chunk chunk=new ActionCallback.Chunk();
  if (hasIndexedProperties) {
    chunk.add(computeIndexedProperties((ArrayValue)value,node,!hasNamedProperties));
  }
  if (hasNamedProperties) {
    chunk.add(computeNamedProperties((ObjectValue)value,node,!hasIndexedProperties));
  }
  if (hasIndexedProperties == hasNamedProperties) {
    chunk.create().doWhenProcessed(new Runnable(){
      @Override public void run(){
        if (!node.isObsolete()) {
          node.addChildren(XValueChildrenList.EMPTY,true);
        }
      }
    }
);
  }
}
