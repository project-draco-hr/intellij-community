{
  node.setAlreadySorted(true);
  if (!(value instanceof ObjectValue) || ((ObjectValue)value).hasProperties() == ThreeState.NO) {
    node.addChildren(XValueChildrenList.EMPTY,true);
    return;
  }
  ObsolescentAsyncResults.consume(((ObjectValue)value).getProperties(),node,new PairConsumer<List<? extends Variable>,XCompositeNode>(){
    @Override public void consume(    List<? extends Variable> variables,    XCompositeNode node){
      if (value instanceof ArrayValue) {
        return;
      }
      if (value.getType() == ValueType.ARRAY) {
        computeArrayRanges(variables,node);
        return;
      }
      int maxPropertiesToShow;
      if (value.getType() == ValueType.FUNCTION) {
        maxPropertiesToShow=Integer.MAX_VALUE;
      }
 else {
        maxPropertiesToShow=XCompositeNode.MAX_CHILDREN_TO_SHOW;
        List<Variable> list=remainingChildren;
        if (list != null && childrenModificationStamp == ((ObjectValue)value).getCacheState()) {
          int to=Math.min(remainingChildrenOffset + XCompositeNode.MAX_CHILDREN_TO_SHOW,list.size());
          boolean isLast=to == list.size();
          node.addChildren(Variables.createVariablesList(list,remainingChildrenOffset,to,VariableView.this),isLast);
          if (!isLast) {
            node.tooManyChildren(list.size() - to);
            remainingChildrenOffset+=XCompositeNode.MAX_CHILDREN_TO_SHOW;
          }
          return;
        }
      }
      remainingChildren=Variables.sortFilterAndAddValueList(variables,node,VariableView.this,maxPropertiesToShow,value.getType() != ValueType.FUNCTION);
      if (remainingChildren != null) {
        remainingChildrenOffset=maxPropertiesToShow;
        childrenModificationStamp=((ObjectValue)value).getCacheState();
      }
      if (value.getType() == ValueType.FUNCTION) {
        node.addChildren(XValueChildrenList.bottomGroup(new FunctionScopesValueGroup((FunctionValue)value,context)),true);
      }
    }
  }
);
  if (value instanceof ArrayValue) {
    ObsolescentAsyncResults.consume(((ArrayValue)value).getVariables(),node,new PairConsumer<List<Variable>,XCompositeNode>(){
      @Override public void consume(      List<Variable> variables,      XCompositeNode node){
        computeIndexedValuesRanges(variables,node);
      }
    }
);
  }
}
