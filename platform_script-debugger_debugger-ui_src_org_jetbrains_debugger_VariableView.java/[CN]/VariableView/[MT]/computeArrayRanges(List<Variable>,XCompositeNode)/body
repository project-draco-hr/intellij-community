{
  final List<Variable> variables=Variables.filterAndSort(properties,memberFilter);
  int count=variables.size();
  int bucketSize=XCompositeNode.MAX_CHILDREN_TO_SHOW;
  if (count <= bucketSize) {
    node.addChildren(Variables.createVariablesList(variables,this,null),true);
    return;
  }
  for (; count > 0; count--) {
    if (Character.isDigit(variables.get(count - 1).getName().charAt(0))) {
      break;
    }
  }
  XValueChildrenList groupList=new XValueChildrenList();
  if (count > 0) {
    LazyVariablesGroup.addGroups(variables,VariablesGroup.GROUP_FACTORY,groupList,0,count,bucketSize,this);
  }
  int notGroupedVariablesOffset;
  if ((variables.size() - count) > bucketSize) {
    for (notGroupedVariablesOffset=variables.size(); notGroupedVariablesOffset > 0; notGroupedVariablesOffset--) {
      if (!variables.get(notGroupedVariablesOffset - 1).getName().startsWith("__")) {
        break;
      }
    }
    if (notGroupedVariablesOffset > 0) {
      LazyVariablesGroup.addGroups(variables,VariablesGroup.GROUP_FACTORY,groupList,count,notGroupedVariablesOffset,bucketSize,this);
    }
  }
 else {
    notGroupedVariablesOffset=count;
  }
  for (int i=notGroupedVariablesOffset; i < variables.size(); i++) {
    Variable variable=variables.get(i);
    groupList.add(new VariableView(memberFilter.getName(variable),variable,this));
  }
  node.addChildren(groupList,true);
}
