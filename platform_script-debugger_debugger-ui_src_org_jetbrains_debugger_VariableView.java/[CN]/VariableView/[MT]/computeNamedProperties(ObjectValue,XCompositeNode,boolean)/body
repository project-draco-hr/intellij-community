{
  return value.getProperties().done(new ValueNodeConsumer<List<Variable>>(node){
    @Override public void consume(    List<Variable> variables){
      if (value.getType() == ValueType.ARRAY && !(value instanceof ArrayValue)) {
        computeArrayRanges(variables,node);
        return;
      }
      FunctionValue functionValue=value instanceof FunctionValue ? (FunctionValue)value : null;
      if (functionValue != null && functionValue.hasScopes() == ThreeState.NO) {
        functionValue=null;
      }
      remainingChildren=Variables.sortFilterAndAddValueList(variables,node,VariableView.this,XCompositeNode.MAX_CHILDREN_TO_SHOW,isLastChildren && functionValue == null);
      if (remainingChildren != null) {
        remainingChildrenOffset=XCompositeNode.MAX_CHILDREN_TO_SHOW;
      }
      if (functionValue != null) {
        node.addChildren(XValueChildrenList.bottomGroup(new FunctionScopesValueGroup(functionValue,context)),isLastChildren);
      }
    }
  }
);
}
