{
  final CheckedTreeNode root=new CheckedTreeNode();
  if (myCompositeRootSettings != null) {
    List<TreeNode> nodes=ContainerUtil.newArrayList();
    for (    GradleProjectSettings projectSettings : GradleSettings.getInstance(myProject).getLinkedProjectsSettings()) {
      if (projectSettings == myCompositeRootSettings)       continue;
      boolean added=myCompositeRootSettings.getCompositeParticipants().contains(projectSettings.getExternalProjectPath());
      String representationName=myExternalSystemUiAware.getProjectRepresentationName(projectSettings.getExternalProjectPath(),projectSettings.getExternalProjectPath());
      CheckedTreeNode treeNode=new CheckedTreeNode(Pair.create(representationName,projectSettings.getExternalProjectPath()));
      treeNode.setChecked(added);
      nodes.add(treeNode);
    }
    TreeUtil.addChildrenTo(root,nodes);
  }
  final CheckboxTree tree=new CheckboxTree(new CheckboxTree.CheckboxTreeCellRenderer(true,false){
    @Override public void customizeRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (!(value instanceof CheckedTreeNode))       return;
      CheckedTreeNode node=(CheckedTreeNode)value;
      if (!(node.getUserObject() instanceof Pair))       return;
      Pair pair=(Pair)node.getUserObject();
      ColoredTreeCellRenderer renderer=getTextRenderer();
      renderer.setIcon(myExternalSystemUiAware.getProjectIcon());
      String projectName=(String)pair.first;
      renderer.append(projectName,SimpleTextAttributes.REGULAR_ATTRIBUTES);
      String projectPath=StringUtil.trimMiddle((String)pair.second,MAX_PATH_LENGTH);
      renderer.append(" (" + projectPath + ")",SimpleTextAttributes.GRAY_ATTRIBUTES);
      setToolTipText((String)pair.second);
    }
  }
,root);
  TreeUtil.expand(tree,1);
  return tree;
}
