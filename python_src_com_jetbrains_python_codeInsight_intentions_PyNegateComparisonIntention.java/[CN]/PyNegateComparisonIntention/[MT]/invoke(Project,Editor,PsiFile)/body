{
  PsiElement element=PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PyBinaryExpression.class,false);
  PsiElement parent=element.getParent();
  while (parent instanceof PyParenthesizedExpression) {
    parent=parent.getParent();
  }
  PyBinaryExpression binaryExpression=(PyBinaryExpression)element;
  final PyElementType invertedOperator=invertedComparasions.get(binaryExpression.getOperator());
  PyElementGenerator elementGenerator=PythonLanguage.getInstance().getElementGenerator();
  final PyBinaryExpression newElement=elementGenerator.createBinaryExpression(project,comparisonStrings.get(invertedOperator),binaryExpression.getLeftExpression(),binaryExpression.getRightExpression());
  if (parent instanceof PyPrefixExpression && ((PyPrefixExpression)parent).getOperationSign() == PyTokenTypes.NOT_KEYWORD) {
    parent.replace(newElement);
  }
 else {
    element.replace(elementGenerator.createExpressionFromText(project,"not " + newElement.getText()));
  }
}
