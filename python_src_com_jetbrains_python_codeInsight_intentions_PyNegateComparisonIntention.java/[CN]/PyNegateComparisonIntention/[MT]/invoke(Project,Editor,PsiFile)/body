{
  PsiElement element=file.findElementAt(editor.getCaretModel().getOffset());
  PyBinaryExpression binaryExpression=PsiTreeUtil.getParentOfType(element,PyBinaryExpression.class,false);
  while (binaryExpression != null) {
    PyElementType operator=binaryExpression.getOperator();
    if (comparisonStrings.containsKey(operator)) {
      PsiElement parent=binaryExpression.getParent();
      while (parent instanceof PyParenthesizedExpression) {
        parent=parent.getParent();
      }
      final PyElementType invertedOperator=invertedComparasions.get(binaryExpression.getOperator());
      PyElementGenerator elementGenerator=PythonLanguage.getInstance().getElementGenerator();
      final PyBinaryExpression newElement=elementGenerator.createBinaryExpression(project,comparisonStrings.get(invertedOperator),binaryExpression.getLeftExpression(),binaryExpression.getRightExpression());
      if (parent instanceof PyPrefixExpression && ((PyPrefixExpression)parent).getOperationSign() == PyTokenTypes.NOT_KEYWORD) {
        parent.replace(newElement);
      }
 else {
        binaryExpression.replace(elementGenerator.createExpressionFromText(project,"not " + newElement.getText()));
      }
      return;
    }
    binaryExpression=PsiTreeUtil.getParentOfType(binaryExpression,PyBinaryExpression.class);
  }
}
