{
  Collection<String> absolutePaths=GitUtil.toAbsolute(repository.getRoot(),detector.getRelativeFilePaths());
  List<Change> affectedChanges=GitUtil.findLocalChangesForPaths(myProject,repository.getRoot(),absolutePaths,false);
  int choice=myUiHandler.showSmartOperationDialog(myProject,affectedChanges,absolutePaths,"reset","&Hard Reset");
  if (choice == GitSmartOperationDialog.SMART_EXIT_CODE) {
    final Ref<GitCommandResult> result=Ref.create();
    new GitPreservingProcess(myProject,myFacade,myGit,Collections.singleton(repository),"reset",target,myIndicator,new Runnable(){
      @Override public void run(){
        result.set(myGit.reset(repository,myMode,target));
      }
    }
).execute();
    return result.get();
  }
  if (choice == GitSmartOperationDialog.FORCE_EXIT_CODE) {
    return myGit.reset(repository,GitResetMode.HARD,target);
  }
  return null;
}
