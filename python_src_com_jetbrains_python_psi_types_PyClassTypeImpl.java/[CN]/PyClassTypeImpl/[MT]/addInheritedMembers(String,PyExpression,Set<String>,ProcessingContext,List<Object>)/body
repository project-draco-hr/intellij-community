{
  for (  PyExpression expression : myClass.getSuperClassExpressions()) {
    final PsiReference reference=expression.getReference();
    PsiElement element=null;
    if (reference != null) {
      element=reference.resolve();
    }
    PyType type;
    if (element instanceof PyClass) {
      type=new PyClassTypeImpl((PyClass)element,myIsDefinition);
    }
 else {
      type=expression.getType(TypeEvalContext.fastStubOnly(myClass.getContainingFile()));
      if (type instanceof PyClassType && !myIsDefinition) {
        type=((PyClassType)type).toInstance();
      }
    }
    if (type != null) {
      Object[] ancestry=type.getCompletionVariants(name,expressionHook,context);
      for (      Object ob : ancestry) {
        String inheritedName=ob.toString();
        if (!namesAlready.contains(inheritedName) && !isClassPrivate(inheritedName)) {
          ret.add(ob);
          namesAlready.add(inheritedName);
        }
      }
      ContainerUtil.addAll(ret,ancestry);
    }
  }
}
