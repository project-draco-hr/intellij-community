{
  final TypeEvalContext context=resolveContext.getTypeEvalContext();
  PsiElement classMember=resolveByOverridingMembersProviders(this,name,location);
  if (classMember != null) {
    return ResolveResultList.to(classMember);
  }
  if (resolveContext.allowProperties()) {
    final Ref<ResolveResultList> resultRef=findProperty(name,direction,true);
    if (resultRef != null) {
      return resultRef.get();
    }
  }
  if ("super".equals(getClassQName()) && isBuiltin() && location instanceof PyCallExpression) {
    PyExpression first_arg=((PyCallExpression)location).getArgument(0,PyExpression.class);
    if (first_arg != null) {
      PyType first_arg_type=context.getType(first_arg);
      if (first_arg_type instanceof PyClassType) {
        PyClass derived_class=((PyClassType)first_arg_type).getPyClass();
        final Iterator<PyClass> base_it=derived_class.getAncestorClasses(context).iterator();
        if (base_it.hasNext()) {
          return new PyClassTypeImpl(base_it.next(),true).resolveMember(name,location,direction,resolveContext);
        }
 else {
          return null;
        }
      }
    }
  }
  classMember=resolveClassMember(myClass,myIsDefinition,name,location);
  if (classMember != null) {
    return ResolveResultList.to(classMember);
  }
  classMember=resolveByOverridingAncestorsMembersProviders(this,name,location);
  if (classMember != null) {
    return ResolveResultList.to(classMember);
  }
  if (inherited) {
    for (    PyClassLikeType type : myClass.getAncestorTypes(context)) {
      if (type instanceof PyClassType) {
        if (!myIsDefinition) {
          type=type.toInstance();
        }
        PsiElement superMember=resolveClassMember(((PyClassType)type).getPyClass(),myIsDefinition,name,null);
        if (superMember != null) {
          return ResolveResultList.to(superMember);
        }
      }
      if (type != null) {
        final List<? extends RatedResolveResult> results=type.resolveMember(name,location,direction,resolveContext,false);
        if (results != null && !results.isEmpty()) {
          return results;
        }
      }
    }
  }
  if (isDefinition() && myClass.isNewStyleClass()) {
    final PyClassLikeType typeType=getMetaClassType(context,inherited);
    if (typeType != null) {
      List<? extends RatedResolveResult> typeMembers=typeType.resolveMember(name,location,direction,resolveContext);
      if (typeMembers != null && !typeMembers.isEmpty()) {
        return typeMembers;
      }
    }
  }
  if (inherited) {
    classMember=resolveByMembersProviders(this,name,location);
  }
  if (classMember != null) {
    return ResolveResultList.to(classMember);
  }
  if (inherited) {
    for (    PyClassLikeType type : myClass.getAncestorTypes(context)) {
      if (type instanceof PyClassType) {
        final PyClass pyClass=((PyClassType)type).getPyClass();
        PsiElement superMember=resolveByMembersProviders(new PyClassTypeImpl(pyClass,isDefinition()),name,location);
        if (superMember != null) {
          return ResolveResultList.to(superMember);
        }
      }
    }
  }
  return Collections.emptyList();
}
