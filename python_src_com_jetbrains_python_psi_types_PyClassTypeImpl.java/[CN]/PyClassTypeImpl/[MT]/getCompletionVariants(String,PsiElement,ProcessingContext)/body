{
  Set<PyClassType> visited=context.get(CTX_VISITED);
  if (visited == null) {
    visited=new HashSet<>();
    context.put(CTX_VISITED,visited);
  }
  if (visited.contains(this)) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  visited.add(this);
  Set<String> namesAlready=context.get(CTX_NAMES);
  if (namesAlready == null) {
    namesAlready=new HashSet<>();
  }
  List<Object> ret=new ArrayList<>();
  boolean suppressParentheses=context.get(CTX_SUPPRESS_PARENTHESES) != null;
  addOwnClassMembers(location,namesAlready,suppressParentheses,ret,prefix);
  PsiFile origin=(location != null) ? CompletionUtil.getOriginalOrSelf(location).getContainingFile() : null;
  final TypeEvalContext typeEvalContext=TypeEvalContext.codeCompletion(myClass.getProject(),origin);
  addInheritedMembers(prefix,location,namesAlready,context,ret,typeEvalContext);
  for (  final PyClassMembersProvider provider : Extensions.getExtensions(PyClassMembersProvider.EP_NAME)) {
    for (    final PyCustomMember member : provider.getMembers(this,location,typeEvalContext)) {
      final String name=member.getName();
      if (!namesAlready.contains(name)) {
        ret.add(PyCustomMemberUtils.toLookUpElement(member,getName()));
      }
    }
  }
  if (!myClass.isNewStyleClass(typeEvalContext)) {
    final PyBuiltinCache cache=PyBuiltinCache.getInstance(myClass);
    final PyClassType classobjType=cache.getOldstyleClassobjType();
    if (classobjType != null) {
      ret.addAll(Arrays.asList(classobjType.getCompletionVariants(prefix,location,context)));
    }
  }
  if (isDefinition() && myClass.isNewStyleClass(typeEvalContext)) {
    final PyClassLikeType typeType=getMetaClassType(typeEvalContext,true);
    if (typeType != null) {
      Collections.addAll(ret,typeType.getCompletionVariants(prefix,location,context));
    }
  }
  return ret.toArray();
}
