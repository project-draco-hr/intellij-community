{
  final Set<String> result=new LinkedHashSet<>();
  for (  PyFunction function : myClass.getMethods()) {
    result.add(function.getName());
  }
  for (  PyTargetExpression expression : myClass.getClassAttributes()) {
    result.add(expression.getName());
  }
  for (  PyTargetExpression expression : myClass.getInstanceAttributes()) {
    result.add(expression.getName());
  }
  for (  PyClassMembersProvider provider : Extensions.getExtensions(PyClassMembersProvider.EP_NAME)) {
    for (    PyCustomMember member : provider.getMembers(this,null,context)) {
      result.add(member.getName());
    }
  }
  if (inherited) {
    for (    PyClassLikeType type : getAncestorTypes(context)) {
      if (type != null) {
        final PyClassLikeType ancestorType=isDefinition() ? type : type.toInstance();
        result.addAll(ancestorType.getMemberNames(false,context));
      }
    }
  }
  return result;
}
