{
  for (  PyType type : myClass.getSuperClassTypes(typeEvalContext)) {
    if (!(type instanceof PyClassLikeType)) {
      continue;
    }
    final PyClassLikeType classLikeType=(PyClassLikeType)type;
    if (classLikeType.isDefinition() && !myIsDefinition) {
      type=classLikeType.toInstance();
    }
    Object[] ancestry=type.getCompletionVariants(name,expressionHook,context);
    for (    Object ob : ancestry) {
      String inheritedName=ob.toString();
      if (!namesAlready.contains(inheritedName) && !isClassPrivate(inheritedName)) {
        ret.add(ob);
        namesAlready.add(inheritedName);
      }
    }
    ContainerUtil.addAll(ret,ancestry);
  }
}
