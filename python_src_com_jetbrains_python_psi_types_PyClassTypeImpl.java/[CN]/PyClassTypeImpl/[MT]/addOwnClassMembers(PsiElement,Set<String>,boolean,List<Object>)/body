{
  PyClass containingClass=PsiTreeUtil.getParentOfType(expressionHook,PyClass.class);
  if (containingClass != null) {
    containingClass=CompletionUtil.getOriginalElement(containingClass);
  }
  boolean withinOurClass=containingClass == getPyClass() || isInSuperCall(expressionHook);
  final CompletionVariantsProcessor processor=new CompletionVariantsProcessor(expressionHook,new PyResolveUtil.FilterNotInstance(myClass),null);
  if (suppressParentheses) {
    processor.suppressParentheses();
  }
  myClass.processClassLevelDeclarations(processor);
  List<String> slots=myClass.isNewStyleClass(null) ? myClass.getSlots(TypeEvalContext.codeCompletion(expressionHook.getProject(),expressionHook.getContainingFile())) : null;
  if (slots != null) {
    processor.setAllowedNames(slots);
  }
  myClass.processInstanceLevelDeclarations(processor,expressionHook);
  for (  LookupElement le : processor.getResultList()) {
    String name=le.getLookupString();
    if (namesAlready.contains(name))     continue;
    if (!withinOurClass && isClassPrivate(name))     continue;
    namesAlready.add(name);
    ret.add(le);
  }
  if (slots != null) {
    for (    String name : slots) {
      if (!namesAlready.contains(name)) {
        ret.add(LookupElementBuilder.create(name));
      }
    }
  }
}
