{
  MatchVariableConstraint varInfo=(var != null) ? model.getConfig().getMatchOptions().getVariableConstraint(var.getName()) : null;
  if (varInfo == null) {
    varInfo=new MatchVariableConstraint();
    varInfo.setName(var.getName());
    model.getConfig().getMatchOptions().addVariableConstraint(varInfo);
  }
  varInfo.setInvertReadAccess(notRead.isSelected());
  varInfo.setReadAccess(read.isSelected());
  varInfo.setInvertWriteAccess(notWrite.isSelected());
  varInfo.setWriteAccess(write.isSelected());
  varInfo.setRegExp(regexp.getText());
  varInfo.setInvertRegExp(notRegexp.isSelected());
  int minCount=Integer.parseInt(minoccurs.getText());
  varInfo.setMinCount(minCount);
  int maxCount;
  if (maxoccursUnlimited.isSelected())   maxCount=Integer.MAX_VALUE;
 else   maxCount=Integer.parseInt(maxoccurs.getText());
  varInfo.setMaxCount(maxCount);
  varInfo.setWithinHierarchy(applyWithinTypeHierarchy.isSelected());
  varInfo.setInvertRegExp(notRegexp.isSelected());
  varInfo.setPartOfSearchResults(partOfSearchResults.isEnabled() && partOfSearchResults.isSelected());
  varInfo.setInvertExprType(notExprType.isSelected());
  varInfo.setNameOfExprType(regexprForExprType.getText());
  varInfo.setExprTypeWithinHierarchy(exprTypeWithinHierarchy.isSelected());
  varInfo.setWholeWordsOnly(wholeWordsOnly.isSelected());
  varInfo.setInvertFormalType(invertFormalArgType.isSelected());
  varInfo.setFormalArgTypeWithinHierarchy(formalArgTypeWithinHierarchy.isSelected());
  varInfo.setNameOfFormalArgType(formalArgType.getText());
  varInfo.setScriptCodeConstraint("\"" + customScriptCode.getTextField().getText() + "\"");
  final String withinConstraint=(String)withinCombo.getComboBox().getEditor().getItem();
  varInfo.setWithinConstraint(withinConstraint.length() > 0 ? "\"" + withinConstraint + "\"" : "");
  varInfo.setInvertWithinConstraint(invertWithinIn.isSelected());
}
