{
  Configuration configuration=model.getConfig();
  String varName=var.getName();
  if (isReplacementVariable(varName)) {
    ReplacementVariableDefinition definition=((ReplaceConfiguration)configuration).getOptions().getVariableDefinition(stripReplacementVarDecoration(varName));
    restoreScriptCode(definition);
    setSearchConstraintsVisible(false);
    return;
  }
 else {
    setSearchConstraintsVisible(true);
  }
  MatchVariableConstraint varInfo=configuration.getMatchOptions().getVariableConstraint(varName);
  if (varInfo == null) {
    notRead.setSelected(false);
    notRegexp.setSelected(false);
    read.setSelected(false);
    notWrite.setSelected(false);
    write.setSelected(false);
    regexp.getDocument().setText("");
    minoccurs.setText("1");
    maxoccurs.setText("1");
    maxoccursUnlimited.setSelected(false);
    applyWithinTypeHierarchy.setSelected(false);
    partOfSearchResults.setSelected(false);
    regexprForExprType.getDocument().setText("");
    notExprType.setSelected(false);
    exprTypeWithinHierarchy.setSelected(false);
    wholeWordsOnly.setSelected(false);
    invertFormalArgType.setSelected(false);
    formalArgTypeWithinHierarchy.setSelected(false);
    formalArgType.getDocument().setText("");
    customScriptCode.setText("");
    withinCombo.getComboBox().getEditor().setItem("");
    invertWithinIn.setSelected(false);
  }
 else {
    notRead.setSelected(varInfo.isInvertReadAccess());
    read.setSelected(varInfo.isReadAccess());
    notWrite.setSelected(varInfo.isInvertWriteAccess());
    write.setSelected(varInfo.isWriteAccess());
    applyWithinTypeHierarchy.setSelected(varInfo.isWithinHierarchy());
    regexp.getDocument().setText(varInfo.getRegExp());
    notRegexp.setSelected(varInfo.isInvertRegExp());
    minoccurs.setText(Integer.toString(varInfo.getMinCount()));
    if (varInfo.getMaxCount() == Integer.MAX_VALUE) {
      maxoccursUnlimited.setSelected(true);
      maxoccurs.setText("");
    }
 else {
      maxoccursUnlimited.setSelected(false);
      maxoccurs.setText(Integer.toString(varInfo.getMaxCount()));
    }
    partOfSearchResults.setSelected(partOfSearchResults.isEnabled() && varInfo.isPartOfSearchResults());
    exprTypeWithinHierarchy.setSelected(varInfo.isExprTypeWithinHierarchy());
    regexprForExprType.getDocument().setText(varInfo.getNameOfExprType());
    doProcessing(exprTypeWithinHierarchy,regexprForExprType);
    notExprType.setSelected(varInfo.isInvertExprType());
    wholeWordsOnly.setSelected(varInfo.isWholeWordsOnly());
    invertFormalArgType.setSelected(varInfo.isInvertFormalType());
    formalArgTypeWithinHierarchy.setSelected(varInfo.isFormalArgTypeWithinHierarchy());
    formalArgType.getDocument().setText(varInfo.getNameOfFormalArgType());
    doProcessing(formalArgTypeWithinHierarchy,formalArgType);
    restoreScriptCode(varInfo);
    withinCombo.getComboBox().getEditor().setItem(StringUtil.stripQuotesAroundValue(varInfo.getWithinConstraint()));
    invertWithinIn.setSelected(varInfo.isInvertWithinConstraint());
  }
  boolean isExprContext=true;
  final boolean contextVar=Configuration.CONTEXT_VAR_NAME.equals(var.getName());
  if (contextVar)   isExprContext=false;
  containedInConstraints.setVisible(contextVar);
  expressionConstraints.setVisible(isExprContext);
  partOfSearchResults.setEnabled(!contextVar);
  occurencePanel.setVisible(!contextVar);
}
