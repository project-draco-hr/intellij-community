{
  MatchVariableConstraint varInfo=(var != null) ? model.getConfig().getMatchOptions().getVariableConstraint(var.getName()) : null;
  if (varInfo == null) {
    notRead.setSelected(false);
    notRegexp.setSelected(false);
    read.setSelected(false);
    notWrite.setSelected(false);
    write.setSelected(false);
    regexp.setText("");
    minoccurs.setText("1");
    maxoccurs.setText("1");
    maxoccursUnlimited.setSelected(false);
    applyWithinTypeHierarchy.setSelected(false);
    partOfSearchResults.setSelected(false);
    regexprForExprType.setText("");
    notExprType.setSelected(false);
    exprTypeWithinHierarchy.setSelected(false);
    wholeWordsOnly.setSelected(false);
    invertFormalArgType.setSelected(false);
    formalArgTypeWithinHierarchy.setSelected(false);
    formalArgType.setText("");
    customScriptCode.setText("");
  }
 else {
    notRead.setSelected(varInfo.isInvertReadAccess());
    read.setSelected(varInfo.isReadAccess());
    notWrite.setSelected(varInfo.isInvertWriteAccess());
    write.setSelected(varInfo.isWriteAccess());
    applyWithinTypeHierarchy.setSelected(varInfo.isWithinHierarchy());
    regexp.setText(varInfo.getRegExp());
    doProcessing(applyWithinTypeHierarchy,regexp);
    notRegexp.setSelected(varInfo.isInvertRegExp());
    minoccurs.setText(Integer.toString(varInfo.getMinCount()));
    if (varInfo.getMaxCount() == Integer.MAX_VALUE) {
      maxoccursUnlimited.setSelected(true);
      maxoccurs.setText("");
    }
 else {
      maxoccursUnlimited.setSelected(false);
      maxoccurs.setText(Integer.toString(varInfo.getMaxCount()));
    }
    partOfSearchResults.setSelected(partOfSearchResults.isEnabled() && varInfo.isPartOfSearchResults());
    exprTypeWithinHierarchy.setSelected(varInfo.isExprTypeWithinHierarchy());
    regexprForExprType.setText(varInfo.getNameOfExprType());
    doProcessing(exprTypeWithinHierarchy,regexprForExprType);
    notExprType.setSelected(varInfo.isInvertExprType());
    wholeWordsOnly.setSelected(varInfo.isWholeWordsOnly());
    invertFormalArgType.setSelected(varInfo.isInvertFormalType());
    formalArgTypeWithinHierarchy.setSelected(varInfo.isFormalArgTypeWithinHierarchy());
    formalArgType.setText(varInfo.getNameOfFormalArgType());
    doProcessing(formalArgTypeWithinHierarchy,formalArgType);
    customScriptCode.setText(varInfo.getScriptCodeConstraint());
  }
}
