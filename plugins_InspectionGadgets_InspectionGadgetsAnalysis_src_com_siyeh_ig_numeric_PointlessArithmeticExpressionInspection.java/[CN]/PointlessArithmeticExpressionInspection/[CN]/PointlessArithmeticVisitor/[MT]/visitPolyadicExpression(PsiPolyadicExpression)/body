{
  super.visitPolyadicExpression(expression);
  final PsiType expressionType=expression.getType();
  if (expressionType == null || PsiType.DOUBLE.equals(expressionType) || PsiType.FLOAT.equals(expressionType)) {
    return;
  }
  if (!arithmeticTokens.contains(expression.getOperationTokenType())) {
    return;
  }
  if (ExpressionUtils.hasStringType(expression)) {
    return;
  }
  final PsiExpression[] operands=expression.getOperands();
  if (operands.length < 2) {
    return;
  }
  final IElementType tokenType=expression.getOperationTokenType();
  final boolean isPointless;
  if (tokenType.equals(JavaTokenType.PLUS)) {
    isPointless=additionExpressionIsPointless(operands);
  }
 else   if (tokenType.equals(JavaTokenType.MINUS)) {
    isPointless=subtractionExpressionIsPointless(operands);
  }
 else   if (tokenType.equals(JavaTokenType.ASTERISK)) {
    isPointless=multiplyExpressionIsPointless(operands);
  }
 else   if (tokenType.equals(JavaTokenType.DIV)) {
    isPointless=divideExpressionIsPointless(operands);
  }
 else   if (tokenType.equals(JavaTokenType.PERC)) {
    isPointless=modExpressionIsPointless(operands);
  }
 else   if (tokenType.equals(JavaTokenType.LE) || tokenType.equals(JavaTokenType.GE) || tokenType.equals(JavaTokenType.GT)|| tokenType.equals(JavaTokenType.LT)) {
    final PsiExpression lhs=operands[0];
    final PsiExpression rhs=operands[1];
    isPointless=comparisonExpressionIsPointless(lhs,rhs,tokenType);
  }
 else {
    isPointless=false;
  }
  if (!isPointless) {
    return;
  }
  registerError(expression,expression);
}
