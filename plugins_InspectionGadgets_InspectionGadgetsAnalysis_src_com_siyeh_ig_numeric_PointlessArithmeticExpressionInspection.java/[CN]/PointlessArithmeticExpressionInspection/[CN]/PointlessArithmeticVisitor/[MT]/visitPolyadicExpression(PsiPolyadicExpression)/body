{
  super.visitPolyadicExpression(expression);
  final PsiType expressionType=expression.getType();
  if (expressionType == null || PsiType.DOUBLE.equals(expressionType) || PsiType.FLOAT.equals(expressionType)) {
    return;
  }
  if (!arithmeticTokens.contains(expression.getOperationTokenType())) {
    return;
  }
  if (ExpressionUtils.hasStringType(expression) || PsiUtilCore.hasErrorElementChild(expression)) {
    return;
  }
  final PsiExpression[] operands=expression.getOperands();
  final IElementType tokenType=expression.getOperationTokenType();
  final boolean isPointless;
  if (tokenType.equals(JavaTokenType.PLUS)) {
    isPointless=additionExpressionIsPointless(operands);
  }
 else   if (tokenType.equals(JavaTokenType.MINUS)) {
    isPointless=subtractionExpressionIsPointless(operands);
  }
 else   if (tokenType.equals(JavaTokenType.ASTERISK)) {
    isPointless=multiplyExpressionIsPointless(operands);
  }
 else   if (tokenType.equals(JavaTokenType.DIV) || tokenType.equals(JavaTokenType.PERC)) {
    isPointless=divideExpressionIsPointless(operands);
  }
 else {
    isPointless=false;
  }
  if (!isPointless) {
    return;
  }
  registerError(expression,expression);
}
