{
  for (  Project project : ProjectManager.getInstance().getOpenProjects()) {
    for (    NonProjectFileWritingAccessExtension each : Extensions.getExtensions(NonProjectFileWritingAccessExtension.EP_NAME,project)) {
      if (each.isWritable(file))       return true;
      if (each.isNotWritable(file))       return false;
    }
    ProjectFileIndex fileIndex=ProjectFileIndex.SERVICE.getInstance(project);
    if (fileIndex.isInContent(file))     return true;
    if (!Registry.is("ide.hide.excluded.files") && fileIndex.isExcluded(file) && !fileIndex.isUnderIgnored(file))     return true;
    if (project instanceof ProjectEx && !project.isDefault()) {
      if (ProjectUtil.isDirectoryBased(project)) {
        VirtualFile baseDir=project.getBaseDir();
        VirtualFile dotIdea=baseDir == null ? null : baseDir.findChild(Project.DIRECTORY_STORE_FOLDER);
        if (dotIdea != null && VfsUtilCore.isAncestor(dotIdea,file,false))         return true;
      }
      IProjectStore store=(IProjectStore)ServiceKt.getStateStore(project);
      String filePath=file.getPath();
      if (FileUtil.namesEqual(filePath,store.getWorkspaceFilePath()) || FileUtil.namesEqual(filePath,store.getProjectFilePath())) {
        return true;
      }
      for (      Module module : ModuleManager.getInstance(project).getModules()) {
        if (FileUtil.namesEqual(filePath,module.getModuleFilePath())) {
          return true;
        }
      }
    }
  }
  return false;
}
