{
  return new PsiElementVisitor(){
    @Override public void visitElement(    PsiElement modifier){
      if (modifier.getNode().getElementType() != GroovyTokenTypes.kPUBLIC)       return;
      PsiElement list=modifier.getParent();
      if (!(list instanceof GrModifierList))       return;
      PsiElement parent=list.getParent();
      if (parent instanceof GrVariableDeclaration)       return;
      holder.registerProblem(modifier,GroovyInspectionBundle.message("unnecessary.modifier.description",PsiModifier.PUBLIC),ProblemHighlightType.LIKE_UNUSED_SYMBOL,FIX);
    }
  }
;
}
