{
  IdeaPluginDescriptor plugin=PluginManager.getPlugin(pluginId);
  final Ref<Boolean> hasDependants=new Ref<Boolean>(false);
  PluginManagerCore.checkDependants(plugin,new Function<PluginId,IdeaPluginDescriptor>(){
    @Override public IdeaPluginDescriptor fun(    PluginId pluginId){
      return PluginManager.getPlugin(pluginId);
    }
  }
,new Condition<PluginId>(){
    @Override public boolean value(    PluginId pluginId){
      if (PluginManagerCore.CORE_PLUGIN_ID.equals(pluginId.getIdString())) {
        return true;
      }
      hasDependants.set(true);
      return false;
    }
  }
);
  Application app=ApplicationManager.getApplication();
  DisablePluginWarningDialog d=new DisablePluginWarningDialog(parentComponent,plugin.getName(),hasDependants.get(),app.isRestartCapable());
  d.show();
switch (d.getExitCode()) {
case CANCEL_EXIT_CODE:
    return;
case DISABLE_EXIT_CODE:
  PluginManagerCore.disablePlugin(pluginId.getIdString());
break;
case DISABLE_AND_RESTART_EXIT_CODE:
PluginManagerCore.disablePlugin(pluginId.getIdString());
app.restart();
break;
}
}
