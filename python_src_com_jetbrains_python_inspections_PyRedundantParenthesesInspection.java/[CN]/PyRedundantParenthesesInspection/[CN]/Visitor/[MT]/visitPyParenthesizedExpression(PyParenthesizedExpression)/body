{
  PyExpression expression=node.getContainedExpression();
  if (node.getText().contains("\n"))   return;
  PyYieldExpression yieldExpression=PsiTreeUtil.getParentOfType(expression,PyYieldExpression.class,false);
  if (yieldExpression != null)   return;
  if (node.getParent() instanceof PyReturnStatement && expression instanceof PyTupleExpression && myIgnoreTupleInReturn) {
    return;
  }
  if (expression instanceof PyReferenceExpression || expression instanceof PyLiteralExpression) {
    if (myIgnorePercOperator) {
      PsiElement parent=node.getParent();
      if (parent instanceof PyBinaryExpression) {
        if (((PyBinaryExpression)parent).getOperator() == PyTokenTypes.PERC)         return;
      }
    }
    if (node.getParent() instanceof PyPrintStatement)     return;
    registerProblem(node,"Remove redundant parentheses",new RedundantParenthesesQuickFix());
  }
 else   if (node.getParent() instanceof PyIfPart || node.getParent() instanceof PyWhilePart || node.getParent() instanceof PyReturnStatement) {
    registerProblem(node,"Remove redundant parentheses",new RedundantParenthesesQuickFix());
  }
 else   if (expression instanceof PyBinaryExpression) {
    PyBinaryExpression binaryExpression=(PyBinaryExpression)expression;
    if (node.getParent() instanceof PyPrefixExpression)     return;
    if (binaryExpression.getOperator() == PyTokenTypes.AND_KEYWORD || binaryExpression.getOperator() == PyTokenTypes.OR_KEYWORD) {
      final PyExpression leftExpression=binaryExpression.getLeftExpression();
      final PyExpression rightExpression=binaryExpression.getRightExpression();
      if (leftExpression instanceof PyParenthesizedExpression && rightExpression instanceof PyParenthesizedExpression && !(((PyParenthesizedExpression)leftExpression).getContainedExpression() instanceof PyBinaryExpression)&& !(((PyParenthesizedExpression)rightExpression).getContainedExpression() instanceof PyBinaryExpression)) {
        registerProblem(node,"Remove redundant parentheses",new RedundantParenthesesQuickFix());
      }
    }
  }
}
