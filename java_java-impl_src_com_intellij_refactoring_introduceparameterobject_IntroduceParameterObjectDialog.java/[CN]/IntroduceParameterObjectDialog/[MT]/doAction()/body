{
  final boolean useExistingClass=useExistingClass();
  final boolean keepMethod=keepMethodAsDelegate();
  final String className;
  final String packageName;
  final boolean createInnerClass=myCreateInnerClassRadioButton.isSelected();
  if (createInnerClass) {
    className=getInnerClassName();
    packageName="";
  }
 else   if (useExistingClass) {
    final String existingClassName=getExistingClassName();
    className=StringUtil.getShortName(existingClassName);
    packageName=StringUtil.getPackageName(existingClassName);
  }
 else {
    packageName=getPackageName();
    className=getClassName();
  }
  final PsiParameterList parameterList=sourceMethod.getParameterList();
  final List<ParameterInfoImpl> parameters=new ArrayList<>();
  for (  VariableData data : parameterInfo) {
    if (data.passAsParameter) {
      parameters.add(new ParameterInfoImpl(parameterList.getParameterIndex((PsiParameter)data.variable),data.name,data.type));
    }
  }
  final ParameterInfoImpl[] infos=parameters.toArray(new ParameterInfoImpl[parameters.size()]);
  final String newVisibility=myEscalateVisibilityCheckBox.isEnabled() && myEscalateVisibilityCheckBox.isSelected() ? VisibilityUtil.ESCALATE_VISIBILITY : null;
  final MoveDestination moveDestination=((DestinationFolderComboBox)myDestinationCb).selectDirectory(new PackageWrapper(PsiManager.getInstance(myProject),packageName),false);
  final JavaIntroduceParameterObjectClassDescriptor classDescriptor=new JavaIntroduceParameterObjectClassDescriptor(className,packageName,moveDestination,useExistingClass,createInnerClass,newVisibility,infos,sourceMethod,myGenerateAccessorsCheckBox.isSelected());
  invokeRefactoring(new IntroduceParameterObjectProcessor<PsiMethod,ParameterInfoImpl,JavaIntroduceParameterObjectClassDescriptor>(sourceMethod,classDescriptor,new JavaMethodDescriptor(sourceMethod).getParameters(),keepMethod));
}
