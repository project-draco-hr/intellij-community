{
  super.visitPrefixExpression(prefixExpression);
  final PsiJavaToken token=prefixExpression.getOperationSign();
  final IElementType tokenType=token.getTokenType();
  if (!tokenType.equals(JavaTokenType.PLUS)) {
    return;
  }
  final PsiExpression operand=prefixExpression.getOperand();
  if (operand == null) {
    return;
  }
  final PsiType type=operand.getType();
  if (type == null) {
    return;
  }
  if (onlyReportInsideBinaryExpression) {
    final PsiElement parent=ParenthesesUtils.getParentSkipParentheses(prefixExpression);
    if (!(operand instanceof PsiParenthesizedExpression) && !(operand instanceof PsiPrefixExpression) && !(parent instanceof PsiPolyadicExpression)&& !(parent instanceof PsiPrefixExpression)) {
      return;
    }
  }
 else   if (TypeUtils.unaryNumericPromotion(type) != type) {
    PsiExpression expression=prefixExpression;
    PsiElement parent=expression.getParent();
    while (parent instanceof PsiParenthesizedExpression) {
      expression=(PsiExpression)parent;
      parent=parent.getParent();
    }
    final PsiElement grandParent=parent.getParent();
    if (parent instanceof PsiExpressionList && grandParent instanceof PsiCall) {
      final PsiCall call=(PsiCall)grandParent;
      final PsiMethod method=call.resolveMethod();
      if (MethodCallUtils.findMethodWithReplacedArgument(call,expression,operand) != method) {
        return;
      }
    }
  }
  registerError(token,ProblemHighlightType.LIKE_UNUSED_SYMBOL);
}
