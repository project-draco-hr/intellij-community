{
  myLineToGutterRenderers=new TIntObjectHashMap<List<GutterMark>>();
  processRangeHighlighters(0,myEditor.getDocument().getTextLength(),new RangeHighlighterProcessor(){
    @Override public void process(    @NotNull RangeHighlighter highlighter){
      GutterMark renderer=highlighter.getGutterIconRenderer();
      if (renderer == null) {
        return;
      }
      if (myEditor.getFoldingModel().isOffsetCollapsed(highlighter.getStartOffset())) {
        return;
      }
      VisualPosition visualPosition=myEditor.offsetToVisualPosition(highlighter.getStartOffset());
      int line=EditorUtil.calcSurroundingRange(myEditor,visualPosition,visualPosition).getFirst().line;
      List<GutterMark> renderers=myLineToGutterRenderers.get(line);
      if (renderers == null) {
        renderers=new SmartList<GutterMark>();
        myLineToGutterRenderers.put(line,renderers);
      }
      if (renderers.size() < 5) {
        renderers.add(renderer);
      }
    }
  }
);
  myIconsAreaWidth=START_ICON_AREA_WIDTH;
  myLineToGutterRenderers.forEachValue(new TObjectProcedure<List<GutterMark>>(){
    @Override public boolean execute(    List<GutterMark> renderers){
      int width=1;
      for (int i=0; i < renderers.size(); i++) {
        GutterMark renderer=renderers.get(i);
        width+=renderer.getIcon().getIconWidth();
        if (i > 0)         width+=GAP_BETWEEN_ICONS;
      }
      if (myIconsAreaWidth < width) {
        myIconsAreaWidth=width;
      }
      return true;
    }
  }
);
  myLineMarkerAreaWidth=myIconsAreaWidth + FREE_PAINTERS_AREA_WIDTH;
}
