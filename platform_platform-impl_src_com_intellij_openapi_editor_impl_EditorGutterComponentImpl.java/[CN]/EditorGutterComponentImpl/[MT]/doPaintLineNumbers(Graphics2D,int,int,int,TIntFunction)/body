{
  int lastLine=myEditor.logicalToVisualPosition(new LogicalPosition(endLineNumber(),0)).line;
  endVisualLine=Math.min(endVisualLine,lastLine);
  if (startVisualLine > endVisualLine) {
    return;
  }
  Color color=myEditor.getColorsScheme().getColor(EditorColors.LINE_NUMBERS_COLOR);
  g.setColor(color != null ? color : JBColor.blue);
  Font font=getFontForLineNumbers();
  g.setFont(font);
  AffineTransform old=setMirrorTransformIfNeeded(g,getLineNumberAreaOffset(),getLineNumberAreaWidth());
  try {
    VisualLinesIterator visLinesIterator=new VisualLinesIterator(myEditor,startVisualLine);
    while (!visLinesIterator.atEnd() && visLinesIterator.getVisualLine() <= endVisualLine) {
      LogicalPosition logicalPosition=myEditor.visualToLogicalPosition(new VisualPosition(visLinesIterator.getVisualLine(),0));
      if (EditorUtil.getSoftWrapCountAfterLineStart(myEditor,logicalPosition) <= 0) {
        int logLine=convertor.execute(visLinesIterator.getStartLogicalLine());
        if (logLine >= 0) {
          int startY=visLinesIterator.getY();
          if (myEditor.isInDistractionFreeMode()) {
            Color fgColor=myTextFgColors.get(visLinesIterator.getVisualLine());
            g.setColor(fgColor != null ? fgColor : color != null ? color : JBColor.blue);
          }
          String s=String.valueOf(logLine + 1);
          int textOffset=isMirrored() ? offset - getLineNumberAreaWidth() - 1 : offset - g.getFontMetrics().stringWidth(s);
          g.drawString(s,textOffset,startY + myEditor.getAscent());
        }
      }
      visLinesIterator.advance();
    }
  }
  finally {
    if (old != null)     g.setTransform(old);
  }
}
