{
  StudyEditor studyEditor=StudyUtils.getSelectedStudyEditor(project);
  StudyState studyState=new StudyState(studyEditor);
  if (!studyState.isValid()) {
    return;
  }
  Task targetTask=getTargetTask(studyState.getTask());
  if (targetTask == null) {
    return;
  }
  for (  VirtualFile file : FileEditorManager.getInstance(project).getOpenFiles()) {
    FileEditorManager.getInstance(project).closeFile(file);
  }
  int nextTaskIndex=targetTask.getIndex();
  int lessonIndex=targetTask.getLesson().getIndex();
  Map<String,TaskFile> nextTaskFiles=targetTask.getTaskFiles();
  VirtualFile projectDir=project.getBaseDir();
  String lessonDirName=EduNames.LESSON + String.valueOf(lessonIndex);
  if (projectDir == null) {
    return;
  }
  VirtualFile lessonDir=projectDir.findChild(lessonDirName);
  if (lessonDir == null) {
    return;
  }
  String taskDirName=EduNames.TASK + String.valueOf(nextTaskIndex);
  VirtualFile taskDir=lessonDir.findChild(taskDirName);
  if (taskDir == null) {
    return;
  }
  if (nextTaskFiles.isEmpty()) {
    ProjectView.getInstance(project).select(taskDir,taskDir,false);
    return;
  }
  EduUsagesCollector.taskNavigation();
  VirtualFile shouldBeActive=getFileToActivate(project,nextTaskFiles,taskDir);
  updateProjectView(project,shouldBeActive);
  StudyUtils.selectFirstAnswerPlaceholder(StudyUtils.getSelectedStudyEditor(project),project);
  ToolWindow runToolWindow=ToolWindowManager.getInstance(project).getToolWindow(ToolWindowId.RUN);
  if (runToolWindow != null) {
    runToolWindow.hide(null);
  }
}
