{
  final PsiClass psiClass=buildClass(usageInfos);
  if (psiClass != null) {
    fixJavadocForConstructor(psiClass);
    super.performRefactoring(usageInfos);
    if (!myUseExistingClass) {
      for (      PsiReference reference : ReferencesSearch.search(method)) {
        final PsiElement place=reference.getElement();
        VisibilityUtil.escalateVisibility(psiClass,place);
        for (        PsiMethod constructor : psiClass.getConstructors()) {
          VisibilityUtil.escalateVisibility(constructor,place);
        }
      }
    }
    List<UsageInfo> changeSignatureUsages=new ArrayList<>();
    for (    UsageInfo info : usageInfos) {
      if (info instanceof ChangeSignatureUsageWrapper) {
        changeSignatureUsages.add(((ChangeSignatureUsageWrapper)info).getInfo());
      }
    }
    ChangeSignatureProcessorBase.doChangeSignature(myChangeInfo,changeSignatureUsages.toArray(new UsageInfo[changeSignatureUsages.size()]));
  }
}
