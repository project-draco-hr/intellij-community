{
  final LocalSearchScope localSearchScope=new LocalSearchScope(overridingMethod);
  final PsiParameter[] params=overridingMethod.getParameterList().getParameters();
  final PsiParameter parameter=params[i];
  ReferencesSearch.search(parameter,localSearchScope).forEach(new Processor<PsiReference>(){
    @Override public boolean process(    PsiReference reference){
      final PsiElement refElement=reference.getElement();
      if (refElement instanceof PsiReferenceExpression) {
        final PsiReferenceExpression paramUsage=(PsiReferenceExpression)refElement;
        needAccessors[0]=true;
        if (RefactoringUtil.isPlusPlusOrMinusMinus(paramUsage.getParent())) {
          usages.add(new ReplaceParameterIncrementDecrement(paramUsage,fixedParamName,setter,getter));
          needAccessors[1]=true;
        }
 else         if (RefactoringUtil.isAssignmentLHS(paramUsage)) {
          usages.add(new ReplaceParameterAssignmentWithCall(paramUsage,fixedParamName,setter,getter));
          needAccessors[1]=true;
        }
 else {
          usages.add(new ReplaceParameterReferenceWithCall(paramUsage,fixedParamName,getter));
        }
      }
      return true;
    }
  }
);
}
