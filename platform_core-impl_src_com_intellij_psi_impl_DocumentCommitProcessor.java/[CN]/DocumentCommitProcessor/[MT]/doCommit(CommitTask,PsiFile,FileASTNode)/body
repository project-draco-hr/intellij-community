{
  Document document=task.document;
  final CharSequence newDocumentText=document.getImmutableCharSequence();
  final TextRange changedPsiRange=getChangedPsiRange(file,task.myLastCommittedText,newDocumentText);
  if (changedPsiRange == null) {
    return null;
  }
  final Boolean data=document.getUserData(BlockSupport.DO_NOT_REPARSE_INCREMENTALLY);
  if (data != null) {
    document.putUserData(BlockSupport.DO_NOT_REPARSE_INCREMENTALLY,null);
    file.putUserData(BlockSupport.DO_NOT_REPARSE_INCREMENTALLY,data);
  }
  BlockSupport blockSupport=BlockSupport.getInstance(file.getProject());
  final DiffLog diffLog=blockSupport.reparseRange(file,oldFileNode,changedPsiRange,newDocumentText,task.indicator,task.myLastCommittedText);
  return new Processor<Document>(){
    @Override public boolean process(    Document document){
      ApplicationManager.getApplication().assertWriteAccessAllowed();
      if (!task.isStillValid() || ((PsiDocumentManagerBase)PsiDocumentManager.getInstance(file.getProject())).getCachedViewProvider(document) != file.getViewProvider()) {
        return false;
      }
      doActualPsiChange(file,diffLog);
      assertAfterCommit(document,file,(FileElement)oldFileNode);
      return true;
    }
  }
;
}
