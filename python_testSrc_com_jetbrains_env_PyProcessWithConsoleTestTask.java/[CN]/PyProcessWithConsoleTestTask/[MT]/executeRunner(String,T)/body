{
  final Semaphore processFinishedSemaphore=new Semaphore();
  processFinishedSemaphore.down();
  final StringBuilder stdOut=new StringBuilder();
  final StringBuilder stdErr=new StringBuilder();
  final StringBuilder stdAll=new StringBuilder();
  final Ref<Boolean> failed=new Ref<Boolean>(false);
  final ProcessAdapter processListener=new ProcessAdapter(){
    @Override public void processTerminated(    final ProcessEvent event){
      super.processTerminated(event);
      processFinishedSemaphore.up();
    }
    @Override public void onTextAvailable(    final ProcessEvent event,    final Key outputType){
      super.onTextAvailable(event,outputType);
      final String text=event.getText();
      stdAll.append(text);
      if (outputType.equals(ProcessOutputTypes.STDOUT)) {
        stdOut.append(text);
      }
 else       if (outputType.equals(ProcessOutputTypes.STDERR)) {
        stdErr.append(text);
      }
    }
  }
;
  ApplicationManager.getApplication().invokeAndWait(new Runnable(){
    @Override public void run(){
      try {
        runner.runProcess(sdkHome,getProject(),processListener);
      }
 catch (      final Throwable e) {
        final IllegalStateException exception=new IllegalStateException("Exception thrown while running test",e);
        failed.set(true);
        processFinishedSemaphore.up();
        throw exception;
      }
    }
  }
,ModalityState.NON_MODAL);
  processFinishedSemaphore.waitFor(60000);
  XDebuggerTestUtil.waitForSwing();
  if (failed.get()) {
    Assert.fail("Failed to run test, see logs for exceptions");
  }
 else {
    checkTestResults(runner,stdOut.toString(),stdErr.toString(),stdAll.toString());
  }
}
