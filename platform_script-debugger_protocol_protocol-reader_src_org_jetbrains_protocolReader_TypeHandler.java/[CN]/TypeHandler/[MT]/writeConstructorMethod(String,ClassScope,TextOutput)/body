{
  out.newLine().append(valueImplClassName).append('(').append(Util.JSON_READER_PARAMETER_DEF).comma().append("String name");
  if (subtypeAspect != null) {
    subtypeAspect.writeSuperConstructorParamJava(out);
  }
  out.append(')').openBlock();
  if (subtypeAspect != null) {
    subtypeAspect.writeSuperConstructorInitialization(out);
  }
  if (JsonObjectBased.class.isAssignableFrom(typeClass) || hasLazyFields) {
    out.append(Util.PENDING_INPUT_READER_NAME).append(" = ").append(Util.READER_NAME).append(".subReader()").semi().newLine();
  }
  if (fieldLoaders.isEmpty()) {
    out.append(Util.READER_NAME).append(".skipValue()").semi();
  }
 else {
    out.append("if (name == null)").openBlock();
{
      out.append("if (reader.beginObject().hasNext())").openBlock();
{
        out.append("name = reader.nextName()").semi();
      }
      out.closeBlock();
      out.newLine().append("else").openBlock();
{
        out.append("return").semi();
      }
      out.closeBlock();
    }
    out.closeBlock();
    out.newLine();
    writeReadFields(out,classScope);
    out.newLine().newLine().append(Util.READER_NAME).append(".endObject()").semi();
  }
  out.closeBlock();
}
