{
  final IElementType type=expression.getOperationTokenType();
  final GrExpression left=expression.getLeftOperand();
  final GrExpression right=expression.getRightOperand();
  final GrExpression other=myExpression == left ? right : left;
  final PsiType otherType=other != null ? other.getType() : null;
  if (otherType == null)   return;
  final GroovyResolveResult[] callVariants=expression.multiResolve(true);
  if (myExpression == left || callVariants.length == 0) {
    if (type == mPLUS && otherType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
      final PsiClassType obj=TypesUtil.getJavaLangObject(expression);
      myResult=createSimpleSubTypeResult(obj);
    }
 else     if (type == mREGEX_FIND || type == mREGEX_MATCH) {
      final PsiClassType string=TypesUtil.createType(CommonClassNames.JAVA_LANG_STRING,expression);
      myResult=createSimpleSubTypeResult(string);
    }
 else {
      myResult=createSimpleSubTypeResult(otherType);
    }
  }
 else {
    processCallVariants(expression,callVariants,GrNamedArgument.EMPTY_ARRAY,new GrExpression[]{myExpression},GrClosableBlock.EMPTY_ARRAY);
  }
}
