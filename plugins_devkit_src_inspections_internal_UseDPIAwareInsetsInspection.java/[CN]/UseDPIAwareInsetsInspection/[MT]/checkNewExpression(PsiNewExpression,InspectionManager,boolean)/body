{
  final Project project=manager.getProject();
  final PsiType type=expression.getType();
  final PsiExpressionList arguments=expression.getArgumentList();
  if (type != null && arguments != null && type.equalsToText("java.awt.Insets")) {
    if (expression.getParent() instanceof PsiExpressionList) {
      PsiElement parent=expression.getParent();
      PsiElement superParent=parent.getParent();
      if (superParent instanceof PsiMethodCallExpression) {
        PsiType methodType=((PsiMethodCallExpression)superParent).getType();
        if (methodType != null && methodType.equalsToText(JBInsets.class.getName())) {
          return null;
        }
      }
    }
    final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
    final PsiClass jbuiClass=facade.findClass(JBUI.class.getName(),GlobalSearchScope.allScope(project));
    if (jbuiClass != null && facade.getResolveHelper().isAccessible(jbuiClass,expression,jbuiClass)) {
      final PsiElement parent=expression.getParent();
      if (parent instanceof PsiExpressionList && parent.getParent() instanceof PsiNewExpression) {
        final PsiType parentType=((PsiNewExpression)parent.getParent()).getType();
        if (parentType == null || JBInsets.class.getName().equals(parentType.getCanonicalText()))         return null;
      }
      if (arguments.getExpressions().length == 4) {
        return manager.createProblemDescriptor(expression,"Replace with JBUI.insets(...)",new ConvertToJBInsetsQuickFix(),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly);
      }
    }
  }
  return null;
}
