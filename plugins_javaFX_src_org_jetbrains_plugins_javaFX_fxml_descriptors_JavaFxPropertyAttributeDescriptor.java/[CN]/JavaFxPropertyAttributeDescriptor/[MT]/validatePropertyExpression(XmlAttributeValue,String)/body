{
  final String referencesId=value.substring(1);
  final XmlTag currentTag=PsiTreeUtil.getParentOfType(xmlAttributeValue,XmlTag.class);
  final Map<String,XmlAttributeValue> fileIds=JavaFxPsiUtil.collectFileIds(currentTag);
  final PsiClass targetPropertyClass=JavaFxPsiUtil.getWritablePropertyClass(xmlAttributeValue);
  if (targetPropertyClass == null || JavaFxPsiUtil.hasConversionFromAnyType(targetPropertyClass))   return null;
  final PsiClass valueClass;
  if (JavaFxPsiUtil.isExpressionBinding(value)) {
    final String expressionText=referencesId.substring(1,referencesId.length() - 1);
    final String newId=StringUtil.getPackageName(expressionText);
    final PsiClass tagClass=JavaFxPsiUtil.getTagClassById(newId,xmlAttributeValue,fileIds.get(newId));
    if (tagClass == null)     return null;
    final String fieldRef=StringUtil.getShortName(expressionText);
    final String fieldName=JavaCodeStyleManager.getInstance(tagClass.getProject()).propertyNameToVariableName(fieldRef,VariableKind.FIELD);
    PsiField psiField=tagClass.findFieldByName(fieldName,true);
    final PsiMember propertyDeclaration;
    if (psiField != null && psiField.hasModifierProperty(PsiModifier.PUBLIC)) {
      propertyDeclaration=psiField;
    }
 else {
      propertyDeclaration=JavaFxPsiUtil.findPropertyGetter(fieldRef,tagClass);
    }
    if (propertyDeclaration == null)     return null;
    valueClass=JavaFxPsiUtil.getPropertyClass(JavaFxPsiUtil.getReadablePropertyType(propertyDeclaration),xmlAttributeValue);
  }
 else {
    valueClass=JavaFxPsiUtil.getTagClassById(referencesId,xmlAttributeValue,fileIds.get(referencesId));
  }
  if (valueClass == null || InheritanceUtil.isInheritorOrSelf(valueClass,targetPropertyClass,true)) {
    return null;
  }
  return "Invalid value: unable to coerce to " + targetPropertyClass.getQualifiedName();
}
