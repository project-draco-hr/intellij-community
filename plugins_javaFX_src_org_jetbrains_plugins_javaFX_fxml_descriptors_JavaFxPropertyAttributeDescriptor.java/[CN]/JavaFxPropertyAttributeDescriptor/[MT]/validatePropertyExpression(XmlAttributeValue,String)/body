{
  if (JavaFxPsiUtil.isIncorrectExpressionBinding(value)) {
    return "Incorrect expression syntax";
  }
  final List<String> propertyNames=JavaFxPsiUtil.isExpressionBinding(value) ? StringUtil.split(value.substring(2,value.length() - 1),".",true,false) : Collections.singletonList(value.substring(1));
  if (isIncompletePropertyChain(propertyNames)) {
    return "Incorrect expression syntax";
  }
  if (FxmlConstants.NULL_EXPRESSION.equals(value))   return null;
  final XmlTag currentTag=PsiTreeUtil.getParentOfType(xmlAttributeValue,XmlTag.class);
  final PsiType targetPropertyType=JavaFxPsiUtil.getWritablePropertyType(xmlAttributeValue);
  if (FxmlConstants.isNullValue(value)) {
    if (JavaFxPsiUtil.isPrimitiveOrBoxed(targetPropertyType)) {
      return "Unable to coerce to " + targetPropertyType.getPresentableText();
    }
    return null;
  }
  final PsiClass targetPropertyClass=JavaFxPsiUtil.getPropertyClass(targetPropertyType,xmlAttributeValue);
  if (targetPropertyClass == null || JavaFxPsiUtil.hasConversionFromAnyType(targetPropertyClass))   return null;
  final String firstPropertyName=propertyNames.get(0);
  final Map<String,XmlAttributeValue> fileIds=JavaFxPsiUtil.collectFileIds(currentTag);
  final PsiClass tagClass=JavaFxPsiUtil.getTagClassById(fileIds.get(firstPropertyName),firstPropertyName,xmlAttributeValue);
  if (tagClass != null) {
    PsiClass aClass=tagClass;
    final List<String> remainingPropertyNames=propertyNames.subList(1,propertyNames.size());
    for (    String propertyName : remainingPropertyNames) {
      if (aClass == null)       break;
      final PsiMember member=JavaFxPsiUtil.collectReadableProperties(aClass).get(propertyName);
      aClass=JavaFxPsiUtil.getPropertyClass(JavaFxPsiUtil.getReadablePropertyType(member),xmlAttributeValue);
    }
    if (aClass != null && !InheritanceUtil.isInheritorOrSelf(aClass,targetPropertyClass,true)) {
      return "Invalid value: unable to coerce to " + targetPropertyClass.getQualifiedName();
    }
  }
  return null;
}
