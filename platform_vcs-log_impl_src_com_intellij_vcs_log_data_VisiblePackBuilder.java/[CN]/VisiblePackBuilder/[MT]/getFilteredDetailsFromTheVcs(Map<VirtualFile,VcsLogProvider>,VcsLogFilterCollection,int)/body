{
  Collection<List<TimedVcsCommit>> logs=ContainerUtil.newArrayList();
  for (  Map.Entry<VirtualFile,VcsLogProvider> entry : providers.entrySet()) {
    VirtualFile root=entry.getKey();
    if (filterCollection.getStructureFilter() != null && filterCollection.getStructureFilter().getFiles(root).isEmpty() || filterCollection.getUserFilter() != null && filterCollection.getUserFilter().getUserNames(root).isEmpty()) {
      continue;
    }
    List<TimedVcsCommit> matchingCommits=entry.getValue().getCommitsMatchingFilter(root,filterCollection,maxCount);
    logs.add(matchingCommits);
  }
  List<TimedVcsCommit> compoundLog=new VcsLogMultiRepoJoiner<Hash,TimedVcsCommit>().join(logs);
  return ContainerUtil.map(compoundLog,new Function<TimedVcsCommit,Hash>(){
    @Override public Hash fun(    TimedVcsCommit commit){
      return commit.getId();
    }
  }
);
}
