{
  List<JavaSourceRootDescriptor> roots=new ArrayList<JavaSourceRootDescriptor>();
  JavaSourceRootType type=isTests() ? JavaSourceRootType.TEST_SOURCE : JavaSourceRootType.SOURCE;
  Iterable<ExcludedJavaSourceRootProvider> excludedRootProviders=JpsServiceManager.getInstance().getExtensions(ExcludedJavaSourceRootProvider.class);
  final Set<File> moduleExcludes=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
  moduleExcludes.addAll(index.getModuleExcludes(myModule));
  final JpsJavaCompilerConfiguration compilerConfig=JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(myModule.getProject());
  roots_loop:   for (  JpsTypedModuleSourceRoot<JavaSourceRootProperties> sourceRoot : myModule.getSourceRoots(type)) {
    if (JpsPathUtil.isUnder(moduleExcludes,sourceRoot.getFile())) {
      continue;
    }
    for (    ExcludedJavaSourceRootProvider provider : excludedRootProviders) {
      if (provider.isExcludedFromCompilation(myModule,sourceRoot)) {
        continue roots_loop;
      }
    }
    final String packagePrefix=sourceRoot.getProperties().getPackagePrefix();
    Set<File> excludes=computeRootExcludes(sourceRoot.getFile(),index);
    final ProcessorConfigProfile profile=compilerConfig.getAnnotationProcessingProfile(myModule);
    if (profile.isEnabled()) {
      final File outputDir=ProjectPaths.getAnnotationProcessorGeneratedSourcesOutputDir(myModule,JavaSourceRootType.TEST_SOURCE == sourceRoot.getRootType(),profile);
      if (outputDir != null && FileUtil.isAncestor(sourceRoot.getFile(),outputDir,true)) {
        excludes=ContainerUtil.newTroveSet(FileUtil.FILE_HASHING_STRATEGY,excludes);
        excludes.add(outputDir);
      }
    }
    roots.add(new JavaSourceRootDescriptor(sourceRoot.getFile(),this,false,false,packagePrefix,excludes));
  }
  return roots;
}
