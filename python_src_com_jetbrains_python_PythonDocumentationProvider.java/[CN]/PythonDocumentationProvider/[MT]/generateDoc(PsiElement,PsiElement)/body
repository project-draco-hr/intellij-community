{
  final StringBuffer cat=new StringBuffer("<html><body><code>");
  if (element instanceof PyDocStringOwner) {
    String docString=null;
    boolean prepended_something=false;
    PyStringLiteralExpression doc_expr=((PyDocStringOwner)element).getDocStringExpression();
    if (doc_expr != null)     docString=doc_expr.getStringValue();
    if (element instanceof PyClass) {
      PyClass cls=(PyClass)element;
      describeClass(cls,cat);
      prepended_something=true;
    }
 else     if (element instanceof PyFunction) {
      PyFunction fun=(PyFunction)element;
      PyClass cls=fun.getContainingClass();
      if (cls != null) {
        cat.append("<small>class ").append(cls.getName()).append("</small>").append(BR);
      }
      describeFunction(fun,cat);
      prepended_something=true;
      boolean not_found=true;
      if (docString == null) {
        String meth_name=fun.getName();
        if (cls != null && meth_name != null) {
          for (          PyClass ancestor : cls.iterateAncestors()) {
            PyFunction inherited=ancestor.findMethodByName(meth_name);
            if (inherited != null) {
              PyStringLiteralExpression doc_elt=inherited.getDocStringExpression();
              if (doc_elt != null) {
                String inherited_doc=doc_elt.getStringValue();
                if (inherited_doc.length() > 1) {
                  cat.append(BR).append(BR).append("</code>").append(PyBundle.message("QDOC.copied.from.$0.$1",ancestor.getName(),meth_name)).append(BR).append(BR).append(inherited_doc).append("<code>");
                  not_found=false;
                  break;
                }
              }
            }
          }
          if (not_found) {
            if (PyNames.UnderscoredNames.contains(meth_name)) {
              PyClassType objtype=PyBuiltinCache.getInstance(fun.getProject()).getObjectType();
              if (objtype != null) {
                PyClass objcls=objtype.getPyClass();
                if (objcls != null) {
                  PyFunction obj_underscored=objcls.findMethodByName(meth_name);
                  if (obj_underscored != null) {
                    PyStringLiteralExpression predefined_doc_expr=obj_underscored.getDocStringExpression();
                    String predefined_doc=predefined_doc_expr != null ? predefined_doc_expr.getStringValue() : null;
                    if (predefined_doc != null && predefined_doc.length() > 1) {
                      cat.append(BR).append(BR).append("</code>").append(predefined_doc).append(BR).append(PyBundle.message("QDOC.copied.from.builtin")).append("<code>");
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (element instanceof PyFile) {
    }
 else {
      cat.append(combUp(PyUtil.getReadableRepr(element,false)));
      prepended_something=true;
    }
    cat.append("</code>");
    if (docString != null) {
      if (prepended_something)       cat.append(BR).append(BR);
      cat.append(combUp(docString.trim()));
    }
    return cat.append("</body></html>").toString();
  }
  return null;
}
