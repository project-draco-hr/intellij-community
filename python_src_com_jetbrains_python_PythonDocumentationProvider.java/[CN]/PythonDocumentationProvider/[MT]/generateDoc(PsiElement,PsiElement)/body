{
  if (element != null && PydevConsoleRunner.isInPydevConsole(element) || originalElement != null && PydevConsoleRunner.isInPydevConsole(originalElement)) {
    return PydevDocumentationProvider.createDoc(element,originalElement);
  }
  ChainIterable<String> cat=new ChainIterable<String>();
  final ChainIterable<String> prolog_cat=new ChainIterable<String>();
  final ChainIterable<String> doc_cat=new ChainIterable<String>();
  final ChainIterable<String> epilog_cat=new ChainIterable<String>();
  cat.add(prolog_cat).addWith(TagCode,doc_cat).add(epilog_cat);
  cat=wrapInTag("html",wrapInTag("body",cat));
  element=resolveToDocStringOwner(element,originalElement,prolog_cat);
  if (element instanceof PyDocStringOwner) {
    String docString=null;
    PyStringLiteralExpression doc_expr=((PyDocStringOwner)element).getDocStringExpression();
    if (doc_expr != null)     docString=doc_expr.getStringValue();
    if (element instanceof PyClass) {
      PyClass cls=(PyClass)element;
      doc_cat.addWith(TagSmall,describeClass(cls,TagBold));
    }
 else     if (element instanceof PyFunction) {
      PyFunction fun=(PyFunction)element;
      PyClass cls=fun.getContainingClass();
      if (cls != null)       doc_cat.addWith(TagSmall,$("class ",cls.getName(),BR));
      doc_cat.add(describeFunction(fun,TagItalic,BR,TagBold,LCombUp));
      if (docString == null) {
        addInheritedDocString(fun,cls,doc_cat,epilog_cat);
      }
    }
 else     if (element instanceof PyFile) {
      String path=VfsUtil.urlToPath(((PyFile)element).getUrl());
      if ("".equals(path)) {
        prolog_cat.addWith(TagSmall,$(PyBundle.message("QDOC.module.path.unknown")));
      }
 else {
        RootFinder finder=new RootFinder(path);
        ResolveImportUtil.visitRoots(element,finder);
        final String root_path=finder.getResult();
        if (root_path != null) {
          String after_part=path.substring(root_path.length());
          prolog_cat.addWith(TagSmall,$(root_path).addWith(TagBold,$(after_part)));
        }
 else         prolog_cat.addWith(TagSmall,$(path));
      }
    }
 else {
      doc_cat.add(combUp(PyUtil.getReadableRepr(element,false)));
    }
    if (docString != null) {
      doc_cat.add(BR).add(combUpDocString(docString));
    }
 else     if (prolog_cat.isEmpty() && doc_cat.isEmpty() && epilog_cat.isEmpty())     return null;
    return cat.toString();
  }
  return null;
}
