{
  boolean reassignment_marked=false;
  if (element instanceof PyTargetExpression) {
    final String target_name=element.getText();
    if (!reassignment_marked) {
      prolog_cat.addWith(TagSmall,$(PyBundle.message("QDOC.assigned.to.$0",target_name)).add(BR));
      reassignment_marked=true;
    }
    element=((PyTargetExpression)element).findAssignedValue();
  }
  if (element instanceof PyReferenceExpression) {
    if (!reassignment_marked) {
      prolog_cat.addWith(TagSmall,$(PyBundle.message("QDOC.assigned.to.$0",element.getText())).add(BR));
      reassignment_marked=true;
    }
    final QualifiedResolveResult resolveResult=((PyReferenceExpression)element).followAssignmentsChain();
    element=resolveResult.isImplicit() ? null : resolveResult.getElement();
  }
  if (element instanceof PyCallExpression) {
    final PyCallExpression call=(PyCallExpression)element;
    Pair<String,PyFunction> wrap_info=PyCallExpressionHelper.interpretAsStaticmethodOrClassmethodWrappingCall(call,originalElement);
    if (wrap_info != null) {
      String wrapper_name=wrap_info.getFirst();
      PyFunction wrapped_func=wrap_info.getSecond();
      prolog_cat.addWith(TagSmall,$(PyBundle.message("QDOC.wrapped.in.$0",wrapper_name)).add(BR));
      element=wrapped_func;
    }
  }
 else   if (element instanceof PyFunction && PyNames.INIT.equals(((PyFunction)element).getName())) {
    final PyStringLiteralExpression expression=((PyFunction)element).getDocStringExpression();
    if (expression == null) {
      PyClass containingClass=((PyFunction)element).getContainingClass();
      if (containingClass != null) {
        element=containingClass;
      }
    }
  }
  return element;
}
