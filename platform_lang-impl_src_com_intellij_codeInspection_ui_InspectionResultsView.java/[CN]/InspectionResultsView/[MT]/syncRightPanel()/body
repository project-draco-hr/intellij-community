{
  if (myTree.getSelectionModel().getSelectionCount() != 1) {
    final JLabel multipleSelectionLabel=new JBLabel(InspectionViewNavigationPanel.getTitleText(false,false));
    multipleSelectionLabel.setVerticalAlignment(SwingConstants.TOP);
    multipleSelectionLabel.setBorder(IdeBorderFactory.createEmptyBorder(5,7,0,0));
    mySplitter.setSecondComponent(multipleSelectionLabel);
  }
 else {
    TreePath pathSelected=myTree.getSelectionModel().getLeadSelectionPath();
    if (pathSelected != null) {
      final InspectionTreeNode node=(InspectionTreeNode)pathSelected.getLastPathComponent();
      releaseEditor();
      if (node instanceof RefElementNode) {
        final RefElementNode refElementNode=(RefElementNode)node;
        final CommonProblemDescriptor problem=refElementNode.getProblem();
        final RefEntity refSelected=refElementNode.getElement();
        if (node.isLeaf()) {
          LOG.assertTrue(problem != null);
          showInRightPanel(refSelected);
        }
 else {
          showInRightPanel(refSelected);
        }
      }
 else       if (node instanceof ProblemDescriptionNode) {
        final ProblemDescriptionNode problemNode=(ProblemDescriptionNode)node;
        showInRightPanel(problemNode.getElement());
      }
 else       if (node instanceof InspectionNode) {
        showInRightPanel(null);
      }
 else       if (node instanceof InspectionRootNode || node instanceof InspectionGroupNode) {
        mySplitter.setSecondComponent(new InspectionViewNavigationPanel(node,myTree));
      }
 else {
        LOG.error("Unexpected node: " + node.getClass());
      }
    }
  }
}
