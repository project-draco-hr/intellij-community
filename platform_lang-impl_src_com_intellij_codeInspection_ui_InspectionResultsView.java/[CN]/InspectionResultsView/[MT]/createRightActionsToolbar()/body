{
  myIncludeAction=new AnAction(InspectionsBundle.message("inspections.result.view.include.action.text")){
{
      registerCustomShortcutSet(CommonShortcuts.INSERT,myTreeBuilder.getTree());
    }
    @Override public void actionPerformed(    AnActionEvent e){
      for (      InspectionTreeNode node : myTreeBuilder.getSelectedItems()) {
        node.amnesty();
      }
      updateView(false);
    }
    @Override public void update(    final AnActionEvent e){
      e.getPresentation().setEnabled(!myTreeBuilder.getSelectedItems().isEmpty() && !myGlobalInspectionContext.getUIOptions().FILTER_RESOLVED_ITEMS);
    }
  }
;
  myExcludeAction=new AnAction(InspectionsBundle.message("inspections.result.view.exclude.action.text")){
{
      registerCustomShortcutSet(CommonShortcuts.getDelete(),myTreeBuilder.getTree());
    }
    @Override public void actionPerformed(    final AnActionEvent e){
      for (      InspectionTreeNode node : myTreeBuilder.getSelectedItems()) {
        node.ignoreElement();
      }
      updateView(false);
    }
    @Override public void update(    final AnActionEvent e){
      e.getPresentation().setEnabled(!myTreeBuilder.getSelectedItems().isEmpty());
    }
  }
;
  DefaultActionGroup specialGroup=new DefaultActionGroup();
  specialGroup.add(myGlobalInspectionContext.getUIOptions().createGroupBySeverityAction(this));
  specialGroup.add(myGlobalInspectionContext.getUIOptions().createGroupByDirectoryAction(this));
  specialGroup.add(myGlobalInspectionContext.getUIOptions().createFilterResolvedItemsAction(this));
  specialGroup.add(myGlobalInspectionContext.getUIOptions().createShowOutdatedProblemsAction(this));
  specialGroup.add(myGlobalInspectionContext.getUIOptions().createShowDiffOnlyAction(this));
  specialGroup.add(new EditSettingsAction());
  specialGroup.add(new InvokeQuickFixAction(this));
  specialGroup.add(new InspectionsOptionsToolbarAction(this));
  return createToolbar(specialGroup);
}
