{
  final int count=descriptor.getProblemCount();
  if (count == 1 || containingElement != null) {
    final PsiElement element=descriptor.getFirstProblemElement();
    LOG.assertTrue(element != null);
    final PsiElement referencedElement=containingElement == null ? descriptor.getFirstProblemElement() : containingElement;
    final PsiFile file=referencedElement.getContainingFile();
    final Document document=PsiDocumentManager.getInstance(referencedElement.getProject()).getDocument(file);
    Editor editor=EditorFactory.getInstance().createEditor(document,myProject,file.getVirtualFile(),true);
    final EditorSettings settings=editor.getSettings();
    settings.setLineNumbersShown(false);
    settings.setLineNumbersShown(false);
    settings.setWhitespacesShown(false);
    settings.setLineMarkerAreaShown(false);
    settings.setIndentGuidesShown(false);
    settings.setFoldingOutlineShown(false);
    settings.setAdditionalColumnsCount(0);
    settings.setAdditionalLinesCount(0);
    settings.setRightMarginShown(true);
    settings.setRightMargin(60);
    editor.getScrollingModel().scrollToCaret(ScrollType.CENTER);
    editor.getCaretModel().moveToOffset(referencedElement.getTextOffset());
    editor.getScrollingModel().scrollToCaret(ScrollType.CENTER);
    UsagePreviewPanel.highlight(containingElement == null ? Collections.singletonList(new UsageInfo(referencedElement)) : Collections.emptyList(),editor,myProject);
    return editor.getComponent();
  }
 else   if (count > 1) {
    return new InspectionNodeInfo(myTree.getSelectedToolWrapper(),myProject);
  }
  return new JPanel();
}
