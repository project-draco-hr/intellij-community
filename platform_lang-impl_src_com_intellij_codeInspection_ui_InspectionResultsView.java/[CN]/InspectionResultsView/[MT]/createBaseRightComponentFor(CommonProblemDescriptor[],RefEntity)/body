{
  final int count=descriptors.length;
  if (selectedEntity instanceof RefElement && !(((RefElement)selectedEntity).getElement() instanceof PsiDirectory)) {
    PsiElement selectedElement=((RefElement)selectedEntity).getElement();
    final PsiFile file=selectedElement.getContainingFile();
    final Document document=PsiDocumentManager.getInstance(file.getProject()).getDocument(file);
    myPreviewEditor=EditorFactory.getInstance().createEditor(document,myProject,file.getVirtualFile(),true);
    final EditorSettings settings=myPreviewEditor.getSettings();
    settings.setLineNumbersShown(false);
    settings.setLineMarkerAreaShown(false);
    settings.setAdditionalColumnsCount(0);
    settings.setAdditionalLinesCount(0);
    settings.setLeadingWhitespaceShown(true);
    settings.setRightMarginShown(true);
    settings.setRightMargin(60);
    PsiElement toHighlight=selectedElement;
    if (count != 1) {
      myPreviewEditor.getCaretModel().moveToOffset(selectedElement.getTextOffset());
      myPreviewEditor.getScrollingModel().scrollToCaret(ScrollType.CENTER);
    }
 else     if (descriptors[0] instanceof ProblemDescriptorBase) {
      toHighlight=((ProblemDescriptorBase)descriptors[0]).getPsiElement();
    }
    UsagePreviewPanel.highlight(getElementToHighlight(toHighlight),myPreviewEditor,myProject);
    return myPreviewEditor.getComponent();
  }
 else   if (selectedEntity == null) {
    return new InspectionNodeInfo(myTree.getSelectedToolWrapper(),myProject);
  }
  return new JPanel();
}
