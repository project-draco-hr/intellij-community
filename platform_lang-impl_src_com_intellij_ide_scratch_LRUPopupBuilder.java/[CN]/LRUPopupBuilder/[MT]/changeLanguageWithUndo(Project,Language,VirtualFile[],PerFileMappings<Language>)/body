{
  ReadonlyStatusHandler.OperationStatus status=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(sortedFiles);
  if (status.hasReadonlyFiles())   return;
  final Set<VirtualFile> matchedExtensions=ContainerUtil.newLinkedHashSet();
  final Map<VirtualFile,Language> oldMapping=ContainerUtil.newHashMap();
  for (  VirtualFile file : sortedFiles) {
    oldMapping.put(file,mappings.getMapping(file));
    if (ScratchUtil.hasMatchingExtension(project,file)) {
      matchedExtensions.add(file);
    }
  }
  BasicUndoableAction action=new BasicUndoableAction(sortedFiles){
    @Override public void undo() throws UnexpectedUndoException {
      for (      VirtualFile file : sortedFiles) {
        mappings.setMapping(file,oldMapping.get(file));
      }
    }
    @Override public void redo() throws UnexpectedUndoException {
      for (      VirtualFile file : sortedFiles) {
        mappings.setMapping(file,t);
      }
    }
  }
;
  action.redo();
  UndoManager.getInstance(project).undoableActionPerformed(action);
  for (  VirtualFile file : matchedExtensions) {
    try {
      ScratchUtil.updateFileExtension(project,file);
    }
 catch (    IOException ignored) {
    }
  }
}
