{
  final ChainIterable<String> reassign_cat=new ChainIterable<String>();
  PsiElement followed=resolveToDocStringOwner(reassign_cat);
  PyClass cls;
  PsiElement outer=null;
  boolean is_property=false;
  String accessor_kind="None";
  if (myOriginalElement != null) {
    String element_name=myOriginalElement.getText();
    if (PyUtil.isPythonIdentifier(element_name)) {
      outer=myOriginalElement.getParent();
      if (outer instanceof PyQualifiedExpression) {
        PyExpression qual=((PyQualifiedExpression)outer).getQualifier();
        if (qual != null) {
          PyType type=qual.getType(TypeEvalContext.fast());
          if (type instanceof PyClassType) {
            cls=((PyClassType)type).getPyClass();
            if (cls != null) {
              Property property=cls.findProperty(element_name);
              if (property != null) {
                is_property=true;
                final AccessDirection dir=AccessDirection.of((PyElement)outer);
                Maybe<PyFunction> accessor=property.getByDirection(dir);
                myProlog.add("property ").addWith(TagBold,$().addWith(TagCode,$(element_name))).add(" of ").add(PythonDocumentationProvider.describeClass(cls,TagCode,true,true));
                if (accessor.isDefined() && property.getDoc() != null) {
                  myBody.add(": ").add(property.getDoc()).add(BR);
                }
 else {
                  final PyFunction getter=property.getGetter().valueOrNull();
                  if (getter != null && getter != myElement) {
                    PyStringLiteralExpression docstring=getter.getDocStringExpression();
                    if (docstring != null) {
                      myProlog.add(BR).addWith(TagItalic,$("Copied from getter:")).add(BR).add(docstring.getStringValue());
                    }
                  }
                  myBody.add(BR);
                }
                myBody.add(BR);
                if (accessor.isDefined() && accessor.value() == null)                 followed=null;
                if (dir == AccessDirection.READ)                 accessor_kind="Getter";
 else                 if (dir == AccessDirection.WRITE)                 accessor_kind="Setter";
 else                 accessor_kind="Deleter";
                if (followed != null)                 myEpilog.addWith(TagSmall,$(BR,BR,accessor_kind," of property")).add(BR);
              }
            }
          }
        }
      }
    }
  }
  if (myProlog.isEmpty() && !is_property)   myProlog.add(reassign_cat);
  if (followed instanceof PyDocStringOwner) {
    String docString=null;
    PyStringLiteralExpression doc_expr=((PyDocStringOwner)followed).getDocStringExpression();
    if (doc_expr != null)     docString=doc_expr.getStringValue();
    if (followed instanceof PyClass) {
      cls=(PyClass)followed;
      myBody.add(PythonDocumentationProvider.describeDecorators(cls,TagItalic,BR,LCombUp));
      myBody.add(PythonDocumentationProvider.describeClass(cls,TagBold,true,false));
    }
 else     if (followed instanceof PyFunction) {
      PyFunction fun=(PyFunction)followed;
      if (!is_property) {
        cls=fun.getContainingClass();
        if (cls != null) {
          myBody.addWith(TagSmall,PythonDocumentationProvider.describeClass(cls,TagCode,true,true)).add(BR).add(BR);
        }
      }
 else       cls=null;
      myBody.add(PythonDocumentationProvider.describeDecorators(fun,TagItalic,BR,LCombUp)).add(PythonDocumentationProvider.describeFunction(fun,TagBold,LCombUp));
      if (docString == null) {
        addInheritedDocString(fun,cls);
      }
    }
 else     if (followed instanceof PyFile) {
      addModulePath((PyFile)followed);
    }
    if (docString != null) {
      myBody.add(BR);
      addFormattedDocString(myElement,docString,myBody,myEpilog);
    }
  }
 else   if (is_property) {
    String accessor_message;
    if (followed != null)     accessor_message="Declaration: ";
 else     accessor_message=accessor_kind + " is not defined.";
    myBody.addWith(TagItalic,$(accessor_message)).add(BR);
    if (followed != null)     myBody.add(combUp(PyUtil.getReadableRepr(followed,false)));
  }
 else   if (followed != null && outer instanceof PyReferenceExpression) {
    Class[] uninteresting_classes={PyTargetExpression.class,PyAugAssignmentStatement.class};
    boolean is_interesting=myElement != null && !PyUtil.instanceOf(myElement,uninteresting_classes);
    if (is_interesting) {
      PsiElement old_parent=myElement.getParent();
      is_interesting=!PyUtil.instanceOf(old_parent,uninteresting_classes);
    }
    if (is_interesting) {
      myBody.add(combUp(PyUtil.getReadableRepr(followed,false)));
    }
  }
  if (followed instanceof PyNamedParameter) {
    addParameterDoc((PyNamedParameter)followed);
  }
  if (myBody.isEmpty() && myEpilog.isEmpty())   return null;
 else   return myResult.toString();
}
