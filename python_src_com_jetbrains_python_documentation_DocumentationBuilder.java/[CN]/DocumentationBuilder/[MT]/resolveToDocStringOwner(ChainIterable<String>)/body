{
  if (myElement instanceof PyTargetExpression) {
    final String target_name=myElement.getText();
    prolog_cat.addWith(TagSmall,$(PyBundle.message("QDOC.assigned.to.$0",target_name)).addItem(BR));
    final PyExpression assignedValue=((PyTargetExpression)myElement).findAssignedValue();
    if (assignedValue instanceof PyReferenceExpression) {
      final PsiElement resolved=resolveWithoutImplicits((PyReferenceExpression)assignedValue);
      if (resolved != null) {
        return resolved;
      }
    }
    return assignedValue;
  }
  if (myElement instanceof PyReferenceExpression) {
    prolog_cat.addWith(TagSmall,$(PyBundle.message("QDOC.assigned.to.$0",myElement.getText())).addItem(BR));
    return resolveWithoutImplicits((PyReferenceExpression)myElement);
  }
  if (myElement instanceof PyCallExpression) {
    final PyCallExpression call=(PyCallExpression)myElement;
    Pair<String,PyFunction> wrap_info=PyCallExpressionHelper.interpretAsModifierWrappingCall(call,myOriginalElement);
    if (wrap_info != null) {
      String wrapper_name=wrap_info.getFirst();
      PyFunction wrapped_func=wrap_info.getSecond();
      prolog_cat.addWith(TagSmall,$(PyBundle.message("QDOC.wrapped.in.$0",wrapper_name)).addItem(BR));
      return wrapped_func;
    }
  }
  return myElement;
}
