{
  super.execute(editor,charTyped,dataContext);
  if (charTyped != ' ') {
    return;
  }
  Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  VirtualFile vfile=PlatformDataKeys.VIRTUAL_FILE.getData(dataContext);
  if (project != null && vfile != null) {
    PsiFile file=PsiManager.getInstance(project).findFile(vfile);
    if (file != null) {
      int offset=editor.getCaretModel().getOffset();
      PsiElement element=file.findElementAt(offset);
      if (element == null && offset > 1)       element=file.findElementAt(offset - 2);
      int expectedStringStart=editor.getCaretModel().getOffset() - 4;
      if (PythonDocCommentUtil.atDocCommentStart(element,expectedStringStart)) {
        PythonDocumentationProvider provider=new PythonDocumentationProvider();
        PyFunction fun=PsiTreeUtil.getParentOfType(element,PyFunction.class);
        if (fun != null) {
          String docStub=provider.generateDocumentationContentStub(fun,false);
          docStub+=element.getParent().getText().substring(0,3);
          if (docStub != null && docStub.length() != 0) {
            editor.getDocument().insertString(editor.getCaretModel().getOffset(),docStub);
            PyDocumentationSettings documentationSettings=PyDocumentationSettings.getInstance(project);
            if (documentationSettings.myDocStringFormat != DocStringFormat.PLAIN)             editor.getCaretModel().moveCaretRelatively(100,1,false,false,false);
            return;
          }
        }
        PyElement klass=PsiTreeUtil.getParentOfType(element,PyClass.class,PyFile.class);
        if (klass != null) {
          editor.getDocument().insertString(editor.getCaretModel().getOffset(),PythonDocCommentUtil.generateDocForClass(klass,element.getParent().getText().substring(0,3)));
          return;
        }
      }
    }
  }
}
