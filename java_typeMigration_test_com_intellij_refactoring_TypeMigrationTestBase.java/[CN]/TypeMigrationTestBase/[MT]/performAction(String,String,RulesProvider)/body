{
  PsiClass aClass=myJavaFacade.findClass(className,GlobalSearchScope.allScope(getProject()));
  assertNotNull("Class " + className + " not found",aClass);
  final PsiElement migrationElement=provider.victims(aClass);
  final PsiType migrationType=provider.migrationType(migrationElement);
  final TypeMigrationRules rules=new TypeMigrationRules();
  rules.setBoundScope(new LocalSearchScope(aClass.getContainingFile()));
  final TestTypeMigrationProcessor pr=new TestTypeMigrationProcessor(getProject(),migrationElement,migrationType,rules);
  final UsageInfo[] usages=pr.findUsages();
  final String report=pr.getLabeler().getMigrationReport();
  WriteCommandAction.runWriteCommandAction(null,new Runnable(){
    public void run(){
      pr.performRefactoring(usages);
    }
  }
);
  String itemName=className + ".items";
  String patternName=getTestDataPath() + getTestRoot() + getTestName(true)+ "/after/"+ itemName;
  File patternFile=new File(patternName);
  if (!patternFile.exists()) {
    PrintWriter writer=new PrintWriter(new FileOutputStream(patternFile));
    try {
      writer.print(report);
      writer.close();
    }
  finally {
      writer.close();
    }
    System.out.println("Pattern not found, file " + patternName + " created.");
    LocalFileSystem.getInstance().refreshAndFindFileByIoFile(patternFile);
  }
  File graFile=new File(FileUtil.getTempDirectory() + File.separator + rootDir+ File.separator+ itemName);
  PrintWriter writer=new PrintWriter(new FileOutputStream(graFile));
  try {
    writer.print(report);
    writer.close();
  }
  finally {
    writer.close();
  }
  LocalFileSystem.getInstance().refreshAndFindFileByIoFile(graFile);
  FileDocumentManager.getInstance().saveAllDocuments();
}
