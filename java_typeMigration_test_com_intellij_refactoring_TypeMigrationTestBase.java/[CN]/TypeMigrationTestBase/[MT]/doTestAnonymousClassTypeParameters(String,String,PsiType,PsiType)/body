{
  final RulesProvider provider=new RulesProvider(){
    @Override public TypeMigrationRules provide() throws Exception {
      final TypeMigrationRules rules=new TypeMigrationRules(fromType);
      rules.setMigrationRootType(toType);
      return rules;
    }
    @Override public PsiElement victims(    PsiClass aClass){
      for (      PsiLocalVariable variable : PsiTreeUtil.findChildrenOfType(aClass,PsiLocalVariable.class)) {
        if (assignmentVariableName.equals(variable.getName())) {
          final PsiAnonymousClass anonymousClass=PsiTreeUtil.findChildOfType(variable.getInitializer(),PsiAnonymousClass.class);
          assertNotNull(anonymousClass);
          return anonymousClass.getBaseClassReference().getParameterList();
        }
      }
      throw new RuntimeException(String.format("Local variable '%s' isn't found in class '%s'",assignmentVariableName,className));
    }
  }
;
  start(provider,className);
}
