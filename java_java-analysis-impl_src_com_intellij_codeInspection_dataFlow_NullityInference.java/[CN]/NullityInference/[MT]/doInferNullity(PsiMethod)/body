{
  PsiCodeBlock body=method.getBody();
  if (body != null) {
    final AtomicBoolean hasErrors=new AtomicBoolean();
    final AtomicBoolean hasNotNulls=new AtomicBoolean();
    final AtomicBoolean hasNulls=new AtomicBoolean();
    final AtomicBoolean hasUnknowns=new AtomicBoolean();
    final Set<PsiMethod> delegates=ContainerUtil.newLinkedHashSet();
    body.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitReturnStatement(      PsiReturnStatement statement){
        PsiExpression value=statement.getReturnValue();
        if (value == null) {
          hasErrors.set(true);
        }
 else         if (value instanceof PsiLiteralExpression) {
          if (value.textMatches(PsiKeyword.NULL)) {
            hasNulls.set(true);
          }
 else {
            hasNotNulls.set(true);
          }
        }
 else         if (value instanceof PsiLambdaExpression || value.getType() instanceof PsiPrimitiveType) {
          hasNotNulls.set(true);
        }
 else         if (value instanceof PsiMethodCallExpression) {
          PsiMethod target=((PsiMethodCallExpression)value).resolveMethod();
          if (target == null) {
            hasUnknowns.set(true);
          }
 else {
            delegates.add(target);
          }
        }
 else {
          hasUnknowns.set(true);
        }
        super.visitReturnStatement(statement);
      }
      @Override public void visitClass(      PsiClass aClass){
      }
      @Override public void visitLambdaExpression(      PsiLambdaExpression expression){
      }
      @Override public void visitErrorElement(      PsiErrorElement element){
        hasErrors.set(true);
        super.visitErrorElement(element);
      }
    }
);
    if (hasNulls.get()) {
      return Nullness.NULLABLE;
    }
    if (hasErrors.get() || hasUnknowns.get() || delegates.size() > 1) {
      return Nullness.UNKNOWN;
    }
    if (delegates.size() == 1) {
      if (NullableNotNullManager.isNotNull(delegates.iterator().next())) {
        return Nullness.NOT_NULL;
      }
      return Nullness.UNKNOWN;
    }
    if (hasNotNulls.get()) {
      return Nullness.NOT_NULL;
    }
  }
  return Nullness.UNKNOWN;
}
