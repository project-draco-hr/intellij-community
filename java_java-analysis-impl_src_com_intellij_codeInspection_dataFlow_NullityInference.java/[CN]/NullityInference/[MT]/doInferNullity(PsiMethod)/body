{
  PsiCodeBlock body=method.getBody();
  if (body != null) {
    final AtomicBoolean hasErrors=new AtomicBoolean();
    final AtomicBoolean hasNotNulls=new AtomicBoolean();
    final AtomicBoolean hasNulls=new AtomicBoolean();
    final AtomicBoolean hasUnknowns=new AtomicBoolean();
    final List<PsiMethodCallExpression> calls=ContainerUtil.newArrayList();
    body.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitReturnStatement(      PsiReturnStatement statement){
        PsiExpression value=statement.getReturnValue();
        if (value == null) {
          hasErrors.set(true);
        }
 else {
          if (value instanceof PsiLiteralExpression) {
            if (value.textMatches(PsiKeyword.NULL)) {
              hasNulls.set(true);
            }
 else {
              hasNotNulls.set(true);
            }
          }
 else           if (value instanceof PsiMethodCallExpression) {
            calls.add((PsiMethodCallExpression)value);
          }
 else {
            hasUnknowns.set(true);
          }
        }
        super.visitReturnStatement(statement);
      }
      @Override public void visitErrorElement(      PsiErrorElement element){
        hasErrors.set(true);
        super.visitErrorElement(element);
      }
    }
);
    if (hasNulls.get()) {
      return Nullness.NULLABLE;
    }
    if (calls.size() > 1) {
      return Nullness.UNKNOWN;
    }
    if (calls.size() == 1) {
      PsiMethod target=calls.get(0).resolveMethod();
      if (target != null && NullableNotNullManager.isNotNull(target)) {
        return Nullness.NOT_NULL;
      }
      return Nullness.UNKNOWN;
    }
    if (hasUnknowns.get()) {
      return Nullness.UNKNOWN;
    }
    if (hasNotNulls.get()) {
      return Nullness.NOT_NULL;
    }
  }
  return Nullness.UNKNOWN;
}
