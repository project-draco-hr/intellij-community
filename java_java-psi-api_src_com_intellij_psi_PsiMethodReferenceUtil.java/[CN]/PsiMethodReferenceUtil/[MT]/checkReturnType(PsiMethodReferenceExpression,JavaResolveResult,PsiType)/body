{
  final QualifierResolveResult qualifierResolveResult=getQualifierResolveResult(expression);
  final PsiElement resolve=result.getElement();
  if (resolve instanceof PsiMethod) {
    PsiSubstitutor subst=result.getSubstitutor();
    final PsiType interfaceReturnType=LambdaUtil.getFunctionalInterfaceReturnType(functionalInterfaceType);
    PsiType returnType=PsiTypesUtil.patchMethodGetClassReturnType(expression,expression,(PsiMethod)resolve,null,PsiUtil.getLanguageLevel(expression));
    if (returnType == null) {
      returnType=((PsiMethod)resolve).getReturnType();
    }
    PsiType methodReturnType=subst.substitute(returnType);
    if (interfaceReturnType != null && interfaceReturnType != PsiType.VOID) {
      if (methodReturnType == null) {
        methodReturnType=JavaPsiFacade.getElementFactory(expression.getProject()).createType(((PsiMethod)resolve).getContainingClass(),subst);
      }
      if (!TypeConversionUtil.isAssignable(interfaceReturnType,methodReturnType,false)) {
        return "Bad return type in method reference: cannot convert " + methodReturnType.getCanonicalText() + " to "+ interfaceReturnType.getCanonicalText();
      }
    }
  }
  return null;
}
