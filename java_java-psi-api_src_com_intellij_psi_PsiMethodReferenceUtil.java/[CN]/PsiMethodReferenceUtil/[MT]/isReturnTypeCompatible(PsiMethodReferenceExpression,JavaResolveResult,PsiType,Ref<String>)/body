{
  final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(functionalInterfaceType);
  final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(resolveResult);
  if (interfaceMethod != null) {
    final PsiType interfaceReturnType=LambdaUtil.getFunctionalInterfaceReturnType(functionalInterfaceType);
    if (PsiType.VOID.equals(interfaceReturnType) || interfaceReturnType == null) {
      return true;
    }
    PsiSubstitutor subst=result.getSubstitutor();
    PsiType methodReturnType=null;
    PsiClass containingClass=null;
    final PsiElement resolve=result.getElement();
    if (resolve instanceof PsiMethod) {
      containingClass=((PsiMethod)resolve).getContainingClass();
      methodReturnType=PsiTypesUtil.patchMethodGetClassReturnType(expression,(PsiMethod)resolve);
      if (methodReturnType == null) {
        methodReturnType=((PsiMethod)resolve).getReturnType();
        if (PsiType.VOID.equals(methodReturnType)) {
          return false;
        }
        PsiClass qContainingClass=getQualifierResolveResult(expression).getContainingClass();
        if (qContainingClass != null && containingClass != null && isReceiverType(getFirstParameterType(functionalInterfaceType,expression),qContainingClass,subst)) {
          subst=TypeConversionUtil.getClassSubstitutor(containingClass,qContainingClass,subst);
          LOG.assertTrue(subst != null);
        }
        methodReturnType=subst.substitute(methodReturnType);
      }
    }
 else     if (resolve instanceof PsiClass) {
      if (resolve == JavaPsiFacade.getElementFactory(expression.getProject()).getArrayClass(PsiUtil.getLanguageLevel(resolve))) {
        final PsiTypeParameter[] typeParameters=((PsiClass)resolve).getTypeParameters();
        if (typeParameters.length == 1) {
          final PsiType arrayComponentType=subst.substitute(typeParameters[0]);
          if (arrayComponentType == null) {
            return false;
          }
          methodReturnType=arrayComponentType.createArrayType();
        }
      }
      containingClass=(PsiClass)resolve;
    }
    if (methodReturnType == null) {
      if (containingClass == null) {
        return false;
      }
      methodReturnType=JavaPsiFacade.getElementFactory(expression.getProject()).createType(containingClass,subst);
    }
    methodReturnType=PsiUtil.captureToplevelWildcards(methodReturnType,expression);
    if (TypeConversionUtil.isAssignable(interfaceReturnType,methodReturnType)) {
      return true;
    }
    if (errorMessage != null) {
      errorMessage.set("Bad return type in method reference: " + "cannot convert " + methodReturnType.getCanonicalText() + " to "+ interfaceReturnType.getCanonicalText());
    }
  }
  return false;
}
