{
  SoftReference<Map<String,PsiClass[]>> ref=myClassCache;
  Map<String,PsiClass[]> map=SoftReference.dereference(ref);
  if (map == null) {
    myClassCache=new SoftReference<Map<String,PsiClass[]>>(map=new ConcurrentSoftValueHashMap<String,PsiClass[]>());
  }
  PsiClass[] classes=map.get(name);
  if (classes != null) {
    return classes;
  }
  GlobalSearchScope scope=new EverythingGlobalScope(getProject());
  if (DumbService.getInstance(getProject()).isDumb()) {
    if (ref == null) {
      for (      PsiClass psiClass : getClasses(scope)) {
        String psiClassName=psiClass.getName();
        if (psiClassName != null) {
          PsiClass[] existing=map.get(psiClassName);
          map.put(psiClassName,existing == null ? new PsiClass[]{psiClass} : ArrayUtil.append(existing,psiClass));
        }
      }
    }
    classes=map.get(name);
    return classes == null ? PsiClass.EMPTY_ARRAY : classes;
  }
  final String qName=getQualifiedName();
  final String classQName=!qName.isEmpty() ? qName + "." + name : name;
  map.put(name,classes=getFacade().findClasses(classQName,scope));
  return classes;
}
