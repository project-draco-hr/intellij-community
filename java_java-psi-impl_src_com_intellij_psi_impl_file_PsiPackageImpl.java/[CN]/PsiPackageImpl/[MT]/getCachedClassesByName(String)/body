{
  if (DumbService.getInstance(getProject()).isDumb()) {
    return getCachedClassInDumbMode(name);
  }
  Map<String,PsiClass[]> map=SoftReference.dereference(myClassCache);
  if (map == null) {
    myClassCache=new SoftReference<Map<String,PsiClass[]>>(map=new ConcurrentSoftValueHashMap<String,PsiClass[]>());
  }
  PsiClass[] classes=map.get(name);
  if (classes != null) {
    return classes;
  }
  final String qName=getQualifiedName();
  final String classQName=!qName.isEmpty() ? qName + "." + name : name;
  map.put(name,classes=getFacade().findClasses(classQName,new EverythingGlobalScope(getProject())));
  return classes;
}
