{
  GlobalSearchScope scope=place.getResolveScope();
  processor.handleEvent(PsiScopeProcessor.Event.SET_DECLARATION_HOLDER,this);
  ElementClassHint classHint=processor.getHint(ElementClassHint.KEY);
  final Condition<String> nameCondition=processor.getHint(JavaCompletionHints.NAME_FILTER);
  NameHint providedNameHint=processor.getHint(NameHint.KEY);
  final String providedName=providedNameHint == null ? null : providedNameHint.getName(state);
  if (classHint == null || classHint.shouldProcess(ElementClassHint.DeclarationKind.CLASS)) {
    if (providedName != null) {
      final PsiClass[] classes=findClassByShortName(providedName,scope);
      if (!processClasses(processor,state,classes,Conditions.<String>alwaysTrue()))       return false;
    }
 else {
      PsiClass[] classes=getClasses(scope);
      if (!processClasses(processor,state,classes,nameCondition != null ? nameCondition : Conditions.<String>alwaysTrue()))       return false;
    }
  }
  if (classHint == null || classHint.shouldProcess(ElementClassHint.DeclarationKind.PACKAGE)) {
    if (providedName != null) {
      PsiPackage aPackage=findSubPackageByName(providedName);
      if (aPackage != null) {
        if (!processor.execute(aPackage,state))         return false;
      }
    }
 else {
      PsiPackage[] packs=getSubPackages(scope);
      for (      PsiPackage pack : packs) {
        final String packageName=pack.getName();
        if (packageName == null)         continue;
        if (!PsiNameHelper.getInstance(myManager.getProject()).isIdentifier(packageName,PsiUtil.getLanguageLevel(this))) {
          continue;
        }
        if (!processor.execute(pack,state)) {
          return false;
        }
      }
    }
  }
  return true;
}
