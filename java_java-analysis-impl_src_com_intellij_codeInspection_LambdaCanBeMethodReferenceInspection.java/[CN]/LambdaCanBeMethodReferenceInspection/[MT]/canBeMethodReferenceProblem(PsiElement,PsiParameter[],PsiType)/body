{
  final PsiCallExpression callExpression=extractMethodCallFromBlock(body);
  if (callExpression instanceof PsiNewExpression && ((PsiNewExpression)callExpression).getAnonymousClass() != null) {
    return null;
  }
  final String methodReferenceText=createMethodReferenceText(callExpression,functionalInterfaceType,parameters);
  if (methodReferenceText != null) {
    final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(callExpression.getProject());
    final PsiMethodReferenceExpression methodReferenceExpression=(PsiMethodReferenceExpression)elementFactory.createExpressionFromText(methodReferenceText,callExpression);
    final Map<PsiElement,PsiType> map=LambdaUtil.getFunctionalTypeMap();
    try {
      map.put(methodReferenceExpression,functionalInterfaceType);
      final JavaResolveResult result=methodReferenceExpression.advancedResolve(false);
      final PsiElement element=result.getElement();
      if (element != null && result.isAccessible()) {
        if (element instanceof PsiMethod && !isSimpleCall(parameters,callExpression,(PsiMethod)element)) {
          return null;
        }
        if (!(element instanceof PsiMethod)) {
          return callExpression;
        }
        final PsiMethod method=callExpression.resolveMethod();
        if (method == null) {
          LOG.error(callExpression);
          return null;
        }
        return MethodSignatureUtil.areSignaturesEqual((PsiMethod)element,method) ? callExpression : null;
      }
    }
  finally {
      map.remove(methodReferenceExpression);
    }
  }
  return null;
}
