{
  if (psiMethod.hasModifierProperty(PsiModifier.STATIC)) {
    return null;
  }
  final PsiMethod nonAmbiguousMethod=getNonAmbiguousReceiver(parameters,psiMethod);
  if (nonAmbiguousMethod == null) {
    return null;
  }
  final PsiClass nonAmbiguousContainingClass=nonAmbiguousMethod.getContainingClass();
  if (!containingClass.equals(nonAmbiguousContainingClass)) {
    return getClassReferenceName(nonAmbiguousContainingClass);
  }
  if (containingClass.isPhysical() && qualifierExpression instanceof PsiReferenceExpression) {
    final PsiElement resolve=((PsiReferenceExpression)qualifierExpression).resolve();
    final boolean parameterWithoutFormalType=resolve instanceof PsiParameter && ((PsiParameter)resolve).getTypeElement() == null;
    if (parameterWithoutFormalType && ArrayUtil.find(parameters,resolve) > -1) {
      return getClassReferenceName(containingClass);
    }
  }
  final PsiType qualifierExpressionType=qualifierExpression.getType();
  if (qualifierExpressionType != null && !FunctionalInterfaceParameterizationUtil.isWildcardParameterized(qualifierExpressionType)) {
    try {
      final String canonicalText=qualifierExpressionType.getCanonicalText();
      JavaPsiFacade.getElementFactory(containingClass.getProject()).createExpressionFromText(canonicalText + "::foo",qualifierExpression);
      return canonicalText;
    }
 catch (    IncorrectOperationException ignore) {
    }
  }
  return getClassReferenceName(containingClass);
}
