{
  String methodName=psiMethod.getName();
  PsiClass containingClass=psiMethod.getContainingClass();
  if (containingClass == null)   return null;
  final PsiMethod[] psiMethods=containingClass.findMethodsByName(methodName,false);
  if (psiMethods.length == 1)   return psiMethod;
  for (  PsiMethod method : psiMethods) {
    PsiParameter[] candidateParams=method.getParameterList().getParameters();
    if (candidateParams.length == parameters.length) {
      if (TypeConversionUtil.areTypesConvertible(candidateParams[0].getType(),parameters[0].getType())) {
        final PsiMethod[] deepestSuperMethods=psiMethod.findDeepestSuperMethods();
        if (deepestSuperMethods.length > 0) {
          for (          PsiMethod superMethod : deepestSuperMethods) {
            PsiMethod validSuperMethod=ensureNonAmbiguousMethod(parameters,superMethod);
            if (validSuperMethod != null)             return validSuperMethod;
          }
        }
      }
      return null;
    }
  }
  return psiMethod;
}
