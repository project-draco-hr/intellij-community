{
  final PsiCallExpression callExpression=extractMethodCallFromBlock(body);
  if (callExpression instanceof PsiNewExpression) {
    final PsiNewExpression newExpression=(PsiNewExpression)callExpression;
    if (newExpression.getAnonymousClass() != null || newExpression.getArrayInitializer() != null) {
      return null;
    }
  }
  final String methodReferenceText=createMethodReferenceText(callExpression,functionalInterfaceType,parameters);
  if (methodReferenceText != null) {
    LOG.assertTrue(callExpression != null);
    final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(callExpression.getProject());
    final PsiMethodReferenceExpression methodReferenceExpression=(PsiMethodReferenceExpression)elementFactory.createExpressionFromText(methodReferenceText,context != null ? context : callExpression);
    final Map<PsiElement,PsiType> map=LambdaUtil.getFunctionalTypeMap();
    try {
      map.put(methodReferenceExpression,functionalInterfaceType);
      final JavaResolveResult result=methodReferenceExpression.advancedResolve(false);
      final PsiElement element=result.getElement();
      if (element != null && result.isAccessible() && !(result instanceof MethodCandidateInfo && !((MethodCandidateInfo)result).isApplicable())) {
        if (element instanceof PsiMethod && !isSimpleCall(parameters,callExpression,(PsiMethod)element)) {
          return null;
        }
        if (!(element instanceof PsiMethod)) {
          LOG.assertTrue(callExpression instanceof PsiNewExpression);
          if (((PsiNewExpression)callExpression).getQualifier() != null) {
            return null;
          }
          final PsiExpression[] dims=((PsiNewExpression)callExpression).getArrayDimensions();
          if (dims.length == 1 && parameters.length == 1) {
            if (!resolvesToParameter(dims[0],parameters[0])) {
              return null;
            }
          }
 else           if (dims.length > 0) {
            return null;
          }
          return callExpression;
        }
        final PsiMethod method=callExpression.resolveMethod();
        if (method != null) {
          return MethodSignatureUtil.areSignaturesEqual((PsiMethod)element,method) ? callExpression : null;
        }
      }
    }
  finally {
      map.remove(methodReferenceExpression);
    }
  }
  return null;
}
