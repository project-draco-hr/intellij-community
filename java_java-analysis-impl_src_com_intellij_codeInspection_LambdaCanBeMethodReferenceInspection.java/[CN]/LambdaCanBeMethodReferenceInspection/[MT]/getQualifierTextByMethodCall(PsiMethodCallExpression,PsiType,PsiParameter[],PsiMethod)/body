{
  final PsiExpression qualifierExpression=methodCall.getMethodExpression().getQualifierExpression();
  final PsiClass containingClass=psiMethod.getContainingClass();
  LOG.assertTrue(containingClass != null);
  if (qualifierExpression != null) {
    boolean isReceiverType=PsiMethodReferenceUtil.isReceiverType(functionalInterfaceType,containingClass,psiMethod);
    return isReceiverType ? composeReceiverQualifierText(parameters,psiMethod,containingClass,qualifierExpression) : qualifierExpression.getText();
  }
 else {
    if (psiMethod.hasModifierProperty(PsiModifier.STATIC)) {
      return getClassReferenceName(containingClass);
    }
 else {
      final PsiClass parentContainingClass=PsiTreeUtil.getParentOfType(methodCall,PsiClass.class);
      PsiClass treeContainingClass=parentContainingClass;
      while (treeContainingClass != null && !InheritanceUtil.isInheritorOrSelf(treeContainingClass,containingClass,true)) {
        treeContainingClass=PsiTreeUtil.getParentOfType(treeContainingClass,PsiClass.class,true);
      }
      if (treeContainingClass != null && containingClass != parentContainingClass && treeContainingClass != parentContainingClass) {
        final String treeContainingClassName=treeContainingClass.getName();
        if (treeContainingClassName == null) {
          return null;
        }
        return treeContainingClassName + ".this";
      }
 else {
        return "this";
      }
    }
  }
}
