{
  final PsiExpression expression=LambdaUtil.extractSingleExpressionFromBody(body);
  if (expression == null) {
    return null;
  }
  if (expression instanceof PsiNewExpression) {
    if (checkQualifier(((PsiNewExpression)expression).getQualifier())) {
      return expression;
    }
  }
 else   if (expression instanceof PsiMethodCallExpression) {
    if (checkQualifier(((PsiMethodCallExpression)expression).getMethodExpression().getQualifier())) {
      return expression;
    }
  }
  if (expression instanceof PsiInstanceOfExpression && REPLACE_INSTANCEOF) {
    return expression;
  }
 else   if (expression instanceof PsiBinaryExpression && REPLACE_NULL_CHECK) {
    IElementType tokenType=((PsiBinaryExpression)expression).getOperationTokenType();
    if (JavaTokenType.EQEQ.equals(tokenType) || JavaTokenType.NE.equals(tokenType)) {
      if (ExpressionUtils.isNullLiteral(((PsiBinaryExpression)expression).getLOperand()) || ExpressionUtils.isNullLiteral(((PsiBinaryExpression)expression).getROperand())) {
        return expression;
      }
    }
  }
 else   if (expression instanceof PsiTypeCastExpression && REPLACE_CAST) {
    PsiTypeElement typeElement=((PsiTypeCastExpression)expression).getCastType();
    if (typeElement != null) {
      PsiJavaCodeReferenceElement refs=typeElement.getInnermostComponentReferenceElement();
      if (refs != null && refs.getParameterList() != null && refs.getParameterList().getTypeParameterElements().length != 0) {
        return null;
      }
      PsiType type=typeElement.getType();
      if (type instanceof PsiPrimitiveType || PsiUtil.resolveClassInType(type) instanceof PsiTypeParameter)       return null;
      return expression;
    }
  }
  return null;
}
