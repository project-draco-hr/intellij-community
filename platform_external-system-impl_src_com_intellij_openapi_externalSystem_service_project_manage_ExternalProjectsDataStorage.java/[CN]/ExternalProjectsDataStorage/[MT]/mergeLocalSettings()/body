{
  for (  ExternalSystemManager<?,?,?,?,?> manager : ExternalSystemApiUtil.getAllManagers()) {
    final ProjectSystemId systemId=manager.getSystemId();
    AbstractExternalSystemLocalSettings settings=manager.getLocalSettingsProvider().fun(myProject);
    final Map<ExternalProjectPojo,Collection<ExternalProjectPojo>> availableProjects=settings.getAvailableProjects();
    final Map<String,Collection<ExternalTaskPojo>> availableTasks=settings.getAvailableTasks();
    for (    Map.Entry<ExternalProjectPojo,Collection<ExternalProjectPojo>> entry : availableProjects.entrySet()) {
      final ExternalProjectPojo projectPojo=entry.getKey();
      final String externalProjectPath=projectPojo.getPath();
      final Pair<ProjectSystemId,String> key=Pair.create(systemId,externalProjectPath);
      InternalExternalProjectInfo externalProjectInfo=myExternalRootProjects.get(key);
      if (externalProjectInfo == null) {
        final DataNode<ProjectData> dataNode=convert(systemId,projectPojo,entry.getValue(),availableTasks);
        externalProjectInfo=new InternalExternalProjectInfo(systemId,externalProjectPath,dataNode);
        myExternalRootProjects.put(key,externalProjectInfo);
        changed.set(true);
      }
      ExternalProjectSettings linkedProjectSettings=manager.getSettingsProvider().fun(myProject).getLinkedProjectSettings(externalProjectPath);
      if (linkedProjectSettings != null && ContainerUtil.isEmpty(linkedProjectSettings.getModules())) {
        final Set<String> modulePaths=ContainerUtil.map2Set(ExternalSystemApiUtil.findAllRecursively(externalProjectInfo.getExternalProjectStructure(),ProjectKeys.MODULE),new Function<DataNode<ModuleData>,String>(){
          @Override public String fun(          DataNode<ModuleData> node){
            return node.getData().getLinkedExternalProjectPath();
          }
        }
);
        linkedProjectSettings.setModules(modulePaths);
      }
    }
  }
}
