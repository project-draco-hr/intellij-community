{
  final List<UsageInfo> allUsages=new ArrayList<>();
  final List<UsageInfo> usagesToSkip=new ArrayList<>();
  myConflicts=new MultiMap<>();
  for (  PsiElement element : myElementsToMove) {
    String newName=getNewQName(element);
    if (newName == null)     continue;
    final UsageInfo[] usages=MoveClassesOrPackagesUtil.findUsages(element,mySearchInComments,mySearchInNonJavaFiles,newName);
    final ArrayList<UsageInfo> infos=new ArrayList<>(Arrays.asList(usages));
    allUsages.addAll(infos);
    if (Comparing.strEqual(newName,getOldQName(element))) {
      usagesToSkip.addAll(infos);
    }
    if (element instanceof PsiPackage) {
      for (      PsiDirectory directory : ((PsiPackage)element).getDirectories()) {
        final UsageInfo[] dirUsages=MoveClassesOrPackagesUtil.findUsages(directory,mySearchInComments,mySearchInNonJavaFiles,newName);
        allUsages.addAll(new ArrayList<>(Arrays.asList(dirUsages)));
      }
    }
  }
  myMoveDestination.analyzeModuleConflicts(Arrays.asList(myElementsToMove),myConflicts,allUsages.toArray(new UsageInfo[allUsages.size()]));
  final UsageInfo[] usageInfos=allUsages.toArray(new UsageInfo[allUsages.size()]);
  detectPackageLocalsMoved(usageInfos,myConflicts);
  detectPackageLocalsUsed(myConflicts);
  allUsages.removeAll(usagesToSkip);
  return UsageViewUtil.removeDuplicatedUsages(allUsages.toArray(new UsageInfo[allUsages.size()]));
}
