{
  final PsiClass psiClass=PsiTreeUtil.getParentOfType(originalPosition,PsiClass.class);
  if (psiClass != null) {
    for (    PsiMethod psiMethod : psiClass.getMethods()) {
      final PsiType returnType=psiMethod.getReturnType();
      if (isInstanceMethodWithAppropriateReturnType(expectedReturnType,psiMethod,returnType) && areParameterTypesAppropriate(psiMethod,params,substitutor,0)) {
        LookupElement methodRefLookupElement=LookupElementBuilder.create(psiMethod).withPresentableText("this::" + psiMethod.getName()).withInsertHandler(new InsertHandler<LookupElement>(){
          @Override public void handleInsert(          InsertionContext context,          LookupElement item){
            final int startOffset=context.getStartOffset();
            final Document document=context.getDocument();
            document.insertString(startOffset,"this::");
          }
        }
).withTypeText(functionalInterfaceType.getPresentableText()).withIcon(AllIcons.Nodes.MethodReference).withAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);
        result.add(methodRefLookupElement);
      }
    }
  }
}
