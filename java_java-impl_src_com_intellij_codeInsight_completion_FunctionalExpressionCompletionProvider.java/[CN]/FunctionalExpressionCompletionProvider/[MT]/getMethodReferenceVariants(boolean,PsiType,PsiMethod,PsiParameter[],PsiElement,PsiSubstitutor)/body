{
  List<LookupElement> result=new ArrayList<>();
  final PsiType expectedReturnType=substitutor.substitute(functionalInterfaceMethod.getReturnType());
  if (expectedReturnType != null) {
    if (params.length > 0) {
      result.addAll(collectVariantsByReceiver(!smart,functionalInterfaceType,params,originalPosition,substitutor,expectedReturnType));
    }
    result.addAll(collectThisVariants(functionalInterfaceType,params,originalPosition,substitutor,expectedReturnType));
    final PsiClass psiClass=PsiUtil.resolveClassInType(expectedReturnType);
    if (psiClass != null && !(psiClass instanceof PsiTypeParameter)) {
      if (expectedReturnType.getArrayDimensions() == 0) {
        final PsiMethod[] constructors=psiClass.getConstructors();
        for (        PsiMethod psiMethod : constructors) {
          if (areParameterTypesAppropriate(psiMethod,params,substitutor,0)) {
            result.add(createConstructorReferenceLookup(functionalInterfaceType,expectedReturnType));
          }
        }
        if (constructors.length == 0 && params.length == 0) {
          result.add(createConstructorReferenceLookup(functionalInterfaceType,expectedReturnType));
        }
      }
 else       if (params.length == 1 && PsiType.INT.equals(params[0].getType())) {
        result.add(createConstructorReferenceLookup(functionalInterfaceType,expectedReturnType));
      }
    }
  }
  return result;
}
