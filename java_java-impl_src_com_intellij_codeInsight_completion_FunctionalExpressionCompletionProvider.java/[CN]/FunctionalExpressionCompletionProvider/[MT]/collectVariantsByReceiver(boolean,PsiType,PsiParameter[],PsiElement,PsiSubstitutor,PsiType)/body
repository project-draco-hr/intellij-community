{
  List<LookupElement> result=new ArrayList<>();
  final PsiType functionalInterfaceParamType=substitutor.substitute(params[0].getType());
  final PsiClass paramClass=PsiUtil.resolveClassInClassTypeOnly(functionalInterfaceParamType);
  if (paramClass != null && !paramClass.hasTypeParameters()) {
    final Set<String> visited=new HashSet<>();
    for (    PsiMethod psiMethod : paramClass.getAllMethods()) {
      PsiClass containingClass=psiMethod.getContainingClass();
      PsiClass qualifierClass=containingClass != null ? containingClass : paramClass;
      if (visited.add(psiMethod.getName()) && !psiMethod.hasModifierProperty(PsiModifier.STATIC) && hasAppropriateReturnType(expectedReturnType,psiMethod)&& areParameterTypesAppropriate(psiMethod,params,substitutor,1)&& JavaResolveUtil.isAccessible(psiMethod,null,psiMethod.getModifierList(),originalPosition,null,null)) {
        LookupElement methodRefLookupElement=createMethodRefOnClass(functionalInterfaceType,psiMethod,qualifierClass);
        if (prioritize && containingClass == paramClass) {
          methodRefLookupElement=PrioritizedLookupElement.withPriority(methodRefLookupElement,1);
        }
        result.add(methodRefLookupElement);
      }
    }
  }
  return result;
}
