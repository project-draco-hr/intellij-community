{
  final PsiType functionalInterfaceParamType=substitutor.substitute(params[0].getType());
  final PsiClass paramClass=PsiUtil.resolveClassInClassTypeOnly(functionalInterfaceParamType);
  if (paramClass != null && !paramClass.hasTypeParameters()) {
    final Set<String> visited=new HashSet<String>();
    for (    PsiMethod psiMethod : paramClass.getAllMethods()) {
      final PsiType returnType=psiMethod.getReturnType();
      if (visited.add(psiMethod.getName()) && isInstanceMethodWithAppropriateReturnType(expectedReturnType,psiMethod,returnType) && areParameterTypesAppropriate(psiMethod,params,substitutor,1)&& JavaResolveUtil.isAccessible(psiMethod,null,psiMethod.getModifierList(),originalPosition,null,null)) {
        LookupElement methodRefLookupElement=LookupElementBuilder.create(psiMethod).withPresentableText(paramClass.getName() + "::" + psiMethod.getName()).withInsertHandler(new InsertHandler<LookupElement>(){
          @Override public void handleInsert(          InsertionContext context,          LookupElement item){
            final int startOffset=context.getStartOffset();
            final Document document=context.getDocument();
            final PsiFile file=context.getFile();
            document.insertString(startOffset,"::");
            JavaCompletionUtil.insertClassReference(paramClass,file,startOffset);
          }
        }
).withTypeText(functionalInterfaceType.getPresentableText()).withIcon(AllIcons.Nodes.MethodReference).withAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);
        if (prioritize && psiMethod.getContainingClass() == paramClass) {
          methodRefLookupElement=PrioritizedLookupElement.withPriority(methodRefLookupElement,1);
        }
        result.add(methodRefLookupElement);
      }
    }
  }
}
