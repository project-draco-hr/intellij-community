{
  if (!PsiUtil.isLanguageLevel8OrHigher(parameters.getOriginalFile()))   return Collections.emptyList();
  List<LookupElement> result=ContainerUtil.newArrayList();
  for (  ExpectedTypeInfo expectedType : JavaSmartCompletionContributor.getExpectedTypes(parameters)) {
    final PsiType defaultType=expectedType.getDefaultType();
    if (LambdaUtil.isFunctionalType(defaultType)) {
      final PsiType functionalInterfaceType=FunctionalInterfaceParameterizationUtil.getGroundTargetType(defaultType);
      final PsiMethod functionalInterfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType);
      if (functionalInterfaceMethod != null) {
        PsiParameter[] params=new PsiParameter[0];
        final PsiElement originalPosition=parameters.getPosition();
        final PsiSubstitutor substitutor=LambdaUtil.getSubstitutor(functionalInterfaceMethod,PsiUtil.resolveGenericsClassInType(functionalInterfaceType));
        if (!functionalInterfaceMethod.hasTypeParameters()) {
          params=functionalInterfaceMethod.getParameterList().getParameters();
          final Project project=functionalInterfaceMethod.getProject();
          final JVMElementFactory jvmElementFactory=JVMElementFactories.getFactory(originalPosition.getLanguage(),project);
          final JavaCodeStyleManager javaCodeStyleManager=JavaCodeStyleManager.getInstance(project);
          if (jvmElementFactory != null) {
            params=GenerateMembersUtil.overriddenParameters(params,jvmElementFactory,javaCodeStyleManager,substitutor,originalPosition);
          }
          String paramsString=params.length == 1 ? getParamName(params[0],javaCodeStyleManager,originalPosition) : "(" + StringUtil.join(params,new Function<PsiParameter,String>(){
            @Override public String fun(            PsiParameter parameter){
              return getParamName(parameter,javaCodeStyleManager,originalPosition);
            }
          }
,",") + ")";
          final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);
          PsiLambdaExpression lambdaExpression=(PsiLambdaExpression)JavaPsiFacade.getElementFactory(project).createExpressionFromText(paramsString + " -> {}",null);
          lambdaExpression=(PsiLambdaExpression)codeStyleManager.reformat(lambdaExpression);
          paramsString=lambdaExpression.getParameterList().getText();
          final LookupElementBuilder builder=LookupElementBuilder.create(functionalInterfaceMethod,paramsString).withPresentableText(paramsString + " -> {}").withInsertHandler(new InsertHandler<LookupElement>(){
            @Override public void handleInsert(            InsertionContext context,            LookupElement item){
              final Editor editor=context.getEditor();
              EditorModificationUtil.insertStringAtCaret(editor," -> ");
            }
          }
).withIcon(AllIcons.Nodes.AnonymousClass);
          LookupElement lambdaElement=builder.withAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);
          if (prioritize) {
            lambdaElement=PrioritizedLookupElement.withPriority(lambdaElement,1);
          }
          result.add(lambdaElement);
        }
        if (params.length == 1) {
          final PsiType expectedReturnType=substitutor.substitute(functionalInterfaceMethod.getReturnType());
          if (expectedReturnType != null) {
            final PsiClass paramClass=PsiUtil.resolveClassInClassTypeOnly(params[0].getType());
            if (paramClass != null && !paramClass.hasTypeParameters()) {
              final Set<String> visited=new HashSet<String>();
              for (              PsiMethod psiMethod : paramClass.getAllMethods()) {
                final PsiType returnType=psiMethod.getReturnType();
                if (returnType != null && psiMethod.getParameterList().getParametersCount() == 0 && visited.add(psiMethod.getName()) && !psiMethod.hasModifierProperty(PsiModifier.STATIC) && JavaResolveUtil.isAccessible(psiMethod,null,psiMethod.getModifierList(),originalPosition,null,null) && TypeConversionUtil.isAssignable(expectedReturnType,returnType)) {
                  LookupElement methodRefLookupElement=LookupElementBuilder.create(psiMethod).withPresentableText(paramClass.getName() + "::" + psiMethod.getName()).withInsertHandler(new InsertHandler<LookupElement>(){
                    @Override public void handleInsert(                    InsertionContext context,                    LookupElement item){
                      final int startOffset=context.getStartOffset();
                      final Document document=context.getDocument();
                      final PsiFile file=context.getFile();
                      document.insertString(startOffset,"::");
                      JavaCompletionUtil.insertClassReference(paramClass,file,startOffset);
                    }
                  }
).withIcon(AllIcons.Nodes.AnonymousClass).withAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);
                  if (prioritize && psiMethod.getContainingClass() == paramClass) {
                    methodRefLookupElement=PrioritizedLookupElement.withPriority(methodRefLookupElement,1);
                  }
                  result.add(methodRefLookupElement);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}
