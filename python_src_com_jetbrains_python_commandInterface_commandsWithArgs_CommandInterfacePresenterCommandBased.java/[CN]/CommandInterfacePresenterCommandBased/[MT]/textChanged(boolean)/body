{
  myLastSuggestionTiedToWord=false;
  configureStrategy();
  myView.setSubText(myStrategy.getSubText());
switch (myStrategy.getShowErrorInfo()) {
case NO:
    break;
case FULL:
  myView.showError(false);
break;
case RELATIVE:
myView.showError(true);
break;
}
myView.setBalloons(myStrategy.getBalloonsToShow());
final SuggestionInfo suggestionInfo=myStrategy.getSuggestionInfo();
final List<String> suggestions=new ArrayList<String>(suggestionInfo.getSuggestions());
final String lastPart=getLastPart();
if ((lastPart != null) && myStrategy.isUnknownTextExists()) {
myLastSuggestionTiedToWord=true;
final Iterator<String> iterator=suggestions.iterator();
while (iterator.hasNext()) {
final String textToCheck=iterator.next();
if (!textToCheck.startsWith(lastPart)) {
iterator.remove();
}
}
}
if (!suggestionInfo.myShowOnlyWhenRequested && !suggestions.isEmpty()) {
final SuggestionsBuilder suggestionsBuilder=getBuilderWithHistory();
suggestionsBuilder.add(suggestions);
myView.displaySuggestions(suggestionsBuilder,suggestionInfo.myAbsolute,null);
}
 else {
myView.removeSuggestions();
}
}
