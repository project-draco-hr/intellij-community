{
  if (myInitialized.compareAndSet(false,true)) {
    final MapReduceIndex<K,V,ClassNode> index;
    final Ref<Boolean> rewriteIndex=new Ref<Boolean>(false);
    try {
      final ID<K,V> indexId=getIndexId();
      if (!IndexInfrastructure.getIndexRootDir(indexId).exists()) {
        rewriteIndex.set(true);
      }
      final File storageFile=getStorageFile(indexId);
      final MapIndexStorage<K,V> indexStorage=new MapIndexStorage<K,V>(storageFile,myKeyDescriptor,myValueExternalizer,1024);
      index=new MapReduceIndex<K,V,ClassNode>(indexId,getIndexer(),indexStorage);
      index.setInputIdToDataKeysIndex(new Factory<PersistentHashMap<Integer,Collection<K>>>(){
        @Override public PersistentHashMap<Integer,Collection<K>> create(){
          try {
            return IOUtil.openCleanOrResetBroken(new ThrowableComputable<PersistentHashMap<Integer,Collection<K>>,IOException>(){
              @Override public PersistentHashMap<Integer,Collection<K>> compute() throws IOException {
                return FileBasedIndexImpl.createIdToDataKeysIndex(indexId,myKeyDescriptor,new MemoryIndexStorage<K,V>(indexStorage));
              }
            }
,new Runnable(){
              @Override public void run(){
                FileUtil.delete(getInputIndexStorageFile(getIndexId()));
                rewriteIndex.set(true);
              }
            }
);
          }
 catch (          IOException e) {
            throw new RuntimeException("couldn't create index",e);
          }
        }
      }
);
      final File versionFile=getVersionFile(indexId);
      if (versionFile.exists()) {
        if (versionDiffers(versionFile,getVersion())) {
          rewriteVersion(versionFile,getVersion());
          rewriteIndex.set(true);
          try {
            LOG.info("clearing index for updating index version");
            index.clear();
          }
 catch (          StorageException e) {
            LOG.error("couldn't clear index for reinitializing",e);
            throw new RuntimeException(e);
          }
        }
      }
 else       if (versionFile.createNewFile()) {
        rewriteVersion(versionFile,getVersion());
        rewriteIndex.set(true);
      }
 else {
        LOG.error(String.format("problems while access to index version file to index %s ",indexId));
      }
    }
 catch (    IOException e) {
      LOG.error("couldn't initialize index",e);
      throw new RuntimeException(e);
    }
    myIndex=index;
    return rewriteIndex.get();
  }
 else {
    return false;
  }
}
