{
  super.visitElement(element);
  if (element instanceof JSClass) {
    JSClass c1=(JSClass)element;
    JSClass c2=(JSClass)myGlobalVisitor.getElement();
    myGlobalVisitor.setResult(myGlobalVisitor.match(c1.getNameIdentifier(),c2.getNameIdentifier()) && myGlobalVisitor.matchSonsOptionally(c1.getAttributeList(),c2.getAttributeList()) && myGlobalVisitor.matchSonsInAnyOrder(c1.getExtendsList(),c2.getExtendsList())&& myGlobalVisitor.matchSonsInAnyOrder(c1.getImplementsList(),c2.getImplementsList())&& myGlobalVisitor.matchInAnyOrder(c1.getFields(),c2.getFields())&& myGlobalVisitor.matchInAnyOrder(c1.getFunctions(),c2.getFunctions()));
    return;
  }
 else   if (element instanceof JSFunction) {
    final JSFunction f1=(JSFunction)element;
    final JSFunction f2=(JSFunction)myGlobalVisitor.getElement();
    myGlobalVisitor.setResult(f1.getKind() == f2.getKind() && myGlobalVisitor.match(f1.getNameIdentifier(),f2.getNameIdentifier()) && myGlobalVisitor.matchSonsOptionally(f1.getAttributeList(),f2.getAttributeList()) && myGlobalVisitor.matchSons(f1.getParameterList(),f2.getParameterList()) && myGlobalVisitor.matchOptionally(f1.getReturnTypeElement(),f2.getReturnTypeElement()) && myGlobalVisitor.matchOptionally(f1.getBody(),f2.getBody()));
    return;
  }
 else   if (element instanceof JSVariable) {
    JSVariable v1=(JSVariable)element;
    JSVariable v2=(JSVariable)myGlobalVisitor.getElement();
    myGlobalVisitor.setResult(myGlobalVisitor.match(v1.getNameIdentifier(),v2.getNameIdentifier()) && myGlobalVisitor.matchOptionally(v1.getTypeElement(),v2.getTypeElement()) && myGlobalVisitor.matchOptionally(v1.getInitializer(),v2.getInitializer()));
    return;
  }
 else   if (isLiteral(element)) {
    visitLiteral(element);
    return;
  }
  if (canBePatternVariable(element) && myGlobalVisitor.getMatchContext().getPattern().isRealTypedVar(element)) {
    PsiElement matchedElement=myGlobalVisitor.getElement();
    PsiElement newElement=SkippingHandler.skipNodeIfNeccessary(matchedElement);
    while (newElement != matchedElement) {
      matchedElement=newElement;
      newElement=SkippingHandler.skipNodeIfNeccessary(matchedElement);
    }
    myGlobalVisitor.setResult(myGlobalVisitor.handleTypedElement(element,matchedElement));
  }
 else   if (element instanceof LeafElement) {
    myGlobalVisitor.setResult(element.getText().equals(myGlobalVisitor.getElement().getText()));
  }
 else   if (element.getFirstChild() == null && element.getTextLength() == 0) {
    myGlobalVisitor.setResult(true);
  }
 else {
    PsiElement patternChild=element.getFirstChild();
    PsiElement matchedChild=myGlobalVisitor.getElement().getFirstChild();
    FilteringNodeIterator patternIterator=new FilteringNodeIterator(patternChild);
    FilteringNodeIterator matchedIterator=new FilteringNodeIterator(matchedChild);
    boolean matched=myGlobalVisitor.matchSequentially(patternIterator,matchedIterator);
    myGlobalVisitor.setResult(matched);
  }
}
