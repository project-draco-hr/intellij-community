{
  PsiReference ref=null;
  if (refElement == null) {
    ref=TargetElementUtil.findReference(editor,offset);
    if (ref instanceof PsiJavaReference) {
      refElement=((PsiJavaReference)ref).advancedResolve(true).getElement();
    }
 else     if (ref == null) {
      final PsiElement element=file.findElementAt(offset);
      if (element != null) {
        final PsiElement parent=element.getParent();
        if (parent instanceof PsiFunctionalExpression) {
          refElement=PsiUtil.resolveClassInType(((PsiFunctionalExpression)parent).getFunctionalInterfaceType());
        }
      }
    }
  }
  if (refElement != null) {
    if (BitUtil.isSet(flags,NEW_AS_CONSTRUCTOR)) {
      if (ref == null) {
        ref=TargetElementUtil.findReference(editor,offset);
      }
      if (ref != null) {
        PsiElement parent=ref.getElement().getParent();
        if (parent instanceof PsiAnonymousClass) {
          parent=parent.getParent();
        }
        if (parent instanceof PsiNewExpression) {
          PsiMethod constructor=((PsiNewExpression)parent).resolveConstructor();
          if (constructor != null) {
            refElement=constructor;
          }
 else           if (refElement instanceof PsiClass && ((PsiClass)refElement).getConstructors().length > 0) {
            return null;
          }
        }
      }
    }
    if (refElement instanceof PsiMirrorElement) {
      return ((PsiMirrorElement)refElement).getPrototype();
    }
    if (refElement instanceof PsiClass) {
      final PsiFile containingFile=refElement.getContainingFile();
      if (containingFile != null && containingFile.getVirtualFile() == null) {
        String qualifiedName=((PsiClass)refElement).getQualifiedName();
        if (qualifiedName == null)         return null;
        return JavaPsiFacade.getInstance(refElement.getProject()).findClass(qualifiedName,refElement.getResolveScope());
      }
    }
  }
  return super.adjustReferenceOrReferencedElement(file,editor,offset,flags,refElement);
}
