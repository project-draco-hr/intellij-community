{
  return ApplicationManager.getApplication().runReadAction(new Computable<PsiClass[]>(){
    @Override public PsiClass[] compute(){
      PsiClass containingClass=((PsiMember)element).getContainingClass();
      final PsiExpression expression=((PsiReferenceExpression)reference).getQualifierExpression();
      PsiClass psiClass;
      if (reference instanceof PsiMethodReferenceExpression) {
        psiClass=PsiMethodReferenceUtil.getQualifierResolveResult((PsiMethodReferenceExpression)reference).getContainingClass();
      }
 else       if (expression != null) {
        psiClass=PsiUtil.resolveClassInType(expression.getType());
      }
 else {
        if (element instanceof PsiClass) {
          psiClass=(PsiClass)element;
          final PsiElement resolve=reference.resolve();
          if (resolve instanceof PsiClass) {
            containingClass=(PsiClass)resolve;
          }
        }
 else {
          psiClass=PsiTreeUtil.getParentOfType((PsiReferenceExpression)reference,PsiClass.class);
        }
      }
      if (containingClass == null && psiClass == null)       return PsiClass.EMPTY_ARRAY;
      if (containingClass != null) {
        PsiElementFindProcessor<PsiClass> processor1=new PsiElementFindProcessor<>(containingClass);
        while (psiClass != null) {
          if (!processor1.process(psiClass) || !ClassInheritorsSearch.search(containingClass).forEach(new PsiElementFindProcessor<>(psiClass)) || !ClassInheritorsSearch.search(psiClass).forEach(processor1)) {
            return new PsiClass[]{psiClass};
          }
          psiClass=psiClass.getContainingClass();
        }
      }
      return null;
    }
  }
);
}
