{
  final PsiModifierListOwner owner=AddAnnotationPsiFix.getContainer(file,editor.getCaretModel().getOffset());
  if (owner == null || owner.getManager().isInProject(owner) && !CodeStyleSettingsManager.getSettings(project).USE_EXTERNAL_ANNOTATIONS) {
    return false;
  }
  Pair<String,String[]> annotations=getAnnotations(project);
  String toAdd=annotations.first;
  String[] toRemove=annotations.second;
  if (toRemove.length > 0 && isAnnotatedSkipInferred(owner,toRemove)) {
    return false;
  }
  setText(AddAnnotationPsiFix.calcText(owner,toAdd));
  if (isAnnotatedSkipInferred(owner,toAdd))   return false;
  if (owner instanceof PsiMethod) {
    PsiType returnType=((PsiMethod)owner).getReturnType();
    return returnType != null && !(returnType instanceof PsiPrimitiveType);
  }
  if (owner instanceof PsiClass) {
    return PsiUtil.isLanguageLevel8OrHigher(owner);
  }
  return true;
}
