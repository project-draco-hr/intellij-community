{
  if (!isAvailable() || ToolWindowManager.getInstance(myProject).getToolWindow(ToolWindowId.PREVIEW) != null)   return;
  myToolWindow=(ToolWindowImpl)ToolWindowManager.getInstance(myProject).registerToolWindow(ToolWindowId.PREVIEW,this,ToolWindowAnchor.RIGHT,myProject,false);
  UISettings.getInstance().addUISettingsListener(new UISettingsListener(){
    @Override public void uiSettingsChanged(    UISettings source){
      if (!isAvailable()) {
        VirtualFile[] files=myWindow.getFiles();
        for (        VirtualFile file : files) {
          close(file);
        }
        ToolWindowManager.getInstance(myProject).unregisterToolWindow(ToolWindowId.PREVIEW);
      }
    }
  }
,myProject);
  myToolWindow.setIcon(AllIcons.Actions.PreviewDetails);
  myToolWindow.setContentUiType(ToolWindowContentUiType.COMBO,null);
  myContentManager=myToolWindow.getContentManager();
  myStubContent=myContentManager.getContent(0);
  myContentManager.addContentManagerListener(new ContentManagerAdapter(){
    @Override public void selectionChanged(    ContentManagerEvent event){
      final VirtualFile file=event.getContent().getUserData(FILE_KEY);
      if (event.getOperation() == ContentManagerEvent.ContentOperation.remove && file != null && file.equals(myModifiedFile)) {
        close(file);
        return;
      }
      if (event.getOperation() != ContentManagerEvent.ContentOperation.add)       return;
      if (file != null) {
        event.getContent().setComponent(PreviewPanel.this);
        if (!file.equals(myWindow.getSelectedFile())) {
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              myManager.openFileWithProviders(file,false,myWindow);
            }
          }
);
        }
      }
    }
  }
);
  myEditorsSplitters=new MyEditorsSplitters();
  myProject.getMessageBus().connect().subscribe(FileEditorManagerListener.Before.FILE_EDITOR_MANAGER,new FileEditorManagerListener.Before(){
    @Override public void beforeFileOpened(    @NotNull FileEditorManager source,    @NotNull VirtualFile file){
      myAwaitingForOpen=file;
      VirtualFile currentFile=getCurrentFile();
      if (currentFile != null && currentFile.equals(myModifiedFile) && !currentFile.equals(file)) {
        close(currentFile);
      }
    }
    @Override public void beforeFileClosed(    @NotNull FileEditorManager source,    @NotNull VirtualFile file){
      checkStubContent();
    }
  }
);
  myEditorsSplitters.createCurrentWindow();
  myWindow=myEditorsSplitters.getCurrentWindow();
  myWindow.setTabsPlacement(UISettings.TABS_NONE);
  myLayout=new CardLayout();
  setLayout(myLayout);
  add(ContentType.Files.toString(),myEditorsSplitters);
  myToolWindow.setTitleActions(new MoveToEditorTabsAction());
  ArrayList<AnAction> myGearActions=new ArrayList<AnAction>();
  for (  ContentType contentType : ContentType.values()) {
    myGearActions.add(new ContentTypeToggleAction(contentType));
  }
  myToolWindow.setAdditionalGearActions(new DefaultActionGroup("Preview",myGearActions));
  myToolWindow.hide(null);
}
