{
  if (myInitialized)   return;
  myToolWindow=(ToolWindowImpl)ToolWindowManager.getInstance(myProject).registerToolWindow(ToolWindowId.PREVIEW,this,ToolWindowAnchor.RIGHT,myProject,false);
  myToolWindow.setIcon(AllIcons.Actions.PreviewDetails);
  myEditorsSplitters=new EditorsSplitters(myManager,myDockManager,false){
    @Override public void updateFileName(    VirtualFile updatedFile){
      super.updateFileName(updatedFile);
      if (updatedFile != null && updatedFile.equals(getCurrentFile())) {
        updateWindowTitle(updatedFile);
      }
    }
    @Override protected void afterFileOpen(    VirtualFile file){
      if (file.equals(myAwaitingForOpen)) {
        updateWindowTitle(file);
        Document document=FileDocumentManager.getInstance().getDocument(file);
        if (document != null) {
          myModifiedFile=null;
          document.addDocumentListener(PreviewPanel.this,myProject);
        }
      }
      myAwaitingForOpen=null;
    }
    @Override public void setTabsPlacement(    int tabPlacement){
      super.setTabsPlacement(UISettings.TABS_NONE);
    }
    @Override protected boolean showEmptyText(){
      return false;
    }
  }
;
  myProject.getMessageBus().connect().subscribe(FileEditorManagerListener.Before.FILE_EDITOR_MANAGER,this);
  myEditorsSplitters.createCurrentWindow();
  myWindow=myEditorsSplitters.getCurrentWindow();
  myWindow.setTabsPlacement(UISettings.TABS_NONE);
  setLayout(new GridLayout(1,1));
  add(myEditorsSplitters);
  myToolWindow.setTitleActions(new MoveToEditorTabsAction(),new CloseFileAction());
  myInitialized=true;
}
