{
  PsiFile containingFile=null;
  for (  PsiElement element : elements) {
    final PsiFile currentContainingFile=element.getContainingFile();
    if (containingFile == null) {
      containingFile=currentContainingFile;
    }
 else {
      LOG.assertTrue(containingFile.isEquivalentTo(currentContainingFile));
    }
  }
  LOG.assertTrue(containingFile != null);
  if (!FileModificationService.getInstance().prepareFileForWrite(containingFile))   return false;
  try {
    final TypeMigrationRules rules=new TypeMigrationRules();
    rules.setBoundScope(GlobalSearchScopesCore.projectProductionScope(containingFile.getProject()).union(GlobalSearchScopesCore.projectTestScope(containingFile.getProject())));
    TypeMigrationProcessor.runHighlightingTypeMigration(containingFile.getProject(),null,rules,elements.toArray(new PsiElement[elements.size()]),createMigrationTypeFunction(elements,types),true);
    UndoUtil.markPsiFileForUndo(containingFile);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return true;
}
