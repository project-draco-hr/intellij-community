{
  final List<PsiElement> onlyAliveElements=new ArrayList<PsiElement>();
  final List<PsiType> onlyAliveInitialTypes=new ArrayList<PsiType>();
  final List<PsiType> onlyAliveTargets=new ArrayList<PsiType>();
  final Iterator<PsiType> initialIterator=initialTypes.iterator();
  final Iterator<PsiType> targetIterator=targetTypes.iterator();
  for (  SmartPsiElementPointer elementPointer : elements) {
    final PsiType currentInitial=initialIterator.next();
    final PsiType currentTarget=targetIterator.next();
    final PsiElement currentElement=elementPointer.getElement();
    if (currentElement != null) {
      onlyAliveElements.add(currentElement);
      onlyAliveInitialTypes.add(currentInitial);
      onlyAliveTargets.add(currentTarget);
    }
  }
  performMethodCallTypeMigration(project,onlyAliveElements,onlyAliveInitialTypes,onlyAliveTargets);
}
