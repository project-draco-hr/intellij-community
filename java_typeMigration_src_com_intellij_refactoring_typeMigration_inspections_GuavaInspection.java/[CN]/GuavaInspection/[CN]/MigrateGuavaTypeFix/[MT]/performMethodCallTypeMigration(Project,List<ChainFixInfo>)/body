{
  Collections.sort(elements,new Comparator<ChainFixInfo>(){
    @Override public int compare(    ChainFixInfo o1,    ChainFixInfo o2){
      final PsiElement element1=o1.myElement;
      final PsiElement element2=o2.myElement;
      if (element1.getTextRange().contains(element2.getTextRange())) {
        return 1;
      }
      if (element2.getTextRange().contains(element1.getTextRange())) {
        return -1;
      }
      return 0;
    }
  }
);
  final List<PsiElement> validElement=new ArrayList<PsiElement>();
  final List<Boolean> isIterableList=new ArrayList<Boolean>(elements.size());
  final List<TypeConversionDescriptorBase> conversionList=new ArrayList<TypeConversionDescriptorBase>(elements.size());
  for (  ChainFixInfo info : elements) {
    final PsiElement element=info.myElement;
    final PsiType initialType=info.myFrom;
    final PsiType targetType=info.myTo;
    if (element.isValid()) {
      PsiMethodCallExpression expr=(PsiMethodCallExpression)element;
      final TypeMigrationRules rules=new TypeMigrationRules();
      rules.setBoundScope(element.getUseScope());
      conversionList.add(rules.findConversion(initialType,targetType,expr.resolveMethod(),expr,new TypeMigrationLabeler(rules,targetType)));
      isIterableList.add(isIterable(expr));
      validElement.add(element);
    }
  }
  if (!validElement.isEmpty()) {
    final PsiFile file=validElement.get(0).getContainingFile();
    if (!FileModificationService.getInstance().prepareFileForWrite(file))     return;
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      @Override public void run(){
        final Iterator<Boolean> isIterableIterator=isIterableList.iterator();
        final Iterator<TypeConversionDescriptorBase> conversionIterator=conversionList.iterator();
        final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(project);
        for (        PsiElement element : validElement) {
          PsiElement replacedExpression=TypeMigrationReplacementUtil.replaceExpression((PsiExpression)element,project,conversionIterator.next(),new TypeEvaluator(null,null));
          if (isIterableIterator.next()) {
            final String expressionText=replacedExpression.getText() + ".collect(java.util.stream.Collectors.toList())";
            replacedExpression=replacedExpression.replace(JavaPsiFacade.getElementFactory(project).createExpressionFromText(expressionText,replacedExpression));
          }
          codeStyleManager.shortenClassReferences(replacedExpression);
        }
        codeStyleManager.optimizeImports(file);
        UndoUtil.markPsiFileForUndo(file);
      }
    }
);
  }
}
