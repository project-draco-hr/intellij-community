{
  if (!PsiUtil.isLanguageLevel8OrHigher(holder.getFile())) {
    return PsiElementVisitor.EMPTY_VISITOR;
  }
  return new JavaElementVisitor(){
    private final AtomicNotNullLazyValue<Map<String,String>> myGuavaClassConversions=new AtomicNotNullLazyValue<Map<String,String>>(){
      @NotNull @Override protected Map<String,String> compute(){
        Map<String,String> map=new HashMap<String,String>();
        for (        TypeConversionRule rule : TypeConversionRule.EP_NAME.getExtensions()) {
          if (rule instanceof BaseGuavaTypeConversionRule) {
            final String fromClass=((BaseGuavaTypeConversionRule)rule).ruleFromClass();
            final String toClass=((BaseGuavaTypeConversionRule)rule).ruleToClass();
            map.put(fromClass,toClass);
          }
        }
        return map;
      }
    }
;
    @Override public void visitVariable(    PsiVariable variable){
      final PsiType type=variable.getType();
      if (type instanceof PsiClassType) {
        final PsiClassType.ClassResolveResult resolveResult=((PsiClassType)type).resolveGenerics();
        final PsiClass psiClass=resolveResult.getElement();
        if (psiClass != null) {
          final String qName=psiClass.getQualifiedName();
          final String toQName=myGuavaClassConversions.getValue().get(qName);
          if (toQName != null) {
            final Project project=holder.getProject();
            final JavaPsiFacade javaPsiFacade=JavaPsiFacade.getInstance(project);
            final PsiClass targetClass=javaPsiFacade.findClass(toQName,GlobalSearchScope.allScope(project));
            if (targetClass != null) {
              final Collection<PsiType> typeParameters=resolveResult.getSubstitutor().getSubstitutionMap().values();
              final PsiClassType targetType=javaPsiFacade.getElementFactory().createType(targetClass,typeParameters.toArray(new PsiType[typeParameters.size()]));
              final VariableTypeFix fix=TypeMigrationVariableTypeFixProvider.createTypeMigrationFix(variable,targetType);
              holder.registerProblem(variable,PROBLEM_DESCRIPTION,fix);
            }
          }
        }
      }
    }
  }
;
}
