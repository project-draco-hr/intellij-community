{
  final PsiFile origPsiFile=PsiDocumentManager.getInstance(myProject).getPsiFile(myOrigDocument);
  String newText=myNewDocument.getText();
  LinkedHashMap<String,String> replacementMap=new LinkedHashMap<>();
  int count=0;
  for (  RangeMarker o : ContainerUtil.reverse(((DocumentEx)myNewDocument).getGuardedBlocks())) {
    String replacement=o.getUserData(REPLACEMENT_KEY);
    String tempText="REPLACE" + (count++) + Long.toHexString(StringHash.calc(replacement));
    newText=newText.substring(0,o.getStartOffset()) + tempText + newText.substring(o.getEndOffset());
    replacementMap.put(tempText,replacement);
  }
  final int hostStartOffset=myAltFullRange.getStartOffset();
  myEditor.getCaretModel().moveToOffset(hostStartOffset);
  for (  CopyPastePreProcessor preProcessor : Extensions.getExtensions(CopyPastePreProcessor.EP_NAME)) {
    newText=preProcessor.preprocessOnPaste(myProject,origPsiFile,myEditor,newText,null);
  }
  myOrigDocument.replaceString(hostStartOffset,myAltFullRange.getEndOffset(),newText);
  for (  String tempText : replacementMap.keySet()) {
    int idx=CharArrayUtil.indexOf(myOrigDocument.getCharsSequence(),tempText,hostStartOffset,myAltFullRange.getEndOffset());
    myOrigDocument.replaceString(idx,idx + tempText.length(),replacementMap.get(tempText));
  }
  fixDocumentQuotes(myOrigDocument,hostStartOffset - 1);
  fixDocumentQuotes(myOrigDocument,myAltFullRange.getEndOffset());
  PsiDocumentManager.getInstance(myProject).commitDocument(myOrigDocument);
  try {
    CodeStyleManager.getInstance(myProject).reformatRange(origPsiFile,hostStartOffset,myAltFullRange.getEndOffset(),true);
  }
 catch (  IncorrectOperationException e1) {
  }
  PsiElement newInjected=InjectedLanguageManager.getInstance(myProject).findInjectedElementAt(origPsiFile,hostStartOffset);
  DocumentWindow documentWindow=newInjected == null ? null : InjectedLanguageUtil.getDocumentWindow(newInjected);
  if (documentWindow != null) {
    myEditor.getCaretModel().moveToOffset(documentWindow.injectedToHost(e.getOffset()));
    myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
  }
}
