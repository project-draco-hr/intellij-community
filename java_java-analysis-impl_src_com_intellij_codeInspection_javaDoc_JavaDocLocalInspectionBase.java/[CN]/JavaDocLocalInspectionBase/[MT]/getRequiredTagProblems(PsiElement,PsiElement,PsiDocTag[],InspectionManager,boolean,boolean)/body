{
  @NonNls String[] tagsToCheck={"author","version","since"};
  @NonNls String[] absentDescriptionKeys={"inspection.javadoc.problem.missing.author.description","inspection.javadoc.problem.missing.version.description","inspection.javadoc.problem.missing.since.description"};
  final ArrayList<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>(2);
  if (required) {
    boolean[] isTagRequired=new boolean[tagsToCheck.length];
    boolean[] isTagPresent=new boolean[tagsToCheck.length];
    boolean someTagsAreRequired=false;
    for (int i=0; i < tagsToCheck.length; i++) {
      final String tag=tagsToCheck[i];
      someTagsAreRequired|=isTagRequired[i]=isTagRequired(context,tag);
    }
    if (someTagsAreRequired) {
      for (      PsiDocTag tag : tags) {
        String tagName=tag.getName();
        for (int i=0; i < tagsToCheck.length; i++) {
          final String tagToCheck=tagsToCheck[i];
          if (tagToCheck.equals(tagName)) {
            isTagPresent[i]=true;
          }
        }
      }
    }
    for (int i=0; i < tagsToCheck.length; i++) {
      final String tagToCheck=tagsToCheck[i];
      if (isTagRequired[i] && !isTagPresent[i]) {
        problems.add(createMissingTagDescriptor(elementToHighlight,tagToCheck,manager,isOnTheFly));
      }
    }
  }
  for (  PsiDocTag tag : tags) {
    for (int i=0; i < tagsToCheck.length; i++) {
      final String tagToCheck=tagsToCheck[i];
      if (tagToCheck.equals(tag.getName()) && extractTagDescription(tag).isEmpty()) {
        problems.add(createDescriptor(tag.getNameElement(),InspectionsBundle.message(absentDescriptionKeys[i]),manager,isOnTheFly));
      }
    }
  }
  return problems;
}
