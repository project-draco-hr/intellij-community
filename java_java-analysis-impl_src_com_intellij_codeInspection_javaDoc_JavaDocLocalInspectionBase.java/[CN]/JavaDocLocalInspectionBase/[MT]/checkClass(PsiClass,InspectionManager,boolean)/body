{
  if (psiClass instanceof PsiAnonymousClass)   return null;
  if (psiClass instanceof PsiSyntheticClass)   return null;
  if (psiClass instanceof PsiTypeParameter)   return null;
  if (IGNORE_DEPRECATED && psiClass.isDeprecated()) {
    return null;
  }
  PsiDocComment docComment=psiClass.getDocComment();
  final PsiIdentifier nameIdentifier=psiClass.getNameIdentifier();
  final PsiElement elementToHighlight=nameIdentifier != null ? nameIdentifier : psiClass;
  final boolean required=isJavaDocRequired(psiClass);
  if (docComment == null) {
    return required ? new ProblemDescriptor[]{createRequiredJavadocAbsentDescription(elementToHighlight,manager,isOnTheFly)} : null;
  }
  PsiDocTag[] tags=docComment.getTags();
  final List<ProblemDescriptor> problems=getRequiredTagProblems(psiClass,docComment.getFirstChild(),tags,manager,isOnTheFly,required);
  List<ProblemDescriptor> tagProblems=getTagValuesProblems(psiClass,tags,manager,isOnTheFly);
  if (tagProblems != null) {
    problems.addAll(tagProblems);
  }
  checkForPeriodInDoc(psiClass,docComment,problems,manager,isOnTheFly);
  checkInlineTags(manager,problems,docComment.getDescriptionElements(),JavadocManager.SERVICE.getInstance(docComment.getProject()),isOnTheFly);
  checkForBadCharacters(docComment,problems,manager,isOnTheFly);
  checkDuplicateTags(tags,problems,manager,isOnTheFly);
  if (required && isTagRequired(psiClass,"param") && psiClass.hasTypeParameters()&& nameIdentifier != null) {
    ArrayList<PsiTypeParameter> absentParameters=null;
    final PsiTypeParameter[] typeParameters=psiClass.getTypeParameters();
    for (    PsiTypeParameter typeParameter : typeParameters) {
      if (!isFound(tags,typeParameter)) {
        if (absentParameters == null)         absentParameters=new ArrayList<PsiTypeParameter>(1);
        absentParameters.add(typeParameter);
      }
    }
    if (absentParameters != null) {
      for (      PsiTypeParameter psiTypeParameter : absentParameters) {
        problems.add(createMissingParamTagDescriptor(docComment.getFirstChild(),psiTypeParameter,manager,isOnTheFly));
      }
    }
  }
  return problems.isEmpty() ? null : problems.toArray(new ProblemDescriptor[problems.size()]);
}
