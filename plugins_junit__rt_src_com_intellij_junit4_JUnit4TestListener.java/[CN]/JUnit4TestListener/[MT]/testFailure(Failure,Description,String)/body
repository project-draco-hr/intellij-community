{
  final boolean isIgnored=MapSerializerUtil.TEST_IGNORED.equals(messageName);
  if (startedInParallel(description)) {
    TestEvent testEvent=(TestEvent)myWaitingQueue.get(description);
    if (testEvent == null) {
      testEvent=new TestEvent();
      myWaitingQueue.put(description,testEvent);
    }
    testEvent.setIgnored(isIgnored);
    testEvent.setFailure(failure);
    return;
  }
  String methodName=getFullMethodName(description);
  if (methodName == null) {
    if (!isIgnored) {
      methodName="Class Configuration";
      myPrintStream.println("##teamcity[testStarted name=\'" + escapeName(methodName) + "\' "+ getClassLocation(JUnit4ReflectionUtil.getClassName(description))+ " ]");
      testFailure(failure,messageName,methodName);
      myPrintStream.println("\n##teamcity[testFinished name=\'" + escapeName(methodName) + "\']");
    }
    if (myFinishedCount == 0) {
      for (Iterator iterator=description.getChildren().iterator(); iterator.hasNext(); ) {
        Description next=(Description)iterator.next();
        testStarted(next);
        testFailure(isIgnored ? failure : null,next,MapSerializerUtil.TEST_IGNORED);
        testFinished(next);
      }
    }
  }
 else {
    testFailure(failure,messageName,methodName);
  }
}
