{
  final String methodName=getFullMethodName(description);
  if (methodName == null)   return;
  final String classFQN=JUnit4ReflectionUtil.getClassName(description);
  final List parents=(List)myParents.get(description);
  List parentsHierarchy=parents != null && !parents.isEmpty() ? (List)parents.remove(0) : Collections.singletonList(description);
  int idx=0;
  Description currentClass;
  Description currentParent;
  while (idx < myStartedSuites.size() && idx < parentsHierarchy.size()) {
    currentClass=(Description)myStartedSuites.get(idx);
    currentParent=(Description)parentsHierarchy.get(parentsHierarchy.size() - 1 - idx);
    if (System.identityHashCode(currentClass) != System.identityHashCode(currentParent))     break;
    idx++;
  }
  for (int i=myStartedSuites.size() - 1; i >= idx; i--) {
    currentClass=(Description)myStartedSuites.remove(i);
    myPrintStream.println("##teamcity[testSuiteFinished name=\'" + escapeName(getShortName(JUnit4ReflectionUtil.getClassName(currentClass))) + "\']");
  }
  for (int i=idx; i < parentsHierarchy.size(); i++) {
    final Description descriptionFromHistory=(Description)parentsHierarchy.get(parentsHierarchy.size() - 1 - i);
    final String fqName=JUnit4ReflectionUtil.getClassName(descriptionFromHistory);
    final String className=getShortName(fqName);
    if (!className.equals(myRootName)) {
      myPrintStream.println("##teamcity[testSuiteStarted name=\'" + escapeName(className) + "\'"+ (parents == null ? " locationHint=\'java:suite://" + escapeName(fqName) + "\'" : "")+ "]");
      myStartedSuites.add(descriptionFromHistory);
    }
  }
  myPrintStream.println("##teamcity[testStarted name=\'" + escapeName(methodName) + "\' "+ getTestMethodLocation(methodName,classFQN)+ "]");
  myCurrentTestStart=currentTime();
}
