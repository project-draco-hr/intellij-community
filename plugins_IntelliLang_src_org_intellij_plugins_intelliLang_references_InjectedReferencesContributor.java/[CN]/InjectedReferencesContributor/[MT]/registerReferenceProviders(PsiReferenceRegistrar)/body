{
  registrar.registerReferenceProvider(PlatformPatterns.psiElement(),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext context){
      element.putUserData(INJECTED_REFERENCE,null);
      ReferenceInjector[] extensions=ReferenceInjector.EXTENSION_POINT_NAME.getExtensions();
      PsiReference[] references=new PsiReference[0];
      Configuration configuration=Configuration.getProjectInstance(element.getProject());
      for (      ReferenceInjector injector : extensions) {
        Collection<BaseInjection> injections=configuration.getInjectionsByLanguageId(injector.getId());
        for (        BaseInjection injection : injections) {
          if (injection.acceptForReference(element)) {
            element.putUserData(INJECTED_REFERENCE,injector);
            LanguageInjectionSupport support=InjectorUtils.findInjectionSupport(injection.getSupportId());
            element.putUserData(LanguageInjectionSupport.INJECTOR_SUPPORT,support);
            List<TextRange> area=injection.getInjectedArea(element);
            for (            TextRange range : area) {
              references=ArrayUtil.mergeArrays(references,injector.getReferences(element,context,range));
            }
          }
        }
      }
      if (element instanceof PsiLanguageInjectionHost) {
        TemporaryPlacesRegistry registry=TemporaryPlacesRegistry.getInstance(element.getProject());
        InjectedLanguage language=registry.getLanguageFor((PsiLanguageInjectionHost)element,element.getContainingFile());
        if (language != null) {
          ReferenceInjector injector=ReferenceInjector.findById(language.getID());
          if (injector != null) {
            element.putUserData(INJECTED_REFERENCE,injector);
            element.putUserData(LanguageInjectionSupport.INJECTOR_SUPPORT,registry.getLanguageInjectionSupport());
            TextRange range=ElementManipulators.getValueTextRange(element);
            references=ArrayUtil.mergeArrays(references,injector.getReferences(element,context,range));
          }
        }
      }
      return references;
    }
  }
);
}
