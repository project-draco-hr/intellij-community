{
  final List<UsageInfo> foreignMethodUsages=new ArrayList<UsageInfo>();
  final Runnable runnable=new Runnable(){
    public void run(){
      final Set<MethodNodeBase<PsiMethod>> nodes=getSelectedNodes();
      for (      MethodNodeBase<PsiMethod> node : nodes) {
        final SafeDeleteJavaMethodNode methodNode=(SafeDeleteJavaMethodNode)node;
        final PsiMethod nodeMethod=methodNode.getMethod();
        if (nodeMethod.equals(myMethod))         continue;
        final PsiParameter parameter=nodeMethod.getParameterList().getParameters()[methodNode.myParameterIdx];
        foreignMethodUsages.add(new SafeDeleteParameterCallHierarchyUsageInfo(nodeMethod,parameter));
        ReferencesSearch.search(nodeMethod).forEach(new Processor<PsiReference>(){
          public boolean process(          final PsiReference reference){
            final PsiElement element=reference.getElement();
            if (element != null) {
              JavaSafeDeleteDelegate.EP.forLanguage(element.getLanguage()).createUsageInfoForParameter(reference,foreignMethodUsages,parameter,nodeMethod);
            }
            return true;
          }
        }
);
      }
    }
  }
;
  if (ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runReadAction(runnable);
    }
  }
,"Search for caller method usages...",true,myProject)) {
    myResult.addAll(foreignMethodUsages);
  }
  super.doOKAction();
}
