{
  @NotNull RepositoryLibraryProperties properties=myEditorComponent.getProperties();
  boolean wasGeneratedName=RepositoryLibraryType.getInstance().getDescription(properties).equals(myEditorComponent.getLibraryEditor().getName());
  RepositoryLibraryPropertiesModel model=new RepositoryLibraryPropertiesModel(properties.getVersion(),RepositoryUtils.libraryHasSources(myEditorComponent.getLibraryEditor()),RepositoryUtils.libraryHasJavaDocs(myEditorComponent.getLibraryEditor()));
  RepositoryLibraryPropertiesDialog dialog=new RepositoryLibraryPropertiesDialog(myEditorComponent.getProject(),model,RepositoryLibraryDescription.findDescription(properties),true);
  if (!dialog.showAndGet()) {
    return;
  }
  myEditorComponent.getProperties().changeVersion(model.getVersion());
  if (wasGeneratedName) {
    myEditorComponent.renameLibrary(RepositoryLibraryType.getInstance().getDescription(properties));
  }
  final LibraryEditor libraryEditor=myEditorComponent.getLibraryEditor();
  MavenDependenciesRemoteManager.getInstance(myEditorComponent.getProject()).downloadDependenciesAsync(properties,model.isDownloadSources(),model.isDownloadJavaDocs(),RepositoryUtils.getStorageRoot(myEditorComponent.getLibraryEditor().getUrls(OrderRootType.CLASSES),myEditorComponent.getProject()),new MavenRemoteTask.ResultProcessor<List<OrderRoot>>(){
    @Override public void process(    @Nullable List<OrderRoot> roots){
      libraryEditor.removeAllRoots();
      if (roots != null) {
        libraryEditor.addRoots(roots);
      }
    }
  }
);
}
