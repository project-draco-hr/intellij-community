{
  PsiMethod[] overridingMethods=findSimpleUsagesWithoutParameters(method,result,true,true,true);
  findUsagesInCallers(result);
  final ArrayList<PsiMethod> methods=new ArrayList<PsiMethod>(Arrays.asList(overridingMethods));
  methods.add(method);
  for (  PsiMethod psiMethod : methods) {
    final PsiClass containingClass=psiMethod.getContainingClass();
    if (psiMethod == LambdaUtil.getFunctionalInterfaceMethod(containingClass)) {
      for (      PsiFunctionalExpression functionalExpression : FunctionalExpressionSearch.search(containingClass)) {
        result.add(new FunctionalInterfaceChangedUsageInfo(functionalExpression,psiMethod));
      }
    }
  }
  findParametersUsage(method,result,overridingMethods);
}
