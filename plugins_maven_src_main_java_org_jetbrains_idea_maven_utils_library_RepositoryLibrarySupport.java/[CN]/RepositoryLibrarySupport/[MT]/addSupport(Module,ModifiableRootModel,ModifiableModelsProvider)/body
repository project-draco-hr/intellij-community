{
  LibraryTable.ModifiableModel modifiableModel=modifiableModelsProvider.getLibraryTableModifiableModel(module.getProject());
  Library library=Iterables.find(Arrays.asList(modifiableModel.getLibraries()),new Predicate<Library>(){
    @Override public boolean apply(    @Nullable Library library){
      return isLibraryEqualsToSelected(library);
    }
  }
,null);
  if (library == null) {
    library=createNewLibrary(module,modifiableModel);
  }
  final DependencyScope dependencyScope=LibraryDependencyScopeSuggester.getDefaultScope(library);
  final ModifiableRootModel moduleModifiableModel=modifiableModelsProvider.getModuleModifiableModel(module);
  try {
    LibraryOrderEntry foundEntry=(LibraryOrderEntry)Iterables.find(Arrays.asList(moduleModifiableModel.getOrderEntries()),new Predicate<OrderEntry>(){
      @Override public boolean apply(      @Nullable OrderEntry entry){
        return entry instanceof LibraryOrderEntry && ((LibraryOrderEntry)entry).getScope() == dependencyScope && isLibraryEqualsToSelected(((LibraryOrderEntry)entry).getLibrary());
      }
    }
,null);
    if (foundEntry == null) {
      rootModel.addLibraryEntry(library).setScope(dependencyScope);
    }
  }
  finally {
    moduleModifiableModel.dispose();
  }
}
