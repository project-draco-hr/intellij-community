{
  final Collection<JpsModule> allModules=model.getProject().getModules();
  Map<File,JpsModule> contentToModule=new THashMap<File,JpsModule>(FileUtil.FILE_HASHING_STRATEGY);
  for (  final JpsModule module : allModules) {
    final ArrayList<File> moduleExcludes=new ArrayList<File>();
    for (    String url : module.getExcludeRootsList().getUrls()) {
      moduleExcludes.add(JpsPathUtil.urlToFile(url));
    }
    JpsJavaModuleExtension moduleExtension=JpsJavaExtensionService.getInstance().getModuleExtension(module);
    if (moduleExtension != null && !moduleExtension.isInheritOutput() && moduleExtension.isExcludeOutput()) {
      String outputUrl=moduleExtension.getOutputUrl();
      if (outputUrl != null) {
        moduleExcludes.add(JpsPathUtil.urlToFile(outputUrl));
      }
      String testOutputUrl=moduleExtension.getTestOutputUrl();
      if (testOutputUrl != null) {
        moduleExcludes.add(JpsPathUtil.urlToFile(testOutputUrl));
      }
    }
    List<String> contentUrls=module.getContentRootsList().getUrls();
    final List<File> moduleContent=new ArrayList<File>(contentUrls.size());
    for (    String contentUrl : contentUrls) {
      File contentRoot=JpsPathUtil.urlToFile(contentUrl);
      moduleContent.add(contentRoot);
      contentToModule.put(contentRoot,module);
    }
    for (    JpsModuleSourceRoot root : module.getSourceRoots()) {
      File sourceRoot=root.getFile();
      moduleContent.add(sourceRoot);
      contentToModule.put(sourceRoot,module);
    }
    myModuleToExcludesMap.put(module,moduleExcludes);
    myModuleToContentMap.put(module,moduleContent);
    myExcludedRoots.addAll(moduleExcludes);
  }
  JpsJavaProjectExtension projectExtension=JpsJavaExtensionService.getInstance().getProjectExtension(model.getProject());
  if (projectExtension != null) {
    String url=projectExtension.getOutputUrl();
    if (!StringUtil.isEmpty(url)) {
      File excluded=JpsPathUtil.urlToFile(url);
      File parent=excluded;
      while (parent != null) {
        JpsModule module=contentToModule.get(parent);
        if (module != null) {
          myModuleToExcludesMap.get(module).add(excluded);
        }
        parent=FileUtil.getParentFile(parent);
      }
      myExcludedRoots.add(excluded);
    }
  }
  List<File> parents=new ArrayList<File>();
  Set<File> notUnderExcludedCache=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
  for (  JpsModule module : allModules) {
    for (    File contentRoot : myModuleToContentMap.get(module)) {
      File parent=contentRoot.getParentFile();
      JpsModule parentModule=null;
      parents.clear();
      while (parent != null) {
        parents.add(parent);
        if (contentToModule.containsKey(parent)) {
          parentModule=contentToModule.get(parent);
          break;
        }
        parent=parent.getParentFile();
      }
      if (parentModule != null) {
        if (!parentModule.equals(module)) {
          myModuleToExcludesMap.get(parentModule).add(contentRoot);
        }
        if (isUnderExcluded(contentRoot,myExcludedRoots,notUnderExcludedCache)) {
          myTopLevelContentRoots.add(contentRoot);
        }
      }
 else {
        myTopLevelContentRoots.add(contentRoot);
      }
      for (      File file : parents) {
        contentToModule.put(file,parentModule);
      }
    }
  }
  for (  List<File> files : myModuleToExcludesMap.values()) {
    ((ArrayList<File>)files).trimToSize();
  }
}
