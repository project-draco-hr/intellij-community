{
  final ArgInfo<InnerArg>[] innerMap=mapParametersToArguments(signature,innerArgs.toArray(new InnerArg[innerArgs.size()]),new Function<InnerArg,PsiType>(){
    @Override public PsiType fun(    InnerArg o){
      return o.type;
    }
  }
,context,partial);
  if (innerMap == null)   return null;
  ArgInfo<PsiElement>[] map=new ArgInfo[innerMap.length];
  int i=0;
  if (hasNamedArgs) {
    map[i]=new ArgInfo<PsiElement>(innerMap[i].args.iterator().next().list,true,innerArgs.get(i).type);
    i++;
  }
  for (; i < innerMap.length; i++) {
    final ArgInfo<InnerArg> innerArg=innerMap[i];
    if (innerArg == null) {
      map[i]=null;
    }
 else {
      List<PsiElement> argList=new ArrayList<PsiElement>();
      for (      InnerArg arg : innerArg.args) {
        argList.addAll(arg.list);
      }
      boolean multiArg=innerArg.isMultiArg || argList.size() > 1;
      map[i]=new ArgInfo<PsiElement>(argList,multiArg,innerArg.type);
    }
  }
  return map;
}
