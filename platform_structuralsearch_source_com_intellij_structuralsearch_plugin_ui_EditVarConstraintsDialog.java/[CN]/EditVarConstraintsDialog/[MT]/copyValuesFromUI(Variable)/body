{
  String varName=var.getName();
  Configuration configuration=model.getConfig();
  if (isReplacementVariable(varName)) {
    saveScriptInfo(getOrAddReplacementVariableDefinition(varName,configuration));
    return;
  }
  MatchVariableConstraint varInfo=getOrAddVariableConstraint(varName,configuration);
  varInfo.setInvertReadAccess(notRead.isSelected());
  varInfo.setReadAccess(read.isSelected());
  varInfo.setInvertWriteAccess(notWrite.isSelected());
  varInfo.setWriteAccess(write.isSelected());
  varInfo.setRegExp(regexp.getDocument().getText());
  varInfo.setInvertRegExp(notRegexp.isSelected());
  int minCount=Integer.parseInt(minoccurs.getText());
  varInfo.setMinCount(minCount);
  int maxCount;
  if (maxoccursUnlimited.isSelected())   maxCount=Integer.MAX_VALUE;
 else   maxCount=Integer.parseInt(maxoccurs.getText());
  varInfo.setMaxCount(maxCount);
  varInfo.setWithinHierarchy(applyWithinTypeHierarchy.isSelected());
  varInfo.setInvertRegExp(notRegexp.isSelected());
  varInfo.setPartOfSearchResults(partOfSearchResults.isEnabled() && partOfSearchResults.isSelected());
  varInfo.setInvertExprType(notExprType.isSelected());
  varInfo.setNameOfExprType(regexprForExprType.getDocument().getText());
  varInfo.setExprTypeWithinHierarchy(exprTypeWithinHierarchy.isSelected());
  varInfo.setWholeWordsOnly(wholeWordsOnly.isSelected());
  varInfo.setInvertFormalType(invertFormalArgType.isSelected());
  varInfo.setFormalArgTypeWithinHierarchy(formalArgTypeWithinHierarchy.isSelected());
  varInfo.setNameOfFormalArgType(formalArgType.getDocument().getText());
  saveScriptInfo(varInfo);
  final String withinConstraint=(String)withinCombo.getComboBox().getEditor().getItem();
  varInfo.setWithinConstraint(withinConstraint.length() > 0 ? "\"" + withinConstraint + "\"" : "");
  varInfo.setInvertWithinConstraint(invertWithinIn.isSelected());
}
