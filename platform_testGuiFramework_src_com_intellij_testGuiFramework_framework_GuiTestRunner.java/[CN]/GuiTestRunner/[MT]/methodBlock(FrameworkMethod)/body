{
  FrameworkMethod newMethod;
  try {
    loadClassesWithIdeClassLoader();
    Method methodFromClassLoader=myTestClass.getJavaClass().getMethod(method.getName());
    newMethod=new FrameworkMethod(methodFromClassLoader);
  }
 catch (  Exception e) {
    return new Fail(e);
  }
  Object test;
  try {
    test=new ReflectiveCallable(){
      @Override protected Object runReflectiveCall() throws Throwable {
        return createTest();
      }
    }
.run();
  }
 catch (  Throwable e) {
    return new Fail(e);
  }
  Statement statement=methodInvoker(newMethod,test);
  List<FrameworkMethod> beforeMethods=myTestClass.getAnnotatedMethods(Before.class);
  if (!beforeMethods.isEmpty()) {
    statement=new RunBefores(statement,beforeMethods,test);
  }
  List<FrameworkMethod> afterMethods=myTestClass.getAnnotatedMethods(After.class);
  if (!afterMethods.isEmpty()) {
    statement=new RunAfters(statement,afterMethods,test);
  }
  return statement;
}
