{
  if (size <= 0)   throw new IllegalArgumentException(size + " <= 0");
  return intercept(new Function<Iterator<E>,Iterator<JBIterable<E>>>(){
    @Override public Iterator<JBIterable<E>> fun(    Iterator<E> iterator){
      final Iterator<E> orig=iterator;
      return new JBIterator<JBIterable<E>>(){
        JBIterator<E> it;
        @Override protected JBIterable<E> nextImpl(){
          while (it != null && it.advance())           ;
          it=null;
          return orig.hasNext() ? once((it=JBIterator.wrap(orig)).take(size)) : stop();
        }
      }
;
    }
  }
);
}
