{
  if (iterable == null)   return empty();
  final Iterable<T> thatIt=iterable;
  return new JBIterable<E>(){
    @Override public Iterator<E> iterator(){
      final Iterator<T> it=thatIt.iterator();
      return new Iterator<E>(){
        Iterator<E> cur;
        @Override public boolean hasNext(){
          while ((cur == null || !cur.hasNext()) && it.hasNext()) {
            cur=fun.fun(it.next()).iterator();
          }
          return cur != null && cur.hasNext();
        }
        @Override public E next(){
          return cur.next();
        }
        @Override public void remove(){
          cur.remove();
        }
      }
;
    }
  }
;
}
