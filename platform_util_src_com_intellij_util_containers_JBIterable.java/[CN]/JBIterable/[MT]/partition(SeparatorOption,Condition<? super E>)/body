{
  return intercept(new Function<Iterator<E>,Iterator<JBIterable<E>>>(){
    @Override public Iterator<JBIterable<E>> fun(    Iterator<E> iterator){
      final Iterator<E> orig=iterator;
      final Condition<? super E> condition=Stateful.copy(separatorCondition);
      return new JBIterator<JBIterable<E>>(){
        JBIterator<E> it;
        E stored;
        int st;
        @Override protected JBIterable<E> nextImpl(){
          if (it != null && it.hasNext())           once(it).size();
          it=null;
          if (stored == null && !orig.hasNext()) {
            if (st < 0 && option != SeparatorOption.TAIL && option != SeparatorOption.GROUP) {
              st=1;
              return empty();
            }
            return stop();
          }
          if (st == -2 && option == SeparatorOption.KEEP) {
            st=-1;
            return empty();
          }
          E tmp=stored;
          stored=null;
          return of(tmp).append(once((it=JBIterator.wrap(orig)).takeWhile(new Condition<E>(){
            @Override public boolean value(            E e){
              boolean sep=condition.value(e);
              int st0=st;
              st=st0 < 0 && sep ? -2 : st0 > 0 && !sep ? 2 : sep ? -1 : 1;
              boolean result;
switch (option) {
case HEAD:
                result=st != -2 && (st != 1 || st0 == 0);
              break;
case TAIL:
            result=st != -2 && st != -1;
          break;
case KEEP:
        result=st0 >= 0 && st > 0;
      break;
case GROUP:
    result=st0 >= 0 && st > 0 || st0 <= 0 && st < 0;
  break;
case SKIP:
result=st > 0;
break;
default :
throw new AssertionError(st);
}
stored=!result && option != SeparatorOption.SKIP ? e : null;
return result;
}
}
)));
}
}
;
}
}
);
}
