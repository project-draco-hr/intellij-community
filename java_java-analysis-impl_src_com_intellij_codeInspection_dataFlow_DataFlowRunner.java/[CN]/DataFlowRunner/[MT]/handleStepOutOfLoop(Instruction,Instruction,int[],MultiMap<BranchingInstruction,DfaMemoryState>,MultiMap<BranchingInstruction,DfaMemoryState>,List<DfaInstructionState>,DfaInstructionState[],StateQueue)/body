{
  if (loopNumber[prevInstruction.getIndex()] == 0 || inSameLoop(prevInstruction,nextInstruction,loopNumber)) {
    return;
  }
  for (  DfaInstructionState state : inFlightStates) {
    Instruction instruction=state.getInstruction();
    if (inSameLoop(prevInstruction,instruction,loopNumber)) {
      return;
    }
  }
  for (  DfaInstructionState state : afterStates) {
    Instruction instruction=state.getInstruction();
    if (inSameLoop(prevInstruction,instruction,loopNumber)) {
      return;
    }
  }
  if (!queue.processAll(new Processor<DfaInstructionState>(){
    @Override public boolean process(    DfaInstructionState state){
      Instruction instruction=state.getInstruction();
      return !inSameLoop(prevInstruction,instruction,loopNumber);
    }
  }
))   return;
  final Set<BranchingInstruction> mayRemoveStatesFor=new THashSet<BranchingInstruction>();
  for (  Instruction instruction : myInstructions) {
    if (inSameLoop(prevInstruction,instruction,loopNumber) && instruction instanceof BranchingInstruction) {
      mayRemoveStatesFor.add((BranchingInstruction)instruction);
    }
  }
  for (  Instruction instruction : mayRemoveStatesFor) {
    processedStates.remove((BranchingInstruction)instruction);
    incomingStates.remove((BranchingInstruction)instruction);
  }
}
