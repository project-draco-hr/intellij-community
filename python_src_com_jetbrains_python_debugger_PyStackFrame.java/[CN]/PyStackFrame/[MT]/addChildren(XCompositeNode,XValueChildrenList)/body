{
  if (children == null) {
    node.addChildren(XValueChildrenList.EMPTY,true);
    return;
  }
  final PyDebuggerSettings debuggerSettings=PyDebuggerSettings.getInstance();
  XValueChildrenList filteredChildren=new XValueChildrenList();
  final HashMap<String,XValue> returnedValues=new HashMap<>();
  final HashMap<String,XValue> specialValues=new HashMap<>();
  final HashMap<String,XValue> ipythonHidden=new HashMap<>();
  for (int i=0; i < children.size(); i++) {
    XValue value=children.getValue(i);
    String name=children.getName(i);
    if (debuggerSettings.isSimplifiedView() && (value instanceof PyDebugValue) && (HIDE_TYPES.contains(((PyDebugValue)value).getType()))) {
      continue;
    }
    if ((value instanceof PyDebugValue) && ((PyDebugValue)value).isReturnedVal()) {
      if (debuggerSettings.isWatchReturnValues()) {
        returnedValues.put(name,value);
      }
    }
 else     if ((value instanceof PyDebugValue) && ((PyDebugValue)value).isIPythonHidden()) {
      ipythonHidden.put(name,value);
    }
 else     if (name.startsWith(DOUBLE_UNDERSCORE) && (name.endsWith(DOUBLE_UNDERSCORE))) {
      specialValues.put(name,value);
    }
 else {
      filteredChildren.add(name,value);
    }
  }
  node.addChildren(filteredChildren,returnedValues.isEmpty() && specialValues.isEmpty() && ipythonHidden.isEmpty());
  if (!returnedValues.isEmpty()) {
    addReturnedValuesGroup(node,returnedValues);
  }
  if (!specialValues.isEmpty()) {
    addSpecialValuesGroup(node,specialValues);
  }
  if (!ipythonHidden.isEmpty()) {
    addIPythonVariablesGroup(node,ipythonHidden);
  }
}
