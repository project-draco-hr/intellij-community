{
  PyFunction function=PsiTreeUtil.getParentOfType(expression,PyFunction.class);
  if (function != null && declaration != null) {
    PyParameterList parameterList=function.getParameterList();
    List<String> newParams=new ArrayList<String>();
    if (parameterList.hasKeywordContainer()) {
      for (      PyParameter parameter : parameterList.getParameters()) {
        if (parameter instanceof PyNamedParameter && ((PyNamedParameter)parameter).isKeywordContainer()) {
          newParams.add(declaration.getText());
        }
        newParams.add(parameter.getText());
      }
      final PyParameterList replacementList=PyElementGenerator.getInstance(function.getProject()).createFromText(LanguageLevel.forElement(parameterList),PyFunction.class,"def f(" + StringUtil.join(newParams,",") + "): pass").getParameterList();
      parameterList=(PyParameterList)parameterList.replace(replacementList);
      CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(parameterList);
    }
 else {
      parameterList.addParameter(PyElementGenerator.getInstance(function.getProject()).createParameter(declaration.getText()));
    }
    CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(function);
    return parameterList.findParameterByName(declaration.getTargets()[0].getText());
  }
  return null;
}
