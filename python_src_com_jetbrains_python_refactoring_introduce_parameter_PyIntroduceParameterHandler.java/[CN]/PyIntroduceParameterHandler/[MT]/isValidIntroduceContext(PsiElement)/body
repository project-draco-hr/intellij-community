{
  if (element != null) {
    final PyFunction function=PsiTreeUtil.getParentOfType(element,PyFunction.class);
    final ScopeOwner scopeOwner=ScopeUtil.getScopeOwner(element);
    final boolean[] isValid={true};
    if (scopeOwner != null) {
      new PyRecursiveElementVisitor(){
        @Override public void visitPyReferenceExpression(        PyReferenceExpression node){
          super.visitPyReferenceExpression(node);
          if (ControlFlowCache.getScope(scopeOwner).containsDeclaration(node.getName())) {
            isValid[0]=false;
          }
        }
      }
.visitElement(element);
    }
    return function != null && !isResolvedToParameter(element) && isValid[0];
  }
  return false;
}
