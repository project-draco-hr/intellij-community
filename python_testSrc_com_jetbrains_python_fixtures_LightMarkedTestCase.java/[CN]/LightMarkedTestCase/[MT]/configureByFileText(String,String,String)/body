{
  Pattern pat=Pattern.compile(markerRegexp);
  Matcher mat=pat.matcher(fileText);
  int rest_index=0;
  Map<String,Integer> offsets=new HashMap<String,Integer>();
  final StringBuffer text=new StringBuffer();
  while (mat.find(rest_index)) {
    String mark=mat.group();
    CharSequence prev_part=fileText.subSequence(rest_index,mat.start());
    text.append(prev_part);
    offsets.put(mark,text.length());
    rest_index=mat.end();
  }
  if (rest_index < fileText.length())   text.append(fileText.substring(rest_index));
  Map<String,PsiElement> result=new HashMap<String,PsiElement>();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      try {
        myFile=myFixture.addFileToProject(fileName,text.toString());
        myFixture.configureFromExistingVirtualFile(myFile.getVirtualFile());
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  for (  Map.Entry<String,Integer> entry : offsets.entrySet()) {
    result.put(entry.getKey(),myFile.findElementAt(entry.getValue()));
  }
  return result;
}
