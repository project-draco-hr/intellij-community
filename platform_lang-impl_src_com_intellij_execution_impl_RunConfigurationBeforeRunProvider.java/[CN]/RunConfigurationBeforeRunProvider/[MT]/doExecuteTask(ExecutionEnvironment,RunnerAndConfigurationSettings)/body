{
  final Executor executor=DefaultRunExecutor.getRunExecutorInstance();
  final String executorId=executor.getId();
  ExecutionEnvironmentBuilder builder=ExecutionEnvironmentBuilder.createOrNull(executor,settings);
  if (builder == null) {
    return false;
  }
  final ExecutionEnvironment environment=builder.target(env.getExecutionTarget()).build();
  environment.setExecutionId(env.getExecutionId());
  if (!ExecutionTargetManager.canRun(settings,environment.getExecutionTarget())) {
    return false;
  }
  if (!environment.getRunner().canRun(executorId,environment.getRunProfile())) {
    return false;
  }
 else {
    beforeRun(environment);
    final Semaphore targetDone=new Semaphore();
    final Ref<Boolean> result=new Ref<Boolean>(false);
    final Disposable disposable=Disposer.newDisposable();
    env.getProject().getMessageBus().connect(disposable).subscribe(ExecutionManager.EXECUTION_TOPIC,new ExecutionAdapter(){
      @Override public void processStartScheduled(      final String executorIdLocal,      final ExecutionEnvironment environmentLocal){
        if (executorId.equals(executorIdLocal) && environment.equals(environmentLocal)) {
          targetDone.down();
        }
      }
      @Override public void processNotStarted(      final String executorIdLocal,      @NotNull final ExecutionEnvironment environmentLocal){
        if (executorId.equals(executorIdLocal) && environment.equals(environmentLocal)) {
          Boolean skipRun=environment.getUserData(ExecutionManagerImpl.EXECUTION_SKIP_RUN);
          if (skipRun != null && skipRun) {
            result.set(true);
          }
          targetDone.up();
        }
      }
      @Override public void processStarted(      final String executorIdLocal,      @NotNull final ExecutionEnvironment environmentLocal,      @NotNull final ProcessHandler handler){
        if (executorId.equals(executorIdLocal) && environment.equals(environmentLocal)) {
          handler.addProcessListener(new ProcessAdapter(){
            @Override public void processTerminated(            ProcessEvent event){
              result.set(event.getExitCode() == 0);
              targetDone.up();
            }
          }
);
        }
      }
    }
);
    try {
      ApplicationManager.getApplication().invokeAndWait(new Runnable(){
        @Override public void run(){
          try {
            environment.getRunner().execute(environment);
          }
 catch (          ExecutionException e) {
            targetDone.up();
            LOG.error(e);
          }
        }
      }
,ModalityState.NON_MODAL);
    }
 catch (    Exception e) {
      LOG.error(e);
      Disposer.dispose(disposable);
      return false;
    }
    targetDone.waitFor();
    Disposer.dispose(disposable);
    return result.get();
  }
}
