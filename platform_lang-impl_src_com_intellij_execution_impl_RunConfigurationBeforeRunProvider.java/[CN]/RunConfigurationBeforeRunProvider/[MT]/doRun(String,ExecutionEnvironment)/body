{
  final Semaphore targetDone=new Semaphore();
  final Ref<Boolean> result=new Ref<Boolean>(false);
  final Disposable disposable=Disposer.newDisposable();
  myProject.getMessageBus().connect(disposable).subscribe(ExecutionManager.EXECUTION_TOPIC,new ExecutionAdapter(){
    @Override public void processStartScheduled(    final String executorIdLocal,    final ExecutionEnvironment environmentLocal){
      if (executorId.equals(executorIdLocal) && environment.equals(environmentLocal)) {
        targetDone.down();
      }
    }
    @Override public void processNotStarted(    final String executorIdLocal,    @NotNull final ExecutionEnvironment environmentLocal){
      if (executorId.equals(executorIdLocal) && environment.equals(environmentLocal)) {
        onProcessNotStarted(environment,result,targetDone);
      }
    }
    @Override public void processStarted(    final String executorIdLocal,    @NotNull final ExecutionEnvironment environmentLocal,    @NotNull final ProcessHandler handler){
      if (executorId.equals(executorIdLocal) && environment.equals(environmentLocal)) {
        handler.addProcessListener(new ProcessAdapter(){
          @Override public void processTerminated(          ProcessEvent event){
            result.set(event.getExitCode() == 0);
            targetDone.up();
          }
        }
);
      }
    }
  }
);
  try {
    ApplicationManager.getApplication().invokeAndWait(new Runnable(){
      @Override public void run(){
        try {
          environment.getRunner().execute(environment);
        }
 catch (        ExecutionException e) {
          targetDone.up();
          LOG.error(e);
        }
      }
    }
,ModalityState.NON_MODAL);
  }
 catch (  Exception e) {
    LOG.error(e);
    Disposer.dispose(disposable);
    return false;
  }
  targetDone.waitFor();
  Disposer.dispose(disposable);
  return result.get();
}
