{
  int oldOffset=intervalStart();
  super.changedUpdateImpl(e);
  if (isValid()) {
    if (e.getOldLength() == 0 && oldOffset == e.getOffset() && needToShiftWhiteSpaces(e)) {
      int afterInserted=e.getOffset() + e.getNewLength();
      setIntervalStart(afterInserted);
      setIntervalEnd(afterInserted);
    }
  }
 else {
    setValid(true);
    int newOffset=Math.min(intervalStart(),e.getOffset() + e.getNewLength());
    if (!((DocumentEx)e.getDocument()).isInBulkUpdate() && e.isWholeTextReplaced()) {
      try {
        final int line=((DocumentEventImpl)e).translateLineViaDiff(myLogicalCaret.line);
        newOffset=myEditor.logicalPositionToOffset(new LogicalPosition(line,myLogicalCaret.column));
      }
 catch (      FilesTooBigForDiffException ex) {
        LOG.info(ex);
      }
    }
    setIntervalStart(newOffset);
    setIntervalEnd(newOffset);
  }
  if (oldOffset >= e.getOffset() && oldOffset <= (e.getOffset() + e.getOldLength()) && e.getNewLength() == 0 && myEditor.getInlayModel().hasInlineElementAt(e.getOffset())) {
    myLeansTowardsLargerOffsets=true;
  }
 else   if (oldOffset == e.getOffset()) {
    myLeansTowardsLargerOffsets=false;
  }
}
