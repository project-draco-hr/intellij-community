{
  if (port == server.getPort() || port == -1) {
    return true;
  }
  if (channelRegistrar == null) {
    Disposer.register(server,this);
    channelRegistrar=new ChannelRegistrar();
  }
  ServerBootstrap bootstrap=NettyKt.serverBootstrap(server.getEventLoopGroup());
  Map<String,Object> xmlRpcHandlers=user.createXmlRpcHandlers();
  if (xmlRpcHandlers == null) {
    BuiltInServer.configureChildHandler(bootstrap,channelRegistrar,null);
  }
 else {
    final XmlRpcDelegatingHttpRequestHandler handler=new XmlRpcDelegatingHttpRequestHandler(xmlRpcHandlers);
    bootstrap.childHandler(new ChannelInitializer(){
      @Override protected void initChannel(      Channel channel) throws Exception {
        channel.pipeline().addLast(channelRegistrar);
        NettyUtil.addHttpServerCodec(channel.pipeline());
        channel.pipeline().addLast(handler);
      }
    }
);
  }
  try {
    bootstrap.localAddress(user.isAvailableExternally() ? new InetSocketAddress(port) : new InetSocketAddress(NetUtils.getLoopbackAddress(),port));
    channelRegistrar.add(bootstrap.bind().syncUninterruptibly().channel());
    return true;
  }
 catch (  Exception e) {
    try {
      NettyUtil.log(e,Logger.getInstance(BuiltInServer.class));
    }
  finally {
      user.cannotBind(e,port);
    }
    return false;
  }
}
