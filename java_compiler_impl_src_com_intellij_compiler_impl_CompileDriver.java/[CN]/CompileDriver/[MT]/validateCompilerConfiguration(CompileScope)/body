{
  try {
    final Module[] scopeModules=scope.getAffectedModules();
    final List<String> modulesWithoutOutputPathSpecified=new ArrayList<String>();
    final List<String> modulesWithoutJdkAssigned=new ArrayList<String>();
    final CompilerManager compilerManager=CompilerManager.getInstance(myProject);
    for (    final Module module : scopeModules) {
      if (!compilerManager.isValidationEnabled(module)) {
        continue;
      }
      final boolean hasSources=hasSources(module,JavaSourceRootType.SOURCE);
      final boolean hasTestSources=hasSources(module,JavaSourceRootType.TEST_SOURCE);
      if (!hasSources && !hasTestSources) {
        continue;
      }
      final Sdk jdk=ModuleRootManager.getInstance(module).getSdk();
      if (jdk == null) {
        modulesWithoutJdkAssigned.add(module.getName());
      }
      final String outputPath=getModuleOutputPath(module,false);
      final String testsOutputPath=getModuleOutputPath(module,true);
      if (outputPath == null && testsOutputPath == null) {
        modulesWithoutOutputPathSpecified.add(module.getName());
      }
 else {
        if (outputPath == null) {
          if (hasSources) {
            modulesWithoutOutputPathSpecified.add(module.getName());
          }
        }
        if (testsOutputPath == null) {
          if (hasTestSources) {
            modulesWithoutOutputPathSpecified.add(module.getName());
          }
        }
      }
    }
    if (!modulesWithoutJdkAssigned.isEmpty()) {
      showNotSpecifiedError("error.jdk.not.specified",modulesWithoutJdkAssigned,ProjectBundle.message("modules.classpath.title"));
      return false;
    }
    if (!modulesWithoutOutputPathSpecified.isEmpty()) {
      showNotSpecifiedError("error.output.not.specified",modulesWithoutOutputPathSpecified,CommonContentEntriesEditor.NAME);
      return false;
    }
    final List<Chunk<ModuleSourceSet>> chunks=ModuleCompilerUtil.getCyclicDependencies(myProject,Arrays.asList(scopeModules));
    for (    final Chunk<ModuleSourceSet> chunk : chunks) {
      final Set<ModuleSourceSet> sourceSets=chunk.getNodes();
      if (sourceSets.size() <= 1) {
        continue;
      }
      Sdk jdk=null;
      LanguageLevel languageLevel=null;
      for (      final ModuleSourceSet sourceSet : sourceSets) {
        Module module=sourceSet.getModule();
        final Sdk moduleJdk=ModuleRootManager.getInstance(module).getSdk();
        if (jdk == null) {
          jdk=moduleJdk;
        }
 else {
          if (!jdk.equals(moduleJdk)) {
            showCyclicModulesHaveDifferentJdksError(ModuleSourceSet.getModules(sourceSets));
            return false;
          }
        }
        LanguageLevel moduleLanguageLevel=LanguageLevelUtil.getEffectiveLanguageLevel(module);
        if (languageLevel == null) {
          languageLevel=moduleLanguageLevel;
        }
 else {
          if (!languageLevel.equals(moduleLanguageLevel)) {
            showCyclicModulesHaveDifferentLanguageLevel(ModuleSourceSet.getModules(sourceSets));
            return false;
          }
        }
      }
    }
    return true;
  }
 catch (  Throwable e) {
    LOG.info(e);
    return false;
  }
}
