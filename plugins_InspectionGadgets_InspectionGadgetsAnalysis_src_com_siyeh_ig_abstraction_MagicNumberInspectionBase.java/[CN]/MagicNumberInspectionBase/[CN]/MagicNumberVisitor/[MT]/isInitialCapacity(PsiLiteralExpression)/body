{
  final PsiElement element=PsiTreeUtil.skipParentsOfType(expression,PsiTypeCastExpression.class,PsiParenthesizedExpression.class,PsiPrefixExpression.class);
  if (!(element instanceof PsiExpressionList)) {
    return false;
  }
  final PsiElement parent=element.getParent();
  if (!(parent instanceof PsiNewExpression)) {
    return false;
  }
  final PsiNewExpression newExpression=(PsiNewExpression)parent;
  return TypeUtils.expressionHasTypeOrSubtype(newExpression,CommonClassNames.JAVA_LANG_ABSTRACT_STRING_BUILDER,CommonClassNames.JAVA_UTIL_MAP,CommonClassNames.JAVA_UTIL_COLLECTION) != null;
}
