{
  final PsiElement parent=PsiTreeUtil.skipParentsOfType(expression,PsiTypeCastExpression.class,PsiParenthesizedExpression.class,PsiPrefixExpression.class);
  final PsiVariable variable;
  if (!(parent instanceof PsiVariable)) {
    if (!(parent instanceof PsiAssignmentExpression)) {
      return false;
    }
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)parent;
    final PsiExpression lhs=assignmentExpression.getLExpression();
    if (!(lhs instanceof PsiReferenceExpression)) {
      return false;
    }
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)lhs;
    final PsiElement target=referenceExpression.resolve();
    if (!(target instanceof PsiVariable)) {
      return false;
    }
    variable=(PsiVariable)target;
  }
 else {
    variable=(PsiVariable)parent;
  }
  return variable.hasModifierProperty(PsiModifier.FINAL);
}
