{
  super(project,repository,changeListener);
  myUrlLabel.setVisible(false);
  myURLText.setVisible(false);
  myUsernameLabel.setVisible(false);
  myUserNameText.setVisible(false);
  myPasswordLabel.setText("Token:");
  myAllCardsCheckBox.setSelected(myRepository.isIncludeAllCards());
  myPasswordText.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      final String password=String.valueOf(myPasswordText.getPassword());
      if (password.isEmpty() || password.equals(myRepository.getPassword())) {
        return;
      }
      myRepository.setPassword(password);
      new BoardsComboBoxUpdater(){
        @Override @NotNull protected List<TrelloBoard> fetch(        @NotNull ProgressIndicator indicator) throws Exception {
          myRepository.setCurrentUser(myRepository.fetchUserByToken());
          return super.fetch(indicator);
        }
      }
.queue();
      doApply();
    }
  }
);
  myBoardComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      final TrelloBoard board=(TrelloBoard)e.getItem();
      if (e.getStateChange() == ItemEvent.DESELECTED || board.equals(myRepository.getCurrentBoard())) {
        return;
      }
      if (board != TrelloRepository.UNSPECIFIED_BOARD) {
        myRepository.setCurrentBoard(board);
        new ListsComboBoxUpdater(){
          @Nullable @Override public TrelloList getSelectedItem(){
            return TrelloRepository.UNSPECIFIED_LIST;
          }
        }
.queue();
      }
 else {
        myRepository.setCurrentBoard(null);
        myListComboBox.removeAllItems();
        myRepository.setCurrentList(null);
      }
      doApply();
    }
  }
);
  myBoardComboBox.setRenderer(new TaskUiUtil.SimpleComboBoxRenderer<TrelloBoard>("Set token first"){
    @NotNull @Override protected String getDescription(    @NotNull TrelloBoard board){
      return board.isClosed() ? board.getName() + " (closed)" : board.getName();
    }
  }
);
  myListComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        final TrelloList list=(TrelloList)e.getItem();
        myRepository.setCurrentList(list);
        doApply();
      }
    }
  }
);
  myListComboBox.setRenderer(new TaskUiUtil.SimpleComboBoxRenderer<TrelloList>("Select board first"){
    @NotNull @Override protected String getDescription(    @NotNull TrelloList list){
      String text=list.getName();
      if (list.isClosed() && list.isMoved()) {
        text+=" (archived,moved)";
      }
 else       if (list.isMoved()) {
        text+=" (moved)";
      }
 else       if (list.isClosed()) {
        text+=" (archived)";
      }
      return text;
    }
  }
);
  installListener(myAllCardsCheckBox);
  UIUtil.invokeLaterIfNeeded(new Runnable(){
    public void run(){
      initialize();
    }
  }
);
}
