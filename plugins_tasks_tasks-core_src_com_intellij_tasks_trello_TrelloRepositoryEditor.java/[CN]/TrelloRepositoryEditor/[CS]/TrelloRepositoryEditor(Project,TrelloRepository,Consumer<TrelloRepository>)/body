{
  super(project,repository,changeListener);
  myUrlLabel.setVisible(false);
  myURLText.setVisible(false);
  myUsernameLabel.setVisible(false);
  myUserNameText.setVisible(false);
  myPasswordLabel.setText("Token:");
  myAllCardsCheckBox.setSelected(myRepository.isIncludeAllCards());
  myPasswordText.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      String password=String.valueOf(myPasswordText.getPassword());
      if (password.equals(myRepository.getPassword())) {
        return;
      }
      myRepository.setPassword(password);
      new BoardsDownloader(UNSPECIFIED_BOARD){
        @Override protected List<TrelloBoard> download() throws Exception {
          myRepository.setCurrentUser(myRepository.fetchUserByToken());
          return super.download();
        }
      }
.runOnPooledThread();
      doApply();
    }
  }
);
  myBoardComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      TrelloBoard board=(TrelloBoard)e.getItem();
      if (e.getStateChange() == ItemEvent.DESELECTED || board.equals(myRepository.getCurrentBoard())) {
        return;
      }
      if (board != UNSPECIFIED_BOARD) {
        myRepository.setCurrentBoard(board);
        new ListsDownloader(UNSPECIFIED_LIST).runOnPooledThread();
      }
 else {
        myRepository.setCurrentBoard(null);
        myListComboBox.removeAllItems();
        myRepository.setCurrentList(null);
      }
      doApply();
    }
  }
);
  myBoardComboBox.setRenderer(new TrelloBoardRenderer("Set token first"));
  myListComboBox.setRenderer(new TrelloListRenderer("Select board first"));
  myListComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        TrelloList list=(TrelloList)e.getItem();
        myRepository.setCurrentList(list != UNSPECIFIED_LIST ? list : null);
        doApply();
      }
    }
  }
);
  if (myRepository.getCurrentUser() != null) {
    new BoardsDownloader(myRepository.getCurrentBoard()){
      @Override protected List<TrelloBoard> download() throws Exception {
        List<TrelloBoard> boards=super.download();
        if (myBoard == null) {
          return boards;
        }
        int i=boards.indexOf(myBoard);
        myBoard=i >= 0 ? boards.get(i) : myRepository.fetchBoardById(myBoard.getId());
        myRepository.setCurrentBoard(myBoard);
        return boards;
      }
    }
.runOnPooledThread();
  }
  if (myRepository.getCurrentBoard() != null) {
    new ListsDownloader(myRepository.getCurrentList()){
      @Override protected List<TrelloList> download() throws Exception {
        List<TrelloList> lists=super.download();
        if (myList == null) {
          return lists;
        }
        int i=lists.indexOf(myList);
        myList=i >= 0 ? lists.get(i) : myRepository.fetchListById(myList.getId());
        TrelloBoard currentBoard=myRepository.getCurrentBoard();
        if (currentBoard != null && !myList.getIdBoard().equals(currentBoard.getId())) {
          myList.setMoved(true);
        }
        myRepository.setCurrentList(myList);
        return lists;
      }
    }
.runOnPooledThread();
  }
  installListener(myAllCardsCheckBox);
}
