{
  final SdkAdditionalData sdkData=mySdk.getSdkAdditionalData();
  if (sdkData instanceof PythonRemoteSdkAdditionalData) {
    final PythonRemoteSdkAdditionalData remoteSdkData=(PythonRemoteSdkAdditionalData)sdkData;
    final PythonRemoteInterpreterManager manager=PythonRemoteInterpreterManager.getInstance();
    if (manager != null) {
      final List<String> cmdline=new ArrayList<String>();
      cmdline.add(mySdk.getHomePath());
      cmdline.add(new File(remoteSdkData.getPyCharmHelpersPath(),helper).getPath());
      cmdline.addAll(args);
      try {
        return manager.runRemoteProcess(null,remoteSdkData,ArrayUtil.toStringArray(cmdline));
      }
 catch (      PyRemoteInterpreterException e) {
        throw new PyExternalProcessException(ERROR_INVALID_SDK,helper,args,"Error running SDK");
      }
    }
 else {
      throw new PyExternalProcessException(ERROR_INVALID_SDK,helper,args,"Remote interpreter can't be executed. Please enable WebDeployment plugin.");
    }
  }
 else {
    final String homePath=mySdk.getHomePath();
    if (homePath == null) {
      throw new PyExternalProcessException(ERROR_INVALID_SDK,helper,args,"Cannot find interpreter for SDK");
    }
    final String helperPath=PythonHelpersLocator.getHelperPath(helper);
    if (helperPath == null) {
      throw new PyExternalProcessException(ERROR_TOOL_NOT_FOUND,helper,args,"Cannot find external tool");
    }
    final String parentDir=new File(homePath).getParent();
    final List<String> cmdline=new ArrayList<String>();
    cmdline.add(homePath);
    cmdline.add(helperPath);
    cmdline.addAll(args);
    return PySdkUtil.getProcessOutput(parentDir,ArrayUtil.toStringArray(cmdline),TIMEOUT);
  }
}
