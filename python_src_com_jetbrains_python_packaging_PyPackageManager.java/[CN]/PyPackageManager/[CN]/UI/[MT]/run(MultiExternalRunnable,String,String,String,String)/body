{
  ProgressManager.getInstance().run(new Task.Backgroundable(myProject,progressTitle,false){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      indicator.setText(progressTitle + "...");
      final Ref<Notification> notificationRef=new Ref<Notification>(null);
      final String PACKAGING_GROUP_ID="Packaging";
      final Application application=ApplicationManager.getApplication();
      if (myListener != null) {
        application.invokeLater(new Runnable(){
          @Override public void run(){
            myListener.started();
          }
        }
);
      }
      final List<PyExternalProcessException> exceptions=runnable.run(indicator);
      if (exceptions.isEmpty()) {
        notificationRef.set(new Notification(PACKAGING_GROUP_ID,successTitle,successDescription,NotificationType.INFORMATION));
      }
 else {
        final String progressLower=progressTitle.toLowerCase();
        final String firstLine=String.format("Error%s occurred when %s.",exceptions.size() > 1 ? "s" : "",progressLower);
        final String description=createDescription(exceptions,firstLine);
        notificationRef.set(new Notification(PACKAGING_GROUP_ID,failureTitle,firstLine + " <a href=\"xxx\">Details...</a>",NotificationType.ERROR,new NotificationListener(){
          @Override public void hyperlinkUpdate(          @NotNull Notification notification,          @NotNull HyperlinkEvent event){
            PyPIPackageUtil.showError(myProject,failureTitle,description);
          }
        }
));
      }
      application.invokeLater(new Runnable(){
        @Override public void run(){
          if (myListener != null) {
            myListener.finished(exceptions);
          }
          VirtualFileManager.getInstance().refreshWithoutFileWatcher(false);
          if (exceptions.isEmpty()) {
            PythonSdkType.getInstance().setupSdkPaths(mySdk);
          }
          final Notification notification=notificationRef.get();
          if (notification != null) {
            notification.notify(myProject);
          }
        }
      }
);
    }
  }
);
}
