{
  final PsiParameter[] parameters=takeParametersFrom.getParameterList().getParameters();
  final String lookupString=StringUtil.join(parameters,new Function<PsiParameter,String>(){
    @Override public String fun(    PsiParameter psiParameter){
      return psiParameter.getName();
    }
  }
,", ");
  final int w=PlatformIcons.PARAMETER_ICON.getIconWidth();
  LayeredIcon icon=new LayeredIcon(2);
  icon.setIcon(PlatformIcons.PARAMETER_ICON,0,2 * w / 5,0);
  icon.setIcon(PlatformIcons.PARAMETER_ICON,1);
  LookupElementBuilder element=LookupElementBuilder.create(lookupString).withIcon(icon);
  if (PsiTreeUtil.isAncestor(takeParametersFrom,call,true)) {
    element=element.withInsertHandler(new InsertHandler<LookupElement>(){
      @Override public void handleInsert(      InsertionContext context,      LookupElement item){
        context.commitDocument();
        for (        PsiParameter parameter : CompletionUtil.getOriginalOrSelf(takeParametersFrom).getParameterList().getParameters()) {
          VariableLookupItem.makeFinalIfNeeded(context,parameter);
        }
      }
    }
);
  }
  element.putUserData(JavaCompletionUtil.SUPER_METHOD_PARAMETERS,Boolean.TRUE);
  return TailTypeDecorator.withTail(element,ExpectedTypesProvider.getFinalCallParameterTailType(call,invoked.getReturnType(),invoked));
}
