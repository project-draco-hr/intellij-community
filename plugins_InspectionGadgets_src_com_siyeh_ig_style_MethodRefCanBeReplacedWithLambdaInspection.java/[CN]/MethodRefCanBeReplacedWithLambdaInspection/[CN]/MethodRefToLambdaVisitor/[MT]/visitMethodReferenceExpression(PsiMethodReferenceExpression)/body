{
  super.visitMethodReferenceExpression(methodReferenceExpression);
  final PsiType interfaceType=methodReferenceExpression.getFunctionalInterfaceType();
  if (interfaceType != null && LambdaUtil.getFunctionalInterfaceMethod(interfaceType) != null && methodReferenceExpression.resolve() != null) {
    registerError(methodReferenceExpression,getFixFactory(LambdaRefactoringUtil.canConvertToLambda(methodReferenceExpression),isOnTheFly()));
  }
}
