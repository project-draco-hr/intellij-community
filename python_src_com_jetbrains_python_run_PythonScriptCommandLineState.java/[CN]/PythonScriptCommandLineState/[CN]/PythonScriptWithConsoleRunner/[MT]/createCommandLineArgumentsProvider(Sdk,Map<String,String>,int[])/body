{
  final ArrayList<String> args=new ArrayList<String>();
  args.add(sdk.getHomePath());
  final String versionString=sdk.getVersionString();
  if (versionString == null || !versionString.toLowerCase().contains("jython")) {
    args.add("-u");
  }
  args.add(FileUtil.toSystemDependentName(PythonHelpersLocator.getHelperPath("pydev/pydev_run_in_console.py")));
  for (  int port : ports) {
    args.add(String.valueOf(port));
  }
  try {
    final GeneralCommandLine cmd=generateCommandLine(myPatchers);
    args.addAll(cmd.getParametersList().getList());
    return new CommandLineArgumentsProvider(){
      @Override public String[] getArguments(){
        return ArrayUtil.toStringArray(args);
      }
      @Override public boolean passParentEnvs(){
        return false;
      }
      @Override public Map<String,String> getAdditionalEnvs(){
        Map<String,String> map=addDefaultEnvironments(sdk,environmentVariables);
        map.putAll(cmd.getEnvironment());
        return map;
      }
    }
;
  }
 catch (  Exception e) {
    throw new IllegalStateException(e);
  }
}
