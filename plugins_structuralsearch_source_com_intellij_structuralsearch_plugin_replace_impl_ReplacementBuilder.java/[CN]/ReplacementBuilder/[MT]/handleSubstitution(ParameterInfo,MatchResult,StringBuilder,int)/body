{
  if (info.getName().equals(match.getName())) {
    String replacementString=match.getMatchImage();
    boolean forceAddingNewLine=false;
    if (info.isMethodParameterContext()) {
      StringBuilder buf=new StringBuilder();
      handleMethodParameter(buf,info);
      replacementString=buf.toString();
    }
 else     if (match.getAllSons().size() > 0 && !match.isScopeMatch()) {
      StringBuilder buf=new StringBuilder();
      MatchResult r=null;
      for (      final MatchResult matchResult : match.getAllSons()) {
        MatchResult previous=r;
        r=matchResult;
        final PsiElement currentElement=r.getMatch();
        if (buf.length() > 0) {
          final PsiElement parent=currentElement.getParent();
          if (info.isStatementContext()) {
            final PsiElement previousElement=previous.getMatchRef().getElement();
            if (!(previousElement instanceof PsiComment) && (buf.charAt(buf.length() - 1) != '}' || previousElement instanceof PsiDeclarationStatement)) {
              buf.append(';');
            }
            final PsiElement prevSibling=currentElement.getPrevSibling();
            if (prevSibling instanceof PsiWhiteSpace && prevSibling.getPrevSibling() == previous.getMatch()) {
              buf.append(prevSibling.getText());
            }
 else {
              buf.append('\n');
            }
          }
 else           if (info.isParameterContext()) {
            buf.append(',');
          }
 else           if (parent instanceof PsiClass) {
            final PsiElement prevSibling=PsiTreeUtil.skipSiblingsBackward(currentElement,PsiWhiteSpace.class);
            if (prevSibling instanceof PsiJavaToken && JavaTokenType.COMMA.equals(((PsiJavaToken)prevSibling).getTokenType())) {
              buf.append(',');
            }
 else {
              buf.append('\n');
            }
          }
 else           if (parent instanceof PsiReferenceList) {
            buf.append(',');
          }
 else {
            buf.append(' ');
          }
        }
        buf.append(r.getMatchImage());
        removeExtraSemicolonForSingleVarInstanceInMultipleMatch(info,r,buf);
        forceAddingNewLine=currentElement instanceof PsiComment;
      }
      replacementString=buf.toString();
    }
 else {
      StringBuilder buf=new StringBuilder();
      if (info.isStatementContext()) {
        forceAddingNewLine=match.getMatch() instanceof PsiComment;
      }
      buf.append(replacementString);
      removeExtraSemicolonForSingleVarInstanceInMultipleMatch(info,match,buf);
      replacementString=buf.toString();
    }
    offset=insertSubstitution(result,offset,info,replacementString);
    offset=removeExtraSemicolon(info,offset,result,match);
    if (forceAddingNewLine && info.isStatementContext()) {
      result.insert(info.getStartIndex() + offset + 1,'\n');
      offset++;
    }
  }
  return offset;
}
