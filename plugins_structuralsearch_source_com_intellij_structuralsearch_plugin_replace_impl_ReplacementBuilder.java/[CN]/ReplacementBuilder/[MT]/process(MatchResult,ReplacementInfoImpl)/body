{
  if (parameterizations == null) {
    return replacement;
  }
  final StringBuilder result=new StringBuilder(replacement);
  matchMap=new HashMap<String,MatchResult>();
  fill(match,matchMap);
  int offset=0;
  for (  final ParameterInfo info : parameterizations) {
    MatchResult r=matchMap.get(info.getName());
    if (info.isReplacementVariable()) {
      offset=insertSubstitution(result,offset,info,generateReplacement(info,match));
    }
 else     if (r != null) {
      offset=handleSubstitution(info,r,result,offset);
    }
 else {
      if (info.isHasCommaBefore()) {
        result.delete(info.getBeforeDelimiterPos() + offset,info.getBeforeDelimiterPos() + 1 + offset);
        --offset;
      }
 else       if (info.isHasCommaAfter()) {
        result.delete(info.getAfterDelimiterPos() + offset,info.getAfterDelimiterPos() + 1 + offset);
        --offset;
      }
 else       if (info.isVariableInitialContext()) {
        result.delete(info.getBeforeDelimiterPos() + offset,info.getAfterDelimiterPos() + offset - 1);
        offset-=(info.getAfterDelimiterPos() - info.getBeforeDelimiterPos() - 1);
      }
 else       if (info.isStatementContext()) {
        offset=removeExtraSemicolon(info,offset,result,r);
      }
      offset=insertSubstitution(result,offset,info,"");
    }
  }
  replacementInfo.variableMap=(HashMap<String,MatchResult>)matchMap.clone();
  matchMap.clear();
  return result.toString();
}
