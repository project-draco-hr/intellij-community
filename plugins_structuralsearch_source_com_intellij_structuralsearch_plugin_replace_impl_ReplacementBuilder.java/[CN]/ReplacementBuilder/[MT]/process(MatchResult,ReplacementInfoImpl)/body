{
  if (parameterizations == null) {
    return replacement;
  }
  final StringBuilder result=new StringBuilder(replacement);
  matchMap=new HashMap<String,MatchResult>();
  fill(match,matchMap);
  int offset=0;
  for (  final ParameterInfo info : parameterizations) {
    MatchResult r=matchMap.get(info.name);
    if (info.replacementVariable) {
      offset=insertSubstitution(result,offset,info,generateReplacement(info,match));
    }
 else     if (r != null) {
      offset=handleSubstitution(info,r,result,offset);
    }
 else {
      if (info.hasCommaBefore) {
        result.delete(info.beforeDelimiterPos + offset,info.beforeDelimiterPos + 1 + offset);
        --offset;
      }
 else       if (info.hasCommaAfter) {
        result.delete(info.afterDelimiterPos + offset,info.afterDelimiterPos + 1 + offset);
        --offset;
      }
 else       if (info.variableInitialContext) {
        result.delete(info.beforeDelimiterPos + offset,info.afterDelimiterPos + offset - 1);
        offset-=(info.afterDelimiterPos - info.beforeDelimiterPos - 1);
      }
 else       if (info.statementContext) {
        offset=removeExtraSemicolon(info,offset,result,r);
      }
      offset=insertSubstitution(result,offset,info,"");
    }
  }
  replacementInfo.variableMap=(HashMap<String,MatchResult>)matchMap.clone();
  matchMap.clear();
  return result.toString();
}
