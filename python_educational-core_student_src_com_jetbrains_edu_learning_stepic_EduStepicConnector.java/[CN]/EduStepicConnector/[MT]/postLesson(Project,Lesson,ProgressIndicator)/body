{
  final HttpPost request=new HttpPost(EduStepicNames.STEPIC_API_URL + "/lessons");
  if (ourClient == null) {
    login(project);
  }
  setHeaders(request,CONTENT_TYPE_APPL_JSON);
  String requestBody=new Gson().toJson(new StepicWrappers.LessonWrapper(lesson));
  request.setEntity(new StringEntity(requestBody,ContentType.APPLICATION_JSON));
  try {
    final CloseableHttpResponse response=ourClient.execute(request);
    final HttpEntity responseEntity=response.getEntity();
    final String responseString=responseEntity != null ? EntityUtils.toString(responseEntity) : "";
    final StatusLine line=response.getStatusLine();
    EntityUtils.consume(responseEntity);
    if (line.getStatusCode() == HttpStatus.SC_FORBIDDEN) {
      if (login(project)) {
        return postLesson(project,lesson,indicator);
      }
    }
    if (line.getStatusCode() != HttpStatus.SC_CREATED) {
      LOG.error("Failed to push " + responseString);
      return 0;
    }
    final Lesson postedLesson=new Gson().fromJson(responseString,Course.class).getLessons().get(0);
    lesson.setId(postedLesson.getId());
    for (    Task task : lesson.getTaskList()) {
      indicator.checkCanceled();
      postTask(project,task,postedLesson.getId());
    }
    return postedLesson.getId();
  }
 catch (  IOException e) {
    LOG.error(e.getMessage());
  }
  return -1;
}
