{
  if (task.getStepId() <= 0) {
    return;
  }
  final HttpPost attemptRequest=new HttpPost(EduStepicNames.STEPIC_API_URL + EduStepicNames.ATTEMPTS);
  String attemptRequestBody=new Gson().toJson(new StepicWrappers.AttemptWrapper(task.getStepId()));
  attemptRequest.setEntity(new StringEntity(attemptRequestBody,ContentType.APPLICATION_JSON));
  try {
    final CloseableHttpClient client=EduStepicAuthorizedClient.getHttpClient(project);
    final CloseableHttpResponse attemptResponse=client.execute(attemptRequest);
    final HttpEntity responseEntity=attemptResponse.getEntity();
    final String attemptResponseString=responseEntity != null ? EntityUtils.toString(responseEntity) : "";
    final StatusLine statusLine=attemptResponse.getStatusLine();
    EntityUtils.consume(responseEntity);
    if (statusLine.getStatusCode() != HttpStatus.SC_CREATED) {
      LOG.warn("Failed to make attempt " + attemptResponseString);
    }
    final StepicWrappers.AttemptWrapper.Attempt attempt=new Gson().fromJson(attemptResponseString,StepicWrappers.AttemptContainer.class).attempts.get(0);
    final Map<String,TaskFile> taskFiles=task.getTaskFiles();
    final ArrayList<StepicWrappers.SolutionFile> files=new ArrayList<>();
    for (    TaskFile fileEntry : taskFiles.values()) {
      files.add(new StepicWrappers.SolutionFile(fileEntry.name,fileEntry.text));
    }
    postSubmission(passed,attempt,project,files);
  }
 catch (  IOException e) {
    LOG.error(e.getMessage());
  }
}
