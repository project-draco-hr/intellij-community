{
  removeAll();
  final Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  final MavenRunConfiguration runConfiguration=MavenDataKeys.RUN_CONFIGURATION.getData(e.getDataContext());
  if (runConfiguration == null || project == null)   return;
  for (  final Executor executor : ExecutorRegistry.getInstance().getRegisteredExecutors()) {
    final ProgramRunner runner=RunnerRegistry.getInstance().getRunner(executor.getId(),runConfiguration);
    AnAction action=new AnAction(executor.getActionName(),null,executor.getIcon()){
      @Override public void actionPerformed(      AnActionEvent event){
        if (runner == null)         return;
        RunManagerImpl runManager=(RunManagerImpl)RunManager.getInstance(project);
        RunnerAndConfigurationSettings settings=new RunnerAndConfigurationSettingsImpl(runManager,runConfiguration,false);
        ExecutionEnvironment env=new ExecutionEnvironment(executor,runner,settings,project);
        try {
          runner.execute(env,null);
        }
 catch (        ExecutionException e) {
          MavenUtil.showError(project,"Failed to execute Maven goal",e);
        }
      }
      @Override public void update(      AnActionEvent e){
        super.update(e);
        e.getPresentation().setEnabled(runner != null);
      }
    }
;
    addAction(action);
  }
  super.update(e);
}
