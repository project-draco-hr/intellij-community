{
  if (!virtualFile.isDirectory()) {
    final String fileName=virtualFile.getName();
    myIndicator.setText2(fileName);
    try {
      String relativePath=VfsUtilCore.getRelativePath(virtualFile,myRootDir,'/');
      if (relativePath == null) {
        throw new RuntimeException("Can't find relative path for " + virtualFile + " in "+ myRootDir);
      }
      final boolean system=Project.DIRECTORY_STORE_FOLDER.equals(virtualFile.getParent().getName());
      if (system) {
        if (!fileName.equals("description.html") && !fileName.equals(PROJECT_TEMPLATE_XML) && !fileName.equals(LocalArchivedTemplate.TEMPLATE_META_XML)&& !fileName.equals("misc.xml")&& !fileName.equals("modules.xml")&& !fileName.equals("workspace.xml")&& !fileName.endsWith(".iml")) {
          return true;
        }
      }
      ZipUtil.addFileToZip(myFinalStream,new File(virtualFile.getPath()),myPrefix + "/" + relativePath,null,null,new ZipUtil.FileContentProcessor(){
        @Override public InputStream getContent(        final File file) throws IOException {
          if (virtualFile.getFileType().isBinary() || PROJECT_TEMPLATE_XML.equals(virtualFile.getName()))           return STANDARD.getContent(file);
          String result=getEncodedContent(virtualFile,myProject,myParameters,getFileHeaderTemplateName(),myShouldEscape);
          return new ByteArrayInputStream(result.getBytes(CharsetToolkit.UTF8_CHARSET));
        }
      }
);
    }
 catch (    IOException e) {
      LOG.error(e);
    }
  }
  myIndicator.checkCanceled();
  return true;
}
