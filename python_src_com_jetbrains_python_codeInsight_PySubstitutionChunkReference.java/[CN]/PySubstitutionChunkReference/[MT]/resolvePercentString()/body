{
  PyBinaryExpression binaryExpression=PsiTreeUtil.getParentOfType(getElement(),PyBinaryExpression.class);
  final Class[] SIMPLE_RESULT_EXPRESSIONS={PyLiteralExpression.class,PySubscriptionExpression.class,PyBinaryExpression.class,PyConditionalExpression.class,PyCallExpression.class,PySliceExpression.class,PyReferenceExpression.class};
  if (binaryExpression != null) {
    PyExpression rightExpression=binaryExpression.getRightExpression();
    if (rightExpression instanceof PyParenthesizedExpression) {
      PyParenthesizedExpression expression=(PyParenthesizedExpression)rightExpression;
      PyExpression containedExpression=expression.getContainedExpression();
      if (containedExpression instanceof PyTupleExpression) {
        PyExpression[] elements=((PySequenceExpression)containedExpression).getElements();
        if (elements.length > myPosition) {
          return elements[myPosition];
        }
      }
    }
 else     if (rightExpression instanceof PyDictLiteralExpression) {
      if (myChunk.getMappingKey() != null) {
        PyKeyValueExpression[] keyValueExpressions=((PyDictLiteralExpression)rightExpression).getElements();
        for (        PyKeyValueExpression keyValueExpression : keyValueExpressions) {
          PyStringLiteralExpression key=(PyStringLiteralExpression)keyValueExpression.getKey();
          if (key.getStringValue().equals(myChunk.getMappingKey())) {
            return key;
          }
        }
      }
    }
 else     if (PyUtil.instanceOf(rightExpression,SIMPLE_RESULT_EXPRESSIONS)) {
      return rightExpression;
    }
  }
  return null;
}
