{
  final PyExpression expr=PsiTreeUtil.getChildOfAnyType(starArgument,PyListLiteralExpression.class,PyParenthesizedExpression.class);
  if (expr == null) {
    return starArgument;
  }
  final int position=(myChunk.getPosition() != null ? myChunk.getPosition() : myPosition) - argumentPosition;
  final PyExpression[] elements;
  if (expr instanceof PyListLiteralExpression) {
    elements=((PyListLiteralExpression)expr).getElements();
  }
 else   if (expr instanceof PyParenthesizedExpression) {
    final PyExpression expression=PyPsiUtils.flattenParens(expr);
    final PyTupleExpression tupleExpr=PyUtil.as(expression,PyTupleExpression.class);
    if (tupleExpr == null) {
      return starArgument;
    }
    elements=tupleExpr.getElements();
  }
 else {
    elements=null;
  }
  return elements != null && position < elements.length ? elements[position] : null;
}
