{
  final Set<PsiAnchor> processedMethods=ContainerUtil.newConcurrentSet();
  ReferencesSearch.searchOptimized(clazz,scope,false,collector,true,new PairProcessor<PsiReference,SearchRequestCollector>(){
    @Override public boolean process(    PsiReference ref,    SearchRequestCollector collector){
      final PsiElement element=ref.getElement();
      if (element instanceof GrCodeReferenceElement) {
        if (!processGroovyConstructorUsages((GrCodeReferenceElement)element,!searchGppCalls,newExpressionProcessor,literalProcessor)) {
          return false;
        }
      }
      if (searchGppCalls) {
        final PsiMethod method=getMethodToSearchForCallsWithLiteralArguments(element,clazz);
        if (method != null && processedMethods.add(PsiAnchor.create(method))) {
          processGppMethodCalls(clazz,scope,collector,method,literalProcessor);
        }
      }
      return true;
    }
  }
);
}
