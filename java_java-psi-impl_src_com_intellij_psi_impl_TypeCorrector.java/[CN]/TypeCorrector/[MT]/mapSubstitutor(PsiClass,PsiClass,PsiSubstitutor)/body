{
  PsiTypeParameter[] typeParameters=mappedClass.getTypeParameters();
  PsiTypeParameter[] originalTypeParameters=originalClass.getTypeParameters();
  if (typeParameters.length != originalTypeParameters.length)   return substitutor;
  PsiSubstitutor mappedSubstitutor=PsiSubstitutor.EMPTY;
  for (int i=0; i < originalTypeParameters.length; i++) {
    PsiType originalSubstitute=substitutor.substitute(originalTypeParameters[i]);
    if (originalSubstitute != null) {
      PsiType substitute=mapType(originalSubstitute);
      if (substitute == null)       return substitutor;
      mappedSubstitutor=mappedSubstitutor.put(typeParameters[i],substitute);
    }
 else {
      mappedSubstitutor=mappedSubstitutor.put(typeParameters[i],null);
    }
  }
  if (mappedClass.hasModifierProperty(PsiModifier.STATIC)) {
    return mappedSubstitutor;
  }
  PsiClass mappedContaining=mappedClass.getContainingClass();
  PsiClass originalContaining=originalClass.getContainingClass();
  if ((mappedContaining != null) != (originalContaining != null)) {
    return substitutor;
  }
  if (mappedContaining != null) {
    return mappedSubstitutor.putAll(mapSubstitutor(originalContaining,mappedContaining,substitutor));
  }
  return mappedSubstitutor;
}
