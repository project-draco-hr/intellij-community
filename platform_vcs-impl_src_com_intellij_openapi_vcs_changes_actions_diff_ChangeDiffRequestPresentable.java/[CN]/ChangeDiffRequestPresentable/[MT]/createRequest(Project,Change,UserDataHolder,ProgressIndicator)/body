{
  if (ChangesUtil.isTextConflictingChange(change)) {
    FilePath path=ChangesUtil.getFilePath(change);
    VirtualFile file=path.getVirtualFile();
    if (file == null) {
      path.hardRefresh();
      file=path.getVirtualFile();
    }
    if (file == null)     throw new DiffRequestPresentableException("Can't show merge conflict - file not found");
    final AbstractVcs vcs=ChangesUtil.getVcsForChange(change,project);
    if (vcs == null || vcs.getMergeProvider() == null) {
      throw new DiffRequestPresentableException("Can't show merge conflict - operation nos supported");
    }
    try {
      final Ref<Throwable> exceptionRef=new Ref<Throwable>();
      final Ref<MergeData> mergeDataRef=new Ref<MergeData>();
      final VirtualFile finalFile=file;
      UIUtil.invokeAndWaitIfNeeded(new Runnable(){
        @Override public void run(){
          try {
            mergeDataRef.set(vcs.getMergeProvider().loadRevisions(finalFile));
          }
 catch (          VcsException e) {
            exceptionRef.set(e);
          }
        }
      }
);
      if (!exceptionRef.isNull()) {
        Throwable e=exceptionRef.get();
        if (e instanceof VcsException)         throw (VcsException)e;
        if (e instanceof Error)         throw (Error)e;
        if (e instanceof RuntimeException)         throw (RuntimeException)e;
        throw new RuntimeException(e);
      }
      MergeData mergeData=mergeDataRef.get();
      ContentRevision bRev=change.getBeforeRevision();
      ContentRevision aRev=change.getAfterRevision();
      String beforeRevisionTitle=getRevisionTitle(bRev,"Your version");
      String afterRevisionTitle=getRevisionTitle(aRev,"Server version");
      String title=FileUtil.toSystemDependentName(file.getPresentableUrl());
      String[] titles=new String[]{beforeRevisionTitle,"Base Version",afterRevisionTitle};
      DiffContent[] contents=new DiffContent[]{createTextContent(mergeData.CURRENT,file),createTextContent(mergeData.ORIGINAL,file),createTextContent(mergeData.LAST,file)};
      return new SimpleDiffRequest(title,contents,titles);
    }
 catch (    VcsException e) {
      LOG.info(e);
      throw new DiffRequestPresentableException(e);
    }
  }
 else {
    ContentRevision bRev=change.getBeforeRevision();
    ContentRevision aRev=change.getAfterRevision();
    if (bRev == null && aRev == null) {
      LOG.warn("Both revision contents are empty");
      throw new DiffRequestPresentableException("Bad revisions contents");
    }
    if (bRev != null)     checkContentRevision(project,bRev,context,indicator);
    if (aRev != null)     checkContentRevision(project,aRev,context,indicator);
    String title=getRequestTitle(bRev,aRev);
    indicator.setIndeterminate(true);
    DiffContent content1=createContent(project,bRev,context,indicator);
    DiffContent content2=createContent(project,aRev,context,indicator);
    String beforeRevisionTitle=getRevisionTitle(bRev,"Base version");
    String afterRevisionTitle=getRevisionTitle(aRev,"Your version");
    return new SimpleDiffRequest(title,content1,content2,beforeRevisionTitle,afterRevisionTitle);
  }
}
