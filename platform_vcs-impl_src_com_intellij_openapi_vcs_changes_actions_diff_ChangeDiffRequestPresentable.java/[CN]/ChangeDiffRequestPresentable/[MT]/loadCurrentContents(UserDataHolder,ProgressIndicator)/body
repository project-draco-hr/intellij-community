{
  final ContentRevision bRev=myChange.getBeforeRevision();
  final ContentRevision aRev=myChange.getAfterRevision();
  if (bRev == null && aRev == null) {
    LOG.warn("Both revision contents are empty");
    throw new DiffRequestPresentableException("Bad revisions contents");
  }
  if (bRev != null)   checkContentRevision(bRev,context,indicator);
  if (aRev != null)   checkContentRevision(aRev,context,indicator);
  String beforePath=getPathPresentable(bRev);
  String afterPath=getPathPresentable(aRev);
  String title;
  if (beforePath != null && afterPath != null && !beforePath.equals(afterPath)) {
    title=beforePath + " -> " + afterPath;
  }
 else   if (beforePath != null) {
    title=beforePath;
  }
 else {
    title=afterPath;
  }
  indicator.setIndeterminate(true);
  DiffContent content1=createContent(bRev,indicator);
  DiffContent content2=createContent(aRev,indicator);
  String beforeRevisionTitle=(bRev != null) ? bRev.getRevisionNumber().asString() : "";
  String afterRevisionTitle=(aRev != null) ? aRev.getRevisionNumber().asString() : "";
  if ((beforeRevisionTitle == null) || (beforeRevisionTitle.length() == 0)) {
    beforeRevisionTitle="Base version";
  }
  if ((afterRevisionTitle == null) || (afterRevisionTitle.length() == 0)) {
    afterRevisionTitle="Your version";
  }
  SimpleDiffRequest request=new SimpleDiffRequest(title,content1,content2,beforeRevisionTitle,afterRevisionTitle);
  request.putUserData(CONTENT_REVISIONS,new ContentRevision[]{aRev,bRev});
  for (  Map.Entry<Key,Object> entry : myContext.entrySet()) {
    request.putUserData(entry.getKey(),entry.getValue());
  }
  GenericDataProvider dataProvider=new GenericDataProvider();
  dataProvider.putData(VcsDataKeys.CURRENT_CHANGE,myChange);
  request.putUserData(DiffUserDataKeys.DATA_PROVIDER,dataProvider);
  return request;
}
