{
  final String moduleName=project.getName();
  final String moduleGroup=project.getGroup().toString();
  final String moduleVersion=project.getVersion().toString();
  final ModuleExtendedModelImpl moduleVersionModel=new ModuleExtendedModelImpl(moduleName,moduleGroup,moduleVersion);
  final List<File> artifacts=new ArrayList<File>();
  for (  Task task : project.getTasks()) {
    if (task instanceof Jar) {
      Jar jar=(Jar)task;
      artifacts.add(jar.getArchivePath());
    }
  }
  moduleVersionModel.setArtifacts(artifacts);
  final Set<String> sourceDirectories=new HashSet<String>();
  final Set<String> testDirectories=new HashSet<String>();
  final Set<String> resourceDirectories=new HashSet<String>();
  final Set<String> testResourceDirectories=new HashSet<String>();
  final List<File> testClassesDirs=new ArrayList<File>();
  for (  Task task : project.getTasks()) {
    if (task instanceof Test) {
      Test test=(Test)task;
      testClassesDirs.add(test.getTestClassesDir());
      if (test.hasProperty(TEST_SRC_DIRS_PROPERTY)) {
        Object testSrcDirs=test.property(TEST_SRC_DIRS_PROPERTY);
        if (testSrcDirs instanceof Iterable) {
          for (          Object dir : Iterable.class.cast(testSrcDirs)) {
            addFilePath(testDirectories,dir);
          }
        }
      }
    }
  }
  if (project.hasProperty(SOURCE_SETS_PROPERTY)) {
    Object sourceSets=project.property(SOURCE_SETS_PROPERTY);
    if (sourceSets instanceof SourceSetContainer) {
      SourceSetContainer sourceSetContainer=(SourceSetContainer)sourceSets;
      for (      SourceSet sourceSet : sourceSetContainer) {
        for (        File javaSrcDir : sourceSet.getAllJava().getSrcDirs()) {
          boolean isTestDir=isTestDir(sourceSet,testClassesDirs);
          addFilePath(isTestDir ? testDirectories : sourceDirectories,javaSrcDir);
        }
        for (        File resourcesSrcDir : sourceSet.getResources().getSrcDirs()) {
          boolean isTestDir=isTestDir(sourceSet,testClassesDirs);
          addFilePath(isTestDir ? testResourceDirectories : resourceDirectories,resourcesSrcDir);
        }
      }
    }
  }
  File projectDir=project.getProjectDir();
  IdeaContentRootImpl contentRoot=new IdeaContentRootImpl(projectDir);
  final Set<String> ideaSourceDirectories=new HashSet<String>();
  final Set<String> ideaTestDirectories=new HashSet<String>();
  final Set<String> ideaExtResourceDirectories=new HashSet<String>();
  final Set<String> ideaExtTestResourceDirectories=new HashSet<String>();
  final Set<File> excludeDirectories=new HashSet<File>();
  enrichDataFromIdeaPlugin(project,excludeDirectories,ideaSourceDirectories,ideaTestDirectories,ideaExtResourceDirectories,ideaExtTestResourceDirectories);
  if (ideaSourceDirectories.isEmpty()) {
    sourceDirectories.clear();
    resourceDirectories.clear();
  }
  if (ideaTestDirectories.isEmpty()) {
    testDirectories.clear();
    testResourceDirectories.clear();
  }
  ideaSourceDirectories.removeAll(resourceDirectories);
  sourceDirectories.removeAll(ideaTestDirectories);
  sourceDirectories.addAll(ideaSourceDirectories);
  ideaTestDirectories.removeAll(testResourceDirectories);
  testDirectories.addAll(ideaTestDirectories);
  resourceDirectories.removeAll(ideaExtTestResourceDirectories);
  resourceDirectories.addAll(ideaExtResourceDirectories);
  testResourceDirectories.removeAll(ideaExtResourceDirectories);
  testResourceDirectories.addAll(ideaExtTestResourceDirectories);
  resourceDirectories.removeAll(sourceDirectories);
  testDirectories.removeAll(sourceDirectories);
  testResourceDirectories.removeAll(testDirectories);
  for (  String javaDir : sourceDirectories) {
    contentRoot.addSourceDirectory(new IdeaSourceDirectoryImpl(new File(javaDir)));
  }
  for (  String testDir : testDirectories) {
    contentRoot.addTestDirectory(new IdeaSourceDirectoryImpl(new File(testDir)));
  }
  for (  String resourceDir : resourceDirectories) {
    contentRoot.addResourceDirectory(new IdeaSourceDirectoryImpl(new File(resourceDir)));
  }
  for (  String testResourceDir : testResourceDirectories) {
    contentRoot.addTestResourceDirectory(new IdeaSourceDirectoryImpl(new File(testResourceDir)));
  }
  for (  File excludeDir : excludeDirectories) {
    contentRoot.addExcludeDirectory(excludeDir);
  }
  moduleVersionModel.setContentRoots(Collections.<ExtIdeaContentRoot>singleton(contentRoot));
  return moduleVersionModel;
}
