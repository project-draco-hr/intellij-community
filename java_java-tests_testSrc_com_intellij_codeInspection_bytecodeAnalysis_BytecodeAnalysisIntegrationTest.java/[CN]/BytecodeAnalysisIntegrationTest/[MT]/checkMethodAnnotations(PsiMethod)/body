{
  try {
    if (ProjectBytecodeAnalysis.getKey(method) == -1) {
      return;
    }
  }
 catch (  IOException e) {
    fail();
  }
  String externalOutAnnotation=myExternalAnnotationsManager.findExternalAnnotation(method,AnnotationUtil.NOT_NULL) == null ? "null" : "@NotNull";
  String inferredOutAnnotation=myInferredAnnotationsManager.findInferredAnnotation(method,AnnotationUtil.NOT_NULL) == null ? "null" : "@NotNull";
  String methodKey=PsiFormatUtil.getExternalName(method,false,Integer.MAX_VALUE);
  if (!externalOutAnnotation.equals(inferredOutAnnotation)) {
    diffs.add(methodKey + ": " + externalOutAnnotation+ " != "+ inferredOutAnnotation);
  }
  for (  PsiParameter parameter : method.getParameterList().getParameters()) {
    String parameterKey=PsiFormatUtil.getExternalName(parameter,false,Integer.MAX_VALUE);
    String externalParameterAnnotation=myExternalAnnotationsManager.findExternalAnnotation(parameter,AnnotationUtil.NOT_NULL) == null ? "null" : "@NotNull";
    String inferredParameterAnnotation=myInferredAnnotationsManager.findInferredAnnotation(parameter,AnnotationUtil.NOT_NULL) == null ? "null" : "@NotNull";
    if (!externalParameterAnnotation.equals(inferredParameterAnnotation)) {
      diffs.add(parameterKey + ": " + externalParameterAnnotation+ " != "+ inferredParameterAnnotation);
    }
  }
  PsiAnnotation externalContractAnnotation=myExternalAnnotationsManager.findExternalAnnotation(method,ORG_JETBRAINS_ANNOTATIONS_CONTRACT);
  PsiAnnotation inferredContractAnnotation=myInferredAnnotationsManager.findInferredAnnotation(method,ORG_JETBRAINS_ANNOTATIONS_CONTRACT);
  String externalContractAnnotationString=externalContractAnnotation == null ? "null" : "@Contract(" + AnnotationUtil.getStringAttributeValue(externalContractAnnotation,null) + ")";
  String inferredContractAnnotationString=inferredContractAnnotation == null ? "null" : "@Contract(" + AnnotationUtil.getStringAttributeValue(inferredContractAnnotation,null) + ")";
  if (!externalContractAnnotationString.equals(inferredContractAnnotationString)) {
    diffs.add(methodKey + ": " + externalContractAnnotationString+ " != "+ inferredContractAnnotationString);
  }
}
