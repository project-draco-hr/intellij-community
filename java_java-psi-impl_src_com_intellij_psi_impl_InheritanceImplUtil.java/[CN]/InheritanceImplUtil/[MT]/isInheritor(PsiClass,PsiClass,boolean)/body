{
  if (baseClass instanceof PsiAnonymousClass)   return false;
  if (!checkDeep)   return isInheritor(candidateClass,baseClass,false,null);
  if (CommonClassNames.JAVA_LANG_OBJECT_SHORT.equals(candidateClass.getName()) && CommonClassNames.JAVA_LANG_OBJECT.equals(candidateClass.getQualifiedName()))   return false;
  if (CommonClassNames.JAVA_LANG_OBJECT_SHORT.equals(baseClass.getName()) && CommonClassNames.JAVA_LANG_OBJECT.equals(baseClass.getQualifiedName()))   return true;
  Map<PsiClass,Boolean> map=CachedValuesManager.getCachedValue(candidateClass,new CachedValueProvider<Map<PsiClass,Boolean>>(){
    @Nullable @Override public Result<Map<PsiClass,Boolean>> compute(){
      final Map<PsiClass,Boolean> map=new ConcurrentWeakHashMap<PsiClass,Boolean>();
      return Result.create(map,candidateClass,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);
    }
  }
);
  Boolean computed=map.get(baseClass);
  if (computed == null) {
    computed=isInheritor(candidateClass,baseClass,true,null);
    map.put(baseClass,computed);
  }
  return computed;
}
