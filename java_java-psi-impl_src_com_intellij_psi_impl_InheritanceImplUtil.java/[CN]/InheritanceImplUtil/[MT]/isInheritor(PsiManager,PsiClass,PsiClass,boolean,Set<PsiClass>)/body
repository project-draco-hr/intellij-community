{
  if (candidateClass instanceof PsiAnonymousClass) {
    final PsiClass baseCandidateClass=((PsiAnonymousClass)candidateClass).getBaseClassType().resolve();
    return baseCandidateClass != null && InheritanceUtil.isInheritorOrSelf(baseCandidateClass,baseClass,checkDeep);
  }
  if (checkDeep && LOG.isDebugEnabled()) {
    LOG.debug("Using uncached version for " + candidateClass.getQualifiedName() + " and "+ baseClass);
  }
  JavaPsiFacade facade=JavaPsiFacade.getInstance(manager.getProject());
  if (hasObjectQualifiedName(baseClass)) {
    PsiClass objectClass=facade.findClass(CommonClassNames.JAVA_LANG_OBJECT,candidateClass.getResolveScope());
    if (manager.areElementsEquivalent(baseClass,objectClass)) {
      if (manager.areElementsEquivalent(candidateClass,objectClass))       return false;
      if (checkDeep || candidateClass.isInterface())       return true;
      return manager.areElementsEquivalent(candidateClass.getSuperClass(),objectClass);
    }
  }
  if (!checkDeep) {
    final boolean isCandidateInterface=candidateClass.isInterface();
    final boolean isBaseInterface=baseClass.isInterface();
    if (candidateClass instanceof PsiCompiledElement) {
      String baseQName=baseClass.getQualifiedName();
      if (baseQName == null)       return false;
      GlobalSearchScope scope=candidateClass.getResolveScope();
      if (CommonClassNames.JAVA_LANG_ENUM.equals(baseQName) && candidateClass.isEnum() && facade.findClass(baseQName,scope) != null) {
        return true;
      }
      if (CommonClassNames.JAVA_LANG_ANNOTATION_ANNOTATION.equals(baseQName) && candidateClass.isAnnotationType() && facade.findClass(baseQName,scope) != null) {
        return true;
      }
      if (isCandidateInterface == isBaseInterface && checkReferenceListWithQualifiedNames(baseQName,candidateClass.getExtendsList(),scope,facade))       return true;
      return isBaseInterface && !isCandidateInterface && checkReferenceListWithQualifiedNames(baseQName,candidateClass.getImplementsList(),scope,facade);
    }
    String baseName=baseClass.getName();
    if (isCandidateInterface == isBaseInterface) {
      return PsiClassImplUtil.isInExtendsList(candidateClass,baseClass,baseName,manager);
    }
    if (!isCandidateInterface) {
      return PsiClassImplUtil.isInReferenceList(candidateClass.getImplementsList(),baseClass,baseName,manager);
    }
    return false;
  }
  return isInheritorWithoutCaching(manager,candidateClass,baseClass,checkedClasses);
}
