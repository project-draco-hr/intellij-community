{
  Node commitNode=dataPack.getGraphModel().getGraph().getCommitNodeInRow(rowIndex);
  VcsCommitMiniDetails data;
  if (commitNode == null) {
    data=null;
  }
 else {
    data=myDataHolder.getMiniDetailsGetter().getCommitData(commitNode);
  }
switch (columnIndex) {
case ROOT_COLUMN:
    if (commitNode != null) {
      return commitNode.getBranch().getRepositoryRoot();
    }
 else {
      return null;
    }
case COMMIT_COLUMN:
  GraphPrintCell graphPrintCell=dataPack.getPrintCellModel().getGraphPrintCell(rowIndex);
GraphCommitCell.Kind cellKind=getCellKind(PositionUtil.getNode(graphPrintCell));
String message="";
List<VcsRef> refs=Collections.emptyList();
if (data != null) {
if (cellKind == GraphCommitCell.Kind.REWORD) {
message=reworded.get(commitNode.getCommitHash());
}
 else {
message=data.getSubject();
refs=dataPack.getRefsModel().refsToCommit(data.getHash());
}
}
return new GraphCommitCell(graphPrintCell,cellKind,message,refs);
case AUTHOR_COLUMN:
if (data == null) {
return "";
}
 else {
return data.getAuthorName();
}
case DATE_COLUMN:
if (data == null) {
return "";
}
 else {
return DateFormatUtil.formatDateTime(data.getAuthorTime());
}
default :
throw new IllegalArgumentException("columnIndex > 2");
}
}
