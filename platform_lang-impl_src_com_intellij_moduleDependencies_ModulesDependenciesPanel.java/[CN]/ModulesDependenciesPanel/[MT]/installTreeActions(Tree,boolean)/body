{
  tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  tree.setCellRenderer(NODE_RENDERER);
  tree.setRootVisible(false);
  tree.setShowsRootHandles(true);
  UIUtil.setLineStyleAngled(tree);
  TreeUtil.installActions(tree);
  new TreeSpeedSearch(tree,new Convertor<TreePath,String>(){
    @Override public String convert(    TreePath o){
      return o.getLastPathComponent().toString();
    }
  }
,true);
  DefaultActionGroup group=new DefaultActionGroup();
  CommonActionsManager commonActionManager=CommonActionsManager.getInstance();
  ActionManager globalActionManager=ActionManager.getInstance();
  TreeExpander treeExpander=new MyTreeExpander(tree,enableExpandAll);
  group.add(commonActionManager.createExpandAllAction(treeExpander,tree));
  group.add(commonActionManager.createCollapseAllAction(treeExpander,tree));
  group.add(globalActionManager.getAction(IdeActions.ACTION_EDIT_SOURCE));
  group.add(Separator.getInstance());
  group.add(globalActionManager.getAction(IdeActions.ACTION_ANALYZE_DEPENDENCIES));
  group.add(globalActionManager.getAction(IdeActions.ACTION_ANALYZE_BACK_DEPENDENCIES));
  group.add(globalActionManager.getAction(IdeActions.ACTION_ANALYZE_CYCLIC_DEPENDENCIES));
  group.add(globalActionManager.getAction(IdeActions.ACTION_ANALYZE_MODULE_DEPENDENCIES));
  PopupHandler.installUnknownPopupHandler(tree,group,ActionManager.getInstance());
}
