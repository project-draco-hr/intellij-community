{
  String id=object.getId();
  if (!StringUtil.isEmptyOrSpaces(id)) {
    id=id.endsWith("#") ? id.substring(0,id.length() - 1) : id;
    final PairConvertor<String,Map<String,JsonSchemaObject>,Map<String,JsonSchemaObject>> convertor=new PairConvertor<String,Map<String,JsonSchemaObject>,Map<String,JsonSchemaObject>>(){
      @Override public Map<String,JsonSchemaObject> convert(      String s,      Map<String,JsonSchemaObject> map){
        final Map<String,JsonSchemaObject> converted=new HashMap<>();
        for (        Map.Entry<String,JsonSchemaObject> entry : map.entrySet()) {
          String key=entry.getKey();
          key=key.startsWith("/") ? key.substring(1) : key;
          converted.put(s + key,entry.getValue());
        }
        return converted;
      }
    }
;
    final HashMap<String,JsonSchemaObject> map=new HashMap<>();
    final Map<String,JsonSchemaObject> definitions=object.getDefinitions();
    if (definitions != null && !definitions.isEmpty()) {
      map.putAll(convertor.convert("#/definitions/",definitions));
    }
    final Map<String,JsonSchemaObject> properties=object.getProperties();
    if (properties != null && !properties.isEmpty()) {
      map.putAll(convertor.convert("#/properties/",properties));
    }
    JsonSchemaExportedDefinitions.getInstance(project).register(id,map);
  }
}
