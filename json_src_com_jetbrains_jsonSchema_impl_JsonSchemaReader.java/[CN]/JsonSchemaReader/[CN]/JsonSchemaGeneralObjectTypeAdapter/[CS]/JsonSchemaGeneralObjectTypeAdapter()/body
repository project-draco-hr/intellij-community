{
  myMap=new HashMap<String,ThrowablePairConsumer<JsonReader,JsonSchemaObject,IOException>>();
  myMap.put("id",new StringReader(){
    @Override protected void assign(    String s,    JsonSchemaObject object) throws IOException {
      object.setId(s);
    }
  }
);
  myMap.put("$schema",new StringReader(){
    @Override protected void assign(    String s,    JsonSchemaObject object) throws IOException {
      object.setSchema(s);
    }
  }
);
  myMap.put("description",new StringReader(){
    @Override protected void assign(    String s,    JsonSchemaObject object) throws IOException {
      object.setDescription(s);
    }
  }
);
  myMap.put("title",new StringReader(){
    @Override protected void assign(    String s,    JsonSchemaObject object) throws IOException {
      object.setTitle(s);
    }
  }
);
  myMap.put("$ref",createRef());
  myMap.put("default",createDefault());
  myMap.put("format",createFormat());
  myMap.put("definitions",createDefinitionsConsumer());
  myMap.put("properties",createPropertiesConsumer());
  myMap.put("multipleOf",createMultipleOf());
  myMap.put("maximum",createMaximum());
  myMap.put("minimum",createMinimum());
  myMap.put("exclusiveMaximum",createExclusiveMaximum());
  myMap.put("exclusiveMinimum",createExclusiveMinimum());
  myMap.put("maxLength",createMaxLength());
  myMap.put("minLength",createMinLength());
  myMap.put("pattern",createPattern());
  myMap.put("additionalItems",createAdditionalItems());
  myMap.put("items",createItems());
  myMap.put("maxItems",createMaxItems());
  myMap.put("minItems",createMinItems());
  myMap.put("uniqueItems",createUniqueItems());
  myMap.put("maxProperties",createMaxProperties());
  myMap.put("minProperties",createMinProperties());
  myMap.put("required",createRequired());
  myMap.put("additionalProperties",createAdditionalProperties());
  myMap.put("patternProperties",createPatternProperties());
  myMap.put("dependencies",createDependencies());
  myMap.put("enum",createEnum());
  myMap.put("type",createType());
  myMap.put("allOf",new SchemaArrayConsumer(){
    @Override protected void assign(    ArrayList<JsonSchemaObject> list,    JsonSchemaObject object){
      object.setAllOf(list);
    }
  }
);
  myMap.put("anyOf",new SchemaArrayConsumer(){
    @Override protected void assign(    ArrayList<JsonSchemaObject> list,    JsonSchemaObject object){
      object.setAnyOf(list);
    }
  }
);
  myMap.put("oneOf",new SchemaArrayConsumer(){
    @Override protected void assign(    ArrayList<JsonSchemaObject> list,    JsonSchemaObject object){
      object.setOneOf(list);
    }
  }
);
  myMap.put("not",createNot());
}
