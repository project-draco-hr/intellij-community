{
  return new ThrowablePairConsumer<JsonReader,JsonSchemaObject,IOException>(){
    @Override public void consume(    JsonReader in,    JsonSchemaObject object) throws IOException {
      if (in.peek() != JsonToken.BEGIN_OBJECT) {
        in.skipValue();
        return;
      }
      final HashMap<String,List<String>> propertyDependencies=new HashMap<String,List<String>>();
      final HashMap<String,JsonSchemaObject> schemaDependencies=new HashMap<String,JsonSchemaObject>();
      in.beginObject();
      while (in.peek() != JsonToken.END_OBJECT) {
        if (in.peek() != JsonToken.NAME) {
          in.skipValue();
          continue;
        }
        final String name=in.nextName();
        if (in.peek() == JsonToken.BEGIN_ARRAY) {
          final List<String> members=new ArrayList<String>();
          in.beginArray();
          while (in.peek() != JsonToken.END_ARRAY) {
            if (in.peek() == JsonToken.STRING) {
              members.add(in.nextString());
            }
 else             in.skipValue();
          }
          in.endArray();
          propertyDependencies.put(name,members);
        }
 else         if (in.peek() == JsonToken.BEGIN_OBJECT) {
          schemaDependencies.put(name,readInnerObject(in));
        }
 else         in.skipValue();
      }
      in.endObject();
      if (!propertyDependencies.isEmpty()) {
        object.setPropertyDependencies(propertyDependencies);
      }
      if (!schemaDependencies.isEmpty()) {
        object.setSchemaDependencies(schemaDependencies);
      }
    }
  }
;
}
