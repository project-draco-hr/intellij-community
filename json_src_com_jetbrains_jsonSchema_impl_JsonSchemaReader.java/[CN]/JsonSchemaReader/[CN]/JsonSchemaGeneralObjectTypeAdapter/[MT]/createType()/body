{
  return new ThrowablePairConsumer<JsonReader,JsonSchemaObject,IOException>(){
    @Override public void consume(    JsonReader in,    JsonSchemaObject object) throws IOException {
      if (in.peek() == JsonToken.STRING) {
        object.setType(parseType(in));
      }
 else       if (in.peek() == JsonToken.BEGIN_ARRAY) {
        final ArrayList<JsonSchemaType> variants=new ArrayList<JsonSchemaType>();
        in.beginArray();
        while (in.peek() != JsonToken.END_ARRAY) {
          if (in.peek() == JsonToken.STRING) {
            variants.add(parseType(in));
          }
 else           in.skipValue();
        }
        in.endArray();
        object.setTypeVariants(variants);
      }
 else       in.skipValue();
    }
    private JsonSchemaType parseType(    JsonReader in) throws IOException {
      final String typeString=in.nextString();
      try {
        return JsonSchemaType.valueOf("_" + typeString);
      }
 catch (      IllegalArgumentException e) {
        throw new IOException("Wrong type value: " + typeString + "\"");
      }
    }
  }
;
}
