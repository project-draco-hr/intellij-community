{
  final XDebuggerEvaluator.XEvaluationCallback callback=new XDebuggerEvaluator.XEvaluationCallback(){
    @Override public void evaluated(    @NotNull XValue result){
      String name=((PyDebugValue)result).getName();
      XValueNodeImpl node=new XValueNodeImpl(((XValueNodeImpl)myBaseNode).getTree(),null,name,result);
      node.startComputingChildren();
    }
    @Override public void errorOccurred(    @NotNull String errorMessage){
    }
  }
;
  XDebuggerTreeListener treeListener=new XDebuggerTreeListener(){
    @Override public void nodeLoaded(    @NotNull RestorableStateNode node,    String name){
      return;
    }
    @Override public void childrenLoaded(    @NotNull XDebuggerTreeNode node,    @NotNull List<XValueContainerNode<?>> children,    boolean last){
      String fullName=((XValueNodeImpl)node).getName();
      int row=0;
      if (fullName.contains("[")) {
        row=Integer.parseInt(fullName.substring(fullName.lastIndexOf('[') + 1,fullName.length() - 2));
      }
      if (myData[row][0] == null) {
        for (int i=0; i < node.getChildCount() - 1; i++) {
          myData[row][i]=((XValueNodeImpl)node.getChildAt(i + 1)).getRawValue();
        }
        myFilledRows+=1;
      }
      if (myFilledRows == myRows) {
        node.getTree().removeTreeListener(this);
        if (!stop) {
          startFillTable(getInstance());
        }
      }
 else {
        nextRow+=1;
        startEvalNextRow(callback);
      }
    }
  }
;
  ((XValueNodeImpl)myBaseNode).getTree().addTreeListener(treeListener);
  nextRow=0;
  startEvalNextRow(callback);
}
