{
  return new ArrayTableCellEditor(myProject){
    private String getCellSlice(){
      String expression=getSliceText();
      if (myTable.getRowCount() == 1) {
        expression+="[" + myTable.getSelectedColumn() + "]";
      }
 else {
        expression+="[" + myTable.getSelectedRow() + "]["+ myTable.getSelectedColumn()+ "]";
      }
      return expression;
    }
    private String changeValExpression(){
      if (myEditor.getEditor() == null) {
        throw new IllegalStateException("Null editor in table cell.");
      }
      return getCellSlice() + " = " + myEditor.getEditor().getDocument().getText();
    }
    @Override public void doOKAction(){
      if (myEditor.getEditor() == null) {
        return;
      }
      myEvaluator.evaluate(changeValExpression(),new XDebuggerEvaluator.XEvaluationCallback(){
        @Override public void evaluated(        @NotNull XValue result){
          AppUIUtil.invokeOnEdt(new Runnable(){
            @Override public void run(){
              XDebuggerTree tree=((XValueNodeImpl)myBaseNode).getTree();
              final XDebuggerTreeState treeState=XDebuggerTreeState.saveState(tree);
              tree.rebuildAndRestore(treeState);
            }
          }
);
          XDebuggerEvaluator.XEvaluationCallback callback=new XDebuggerEvaluator.XEvaluationCallback(){
            @Override public void evaluated(            @NotNull XValue value){
              String text=((PyDebugValue)value).getValue();
              final String corrected;
              if (!isNumeric()) {
                if (!text.startsWith("\\\'") && !text.startsWith("\\\"")) {
                  corrected="\'" + text + "\'";
                }
 else {
                  corrected=text;
                }
              }
 else {
                corrected=text;
              }
              new WriteCommandAction(null){
                protected void run(                @NotNull Result result) throws Throwable {
                  if (myEditor.getEditor() != null) {
                    myEditor.getEditor().getDocument().setText(corrected);
                  }
                }
              }
.execute();
              lastValue=corrected;
            }
            @Override public void errorOccurred(            @NotNull String errorMessage){
              showError(errorMessage);
            }
          }
;
          myEvaluator.evaluate(getCellSlice(),callback,null);
        }
        @Override public void errorOccurred(        @NotNull String errorMessage){
          showError(errorMessage);
        }
      }
,null);
      super.doOKAction();
    }
  }
;
}
