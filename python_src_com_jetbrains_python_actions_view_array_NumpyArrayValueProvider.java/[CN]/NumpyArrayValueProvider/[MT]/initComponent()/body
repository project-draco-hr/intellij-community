{
  myTableCellRenderer=new ArrayTableCellRenderer(Double.MIN_VALUE,Double.MIN_VALUE,myDtypeKind);
  myTableAdjustmentListener=new FixSizeTableAdjustmentListener<NumpyArraySlice>(myTable,getMaxRow(myShape),getMaxColumn(myShape),Math.min(getMaxRow(myShape),COLUMNS_IN_DEFAULT_SLICE),Math.min(getMaxColumn(myShape),ROWS_IN_DEFAULT_SLICE),ROWS_IN_DEFAULT_CHUNK,COLUMNS_IN_DEFAULT_CHUNK){
    @NotNull @Override NumpyArraySlice createChunk(    String baseSlice,    int rows,    int columns,    int rOffset,    int cOffset){
      return new NumpyArraySlice(baseSlice,rows,columns,rOffset,cOffset,getDefaultFormat(),getInstance());
    }
    @Override String getBaseSlice(){
      return NumpyArraySlice.getUpperSlice(myComponent.getSliceTextField().getText(),1);
    }
  }
;
  myComponent.getScrollPane().getHorizontalScrollBar().addAdjustmentListener(myTableAdjustmentListener);
  myComponent.getScrollPane().getVerticalScrollBar().addAdjustmentListener(myTableAdjustmentListener);
  if (!isNumeric()) {
    DebuggerUIUtil.invokeLater(new Runnable(){
      @Override public void run(){
        myComponent.getColoredCheckbox().setSelected(false);
        myComponent.getColoredCheckbox().setEnabled(false);
      }
    }
);
  }
 else {
    myComponent.getColoredCheckbox().addItemListener(new ItemListener(){
      @Override public void itemStateChanged(      ItemEvent e){
        if (e.getSource() == myComponent.getColoredCheckbox()) {
          if (myTable.getCellRenderer(0,0) instanceof ArrayTableCellRenderer) {
            ArrayTableCellRenderer renderer=(ArrayTableCellRenderer)myTable.getCellRenderer(0,0);
            if (myComponent.getColoredCheckbox().isSelected()) {
              renderer.setColored(true);
            }
 else {
              renderer.setColored(false);
            }
          }
          myComponent.getScrollPane().repaint();
        }
      }
    }
);
  }
  initSliceTextFieldAction();
  myComponent.getSliceTextField().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      myComponent.getSliceTextField().getDocument().createGuardedBlock(0,getNodeName().length());
    }
    @Override public void focusLost(    FocusEvent e){
      RangeMarker block=myComponent.getSliceTextField().getDocument().getRangeGuard(0,getNodeName().length());
      if (block != null) {
        myComponent.getSliceTextField().getDocument().removeGuardedBlock(block);
      }
    }
  }
);
  initFormatTextFieldAction();
}
