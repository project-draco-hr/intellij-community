{
  final JBPanel panel=new JBPanel(new GridBagLayout());
  final GridBag bag=new GridBag();
  final JBTextField patternField=new JBTextField();
  final TextFieldWithBrowseButton directoryField=new TextFieldWithBrowseButton();
  final TextFieldWithBrowseButton fileField=new TextFieldWithBrowseButton();
  bag.setDefaultAnchor(GridBagConstraints.NORTHWEST);
  final JBRadioButton radioPattern=new JBRadioButton("Filename pattern:");
  panel.add(radioPattern,bag.nextLine().next().fillCellNone().weightx(0));
  panel.add(patternField,bag.next().fillCellHorizontally().weightx(1));
  final JBRadioButton radioDirectory=new JBRadioButton("Files under:");
  panel.add(radioDirectory,bag.nextLine().next().fillCellNone().weightx(0));
  panel.add(directoryField,bag.next().fillCellHorizontally().weightx(1));
  final JBRadioButton radioFile=new JBRadioButton("File:");
  panel.add(radioFile,bag.nextLine().next().fillCellNone().weightx(0));
  panel.add(fileField,bag.next().fillCellHorizontally().weightx(1));
  SwingHelper.installFileCompletionAndBrowseDialog(myProject,directoryField,"Select Folder",FileChooserDescriptorFactory.createSingleFolderDescriptor());
  SwingHelper.installFileCompletionAndBrowseDialog(myProject,fileField,"Select File",FileChooserDescriptorFactory.createSingleFileDescriptor());
  final ButtonGroup group=new ButtonGroup();
  group.add(radioPattern);
  group.add(radioDirectory);
  group.add(radioFile);
  radioPattern.setSelected(true);
  final DialogBuilder builder=new DialogBuilder();
  builder.setTitle("Add JSON Schema Mapping");
  builder.setNorthPanel(panel);
  builder.setPreferredFocusComponent(patternField);
  builder.setDimensionServiceKey("com.jetbrains.jsonSchema.JsonSchemaMappingsView#add");
  final Getter<String> textGetter=new Getter<String>(){
    @Override public String get(){
      if (radioPattern.isSelected()) {
        return patternField.getText();
      }
      final String text;
      if (radioDirectory.isSelected()) {
        text=directoryField.getText();
      }
 else {
        text=fileField.getText();
      }
      return getRelativePath(myProject,text);
    }
  }
;
  final Alarm alarm=new Alarm(Alarm.ThreadToUse.SWING_THREAD);
  final Runnable updaterValidator=new Runnable(){
    @Override public void run(){
      if (!patternField.isVisible())       return;
      patternField.setEnabled(radioPattern.isSelected());
      directoryField.setEnabled(radioDirectory.isSelected());
      fileField.setEnabled(radioFile.isSelected());
      builder.setOkActionEnabled(!StringUtil.isEmptyOrSpaces(textGetter.get()));
      alarm.addRequest(this,300,ModalityState.any());
    }
  }
;
  alarm.addRequest(updaterValidator,300,ModalityState.any());
  updaterValidator.run();
  final ActionListener listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updaterValidator.run();
    }
  }
;
  radioPattern.addActionListener(listener);
  radioDirectory.addActionListener(listener);
  radioFile.addActionListener(listener);
  if (myProject == null || myProject.getBasePath() == null) {
    radioDirectory.setEnabled(false);
    radioFile.setEnabled(false);
    directoryField.setEnabled(false);
    fileField.setEnabled(false);
  }
  if (builder.showAndGet()) {
    final String pattern=textGetter.get();
    final JsonSchemaMappingsConfigurationBase.Item item=new JsonSchemaMappingsConfigurationBase.Item(pattern,radioPattern.isSelected(),radioDirectory.isSelected());
    myTableView.getListTableModel().addRow(item);
  }
  Disposer.dispose(alarm);
}
