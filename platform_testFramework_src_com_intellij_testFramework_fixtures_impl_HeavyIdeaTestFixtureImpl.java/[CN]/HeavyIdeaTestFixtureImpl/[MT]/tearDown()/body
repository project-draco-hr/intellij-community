{
  final Project project=getProject();
  final List<Throwable> exceptions=new SmartList<Throwable>();
  try {
    LightPlatformTestCase.doTearDown(project,myApplication,false,exceptions);
    for (    ModuleFixtureBuilder moduleFixtureBuilder : myModuleFixtureBuilders) {
      moduleFixtureBuilder.getFixture().tearDown();
    }
    EdtTestUtil.runInEdtAndWait(new ThrowableRunnable<Throwable>(){
      @Override public void run() throws Throwable {
        PlatformTestCase.closeAndDisposeProjectAndCheckThatNoOpenProjects(project,exceptions);
      }
    }
);
    myProject=null;
    for (    File fileToDelete : myFilesToDelete) {
      if (!FileUtil.delete(fileToDelete)) {
        exceptions.add(new IOException("Can't delete " + fileToDelete));
      }
    }
  }
 catch (  Throwable e) {
    exceptions.add(e);
  }
  try {
    super.tearDown();
  }
 catch (  Throwable e) {
    exceptions.add(e);
  }
  try {
    myEditorListenerTracker.checkListenersLeak();
    myThreadTracker.checkLeak();
    LightPlatformTestCase.checkEditorsReleased(exceptions);
    PlatformTestCase.cleanupApplicationCaches(project);
    InjectedLanguageManagerImpl.checkInjectorsAreDisposed(project);
  }
  finally {
    CompoundRuntimeException.throwIfNotEmpty(exceptions);
  }
}
