{
  final PsiNewExpression newExpression=(PsiNewExpression)descriptor.getPsiElement();
  PsiExpressionList list=newExpression.getArgumentList();
  String text=null;
  if (list != null && list.getExpressions().length == 4) {
    String top=list.getExpressions()[0].getText();
    String left=list.getExpressions()[1].getText();
    String bottom=list.getExpressions()[2].getText();
    String right=list.getExpressions()[3].getText();
    if (isZero(top,left,bottom,right)) {
      text="emptyInsets()";
    }
 else     if (isZero(left,bottom,right)) {
      text="insetsTop(" + top + ")";
    }
 else     if (isZero(top,bottom,right)) {
      text="insetsLeft(" + left + ")";
    }
 else     if (isZero(top,left,right)) {
      text="insetsBottom(" + bottom + ")";
    }
 else     if (isZero(top,left,bottom)) {
      text="insetsRight(" + right + ")";
    }
 else     if (top.equals(left) && left.equals(bottom) && bottom.equals(right)&& right.equals(top)) {
      text="insets(" + top + ")";
    }
 else     if (top.equals(bottom) && right.equals(left)) {
      text=String.format("insets(%s, %s)",top,left);
    }
 else {
      text=String.format("insets(%s, %s, %s, %s)",top,left,bottom,right);
    }
    text=JBUI.class.getName() + "." + text;
    final PsiElementFactory factory=JavaPsiFacade.getInstance(project).getElementFactory();
    final PsiExpression expression=factory.createExpressionFromText(text,newExpression.getContext());
    final PsiElement newElement=newExpression.replace(expression);
    final PsiElement el=JavaCodeStyleManager.getInstance(project).shortenClassReferences(newElement);
    final int offset=el.getTextOffset() + el.getText().length() - 2;
    final Editor editor=PsiUtilBase.findEditor(el);
    if (editor != null) {
      editor.getCaretModel().moveToOffset(offset);
    }
  }
}
