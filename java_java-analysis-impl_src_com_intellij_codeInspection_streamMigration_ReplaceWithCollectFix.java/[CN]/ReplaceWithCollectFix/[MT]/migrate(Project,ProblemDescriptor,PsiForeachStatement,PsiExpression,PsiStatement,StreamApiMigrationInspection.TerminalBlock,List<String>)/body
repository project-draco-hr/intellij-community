{
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  final PsiType iteratedValueType=iteratedValue.getType();
  final PsiMethodCallExpression methodCallExpression=tb.getSingleMethodCall();
  if (methodCallExpression == null)   return;
  restoreComments(foreachStatement,body);
  if (intermediateOps.isEmpty() && StreamApiMigrationInspection.isAddAllCall(tb)) {
    final PsiExpression qualifierExpression=methodCallExpression.getMethodExpression().getQualifierExpression();
    final String qualifierText=qualifierExpression != null ? qualifierExpression.getText() : "";
    final String collectionText=iteratedValueType instanceof PsiArrayType ? "java.util.Arrays.asList(" + iteratedValue.getText() + ")" : getIteratedValueText(iteratedValue);
    final String callText=StringUtil.getQualifiedName(qualifierText,"addAll(" + collectionText + ");");
    PsiElement result=foreachStatement.replace(elementFactory.createStatementFromText(callText,foreachStatement));
    simplifyAndFormat(project,result);
    return;
  }
  PsiExpression itemToAdd=methodCallExpression.getArgumentList().getExpressions()[0];
  intermediateOps.add(createMapperFunctionalExpressionText(tb.getVariable(),itemToAdd));
  final StringBuilder builder=generateStream(iteratedValue,intermediateOps);
  final PsiExpression qualifierExpression=methodCallExpression.getMethodExpression().getQualifierExpression();
  final PsiExpression initializer=StreamApiMigrationInspection.extractReplaceableCollectionInitializer(qualifierExpression,foreachStatement);
  if (initializer != null) {
    String callText=builder.append(".collect(java.util.stream.Collectors.").append(createInitializerReplacementText(qualifierExpression.getType(),initializer)).append(")").toString();
    PsiElement result=initializer.replace(elementFactory.createExpressionFromText(callText,null));
    simplifyAndFormat(project,result);
    removeLoop(foreachStatement);
    return;
  }
  final String qualifierText=qualifierExpression != null ? qualifierExpression.getText() + "." : "";
  JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(project);
  SuggestedNameInfo suggestedNameInfo=codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE,null,null,itemToAdd.getType(),false);
  if (suggestedNameInfo.names.length == 0) {
    suggestedNameInfo=codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE,"item",null,itemToAdd.getType(),false);
  }
  String varName=codeStyleManager.suggestUniqueVariableName(suggestedNameInfo,methodCallExpression,false).names[0];
  PsiExpression forEachBody=elementFactory.createExpressionFromText(qualifierText + "add(" + varName+ ")",qualifierExpression);
  final String callText=builder.append(".forEach(").append(varName).append("->").append(forEachBody.getText()).append(");").toString();
  PsiElement result=foreachStatement.replace(elementFactory.createStatementFromText(callText,foreachStatement));
  simplifyAndFormat(project,result);
}
