{
  final ExternalSystemNode[] cached=currentNode.getCached();
  if (cached != null) {
    final List<Object> duplicates=ContainerUtil.newArrayList();
    final Map<Object,ExternalSystemNode> oldDataMap=ContainerUtil.newLinkedHashMap();
    for (    ExternalSystemNode node : cached) {
      Object key=node.getData() != null ? node.getData() : node.getName();
      final Object systemNode=oldDataMap.put(key,node);
      if (systemNode != null) {
        duplicates.add(key);
      }
    }
    Map<Object,ExternalSystemNode> newDataMap=ContainerUtil.newLinkedHashMap();
    Map<Object,ExternalSystemNode> unchangedNewDataMap=ContainerUtil.newLinkedHashMap();
    for (    ExternalSystemNode node : newNode.getChildren()) {
      Object key=node.getData() != null ? node.getData() : node.getName();
      if (oldDataMap.remove(key) == null) {
        newDataMap.put(key,node);
      }
 else {
        unchangedNewDataMap.put(key,node);
      }
    }
    for (    Object duplicate : duplicates) {
      newDataMap.remove(duplicate);
    }
    currentNode.removeAll(oldDataMap.values());
    for (    ExternalSystemNode node : currentNode.getChildren()) {
      Object key=node.getData() != null ? node.getData() : node.getName();
      final ExternalSystemNode unchangedNewNode=unchangedNewDataMap.get(key);
      if (unchangedNewNode != null) {
        doMergeChildrenChanges(node,unchangedNewNode.myDataNode,unchangedNewNode);
      }
    }
    updateFrom(currentNode);
    currentNode.addAll(newDataMap.values());
  }
  currentNode.setDataNode(newDataNode);
}
