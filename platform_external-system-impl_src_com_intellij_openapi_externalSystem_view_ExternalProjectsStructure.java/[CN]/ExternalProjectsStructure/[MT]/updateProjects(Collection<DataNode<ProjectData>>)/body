{
  List<String> orphanProjects=ContainerUtil.mapNotNull(myNodeMapping.entrySet(),new Function<Map.Entry<String,ExternalSystemNode>,String>(){
    @Override public String fun(    Map.Entry<String,ExternalSystemNode> entry){
      return entry.getValue() instanceof ProjectNode ? entry.getKey() : null;
    }
  }
);
  for (  DataNode<ProjectData> each : toImport) {
    final ProjectData projectData=each.getData();
    final String projectPath=projectData.getLinkedExternalProjectPath();
    orphanProjects.remove(projectPath);
    ExternalSystemNode projectNode=findNodeFor(projectPath);
    if (projectNode instanceof ProjectNode) {
      doMergeChildrenChanges(projectNode,each,new ProjectNode(myExternalProjectsView,each));
    }
 else {
      ExternalSystemNode node=myNodeMapping.remove(projectPath);
      if (node != null) {
        SimpleNode parent=node.getParent();
        if (parent instanceof ExternalSystemNode) {
          ((ExternalSystemNode)parent).remove(projectNode);
        }
      }
      projectNode=new ProjectNode(myExternalProjectsView,each);
      myNodeMapping.put(projectPath,projectNode);
    }
    if (toImport.size() == 1) {
      myTreeBuilder.expand(projectNode,null);
    }
    doUpdateProject((ProjectNode)projectNode);
  }
  for (  String orphanProjectPath : orphanProjects) {
    ExternalSystemNode projectNode=myNodeMapping.remove(orphanProjectPath);
    if (projectNode instanceof ProjectNode) {
      SimpleNode parent=projectNode.getParent();
      if (parent instanceof ExternalSystemNode) {
        ((ExternalSystemNode)parent).remove(projectNode);
        updateUpTo(projectNode);
      }
    }
  }
}
