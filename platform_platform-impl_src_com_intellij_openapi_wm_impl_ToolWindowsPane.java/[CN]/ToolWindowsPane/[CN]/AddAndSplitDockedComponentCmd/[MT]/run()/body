{
  try {
    float newWeight;
    final ToolWindowAnchor anchor=myInfo.getAnchor();
class MySplitter extends Splitter implements UISettingsListener {
      @Override public void uiSettingsChanged(      UISettings source){
        if (anchor == ToolWindowAnchor.LEFT) {
          setOrientation(!source.LEFT_HORIZONTAL_SPLIT);
        }
 else         if (anchor == ToolWindowAnchor.RIGHT) {
          setOrientation(!source.RIGHT_HORIZONTAL_SPLIT);
        }
      }
    }
    Splitter splitter=new MySplitter();
    splitter.setOrientation(anchor.isSplitVertically());
    if (!anchor.isHorizontal()) {
      splitter.setAllowSwitchOrientationByMouseClick(true);
      splitter.addPropertyChangeListener(new PropertyChangeListener(){
        @Override public void propertyChange(        PropertyChangeEvent evt){
          if (!Splitter.PROP_ORIENTATION.equals(evt.getPropertyName()))           return;
          boolean isSplitterHorizontalNow=!splitter.isVertical();
          UISettings settings=UISettings.getInstance();
          if (anchor == ToolWindowAnchor.LEFT) {
            if (settings.LEFT_HORIZONTAL_SPLIT != isSplitterHorizontalNow) {
              settings.LEFT_HORIZONTAL_SPLIT=isSplitterHorizontalNow;
              settings.fireUISettingsChanged();
            }
          }
          if (anchor == ToolWindowAnchor.RIGHT) {
            if (settings.RIGHT_HORIZONTAL_SPLIT != isSplitterHorizontalNow) {
              settings.RIGHT_HORIZONTAL_SPLIT=isSplitterHorizontalNow;
              settings.fireUISettingsChanged();
            }
          }
        }
      }
);
    }
    JComponent c=getComponentAt(anchor);
    if (c instanceof InternalDecorator) {
      InternalDecorator oldComponent=(InternalDecorator)c;
      if (myInfo.isSplit()) {
        splitter.setFirstComponent(oldComponent);
        splitter.setSecondComponent(myNewComponent);
        float proportion=getPreferredSplitProportion(oldComponent.getWindowInfo().getId(),normalizeWeigh(oldComponent.getWindowInfo().getSideWeight() / (oldComponent.getWindowInfo().getSideWeight() + myInfo.getSideWeight())));
        splitter.setProportion(proportion);
        if (!anchor.isHorizontal() && !anchor.isSplitVertically()) {
          newWeight=normalizeWeigh(oldComponent.getWindowInfo().getWeight() + myInfo.getWeight());
        }
 else {
          newWeight=normalizeWeigh(oldComponent.getWindowInfo().getWeight());
        }
      }
 else {
        splitter.setFirstComponent(myNewComponent);
        splitter.setSecondComponent(oldComponent);
        splitter.setProportion(normalizeWeigh(myInfo.getSideWeight()));
        if (!anchor.isHorizontal() && !anchor.isSplitVertically()) {
          newWeight=normalizeWeigh(oldComponent.getWindowInfo().getWeight() + myInfo.getWeight());
        }
 else {
          newWeight=normalizeWeigh(myInfo.getWeight());
        }
      }
    }
 else {
      newWeight=normalizeWeigh(myInfo.getWeight());
    }
    setComponent(splitter,anchor,newWeight);
    if (!myDirtyMode) {
      myLayeredPane.validate();
      myLayeredPane.repaint();
    }
  }
  finally {
    finish();
  }
}
