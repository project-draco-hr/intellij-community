{
  myContext=context;
  LibrariesContainer container=LibrariesContainerFactory.createContainer(myContext.getProject());
  myBuilder=builder;
  myFrameworkSupportModel=new FrameworkSupportModelBase(context.getProject(),myBuilder,container){
    @NotNull @Override public String getBaseDirectoryForLibrariesPath(){
      return StringUtil.notNullize(builder.getContentEntryPath());
    }
  }
;
  myConfigurable=createConfigurable(provider,myFrameworkSupportModel);
  myFrameworkSupportModel.selectFramework(provider,true);
  builder.addModuleConfigurationUpdater(new ModuleBuilder.ModuleConfigurationUpdater(){
    @Override public void update(    @NotNull Module module,    @NotNull ModifiableRootModel rootModel){
      myConfigurable.addSupport(module,rootModel,null);
    }
  }
);
  mySdkSettingsStep=new SdkSettingsStep(context,builder,new Condition<SdkTypeId>(){
    @Override public boolean value(    SdkTypeId id){
      return acceptSdk(id);
    }
  }
);
  mySdkSettingsStep.getJdkComboBox().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateDataModel();
    }
  }
);
  myPanel=new JPanel(new BorderLayout(0,4));
  if (!mySdkSettingsStep.isEmpty()) {
    JComponent component=mySdkSettingsStep.getComponent();
    component.add(new JBLabel(sdkLabel),BorderLayout.WEST);
    myPanel.add(component,BorderLayout.NORTH);
  }
  myPanel.add(myConfigurable.getComponent(),BorderLayout.CENTER);
  updateDataModel();
}
