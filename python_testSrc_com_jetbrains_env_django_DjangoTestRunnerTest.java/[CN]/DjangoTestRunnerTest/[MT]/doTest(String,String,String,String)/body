{
  final String name=getTestName(false);
  runPythonTest(new DjangoTestRunnerTestTask(){
    @Override public ConfigurationFactory getFactory(){
      return DjangoTestsConfigurationType.getInstance().getConfigurationFactories()[0];
    }
    @Override protected void configure(    AbstractPythonRunConfiguration config){
      String target="mysite.SimpleTest";
      try {
        final PyPackage django=((PyPackageManagerImpl)PyPackageManager.getInstance(config.getSdk())).findPackage("django");
        if (django != null) {
          final List<String> version=StringUtil.split(django.getVersion(),".");
          if (Integer.parseInt(version.get(1)) >= 6)           target="mysite.tests.SimpleTest";
        }
      }
 catch (      PyExternalProcessException ignored) {
      }
      ((DjangoTestsRunConfiguration)config).setTarget(target);
      if (customSettings != null)       ((DjangoTestsRunConfiguration)config).setSettingsFile(getTestDataPath() + customSettings);
      ((DjangoTestsRunConfiguration)config).useCustomSettings(true);
    }
    @Override protected List<String> getContentRoots(){
      return markAsSource == null ? Lists.<String>newArrayList() : Lists.newArrayList(markAsSource);
    }
    @Override public void before() throws Exception {
      UIUtil.invokeAndWaitIfNeeded(new Runnable(){
        public void run(){
          final Module module=myFixture.getModule();
          final DjangoFacet djangoFacet=DjangoFacet.getInstance(module);
          if (djangoFacet != null && projectRoot != null && settings != null) {
            final DjangoFacetConfiguration configuration=djangoFacet.getConfiguration();
            configuration.setProjectRootPath(getTestDataPath() + projectRoot);
            configuration.setSettingsFilePath(settings);
          }
        }
      }
);
    }
    public void testing() throws Exception {
      waitForOutput("Process finished with exit code 0");
      doTest(output(),norm(getTestDataPath()));
    }
    @Override String getTestName(){
      return name;
    }
  }
);
}
