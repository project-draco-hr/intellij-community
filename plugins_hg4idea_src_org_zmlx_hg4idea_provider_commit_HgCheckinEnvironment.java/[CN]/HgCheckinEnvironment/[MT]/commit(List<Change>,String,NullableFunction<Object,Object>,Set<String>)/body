{
  List<VcsException> exceptions=new LinkedList<VcsException>();
  Map<VirtualFile,Set<HgFile>> repositoriesMap=getFilesByRepository(changes);
  for (  Map.Entry<VirtualFile,Set<HgFile>> entry : repositoriesMap.entrySet()) {
    VirtualFile repo=entry.getKey();
    Set<HgFile> selectedFiles=entry.getValue();
    HgCommitCommand command=new HgCommitCommand(myProject,repo,preparedComment,myNextCommitAmend);
    if (isMergeCommit(repo)) {
      Set<HgFile> changedFilesNotInCommit=getChangedFilesNotInCommit(repo,selectedFiles);
      boolean partial=!changedFilesNotInCommit.isEmpty();
      if (partial) {
        final StringBuilder filesNotIncludedString=new StringBuilder();
        for (        HgFile hgFile : changedFilesNotInCommit) {
          filesNotIncludedString.append("<li>");
          filesNotIncludedString.append(hgFile.getRelativePath());
          filesNotIncludedString.append("</li>");
        }
        if (!mayCommitEverything(filesNotIncludedString.toString())) {
          return exceptions;
        }
        VcsDirtyScopeManager dirtyManager=VcsDirtyScopeManager.getInstance(myProject);
        for (        HgFile hgFile : changedFilesNotInCommit) {
          dirtyManager.fileDirty(hgFile.toFilePath());
        }
      }
    }
 else {
      command.setFiles(selectedFiles);
    }
    try {
      command.execute();
    }
 catch (    HgCommandException e) {
      exceptions.add(new VcsException(e));
    }
catch (    VcsException e) {
      exceptions.add(e);
    }
  }
  if (myNextCommitIsPushed && exceptions.isEmpty()) {
    final VirtualFile preselectedRepo=repositoriesMap.size() == 1 ? repositoriesMap.keySet().iterator().next() : null;
    HgRepositoryManager repositoryManager=HgUtil.getRepositoryManager(myProject);
    final HgRepository repo=preselectedRepo != null ? repositoryManager.getRepositoryForFile(preselectedRepo) : null;
    final Collection<HgRepository> repositories=repositoryManager.getRepositories();
    UIUtil.invokeLaterIfNeeded(new Runnable(){
      public void run(){
        new HgPusher(myProject).showDialogAndPush(repositories,repo);
      }
    }
);
  }
  return exceptions;
}
