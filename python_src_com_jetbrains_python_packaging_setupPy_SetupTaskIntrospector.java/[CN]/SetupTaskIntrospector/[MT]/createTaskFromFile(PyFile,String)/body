{
  SetupTask task=new SetupTask(name);
  final PyClass taskClass=file.findTopLevelClass(name);
  if (taskClass != null) {
    final PyTargetExpression description=taskClass.findClassAttribute("description",false);
    if (description != null) {
      final String descriptionText=PyUtil.strValue(PyUtil.flattenParens(description.findAssignedValue()));
      if (descriptionText != null) {
        task.description=StringUtil.capitalize(descriptionText);
      }
    }
    final PyTargetExpression booleanOptions=taskClass.findClassAttribute("boolean_options",false);
    final List<String> booleanOptionsList=booleanOptions == null ? Collections.<String>emptyList() : PyUtil.strListValue(booleanOptions.findAssignedValue());
    final PyTargetExpression negativeOpt=taskClass.findClassAttribute("negative_opt",false);
    final Map<String,String> negativeOptMap=negativeOpt == null ? Collections.<String,String>emptyMap() : parseNegativeOpt(negativeOpt.findAssignedValue());
    final PyTargetExpression userOptions=taskClass.findClassAttribute("user_options",false);
    if (userOptions != null) {
      final PyExpression optionsList=userOptions.findAssignedValue();
      if (optionsList instanceof PySequenceExpression) {
        final PyExpression[] elements=((PySequenceExpression)optionsList).getElements();
        for (        PyExpression element : elements) {
          final SetupTaskOption option=createOptionFromTuple(element,booleanOptionsList,negativeOptMap);
          if (option != null) {
            task.options.add(option);
          }
        }
      }
    }
  }
  return task;
}
