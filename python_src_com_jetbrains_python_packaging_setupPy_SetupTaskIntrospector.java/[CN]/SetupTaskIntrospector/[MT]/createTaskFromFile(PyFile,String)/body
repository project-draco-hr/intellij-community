{
  SetupTask task=new SetupTask(name);
  final PyClass taskClass=file.findTopLevelClass(name);
  if (taskClass != null) {
    final PyTargetExpression description=taskClass.findClassAttribute("description",false);
    if (description != null) {
      final String descriptionText=PyUtil.strValue(PyUtil.flattenParens(description.findAssignedValue()));
      if (descriptionText != null) {
        task.description=StringUtil.capitalize(descriptionText);
      }
    }
    final List<PyExpression> booleanOptions=resolveSequenceValue(taskClass,"boolean_options");
    final List<String> booleanOptionsList=new ArrayList<String>();
    for (    PyExpression option : booleanOptions) {
      final String s=PyUtil.strValue(option);
      if (s != null) {
        booleanOptionsList.add(s);
      }
    }
    final PyTargetExpression negativeOpt=taskClass.findClassAttribute("negative_opt",false);
    final Map<String,String> negativeOptMap=negativeOpt == null ? Collections.<String,String>emptyMap() : parseNegativeOpt(negativeOpt.findAssignedValue());
    final List<PyExpression> userOptions=resolveSequenceValue(taskClass,"user_options");
    for (    PyExpression element : userOptions) {
      final SetupTaskOption option=createOptionFromTuple(element,booleanOptionsList,negativeOptMap);
      if (option != null) {
        task.options.add(option);
      }
    }
  }
  return task;
}
