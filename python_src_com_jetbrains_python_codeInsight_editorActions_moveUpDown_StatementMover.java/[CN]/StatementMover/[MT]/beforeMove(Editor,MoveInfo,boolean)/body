{
  if (myStatementToAddLinebreak != null) {
    TextRange textRange=myStatementToAddLinebreak.getTextRange();
    int line=editor.getDocument().getLineNumber(textRange.getStartOffset());
    CodeStyleSettings.IndentOptions indentOptions=CodeStyleSettingsManager.getInstance(editor.getProject()).getCurrentSettings().getIndentOptions(PythonFileType.INSTANCE);
    PsiElement whiteSpace=myStatementToAddLinebreak.getContainingFile().findElementAt(editor.getDocument().getLineStartOffset(line));
    String indent=StringUtil.repeatSymbol(' ',indentOptions.INDENT_SIZE);
    PyStatementWithElse statementWithElse=PsiTreeUtil.getParentOfType(myStatementToAddLinebreak,PyStatementWithElse.class);
    if (statementWithElse != null && statementWithElse.getParent() instanceof PyFile)     indent="\n";
    if (whiteSpace instanceof PsiWhiteSpace)     indent+=whiteSpace.getText();
    if (down || theSameLevel)     indent+=StringUtil.repeatSymbol(' ',indentOptions.INDENT_SIZE);
    if (theSameLevel)     info.toMove=info.toMove2;
    editor.getDocument().insertString(textRange.getStartOffset(),indent);
  }
  if (myStatementListToAddPass != null) {
    final PyPassStatement passStatement=PyElementGenerator.getInstance(editor.getProject()).createFromText(LanguageLevel.getDefault(),PyPassStatement.class,PyNames.PASS);
    if (!down) {
      myStatementListToAddPass.add(passStatement);
    }
 else     myStatementListToAddPass.addBefore(passStatement,myStatementListToAddPass.getStatements()[0]);
    CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(myStatementListToAddPass);
  }
  if (myStatementToIncreaseIndent != null) {
    if (!down && myStatementPartToRemovePass != null && myStatementToAddLinebreak == null) {
      info.toMove2=new LineRange(info.toMove2.startLine - 1,info.toMove2.endLine);
    }
    increaseIndent(editor);
  }
  if (myStatementToDecreaseIndent != null) {
    decreaseIndent(editor);
  }
}
