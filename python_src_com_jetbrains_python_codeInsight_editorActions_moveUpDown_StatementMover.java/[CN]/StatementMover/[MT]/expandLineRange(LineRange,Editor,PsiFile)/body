{
  final SelectionModel selectionModel=editor.getSelectionModel();
  Pair<PsiElement,PsiElement> psiRange;
  if (selectionModel.hasSelection()) {
    final int startOffset=selectionModel.getSelectionStart();
    final int endOffset=selectionModel.getSelectionEnd();
    final PsiElement[] psiElements=findStatementsInRange(file,startOffset,endOffset);
    if (psiElements.length == 0) {
      return null;
    }
    psiRange=new Pair<PsiElement,PsiElement>(psiElements[0],psiElements[psiElements.length - 1]);
  }
 else {
    final int offset=editor.getCaretModel().getOffset();
    PsiElement element=file.findElementAt(offset);
    if (element == null) {
      return null;
    }
    psiRange=new Pair<PsiElement,PsiElement>(element,element);
  }
  psiRange=new Pair<PsiElement,PsiElement>(PsiTreeUtil.getNonStrictParentOfType(psiRange.getFirst(),PyStatement.class),PsiTreeUtil.getNonStrictParentOfType(psiRange.getSecond(),PyStatement.class));
  if (psiRange.getFirst() == null || psiRange.getSecond() == null) {
    return null;
  }
  final PsiElement parent=PsiTreeUtil.findCommonParent(psiRange.getFirst(),psiRange.getSecond());
  final Pair<PsiElement,PsiElement> elementRange=getElementRange(parent,psiRange.getFirst(),psiRange.getSecond());
  if (isNotValidStatementRange(elementRange)) {
    return null;
  }
  final PsiElement first=elementRange.getFirst();
  final PsiElement second=elementRange.getSecond();
  if (first == second && first instanceof PyPassStatement) {
    return null;
  }
  int startOffset=first.getTextRange().getStartOffset();
  int endOffset=second.getTextRange().getEndOffset();
  final Document document=editor.getDocument();
  if (endOffset > document.getTextLength()) {
    LOG.assertTrue(!PsiDocumentManager.getInstance(file.getProject()).isUncommited(document));
    LOG.assertTrue(PsiDocumentManagerImpl.checkConsistency(file,document));
  }
  int endLine;
  if (endOffset == document.getTextLength()) {
    endLine=document.getLineCount();
  }
 else {
    endLine=editor.offsetToLogicalPosition(endOffset).line + 1;
    endLine=Math.min(endLine,document.getLineCount());
  }
  endLine=Math.max(endLine,range.endLine);
  final int startLine=Math.min(range.startLine,editor.offsetToLogicalPosition(startOffset).line);
  return new LineRange(startLine,endLine);
}
