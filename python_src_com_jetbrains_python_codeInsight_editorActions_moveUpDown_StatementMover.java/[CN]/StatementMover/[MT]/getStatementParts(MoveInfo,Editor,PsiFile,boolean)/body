{
  PsiElement element1=myStatementToMove;
  PyElement statementPart1=PsiTreeUtil.getParentOfType(element1,PyStatementPart.class,PyWithStatement.class);
  int offset2=getLineStartSafeOffset(editor.getDocument(),info.toMove2.startLine);
  PsiElement element2=file.findElementAt(offset2 - 1);
  if (element2 instanceof PsiWhiteSpace) {
    if (down) {
      final PsiElement tmp=PyPsiUtils.getSignificantToTheRight(element2,false);
      TokenSet secondParts=TokenSet.create(PyTokenTypes.ELSE_KEYWORD,PyTokenTypes.ELIF_KEYWORD,PyTokenTypes.FINALLY_KEYWORD,PyTokenTypes.EXCEPT_KEYWORD);
      if (tmp != null && (editor.offsetToLogicalPosition(tmp.getTextRange().getStartOffset()).line == info.toMove2.startLine || secondParts.contains(tmp.getNode().getElementType())))       element2=tmp;
    }
 else {
      final PsiElement tmp=PyPsiUtils.getSignificantToTheRight(element2,false);
      if (tmp != null) {
        int start=editor.offsetToLogicalPosition(tmp.getParent().getTextRange().getStartOffset()).line;
        int end=editor.offsetToLogicalPosition(tmp.getParent().getTextRange().getEndOffset()).line;
        if (start == info.toMove2.startLine && (start == end || tmp.getParent() instanceof PyClass || tmp.getParent() instanceof PyFunction))         element2=tmp;
 else         element2=PyPsiUtils.getSignificantToTheLeft(element2,true);
      }
 else {
        element2=PyPsiUtils.getSignificantToTheLeft(element2,true);
      }
    }
  }
  PyElement statementPart2=PsiTreeUtil.getParentOfType(element2,PyStatementPart.class,PyWithStatement.class);
  if (statementPart2 instanceof PyStatementPart) {
    int start=editor.offsetToLogicalPosition(statementPart2.getTextRange().getStartOffset()).line;
    int end=editor.offsetToLogicalPosition(statementPart2.getTextRange().getEndOffset()).line;
    if (!down && info.toMove2.startLine == start && start != end) {
      statementPart2=PsiTreeUtil.getParentOfType(statementPart2,PyStatementPart.class);
    }
 else {
      final PsiElement parent2=statementPart2.getParent();
      if (parent2 instanceof PyTryExceptStatement && statementPart1 != null && parent2 != statementPart1.getParent() && !down) {
        if (parent2.getParent() instanceof PyStatementList) {
          final PyStatementList stList=(PyStatementList)parent2.getParent();
          final PyStatement[] statements=stList.getStatements();
          if (statements[statements.length - 1] == parent2) {
            statementPart2=PsiTreeUtil.getParentOfType(stList,PyStatementPart.class);
          }
        }
      }
      PyStatementList stList=((PyStatementPart)statementPart2).getStatementList();
      if (stList != null && stList.getStatements().length > 0) {
        if (down && stList.getStatements()[stList.getStatements().length - 1] == element2) {
          PyStatementPart parent=PsiTreeUtil.getParentOfType(statementPart2,PyStatementPart.class);
          if (parent != null) {
            stList=parent.getStatementList();
            if (stList != null && stList.getStatements().length > 0) {
              if (stList.getStatements()[stList.getStatements().length - 1] == statementPart2) {
                statementPart2=parent;
              }
            }
          }
        }
      }
    }
  }
  return new Pair<PyElement,PyElement>(statementPart1,statementPart2);
}
