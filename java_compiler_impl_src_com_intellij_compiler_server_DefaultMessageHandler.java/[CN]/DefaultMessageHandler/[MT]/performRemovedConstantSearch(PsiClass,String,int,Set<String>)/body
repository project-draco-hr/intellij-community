{
  final PsiSearchHelper psiSearchHelper=PsiSearchHelper.SERVICE.getInstance(myProject);
  final Ref<Boolean> result=new Ref<Boolean>(Boolean.TRUE);
  final PsiFile fieldContainingFile=aClass != null ? aClass.getContainingFile() : null;
  processIdentifiers(psiSearchHelper,new PsiElementProcessor<PsiIdentifier>(){
    @Override public boolean execute(    @NotNull PsiIdentifier identifier){
      try {
        final PsiElement parent=identifier.getParent();
        if (parent instanceof PsiReferenceExpression) {
          final PsiClass ownerClass=getOwnerClass(parent);
          if (ownerClass != null && ownerClass.getQualifiedName() != null) {
            final PsiFile usageFile=ownerClass.getContainingFile();
            if (usageFile != null && !usageFile.equals(fieldContainingFile)) {
              final VirtualFile vFile=usageFile.getOriginalFile().getVirtualFile();
              if (vFile != null) {
                affectedPaths.add(vFile.getPath());
              }
            }
          }
        }
        return true;
      }
 catch (      PsiInvalidElementAccessException ignored) {
        result.set(Boolean.FALSE);
        LOG.debug("Constant search task: PIEAE thrown while searching of usages of removed constant");
        return false;
      }
    }
  }
,fieldName,getSearchScope(aClass,fieldAccessFlags),UsageSearchContext.IN_CODE);
  return result.get();
}
