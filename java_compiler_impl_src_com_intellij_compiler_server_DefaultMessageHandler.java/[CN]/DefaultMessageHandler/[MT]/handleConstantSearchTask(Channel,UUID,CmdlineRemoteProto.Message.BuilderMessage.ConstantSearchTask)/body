{
  while (true) {
    final AtomicBoolean canceled=new AtomicBoolean(false);
    DumbService.getInstance(myProject).waitForSmartMode();
    ProgressIndicatorUtils.runWithWriteActionPriority(new ReadTask(){
      @Override public void computeInReadAction(      @NotNull ProgressIndicator indicator){
        if (DumbService.isDumb(myProject)) {
          canceled.set(true);
          return;
        }
        doHandleConstantSearchTask(channel,sessionId,task);
      }
      @Override public void onCanceled(      @NotNull ProgressIndicator indicator){
        canceled.set(true);
      }
    }
);
    if (!canceled.get()) {
      break;
    }
  }
}
