{
  ProgressIndicatorUtils.scheduleWithWriteActionPriority(myTaskExecutor,new ReadTask(){
    @Override public Continuation runBackgroundProcess(    @NotNull ProgressIndicator indicator) throws ProcessCanceledException {
      return DumbService.getInstance(myProject).runReadActionInSmartMode(new Computable<Continuation>(){
        @Override public Continuation compute(){
          doHandleConstantSearchTask(channel,sessionId,task);
          return null;
        }
      }
);
    }
    @Override public void onCanceled(    @NotNull ProgressIndicator indicator){
      DumbService.getInstance(myProject).runWhenSmart(new Runnable(){
        @Override public void run(){
          handleConstantSearchTask(channel,sessionId,task);
        }
      }
);
    }
  }
);
}
