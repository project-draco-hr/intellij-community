{
  final Object object=item.getObject();
  if (object instanceof PsiKeyword) {
    ThreeState result=isProbableKeyword(((PsiKeyword)object).getText());
    if (result == ThreeState.YES)     return MyResult.probableKeyword;
    if (result == ThreeState.NO)     return MyResult.improbableKeyword;
  }
  if (item.as(CastingLookupElementDecorator.CLASS_CONDITION_KEY) != null) {
    return MyResult.castVariable;
  }
  if (object instanceof PsiLocalVariable || object instanceof PsiParameter || object instanceof PsiThisExpression) {
    return MyResult.localOrParameter;
  }
  if (object instanceof String && item.getUserData(JavaCompletionUtil.SUPER_METHOD_PARAMETERS) == Boolean.TRUE) {
    return MyResult.superMethodParameters;
  }
  if (object instanceof PsiMethod) {
    PsiClass containingClass=((PsiMethod)object).getContainingClass();
    if (containingClass != null && CommonClassNames.JAVA_UTIL_COLLECTIONS.equals(containingClass.getQualifiedName())) {
      return MyResult.collectionFactory;
    }
  }
  Boolean expectedTypeMember=item.getUserData(MembersGetter.EXPECTED_TYPE_MEMBER);
  if (expectedTypeMember != null) {
    return expectedTypeMember ? (object instanceof PsiField ? MyResult.expectedTypeConstant : MyResult.expectedTypeMethod) : MyResult.classNameOrGlobalStatic;
  }
  if (item instanceof TypeArgumentCompletionProvider.TypeArgsLookupElement) {
    return MyResult.expectedTypeArgument;
  }
  final JavaChainLookupElement chain=item.as(JavaChainLookupElement.CLASS_CONDITION_KEY);
  if (chain != null) {
    Object qualifier=chain.getQualifier().getObject();
    if (qualifier instanceof PsiLocalVariable || qualifier instanceof PsiParameter) {
      return MyResult.localOrParameter;
    }
    if (qualifier instanceof PsiField) {
      return MyResult.qualifiedWithField;
    }
    if (isGetter(qualifier)) {
      return MyResult.qualifiedWithGetter;
    }
  }
  if (myCompletionType == CompletionType.SMART) {
    if (object instanceof PsiField)     return MyResult.field;
    if (isGetter(object))     return MyResult.getter;
    return MyResult.normal;
  }
  if (myCompletionType == CompletionType.BASIC) {
    StaticallyImportable callElement=item.as(StaticallyImportable.CLASS_CONDITION_KEY);
    if (callElement != null && callElement.canBeImported() && !callElement.willBeImported()) {
      return MyResult.classNameOrGlobalStatic;
    }
    if (object instanceof PsiMethod && PsiUtil.isAnnotationMethod((PsiElement)object)) {
      return MyResult.annoMethod;
    }
    if (object instanceof PsiClass) {
      if (myRequiredSuper.value((PsiClass)object)) {
        return MyResult.suitableClass;
      }
      return MyResult.classNameOrGlobalStatic;
    }
    if (object instanceof PsiField && myNonInitializedFields.contains(object)) {
      return MyResult.nonInitialized;
    }
  }
  return MyResult.normal;
}
