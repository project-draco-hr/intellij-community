{
  myUi.addContent(createFramesContent(session),0,PlaceInGrid.left,false);
  myUi.addContent(createVariablesContent(session),0,PlaceInGrid.center,false);
  myUi.addContent(createWatchesContent(session,sessionData),0,PlaceInGrid.right,false);
  for (  XDebugView view : myViews) {
    Disposer.register(this,view);
    session.addSessionListener(new XDebugViewSessionListener(view,getProject()),this);
  }
  myUi.getContentManager().addDataProvider(new DataProvider(){
    @Nullable @Override public Object getData(    @NonNls String dataId){
      if (XWatchesView.DATA_KEY.is(dataId)) {
        return myWatchesView;
      }
      if (LangDataKeys.CONSOLE_VIEW.is(dataId)) {
        return session.getConsoleView();
      }
      if (XDebugSessionData.DATA_KEY.is(dataId)) {
        return sessionData;
      }
      return null;
    }
  }
);
  XDebugTabLayouter layouter=debugProcess.createTabLayouter();
  Content consoleContent=layouter.registerConsoleContent(myUi,myConsole);
  attachNotificationTo(consoleContent);
  layouter.registerAdditionalContent(myUi);
  RunContentBuilder.addAdditionalConsoleEditorActions(myConsole,consoleContent);
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    return;
  }
  DefaultActionGroup leftToolbar=new DefaultActionGroup();
  final Executor debugExecutor=DefaultDebugExecutor.getDebugExecutorInstance();
  final Executor executor=environment != null ? environment.getExecutor() : debugExecutor;
  if (runner != null && environment != null) {
    RestartAction restartAction=new RestartAction(executor,runner,myRunContentDescriptor,environment);
    leftToolbar.add(restartAction);
    restartAction.registerShortcut(myUi.getComponent());
    List<AnAction> additionalRestartActions=session.getRestartActions();
    leftToolbar.addAll(additionalRestartActions);
    if (!additionalRestartActions.isEmpty())     leftToolbar.addSeparator();
    leftToolbar.addAll(session.getExtraActions());
  }
  leftToolbar.addAll(getCustomizedActionGroup(XDebuggerActions.TOOL_WINDOW_LEFT_TOOLBAR_GROUP));
  for (  AnAction action : session.getExtraStopActions()) {
    leftToolbar.add(action,new Constraints(Anchor.AFTER,IdeActions.ACTION_STOP_PROGRAM));
  }
  leftToolbar.addSeparator();
  leftToolbar.add(myUi.getOptions().getLayoutActions());
  final AnAction[] commonSettings=myUi.getOptions().getSettingsActionsList();
  final AnAction commonSettingsList=myUi.getOptions().getSettingsActions();
  final DefaultActionGroup settings=new DefaultActionGroup("DebuggerSettings",commonSettings.length > 0){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setText(ActionsBundle.message("group.XDebugger.settings.text"));
      e.getPresentation().setIcon(commonSettingsList.getTemplatePresentation().getIcon());
    }
    @Override public boolean isDumbAware(){
      return true;
    }
  }
;
  for (  AnAction each : commonSettings) {
    settings.add(each);
  }
  if (commonSettings.length > 0) {
    settings.addSeparator();
  }
  if (!debugProcess.isValuesCustomSorted()) {
    settings.add(new ToggleSortValuesAction(commonSettings.length == 0));
  }
  leftToolbar.add(settings);
  leftToolbar.addSeparator();
  leftToolbar.add(PinToolwindowTabAction.getPinAction());
  leftToolbar.add(new CloseAction(executor,myRunContentDescriptor,getProject()));
  leftToolbar.add(new ContextHelpAction(debugExecutor.getHelpId()));
  DefaultActionGroup topToolbar=new DefaultActionGroup();
  topToolbar.addAll(getCustomizedActionGroup(XDebuggerActions.TOOL_WINDOW_TOP_TOOLBAR_GROUP));
  debugProcess.registerAdditionalActions(leftToolbar,topToolbar);
  myUi.getOptions().setLeftToolbar(leftToolbar,ActionPlaces.DEBUGGER_TOOLBAR);
  myUi.getOptions().setTopToolbar(topToolbar,ActionPlaces.DEBUGGER_TOOLBAR);
  if (environment != null) {
    final RunProfile runConfiguration=environment.getRunProfile();
    registerFileMatcher(runConfiguration);
    initLogConsoles(runConfiguration,myRunContentDescriptor.getProcessHandler(),myConsole);
  }
  final DefaultActionGroup focus=new DefaultActionGroup();
  focus.add(ActionManager.getInstance().getAction(XDebuggerActions.FOCUS_ON_BREAKPOINT));
  myUi.getOptions().setAdditionalFocusActions(focus);
  rebuildViews();
}
