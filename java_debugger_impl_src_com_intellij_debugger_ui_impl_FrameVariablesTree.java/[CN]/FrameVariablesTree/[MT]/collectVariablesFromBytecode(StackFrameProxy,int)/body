{
  if (!frame.getVirtualMachine().canGetBytecodes()) {
    return Collections.emptyList();
  }
  try {
    final Location location=frame.location();
    LOG.assertTrue(location != null);
    final Method method=location.method();
    final Location methodLocation=method.location();
    if (methodLocation == null || methodLocation.codeIndex() < 0) {
      return Collections.emptyList();
    }
    final byte[] bytecodes=method.bytecodes();
    if (bytecodes != null && bytecodes.length > 0) {
      final int firstLocalVariableSlot=argumentCount + (method.isStatic() ? 0 : 1);
      final long instructionIndex=location.codeIndex();
      final TIntObjectHashMap<DecompiledLocalVariable> usedVars=new TIntObjectHashMap<DecompiledLocalVariable>();
      new InstructionParser(bytecodes,instructionIndex){
        @Override protected void localVariableInstructionFound(        int opcode,        int slot,        String typeSignature){
          if (slot >= firstLocalVariableSlot) {
            DecompiledLocalVariable variable=usedVars.get(slot);
            if (variable == null || !typeSignature.equals(variable.getSignature())) {
              variable=new DecompiledLocalVariable(slot,"slot_" + slot,typeSignature);
              usedVars.put(slot,variable);
            }
          }
        }
      }
.parse();
      if (usedVars.isEmpty()) {
        return Collections.emptyList();
      }
      final List<DecompiledLocalVariable> vars=new ArrayList<DecompiledLocalVariable>(usedVars.size());
      usedVars.forEachValue(new TObjectProcedure<DecompiledLocalVariable>(){
        @Override public boolean execute(        DecompiledLocalVariable var){
          vars.add(var);
          return true;
        }
      }
);
      Collections.sort(vars,DecompiledLocalVariable.COMPARATOR);
      return vars;
    }
  }
 catch (  UnsupportedOperationException ignored) {
  }
catch (  Exception e) {
    LOG.info(e);
  }
  return Collections.emptyList();
}
