{
  PyFunction func=queryParameters.getDerivedMethod();
  PyClass containingClass=func.getContainingClass();
  if (containingClass != null) {
    for (    PyClassLikeType type : containingClass.getSuperClassTypes(TypeEvalContext.codeInsightFallback(containingClass.getProject()))) {
      if (type instanceof PyJavaClassType) {
        final PsiClass psiClass=((PyJavaClassType)type).getPsiClass();
        PsiMethod[] methods=psiClass.findMethodsByName(func.getName(),true);
        if (!ContainerUtil.process(methods,consumer))         return false;
      }
    }
  }
  return true;
}
