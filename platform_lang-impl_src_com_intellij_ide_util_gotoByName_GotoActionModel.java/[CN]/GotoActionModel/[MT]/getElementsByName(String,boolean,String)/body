{
  List<Object> objects=new ArrayList<Object>();
  final AnAction act=myActionManager.getAction(id);
  if (act != null) {
    final HashMap<AnAction,String> map=new HashMap<AnAction,String>();
    final MatchMode matchMode=actionMatches(pattern,act);
    final String groupName=myActionsMap.get(act);
    if (map.put(act,groupName) == null) {
      objects.add(new ActionWrapper(act,groupName,matchMode));
    }
    if (checkBoxState) {
      final Set<String> ids=((ActionManagerImpl)myActionManager).getActionIds();
      for (      AnAction action : map.keySet()) {
        ids.remove(getActionId(action));
      }
      if (ids.contains(id)) {
        final AnAction anAction=myActionManager.getAction(id);
        map.put(anAction,null);
        if (anAction != null) {
          objects.add(new ActionWrapper(anAction,null,MatchMode.NON_MENU));
        }
      }
    }
  }
 else   if (Comparing.strEqual(id,INTENTIONS_KEY)) {
    for (    String intentionText : myIntentions.keySet()) {
      final ApplyIntentionAction intentionAction=myIntentions.get(intentionText);
      if (actionMatches(pattern,intentionAction) != MatchMode.NONE) {
        objects.add(new ActionWrapper(intentionAction,intentionText,MatchMode.INTENTION));
      }
    }
  }
  if (Comparing.strEqual(id,SETTINGS_KEY)) {
    final Set<String> words=myIndex.getProcessedWords(pattern);
    Set<OptionDescription> optionDescriptions=null;
    final String actionManagerName=myActionManager.getComponentName();
    for (    String word : words) {
      final Set<OptionDescription> descriptions=((SearchableOptionsRegistrarImpl)myIndex).getAcceptableDescriptions(word);
      if (descriptions != null) {
        for (Iterator<OptionDescription> iterator=descriptions.iterator(); iterator.hasNext(); ) {
          OptionDescription description=iterator.next();
          if (actionManagerName.equals(description.getPath())) {
            iterator.remove();
          }
        }
        if (!descriptions.isEmpty()) {
          if (optionDescriptions == null) {
            optionDescriptions=descriptions;
          }
 else {
            optionDescriptions.retainAll(descriptions);
          }
        }
      }
 else {
        optionDescriptions=null;
        break;
      }
    }
    if (optionDescriptions != null && !optionDescriptions.isEmpty()) {
      Set<String> currentHits=new HashSet<String>();
      for (Iterator<OptionDescription> iterator=optionDescriptions.iterator(); iterator.hasNext(); ) {
        OptionDescription description=iterator.next();
        final String hit=description.getHit();
        if (hit == null || !currentHits.add(hit.trim())) {
          iterator.remove();
        }
      }
      objects.addAll(optionDescriptions);
    }
  }
  return objects.toArray(new Object[objects.size()]);
}
