{
  boolean showIcon=UISettings.getInstance().SHOW_ICONS_IN_MENUS;
  final JPanel panel=new JPanel(new BorderLayout());
  panel.setBorder(IdeBorderFactory.createEmptyBorder(2));
  panel.setOpaque(true);
  Color bg=UIUtil.getListBackground(isSelected);
  panel.setBackground(bg);
  SimpleColoredComponent nameComponent=new SimpleColoredComponent();
  nameComponent.setBackground(bg);
  panel.add(nameComponent,BorderLayout.CENTER);
  if (matchedValue instanceof String) {
    nameComponent.append((String)matchedValue,new SimpleTextAttributes(STYLE_PLAIN,defaultActionForeground(isSelected,null)));
    if (showIcon) {
      panel.add(new JBLabel(EMPTY_ICON),BorderLayout.WEST);
    }
    return panel;
  }
  Color groupFg=isSelected ? UIUtil.getListSelectionForeground() : UIUtil.getLabelDisabledForeground();
  final Object value=((MatchedValue)matchedValue).value;
  String pattern=((MatchedValue)matchedValue).pattern;
  Border eastBorder=IdeBorderFactory.createEmptyBorder(0,0,0,2);
  if (value instanceof ActionWrapper) {
    final ActionWrapper actionWithParentGroup=(ActionWrapper)value;
    final AnAction anAction=actionWithParentGroup.getAction();
    final Presentation presentation=anAction.getTemplatePresentation();
    boolean toggle=anAction instanceof ToggleAction;
    String groupName=actionWithParentGroup.getAction() instanceof ApplyIntentionAction ? null : actionWithParentGroup.getGroupName();
    final Color fg=defaultActionForeground(isSelected,actionWithParentGroup.getPresentation());
    if (showIcon) {
      panel.add(createIconLabel(presentation.getIcon()),BorderLayout.WEST);
    }
    appendWithColoredMatches(nameComponent,getName(presentation.getText(),groupName,toggle),pattern,fg,isSelected);
    final Shortcut shortcut=preferKeyboardShortcut(KeymapManager.getInstance().getActiveKeymap().getShortcuts(ActionManager.getInstance().getId(anAction)));
    if (shortcut != null) {
      nameComponent.append(" " + KeymapUtil.getShortcutText(shortcut),new SimpleTextAttributes(SimpleTextAttributes.STYLE_SMALLER | SimpleTextAttributes.STYLE_BOLD,UIUtil.isUnderDarcula() ? groupFg : ColorUtil.shift(groupFg,1.3)));
    }
    if (toggle) {
      AnActionEvent event=AnActionEvent.createFromDataContext(ActionPlaces.UNKNOWN,null,((ActionWrapper)value).myDataContext);
      boolean selected=((ToggleAction)anAction).isSelected(event);
      addOnOffButton(panel,selected);
    }
 else {
      if (groupName != null) {
        final JLabel groupLabel=new JLabel(groupName);
        groupLabel.setBackground(bg);
        groupLabel.setBorder(eastBorder);
        groupLabel.setForeground(groupFg);
        panel.add(groupLabel,BorderLayout.EAST);
      }
    }
  }
 else   if (value instanceof OptionDescription) {
    if (!isSelected && !(value instanceof BooleanOptionDescription)) {
      Color descriptorBg=UIUtil.isUnderDarcula() ? ColorUtil.brighter(UIUtil.getListBackground(),1) : LightColors.SLIGHTLY_GRAY;
      panel.setBackground(descriptorBg);
      nameComponent.setBackground(descriptorBg);
    }
    String hit=((OptionDescription)value).getHit();
    if (hit == null) {
      hit=((OptionDescription)value).getOption();
    }
    hit=StringUtil.unescapeXml(hit);
    hit=hit.replace("  "," ");
    String fullHit=hit;
    hit=StringUtil.first(hit,45,true);
    final Color fg=UIUtil.getListForeground(isSelected);
    appendWithColoredMatches(nameComponent,hit.trim(),pattern,fg,isSelected);
    if (showIcon) {
      panel.add(new JLabel(EMPTY_ICON),BorderLayout.WEST);
    }
    panel.setToolTipText(fullHit);
    if (value instanceof BooleanOptionDescription) {
      boolean selected=((BooleanOptionDescription)value).isOptionEnabled();
      addOnOffButton(panel,selected);
    }
 else {
      final JLabel settingsLabel=new JLabel(myGroupNamer.fun((OptionDescription)value));
      settingsLabel.setForeground(groupFg);
      settingsLabel.setBackground(bg);
      settingsLabel.setBorder(eastBorder);
      panel.add(settingsLabel,BorderLayout.EAST);
    }
  }
  return panel;
}
