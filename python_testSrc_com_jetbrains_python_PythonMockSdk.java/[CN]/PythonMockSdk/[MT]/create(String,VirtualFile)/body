{
  final String mock_path=PythonTestUtil.getTestDataPath() + "/MockSdk" + version+ "/";
  String sdkHome=new File(mock_path,"bin/python" + version).getPath();
  SdkType sdkType=PythonSdkType.getInstance();
  final Sdk sdk=new ProjectJdkImpl(MOCK_SDK_NAME + " " + version,sdkType){
    @Override public String getVersionString(){
      return "Python " + version + " Mock SDK";
    }
  }
;
  final SdkModificator sdkModificator=sdk.getSdkModificator();
  sdkModificator.setHomePath(sdkHome);
  File libPath=new File(mock_path,"Lib");
  if (libPath.exists()) {
    sdkModificator.addRoot(LocalFileSystem.getInstance().refreshAndFindFileByIoFile(libPath),OrderRootType.CLASSES);
  }
  sdkModificator.addRoot(PyUserSkeletonsUtil.getUserSkeletonsDirectory(),OrderRootType.CLASSES);
  String mock_stubs_path=mock_path + PythonSdkType.SKELETON_DIR_NAME;
  sdkModificator.addRoot(LocalFileSystem.getInstance().refreshAndFindFileByPath(mock_stubs_path),PythonSdkType.BUILTIN_ROOT_TYPE);
  for (  final VirtualFile root : additionalRoots) {
    sdkModificator.addRoot(root,OrderRootType.CLASSES);
  }
  sdkModificator.commitChanges();
  final FileBasedIndex index=FileBasedIndex.getInstance();
  index.requestRebuild(StubUpdatingIndex.INDEX_ID);
  index.requestRebuild(PyModuleNameIndex.NAME);
  return sdk;
}
