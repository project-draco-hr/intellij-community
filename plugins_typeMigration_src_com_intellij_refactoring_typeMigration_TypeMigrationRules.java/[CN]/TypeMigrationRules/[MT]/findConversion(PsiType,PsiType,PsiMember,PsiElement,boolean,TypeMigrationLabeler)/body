{
  final TypeConversionDescriptor conversion=findConversion(from,to,member,context,labeler);
  if (conversion != null)   return conversion;
  final int fLevel=from.getArrayDimensions();
  final int tLevel=to.getArrayDimensions();
  if (fLevel == tLevel) {
    final PsiType fElement=from.getDeepComponentType();
    final PsiType tElement=to.getDeepComponentType();
    if (fElement instanceof PsiClassType && tElement instanceof PsiClassType) {
      final PsiClass fClass=((PsiClassType)fElement).resolve();
      final PsiClass tClass=((PsiClassType)tElement).resolve();
      if (fClass == tClass)       return new TypeConversionDescriptor();
      if (fClass != null && tClass != null && member instanceof PsiMethod) {
        final HashSet<PsiClass> fClasses=new HashSet<PsiClass>();
        InheritanceUtil.getSuperClasses(fClass,fClasses,true);
        final HashSet<PsiClass> tClasses=new HashSet<PsiClass>();
        InheritanceUtil.getSuperClasses(tClass,tClasses,true);
        fClasses.retainAll(tClasses);
        for (        PsiClass psiClass : fClasses) {
          if (MethodSignatureUtil.findMethodInSuperClassBySignatureInDerived(fClass,psiClass,((PsiMethod)member).getSignature(PsiSubstitutor.EMPTY),true) != null)           return new TypeConversionDescriptor();
        }
      }
    }
    if (isCovariantPosition && TypeConversionUtil.isAssignable(tElement,fElement))     return new TypeConversionDescriptor();
    if (!isCovariantPosition && TypeConversionUtil.isAssignable(fElement,tElement))     return new TypeConversionDescriptor();
  }
  if (isCovariantPosition && TypeConversionUtil.isAssignable(to,from))   return new TypeConversionDescriptor();
  if (!isCovariantPosition && TypeConversionUtil.isAssignable(from,to))   return new TypeConversionDescriptor();
  return null;
}
