{
  final Object element=((TypeHierarchyNodeDescriptor)descriptor).getPsiClass();
  if (element instanceof PsiClass) {
    final PsiClass psiClass=(PsiClass)element;
    final PsiClass[] supers=psiClass.getSupers();
    final List<HierarchyNodeDescriptor> descriptors=new ArrayList<HierarchyNodeDescriptor>();
    final PsiClass objectClass=JavaPsiFacade.getInstance(myProject).findClass(CommonClassNames.JAVA_LANG_OBJECT,psiClass.getResolveScope());
    for (    PsiClass aSuper : supers) {
      if (!psiClass.isInterface() || !aSuper.equals(objectClass)) {
        descriptors.add(new TypeHierarchyNodeDescriptor(myProject,descriptor,aSuper,false));
      }
    }
    return descriptors.toArray(new HierarchyNodeDescriptor[descriptors.size()]);
  }
 else   if (element instanceof PsiFunctionalExpression) {
    final PsiClass functionalInterfaceClass=PsiUtil.resolveClassInType(((PsiFunctionalExpression)element).getFunctionalInterfaceType());
    if (functionalInterfaceClass != null) {
      return new HierarchyNodeDescriptor[]{new TypeHierarchyNodeDescriptor(myProject,descriptor,functionalInterfaceClass,false)};
    }
  }
  return ArrayUtil.EMPTY_OBJECT_ARRAY;
}
