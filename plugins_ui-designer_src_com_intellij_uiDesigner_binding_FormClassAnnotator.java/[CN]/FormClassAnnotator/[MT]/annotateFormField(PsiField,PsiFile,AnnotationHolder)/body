{
  Annotation boundFieldAnnotation=holder.createInfoAnnotation(field,null);
  boundFieldAnnotation.setGutterIconRenderer(new BoundIconRenderer(field));
  LOG.assertTrue(boundForm instanceof PsiPlainTextFile);
  final PsiType guiComponentType=FormReferenceProvider.getGUIComponentType((PsiPlainTextFile)boundForm,field.getName());
  if (guiComponentType != null) {
    final PsiType fieldType=field.getType();
    if (!fieldType.isAssignableFrom(guiComponentType)) {
      String message=UIDesignerBundle.message("bound.field.type.mismatch",guiComponentType.getCanonicalText(),fieldType.getCanonicalText());
      Annotation annotation=holder.createErrorAnnotation(field.getTypeElement(),message);
      annotation.registerFix(new ChangeFormComponentTypeFix((PsiPlainTextFile)boundForm,field.getName(),field.getType()),null,null);
      annotation.registerFix(new ChangeBoundFieldTypeFix(field,guiComponentType),null,null);
    }
  }
  if (field.hasInitializer()) {
    final String message=UIDesignerBundle.message("field.is.overwritten.by.generated.code",field.getName());
    Annotation annotation=holder.createWarningAnnotation(field.getInitializer(),message);
    annotation.registerFix(new IntentionAction(){
      @Override @NotNull public String getText(){
        return message;
      }
      @Override @NotNull public String getFamilyName(){
        return UIBundle.message("remove.field.initializer.quick.fix");
      }
      @Override public boolean isAvailable(      @NotNull Project project,      Editor editor,      PsiFile file){
        return field.getInitializer() != null;
      }
      @Override public void invoke(      @NotNull Project project,      Editor editor,      PsiFile file) throws IncorrectOperationException {
        if (!FileModificationService.getInstance().preparePsiElementForWrite(field))         return;
        final PsiExpression initializer=field.getInitializer();
        LOG.assertTrue(initializer != null);
        initializer.delete();
      }
      @Override public boolean startInWriteAction(){
        return true;
      }
    }
);
  }
}
