{
  Set<Location> keys=new HashSet<>();
  String samName=samClass.getQualifiedName();
  boolean includeStreamApi=samName != null && samName.startsWith("java.util.function.") || hasStreamLikeApi(samClass.getProject());
  String methodName=calledMethod.getName();
  PsiParameter[] parameters=calledMethod.getParameterList().getParameters();
  for (int paramIndex=0; paramIndex < parameters.length; paramIndex++) {
    PsiParameter parameter=parameters[paramIndex];
    if (canPassFunctionalExpression(samClass,parameter)) {
      for (      int argCount : getPossibleArgCounts(parameters,paramIndex)) {
        for (        int argIndex : getPossibleArgIndices(parameter,paramIndex,argCount)) {
          keys.add(new CallLocation(methodName,argCount,argIndex,false));
          if (includeStreamApi) {
            keys.add(new CallLocation(methodName,argCount,argIndex,true));
          }
        }
      }
    }
  }
  return keys;
}
