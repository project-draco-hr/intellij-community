{
  final SearchScope classScope=ApplicationManager.getApplication().runReadAction(new Computable<SearchScope>(){
    @Override public SearchScope compute(){
      return aClass.getUseScope();
    }
  }
);
  final SearchScope useScope=ApplicationManager.getApplication().runReadAction(new Computable<SearchScope>(){
    @Override public SearchScope compute(){
      return searchScope.intersectWith(classScope);
    }
  }
);
  final Project project=PsiUtilCore.getProjectInReadAction(aClass);
  final GlobalSearchScope scope=new ModulesScope(highLevelModules,project).intersectWith(useScope instanceof GlobalSearchScope ? (GlobalSearchScope)useScope : new EverythingGlobalScope(project));
  final ProjectFileIndex index=ProjectRootManager.getInstance(project).getFileIndex();
  CommonProcessors.CollectProcessor<VirtualFile> processor=new CommonProcessors.CollectProcessor<VirtualFile>(){
    @Override protected boolean accept(    VirtualFile virtualFile){
      return scope.contains(virtualFile) && virtualFile.getFileType() == JavaFileType.INSTANCE && index.isInSource(virtualFile);
    }
  }
;
  final PsiSearchHelperImpl helper=(PsiSearchHelperImpl)PsiSearchHelper.SERVICE.getInstance(project);
  helper.processFilesWithText(scope,UsageSearchContext.IN_CODE,true,"::",processor);
  helper.processFilesWithText(scope,UsageSearchContext.IN_CODE,true,"->",processor);
  Collection<VirtualFile> files=processor.getResults();
  LOG.info("#files: " + files.size());
  final PsiManager psiManager=PsiManager.getInstance(project);
  for (  final VirtualFile file : files) {
    if (!ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
      @Override public Boolean compute(){
        return processFileWithFunctionalInterfaces(aClass,consumer,psiManager,file);
      }
    }
))     return false;
  }
  return true;
}
