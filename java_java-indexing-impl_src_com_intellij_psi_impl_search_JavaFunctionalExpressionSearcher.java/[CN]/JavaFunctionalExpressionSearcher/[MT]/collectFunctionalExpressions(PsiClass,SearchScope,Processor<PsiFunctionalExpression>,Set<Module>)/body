{
  final Project project=PsiUtilCore.getProjectInReadAction(aClass);
  final ModulesScope modulesScope=new ModulesScope(highLevelModules,project);
  final GlobalSearchScope useScope=ApplicationManager.getApplication().runReadAction(new Computable<GlobalSearchScope>(){
    @Override public GlobalSearchScope compute(){
      return modulesScope.intersectWith(convertToGlobalScope(project,searchScope.intersectWith(aClass.getUseScope())));
    }
  }
);
  final MethodSignature functionalInterfaceMethod=ApplicationManager.getApplication().runReadAction(new Computable<MethodSignature>(){
    @Override public MethodSignature compute(){
      return LambdaUtil.getFunction(aClass);
    }
  }
);
  LOG.assertTrue(functionalInterfaceMethod != null);
  final int expectedFunExprParamsCount=functionalInterfaceMethod.getParameterTypes().length;
  Set<VirtualFile> candidateFiles=getFilesWithFunctionalExpressionsScope(project,useScope);
  if (candidateFiles.size() < 5) {
    return searchInFiles(aClass,consumer,candidateFiles,expectedFunExprParamsCount);
  }
  final GlobalSearchScope filesScope=GlobalSearchScope.filesScope(project,candidateFiles);
  final Collection<PsiMethod> methodCandidates=getCandidateMethodsWithSuitableParams(aClass,project,useScope);
  final LinkedHashSet<VirtualFile> filesToProcess=new LinkedHashSet<VirtualFile>();
  final FileBasedIndex fileBasedIndex=FileBasedIndex.getInstance();
  for (  final PsiMethod psiMethod : methodCandidates) {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        if (!psiMethod.isValid())         return;
        final int parametersCount=psiMethod.getParameterList().getParametersCount();
        final boolean varArgs=psiMethod.isVarArgs();
        final PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
        final GlobalSearchScope methodUseScope=modulesScope.intersectWith(convertToGlobalScope(project,psiMethod.getUseScope()));
        fileBasedIndex.processValues(JavaFunctionalExpressionIndex.JAVA_FUNCTIONAL_EXPRESSION_INDEX_ID,psiMethod.getName(),null,new SuitableFilesProcessor(filesToProcess,expectedFunExprParamsCount,parametersCount,varArgs,parameters),useScope.intersectWith(methodUseScope));
      }
    }
);
  }
  collectFilesWithTypeOccurrencesAndFieldAssignments(aClass,filesScope,filesToProcess);
  return searchInFiles(aClass,consumer,filesToProcess,expectedFunExprParamsCount);
}
