{
  final Project project=PsiUtilCore.getProjectInReadAction(aClass);
  final GlobalSearchScope scope=ApplicationManager.getApplication().runReadAction(new Computable<GlobalSearchScope>(){
    @Override public GlobalSearchScope compute(){
      return prepareScopeToProcessFiles(highLevelModules,aClass,searchScope,project);
    }
  }
);
  final ProjectFileIndex index=ProjectRootManager.getInstance(project).getFileIndex();
  final HashSet<VirtualFile> files=new HashSet<VirtualFile>();
  CommonProcessors.CollectProcessor<VirtualFile> processor=new CommonProcessors.CollectProcessor<VirtualFile>(files){
    @Override protected boolean accept(    VirtualFile virtualFile){
      return scope.contains(virtualFile) && virtualFile.getFileType() == JavaFileType.INSTANCE && index.isInSource(virtualFile);
    }
  }
;
  final PsiSearchHelperImpl helper=(PsiSearchHelperImpl)PsiSearchHelper.SERVICE.getInstance(project);
  helper.processFilesWithText(scope,UsageSearchContext.IN_CODE,true,"::",processor);
  helper.processFilesWithText(scope,UsageSearchContext.IN_CODE,true,"->",processor);
  LOG.info("#files: " + files.size());
  final PsiManager psiManager=PsiManager.getInstance(project);
  for (  final VirtualFile file : files) {
    if (!ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
      @Override public Boolean compute(){
        return processFileWithFunctionalInterfaces(aClass,consumer,psiManager,file);
      }
    }
))     return false;
  }
  return true;
}
