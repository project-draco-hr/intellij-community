{
  final PsiClass aClass=queryParameters.getElementToSearch();
  if (!ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      return LambdaUtil.isFunctionalClass(aClass);
    }
  }
) || !PsiUtil.isLanguageLevel8OrHigher(aClass)) {
    return true;
  }
  final ArrayList<PsiFunctionalExpression> functionalExpressions=new ArrayList<>();
  collectFunctionalExpressions(aClass,functionalExpressions,queryParameters.getEffectiveSearchScope());
  for (  PsiFunctionalExpression functionalExpression : functionalExpressions) {
    if (!consumer.process(functionalExpression))     return false;
  }
  return true;
}
