{
  final SearchScope classScope=ApplicationManager.getApplication().runReadAction(new Computable<SearchScope>(){
    @Override public SearchScope compute(){
      return aClass.getUseScope();
    }
  }
);
  final SearchScope useScope=ApplicationManager.getApplication().runReadAction(new Computable<SearchScope>(){
    @Override public SearchScope compute(){
      return searchScope.intersectWith(classScope);
    }
  }
);
  final GlobalSearchScope scope;
  if (useScope instanceof GlobalSearchScope) {
    scope=(GlobalSearchScope)useScope;
  }
 else   if (useScope instanceof LocalSearchScope) {
    final Set<VirtualFile> files=new HashSet<VirtualFile>();
    ContainerUtil.addAllNotNull(files,ContainerUtil.map(((LocalSearchScope)useScope).getScope(),new Function<PsiElement,VirtualFile>(){
      @Override public VirtualFile fun(      PsiElement element){
        return PsiUtilCore.getVirtualFile(element);
      }
    }
));
    scope=GlobalSearchScope.filesScope(project,files);
  }
 else {
    scope=new ModulesScope(highLevelModules,project).intersectWith(new EverythingGlobalScope(project));
  }
  return new ModulesScope(highLevelModules,project).intersectWith(scope);
}
