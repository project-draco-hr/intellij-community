{
  final PsiFile psiFile=aClass.getManager().findFile(file);
  if (psiFile != null) {
    final Ref<Boolean> ref=new Ref<Boolean>(true);
    psiFile.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitElement(      PsiElement element){
        if (!ref.get()) {
          return;
        }
        super.visitElement(element);
      }
      private void visitFunctionalExpression(      PsiFunctionalExpression expression){
        PsiType functionalInterfaceType=expression.getFunctionalInterfaceType();
        if (InheritanceUtil.isInheritorOrSelf(PsiUtil.resolveClassInType(functionalInterfaceType),aClass,true)) {
          if (!consumer.process(expression)) {
            ref.set(false);
          }
        }
      }
      @Override public void visitLambdaExpression(      PsiLambdaExpression expression){
        super.visitLambdaExpression(expression);
        if (expression.getParameterList().getParametersCount() == expectedParamCount) {
          if (isVoid) {
            final PsiElement body=expression.getBody();
            if (body instanceof PsiCodeBlock) {
              final PsiReturnStatement[] statements=PsiUtil.findReturnStatements((PsiCodeBlock)body);
              for (              PsiReturnStatement statement : statements) {
                if (statement.getReturnValue() != null)                 return;
              }
            }
          }
          visitFunctionalExpression(expression);
        }
      }
      @Override public void visitMethodReferenceExpression(      PsiMethodReferenceExpression expression){
        super.visitMethodReferenceExpression(expression);
        visitFunctionalExpression(expression);
      }
    }
);
    if (!ref.get())     return false;
  }
  return true;
}
