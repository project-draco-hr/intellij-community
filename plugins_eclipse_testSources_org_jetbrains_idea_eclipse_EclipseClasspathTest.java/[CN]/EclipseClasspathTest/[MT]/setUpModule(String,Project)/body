{
  final File classpathFile=new File(path,EclipseXml.DOT_CLASSPATH_EXT);
  String fileText=FileUtil.loadFile(classpathFile).replaceAll("\\$ROOT\\$",project.getBaseDir().getPath());
  if (!SystemInfo.isWindows) {
    fileText=fileText.replaceAll(EclipseXml.FILE_PROTOCOL + "/",EclipseXml.FILE_PROTOCOL);
  }
  final Element classpathElement=JDOMUtil.loadDocument(fileText).getRootElement();
  final Module module=WriteCommandAction.runWriteCommandAction(null,new Computable<Module>(){
    @Override public Module compute(){
      String imlPath=path + "/" + EclipseProjectFinder.findProjectName(path)+ IdeaXml.IML_EXT;
      return ModuleManager.getInstance(project).newModule(imlPath,StdModuleTypes.JAVA.getId());
    }
  }
);
  ModuleRootModificationUtil.updateModel(module,new Consumer<ModifiableRootModel>(){
    @Override public void consume(    ModifiableRootModel model){
      try {
        final Set<String> sink=ContainerUtil.newHashSet();
        final EclipseClasspathReader classpathReader=new EclipseClasspathReader(path,project,null);
        classpathReader.init(model);
        classpathReader.readClasspath(model,sink,sink,sink,sink,null,classpathElement);
        new EclipseClasspathStorageProvider().assertCompatible(model);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  return module;
}
