{
  final List<String> args=new ArrayList<String>();
  final LanguageLevel languageLevel=PythonSdkType.getLanguageLevelForSdk(mySdk);
  final boolean usePyVenv=languageLevel.isAtLeast(LanguageLevel.PYTHON33);
  if (usePyVenv) {
    args.add("pyvenv");
    if (useGlobalSite) {
      args.add("--system-site-packages");
    }
    args.add(destinationDir);
    getHelperResult(PACKAGING_TOOL,args,false,true,null);
  }
 else {
    if (useGlobalSite) {
      args.add("--system-site-packages");
    }
    args.add(destinationDir);
    final boolean pre26=languageLevel.isOlderThan(LanguageLevel.PYTHON26);
    final String name="virtualenv-" + (pre26 ? VIRTUALENV_PRE_26_VERSION : VIRTUALENV_VERSION);
    final String dirName=extractHelper(name + ".tar.gz");
    try {
      final String fileName=dirName + name + File.separatorChar+ "virtualenv.py";
      getPythonProcessResult(fileName,Collections.singletonList(destinationDir),false,true,dirName + name);
    }
  finally {
      FileUtil.delete(new File(dirName));
    }
  }
  final String binary=PythonSdkType.getPythonExecutable(destinationDir);
  final String binaryFallback=destinationDir + File.separator + "bin"+ File.separator+ "python";
  final String path=(binary != null) ? binary : binaryFallback;
  if (usePyVenv) {
    final VirtualFile binaryFile=LocalFileSystem.getInstance().refreshAndFindFileByPath(path);
    if (binaryFile != null) {
      final ProjectJdkImpl tmpSdk=new ProjectJdkImpl("",PythonSdkType.getInstance());
      tmpSdk.setHomePath(path);
      final PyPackageManager manager=PyPackageManager.getInstance(tmpSdk);
      manager.installManagement();
    }
  }
  return path;
}
