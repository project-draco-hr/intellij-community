{
  final String homePath=mySdk.getHomePath();
  if (homePath == null) {
    throw new PyExternalProcessException(ERROR_INVALID_SDK,helperPath,args,"Cannot find interpreter for SDK");
  }
  if (workingDir == null) {
    workingDir=new File(homePath).getParent();
  }
  final List<String> cmdline=new ArrayList<String>();
  cmdline.add(homePath);
  cmdline.add(helperPath);
  cmdline.addAll(args);
  LOG.info("Running packaging tool: " + StringUtil.join(cmdline," "));
  final boolean canCreate=FileUtil.ensureCanCreateFile(new File(homePath));
  final boolean useSudo=!canCreate && !SystemInfo.isWindows && askForSudo;
  try {
    final Process process;
    final Map<String,String> environment=PySdkUtil.mergeEnvVariables(System.getenv(),ImmutableMap.of("PYTHONUNBUFFERED","1"));
    if (useSudo) {
      process=ExecUtil.sudo(cmdline,"Please enter your password to make changes in system packages: ",workingDir,environment);
    }
 else {
      process=ExecUtil.exec(cmdline,workingDir,environment);
    }
    final CapturingProcessHandler handler=new CapturingProcessHandler(process);
    final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
    final ProcessOutput result;
    if (indicator != null) {
      handler.addProcessListener(new ProcessAdapter(){
        @Override public void onTextAvailable(        ProcessEvent event,        Key outputType){
          if (outputType == ProcessOutputTypes.STDOUT || outputType == ProcessOutputTypes.STDERR) {
            for (            String line : StringUtil.splitByLines(event.getText())) {
              final String trimmed=line.trim();
              if (isMeaningfulOutput(trimmed)) {
                indicator.setText2(trimmed);
              }
            }
          }
        }
        private boolean isMeaningfulOutput(        @NotNull String trimmed){
          return trimmed.length() > 3;
        }
      }
);
      result=handler.runProcessWithProgressIndicator(indicator);
    }
 else {
      result=handler.runProcess(TIMEOUT);
    }
    if (result.isCancelled()) {
      throw new PyProcessCancelledException(helperPath,args);
    }
    String message=result.getStderr();
    if (result.getExitCode() != 0) {
      final String stdout=result.getStdout();
      if (StringUtil.isEmptyOrSpaces(message)) {
        message=stdout;
      }
      if (StringUtil.isEmptyOrSpaces(message)) {
        message="Failed to perform action. Permission denied.";
      }
      throw new PyExternalProcessException(result.getExitCode(),helperPath,args,message);
    }
    if (SystemInfo.isMac && !StringUtil.isEmptyOrSpaces(message)) {
      throw new PyExternalProcessException(result.getExitCode(),helperPath,args,message);
    }
    return result;
  }
 catch (  PyProcessCancelledException e) {
    throw e;
  }
catch (  ExecutionException e) {
    throw new PyExternalProcessException(ERROR_EXECUTION,helperPath,args,e.getMessage());
  }
catch (  IOException e) {
    throw new PyExternalProcessException(ERROR_ACCESS_DENIED,helperPath,args,e.getMessage());
  }
}
