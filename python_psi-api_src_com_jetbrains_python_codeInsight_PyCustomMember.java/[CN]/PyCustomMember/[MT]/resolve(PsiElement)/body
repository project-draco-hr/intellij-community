{
  if (myTarget != null) {
    return myTarget;
  }
  PyClass targetClass=null;
  if (myTypeName != null) {
    final ParameterizedCachedValueProvider<PyClass,PsiElement> provider=new ParameterizedCachedValueProvider<PyClass,PsiElement>(){
      @Nullable @Override public CachedValueProvider.Result<PyClass> compute(      final PsiElement param){
        final PyClass result=PyPsiFacade.getInstance(param.getProject()).createClassByQName(myTypeName,param);
        return CachedValueProvider.Result.create(result,PsiModificationTracker.MODIFICATION_COUNT);
      }
    }
;
    targetClass=CachedValuesManager.getManager(context.getProject()).getParameterizedCachedValue(this,RESOLVE,provider,false,context);
  }
  final PsiElement resolveTarget=findResolveTarget(context);
  if (resolveTarget instanceof PyFunction && !myAlwaysResolveToCustomElement) {
    return resolveTarget;
  }
  if (resolveTarget != null || targetClass != null) {
    return new MyInstanceElement(targetClass,context,resolveTarget);
  }
  return null;
}
