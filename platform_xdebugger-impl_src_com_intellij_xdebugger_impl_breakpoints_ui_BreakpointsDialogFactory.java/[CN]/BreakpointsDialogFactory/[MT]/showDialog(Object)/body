{
  if (myDialogShowing != null) {
    return;
  }
  final Disposable disposable=new Disposable(){
    @Override public void dispose(){
    }
  }
;
  final BreakpointsDialog dialog=new BreakpointsDialog(myProject,initialBreakpoint != null ? initialBreakpoint : myBreakpoint,XBreakpointUtil.collectPanelProviders()){
    @Override protected void dispose(){
      myBreakpoint=null;
      for (      BreakpointPanelProvider provider : XBreakpointUtil.collectPanelProviders()) {
        provider.onDialogClosed(myProject);
      }
      myDialogShowing=null;
      super.dispose();
      Disposer.dispose(disposable);
    }
  }
;
  ProjectManagerAdapter adapter=new ProjectManagerAdapter(){
    @Override public void projectClosing(    Project project){
      dialog.dispose();
    }
  }
;
  ProjectManager.getInstance().addProjectManagerListener(adapter,disposable);
  if (myBalloonToHide != null) {
    if (!myBalloonToHide.isDisposed()) {
      myBalloonToHide.hide();
    }
    myBalloonToHide=null;
  }
  myDialogShowing=dialog;
  dialog.show();
}
