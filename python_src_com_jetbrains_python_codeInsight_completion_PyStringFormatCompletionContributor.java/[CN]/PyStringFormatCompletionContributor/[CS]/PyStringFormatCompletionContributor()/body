{
  extend(CompletionType.BASIC,psiElement().inside(PyStringLiteralExpression.class),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      PsiElement original=parameters.getOriginalPosition();
      PsiElement pyReferenceExpression=PsiTreeUtil.getParentOfType(original,PyReferenceExpression.class);
      PyArgumentList argumentList=PsiTreeUtil.getNextSiblingOfType(pyReferenceExpression,PyArgumentList.class);
      if (argumentList == null)       return;
      PyExpression[] arguments=argumentList.getArguments();
      for (      PyExpression arg : arguments) {
        if (arg instanceof PyStarArgument) {
          PyDictLiteralExpression dict=PsiTreeUtil.getChildOfType(arg,PyDictLiteralExpression.class);
          if (dict == null)           return;
          for (          PyKeyValueExpression keyValue : dict.getElements()) {
            if (keyValue.getKey() instanceof PyStringLiteralExpression) {
              String key=((PyStringLiteralExpression)keyValue.getKey()).getStringValue();
              result.addElement(LookupElementBuilder.create(key).withTypeText("dict keys").withIcon(PlatformIcons.VARIABLE_ICON));
            }
          }
        }
      }
    }
  }
);
}
