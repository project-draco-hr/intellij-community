{
  PsiExpressionList argumentList=callExpression.getArgumentList();
  if (argumentList != null) {
    final PsiLambdaExpression expression=PsiTreeUtil.getParentOfType(argumentList,PsiLambdaExpression.class);
    final Computable<JavaResolveResult> computableResolve=new Computable<JavaResolveResult>(){
      @Override public JavaResolveResult compute(){
        return callExpression.resolveMethodGenerics();
      }
    }
;
    MethodCandidateInfo.CurrentCandidateProperties properties=MethodCandidateInfo.getCurrentMethod(argumentList);
    final JavaResolveResult result=properties != null ? null : expression == null ? computableResolve.compute() : PsiResolveHelper.ourGraphGuard.doPreventingRecursion(expression,false,computableResolve);
    final PsiMethod method=result instanceof MethodCandidateInfo ? ((MethodCandidateInfo)result).getElement() : properties != null ? properties.getMethod() : null;
    if (method != null) {
      final PsiExpression[] newArgs=argumentList.getExpressions();
      final PsiParameter[] newParams=method.getParameterList().getParameters();
      if (newParams.length > 0) {
        collectAdditionalConstraints(newParams,newArgs,method,result != null ? ((MethodCandidateInfo)result).getSiteSubstitutor() : properties.getSubstitutor(),additionalConstraints,result != null ? ((MethodCandidateInfo)result).isVarargs() : properties.isVarargs());
      }
    }
  }
}
