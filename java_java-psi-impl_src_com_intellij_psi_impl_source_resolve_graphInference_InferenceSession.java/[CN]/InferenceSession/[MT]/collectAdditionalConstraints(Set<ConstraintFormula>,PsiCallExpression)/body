{
  PsiExpressionList argumentList=callExpression.getArgumentList();
  if (argumentList != null) {
    final PsiLambdaExpression expression=PsiTreeUtil.getParentOfType(argumentList,PsiLambdaExpression.class);
    final Computable<JavaResolveResult> computableResolve=new Computable<JavaResolveResult>(){
      @Override public JavaResolveResult compute(){
        return callExpression.resolveMethodGenerics();
      }
    }
;
    final JavaResolveResult result=expression == null ? computableResolve.compute() : PsiResolveHelper.ourGraphGuard.doPreventingRecursion(expression,false,computableResolve);
    if (result instanceof MethodCandidateInfo) {
      final PsiMethod method=((MethodCandidateInfo)result).getElement();
      initBounds(method.getTypeParameters());
      final PsiExpression[] newArgs=argumentList.getExpressions();
      final PsiParameter[] newParams=method.getParameterList().getParameters();
      if (newParams.length > 0) {
        collectAdditionalConstraints(newParams,newArgs,method,((MethodCandidateInfo)result).getSiteSubstitutor(),additionalConstraints,((MethodCandidateInfo)result).isVarargs(),false);
      }
    }
  }
}
