{
  if (callExpression instanceof PsiNewExpression && PsiDiamondType.hasDiamond((PsiNewExpression)callExpression)) {
    PsiUtilCore.ensureValid(callExpression);
    return CachedValuesManager.getCachedValue(callExpression,new CachedValueProvider<JavaResolveResult>(){
      @Nullable @Override public Result<JavaResolveResult> compute(){
        final PsiJavaCodeReferenceElement classReference=((PsiNewExpression)callExpression).getClassOrAnonymousClassReference();
        JavaResolveResult constructor=JavaResolveResult.EMPTY;
        JavaResolveResult resolveResult=null;
        if (classReference != null) {
          resolveResult=classReference.advancedResolve(false);
          final PsiElement psiClass=resolveResult.getElement();
          if (psiClass != null) {
            final JavaPsiFacade facade=JavaPsiFacade.getInstance(callExpression.getProject());
            final PsiExpressionList argumentList=callExpression.getArgumentList();
            if (argumentList != null) {
              constructor=facade.getResolveHelper().resolveConstructor(facade.getElementFactory().createType((PsiClass)psiClass).rawType(),argumentList,callExpression);
            }
          }
        }
        return new Result<JavaResolveResult>(constructor.getElement() == null && resolveResult != null ? resolveResult : constructor,PsiModificationTracker.MODIFICATION_COUNT);
      }
    }
);
  }
  return callExpression.resolveMethodGenerics();
}
