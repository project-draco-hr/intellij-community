{
  for (  InferenceVariable var : vars) {
    LOG.assertTrue(var.getInstantiation() == PsiType.NULL);
    final PsiTypeParameter typeParameter=var.getParameter();
    final PsiType eqBound=getEqualsBound(var,substitutor);
    final PsiType lub=eqBound != PsiType.NULL && (myErased || eqBound != null) ? eqBound : composeBound(var,InferenceBound.LOWER,new Function<Pair<PsiType,PsiType>,PsiType>(){
      @Override public PsiType fun(      Pair<PsiType,PsiType> pair){
        return GenericsUtil.getLeastUpperBound(pair.first,pair.second,myManager);
      }
    }
,substitutor);
    if (lub != PsiType.NULL) {
      substitutor=substitutor.put(typeParameter,lub);
    }
 else     if (var.isThrownBound() && isThrowable(var.getBounds(InferenceBound.UPPER))) {
      final PsiClassType runtimeException=PsiType.getJavaLangRuntimeException(myManager,GlobalSearchScope.allScope(myManager.getProject()));
      substitutor=substitutor.put(typeParameter,runtimeException);
    }
 else {
      substitutor=substitutor.put(typeParameter,composeBound(var,InferenceBound.UPPER,new Function<Pair<PsiType,PsiType>,PsiType>(){
        @Override public PsiType fun(        Pair<PsiType,PsiType> pair){
          return GenericsUtil.getGreatestLowerBound(pair.first,pair.second);
        }
      }
,substitutor));
    }
  }
  return checkResult ? myIncorporationPhase.checkIncorporated(substitutor) : substitutor;
}
