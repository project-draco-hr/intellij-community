{
  final Collection<InferenceVariable> allVars=new ArrayList<InferenceVariable>(inferenceVariables);
  final Map<InferenceVariable,PsiType> foreignMap=new LinkedHashMap<InferenceVariable,PsiType>();
  while (!allVars.isEmpty()) {
    final List<InferenceVariable> vars=InferenceVariablesOrder.resolveOrder(allVars,this);
    if (!myIncorporationPhase.hasCaptureConstraints(vars)) {
      PsiSubstitutor firstSubstitutor=resolveSubset(vars,substitutor,foreignMap);
      if (firstSubstitutor != null) {
        if (hasBoundProblems(vars,firstSubstitutor,myContext)) {
          firstSubstitutor=null;
        }
      }
      if (firstSubstitutor != null) {
        substitutor=firstSubstitutor;
        allVars.removeAll(vars);
        for (        InferenceVariable var : vars) {
          PsiType type=foreignMap.get(var);
          if (type != null) {
            var.setInstantiation(type);
          }
        }
        continue;
      }
    }
    final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(getManager().getProject());
    final PsiTypeParameter[] freshParameters=createFreshVariables(vars,substitutor);
    for (int i=0; i < freshParameters.length; i++) {
      PsiTypeParameter parameter=freshParameters[i];
      final InferenceVariable var=vars.get(i);
      final PsiType lub=getLowerBound(var,substitutor);
      if (lub != PsiType.NULL) {
        for (        PsiClassType upperBoundType : parameter.getExtendsListTypes()) {
          if (!TypeConversionUtil.isAssignable(upperBoundType,lub)) {
            return null;
          }
        }
        parameter.putUserData(LOWER_BOUND,lub);
      }
      var.addBound(elementFactory.createType(parameter),InferenceBound.EQ);
    }
    myIncorporationPhase.forgetCaptures(vars);
    if (!repeatInferencePhases(true)) {
      return null;
    }
  }
  return substitutor;
}
