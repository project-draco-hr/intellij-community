{
  List<InferenceVariable> result=new ArrayList<InferenceVariable>(typeParameters.length);
  for (  PsiTypeParameter parameter : typeParameters) {
    String name=parameter.getName();
    if (myContext != null) {
      name+=Math.abs(myContext.getText().hashCode());
    }
    InferenceVariable variable=new InferenceVariable(context,parameter,name);
    result.add(variable);
    final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(parameter.getProject());
    myInferenceSubstitution=myInferenceSubstitution.put(parameter,elementFactory.createType(variable));
    myRestoreNameSubstitution=myRestoreNameSubstitution.put(variable,elementFactory.createType(parameter));
  }
  for (  InferenceVariable variable : result) {
    PsiTypeParameter parameter=variable.getParameter();
    boolean added=false;
    final PsiClassType[] extendsListTypes=parameter.getExtendsListTypes();
    for (    PsiType classType : extendsListTypes) {
      classType=substituteWithInferenceVariables(mySiteSubstitutor.substitute(classType));
      if (isProperType(classType)) {
        added=true;
      }
      variable.addBound(classType,InferenceBound.UPPER);
    }
    if (!added) {
      variable.addBound(PsiType.getJavaLangObject(parameter.getManager(),parameter.getResolveScope()),InferenceBound.UPPER);
    }
  }
  myInferenceVariables.addAll(result);
  return result.toArray(new InferenceVariable[result.size()]);
}
