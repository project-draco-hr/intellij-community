{
  if (arg instanceof PsiLambdaExpression && ((PsiLambdaExpression)arg).hasFormalParameterTypes()) {
    final PsiType sReturnType=sSubstitutor.substitute(sInterfaceMethod.getReturnType());
    final PsiType tReturnType=tSubstitutor.substitute(tInterfaceMethod.getReturnType());
    if (tReturnType == PsiType.VOID) {
      return true;
    }
    final List<PsiExpression> returnExpressions=LambdaUtil.getReturnExpressions((PsiLambdaExpression)arg);
    if (LambdaUtil.isFunctionalType(sReturnType) && LambdaUtil.isFunctionalType(tReturnType) && !TypeConversionUtil.isAssignable(TypeConversionUtil.erasure(sReturnType),TypeConversionUtil.erasure(tReturnType))&& !TypeConversionUtil.isAssignable(TypeConversionUtil.erasure(tReturnType),TypeConversionUtil.erasure(sReturnType))) {
      if (!isFunctionalTypeMoreSpecific(sReturnType,tReturnType,session,returnExpressions.toArray(new PsiExpression[returnExpressions.size()]))) {
        return false;
      }
    }
 else {
      final boolean sPrimitive=sReturnType instanceof PsiPrimitiveType && sReturnType != PsiType.VOID;
      final boolean tPrimitive=tReturnType instanceof PsiPrimitiveType && tReturnType != PsiType.VOID;
      if (sPrimitive ^ tPrimitive) {
        for (        PsiExpression returnExpression : returnExpressions) {
          if (!PsiPolyExpressionUtil.isPolyExpression(returnExpression)) {
            final PsiType returnExpressionType=returnExpression.getType();
            if (sPrimitive) {
              if (!(returnExpressionType instanceof PsiPrimitiveType)) {
                return false;
              }
            }
 else {
              if (!(returnExpressionType instanceof PsiClassType)) {
                return false;
              }
            }
          }
 else           if (sPrimitive) {
            return false;
          }
        }
        return true;
      }
      if (session != null) {
        session.addConstraint(new StrictSubtypingConstraint(tReturnType,sReturnType));
        return true;
      }
 else {
        return sReturnType != null && tReturnType != null && TypeConversionUtil.isAssignable(tReturnType,sReturnType);
      }
    }
  }
  if (arg instanceof PsiMethodReferenceExpression && ((PsiMethodReferenceExpression)arg).isExact()) {
    final PsiParameter[] sParameters=sInterfaceMethod.getParameterList().getParameters();
    final PsiParameter[] tParameters=tInterfaceMethod.getParameterList().getParameters();
    LOG.assertTrue(sParameters.length == tParameters.length);
    for (int i=0; i < tParameters.length; i++) {
      final PsiType tSubstituted=tSubstitutor.substitute(tParameters[i].getType());
      final PsiType sSubstituted=sSubstitutor.substitute(sParameters[i].getType());
      if (session != null) {
        session.addConstraint(new TypeEqualityConstraint(tSubstituted,sSubstituted));
      }
 else {
        if (!Comparing.equal(tSubstituted,sSubstituted)) {
          return false;
        }
      }
    }
    final PsiType sReturnType=sSubstitutor.substitute(sInterfaceMethod.getReturnType());
    final PsiType tReturnType=tSubstitutor.substitute(tInterfaceMethod.getReturnType());
    if (tReturnType == PsiType.VOID) {
      return true;
    }
    final boolean sPrimitive=sReturnType instanceof PsiPrimitiveType && sReturnType != PsiType.VOID;
    final boolean tPrimitive=tReturnType instanceof PsiPrimitiveType && tReturnType != PsiType.VOID;
    if (sPrimitive ^ tPrimitive) {
      final PsiMember member=((PsiMethodReferenceExpression)arg).getPotentiallyApplicableMember();
      LOG.assertTrue(member != null);
      if (member instanceof PsiMethod) {
        final PsiType methodReturnType=((PsiMethod)member).getReturnType();
        if (sPrimitive && methodReturnType instanceof PsiPrimitiveType && methodReturnType != PsiType.VOID || tPrimitive && methodReturnType instanceof PsiClassType) {
          return true;
        }
      }
      return false;
    }
    if (session != null) {
      session.addConstraint(new StrictSubtypingConstraint(tReturnType,sReturnType));
      return true;
    }
 else {
      return sReturnType != null && tReturnType != null && TypeConversionUtil.isAssignable(tReturnType,sReturnType);
    }
  }
  if (arg instanceof PsiParenthesizedExpression) {
    return argConstraints(((PsiParenthesizedExpression)arg).getExpression(),session,sInterfaceMethod,sSubstitutor,tInterfaceMethod,tSubstitutor);
  }
  if (arg instanceof PsiConditionalExpression) {
    final PsiExpression thenExpression=((PsiConditionalExpression)arg).getThenExpression();
    final PsiExpression elseExpression=((PsiConditionalExpression)arg).getElseExpression();
    return argConstraints(thenExpression,session,sInterfaceMethod,sSubstitutor,tInterfaceMethod,tSubstitutor) && argConstraints(elseExpression,session,sInterfaceMethod,sSubstitutor,tInterfaceMethod,tSubstitutor);
  }
  return false;
}
