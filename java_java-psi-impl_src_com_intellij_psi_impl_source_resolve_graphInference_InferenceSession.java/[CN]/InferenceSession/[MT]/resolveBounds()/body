{
  final List<List<InferenceVariable>> independentVars=InferenceVariablesOrder.resolveOrder(myInferenceVariables.values(),this);
  for (  List<InferenceVariable> variables : independentVars) {
    for (    InferenceVariable inferenceVariable : variables) {
      if (inferenceVariable.getInstantiation() != null)       continue;
      PsiType bound=null;
      final List<PsiType> eqBounds=inferenceVariable.getBounds(InferenceBound.EQ);
      for (      PsiType eqBound : eqBounds) {
        eqBound=mySiteSubstitutor.substitute(eqBound);
        if (isProperType(eqBound)) {
          bound=eqBound;
          break;
        }
      }
      if (bound != null) {
        inferenceVariable.setInstantiation(bound);
      }
 else {
        final List<PsiType> lowerBounds=inferenceVariable.getBounds(InferenceBound.LOWER);
        PsiType lub=null;
        for (        PsiType lowerBound : lowerBounds) {
          lowerBound=mySiteSubstitutor.substitute(lowerBound);
          if (isProperType(lowerBound)) {
            if (lub == null) {
              lub=lowerBound;
            }
 else {
              lub=GenericsUtil.getLeastUpperBound(lub,lowerBound,myManager);
            }
          }
        }
        if (lub != null) {
          inferenceVariable.setInstantiation(lub);
        }
 else {
          PsiType glb=null;
          for (          PsiType upperBound : inferenceVariable.getBounds(InferenceBound.UPPER)) {
            upperBound=mySiteSubstitutor.substitute(upperBound);
            if (isProperType(upperBound)) {
              if (glb == null) {
                glb=upperBound;
              }
 else {
                glb=GenericsUtil.getGreatestLowerBound(glb,upperBound);
              }
            }
          }
          if (glb != null) {
            inferenceVariable.setInstantiation(glb);
          }
        }
      }
      final PsiType instantiation=inferenceVariable.getInstantiation();
      if (instantiation != null) {
        mySiteSubstitutor=mySiteSubstitutor.put(inferenceVariable.getParameter(),instantiation);
      }
    }
  }
}
