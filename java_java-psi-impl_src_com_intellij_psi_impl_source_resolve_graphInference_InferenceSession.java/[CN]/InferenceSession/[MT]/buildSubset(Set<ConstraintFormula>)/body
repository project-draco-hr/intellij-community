{
  final Set<ConstraintFormula> subset=new LinkedHashSet<ConstraintFormula>();
  final Set<InferenceVariable> outputVariables=new HashSet<InferenceVariable>();
  for (  ConstraintFormula constraint : additionalConstraints) {
    if (constraint instanceof InputOutputConstraintFormula) {
      final Set<InferenceVariable> inputVariables=((InputOutputConstraintFormula)constraint).getInputVariables(this);
      final Set<InferenceVariable> outputVars=((InputOutputConstraintFormula)constraint).getOutputVariables(inputVariables,this);
      if (outputVars != null) {
        outputVariables.addAll(outputVars);
      }
    }
  }
  for (  ConstraintFormula constraint : additionalConstraints) {
    if (constraint instanceof InputOutputConstraintFormula) {
      final Set<InferenceVariable> inputVariables=((InputOutputConstraintFormula)constraint).getInputVariables(this);
      if (inputVariables != null) {
        boolean dependsOnOutput=false;
        for (        InferenceVariable inputVariable : inputVariables) {
          if (dependsOnOutput)           break;
          if (inputVariable.hasInstantiation(this))           continue;
          final Set<InferenceVariable> dependencies=inputVariable.getDependencies(this);
          dependencies.add(inputVariable);
          if (!hasCapture(inputVariable)) {
            for (            InferenceVariable outputVariable : outputVariables) {
              if (ContainerUtil.intersects(outputVariable.getDependencies(this),dependencies)) {
                dependsOnOutput=true;
                break;
              }
            }
          }
          dependencies.retainAll(outputVariables);
          if (!dependencies.isEmpty()) {
            dependsOnOutput=true;
            break;
          }
        }
        if (!dependsOnOutput) {
          subset.add(constraint);
        }
      }
 else {
        subset.add(constraint);
      }
    }
 else {
      subset.add(constraint);
    }
  }
  if (subset.isEmpty()) {
    subset.add(additionalConstraints.iterator().next());
  }
  additionalConstraints.removeAll(subset);
  return subset;
}
