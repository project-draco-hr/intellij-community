{
  for (int i=0; i < args.length; i++) {
    if (args[i] != null) {
      final InferenceSession nestedCallSession=findNestedCallSession(args[i]);
      final PsiType parameterType=nestedCallSession.substituteWithInferenceVariables(getParameterType(parameters,i,siteSubstitutor,varargs));
      if (!isPertinentToApplicability(args[i],parentMethod)) {
        additionalConstraints.add(new ExpressionCompatibilityConstraint(args[i],parameterType));
      }
      additionalConstraints.add(new CheckedExceptionCompatibilityConstraint(args[i],parameterType));
      if (args[i] instanceof PsiCallExpression && PsiPolyExpressionUtil.isPolyExpression(args[i])) {
        final PsiCallExpression callExpression=(PsiCallExpression)args[i];
        collectAdditionalConstraints(additionalConstraints,callExpression);
      }
 else       if (args[i] instanceof PsiLambdaExpression && toplevel) {
        collectLambdaReturnExpression(additionalConstraints,(PsiLambdaExpression)args[i],parameterType);
      }
    }
  }
}
