{
  for (int i=0; i < args.length; i++) {
    final PsiExpression arg=PsiUtil.skipParenthesizedExprDown(args[i]);
    if (arg != null) {
      final InferenceSession nestedCallSession=findNestedCallSession(arg);
      final PsiType parameterType=nestedCallSession.substituteWithInferenceVariables(getParameterType(parameters,i,siteSubstitutor,varargs));
      if (!isPertinentToApplicability(arg,parentMethod)) {
        additionalConstraints.add(new ExpressionCompatibilityConstraint(arg,parameterType));
      }
      additionalConstraints.add(new CheckedExceptionCompatibilityConstraint(arg,parameterType));
      if (arg instanceof PsiCallExpression && PsiPolyExpressionUtil.isPolyExpression(arg)) {
        final PsiCallExpression callExpression=(PsiCallExpression)arg;
        collectAdditionalConstraints(additionalConstraints,callExpression);
      }
 else       if (arg instanceof PsiLambdaExpression && toplevel) {
        collectLambdaReturnExpression(additionalConstraints,(PsiLambdaExpression)arg,parameterType);
      }
    }
  }
}
