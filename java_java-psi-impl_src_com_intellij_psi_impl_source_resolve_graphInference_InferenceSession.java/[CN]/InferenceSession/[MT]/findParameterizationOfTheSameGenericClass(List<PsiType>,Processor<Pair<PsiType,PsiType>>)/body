{
  for (int i=0; i < upperBounds.size(); i++) {
    final PsiType sBound=upperBounds.get(i);
    final PsiClass sClass=PsiUtil.resolveClassInClassTypeOnly(sBound);
    if (sClass == null)     continue;
    final LinkedHashSet<PsiClass> superClasses=InheritanceUtil.getSuperClasses(sClass);
    superClasses.add(sClass);
    for (int j=i + 1; j < upperBounds.size(); j++) {
      final PsiType tBound=upperBounds.get(j);
      final PsiClass tClass=PsiUtil.resolveClassInClassTypeOnly(tBound);
      if (tClass != null) {
        final LinkedHashSet<PsiClass> tSupers=InheritanceUtil.getSuperClasses(tClass);
        tSupers.add(tClass);
        tSupers.retainAll(superClasses);
        for (        PsiClass gClass : tSupers) {
          final PsiSubstitutor sSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(gClass,(PsiClassType)sBound);
          final PsiSubstitutor tSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(gClass,(PsiClassType)tBound);
          for (          PsiTypeParameter typeParameter : gClass.getTypeParameters()) {
            final PsiType sType=sSubstitutor.substitute(typeParameter);
            final PsiType tType=tSubstitutor.substitute(typeParameter);
            final Pair<PsiType,PsiType> typePair=Pair.create(sType,tType);
            if (!processor.process(typePair)) {
              return gClass;
            }
          }
        }
      }
    }
  }
  return null;
}
