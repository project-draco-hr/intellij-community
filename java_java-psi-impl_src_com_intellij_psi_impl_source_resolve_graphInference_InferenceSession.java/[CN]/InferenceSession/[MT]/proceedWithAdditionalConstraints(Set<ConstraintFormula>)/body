{
  final Set<InferenceVariable> mentionedVars=new HashSet<InferenceVariable>();
  for (  ConstraintFormula constraint : additionalConstraints) {
    if (constraint instanceof InputOutputConstraintFormula) {
      final Set<InferenceVariable> inputVariables=((InputOutputConstraintFormula)constraint).getInputVariables(this);
      if (inputVariables != null) {
        mentionedVars.addAll(inputVariables);
      }
      final Set<InferenceVariable> outputVariables=((InputOutputConstraintFormula)constraint).getOutputVariables(inputVariables,this);
      if (outputVariables != null) {
        mentionedVars.addAll(outputVariables);
      }
    }
  }
  final Set<InferenceVariable> readyVariables=new LinkedHashSet<InferenceVariable>(myInferenceVariables.values());
  readyVariables.removeAll(mentionedVars);
  final PsiSubstitutor siteSubstitutor=resolveBounds(readyVariables,mySiteSubstitutor);
  while (!additionalConstraints.isEmpty()) {
    final Set<ConstraintFormula> subset=buildSubset(additionalConstraints);
    final Set<InferenceVariable> varsToResolve=new HashSet<InferenceVariable>();
    for (    ConstraintFormula formula : subset) {
      if (formula instanceof InputOutputConstraintFormula) {
        final Set<InferenceVariable> inputVariables=((InputOutputConstraintFormula)formula).getInputVariables(this);
        if (inputVariables != null) {
          varsToResolve.addAll(inputVariables);
        }
      }
    }
    PsiSubstitutor substitutor=resolveSubset(varsToResolve,retrieveNonPrimitiveEqualsBounds(getInferenceVariables()).putAll(siteSubstitutor));
    if (substitutor == null) {
      return false;
    }
    if (myContext instanceof PsiCallExpression) {
      PsiExpressionList argumentList=((PsiCallExpression)myContext).getArgumentList();
      LOG.assertTrue(argumentList != null);
      MethodCandidateInfo.updateSubstitutor(argumentList,substitutor);
    }
    try {
      for (      ConstraintFormula additionalConstraint : subset) {
        additionalConstraint.apply(substitutor,true);
      }
      myConstraints.addAll(subset);
      if (!repeatInferencePhases(true)) {
        return false;
      }
    }
  finally {
      LambdaUtil.ourFunctionTypes.set(null);
    }
  }
  return true;
}
