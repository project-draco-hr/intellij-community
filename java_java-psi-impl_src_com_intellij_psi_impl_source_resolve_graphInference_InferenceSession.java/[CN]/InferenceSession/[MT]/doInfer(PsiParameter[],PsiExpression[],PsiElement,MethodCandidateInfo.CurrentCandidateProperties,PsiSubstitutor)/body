{
  if (!repeatInferencePhases()) {
    return;
  }
  if (properties != null && !properties.isApplicabilityCheck()) {
    final PsiMethod method=properties.getMethod();
    if (parent instanceof PsiCallExpression && PsiPolyExpressionUtil.isMethodCallPolyExpression((PsiExpression)parent,method)) {
      final PsiType returnType=method.getReturnType();
      if (!PsiType.VOID.equals(returnType) && returnType != null) {
        final Ref<String> errorMessage=new Ref<String>();
        final PsiType targetType=getTargetTypeFromParent(parent,errorMessage,false);
        if (targetType == null && errorMessage.get() != null) {
          return;
        }
        if (targetType != null && !PsiType.VOID.equals(targetType)) {
          registerReturnTypeConstraints(PsiUtil.isRawSubstitutor(method,mySiteSubstitutor) ? returnType : mySiteSubstitutor.substitute(returnType),targetType);
        }
      }
    }
    if (!repeatInferencePhases()) {
      resolveBounds(getInputInferenceVariablesFromTopLevelFunctionalExpressions(args,properties),initialSubstitutor);
      return;
    }
    if (parameters != null && args != null && !isOverloadCheck()) {
      final Set<ConstraintFormula> additionalConstraints=new LinkedHashSet<ConstraintFormula>();
      final HashSet<ConstraintFormula> ignoredConstraints=new HashSet<ConstraintFormula>();
      if (parameters.length > 0) {
        collectAdditionalConstraints(parameters,args,properties.getMethod(),mySiteSubstitutor,additionalConstraints,ignoredConstraints,properties.isVarargs(),initialSubstitutor);
      }
      if (!additionalConstraints.isEmpty() && !proceedWithAdditionalConstraints(additionalConstraints,ignoredConstraints)) {
        resolveBounds(getInputInferenceVariablesFromTopLevelFunctionalExpressions(args,properties),initialSubstitutor);
        return;
      }
    }
  }
  resolveBounds(myInferenceVariables,initialSubstitutor);
}
