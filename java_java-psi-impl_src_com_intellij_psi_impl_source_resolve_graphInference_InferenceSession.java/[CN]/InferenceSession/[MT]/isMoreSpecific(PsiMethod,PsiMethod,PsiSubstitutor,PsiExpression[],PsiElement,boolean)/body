{
  final PsiTypeParameter[] typeParameters=m1.getTypeParameters();
  try {
    for (    PsiTypeParameter parameter : typeParameters) {
      final PsiClassType[] types=parameter.getExtendsListTypes();
      if (types.length > 0) {
        final List<PsiType> conjuncts=ContainerUtil.map(types,new Function<PsiClassType,PsiType>(){
          @Override public PsiType fun(          PsiClassType type){
            return siteSubstitutor1.substitute(type);
          }
        }
);
        final PsiType upperBound=PsiIntersectionType.createIntersection(false,conjuncts.toArray(new PsiType[conjuncts.size()]));
        LambdaUtil.getFunctionalTypeMap().put(parameter,upperBound);
      }
    }
    return isMoreSpecificInternal(m1,m2,siteSubstitutor1,args,context,varargs);
  }
  finally {
    for (    PsiTypeParameter parameter : typeParameters) {
      LambdaUtil.getFunctionalTypeMap().remove(parameter);
    }
  }
}
