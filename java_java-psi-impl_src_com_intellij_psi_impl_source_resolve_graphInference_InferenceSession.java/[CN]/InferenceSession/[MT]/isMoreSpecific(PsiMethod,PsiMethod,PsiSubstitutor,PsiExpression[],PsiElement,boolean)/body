{
  try {
    final String text;
    if (m1 instanceof ClsMethodImpl) {
      final StringBuilder builder=new StringBuilder();
      ((ClsMethodImpl)m1).appendMirrorText(0,builder);
      text=builder.toString();
    }
 else {
      text=m1.getText();
    }
    m1=JavaPsiFacade.getElementFactory(m1.getProject()).createMethodFromText(text,m1);
    for (    PsiTypeParameter parameter : m1.getTypeParameters()) {
      final PsiClassType[] types=parameter.getExtendsListTypes();
      if (types.length > 0) {
        final List<PsiType> conjuncts=ContainerUtil.map(types,new Function<PsiClassType,PsiType>(){
          @Override public PsiType fun(          PsiClassType type){
            return siteSubstitutor1.substitute(type);
          }
        }
);
        final PsiType upperBound=PsiIntersectionType.createIntersection(false,conjuncts.toArray(new PsiType[conjuncts.size()]));
        parameter.putUserData(UPPER_BOUND,upperBound);
      }
    }
    return isMoreSpecificInternal(m1,m2,siteSubstitutor1,args,context,varargs);
  }
  finally {
    for (    PsiTypeParameter parameter : PsiUtil.typeParametersIterable(m1)) {
      parameter.putUserData(UPPER_BOUND,null);
    }
  }
}
