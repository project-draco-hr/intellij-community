{
  final PsiType eqBound=getEqualsBound(var,substitutor);
  if (eqBound != PsiType.NULL && eqBound instanceof PsiPrimitiveType)   return PsiType.NULL;
  final PsiType lowerBound=getLowerBound(var,substitutor);
  final PsiType upperBound=getUpperBound(var,substitutor);
  PsiType type;
  if (eqBound != PsiType.NULL && (myErased || eqBound != null)) {
    if (lowerBound != PsiType.NULL && !TypeConversionUtil.isAssignable(eqBound,lowerBound)) {
      registerIncompatibleErrorMessage(incompatibleBoundsMessage(var,substitutor,InferenceBound.EQ,EQUALITY_CONSTRAINTS_PRESENTATION,InferenceBound.LOWER,LOWER_BOUNDS_PRESENTATION),var.getParameter());
      return PsiType.NULL;
    }
 else {
      type=eqBound;
    }
  }
 else {
    type=lowerBound;
  }
  if (type == PsiType.NULL) {
    if (var.isThrownBound() && isThrowable(var.getBounds(InferenceBound.UPPER))) {
      type=PsiType.getJavaLangRuntimeException(myManager,GlobalSearchScope.allScope(myManager.getProject()));
    }
 else {
      if (substitutor.putAll(mySiteSubstitutor).getSubstitutionMap().get(var.getParameter()) != null)       return PsiType.NULL;
      type=myErased ? null : upperBound;
    }
  }
 else {
    for (    PsiType upperType : var.getBounds(InferenceBound.UPPER)) {
      if (isProperType(upperType) && !TypeConversionUtil.isAssignable(substitutor.substitute(upperType),lowerBound)) {
        final String incompatibleBoundsMessage;
        if (type != lowerBound) {
          incompatibleBoundsMessage=incompatibleBoundsMessage(var,substitutor,InferenceBound.EQ,EQUALITY_CONSTRAINTS_PRESENTATION,InferenceBound.UPPER,UPPER_BOUNDS_PRESENTATION);
        }
 else {
          incompatibleBoundsMessage=incompatibleBoundsMessage(var,substitutor,InferenceBound.LOWER,LOWER_BOUNDS_PRESENTATION,InferenceBound.UPPER,UPPER_BOUNDS_PRESENTATION);
        }
        registerIncompatibleErrorMessage(incompatibleBoundsMessage,var.getParameter());
        return PsiType.NULL;
      }
    }
  }
  return type;
}
