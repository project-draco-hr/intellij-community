{
  repeatInferencePhases();
  final PsiSubstitutor b1Substitutor=resolveBounds(myInferenceVariables.values(),mySiteSubstitutor,false);
  if (applicabilityOnly) {
    mySiteSubstitutor=b1Substitutor;
  }
  if (!applicabilityOnly) {
    final Pair<PsiMethod,PsiCallExpression> pair=getPair(parent);
    if (pair != null) {
      initReturnTypeConstraint(pair.first,(PsiCallExpression)parent);
      repeatInferencePhases();
      resolveBounds(myInferenceVariables.values(),mySiteSubstitutor,false);
    }
    if (parameters != null && args != null) {
      final Set<ConstraintFormula> additionalConstraints=new HashSet<ConstraintFormula>();
      if (parameters.length > 0) {
        for (int i=0; i < args.length; i++) {
          if (args[i] != null) {
            PsiType parameterType=getParameterType(parameters,args,i,mySiteSubstitutor);
            if (pair == null || !isPertinentToApplicability(args[i],pair.first)) {
              additionalConstraints.add(new ExpressionCompatibilityConstraint(args[i],parameterType));
            }
            additionalConstraints.add(new CheckedExceptionCompatibilityConstraint(args[i],parameterType));
          }
        }
      }
      if (!additionalConstraints.isEmpty()) {
        for (        InferenceVariable inferenceVariable : myInferenceVariables.values()) {
          inferenceVariable.ignoreInstantiation();
        }
        proceedWithAdditionalConstraints(additionalConstraints);
      }
    }
    for (    InferenceVariable inferenceVariable : myInferenceVariables.values()) {
      inferenceVariable.ignoreInstantiation();
    }
    mySiteSubstitutor=resolveBounds(myInferenceVariables.values(),mySiteSubstitutor,true);
  }
  for (  InferenceVariable inferenceVariable : myInferenceVariables.values()) {
    final PsiTypeParameter typeParameter=inferenceVariable.getParameter();
    PsiType instantiation=inferenceVariable.getInstantiation();
    if (instantiation == PsiType.NULL) {
      mySiteSubstitutor=mySiteSubstitutor.put(typeParameter,JavaPsiFacade.getInstance(typeParameter.getProject()).getElementFactory().createType(typeParameter));
    }
  }
  return mySiteSubstitutor;
}
