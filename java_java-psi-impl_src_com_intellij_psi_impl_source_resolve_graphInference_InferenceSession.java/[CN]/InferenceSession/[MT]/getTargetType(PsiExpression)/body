{
  PsiType targetType=PsiTypesUtil.getExpectedTypeByParent(context);
  if (targetType != null) {
    return targetType;
  }
  final PsiElement parent=PsiUtil.skipParenthesizedExprUp(context.getParent());
  if (parent instanceof PsiExpressionList) {
    PsiElement gParent=parent.getParent();
    if (gParent instanceof PsiAnonymousClass) {
      gParent=gParent.getParent();
    }
    if (gParent instanceof PsiCallExpression) {
      final PsiExpressionList argumentList=((PsiCallExpression)gParent).getArgumentList();
      if (argumentList != null) {
        final MethodCandidateInfo.CurrentCandidateProperties properties=MethodCandidateInfo.getCurrentMethod(argumentList);
        if (properties != null && properties.isApplicabilityCheck()) {
          return getTypeByMethod(context,argumentList,properties.getMethod(),properties.isVarargs(),properties.getSubstitutor());
        }
        final JavaResolveResult result=((PsiCallExpression)gParent).resolveMethodGenerics();
        final boolean varargs=properties != null && properties.isVarargs() || result instanceof MethodCandidateInfo && ((MethodCandidateInfo)result).isVarargs();
        return getTypeByMethod(context,argumentList,result.getElement(),varargs,PsiResolveHelper.ourGraphGuard.doPreventingRecursion(argumentList.getParent(),false,new Computable<PsiSubstitutor>(){
          @Override public PsiSubstitutor compute(){
            return result.getSubstitutor();
          }
        }
));
      }
    }
  }
 else   if (parent instanceof PsiConditionalExpression) {
    return getTargetType((PsiExpression)parent);
  }
 else   if (parent instanceof PsiLambdaExpression) {
    return getTargetTypeByContainingLambda((PsiLambdaExpression)parent);
  }
 else   if (parent instanceof PsiReturnStatement) {
    return getTargetTypeByContainingLambda(PsiTreeUtil.getParentOfType(parent,PsiLambdaExpression.class));
  }
  return null;
}
