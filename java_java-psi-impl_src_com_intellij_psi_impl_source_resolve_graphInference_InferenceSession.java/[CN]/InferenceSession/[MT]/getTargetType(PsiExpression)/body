{
  final PsiElement parent=PsiUtil.skipParenthesizedExprUp(context.getParent());
  if (parent instanceof PsiExpressionList) {
    PsiElement gParent=parent.getParent();
    if (gParent instanceof PsiAnonymousClass) {
      gParent=gParent.getParent();
    }
    if (gParent instanceof PsiCallExpression) {
      final PsiExpressionList argumentList=((PsiCallExpression)gParent).getArgumentList();
      if (argumentList != null) {
        final Pair<PsiMethod,PsiSubstitutor> pair=MethodCandidateInfo.getCurrentMethod(argumentList);
        final PsiFile placeFile=context.getContainingFile();
        final JavaMethodsConflictResolver conflictResolver=new JavaMethodsConflictResolver(argumentList,PsiUtil.getLanguageLevel(placeFile)){
          @Override protected PsiType[] getArgumentTypes(){
            return InferenceSession.getArgumentTypes(argumentList,context);
          }
        }
;
        final MethodCandidatesProcessor processor=new MethodResolverProcessor((PsiCallExpression)gParent,placeFile,new PsiConflictResolver[]{conflictResolver}){
          @Override protected PsiType[] getExpressionTypes(          PsiExpressionList argumentList){
            return getArgumentTypes(argumentList,context);
          }
        }
;
        try {
          PsiScopesUtil.setupAndRunProcessor(processor,(PsiCallExpression)gParent,false);
        }
 catch (        MethodProcessorSetupFailedException e) {
          return null;
        }
        final JavaResolveResult[] results=processor.getResult();
        return results.length == 1 ? getTypeByMethod(context,argumentList,pair,results[0],results[0].getElement()) : null;
      }
    }
  }
 else   if (parent instanceof PsiConditionalExpression) {
    PsiType targetType=PsiTypesUtil.getExpectedTypeByParent((PsiExpression)parent);
    if (targetType == null) {
      targetType=getTargetType((PsiExpression)parent);
    }
    return targetType;
  }
 else   if (parent instanceof PsiLambdaExpression) {
    if (PsiUtil.skipParenthesizedExprUp(parent.getParent()) instanceof PsiExpressionList) {
      final PsiType typeTypeByParentCall=getTargetType((PsiLambdaExpression)parent);
      return LambdaUtil.getFunctionalInterfaceReturnType(FunctionalInterfaceParameterizationUtil.getGroundTargetType(typeTypeByParentCall,(PsiLambdaExpression)parent));
    }
    return LambdaUtil.getFunctionalInterfaceReturnType(((PsiLambdaExpression)parent).getFunctionalInterfaceType());
  }
  return null;
}
