{
  final PsiElement parent=PsiUtil.skipParenthesizedExprUp(context.getParent());
  if (parent instanceof PsiExpressionList) {
    final PsiElement gParent=parent.getParent();
    if (gParent instanceof PsiCallExpression) {
      final PsiExpressionList argumentList=((PsiCallExpression)gParent).getArgumentList();
      if (argumentList != null) {
        final Pair<PsiMethod,PsiSubstitutor> pair=MethodCandidateInfo.getCurrentMethod(argumentList);
        final JavaResolveResult resolveResult=pair == null ? ((PsiCallExpression)gParent).resolveMethodGenerics() : null;
        final PsiElement parentMethod=pair != null ? pair.first : resolveResult.getElement();
        if (parentMethod instanceof PsiMethod) {
          final PsiParameter[] parameters=((PsiMethod)parentMethod).getParameterList().getParameters();
          if (parameters.length == 0)           return null;
          PsiElement arg=context;
          while (arg.getParent() instanceof PsiParenthesizedExpression) {
            arg=arg.getParent();
          }
          final PsiExpression[] args=argumentList.getExpressions();
          final int i=ArrayUtilRt.find(args,arg);
          if (i < 0)           return null;
          return getParameterType(parameters,args,i,pair != null ? pair.second : resolveResult.getSubstitutor());
        }
      }
    }
  }
 else   if (parent instanceof PsiConditionalExpression) {
    PsiType targetType=PsiTypesUtil.getExpectedTypeByParent((PsiExpression)parent);
    if (targetType == null) {
      targetType=getTargetType((PsiExpression)parent);
    }
    return targetType;
  }
 else   if (parent instanceof PsiLambdaExpression) {
    return LambdaUtil.getFunctionalInterfaceReturnType(((PsiLambdaExpression)parent).getFunctionalInterfaceType());
  }
  return null;
}
