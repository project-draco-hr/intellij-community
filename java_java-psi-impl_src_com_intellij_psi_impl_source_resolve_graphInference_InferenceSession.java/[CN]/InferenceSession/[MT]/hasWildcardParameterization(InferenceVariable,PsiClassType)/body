{
  if (!FunctionalInterfaceParameterizationUtil.isWildcardParameterized(targetType)) {
    final List<PsiType> bounds=inferenceVariable.getBounds(InferenceBound.LOWER);
    final Processor<Pair<PsiType,PsiType>> differentParameterizationProcessor=new Processor<Pair<PsiType,PsiType>>(){
      @Override public boolean process(      Pair<PsiType,PsiType> pair){
        return pair.first == null || pair.second == null || !TypesDistinctProver.provablyDistinct(pair.first,pair.second);
      }
    }
;
    if (findParameterizationOfTheSameGenericClass(bounds,differentParameterizationProcessor) != null)     return true;
    final List<PsiType> eqBounds=inferenceVariable.getBounds(InferenceBound.EQ);
    final List<PsiType> boundsToCheck=new ArrayList<PsiType>(bounds);
    boundsToCheck.addAll(eqBounds);
    for (    PsiType lowBound : boundsToCheck) {
      if (FunctionalInterfaceParameterizationUtil.isWildcardParameterized(lowBound)) {
        return true;
      }
    }
  }
  return false;
}
