{
  final List<PsiType> lowerBounds=variable.getBounds(boundType);
  PsiType lub=PsiType.NULL;
  for (  PsiType lowerBound : lowerBounds) {
    lowerBound=substituteNonProperBound(lowerBound,substitutor);
    final HashSet<InferenceVariable> dependencies=new HashSet<InferenceVariable>();
    collectDependencies(lowerBound,dependencies);
    if (dependencies.size() == 1 && dependencies.contains(variable) && isInsideRecursiveCall(dependencies)) {
      lub=JavaPsiFacade.getElementFactory(myManager.getProject()).createType(variable.getParameter());
    }
 else     if (dependencies.isEmpty() || isInsideRecursiveCall(dependencies)) {
      if (lub == PsiType.NULL) {
        lub=lowerBound;
      }
 else {
        lub=fun.fun(Pair.create(lub,lowerBound));
      }
    }
  }
  return lub;
}
