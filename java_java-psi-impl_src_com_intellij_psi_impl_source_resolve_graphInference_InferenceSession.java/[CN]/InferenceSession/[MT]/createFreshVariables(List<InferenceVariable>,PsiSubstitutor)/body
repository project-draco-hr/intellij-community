{
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(getManager().getProject());
  PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
  final PsiTypeParameter[] yVars=new PsiTypeParameter[vars.size()];
  for (int i=0; i < vars.size(); i++) {
    InferenceVariable var=vars.get(i);
    final PsiTypeParameter parameter=var.getParameter();
    yVars[i]=elementFactory.createTypeParameterFromText(getFreshVariableName(var),parameter);
    substitutor=substitutor.put(var,elementFactory.createType(yVars[i]));
  }
  final PsiSubstitutor ySubstitutor=substitutor;
  final String classText="class I<" + StringUtil.join(vars,new Function<InferenceVariable,String>(){
    @Override public String fun(    InferenceVariable variable){
      final PsiType glb=composeBound(variable,InferenceBound.UPPER,UPPER_BOUND_FUNCTION,ySubstitutor.putAll(siteSubstitutor),true);
      return getFreshVariableName(variable) + " extends " + glb.getInternalCanonicalText();
    }
  }
,", ") + ">{}";
  final PsiFile file=PsiFileFactory.getInstance(getManager().getProject()).createFileFromText("inference_dummy.java",JavaFileType.INSTANCE,classText);
  LOG.assertTrue(file instanceof PsiJavaFile,classText);
  final PsiClass[] classes=((PsiJavaFile)file).getClasses();
  LOG.assertTrue(classes.length == 1,classText);
  final PsiTypeParameter[] parameters=classes[0].getTypeParameters();
  for (  PsiTypeParameter parameter : parameters) {
    parameter.putUserData(ORIGINAL_CONTEXT,myContext);
  }
  return parameters;
}
