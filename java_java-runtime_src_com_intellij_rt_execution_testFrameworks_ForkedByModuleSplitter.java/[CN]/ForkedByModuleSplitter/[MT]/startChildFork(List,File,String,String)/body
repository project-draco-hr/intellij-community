{
  List vmParameters=new ArrayList(myVMParameters);
  myForkedDebuggerHelper.setupDebugger(vmParameters);
  final ProcessBuilder builder=new ProcessBuilder();
  builder.add(vmParameters);
  builder.add("-classpath");
  if (myDynamicClasspath.length() > 0) {
    try {
      builder.add(createClasspathJarFile(new Manifest(),classpath).getAbsolutePath());
    }
 catch (    Throwable e) {
      builder.add(classpath);
    }
  }
 else {
    builder.add(classpath);
  }
  builder.add(getStarterName());
  builder.add(args);
  if (repeatCount != null) {
    builder.add(repeatCount);
  }
  builder.setWorkingDir(workingDir);
  final Process exec=builder.createProcess();
  final boolean[] stopped=new boolean[1];
  new Thread(createInputReader(exec.getErrorStream(),System.err,stopped),"Read forked error output").start();
  new Thread(createInputReader(exec.getInputStream(),System.out,stopped),"Read forked output").start();
  final int i=exec.waitFor();
  stopped[0]=true;
  return i;
}
