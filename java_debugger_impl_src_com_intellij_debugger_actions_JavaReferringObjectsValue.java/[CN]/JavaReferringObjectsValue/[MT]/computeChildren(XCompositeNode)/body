{
  scheduleCommand(getEvaluationContext(),node,new SuspendContextCommandImpl(getEvaluationContext().getSuspendContext()){
    @Override public Priority getPriority(){
      return Priority.NORMAL;
    }
    @Override public void contextAction() throws Exception {
      final XValueChildrenList children=new XValueChildrenList();
      Value value=getDescriptor().getValue();
      List<ObjectReference> references;
      try {
        references=((ObjectReference)value).referringObjects(MAX_REFERRING);
      }
 catch (      ObjectCollectedException e) {
        node.setErrorMessage(DebuggerBundle.message("evaluation.error.object.collected"));
        return;
      }
      int i=1;
      for (      final ObjectReference reference : references) {
        Field field=findField(reference,value);
        if (field != null) {
          ValueDescriptorImpl descriptor=new FieldDescriptorImpl(getProject(),reference,field){
            @Override public Value calcValue(            EvaluationContextImpl evaluationContext) throws EvaluateException {
              return reference;
            }
          }
;
          children.add(new JavaReferringObjectsValue(null,descriptor,getEvaluationContext(),getNodeManager(),true));
          i++;
        }
 else {
          ValueDescriptorImpl descriptor=new ValueDescriptorImpl(getProject(),reference){
            @Override public Value calcValue(            EvaluationContextImpl evaluationContext) throws EvaluateException {
              return reference;
            }
            @Override public String getName(){
              return "Ref";
            }
            @Override public PsiExpression getDescriptorEvaluation(            DebuggerContext context) throws EvaluateException {
              return null;
            }
          }
;
          children.add("Referrer " + i++,new JavaReferringObjectsValue(null,descriptor,getEvaluationContext(),getNodeManager(),false));
        }
      }
      node.addChildren(children,true);
    }
  }
);
}
