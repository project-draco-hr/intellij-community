{
  ArrayList<String> superList=new ArrayList<>();
  ArrayList<Decl> innerList=new ArrayList<>();
  int accessModifiers=0;
  if (classStub.isAnonymous()) {
    if (classStub.getBaseClassReferenceText() != null) {
      superList.add(id(classStub.getBaseClassReferenceText(),true,namesCache));
    }
  }
  for (  StubElement el : classStub.getChildrenStubs()) {
    if (el instanceof PsiClassReferenceListStub) {
      PsiClassReferenceListStub refList=(PsiClassReferenceListStub)el;
      if (refList.getRole() == PsiReferenceList.Role.EXTENDS_LIST) {
        String[] extendNames=refList.getReferencedNames();
        for (        String extName : extendNames) {
          superList.add(id(extName,true,namesCache));
        }
      }
      if (refList.getRole() == PsiReferenceList.Role.IMPLEMENTS_LIST) {
        String[] implementNames=refList.getReferencedNames();
        for (        String impName : implementNames) {
          superList.add(id(impName,true,namesCache));
        }
      }
    }
    if (el instanceof PsiModifierListStub) {
      accessModifiers=((PsiModifierListStub)el).getModifiersMask();
    }
    Decl member=processMember(el,namesCache);
    if (member != null) {
      innerList.add(member);
    }
  }
  int flags=translateFlags(classStub);
  if (classStub.isAnonymousInQualifiedNew()) {
    flags|=IndexTree.SUPERS_UNRESOLVED;
  }
  String[] supers=superList.isEmpty() ? ArrayUtil.EMPTY_STRING_ARRAY : ArrayUtil.toStringArray(superList);
  Decl[] inners=innerList.isEmpty() ? Decl.EMPTY_ARRAY : innerList.toArray(new Decl[innerList.size()]);
  return new ClassDecl(classStub.id,flags,classStub.getName(),supers,inners);
}
