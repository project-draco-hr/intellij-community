{
  PsiFile psiFile=checkedClass.getContainingFile();
  PsiIdentifier classIdentifier=checkedClass.getNameIdentifier();
  if (checkedClass.getQualifiedName() != null && classIdentifier != null && psiFile != null && psiFile.getVirtualFile() != null && !isAbstract(checkedClass)) {
    if (PsiUtil.isInnerClass(checkedClass)) {
      return null;
    }
    PsiManager psiManager=checkedClass.getManager();
    GlobalSearchScope scope=checkedClass.getResolveScope();
    if (CHECK_ACTIONS) {
      PsiClass actionClass=JavaPsiFacade.getInstance(psiManager.getProject()).findClass(AnAction.class.getName(),scope);
      if (actionClass == null) {
        return null;
      }
      if (checkedClass.isInheritor(actionClass,true)) {
        if (IGNORE_NON_PUBLIC && !isPublic(checkedClass)) {
          return null;
        }
        if (!isActionRegistered(checkedClass) && canFix(checkedClass)) {
          LocalQuickFix fix=new RegisterActionFix(org.jetbrains.idea.devkit.util.PsiUtil.createPointer(checkedClass));
          ProblemDescriptor problem=manager.createProblemDescriptor(classIdentifier,DevKitBundle.message("inspections.component.not.registered.message",DevKitBundle.message("new.menu.action.text")),fix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly);
          return new ProblemDescriptor[]{problem};
        }
 else {
          return null;
        }
      }
    }
    ComponentType[] types=ComponentType.values();
    for (    ComponentType type : types) {
      PsiClass compClass=JavaPsiFacade.getInstance(psiManager.getProject()).findClass(type.myClassName,scope);
      if (compClass == null) {
        return null;
      }
      if (checkedClass.isInheritor(compClass,true)) {
        if (getRegistrationTypes(checkedClass,false) == null && canFix(checkedClass)) {
          LocalQuickFix fix=new RegisterComponentFix(type,org.jetbrains.idea.devkit.util.PsiUtil.createPointer(checkedClass));
          ProblemDescriptor problem=manager.createProblemDescriptor(classIdentifier,DevKitBundle.message("inspections.component.not.registered.message",DevKitBundle.message(type.myPropertyKey)),fix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly);
          return new ProblemDescriptor[]{problem};
        }
 else {
          return null;
        }
      }
    }
  }
  return null;
}
