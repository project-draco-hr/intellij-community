{
  PsiElement element=context;
  PsiElement parent=context.getParent();
  while (parent instanceof GrBinaryExpression && ((GrBinaryExpression)parent).getOperationTokenType() == GroovyTokenTypes.mPLUS || parent instanceof GrAssignmentExpression && ((GrAssignmentExpression)parent).getOperationToken() == GroovyTokenTypes.mPLUS_ASSIGN || parent instanceof GrConditionalExpression && ((GrConditionalExpression)parent).getCondition() != element || parent instanceof GrTypeCastExpression || parent instanceof GrSafeCastExpression || parent instanceof GrParenthesizedExpression) {
    element=parent;
    parent=parent.getParent();
  }
  PsiElement[] operands;
  PsiElement anchor;
  if (element instanceof GrBinaryExpression) {
    operands=collectBinaryOperands(((GrBinaryExpression)element));
    anchor=element;
  }
 else   if (element instanceof GrAssignmentExpression) {
    GrExpression rvalue=((GrAssignmentExpression)element).getRValue();
    operands=new PsiElement[]{rvalue == null ? element : rvalue};
    anchor=element;
  }
 else {
    operands=new PsiElement[]{context};
    anchor=context;
  }
  return Pair.create(anchor,operands);
}
