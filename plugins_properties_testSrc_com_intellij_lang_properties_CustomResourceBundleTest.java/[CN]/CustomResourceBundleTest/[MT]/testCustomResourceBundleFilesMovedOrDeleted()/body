{
  final PropertiesFile file=PropertiesImplUtil.getPropertiesFile(myFixture.addFileToProject("resources-dev/my-app-dev.properties",""));
  final PropertiesFile file2=PropertiesImplUtil.getPropertiesFile(myFixture.addFileToProject("resources-dev/my-app-test.properties",""));
  final PropertiesFile file3=PropertiesImplUtil.getPropertiesFile(myFixture.addFileToProject("resources-prod/my-app-prod.properties",""));
  assertNotNull(file);
  assertNotNull(file2);
  assertNotNull(file3);
  assertOneElement(file.getResourceBundle().getPropertiesFiles());
  assertOneElement(file2.getResourceBundle().getPropertiesFiles());
  assertOneElement(file3.getResourceBundle().getPropertiesFiles());
  final ResourceBundleManager resourceBundleBaseNameManager=ResourceBundleManager.getInstance(getProject());
  resourceBundleBaseNameManager.combineToResourceBundle(list(file,file2,file3),"my-app");
  assertSize(3,file.getResourceBundle().getPropertiesFiles());
  final PsiDirectory newDir=PsiManager.getInstance(getProject()).findDirectory(myFixture.getTempDirFixture().findOrCreateDir("new-resources-dir"));
  new MoveFilesOrDirectoriesProcessor(getProject(),new PsiElement[]{file2.getContainingFile()},newDir,false,false,null,null).run();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      file3.getContainingFile().delete();
    }
  }
);
  assertSize(2,file.getResourceBundle().getPropertiesFiles());
  final ResourceBundleManagerState state=ResourceBundleManager.getInstance(getProject()).getState();
  assertNotNull(state);
  assertSize(1,state.getCustomResourceBundles());
  assertSize(2,state.getCustomResourceBundles().get(0).getFileUrls());
}
