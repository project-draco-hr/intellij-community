{
  ASTNode node=getNode();
  String text=node.getText();
  IElementType type=node.getElementType();
  if (type == PyElementTypes.INTEGER_LITERAL_EXPRESSION) {
    return new BigDecimal(getBigIntegerValue(text));
  }
  Matcher m=PATTERN_FLOAT.matcher(text);
  boolean matches=m.matches();
  assert matches;
  BigDecimal whole;
  if (m.group(2) != null) {
    whole=new BigDecimal(m.group(2));
    String fractionStr=m.group(3);
    BigDecimal fraction=BigDecimal.ZERO;
    if (fractionStr != null) {
      fraction=new BigDecimal("0." + fractionStr);
    }
    whole=whole.add(fraction);
  }
 else   if (m.group(4) != null) {
    whole=new BigDecimal("0." + m.group(4));
  }
 else {
    throw new IllegalStateException("Cannot parse BigDecimal for " + text);
  }
  if (m.group(5) != null) {
    String sign=m.group(6);
    if (sign == null)     sign="+";
    String exp=m.group(7);
    whole=whole.multiply(new BigDecimal("1e" + sign + exp));
  }
  return whole;
}
