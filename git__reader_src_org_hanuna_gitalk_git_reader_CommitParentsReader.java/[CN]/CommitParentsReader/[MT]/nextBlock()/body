{
  final List<TimestampCommitParents> commitParentsList=new ArrayList<TimestampCommitParents>();
  final MyTimer gitThink=new MyTimer("gitThink");
  final MyTimer readTimer=new MyTimer("read commit parents");
  ProcessOutputReader outputReader=new ProcessOutputReader(progressUpdater,new Executor<String>(){
    private boolean wasReadFirstLine=false;
    @Override public void execute(    String key){
      if (!wasReadFirstLine) {
        wasReadFirstLine=true;
        gitThink.print();
        readTimer.clear();
      }
      TimestampCommitParents commitParents=CommitParser.parseTimestampParentHashes(key);
      commitParentsList.add(commitParents);
    }
  }
);
  outputReader.startRead(GitProcessFactory.dayInterval(lastDay,lastDay + DAY_BLOCK_SIZE));
  lastDay=lastDay + DAY_BLOCK_SIZE;
  Collections.sort(commitParentsList,new Comparator<TimestampCommitParents>(){
    @Override public int compare(    TimestampCommitParents o1,    TimestampCommitParents o2){
      if (o1.getTimestamp() < o2.getTimestamp()) {
        return 1;
      }
 else {
        return -1;
      }
    }
  }
);
  return Collections.<CommitParents>unmodifiableList(commitParentsList);
}
