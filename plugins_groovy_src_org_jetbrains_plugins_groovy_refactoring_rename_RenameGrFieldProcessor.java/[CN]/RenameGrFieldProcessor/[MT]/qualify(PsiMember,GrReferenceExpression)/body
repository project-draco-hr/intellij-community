{
  String name=refExpr.getReferenceName();
  final PsiClass clazz=member.getContainingClass();
  if (clazz == null)   return;
  if (refExpr.getQualifierExpression() != null)   return;
  final PsiElement replaced;
  if (member.hasModifierProperty(PsiModifier.STATIC)) {
    final GrReferenceExpression newRefExpr=GroovyPsiElementFactory.getInstance(member.getProject()).createReferenceExpressionFromText(clazz.getQualifiedName() + "." + name);
    replaced=refExpr.replace(newRefExpr);
  }
 else {
    final PsiClass containingClass=PsiTreeUtil.getParentOfType(refExpr,PsiClass.class);
    if (member.getManager().areElementsEquivalent(containingClass,clazz)) {
      final GrReferenceExpression newRefExpr=GroovyPsiElementFactory.getInstance(member.getProject()).createReferenceExpressionFromText("this." + name);
      replaced=refExpr.replace(newRefExpr);
    }
 else {
      final GrReferenceExpression newRefExpr=GroovyPsiElementFactory.getInstance(member.getProject()).createReferenceExpressionFromText(clazz.getQualifiedName() + ".this." + name);
      replaced=refExpr.replace(newRefExpr);
    }
  }
  JavaCodeStyleManager.getInstance(replaced.getProject()).shortenClassReferences(replaced);
}
