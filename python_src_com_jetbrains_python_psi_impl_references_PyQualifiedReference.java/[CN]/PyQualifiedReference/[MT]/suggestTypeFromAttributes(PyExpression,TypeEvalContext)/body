{
  final Set<String> seenAttrs=collectSeenMemberNames(qualifier.getText());
  final Set<PyClass> candidates=Sets.newHashSet();
  for (  String attribute : seenAttrs) {
    candidates.addAll(PyClassAttributesIndex.find(attribute,myElement.getProject()));
  }
  final Set<PyClass> suitableClasses=Sets.newHashSet();
  for (  PyClass candidate : candidates) {
    final Set<String> availableAttrs=Sets.newHashSet(PyUtil.getAllDeclaredAttributeNames(candidate));
    for (    PyClass parent : candidate.getAncestorClasses(context)) {
      availableAttrs.addAll(PyUtil.getAllDeclaredAttributeNames(parent));
    }
    if (availableAttrs.containsAll(seenAttrs)) {
      suitableClasses.add(candidate);
    }
  }
  for (  PyClass candidate : Lists.newArrayList(suitableClasses)) {
    for (    PyClass ancestor : candidate.getAncestorClasses()) {
      if (suitableClasses.contains(ancestor)) {
        suitableClasses.remove(candidate);
      }
    }
  }
  return PyUnionType.union(ContainerUtil.map(suitableClasses,new Function<PyClass,PyType>(){
    @Override public PyType fun(    PyClass cls){
      return new PyClassTypeImpl(cls,false);
    }
  }
));
}
