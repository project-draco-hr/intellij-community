{
  PyExpression qualifier=myElement.getQualifier();
  if (qualifier != null) {
    qualifier=CompletionUtil.getOriginalOrSelf(qualifier);
  }
  if (qualifier == null) {
    return EMPTY_ARRAY;
  }
  final PyQualifiedExpression element=CompletionUtil.getOriginalOrSelf(myElement);
  PyType qualifierType=TypeEvalContext.userInitiated(element.getProject(),element.getContainingFile()).getType(qualifier);
  ProcessingContext ctx=new ProcessingContext();
  final Set<String> namesAlready=new HashSet<String>();
  ctx.put(PyType.CTX_NAMES,namesAlready);
  if (qualifierType != null) {
    Collection<Object> variants=new ArrayList<Object>();
    Collections.addAll(variants,getVariantFromHasAttr(qualifier));
    if (qualifier instanceof PyQualifiedExpression) {
      Collection<PyExpression> attrs=collectAssignedAttributes((PyQualifiedExpression)qualifier);
      for (      PyExpression ex : attrs) {
        final String name=ex.getName();
        if (name != null && name.endsWith(CompletionUtil.DUMMY_IDENTIFIER_TRIMMED)) {
          continue;
        }
        if (ex instanceof PsiNamedElement && qualifierType instanceof PyClassType) {
          variants.add(LookupElementBuilder.create((PsiNamedElement)ex).withTypeText(qualifierType.getName()).withIcon(PlatformIcons.FIELD_ICON));
        }
        if (ex instanceof PyReferenceExpression) {
          PyReferenceExpression refExpr=(PyReferenceExpression)ex;
          namesAlready.add(refExpr.getReferencedName());
        }
 else         if (ex instanceof PyTargetExpression) {
          PyTargetExpression targetExpr=(PyTargetExpression)ex;
          namesAlready.add(targetExpr.getName());
        }
      }
      Collections.addAll(variants,qualifierType.getCompletionVariants(element.getName(),element,ctx));
      return variants.toArray();
    }
 else {
      return qualifierType.getCompletionVariants(element.getName(),element,ctx);
    }
  }
  return getUntypedVariants();
}
