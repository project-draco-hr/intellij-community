{
  final Set<String> members=new HashSet<>();
  myElement.getContainingFile().accept(new PyRecursiveElementVisitor(){
    @Override public void visitPyReferenceExpression(    PyReferenceExpression node){
      super.visitPyReferenceExpression(node);
      visitPyQualifiedExpression(node);
    }
    @Override public void visitPyTargetExpression(    PyTargetExpression node){
      super.visitPyTargetExpression(node);
      visitPyQualifiedExpression(node);
    }
    private void visitPyQualifiedExpression(    PyQualifiedExpression node){
      if (node != myElement) {
        final PyExpression qualifier=node.getQualifier();
        if (qualifier != null && qualifier.getText().equals(text)) {
          final String refName=node.getReferencedName();
          if (refName != null) {
            members.add(refName);
          }
        }
      }
    }
  }
);
  List<LookupElement> results=new ArrayList<>(members.size());
  for (  String member : members) {
    results.add(AutoCompletionPolicy.NEVER_AUTOCOMPLETE.applyPolicy(LookupElementBuilder.create(member)));
  }
  return ArrayUtil.toObjectArray(results);
}
