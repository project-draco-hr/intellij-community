{
  myRunTests++;
  if (!checkAvailableMemory(35,testResult)) {
    testResult.stop();
    return;
  }
  if (testResult.errorCount() + testResult.failureCount() > MAX_FAILURE_TEST_COUNT) {
    addErrorMessage(testResult,"Too many errors. Executed: " + myRunTests + " of "+ totalTests);
    testResult.stop();
    return;
  }
  if (myStartTime == 0) {
    String loaderName=getClass().getClassLoader().getClass().getName();
    if (!loaderName.startsWith("com.intellij.")) {
      beforeFirstTest();
    }
  }
 else {
    if (myInterruptedByOutOfTime) {
      addErrorMessage(testResult,"Time out in " + myLastTestClass + ". Executed: "+ myRunTests+ " of "+ totalTests);
      testResult.stop();
      return;
    }
  }
  log("\nRunning " + testCaseClass.getName());
  Test test=getTest(testCaseClass);
  if (test == null)   return;
  myLastTestClass=testCaseClass.getName();
  myLastTestStartTime=System.currentTimeMillis();
  myLastTestTestMethodCount=test.countTestCases();
  try {
    test.run(testResult);
  }
 catch (  OutOfMemoryError t) {
    if ((ourMode & SAVE_MEMORY_SNAPSHOT) != 0) {
      try {
        mySavingMemorySnapshot=true;
        log("OutOfMemoryError detected. Saving memory snapshot started");
      }
  finally {
        log("Saving memory snapshot finished");
        mySavingMemorySnapshot=false;
      }
    }
    testResult.addError(test,t);
  }
catch (  Throwable t) {
    testResult.addError(test,t);
  }
}
