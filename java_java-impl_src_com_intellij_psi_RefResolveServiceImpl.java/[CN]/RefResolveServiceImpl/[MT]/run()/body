{
  while (!myDisposed) {
    boolean isEmpty;
synchronized (filesToResolve) {
      isEmpty=filesToResolve.isEmpty();
    }
    if (enableVetoes.get() > 0 || isEmpty) {
      try {
        waitForQueue();
      }
 catch (      InterruptedException e) {
        break;
      }
      continue;
    }
    upToDate=false;
    final CountDownLatch batchProcessedLatch=new CountDownLatch(1);
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        new Task.Backgroundable(myProject,"Resolving files...",true){
          @Override public void run(          @NotNull final ProgressIndicator indicator){
            if (ApplicationManager.getApplication().isDisposed())             return;
            try {
              processBatch(indicator);
            }
  finally {
              batchProcessedLatch.countDown();
            }
          }
        }
.queue();
      }
    }
,myProject.getDisposed());
    try {
      batchProcessedLatch.await();
    }
 catch (    InterruptedException e) {
      break;
    }
synchronized (filesToResolve) {
      upToDate=filesToResolve.isEmpty();
      log("upToDate = " + upToDate);
    }
    flushLog();
  }
}
