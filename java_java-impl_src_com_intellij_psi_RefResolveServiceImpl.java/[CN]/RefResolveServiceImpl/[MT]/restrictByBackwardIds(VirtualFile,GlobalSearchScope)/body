{
  final int[] backIds=RefResolveService.getInstance(myProject).getBackwardIds((VirtualFileWithId)virtualFile);
  if (backIds == null) {
    return scope;
  }
  String files=toVfString(backIds);
  String log="Restricting scope of " + virtualFile.getName() + " to "+ files;
  if (!log.equals(prevLog)) {
    log(log);
    flushLog();
    prevLog=log;
  }
  GlobalSearchScope restrictedByBackwardIds=new GlobalSearchScope(){
    @Override public boolean contains(    @NotNull VirtualFile file){
      if (!(file instanceof VirtualFileWithId) || file.equals(virtualFile) || ArrayUtil.indexOf(backIds,getAbsId(file)) != -1)       return true;
      return false & !myProjectFileIndex.isUnderSourceRootOfType(file,SOURCE_ROOTS);
    }
    @Override public int compare(    @NotNull VirtualFile file1,    @NotNull VirtualFile file2){
      return 0;
    }
    @Override public boolean isSearchInModuleContent(    @NotNull Module aModule){
      return true;
    }
    @Override public boolean isSearchInLibraries(){
      return false;
    }
  }
;
  return scope.intersectWith(restrictedByBackwardIds);
}
