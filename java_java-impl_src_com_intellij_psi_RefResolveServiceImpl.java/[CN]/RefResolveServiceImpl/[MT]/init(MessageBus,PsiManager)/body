{
  messageBus.connect().subscribe(VirtualFileManager.VFS_CHANGES,new BulkFileListener.Adapter(){
    @Override public void after(    @NotNull List<? extends VFileEvent> events){
      fileCount.set(0);
      List<VirtualFile> files=ContainerUtil.mapNotNull(events,new Function<VFileEvent,VirtualFile>(){
        @Override public VirtualFile fun(        VFileEvent event){
          return event.getFile();
        }
      }
);
      queue(files,"VFS events " + events.size());
    }
  }
);
  psiManager.addPsiTreeChangeListener(new PsiTreeChangeAdapter(){
    @Override public void childrenChanged(    @NotNull PsiTreeChangeEvent event){
      PsiFile file=event.getFile();
      VirtualFile virtualFile=PsiUtilCore.getVirtualFile(file);
      if (virtualFile != null) {
        queue(Collections.singletonList(virtualFile),event);
      }
    }
    @Override public void propertyChanged(    @NotNull PsiTreeChangeEvent event){
      childrenChanged(event);
    }
  }
);
  messageBus.connect().subscribe(DumbService.DUMB_MODE,new DumbService.DumbModeListener(){
    @Override public void enteredDumbMode(){
      disable();
    }
    @Override public void exitDumbMode(){
      enable();
    }
  }
);
  messageBus.connect().subscribe(PowerSaveMode.TOPIC,new PowerSaveMode.Listener(){
    @Override public void powerSaveStateChanged(){
      if (PowerSaveMode.isEnabled()) {
        enable();
      }
 else {
        disable();
      }
    }
  }
);
  myApplication.addApplicationListener(new ApplicationAdapter(){
    @Override public void beforeWriteActionStart(    Object action){
      disable();
    }
    @Override public void writeActionFinished(    Object action){
      enable();
    }
    @Override public void applicationExiting(){
      disable();
    }
  }
,this);
  VirtualFileManager.getInstance().addVirtualFileManagerListener(new VirtualFileManagerListener(){
    @Override public void beforeRefreshStart(    boolean asynchronous){
      disable();
    }
    @Override public void afterRefreshFinish(    boolean asynchronous){
      enable();
    }
  }
,this);
  HeavyProcessLatch.INSTANCE.addListener(this,new HeavyProcessLatch.HeavyProcessListener(){
    @Override public void processStarted(){
    }
    @Override public void processFinished(){
      wakeUp();
    }
  }
);
  startThread();
}
