{
  super(new BorderLayout());
  myIsViewer=viewer;
  myState=initialState;
  myPsiDisposedCheck=new DisposedPsiManagerCheck(project);
  myProject=project;
  myCustomFilter=new CompositeFilter(project);
  myPredefinedMessageFilter=new CompositeFilter(project);
  if (usePredefinedMessageFilter) {
    for (    ConsoleFilterProvider eachProvider : Extensions.getExtensions(ConsoleFilterProvider.FILTER_PROVIDERS)) {
      Filter[] filters=eachProvider instanceof ConsoleFilterProviderEx ? ((ConsoleFilterProviderEx)eachProvider).getDefaultFilters(project,searchScope) : eachProvider.getDefaultFilters(project);
      for (      Filter filter : filters) {
        myPredefinedMessageFilter.addFilter(filter);
      }
    }
  }
  myHeavyUpdateTicket=0;
  myHeavyAlarm=myPredefinedMessageFilter.isAnyHeavy() ? new Alarm(Alarm.ThreadToUse.SHARED_THREAD,this) : null;
  processAllOutputLinkLabel=new EditorNotificationPanel().createActionLabel("Start processing of the text again",new Runnable(){
    @Override public void run(){
      final int endOffset=lastProcessedOutput.getEndOffset();
      final int lineNumber=lastProcessedOutput.isValid() ? myEditor.getDocument().getLineNumber(endOffset) : 0;
      highlightHyperlinksAndFoldings(lineNumber,myEditor.getDocument().getLineCount() - 1);
      ConsoleViewImpl.this.remove(processAllOutputLinkLabel);
      myInSpareTimeUpdate=false;
    }
  }
);
  ConsoleInputFilterProvider[] inputFilters=Extensions.getExtensions(ConsoleInputFilterProvider.INPUT_FILTER_PROVIDERS);
  if (inputFilters.length > 0) {
    CompositeInputFilter compositeInputFilter=new CompositeInputFilter(project);
    myInputMessageFilter=compositeInputFilter;
    for (    ConsoleInputFilterProvider eachProvider : inputFilters) {
      InputFilter[] filters=eachProvider.getDefaultFilters(project);
      for (      final InputFilter filter : filters) {
        compositeInputFilter.addFilter(new InputFilter(){
          boolean isBroken;
          @Nullable @Override public List<Pair<String,ConsoleViewContentType>> applyFilter(          String text,          ConsoleViewContentType contentType){
            if (!isBroken) {
              try {
                return filter.applyFilter(text,contentType);
              }
 catch (              Throwable e) {
                isBroken=true;
                LOG.error(e);
              }
            }
            return null;
          }
        }
);
      }
    }
  }
 else {
    myInputMessageFilter=null;
  }
  myFinishProgress=new Runnable(){
    @Override public void run(){
      myJLayeredPane.finishUpdating();
    }
  }
;
}
