{
  super(true);
  IcsManager icsManager=IcsManager.getInstance();
  IcsSettings settings=icsManager.getSettings();
  updateRepositoryFromRemoteCheckBox.setSelected(settings.updateOnStart);
  shareProjectWorkspaceCheckBox.setSelected(settings.shareProjectWorkspace);
  urlTextField.setText(icsManager.getRepositoryManager().getRemoteRepositoryUrl());
  urlTextField.addBrowseFolderListener(new TextBrowseFolderListener(FileChooserDescriptorFactory.createSingleFolderDescriptor()));
  syncButton=new JButton(IcsBundle.message("settings.panel.syncNow"));
  syncButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (!saveRemoteRepositoryUrl()) {
        return;
      }
      IcsManager.getInstance().sync().doWhenDone(new Runnable(){
        @Override public void run(){
          Messages.showInfoMessage(getContentPane(),IcsBundle.message("sync.done.message"),IcsBundle.message("sync.done.title"));
        }
      }
).doWhenRejected(new Consumer<String>(){
        @Override public void consume(        String error){
          Messages.showErrorDialog(getContentPane(),IcsBundle.message("sync.rejected.message",StringUtil.notNullize(error,"Internal error")),IcsBundle.message("sync.rejected.title"));
        }
      }
);
    }
  }
);
  updateSyncButtonState();
  urlTextField.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      updateSyncButtonState();
    }
  }
);
  setTitle(IcsBundle.message("settings.panel.title"));
  setResizable(false);
  init();
}
