{
  return new CommandLineState(null){
    private SimpleJavaParameters createJavaParameters() throws ExecutionException {
      final SimpleJavaParameters params=new SimpleJavaParameters();
      params.setJdk(new SimpleJavaSdkType().createJdk("tmp",SystemProperties.getJavaHome()));
      File myWorkingDirectory=new File(configuration);
      params.setWorkingDirectory(myWorkingDirectory.isDirectory() ? myWorkingDirectory.getPath() : PathManager.getBinPath());
      final List<String> classPath=ContainerUtilRt.newArrayList();
      classPath.addAll(PathManager.getUtilClassPath());
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(ProjectBundle.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(PlaceHolder.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(DebuggerView.class),classPath);
      ExternalSystemApiUtil.addBundle(params.getClassPath(),"messages.ProjectBundle",ProjectBundle.class);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(PsiBundle.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(Alarm.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(DependencyScope.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(ExtensionPointName.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(StorageUtil.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(ExternalSystemTaskNotificationListener.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(StdModuleTypes.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(JavaModuleType.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(ModuleType.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(EmptyModuleType.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(LanguageLevel.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(Unit.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(getClass()),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(ExternalSystemException.class),classPath);
      ExternalSystemApiUtil.addBundle(params.getClassPath(),"messages.CommonBundle",CommonBundle.class);
      params.getClassPath().addAll(classPath);
      params.setMainClass(MAIN_CLASS_NAME);
      params.getVMParametersList().addParametersString("-Djava.awt.headless=true");
      params.getVMParametersList().addParametersString("-Dsun.rmi.transport.connectionTimeout=" + String.valueOf(TimeUnit.HOURS.toMillis(1)));
      final String debugPort=System.getProperty(ExternalSystemConstants.EXTERNAL_SYSTEM_REMOTE_COMMUNICATION_MANAGER_DEBUG_PORT);
      if (debugPort != null) {
        params.getVMParametersList().addParametersString("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=" + debugPort);
      }
      ProjectSystemId externalSystemId=myTargetExternalSystemId.get();
      if (externalSystemId != null) {
        ExternalSystemManager<?,?,?,?,?> manager=ExternalSystemApiUtil.getManager(externalSystemId);
        if (manager != null) {
          params.getClassPath().add(PathUtil.getJarPathForClass(manager.getProjectResolverClass()));
          params.getProgramParametersList().add(manager.getProjectResolverClass().getName());
          params.getProgramParametersList().add(manager.getTaskManagerClass().getName());
          manager.enhanceRemoteProcessing(params);
        }
      }
      return params;
    }
    @Override @NotNull public ExecutionResult execute(    @NotNull Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      ProcessHandler processHandler=startProcess();
      return new DefaultExecutionResult(null,processHandler,AnAction.EMPTY_ARRAY);
    }
    @NotNull protected OSProcessHandler startProcess() throws ExecutionException {
      SimpleJavaParameters params=createJavaParameters();
      Sdk sdk=params.getJdk();
      if (sdk == null) {
        throw new ExecutionException("No sdk is defined. Params: " + params);
      }
      String executablePath=((JavaSdkType)sdk.getSdkType()).getVMExecutablePath(sdk);
      GeneralCommandLine commandLine=JdkUtil.setupJVMCommandLine(executablePath,params,false);
      OSProcessHandler processHandler=new OSProcessHandler(commandLine);
      ProcessTerminatedListener.attach(processHandler);
      return processHandler;
    }
  }
;
}
