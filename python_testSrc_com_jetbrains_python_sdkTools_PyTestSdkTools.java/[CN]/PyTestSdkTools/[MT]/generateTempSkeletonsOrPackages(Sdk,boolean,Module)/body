{
  Project project=null;
  if (module != null) {
    project=module.getProject();
    final Project finalProject=project;
    ModuleRootModificationUtil.setModuleSdk(module,sdk);
    UsefulTestCase.edt(new Runnable(){
      @Override public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            ProjectRootManager.getInstance(finalProject).setProjectSdk(sdk);
          }
        }
);
      }
    }
);
  }
  final SdkModificator modificator=sdk.getSdkModificator();
  modificator.removeRoots(OrderRootType.CLASSES);
  modificator.setSdkAdditionalData(new PythonSdkAdditionalData(PythonSdkFlavor.getFlavor(sdk)));
  for (  final String path : PythonSdkType.getSysPathsFromScript(sdk.getHomePath())) {
    addTestSdkRoot(modificator,path);
  }
  if (!addSkeletons) {
    UsefulTestCase.edt(new Runnable(){
      @Override public void run(){
        modificator.commitChanges();
      }
    }
);
    return;
  }
  final File tempDir=FileUtil.createTempDirectory(PyTestSdkTools.class.getName(),null);
  final File skeletonsDir=new File(tempDir,PythonSdkType.SKELETON_DIR_NAME);
  FileUtil.createDirectory(skeletonsDir);
  final String skeletonsPath=skeletonsDir.toString();
  addTestSdkRoot(modificator,skeletonsPath);
  UsefulTestCase.edt(new Runnable(){
    @Override public void run(){
      modificator.commitChanges();
    }
  }
);
  final SkeletonVersionChecker checker=new SkeletonVersionChecker(0);
  final PySkeletonRefresher refresher=new PySkeletonRefresher(null,null,sdk,skeletonsPath,null,null);
  final List<String> errors=refresher.regenerateSkeletons(checker);
  PySkeletonRefresher.refreshSkeletonsOfSdk(project,null,PythonSdkType.getSkeletonsPath(PathManager.getSystemPath(),sdk.getHomePath()),sdk);
  Assert.assertThat("Errors found",errors,Matchers.empty());
}
