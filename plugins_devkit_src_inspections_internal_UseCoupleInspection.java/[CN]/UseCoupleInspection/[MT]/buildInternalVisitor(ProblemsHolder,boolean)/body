{
  return new JavaElementVisitor(){
    @Override public void visitTypeElement(    PsiTypeElement type){
      final String canonicalText=type.getType().getCanonicalText();
      if (canonicalText.startsWith(PAIR_FQN)) {
        if (canonicalText.contains("<") && canonicalText.endsWith(">")) {
          String genericTypes=canonicalText.substring(canonicalText.indexOf('<') + 1,canonicalText.length() - 1);
          final List<String> types=StringUtil.split(genericTypes,",");
          if (types.size() == 2 && StringUtil.equals(types.get(0),types.get(1))) {
            final List<String> parts=StringUtil.split(types.get(0),".");
            String typeName=parts.get(parts.size() - 1);
            final String name="Change to Couple<" + typeName + ">";
            holder.registerProblem(type,name,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,new UseCoupleQuickFix(name));
          }
        }
      }
      super.visitTypeElement(type);
    }
    @Override public void visitMethodCallExpression(    PsiMethodCallExpression expression){
      if (expression.getText().startsWith("Pair.create")) {
        final PsiReference reference=expression.getMethodExpression().getReference();
        if (reference != null) {
          final PsiElement method=reference.resolve();
          if (method instanceof PsiMethod) {
            final PsiClass psiClass=((PsiMethod)method).getContainingClass();
            if (psiClass != null && PAIR_FQN.equals(psiClass.getQualifiedName())) {
              final PsiType[] types=expression.getArgumentList().getExpressionTypes();
              if (types.length == 2 && types[0].equals(types[1])) {
                final String name="Change to Couple.of";
                holder.registerProblem(expression,name,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,new UseCoupleQuickFix(name));
              }
            }
          }
        }
      }
      super.visitMethodCallExpression(expression);
    }
  }
;
}
