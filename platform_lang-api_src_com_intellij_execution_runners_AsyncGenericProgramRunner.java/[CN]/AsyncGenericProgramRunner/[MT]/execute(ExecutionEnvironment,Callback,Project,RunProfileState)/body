{
  prepare(project,environment,state).doWhenDone(new Consumer<RunProfileStarter>(){
    @Override public void consume(    @Nullable final RunProfileStarter result){
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          if (!project.isDisposed()) {
            startRunProfile(project,environment,state,callback,result);
          }
        }
      }
);
    }
  }
).doWhenRejected(new NullableConsumer<String>(){
    @Override public void consume(    @Nullable String errorMessage){
      if (project.isDisposed()) {
        return;
      }
      ExecutionUtil.handleExecutionError(project,environment.getExecutor().getToolWindowId(),environment.getRunProfile(),new ExecutionException(ObjectUtils.chooseNotNull(errorMessage,"Internal error")));
    }
  }
);
}
