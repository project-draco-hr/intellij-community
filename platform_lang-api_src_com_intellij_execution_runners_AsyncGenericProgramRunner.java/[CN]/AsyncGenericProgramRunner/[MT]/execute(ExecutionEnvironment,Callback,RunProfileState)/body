{
  prepare(environment,state).doWhenDone(new Consumer<RunProfileStarter>(){
    @Override public void consume(    @Nullable final RunProfileStarter result){
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          if (!environment.getProject().isDisposed()) {
            startRunProfile(environment,state,callback,result);
          }
        }
      }
);
    }
  }
).doWhenRejected(new NullableConsumer<String>(){
    @Override public void consume(    @Nullable String errorMessage){
      if (environment.getProject().isDisposed()) {
        return;
      }
      ExecutionUtil.handleExecutionError(environment,new ExecutionException(ObjectUtils.chooseNotNull(errorMessage,"Internal error")));
    }
  }
);
}
