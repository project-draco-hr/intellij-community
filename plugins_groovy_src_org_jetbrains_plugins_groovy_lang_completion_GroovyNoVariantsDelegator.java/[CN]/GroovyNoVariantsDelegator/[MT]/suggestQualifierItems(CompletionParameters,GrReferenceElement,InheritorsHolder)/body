{
  CompletionParameters parameters=_parameters.withPosition(qualifier.getReferenceNameElement(),qualifier.getTextRange().getEndOffset());
  String referenceName=qualifier.getReferenceName();
  if (referenceName == null) {
    return Collections.emptySet();
  }
  final PrefixMatcher qMatcher=new CamelHumpMatcher(referenceName);
  final Set<LookupElement> variants=new LinkedHashSet<LookupElement>();
  GrMainCompletionProvider.completeReference(parameters,qualifier,inheritors,qMatcher,new Consumer<LookupElement>(){
    @Override public void consume(    LookupElement element){
      if (qMatcher.prefixMatches(element)) {
        variants.add(element);
      }
    }
  }
);
  for (  PsiClass aClass : PsiShortNamesCache.getInstance(qualifier.getProject()).getClassesByName(referenceName,qualifier.getResolveScope())) {
    variants.add(GroovyCompletionUtil.createClassLookupItem(aClass));
  }
  if (variants.isEmpty()) {
    GrMainCompletionProvider.addAllClasses(parameters,new Consumer<LookupElement>(){
      @Override public void consume(      LookupElement element){
        if (qMatcher.prefixMatches(element)) {
          variants.add(element);
        }
      }
    }
,inheritors,qMatcher);
  }
  return variants;
}
