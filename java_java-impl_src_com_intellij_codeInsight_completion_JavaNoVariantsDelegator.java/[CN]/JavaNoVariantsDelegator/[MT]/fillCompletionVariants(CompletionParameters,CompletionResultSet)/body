{
  LinkedHashSet<CompletionResult> plainResults=result.runRemainingContributors(parameters,true);
  final boolean empty=containsOnlyPackages(plainResults) || suggestMetaAnnotations(parameters);
  if (!empty && parameters.getInvocationCount() == 0) {
    result.restartCompletionWhenNothingMatches();
  }
  if (empty) {
    delegate(parameters,JavaCompletionSorting.addJavaSorting(parameters,result));
  }
 else   if (Registry.is("ide.completion.show.better.matching.classes")) {
    if (parameters.getCompletionType() == CompletionType.BASIC && parameters.getInvocationCount() <= 1 && JavaCompletionContributor.mayStartClassName(result) && JavaCompletionContributor.isClassNamePossible(parameters) && !JavaSmartCompletionContributor.AFTER_NEW.accepts(parameters.getPosition())) {
      result=result.withPrefixMatcher(new BetterPrefixMatcher(result.getPrefixMatcher(),BetterPrefixMatcher.getBestMatchingDegree(plainResults)));
      InheritorsHolder holder=new InheritorsHolder(parameters.getPosition(),result);
      for (      CompletionResult plainResult : plainResults) {
        LookupElement element=plainResult.getLookupElement();
        if (element instanceof TypeArgumentCompletionProvider.TypeArgsLookupElement) {
          ((TypeArgumentCompletionProvider.TypeArgsLookupElement)element).registerSingleClass(holder);
        }
      }
      suggestNonImportedClasses(parameters,JavaCompletionSorting.addJavaSorting(parameters,result),holder);
    }
  }
}
