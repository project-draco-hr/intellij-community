{
  if (JavaModuleCompletion.isModuleFile(parameters.getOriginalFile())) {
    return;
  }
  final JavaCompletionSession session=new JavaCompletionSession(result);
  ResultTracker tracker=new ResultTracker(result){
    @Override public void consume(    CompletionResult plainResult){
      super.consume(plainResult);
      LookupElement element=plainResult.getLookupElement();
      Object o=element.getObject();
      if (o instanceof PsiClass) {
        session.registerClass((PsiClass)o);
      }
      if (element instanceof TypeArgumentCompletionProvider.TypeArgsLookupElement) {
        ((TypeArgumentCompletionProvider.TypeArgsLookupElement)element).registerSingleClass(session);
      }
    }
  }
;
  result.runRemainingContributors(parameters,tracker);
  final boolean empty=tracker.containsOnlyPackages || suggestAllAnnotations(parameters);
  if (!empty && parameters.getInvocationCount() == 0) {
    result.restartCompletionWhenNothingMatches();
  }
  if (empty) {
    delegate(parameters,JavaCompletionSorting.addJavaSorting(parameters,result),session);
  }
 else   if (Registry.is("ide.completion.show.better.matching.classes")) {
    if (parameters.getCompletionType() == CompletionType.BASIC && parameters.getInvocationCount() <= 1 && JavaCompletionContributor.mayStartClassName(result) && JavaCompletionContributor.isClassNamePossible(parameters) && !JavaSmartCompletionContributor.AFTER_NEW.accepts(parameters.getPosition())) {
      suggestNonImportedClasses(parameters,JavaCompletionSorting.addJavaSorting(parameters,result.withPrefixMatcher(tracker.betterMatcher)),session);
    }
  }
}
