{
  String referenceName=qualifier.getReferenceName();
  if (referenceName == null) {
    return Collections.emptySet();
  }
  PrefixMatcher qMatcher=new CamelHumpMatcher(referenceName);
  Set<LookupElement> plainVariants=JavaSmartCompletionContributor.completeReference(qualifier,qualifier,filter,true,true,parameters,qMatcher);
  for (  PsiClass aClass : PsiShortNamesCache.getInstance(qualifier.getProject()).getClassesByName(referenceName,qualifier.getResolveScope())) {
    plainVariants.add(JavaClassNameCompletionContributor.createClassLookupItem(aClass,true));
  }
  if (!plainVariants.isEmpty()) {
    return plainVariants;
  }
  final Set<LookupElement> allClasses=new LinkedHashSet<>();
  PsiElement qualifierName=qualifier.getReferenceNameElement();
  if (qualifierName != null) {
    JavaClassNameCompletionContributor.addAllClasses(parameters.withPosition(qualifierName,qualifierName.getTextRange().getEndOffset()),true,qMatcher,new CollectConsumer<>(allClasses));
  }
  return allClasses;
}
