{
class Node {
    public Integer id;
    public Set<Node> preds=new HashSet<Node>();
    public Set<Node> succs=new HashSet<Node>();
    public Node(    Integer id){
      this.id=id;
    }
  }
  HashMap<Integer,Node> mapNodes=new HashMap<Integer,Node>();
  for (  Statement stat : statement.getStats()) {
    if (!stat.getSuccessorEdges(StatEdge.TYPE_EXCEPTION).isEmpty()) {
      return false;
    }
    mapNodes.put(stat.id,new Node(stat.id));
  }
  for (  Statement stat : statement.getStats()) {
    Node node=mapNodes.get(stat.id);
    for (    Statement succ : stat.getNeighbours(StatEdge.TYPE_REGULAR,Statement.DIRECTION_FORWARD)) {
      Node nodeSucc=mapNodes.get(succ.id);
      node.succs.add(nodeSucc);
      nodeSucc.preds.add(node);
    }
  }
  for (; ; ) {
    int ttype=0;
    Node node=null;
    for (    Node nd : mapNodes.values()) {
      if (nd.succs.contains(nd)) {
        ttype=1;
      }
 else       if (nd.preds.size() == 1) {
        ttype=2;
      }
      if (ttype != 0) {
        node=nd;
        break;
      }
    }
    if (node != null) {
      if (ttype == 1) {
        node.succs.remove(node);
        node.preds.remove(node);
      }
 else {
        Node pred=node.preds.iterator().next();
        pred.succs.addAll(node.succs);
        pred.succs.remove(node);
        for (        Node succ : node.succs) {
          succ.preds.remove(node);
          succ.preds.add(pred);
        }
        mapNodes.remove(node.id);
      }
    }
 else {
      return mapNodes.size() > 1;
    }
  }
}
