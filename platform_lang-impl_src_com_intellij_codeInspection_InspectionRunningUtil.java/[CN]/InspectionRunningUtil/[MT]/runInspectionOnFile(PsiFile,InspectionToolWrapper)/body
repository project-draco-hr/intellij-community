{
  final InspectionManagerEx managerEx=(InspectionManagerEx)InspectionManager.getInstance(file.getProject());
  final GlobalInspectionContextImpl context=managerEx.createNewGlobalContext(false);
  tool.initialize(context);
  RefManagerImpl refManager=(RefManagerImpl)context.getRefManager();
  refManager.inspectionReadActionStarted();
  try {
    if (tool instanceof LocalInspectionToolWrapper) {
      LocalInspectionTool localTool=((LocalInspectionToolWrapper)tool).getTool();
      List<ProblemDescriptor> descriptors=InspectionEngine.inspect(Collections.singletonList(localTool),file,managerEx,false,false,new DaemonProgressIndicator());
      return new ArrayList<CommonProblemDescriptor>(descriptors);
    }
    if (tool instanceof GlobalInspectionToolWrapper) {
      final GlobalInspectionTool globalTool=((GlobalInspectionToolWrapper)tool).getTool();
      if (globalTool instanceof GlobalSimpleInspectionTool) {
        GlobalSimpleInspectionTool simpleTool=(GlobalSimpleInspectionTool)globalTool;
        ProblemsHolder problemsHolder=new ProblemsHolder(managerEx,file,false);
        simpleTool.checkFile(file,managerEx,problemsHolder,context,tool);
        return new ArrayList<CommonProblemDescriptor>(tool.getProblemDescriptors());
      }
      RefElement fileRef=refManager.getReference(file);
      CommonProblemDescriptor[] descriptors=globalTool.checkElement(fileRef,new AnalysisScope(file),managerEx,context);
      if (descriptors != null) {
        return Arrays.asList(descriptors);
      }
    }
    return Collections.emptyList();
  }
  finally {
    refManager.inspectionReadActionFinished();
    tool.cleanup();
    context.cleanup(managerEx);
  }
}
