{
  final InspectionManagerEx managerEx=(InspectionManagerEx)InspectionManager.getInstance(file.getProject());
  final GlobalInspectionContextImpl context=managerEx.createNewGlobalContext(false);
  toolWrapper.initialize(context);
  RefManagerImpl refManager=(RefManagerImpl)context.getRefManager();
  refManager.inspectionReadActionStarted();
  try {
    if (toolWrapper instanceof LocalInspectionToolWrapper) {
      LocalInspectionTool localTool=((LocalInspectionToolWrapper)toolWrapper).getTool();
      List<ProblemDescriptor> descriptors=InspectionEngine.inspect(Collections.singletonList(localTool),file,managerEx,false,false,new DaemonProgressIndicator());
      return new ArrayList<CommonProblemDescriptor>(descriptors);
    }
    if (toolWrapper instanceof GlobalInspectionToolWrapper) {
      final GlobalInspectionTool globalTool=((GlobalInspectionToolWrapper)toolWrapper).getTool();
      if (globalTool instanceof GlobalSimpleInspectionTool) {
        GlobalSimpleInspectionTool simpleTool=(GlobalSimpleInspectionTool)globalTool;
        ProblemsHolder problemsHolder=new ProblemsHolder(managerEx,file,false);
        InspectionToolPresentation presentation=context.getPresentation(toolWrapper);
        simpleTool.checkFile(file,managerEx,problemsHolder,context,presentation);
        return new ArrayList<CommonProblemDescriptor>(presentation.getProblemDescriptors());
      }
      RefElement fileRef=refManager.getReference(file);
      CommonProblemDescriptor[] descriptors=globalTool.checkElement(fileRef,new AnalysisScope(file),managerEx,context);
      if (descriptors != null) {
        return Arrays.asList(descriptors);
      }
    }
    return Collections.emptyList();
  }
  finally {
    refManager.inspectionReadActionFinished();
    toolWrapper.cleanup();
    context.cleanup();
  }
}
