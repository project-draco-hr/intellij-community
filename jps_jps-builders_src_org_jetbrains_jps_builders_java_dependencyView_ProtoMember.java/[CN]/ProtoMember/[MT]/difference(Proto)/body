{
  final ProtoMember m=(ProtoMember)past;
  final Difference diff=super.difference(past);
  int base=diff.base();
  if (!m.myType.equals(myType)) {
    base|=Difference.TYPE;
  }
  final Difference.Specifier<TypeRepr.ClassType,Difference> annotations=Difference.make(m.myAnnotations,myAnnotations);
  if (!annotations.unchanged()) {
    base|=Difference.ANNOTATIONS;
  }
switch ((myValue == null ? 0 : 1) + (m.myValue == null ? 0 : 2)) {
case 3:
    if (!myValue.equals(m.myValue)) {
      base|=Difference.VALUE;
    }
  break;
case 2:
base|=Difference.VALUE;
break;
case 1:
base|=Difference.VALUE;
break;
case 0:
break;
}
final int newBase=base;
return new Diff(){
@Override public Specifier<TypeRepr.ClassType,Difference> annotations(){
return annotations;
}
@Override public int base(){
return newBase;
}
@Override public boolean no(){
return newBase == NONE && diff.no();
}
@Override public int addedModifiers(){
return diff.addedModifiers();
}
@Override public int removedModifiers(){
return diff.removedModifiers();
}
@Override public boolean packageLocalOn(){
return diff.packageLocalOn();
}
@Override public boolean hadValue(){
return ((ProtoMember)past).hasValue();
}
@Override public boolean weakedAccess(){
return diff.weakedAccess();
}
}
;
}
