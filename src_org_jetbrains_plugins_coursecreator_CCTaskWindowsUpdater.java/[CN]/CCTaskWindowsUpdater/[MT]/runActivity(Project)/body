{
  final Application application=ApplicationManager.getApplication();
  if (application.isUnitTestMode()) {
    return;
  }
  final Course course=CCProjectService.getInstance(project).getCourse();
  final VirtualFile baseDir=project.getBaseDir();
  if (course != null) {
    final Map<String,Lesson> lessonsMap=course.getLessonsMap();
    for (    Map.Entry<String,Lesson> nameLessonEntry : lessonsMap.entrySet()) {
      final VirtualFile lessonDir=baseDir.findChild(nameLessonEntry.getKey());
      if (lessonDir == null)       continue;
      final Map<String,Task> tasksMap=nameLessonEntry.getValue().myTasksMap;
      for (      Map.Entry<String,Task> nameTaskEntry : tasksMap.entrySet()) {
        final VirtualFile taskDir=lessonDir.findChild(nameTaskEntry.getKey());
        if (taskDir == null)         continue;
        final Map<String,TaskFile> taskFiles=nameTaskEntry.getValue().taskFiles;
        for (        Map.Entry<String,TaskFile> nameTaskFileEntry : taskFiles.entrySet()) {
          final VirtualFile taskFile=taskDir.findChild(nameTaskFileEntry.getKey());
          if (taskFile == null)           continue;
          final FileEditor fileEditor=FileEditorManager.getInstance(project).getEditors(taskFile)[0];
          if (fileEditor instanceof TextEditor) {
            final Editor editor=((TextEditor)fileEditor).getEditor();
            final TaskFile value=nameTaskFileEntry.getValue();
            for (            TaskWindow taskWindow : value.getTaskWindows()) {
              final RangeHighlighter rangeHighlighter=editor.getMarkupModel().addLineHighlighter(taskWindow.line,HighlighterLayer.FIRST,TextAttributes.ERASE_MARKER);
              rangeHighlighter.setGutterIconRenderer(new TaskTextGutter(taskWindow));
            }
          }
        }
      }
    }
  }
}
