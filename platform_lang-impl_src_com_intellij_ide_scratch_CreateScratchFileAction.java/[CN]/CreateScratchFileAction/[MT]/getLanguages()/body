{
  Set<Language> result=ContainerUtil.newTreeSet(new Comparator<Language>(){
    @Override public int compare(    Language l1,    Language l2){
      return l1.getDisplayName().compareTo(l2.getDisplayName());
    }
  }
);
  for (  Language lang : Language.getRegisteredLanguages()) {
    if (!StringUtil.isEmpty(lang.getDisplayName()))     result.add(lang);
    for (    Language dialect : lang.getDialects())     result.add(dialect);
  }
  return ContainerUtil.filter(result,new Condition<Language>(){
    @Override public boolean value(    Language lang){
      String name=lang.getDisplayName();
      LanguageFileType type=lang.getAssociatedFileType();
      if (type == null)       return false;
      String extension=type.getDefaultExtension();
      return !StringUtil.isEmpty(extension) && !StringUtil.isEmpty(name) && !FORBIDDEN_LANGUAGES.contains(name);
    }
  }
);
}
