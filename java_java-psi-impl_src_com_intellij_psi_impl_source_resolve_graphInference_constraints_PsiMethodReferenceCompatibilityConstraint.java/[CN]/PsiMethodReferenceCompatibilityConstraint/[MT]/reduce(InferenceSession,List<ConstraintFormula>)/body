{
  if (LambdaHighlightingUtil.checkInterfaceFunctional(myT) != null) {
    return false;
  }
  final PsiClassType.ClassResolveResult classResolveResult=PsiUtil.resolveGenericsClassInType(myT);
  final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(classResolveResult);
  if (interfaceMethod == null) {
    return false;
  }
  final PsiSubstitutor substitutor=LambdaUtil.getSubstitutor(interfaceMethod,classResolveResult);
  final PsiParameter[] targetParameters=interfaceMethod.getParameterList().getParameters();
  final PsiType returnType=substitutor.substitute(interfaceMethod.getReturnType());
  LOG.assertTrue(returnType != null,interfaceMethod);
  if (!myExpression.isExact()) {
    for (    PsiParameter parameter : targetParameters) {
      if (!session.isProperType(substitutor.substitute(parameter.getType()))) {
        return false;
      }
    }
  }
 else {
    final PsiSubstitutor psiSubstitutor=PsiMethodReferenceUtil.getQualifierResolveResult(myExpression).getSubstitutor();
    final PsiMethod applicableMethod=((PsiMethodReferenceExpressionImpl)myExpression).getPotentiallyApplicableMethod();
    LOG.assertTrue(applicableMethod != null);
    final PsiParameter[] parameters=applicableMethod.getParameterList().getParameters();
    if (targetParameters.length == parameters.length + 1) {
      final PsiTypeElement qualifierTypeElement=myExpression.getQualifierType();
      final PsiExpression qualifierExpression=myExpression.getQualifierExpression();
      PsiType qualifierType;
      if (qualifierTypeElement != null) {
        qualifierType=qualifierTypeElement.getType();
      }
 else {
        LOG.assertTrue(qualifierExpression != null);
        qualifierType=qualifierExpression.getType();
        if (qualifierType == null && qualifierExpression instanceof PsiReferenceExpression) {
          final JavaResolveResult resolveResult=((PsiReferenceExpression)qualifierExpression).advancedResolve(false);
          final PsiElement resolve=resolveResult.getElement();
          if (resolve instanceof PsiClass) {
            qualifierType=JavaPsiFacade.getElementFactory(resolve.getProject()).createType((PsiClass)resolve,resolveResult.getSubstitutor());
          }
        }
      }
      constraints.add(new SubtypingConstraint(qualifierType,GenericsUtil.eliminateWildcards(substitutor.substitute(targetParameters[0].getType())),true));
      for (int i=1; i < targetParameters.length; i++) {
        constraints.add(new TypeCompatibilityConstraint(psiSubstitutor.substitute(parameters[i - 1].getType()),GenericsUtil.eliminateWildcards(substitutor.substitute(targetParameters[i].getType()))));
      }
    }
 else {
      for (int i=0; i < targetParameters.length; i++) {
        constraints.add(new TypeCompatibilityConstraint(psiSubstitutor.substitute(parameters[i].getType()),GenericsUtil.eliminateWildcards(substitutor.substitute(targetParameters[i].getType()))));
      }
    }
    if (returnType != PsiType.VOID) {
      final PsiType applicableMethodReturnType=applicableMethod.getReturnType();
      if (applicableMethodReturnType == PsiType.VOID) {
        return false;
      }
      if (applicableMethodReturnType != null) {
        constraints.add(new TypeCompatibilityConstraint(GenericsUtil.eliminateWildcards(returnType),psiSubstitutor.substitute(applicableMethodReturnType)));
      }
    }
    return true;
  }
  final PsiElement resolve=myExpression.resolve();
  if (resolve == null) {
    return false;
  }
  if (PsiType.VOID.equals(returnType)) {
    return true;
  }
  if (resolve instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)resolve;
    final PsiType referencedMethodReturnType;
    if (method.isConstructor()) {
      final PsiClass containingClass=method.getContainingClass();
      LOG.assertTrue(containingClass != null,method);
      referencedMethodReturnType=JavaPsiFacade.getElementFactory(method.getProject()).createType(containingClass);
    }
 else {
      referencedMethodReturnType=method.getReturnType();
    }
    LOG.assertTrue(referencedMethodReturnType != null,method);
    if (myExpression.getTypeParameters().length == 0 && ((PsiMethod)resolve).getTypeParameters().length > 0 && PsiPolyExpressionUtil.mentionsTypeParameters(returnType,new HashSet<PsiTypeParameter>(Arrays.asList(interfaceMethod.getTypeParameters())))) {
      return true;
    }
    if (PsiType.VOID.equals(referencedMethodReturnType)) {
      return false;
    }
    constraints.add(new TypeCompatibilityConstraint(returnType,referencedMethodReturnType));
  }
  return true;
}
