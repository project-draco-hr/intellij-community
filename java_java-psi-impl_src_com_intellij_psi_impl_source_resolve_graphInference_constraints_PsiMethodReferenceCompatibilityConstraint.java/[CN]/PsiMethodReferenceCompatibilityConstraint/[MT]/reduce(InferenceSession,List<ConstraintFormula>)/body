{
  if (!LambdaUtil.isFunctionalType(myT)) {
    session.registerIncompatibleErrorMessage(myT.getPresentableText() + " is not a functional interface");
    return false;
  }
  final PsiType groundTargetType=FunctionalInterfaceParameterizationUtil.getGroundTargetType(myT);
  final PsiClassType.ClassResolveResult classResolveResult=PsiUtil.resolveGenericsClassInType(groundTargetType);
  final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(classResolveResult);
  if (interfaceMethod == null) {
    session.registerIncompatibleErrorMessage("No valid function type can be found for " + myT.getPresentableText());
    return false;
  }
  final PsiSubstitutor substitutor=LambdaUtil.getSubstitutor(interfaceMethod,classResolveResult);
  final MethodSignature signature=interfaceMethod.getSignature(substitutor);
  final PsiParameter[] targetParameters=interfaceMethod.getParameterList().getParameters();
  final PsiType interfaceMethodReturnType=interfaceMethod.getReturnType();
  final PsiType returnType=substitutor.substitute(interfaceMethodReturnType);
  final PsiType[] typeParameters=myExpression.getTypeParameters();
  final PsiMethodReferenceUtil.QualifierResolveResult qualifierResolveResult=PsiMethodReferenceUtil.getQualifierResolveResult(myExpression);
  if (myExpression.isExact()) {
    final PsiMember applicableMember=myExpression.getPotentiallyApplicableMember();
    LOG.assertTrue(applicableMember != null);
    final PsiClass applicableMemberContainingClass=applicableMember.getContainingClass();
    final PsiClass containingClass=qualifierResolveResult.getContainingClass();
    PsiSubstitutor psiSubstitutor=getSubstitutor(signature,qualifierResolveResult,applicableMember,applicableMemberContainingClass);
    PsiType applicableMethodReturnType=applicableMember instanceof PsiMethod ? ((PsiMethod)applicableMember).getReturnType() : null;
    int idx=0;
    for (    PsiTypeParameter param : ((PsiTypeParameterListOwner)applicableMember).getTypeParameters()) {
      if (idx < typeParameters.length) {
        psiSubstitutor=psiSubstitutor.put(param,typeParameters[idx++]);
      }
    }
    final PsiParameter[] parameters=applicableMember instanceof PsiMethod ? ((PsiMethod)applicableMember).getParameterList().getParameters() : PsiParameter.EMPTY_ARRAY;
    if (targetParameters.length == parameters.length + 1) {
      final PsiType qualifierType=PsiMethodReferenceUtil.getQualifierType(myExpression);
      final PsiClass qualifierClass=PsiUtil.resolveClassInType(qualifierType);
      if (qualifierClass != null) {
        final PsiType pType=signature.getParameterTypes()[0];
        constraints.add(new StrictSubtypingConstraint(session.substituteWithInferenceVariables(qualifierType),pType));
      }
      for (int i=1; i < targetParameters.length; i++) {
        constraints.add(new TypeCompatibilityConstraint(session.substituteWithInferenceVariables(psiSubstitutor.substitute(parameters[i - 1].getType())),signature.getParameterTypes()[i]));
      }
    }
 else     if (targetParameters.length == parameters.length) {
      for (int i=0; i < targetParameters.length; i++) {
        constraints.add(new TypeCompatibilityConstraint(session.substituteWithInferenceVariables(psiSubstitutor.substitute(parameters[i].getType())),signature.getParameterTypes()[i]));
      }
    }
 else {
      session.registerIncompatibleErrorMessage("Incompatible parameter types in method reference expression");
      return false;
    }
    if (!PsiType.VOID.equals(returnType) && returnType != null) {
      if (PsiType.VOID.equals(applicableMethodReturnType)) {
        session.registerIncompatibleErrorMessage("Incompatible types: expected not void but compile-time declaration for the method reference has void return type");
        return false;
      }
      if (applicableMethodReturnType != null) {
        constraints.add(new TypeCompatibilityConstraint(returnType,session.substituteWithInferenceVariables(psiSubstitutor.substitute(applicableMethodReturnType))));
      }
 else       if (applicableMember instanceof PsiClass || applicableMember instanceof PsiMethod && ((PsiMethod)applicableMember).isConstructor()) {
        final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(applicableMember.getProject());
        if (containingClass != null) {
          final PsiType classType=session.substituteWithInferenceVariables(elementFactory.createType(containingClass,psiSubstitutor));
          constraints.add(new TypeCompatibilityConstraint(returnType,classType));
        }
      }
    }
    return true;
  }
  for (  PsiType paramType : signature.getParameterTypes()) {
    if (!session.isProperType(paramType)) {
      return false;
    }
  }
  final Map<PsiElement,PsiType> map=LambdaUtil.getFunctionalTypeMap();
  final PsiType added=map.put(myExpression,session.startWithFreshVars(groundTargetType));
  final JavaResolveResult resolve;
  try {
    resolve=myExpression.advancedResolve(true);
  }
  finally {
    if (added == null) {
      map.remove(myExpression);
    }
  }
  final PsiElement element=resolve.getElement();
  if (element == null) {
    session.registerIncompatibleErrorMessage("No compile-time declaration for the method reference is found");
    return false;
  }
  if (PsiType.VOID.equals(returnType) || returnType == null) {
    return true;
  }
  if (element instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)element;
    final PsiType referencedMethodReturnType;
    final PsiClass containingClass=method.getContainingClass();
    LOG.assertTrue(containingClass != null,method);
    PsiSubstitutor psiSubstitutor=getSubstitutor(signature,qualifierResolveResult,method,containingClass);
    if (method.isConstructor()) {
      referencedMethodReturnType=JavaPsiFacade.getElementFactory(method.getProject()).createType(containingClass,PsiSubstitutor.EMPTY);
    }
 else {
      referencedMethodReturnType=method.getReturnType();
    }
    LOG.assertTrue(referencedMethodReturnType != null,method);
    if (typeParameters.length == 0 && method.getTypeParameters().length > 0) {
      final PsiClass interfaceClass=classResolveResult.getElement();
      LOG.assertTrue(interfaceClass != null);
      if (PsiPolyExpressionUtil.mentionsTypeParameters(referencedMethodReturnType,ContainerUtil.newHashSet(method.getTypeParameters()))) {
        session.registerSiteSubstitutor(psiSubstitutor);
        session.initBounds(myExpression,method.getTypeParameters());
        session.collectApplicabilityConstraints(myExpression,((MethodCandidateInfo)resolve),groundTargetType);
        session.registerReturnTypeConstraints(psiSubstitutor.substitute(referencedMethodReturnType),returnType);
        return true;
      }
    }
    if (PsiType.VOID.equals(referencedMethodReturnType)) {
      session.registerIncompatibleErrorMessage("Incompatible types: expected not void but compile-time declaration for the method reference has void return type");
      return false;
    }
    int idx=0;
    for (    PsiTypeParameter param : method.getTypeParameters()) {
      if (idx < typeParameters.length) {
        psiSubstitutor=psiSubstitutor.put(param,typeParameters[idx++]);
      }
    }
    if (myExpression.isConstructor() && PsiUtil.isRawSubstitutor(containingClass,qualifierResolveResult.getSubstitutor())) {
      session.initBounds(myExpression,containingClass.getTypeParameters());
    }
    final PsiType capturedReturnType=PsiUtil.captureToplevelWildcards(psiSubstitutor.substitute(referencedMethodReturnType),myExpression);
    constraints.add(new TypeCompatibilityConstraint(returnType,session.substituteWithInferenceVariables(capturedReturnType)));
  }
  return true;
}
