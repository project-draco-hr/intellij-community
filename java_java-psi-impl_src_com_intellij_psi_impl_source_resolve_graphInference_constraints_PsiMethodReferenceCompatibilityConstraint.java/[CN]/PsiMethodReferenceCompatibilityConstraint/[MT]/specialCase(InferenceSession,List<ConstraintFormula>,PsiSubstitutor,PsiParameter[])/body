{
  final PsiTypeElement qualifierTypeElement=myExpression.getQualifierType();
  final PsiExpression qualifierExpression=myExpression.getQualifierExpression();
  PsiType qualifierType;
  if (qualifierTypeElement != null) {
    qualifierType=qualifierTypeElement.getType();
  }
 else {
    LOG.assertTrue(qualifierExpression != null);
    qualifierType=qualifierExpression.getType();
    if (qualifierType == null && qualifierExpression instanceof PsiReferenceExpression) {
      final JavaResolveResult resolveResult=((PsiReferenceExpression)qualifierExpression).advancedResolve(false);
      final PsiElement res=resolveResult.getElement();
      if (res instanceof PsiClass) {
        PsiClass containingClass=(PsiClass)res;
        final boolean isRawSubst=!myExpression.isConstructor() && PsiTreeUtil.isAncestor(containingClass,myExpression,true) && PsiUtil.isRawSubstitutor(containingClass,resolveResult.getSubstitutor());
        qualifierType=JavaPsiFacade.getElementFactory(res.getProject()).createType(containingClass,isRawSubst ? PsiSubstitutor.EMPTY : resolveResult.getSubstitutor());
      }
    }
  }
  final PsiClass qualifierClass=PsiUtil.resolveClassInType(qualifierType);
  if (qualifierClass != null) {
    session.initBounds(qualifierClass.getTypeParameters());
    constraints.add(new StrictSubtypingConstraint(qualifierType,substitutor.substitute(targetParameters[0].getType())));
  }
}
