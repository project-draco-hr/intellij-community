{
  final PsiElement qualifier=myExpression.getQualifier();
  PsiType qualifierType=null;
  if (qualifier instanceof PsiTypeElement) {
    qualifierType=((PsiTypeElement)qualifier).getType();
    final PsiClass qualifierClass=PsiUtil.resolveClassInType(qualifierType);
    if (qualifierClass != null) {
      qualifierType=JavaPsiFacade.getElementFactory(myExpression.getProject()).createType(qualifierClass,PsiSubstitutor.EMPTY);
    }
  }
 else   if (qualifier instanceof PsiExpression) {
    qualifierType=((PsiExpression)qualifier).getType();
    if (qualifierType == null && qualifier instanceof PsiReferenceExpression) {
      final JavaResolveResult resolveResult=((PsiReferenceExpression)qualifier).advancedResolve(false);
      final PsiElement res=resolveResult.getElement();
      if (res instanceof PsiClass) {
        PsiClass containingClass=(PsiClass)res;
        final boolean isRawSubst=!myExpression.isConstructor() && PsiUtil.isRawSubstitutor(containingClass,resolveResult.getSubstitutor());
        qualifierType=JavaPsiFacade.getElementFactory(res.getProject()).createType(containingClass,isRawSubst ? PsiSubstitutor.EMPTY : resolveResult.getSubstitutor());
      }
    }
  }
  final PsiClass qualifierClass=PsiUtil.resolveClassInType(qualifierType);
  if (qualifierClass != null) {
    session.initBounds(qualifierClass.getTypeParameters());
    constraints.add(new StrictSubtypingConstraint(qualifierType,substitutor.substitute(targetParameters[0].getType())));
  }
}
