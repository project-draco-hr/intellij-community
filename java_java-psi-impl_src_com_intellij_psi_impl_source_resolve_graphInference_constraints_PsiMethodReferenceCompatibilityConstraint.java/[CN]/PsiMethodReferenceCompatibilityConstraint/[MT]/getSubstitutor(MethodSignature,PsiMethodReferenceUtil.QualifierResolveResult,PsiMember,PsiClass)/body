{
  final PsiClass qContainingClass=qualifierResolveResult.getContainingClass();
  PsiSubstitutor psiSubstitutor=qualifierResolveResult.getSubstitutor();
  if (qContainingClass != null && containingClass != null) {
    if (PsiUtil.isRawSubstitutor(qContainingClass,psiSubstitutor)) {
      if (member instanceof PsiMethod && PsiMethodReferenceUtil.isSecondSearchPossible(signature.getParameterTypes(),qualifierResolveResult,myExpression)) {
        final PsiType pType=PsiImplUtil.normalizeWildcardTypeByPosition(signature.getParameterTypes()[0],myExpression);
        psiSubstitutor=getParameterizedTypeSubstitutor(qContainingClass,pType);
      }
 else       if (member instanceof PsiMethod && ((PsiMethod)member).isConstructor() || member instanceof PsiClass) {
        final PsiResolveHelper helper=JavaPsiFacade.getInstance(myExpression.getProject()).getResolveHelper();
        final PsiType[] paramTypes=member instanceof PsiMethod ? ((PsiMethod)member).getSignature(PsiSubstitutor.EMPTY).getParameterTypes() : PsiType.EMPTY_ARRAY;
        psiSubstitutor=helper.inferTypeArguments(qContainingClass.getTypeParameters(),paramTypes,signature.getParameterTypes(),PsiUtil.getLanguageLevel(myExpression));
      }
 else {
        psiSubstitutor=PsiSubstitutor.EMPTY;
      }
    }
    if (qContainingClass.isInheritor(containingClass,true)) {
      psiSubstitutor=TypeConversionUtil.getClassSubstitutor(containingClass,qContainingClass,psiSubstitutor);
      LOG.assertTrue(psiSubstitutor != null);
    }
  }
  return psiSubstitutor;
}
