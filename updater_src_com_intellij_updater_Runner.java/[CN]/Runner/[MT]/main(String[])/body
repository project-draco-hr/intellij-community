{
  String jarFile=getArgument(args,"jar");
  jarFile=jarFile == null ? resolveJarFile() : jarFile;
  if (args.length >= 6 && "create".equals(args[0])) {
    String oldVersionDesc=args[1];
    String newVersionDesc=args[2];
    String oldFolder=args[3];
    String newFolder=args[4];
    String patchFile=args[5];
    initLogger();
    boolean binary=Arrays.asList(args).contains("--zip_as_binary");
    boolean strict=Arrays.asList(args).contains("--strict");
    boolean normalized=Arrays.asList(args).contains("--normalized");
    String root=getArgument(args,"root");
    root=root == null ? "" : (root.endsWith("/") ? root : root + "/");
    List<String> ignoredFiles=extractArguments(args,"ignored");
    List<String> criticalFiles=extractArguments(args,"critical");
    List<String> optionalFiles=extractArguments(args,"optional");
    List<String> deleteFiles=extractArguments(args,"delete");
    Map<String,String> warnings=buildWarningMap(extractArguments(args,"warning"));
    PatchSpec spec=new PatchSpec().setOldVersionDescription(oldVersionDesc).setNewVersionDescription(newVersionDesc).setRoot(root).setOldFolder(oldFolder).setNewFolder(newFolder).setPatchFile(patchFile).setJarFile(jarFile).setStrict(strict).setBinary(binary).setNormalized(normalized).setIgnoredFiles(ignoredFiles).setCriticalFiles(criticalFiles).setOptionalFiles(optionalFiles).setDeleteFiles(deleteFiles).setWarnings(warnings);
    create(spec);
  }
 else   if (args.length >= 2 && "install".equals(args[0])) {
    String destFolder=args[1];
    initLogger();
    logger.info("destFolder: " + destFolder);
    install(jarFile,destFolder);
  }
 else {
    printUsage();
  }
}
