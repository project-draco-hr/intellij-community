{
  while (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    expression=parenthesizedExpression.getExpression();
  }
  if (expression == null) {
    return "";
  }
  final StringBuilder result=new StringBuilder();
  if (BoolUtils.isNegation(expression)) {
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)expression;
    final PsiExpression operand=prefixExpression.getOperand();
    final PsiExpression negated=ParenthesesUtils.stripParentheses(operand);
    if (negated == null) {
      return "";
    }
    if (ParenthesesUtils.getPrecedence(negated) > precedence) {
      result.append('(');
      appendPresentableText(negated,result);
      result.append(')');
    }
 else {
      appendPresentableText(negated,result);
    }
  }
 else   if (ComparisonUtils.isComparison(expression)) {
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)expression;
    final String negatedComparison=ComparisonUtils.getNegatedComparison(polyadicExpression.getOperationTokenType());
    final PsiExpression[] operands=polyadicExpression.getOperands();
    final boolean isEven=(operands.length & 1) != 1;
    for (int i=0, length=operands.length; i < length; i++) {
      final PsiExpression operand=operands[i];
      if (i > 0) {
        if (isEven && (i & 1) != 1) {
          final PsiJavaToken token=polyadicExpression.getTokenBeforeOperand(operand);
          if (token != null) {
            result.append(token.getText());
          }
        }
 else {
          result.append(negatedComparison);
        }
      }
      appendPresentableText(operand,result);
    }
  }
 else   if (ParenthesesUtils.getPrecedence(expression) > ParenthesesUtils.PREFIX_PRECEDENCE) {
    result.append("!(");
    appendPresentableText(expression,result);
    result.append(')');
  }
 else {
    result.append('!');
    appendPresentableText(expression,result);
  }
  return result.toString();
}
