{
  assertThat(optionPairs.length % 2).isEqualTo(0);
  testDataDir=new File("testData");
  if (!isTestDataDir(testDataDir))   testDataDir=new File("community/plugins/java-decompiler/engine/testData");
  if (!isTestDataDir(testDataDir))   testDataDir=new File("plugins/java-decompiler/engine/testData");
  if (!isTestDataDir(testDataDir))   testDataDir=new File("../community/plugins/java-decompiler/engine/testData");
  if (!isTestDataDir(testDataDir))   testDataDir=new File("../plugins/java-decompiler/engine/testData");
  assertTrue("current dir: " + new File("").getAbsolutePath(),isTestDataDir(testDataDir));
  testDataDir=testDataDir.getAbsoluteFile();
  tempDir=File.createTempFile("decompiler_test_","_dir");
  assertThat(tempDir.delete()).isTrue();
  targetDir=new File(tempDir,"decompiled");
  assertThat(targetDir.mkdirs()).isTrue();
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(IFernflowerPreferences.LOG_LEVEL,"warn");
  options.put(IFernflowerPreferences.DECOMPILE_GENERIC_SIGNATURES,"1");
  options.put(IFernflowerPreferences.REMOVE_SYNTHETIC,"1");
  options.put(IFernflowerPreferences.REMOVE_BRIDGE,"1");
  options.put(IFernflowerPreferences.LITERALS_AS_IS,"1");
  options.put(IFernflowerPreferences.UNIT_TEST_MODE,"1");
  for (int i=0; i < optionPairs.length; i+=2) {
    options.put(optionPairs[i],optionPairs[i + 1]);
  }
  decompiler=new ConsoleDecompiler(targetDir,options);
}
