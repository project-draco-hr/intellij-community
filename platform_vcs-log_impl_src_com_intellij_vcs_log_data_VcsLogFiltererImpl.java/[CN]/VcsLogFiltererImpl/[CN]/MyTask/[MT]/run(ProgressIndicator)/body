{
  VisiblePack visiblePack=null;
  List<Request> requests;
  List<MoreCommitsRequest> requestsToRun=new ArrayList<MoreCommitsRequest>();
  while (!(requests=myTaskController.popRequests()).isEmpty()) {
    RefreshRequest refreshRequest=ContainerUtil.findLastInstance(requests,RefreshRequest.class);
    FilterRequest filterRequest=ContainerUtil.findLastInstance(requests,FilterRequest.class);
    SortTypeRequest sortTypeRequest=ContainerUtil.findLastInstance(requests,SortTypeRequest.class);
    List<MoreCommitsRequest> moreCommitsRequests=ContainerUtil.findAll(requests,MoreCommitsRequest.class);
    requestsToRun.addAll(moreCommitsRequests);
    if (refreshRequest != null) {
      myDataPack=refreshRequest.dataPack;
    }
    if (filterRequest != null) {
      myFilters=filterRequest.filters;
    }
    if (sortTypeRequest != null) {
      mySortType=sortTypeRequest.sortType;
    }
    if (myDataPack == null) {
      continue;
    }
    if (filterRequest != null) {
      myCommitCount=CommitCountStage.INITIAL;
    }
 else     if (!moreCommitsRequests.isEmpty()) {
      myCommitCount=myCommitCount.next();
    }
    Pair<VisiblePack,CommitCountStage> pair=myVisiblePackBuilder.build(myDataPack,mySortType,myFilters,myCommitCount);
    visiblePack=pair.first;
    myCommitCount=pair.second;
  }
  myTaskController.taskCompleted(visiblePack);
  for (  MoreCommitsRequest request : requestsToRun) {
    request.onLoaded.run();
  }
}
