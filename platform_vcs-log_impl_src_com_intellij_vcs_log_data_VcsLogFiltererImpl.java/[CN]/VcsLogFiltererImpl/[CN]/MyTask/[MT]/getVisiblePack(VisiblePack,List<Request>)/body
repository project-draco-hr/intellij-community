{
  ValidateRequest validateRequest=ContainerUtil.findLastInstance(requests,ValidateRequest.class);
  FilterRequest filterRequest=ContainerUtil.findLastInstance(requests,FilterRequest.class);
  SortTypeRequest sortTypeRequest=ContainerUtil.findLastInstance(requests,SortTypeRequest.class);
  List<MoreCommitsRequest> moreCommitsRequests=ContainerUtil.findAll(requests,MoreCommitsRequest.class);
  myRequestsToRun.addAll(moreCommitsRequests);
  if (filterRequest != null) {
    myFilters=filterRequest.filters;
  }
  if (sortTypeRequest != null) {
    mySortType=sortTypeRequest.sortType;
  }
  if (!myIsValid) {
    if (validateRequest != null && validateRequest.validate) {
      myIsValid=true;
      return refresh(visiblePack,filterRequest,moreCommitsRequests);
    }
 else {
      return visiblePack;
    }
  }
 else {
    if (validateRequest != null && !validateRequest.validate) {
      myIsValid=false;
      VisiblePack frozenVisiblePack=visiblePack == null ? myVisiblePack : visiblePack;
      if (filterRequest != null) {
        frozenVisiblePack=refresh(visiblePack,filterRequest,moreCommitsRequests);
      }
      return new FakeVisiblePackBuilder(myLogData.getHashMap()).build(frozenVisiblePack);
    }
    Request nonValidateRequest=ContainerUtil.find(requests,new Condition<Request>(){
      @Override public boolean value(      Request request){
        return !(request instanceof ValidateRequest);
      }
    }
);
    if (nonValidateRequest != null) {
      return refresh(visiblePack,filterRequest,moreCommitsRequests);
    }
 else {
      return visiblePack;
    }
  }
}
