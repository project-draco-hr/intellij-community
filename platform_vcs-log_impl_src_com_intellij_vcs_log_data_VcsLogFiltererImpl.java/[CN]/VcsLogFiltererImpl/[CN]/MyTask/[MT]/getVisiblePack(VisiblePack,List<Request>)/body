{
  int invalidateRequest=ContainerUtil.lastIndexOf(requests,new Condition<Request>(){
    @Override public boolean value(    Request request){
      return request instanceof InvalidateRequest;
    }
  }
);
  int refreshRequest=ContainerUtil.lastIndexOf(requests,new Condition<Request>(){
    @Override public boolean value(    Request request){
      return request instanceof RefreshRequest;
    }
  }
);
  FilterRequest filterRequest=ContainerUtil.findLastInstance(requests,FilterRequest.class);
  SortTypeRequest sortTypeRequest=ContainerUtil.findLastInstance(requests,SortTypeRequest.class);
  List<MoreCommitsRequest> moreCommitsRequests=ContainerUtil.findAll(requests,MoreCommitsRequest.class);
  myRequestsToRun.addAll(moreCommitsRequests);
  if (filterRequest != null) {
    myFilters=filterRequest.filters;
  }
  if (sortTypeRequest != null) {
    mySortType=sortTypeRequest.sortType;
  }
  if (myIsInvalid) {
    if (refreshRequest > invalidateRequest) {
      myIsInvalid=false;
      return refresh(visiblePack,filterRequest,moreCommitsRequests);
    }
 else {
      return visiblePack;
    }
  }
 else {
    if (refreshRequest >= invalidateRequest) {
      return refresh(visiblePack,filterRequest,moreCommitsRequests);
    }
 else {
      myIsInvalid=true;
      VisiblePack frozenVisiblePack=visiblePack == null ? myVisiblePack : visiblePack;
      if (filterRequest != null) {
        frozenVisiblePack=refresh(visiblePack,filterRequest,moreCommitsRequests);
      }
      return new FakeVisiblePackBuilder(myDataManager.getHashMap()).build(frozenVisiblePack);
    }
  }
}
