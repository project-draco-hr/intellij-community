{
  List<Sdk> result=new ArrayList<Sdk>();
  for (  Sdk sdk : getModel().getSdks()) {
    if (sdk.getSdkType() instanceof PythonSdkType) {
      result.add(sdk);
    }
  }
  Collections.sort(result,new Comparator<Sdk>(){
    @Override public int compare(    Sdk o1,    Sdk o2){
      if (!(o1.getSdkType() instanceof PythonSdkType) || !(o2.getSdkType() instanceof PythonSdkType))       return -Comparing.compare(o1.getName(),o2.getName());
      final boolean isVEnv1=PythonSdkType.isVirtualEnv(o1);
      final boolean isVEnv2=PythonSdkType.isVirtualEnv(o2);
      final boolean isRemote1=PySdkUtil.isRemote(o1);
      final boolean isRemote2=PySdkUtil.isRemote(o2);
      if (isVEnv1) {
        if (project != null && associatedWithCurrent(o1,project)) {
          if (associatedWithCurrent(o2,project))           return compareSdk(o1,o2);
          return -1;
        }
        if (isVEnv2) {
          return compareSdk(o1,o2);
        }
        return -1;
      }
      if (isVEnv2)       return 1;
      if (isRemote1)       return 1;
      if (isRemote2)       return -1;
      return compareSdk(o1,o2);
    }
    private int compareSdk(    final Sdk o1,    final Sdk o2){
      final PythonSdkFlavor flavor1=PythonSdkFlavor.getFlavor(o1);
      final PythonSdkFlavor flavor2=PythonSdkFlavor.getFlavor(o2);
      final LanguageLevel level1=flavor1 != null ? flavor1.getLanguageLevel(o1) : LanguageLevel.getDefault();
      final LanguageLevel level2=flavor2 != null ? flavor2.getLanguageLevel(o2) : LanguageLevel.getDefault();
      final int compare=Comparing.compare(level1,level2);
      if (compare != 0)       return -compare;
      return Comparing.compare(o1.getName(),o2.getName());
    }
  }
);
  final PySdkService sdkService=PySdkService.getInstance();
  final List<String> sdkHomes=new ArrayList<String>();
  sdkHomes.addAll(VirtualEnvSdkFlavor.INSTANCE.suggestHomePaths());
  for (  PythonSdkFlavor flavor : PythonSdkFlavor.getApplicableFlavors()) {
    if (flavor instanceof VirtualEnvSdkFlavor)     continue;
    sdkHomes.addAll(flavor.suggestHomePaths());
  }
  Collections.sort(sdkHomes);
  for (  String sdkHome : SdkConfigurationUtil.filterExistingPaths(PythonSdkType.getInstance(),sdkHomes,getModel().getSdks())) {
    result.add(new PyDetectedSdk(sdkHome));
  }
  for (  String sdkHome : SdkConfigurationUtil.filterExistingPaths(PythonSdkType.getInstance(),sdkService.getAddedSdks(),getModel().getSdks())) {
    result.add(new PyDetectedSdk(sdkHome));
  }
  Iterables.removeIf(result,new Predicate<Sdk>(){
    @Override public boolean apply(    @Nullable Sdk input){
      return input != null && sdkService.isRemoved(input);
    }
  }
);
  return result;
}
