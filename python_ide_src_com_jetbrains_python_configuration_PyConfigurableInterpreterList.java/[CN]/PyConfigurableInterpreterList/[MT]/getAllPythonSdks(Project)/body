{
  List<Sdk> result=new ArrayList<Sdk>();
  for (  Sdk sdk : getModel().getSdks()) {
    if (sdk.getSdkType() instanceof PythonSdkType) {
      result.add(sdk);
    }
  }
  Collection<String> sdkHomes=PythonSdkType.getInstance().suggestHomePaths();
  Collections.sort(result,new Comparator<Sdk>(){
    @Override public int compare(    Sdk o1,    Sdk o2){
      if (!(o1.getSdkType() instanceof PythonSdkType) || !(o2.getSdkType() instanceof PythonSdkType))       return -Comparing.compare(o1.getName(),o2.getName());
      final boolean isVEnv1=PythonSdkType.isVirtualEnv(o1);
      final boolean isVEnv2=PythonSdkType.isVirtualEnv(o2);
      final boolean isRemote1=PySdkUtil.isRemote(o1);
      final boolean isRemote2=PySdkUtil.isRemote(o2);
      final PythonSdkFlavor flavor1=PythonSdkFlavor.getFlavor(o1);
      final PythonSdkFlavor flavor2=PythonSdkFlavor.getFlavor(o2);
      final LanguageLevel level1=flavor1 != null ? flavor1.getLanguageLevel(o1) : LanguageLevel.getDefault();
      final LanguageLevel level2=flavor2 != null ? flavor2.getLanguageLevel(o2) : LanguageLevel.getDefault();
      if (isVEnv1) {
        if (associatedWithCurrent(o1,project))         return -1;
        if (isVEnv2) {
          final int compare=Comparing.compare(level1,level2);
          if (compare != 0)           return -compare;
          return Comparing.compare(o1.getName(),o2.getName());
        }
        return -1;
      }
      if (isVEnv2) {
        return 1;
      }
      if (isRemote1)       return 1;
      if (isRemote2)       return -1;
      final int compare=Comparing.compare(level1,level2);
      if (compare != 0)       return -compare;
      return Comparing.compare(o1.getName(),o2.getName());
    }
  }
);
  for (  String sdkHome : SdkConfigurationUtil.filterExistingPaths(PythonSdkType.getInstance(),sdkHomes,getModel().getSdks())) {
    result.add(new PyDetectedSdk(sdkHome,PythonSdkType.getInstance()));
  }
  return result;
}
