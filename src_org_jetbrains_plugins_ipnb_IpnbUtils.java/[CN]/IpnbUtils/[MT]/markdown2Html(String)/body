{
  final List<String> lines=ContainerUtil.newArrayList(description.split("\n|\r|\r\n"));
  final List<String> processedLines=new ArrayList<String>();
  boolean isInCode=false;
  for (  String line : lines) {
    String processedLine=line;
    if (line.startsWith(" ")) {
      processedLine=line.substring(1);
    }
    processedLine=processedLine.replace("<pre>","```").replace("</pre>","```").replace("<code>","```").replace("</code>","```");
    if (processedLine.contains("```"))     isInCode=!isInCode;
    if (isInCode) {
      processedLine=processedLine.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;");
    }
 else {
      processedLine=processedLine.replaceAll("([\\w])_([\\w])","$1&underline;$2");
    }
    processedLines.add(processedLine);
  }
  MarkdownUtil.replaceHeaders(processedLines);
  MarkdownUtil.removeImages(processedLines);
  MarkdownUtil.generateLists(processedLines);
  MarkdownUtil.replaceCodeBlock(processedLines);
  final String[] lineArray=ArrayUtil.toStringArray(processedLines);
  final String normalizedMarkdown=StringUtil.join(lineArray,"\n");
  String html=ourMarkdownProcessor.markdown(normalizedMarkdown);
  html=html.replace("<pre><code>","<pre>").replace("</code></pre>","</pre>").replace("<em>","<i>").replace("</em>","</i>").replace("<strong>","<b>").replace("</strong>","</b>").replace("&underline;","_").trim();
  return html;
}
