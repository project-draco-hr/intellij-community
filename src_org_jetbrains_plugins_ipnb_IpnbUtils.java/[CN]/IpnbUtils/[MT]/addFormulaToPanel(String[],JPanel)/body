{
  StringBuilder formula=new StringBuilder();
  boolean hasFormula=false;
  boolean isEscaped=false;
  boolean inFormula=false;
  if (isStyleOrScript(StringUtil.join(source)))   return;
  for (  String string : source) {
    string=StringUtil.replace(string,"\\(","(");
    string=StringUtil.replace(string,"\\)",")");
    if (string.startsWith("```") && !isEscaped) {
      isEscaped=true;
    }
 else     if (StringUtil.trimTrailing(string).endsWith("```") && isEscaped) {
      isEscaped=false;
    }
    string=string.replace("\n"," \n");
    if (string.contains("{align}"))     string=string.replace("{align}","{eqnarray*}");
    if (string.contains("{equation*}"))     string=string.replace("{equation*}","{eqnarray*}");
    if ((StringUtil.trimTrailing(string).endsWith("$$")) && inFormula) {
      inFormula=false;
      string=StringUtil.trimTrailing(string);
      formula.append(string);
      addFormula(panel,formula.toString());
      hasFormula=false;
      formula=new StringBuilder();
    }
 else     if (string.trim().startsWith("$$") && !isEscaped) {
      formula.append(string);
      hasFormula=true;
      inFormula=true;
    }
 else     if (string.startsWith("\\") && !isEscaped || inFormula) {
      inFormula=true;
      hasFormula=true;
      formula.append(string);
    }
 else {
      if (hasFormula) {
        addFormula(panel,formula.toString());
        hasFormula=false;
        formula=new StringBuilder();
      }
 else {
        if (!StringUtil.isEmptyOrSpaces(string))         addMarkdown(panel,string,isEscaped);
      }
    }
  }
  if (hasFormula) {
    addFormula(panel,formula.toString());
  }
}
