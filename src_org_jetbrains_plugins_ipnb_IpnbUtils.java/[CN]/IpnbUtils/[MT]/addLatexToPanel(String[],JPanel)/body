{
  StringBuilder formula=new StringBuilder();
  List<String> markdown=new ArrayList<String>();
  boolean hasFormula=false;
  boolean isEscaped=false;
  boolean inFormula=false;
  if (isStyleOrScript(StringUtil.join(source)))   return;
  for (  String string : source) {
    string=StringUtil.replace(string,"\\(","(");
    string=StringUtil.replace(string,"\\)",")");
    if (string.startsWith("```") && !isEscaped) {
      isEscaped=true;
    }
 else     if (StringUtil.trimTrailing(string).endsWith("```") && isEscaped) {
      isEscaped=false;
    }
    if (inFormula && !markdown.isEmpty()) {
      addMarkdown(panel,markdown);
      markdown.clear();
    }
    if ((StringUtil.trimTrailing(string).endsWith("$$")) && inFormula) {
      inFormula=false;
      string=StringUtil.trimTrailing(string);
      string=prepareLatex(string);
      formula.append(string);
      addFormula(panel,formula.toString());
      hasFormula=false;
      formula=new StringBuilder();
    }
 else     if (string.trim().startsWith("$$") && !isEscaped) {
      string=prepareLatex(string);
      formula.append(string);
      hasFormula=true;
      inFormula=true;
    }
 else     if (string.startsWith("\\") && !isEscaped || inFormula) {
      inFormula=true;
      hasFormula=true;
      string=prepareLatex(string);
      formula.append(string);
    }
 else {
      if (hasFormula) {
        addFormula(panel,formula.toString());
        hasFormula=false;
        formula=new StringBuilder();
      }
 else {
        if (!StringUtil.isEmptyOrSpaces(string)) {
          markdown.add(string);
        }
      }
    }
  }
  if (hasFormula) {
    addFormula(panel,formula.toString());
  }
  if (!markdown.isEmpty()) {
    addMarkdown(panel,markdown);
  }
}
