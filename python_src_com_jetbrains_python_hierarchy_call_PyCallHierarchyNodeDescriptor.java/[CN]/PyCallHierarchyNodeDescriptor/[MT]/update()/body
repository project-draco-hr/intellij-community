{
  final CompositeAppearance oldText=myHighlightedText;
  final Icon oldIcon=getIcon();
  int flags=Iconable.ICON_FLAG_VISIBILITY;
  if (isMarkReadOnly()) {
    flags|=Iconable.ICON_FLAG_READ_STATUS;
  }
  final PsiElement element=getEnclosingElement();
  if (element == null) {
    final String invalidPrefix=IdeBundle.message("node.hierarchy.invalid");
    if (!myHighlightedText.getText().startsWith(invalidPrefix)) {
      myHighlightedText.getBeginning().addText(invalidPrefix,HierarchyNodeDescriptor.getInvalidPrefixAttributes());
    }
    return true;
  }
  boolean changes=super.update();
  Icon newIcon=element.getIcon(flags);
  if (changes && myIsBase) {
    final LayeredIcon icon=new LayeredIcon(2);
    icon.setIcon(newIcon,0);
    icon.setIcon(AllIcons.Hierarchy.Base,1,-AllIcons.Hierarchy.Base.getIconWidth() / 2,0);
    newIcon=icon;
  }
  setIcon(newIcon);
  myHighlightedText=new CompositeAppearance();
  final TextAttributes mainTextAttributes=myColor != null ? null : new TextAttributes(myColor,null,null,null,Font.PLAIN);
  PyElementVisitor visitor=new PyElementVisitor(){
    @Override public void visitPyClass(    PyClass pyClass){
      myHighlightedText.getEnding().addText(pyClass.getName(),mainTextAttributes);
      myHighlightedText.getEnding().addText("(" + pyClass.getContainingFile().getName() + ")",HierarchyNodeDescriptor.getPackageNameAttributes());
    }
    @Override public void visitPyFunction(    PyFunction function){
      final StringBuilder buffer=new StringBuilder();
      final PyClass pyClass=function.getContainingClass();
      if (pyClass != null) {
        buffer.append(pyClass.getName());
        buffer.append('.');
      }
      buffer.append(function.getName());
      myHighlightedText.getEnding().addText(buffer.toString(),mainTextAttributes);
      myHighlightedText.getEnding().addText("(" + function.getContainingFile().getName() + ")",HierarchyNodeDescriptor.getPackageNameAttributes());
    }
    @Override public void visitPyLambdaExpression(    PyLambdaExpression node){
    }
    @Override public void visitPyFile(    PyFile pyFile){
      myHighlightedText.getEnding().addText(pyFile.getName(),mainTextAttributes);
    }
  }
;
  element.accept(visitor);
  if (myUsageCount > 1) {
    myHighlightedText.getEnding().addText(IdeBundle.message("node.call.hierarchy.N.usages",myUsageCount),HierarchyNodeDescriptor.getUsageCountPrefixAttributes());
  }
  myName=myHighlightedText.getText();
  if (!Comparing.equal(myHighlightedText,oldText) || !Comparing.equal(getIcon(),oldIcon)) {
    return true;
  }
  return changes;
}
