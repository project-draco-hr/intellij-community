{
  try {
    final List<PsiFile> movedFiles=new ArrayList<PsiFile>();
    final Map<PsiElement,PsiElement> oldToNewMap=new HashMap<PsiElement,PsiElement>();
    for (    final PsiElement element : myElementsToMove) {
      final RefactoringElementListener elementListener=getTransaction().getElementListener(element);
      if (element instanceof PsiDirectory) {
        MoveFilesOrDirectoriesUtil.doMoveDirectory((PsiDirectory)element,myNewParent);
        for (        PsiElement psiElement : element.getChildren()) {
          processDirectoryFiles(movedFiles,oldToNewMap,psiElement);
        }
      }
 else       if (element instanceof PsiFile) {
        final PsiFile movedFile=(PsiFile)element;
        if (mySearchForReferences)         FileReferenceContextUtil.encodeFileReferences(element);
        MoveFileHandler.forElement(movedFile).prepareMovedFile(movedFile,myNewParent,oldToNewMap);
        PsiFile moving=myNewParent.findFile(movedFile.getName());
        if (moving == null) {
          MoveFilesOrDirectoriesUtil.doMoveFile(movedFile,myNewParent);
        }
        moving=myNewParent.findFile(movedFile.getName());
        movedFiles.add(moving);
      }
      elementListener.elementMoved(element);
    }
    CommonRefactoringUtil.sortDepthFirstRightLeftOrder(usages);
    for (    PsiFile movedFile : movedFiles) {
      MoveFileHandler.forElement(movedFile).updateMovedFile(movedFile);
      if (mySearchForReferences)       FileReferenceContextUtil.decodeFileReferences(movedFile);
    }
    retargetUsages(usages,oldToNewMap);
    if (MoveFilesOrDirectoriesDialog.isOpenInEditor()) {
      EditorHelper.openFilesInEditor(movedFiles.toArray(new PsiFile[movedFiles.size()]));
    }
    if (myMoveCallback != null) {
      myMoveCallback.refactoringCompleted();
    }
  }
 catch (  IncorrectOperationException e) {
    @NonNls final String message=e.getMessage();
    final int index=message != null ? message.indexOf("java.io.IOException") : -1;
    if (index >= 0) {
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          Messages.showMessageDialog(myProject,message.substring(index + "java.io.IOException".length()),RefactoringBundle.message("error.title"),Messages.getErrorIcon());
        }
      }
);
    }
 else {
      LOG.error(e);
    }
  }
}
