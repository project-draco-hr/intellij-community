{
  PsiBuilder.Marker marker=builder.mark();
  if (ParserUtils.lookAhead(builder,GroovyTokenTypes.mSTAR,GroovyTokenTypes.mCOLON)) {
    builder.advanceLexer();
    marker.done(GroovyElementTypes.ARGUMENT_LABEL);
    return true;
  }
  final IElementType type=builder.getTokenType();
  if (ParserUtils.lookAhead(builder,GroovyTokenTypes.mIDENT,GroovyTokenTypes.mCOLON) || TokenSets.KEYWORDS.contains(type) || GroovyTokenTypes.mSTRING_LITERAL.equals(type)|| GroovyTokenTypes.mGSTRING_LITERAL.equals(type)) {
    builder.advanceLexer();
    if (GroovyTokenTypes.mCOLON.equals(builder.getTokenType())) {
      marker.done(GroovyElementTypes.ARGUMENT_LABEL);
      return true;
    }
 else {
      marker.rollbackTo();
      return false;
    }
  }
  if (GroovyTokenTypes.mGSTRING_BEGIN.equals(type) || GroovyTokenTypes.mREGEX_BEGIN.equals(type) || GroovyTokenTypes.mDOLLAR_SLASH_REGEX_BEGIN.equals(type)|| TokenSets.NUMBERS.contains(type)|| GroovyTokenTypes.mLBRACK.equals(type)|| GroovyTokenTypes.mLPAREN.equals(type)|| GroovyTokenTypes.mLCURLY.equals(type)) {
    PrimaryExpression.parsePrimaryExpression(builder,parser);
    if (GroovyTokenTypes.mCOLON.equals(builder.getTokenType())) {
      marker.done(GroovyElementTypes.ARGUMENT_LABEL);
      return true;
    }
 else {
      marker.rollbackTo();
      return false;
    }
  }
  marker.drop();
  return false;
}
