{
  PsiBuilder.Marker isMarker=builder.mark();
  if (!ParserUtils.getToken(builder,startElement)) {
    if (clauseType == IMPLEMENTS_CLAUSE && (type == ClassType.INTERFACE || type == ClassType.ANNOTATION) || clauseType == EXTENDS_CLAUSE && type == ClassType.ENUM || type == ClassType.ANNOTATION) {
      isMarker.rollbackTo();
      return NONE;
    }
    return finish(builder,clauseType,isMarker,null,null);
  }
  PsiBuilder.Marker space=builder.mark();
  ParserUtils.getToken(builder,mNLS);
  if (parseReferenceElement(builder) == FAIL) {
    return finish(builder,clauseType,isMarker,space,GroovyBundle.message("identifier.expected"));
  }
 else {
    space.drop();
  }
  while (ParserUtils.getToken(builder,mCOMMA)) {
    space=builder.mark();
    ParserUtils.getToken(builder,mNLS);
    if (parseReferenceElement(builder) == FAIL) {
      return finish(builder,clauseType,isMarker,space,GroovyBundle.message("identifier.expected"));
    }
 else {
      space.drop();
    }
  }
  return finish(builder,clauseType,isMarker,null,null);
}
