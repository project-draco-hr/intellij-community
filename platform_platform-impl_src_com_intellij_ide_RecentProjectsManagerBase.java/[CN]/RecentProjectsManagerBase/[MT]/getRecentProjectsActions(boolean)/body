{
  final Set<String> paths;
synchronized (myStateLock) {
    myState.validateRecentProjects();
    paths=ContainerUtil.newLinkedHashSet(myState.recentPaths);
  }
  final Set<String> openedPaths=ContainerUtil.newHashSet();
  for (  Project openProject : ProjectManager.getInstance().getOpenProjects()) {
    ContainerUtil.addIfNotNull(openedPaths,getProjectPath(openProject));
  }
  paths.remove(null);
  paths.removeAll(openedPaths);
  List<AnAction> actions=new SmartList<AnAction>();
  Set<String> duplicates=getDuplicateProjectNames(openedPaths,paths);
  for (  final String path : paths) {
    String projectName=getProjectName(path);
    String displayName;
synchronized (myStateLock) {
      displayName=myState.names.get(path);
    }
    if (StringUtil.isEmptyOrSpaces(displayName)) {
      displayName=duplicates.contains(path) ? path : projectName;
    }
    if (new File(path).exists()) {
      actions.add(new ReopenProjectAction(path,projectName,displayName));
    }
  }
  if (actions.isEmpty()) {
    return AnAction.EMPTY_ARRAY;
  }
  if (addClearListItem) {
    AnAction clearListAction=new DumbAwareAction(IdeBundle.message("action.clear.list")){
      @Override public void actionPerformed(      @NotNull AnActionEvent e){
        String message=IdeBundle.message("action.clear.list.message");
        String title=IdeBundle.message("action.clear.list.title");
        if (Messages.showOkCancelDialog(e.getProject(),message,title,Messages.getQuestionIcon()) == Messages.OK) {
synchronized (myStateLock) {
            myState.recentPaths.clear();
          }
          WelcomeFrame.clearRecents();
        }
      }
    }
;
    actions.add(Separator.getInstance());
    actions.add(clearListAction);
  }
  return actions.toArray(new AnAction[actions.size()]);
}
