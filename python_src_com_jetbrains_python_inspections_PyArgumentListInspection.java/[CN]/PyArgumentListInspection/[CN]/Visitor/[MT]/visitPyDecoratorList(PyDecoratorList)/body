{
  PyDecorator[] decos=node.getDecorators();
  for (  PyDecorator deco : decos) {
    if (!deco.hasArgumentList()) {
      PyCallExpression.PyMarkedCallee mkfunc=deco.resolveCallee(resolveWithoutImplicits());
      if (mkfunc != null && !mkfunc.isImplicitlyResolved()) {
        Callable callable=mkfunc.getCallable();
        int first_param_offset=mkfunc.getImplicitOffset();
        final List<PyParameter> params=PyUtil.getParameters(callable,myTypeEvalContext);
        final PyNamedParameter alleged_first_param=params.size() < first_param_offset ? null : params.get(first_param_offset - 1).getAsNamed();
        if (alleged_first_param == null || alleged_first_param.isKeywordContainer()) {
          registerProblem(deco,PyBundle.message("INSP.func.$0.lacks.first.arg",callable.getName()));
        }
 else {
          for (int i=first_param_offset; i < params.size(); i+=1) {
            PyNamedParameter par=params.get(i).getAsNamed();
            if (par == null || (!par.isKeywordContainer() && !par.isPositionalContainer() && !par.hasDefaultValue())) {
              String par_name;
              if (par != null)               par_name=par.getName();
 else               par_name="(...)";
              registerProblem(deco,PyBundle.message("INSP.parameter.$0.unfilled",par_name));
            }
          }
        }
      }
    }
  }
}
