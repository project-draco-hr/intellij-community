{
  PyDecorator[] decorators=node.getDecorators();
  for (  PyDecorator deco : decorators) {
    if (deco.hasArgumentList())     continue;
    final PyCallExpression.PyMarkedCallee markedCallee=deco.resolveCallee(getResolveContext());
    if (markedCallee != null && !markedCallee.isImplicitlyResolved()) {
      final Callable callable=markedCallee.getCallable();
      int firstParamOffset=markedCallee.getImplicitOffset();
      final List<PyParameter> params=PyUtil.getParameters(callable,myTypeEvalContext);
      final PyNamedParameter allegedFirstParam=params.size() < firstParamOffset ? null : params.get(firstParamOffset - 1).getAsNamed();
      if (allegedFirstParam == null || allegedFirstParam.isKeywordContainer()) {
        registerProblem(deco,PyBundle.message("INSP.func.$0.lacks.first.arg",callable.getName()));
      }
 else {
        for (int i=firstParamOffset; i < params.size(); i+=1) {
          final PyParameter parameter=params.get(i);
          if (parameter instanceof PySingleStarParameter)           continue;
          final PyNamedParameter par=parameter.getAsNamed();
          if (par == null || (!par.isKeywordContainer() && !par.isPositionalContainer() && !par.hasDefaultValue())) {
            String parameterName=par != null ? par.getName() : "(...)";
            registerProblem(deco,PyBundle.message("INSP.parameter.$0.unfilled",parameterName));
          }
        }
      }
    }
  }
}
