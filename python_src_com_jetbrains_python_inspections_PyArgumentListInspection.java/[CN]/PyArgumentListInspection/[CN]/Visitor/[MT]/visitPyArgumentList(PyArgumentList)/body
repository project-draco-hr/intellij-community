{
  PyArgumentList.AnalysisResult result=node.analyzeCall();
  for (  Map.Entry<PyExpression,EnumSet<PyArgumentList.ArgFlag>> arg_entry : result.getArgumentFlags().entrySet()) {
    EnumSet<PyArgumentList.ArgFlag> flags=arg_entry.getValue();
    if (!flags.isEmpty()) {
      PyExpression arg=arg_entry.getKey();
      if (flags.contains(PyArgumentList.ArgFlag.IS_DUP)) {
        registerProblem(arg,"Duplicate argument");
      }
      if (flags.contains(PyArgumentList.ArgFlag.IS_DUP_KWD)) {
        registerProblem(arg,"Duplicate **arg");
      }
      if (flags.contains(PyArgumentList.ArgFlag.IS_DUP_TUPLE)) {
        registerProblem(arg,"Duplicate *arg");
      }
      if (flags.contains(PyArgumentList.ArgFlag.IS_POS_PAST_KWD)) {
        registerProblem(arg,"Cannot appear past keyword arguments");
      }
      if (flags.contains(PyArgumentList.ArgFlag.IS_UNMAPPED)) {
        registerProblem(arg,"Unexpected argument");
      }
    }
  }
  ASTNode our_node=node.getNode();
  if (our_node != null) {
    ASTNode close_paren=our_node.findChildByType(PyTokenTypes.RPAR);
    if (close_paren != null) {
      for (      PyParameter param : result.getUnmappedParams()) {
        registerProblem(close_paren.getPsi(),"Parameter '" + param.getName() + "' unfilled");
      }
    }
  }
}
