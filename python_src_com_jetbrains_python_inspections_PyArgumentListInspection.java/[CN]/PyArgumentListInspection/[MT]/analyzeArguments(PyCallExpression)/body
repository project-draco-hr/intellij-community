{
  final Map<PyExpression,ArgumentProblem> results=new HashMap<PyExpression,ArgumentProblem>();
  final Set<String> keywordArgumentNames=new HashSet<String>();
  boolean seenKeywordOrContainerArgument=false;
  boolean seenKeywordContainer=false;
  boolean seenPositionalContainer=false;
  for (  PyExpression argument : callExpression.getArguments()) {
    if (argument instanceof PyKeywordArgument) {
      seenKeywordOrContainerArgument=true;
      final String keyword=((PyKeywordArgument)argument).getKeyword();
      final ArgumentProblem problem;
      if (keywordArgumentNames.contains(keyword)) {
        problem=ArgumentProblem.DUPLICATE_KEYWORD_ARGUMENT;
      }
 else       if (seenKeywordContainer) {
        problem=ArgumentProblem.CANNOT_APPEAR_AFTER_KEYWORD_OR_CONTAINER;
      }
 else {
        problem=ArgumentProblem.OK;
      }
      results.put(argument,problem);
      keywordArgumentNames.add(keyword);
    }
 else     if (argument instanceof PyStarArgument) {
      seenKeywordOrContainerArgument=true;
      final PyStarArgument starArgument=(PyStarArgument)argument;
      if (starArgument.isKeyword()) {
        results.put(argument,seenKeywordContainer ? ArgumentProblem.DUPLICATE_KEYWORD_CONTAINER : ArgumentProblem.OK);
        seenKeywordContainer=true;
      }
 else {
        results.put(argument,seenPositionalContainer ? ArgumentProblem.DUPLICATE_POSITIONAL_CONTAINER : ArgumentProblem.OK);
        seenPositionalContainer=true;
      }
    }
 else {
      results.put(argument,seenKeywordOrContainerArgument ? ArgumentProblem.CANNOT_APPEAR_AFTER_KEYWORD_OR_CONTAINER : ArgumentProblem.OK);
    }
  }
  return results;
}
