{
  if (node.getParent() instanceof PyClass)   return;
  final PyCallExpression callExpr=node.getCallExpression();
  if (callExpr == null) {
    return;
  }
  final PyResolveContext resolveContext=PyResolveContext.noImplicits().withTypeEvalContext(context);
  final PyCallExpression.PyArgumentsMapping mapping=callExpr.mapArguments(resolveContext,implicitOffset);
  final PyCallExpression.PyMarkedCallee callee=mapping.getMarkedCallee();
  if (callee != null) {
    final PyCallable callable=callee.getCallable();
    if (callable instanceof PyFunction && PyUtil.hasCustomDecorators((PyFunction)callable)) {
      return;
    }
  }
  highlightParametersMismatch(node,holder,mapping);
  highlightStarArgumentTypeMismatch(node,holder,context);
}
