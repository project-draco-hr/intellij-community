{
  if (node.getParent() instanceof PyClass)   return;
  CallArgumentsMapping result=node.analyzeCall(PyResolveContext.noImplicits().withTypeEvalContext(context),implicitOffset);
  final PyCallExpression.PyMarkedCallee callee=result.getMarkedCallee();
  if (callee != null) {
    final PyCallable callable=callee.getCallable();
    if (callable instanceof PyFunction && PyUtil.hasCustomDecorators((PyFunction)callable)) {
      return;
    }
  }
  highlightIncorrectArguments(holder,result,context);
  highlightMissingArguments(node,holder,result);
  highlightStarArgumentTypeMismatch(node,holder,context);
}
