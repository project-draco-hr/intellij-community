{
  if (node.getParent() instanceof PyClass)   return;
  PyArgumentList.AnalysisResult result=node.analyzeCall(context);
  if (!result.isImplicitlyResolved()) {
    for (    Map.Entry<PyExpression,EnumSet<PyArgumentList.ArgFlag>> arg_entry : result.getArgumentFlags().entrySet()) {
      EnumSet<PyArgumentList.ArgFlag> flags=arg_entry.getValue();
      if (!flags.isEmpty()) {
        PyExpression arg=arg_entry.getKey();
        if (flags.contains(PyArgumentList.ArgFlag.IS_DUP)) {
          holder.registerProblem(arg,PyBundle.message("INSP.duplicate.argument"));
        }
        if (flags.contains(PyArgumentList.ArgFlag.IS_DUP_KWD)) {
          holder.registerProblem(arg,PyBundle.message("INSP.duplicate.doublestar.arg"));
        }
        if (flags.contains(PyArgumentList.ArgFlag.IS_DUP_TUPLE)) {
          holder.registerProblem(arg,PyBundle.message("INSP.duplicate.star.arg"));
        }
        if (flags.contains(PyArgumentList.ArgFlag.IS_POS_PAST_KWD)) {
          holder.registerProblem(arg,PyBundle.message("INSP.cannot.appear.past.keyword.arg"));
        }
        if (flags.contains(PyArgumentList.ArgFlag.IS_UNMAPPED)) {
          holder.registerProblem(arg,PyBundle.message("INSP.unexpected.arg"));
        }
        if (flags.contains(PyArgumentList.ArgFlag.IS_TOO_LONG)) {
          holder.registerProblem(arg,"More arguments than positional parameters left");
        }
      }
    }
    ASTNode our_node=node.getNode();
    if (our_node != null) {
      ASTNode close_paren=our_node.findChildByType(PyTokenTypes.RPAR);
      if (close_paren != null) {
        for (        PyNamedParameter param : result.getUnmappedParams()) {
          holder.registerProblem(close_paren.getPsi(),PyBundle.message("INSP.parameter.$0.unfilled",param.getName()));
        }
      }
    }
  }
  for (  PyExpression arg : node.getArguments()) {
    if (arg instanceof PyStarArgument) {
      PyExpression content=PyUtil.peelArgument(PsiTreeUtil.findChildOfType(arg,PyExpression.class));
      PyType inside_type=context.getType(content);
      if (inside_type != null) {
        if (((PyStarArgument)arg).isKeyword()) {
          if (!isMappingType(inside_type)) {
            holder.registerProblem(arg,"Expected a dictionary, got " + inside_type.getName());
          }
        }
 else {
          if (!isSequenceType(inside_type)) {
            holder.registerProblem(arg,"Expected a sequence, got " + inside_type.getName());
          }
        }
      }
    }
  }
  if (result.getMarkedCallee() == null) {
    PsiElement marked=node;
    while (marked != null && marked.getTextRange().isEmpty())     marked=marked.getParent();
    if (marked != null)     holder.registerProblem(node,PyBundle.message("INSP.cannot.analyze"),ProblemHighlightType.INFO);
  }
}
