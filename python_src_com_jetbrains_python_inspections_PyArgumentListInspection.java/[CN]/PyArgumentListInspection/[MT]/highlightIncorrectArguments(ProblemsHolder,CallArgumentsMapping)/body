{
  for (  Map.Entry<PyExpression,EnumSet<CallArgumentsMapping.ArgFlag>> arg_entry : result.getArgumentFlags().entrySet()) {
    EnumSet<CallArgumentsMapping.ArgFlag> flags=arg_entry.getValue();
    if (!flags.isEmpty()) {
      PyExpression arg=arg_entry.getKey();
      if (flags.contains(CallArgumentsMapping.ArgFlag.IS_DUP)) {
        holder.registerProblem(arg,PyBundle.message("INSP.duplicate.argument"));
      }
      if (flags.contains(CallArgumentsMapping.ArgFlag.IS_DUP_KWD)) {
        holder.registerProblem(arg,PyBundle.message("INSP.duplicate.doublestar.arg"));
      }
      if (flags.contains(CallArgumentsMapping.ArgFlag.IS_DUP_TUPLE)) {
        holder.registerProblem(arg,PyBundle.message("INSP.duplicate.star.arg"));
      }
      if (flags.contains(CallArgumentsMapping.ArgFlag.IS_POS_PAST_KWD)) {
        holder.registerProblem(arg,PyBundle.message("INSP.cannot.appear.past.keyword.arg"));
      }
      if (flags.contains(CallArgumentsMapping.ArgFlag.IS_UNMAPPED)) {
        holder.registerProblem(arg,PyBundle.message("INSP.unexpected.arg"));
      }
      if (flags.contains(CallArgumentsMapping.ArgFlag.IS_TOO_LONG)) {
        holder.registerProblem(arg,PyBundle.message("INSP.more.args.that.pos.params"));
      }
    }
  }
}
