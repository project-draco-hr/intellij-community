{
  for (  Map.Entry<PyExpression,EnumSet<CallArgumentsMapping.ArgFlag>> argEntry : result.getArgumentFlags().entrySet()) {
    EnumSet<CallArgumentsMapping.ArgFlag> flags=argEntry.getValue();
    if (!flags.isEmpty()) {
      PyExpression arg=argEntry.getKey();
      if (flags.contains(CallArgumentsMapping.ArgFlag.IS_DUP)) {
        holder.registerProblem(arg,PyBundle.message("INSP.duplicate.argument"),new PyRemoveArgumentQuickFix());
      }
      if (flags.contains(CallArgumentsMapping.ArgFlag.IS_DUP_KWD)) {
        holder.registerProblem(arg,PyBundle.message("INSP.duplicate.doublestar.arg"),new PyRemoveArgumentQuickFix());
      }
      if (flags.contains(CallArgumentsMapping.ArgFlag.IS_DUP_TUPLE)) {
        holder.registerProblem(arg,PyBundle.message("INSP.duplicate.star.arg"),new PyRemoveArgumentQuickFix());
      }
      if (flags.contains(CallArgumentsMapping.ArgFlag.IS_POS_PAST_KWD)) {
        holder.registerProblem(arg,PyBundle.message("INSP.cannot.appear.past.keyword.arg"),ProblemHighlightType.ERROR,new PyRemoveArgumentQuickFix());
      }
      if (flags.contains(CallArgumentsMapping.ArgFlag.IS_UNMAPPED)) {
        ArrayList<LocalQuickFix> quickFixes=Lists.<LocalQuickFix>newArrayList(new PyRemoveArgumentQuickFix());
        if (arg instanceof PyKeywordArgument) {
          quickFixes.add(new PyRenameArgumentQuickFix());
        }
        holder.registerProblem(arg,PyBundle.message("INSP.unexpected.arg"),quickFixes.toArray(new LocalQuickFix[quickFixes.size() - 1]));
      }
      if (flags.contains(CallArgumentsMapping.ArgFlag.IS_TOO_LONG)) {
        final PyCallExpression.PyMarkedCallee markedCallee=result.getMarkedCallee();
        String parameterName=null;
        if (markedCallee != null) {
          final List<PyParameter> parameters=PyUtil.getParameters(markedCallee.getCallable(),context);
          for (int i=parameters.size() - 1; i >= 0; --i) {
            final PyParameter param=parameters.get(i);
            if (param instanceof PyNamedParameter) {
              final List<PyNamedParameter> unmappedParams=result.getUnmappedParams();
              if (!((PyNamedParameter)param).isPositionalContainer() && !((PyNamedParameter)param).isKeywordContainer() && param.getDefaultValue() == null && !unmappedParams.contains(param)) {
                parameterName=param.getName();
                break;
              }
            }
          }
          holder.registerProblem(arg,parameterName != null ? PyBundle.message("INSP.multiple.values.resolve.to.positional.$0",parameterName) : PyBundle.message("INSP.more.args.that.pos.params"));
        }
      }
    }
  }
}
