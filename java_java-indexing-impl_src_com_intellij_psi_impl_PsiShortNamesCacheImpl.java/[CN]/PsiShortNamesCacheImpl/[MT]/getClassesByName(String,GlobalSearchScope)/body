{
  final Collection<PsiClass> classes=JavaShortClassNameIndex.getInstance().get(name,myManager.getProject(),scope);
  if (classes.isEmpty())   return PsiClass.EMPTY_ARRAY;
  ArrayList<PsiClass> list=new ArrayList<>(classes.size());
  Map<String,List<PsiClass>> uniqueQName2Classes=new THashMap<>(classes.size());
  Set<PsiClass> hiddenClassesToRemove=null;
  OuterLoop:   for (  PsiClass aClass : classes) {
    VirtualFile vFile=aClass.getContainingFile().getVirtualFile();
    if (!scope.contains(vFile))     continue;
    String qName=aClass.getQualifiedName();
    if (qName != null) {
      List<PsiClass> previousQNamedClasses=uniqueQName2Classes.get(qName);
      List<PsiClass> qNamedClasses;
      if (previousQNamedClasses != null) {
        qNamedClasses=new SmartList<>();
        for (        PsiClass previousClass : previousQNamedClasses) {
          VirtualFile previousClassVFile=previousClass.getContainingFile().getVirtualFile();
          int res=scope.compare(previousClassVFile,vFile);
          if (res > 0) {
            continue OuterLoop;
          }
 else           if (res < 0) {
            if (hiddenClassesToRemove == null)             hiddenClassesToRemove=new THashSet<>();
            hiddenClassesToRemove.add(previousClass);
            qNamedClasses.add(aClass);
          }
 else {
            qNamedClasses.add(aClass);
          }
        }
      }
 else {
        qNamedClasses=new SmartList<>(aClass);
      }
      uniqueQName2Classes.put(qName,qNamedClasses);
    }
    list.add(aClass);
  }
  if (hiddenClassesToRemove != null)   list.removeAll(hiddenClassesToRemove);
  return list.toArray(new PsiClass[list.size()]);
}
