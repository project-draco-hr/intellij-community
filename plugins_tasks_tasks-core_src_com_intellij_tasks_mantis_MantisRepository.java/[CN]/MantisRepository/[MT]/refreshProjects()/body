{
  MantisConnectPortType soap=createSoap();
  myAllProjectsAvailable=checkAllProjectsAvailable(soap);
  List<MantisProject> projects=new ArrayList<MantisProject>(ContainerUtil.map(fetchUserProjects(soap),new Function<ProjectData,MantisProject>(){
    @Override public MantisProject fun(    final ProjectData data){
      return new MantisProject(data);
    }
  }
));
  List<MantisFilter> commonFilters=new LinkedList<MantisFilter>();
  for (  MantisProject project : projects) {
    FilterData[] rawFilters=fetchProjectFilters(soap,project);
    List<MantisFilter> projectFilters=new LinkedList<MantisFilter>();
    for (    FilterData data : rawFilters) {
      MantisFilter filter=new MantisFilter(data);
      if (data.getProject_id().intValue() == 0) {
        commonFilters.add(filter);
      }
      projectFilters.add(filter);
    }
    projectFilters.add(0,MantisFilter.newUndefined());
    project.setFilters(projectFilters);
  }
  Collections.sort(commonFilters,new Comparator<MantisFilter>(){
    @Override public int compare(    MantisFilter f1,    MantisFilter f2){
      return f1.getName().compareTo(f2.getName());
    }
  }
);
  commonFilters.add(0,MantisFilter.newUndefined());
  MantisProject undefined=MantisProject.newUndefined();
  undefined.setFilters(commonFilters);
  projects.add(0,undefined);
  myProjects=projects;
}
