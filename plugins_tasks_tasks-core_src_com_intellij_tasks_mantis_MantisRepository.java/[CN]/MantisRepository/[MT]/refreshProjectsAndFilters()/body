{
  try {
    final MantisConnectPortType soap=createSoap();
    myProjects=new ArrayList<MantisProject>();
    ProjectData[] projectDatas=soap.mc_projects_get_user_accessible(getUsername(),getPassword());
    List<MantisProject> projects=new ArrayList<MantisProject>(ContainerUtil.map(projectDatas,new Function<ProjectData,MantisProject>(){
      @Override public MantisProject fun(      final ProjectData data){
        return new MantisProject(data.getId().intValue(),data.getName());
      }
    }
));
    myAllProjectsAvailable=checkAllProjectsAvailable(soap);
    if (myAllProjectsAvailable) {
      projects.add(0,MantisProject.ALL_PROJECTS);
    }
    final List<MantisFilter> commonFilters=new LinkedList<MantisFilter>();
    for (    MantisProject project : projects) {
      FilterData[] filterDatas=soap.mc_filter_get(getUsername(),getPassword(),bigInteger(project.getId()));
      List<MantisFilter> projectFilters=new LinkedList<MantisFilter>();
      for (      FilterData data : filterDatas) {
        MantisFilter filter=new MantisFilter(data.getId().intValue(),data.getName());
        if (data.getProject_id().intValue() == 0) {
          commonFilters.add(filter);
        }
        projectFilters.add(filter);
      }
      projectFilters.add(0,MantisFilter.LAST_TASKS);
      project.setFilters(projectFilters);
      myProjects.add(project);
    }
    if (!myAllProjectsAvailable) {
      Collections.sort(commonFilters);
      commonFilters.add(0,MantisFilter.LAST_TASKS);
      MantisProject.ALL_PROJECTS.setFilters(commonFilters);
      myProjects.add(0,MantisProject.ALL_PROJECTS);
    }
    return myProjects;
  }
 catch (  Exception e) {
    myCurrentProject=MantisProject.ALL_PROJECTS;
    myCurrentFilter=MantisFilter.LAST_TASKS;
    throw e;
  }
}
