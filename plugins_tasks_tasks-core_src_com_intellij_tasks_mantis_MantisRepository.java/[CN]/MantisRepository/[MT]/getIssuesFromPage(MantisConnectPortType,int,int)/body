{
  List<IssueHeaderData> collectedHeaders=new ArrayList<IssueHeaderData>();
  List<MantisProject> projects;
  if (myCurrentProject == MantisProject.ALL_PROJECTS && !myAllProjectsAvailable) {
    projects=myProjects;
  }
 else {
    projects=Collections.singletonList(myCurrentProject);
  }
  for (  MantisProject project : projects) {
    IssueHeaderData[] headers;
    if (myCurrentFilter == MantisFilter.LAST_TASKS) {
      headers=soap.mc_project_get_issue_headers(getUsername(),getPassword(),bigInteger(project.getId()),bigInteger(page),bigInteger(pageSize));
    }
 else {
      headers=soap.mc_filter_get_issue_headers(getUsername(),getPassword(),bigInteger(project.getId()),bigInteger(myCurrentFilter.getId()),bigInteger(page),bigInteger(pageSize));
    }
    ContainerUtil.addAll(collectedHeaders,headers);
  }
  return ContainerUtil.mapNotNull(collectedHeaders,new NullableFunction<IssueHeaderData,Task>(){
    public Task fun(    IssueHeaderData issueData){
      return createIssue(issueData);
    }
  }
);
}
