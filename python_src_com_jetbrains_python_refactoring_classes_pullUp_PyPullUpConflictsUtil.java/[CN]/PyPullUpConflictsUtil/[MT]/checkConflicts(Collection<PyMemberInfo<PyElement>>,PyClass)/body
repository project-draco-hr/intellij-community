{
  final MultiMap<PsiElement,String> conflictsList=new MultiMap<PsiElement,String>();
  for (  PyMemberInfo<PyElement> info : infos) {
    PsiElement member=info.getMember();
    boolean isConflict=false;
    if (member instanceof PyFunction) {
      final String name=((PyFunction)member).getName();
      if (name == null)       continue;
      final PyFunction superClassMethod=superClass.findMethodByName(name,false);
      isConflict=superClassMethod != null;
    }
 else     if (member instanceof PyClass) {
      final PyClass clazz=(PyClass)member;
      for (      PyClass aClass : superClass.getSuperClasses()) {
        if (aClass == clazz) {
          conflictsList.putValue(superClass,RefactoringUIUtil.getDescription(superClass,false) + " already extends " + RefactoringUIUtil.getDescription(clazz,false));
        }
      }
    }
    if (isConflict) {
      final String message=RefactoringBundle.message("0.already.contains.a.1",RefactoringUIUtil.getDescription(superClass,false),RefactoringUIUtil.getDescription(member,false));
      conflictsList.putValue(superClass,message);
    }
  }
  return conflictsList;
}
