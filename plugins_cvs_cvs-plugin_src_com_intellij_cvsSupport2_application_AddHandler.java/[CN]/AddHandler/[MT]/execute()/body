{
  final ChangeListManager changeListManager=ChangeListManager.getInstance(myProject);
  final CvsEntriesManager cvsEntriesManager=CvsEntriesManager.getInstance();
  for (  VirtualFile file : myAllFiles) {
    if (changeListManager.isIgnoredFile(file)) {
      continue;
    }
 else     if (!CvsUtil.fileIsUnderCvs(file.getParent())) {
      continue;
    }
 else     if (CvsUtil.fileIsLocallyRemoved(file)) {
      CvsUtil.restoreFile(file);
    }
 else     if (CvsUtil.fileIsUnderCvs(file)) {
      continue;
    }
 else     if (cvsEntriesManager.getCvsConnectionSettingsFor(file.getParent()).isOffline()) {
      continue;
    }
 else     if (cvsEntriesManager.fileIsIgnored(file)) {
      continue;
    }
 else {
      myAddedFiles.add(file);
    }
  }
  if (!myAddedFiles.isEmpty()) {
    if (CvsVcs2.getInstance(myProject).getAddConfirmation().getValue() != VcsShowConfirmationOption.Value.DO_NOTHING_SILENTLY) {
      final Runnable addRunnable=new Runnable(){
        public void run(){
          if (!myCvsStorageComponent.getIsActive())           return;
          AddFileOrDirectoryAction.createActionToAddNewFileAutomatically().actionPerformed(createDataContext(myAddedFiles));
        }
      }
;
      if (ApplicationManager.getApplication().isUnitTestMode()) {
        addRunnable.run();
      }
 else {
        WaitForProgressToShow.runOrInvokeLaterAboveProgress(addRunnable,null,myProject);
      }
    }
  }
}
