{
  if (isConstructor())   return null;
  final PsiMethodStub stub=getStub();
  if (stub != null) {
    PsiType type=SoftReference.dereference(myCachedType);
    if (type != null)     return type;
    final String typeText=TypeInfo.createTypeText(stub.getReturnTypeText(true));
    if (typeText == null)     return null;
    try {
      type=JavaPsiFacade.getInstance(getProject()).getElementFactory().createTypeFromText(typeText,this);
      myCachedType=new SoftReference<PsiType>(type);
      return type;
    }
 catch (    IncorrectOperationException e) {
      LOG.error("stub: " + stub + "; method: "+ getText(),e);
      return null;
    }
  }
  myCachedType=null;
  PsiTypeElement typeElement=getReturnTypeElement();
  if (typeElement == null)   return null;
  PsiParameterList parameterList=getParameterList();
  return JavaSharedImplUtil.getType(typeElement,parameterList);
}
