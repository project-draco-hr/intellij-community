{
  FileManager fileManager=myPsiManager.getFileManager();
  VirtualFile file=createChildData(myPrjDir1,"a.txt");
  PsiFile psiFile=fileManager.findFile(file);
  PlatformTestUtil.tryGcSoftlyReachableObjects();
  if (true || ((FileManagerImpl)fileManager).getCachedDirectory(myPrjDir1) != null) {
    Processor<PsiDirectory> isReallyLeak=new Processor<PsiDirectory>(){
      @Override public boolean process(      PsiDirectory directory){
        return directory.getVirtualFile().equals(myPrjDir1);
      }
    }
;
    LeakHunter.checkLeak(LeakHunter.allRoots(),PsiDirectory.class,isReallyLeak);
    String dumpPath=FileUtil.createTempFile(new File(System.getProperty("teamcity.build.tempDir",System.getProperty("java.io.tmpdir"))),"testRenameFileWithoutDir",".hprof.zip",false,false).getPath();
    MemoryDumpHelper.captureMemoryDumpZipped(dumpPath);
    System.out.println(dumpPath);
    assertNull(((FileManagerImpl)fileManager).getCachedDirectory(myPrjDir1));
    fail("directory just died");
  }
  EventsTestListener listener=new EventsTestListener();
  myPsiManager.addPsiTreeChangeListener(listener,getTestRootDisposable());
  rename(file,"b.txt");
  String string=listener.getEventsString();
  String expected="beforePropertyChange fileName\n" + "propertyChanged fileName\n";
  assertEquals(psiFile.getName(),expected,string);
}
