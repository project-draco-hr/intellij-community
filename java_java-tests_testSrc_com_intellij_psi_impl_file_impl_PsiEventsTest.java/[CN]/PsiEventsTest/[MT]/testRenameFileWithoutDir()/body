{
  FileManager fileManager=myPsiManager.getFileManager();
  VirtualFile file=myPrjDir1.createChildData(null,"a.txt");
  PsiFile psiFile=fileManager.findFile(file);
  PlatformTestUtil.tryGcSoftlyReachableObjects();
  if (((FileManagerImpl)fileManager).getCachedDirectory(myPrjDir1) != null) {
    Processor<PsiDirectory> isReallyLeak=new Processor<PsiDirectory>(){
      @Override public boolean process(      PsiDirectory directory){
        return directory.getVirtualFile().equals(myPrjDir1);
      }
    }
;
    LeakHunter.checkLeak(ApplicationManager.getApplication(),PsiDirectory.class,isReallyLeak);
    LeakHunter.checkLeak(IdeEventQueue.getInstance(),PsiDirectory.class,isReallyLeak);
    LeakHunter.checkLeak(LaterInvocator.getLaterInvocatorQueue(),PsiDirectory.class,isReallyLeak);
    assertNull(((FileManagerImpl)fileManager).getCachedDirectory(myPrjDir1));
    fail("directory just died");
  }
  EventsTestListener listener=new EventsTestListener();
  myPsiManager.addPsiTreeChangeListener(listener,getTestRootDisposable());
  file.rename(null,"b.txt");
  String string=listener.getEventsString();
  String expected="beforePropertyChange fileName\n" + "propertyChanged fileName\n";
  assertEquals(psiFile.getName(),expected,string);
}
