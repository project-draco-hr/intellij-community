{
  try {
    PrintWriter w=new PrintWriter(new OutputStreamWriter(new FileOutputStream(path),GitUtil.UTF8_ENCODING));
    try {
      if (path.toUpperCase().endsWith(GitRepositoryFiles.COMMIT_EDITMSG)) {
        String done=FileUtil.loadFile(new File(new File(new File(myRepository.getRoot().getPath(),".git"),"rebase-merge"),"done")).trim();
        String[] tasksDone=StringUtil.splitByLines(done);
        String currentTask=tasksDone[tasksDone.length - 1].trim();
        String currentHash=currentTask.substring(currentTask.lastIndexOf(" ")).trim();
        String messageToUse=findCommitMessageForHash(currentHash);
        if (messageToUse == null) {
          System.err.println("Couldn't find the commit message for the hash to reword. " + "Looked for hash " + currentHash + " among "+ myCommands);
          return 0;
        }
        w.print(messageToUse);
      }
 else {
        for (        RebaseCommand command : myCommands) {
          String hash=command.getCommit().toStrHash();
switch (command.getKind()) {
case PICK:
            w.print("pick " + hash + "\n");
          break;
case FIXUP:
        w.print("fixup " + hash + "\n");
      break;
case REWORD:
    w.print("reword " + hash + "\n");
  break;
}
}
}
}
  finally {
w.close();
}
return 0;
}
 catch (Exception ex) {
System.err.println("Editor failed: " + ex);
ex.printStackTrace();
return 1;
}
}
