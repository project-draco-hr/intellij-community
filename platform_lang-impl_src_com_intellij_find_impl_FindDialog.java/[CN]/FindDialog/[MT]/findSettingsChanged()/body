{
  if (haveResultsPreview()) {
    final ModalityState state=ModalityState.current();
    if (state == ModalityState.NON_MODAL)     return;
    finishPreviousPreviewSearch();
    mySearchRescheduleOnCancellationsAlarm.cancelAllRequests();
    final FindModel findModel=myModel.clone();
    applyTo(findModel,false);
    ValidationInfo result=getValidationInfo(findModel);
    final ProgressIndicatorBase progressIndicatorWhenSearchStarted=new ProgressIndicatorBase();
    myResultsPreviewSearchProgress=progressIndicatorWhenSearchStarted;
    final DefaultTableModel model=new DefaultTableModel(){
      @Override public boolean isCellEditable(      int row,      int column){
        return false;
      }
    }
;
    model.addColumn("Usages");
    myResultsPreviewTable.setModel(model);
    if (result != null) {
      myResultsPreviewTable.getEmptyText().setText(UIBundle.message("message.nothingToShow"));
      myContent.setTitleAt(RESULTS_PREVIEW_TAB_INDEX,PREVIEW_TITLE);
      return;
    }
 else     if (findModel.isRegularExpressions()) {
      myResultsPreviewTable.getEmptyText().setText(UIBundle.message("message.canNotPreviewRegExpSearch"));
      myContent.setTitleAt(RESULTS_PREVIEW_TAB_INDEX,PREVIEW_TITLE);
      return;
    }
    myResultsPreviewTable.getColumnModel().getColumn(0).setCellRenderer(new UsageTableCellRenderer());
    myResultsPreviewTable.getEmptyText().setText("Searching...");
    myContent.setTitleAt(RESULTS_PREVIEW_TAB_INDEX,PREVIEW_TITLE);
    final Component component=myInputComboBox.getEditor().getEditorComponent();
    if (component instanceof EditorTextField) {
      final Document document=((EditorTextField)component).getDocument();
      if (document != null) {
        PsiDocumentManager.getInstance(myProject).commitDocument(document);
      }
    }
    final AtomicInteger resultsCount=new AtomicInteger();
    ProgressIndicatorUtils.scheduleWithWriteActionPriority(myResultsPreviewSearchProgress,new ReadTask(){
      @Override public void computeInReadAction(      @NotNull ProgressIndicator indicator){
        final UsageViewPresentation presentation=FindInProjectUtil.setupViewPresentation(FindSettings.getInstance().isShowResultsInSeparateView(),findModel);
        final boolean showPanelIfOnlyOneUsage=!FindSettings.getInstance().isSkipResultsWithOneUsage();
        final FindUsagesProcessPresentation processPresentation=FindInProjectUtil.setupProcessPresentation(myProject,showPanelIfOnlyOneUsage,presentation);
        FindInProjectUtil.findUsages(findModel,myProject,new Processor<UsageInfo>(){
          @Override public boolean process(          final UsageInfo info){
            final Usage usage=UsageInfo2UsageAdapter.CONVERTER.fun(info);
            usage.getPresentation().getIcon();
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              @Override public void run(){
                model.addRow(new Object[]{usage});
                if (model.getRowCount() == 1 && myResultsPreviewTable.getModel() == model && isResultsPreviewTabActive()) {
                  myResultsPreviewTable.setRowSelectionInterval(0,0);
                }
              }
            }
,state);
            return resultsCount.incrementAndGet() < ShowUsagesAction.USAGES_PAGE_SIZE;
          }
        }
,processPresentation);
        boolean succeeded=!progressIndicatorWhenSearchStarted.isCanceled();
        if (succeeded) {
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              if (progressIndicatorWhenSearchStarted == myResultsPreviewSearchProgress && !myResultsPreviewSearchProgress.isCanceled()) {
                int occurrences=resultsCount.get();
                if (occurrences == 0)                 myResultsPreviewTable.getEmptyText().setText(UIBundle.message("message.nothingToShow"));
                myContent.setTitleAt(RESULTS_PREVIEW_TAB_INDEX,PREVIEW_TITLE + " (" + (occurrences != ShowUsagesAction.USAGES_PAGE_SIZE ? Integer.valueOf(occurrences) : occurrences + "+")+ ")");
              }
            }
          }
,state);
        }
      }
      @Override public void onCanceled(      @NotNull ProgressIndicator indicator){
        if (isShowing() && progressIndicatorWhenSearchStarted == myResultsPreviewSearchProgress) {
          scheduleResultsUpdate();
        }
      }
    }
);
  }
}
