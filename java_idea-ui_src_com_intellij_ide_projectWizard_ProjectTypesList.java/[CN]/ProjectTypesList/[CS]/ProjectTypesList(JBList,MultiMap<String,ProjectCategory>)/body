{
  myList=list;
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  new ListSpeedSearch(myList){
    @Override protected String getElementText(    Object element){
      return super.getElementText(element);
    }
  }
.setComparator(new SpeedSearchComparator(false));
  List<TemplateItem> items=buildItems(map);
  myModel=new CollectionListModel<TemplateItem>(items);
  myList.setCellRenderer(new GroupedItemsListRenderer(new ListItemDescriptor(){
    @Nullable @Override public String getTextFor(    Object value){
      return ((TemplateItem)value).getName();
    }
    @Nullable @Override public String getTooltipFor(    Object value){
      return null;
    }
    @Nullable @Override public Icon getIconFor(    Object value){
      return ((TemplateItem)value).getIcon();
    }
    @Override public boolean hasSeparatorAboveOf(    Object value){
      TemplateItem item=(TemplateItem)value;
      int index=myModel.getElementIndex(item);
      return index == 0 || !myModel.getElementAt(index - 1).getGroupName().equals(item.getGroupName());
    }
    @Nullable @Override public String getCaptionAboveOf(    Object value){
      return ((TemplateItem)value).getGroupName();
    }
  }
));
  myList.setModel(myModel);
}
