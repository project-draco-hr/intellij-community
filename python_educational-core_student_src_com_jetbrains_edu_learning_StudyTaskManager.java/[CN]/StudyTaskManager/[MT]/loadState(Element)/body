{
  final Element mainElement=state.getChild(MAIN_ELEMENT);
  if (mainElement != null) {
    final StudyTaskManager taskManager=XmlSerializer.deserialize(mainElement,StudyTaskManager.class);
    if (taskManager != null) {
      myCourse=taskManager.myCourse;
      myUserTests=taskManager.myUserTests;
      myInvisibleFiles=taskManager.myInvisibleFiles;
      myTaskStatusMap=taskManager.myTaskStatusMap;
      myStudyStatusMap=taskManager.myStudyStatusMap;
      myShouldUseJavaFx=taskManager.myShouldUseJavaFx;
    }
  }
  final Element oldCourseElement=state.getChild(COURSE_ELEMENT);
  if (oldCourseElement != null) {
    myOldCourse=XmlSerializer.deserialize(oldCourseElement,OldCourse.class);
    if (myOldCourse != null) {
      myCourse=EduUtils.transformOldCourse(myOldCourse,new Function<Pair<AnswerPlaceholder,StudyStatus>,Void>(){
        @Override public Void fun(        Pair<AnswerPlaceholder,StudyStatus> pair){
          setStatus(pair.first,pair.second);
          return null;
        }
      }
);
      myOldCourse=null;
    }
  }
  if (myCourse != null) {
    myCourse.initCourse(true);
  }
}
