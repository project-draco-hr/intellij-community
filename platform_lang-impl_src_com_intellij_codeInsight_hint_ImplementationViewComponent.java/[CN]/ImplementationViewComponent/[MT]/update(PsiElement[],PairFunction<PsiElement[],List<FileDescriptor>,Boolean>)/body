{
  List<PsiElement> candidates=new ArrayList<PsiElement>(elements.length);
  List<FileDescriptor> files=new ArrayList<FileDescriptor>(elements.length);
  final Set<String> names=new HashSet<String>();
  for (  PsiElement element : elements) {
    if (element instanceof PsiNamedElement) {
      names.add(((PsiNamedElement)element).getName());
    }
  }
  Arrays.sort(elements,new Comparator<PsiElement>(){
    @Override public int compare(    PsiElement e1,    PsiElement e2){
      if (e1 instanceof PsiNamedElement && e2 instanceof PsiNamedElement) {
        return Comparing.compare(((PsiNamedElement)e1).getName(),((PsiNamedElement)e2).getName());
      }
      return e1.hashCode() - e2.hashCode();
    }
  }
);
  for (  PsiElement element : elements) {
    PsiFile file=getContainingFile(element);
    if (file == null)     continue;
    final PsiElement parent=element.getParent();
    files.add(new FileDescriptor(file,names.size() > 1 || parent == file ? element : parent));
    candidates.add(element);
  }
  fun.fun(PsiUtilCore.toPsiElementArray(candidates),files);
}
