{
  if (myModulePaths == null || myModulePaths.isEmpty()) {
    return;
  }
  ModuleGroupInterner groupInterner=new ModuleGroupInterner();
  final ProgressIndicator progressIndicator=myProject.isDefault() ? null : ProgressIndicatorProvider.getGlobalProgressIndicator();
  if (progressIndicator != null) {
    progressIndicator.setText("Loading modules...");
    progressIndicator.setText2("");
  }
  myFailedModulePaths.clear();
  myFailedModulePaths.addAll(myModulePaths);
  final List<Module> modulesWithUnknownTypes=new ArrayList<Module>();
  List<ModuleLoadingErrorDescription> errors=new ArrayList<ModuleLoadingErrorDescription>();
  for (  ModulePath modulePath : myModulePaths) {
    if (progressIndicator != null) {
      progressIndicator.setFraction(progressIndicator.getFraction() + myProgressStep);
    }
    try {
      final Module module=moduleModel.loadModuleInternal(modulePath.getPath());
      if (isUnknownModuleType(module)) {
        modulesWithUnknownTypes.add(module);
      }
      final String groupPathString=modulePath.getModuleGroup();
      if (groupPathString != null) {
        final String[] groupPath=groupPathString.split(MODULE_GROUP_SEPARATOR);
        groupInterner.setModuleGroupPath(moduleModel,module,groupPath);
      }
      myFailedModulePaths.remove(modulePath);
    }
 catch (    IOException e) {
      errors.add(ModuleLoadingErrorDescription.create(ProjectBundle.message("module.cannot.load.error",modulePath.getPath(),e.getMessage()),modulePath,this));
    }
catch (    ModuleWithNameAlreadyExists moduleWithNameAlreadyExists) {
      errors.add(ModuleLoadingErrorDescription.create(moduleWithNameAlreadyExists.getMessage(),modulePath,this));
    }
  }
  onModuleLoadErrors(errors);
  showUnknownModuleTypeNotification(modulesWithUnknownTypes);
}
