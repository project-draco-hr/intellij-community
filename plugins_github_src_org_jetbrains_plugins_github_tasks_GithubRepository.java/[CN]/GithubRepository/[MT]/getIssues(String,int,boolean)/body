{
  GithubConnection connection=getConnection();
  try {
    List<GithubIssue> issues;
    if (StringUtil.isEmptyOrSpaces(query)) {
      if (StringUtil.isEmptyOrSpaces(myUser)) {
        myUser=GithubApiUtil.getCurrentUser(connection).getLogin();
      }
      issues=GithubApiUtil.getIssuesAssigned(connection,getRepoAuthor(),getRepoName(),myUser,max,withClosed);
    }
 else {
      issues=GithubApiUtil.getIssuesQueried(connection,getRepoAuthor(),getRepoName(),query,withClosed);
    }
    return ContainerUtil.map2Array(issues,Task.class,new Function<GithubIssue,Task>(){
      @Override public Task fun(      GithubIssue issue){
        return createTask(issue);
      }
    }
);
  }
  finally {
    connection.close();
  }
}
