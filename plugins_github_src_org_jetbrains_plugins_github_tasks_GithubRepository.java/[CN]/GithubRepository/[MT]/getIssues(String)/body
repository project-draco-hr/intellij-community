{
  List<GithubIssue> issues;
  if (StringUtil.isEmptyOrSpaces(query)) {
    if (StringUtil.isEmptyOrSpaces(myUser)) {
      myUser=GithubApiUtil.getCurrentUser(getAuthData()).getLogin();
    }
    issues=GithubApiUtil.getIssuesAssigned(getAuthData(),getRepoAuthor(),getRepoName(),myUser);
  }
 else {
    issues=GithubApiUtil.getIssuesQueried(getAuthData(),getRepoAuthor(),getRepoName(),query);
  }
  return ContainerUtil.map2Array(issues,Task.class,new Function<GithubIssue,Task>(){
    @Override public Task fun(    GithubIssue issue){
      return createTask(issue);
    }
  }
);
}
