{
  GithubConnection connection=getConnection();
  try {
    List<GithubIssueComment> result=GithubApiUtil.getIssueComments(connection,getRepoAuthor(),getRepoName(),id);
    return ContainerUtil.map2Array(result,Comment.class,new Function<GithubIssueComment,Comment>(){
      @Override public Comment fun(      GithubIssueComment comment){
        return new GithubComment(comment.getCreatedAt(),comment.getUser().getLogin(),comment.getBodyHtml(),comment.getUser().getGravatarId(),comment.getUser().getHtmlUrl());
      }
    }
);
  }
  finally {
    connection.close();
  }
}
