{
  ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  VirtualFile virtualFile=myFile.getViewProvider().getVirtualFile();
  if (!fileIndex.isInContent(virtualFile)) {
    return;
  }
  final InspectionProfile profile=InspectionProjectProfileManager.getInstance(myProject).getCurrentProfile();
  final HighlightDisplayKey unusedDefKey=HighlightDisplayKey.find(GroovyUnusedDeclarationInspection.SHORT_NAME);
  final boolean deadCodeEnabled=profile.isToolEnabled(unusedDefKey,myFile);
  final UnusedDeclarationInspectionBase deadCodeInspection=(UnusedDeclarationInspectionBase)profile.getUnwrappedTool(UnusedDeclarationInspectionBase.SHORT_NAME,myFile);
  final GlobalUsageHelper usageHelper=new GlobalUsageHelper(){
    @Override public boolean isCurrentFileAlreadyChecked(){
      return false;
    }
    @Override public boolean isLocallyUsed(    @NotNull PsiNamedElement member){
      return false;
    }
    @Override public boolean shouldCheckUsages(    @NotNull PsiMember member){
      return deadCodeInspection == null || !deadCodeInspection.isEntryPoint(member);
    }
  }
;
  final List<HighlightInfo> unusedDeclarations=new ArrayList<>();
  final Map<GrParameter,Boolean> usedParams=new HashMap<>();
  myFile.accept(new PsiRecursiveElementWalkingVisitor(){
    @Override public void visitElement(    PsiElement element){
      if (element instanceof GrReferenceExpression && !((GrReferenceElement)element).isQualified()) {
        GroovyResolveResult[] results=((GrReferenceExpression)element).multiResolve(false);
        if (results.length == 0) {
          results=((GrReferenceExpression)element).multiResolve(true);
        }
        for (        GroovyResolveResult result : results) {
          PsiElement resolved=result.getElement();
          if (resolved instanceof GrParameter && resolved.getContainingFile() == myFile) {
            usedParams.put((GrParameter)resolved,Boolean.TRUE);
          }
        }
      }
      if (deadCodeEnabled && element instanceof GrNamedElement && element instanceof PsiModifierListOwner&& !UnusedSymbolUtil.isImplicitUsage(element.getProject(),(PsiModifierListOwner)element,progress)&& !GroovySuppressableInspectionTool.isElementToolSuppressedIn(element,GroovyUnusedDeclarationInspection.SHORT_NAME)) {
        PsiElement nameId=((GrNamedElement)element).getNameIdentifierGroovy();
        if (nameId.getNode().getElementType() == GroovyTokenTypes.mIDENT) {
          String name=((GrNamedElement)element).getName();
          if (element instanceof GrTypeDefinition && !UnusedSymbolUtil.isClassUsed(myProject,element.getContainingFile(),(GrTypeDefinition)element,progress,usageHelper)) {
            HighlightInfo highlightInfo=UnusedSymbolUtil.createUnusedSymbolInfo(nameId,"Class " + name + " is unused",HighlightInfoType.UNUSED_SYMBOL);
            QuickFixAction.registerQuickFixAction(highlightInfo,QuickFixFactory.getInstance().createSafeDeleteFix(element),unusedDefKey);
            ContainerUtil.addIfNotNull(unusedDeclarations,highlightInfo);
          }
 else           if (element instanceof GrMethod) {
            GrMethod method=(GrMethod)element;
            if (!UnusedSymbolUtil.isMethodReferenced(method.getProject(),method.getContainingFile(),method,progress,usageHelper)) {
              String message=(method.isConstructor() ? "Constructor" : "Method") + " " + name+ " is unused";
              HighlightInfo highlightInfo=UnusedSymbolUtil.createUnusedSymbolInfo(nameId,message,HighlightInfoType.UNUSED_SYMBOL);
              QuickFixAction.registerQuickFixAction(highlightInfo,QuickFixFactory.getInstance().createSafeDeleteFix(method),unusedDefKey);
              ContainerUtil.addIfNotNull(unusedDeclarations,highlightInfo);
            }
          }
 else           if (element instanceof GrField && isFieldUnused((GrField)element,progress,usageHelper)) {
            HighlightInfo highlightInfo=UnusedSymbolUtil.createUnusedSymbolInfo(nameId,"Property " + name + " is unused",HighlightInfoType.UNUSED_SYMBOL);
            QuickFixAction.registerQuickFixAction(highlightInfo,QuickFixFactory.getInstance().createSafeDeleteFix(element),unusedDefKey);
            ContainerUtil.addIfNotNull(unusedDeclarations,highlightInfo);
          }
 else           if (element instanceof GrParameter) {
            if (!usedParams.containsKey(element)) {
              usedParams.put((GrParameter)element,Boolean.FALSE);
            }
          }
        }
      }
      super.visitElement(element);
    }
  }
);
  final Set<GrImportStatement> unusedImports=new HashSet<>(PsiUtil.getValidImportStatements(myFile));
  unusedImports.removeAll(GroovyImportUtil.findUsedImports(myFile));
  myUnusedImports=unusedImports;
  if (deadCodeEnabled) {
    for (    GrParameter parameter : usedParams.keySet()) {
      if (usedParams.get(parameter))       continue;
      PsiElement scope=parameter.getDeclarationScope();
      if (scope instanceof GrMethod) {
        GrMethod method=(GrMethod)scope;
        if (methodMayHaveUnusedParameters(method)) {
          PsiElement identifier=parameter.getNameIdentifierGroovy();
          HighlightInfo highlightInfo=UnusedSymbolUtil.createUnusedSymbolInfo(identifier,"Parameter " + parameter.getName() + " is unused",HighlightInfoType.UNUSED_SYMBOL);
          QuickFixAction.registerQuickFixAction(highlightInfo,GroovyQuickFixFactory.getInstance().createRemoveUnusedGrParameterFix(parameter),unusedDefKey);
          ContainerUtil.addIfNotNull(unusedDeclarations,highlightInfo);
        }
      }
 else       if (scope instanceof GrClosableBlock) {
      }
    }
  }
  myUnusedDeclarations=unusedDeclarations;
}
