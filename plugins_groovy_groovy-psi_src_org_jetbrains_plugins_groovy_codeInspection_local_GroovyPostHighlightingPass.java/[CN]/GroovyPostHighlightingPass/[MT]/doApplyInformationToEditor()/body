{
  if (myUnusedDeclarations == null || myUnusedImports == null) {
    return;
  }
  AnnotationHolder annotationHolder=new AnnotationHolderImpl(new AnnotationSession(myFile));
  List<HighlightInfo> infos=new ArrayList<HighlightInfo>(myUnusedDeclarations);
  for (  GrImportStatement unusedImport : myUnusedImports) {
    Annotation annotation=annotationHolder.createWarningAnnotation(calculateRangeToUse(unusedImport),GroovyInspectionBundle.message("unused.import"));
    annotation.setHighlightType(ProblemHighlightType.LIKE_UNUSED_SYMBOL);
    annotation.registerFix(GroovyQuickFixFactory.getInstance().createOptimizeImportsFix(false));
    infos.add(HighlightInfo.fromAnnotation(annotation));
  }
  UpdateHighlightersUtil.setHighlightersToEditor(myProject,myDocument,0,myFile.getTextLength(),infos,getColorsScheme(),getId());
  if (myUnusedImports != null && !myUnusedImports.isEmpty()) {
    IntentionAction fix=GroovyQuickFixFactory.getInstance().createOptimizeImportsFix(true);
    if (fix.isAvailable(myProject,myEditor,myFile) && myFile.isWritable()) {
      fix.invoke(myProject,myEditor,myFile);
    }
  }
}
