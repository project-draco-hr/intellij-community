{
  final PsiFile file=CommonDataKeys.PSI_FILE.getData(dataContext);
  if (file == null)   return;
  final Caret caret=editor.getCaretModel().getCurrentCaret();
  final EditorHighlighter highlighter=((EditorEx)editor).getHighlighter();
  final CharSequence text=editor.getDocument().getCharsSequence();
  int offset=caret.getOffset();
  final FileType fileType=PsiUtilBase.getPsiFileAtOffset(file,offset).getFileType();
  HighlighterIterator iterator=highlighter.createIterator(offset);
  if (iterator.atEnd()) {
    offset--;
  }
 else   if (!BraceMatchingUtil.isLBraceToken(iterator,text,fileType)) {
    offset--;
    if (offset >= 0) {
      final HighlighterIterator i=highlighter.createIterator(offset);
      if (!BraceMatchingUtil.isRBraceToken(i,text,PsiUtilBase.getPsiFileAtOffset(file,i.getStart()).getFileType()))       offset++;
    }
  }
  if (offset < 0)   return;
  iterator=highlighter.createIterator(offset);
  while (!BraceMatchingUtil.isLBraceToken(iterator,text,fileType) && !BraceMatchingUtil.isRBraceToken(iterator,text,fileType)) {
    iterator.retreat();
    offset=iterator.getStart();
  }
  if (BraceMatchingUtil.matchBrace(text,fileType,iterator,true)) {
    moveCaret(editor,caret,iterator.getEnd());
    return;
  }
  iterator=highlighter.createIterator(offset);
  if (BraceMatchingUtil.matchBrace(text,fileType,iterator,false)) {
    moveCaret(editor,caret,iterator.getStart());
  }
}
