{
  if (N <= 0) {
    throw new IllegalArgumentException();
  }
  this.N=N;
  isOpened=new boolean[N + 2][N + 2];
  for (int i=0; i < N + 2; i++) {
    for (int j=0; j < N + 2; j++) {
      isOpened[i][j]=false;
    }
  }
  smartField=new WeightedQuickUnionUF(N * N + 2);
  for (int i=1; i <= N; i++) {
    smartField.union(0,i);
  }
  connectedToBottom=new boolean[N * N + 1];
  for (int i=N * (N - 1) + 1; i <= N * N; i++) {
    connectedToBottom[smartField.find(i)]=true;
  }
}
