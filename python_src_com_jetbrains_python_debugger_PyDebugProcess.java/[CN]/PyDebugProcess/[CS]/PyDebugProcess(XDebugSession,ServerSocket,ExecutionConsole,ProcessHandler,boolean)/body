{
  super(session);
  session.setPauseActionSupported(true);
  if (multiProcess) {
    myDebugger=createMultiprocessDebugger(serverSocket);
  }
 else {
    myDebugger=new RemoteDebugger(this,serverSocket,getConnectTimeout());
  }
  List<XBreakpointHandler> breakpointHandlers=new ArrayList<XBreakpointHandler>();
  breakpointHandlers.add(new PyLineBreakpointHandler(this));
  breakpointHandlers.add(new PyExceptionBreakpointHandler(this));
  for (  PyBreakpointHandlerFactory factory : Extensions.getExtensions(PyBreakpointHandlerFactory.EP_NAME)) {
    breakpointHandlers.add(factory.createBreakpointHandler(this));
  }
  myBreakpointHandlers=breakpointHandlers.toArray(new XBreakpointHandler[breakpointHandlers.size()]);
  myEditorsProvider=new PyDebuggerEditorsProvider();
  mySmartStepIntoHandler=new PySmartStepIntoHandler(this);
  myProcessHandler=processHandler;
  myExecutionConsole=executionConsole;
  if (myProcessHandler != null) {
    myProcessHandler.addProcessListener(this);
  }
  if (processHandler instanceof PositionConverterProvider) {
    myPositionConverter=((PositionConverterProvider)processHandler).createPositionConverter(this);
  }
 else {
    myPositionConverter=new PyLocalPositionConverter();
  }
  myDebugger.addCloseListener(new RemoteDebuggerCloseListener(){
    @Override public void closed(){
      handleStop();
    }
    @Override public void communicationError(){
      detachDebuggedProcess();
    }
    @Override public void detached(){
      detachDebuggedProcess();
    }
  }
);
  session.addSessionListener(new XDebugSessionListener(){
    @Override public void stackFrameChanged(){
      String currentFrameThreadId=null;
      final XStackFrame currentFrame=session.getCurrentStackFrame();
      if (currentFrame instanceof PyStackFrame) {
        currentFrameThreadId=((PyStackFrame)currentFrame).getThreadId();
      }
      final XExecutionStack activeStack=session.getSuspendContext().getActiveExecutionStack();
      if ((activeStack == null) || (currentFrameThreadId == null)) {
        return;
      }
      final XStackFrame frameFromSuspendContext=activeStack.getTopFrame();
      String activeStackThreadId=null;
      if (frameFromSuspendContext instanceof PyStackFrame) {
        activeStackThreadId=((PyStackFrame)frameFromSuspendContext).getThreadId();
      }
      if (!currentFrameThreadId.equals(activeStackThreadId)) {
        PyThreadInfo threadInfo=null;
        for (        PyThreadInfo info : mySuspendedThreads) {
          if (info.getId().equals(currentFrameThreadId)) {
            threadInfo=info;
            break;
          }
        }
        if (threadInfo != null) {
          getSession().positionReached(createSuspendContext(threadInfo));
        }
      }
    }
  }
);
}
