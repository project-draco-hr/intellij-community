{
  super(session);
  session.setPauseActionSupported(true);
  if (multiProcess) {
    myDebugger=createMultiprocessDebugger(serverSocket);
  }
 else {
    myDebugger=new RemoteDebugger(this,serverSocket,10000);
  }
  myBreakpointHandlers=new XBreakpointHandler[]{new PyLineBreakpointHandler(this),new PyExceptionBreakpointHandler(this),new DjangoLineBreakpointHandler(this),new DjangoExceptionBreakpointHandler(this)};
  myEditorsProvider=new PyDebuggerEditorsProvider();
  mySmartStepIntoHandler=new PySmartStepIntoHandler(this);
  myProcessHandler=processHandler;
  myExecutionConsole=executionConsole;
  if (myProcessHandler != null) {
    myProcessHandler.addProcessListener(this);
  }
  if (processHandler instanceof PyRemoteProcessHandlerBase) {
    myPositionConverter=new PyRemotePositionConverter(this,((PyRemoteProcessHandlerBase)processHandler).getMappingSettings());
  }
 else {
    myPositionConverter=new PyLocalPositionConverter();
  }
  myDebugger.addCloseListener(new RemoteDebuggerCloseListener(){
    @Override public void closed(){
      handleStop();
    }
    @Override public void communicationError(){
      handleCommunicationError();
    }
    @Override public void exitEvent(){
      handleCommunicationError();
    }
  }
);
}
