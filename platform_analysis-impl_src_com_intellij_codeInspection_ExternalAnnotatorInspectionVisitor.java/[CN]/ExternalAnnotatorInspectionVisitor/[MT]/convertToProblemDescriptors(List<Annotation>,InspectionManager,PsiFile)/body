{
  if (annotations.isEmpty()) {
    return ProblemDescriptor.EMPTY_ARRAY;
  }
  List<ProblemDescriptor> problems=ContainerUtil.newArrayListWithCapacity(annotations.size());
  IdentityHashMap<IntentionAction,LocalQuickFix> quickFixMappingCache=ContainerUtil.newIdentityHashMap();
  for (  Annotation annotation : annotations) {
    if (annotation.getSeverity() == HighlightSeverity.INFORMATION || annotation.getStartOffset() == annotation.getEndOffset()) {
      continue;
    }
    final PsiElement startElement=file.findElementAt(annotation.getStartOffset());
    final PsiElement endElement=file.findElementAt(annotation.getEndOffset() - 1);
    if (startElement == null || endElement == null) {
      continue;
    }
    LocalQuickFix[] quickFixes=toLocalQuickFixes(annotation.getQuickFixes(),quickFixMappingCache);
    ProblemDescriptor descriptor=manager.createProblemDescriptor(startElement,endElement,annotation.getMessage(),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false,quickFixes);
    problems.add(descriptor);
  }
  return problems.toArray(new ProblemDescriptor[problems.size()]);
}
