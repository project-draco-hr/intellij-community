{
  if (!CodeInsightUtilBase.preparePsiElementForWrite(cls)) {
    return null;
  }
  String paramList=ancestorInit != null ? ancestorInit.getParameterList().getText() : "(self)";
  String functionText="def " + PyNames.INIT + paramList+ ":\n";
  if (cls.isNewStyleClass() && ancestorInit != null && ancestorInit.getContainingClass() != PyBuiltinCache.getInstance(ancestorInit).getClass("object")) {
    StringBuffer sb=new StringBuffer("super(");
    sb.append(cls.getName());
    PyParameter[] params=ancestorInit.getParameterList().getParameters();
    String self_name=params[0].getName();
    sb.append(", ").append(self_name).append(").").append(PyNames.INIT).append("(");
    boolean seen=false;
    for (int i=1; i < params.length; i+=1) {
      if (seen)       sb.append(", ");
 else       seen=true;
      sb.append(params[i].getText());
    }
    sb.append(")");
    functionText+="    " + sb.toString();
  }
 else {
    functionText+="    pass";
  }
  return PyElementGenerator.getInstance(project).createFromText(PyFunction.class,functionText,new int[]{0});
}
