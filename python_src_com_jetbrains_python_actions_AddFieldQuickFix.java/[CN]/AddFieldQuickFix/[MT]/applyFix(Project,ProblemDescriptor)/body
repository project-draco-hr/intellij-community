{
  PyClass cls=myQualifierClass;
  String item_name=myIdentifier;
  if (cls != null && item_name != null) {
    PyFunction init=cls.findMethodByName(PyNames.INIT,false);
    Language language=cls.getLanguage();
    if (language instanceof PythonLanguage) {
      PythonLanguage pythonLanguage=(PythonLanguage)language;
      PyElementGenerator generator=pythonLanguage.getElementGenerator();
      if (init != null) {
        appendToInit(init,item_name,generator,project);
        return;
      }
 else {
        for (        PyClass ancestor : cls.iterateAncestors()) {
          init=ancestor.findMethodByName(PyNames.INIT,false);
          if (init != null)           break;
        }
        if (init != null) {
          PyUtil.ensureWritable(cls);
          final PyParameterList paramlist=init.getParameterList();
          PyFunction new_init=generator.createFromText(project,PyFunction.class,"def " + PyNames.INIT + paramlist.getText()+ ":\n",new int[]{0});
          if (cls.isNewStyleClass()) {
            StringBuffer sb=new StringBuffer("super(");
            sb.append(cls.getName());
            PyParameter[] params=paramlist.getParameters();
            String self_name=params[0].getName();
            sb.append(", ").append(self_name).append(").").append(PyNames.INIT).append("(");
            boolean seen=false;
            for (int i=1; i < params.length; i+=1) {
              if (seen)               sb.append(", ");
 else               seen=true;
              sb.append(params[i].getText());
            }
            sb.append(")");
            PyStatement new_stmt=generator.createFromText(project,PyStatement.class,sb.toString());
            new_init.getStatementList().add(new_stmt);
          }
          appendToInit(new_init,item_name,generator,project);
          new_init.add(generator.createFromText(project,PsiWhiteSpace.class,"\n\n"));
          PsiElement add_anchor=null;
          PyFunction[] meths=cls.getMethods();
          if (meths.length > 0)           add_anchor=meths[0].getPrevSibling();
          PyStatementList cls_content=cls.getStatementList();
          cls_content.addAfter(new_init,add_anchor);
          PyUtil.showBalloon(project,PyBundle.message("QFIX.added.constructor.$0.for.field.$1",cls.getName(),item_name),MessageType.INFO);
          return;
        }
      }
    }
  }
  PyUtil.showBalloon(project,PyBundle.message("QFIX.failed.to.add.field"),MessageType.ERROR);
}
