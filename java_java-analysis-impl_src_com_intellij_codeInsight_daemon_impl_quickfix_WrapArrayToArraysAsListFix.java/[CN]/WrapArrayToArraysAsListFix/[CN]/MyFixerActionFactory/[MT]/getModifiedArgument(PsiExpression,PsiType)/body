{
  final PsiType exprType=expression.getType();
  if (!(exprType instanceof PsiArrayType && toType instanceof PsiClassType)) {
    return null;
  }
  final PsiClass resolvedToType=((PsiClassType)toType).resolve();
  if (resolvedToType == null) {
    return null;
  }
  final PsiClass javaUtilList=getJavaUtilList(expression);
  if (javaUtilList == null || !InheritanceUtil.isInheritorOrSelf(javaUtilList,resolvedToType,true)) {
    return null;
  }
  final PsiType[] parameters=((PsiClassType)toType).getParameters();
  final PsiType arrayComponentType=((PsiArrayType)exprType).getComponentType();
  if (!(parameters.length == 1 && parameters[0].equals(arrayComponentType))) {
    return null;
  }
  final String rawNewExpression=String.format("java.util.Arrays.asList(%s)",expression.getText());
  final Project project=expression.getProject();
  final PsiExpression newExpression=JavaPsiFacade.getInstance(project).getElementFactory().createExpressionFromText(rawNewExpression,null);
  return (PsiExpression)JavaCodeStyleManager.getInstance(project).shortenClassReferences(newExpression);
}
