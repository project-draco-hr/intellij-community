{
  final InspectionManagerEx inspectionManager=(InspectionManagerEx)InspectionManager.getInstance(myProject);
  List<Tools> globalTools=new ArrayList<Tools>();
  final List<Tools> localTools=new ArrayList<Tools>();
  final List<Tools> globalSimpleTools=new ArrayList<Tools>();
  initializeTools(globalTools,localTools,globalSimpleTools);
  final List<InspectionToolWrapper> needRepeatSearchRequest=new ArrayList<InspectionToolWrapper>();
  ((RefManagerImpl)getRefManager()).initializeAnnotators();
  for (  Tools tools : globalTools) {
    for (    ScopeToolState state : tools.getTools()) {
      InspectionToolWrapper toolWrapper=state.getTool();
      GlobalInspectionTool tool=(GlobalInspectionTool)toolWrapper.getTool();
      InspectionToolPresentation toolPresentation=getPresentation(toolWrapper);
      try {
        if (tool.isGraphNeeded()) {
          ((RefManagerImpl)getRefManager()).findAllDeclarations();
        }
        tool.runInspection(scope,inspectionManager,this,toolPresentation);
        if (tool.queryExternalUsagesRequests(inspectionManager,this,toolPresentation)) {
          needRepeatSearchRequest.add(toolWrapper);
        }
      }
 catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      IndexNotReadyException e) {
        throw e;
      }
catch (      Exception e) {
        LOG.error(e);
      }
    }
  }
  for (  GlobalInspectionContextExtension extension : myExtensions.values()) {
    try {
      extension.performPostRunActivities(needRepeatSearchRequest,this);
    }
 catch (    ProcessCanceledException e) {
      throw e;
    }
catch (    IndexNotReadyException e) {
      throw e;
    }
catch (    Exception e) {
      LOG.error(e);
    }
  }
  if (runGlobalToolsOnly)   return;
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  final Set<VirtualFile> localScopeFiles=scope.toSearchScope() instanceof LocalSearchScope ? new THashSet<VirtualFile>() : null;
  for (  Tools tools : globalSimpleTools) {
    GlobalInspectionToolWrapper toolWrapper=(GlobalInspectionToolWrapper)tools.getTool();
    GlobalSimpleInspectionTool tool=(GlobalSimpleInspectionTool)toolWrapper.getTool();
    tool.inspectionStarted(inspectionManager,this,getPresentation(toolWrapper));
  }
  final Map<String,InspectionToolWrapper> map=getInspectionWrappersMap(localTools);
  scope.accept(new PsiElementVisitor(){
    @Override public void visitFile(    final PsiFile file){
      final VirtualFile virtualFile=file.getVirtualFile();
      if (virtualFile != null) {
        incrementJobDoneAmount(getStdJobDescriptors().LOCAL_ANALYSIS,ProjectUtilCore.displayUrlRelativeToProject(virtualFile,virtualFile.getPresentableUrl(),myProject,true,false));
        if (SingleRootFileViewProvider.isTooLargeForIntelligence(virtualFile))         return;
        if (localScopeFiles != null && !localScopeFiles.add(virtualFile))         return;
      }
      final FileViewProvider viewProvider=psiManager.findViewProvider(virtualFile);
      final com.intellij.openapi.editor.Document document=viewProvider == null ? null : viewProvider.getDocument();
      if (document == null || virtualFile.getFileType().isBinary())       return;
      final LocalInspectionsPass pass=new LocalInspectionsPass(file,document,0,file.getTextLength(),LocalInspectionsPass.EMPTY_PRIORITY_RANGE,true);
      try {
        final List<LocalInspectionToolWrapper> lTools=new ArrayList<LocalInspectionToolWrapper>();
        for (        Tools tool : localTools) {
          final LocalInspectionToolWrapper enabledTool=(LocalInspectionToolWrapper)tool.getEnabledTool(file);
          if (enabledTool != null) {
            lTools.add(enabledTool);
          }
        }
        pass.doInspectInBatch(inspectionManager,lTools);
        JobLauncher.getInstance().invokeConcurrentlyUnderProgress(globalSimpleTools,myProgressIndicator,false,new Processor<Tools>(){
          @Override public boolean process(          Tools tools){
            GlobalInspectionToolWrapper toolWrapper=(GlobalInspectionToolWrapper)tools.getTool();
            GlobalSimpleInspectionTool tool=(GlobalSimpleInspectionTool)toolWrapper.getTool();
            ProblemsHolder problemsHolder=new ProblemsHolder(inspectionManager,file,false);
            ProblemDescriptionsProcessor problemDescriptionProcessor=getProblemDescriptionProcessor(toolWrapper,map);
            tool.checkFile(file,inspectionManager,problemsHolder,GlobalInspectionContextImpl.this,problemDescriptionProcessor);
            InspectionToolPresentation toolPresentation=getPresentation(toolWrapper);
            LocalDescriptorsUtil.addProblemDescriptors(problemsHolder.getResults(),false,GlobalInspectionContextImpl.this,null,CONVERT,toolPresentation);
            return true;
          }
        }
);
      }
 catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      IndexNotReadyException e) {
        throw e;
      }
catch (      Exception e) {
        LOG.error("In file: " + file,e);
      }
catch (      AssertionError e) {
        LOG.error("In file: " + file,e);
      }
 finally {
        InjectedLanguageManager.getInstance(myProject).dropFileCaches(file);
      }
    }
  }
);
  for (  Tools tools : globalSimpleTools) {
    GlobalInspectionToolWrapper toolWrapper=(GlobalInspectionToolWrapper)tools.getTool();
    GlobalSimpleInspectionTool tool=(GlobalSimpleInspectionTool)toolWrapper.getTool();
    ProblemDescriptionsProcessor problemDescriptionProcessor=getProblemDescriptionProcessor(toolWrapper,map);
    tool.inspectionFinished(inspectionManager,this,problemDescriptionProcessor);
  }
}
