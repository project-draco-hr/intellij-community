{
  if (ApplicationManager.getApplication().isWriteAccessAllowed()) {
    throw new IncorrectOperationException("Must not start inspections from within write action");
  }
  final InspectionManager inspectionManager=InspectionManager.getInstance(getProject());
  final List<Tools> globalTools=new ArrayList<Tools>();
  final List<Tools> localTools=new ArrayList<Tools>();
  final List<Tools> globalSimpleTools=new ArrayList<Tools>();
  initializeTools(globalTools,localTools,globalSimpleTools);
  appendPairedInspectionsForUnfairTools(globalTools,globalSimpleTools,localTools);
  ((RefManagerImpl)getRefManager()).initializeAnnotators();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      runGlobalTools(scope,inspectionManager,globalTools);
    }
  }
);
  if (runGlobalToolsOnly)   return;
  final Set<VirtualFile> localScopeFiles=scope.toSearchScope() instanceof LocalSearchScope ? new THashSet<VirtualFile>() : null;
  for (  Tools tools : globalSimpleTools) {
    GlobalInspectionToolWrapper toolWrapper=(GlobalInspectionToolWrapper)tools.getTool();
    GlobalSimpleInspectionTool tool=(GlobalSimpleInspectionTool)toolWrapper.getTool();
    tool.inspectionStarted(inspectionManager,this,getPresentation(toolWrapper));
  }
  final boolean headlessEnvironment=ApplicationManager.getApplication().isHeadlessEnvironment();
  final Map<String,InspectionToolWrapper> map=getInspectionWrappersMap(localTools);
  final BlockingQueue<List<PsiFile>> chunksToInspect=new ArrayBlockingQueue<List<PsiFile>>(10);
  startIterateScopeIntoChunks(scope,localScopeFiles,headlessEnvironment,chunksToInspect);
  try {
    for (List<PsiFile> chunk=chunksToInspect.take(); !chunk.isEmpty(); chunk=chunksToInspect.take()) {
      JobLauncher.getInstance().invokeConcurrentlyUnderProgress(chunk,myProgressIndicator,true,false,new Processor<PsiFile>(){
        @Override public boolean process(        final PsiFile file){
          return inspectFile(file,inspectionManager,localTools,globalSimpleTools,map);
        }
      }
);
    }
  }
 catch (  InterruptedException ignored) {
  }
  for (  Tools tools : globalSimpleTools) {
    GlobalInspectionToolWrapper toolWrapper=(GlobalInspectionToolWrapper)tools.getTool();
    GlobalSimpleInspectionTool tool=(GlobalSimpleInspectionTool)toolWrapper.getTool();
    ProblemDescriptionsProcessor problemDescriptionProcessor=getProblemDescriptionProcessor(toolWrapper,map);
    tool.inspectionFinished(inspectionManager,this,problemDescriptionProcessor);
  }
}
