{
  Document document=PsiDocumentManager.getInstance(getProject()).getDocument(file);
  if (document == null)   return true;
  final LocalInspectionsPass pass=new LocalInspectionsPass(file,document,0,file.getTextLength(),LocalInspectionsPass.EMPTY_PRIORITY_RANGE,true,HighlightInfoProcessor.getEmpty());
  try {
    final List<LocalInspectionToolWrapper> lTools=getWrappersFromTools(localTools,file);
    pass.doInspectInBatch(this,inspectionManager,lTools);
    JobLauncher.getInstance().invokeConcurrentlyUnderProgress(globalSimpleTools,myProgressIndicator,false,new Processor<Tools>(){
      @Override public boolean process(      Tools tools){
        GlobalInspectionToolWrapper toolWrapper=(GlobalInspectionToolWrapper)tools.getTool();
        GlobalSimpleInspectionTool tool=(GlobalSimpleInspectionTool)toolWrapper.getTool();
        ProblemsHolder problemsHolder=new ProblemsHolder(inspectionManager,file,false);
        ProblemDescriptionsProcessor problemDescriptionProcessor=getProblemDescriptionProcessor(toolWrapper,wrappersMap);
        tool.checkFile(file,inspectionManager,problemsHolder,GlobalInspectionContextImpl.this,problemDescriptionProcessor);
        InspectionToolPresentation toolPresentation=getPresentation(toolWrapper);
        LocalDescriptorsUtil.addProblemDescriptors(problemsHolder.getResults(),false,GlobalInspectionContextImpl.this,null,CONVERT,toolPresentation);
        return true;
      }
    }
);
  }
 catch (  ProcessCanceledException e) {
    final Throwable cause=e.getCause();
    if (cause == null) {
      throw e;
    }
    LOG.error("In file: " + file,cause);
  }
catch (  IndexNotReadyException e) {
    throw e;
  }
catch (  Throwable e) {
    LOG.error("In file: " + file,e);
  }
 finally {
    InjectedLanguageManager.getInstance(getProject()).dropFileCaches(file);
  }
  return true;
}
