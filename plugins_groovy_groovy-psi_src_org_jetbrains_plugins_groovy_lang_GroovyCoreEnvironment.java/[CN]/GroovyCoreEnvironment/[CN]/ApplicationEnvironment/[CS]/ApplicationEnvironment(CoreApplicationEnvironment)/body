{
  appEnvironment.registerFileType(GroovyFileType.GROOVY_FILE_TYPE,GroovyFileType.DEFAULT_EXTENSION);
  appEnvironment.addExplicitExtension(SyntaxHighlighterFactory.LANGUAGE_FACTORY,GroovyLanguage.INSTANCE,new GroovySyntaxHighlighterFactory());
  appEnvironment.addExplicitExtension(LanguageParserDefinitions.INSTANCE,GroovyLanguage.INSTANCE,new GroovyParserDefinition());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GrMethodComparator.EP_NAME,GrMethodComparator.class);
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),NonCodeMembersContributor.EP_NAME,NonCodeMembersContributor.class);
  appEnvironment.addExtension(NonCodeMembersContributor.EP_NAME,new GebBrowserMemberContributor());
  appEnvironment.addExtension(NonCodeMembersContributor.EP_NAME,new GebJUnitTestMemberContributor());
  appEnvironment.addExtension(NonCodeMembersContributor.EP_NAME,new GebModuleMemberContributor());
  appEnvironment.addExtension(NonCodeMembersContributor.EP_NAME,new GebPageMemberContributor());
  appEnvironment.addExtension(NonCodeMembersContributor.EP_NAME,new GebSpockTestMemberContributor());
  appEnvironment.addExtension(NonCodeMembersContributor.EP_NAME,new GebTestNGTestMemberContributor());
  appEnvironment.addExtension(NonCodeMembersContributor.EP_NAME,new GrCollectionTypeMembersProvider());
  appEnvironment.addExtension(NonCodeMembersContributor.EP_NAME,new MixinMemberContributor());
  appEnvironment.addExtension(NonCodeMembersContributor.EP_NAME,new SpockMemberContributor());
  appEnvironment.addExtension(NonCodeMembersContributor.EP_NAME,new XmlMarkupBuilderNonCodeMemberContributor());
  appEnvironment.addExtension(NonCodeMembersContributor.EP_NAME,new DGMMemberContributor());
  appEnvironment.addExtension(NonCodeMembersContributor.EP_NAME,new SwingBuilderNonCodeMemberContributor());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),DefaultImportContributor.EP_NAME,DefaultImportContributor.class);
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),AstTransformContributor.EP_NAME,AstTransformContributor.class);
  appEnvironment.addExtension(AstTransformContributor.EP_NAME,new AutoCloneContributor());
  appEnvironment.addExtension(AstTransformContributor.EP_NAME,new AutoExternalizeContributor());
  appEnvironment.addExtension(AstTransformContributor.EP_NAME,new ConstructorAnnotationsProcessor());
  appEnvironment.addExtension(AstTransformContributor.EP_NAME,new DelegatedMethodsContributor());
  appEnvironment.addExtension(AstTransformContributor.EP_NAME,new GrInheritConstructorContributor());
  appEnvironment.addExtension(AstTransformContributor.EP_NAME,new LoggingContributor());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),ClosureMissingMethodContributor.EP_NAME,ClosureMissingMethodContributor.class);
  appEnvironment.addExtension(ClosureMissingMethodContributor.EP_NAME,new PluginXmlClosureMemberContributor());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GrVariableEnhancer.EP_NAME,GrVariableEnhancer.class);
  appEnvironment.addExtension(GrVariableEnhancer.EP_NAME,new ClosureAsAnonymousParameterEnhancer());
  appEnvironment.addExtension(GrVariableEnhancer.EP_NAME,new ClosureParameterEnhancer());
  appEnvironment.addExtension(GrVariableEnhancer.EP_NAME,new ClosureParamsEnhancer());
  appEnvironment.addExtension(GrVariableEnhancer.EP_NAME,new GppClosureParameterTypeProvider());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GrReferenceTypeEnhancer.EP_NAME,GrReferenceTypeEnhancer.class);
  appEnvironment.addExtension(GrReferenceTypeEnhancer.EP_NAME,new GroovyMapValueTypeEnhancer());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GrTypeConverter.EP_NAME,GrTypeConverter.class);
  appEnvironment.addExtension(GrTypeConverter.EP_NAME,new ClosureToSamConverter());
  appEnvironment.addExtension(GrTypeConverter.EP_NAME,new GrBooleanTypeConverter());
  appEnvironment.addExtension(GrTypeConverter.EP_NAME,new GrContainerConverter());
  appEnvironment.addExtension(GrTypeConverter.EP_NAME,new GrContainerTypeConverter());
  appEnvironment.addExtension(GrTypeConverter.EP_NAME,new GrGenericTypeConverter());
  appEnvironment.addExtension(GrTypeConverter.EP_NAME,new GrNumberConverter());
  appEnvironment.addExtension(GrTypeConverter.EP_NAME,new GrStringConverter());
  appEnvironment.addExtension(GrTypeConverter.EP_NAME,new GrStringTypeConverter());
  appEnvironment.addExtension(GrTypeConverter.EP_NAME,new GppTypeConverter());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GroovyExpectedTypesContributor.EP_NAME,GroovyExpectedTypesContributor.class);
  appEnvironment.addExtension(GroovyExpectedTypesContributor.EP_NAME,new GppExpectedTypesContributor());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GroovyScriptTypeDetector.EP_NAME,GroovyScriptTypeDetector.class);
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GroovyNamedArgumentProvider.EP_NAME,GroovyNamedArgumentProvider.class);
  appEnvironment.addExtension(GroovyNamedArgumentProvider.EP_NAME,new GroovyConstructorNamedArgumentProvider());
  appEnvironment.addExtension(GroovyNamedArgumentProvider.EP_NAME,new GroovyMethodReturnNamedArgumentProvider());
  appEnvironment.addExtension(GroovyNamedArgumentProvider.EP_NAME,new GroovySourceCodeNamedArgumentProvider());
  appEnvironment.addExtension(GroovyNamedArgumentProvider.EP_NAME,new SwingBuilderNamedArgumentProvider());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GroovyMapContentProvider.EP_NAME,GroovyMapContentProvider.class);
  appEnvironment.addExtension(GroovyMapContentProvider.EP_NAME,new ConfigSlurperMapContentProvider());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GroovyUnresolvedHighlightFilter.EP_NAME,GroovyUnresolvedHighlightFilter.class);
  appEnvironment.addExtension(GroovyUnresolvedHighlightFilter.EP_NAME,new GroovyUnresolvedReferenceFilterByFile());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GroovyUnresolvedHighlightFileFilter.EP_NAME,GroovyUnresolvedHighlightFileFilter.class);
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GrCallExpressionTypeCalculator.EP_NAME,GrCallExpressionTypeCalculator.class);
  appEnvironment.addExtension(GrCallExpressionTypeCalculator.EP_NAME,new DefaultCallExpressionTypeCalculator());
  appEnvironment.addExtension(GrCallExpressionTypeCalculator.EP_NAME,new GrDescriptorReturnTypeCalculator());
  appEnvironment.addExtension(GrCallExpressionTypeCalculator.EP_NAME,new GrDGMTypeCalculator());
  appEnvironment.addExtension(GrCallExpressionTypeCalculator.EP_NAME,new GrWithTraitTypeCalculator());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GroovyClassDescriptor.EP_NAME,GroovyClassDescriptor.class);
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GroovyMethodDescriptorExtension.EP_NAME,GroovyMethodDescriptorExtension.class);
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),PsiEnhancerCategory.EP_NAME,PsiEnhancerCategory.class);
  appEnvironment.addExtension(PsiEnhancerCategory.EP_NAME,new GrExpressionCategory());
  appEnvironment.addExtension(PsiEnhancerCategory.EP_NAME,new PsiClassCategory());
  appEnvironment.addExtension(PsiEnhancerCategory.EP_NAME,new PsiElementCategory());
  appEnvironment.addExtension(PsiEnhancerCategory.EP_NAME,new PsiExpressionCategory());
  appEnvironment.addExtension(PsiEnhancerCategory.EP_NAME,new PsiMethodCategory());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GdslMembersProvider.EP_NAME,GdslMembersProvider.class);
  appEnvironment.addExtension(GdslMembersProvider.EP_NAME,new GdkMethodDslProvider());
  appEnvironment.addExtension(GdslMembersProvider.EP_NAME,new GroovyDslDefaultMembers());
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GroovyFrameworkConfigNotification.EP_NAME,GroovyFrameworkConfigNotification.class);
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),GrMethodMayBeStaticInspectionFilter.EP_NAME,GrMethodMayBeStaticInspectionFilter.class);
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),CustomAnnotationChecker.EP_NAME,CustomAnnotationChecker.class);
  appEnvironment.addExtension(CustomAnnotationChecker.EP_NAME,new AnnotationCollectorChecker());
  appEnvironment.addExtension(CustomAnnotationChecker.EP_NAME,new BaseScriptAnnotationChecker());
  appEnvironment.addExtension(CustomAnnotationChecker.EP_NAME,new DelegatesToAnnotationChecker());
  appEnvironment.addExtension(CustomAnnotationChecker.EP_NAME,new FieldAnnotationChecker());
  appEnvironment.addExtension(CustomAnnotationChecker.EP_NAME,new GrabAnnotationChecker());
  appEnvironment.addExtension(CustomAnnotationChecker.EP_NAME,new GrAliasAnnotationChecker());
  appEnvironment.addExtension(CustomAnnotationChecker.EP_NAME,new NewifyAnnotationChecker());
  appEnvironment.addExtension(CustomAnnotationChecker.EP_NAME,new TypeCheckedAnnotationChecker());
  appEnvironment.addExtension(ImplicitPropertyUsageProvider.EP_NAME,new DGMImplicitPropertyUsageProvider());
  appEnvironment.addExtension(ImplicitUsageProvider.EP_NAME,new GppImplicitUsageProvider());
  appEnvironment.addExtension(ImplicitUsageProvider.EP_NAME,new GrImplicitUsageProvider());
  appEnvironment.addExtension(FileTypeRegistry.FileTypeDetector.EP_NAME,new GroovyHashBangFileTypeDetector());
  appEnvironment.addExtension(ClsCustomNavigationPolicy.EP_NAME,new GroovyClsCustomNavigationPolicy());
  appEnvironment.addExtension(PomDeclarationSearcher.EP_NAME,new GebContentDeclarationSearcher());
  appEnvironment.addExtension(PomDeclarationSearcher.EP_NAME,new SpockPomDeclarationSearcher());
  appEnvironment.addExplicitExtension(LanguageConstantExpressionEvaluator.INSTANCE,GroovyLanguage.INSTANCE,new GroovyConstantExpressionEvaluator());
  appEnvironment.addExplicitExtension(ExpressionConverter.EP,GroovyLanguage.INSTANCE,new GroovyExpressionConverter());
  appEnvironment.addExplicitExtension(LanguageAnnotators.INSTANCE,GroovyLanguage.INSTANCE,new GrAnnotatorImpl());
  appEnvironment.addExplicitExtension(LanguageAnnotators.INSTANCE,GroovyLanguage.INSTANCE,new GroovyDslAnnotator());
  appEnvironment.addExplicitExtension(LanguageStructureViewBuilder.INSTANCE,GroovyLanguage.INSTANCE,new GroovyStructureViewFactory());
  appEnvironment.addExplicitExtension(LanguageFolding.INSTANCE,GroovyLanguage.INSTANCE,new GroovyFoldingBuilder());
  appEnvironment.addExplicitExtension(LanguageFindUsages.INSTANCE,GroovyLanguage.INSTANCE,new GroovyFindUsagesProvider());
  appEnvironment.addExplicitExtension(ReferenceAdjuster.Extension.INSTANCE,GroovyLanguage.INSTANCE,new GrReferenceAdjuster());
  appEnvironment.addExtension(PsiReferenceContributor.EP_NAME,new GroovyMethodArgumentReferenceContributor());
  appEnvironment.addExtension(PsiReferenceContributor.EP_NAME,new GppReferenceContributor());
  appEnvironment.addExtension(PsiReferenceContributor.EP_NAME,new GroovyReferenceContributor());
  appEnvironment.addExtension(UseScopeEnlarger.EP_NAME,new GrPrivateFieldScopeEnlarger());
  DirectClassInheritorsSearch.INSTANCE.registerExecutor(new GroovyDirectInheritorsSearcher());
  appEnvironment.addExtension(MethodReferencesSearch.EP_NAME,new AccessorMethodReferencesSearcher());
  appEnvironment.addExtension(MethodReferencesSearch.EP_NAME,new MethodLateBoundReferencesSearcher());
  appEnvironment.addExtension(MethodReferencesSearch.EP_NAME,new GroovyConstructorUsagesSearcher());
  appEnvironment.addExtension(MethodReferencesSearch.EP_NAME,new GroovyReflectedMethodReferenceSearcher());
  appEnvironment.addExtension(MethodReferencesSearch.EP_NAME,new GrLiteralMethodSearcher());
  appEnvironment.addExtension(AnnotatedElementsSearch.EP_NAME,new AnnotatedMembersSearcher());
  appEnvironment.addExtension(SuperMethodsSearch.EP_NAME,new GDKSuperMethodSearcher());
  appEnvironment.addExtension(DefinitionsScopedSearch.EP_NAME,new GroovyImplementationSearch());
  appEnvironment.addExtension(StubIndexExtension.EP_NAME,new GrAnnotationMethodNameIndex());
  appEnvironment.addExtension(StubIndexExtension.EP_NAME,new GrAnnotatedMemberIndex());
  appEnvironment.addExtension(StubIndexExtension.EP_NAME,new GrAnonymousClassIndex());
  appEnvironment.addExtension(StubIndexExtension.EP_NAME,new GrDirectInheritorsIndex());
  appEnvironment.addExtension(StubIndexExtension.EP_NAME,new GrFieldNameIndex());
  appEnvironment.addExtension(StubIndexExtension.EP_NAME,new GrFullClassNameIndex());
  appEnvironment.addExtension(StubIndexExtension.EP_NAME,new GrFullScriptNameIndex());
  appEnvironment.addExtension(StubIndexExtension.EP_NAME,new GrMethodNameIndex());
  appEnvironment.addExtension(StubIndexExtension.EP_NAME,new GrScriptClassNameIndex());
  appEnvironment.addExtension(StubIndexExtension.EP_NAME,new GrScriptClassNameIndex());
  appEnvironment.addExtension(FileBasedIndexExtension.EXTENSION_POINT_NAME,new GroovyDslFileIndex());
  appEnvironment.addExtension(ReferencesSearch.EP_NAME,new ConstructorReferencesSearcher());
  appEnvironment.addExtension(ReferencesSearch.EP_NAME,new GrAliasedImportedElementSearcher());
  appEnvironment.addExtension(ReferencesSearch.EP_NAME,new AccessorReferencesSearcher());
  appEnvironment.addExtension(ReferencesSearch.EP_NAME,new GroovyTraitFieldSearcher());
  appEnvironment.addExtension(IconProvider.EXTENSION_POINT_NAME,new GroovyIconProvider());
  appEnvironment.addExtension(ResolveScopeProvider.EP_NAME,new GroovyResolveScopeProvider());
  appEnvironment.addExtension(WolfTheProblemSolver.FILTER_EP_NAME,new GroovyProblemFileHighlightFilter());
  appEnvironment.addExtension(ClassTypePointerFactory.EP_NAME,new GrClassReferenceTypePointerFactory());
  appEnvironment.registerApplicationService(GroovyQuickFixFactory.class,new CoreGroovyQuickFixFactory());
  appEnvironment.registerApplicationComponent(DslActivationStatus.class,new DslActivationStatus());
  appEnvironment.addExtension(ReadWriteAccessDetector.EP_NAME,new GroovyReadWriteAccessDetector());
}
