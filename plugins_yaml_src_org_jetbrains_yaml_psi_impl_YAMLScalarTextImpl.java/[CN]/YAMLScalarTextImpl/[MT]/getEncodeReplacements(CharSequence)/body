{
  if (!StringUtil.endsWithChar(input,'\n')) {
    throw new IllegalArgumentException("Should end with a line break");
  }
  int indent=locateIndent();
  if (indent == 0) {
    indent=YAMLUtil.getIndentToThisElement(this) + DEFAULT_CONTENT_INDENT;
  }
  final String indentString=StringUtil.repeatSymbol(' ',indent);
  final List<Pair<TextRange,String>> result=new ArrayList<>();
  int currentLength=0;
  boolean currentLineIsIndented=input.length() > 0 && input.charAt(0) == ' ';
  for (int i=0; i < input.length(); ++i) {
    if (input.charAt(i) == '\n') {
      final String replacement;
      if (i + 1 >= input.length() || YAMLGrammarCharUtil.isSpaceLike(input.charAt(i + 1)) || input.charAt(i + 1) == '\n' || currentLineIsIndented) {
        replacement="\n" + indentString;
      }
 else {
        replacement="\n\n" + indentString;
      }
      result.add(Pair.create(TextRange.from(i,1),replacement));
      currentLength=0;
      currentLineIsIndented=i + 1 < input.length() && input.charAt(i + 1) == ' ';
      continue;
    }
    if (currentLength > MAX_SCALAR_LENGTH_PREDEFINED && input.charAt(i) == ' ' && i + 1 < input.length() && YAMLGrammarCharUtil.isNonSpaceChar(input.charAt(i + 1))) {
      result.add(Pair.create(TextRange.from(i,1),"\n" + indentString));
      currentLength=0;
      continue;
    }
    currentLength++;
  }
  return result;
}
