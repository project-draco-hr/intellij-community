{
  final PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
  if (myCommonIsInLeftLeft) {
    final PyExpression newLeftExpression=invertExpression(leftExpression,elementGenerator);
    if (myCommonIsInRightLeft) {
      final PsiElement operator=getLeftestOperator(rightExpression);
      final PyBinaryExpression binaryExpression=elementGenerator.createBinaryExpression(operator.getText(),newLeftExpression,getLargeRightExpression(rightExpression,project));
      leftExpression.replace(binaryExpression);
      rightExpression.delete();
    }
 else {
      final String operator=invertOperator(assertNotNull(rightExpression.getPsiOperator()));
      final PyBinaryExpression binaryExpression=elementGenerator.createBinaryExpression(operator,newLeftExpression,rightExpression.getLeftExpression());
      leftExpression.replace(binaryExpression);
      rightExpression.delete();
    }
  }
 else {
    if (myCommonIsInRightLeft) {
      final PsiElement operator=getLeftestOperator(rightExpression);
      final PyBinaryExpression binaryExpression=elementGenerator.createBinaryExpression(operator.getText(),leftExpression,getLargeRightExpression(rightExpression,project));
      leftExpression.replace(binaryExpression);
      rightExpression.delete();
    }
 else {
      PyExpression expression=rightExpression.getLeftExpression();
      if (expression instanceof PyBinaryExpression) {
        expression=invertExpression((PyBinaryExpression)expression,elementGenerator);
      }
      final String operator=invertOperator(assertNotNull(rightExpression.getPsiOperator()));
      final PyBinaryExpression binaryExpression=elementGenerator.createBinaryExpression(operator,leftExpression,expression);
      leftExpression.replace(binaryExpression);
      rightExpression.delete();
    }
  }
}
