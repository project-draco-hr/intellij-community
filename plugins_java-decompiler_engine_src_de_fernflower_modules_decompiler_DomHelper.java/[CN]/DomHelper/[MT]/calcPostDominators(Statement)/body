{
  HashMap<Statement,FastFixedSet<Statement>> lists=new HashMap<Statement,FastFixedSet<Statement>>();
  StrongConnectivityHelper schelper=new StrongConnectivityHelper(container);
  List<List<Statement>> components=schelper.getComponents();
  List<Statement> lstStats=container.getPostReversePostOrderList(StrongConnectivityHelper.getExitReps(components));
  FastFixedSetFactory<Statement> factory=new FastFixedSetFactory<Statement>(lstStats);
  FastFixedSet<Statement> setFlagNodes=factory.spawnEmptySet();
  setFlagNodes.setAllElements();
  FastFixedSet<Statement> initSet=factory.spawnEmptySet();
  initSet.setAllElements();
  for (  List<Statement> lst : components) {
    FastFixedSet<Statement> tmpSet;
    if (StrongConnectivityHelper.isExitComponent(lst)) {
      tmpSet=factory.spawnEmptySet();
      tmpSet.addAll(lst);
    }
 else {
      tmpSet=initSet.getCopy();
    }
    for (    Statement stat : lst) {
      lists.put(stat,tmpSet);
    }
  }
  do {
    for (    Statement stat : lstStats) {
      if (!setFlagNodes.contains(stat)) {
        continue;
      }
      setFlagNodes.remove(stat);
      FastFixedSet<Statement> doms=lists.get(stat);
      FastFixedSet<Statement> domsSuccs=factory.spawnEmptySet();
      List<Statement> lstSuccs=stat.getNeighbours(StatEdge.TYPE_REGULAR,Statement.DIRECTION_FORWARD);
      for (int j=0; j < lstSuccs.size(); j++) {
        Statement succ=lstSuccs.get(j);
        FastFixedSet<Statement> succlst=lists.get(succ);
        if (j == 0) {
          domsSuccs.union(succlst);
        }
 else {
          domsSuccs.intersection(succlst);
        }
      }
      if (!domsSuccs.contains(stat)) {
        domsSuccs.add(stat);
      }
      if (!InterpreterUtil.equalObjects(domsSuccs,doms)) {
        lists.put(stat,domsSuccs);
        List<Statement> lstPreds=stat.getNeighbours(StatEdge.TYPE_REGULAR,Statement.DIRECTION_BACKWARD);
        for (        Statement pred : lstPreds) {
          setFlagNodes.add(pred);
        }
      }
    }
  }
 while (!setFlagNodes.isEmpty());
  VBStyleCollection<List<Integer>,Integer> ret=new VBStyleCollection<List<Integer>,Integer>();
  List<Statement> lstRevPost=container.getReversePostOrderList();
  final HashMap<Integer,Integer> mapSortOrder=new HashMap<Integer,Integer>();
  for (int i=0; i < lstRevPost.size(); i++) {
    mapSortOrder.put(lstRevPost.get(i).id,i);
  }
  for (  Statement st : lstStats) {
    List<Integer> lstPosts=new ArrayList<Integer>();
    for (    Statement stt : lists.get(st)) {
      lstPosts.add(stt.id);
    }
    Collections.sort(lstPosts,new Comparator<Integer>(){
      public int compare(      Integer o1,      Integer o2){
        return mapSortOrder.get(o1).compareTo(mapSortOrder.get(o2));
      }
    }
);
    if (lstPosts.size() > 1 && lstPosts.get(0).intValue() == st.id) {
      lstPosts.add(lstPosts.remove(0));
    }
    ret.addWithKey(lstPosts,st.id);
  }
  return ret;
}
