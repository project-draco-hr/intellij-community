{
  final Set<String> keywordArgumentNames=new HashSet<>();
  boolean seenKeywordArgument=false;
  boolean seenKeywordContainer=false;
  boolean seenPositionalContainer=false;
  for (  PyExpression argument : callExpression.getArguments()) {
    if (argument instanceof PyKeywordArgument) {
      seenKeywordArgument=true;
      final String keyword=((PyKeywordArgument)argument).getKeyword();
      boolean reported=false;
      if (keywordArgumentNames.contains(keyword)) {
        registerProblem(argument,"Keyword argument repeated",new PyRemoveArgumentQuickFix());
        reported=true;
      }
      if (seenPositionalContainer && !reported) {
        for (        LanguageLevel level : myVersionsToProcess) {
          if (level.isOlderThan(LanguageLevel.PYTHON26)) {
            registerProblem(argument,"Python versions < 2.6 do not allow keyword arguments after *expression",new PyRemoveArgumentQuickFix());
            reported=true;
            break;
          }
        }
      }
      if (seenKeywordContainer && !reported) {
        for (        LanguageLevel level : myVersionsToProcess) {
          if (level.isOlderThan(LanguageLevel.PYTHON35)) {
            registerProblem(argument,"Python versions < 3.5 do not allow keyword arguments after **expression",new PyRemoveArgumentQuickFix());
            break;
          }
        }
      }
      keywordArgumentNames.add(keyword);
    }
 else     if (argument instanceof PyStarArgument) {
      final PyStarArgument starArgument=(PyStarArgument)argument;
      if (starArgument.isKeyword()) {
        if (seenKeywordContainer) {
          for (          LanguageLevel level : myVersionsToProcess) {
            if (level.isOlderThan(LanguageLevel.PYTHON35)) {
              registerProblem(argument,"Python versions < 3.5 do not allow duplicate **expressions",new PyRemoveArgumentQuickFix());
              break;
            }
          }
        }
        seenKeywordContainer=true;
      }
 else {
        if (seenPositionalContainer) {
          for (          LanguageLevel level : myVersionsToProcess) {
            if (level.isOlderThan(LanguageLevel.PYTHON35)) {
              registerProblem(argument,"Python versions < 3.5 do not allow duplicate *expressions",new PyRemoveArgumentQuickFix());
              break;
            }
          }
        }
        seenPositionalContainer=true;
      }
    }
 else {
      if (seenKeywordArgument) {
        registerProblem(argument,"Positional argument after keyword argument",new PyRemoveArgumentQuickFix());
      }
 else       if (seenPositionalContainer) {
        for (        LanguageLevel level : myVersionsToProcess) {
          if (level.isOlderThan(LanguageLevel.PYTHON35)) {
            registerProblem(argument,"Python versions < 3.5 do not allow positional arguments after *expression",new PyRemoveArgumentQuickFix());
            break;
          }
        }
      }
 else       if (seenKeywordContainer) {
        registerProblem(argument,"Positional argument after **expression",new PyRemoveArgumentQuickFix());
      }
    }
  }
}
