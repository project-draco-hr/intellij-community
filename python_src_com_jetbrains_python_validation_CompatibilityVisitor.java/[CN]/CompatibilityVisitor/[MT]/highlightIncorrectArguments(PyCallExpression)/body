{
  final Set<String> keywordArgumentNames=new HashSet<String>();
  boolean seenKeywordOrContainerArgument=false;
  boolean seenKeywordContainer=false;
  boolean seenPositionalContainer=false;
  for (  PyExpression argument : callExpression.getArguments()) {
    if (argument instanceof PyKeywordArgument) {
      seenKeywordOrContainerArgument=true;
      final String keyword=((PyKeywordArgument)argument).getKeyword();
      if (keywordArgumentNames.contains(keyword)) {
        registerProblem(argument,PyBundle.message("INSP.duplicate.argument"),new PyRemoveArgumentQuickFix());
      }
 else       if (seenKeywordContainer) {
        registerProblem(argument,PyBundle.message("INSP.cannot.appear.past.keyword.arg"),new PyRemoveArgumentQuickFix());
      }
      keywordArgumentNames.add(keyword);
    }
 else     if (argument instanceof PyStarArgument) {
      seenKeywordOrContainerArgument=true;
      final PyStarArgument starArgument=(PyStarArgument)argument;
      if (starArgument.isKeyword()) {
        if (seenKeywordContainer) {
          registerProblem(argument,PyBundle.message("INSP.duplicate.doublestar.arg"),new PyRemoveArgumentQuickFix());
        }
        seenKeywordContainer=true;
      }
 else {
        if (seenPositionalContainer) {
          registerProblem(argument,PyBundle.message("INSP.duplicate.star.arg"),new PyRemoveArgumentQuickFix());
        }
        seenPositionalContainer=true;
      }
    }
 else {
      if (seenKeywordOrContainerArgument) {
        registerProblem(argument,PyBundle.message("INSP.cannot.appear.past.keyword.arg"),new PyRemoveArgumentQuickFix());
      }
    }
  }
}
