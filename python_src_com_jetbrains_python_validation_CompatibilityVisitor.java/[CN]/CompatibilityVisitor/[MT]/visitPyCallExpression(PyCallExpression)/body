{
  super.visitPyCallExpression(node);
  int len=0;
  StringBuilder message=new StringBuilder(myCommonMessage);
  for (int i=0; i != myVersionsToProcess.size(); ++i) {
    LanguageLevel languageLevel=myVersionsToProcess.get(i);
    if (!languageLevel.isPy3K()) {
      final PsiElement firstChild=node.getFirstChild();
      if (firstChild != null) {
        final String name=firstChild.getText();
        if (PyNames.SUPER.equals(name)) {
          final PyArgumentList argumentList=node.getArgumentList();
          if (argumentList != null && argumentList.getArguments().length == 0) {
            len=appendLanguageLevel(message,len,languageLevel);
          }
        }
      }
    }
  }
  commonRegisterProblem(message," not support this syntax. super() should have arguments in Python 2",len,node,null);
  if (myVersionsToProcess.contains(LanguageLevel.PYTHON30) || myVersionsToProcess.contains(LanguageLevel.PYTHON31) || myVersionsToProcess.contains(LanguageLevel.PYTHON32)) {
    if (node.getCallee() != null && "isinstance".equals(node.getCallee().getText())) {
      PyExpression[] args=node.getArguments();
      if (args.length > 1) {
        PyExpression baseString=args[1];
        if ("basestring".equals(baseString.getText())) {
          PsiReference ref=baseString.getReference();
          if (ref != null) {
            PsiElement res=ref.resolve();
            if (res != null) {
              ProjectFileIndex ind=ProjectRootManager.getInstance(node.getProject()).getFileIndex();
              PsiFile file=res.getContainingFile();
              if (file != null && ind.isInLibraryClasses(file.getVirtualFile())) {
                registerProblem(baseString,"basestring type is not available in py3");
              }
            }
 else {
              registerProblem(baseString,"basestring type is not available in py3");
            }
          }
        }
      }
    }
  }
}
