{
  super.visitPyExceptBlock(node);
  if (PydevConsoleRunner.isInPydevConsole(node))   return;
  PyExpression exceptClass=node.getExceptClass();
  if (exceptClass != null) {
    if (myVersionsToProcess.contains(LanguageLevel.PYTHON24) || myVersionsToProcess.contains(LanguageLevel.PYTHON25)) {
      PsiElement element=exceptClass.getNextSibling();
      while (element instanceof PsiWhiteSpace) {
        element=element.getNextSibling();
      }
      if (element != null && "as".equals(element.getText())) {
        registerProblem(node,myCommonMessage + "2.4, 2.5 do not support this syntax.");
      }
    }
    int len=0;
    StringBuilder message=new StringBuilder(myCommonMessage);
    for (int i=0; i != myVersionsToProcess.size(); ++i) {
      LanguageLevel languageLevel=myVersionsToProcess.get(i);
      if (languageLevel.isPy3K()) {
        PsiElement element=exceptClass.getNextSibling();
        while (element instanceof PsiWhiteSpace) {
          element=element.getNextSibling();
        }
        if (element != null && ",".equals(element.getText())) {
          len=appendLanguageLevel(message,len,languageLevel);
        }
      }
    }
    commonRegisterProblem(message," not support this syntax.",len,node,new ReplaceExceptPartQuickFix());
  }
}
