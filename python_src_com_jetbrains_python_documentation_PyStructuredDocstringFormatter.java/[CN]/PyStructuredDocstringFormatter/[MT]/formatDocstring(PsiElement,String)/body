{
  Module module=ModuleUtilCore.findModuleForPsiElement(element);
  if (module == null) {
    final Module[] modules=ModuleManager.getInstance(element.getProject()).getModules();
    if (modules.length == 0)     return Lists.newArrayList();
    module=modules[0];
  }
  if (module == null)   return Lists.newArrayList();
  final PyDocumentationSettings documentationSettings=PyDocumentationSettings.getInstance(module);
  final List<String> result=new ArrayList<String>();
  final String[] lines=PyDocumentationBuilder.removeCommonIndentation(docstring);
  final String preparedDocstring=StringUtil.join(lines,"\n");
  final HelperPackage formatter;
  final StructuredDocStringBase structuredDocString;
  if (documentationSettings.isEpydocFormat(element.getContainingFile()) || DocStringUtil.isEpydocDocString(preparedDocstring)) {
    formatter=PythonHelper.EPYDOC_FORMATTER;
    structuredDocString=new EpydocString(preparedDocstring);
    result.add(formatStructuredDocString(structuredDocString));
  }
 else   if (documentationSettings.isReSTFormat(element.getContainingFile()) || DocStringUtil.isSphinxDocString(preparedDocstring)) {
    formatter=PythonHelper.REST_FORMATTER;
    structuredDocString=new SphinxDocString(preparedDocstring);
  }
 else {
    return null;
  }
  final String output=runExternalTool(module,formatter,docstring);
  if (output != null)   result.add(0,output);
 else   result.add(0,structuredDocString.getDescription());
  return result;
}
