{
  Application app=ApplicationManager.getApplication();
  if (!(app instanceof ApplicationImpl))   return false;
  final ApplicationImpl appImpl=(ApplicationImpl)app;
  if (e instanceof WindowEvent) {
    final WindowEvent we=(WindowEvent)e;
    final Window eventWindow=we.getWindow();
    if (we.getID() == WindowEvent.WINDOW_ACTIVATED || we.getID() == WindowEvent.WINDOW_GAINED_FOCUS) {
      appImpl.myCancelDeactivation=true;
      if (!appImpl.isActive()) {
        OpenAPIAccessor.getApplicationImplAccessor().applyActivation(appImpl,eventWindow);
      }
    }
 else     if (we.getID() == WindowEvent.WINDOW_DEACTIVATED) {
      requestToDeactivateTime.getAndSet(System.currentTimeMillis());
      OpenAPIAccessor.getApplicationImplAccessor().applyDeactivation(appImpl,eventWindow);
      appImpl.myCancelDeactivation=false;
      Timer timer=new Timer(Registry.intValue("app.deactivation.timeout"),new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          if (appImpl.isActiveDelayed() && !appImpl.isDeactivationCanceled()) {
            OpenAPIAccessor.getApplicationImplAccessor().applyDelayedDeactivation(appImpl,eventWindow);
          }
        }
      }
);
      timer.setRepeats(false);
      timer.start();
    }
    if (we.getID() == WindowEvent.WINDOW_DEACTIVATED || we.getID() == WindowEvent.WINDOW_LOST_FOCUS) {
      Component frame=UIUtil.findUltimateParent(eventWindow);
      Component focusOwnerInDeactivatedWindow=eventWindow.getMostRecentFocusOwner();
      IdeFrame[] allProjectFrames=WindowManager.getInstance().getAllProjectFrames();
      if (focusOwnerInDeactivatedWindow != null) {
        for (        IdeFrame ideFrame : allProjectFrames) {
          JFrame aFrame=WindowManager.getInstance().getFrame(ideFrame.getProject());
          if (aFrame.equals(frame)) {
            IdeFocusManager focusManager=IdeFocusManager.getGlobalInstance();
            if (focusManager instanceof FocusManagerImpl) {
              ((FocusManagerImpl)focusManager).setLastFocusedAtDeactivation(ideFrame,focusOwnerInDeactivatedWindow);
            }
          }
        }
      }
    }
  }
  return false;
}
