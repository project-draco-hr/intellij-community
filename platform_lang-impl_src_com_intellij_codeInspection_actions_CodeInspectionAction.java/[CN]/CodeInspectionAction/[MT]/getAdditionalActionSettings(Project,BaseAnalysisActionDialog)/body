{
  final AdditionalPanel panel=new AdditionalPanel();
  final InspectionManagerEx manager=(InspectionManagerEx)InspectionManager.getInstance(project);
  final ProfilesComboBox profiles=(ProfilesComboBox)panel.myBrowseProfilesCombo.getComboBox();
  final InspectionProfileManager profileManager=InspectionProfileManager.getInstance();
  final ProjectInspectionProfileManager projectProfileManager=ProjectInspectionProfileManager.getInstanceImpl(project);
  reloadProfiles(profiles,profileManager,projectProfileManager,manager);
  panel.myBrowseProfilesCombo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final InspectionToolsConfigurable errorConfigurable=createConfigurable(projectProfileManager,profileManager,profiles);
      final MySingleConfigurableEditor editor=new MySingleConfigurableEditor(project,errorConfigurable,manager);
      if (editor.showAndGet()) {
        reloadProfiles(profiles,profileManager,projectProfileManager,manager);
      }
 else {
        final InspectionProfile profile=(InspectionProfile)profiles.getSelectedItem();
        final boolean canExecute=profile != null && profile.isExecutable(project);
        dialog.setOKActionEnabled(canExecute);
      }
    }
  }
);
  profiles.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myExternalProfile=(InspectionProfileImpl)profiles.getSelectedItem();
      final boolean canExecute=myExternalProfile != null && myExternalProfile.isExecutable(project);
      dialog.setOKActionEnabled(canExecute);
      if (canExecute) {
        manager.setProfile(myExternalProfile.getName());
      }
    }
  }
);
  final InspectionProfile profile=(InspectionProfile)profiles.getSelectedItem();
  dialog.setOKActionEnabled(profile != null && profile.isExecutable(project));
  return panel.myAdditionalPanel;
}
