{
  final TypeEvalContext context=TypeEvalContext.codeInsightFallback();
  return String.format("(%s) -> %s",myParameters != null ? StringUtil.join(myParameters,new Function<PyCallableParameter,String>(){
    @Override public String fun(    PyCallableParameter param){
      if (param != null) {
        final StringBuilder builder=new StringBuilder();
        final String name=param.getName();
        final PyType type=param.getType();
        if (name != null) {
          builder.append(name);
          if (type != null) {
            builder.append(": ");
          }
        }
        builder.append(type != null ? type.getName() : PyNames.UNKNOWN_TYPE);
        return builder.toString();
      }
      return PyNames.UNKNOWN_TYPE;
    }
  }
,", ") : "...",myReturnType != null ? myReturnType.getName() : PyNames.UNKNOWN_TYPE);
}
