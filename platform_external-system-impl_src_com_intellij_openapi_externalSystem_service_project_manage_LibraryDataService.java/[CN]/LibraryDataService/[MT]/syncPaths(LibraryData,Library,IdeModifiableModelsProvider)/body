{
  if (externalLibrary.isUnresolved()) {
    return;
  }
  final Map<OrderRootType,Set<String>> toRemove=ContainerUtilRt.newHashMap();
  final Map<OrderRootType,Set<String>> toAdd=ContainerUtilRt.newHashMap();
  for (  LibraryPathType pathType : LibraryPathType.values()) {
    OrderRootType ideType=myLibraryPathTypeMapper.map(pathType);
    HashSet<String> toAddPerType=ContainerUtilRt.newHashSet(externalLibrary.getPaths(pathType));
    toAdd.put(ideType,toAddPerType);
    HashSet<String> toRemovePerType=ContainerUtilRt.newHashSet();
    toRemove.put(ideType,toRemovePerType);
    for (    VirtualFile ideFile : ideLibrary.getFiles(ideType)) {
      String idePath=ExternalSystemApiUtil.getLocalFileSystemPath(ideFile);
      if (!toAddPerType.remove(idePath)) {
        toRemovePerType.add(ideFile.getUrl());
      }
    }
  }
  if (toRemove.isEmpty() && toAdd.isEmpty()) {
    return;
  }
  final Library.ModifiableModel libraryModel=modelsProvider.getModifiableLibraryModel(ideLibrary);
  for (  Map.Entry<OrderRootType,Set<String>> entry : toRemove.entrySet()) {
    for (    String path : entry.getValue()) {
      libraryModel.removeRoot(path,entry.getKey());
    }
  }
  for (  Map.Entry<OrderRootType,Set<String>> entry : toAdd.entrySet()) {
    Map<OrderRootType,Collection<File>> roots=ContainerUtilRt.newHashMap();
    roots.put(entry.getKey(),ContainerUtil.map(entry.getValue(),PATH_TO_FILE));
    registerPaths(roots,libraryModel,externalLibrary.getInternalName());
  }
}
