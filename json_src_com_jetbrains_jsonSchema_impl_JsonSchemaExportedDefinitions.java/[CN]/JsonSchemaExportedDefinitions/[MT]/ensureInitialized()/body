{
synchronized (myLock) {
    if (myInitialized && !myDirty)     return;
    mySchemasIterator.consume(new PairConsumer<Pair<SchemaType,?>,Consumer<Consumer<JsonSchemaObject>>>(){
      @Override public void consume(      Pair<SchemaType,?> key,      Consumer<Consumer<JsonSchemaObject>> consumer){
        if (!myInitialized || !myId2Key.containsValue(key)) {
          consumer.consume(new Consumer<JsonSchemaObject>(){
            @Override public void consume(            JsonSchemaObject object){
              JsonSchemaReader.registerObjectsExportedDefinitions(key,JsonSchemaExportedDefinitions.this,object);
            }
          }
);
        }
      }
    }
);
    myDirty=false;
    myInitialized=true;
  }
}
