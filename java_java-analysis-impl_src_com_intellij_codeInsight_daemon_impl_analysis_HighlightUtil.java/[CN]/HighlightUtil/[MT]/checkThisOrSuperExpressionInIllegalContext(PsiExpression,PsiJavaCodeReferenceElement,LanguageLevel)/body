{
  if (expr instanceof PsiSuperExpression) {
    final PsiElement parent=expr.getParent();
    if (!(parent instanceof PsiReferenceExpression)) {
      final int o=expr.getTextRange().getEndOffset();
      String description=JavaErrorMessages.message("dot.expected.after.super.or.this");
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(o,o + 1).descriptionAndTooltip(description).create();
    }
  }
  PsiClass aClass;
  if (qualifier != null) {
    PsiElement resolved=qualifier.advancedResolve(true).getElement();
    if (resolved != null && !(resolved instanceof PsiClass)) {
      String description=JavaErrorMessages.message("class.expected");
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(qualifier).descriptionAndTooltip(description).create();
    }
    aClass=(PsiClass)resolved;
  }
 else {
    aClass=PsiTreeUtil.getParentOfType(expr,PsiClass.class);
  }
  if (aClass == null)   return null;
  if (!InheritanceUtil.hasEnclosingInstanceInScope(aClass,expr,false,false)) {
    if (!resolvesToImmediateSuperInterface(expr,qualifier,aClass,languageLevel)) {
      return HighlightClassUtil.reportIllegalEnclosingUsage(expr,null,aClass,expr);
    }
    if (expr instanceof PsiSuperExpression) {
      final PsiElement resolved=((PsiReferenceExpression)expr.getParent()).resolve();
      if (resolved instanceof PsiField) {
        String description=JavaErrorMessages.message("is.not.an.enclosing.class",formatClass(aClass));
        return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expr).descriptionAndTooltip(description).create();
      }
    }
  }
  if (qualifier != null && aClass.isInterface() && languageLevel.isAtLeast(LanguageLevel.JDK_1_8)) {
    final PsiClass classT=PsiTreeUtil.getParentOfType(expr,PsiClass.class);
    if (classT != null) {
      final PsiElement parent=expr.getParent();
      final PsiElement resolved=parent instanceof PsiReferenceExpression ? ((PsiReferenceExpression)parent).resolve() : null;
      for (      PsiClass superClass : classT.getSupers()) {
        if (superClass.isInheritor(aClass,true)) {
          String cause=null;
          if (superClass.isInterface()) {
            cause="redundant interface " + format(aClass) + " is extended by ";
          }
 else           if (resolved instanceof PsiMethod && MethodSignatureUtil.findMethodBySuperMethod(superClass,(PsiMethod)resolved,true) != resolved) {
            cause="method " + ((PsiMethod)resolved).getName() + " is overridden in ";
          }
          if (cause != null) {
            return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(qualifier).descriptionAndTooltip(JavaErrorMessages.message("bad.qualifier.in.super.method.reference",cause + formatClass(superClass))).create();
          }
        }
      }
      if (expr instanceof PsiSuperExpression && !classT.isInheritor(aClass,false)) {
        return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(qualifier).descriptionAndTooltip(JavaErrorMessages.message("no.enclosing.instance.in.scope",format(aClass))).create();
      }
    }
  }
  if (expr instanceof PsiThisExpression) {
    final PsiMethod psiMethod=PsiTreeUtil.getParentOfType(expr,PsiMethod.class);
    if (psiMethod == null || psiMethod.getContainingClass() != aClass && !isInsideDefaultMethod(psiMethod,aClass)) {
      if (aClass.isInterface()) {
        return thisNotFoundInInterfaceInfo(expr);
      }
      if (aClass instanceof PsiAnonymousClass && PsiTreeUtil.isAncestor(((PsiAnonymousClass)aClass).getArgumentList(),expr,true)) {
        final PsiClass parentClass=PsiTreeUtil.getParentOfType(aClass,PsiClass.class,true);
        if (parentClass != null && parentClass.isInterface()) {
          return thisNotFoundInInterfaceInfo(expr);
        }
      }
    }
  }
  return null;
}
