{
  final PsiTypeElement castTypeElement=expression.getCastType();
  if (castTypeElement == null)   return null;
  PsiType castType=castTypeElement.getType();
  PsiExpression operand=expression.getOperand();
  if (operand == null)   return null;
  PsiType operandType=operand.getType();
  if (operandType != null && !TypeConversionUtil.areTypesConvertible(operandType,castType) && !RedundantCastUtil.isInPolymorphicCall(expression)) {
    String message=JavaErrorMessages.message("inconvertible.type.cast",JavaHighlightUtil.formatType(operandType),JavaHighlightUtil.formatType(castType));
    return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(message).create();
  }
  if (castType instanceof PsiIntersectionType && PsiUtil.isLanguageLevel8OrHigher(expression)) {
    final PsiTypeElement[] conjuncts=PsiTreeUtil.getChildrenOfType(castTypeElement,PsiTypeElement.class);
    if (conjuncts != null) {
      final List<PsiTypeElement> conjList=new ArrayList<PsiTypeElement>(Arrays.asList(conjuncts));
      for (int i=1; i < conjuncts.length; i++) {
        final PsiTypeElement conjunct=conjuncts[i];
        final PsiType conjType=conjunct.getType();
        if (conjType instanceof PsiClassType) {
          final PsiClass aClass=((PsiClassType)conjType).resolve();
          if (aClass != null && !aClass.isInterface()) {
            final HighlightInfo errorResult=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(conjunct).descriptionAndTooltip(JavaErrorMessages.message("interface.expected")).create();
            QuickFixAction.registerQuickFixAction(errorResult,new FlipIntersectionSidesFix(aClass.getName(),conjList,conjunct,castTypeElement),null);
            return errorResult;
          }
        }
      }
    }
  }
  return null;
}
