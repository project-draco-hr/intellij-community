{
  if (file.getManager().isInProject(file) && !level.isAtLeast(feature.level)) {
    String message=JavaErrorMessages.message("insufficient.language.level",JavaErrorMessages.message(feature.key));
    Module module=ModuleUtilCore.findModuleForPsiElement(element);
    if (module != null) {
      LanguageLevel moduleLanguageLevel=EffectiveLanguageLevelUtil.getEffectiveLanguageLevel(module);
      if (moduleLanguageLevel.isAtLeast(feature.level)) {
        for (        JavaLanguageLevelInconsistencyMessageHandler handler : JavaLanguageLevelInconsistencyMessageHandler.EP_NAME.getExtensions()) {
          String newMessage=handler.getNewMessage(message,element,level,file);
          if (newMessage != null) {
            message=newMessage;
            break;
          }
        }
      }
    }
    HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(element).descriptionAndTooltip(message).create();
    QuickFixAction.registerQuickFixAction(info,QUICK_FIX_FACTORY.createIncreaseLanguageLevelFix(feature.level));
    QuickFixAction.registerQuickFixAction(info,QUICK_FIX_FACTORY.createShowModulePropertiesFix(element));
    return info;
  }
  return null;
}
