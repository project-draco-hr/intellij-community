{
  final PyElement element=((PyCallHierarchyNodeDescriptor)descriptor).getEnclosingElement();
  final boolean isCallable=element instanceof PyFunction || element instanceof PyClass || element instanceof PyFile;
  HierarchyNodeDescriptor nodeDescriptor=getBaseDescriptor();
  if (!isCallable || nodeDescriptor == null) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final List<PsiElement> callers=Lists.newArrayList();
  PyCallDataManager[] functionManagers={PyStaticCallDataManager.getInstance(myProject)};
  for (  PyCallDataManager functionManager : functionManagers) {
    callers.addAll(functionManager.getCallers(element));
  }
  final HashMap<PsiElement,PyCallHierarchyNodeDescriptor> callerToDescriptorMap=new HashMap<PsiElement,PyCallHierarchyNodeDescriptor>();
  final List<PyCallHierarchyNodeDescriptor> descriptors=Lists.newArrayList();
  PsiElement baseClass=element instanceof PyFunction ? ((PyFunction)element).getContainingClass() : null;
  for (  PsiElement caller : callers) {
    if (baseClass != null && !isInScope(baseClass,caller,myScopeType))     continue;
    PyCallHierarchyNodeDescriptor callerDescriptor=callerToDescriptorMap.get(caller);
    if (callerDescriptor == null) {
      callerDescriptor=new PyCallHierarchyNodeDescriptor(myProject,null,caller,false,false);
      callerToDescriptorMap.put(caller,callerDescriptor);
      descriptors.add(callerDescriptor);
    }
  }
  return ArrayUtil.toObjectArray(descriptors);
}
