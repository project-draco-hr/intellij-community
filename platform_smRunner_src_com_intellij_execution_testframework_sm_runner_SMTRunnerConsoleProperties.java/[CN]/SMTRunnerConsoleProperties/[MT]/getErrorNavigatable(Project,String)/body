{
  if (myCustomFilter.isEmpty()) {
    return null;
  }
  final int stacktraceLength=stacktrace.length();
  final String[] lines=StringUtil.splitByLines(stacktrace);
  for (  String line : lines) {
    final Filter.Result result;
    try {
      result=myCustomFilter.applyFilter(line,stacktraceLength);
    }
 catch (    Throwable t) {
      throw new RuntimeException("Error while applying " + myCustomFilter + " to '"+ line+ "'",t);
    }
    if (result != null) {
      final HyperlinkInfo info=result.hyperlinkInfo;
      if (info instanceof FileHyperlinkInfo) {
        return ((FileHyperlinkInfo)info).getDescriptor();
      }
      return new Navigatable(){
        @Override public void navigate(        boolean requestFocus){
          result.hyperlinkInfo.navigate(project);
        }
        @Override public boolean canNavigate(){
          return true;
        }
        @Override public boolean canNavigateToSource(){
          return true;
        }
      }
;
    }
  }
  return null;
}
