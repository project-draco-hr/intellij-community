{
  final PsiCall topLevelCall=treeWalkUp(parent);
  if (topLevelCall != null) {
    final JavaResolveResult result=topLevelCall.resolveMethodGenerics();
    if (result instanceof MethodCandidateInfo) {
      final PsiMethod method=((MethodCandidateInfo)result).getElement();
      final PsiParameter[] topLevelParameters=method.getParameterList().getParameters();
      final PsiExpressionList topLevelCallArgumentList=topLevelCall.getArgumentList();
      LOG.assertTrue(topLevelCallArgumentList != null,topLevelCall);
      final PsiExpression[] topLevelArguments=topLevelCallArgumentList.getExpressions();
      final InferenceSession topLevelSession=new InferenceSession(method.getTypeParameters(),((MethodCandidateInfo)result).getSiteSubstitutor(),topLevelCall.getManager(),topLevelCall);
      topLevelSession.initExpressionConstraints(topLevelParameters,topLevelArguments,topLevelCall,method,((MethodCandidateInfo)result).isVarargs());
      topLevelSession.infer(topLevelParameters,topLevelArguments,topLevelCall,((MethodCandidateInfo)result).createProperties());
      final InferenceSessionContainer container=topLevelSession.getInferenceSessionContainer();
      final Map<PsiElement,InferenceSession> nestedSessions=container.myNestedSessions;
      Map<PsiElement,InitialInferenceState> nestedStates=new LinkedHashMap<PsiElement,InitialInferenceState>();
      for (      Map.Entry<PsiElement,InferenceSession> entry : nestedSessions.entrySet()) {
        nestedStates.put(entry.getKey(),entry.getValue().createInitialState(container));
      }
      PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
      for (      InferenceVariable variable : topLevelSession.getInferenceVariables()) {
        final PsiType instantiation=variable.getInstantiation();
        if (instantiation != PsiType.NULL) {
          substitutor=substitutor.put(variable,instantiation);
        }
      }
      return new CompoundInitialState(substitutor,nestedStates);
    }
  }
  return null;
}
