{
  if (parent instanceof PsiCall) {
    final PsiExpressionList argumentList=((PsiCall)parent).getArgumentList();
    final MethodCandidateInfo.CurrentCandidateProperties properties=MethodCandidateInfo.getCurrentMethod(argumentList);
    if (properties != null && !properties.isApplicabilityCheck() && !MethodCandidateInfo.ourOverloadGuard.currentStack().contains(argumentList)) {
      final PsiCall topLevelCall=PsiResolveHelper.ourGraphGuard.doPreventingRecursion(parent,false,new Computable<PsiCall>(){
        @Override public PsiCall compute(){
          if (parent instanceof PsiExpression && !PsiPolyExpressionUtil.isPolyExpression((PsiExpression)parent)) {
            return null;
          }
          return LambdaUtil.treeWalkUp(parent);
        }
      }
);
      if (topLevelCall != null) {
        InferenceSession session;
        if (MethodCandidateInfo.isOverloadCheck() || !PsiDiamondType.ourDiamondGuard.currentStack().isEmpty() || LambdaUtil.isLambdaParameterCheck()) {
          session=startTopLevelInference(topLevelCall,policy);
        }
 else {
          session=CachedValuesManager.getCachedValue(topLevelCall,new CachedValueProvider<InferenceSession>(){
            @Nullable @Override public Result<InferenceSession> compute(){
              return new Result<InferenceSession>(startTopLevelInference(topLevelCall,policy),PsiModificationTracker.MODIFICATION_COUNT);
            }
          }
);
          if (session != null) {
            final Map<PsiElement,InferenceSession> sessions=session.getInferenceSessionContainer().myNestedSessions;
            final InferenceSession childSession=sessions.get(parent);
            if (childSession != null) {
              for (              PsiTypeParameter parameter : typeParameters) {
                if (!childSession.getInferenceSubstitution().getSubstitutionMap().containsKey(parameter)) {
                  session=startTopLevelInference(topLevelCall,policy);
                  break;
                }
              }
            }
          }
        }
        if (session != null) {
          final PsiSubstitutor childSubstitutor=inferNested(typeParameters,parameters,arguments,partialSubstitutor,(PsiCall)parent,policy,properties,session);
          if (childSubstitutor != null)           return childSubstitutor;
        }
 else         if (topLevelCall instanceof PsiMethodCallExpression) {
          return new InferenceSession(typeParameters,partialSubstitutor,parent.getManager(),parent,policy).prepareSubstitution();
        }
      }
    }
  }
  final InferenceSession inferenceSession=new InferenceSession(typeParameters,partialSubstitutor,parent.getManager(),parent,policy);
  inferenceSession.initExpressionConstraints(parameters,arguments,parent);
  return inferenceSession.infer(parameters,arguments,parent);
}
