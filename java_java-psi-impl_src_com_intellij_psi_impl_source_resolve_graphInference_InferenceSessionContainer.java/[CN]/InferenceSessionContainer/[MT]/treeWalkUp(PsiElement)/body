{
  PsiCall top=null;
  PsiElement parent=PsiTreeUtil.getParentOfType(context,PsiExpressionList.class,PsiLambdaExpression.class,PsiCodeBlock.class,PsiCall.class);
  while (true) {
    if (parent instanceof PsiCall) {
      break;
    }
    final PsiLambdaExpression lambdaExpression=PsiTreeUtil.getParentOfType(parent,PsiLambdaExpression.class);
    if (parent instanceof PsiCodeBlock) {
      if (lambdaExpression == null) {
        break;
      }
 else {
        boolean inReturnExpressions=false;
        for (        PsiExpression expression : LambdaUtil.getReturnExpressions(lambdaExpression)) {
          inReturnExpressions|=PsiTreeUtil.isAncestor(expression,context,false);
        }
        if (!inReturnExpressions) {
          break;
        }
        if (LambdaUtil.getFunctionalTypeMap().containsKey(lambdaExpression)) {
          break;
        }
      }
    }
    if (parent instanceof PsiLambdaExpression && LambdaUtil.getFunctionalTypeMap().containsKey(parent)) {
      break;
    }
    final PsiCall psiCall=PsiTreeUtil.getParentOfType(parent,PsiCall.class);
    if (psiCall == null) {
      break;
    }
    final MethodCandidateInfo.CurrentCandidateProperties properties=MethodCandidateInfo.getCurrentMethod(psiCall.getArgumentList());
    if (properties != null && properties.isApplicabilityCheck()) {
      break;
    }
    top=psiCall;
    if (top instanceof PsiExpression && PsiPolyExpressionUtil.isPolyExpression((PsiExpression)top)) {
      parent=PsiTreeUtil.getParentOfType(parent.getParent(),PsiExpressionList.class,PsiLambdaExpression.class,PsiCodeBlock.class);
    }
 else {
      break;
    }
  }
  if (top == null) {
    return null;
  }
  final PsiExpressionList argumentList=top.getArgumentList();
  if (argumentList == null) {
    return null;
  }
  LOG.assertTrue(MethodCandidateInfo.getCurrentMethod(argumentList) == null);
  return top;
}
