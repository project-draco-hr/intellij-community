{
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!methodNameValidator.test(methodName)) {
    return null;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return null;
  }
  final PsiClass containingClass=method.getContainingClass();
  final boolean messageOnLastPosition=isMessageOnLastPosition(containingClass);
  final boolean messageOnFirstPosition=isMessageOnFirstPosition(containingClass);
  if (!messageOnFirstPosition && !messageOnLastPosition) {
    return null;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  if (parameters.length < minimumParamCount) {
    return null;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  final int argumentIndex;
  final PsiExpression message;
  if (messageOnFirstPosition) {
    if (parameters[0].getType().equalsToText(CommonClassNames.JAVA_LANG_STRING) && parameters.length > minimumParamCount) {
      argumentIndex=1;
      message=arguments[0];
    }
 else {
      argumentIndex=0;
      message=null;
    }
  }
 else {
    argumentIndex=0;
    message=parameters.length > minimumParamCount ? arguments[parameters.length - 1] : null;
  }
  return new AssertHint(argumentIndex,message,method);
}
