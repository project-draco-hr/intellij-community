{
  final Cache cache=new Cache();
  try {
    String className=getClassName();
    PsiClass contextClass;
    PsiType contextType;
    PsiPrimitiveType primitiveType=PsiJavaParserFacadeImpl.getPrimitiveType(className);
    if (primitiveType != null) {
      contextClass=JavaPsiFacade.getInstance(project).findClass(primitiveType.getBoxedTypeName(),GlobalSearchScope.allScope(project));
      contextType=primitiveType;
    }
 else {
      contextClass=DebuggerUtils.findClass(className,project,GlobalSearchScope.allScope(project));
      if (contextClass != null) {
        contextClass=(PsiClass)contextClass.getNavigationElement();
      }
      if (contextClass instanceof PsiCompiledElement) {
        contextClass=(PsiClass)((PsiCompiledElement)contextClass).getMirror();
      }
      if (contextClass == null) {
        throw EvaluateExceptionUtil.CANNOT_FIND_SOURCE_CLASS;
      }
      contextType=DebuggerUtils.getType(className,project);
    }
    cache.myPsiChildrenExpression=null;
    JavaCodeFragment codeFragment=myDefaultFragmentFactory.createCodeFragment(myReferenceExpression,contextClass,project);
    codeFragment.forceResolveScope(GlobalSearchScope.allScope(project));
    codeFragment.setThisType(contextType);
    DebuggerUtils.checkSyntax(codeFragment);
    cache.myPsiChildrenExpression=codeFragment instanceof PsiExpressionCodeFragment ? ((PsiExpressionCodeFragment)codeFragment).getExpression() : null;
    cache.myEvaluator=myDefaultFragmentFactory.getEvaluatorBuilder().build(codeFragment,null);
  }
 catch (  EvaluateException e) {
    cache.myException=e;
  }
  myCache=new SoftReference<>(cache);
  return cache;
}
