{
  final Cache cache=new Cache();
  try {
    PsiClass contextClass=DebuggerUtils.findClass(getClassName(),project,GlobalSearchScope.allScope(project));
    if (contextClass instanceof PsiCompiledElement) {
      contextClass=(PsiClass)((PsiCompiledElement)contextClass).getMirror();
    }
    if (contextClass == null) {
      throw EvaluateExceptionUtil.CANNOT_FIND_SOURCE_CLASS;
    }
    final PsiType contextType=DebuggerUtils.getType(getClassName(),project);
    cache.myPsiChildrenExpression=null;
    JavaCodeFragment codeFragment=myDefaultFragmentFactory.createCodeFragment(myReferenceExpression,contextClass,project);
    codeFragment.forceResolveScope(GlobalSearchScope.allScope(project));
    codeFragment.setThisType(contextType);
    DebuggerUtils.checkSyntax(codeFragment);
    cache.myPsiChildrenExpression=codeFragment instanceof PsiExpressionCodeFragment ? ((PsiExpressionCodeFragment)codeFragment).getExpression() : null;
    cache.myEvaluator=myDefaultFragmentFactory.getEvaluatorBuilder().build(codeFragment,null);
  }
 catch (  EvaluateException e) {
    cache.myException=e;
  }
  myCache=new SoftReference<>(cache);
  return cache;
}
