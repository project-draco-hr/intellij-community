{
  super(parent,true);
  setTitle(IdeBundle.message("title.add.todo.pattern"));
  setResizable(false);
  final TodoAttributes attrs=pattern.getAttributes();
  myPattern=pattern;
  myIconComboBox=new ComboBox<Icon>(new Icon[]{AllIcons.General.TodoDefault,AllIcons.General.TodoQuestion,AllIcons.General.TodoImportant});
  myIconComboBox.setSelectedItem(attrs.getIcon());
  myIconComboBox.setRenderer(new ListCellRendererWrapper<Icon>(){
    @Override public void customize(    JList list,    Icon value,    int index,    boolean selected,    boolean hasFocus){
      setIcon(value);
      setText(" ");
    }
  }
);
  myCaseSensitiveCheckBox=new JBCheckBox(IdeBundle.message("checkbox.case.sensitive"),pattern.isCaseSensitive());
  myPatternStringField=new JBTextField(pattern.getPatternString());
  myUsedDefaultColorsCheckBox=new JBCheckBox(IdeBundle.message("checkbox.todo.use.default.colors"));
  myUsedDefaultColorsCheckBox.setSelected(!attrs.shouldUseCustomTodoColor());
  myColorAndFontDescriptionPanel=new ColorAndFontDescriptionPanel();
  TextAttributes attributes=myPattern.getAttributes().getCustomizedTextAttributes();
  myColorAndFontDescription=new TextAttributesDescription("null",null,attributes,null,EditorColorsManager.getInstance().getGlobalScheme(),null,null){
    @Override public void apply(    EditorColorsScheme scheme){
    }
    @Override public boolean isErrorStripeEnabled(){
      return true;
    }
    @Override public boolean isEditable(){
      return true;
    }
  }
;
  myColorAndFontDescriptionPanel.reset(myColorAndFontDescription);
  updateCustomColorsPanel();
  myUsedDefaultColorsCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateCustomColorsPanel();
    }
  }
);
  init();
}
