{
  PsiStatement statement=tb.getSingleStatement();
  PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  String stream=generateStream(iteratedValue,tb.getLastOperation()).append(".findFirst()").toString();
  if (statement instanceof PsiReturnStatement) {
    PsiReturnStatement returnStatement=(PsiReturnStatement)statement;
    PsiExpression value=returnStatement.getReturnValue();
    if (value == null)     return null;
    PsiReturnStatement nextReturnStatement=StreamApiMigrationInspection.getNextReturnStatement(foreachStatement);
    if (nextReturnStatement == null)     return null;
    PsiExpression orElseExpression=nextReturnStatement.getReturnValue();
    if (!ExpressionUtils.isSimpleExpression(orElseExpression))     return null;
    stream=generateOptionalUnwrap(stream,tb,value,orElseExpression,null);
    restoreComments(foreachStatement,body);
    if (nextReturnStatement.getParent() == foreachStatement.getParent()) {
      nextReturnStatement.delete();
    }
    return foreachStatement.replace(elementFactory.createStatementFromText("return " + stream + ";",foreachStatement));
  }
 else {
    PsiStatement[] statements=tb.getStatements();
    if (statements.length != 2)     return null;
    PsiAssignmentExpression assignment=ExpressionUtils.getAssignment(statements[0]);
    if (assignment == null) {
      if (!(statements[0] instanceof PsiExpressionStatement))       return null;
      PsiExpression expression=((PsiExpressionStatement)statements[0]).getExpression();
      restoreComments(foreachStatement,body);
      return foreachStatement.replace(elementFactory.createStatementFromText(stream + ".ifPresent(" + LambdaUtil.createLambda(tb.getVariable(),expression)+ ");",foreachStatement));
    }
    PsiExpression lValue=assignment.getLExpression();
    if (!(lValue instanceof PsiReferenceExpression))     return null;
    PsiElement element=((PsiReferenceExpression)lValue).resolve();
    if (!(element instanceof PsiVariable))     return null;
    PsiVariable var=(PsiVariable)element;
    PsiExpression value=assignment.getRExpression();
    if (value == null)     return null;
    restoreComments(foreachStatement,body);
    InitializerUsageStatus status=StreamApiMigrationInspection.getInitializerUsageStatus(var,foreachStatement);
    if (status != InitializerUsageStatus.UNKNOWN) {
      PsiExpression initializer=var.getInitializer();
      if (initializer != null) {
        String replacementText=generateOptionalUnwrap(stream,tb,value,initializer,var.getType());
        return replaceInitializer(foreachStatement,var,initializer,replacementText,status);
      }
    }
    return foreachStatement.replace(elementFactory.createStatementFromText(var.getName() + " = " + generateOptionalUnwrap(stream,tb,value,lValue,var.getType())+ ";",foreachStatement));
  }
}
