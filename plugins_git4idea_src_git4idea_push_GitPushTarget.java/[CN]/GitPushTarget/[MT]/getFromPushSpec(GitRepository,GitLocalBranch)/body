{
  final GitRemote remote=getRemoteToPush(repository,GitBranchUtil.getTrackInfoForBranch(repository,sourceBranch));
  if (remote == null)   return null;
  List<String> specs=remote.getPushRefSpecs();
  if (specs.isEmpty())   return null;
  String targetRef=GitPushSpecParser.getTargetRef(repository,sourceBranch.getName(),specs);
  if (targetRef == null)   return null;
  String remotePrefix=REFS_REMOTES_PREFIX + remote.getName() + "/";
  if (targetRef.startsWith(remotePrefix)) {
    targetRef=targetRef.substring(remotePrefix.length());
    GitRemoteBranch remoteBranch=GitUtil.findOrCreateRemoteBranch(repository,remote,targetRef);
    boolean existingBranch=repository.getBranches().getRemoteBranches().contains(remoteBranch);
    return new GitPushTarget(remoteBranch,!existingBranch,false);
  }
 else {
    GitRemoteBranch remoteBranch=new GitSpecialRefRemoteBranch(targetRef,remote);
    return new GitPushTarget(remoteBranch,true,true);
  }
}
