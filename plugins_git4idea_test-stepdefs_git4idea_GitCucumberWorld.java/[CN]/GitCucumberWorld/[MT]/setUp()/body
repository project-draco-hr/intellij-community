{
  PlatformTestCase.initPlatformLangPrefix();
  IdeaTestApplication.getInstance(null);
  myTestName=createTestName();
  myProjectFixture=IdeaTestFixtureFactory.getFixtureFactory().createFixtureBuilder(myTestName).getFixture();
  edt(new ThrowableRunnable<Exception>(){
    @Override public void run() throws Exception {
      myProjectFixture.setUp();
    }
  }
);
  myProject=myProjectFixture.getProject();
  myProjectRoot=myProject.getBasePath();
  myProjectDir=myProject.getBaseDir();
  myTestRoot=myProjectRoot;
  myPlatformFacade=ServiceManager.getService(myProject,GitPlatformFacade.class);
  myGit=ServiceManager.getService(myProject,Git.class);
  mySettings=myPlatformFacade.getSettings(myProject);
  mySettings.getAppSettings().setPathToGit(GitExecutor.PathHolder.GIT_EXECUTABLE);
  myVcsHelper=GitTestUtil.overrideService(myProject,AbstractVcsHelper.class,MockVcsHelper.class);
  myChangeListManager=(ChangeListManagerImpl)myPlatformFacade.getChangeListManager(myProject);
  myNotificator=(TestVcsNotifier)ServiceManager.getService(myProject,VcsNotifier.class);
  myVcs=GitVcs.getInstance(myProject);
  virtualCommits=new GitTestVirtualCommitsHolder();
  myAsyncTasks=new ArrayList<Future>();
  cd(myProjectRoot);
  myRepository=GitTestUtil.createRepository(myProject,myProjectRoot);
  ProjectLevelVcsManagerImpl vcsManager=(ProjectLevelVcsManagerImpl)ProjectLevelVcsManager.getInstance(myProject);
  AbstractVcs vcs=vcsManager.findVcsByName("Git");
  Assert.assertEquals(1,vcsManager.getRootsUnderVcs(vcs).length);
  GitTestUtil.assumeSupportedGitVersion(myVcs);
  LOG.info(getStartTestMarker());
}
