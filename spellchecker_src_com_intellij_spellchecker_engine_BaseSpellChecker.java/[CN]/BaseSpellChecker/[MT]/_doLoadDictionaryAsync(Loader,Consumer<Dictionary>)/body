{
  final Runnable runnable=new Runnable(){
    @Override public void run(){
      LOG.debug("Loading " + loader.getName());
      ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
        @Override public void run(){
          if (ApplicationManager.getApplication().isDisposed())           return;
          final CompressedDictionary dictionary=CompressedDictionary.create(loader,transform);
          LOG.debug(loader.getName() + " loaded!");
          consumer.consume(dictionary);
          while (!myDictionariesToLoad.isEmpty()) {
            if (ApplicationManager.getApplication().isDisposed())             return;
            final Pair<Loader,Consumer<Dictionary>> nextDictionary=myDictionariesToLoad.remove(0);
            Loader nextDictionaryLoader=nextDictionary.getFirst();
            CompressedDictionary dictionary1=CompressedDictionary.create(nextDictionaryLoader,transform);
            LOG.debug(nextDictionaryLoader.getName() + " loaded!");
            nextDictionary.getSecond().consume(dictionary1);
          }
          LOG.debug("Loading finished, restarting daemon...");
          myLoadingDictionaries.set(false);
          UIUtil.invokeLaterIfNeeded(new Runnable(){
            @Override public void run(){
              if (ApplicationManager.getApplication().isDisposed())               return;
              for (              final Project project : ProjectManager.getInstance().getOpenProjects()) {
                if (project.isInitialized() && project.isOpen() && !project.isDefault()) {
                  final DaemonCodeAnalyzer instance=DaemonCodeAnalyzer.getInstance(project);
                  if (instance != null)                   instance.restart();
                }
              }
            }
          }
);
        }
      }
);
    }
  }
;
  StartupManager.getInstance(myProject).runWhenProjectIsInitialized(runnable);
}
