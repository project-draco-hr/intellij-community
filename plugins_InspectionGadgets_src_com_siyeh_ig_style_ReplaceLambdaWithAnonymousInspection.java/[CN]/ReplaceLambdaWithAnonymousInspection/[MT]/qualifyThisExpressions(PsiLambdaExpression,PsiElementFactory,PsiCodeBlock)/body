{
  ChangeContextUtil.encodeContextInfo(blockFromText,true);
  final PsiClass thisClass=RefactoringChangeUtil.getThisClass(lambdaExpression);
  final String thisClassName=thisClass != null ? thisClass.getName() : null;
  if (thisClassName != null) {
    final PsiThisExpression thisAccessExpr=thisClass instanceof PsiAnonymousClass ? null : RefactoringChangeUtil.createThisExpression(lambdaExpression.getManager(),thisClass);
    ChangeContextUtil.decodeContextInfo(blockFromText,thisClass,thisAccessExpr);
    final Map<PsiElement,PsiElement> replacements=new HashMap<PsiElement,PsiElement>();
    blockFromText.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitClass(      PsiClass aClass){
      }
      @Override public void visitSuperExpression(      PsiSuperExpression expression){
        super.visitSuperExpression(expression);
        if (expression.getQualifier() == null) {
          replacements.put(expression,psiElementFactory.createExpressionFromText(thisClassName + "." + expression.getText(),expression));
        }
      }
      @Override public void visitMethodCallExpression(      PsiMethodCallExpression expression){
        super.visitMethodCallExpression(expression);
        if (thisAccessExpr != null) {
          final PsiMethod psiMethod=expression.resolveMethod();
          if (psiMethod != null && !psiMethod.hasModifierProperty(PsiModifier.STATIC) && expression.getMethodExpression().getQualifierExpression() == null) {
            replacements.put(expression,psiElementFactory.createExpressionFromText(thisAccessExpr.getText() + "." + expression.getText(),expression));
          }
        }
      }
    }
);
    for (    PsiElement psiElement : replacements.keySet()) {
      psiElement.replace(replacements.get(psiElement));
    }
  }
}
