{
  super(project,changeLists,changes,initialListSelection,capableOfExcludingChanges,highlightProblems,inclusionListener,MyUseCase.LOCAL_CHANGES,null);
  myRebuildListListener=rebuildListListener;
  myChangeListChooser=new ChangeListChooser(changeLists);
  myHeaderPanel.add(myChangeListChooser,BorderLayout.EAST);
  myShowingAllChangeLists=Comparing.haveEqualElements(changeLists,ChangeListManager.getInstance(project).getChangeLists());
  ChangeListManager.getInstance(myProject).addChangeListListener(myChangeListListener);
  ActionManager actionManager=ActionManager.getInstance();
  final AnAction moveAction=actionManager.getAction(IdeActions.MOVE_TO_ANOTHER_CHANGE_LIST);
  actionManager.addAnActionListener(new AnActionListener.Adapter(){
    @Override public void afterActionPerformed(    AnAction action,    DataContext dataContext,    AnActionEvent event){
      if (moveAction.equals(action)) {
        rebuildList();
      }
    }
  }
,this);
}
