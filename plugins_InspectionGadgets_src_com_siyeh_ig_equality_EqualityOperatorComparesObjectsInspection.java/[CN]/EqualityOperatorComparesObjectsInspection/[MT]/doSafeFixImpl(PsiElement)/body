{
  final PsiBinaryExpression exp=(PsiBinaryExpression)element;
  final PsiExpression lhs=exp.getLOperand();
  final PsiExpression rhs=exp.getROperand();
  if (rhs == null) {
    return;
  }
  final PsiExpression strippedLhs=ParenthesesUtils.stripParentheses(lhs);
  if (strippedLhs == null) {
    return;
  }
  final PsiExpression strippedRhs=ParenthesesUtils.stripParentheses(rhs);
  if (strippedRhs == null) {
    return;
  }
  final String lhsText=strippedLhs.getText();
  final String rhsText=strippedRhs.getText();
  final PsiJavaToken operationSign=exp.getOperationSign();
  final IElementType tokenType=operationSign.getTokenType();
  final String signText=operationSign.getText();
  @NonNls final StringBuilder newExpression=new StringBuilder();
  if (PsiUtil.isLanguageLevel7OrHigher(element) && ClassUtils.findClass("java.util.Objects",element) != null) {
    if (tokenType.equals(JavaTokenType.NE)) {
      newExpression.append('!');
    }
    newExpression.append("java.util.Objects.equals(").append(lhsText).append(',').append(rhsText).append(')');
  }
 else {
    newExpression.append(lhsText).append("==null?").append(rhsText).append(signText).append(" null:");
    if (tokenType.equals(JavaTokenType.NE)) {
      newExpression.append('!');
    }
    if (ParenthesesUtils.getPrecedence(strippedLhs) > ParenthesesUtils.METHOD_CALL_PRECEDENCE) {
      newExpression.append('(').append(lhsText).append(')');
    }
 else {
      newExpression.append(lhsText);
    }
    newExpression.append(".equals(").append(rhsText).append(')');
  }
  PsiReplacementUtil.replaceExpressionAndShorten(exp,newExpression.toString());
}
