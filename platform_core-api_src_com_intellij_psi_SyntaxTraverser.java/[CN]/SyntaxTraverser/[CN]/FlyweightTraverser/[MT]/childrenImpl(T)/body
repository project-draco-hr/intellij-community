{
  return new FluentIterable<T>(){
    @Override public Iterator<T> iterator(){
      Ref<T[]> ref=Ref.create();
      int count=myTree.getChildren(myTree.prepareForGetChildren(node),ref);
      if (count == 0)       return ContainerUtil.emptyIterator();
      T[] array=ref.get();
      LinkedList<T> list=ContainerUtil.newLinkedList();
      for (int i=0; i < count; i++) {
        T t=array[i];
        if (nodeType(t).getLanguage() == Language.ANY)         continue;
        array[i]=null;
        list.addLast(t);
      }
      myTree.disposeChildren(array,count);
      return list.iterator();
    }
  }
;
}
