{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzBufferArrayL=zzBufferArray;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 89:
{
        return PyTokenTypes.YIELD_KEYWORD;
      }
case 100:
    break;
case 84:
{
    yypushback(getSpaceLength(yytext()));
    if (zzCurrentPos != 0)     return PyTokenTypes.TRIPLE_QUOTED_STRING;
    yybegin(PENDING_DOCSTRING);
    return PyTokenTypes.DOCSTRING;
  }
case 101:
break;
case 2:
{
return PyTokenTypes.INTEGER_LITERAL;
}
case 102:
break;
case 17:
{
return PyTokenTypes.DIV;
}
case 103:
break;
case 18:
{
return PyTokenTypes.PERC;
}
case 104:
break;
case 8:
{
return PyTokenTypes.BACKSLASH;
}
case 105:
break;
case 26:
{
return PyTokenTypes.RPAR;
}
case 106:
break;
case 1:
{
return PyTokenTypes.BAD_CHARACTER;
}
case 107:
break;
case 29:
{
return PyTokenTypes.LBRACE;
}
case 108:
break;
case 35:
{
yypushback(1);
yybegin(YYINITIAL);
}
case 109:
break;
case 71:
{
yybegin(IN_DOCSTRING_OWNER);
return PyTokenTypes.DEF_KEYWORD;
}
case 110:
break;
case 87:
{
yybegin(IN_DOCSTRING_OWNER);
return PyTokenTypes.CLASS_KEYWORD;
}
case 111:
break;
case 79:
{
yypushback(getSpaceLength(yytext()));
return PyTokenTypes.DOCSTRING;
}
case 112:
break;
case 6:
{
return PyTokenTypes.MINUS;
}
case 113:
break;
case 7:
{
if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
 else return PyTokenTypes.SINGLE_QUOTED_STRING;
}
case 114:
break;
case 86:
{
return PyTokenTypes.BREAK_KEYWORD;
}
case 115:
break;
case 28:
{
return PyTokenTypes.RBRACKET;
}
case 116:
break;
case 64:
{
yypushback(getSpaceLength(yytext()));
yybegin(YYINITIAL);
return PyTokenTypes.DOCSTRING;
}
case 117:
break;
case 5:
{
return PyTokenTypes.DOT;
}
case 118:
break;
case 3:
{
return PyTokenTypes.IDENTIFIER;
}
case 119:
break;
case 25:
{
return PyTokenTypes.LPAR;
}
case 120:
break;
case 23:
{
return PyTokenTypes.LT;
}
case 121:
break;
case 46:
{
return PyTokenTypes.IN_KEYWORD;
}
case 122:
break;
case 88:
{
return PyTokenTypes.RAISE_KEYWORD;
}
case 123:
break;
case 76:
{
return PyTokenTypes.GTGTEQ;
}
case 124:
break;
case 9:
{
return PyTokenTypes.SPACE;
}
case 125:
break;
case 92:
{
return PyTokenTypes.EXCEPT_KEYWORD;
}
case 126:
break;
case 41:
{
return PyTokenTypes.IMAGINARY_LITERAL;
}
case 127:
break;
case 39:
{
return PyTokenTypes.SINGLE_QUOTED_STRING;
}
case 128:
break;
case 11:
{
return PyTokenTypes.FORMFEED;
}
case 129:
break;
case 13:
{
return PyTokenTypes.SEMICOLON;
}
case 130:
break;
case 22:
{
return PyTokenTypes.GT;
}
case 131:
break;
case 27:
{
return PyTokenTypes.LBRACKET;
}
case 132:
break;
case 33:
{
return PyTokenTypes.COLON;
}
case 133:
break;
case 77:
{
return PyTokenTypes.LTLTEQ;
}
case 134:
break;
case 82:
{
return PyTokenTypes.ELSE_KEYWORD;
}
case 135:
break;
case 20:
{
return PyTokenTypes.OR;
}
case 136:
break;
case 68:
{
yypushback(getSpaceLength(yytext()));
if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
yybegin(PENDING_DOCSTRING);
return PyTokenTypes.DOCSTRING;
}
case 137:
break;
case 67:
{
if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
 else return PyTokenTypes.TRIPLE_QUOTED_STRING;
}
case 138:
break;
case 50:
{
return PyTokenTypes.MULTEQ;
}
case 139:
break;
case 97:
{
return PyTokenTypes.FINALLY_KEYWORD;
}
case 140:
break;
case 90:
{
return PyTokenTypes.WHILE_KEYWORD;
}
case 141:
break;
case 16:
{
return PyTokenTypes.MULT;
}
case 142:
break;
case 93:
{
return PyTokenTypes.ASSERT_KEYWORD;
}
case 143:
break;
case 53:
{
return PyTokenTypes.FLOORDIV;
}
case 144:
break;
case 96:
{
return PyTokenTypes.GLOBAL_KEYWORD;
}
case 145:
break;
case 37:
{
if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
 else yybegin(YYINITIAL);
return PyTokenTypes.SINGLE_QUOTED_STRING;
}
case 146:
break;
case 91:
{
return PyTokenTypes.LAMBDA_KEYWORD;
}
case 147:
break;
case 57:
{
return PyTokenTypes.XOREQ;
}
case 148:
break;
case 66:
{
return PyTokenTypes.FOR_KEYWORD;
}
case 149:
break;
case 31:
{
return PyTokenTypes.AT;
}
case 150:
break;
case 70:
{
return PyTokenTypes.NOT_KEYWORD;
}
case 151:
break;
case 14:
{
return PyTokenTypes.PLUS;
}
case 152:
break;
case 43:
{
return PyTokenTypes.MINUSEQ;
}
case 153:
break;
case 63:
{
return PyTokenTypes.NE;
}
case 154:
break;
case 32:
{
return PyTokenTypes.COMMA;
}
case 155:
break;
case 49:
{
return PyTokenTypes.EQEQ;
}
case 156:
break;
case 34:
{
return PyTokenTypes.TICK;
}
case 157:
break;
case 51:
{
return PyTokenTypes.EXP;
}
case 158:
break;
case 80:
{
return PyTokenTypes.TRIPLE_QUOTED_STRING;
}
case 159:
break;
case 99:
{
return PyTokenTypes.CONTINUE_KEYWORD;
}
case 160:
break;
case 62:
{
return PyTokenTypes.LTLT;
}
case 161:
break;
case 60:
{
return PyTokenTypes.LE;
}
case 162:
break;
case 69:
{
return PyTokenTypes.AND_KEYWORD;
}
case 163:
break;
case 42:
{
return PyTokenTypes.OR_KEYWORD;
}
case 164:
break;
case 4:
{
if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING);
return PyTokenTypes.END_OF_LINE_COMMENT;
}
case 165:
break;
case 44:
{
yypushback(getSpaceLength(yytext()));
if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
}
case 166:
break;
case 85:
{
return PyTokenTypes.PASS_KEYWORD;
}
case 167:
break;
case 65:
{
yypushback(yylength() - 1);
yybegin(PENDING_DOCSTRING);
return PyTokenTypes.COLON;
}
case 168:
break;
case 36:
{
return PyTokenTypes.END_OF_LINE_COMMENT;
}
case 169:
break;
case 98:
{
yypushback(getSpaceLength(yytext()));
if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
}
case 170:
break;
case 56:
{
return PyTokenTypes.OREQ;
}
case 171:
break;
case 59:
{
return PyTokenTypes.GTGT;
}
case 172:
break;
case 19:
{
return PyTokenTypes.AND;
}
case 173:
break;
case 52:
{
return PyTokenTypes.DIVEQ;
}
case 174:
break;
case 94:
{
return PyTokenTypes.RETURN_KEYWORD;
}
case 175:
break;
case 95:
{
return PyTokenTypes.IMPORT_KEYWORD;
}
case 176:
break;
case 58:
{
return PyTokenTypes.GE;
}
case 177:
break;
case 48:
{
return PyTokenTypes.PLUSEQ;
}
case 178:
break;
case 78:
{
if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
 else yybegin(YYINITIAL);
return PyTokenTypes.TRIPLE_QUOTED_STRING;
}
case 179:
break;
case 47:
{
return PyTokenTypes.IS_KEYWORD;
}
case 180:
break;
case 75:
{
return PyTokenTypes.FLOORDIVEQ;
}
case 181:
break;
case 40:
{
return PyTokenTypes.FLOAT_LITERAL;
}
case 182:
break;
case 38:
{
return PyTokenTypes.LINE_BREAK;
}
case 183:
break;
case 54:
{
return PyTokenTypes.PERCEQ;
}
case 184:
break;
case 73:
{
return PyTokenTypes.TRY_KEYWORD;
}
case 185:
break;
case 55:
{
return PyTokenTypes.ANDEQ;
}
case 186:
break;
case 15:
{
return PyTokenTypes.EQ;
}
case 187:
break;
case 81:
{
return PyTokenTypes.FROM_KEYWORD;
}
case 188:
break;
case 12:
{
if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING);
return PyTokenTypes.LINE_BREAK;
}
case 189:
break;
case 74:
{
return PyTokenTypes.EXPEQ;
}
case 190:
break;
case 83:
{
return PyTokenTypes.ELIF_KEYWORD;
}
case 191:
break;
case 30:
{
return PyTokenTypes.RBRACE;
}
case 192:
break;
case 45:
{
return PyTokenTypes.IF_KEYWORD;
}
case 193:
break;
case 10:
{
return PyTokenTypes.TAB;
}
case 194:
break;
case 61:
{
return PyTokenTypes.NE_OLD;
}
case 195:
break;
case 24:
{
return PyTokenTypes.TILDE;
}
case 196:
break;
case 72:
{
return PyTokenTypes.DEL_KEYWORD;
}
case 197:
break;
case 21:
{
return PyTokenTypes.XOR;
}
case 198:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
