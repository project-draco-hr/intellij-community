{
  boolean cancelled=false;
  final Collection<MavenArtifact> result=new LinkedHashSet<MavenArtifact>();
  MavenEmbeddersManager manager=MavenProjectsManager.getInstance(project).getEmbeddersManager();
  MavenEmbedderWrapper embedder=manager.getEmbedder(MavenEmbeddersManager.FOR_DOWNLOAD);
  try {
    final MavenGeneralSettings mavenGeneralSettings=MavenProjectsManager.getInstance(project).getGeneralSettings();
    embedder.customizeForResolve(new SoutMavenConsole(mavenGeneralSettings.getOutputLevel(),mavenGeneralSettings.isPrintErrorStackTraces()),new MavenProgressIndicator(indicator));
    List<MavenRemoteRepository> remoteRepositories=convertRepositories(repositories);
    List<MavenArtifactInfo> artifacts=new ArrayList<MavenArtifactInfo>(mavenIds.size());
    for (    MavenId id : mavenIds) {
      artifacts.add(new MavenArtifactInfo(id,"jar",null));
    }
    List<MavenArtifact> firstResult=embedder.resolveTransitively(artifacts,remoteRepositories);
    for (    MavenArtifact artifact : firstResult) {
      if (!artifact.isResolved() || MavenConstants.SCOPE_TEST.equals(artifact.getScope())) {
        continue;
      }
      result.add(artifact);
    }
    if (!extraTypes.isEmpty()) {
      Set<String> allowedClassifiers=new THashSet<String>();
      Collection<MavenArtifactInfo> resolve=new LinkedHashSet<MavenArtifactInfo>();
      for (      MavenExtraArtifactType extraType : extraTypes) {
        allowedClassifiers.add(extraType.getDefaultClassifier());
        for (        MavenId id : mavenIds) {
          resolve.add(new MavenArtifactInfo(id,extraType.getDefaultExtension(),extraType.getDefaultClassifier()));
        }
      }
      for (      MavenArtifact artifact : embedder.resolveTransitively(new ArrayList<MavenArtifactInfo>(resolve),remoteRepositories)) {
        if (!artifact.isResolved() || MavenConstants.SCOPE_TEST.equals(artifact.getScope()) || !allowedClassifiers.contains(artifact.getClassifier())) {
          continue;
        }
        result.add(artifact);
      }
    }
  }
 catch (  MavenProcessCanceledException e) {
    cancelled=true;
  }
 finally {
    manager.release(embedder);
    if (!cancelled) {
      ApplicationManager.getApplication().invokeAndWait(new Runnable(){
        public void run(){
          DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND,new Runnable(){
            @Override public void run(){
              if (resultProcessor != null) {
                resultProcessor.process(new ArrayList<MavenArtifact>(result));
              }
            }
          }
);
        }
      }
,indicator.getModalityState());
    }
  }
}
