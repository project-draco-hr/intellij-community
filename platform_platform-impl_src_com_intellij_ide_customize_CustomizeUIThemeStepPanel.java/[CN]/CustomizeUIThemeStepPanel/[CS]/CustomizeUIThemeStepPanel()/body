{
  setLayout(new BorderLayout(10,10));
  IconLoader.activate();
  if (SystemInfo.isMac) {
    myLafNames.put(DEFAULT,IconLoader.getIcon("/lafs/OSXAqua.png"));
    myLafNames.put(DARCULA,IconLoader.getIcon("/lafs/OSXDarcula.png"));
    myLafNames.put(INTELLIJ,IconLoader.getIcon("/lafs/WindowsIntelliJ.png"));
  }
 else   if (SystemInfo.isWindows) {
    if (PlatformUtils.isIdeaCommunity()) {
      myLafNames.put(INTELLIJ,IconLoader.getIcon("/lafs/WindowsIntelliJ.png"));
    }
 else {
      myLafNames.put(ALLOY,IconLoader.getIcon("/lafs/WindowsAlloy.png"));
    }
    myLafNames.put(DARCULA,IconLoader.getIcon("/lafs/WindowsDarcula.png"));
  }
 else {
    myLafNames.put(INTELLIJ,IconLoader.getIcon("/lafs/LinuxIntelliJ.png"));
    myLafNames.put(DARCULA,IconLoader.getIcon("/lafs/LinuxDarcula.png"));
    myLafNames.put(GTK,IconLoader.getIcon("/lafs/LinuxGTK.png"));
  }
  myColumnMode=myLafNames.size() > 2;
  JPanel buttonsPanel=new JPanel(new GridLayout(myColumnMode ? myLafNames.size() : 1,myColumnMode ? 1 : myLafNames.size(),5,5));
  ButtonGroup group=new ButtonGroup();
  String myDefaultLafName=null;
  for (  Map.Entry<String,Icon> entry : myLafNames.entrySet()) {
    final String lafName=entry.getKey();
    Icon icon=entry.getValue();
    final JRadioButton radioButton=new JRadioButton(lafName,myDefaultLafName == null);
    if (myDefaultLafName == null) {
      radioButton.setSelected(true);
      myDefaultFocusedComponent=radioButton;
      myDefaultLafName=lafName;
    }
    final JPanel panel=new JPanel(new BorderLayout(10,10)){
      @Override public Color getBackground(){
        return radioButton.isSelected() ? UIUtil.getListSelectionBackground() : super.getBackground();
      }
    }
;
    panel.setOpaque(true);
    panel.add(radioButton,BorderLayout.NORTH);
    final JLabel label=new JLabel(myColumnMode ? IconUtil.scale(icon,.2) : icon){
      @Override public Dimension getPreferredSize(){
        Dimension size=super.getPreferredSize();
        if (myColumnMode)         size.width*=2;
        return size;
      }
    }
;
    panel.add(label,BorderLayout.CENTER);
    new ClickListener(){
      @Override public boolean onClick(      @NotNull MouseEvent event,      int clickCount){
        radioButton.setSelected(true);
        applyLaf(lafName,CustomizeUIThemeStepPanel.this);
        return true;
      }
    }
.installOn(label);
    radioButton.addItemListener(new ItemListener(){
      @Override public void itemStateChanged(      ItemEvent e){
        if (e.getStateChange() != ItemEvent.SELECTED)         return;
        applyLaf(lafName,CustomizeUIThemeStepPanel.this);
      }
    }
);
    group.add(radioButton);
    buttonsPanel.add(panel);
  }
  add(buttonsPanel,BorderLayout.CENTER);
  myPreviewLabel=new JLabel();
  myPreviewLabel.setHorizontalAlignment(SwingConstants.CENTER);
  myPreviewLabel.setVerticalAlignment(SwingConstants.CENTER);
  if (myColumnMode) {
    add(buttonsPanel,BorderLayout.WEST);
    add(myPreviewLabel,BorderLayout.CENTER);
  }
  applyLaf(myDefaultLafName,this);
  myInitial=false;
}
