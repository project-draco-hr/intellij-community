{
  TemplateManager templateManager=TemplateManager.getInstance(project);
  Template template=templateManager.createTemplate("","");
  template.setToReformat(true);
  Set<LookupElement> itemSet=new LinkedHashSet<LookupElement>();
  for (  PsiType type : suggestedTypes) {
    itemSet.add(PsiTypeLookupItem.createLookupItem(type,null));
  }
  final LookupElement[] lookupItems=itemSet.toArray(new LookupElement[itemSet.size()]);
  final Result result=suggestedTypes.length > 0 ? new PsiTypeResult(suggestedTypes[0],project) : null;
  Expression expr=new Expression(){
    @Override public LookupElement[] calculateLookupItems(    ExpressionContext context){
      return lookupItems.length > 1 ? lookupItems : null;
    }
    @Override public Result calculateResult(    ExpressionContext context){
      return result;
    }
    @Override public Result calculateQuickResult(    ExpressionContext context){
      return null;
    }
  }
;
  template.addTextSegment(exprText);
  template.addTextSegment(" instanceof ");
  String type="type";
  template.addVariable(type,expr,expr,true);
  template.addTextSegment(" ? ((");
  template.addVariable(type,expr,expr,true);
  template.addTextSegment(")" + exprText + ")");
  template.addEndVariable();
  template.addTextSegment(" : null;");
  return template;
}
