{
  List<MavenArtifactNode> result=new ArrayList<MavenArtifactNode>(nodes.size());
  for (  DependencyNode each : nodes) {
    Artifact a=RepositoryUtils.toArtifact(each.getDependency().getArtifact());
    MavenArtifact ma=convertArtifact(a,nativeToConvertedMap,localRepository);
    Map<?,?> data=each.getData();
    String premanagedVersion=DependencyManagerUtils.getPremanagedVersion(each);
    String premanagedScope=DependencyManagerUtils.getPremanagedScope(each);
    MavenArtifactState state=MavenArtifactState.ADDED;
    MavenArtifact relatedArtifact=null;
    Object winner=data.get(ConflictResolver.NODE_DATA_WINNER);
    if (winner instanceof DependencyNode) {
      DependencyNode winnerNode=(DependencyNode)winner;
      if (!StringUtil.equals(each.getVersion().toString(),winnerNode.getVersion().toString())) {
        state=MavenArtifactState.CONFLICT;
        Artifact winnerArtifact=RepositoryUtils.toArtifact(winnerNode.getDependency().getArtifact());
        relatedArtifact=convertArtifact(winnerArtifact,nativeToConvertedMap,localRepository);
      }
    }
    MavenArtifactNode newNode=new MavenArtifactNode(parent,ma,state,relatedArtifact,each.getDependency().getScope(),premanagedVersion,premanagedScope);
    newNode.setDependencies(convertAetherDependencyNodes(newNode,each.getChildren(),nativeToConvertedMap,localRepository));
    result.add(newNode);
  }
  return result;
}
