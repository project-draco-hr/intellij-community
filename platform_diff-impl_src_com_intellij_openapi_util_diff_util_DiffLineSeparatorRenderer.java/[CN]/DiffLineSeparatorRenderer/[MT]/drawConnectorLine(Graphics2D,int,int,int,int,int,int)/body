{
  int y1=(start1 + end1) / 2;
  int y2=(start2 + end2) / 2;
  int[] xPoints;
  int[] yPoints;
  if (Math.abs(x2 - x1) < Math.abs(y2 - y1)) {
    xPoints=new int[6];
    yPoints=new int[6];
    int dx=Y_STEP;
    int dy=Y_STEP_2;
    if (y2 < y1) {
      xPoints[0]=x1;
      yPoints[0]=y1 - Y_STEP;
      xPoints[1]=x2 - dx;
      yPoints[1]=y2 - Y_STEP + dy;
      xPoints[2]=x2;
      yPoints[2]=y2 - Y_STEP;
      xPoints[3]=x2;
      yPoints[3]=y2 + Y_STEP;
      xPoints[4]=x1 + dx;
      yPoints[4]=y1 + Y_STEP - dy;
      xPoints[5]=x1;
      yPoints[5]=y1 + Y_STEP;
    }
 else {
      xPoints[0]=x1;
      yPoints[0]=y1 - Y_STEP;
      xPoints[1]=x1 + dx;
      yPoints[1]=y1 - Y_STEP + dy;
      xPoints[2]=x2;
      yPoints[2]=y2 - Y_STEP;
      xPoints[3]=x2;
      yPoints[3]=y2 + Y_STEP;
      xPoints[4]=x2 - dx;
      yPoints[4]=y2 + Y_STEP - dy;
      xPoints[5]=x1;
      yPoints[5]=y1 + Y_STEP;
    }
  }
 else {
    xPoints=new int[4];
    yPoints=new int[4];
    xPoints[0]=x1;
    yPoints[0]=y1 - Y_STEP;
    xPoints[1]=x2;
    yPoints[1]=y2 - Y_STEP;
    xPoints[2]=x2;
    yPoints[2]=y2 + Y_STEP;
    xPoints[3]=x1;
    yPoints[3]=y1 + Y_STEP;
  }
  paintLines(g,xPoints,yPoints);
}
