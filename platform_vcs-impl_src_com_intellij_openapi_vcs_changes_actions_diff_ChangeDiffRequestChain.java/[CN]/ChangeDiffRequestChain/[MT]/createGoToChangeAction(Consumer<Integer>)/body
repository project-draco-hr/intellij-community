{
  return new ChangeGoToChangePopupAction<ChangeDiffRequestChain>(this,onSelected){
    @Override protected int findSelectedStep(    @Nullable Change change){
      if (change == null)       return -1;
      for (int i=0; i < myRequests.size(); i++) {
        Change c=myRequests.get(i).getChange();
        if (c.equals(change))         return i;
      }
      return -1;
    }
    @NotNull @Override protected List<Change> getChanges(){
      return ContainerUtil.mapNotNull(myChain.getRequests(),new Function<ChangeDiffRequestPresentable,Change>(){
        @Override public Change fun(        ChangeDiffRequestPresentable presentable){
          return presentable.getChange();
        }
      }
);
    }
    @Nullable @Override protected Change getCurrentSelection(){
      return myChain.getRequests().get(myChain.getIndex()).getChange();
    }
  }
;
}
