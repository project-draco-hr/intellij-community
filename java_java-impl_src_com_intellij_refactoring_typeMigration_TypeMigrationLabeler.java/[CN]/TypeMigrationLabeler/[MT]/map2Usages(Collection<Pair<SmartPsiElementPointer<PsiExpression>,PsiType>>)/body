{
  return ContainerUtil.map2Array(usages,new UsageInfo[usages.size()],new Function<Pair<SmartPsiElementPointer<PsiExpression>,PsiType>,UsageInfo>(){
    @Override public UsageInfo fun(    final Pair<SmartPsiElementPointer<PsiExpression>,PsiType> pair){
      final PsiExpression expr=pair.getFirst().getElement();
      LOG.assertTrue(expr != null);
      return new UsageInfo(expr){
        @Nullable public String getTooltipText(){
          final PsiType type=expr.isValid() ? expr.getType() : null;
          if (type == null)           return null;
          return "Cannot convert type of the expression from " + type.getCanonicalText() + " to "+ pair.getSecond().getCanonicalText();
        }
      }
;
    }
  }
);
}
