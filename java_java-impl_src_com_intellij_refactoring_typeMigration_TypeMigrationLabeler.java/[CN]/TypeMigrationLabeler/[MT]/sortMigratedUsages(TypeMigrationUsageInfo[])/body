{
  final DFSTBuilder<TypeMigrationUsageInfo> builder=new DFSTBuilder<TypeMigrationUsageInfo>(GraphGenerator.create(new GraphGenerator.SemiGraph<TypeMigrationUsageInfo>(){
    @Override public Collection<TypeMigrationUsageInfo> getNodes(){
      final Set<TypeMigrationUsageInfo> infos=new HashSet<TypeMigrationUsageInfo>();
      for (      Map.Entry<TypeMigrationUsageInfo,HashSet<Pair<TypeMigrationUsageInfo,PsiType>>> entry : myRootsTree.entrySet()) {
        infos.add(entry.getKey());
        infos.addAll(ContainerUtil.map(entry.getValue(),new Function<Pair<TypeMigrationUsageInfo,PsiType>,TypeMigrationUsageInfo>(){
          @Override public TypeMigrationUsageInfo fun(          Pair<TypeMigrationUsageInfo,PsiType> pair){
            return pair.getFirst();
          }
        }
));
      }
      return infos;
    }
    @Override public Iterator<TypeMigrationUsageInfo> getIn(    TypeMigrationUsageInfo n){
      final HashSet<Pair<TypeMigrationUsageInfo,PsiType>> rawNodes=myRootsTree.get(n);
      if (rawNodes == null) {
        return Collections.<TypeMigrationUsageInfo>emptyList().iterator();
      }
      final List<TypeMigrationUsageInfo> in=ContainerUtil.map(rawNodes,new Function<Pair<TypeMigrationUsageInfo,PsiType>,TypeMigrationUsageInfo>(){
        @Override public TypeMigrationUsageInfo fun(        Pair<TypeMigrationUsageInfo,PsiType> pair){
          return pair.getFirst();
        }
      }
);
      return in.iterator();
    }
  }
));
  final Comparator<TypeMigrationUsageInfo> cmp=builder.comparator();
  Arrays.sort(infos,new Comparator<TypeMigrationUsageInfo>(){
    @Override public int compare(    final TypeMigrationUsageInfo info1,    final TypeMigrationUsageInfo info2){
      final TypeMigrationUsageInfo i1=info1.getOwnerRoot();
      final TypeMigrationUsageInfo i2=info2.getOwnerRoot();
      if (i1 == null && i2 == null) {
        return 0;
      }
      if (i1 == null) {
        return 1;
      }
      if (i2 == null) {
        return -1;
      }
      final int res=cmp.compare(i1,i2);
      if (res != 0) {
        return res;
      }
      final PsiElement element1=info1.getElement();
      final PsiElement element2=info2.getElement();
      LOG.assertTrue(element1 != null && element2 != null);
      return element2.getTextRange().getStartOffset() - element1.getTextRange().getStartOffset();
    }
  }
);
  return infos;
}
