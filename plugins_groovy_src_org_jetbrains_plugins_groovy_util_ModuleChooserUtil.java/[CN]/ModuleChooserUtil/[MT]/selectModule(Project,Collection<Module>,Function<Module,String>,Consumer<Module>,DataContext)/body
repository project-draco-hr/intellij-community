{
  final List<Module> modules=new ArrayList<Module>();
  final Map<Module,String> versions=new HashMap<Module,String>();
  for (  Module module : suitableModules) {
    modules.add(module);
    versions.put(module,versionProvider.fun(module));
  }
  if (modules.size() == 1) {
    callback.consume(modules.get(0));
    return;
  }
  Collections.sort(modules,ModulesAlphaComparator.INSTANCE);
  BaseListPopupStep<Module> step=new BaseListPopupStep<Module>("Which module to use classpath of?",modules,PlatformIcons.CONTENT_ROOT_ICON_CLOSED){
    @NotNull @Override public String getTextFor(    Module value){
      return String.format("%s (%s)",value.getName(),versions.get(value));
    }
    @Override public String getIndexedString(    Module value){
      return value.getName();
    }
    @Override public boolean isSpeedSearchEnabled(){
      return true;
    }
    @Override public PopupStep onChosen(    Module selectedValue,    boolean finalChoice){
      PropertiesComponent.getInstance(selectedValue.getProject()).setValue(GROOVY_LAST_MODULE,selectedValue.getName());
      callback.consume(selectedValue);
      return null;
    }
  }
;
  final String lastModuleName=PropertiesComponent.getInstance(project).getValue(GROOVY_LAST_MODULE);
  if (lastModuleName != null) {
    int defaultOption=ContainerUtil.indexOf(modules,new Condition<Module>(){
      @Override public boolean value(      Module module){
        return module.getName().equals(lastModuleName);
      }
    }
);
    if (defaultOption >= 0) {
      step.setDefaultOptionIndex(defaultOption);
    }
  }
  final ListPopup listPopup=JBPopupFactory.getInstance().createListPopup(step);
  if (context == null) {
    listPopup.showCenteredInCurrentWindow(project);
  }
 else {
    listPopup.showInBestPositionFor(context);
  }
}
