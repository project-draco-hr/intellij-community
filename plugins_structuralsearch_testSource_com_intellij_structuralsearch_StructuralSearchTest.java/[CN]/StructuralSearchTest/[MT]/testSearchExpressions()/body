{
  assertFalse("subexpr match",findMatchesCount(s2,s3) == 0);
  assertEquals("search for new ",findMatchesCount(s10,s11),0);
  assertEquals("search for anonymous classes",findMatchesCount(s12,s13),1);
  assertEquals("expr in def initializer",findMatchesCount(s53,s54),3);
  assertEquals("a.class pattern",findMatchesCount(s55,s56),1);
  String complexCode="interface I { void b(); } interface I2 extends I {} class I3 extends I {} " + "class A implements I2 {  void b() {} } class B implements I3 { void b() {}} " + "I2 a; I3 b; a.b(); b.b(); b.b(); A c; B d; c.b(); d.b(); d.b(); ";
  String exprTypePattern1="'t:[exprtype( I2 )].b();";
  String exprTypePattern2="'t:[!exprtype( I2 )].b();";
  String exprTypePattern3="'t:[exprtype( *I2 )].b();";
  String exprTypePattern4="'t:[!exprtype( *I2 )].b();";
  assertEquals("expr type condition",findMatchesCount(complexCode,exprTypePattern1),1);
  assertEquals("expr type condition 2",findMatchesCount(complexCode,exprTypePattern2),5);
  assertEquals("expr type condition 3",findMatchesCount(complexCode,exprTypePattern3),2);
  assertEquals("expr type condition 4",findMatchesCount(complexCode,exprTypePattern4),4);
  assertEquals("no smart detection of search target",findMatchesCount("processInheritors(1,2,3,4); processInheritors(1,2,3); processInheritors(1,2,3,4,5,6);","'instance?.processInheritors('_param1{1,6});"),3);
  String arrays="int[] a = new int[20];\n" + "byte[] b = new byte[30]";
  String arrayPattern="new int[$a$]";
  assertEquals("Improper array search",1,findMatchesCount(arrays,arrayPattern));
  String someCode="a *= 2; a+=2;";
  String otherCode="a *= 2;";
  assertEquals("Improper *= 2 search",1,findMatchesCount(someCode,otherCode));
  String s1="Thread t = new Thread(\"my thread\",\"my another thread\") {\n" + "    public void run() {\n" + "        // do stuff\n"+ "    }\n"+ "}";
  String s2="new Thread('args*) { '_Other* }";
  assertEquals("Find inner class parameters",2,findMatchesCount(s1,s2));
  String s3="Thread t = new Thread(\"my thread\") {\n" + "    public void run() {\n" + "        // do stuff\n"+ "    }\n"+ "};";
  String s4="new Thread($args$)";
  assertEquals("Find inner class by new",1,findMatchesCount(s3,s4));
  String s5="class A {\n" + "public static <T> T[] copy(T[] array, Class<T> aClass) {\n" + "    int i = (int)0;\n"+ "    int b = (int)0;\n"+ "    return (T[])array.clone();\n"+ "  }\n"+ "}";
  String s6="($T$[])$expr$";
  assertEquals("Find cast to array",1,findMatchesCount(s5,s6));
  String s7="import java.math.BigDecimal;\n" + "\n" + "public class Prorator {\n"+ "        public void prorate(BigDecimal[] array) {\n"+ "                // do nothing\n"+ "        }\n"+ "        public void prorate2(java.math.BigDecimal[] array) {\n"+ "                // do nothing\n"+ "        }\n"+ "        public void prorate(BigDecimal bd) {\n"+ "                // do nothing\n"+ "        }\n"+ "\n"+ "        public static void main(String[] args) {\n"+ "                BigDecimal[] something = new BigDecimal[2];\n"+ "                java.math.BigDecimal[] something2 = new BigDecimal[2];\n"+ "                something[0] = new BigDecimal(1.0);\n"+ "                something[1] = new BigDecimal(1.0);\n"+ "\n"+ "                Prorator prorator = new Prorator();\n"+ "\n"+ "// ---------------------------------------------------\n"+ "// the line below should've been found, in my opinion.\n"+ "// --------------------------------------------------\n"+ "                prorator.prorate(something);\n"+ "                prorator.prorate(something2);\n"+ "                prorator.prorate(something[0]);\n"+ "                prorator.prorate(something[1]);\n"+ "                prorator.prorate(something[0]);\n"+ "        }\n"+ "}";
  String s8="'_Instance.'_MethodCall:[regex( prorate )]('_Param:[exprtype( BigDecimal\\[\\] )]) ";
  assertEquals("Find method call with array for parameter expr type",2,findMatchesCount(s7,s8,true));
  String s13="try { } catch(Exception e) { e.printStackTrace(); }";
  String s14="'_Instance.'_MethodCall('_Parameter*)";
  assertEquals("Find statement in catch",1,findMatchesCount(s13,s14));
  String s9="int a[] = new int[] { 1,2,3,4};\n" + "int b[] = { 2,3,4,5 };\n" + "Object[] c = new Object[] { \"\", null};";
  String s10="new '_ []{ '_* }";
  String s10_2="new int []{ '_* }";
  assertEquals("Find array instatiation",3,findMatchesCount(s9,s10));
  assertEquals("Find array instatiation, 2",2,findMatchesCount(s9,s10_2));
  if (!IdeaTestUtil.bombExplodes(2005,Calendar.OCTOBER,20,12,0,"-maxim.mossienko","Covariant array types"))   return;
  String s11="class A {\n" + "  void main(String[] argv);" + "}";
  String s12="'t:[regex( *Object\\[\\] ) ] 't2";
  assertEquals("Find array covariant types",1,findMatchesCount(s11,s12));
}
