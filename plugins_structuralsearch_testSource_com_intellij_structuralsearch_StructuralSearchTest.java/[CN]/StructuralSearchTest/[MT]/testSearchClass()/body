{
  assertEquals("no modifier for interface vars",findMatchesCount(s43,s44),3);
  assertEquals("different order of access modifiers",findMatchesCount(s45,s46),1);
  assertEquals("no access modifier",findMatchesCount(s45,s46_2),2);
  assertEquals("type differs with package",findMatchesCount(s47,s48),2);
  assertEquals("reference could differ in package",findMatchesCount(s49,s50),1);
  assertEquals("method access modifier",findMatchesCount(s93,s94),0);
  assertEquals("method access modifier 2",findMatchesCount(s93,s94_2),1);
  assertEquals("field access modifier",findMatchesCount(s93,s94_3),0);
  assertEquals("field access modifier 2",findMatchesCount(s93,s94_4),1);
  final String s127="class a { void b() { new c() {}; } }";
  final String s128="class 't {}";
  assertEquals("class finds anonymous class",findMatchesCount(s127,s128),2);
  final String s129="class a { public void run() {} }\n" + "class a2 { public void run() { run(); } }\n" + "class a3 { public void run() { run(); } }\n"+ "class a4 { public void run(); }";
  final String s130="class 'a { public void run() {} }";
  final String s130_2="class 'a { public void run() { '_statement; } }";
  final String s130_3="class 'a { public void run(); }";
  assertEquals("empty method finds empty method only",findMatchesCount(s129,s130),1);
  assertEquals("nonempty method finds nonempty method",findMatchesCount(s129,s130_2),2);
  assertEquals("nonempty method finds nonempty method",findMatchesCount(s129,s130_3),4);
  final String s133="class S {\n" + "void cc() {\n" + "        new Runnable() {\n"+ "            public void run() {\n"+ "                f();\n"+ "            }\n"+ "            private void f() {\n"+ "                //To change body of created methods use File | Settings | File Templates.\n"+ "            }\n"+ "        };\n"+ "        new Runnable() {\n"+ "            public void run() {\n"+ "                f();\n"+ "            }\n"+ "            private void g() {\n"+ "                //To change body of created methods use File | Settings | File Templates.\n"+ "            }\n"+ "        };\n"+ "        new Runnable() {\n"+ "            public void run() {\n"+ "                f();\n"+ "            }\n"+ "        };\n"+ "    }\n"+ "    private void f() {\n"+ "        //To change body of created methods use File | Settings | File Templates.\n"+ "    }\n"+ "} ";
  final String s134="new Runnable() {\n" + "            public void run() {\n" + "                '_f ();\n"+ "            }\n"+ "            private void '_f ();\n"+ "        }";
  assertEquals("complex expr matching",findMatchesCount(s133,s134),1);
  final String s135="abstract class My {\n" + "    abstract void f();\n" + "}\n"+ "abstract class My2 {\n"+ "    abstract void f();\n"+ "    void fg() {}\n"+ "}";
  final String s136="class 'm {\n" + "    void f();\n" + "    '_type '_method{0,0} ('_paramtype* '_paramname* );\n"+ "}";
  assertEquals("reject method with 0 max occurence",findMatchesCount(s135,s136),1);
  final String s137="abstract class My {\n" + "  int a;\n" + "}\n"+ "abstract class My2 {\n"+ "    Project b;\n"+ "}"+ "abstract class My3 {\n"+ "    Class clazz;"+ "    Project b = null;\n"+ "}"+ "abstract class My {\n"+ "  int a = 1;\n"+ "}\n";
  final String s138="class 'm {\n" + "    Project '_f{0,0} = '_t?;\n" + "}";
  assertEquals("reject field with 0 max occurence",findMatchesCount(s137,s138),2);
  final String s139="class My { boolean equals(Object o); int hashCode(); }";
  final String s139_2="class My { boolean equals(Object o); }";
  final String s140="class 'A { boolean equals(Object '_o ); int '_hashCode{0,0}:hashCode (); }";
  assertEquals("reject method with constraint",findMatchesCount(s139,s140),0);
  assertEquals("reject field with 0 max occurence",findMatchesCount(s139_2,s140),1);
  final String s141="class A { static { a = 10 } }\n" + "class B { { a = 10; } }\n" + "class C { { a = 10; } }";
  final String s142="class '_ { static { a = 10; } } ";
  assertEquals("static block search",findMatchesCount(s141,s142),1);
  final String s143="class A { A() {} };\n" + "class B { B(int a) {} };\n" + "class C { C() {} C(int a) {} };\n"+ "class D {}\n"+ "class E {}";
  final String s144="class 'a { 'd{0,0}:[ script( valueEqualsTo(a) ) ]('_b+ '_c+); }";
}
