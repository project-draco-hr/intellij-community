{
  String s1="class A {\n" + "  int bbb(int c, int ddd, int eee) {\n" + "    int a = 1;\n"+ "    try { int b = 1; } catch(Type t) {}\n"+ "  }\n"+ "}";
  String s2="try  { '_st*; } catch('_Type 't) { '_st2*; }";
  final List<PsiVariable> vars=new ArrayList<PsiVariable>();
  final PsiFile file=PsiManager.getInstance(myProject).getElementFactory().createFileFromText("_.java",s1);
  file.acceptChildren(new PsiRecursiveElementVisitor(){
    public void visitVariable(    final PsiVariable variable){
      super.visitVariable(variable);
      vars.add(variable);
    }
  }
);
  assertEquals(6,vars.size());
  List<MatchResult> results=new ArrayList<MatchResult>();
  Matcher testMatcher=new Matcher(myProject);
  MatchOptions options=new MatchOptions();
  options.setSearchPattern(s2);
  MatcherImplUtil.transform(options);
  options.setFileType(StdFileTypes.JAVA);
  for (  PsiVariable var : vars) {
    final MatchResult matchResult=testMatcher.isMatchedByDownUp(var,options);
    if (matchResult != null)     results.add(matchResult);
    assertTrue((var instanceof PsiParameter && var.getParent() instanceof PsiCatchSection && matchResult != null) || matchResult == null);
  }
  assertEquals(1,results.size());
  MatchResult result=results.get(0);
  assertEquals("t",result.getMatchImage());
}
