{
  String s1="{" + "// This is some comment\n" + "/* This is another\n comment*/\n"+ "// Some garbage\n"+ "/** And now third comment*/\n"+ "/** Some garbage*/ }";
  String s2="// 'Comment:[regex( .*(?:comment).* )]";
  String s3="/** 'Comment:[regex( .*(?:comment).* )] */";
  String s2_2="/* 'Comment:[regex( .*(?:comment).* )] */";
  assertEquals("Comment matching",findMatchesCount(s1,s2),3);
  assertEquals("Comment matching, 2",findMatchesCount(s1,s2_2),3);
  assertEquals("Java doc matching",findMatchesCount(s1,s3),1);
  String s4="\"'test\", \"another test\", \"garbage\"";
  String s5="\"'test:[regex( .*test.* )]\"";
  String s6="\"''test\"";
  assertEquals("Literal content",findMatchesCount(s4,s5),2);
  assertEquals("Literal content with escaping",findMatchesCount(s4,s6),1);
  String s7="\"aaa\"";
  String s8="\"'test:[regex( aaa )]\"";
  assertEquals("Simple literal content",findMatchesCount(s7,s8),1);
  String s9="\" aaa \" \" bbb \" \" ccc ccc aaa\"";
  String s10="\"'test:[regexw( aaa|ccc )]\"";
  String s11="\"'test:[regexw( bbb )]\"";
  assertEquals("Whole word literal content with alternations",findMatchesCount(s9,s10),2);
  assertEquals("Whole word literal content",findMatchesCount(s9,s11),1);
  String s12="assert agentInfo != null : \"agentInfo is null\";\n" + "assert addresses != null : \"addresses is null\";";
  String s13="assert $exp$ != null : \"$exp$ is null\";";
  assertEquals("reference to substituion in comment",findMatchesCount(s12,s13),2);
  String s14="\" (some text with specifal chars)\"," + "\" some\"," + "\"(some)\"";
  String s15="\"('a:[regexw( some )]\"";
  assertEquals("meta char in literal",findMatchesCount(s14,s15),2);
}
