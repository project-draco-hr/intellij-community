{
  assertEquals("search for parameterized pattern",findMatchesCount(s14_1,s15),2);
  assertEquals("search for parameterized pattern 2",findMatchesCount(s14_2,s15),5);
  options.setRecursiveSearch(false);
  assertEquals("search for parameterized pattern-non-recursive",findMatchesCount(s14_1,s15),1);
  assertEquals("search for parameterized pattern 2-non-recursive",findMatchesCount(s14_2,s15),2);
  assertEquals("typed pattern with array 2-non-recursive",findMatchesCount(s23,s24_2),4);
  options.setRecursiveSearch(true);
  assertEquals("search for parameterized pattern 3",findMatchesCount(s14_2,s16),1);
  assertEquals("search for parameterized pattern in field selection",findMatchesCount(s17,s18_1),1);
  assertEquals("search for parameterized pattern with method call",findMatchesCount(s17,s18_2),1);
  assertEquals("search for parameterized pattern with method call ep.2",findMatchesCount(s17,s18_3),4);
  assertEquals("search for same var constraint",findMatchesCount(s19,s20),1);
  assertEquals("search for same var constraint for semi anonymous typed vars",findMatchesCount(s19,s20_2),1);
  assertEquals("search for typed var constraint",findMatchesCount(s22,s21_1),1);
  try {
    findMatchesCount(s22,s21_2);
    assertFalse("search for noncompatible typed var constraint",false);
  }
 catch (  MalformedPatternException e) {
  }
  assertEquals("search for same typed var constraint",findMatchesCount(s22,s21_3),1);
  assertEquals("typed instanceof",findMatchesCount(s65,s66),1);
  assertEquals("typed pattern with array",findMatchesCount(s23,s24_1),2);
  assertEquals("typed pattern with array 2",findMatchesCount(s23,s24_2),6);
  assertEquals("typed pattern in class name, method name, return type, parameter type and name",findMatchesCount(s25,s26),1);
  assertEquals("finding interface",findMatchesCount(s27,s28),1);
  assertEquals("anonymous typed vars",findMatchesCount(s29,s30),1);
  assertEquals("finding class descendants",findMatchesCount(s31,s32),2);
  assertEquals("interface implementation",findMatchesCount(s33,s34),2);
  assertEquals("different order of fields and methods",findMatchesCount(s35,s36),1);
  assertEquals("differend order in throws",findMatchesCount(s37,s38),1);
  assertEquals("match of class without extends to class with it",findMatchesCount(s39,s40),2);
  assertEquals("match of class without extends to class with it, ep. 2",findMatchesCount(s41,s42_1),2);
  assertEquals("match of class without extends to class with it, ep 3",findMatchesCount(s41,s42_2),2);
  assertEquals("typed reference element",findMatchesCount(s51,s52),2);
  assertEquals("empty name for typed var",findMatchesCount(s59,s60),1);
  assertEquals("comparing method with constructor",findMatchesCount(s63,s64),1);
  assertEquals("finding nested class",findMatchesCount(s63_2,s64),2);
  assertEquals("finded nested class by special pattern",findMatchesCount(s63_2,s64_2),1);
  assertEquals("* regexp for typed var",findMatchesCount(s61,s62_1),5);
  assertEquals("+ regexp for typed var",findMatchesCount(s61,s62_2),4);
  assertEquals("? regexp for typed var",findMatchesCount(s61,s62_3),2);
  assertEquals("cast in method parameters",findMatchesCount(s67,s68),1);
  assertEquals("searching for static field in static call",2,findMatchesCount(s69,s70));
  assertEquals("searching for static field in static call, 2",2,findMatchesCount(s69,s70_2));
  assertEquals("* regexp for anonymous typed var",findMatchesCount(s61,s62_4),3);
  assertEquals("+ regexp for anonymous typed var",findMatchesCount(s61,s62_5),2);
  assertEquals("? regexp for anonymous typed var",findMatchesCount(s61,s62_6),2);
  assertEquals("statement inside anonymous class",findMatchesCount(s71,s72),3);
  assertEquals("clever regexp match",findMatchesCount(s91,s92),2);
  assertEquals("clever regexp match 2",findMatchesCount(s91,s92_2),2);
  assertEquals("clever regexp match 3",findMatchesCount(s91,s92_3),2);
}
