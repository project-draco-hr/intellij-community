{
  assertEquals("statement search",findMatchesCount(s1,s2),1);
  assertEquals("several constructions match",findMatchesCount(s5,s4),3);
  assertFalse("several constructions 2",(findMatchesCount(s5,s6)) != 0);
  assertEquals("several constructions 3",findMatchesCount(s7,s8),2);
  assertEquals("several constructions 4",findMatchesCount(s7,s9),2);
  assertEquals("several operators 5",findMatchesCount(s1000,s1001),2);
  assertEquals("two the same statements search",findMatchesCount(s85,s86),1);
  assertEquals("search for simple call",findMatchesCount(s87,s88),1);
  assertEquals("search for simple call 2",findMatchesCount(s87,s88_2),1);
  assertEquals("search for simple call 3",findMatchesCount(s87,s88_3),2);
  String s10015="DocumentListener[] listeners = getCachedListeners();";
  String s10016="'_Type 'Var = '_Call();";
  assertEquals("search for definition with init",1,findMatchesCount(s10015,s10016));
  String s10017="a = b; b = c; a=a; c=c;";
  String s10018="'_a = '_a;";
  assertEquals("search silly assignments",2,findMatchesCount(s10017,s10018));
  String s10019="a.b(); a.b(null); a.b(null, 1);";
  String s10020="a.b(null);";
  assertEquals("search parameter",1,findMatchesCount(s10019,s10020));
  String s10021="short a = 1;\n" + "short b = 2;\n" + "short c = a.b();";
  String s10022="short '_a = '_b.b();";
  assertEquals("search def init bug",1,findMatchesCount(s10021,s10022));
  String s10023="abstract class A { public abstract short getType(); }\n" + "A a;\n" + "switch(a.getType()) {\n"+ "  default:\n"+ "  return 0;\n"+ "}\n"+ "switch(a.getType()) {\n"+ "  case 1:\n"+ "  { return 0; }\n"+ "}";
  String s10024="switch('_a:[exprtype( short )]) { '_statement*; }";
  assertEquals("finding switch",2,findMatchesCount(s10023,s10024));
  String s10025="A[] a;\n" + "A b[];\n" + "A c;";
  String s10026="A[] 'a;";
  String s10026_2="A 'a[];";
  assertEquals("array types in dcl",2,findMatchesCount(s10025,s10026));
  assertEquals("array types in dcl 2",2,findMatchesCount(s10025,s10026_2));
  String s10027="try { a(); } catch(Exception ex) {}\n" + "try { a(); } finally {}\n" + "try { a(); } catch(Exception ex) {} finally {} \n";
  String s10028="try { a(); } finally {}\n";
  assertEquals("finally matching",2,findMatchesCount(s10027,s10028));
  String s10029="for(String a:b) { System.out.println(a); }";
  String s10030="for(String a:b) { '_a; }";
  assertEquals("for each matching",1,findMatchesCount(s10029,s10030));
  String s10033="return x;\n" + "return !x;\n" + "return (x);\n"+ "return (x);\n"+ "return !(x);";
  String s10034="return ('a);";
  assertEquals("Find statement with parethesized expr",2,findMatchesCount(s10033,s10034));
}
