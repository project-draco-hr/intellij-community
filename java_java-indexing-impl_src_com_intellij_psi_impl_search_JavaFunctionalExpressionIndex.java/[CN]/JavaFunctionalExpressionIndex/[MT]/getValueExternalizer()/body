{
  return new DataExternalizer<Collection<IndexHolder>>(){
    @Override public void save(    @NotNull DataOutput out,    Collection<IndexHolder> holders) throws IOException {
      DataInputOutputUtil.writeINT(out,holders.size());
      for (      IndexHolder holder : holders) {
        DataInputOutputUtil.writeINT(out,holder.getLambdaParamsNumber());
        DataInputOutputUtil.writeINT(out,holder.getMethodArgsLength());
        DataInputOutputUtil.writeINT(out,holder.getFunctionExpressionIndex());
      }
    }
    @Override public Collection<IndexHolder> read(    @NotNull DataInput in) throws IOException {
      int l=DataInputOutputUtil.readINT(in);
      final Collection<IndexHolder> holders=new HashSet<IndexHolder>(l);
      while (l-- > 0) {
        holders.add(new IndexHolder(DataInputOutputUtil.readINT(in),DataInputOutputUtil.readINT(in),DataInputOutputUtil.readINT(in)));
      }
      return holders;
    }
  }
;
}
