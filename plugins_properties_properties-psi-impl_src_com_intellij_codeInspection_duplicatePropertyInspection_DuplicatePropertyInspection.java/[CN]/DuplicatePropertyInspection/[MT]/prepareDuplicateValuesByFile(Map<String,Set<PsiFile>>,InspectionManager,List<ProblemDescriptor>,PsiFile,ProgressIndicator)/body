{
  for (  final String value : valueToFiles.keySet()) {
    if (progress != null) {
      progress.setText2(InspectionsBundle.message("duplicate.property.value.progress.indicator.text",value));
      progress.checkCanceled();
    }
    if (value.length() == 0)     continue;
    StringSearcher searcher=new StringSearcher(value,true,true);
    final StringBuffer message=new StringBuffer();
    final int[] duplicatesCount={0};
    Set<PsiFile> psiFilesWithDuplicates=valueToFiles.get(value);
    for (    final PsiFile file : psiFilesWithDuplicates) {
      CharSequence text=file.getViewProvider().getContents();
      LowLevelSearchUtil.processTextOccurrences(text,0,text.length(),searcher,progress,new TIntProcedure(){
        @Override public boolean execute(        int offset){
          PsiElement element=file.findElementAt(offset);
          if (element != null && element.getParent() instanceof Property) {
            final Property property=(Property)element.getParent();
            if (Comparing.equal(property.getValue(),value) && element.getStartOffsetInParent() != 0) {
              if (duplicatesCount[0] == 0) {
                message.append(InspectionsBundle.message("duplicate.property.value.problem.descriptor",property.getValue()));
              }
              surroundWithHref(message,element,true);
              duplicatesCount[0]++;
            }
          }
          return true;
        }
      }
);
    }
    if (duplicatesCount[0] > 1) {
      problemDescriptors.add(manager.createProblemDescriptor(psiFile,message.toString(),false,null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
    }
  }
}
