{
  Set<VirtualFile> selectedRoots=new HashSet<VirtualFile>();
  List<VirtualFile> sortedRoots=ContainerUtil.sorted(roots,new Comparator<VirtualFile>(){
    @Override public int compare(    VirtualFile root1,    VirtualFile root2){
      if (root1.equals(root2))       return 0;
      if (VfsUtilCore.isAncestor(root1,root2,false)) {
        return -1;
      }
      if (VfsUtilCore.isAncestor(root2,root1,false)) {
        return 1;
      }
      return root1.getPath().compareTo(root2.getPath());
    }
  }
);
  for (  FilePath filePath : files) {
    VirtualFile virtualFile=filePath.getVirtualFile();
    if (virtualFile != null && roots.contains(virtualFile)) {
      selectedRoots.add(virtualFile);
    }
 else {
      VirtualFile candidateAncestorRoot=null;
      for (      VirtualFile root : sortedRoots) {
        if (FileUtil.isAncestor(VfsUtilCore.virtualToIoFile(root),filePath.getIOFile(),false)) {
          candidateAncestorRoot=root;
        }
      }
      if (candidateAncestorRoot != null) {
        selectedRoots.add(candidateAncestorRoot);
      }
    }
    if (virtualFile != null) {
      for (      VirtualFile root : roots) {
        if (VfsUtilCore.isAncestor(virtualFile,root,false)) {
          selectedRoots.add(root);
        }
      }
    }
  }
  return selectedRoots;
}
