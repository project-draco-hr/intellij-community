{
  final FrameWrapper showPreviewFrame=new FrameWrapper(project);
  showPreviewFrame.setTitle(userFile.getName());
  LabeledEditor labeledEditor=new LabeledEditor(null);
  final EditorFactory factory=EditorFactory.getInstance();
  Document document=FileDocumentManager.getInstance().getDocument(userFile);
  if (document == null) {
    return;
  }
  final EditorEx createdEditor=(EditorEx)factory.createEditor(document,project,userFile,true);
  Disposer.register(project,new Disposable(){
    public void dispose(){
      factory.releaseEditor(createdEditor);
    }
  }
);
  for (  AnswerPlaceholder answerPlaceholder : taskFile.getAnswerPlaceholders()) {
    answerPlaceholder.setUseLength(true);
    EduAnswerPlaceholderPainter.drawAnswerPlaceholder(createdEditor,answerPlaceholder,JBColor.BLUE);
  }
  JPanel header=new JPanel();
  header.setLayout(new BoxLayout(header,BoxLayout.Y_AXIS));
  header.setBorder(new EmptyBorder(10,10,10,10));
  header.add(new JLabel("Read-only preview."));
  String timeStamp=new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(Calendar.getInstance().getTime());
  header.add(new JLabel(String.format("Created %s.",timeStamp)));
  JComponent editorComponent=createdEditor.getComponent();
  labeledEditor.setComponent(editorComponent,header);
  createdEditor.setCaretVisible(false);
  createdEditor.setCaretEnabled(false);
  showPreviewFrame.setComponent(labeledEditor);
  showPreviewFrame.setSize(new Dimension(500,500));
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    showPreviewFrame.show();
  }
}
