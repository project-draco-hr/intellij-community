{
  Graphics g=myEditorComponent.getGraphics();
  if (g == null)   return;
  TextAttributes attributes=((LexerEditorHighlighter)myHighlighter).getAttributes((DocumentImpl)myDocument,offset,c);
  int fontType=attributes.getFontType();
  FontInfo fontInfo=EditorUtil.fontForChar(c,attributes.getFontType(),this);
  Font font=fontInfo.getFont();
  FontMetrics fontMetrics=getFontMetrics(fontType);
  int charWidth=fontMetrics.charWidth(c);
  int delta=charWidth;
  if (!insert && offset < myDocument.getTextLength()) {
    delta-=fontMetrics.charWidth(myDocument.getCharsSequence().charAt(offset));
  }
  Rectangle tailArea=lineRectangleBetween(offset,myDocument.getLineEndOffset(offsetToLogicalLine(offset)));
  if (tailArea.isEmpty()) {
    tailArea.width+=EditorUtil.getSpaceWidth(fontType,this);
  }
  Color background=attributes.getBackgroundColor() == null ? getCaretRowBackground() : attributes.getBackgroundColor();
  Rectangle newArea=lineRectangleBetween(offset,offset);
  newArea.width+=charWidth;
  String newText=Character.toString(c);
  Point point=newArea.getLocation();
  int ascent=getAscent();
  Color foreground=attributes.getForegroundColor() == null ? getForegroundColor() : attributes.getForegroundColor();
  EditorUIUtil.setupAntialiasing(g);
  if (delta != 0) {
    shift(g,tailArea,delta);
  }
  fill(g,newArea,background);
  print(g,newText,point,ascent,font,foreground);
  Toolkit.getDefaultToolkit().sync();
}
