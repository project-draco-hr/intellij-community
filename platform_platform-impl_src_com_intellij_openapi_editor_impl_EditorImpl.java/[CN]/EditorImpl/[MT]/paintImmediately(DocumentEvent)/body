{
  Graphics g=myEditorComponent.getGraphics();
  if (g == null)   return;
  int offset=e.getOffset();
  String newText=e.getNewFragment().toString();
  Rectangle newArea=lineRectangleBetween(offset,offset + newText.length());
  int delta=newArea.width - myOldArea.width;
  Color background=getCaretRowBackground();
  if (delta != 0) {
    if (delta < 0) {
      CaretRectangle[] caretRectangles=myCaretCursor.getCaretLocations(true);
      if (caretRectangles != null) {
        for (        CaretRectangle it : caretRectangles) {
          Rectangle r=toRectangle(it);
          if (myOldArea.contains(r) && !newArea.contains(r)) {
            myCaretCursor.paintAt(g,it.myPoint.x - delta,it.myPoint.y,it.myWidth,it.myCaret);
          }
        }
      }
    }
    shift(g,myOldTailArea,delta);
    if (delta < 0) {
      Rectangle remainingArea=new Rectangle(myOldTailArea.x + myOldTailArea.width + delta,myOldTailArea.y,-delta,myOldTailArea.height);
      fill(g,remainingArea,background);
    }
  }
  if (!newArea.isEmpty()) {
    TextAttributes attributes=myHighlighter.createIterator(offset).getTextAttributes();
    Point point=newArea.getLocation();
    int ascent=getAscent();
    FontInfo fontInfo=EditorUtil.fontForChar(newText.charAt(0),attributes.getFontType(),this);
    Font font=fontInfo.getFont();
    Color foreground=attributes.getForegroundColor() == null ? getForegroundColor() : attributes.getForegroundColor();
    EditorUIUtil.setupAntialiasing(g);
    fill(g,newArea,background);
    print(g,newText,point,ascent,font,foreground);
  }
  Toolkit.getDefaultToolkit().sync();
}
