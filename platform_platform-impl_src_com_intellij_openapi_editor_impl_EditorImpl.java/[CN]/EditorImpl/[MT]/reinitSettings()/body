{
  assertIsDispatchThread();
  clearSettingsCache();
  reinitDocumentIndentOptions();
  for (EditorColorsScheme scheme=myScheme; scheme instanceof DelegateColorScheme; scheme=((DelegateColorScheme)scheme).getDelegate()) {
    if (scheme instanceof MyColorSchemeDelegate) {
      ((MyColorSchemeDelegate)scheme).updateGlobalScheme();
      break;
    }
  }
  boolean softWrapsUsedBefore=mySoftWrapModel.isSoftWrappingEnabled();
  mySettings.reinitSettings();
  mySoftWrapModel.reinitSettings();
  myCaretModel.reinitSettings();
  mySelectionModel.reinitSettings();
  ourCaretBlinkingCommand.setBlinkCaret(mySettings.isBlinkCaret());
  ourCaretBlinkingCommand.setBlinkPeriod(mySettings.getCaretBlinkPeriod());
  mySizeContainer.reset();
  myFoldingModel.rebuild();
  if (softWrapsUsedBefore ^ mySoftWrapModel.isSoftWrappingEnabled()) {
    mySizeContainer.reset();
    validateSize();
  }
  myHighlighter.setColorScheme(myScheme);
  myFoldingModel.refreshSettings();
  myGutterComponent.reinitSettings();
  myGutterComponent.revalidate();
  myEditorComponent.repaint();
  initTabPainter();
  updateCaretCursor();
  if (myInitialMouseEvent != null) {
    myIgnoreMouseEventsConsecutiveToInitial=true;
  }
  if (myCaretModel.supportsMultipleCarets()) {
    myCaretModel.updateVisualPosition();
  }
 else {
    repaintToScreenBottom(getCaretModel().getLogicalPosition().line);
    int y=getCaretModel().getVisualLineStart() * getLineHeight();
    myGutterComponent.repaint(0,y,myGutterComponent.getWidth(),myGutterComponent.getHeight() - y);
  }
  for (  Caret caret : getCaretModel().getAllCarets()) {
    caret.moveToOffset(caret.getOffset());
  }
}
