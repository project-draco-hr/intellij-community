{
  IdeEventQueue queue=IdeEventQueue.getInstance();
  if (queue.shouldNotTypeInEditor() || ProgressManager.getInstance().hasModalProgressIndicator()) {
    return false;
  }
  FileDocumentManager manager=FileDocumentManager.getInstance();
  final VirtualFile file=manager.getFile(myDocument);
  if (file != null && !file.isValid()) {
    return false;
  }
  ActionManagerEx actionManager=ActionManagerEx.getInstanceEx();
  DataContext dataContext=getDataContext();
  if (isTypingLatencyStatsEnabled()) {
    if (myZeroLatencyTypingWasEnabled != isZeroLatencyTypingEnabled()) {
      resetTypingLatencyStats();
      myZeroLatencyTypingWasEnabled=isZeroLatencyTypingEnabled();
    }
    myTypingLatencyMeter.registerStart();
  }
  if (isZeroLatencyTypingEnabled() && myDocument.isWritable() && !isViewer()&& canPaintImmediately(c)) {
    for (    Caret caret : myCaretModel.getAllCarets()) {
      paintImmediately(caret.getOffset(),c,myIsInsertMode);
    }
    if (isTypingLatencyStatsEnabled()) {
      myTypingLatencyMeter.registerFinish();
    }
  }
  actionManager.fireBeforeEditorTyping(c,dataContext);
  MacUIUtil.hideCursor();
  EditorActionManager.getInstance().getTypedAction().actionPerformed(this,c,dataContext);
  if (isTypingLatencyStatsEnabled()) {
    myCharsTyped++;
    if (myCharsTyped == TYPING_STATS_SAMPLE_SIZE) {
      String stats=formatTypingLatencyStats(myTypingLatencyMeter);
      printToEventLog(stats);
      LOG.info(stats);
      resetTypingLatencyStats();
    }
  }
  return true;
}
