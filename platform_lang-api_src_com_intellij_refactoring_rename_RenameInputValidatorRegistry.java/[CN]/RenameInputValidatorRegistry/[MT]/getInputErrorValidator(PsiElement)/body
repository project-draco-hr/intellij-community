{
  final LinkedHashMap<RenameInputValidatorEx,ProcessingContext> acceptedValidators=new LinkedHashMap<RenameInputValidatorEx,ProcessingContext>();
  for (  final RenameInputValidator validator : Extensions.getExtensions(RenameInputValidator.EP_NAME)) {
    final ProcessingContext context=new ProcessingContext();
    if (validator instanceof RenameInputValidatorEx && validator.getPattern().accepts(element,context)) {
      acceptedValidators.put((RenameInputValidatorEx)validator,context);
    }
  }
  return acceptedValidators.isEmpty() ? null : new Function<String,String>(){
    @Override public String fun(    String newName){
      for (      RenameInputValidatorEx validator : acceptedValidators.keySet()) {
        final String message=validator.getErrorMessage(newName,element.getProject());
        if (message != null) {
          return message;
        }
      }
      return null;
    }
  }
;
}
