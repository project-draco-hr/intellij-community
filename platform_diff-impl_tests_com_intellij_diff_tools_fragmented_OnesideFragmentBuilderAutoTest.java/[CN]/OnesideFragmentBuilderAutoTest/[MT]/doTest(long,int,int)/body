{
  myRng.setSeed(seed);
  ComparisonPolicy policy=null;
  Side masterSide=null;
  for (int i=0; i < runs; i++) {
    if (i % 1000 == 0)     System.out.println(i);
    Document text1=null;
    Document text2=null;
    try {
      rememberSeed();
      text1=generateText(maxLength);
      text2=generateText(maxLength);
      for (      Side side : Side.values()) {
        for (        ComparisonPolicy comparisonPolicy : ComparisonPolicy.values()) {
          policy=comparisonPolicy;
          masterSide=side;
          doTest(text1,text2,policy,masterSide);
        }
      }
    }
 catch (    Throwable e) {
      System.out.println("Seed: " + seed);
      System.out.println("Runs: " + runs);
      System.out.println("MaxLength: " + maxLength);
      System.out.println("Policy: " + policy);
      System.out.println("Current side: " + masterSide);
      System.out.println("I: " + i);
      System.out.println("Current seed: " + getLastSeed());
      System.out.println("Text1: " + textToReadableFormat(text1));
      System.out.println("Text2: " + textToReadableFormat(text2));
      if (e instanceof Error)       throw (Error)e;
      if (e instanceof Exception)       throw (Exception)e;
      throw new Exception(e);
    }
  }
}
