{
  int offsetIgnoringComments=0;
  int offsetIgnoringCommentsAndStrings=0;
  int unneededWhitespaceCount=0;
  String lastTokenText=null;
  IElementType lastTokenType=null;
  TokenSet whitespaceTokens=parserDefinition.getWhitespaceTokens();
  TokenSet stringLiteralElements=parserDefinition.getStringLiteralElements();
  TokenSet commentTokens=parserDefinition.getCommentTokens();
  boolean lastWhiteSpaceWasHandled=false;
  for (IElementType tokenType=lexer.getTokenType(); tokenType != null; lexer.advance(), tokenType=lexer.getTokenType()) {
    if (commentTokens.contains(tokenType)) {
      lastTokenType=tokenType;
      lastTokenText=lexer.getTokenText();
      continue;
    }
    int tokenLength=lexer.getTokenEnd() - lexer.getTokenStart();
    if (isNewLine(lexer,tokenLength) && commentTokens.contains(lastTokenType) && !noWSRequireAfterTokenSet.contains(lastTokenType)) {
      continue;
    }
    offsetIgnoringComments+=tokenLength;
    if (!stringLiteralElements.contains(tokenType)) {
      offsetIgnoringCommentsAndStrings+=tokenLength;
    }
    if (whitespaceTokens.contains(tokenType)) {
      lastWhiteSpaceWasHandled=false;
      if (!commentTokens.contains(lastTokenType) && tokenLength > 1) {
        lexer.advance();
        if (lexer.getTokenType() == null) {
          break;
        }
 else {
          return false;
        }
      }
      if (isNewLine(lexer,tokenLength) && StringUtil.equals(lastTokenText,"\n") || tokenLength > 0 && noWSRequireAfterTokenSet.contains(lastTokenType)) {
        unneededWhitespaceCount++;
        lastWhiteSpaceWasHandled=true;
      }
    }
 else {
      if (!lastWhiteSpaceWasHandled && whitespaceTokens.contains(lastTokenType) && StringUtil.isNotEmpty(lastTokenText)&& noWSRequireBeforeTokenSet.contains(tokenType)) {
        unneededWhitespaceCount++;
      }
    }
    if (stringLiteralElements.contains(tokenType)) {
      lastTokenType=tokenType;
      lastTokenText=lexer.getTokenText();
      continue;
    }
    if (offsetIgnoringComments >= MAX_OFFSET) {
      break;
    }
    lastTokenType=tokenType;
    lastTokenText=lexer.getTokenText();
  }
  return offsetIgnoringComments >= MIN_SIZE && (unneededWhitespaceCount + 0.0d) / offsetIgnoringCommentsAndStrings < MAX_UNNEEDED_OFFSET_PERCENTAGE;
}
