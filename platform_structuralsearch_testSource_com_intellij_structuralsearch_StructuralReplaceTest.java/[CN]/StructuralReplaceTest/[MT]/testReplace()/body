{
  String str="// searching for several constructions\n" + "    lastTest = \"several constructions match\";\n" + "    matches = testMatcher.findMatches(s5,s4, options);\n"+ "    if (matches==null || matches.size()!=3) return false;\n"+ "\n"+ "    // searching for several constructions\n"+ "    lastTest = \"several constructions 2\";\n"+ "    matches = testMatcher.findMatches(s5,s6, options);\n"+ "    if (matches.size()!=0) return false;\n"+ "\n"+ "    //options.setLooseMatching(true);\n"+ "    // searching for several constructions\n"+ "    lastTest = \"several constructions 3\";\n"+ "    matches = testMatcher.findMatches(s7,s8, options);\n"+ "    if (matches.size()!=2) return false;";
  String str2="      lastTest = '_Descr;\n" + "      matches = testMatcher.findMatches('_In,'_Pattern, options);\n" + "      if (matches.size()!='_Number) return false;";
  String str3="assertEquals($Descr$,testMatcher.findMatches($In$,$Pattern$, options).size(),$Number$);";
  String expectedResult1="// searching for several constructions\n" + "    lastTest = \"several constructions match\";\n" + "    matches = testMatcher.findMatches(s5, s4, options);\n"+ "    if (matches == null || matches.size() != 3) return false;\n"+ "\n"+ "    // searching for several constructions\n"+ "    assertEquals(\"several constructions 2\", testMatcher.findMatches(s5, s6, options).size(), 0);\n"+ "\n"+ "    //options.setLooseMatching(true);\n"+ "    // searching for several constructions\n"+ "    assertEquals(\"several constructions 3\", testMatcher.findMatches(s7, s8, options).size(), 2);";
  String str4="";
  options.setToReformatAccordingToStyle(true);
  assertEquals("Basic replacement with formatter",expectedResult1,replacer.testReplace(str,str2,str3,options));
  options.setToReformatAccordingToStyle(false);
  String expectedResult2="// searching for several constructions\n" + "    lastTest = \"several constructions match\";\n" + "    matches = testMatcher.findMatches(s5,s4, options);\n"+ "    if (matches==null || matches.size()!=3) return false;\n"+ "\n"+ "    // searching for several constructions\n"+ "\n"+ "    //options.setLooseMatching(true);\n"+ "    // searching for several constructions";
  assertEquals("Empty replacement",expectedResult2,replacer.testReplace(str,str2,str4,options));
  String str5="testMatcher.findMatches('_In,'_Pattern, options).size()";
  String str6="findMatchesCount($In$,$Pattern$)";
  String expectedResult3="// searching for several constructions\n" + "    lastTest = \"several constructions match\";\n" + "    matches = testMatcher.findMatches(s5, s4, options);\n"+ "    if (matches == null || matches.size() != 3) return false;\n"+ "\n"+ "    // searching for several constructions\n"+ "    assertEquals(\"several constructions 2\", findMatchesCount(s5,s6), 0);\n"+ "\n"+ "    //options.setLooseMatching(true);\n"+ "    // searching for several constructions\n"+ "    assertEquals(\"several constructions 3\", findMatchesCount(s7,s8), 2);";
  assertEquals("Expression replacement",expectedResult3,replacer.testReplace(expectedResult1,str5,str6,options));
  String str7="try { a.doSomething(); b.doSomething(); } catch(IOException ex) {  ex.printStackTrace(); throw new RuntimeException(ex); }";
  String str8="try { 'Statements+; } catch('_ '_) { 'HandlerStatements+; }";
  String str9="$Statements$;";
  String expectedResult4="a.doSomething(); b.doSomething();";
  assertEquals("Multi line match in replacement",expectedResult4,replacer.testReplace(str7,str8,str9,options));
  String str10="    parentNode.insert(compositeNode, i);\n" + "    if (asyncMode) {\n" + "       myTreeModel.nodesWereInserted(parentNode,new int[] {i} );\n"+ "    }";
  String str11="    '_parentNode.insert('_newNode, '_i);\n" + "    if (asyncMode) {\n" + "       myTreeModel.nodesWereInserted('_parentNode,new int[] {'_i} );\n"+ "    }";
  String str12="addChild($parentNode$,$newNode$, $i$);";
  String expectedResult5="    addChild(parentNode,compositeNode, i);";
  assertEquals("Array initializer replacement",expectedResult5,replacer.testReplace(str10,str11,str12,options));
  String str13="  aaa(5,6,3,4,1,2);";
  String str14="aaa('_t{2,2},3,4,'_q{2,2});";
  String str15="aaa($q$,3,4,$t$);";
  String expectedResult6="  aaa(1,2,3,4,5,6);";
  assertEquals("Parameter multiple match",expectedResult6,replacer.testReplace(str13,str14,str15,options));
  String str16="  int c = a();";
  String str17="'_t:a ('_q*,'_p*)";
  String str18="$t$($q$,1,$p$)";
  String expectedResult7="  int c = a(1);";
  assertEquals("Replacement of init in definition + empty substitution",expectedResult7,replacer.testReplace(str16,str17,str18,options));
  String str19="  aaa(bbb);";
  String str20="'t('_);";
  String str21="$t$(ccc);";
  String expectedResult8="  aaa(ccc);";
  assertEquals("One substition replacement",expectedResult8,replacer.testReplace(str19,str20,str21,options));
  String str22="  instance.setAAA(anotherInstance.getBBB());";
  String str23="  '_i.'_m:set(.+) ('_a.'_m2:get(.+) ());";
  String str24="  $a$.set$m2_1$( $i$.get$m_1$() );";
  String expectedResult9="  anotherInstance.setBBB( instance.getAAA() );";
  assertEquals("Reg exp substitution replacement",expectedResult9,replacer.testReplace(str22,str23,str24,options));
  String str25="  LaterInvocator.invokeLater(new Runnable() {\n" + "          public void run() {\n" + "            LOG.info(\"refreshFilesAsync, modalityState=\" + ModalityState.current());\n"+ "            myHandler.getFiles().refreshFilesAsync(new Runnable() {\n"+ "              public void run() {\n"+ "                semaphore.up();\n"+ "              }\n"+ "            });\n"+ "          }\n"+ "        });";
  String str26="  LaterInvocator.invokeLater('Params{1,10});";
  String str27="  com.intellij.openapi.application.ApplicationManager.getApplication().invokeLater($Params$);";
  String expectedResult10="  com.intellij.openapi.application.ApplicationManager.getApplication().invokeLater(new Runnable() {\n" + "          public void run() {\n" + "            LOG.info(\"refreshFilesAsync, modalityState=\" + ModalityState.current());\n"+ "            myHandler.getFiles().refreshFilesAsync(new Runnable() {\n"+ "              public void run() {\n"+ "                semaphore.up();\n"+ "              }\n"+ "            });\n"+ "          }\n"+ "        });";
  assertEquals("Anonymous in parameter",expectedResult10,replacer.testReplace(str25,str26,str27,options));
  String str28="UTElementNode elementNode = new UTElementNode(myProject, processedElement, psiFile,\n" + "                                                          processedElement.getTextOffset(), true,\n" + "                                                          !myUsageViewDescriptor.toMarkInvalidOrReadonlyUsages(), null);";
  String str29="new UTElementNode('_param, '_directory, '_null, '_0, '_true, !'_descr.toMarkInvalidOrReadonlyUsages(),\n" + "  'referencesWord)";
  String str30="new UTElementNode($param$, $directory$, $null$, $0$, $true$, true,\n" + "  $referencesWord$)";
  String expectedResult11="UTElementNode elementNode = new UTElementNode(myProject, processedElement, psiFile, processedElement.getTextOffset(), true, true,\n" + "  null);";
  assertEquals("Replace in def initializer",expectedResult11,replacer.testReplace(str28,str29,str30,options));
  String s31="a = b; b = c; a=a; c=c;";
  String s32="'a = 'a;";
  String s33="1 = 1;";
  String expectedResult12="a = b; b = c; 1 = 1; 1 = 1;";
  assertEquals("replace silly assignments",expectedResult12,replacer.testReplace(s31,s32,s33,options));
  String s34="ParamChecker.isTrue(1==1, \"!!!\");";
  String s35="ParamChecker.isTrue('_expr, '_msg)";
  String s36="assert $expr$ : $msg$";
  String expectedResult13="assert 1==1 : \"!!!\";";
  assertEquals("replace with assert",expectedResult13,replacer.testReplace(s34,s35,s36,options));
  String s37="try { \n" + "  ParamChecker.isTrue(1==1, \"!!!\");\n  \n" + "  // comment we want to leave\n  \n"+ "  ParamChecker.isTrue(2==2, \"!!!\");\n"+ "} catch(Exception ex) {}";
  String s38="try {\n" + "  'Statement{0,100};\n" + "} catch(Exception ex) {}";
  String s39="$Statement$;";
  String expectedResult14="ParamChecker.isTrue(1==1, \"!!!\");\n  \n" + "  // comment we want to leave\n  \n" + "  ParamChecker.isTrue(2==2, \"!!!\");";
  assertEquals("remove try with comments inside",expectedResult14,replacer.testReplace(s37,s38,s39,options));
  String s40="ParamChecker.instanceOf(queryKey, GroupBySqlTypePolicy.GroupKey.class);";
  String s41="ParamChecker.instanceOf('_obj, '_class.class);";
  String s42="assert $obj$ instanceof $class$ : \"$obj$ is an instance of \" + $obj$.getClass() + \"; expected \" + $class$.class;";
  String expectedResult15="assert queryKey instanceof GroupBySqlTypePolicy.GroupKey : \"queryKey is an instance of \" + queryKey.getClass() + \"; expected \" + GroupBySqlTypePolicy.GroupKey.class;";
  assertEquals("Matching/replacing .class literals",expectedResult15,replacer.testReplace(s40,s41,s42,options));
  String s43="class Wpd {\n" + "  static final String TAG_BEAN_VALUE = \"\";\n" + "}\n"+ "XmlTag beanTag = rootTag.findSubTag(Wpd.TAG_BEAN_VALUE);";
  String s44="'_Instance?.findSubTag( '_Parameter:[exprtype( *String ) ])";
  String s45="jetbrains.fabrique.util.XmlApiUtil.findSubTag($Instance$, $Parameter$)";
  String expectedResult16="class Wpd {\n" + "  static final String TAG_BEAN_VALUE = \"\";\n" + "}\n"+ "XmlTag beanTag = jetbrains.fabrique.util.XmlApiUtil.findSubTag(rootTag, Wpd.TAG_BEAN_VALUE);";
  assertEquals("Matching/replacing static fields",expectedResult16,replacer.testReplace(s43,s44,s45,options));
  String s46="Rectangle2D rec = new Rectangle2D.Double(\n" + "                drec.getX(),\n" + "                drec.getY(),\n"+ "                drec.getWidth(),\n"+ "                drec.getWidth());";
  String s47="$Instance$.$MethodCall$()";
  String s48="OtherClass.round($Instance$.$MethodCall$(),5)";
  String expectedResult17="Rectangle2D rec = new Rectangle2D.Double(\n" + "                OtherClass.round(drec.getX(),5),\n" + "                OtherClass.round(drec.getY(),5),\n"+ "                OtherClass.round(drec.getWidth(),5),\n"+ "                OtherClass.round(drec.getWidth(),5));";
  assertEquals("Replace in constructor",expectedResult17,replacer.testReplace(s46,s47,s48,options));
  String s49="class A {}\n" + "class B extends A {}\n" + "A a = new B();";
  String s50="A '_b = new '_B:*A ();";
  String s51="A $b$ = new $B$(\"$b$\");";
  String expectedResult18="class A {}\n" + "class B extends A {}\n" + "A a = new B(\"a\");";
  assertEquals("Class navigation",expectedResult18,replacer.testReplace(s49,s50,s51,options));
  String s52="try {\n" + "  aaa();\n" + "} finally {\n"+ "  System.out.println();"+ "}\n"+ "try {\n"+ "  aaa2();\n"+ "} catch(Exception ex) {\n"+ "  aaa3();\n"+ "}\n"+ "finally {\n"+ "  System.out.println();\n"+ "}\n"+ "try {\n"+ "  aaa4();\n"+ "} catch(Exception ex) {\n"+ "  aaa5();\n"+ "}\n";
  String s53="try { '_a; } finally {\n" + "  '_b;" + "}";
  String s54="$a$;";
  String expectedResult19="aaa();\n" + "try {\n" + "  aaa2();\n"+ "} catch(Exception ex) {\n"+ "  aaa3();\n"+ "}\n"+ "finally {\n"+ "  System.out.println();\n"+ "}\n"+ "try {\n"+ "  aaa4();\n"+ "} catch(Exception ex) {\n"+ "  aaa5();\n"+ "}\n";
  options.getMatchOptions().setLooseMatching(false);
  try {
    assertEquals("Try/finally unwrapped with strict matching",expectedResult19,replacer.testReplace(s52,s53,s54,options));
  }
  finally {
    options.getMatchOptions().setLooseMatching(true);
  }
  String expectedResult19Loose="aaa();\n" + "aaa2();\n" + "try {\n"+ "  aaa4();\n"+ "} catch(Exception ex) {\n"+ "  aaa5();\n"+ "}\n";
  assertEquals("Try/finally unwrapped with loose matching",expectedResult19Loose,replacer.testReplace(s52,s53,s54,options));
  String s55="for(Iterator<String> iterator = stringlist.iterator(); iterator.hasNext();) {\n" + "      String str = iterator.next();\n" + "      System.out.println( str );\n"+ "}";
  String s56="for (Iterator<$Type$> $variable$ = $container$.iterator(); $variable$.hasNext();) {\n" + "    $Type$ $var$ = $variable$.next();\n" + "    $Statements$;\n"+ "}";
  String s57="for($Type$ $var$:$container$) {\n" + "  $Statements$;\n" + "}";
  String expectedResult20="for(String str:stringlist) {\n" + "  System.out.println( str );\n" + "}";
  assertEquals("for with foreach",expectedResult20,replacer.testReplace(s55,s56,s57,options));
  String s58="class A {\n" + "  static Set<String> b_MAP = new HashSet<String>();\n" + "  int c;\n"+ "}";
  String s59="'a:[ regex( (.*)_MAP ) ]";
  String s60="$a_1$_SET";
  String expectedResult21="class A {\n" + "  static Set<String> b_SET = new HashSet<String>();\n" + "  int c;\n"+ "}";
  assertEquals("replace symbol in definition",expectedResult21,replacer.testReplace(s58,s59,s60,options));
  String s64="int x = 42;\n" + "int y = 42; // Stuff";
  String s65="'_Type '_Variable = '_Value; // '_Comment";
  String s66="/**\n" + " *$Comment$\n" + " */\n"+ "$Type$ $Variable$ = $Value$;";
  String expectedResult23="int x = 42;\n" + "/**\n" + " * Stuff\n"+ " */\n"+ "int y = 42;";
  assertEquals("Replacement of the comment with javadoc",expectedResult23,replacer.testReplace(s64,s65,s66,options));
  String s61="try { 1=1; } catch(Exception e) { 1=1; } catch(Throwable t) { 2=2; }";
  String s62="try { '_a; } catch(Exception e) { '_b; }";
  String s63="try { $a$; } catch(Exception1 e) { $b$; } catch(Exception2 e) { $b$; }";
  String expectedResult22="try { 1=1; } catch(Exception1 e) { 1=1; } catch(Exception2 e) { 1=1; } catch(Throwable t) { 2=2; }";
  assertEquals("try replacement by another try will leave the unmatched catch",expectedResult22,replacer.testReplace(s61,s62,s63,options));
}
