{
  final String in="class X {{ Math.abs(-1); }}";
  final String what="Math.abs('a)";
  final String by="Math.abs($a$)";
  final boolean save=options.isToUseStaticImport();
  options.setToUseStaticImport(true);
  try {
    final String expected="import static java.lang.Math.abs;class X {{ abs(-1); }}";
    assertEquals("Replacing with static import",expected,replacer.testReplace(in,what,by,options,true));
    final String in2="class X { void m(java.util.Random r) { Math.abs(r.nextInt()); }}";
    final String expected2="import static java.lang.Math.abs;class X { void m(java.util.Random r) { abs(r.nextInt()); }}";
    assertEquals("don't add broken static imports",expected2,replacer.testReplace(in2,what,by,options,true));
    final String by2="new java.util.Map.Entry() {}";
    final String expected3="import static java.util.Map.Entry;class X {{ new Entry() {}; }}";
    assertEquals("",expected3,replacer.testReplace(in,what,by2,options,true));
    final String in3="import java.util.Collections;" + "class X {" + "  void m() {"+ "    System.out.println(Collections.<String>emptyList());"+ "  }"+ "}";
    final String what3="'_q.'_method:[regex( println )]('a)";
    final String by3="$q$.$method$($a$)";
    final String expected4="import java.util.Collections;" + "import static java.lang.System.out;" + "class X {"+ "  void m() {"+ "    out.println(Collections.<String>emptyList());"+ "  }"+ "}";
    assertEquals("don't break references with type parameters",expected4,replacer.testReplace(in3,what3,by3,options,true));
    final String in4="import java.util.Collections;\n" + "public class X {\n" + "    void some() {\n"+ "        System.out.println(1);\n"+ "        boolean b = Collections.eq(null, null);\n"+ "    }\n"+ "}";
    final String what4="System.out.println(1);";
    final String by4="System.out.println(2);";
    final String expected5="import java.util.Collections;import static java.lang.System.out;\n" + "public class X {\n" + "    void some() {\n"+ "        out.println(2);\n"+ "        boolean b = Collections.eq(null, null);\n"+ "    }\n"+ "}";
    assertEquals("don't add static import to inaccessible members",expected5,replacer.testReplace(in4,what4,by4,options,true));
  }
  finally {
    options.setToUseStaticImport(save);
  }
}
