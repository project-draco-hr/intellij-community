{
  String s43="public @Deprecated class Foo implements Comparable<Foo> {\n" + "  int x;\n" + "  void m(){}\n"+ " }";
  String s44="class 'Class implements '_Interface {}";
  String s45="@MyAnnotation\n" + "class $Class$ implements $Interface$ {}";
  String expectedResult16="@MyAnnotation public @Deprecated\n" + "class Foo implements Comparable<Foo> {\n" + "  int x;\n"+ "  void m(){}\n"+ " }";
  assertEquals("Preserving class modifiers and generic information in type during replacement",expectedResult16,replacer.testReplace(s43,s44,s45,options,true));
  String in="public class A {\n" + "  int i,j, k;\n" + "  void m1() {}\n"+ "\n"+ "  public void m2() {}\n"+ "  void m3() {}\n"+ "}";
  String what="class '_A {\n" + "  public void '_m();\n" + "}";
  String by="class $A$ {\n" + "\tprivate void $m$() {}\n" + "}";
  assertEquals("Should keep member order when replacing","public class A {\n" + "  int i ,j , k;\n" + "  void m1() {}\n"+ "\n"+ "  private void m2() {}\n"+ "  void m3() {}\n"+ "}",replacer.testReplace(in,what,by,options));
}
