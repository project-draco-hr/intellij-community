{
  String s43="public @Deprecated class Foo implements Comparable<Foo> {\n  int x;\n  void m(){}\n }";
  String s44="class 'Class implements '_Interface { '_Content* }";
  String s45="@MyAnnotation\n" + "class $Class$ implements $Interface$ {$Content$}";
  String expectedResult16="@MyAnnotation public @Deprecated\n" + "class Foo implements Comparable<Foo> {int x;\n" + "void m(){}}";
  String actualResult=replacer.testReplace(s43,s44,s45,options,true);
  assertEquals("Preserving var modifiers and generic information in type during replacement",expectedResult16,actualResult);
  String in1="public class A {" + "  public class B {}" + "}";
  String what1="class '_A {" + "  class '_B {}" + "}";
  String by1="class $A$ {" + "  private class $B$ {}" + "}";
  String expected1="public class A {  private class B {}}";
  assertEquals("No illegal modifier combinations during replacement",expected1,replacer.testReplace(in1,what1,by1,options));
}
