{
  final ClassCoverageInfo toplevelClassCoverageInfo=getOrCreateClassCoverageInfo(toplevelClassCoverage,toplevelClassSrcFQName);
  final ClassData classData=projectInfo.getClassData(className);
  if (classData != null) {
    final Object[] lines=classData.getLines();
    for (    Object l : lines) {
      final LineData lineData=(LineData)l;
      if (lineData.getStatus() == LineCoverage.FULL) {
        toplevelClassCoverageInfo.fullyCoveredLineCount++;
      }
 else       if (lineData.getStatus() == LineCoverage.PARTIAL) {
        toplevelClassCoverageInfo.partiallyCoveredLineCount++;
      }
    }
    boolean touchedClass=false;
    for (    final Object nameAndSig : classData.getMethodSigs()) {
      final int covered=classData.getStatus((String)nameAndSig);
      if (covered != LineCoverage.NONE) {
        toplevelClassCoverageInfo.coveredMethodCount++;
        touchedClass=true;
      }
    }
    if (touchedClass) {
      packageCoverageInfo.coveredClassCount++;
    }
    toplevelClassCoverageInfo.totalLineCount+=classData.getLines().length;
    toplevelClassCoverageInfo.totalMethodCount+=classData.getMethodSigs().size();
    packageCoverageInfo.totalLineCount+=classData.getLines().length;
    packageCoverageInfo.totalClassCount++;
  }
 else {
    collectNonCoveredClassInfo(classFile,classData,toplevelClassCoverageInfo,packageCoverageInfo);
  }
}
