{
  final List<Object> list=new ArrayList<>();
  final PsiClass topLevelClass=PsiUtil.getTopLevelClass(getElement());
  final PsiClass cls=TestNGUtil.getProviderClass(getElement(),topLevelClass);
  final boolean needToBeStatic=cls != topLevelClass;
  if (cls != null) {
    final PsiMethod current=PsiTreeUtil.getParentOfType(getElement(),PsiMethod.class);
    final PsiMethod[] methods=cls.getAllMethods();
    for (    PsiMethod method : methods) {
      if (current != null && method.getName().equals(current.getName()))       continue;
      if (needToBeStatic) {
        if (!method.hasModifierProperty(PsiModifier.STATIC))         continue;
      }
 else {
        if (cls != method.getContainingClass() && method.hasModifierProperty(PsiModifier.PRIVATE))         continue;
      }
      final PsiAnnotation dataProviderAnnotation=AnnotationUtil.findAnnotation(method,DataProvider.class.getName());
      if (dataProviderAnnotation != null) {
        final PsiAnnotationMemberValue memberValue=dataProviderAnnotation.findDeclaredAttributeValue("name");
        if (memberValue != null) {
          list.add(LookupValueFactory.createLookupValue(StringUtil.unquoteString(memberValue.getText()),null));
        }
 else {
          list.add(LookupValueFactory.createLookupValue(method.getName(),null));
        }
      }
    }
  }
  return list.toArray();
}
