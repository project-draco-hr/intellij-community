{
  myProject=project;
  myManager=PsiManager.getInstance(myProject);
  myAnonClass=anonymousClass;
  PsiClassType baseRef=myAnonClass.getBaseClassType();
  if (baseRef.resolve() == null) {
    String message=RefactoringBundle.message("error.cannot.resolve",baseRef.getCanonicalText());
    showErrorMessage(editor,message);
    return;
  }
  PsiElement targetContainer=findTargetContainer(myAnonClass);
  if (FileTypeUtils.isInServerPageFile(targetContainer) && targetContainer instanceof PsiFile) {
    String message=RefactoringBundle.message("error.not.supported.for.jsp",REFACTORING_NAME);
    showErrorMessage(editor,message);
    return;
  }
  LOG.assertTrue(targetContainer instanceof PsiClass);
  myTargetClass=(PsiClass)targetContainer;
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,myTargetClass))   return;
  Map<PsiVariable,VariableInfo> variableInfoMap=new LinkedHashMap<PsiVariable,VariableInfo>();
  collectUsedVariables(variableInfoMap,myAnonClass);
  final VariableInfo[] infos=variableInfoMap.values().toArray(new VariableInfo[variableInfoMap.values().size()]);
  myVariableInfos=infos;
  Arrays.sort(myVariableInfos,new Comparator<VariableInfo>(){
    @Override public int compare(    VariableInfo o1,    VariableInfo o2){
      final PsiType type1=o1.variable.getType();
      final PsiType type2=o2.variable.getType();
      if (type1 instanceof PsiEllipsisType) {
        return 1;
      }
      if (type2 instanceof PsiEllipsisType) {
        return -1;
      }
      return ArrayUtil.find(infos,o1) > ArrayUtil.find(infos,o2) ? 1 : -1;
    }
  }
);
  if (!showRefactoringDialog())   return;
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      final Runnable action=new Runnable(){
        public void run(){
          try {
            doRefactoring();
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
      }
;
      ApplicationManager.getApplication().runWriteAction(action);
    }
  }
,REFACTORING_NAME,null);
}
