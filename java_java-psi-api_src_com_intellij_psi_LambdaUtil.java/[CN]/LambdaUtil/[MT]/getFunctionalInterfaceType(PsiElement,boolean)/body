{
  PsiElement parent=expression.getParent();
  PsiElement element=expression;
  while (parent instanceof PsiParenthesizedExpression || parent instanceof PsiConditionalExpression) {
    if (parent instanceof PsiConditionalExpression && ((PsiConditionalExpression)parent).getThenExpression() != element && ((PsiConditionalExpression)parent).getElseExpression() != element)     break;
    element=parent;
    parent=parent.getParent();
  }
  final Map<PsiElement,PsiType> map=ourFunctionTypes.get();
  if (map != null) {
    final PsiType type=map.get(expression);
    if (type != null) {
      return type;
    }
  }
  if (parent instanceof PsiArrayInitializerExpression) {
    final PsiType psiType=((PsiArrayInitializerExpression)parent).getType();
    if (psiType instanceof PsiArrayType) {
      return ((PsiArrayType)psiType).getComponentType();
    }
  }
 else   if (parent instanceof PsiTypeCastExpression) {
    final PsiTypeElement castTypeElement=((PsiTypeCastExpression)parent).getCastType();
    final PsiType castType=castTypeElement != null ? castTypeElement.getType() : null;
    if (castType instanceof PsiIntersectionType) {
      final PsiType conjunct=extractFunctionalConjunct((PsiIntersectionType)castType);
      if (conjunct != null)       return conjunct;
    }
    return castType;
  }
 else   if (parent instanceof PsiVariable) {
    return ((PsiVariable)parent).getType();
  }
 else   if (parent instanceof PsiAssignmentExpression && expression instanceof PsiExpression && !PsiUtil.isOnAssignmentLeftHand((PsiExpression)expression)) {
    final PsiExpression lExpression=((PsiAssignmentExpression)parent).getLExpression();
    return lExpression.getType();
  }
 else   if (parent instanceof PsiExpressionList) {
    final PsiExpressionList expressionList=(PsiExpressionList)parent;
    final int lambdaIdx=getLambdaIdx(expressionList,expression);
    if (lambdaIdx > -1) {
      PsiElement gParent=expressionList.getParent();
      if (gParent instanceof PsiAnonymousClass) {
        gParent=gParent.getParent();
      }
      if (gParent instanceof PsiCall) {
        final PsiCall contextCall=(PsiCall)gParent;
        final MethodCandidateInfo.CurrentCandidateProperties properties=MethodCandidateInfo.getCurrentMethod(contextCall.getArgumentList());
        if (properties != null && properties.isApplicabilityCheck()) {
          final PsiParameter[] parameters=properties.getMethod().getParameterList().getParameters();
          final int finalLambdaIdx=adjustLambdaIdx(lambdaIdx,properties.getMethod(),parameters);
          if (finalLambdaIdx < parameters.length) {
            return properties.getSubstitutor().substitute(getNormalizedType(parameters[finalLambdaIdx]));
          }
        }
        final JavaResolveResult resolveResult=properties != null ? properties.getInfo() : contextCall.resolveMethodGenerics();
        return getSubstitutedType(expression,tryToSubstitute,lambdaIdx,resolveResult);
      }
    }
  }
 else   if (parent instanceof PsiReturnStatement) {
    final PsiElement gParent=PsiTreeUtil.getParentOfType(parent,PsiLambdaExpression.class,PsiMethod.class);
    if (gParent instanceof PsiLambdaExpression) {
      return getFunctionalInterfaceTypeByContainingLambda((PsiLambdaExpression)gParent);
    }
 else     if (gParent instanceof PsiMethod) {
      return ((PsiMethod)gParent).getReturnType();
    }
  }
 else   if (parent instanceof PsiLambdaExpression) {
    return getFunctionalInterfaceTypeByContainingLambda((PsiLambdaExpression)parent);
  }
  return null;
}
