{
  if (psiClass != null && psiClass.isInterface() && !psiClass.isAnnotationType()) {
    final List<HierarchicalMethodSignature> methods=new ArrayList<HierarchicalMethodSignature>();
    final Collection<HierarchicalMethodSignature> visibleSignatures=psiClass.getVisibleSignatures();
    for (    HierarchicalMethodSignature signature : visibleSignatures) {
      final PsiMethod psiMethod=signature.getMethod();
      if (!psiMethod.hasModifierProperty(PsiModifier.ABSTRACT))       continue;
      if (psiMethod.hasModifierProperty(PsiModifier.STATIC))       continue;
      if (!overridesPublicObjectMethod(signature)) {
        methods.add(signature);
      }
    }
    return hasSubsignature(methods);
  }
  return null;
}
