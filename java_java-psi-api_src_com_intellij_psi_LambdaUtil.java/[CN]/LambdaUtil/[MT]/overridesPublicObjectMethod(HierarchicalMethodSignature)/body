{
  final List<HierarchicalMethodSignature> signatures=psiMethod.getSuperSignatures();
  if (signatures.isEmpty()) {
    final PsiMethod method=psiMethod.getMethod();
    final PsiClass containingClass=method.getContainingClass();
    if (containingClass != null && CommonClassNames.JAVA_LANG_OBJECT.equals(containingClass.getQualifiedName())) {
      if (method.hasModifierProperty(PsiModifier.PUBLIC)) {
        return true;
      }
    }
  }
  for (  HierarchicalMethodSignature superMethod : signatures) {
    if (overridesPublicObjectMethod(superMethod)) {
      return true;
    }
  }
  return false;
}
