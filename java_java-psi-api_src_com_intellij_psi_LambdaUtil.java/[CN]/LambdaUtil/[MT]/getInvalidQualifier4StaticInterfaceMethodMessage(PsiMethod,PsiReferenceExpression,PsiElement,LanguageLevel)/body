{
  final PsiExpression qualifierExpression=methodReferenceExpression.getQualifierExpression();
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass != null && containingClass.isInterface() && method.hasModifierProperty(PsiModifier.STATIC)) {
    if (!languageLevel.isAtLeast(LanguageLevel.JDK_1_8)) {
      return "Static interface method invocations are not supported at this language level";
    }
    if (qualifierExpression == null && (scope instanceof PsiImportStaticStatement || PsiTreeUtil.isAncestor(containingClass,methodReferenceExpression,true)) || qualifierExpression instanceof PsiReferenceExpression && ((PsiReferenceExpression)qualifierExpression).resolve() == containingClass) {
      return null;
    }
    return "Static method may be invoked on containing interface class only";
  }
  return null;
}
