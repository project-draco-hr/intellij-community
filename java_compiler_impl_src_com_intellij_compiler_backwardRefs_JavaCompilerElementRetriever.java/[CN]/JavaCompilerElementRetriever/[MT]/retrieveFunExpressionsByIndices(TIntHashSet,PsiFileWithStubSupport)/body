{
  StubTree tree=psiFile.getStubTree();
  boolean foreign=tree == null;
  if (foreign) {
    tree=((PsiFileImpl)psiFile).calcStubTree();
  }
  PsiFunctionalExpression[] result=new PsiFunctionalExpression[indices.size()];
  int resIdx=0;
  int funExprIdx=0;
  for (  StubElement<?> element : tree.getPlainList()) {
    if (FUN_EXPR.contains(element.getStubType()) && indices.contains(funExprIdx++)) {
      result[resIdx++]=asPsi((FunctionalExpressionStub<?>)element,psiFile,tree,foreign);
    }
  }
  return result;
}
