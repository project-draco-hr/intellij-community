{
  final PyDocStringOwner docStringOwner=PsiTreeUtil.getParentOfType(parameters.getOriginalPosition(),PyDocStringOwner.class);
  if (docStringOwner != null) {
    final PsiFile file=docStringOwner.getContainingFile();
    final Module module=ModuleUtilCore.findModuleForPsiElement(docStringOwner);
    if (module != null) {
      final PyDocumentationSettings settings=PyDocumentationSettings.getInstance(module);
      if (!settings.isPlain(file))       return;
      result=result.withPrefixMatcher(getPrefix(parameters.getOffset(),file));
      final Collection<String> identifiers=PyRefactoringUtil.collectUsedNames(docStringOwner);
      for (      String identifier : identifiers)       result.addElement(LookupElementBuilder.create(identifier));
      final Collection<String> fileIdentifiers=PyRefactoringUtil.collectUsedNames(parameters.getOriginalFile());
      for (      String identifier : fileIdentifiers)       result.addElement(LookupElementBuilder.create(identifier));
    }
  }
}
