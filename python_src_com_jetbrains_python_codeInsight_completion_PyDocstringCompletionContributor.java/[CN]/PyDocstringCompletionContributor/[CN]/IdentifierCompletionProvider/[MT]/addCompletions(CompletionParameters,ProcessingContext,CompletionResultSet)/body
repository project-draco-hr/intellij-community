{
  if (parameters.isAutoPopup())   return;
  final PsiElement element=parameters.getOriginalPosition();
  if (element == null)   return;
  final PsiFile file=element.getContainingFile();
  if (file.findReferenceAt(parameters.getOffset()) != null)   return;
  final PyDocStringOwner docStringOwner=PsiTreeUtil.getParentOfType(element,PyDocStringOwner.class);
  final Module module=ModuleUtilCore.findModuleForPsiElement(element);
  if (module != null) {
    result=result.withPrefixMatcher(getPrefix(parameters.getOffset(),file));
    final Collection<String> identifiers=PyRefactoringUtil.collectUsedNames(docStringOwner);
    for (    String identifier : identifiers)     result.addElement(LookupElementBuilder.create(identifier));
    final Collection<String> fileIdentifiers=PyRefactoringUtil.collectUsedNames(parameters.getOriginalFile());
    for (    String identifier : fileIdentifiers)     result.addElement(LookupElementBuilder.create(identifier));
  }
}
