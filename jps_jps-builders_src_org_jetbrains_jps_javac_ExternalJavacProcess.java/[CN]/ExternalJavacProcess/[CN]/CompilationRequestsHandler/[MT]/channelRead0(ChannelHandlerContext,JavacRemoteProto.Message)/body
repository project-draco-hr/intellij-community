{
  final UUID sessionId=JavacProtoUtil.fromProtoUUID(message.getSessionId());
  final JavacRemoteProto.Message.Type messageType=message.getMessageType();
  JavacRemoteProto.Message reply=null;
  try {
    if (messageType == JavacRemoteProto.Message.Type.REQUEST) {
      final JavacRemoteProto.Message.Request request=message.getRequest();
      final JavacRemoteProto.Message.Request.Type requestType=request.getRequestType();
      if (requestType == JavacRemoteProto.Message.Request.Type.COMPILE) {
        if (myCancelHandler == null) {
          final List<String> options=request.getOptionList();
          final List<File> files=toFiles(request.getFileList());
          final List<File> cp=toFiles(request.getClasspathList());
          final List<File> platformCp=toFiles(request.getPlatformClasspathList());
          final List<File> srcPath=toFiles(request.getSourcepathList());
          final Map<File,Set<File>> outs=new HashMap<File,Set<File>>();
          for (          JavacRemoteProto.Message.Request.OutputGroup outputGroup : request.getOutputList()) {
            final Set<File> srcRoots=new HashSet<File>();
            for (            String root : outputGroup.getSourceRootList()) {
              srcRoots.add(new File(root));
            }
            outs.put(new File(outputGroup.getOutputRoot()),srcRoots);
          }
          final CancelHandler cancelHandler=new CancelHandler();
          myCancelHandler=cancelHandler;
          SharedThreadPool.getInstance().executeOnPooledThread(new Runnable(){
            @Override public void run(){
              try {
                context.channel().writeAndFlush(compile(context,sessionId,options,files,cp,platformCp,srcPath,outs,cancelHandler)).awaitUninterruptibly();
              }
  finally {
                myCancelHandler=null;
                ExternalJavacProcess.this.stop();
              }
            }
          }
);
        }
      }
 else       if (requestType == JavacRemoteProto.Message.Request.Type.CANCEL) {
        cancelBuild();
      }
 else       if (requestType == JavacRemoteProto.Message.Request.Type.SHUTDOWN) {
        cancelBuild();
        new Thread("StopThread"){
          @Override public void run(){
            ExternalJavacProcess.this.stop();
          }
        }
.start();
      }
 else {
        reply=JavacProtoUtil.toMessage(sessionId,JavacProtoUtil.createFailure("Unsupported request type: " + requestType.name(),null));
      }
    }
 else {
      reply=JavacProtoUtil.toMessage(sessionId,JavacProtoUtil.createFailure("Unsupported message: " + messageType.name(),null));
    }
  }
  finally {
    if (reply != null) {
      context.channel().writeAndFlush(reply);
    }
  }
}
