{
  UUID uuid=null;
  String host=null;
  int port=-1;
  if (args.length > 0) {
    try {
      uuid=UUID.fromString(args[0]);
    }
 catch (    Exception e) {
      System.err.println("Error parsing session id: " + e.getMessage());
      System.exit(-1);
    }
    host=args[1];
    try {
      port=Integer.parseInt(args[2]);
    }
 catch (    NumberFormatException e) {
      System.err.println("Error parsing port: " + e.getMessage());
      System.exit(-1);
    }
  }
 else {
    System.err.println("Insufficient parameters");
    System.exit(-1);
  }
  final ExternalJavacProcess process=new ExternalJavacProcess();
  try {
    if (process.connect(host,port)) {
      process.myConnectFuture.channel().writeAndFlush(JavacProtoUtil.toMessage(uuid,JavacProtoUtil.createRequestAckResponse()));
    }
 else {
      System.err.println("Failed to connect to parent process");
      System.exit(-1);
    }
  }
 catch (  Throwable throwable) {
    throwable.printStackTrace(System.err);
    System.exit(-1);
  }
}
