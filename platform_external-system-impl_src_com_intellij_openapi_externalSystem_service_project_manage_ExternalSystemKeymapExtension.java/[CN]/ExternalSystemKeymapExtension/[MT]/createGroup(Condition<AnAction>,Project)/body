{
  KeymapGroup result=KeymapGroupFactory.getInstance().createGroup(ExternalSystemBundle.message("external.system.keymap.group"),ExternalSystemIcons.TaskGroup);
  if (project == null)   return result;
  MultiMap<ProjectSystemId,String> projectToActionsMapping=MultiMap.create();
  for (  ExternalSystemManager<?,?,?,?,?> manager : ExternalSystemApiUtil.getAllManagers()) {
    projectToActionsMapping.putValues(manager.getSystemId(),ContainerUtil.<String>emptyList());
  }
  ActionManager actionManager=ActionManager.getInstance();
  if (actionManager != null) {
    for (    String eachId : actionManager.getActionIds(getActionPrefix(project,null))) {
      AnAction eachAction=actionManager.getAction(eachId);
      if (!(eachAction instanceof MyExternalSystemAction))       continue;
      if (condition != null && !condition.value(actionManager.getActionOrStub(eachId)))       continue;
      MyExternalSystemAction taskAction=(MyExternalSystemAction)eachAction;
      projectToActionsMapping.putValue(taskAction.getSystemId(),eachId);
    }
  }
  Map<ProjectSystemId,KeymapGroup> keymapGroupMap=ContainerUtil.newHashMap();
  for (  ProjectSystemId systemId : projectToActionsMapping.keySet()) {
    if (!keymapGroupMap.containsKey(systemId)) {
      final Icon projectIcon=ExternalSystemUiUtil.getUiAware(systemId).getProjectIcon();
      KeymapGroup group=KeymapGroupFactory.getInstance().createGroup(systemId.getReadableName(),projectIcon);
      keymapGroupMap.put(systemId,group);
    }
  }
  for (  Map.Entry<ProjectSystemId,Collection<String>> each : projectToActionsMapping.entrySet()) {
    Collection<String> tasks=each.getValue();
    final ProjectSystemId systemId=each.getKey();
    final KeymapGroup systemGroup=keymapGroupMap.get(systemId);
    if (systemGroup == null)     continue;
    for (    String actionId : tasks) {
      systemGroup.addActionId(actionId);
    }
    if (systemGroup instanceof Group) {
      Icon icon=SystemInfoRt.isMac ? AllIcons.ToolbarDecorator.Mac.Add : AllIcons.ToolbarDecorator.Add;
      ((Group)systemGroup).addHyperlink(new Hyperlink(icon,"Choose a task to assign a shortcut"){
        @Override public void onClick(        MouseEvent e){
          SelectExternalTaskDialog dialog=new SelectExternalTaskDialog(systemId,project);
          if (dialog.showAndGet() && dialog.getResult() != null) {
            TaskData taskData=dialog.getResult().second;
            String ownerModuleName=dialog.getResult().first;
            ExternalSystemTaskAction externalSystemAction=(ExternalSystemTaskAction)getOrRegisterAction(project,ownerModuleName,taskData);
            ApplicationManager.getApplication().getMessageBus().syncPublisher(KeymapListener.CHANGE_TOPIC).processCurrentKeymapChanged();
            Settings allSettings=Settings.KEY.getData(DataManager.getInstance().getDataContext(e.getComponent()));
            KeymapPanel keymapPanel=allSettings != null ? allSettings.find(KeymapPanel.class) : null;
            if (keymapPanel != null) {
              keymapPanel.showOption("");
              keymapPanel.selectAction(externalSystemAction.myId);
            }
          }
        }
      }
);
    }
  }
  for (  KeymapGroup keymapGroup : keymapGroupMap.values()) {
    if (isGroupFiltered(condition,keymapGroup)) {
      result.addGroup(keymapGroup);
    }
  }
  for (  ActionsProvider extension : ActionsProvider.EP_NAME.getExtensions()) {
    KeymapGroup keymapGroup=extension.createGroup(condition,project);
    if (isGroupFiltered(condition,keymapGroup)) {
      result.addGroup(keymapGroup);
    }
  }
  return result;
}
