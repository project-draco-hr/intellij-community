{
  if (classMember != null && !willBeMoved(classMember,myMovedMembers)) {
    final PsiClass containingClass=classMember.getContainingClass();
    if (containingClass != null && !PsiUtil.isAccessibleFromPackage(classMember,myTargetPackage) && (classMember.hasModifierProperty(PsiModifier.PACKAGE_LOCAL) || classMember.hasModifierProperty(PsiModifier.PROTECTED) && !mySubClass.isInheritor(containingClass,true))) {
      myConflicts.putValue(myMember,RefactoringUIUtil.getDescription(classMember,true) + " won't be accessible");
    }
  }
}
