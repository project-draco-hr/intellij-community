{
  PyDocStringOwner owner=PsiTreeUtil.getParentOfType(getElement(),PyDocStringOwner.class);
  if (owner instanceof PyFunction) {
    List<PyNamedParameter> result=Lists.newArrayList();
    final List<PyNamedParameter> namedParameters=ParamHelper.collectNamedParameters(((PyFunction)owner).getParameterList());
    Set<String> usedParameters=new HashSet<String>();
    PyStringLiteralExpression expression=PsiTreeUtil.getParentOfType(getElement(),PyStringLiteralExpression.class,false);
    if (expression != null) {
      PsiReference[] references=expression.getReferences();
      for (      PsiReference ref : references) {
        if (ref instanceof DocStringParameterReference)         usedParameters.add(ref.getCanonicalText());
      }
    }
    for (    PyNamedParameter param : namedParameters) {
      if (!usedParameters.contains(param.getName()))       result.add(param);
    }
    return ArrayUtil.toObjectArray(result);
  }
  return ArrayUtil.EMPTY_OBJECT_ARRAY;
}
