{
  final File ioFile=myPath.getIOFile();
  Status status=myVcs.getFactory(ioFile).createStatusClient().doStatus(ioFile,false);
  if (myCommittedRevision == null) {
    myCommittedRevision=new SvnRevisionNumber(status.getCommittedRevision());
  }
  if (status == null || StatusType.STATUS_UNVERSIONED.equals(status.getNodeStatus())) {
    myVcs.getFactory(ioFile).createRevertClient().revert(new File[]{ioFile},Depth.INFINITY,null);
    updateIoFile(ioFile,SVNRevision.HEAD);
    return;
  }
 else   if (StatusType.STATUS_ADDED.equals(status.getNodeStatus())) {
    myVcs.getFactory(ioFile).createRevertClient().revert(new File[]{ioFile},Depth.INFINITY,null);
    updateIoFile(ioFile,SVNRevision.HEAD);
    FileUtil.delete(ioFile);
    return;
  }
 else {
    final Set<File> usedToBeAdded=new HashSet<File>();
    if (myPath.isDirectory()) {
      StatusClient statusClient=myVcs.getFactory(ioFile).createStatusClient();
      statusClient.doStatus(ioFile,SVNRevision.UNDEFINED,Depth.INFINITY,false,false,false,false,new StatusConsumer(){
        @Override public void consume(        Status status) throws SVNException {
          if (status != null && StatusType.STATUS_ADDED.equals(status.getNodeStatus())) {
            usedToBeAdded.add(status.getFile());
          }
        }
      }
,null);
    }
    myVcs.getFactory(ioFile).createRevertClient().revert(new File[]{ioFile},Depth.INFINITY,null);
    for (    File wasAdded : usedToBeAdded) {
      FileUtil.delete(wasAdded);
    }
    updateIoFile(ioFile,SVNRevision.HEAD);
  }
}
