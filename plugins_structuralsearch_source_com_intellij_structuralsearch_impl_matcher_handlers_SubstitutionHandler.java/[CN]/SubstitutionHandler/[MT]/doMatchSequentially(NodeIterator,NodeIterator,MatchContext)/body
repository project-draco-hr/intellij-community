{
  final int previousMatchedOccurs=matchedOccurs;
  FilteringNodeIterator fNodes2=new FilteringNodeIterator(nodes2,VARS_DELIM_FILTER);
  try {
    MatchingHandler handler=context.getPattern().getHandler(nodes.current());
    matchedOccurs=0;
    boolean flag=false;
    while (fNodes2.hasNext() && matchedOccurs < minOccurs) {
      if (handler.match(nodes.current(),nodes2.current(),context)) {
        ++matchedOccurs;
      }
 else {
        break;
      }
      fNodes2.advance();
      flag=true;
    }
    if (matchedOccurs != minOccurs) {
      removeLastResults(matchedOccurs,context);
      fNodes2.rewind(matchedOccurs);
      return false;
    }
    if (greedy) {
      while (fNodes2.hasNext() && matchedOccurs < maxOccurs) {
        if (handler.match(nodes.current(),nodes2.current(),context)) {
          ++matchedOccurs;
        }
 else {
          break;
        }
        fNodes2.advance();
        flag=true;
      }
      if (flag) {
        fNodes2.rewind();
        nodes2.advance();
      }
      nodes.advance();
      if (nodes.hasNext()) {
        final MatchingHandler nextHandler=context.getPattern().getHandler(nodes.current());
        while (matchedOccurs >= minOccurs) {
          if (nextHandler.matchSequentially(nodes,nodes2,context)) {
            totalMatchedOccurs=matchedOccurs;
            return true;
          }
          if (matchedOccurs > 0) {
            nodes2.rewind();
            removeLastResults(1,context);
          }
          --matchedOccurs;
        }
        if (matchedOccurs > 0) {
          removeLastResults(matchedOccurs,context);
        }
        nodes.rewind();
        return false;
      }
 else {
        if (handler.isMatchSequentiallySucceeded(nodes2)) {
          return checkSameOccurencesConstraint();
        }
        removeLastResults(matchedOccurs,context);
        return false;
      }
    }
 else {
      nodes.advance();
      if (flag) {
        fNodes2.rewind();
        nodes2.advance();
      }
      if (nodes.hasNext()) {
        final MatchingHandler nextHandler=context.getPattern().getHandler(nodes.current());
        flag=false;
        while (nodes2.hasNext() && matchedOccurs <= maxOccurs) {
          if (nextHandler.matchSequentially(nodes,nodes2,context)) {
            return checkSameOccurencesConstraint();
          }
          if (flag) {
            nodes2.rewind();
            fNodes2.advance();
          }
          if (handler.match(nodes.current(),nodes2.current(),context)) {
            matchedOccurs++;
          }
 else {
            nodes.rewind();
            removeLastResults(matchedOccurs,context);
            return false;
          }
          nodes2.advance();
          flag=true;
        }
        nodes.rewind();
        removeLastResults(matchedOccurs,context);
        return false;
      }
 else {
        return checkSameOccurencesConstraint();
      }
    }
  }
  finally {
    matchedOccurs=previousMatchedOccurs;
  }
}
