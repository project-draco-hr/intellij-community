{
  if (!myRef.isValid())   return;
  MavenProject mavenProject=MavenDomUtil.findContainingProject(file);
  if (mavenProject == null)   return;
  final List<MavenId> ids=MavenArtifactSearchDialog.searchForClass(project,getReferenceText());
  if (ids.isEmpty())   return;
  final MavenDomProjectModel model=MavenDomUtil.getMavenDomProjectModel(project,mavenProject.getFile());
  if (model == null)   return;
  new WriteCommandAction(project,"Add Maven Dependency",DomUtil.getFile(model)){
    @Override protected void run(    @NotNull Result result) throws Throwable {
      boolean isTestSource=false;
      VirtualFile virtualFile=file.getOriginalFile().getVirtualFile();
      if (virtualFile != null) {
        isTestSource=ProjectRootManager.getInstance(project).getFileIndex().isInTestSourceContent(virtualFile);
      }
      for (      MavenId each : ids) {
        MavenDomDependency dependency=MavenDomUtil.createDomDependency(model,null,each);
        if (isTestSource) {
          dependency.getScope().setStringValue("test");
        }
      }
    }
  }
.execute();
}
