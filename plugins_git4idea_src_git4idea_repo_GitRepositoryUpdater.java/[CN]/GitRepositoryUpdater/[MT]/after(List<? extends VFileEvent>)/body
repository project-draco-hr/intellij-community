{
  boolean configChanged=false;
  boolean headChanged=false;
  boolean branchFileChanged=false;
  boolean packedRefsChanged=false;
  boolean rebaseFileChanged=false;
  boolean mergeFileChanged=false;
  boolean tagChanged=false;
  for (  VFileEvent event : events) {
    String filePath=GitFileUtils.stripFileProtocolPrefix(event.getPath());
    if (myRepositoryFiles.isConfigFile(filePath)) {
      configChanged=true;
    }
 else     if (myRepositoryFiles.isHeadFile(filePath)) {
      headChanged=true;
    }
 else     if (myRepositoryFiles.isBranchFile(filePath)) {
      branchFileChanged=true;
      RepositoryUtil.visitAllChildrenRecursively(myHeadsDir);
    }
 else     if (myRepositoryFiles.isRemoteBranchFile(filePath)) {
      branchFileChanged=true;
      RepositoryUtil.visitAllChildrenRecursively(myRemotesDir);
    }
 else     if (myRepositoryFiles.isPackedRefs(filePath)) {
      packedRefsChanged=true;
    }
 else     if (myRepositoryFiles.isRebaseFile(filePath)) {
      rebaseFileChanged=true;
    }
 else     if (myRepositoryFiles.isMergeFile(filePath)) {
      mergeFileChanged=true;
    }
 else     if (myRepositoryFiles.isTagFile(filePath)) {
      RepositoryUtil.visitAllChildrenRecursively(myTagsDir);
      tagChanged=true;
    }
  }
  if (headChanged || configChanged || branchFileChanged|| packedRefsChanged|| rebaseFileChanged|| mergeFileChanged) {
    myUpdateQueue.add(DUMMY_UPDATE_OBJECT);
  }
 else   if (tagChanged) {
    myRepository.getProject().getMessageBus().syncPublisher(GitRepository.GIT_REPO_CHANGE).repositoryChanged(myRepository);
  }
}
