{
  final int key=FileBasedIndex.getFileId(inputData.getFile());
  final Map<Integer,Collection<TraitFieldDescriptor>> result=ContainerUtil.newHashMap();
  new ClassReader(inputData.getContent()).accept(new ClassVisitor(ASM5){
    @Override public FieldVisitor visitField(    int access,    String name,    String desc,    String signature,    Object value){
      processField(access,name,desc,signature);
      return null;
    }
    private void processField(    int access,    String name,    String desc,    String signature){
      if ((access & ACC_SYNTHETIC) == 0)       return;
      final boolean isStatic;
      final boolean isPublic;
      Pair<Boolean,String> p;
      if ((p=parse(STATIC_PREFIX,INSTANCE_PREFIX,name)).first != null) {
        isStatic=p.first;
        name=p.second;
      }
 else {
        return;
      }
      if ((p=parse(PUBLIC_PREFIX,PRIVATE_PREFIX,name)).first != null) {
        isPublic=p.first;
        name=p.second;
      }
 else {
        return;
      }
      final String typeString=TypeInfo.createTypeText(StubBuildingVisitor.fieldType(desc,signature));
      if (typeString == null)       return;
      final int delimiter=name.indexOf(DELIMITER);
      if (delimiter > -1) {
        name=name.substring(delimiter + DELIMITER.length());
      }
      Collection<TraitFieldDescriptor> values=result.get(key);
      if (values == null) {
        result.put(key,(values=ContainerUtil.newArrayList()));
      }
      values.add(new TraitFieldDescriptor(isStatic,isPublic,typeString,name));
    }
    private Pair<Boolean,String> parse(    String prefix,    String prefix2,    String input){
      if (input.startsWith(prefix)) {
        return Pair.create(true,input.substring(prefix.length()));
      }
 else       if (input.startsWith(prefix2)) {
        return Pair.create(false,input.substring(prefix2.length()));
      }
 else {
        return Pair.create(null,input);
      }
    }
  }
,ClassReader.SKIP_FRAMES);
  return result;
}
