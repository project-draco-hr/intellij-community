{
  final Collection<TraitFieldDescriptor> values=ContainerUtil.newArrayList();
  new ClassReader(inputData.getContent()).accept(new ClassVisitor(ASM5){
    @Override public FieldVisitor visitField(    int access,    String name,    String desc,    String signature,    Object value){
      processField(access,name,desc,signature);
      return null;
    }
    private void processField(    int access,    String name,    String desc,    String signature){
      if ((access & ACC_SYNTHETIC) == 0)       return;
      final boolean isStatic;
      final boolean isPublic;
      Pair<Boolean,String> p;
      if ((p=parse(STATIC_PREFIX,INSTANCE_PREFIX,name)).first != null) {
        isStatic=p.first;
        name=p.second;
      }
 else {
        return;
      }
      if ((p=parse(PUBLIC_PREFIX,PRIVATE_PREFIX,name)).first != null) {
        isPublic=p.first;
        name=p.second;
      }
 else {
        return;
      }
      final String typeString=fieldType(desc,signature);
      if (typeString == null)       return;
      final int delimiter=name.indexOf(DELIMITER);
      if (delimiter > -1) {
        name=name.substring(delimiter + DELIMITER.length());
      }
      byte flags=(byte)((isPublic ? TraitFieldDescriptor.PUBLIC : 0) | (isStatic ? TraitFieldDescriptor.STATIC : 0));
      values.add(new TraitFieldDescriptor(flags,typeString,name));
    }
    private Pair<Boolean,String> parse(    String prefix,    String prefix2,    String input){
      if (input.startsWith(prefix)) {
        return Pair.create(true,input.substring(prefix.length()));
      }
 else       if (input.startsWith(prefix2)) {
        return Pair.create(false,input.substring(prefix2.length()));
      }
 else {
        return Pair.create(null,input);
      }
    }
    private String fieldType(    String desc,    String signature){
      if (signature != null) {
        try {
          return SignatureParsing.parseTypeString(new StringCharacterIterator(signature),StubBuildingVisitor.GUESSING_MAPPER);
        }
 catch (        ClsFormatException ignored) {
        }
      }
      String raw=Type.getType(desc).getClassName();
      return StubBuildingVisitor.GUESSING_MAPPER.fun(raw);
    }
  }
,ClassReader.SKIP_CODE);
  return values;
}
