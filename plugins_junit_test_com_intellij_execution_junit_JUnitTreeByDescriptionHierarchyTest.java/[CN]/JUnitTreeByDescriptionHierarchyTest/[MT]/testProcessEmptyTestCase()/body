{
  final Description description=Description.createSuiteDescription("TestA");
  final Description emptyDescription=Description.createTestDescription(SMTestSender.EMPTY_SUITE_NAME,SMTestSender.EMPTY_SUITE_WARNING);
  description.addChild(emptyDescription);
  final StringBuffer buf=new StringBuffer();
  final PrintStream printStream=new PrintStream(new OutputStream(){
    @Override public void write(    int b) throws IOException {
      buf.append(new String(new byte[]{(byte)b}));
    }
  }
);
  final SMTestSender sender=new SMTestSender(printStream);
  sender.sendTree(description);
  sender.testRunStarted(description);
  sender.testStarted(emptyDescription);
  sender.testFinished(emptyDescription);
  sender.testRunFinished(new Result());
  Assert.assertEquals("output: " + buf,"##teamcity[suiteTreeNode name='warning' locationHint='java:test://junit.framework.TestSuite$1.warning']\n" + "##teamcity[enteredTheMatrix]\n" + "\n"+ "##teamcity[rootName name = 'TestA']\n"+ "\n"+ "##teamcity[testStarted name='warning' locationHint='java:test://junit.framework.TestSuite$1.warning']\n"+ "\n"+ "##teamcity[testFinished name='warning']\n"+ "##teamcity[testSuiteFinished name='TestA']\n"+ "\n",StringUtil.convertLineSeparators(buf.toString()));
}
