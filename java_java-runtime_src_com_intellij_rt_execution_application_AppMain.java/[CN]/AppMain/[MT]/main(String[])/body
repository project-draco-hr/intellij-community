{
  if (!ourHasSecurityProblem) {
    final int portNumber=Integer.getInteger(PROPERTY_PORT_NUMBER).intValue();
    Thread t=new Thread(new Runnable(){
      public void run(){
        try {
          ServerSocket socket=new ServerSocket(portNumber);
          try {
            Socket client=socket.accept();
            try {
              BufferedReader reader=new BufferedReader(new InputStreamReader(client.getInputStream()));
              try {
                while (true) {
                  String msg=reader.readLine();
                  if ("TERM".equals(msg)) {
                    return;
                  }
 else                   if ("BREAK".equals(msg)) {
                    triggerControlBreak();
                  }
 else                   if ("STOP".equals(msg)) {
                    System.exit(1);
                  }
                }
              }
  finally {
                reader.close();
              }
            }
  finally {
              client.close();
            }
          }
  finally {
            socket.close();
          }
        }
 catch (        IOException ignored) {
        }
catch (        IllegalArgumentException ignored) {
        }
catch (        SecurityException ignored) {
        }
      }
    }
,"Monitor Ctrl-Break");
    try {
      t.setDaemon(true);
      t.start();
    }
 catch (    Exception ignored) {
    }
  }
  String mainClass=args[0];
  String[] params=new String[args.length - 1];
  System.arraycopy(args,1,params,0,args.length - 1);
  Class appClass=Class.forName(mainClass);
  Method m;
  try {
    m=appClass.getMethod("main",new Class[]{params.getClass()});
  }
 catch (  NoSuchMethodException e) {
    if (!startJavaFXApplication(params,appClass)) {
      throw e;
    }
    return;
  }
  if (!Modifier.isStatic(m.getModifiers())) {
    System.err.println("main method should be static");
    return;
  }
  if (!void.class.isAssignableFrom(m.getReturnType())) {
    System.err.println("main method must return a value of type void");
    return;
  }
  try {
    m.setAccessible(true);
    m.invoke(null,new Object[]{params});
  }
 catch (  InvocationTargetException ite) {
    throw ite.getTargetException();
  }
}
