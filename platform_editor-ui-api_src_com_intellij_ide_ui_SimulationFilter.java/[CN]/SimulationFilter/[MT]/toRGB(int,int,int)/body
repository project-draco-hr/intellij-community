{
  double powR=Math.pow(srcR,2.2);
  double powG=Math.pow(srcG,2.2);
  double powB=Math.pow(srcB,2.2);
  double X=0.4124240 * powR + 0.357579 * powG + 0.1804640 * powB;
  double Y=0.2126560 * powR + 0.715158 * powG + 0.0721856 * powB;
  double Z=0.0193324 * powR + 0.119193 * powG + 0.9504440 * powB;
  double chroma_x=X / (X + Y + Z);
  double chroma_y=Y / (X + Y + Z);
  double m=(chroma_y - myConfuseY) / (chroma_x - myConfuseX);
  double yint=chroma_y - chroma_x * m;
  double deviate_x=(myConfuseYint - yint) / (m - myConfuseM);
  double deviate_y=(m * deviate_x) + yint;
  X=deviate_x * Y / deviate_y;
  Z=(1.0 - (deviate_x + deviate_y)) * Y / deviate_y;
  double neutral_X=Y * 0.312713 / 0.329016;
  double neutral_Z=Y * 0.358271 / 0.329016;
  double diffX=neutral_X - X;
  double diffZ=neutral_Z - Z;
  double diffR=+3.2407100 * diffX - 0.4985710 * diffZ;
  double diffG=-0.9692580 * diffX + 0.0415557 * diffZ;
  double diffB=+0.0556352 * diffX + 1.0570700 * diffZ;
  double dstR=+3.2407100 * X - 1.537260 * Y - 0.4985710 * Z;
  double dstG=-0.9692580 * X + 1.875990 * Y + 0.0415557 * Z;
  double dstB=+0.0556352 * X - 0.203996 * Y + 1.0570700 * Z;
  double fitR=((dstR < 0 ? 0 : 1) - dstR) / diffR;
  double fitG=((dstG < 0 ? 0 : 1) - dstG) / diffG;
  double fitB=((dstB < 0 ? 0 : 1) - dstB) / diffB;
  double adjust=Math.max(Math.max((fitR < 0 || 1 < fitR) ? 0 : fitR,(fitG < 0 || 1 < fitG) ? 0 : fitG),(fitB < 0 || 1 < fitB) ? 0 : fitB);
  dstR+=adjust * diffR;
  dstG+=adjust * diffG;
  dstB+=adjust * diffB;
  dstR=Math.pow(dstR,1 / 2.2);
  dstG=Math.pow(dstG,1 / 2.2);
  dstB=Math.pow(dstB,1 / 2.2);
  return toRGB(srcR,srcG,srcB,dstR,dstG,dstB);
}
