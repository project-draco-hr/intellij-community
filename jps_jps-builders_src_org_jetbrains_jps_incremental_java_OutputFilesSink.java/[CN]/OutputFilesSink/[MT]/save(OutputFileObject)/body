{
  final BinaryContent content=fileObject.getContent();
  final File srcFile=fileObject.getSourceFile();
  boolean isTemp=false;
  final JavaFileObject.Kind outKind=fileObject.getKind();
  if (srcFile != null && content != null) {
    final String sourcePath=FileUtil.toSystemIndependentName(srcFile.getPath());
    final JavaSourceRootDescriptor rootDescriptor=myContext.getProjectDescriptor().getBuildRootIndex().findJavaRootDescriptor(myContext,srcFile);
    try {
      if (rootDescriptor != null) {
        isTemp=rootDescriptor.isTemp;
        if (!isTemp) {
          if (outKind == JavaFileObject.Kind.CLASS) {
            myOutputConsumer.registerCompiledClass(rootDescriptor.target,new CompiledClass(fileObject.getFile(),srcFile,fileObject.getClassName(),content));
          }
 else {
            myOutputConsumer.registerOutputFile(rootDescriptor.target,fileObject.getFile(),Collections.<String>singleton(sourcePath));
          }
        }
      }
 else {
        if (outKind == JavaFileObject.Kind.CLASS) {
          myOutputConsumer.registerCompiledClass(null,new CompiledClass(fileObject.getFile(),srcFile,fileObject.getClassName(),content));
        }
      }
    }
 catch (    IOException e) {
      myContext.processMessage(new CompilerMessage(JavaBuilder.BUILDER_NAME,e));
    }
    if (!isTemp && outKind == JavaFileObject.Kind.CLASS) {
      try {
        final ClassReader reader=new FailSafeClassReader(content.getBuffer(),content.getOffset(),content.getLength());
        myMappingsCallback.associate(FileUtil.toSystemIndependentName(fileObject.getFile().getPath()),sourcePath,reader);
      }
 catch (      Throwable e) {
        final String message="Class dependency information may be incomplete! Error parsing generated class " + fileObject.getFile().getPath();
        LOG.info(message,e);
        myContext.processMessage(new CompilerMessage(JavaBuilder.BUILDER_NAME,BuildMessage.Kind.WARNING,message + "\n" + CompilerMessage.getTextFromThrowable(e),sourcePath));
      }
    }
  }
  if (outKind == JavaFileObject.Kind.CLASS) {
    myContext.processMessage(new ProgressMessage("Writing classes... " + myChunkName));
    if (!isTemp && srcFile != null) {
      mySuccessfullyCompiled.add(srcFile);
    }
  }
}
