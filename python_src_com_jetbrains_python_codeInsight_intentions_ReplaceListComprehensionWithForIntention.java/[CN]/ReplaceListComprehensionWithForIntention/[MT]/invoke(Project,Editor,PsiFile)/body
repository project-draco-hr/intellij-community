{
  PyListCompExpression expression=PsiTreeUtil.getTopmostParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PyListCompExpression.class);
  if (expression == null) {
    return;
  }
  PsiElement parent=expression.getParent();
  PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
  if (parent instanceof PyAssignmentStatement) {
    PsiElement leftExpr=((PyAssignmentStatement)parent).getLeftHandSideExpression();
    PyAssignmentStatement initAssignment=elementGenerator.createFromText(LanguageLevel.getDefault(),PyAssignmentStatement.class,leftExpr.getText() + " = []");
    PsiElement lineBreak=elementGenerator.createFromText(LanguageLevel.getDefault(),PsiWhiteSpace.class,"\n");
    initAssignment.add(lineBreak);
    PyStatement result=elementGenerator.createFromText(LanguageLevel.forElement(expression),PyStatement.class,leftExpr.getText() + ".append(" + getResult(expression).getText()+ ")");
    PyForStatement forStatement=createForLoop(expression,elementGenerator,result);
    initAssignment.add(forStatement);
    parent.replace(initAssignment);
  }
 else   if (parent instanceof PyPrintStatement) {
    PyStatement result=elementGenerator.createFromText(LanguageLevel.forElement(expression),PyStatement.class,"print " + "(" + getResult(expression).getText() + ")");
    PyForStatement forStatement=createForLoop(expression,elementGenerator,result);
    parent.replace(forStatement);
  }
}
