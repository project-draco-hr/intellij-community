{
  super.visitBinaryExpression(expression);
  final IElementType tokenType1=expression.getOperationTokenType();
  if (!JavaTokenType.OROR.equals(tokenType1)) {
    return;
  }
  final PsiExpression lhs1=ParenthesesUtils.stripParentheses(expression.getLOperand());
  if (!(lhs1 instanceof PsiBinaryExpression)) {
    return;
  }
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)lhs1;
  final IElementType tokenType2=binaryExpression.getOperationTokenType();
  if (!JavaTokenType.ANDAND.equals(tokenType2)) {
    return;
  }
  final PsiExpression lhs2=ParenthesesUtils.stripParentheses(binaryExpression.getLOperand());
  final PsiExpression rhs1=ParenthesesUtils.stripParentheses(expression.getROperand());
  final PsiExpression negated=BoolUtils.getNegated(rhs1);
  if (!EquivalenceChecker.expressionsAreEquivalent(lhs2,negated)) {
    return;
  }
  registerError(expression,expression);
}
