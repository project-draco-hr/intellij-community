{
  List<VirtualFile> files=new ArrayList<VirtualFile>(candidateFiles.keySet());
  return processPsiFileRootsAsync(files,totalSize,alreadyProcessedFiles,progress,new Processor<PsiFile>(){
    @Override public boolean process(    final PsiFile psiRoot){
      TooManyUsagesStatus.getFrom(progress).pauseProcessingIfTooManyUsages();
      final VirtualFile vfile=ApplicationManager.getApplication().runReadAction(new Computable<VirtualFile>(){
        @Override public VirtualFile compute(){
          return psiRoot.getVirtualFile();
        }
      }
);
      for (      final RequestWithProcessor singleRequest : candidateFiles.get(vfile)) {
        Processor<PsiElement> localProcessor=localProcessors.get(singleRequest);
        if (!localProcessor.process(psiRoot)) {
          return false;
        }
      }
      return true;
    }
  }
);
}
