{
  if ("package-info.class".equals(file.getName())) {
    return ClsFileImpl.decompile(file);
  }
  ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  if (indicator != null)   myProgress.put(file,indicator);
  try {
    Map<String,VirtualFile> files=ContainerUtil.newLinkedHashMap();
    files.put(file.getPath(),file);
    String mask=file.getNameWithoutExtension() + "$";
    for (    VirtualFile child : file.getParent().getChildren()) {
      String name=child.getNameWithoutExtension();
      if (name.startsWith(mask) && name.length() > mask.length() && file.getFileType() == StdFileTypes.CLASS) {
        files.put(FileUtil.toSystemIndependentName(child.getPath()),child);
      }
    }
    MyBytecodeProvider provider=new MyBytecodeProvider(files);
    MyResultSaver saver=new MyResultSaver();
    if (Registry.is("decompiler.use.line.mapping")) {
      myOptions.put(IFernflowerPreferences.BYTECODE_SOURCE_MAPPING,"1");
      myOptions.put(IFernflowerPreferences.USE_DEBUG_LINE_NUMBERS,"0");
    }
 else     if (Registry.is("decompiler.use.line.table")) {
      myOptions.put(IFernflowerPreferences.BYTECODE_SOURCE_MAPPING,"0");
      myOptions.put(IFernflowerPreferences.USE_DEBUG_LINE_NUMBERS,"1");
    }
 else {
      myOptions.put(IFernflowerPreferences.BYTECODE_SOURCE_MAPPING,"0");
      myOptions.put(IFernflowerPreferences.USE_DEBUG_LINE_NUMBERS,"0");
    }
    if (Registry.is("decompiler.dump.original.lines")) {
      myOptions.put(IFernflowerPreferences.DUMP_ORIGINAL_LINES,"1");
    }
    BaseDecompiler decompiler=new BaseDecompiler(provider,saver,myOptions,myLogger);
    for (    String path : files.keySet()) {
      decompiler.addSpace(new File(path),true);
    }
    decompiler.decompileContext();
    file.putUserData(LineNumbersMapping.LINE_NUMBERS_MAPPING_KEY,new ExactMatchLineNumbersMapping(saver.myMapping));
    return saver.myResult;
  }
 catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  Exception e) {
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      AssertionError error=new AssertionError(file.getUrl());
      error.initCause(e);
      throw error;
    }
 else {
      throw new CannotDecompileException(e);
    }
  }
 finally {
    myProgress.remove(file);
  }
}
