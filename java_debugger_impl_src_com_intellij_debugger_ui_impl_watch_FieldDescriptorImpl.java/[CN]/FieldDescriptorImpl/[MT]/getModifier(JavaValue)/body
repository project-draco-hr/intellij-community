{
  return new JavaValueModifier(value){
    @Override protected void setValueImpl(    @NotNull String expression,    @NotNull XModificationCallback callback){
      final DebuggerContextImpl debuggerContext=DebuggerManagerEx.getInstanceEx(getProject()).getContext();
      FieldDescriptorImpl fieldDescriptor=FieldDescriptorImpl.this;
      final Field field=fieldDescriptor.getField();
      if (!field.isStatic()) {
        final ObjectReference object=fieldDescriptor.getObject();
        if (object != null) {
          set(expression,callback,debuggerContext,new SetValueRunnable(){
            public void setValue(            EvaluationContextImpl evaluationContext,            Value newValue) throws ClassNotLoadedException, InvalidTypeException, EvaluateException {
              object.setValue(field,preprocessValue(evaluationContext,newValue,field.type()));
              update(debuggerContext);
            }
            public ReferenceType loadClass(            EvaluationContextImpl evaluationContext,            String className) throws InvocationException, ClassNotLoadedException, IncompatibleThreadStateException, InvalidTypeException, EvaluateException {
              return evaluationContext.getDebugProcess().loadClass(evaluationContext,className,field.declaringType().classLoader());
            }
          }
);
        }
      }
 else {
        ReferenceType refType=field.declaringType();
        if (refType instanceof ClassType) {
          final ClassType classType=(ClassType)refType;
          set(expression,callback,debuggerContext,new SetValueRunnable(){
            public void setValue(            EvaluationContextImpl evaluationContext,            Value newValue) throws ClassNotLoadedException, InvalidTypeException, EvaluateException {
              classType.setValue(field,preprocessValue(evaluationContext,newValue,field.type()));
              update(debuggerContext);
            }
            public ReferenceType loadClass(            EvaluationContextImpl evaluationContext,            String className) throws InvocationException, ClassNotLoadedException, IncompatibleThreadStateException, InvalidTypeException, EvaluateException {
              return evaluationContext.getDebugProcess().loadClass(evaluationContext,className,field.declaringType().classLoader());
            }
          }
);
        }
      }
    }
  }
;
}
