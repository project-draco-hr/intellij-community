{
  if (expression instanceof PsiLambdaExpression) {
    return expression;
  }
  if (expression instanceof PsiMethodCallExpression) {
    final PsiMethod method=((PsiMethodCallExpression)expression).resolveMethod();
    if (method == null) {
      return null;
    }
    final PsiType type=method.getReturnType();
    if (!(type instanceof PsiClassType)) {
      return null;
    }
    final PsiClass lambdaClass=((PsiClassType)type).resolve();
    if (lambdaClass == null) {
      return null;
    }
    final String methodName=lambdaClass.getMethods()[0].getName();
    if (tryConvertPseudoLambdaToStreamApi(method,resolveStreamApiLambdaClass(expression.getProject(),streamApiMethodName))) {
      return expression;
    }
 else {
      return JavaPsiFacade.getElementFactory(expression.getProject()).createExpressionFromText(expression.getText() + "::" + methodName,null);
    }
  }
  return AnonymousCanBeLambdaInspection.replacePsiElementWithLambda(expression,true);
}
