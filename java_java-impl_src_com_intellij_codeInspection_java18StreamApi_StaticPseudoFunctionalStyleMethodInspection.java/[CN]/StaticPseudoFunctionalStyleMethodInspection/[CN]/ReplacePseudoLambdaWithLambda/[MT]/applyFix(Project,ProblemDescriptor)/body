{
  PsiMethodCallExpression expression=PsiTreeUtil.getParentOfType(descriptor.getPsiElement(),PsiMethodCallExpression.class);
  LOG.assertTrue(expression != null);
  final PsiExpression[] expressions=expression.getArgumentList().getExpressions();
  PsiExpression lambdaExpression=expressions[myLambdaIndex];
  lambdaExpression=convertClassTypeExpression(lambdaExpression);
  lambdaExpression=convertToJavaLambda(lambdaExpression,mySuitableHandler.getStreamApiMethodName());
  LOG.assertTrue(lambdaExpression != null);
  final PsiExpression collectionExpression=expressions[(1 + myLambdaIndex) % 2];
  final String pipelineHead=createPipelineHeadText(collectionExpression);
  final String lambdaExpressionText;
  final String elementText;
  if (!StreamApiConstants.FAKE_FIND_MATCHED.equals(mySuitableHandler.getStreamApiMethodName())) {
    elementText=mySuitableHandler.getStreamApiMethodName();
    lambdaExpressionText=lambdaExpression.getText();
  }
 else {
    elementText=expressions.length == 3 ? String.format(StreamApiConstants.FAKE_FIND_MATCHED_WITH_DEFAULT_PATTERN,lambdaExpression.getText(),expressions[2].getText()) : String.format(StreamApiConstants.FAKE_FIND_MATCHED_PATTERN,lambdaExpression.getText());
    lambdaExpressionText=null;
  }
  final String pipelineTail=StreamApiConstants.STREAM_STREAM_API_METHODS.getValue().contains(mySuitableHandler.getStreamApiMethodName()) ? findSuitableTailMethodForCollection(myMethodPointer.getElement()) : null;
  final PsiElement replaced=expression.replace(createPipelineExpression(pipelineHead,elementText,lambdaExpressionText,pipelineTail,project));
  JavaCodeStyleManager.getInstance(project).shortenClassReferences(replaced.getParent());
}
