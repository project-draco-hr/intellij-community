{
  MultiMap<XLocalAttachGroup,Pair<ProcessInfo,ArrayList<XLocalAttachDebugger>>> groupWithItems=new MultiMap<XLocalAttachGroup,Pair<ProcessInfo,ArrayList<XLocalAttachDebugger>>>();
  UserDataHolderBase dataHolder=new UserDataHolderBase();
  for (  ProcessInfo eachInfo : processList) {
    MultiMap<XLocalAttachGroup,XLocalAttachDebugger> groupsWithDebuggers=new MultiMap<XLocalAttachGroup,XLocalAttachDebugger>();
    for (    XLocalAttachDebuggerProvider eachProvider : providers) {
      groupsWithDebuggers.putValues(eachProvider.getAttachGroup(),eachProvider.getAvailableDebuggers(project,eachInfo,dataHolder));
    }
    for (    XLocalAttachGroup eachGroup : groupsWithDebuggers.keySet()) {
      Collection<XLocalAttachDebugger> debuggers=groupsWithDebuggers.get(eachGroup);
      if (!debuggers.isEmpty()) {
        groupWithItems.putValue(eachGroup,Pair.create(eachInfo,new ArrayList<XLocalAttachDebugger>(debuggers)));
      }
    }
  }
  ArrayList<XLocalAttachGroup> sortedGroups=new ArrayList<XLocalAttachGroup>(groupWithItems.keySet());
  Collections.sort(sortedGroups,new Comparator<XLocalAttachGroup>(){
    @Override public int compare(    XLocalAttachGroup a,    XLocalAttachGroup b){
      return a.getOrder() - b.getOrder();
    }
  }
);
  List<AttachItem> currentItems=new ArrayList<AttachItem>();
  for (  final XLocalAttachGroup eachGroup : sortedGroups) {
    List<Pair<ProcessInfo,ArrayList<XLocalAttachDebugger>>> sortedItems=new ArrayList<Pair<ProcessInfo,ArrayList<XLocalAttachDebugger>>>(groupWithItems.get(eachGroup));
    Collections.sort(sortedItems,new Comparator<Pair<ProcessInfo,ArrayList<XLocalAttachDebugger>>>(){
      @Override public int compare(      Pair<ProcessInfo,ArrayList<XLocalAttachDebugger>> a,      Pair<ProcessInfo,ArrayList<XLocalAttachDebugger>> b){
        return eachGroup.compare(project,a.first,b.first);
      }
    }
);
    boolean first=true;
    for (    Pair<ProcessInfo,ArrayList<XLocalAttachDebugger>> eachItem : sortedItems) {
      currentItems.add(new AttachItem(eachGroup,first,eachItem.first,eachItem.second));
      first=false;
    }
  }
  List<AttachItem> currentHistoryItems=new ArrayList<AttachItem>();
  List<HistoryItem> history=getHistory(project);
  for (int i=history.size() - 1; i >= 0; i--) {
    HistoryItem eachHistoryItem=history.get(i);
    for (    AttachItem eachCurrentItem : currentItems) {
      boolean isSuitableItem=eachHistoryItem.getGroup().equals(eachCurrentItem.getGroup()) && eachHistoryItem.getProcessInfo().getCommandLine().equals(eachCurrentItem.getProcessInfo().getCommandLine());
      if (!isSuitableItem)       continue;
      List<XLocalAttachDebugger> debuggers=eachCurrentItem.getDebuggers();
      int selectedDebugger=-1;
      for (int j=0; j < debuggers.size(); j++) {
        XLocalAttachDebugger eachDebugger=debuggers.get(j);
        if (eachDebugger.getDebuggerDisplayName().equals(eachHistoryItem.getDebuggerName())) {
          selectedDebugger=j;
          break;
        }
      }
      if (selectedDebugger == -1)       continue;
      currentHistoryItems.add(new AttachItem(eachCurrentItem.getGroup(),currentHistoryItems.isEmpty(),XDebuggerBundle.message("xdebugger.attach.toLocal.popup.recent"),eachCurrentItem.getProcessInfo(),debuggers,selectedDebugger));
    }
  }
  currentHistoryItems.addAll(currentItems);
  return currentHistoryItems;
}
