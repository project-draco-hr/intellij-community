{
  if (field.getInitializer() != null) {
    definiteAssignment.set(true,false);
  }
  final PsiClass aClass=field.getContainingClass();
  if (aClass == null) {
    return;
  }
  final PsiElement[] children=aClass.getChildren();
  final boolean isStatic=field.hasModifierProperty(PsiModifier.STATIC);
  for (  PsiElement child : children) {
    if (child instanceof PsiField) {
      final PsiField otherField=(PsiField)child;
      if (otherField.hasModifierProperty(PsiModifier.STATIC) == isStatic) {
        checkExpression(otherField.getInitializer(),definiteAssignment,BooleanExpressionValue.UNDEFINED);
      }
    }
 else     if (child instanceof PsiClassInitializer) {
      final PsiClassInitializer classInitializer=(PsiClassInitializer)child;
      if (classInitializer.hasModifierProperty(PsiModifier.STATIC) == isStatic) {
        checkCodeBlock(classInitializer.getBody(),definiteAssignment);
      }
    }
  }
  if (!isStatic) {
    final PsiMethod[] constructors=aClass.getConstructors();
    if (constructors.length != 0) {
      final boolean da=definiteAssignment.isDefinitelyAssigned();
      final boolean du=definiteAssignment.isDefinitelyUnassigned();
      boolean resultDa=true;
      boolean resultDu=true;
      for (      PsiMethod constructor : constructors) {
        checkConstructor(constructor,definiteAssignment);
        resultDa&=definiteAssignment.isDefinitelyAssigned();
        resultDu&=definiteAssignment.isDefinitelyUnassigned();
        if (definiteAssignment.stop())         return;
        definiteAssignment.set(da,du);
      }
      definiteAssignment.set(resultDa,resultDu);
    }
  }
}
