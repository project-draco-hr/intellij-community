{
  myTextArea=textArea;
  myInfoMode=infoMode;
  myTextArea.addPropertyChangeListener("background",this);
  myTextArea.addFocusListener(this);
  myTextArea.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      updateIconsLayout();
    }
  }
);
  myTextArea.setBorder(null);
  myTextArea.setOpaque(false);
  myScrollPane=new JBScrollPane(myTextArea,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED){
    @Override public Dimension getPreferredSize(){
      Dimension d=super.getPreferredSize();
      d.height=Math.min(d.height,myTextArea.getUI().getPreferredSize(myTextArea).height);
      return d;
    }
  }
;
  myScrollPane.getVerticalScrollBar().setBackground(UIUtil.TRANSPARENT_COLOR);
  myScrollPane.getViewport().setBorder(null);
  myScrollPane.getViewport().setOpaque(false);
  myScrollPane.setBorder(JBUI.Borders.emptyRight(2));
  myScrollPane.setOpaque(false);
  myInfoLabel=new JBLabel(UIUtil.ComponentStyle.SMALL);
  myInfoLabel.setForeground(JBColor.GRAY);
  setBorder(JBUI.Borders.empty(7,6,3,6));
  setLayout(new MigLayout("flowx, ins 0 1 0 0, gapx " + JBUI.scale(4)));
  add(createButton(new ShowHistoryAction(search)),"ay top");
  add(myScrollPane,"growx, pushx, shrinky, gaptop " + JBUI.scale(1));
  if (myInfoMode) {
    add(myInfoLabel,"ay top, gaptop " + JBUI.scale(2));
  }
 else {
    myClearButton=createButton(new ClearAction());
    myNewLineButton=createButton(new NewLineAction());
    myIconsPanel=new NonOpaquePanel();
    add(myIconsPanel,"ay top, gaptop " + JBUI.scale(0));
    updateIconsLayout();
  }
}
