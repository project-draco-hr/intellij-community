{
  VfsUtilCore.visitChildrenRecursively(root,new VirtualFileVisitor(){
    @Override public boolean visitFile(    @NotNull VirtualFile file){
      if (file.isDirectory()) {
        System.out.println(file.getPath());
      }
 else       if (file.getFileType() == StdFileTypes.CLASS && !file.getName().contains("$") && !skip(file)) {
        PsiFile clsFile=getPsiManager().findFile(file);
        assertNotNull(file.getPath(),clsFile);
        PsiElement mirror=((ClsFileImpl)clsFile).getMirror();
        String decompiled=mirror.getText();
        assertTrue(file.getPath(),decompiled.contains(file.getNameWithoutExtension()));
        String prefix="// ";
        for (        String s : decompiled.split("\n")) {
          int pos=s.indexOf(prefix);
          if (pos == 0 && prefix.length() < s.length() && Character.isDigit(s.charAt(prefix.length()))) {
            fail("Incorrect line mapping in file " + file.getPath() + " line: "+ s);
          }
        }
      }
      return true;
    }
    private boolean skip(    VirtualFile file){
      if (!SystemInfo.isJavaVersionAtLeast("1.8"))       return false;
      String path=file.getPath();
      int p=path.indexOf("!/");
      return p > 0 && knowProblems.contains(path.substring(p + 2));
    }
    private final Set<String> knowProblems=ContainerUtil.newHashSet("java/lang/reflect/AnnotatedElement.class","java/util/stream/Nodes.class","java/util/stream/FindOps.class","java/util/stream/Collectors.class","java/util/stream/DistinctOps.class","java/util/stream/IntPipeline.class","java/util/stream/LongPipeline.class","java/util/stream/DoublePipeline.class");
  }
);
}
