{
  if (body == null)   return;
  final Set<PsiVariable> usedVariables=new THashSet<PsiVariable>();
  List<DefUseUtil.Info> unusedDefs=DefUseUtil.getUnusedDefs(body,usedVariables);
  if (unusedDefs != null && !unusedDefs.isEmpty()) {
    Collections.sort(unusedDefs,new Comparator<DefUseUtil.Info>(){
      @Override public int compare(      DefUseUtil.Info o1,      DefUseUtil.Info o2){
        int offset1=o1.getContext().getTextOffset();
        int offset2=o2.getContext().getTextOffset();
        if (offset1 == offset2)         return 0;
        if (offset1 < offset2)         return -1;
        return 1;
      }
    }
);
    for (    DefUseUtil.Info info : unusedDefs) {
      PsiElement context=info.getContext();
      PsiVariable psiVariable=info.getVariable();
      if (context instanceof PsiDeclarationStatement || context instanceof PsiResourceVariable) {
        if (!info.isRead()) {
          if (!isOnTheFly) {
            holder.registerProblem(ObjectUtils.notNull(psiVariable.getNameIdentifier(),psiVariable),InspectionsBundle.message("inspection.unused.assignment.problem.descriptor1","<code>#ref</code> #loc"),ProblemHighlightType.LIKE_UNUSED_SYMBOL);
          }
        }
 else {
          if (REPORT_REDUNDANT_INITIALIZER) {
            List<LocalQuickFix> fixes=ContainerUtil.createMaybeSingletonList(isOnTheFlyOrNoSideEffects(isOnTheFly,psiVariable,psiVariable.getInitializer()) ? createRemoveInitializerFix() : null);
            holder.registerProblem(ObjectUtils.notNull(psiVariable.getInitializer(),psiVariable),InspectionsBundle.message("inspection.unused.assignment.problem.descriptor2","<code>" + psiVariable.getName() + "</code>","<code>#ref</code> #loc"),ProblemHighlightType.LIKE_UNUSED_SYMBOL,fixes.toArray(new LocalQuickFix[fixes.size()]));
          }
        }
      }
 else       if (context instanceof PsiAssignmentExpression) {
        final PsiAssignmentExpression assignment=(PsiAssignmentExpression)context;
        List<LocalQuickFix> fixes=ContainerUtil.createMaybeSingletonList(isOnTheFlyOrNoSideEffects(isOnTheFly,psiVariable,assignment.getRExpression()) ? createRemoveAssignmentFix() : null);
        holder.registerProblem(assignment.getLExpression(),InspectionsBundle.message("inspection.unused.assignment.problem.descriptor3",ObjectUtils.assertNotNull(assignment.getRExpression()).getText(),"<code>#ref</code>" + " #loc"),ProblemHighlightType.LIKE_UNUSED_SYMBOL,fixes.toArray(new LocalQuickFix[fixes.size()]));
      }
 else {
        if (context instanceof PsiPrefixExpression && REPORT_PREFIX_EXPRESSIONS || context instanceof PsiPostfixExpression && REPORT_POSTFIX_EXPRESSIONS) {
          holder.registerProblem(context,InspectionsBundle.message("inspection.unused.assignment.problem.descriptor4","<code>#ref</code> #loc"));
        }
      }
    }
  }
  body.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitClass(    PsiClass aClass){
    }
    @Override public void visitLocalVariable(    PsiLocalVariable variable){
      if (!usedVariables.contains(variable) && variable.getInitializer() == null && !isOnTheFly) {
        holder.registerProblem(ObjectUtils.notNull(variable.getNameIdentifier(),variable),InspectionsBundle.message("inspection.unused.assignment.problem.descriptor5","<code>#ref</code> #loc"),ProblemHighlightType.LIKE_UNUSED_SYMBOL);
      }
    }
  }
);
}
