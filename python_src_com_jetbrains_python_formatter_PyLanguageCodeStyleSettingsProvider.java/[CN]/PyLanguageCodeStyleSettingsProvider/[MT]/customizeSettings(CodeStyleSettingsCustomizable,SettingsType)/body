{
  if (settingsType == SettingsType.SPACING_SETTINGS) {
    consumer.showStandardOptions("SPACE_BEFORE_METHOD_CALL_PARENTHESES","SPACE_BEFORE_METHOD_PARENTHESES","SPACE_AROUND_ASSIGNMENT_OPERATORS","SPACE_AROUND_EQUALITY_OPERATORS","SPACE_AROUND_RELATIONAL_OPERATORS","SPACE_AROUND_BITWISE_OPERATORS","SPACE_AROUND_ADDITIVE_OPERATORS","SPACE_AROUND_MULTIPLICATIVE_OPERATORS","SPACE_AROUND_SHIFT_OPERATORS","SPACE_WITHIN_METHOD_CALL_PARENTHESES","SPACE_WITHIN_METHOD_PARENTHESES","SPACE_WITHIN_BRACKETS","SPACE_AFTER_COMMA","SPACE_BEFORE_COMMA","SPACE_BEFORE_SEMICOLON");
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_BEFORE_LBRACKET",PyBundle.message("formatter.left.bracket"),SPACES_BEFORE_PARENTHESES);
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_AROUND_EQ_IN_NAMED_PARAMETER",PyBundle.message("formatter.around.eq.in.named.parameter"),SPACES_AROUND_OPERATORS);
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT",PyBundle.message("formatter.around.eq.in.keyword.argument"),SPACES_AROUND_OPERATORS);
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_WITHIN_BRACES",PyBundle.message("formatter.braces"),SPACES_WITHIN);
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_BEFORE_PY_COLON",ApplicationBundle.message("checkbox.spaces.before.colon"),SPACES_OTHER);
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_AFTER_PY_COLON",ApplicationBundle.message("checkbox.spaces.after.colon"),SPACES_OTHER);
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_BEFORE_BACKSLASH",PyBundle.message("formatter.before.backslash"),SPACES_OTHER);
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_BEFORE_NUMBER_SIGN",PyBundle.message("formatter.before.hash"),SPACES_OTHER);
    consumer.showCustomOption(PyCodeStyleSettings.class,"SPACE_AFTER_NUMBER_SIGN",PyBundle.message("formatter.after.hash"),SPACES_OTHER);
  }
 else   if (settingsType == SettingsType.BLANK_LINES_SETTINGS) {
    consumer.showStandardOptions("BLANK_LINES_AROUND_CLASS","BLANK_LINES_AROUND_METHOD","BLANK_LINES_AFTER_IMPORTS","KEEP_BLANK_LINES_IN_DECLARATIONS","KEEP_BLANK_LINES_IN_CODE");
    consumer.renameStandardOption("BLANK_LINES_AFTER_IMPORTS",PyBundle.message("formatter.around.top.level.imports"));
    consumer.showCustomOption(PyCodeStyleSettings.class,"BLANK_LINES_AROUND_TOP_LEVEL_CLASSES_FUNCTIONS",PyBundle.message("formatter.around.top.level.classes.and.function"),BLANK_LINES);
    consumer.showCustomOption(PyCodeStyleSettings.class,"BLANK_LINES_AFTER_LOCAL_IMPORTS",PyBundle.message("formatter.after.local.imports"),BLANK_LINES);
  }
 else   if (settingsType == SettingsType.WRAPPING_AND_BRACES_SETTINGS) {
    consumer.showStandardOptions("RIGHT_MARGIN","WRAP_ON_TYPING","KEEP_LINE_BREAKS","WRAP_LONG_LINES","ALIGN_MULTILINE_PARAMETERS","ALIGN_MULTILINE_PARAMETERS_IN_CALLS");
    consumer.showCustomOption(PyCodeStyleSettings.class,"NEW_LINE_AFTER_COLON",PyBundle.message("formatter.single.clause.statements"),PyBundle.message("formatter.force.new.line.after.colon"));
    consumer.showCustomOption(PyCodeStyleSettings.class,"NEW_LINE_AFTER_COLON_MULTI_CLAUSE",PyBundle.message("formatter.multi.clause.statements"),PyBundle.message("formatter.force.new.line.after.colon"));
    consumer.showCustomOption(PyCodeStyleSettings.class,"ALIGN_COLLECTIONS_AND_COMPREHENSIONS",PyBundle.message("formatter.align.when.multiline"),PyBundle.message("formatter.collections.and.comprehensions"));
    consumer.showCustomOption(PyCodeStyleSettings.class,"ALIGN_MULTILINE_IMPORTS",PyBundle.message("formatter.align.when.multiline"),PyBundle.message("formatter.import.statements"));
    consumer.showCustomOption(PyCodeStyleSettings.class,"DICT_WRAPPING",PyBundle.message("formatter.dictionary.literals"),null,WRAP_OPTIONS,WRAP_VALUES);
    consumer.showCustomOption(PyCodeStyleSettings.class,"DICT_NEW_LINE_AFTER_LEFT_BRACE",ApplicationBundle.message("wrapping.new.line.after.lbrace"),PyBundle.message("formatter.dictionary.literals"));
    consumer.showCustomOption(PyCodeStyleSettings.class,"DICT_NEW_LINE_BEFORE_RIGHT_BRACE",ApplicationBundle.message("wrapping.rbrace.on.new.line"),PyBundle.message("formatter.dictionary.literals"));
  }
}
