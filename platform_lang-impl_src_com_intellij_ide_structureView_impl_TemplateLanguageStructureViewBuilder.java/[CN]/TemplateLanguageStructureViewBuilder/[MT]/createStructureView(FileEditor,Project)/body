{
  myFileEditor=fileEditor;
  List<StructureViewComposite.StructureViewDescriptor> viewDescriptors=new ArrayList<StructureViewComposite.StructureViewDescriptor>();
  final TemplateLanguageFileViewProvider provider=getNotNullViewProvider();
  final StructureViewComposite.StructureViewDescriptor structureViewDescriptor=createMainView(fileEditor,provider.getPsi(provider.getBaseLanguage()));
  if (structureViewDescriptor != null)   viewDescriptors.add(structureViewDescriptor);
  myBaseLanguageViewDescriptorIndex=-1;
  final Language dataLanguage=provider.getTemplateDataLanguage();
  updateTemplateDataFileView();
  if (myBaseStructureViewDescriptor != null) {
    viewDescriptors.add(myBaseStructureViewDescriptor);
    myBaseLanguageViewDescriptorIndex=viewDescriptors.size() - 1;
  }
  for (  final Language language : provider.getLanguages()) {
    if (language != dataLanguage && language != provider.getBaseLanguage()) {
      ContainerUtil.addIfNotNull(createBaseLanguageStructureView(fileEditor,language),viewDescriptors);
    }
  }
  StructureViewComposite.StructureViewDescriptor[] array=viewDescriptors.toArray(new StructureViewComposite.StructureViewDescriptor[viewDescriptors.size()]);
  myStructureViewComposite=new StructureViewComposite(array);
  project.getMessageBus().connect(myStructureViewComposite).subscribe(PsiModificationTracker.TOPIC,new PsiModificationTracker.Listener(){
    final Alarm alarm=new Alarm(myStructureViewComposite);
    @Override public void modificationCountChanged(){
      alarm.cancelAllRequests();
      alarm.addRequest(new Runnable(){
        @Override public void run(){
          updateAfterPsiChange();
        }
      }
,300,ModalityState.NON_MODAL);
    }
  }
);
  return myStructureViewComposite;
}
