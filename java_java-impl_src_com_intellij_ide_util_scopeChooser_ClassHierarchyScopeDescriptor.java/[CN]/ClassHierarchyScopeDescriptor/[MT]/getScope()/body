{
  if (myCachedScope == null) {
    TreeClassChooser chooser=TreeClassChooserFactory.getInstance(myProject).createAllProjectScopeChooser(IdeBundle.message("prompt.choose.base.class.of.the.hierarchy"));
    if (myRootClass != null) {
      chooser.select(myRootClass);
    }
    chooser.showDialog();
    PsiClass aClass=chooser.getSelected();
    if (aClass == null)     return null;
    final List<PsiElement> classesToSearch=new LinkedList<PsiElement>();
    classesToSearch.add(aClass);
    classesToSearch.addAll(ClassInheritorsSearch.search(aClass,true).findAll());
    FunctionalExpressionSearch.search(aClass).forEach(new Processor<PsiFunctionalExpression>(){
      @Override public boolean process(      PsiFunctionalExpression expression){
        classesToSearch.add(expression);
        return true;
      }
    }
);
    myCachedScope=new LocalSearchScope(PsiUtilCore.toPsiElementArray(classesToSearch),IdeBundle.message("scope.hierarchy",ClassPresentationUtil.getNameForClass(aClass,true)));
  }
  return myCachedScope;
}
