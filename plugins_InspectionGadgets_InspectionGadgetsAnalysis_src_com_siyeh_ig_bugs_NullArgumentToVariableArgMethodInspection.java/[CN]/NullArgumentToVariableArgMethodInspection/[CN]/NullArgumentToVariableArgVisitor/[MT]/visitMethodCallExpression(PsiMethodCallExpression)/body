{
  super.visitMethodCallExpression(call);
  final PsiExpressionList argumentList=call.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length == 0) {
    return;
  }
  final PsiExpression lastArgument=arguments[arguments.length - 1];
  final PsiType type=lastArgument.getType();
  final boolean checkArray;
  if (PsiType.NULL.equals(type)) {
    checkArray=false;
  }
 else   if (type instanceof PsiArrayType) {
    checkArray=true;
  }
 else {
    return;
  }
  final PsiMethod method=call.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  if (parameterList.getParametersCount() != arguments.length) {
    return;
  }
  final PsiParameter[] parameters=parameterList.getParameters();
  final PsiParameter lastParameter=parameters[parameters.length - 1];
  if (!lastParameter.isVarArgs()) {
    return;
  }
  final PsiType type1=lastParameter.getType();
  if (!(type1 instanceof PsiEllipsisType)) {
    return;
  }
  final PsiEllipsisType ellipsisType=(PsiEllipsisType)type1;
  final PsiType arrayType=ellipsisType.toArrayType();
  if (checkArray) {
    if (type.isAssignableFrom(arrayType) || !arrayType.isAssignableFrom(type)) {
      return;
    }
  }
  registerError(lastArgument,lastArgument,ellipsisType.getComponentType(),arrayType);
}
