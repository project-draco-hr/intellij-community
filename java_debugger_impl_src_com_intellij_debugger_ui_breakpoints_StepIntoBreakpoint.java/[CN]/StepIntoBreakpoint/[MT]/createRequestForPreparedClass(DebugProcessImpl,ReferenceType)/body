{
  try {
    final CompoundPositionManager positionManager=debugProcess.getPositionManager();
    List<Location> locations=positionManager.locationsOfLine(classType,myCustomPosition);
    if (locations.isEmpty()) {
      final int lastLine=myFilter.getLastStatementLine();
      if (lastLine >= 0) {
        int nextLine=myCustomPosition.getLine() + 1;
        while (nextLine <= lastLine && locations.isEmpty()) {
          locations=positionManager.locationsOfLine(classType,SourcePosition.createFromLine(myCustomPosition.getFile(),nextLine++));
        }
      }
    }
    if (!locations.isEmpty()) {
      MultiMap<Method,Location> methods=new MultiMap<>();
      for (      Location loc : locations) {
        if (acceptLocation(debugProcess,classType,loc)) {
          methods.putValue(loc.method(),loc);
        }
      }
      Location location=null;
      final int methodsFound=methods.size();
      if (methodsFound == 1) {
        location=methods.values().iterator().next();
      }
 else {
        if (myFilter instanceof LambdaMethodFilter) {
          final LambdaMethodFilter lambdaFilter=(LambdaMethodFilter)myFilter;
          if (lambdaFilter.getLambdaOrdinal() < methodsFound) {
            Method[] candidates=methods.keySet().toArray(new Method[methodsFound]);
            Arrays.sort(candidates,DebuggerUtilsEx.LAMBDA_ORDINAL_COMPARATOR);
            location=methods.get(candidates[lambdaFilter.getLambdaOrdinal()]).iterator().next();
          }
        }
 else {
          if (methodsFound > 0) {
            location=methods.values().iterator().next();
          }
        }
      }
      if (location != null) {
        final RequestManagerImpl requestsManager=debugProcess.getRequestsManager();
        final BreakpointRequest request=requestsManager.createBreakpointRequest(this,location);
        requestsManager.enableRequest(request);
      }
    }
  }
 catch (  ClassNotPreparedException ex) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("ClassNotPreparedException: " + ex.getMessage());
    }
  }
catch (  ObjectCollectedException ex) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("ObjectCollectedException: " + ex.getMessage());
    }
  }
catch (  InternalException ex) {
    LOG.info(ex);
  }
catch (  Exception ex) {
    LOG.info(ex);
  }
}
