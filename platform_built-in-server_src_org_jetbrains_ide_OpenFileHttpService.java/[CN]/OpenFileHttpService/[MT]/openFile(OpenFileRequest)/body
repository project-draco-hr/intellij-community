{
  String systemIndependentName=FileUtil.toSystemIndependentName(FileUtil.expandUserHome(request.file));
  final File file=new File(systemIndependentName);
  if (file.isAbsolute()) {
    if (com.intellij.ide.impl.ProjectUtil.isRemotePath(systemIndependentName)) {
      Ref<Boolean> confirmLoadingRemoteFile=new Ref<>();
      try {
        SwingUtilities.invokeAndWait(new Runnable(){
          @Override public void run(){
            boolean value=com.intellij.ide.impl.ProjectUtil.confirmLoadingFromRemotePath(systemIndependentName,"warning.load.file.from.share","title.load.file.from.share");
            confirmLoadingRemoteFile.set(value);
          }
        }
);
      }
 catch (      Throwable ignored) {
      }
      if (confirmLoadingRemoteFile.get() != Boolean.TRUE) {
        return Promise.reject(NOT_FOUND);
      }
    }
    return openAbsolutePath(file,request);
  }
  RefreshQueue queue=RefreshQueue.getInstance();
  queue.cancelSession(refreshSessionId);
  OpenFileTask task=new OpenFileTask(FileUtil.toCanonicalPath(systemIndependentName,'/'),request);
  requests.offer(task);
  RefreshSession session=queue.createSession(true,true,new Runnable(){
    @Override public void run(){
      OpenFileTask task;
      while ((task=requests.poll()) != null) {
        try {
          if (openRelativePath(task.path,task.request)) {
            task.promise.setResult(null);
          }
 else {
            task.promise.setError(NOT_FOUND);
          }
        }
 catch (        Throwable e) {
          task.promise.setError(e);
        }
      }
    }
  }
,ModalityState.NON_MODAL);
  session.addAllFiles(ManagingFS.getInstance().getLocalRoots());
  refreshSessionId=session.getId();
  session.launch();
  return task.promise;
}
