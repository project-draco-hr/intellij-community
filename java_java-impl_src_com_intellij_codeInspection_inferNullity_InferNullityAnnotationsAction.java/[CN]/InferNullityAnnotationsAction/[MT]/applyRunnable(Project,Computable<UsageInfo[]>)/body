{
  return new Runnable(){
    @Override public void run(){
      final LocalHistoryAction action=LocalHistory.getInstance().startAction(INFER_NULLITY_ANNOTATIONS);
      try {
        new WriteCommandAction(project,INFER_NULLITY_ANNOTATIONS){
          @Override protected void run(          @NotNull Result result) throws Throwable {
            final UsageInfo[] infos=computable.compute();
            if (infos.length > 0) {
              final Set<PsiElement> elements=new LinkedHashSet<PsiElement>();
              for (              UsageInfo info : infos) {
                final PsiElement element=info.getElement();
                if (element != null) {
                  ContainerUtil.addIfNotNull(elements,element.getContainingFile());
                }
              }
              if (!FileModificationService.getInstance().preparePsiElementsForWrite(elements))               return;
              final SequentialModalProgressTask progressTask=new SequentialModalProgressTask(project,INFER_NULLITY_ANNOTATIONS,false);
              progressTask.setMinIterationTime(200);
              progressTask.setTask(new AnnotateTask(project,progressTask,infos));
              ProgressManager.getInstance().run(progressTask);
            }
 else {
              NullityInferrer.nothingFoundMessage(project);
            }
          }
        }
.execute();
      }
  finally {
        action.finish();
      }
    }
  }
;
}
