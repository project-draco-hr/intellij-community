{
  final Library annotationsLib=LibraryUtil.findLibraryByClass(annoFQN,project);
  if (annotationsLib != null) {
    String message="Module" + (modulesWithoutAnnotations.size() == 1 ? " " : "s ");
    message+=StringUtil.join(modulesWithoutAnnotations,new Function<Module,String>(){
      @Override public String fun(      Module module){
        return module.getName();
      }
    }
,", ");
    message+=(modulesWithoutAnnotations.size() == 1 ? " doesn't" : " don't");
    message+=" refer to the existing '" + annotationsLib.getName() + "' library with IntelliJ IDEA nullity annotations. Would you like to add the dependenc";
    message+=(modulesWithoutAnnotations.size() == 1 ? "y" : "ies") + " now?";
    if (Messages.showOkCancelDialog(project,message,title,Messages.getErrorIcon()) == Messages.OK) {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          for (          Module module : modulesWithoutAnnotations) {
            ModuleRootModificationUtil.addDependency(module,annotationsLib);
          }
        }
      }
);
      return true;
    }
    return false;
  }
  if (Messages.showOkCancelDialog(project,"It is required that JetBrains annotations" + " be available in all your project sources.\n\nYou will need to add annotations.jar as a library. " + "It is possible to configure custom JAR\nin e.g. Constant Conditions & Exceptions inspection or use JetBrains annotations available in installation. "+ "\nIntelliJ IDEA nullity annotations are freely usable and redistributable under the Apache 2.0 license.\nWould you like to do it now?",title,Messages.getErrorIcon()) == Messages.OK) {
    Module firstModule=modulesWithoutAnnotations.iterator().next();
    JavaProjectModelModificationService.getInstance(project).addDependency(modulesWithoutAnnotations,JetBrainsAnnotationsExternalLibraryResolver.getAnnotationsLibraryDescriptor(firstModule),DependencyScope.COMPILE);
    return true;
  }
  return false;
}
