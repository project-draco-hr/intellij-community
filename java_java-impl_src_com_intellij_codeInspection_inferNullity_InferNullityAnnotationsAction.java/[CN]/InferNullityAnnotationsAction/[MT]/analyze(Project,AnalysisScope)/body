{
  PropertiesComponent.getInstance().setValue(ANNOTATE_LOCAL_VARIABLES,String.valueOf(myAnnotateLocalVariablesCb.isSelected()));
  final ProgressManager progressManager=ProgressManager.getInstance();
  final Set<Module> modulesWithoutAnnotations=new HashSet<Module>();
  final Set<Module> modulesWithLL=new HashSet<Module>();
  if (!progressManager.runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      final int totalFiles=scope.getFileCount();
      scope.accept(new PsiElementVisitor(){
        private int myFileCount=0;
        final private Set<Module> processed=new HashSet<Module>();
        @Override public void visitFile(        PsiFile file){
          myFileCount++;
          final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
          if (progressIndicator != null) {
            final VirtualFile virtualFile=file.getVirtualFile();
            if (virtualFile != null) {
              progressIndicator.setText2(ProjectUtil.calcRelativeToProjectPath(virtualFile,project));
            }
            progressIndicator.setFraction(((double)myFileCount) / totalFiles);
          }
          final Module module=ModuleUtilCore.findModuleForPsiElement(file);
          if (module != null && !processed.contains(module)) {
            processed.add(module);
            if (JavaPsiFacade.getInstance(project).findClass(NullableNotNullManager.getInstance(project).getDefaultNullable(),GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module)) == null) {
              modulesWithoutAnnotations.add(module);
            }
            if (PsiUtil.getLanguageLevel(file).compareTo(LanguageLevel.JDK_1_5) < 0) {
              modulesWithLL.add(module);
            }
          }
        }
      }
);
    }
  }
,"Check applicability...",true,project)) {
    return;
  }
  if (!modulesWithLL.isEmpty()) {
    Messages.showErrorDialog(project,"Infer Nullity Annotations requires the project language level be set to 1.5 or greater.",INFER_NULLITY_ANNOTATIONS);
    return;
  }
  if (!modulesWithoutAnnotations.isEmpty()) {
    final Library annotationsLib=LibraryUtil.findLibraryByClass(NullableNotNullManager.getInstance(project).getDefaultNullable(),project);
    if (annotationsLib != null) {
      String message="Module" + (modulesWithoutAnnotations.size() == 1 ? " " : "s ");
      message+=StringUtil.join(modulesWithoutAnnotations,new Function<Module,String>(){
        @Override public String fun(        Module module){
          return module.getName();
        }
      }
,", ");
      message+=(modulesWithoutAnnotations.size() == 1 ? " doesn't" : " don't");
      message+=" refer to the existing '" + annotationsLib.getName() + "' library with IDEA nullity annotations. Would you like to add the dependenc";
      message+=(modulesWithoutAnnotations.size() == 1 ? "y" : "ies") + " now?";
      if (Messages.showOkCancelDialog(project,message,INFER_NULLITY_ANNOTATIONS,Messages.getErrorIcon()) == Messages.OK) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            for (            Module module : modulesWithoutAnnotations) {
              ModuleRootModificationUtil.addDependency(module,annotationsLib);
            }
          }
        }
);
        restartAnalysis(project,scope);
      }
    }
 else     if (Messages.showOkCancelDialog(project,"Infer Nullity Annotations requires that the nullity annotations" + " be available in all your project sources.\n\nYou will need to add annotations.jar as a library. " + "It is possible to configure custom JAR in e.g. Constant Conditions & Exceptions inspection or use JetBrains annotations available in installation. "+ " IntelliJ IDEA nullity annotations are freely usable and redistributable under the Apache 2.0 license. Would you like to do it now?",INFER_NULLITY_ANNOTATIONS,Messages.getErrorIcon()) == Messages.OK) {
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          final LocateLibraryDialog dialog=new LocateLibraryDialog(modulesWithoutAnnotations.iterator().next(),PathManager.getLibPath(),"annotations.jar",QuickFixBundle.message("add.library.annotations.description"));
          dialog.show();
          if (dialog.isOK()) {
            final String path=dialog.getResultingLibraryPath();
            new WriteCommandAction(project){
              @Override protected void run(              @NotNull final Result result) throws Throwable {
                for (                Module module : modulesWithoutAnnotations) {
                  OrderEntryFix.addBundledJarToRoots(project,null,module,null,AnnotationUtil.NOT_NULL,path);
                }
              }
            }
.execute();
            restartAnalysis(project,scope);
          }
        }
      }
);
    }
    return;
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final UsageInfo[] usageInfos=findUsages(project,scope);
  if (usageInfos == null)   return;
  if (usageInfos.length < 5) {
    SwingUtilities.invokeLater(applyRunnable(project,new Computable<UsageInfo[]>(){
      @Override public UsageInfo[] compute(){
        return usageInfos;
      }
    }
));
  }
 else {
    showUsageView(project,usageInfos,scope);
  }
}
