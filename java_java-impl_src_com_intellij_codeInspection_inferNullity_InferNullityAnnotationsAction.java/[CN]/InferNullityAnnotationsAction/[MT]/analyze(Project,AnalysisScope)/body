{
  PropertiesComponent.getInstance().setValue(ANNOTATE_LOCAL_VARIABLES,myAnnotateLocalVariablesCb.isSelected());
  final ProgressManager progressManager=ProgressManager.getInstance();
  final Set<Module> modulesWithoutAnnotations=new HashSet<Module>();
  final Set<Module> modulesWithLL=new HashSet<Module>();
  final JavaPsiFacade javaPsiFacade=JavaPsiFacade.getInstance(project);
  final String defaultNullable=NullableNotNullManager.getInstance(project).getDefaultNullable();
  final int[] fileCount=new int[]{0};
  if (!progressManager.runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      scope.accept(new PsiElementVisitor(){
        final private Set<Module> processed=new HashSet<Module>();
        @Override public void visitFile(        PsiFile file){
          fileCount[0]++;
          final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
          if (progressIndicator != null) {
            final VirtualFile virtualFile=file.getVirtualFile();
            if (virtualFile != null) {
              progressIndicator.setText2(ProjectUtil.calcRelativeToProjectPath(virtualFile,project));
            }
            progressIndicator.setText(AnalysisScopeBundle.message("scanning.scope.progress.title"));
          }
          final Module module=ModuleUtilCore.findModuleForPsiElement(file);
          if (module != null && processed.add(module)) {
            if (PsiUtil.getLanguageLevel(file).compareTo(LanguageLevel.JDK_1_5) < 0) {
              modulesWithLL.add(module);
            }
 else             if (javaPsiFacade.findClass(defaultNullable,GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module)) == null) {
              modulesWithoutAnnotations.add(module);
            }
          }
        }
      }
);
    }
  }
,"Check Applicability...",true,project)) {
    return;
  }
  if (!modulesWithLL.isEmpty()) {
    Messages.showErrorDialog(project,"Infer Nullity Annotations requires the project language level be set to 1.5 or greater.",INFER_NULLITY_ANNOTATIONS);
    return;
  }
  if (!modulesWithoutAnnotations.isEmpty()) {
    if (addAnnotationsDependency(project,modulesWithoutAnnotations,defaultNullable,INFER_NULLITY_ANNOTATIONS)) {
      restartAnalysis(project,scope);
    }
    return;
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final UsageInfo[] usageInfos=findUsages(project,scope,fileCount[0]);
  if (usageInfos == null)   return;
  if (usageInfos.length < 5) {
    SwingUtilities.invokeLater(applyRunnable(project,new Computable<UsageInfo[]>(){
      @Override public UsageInfo[] compute(){
        return usageInfos;
      }
    }
));
  }
 else {
    showUsageView(project,usageInfos,scope);
  }
}
