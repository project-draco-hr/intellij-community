{
  IElementType type=builder.getTokenType();
  ParserUtils.getToken(builder,REGEX_DO);
  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
  if (!BinaryExpression.EQUALITY.parseBinary(builder,parser)) {
    builder.error(GroovyBundle.message("expression.expected"));
  }
  PsiBuilder.Marker newMarker=marker.precede();
  marker.done(type == GroovyTokenTypes.mREGEX_FIND ? GroovyElementTypes.REGEX_FIND_EXPRESSION : GroovyElementTypes.REGEX_MATCH_EXPRESSION);
  if (REGEX_DO.contains(builder.getTokenType())) {
    subParse(builder,newMarker,parser);
  }
 else {
    newMarker.drop();
  }
}
