{
  if (myProject == null || myProject.isDisposed() || myVcs == null) {
    return null;
  }
  logCommand(operation,arguments);
  final List<String> cmdLine=new LinkedList<String>();
  cmdLine.add(myVcs.getGlobalSettings().getHgExecutable());
  if (repo != null) {
    cmdLine.add("--repository");
    cmdLine.add(repo.getPath());
  }
  cmdLine.add("--config");
  cmdLine.add("extensions.mq=");
  cmdLine.addAll(DEFAULT_OPTIONS);
  cmdLine.add(operation);
  if (arguments != null && arguments.size() != 0) {
    cmdLine.addAll(arguments);
  }
  if (HgVcs.HGENCODING == null) {
    cmdLine.add("--encoding");
    cmdLine.add(HgEncodingUtil.getNameFor(myCharset));
  }
  try {
    String workingDir=repo != null ? repo.getPath() : null;
    ShellCommand shellCommand=new ShellCommand(cmdLine,workingDir,myCharset);
    long startTime=System.currentTimeMillis();
    LOG.debug(String.format("hg %s started",operation));
    HgCommandResult result=shellCommand.execute(myShowOutput);
    LOG.debug(String.format("hg %s finished. Took %s ms",operation,System.currentTimeMillis() - startTime));
    logResult(result);
    return result;
  }
 catch (  ShellCommandException e) {
    if (myVcs.getExecutableValidator().checkExecutableAndNotifyIfNeeded()) {
      showError(e);
      LOG.info(e.getMessage(),e);
    }
    return null;
  }
catch (  InterruptedException e) {
    LOG.info(e.getMessage(),e);
    return null;
  }
}
