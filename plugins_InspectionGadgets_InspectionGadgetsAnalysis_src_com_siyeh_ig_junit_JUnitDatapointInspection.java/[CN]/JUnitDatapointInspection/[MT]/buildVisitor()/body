{
  return new BaseInspectionVisitor(){
    @Override public void visitMethod(    PsiMethod method){
      visitMember(method,"method");
    }
    @Override public void visitField(    PsiField field){
      visitMember(field,"field");
    }
    private <T extends PsiMember & PsiNameIdentifierOwner>void visitMember(    T member,    final String memberDescription){
      final boolean dataPointAnnotated=AnnotationUtil.isAnnotated(member,DATAPOINT_FQN,false);
      if (dataPointAnnotated) {
        final String errorMessage=JUnitRuleInspection.getPublicStaticErrorMessage(member,false,true);
        if (errorMessage != null) {
          final PsiElement identifier=member.getNameIdentifier();
          registerError(identifier != null ? identifier : member,InspectionGadgetsBundle.message("junit.datapoint.problem.descriptor",errorMessage,StringUtil.capitalize(memberDescription)),"Make " + memberDescription + " "+ errorMessage,DATAPOINT_FQN);
        }
      }
    }
  }
;
}
