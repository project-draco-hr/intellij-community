{
  return new ImagePainter(){
    Image image;
    float alpha;
    Insets insets;
    FillType fillType;
    String current;
    @Override public boolean needsRepaint(){
      return ensureImageLoaded();
    }
    @Override public void executePaint(    Component component,    Graphics2D g){
      if (image == null)       return;
      executePaint(g,component,image,fillType,alpha,insets);
    }
    boolean ensureImageLoaded(){
      boolean prevOk=image != null;
      String value=System.getProperty(propertyName);
      if (Comparing.equal(value,current))       return prevOk;
      current=value;
      clearImages(-1);
      image=null;
      insets=JBUI.emptyInsets();
      loadImage(value);
      boolean newOk=image != null;
      if (prevOk || newOk) {
        for (        Window window : Window.getWindows()) {
          window.repaint();
        }
      }
      return newOk;
    }
    void loadImage(    @Nullable String propertyValue){
      String[] parts=(propertyValue != null ? propertyValue : propertyName + ".png").split(",");
      try {
        alpha=StringUtil.parseInt(parts.length > 1 ? parts[1] : "",10) / 100f;
        try {
          fillType=FillType.valueOf(parts.length > 2 ? parts[2].toUpperCase(Locale.ENGLISH) : "");
        }
 catch (        IllegalArgumentException e) {
          fillType=FillType.SCALE;
        }
        String filePath=parts[0];
        URL url=filePath.contains("://") ? new URL(filePath) : (FileUtil.isAbsolutePlatformIndependent(filePath) ? new File(filePath) : new File(PathManager.getConfigPath(),filePath)).toURI().toURL();
        image=ImageLoader.loadFromUrl(url);
      }
 catch (      Exception ignored) {
      }
    }
  }
;
}
