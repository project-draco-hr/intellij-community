{
  final JUnitConfiguration.Data data=myConfiguration.getPersistentData();
  final TestClassFilter filter;
  try {
    filter=getClassFilter(data);
  }
 catch (  CantRunException ignored) {
    return null;
  }
  return findTestsWithProgress(new FindCallback(){
    @Override public void found(    @NotNull final Collection<PsiClass> classes,    final boolean isJunit4){
      try {
        addClassesListToJavaParameters(classes,new Function<PsiElement,String>(){
          @Override @Nullable public String fun(          PsiElement element){
            if (element instanceof PsiClass) {
              return JavaExecutionUtil.getRuntimeQualifiedName((PsiClass)element);
            }
 else             if (element instanceof PsiMethod) {
              PsiMethod method=(PsiMethod)element;
              return JavaExecutionUtil.getRuntimeQualifiedName(method.getContainingClass()) + "," + method.getName();
            }
 else {
              return null;
            }
          }
        }
,getPackageName(data),false,isJunit4);
      }
 catch (      CantRunException ignored) {
      }
    }
  }
,filter);
}
