{
  final JUnitConfiguration.Data data=getConfiguration().getPersistentData();
  return new SearchForTestsTask(getConfiguration().getProject(),myServerSocket){
    private final THashSet<PsiClass> myClasses=new THashSet<PsiClass>();
    @Override protected void search(){
      myClasses.clear();
      try {
        ConfigurationUtil.findAllTestClasses(getClassFilter(data),myClasses);
      }
 catch (      CantRunException ignored) {
      }
    }
    @Override protected void onFound(){
      myFoundTests=!myClasses.isEmpty();
      try {
        addClassesListToJavaParameters(myClasses,new Function<PsiClass,String>(){
          @Override @Nullable public String fun(          final PsiClass psiClass){
            return psiClass != null ? JavaExecutionUtil.getRuntimeQualifiedName(psiClass) : null;
          }
        }
,getPackageName(data),createTempFiles(),getJavaParameters());
      }
 catch (      ExecutionException ignored) {
      }
    }
  }
;
}
