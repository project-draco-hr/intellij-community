{
  final Project project=e.getRequiredData(CommonDataKeys.PROJECT);
  VcsLog log=e.getRequiredData(VcsLogDataKeys.VCS_LOG);
  final List<? extends VcsFullCommitDetails> commits=log.getSelectedDetails();
  for (  VcsFullCommitDetails commit : commits) {
    myIdsInProgress.add(commit.getId());
  }
  FileDocumentManager.getInstance().saveAllDocuments();
  myPlatformFacade.getChangeListManager(project).blockModalNotifications();
  new Task.Backgroundable(project,"Cherry-picking",false){
    public void run(    @NotNull ProgressIndicator indicator){
      try {
        Map<GitRepository,List<VcsFullCommitDetails>> commitsInRoots=sortCommits(groupCommitsByRoots(project,commits));
        new GitCherryPicker(project,myGit,myPlatformFacade,isAutoCommit(project)).cherryPick(commitsInRoots);
      }
  finally {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            myPlatformFacade.getChangeListManager(project).unblockModalNotifications();
            for (            VcsFullCommitDetails commit : commits) {
              myIdsInProgress.remove(commit.getId());
            }
          }
        }
);
      }
    }
  }
.queue();
}
