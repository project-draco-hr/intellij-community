{
  final GraphGenerator<String> generator=GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<String>(){
    @Override public Collection<String> getNodes(){
      final Set<String> nodes=new TreeSet<String>();
      for (      PropertiesFile propertiesFile : resourceBundle.getPropertiesFiles()) {
        for (        IProperty property : propertiesFile.getProperties()) {
          final String key=property.getKey();
          if (key != null) {
            nodes.add(key);
          }
        }
      }
      return nodes;
    }
    @Override public Iterator<String> getIn(    String n){
      final Collection<String> siblings=new HashSet<String>();
      for (      PropertiesFile propertiesFile : resourceBundle.getPropertiesFiles()) {
        for (        IProperty property : propertiesFile.findPropertiesByKey(n)) {
          PsiElement sibling=property.getPsiElement().getNextSibling();
          while (sibling instanceof PsiWhiteSpace || sibling instanceof PsiComment) {
            sibling=sibling.getNextSibling();
          }
          if (sibling instanceof IProperty) {
            final String key=((IProperty)sibling).getKey();
            if (key != null) {
              siblings.add(key);
            }
          }
        }
        ;
      }
      return siblings.iterator();
    }
  }
));
  DFSTBuilder<String> dfstBuilder=new DFSTBuilder<String>(generator);
  final boolean acyclic=dfstBuilder.isAcyclic();
  return acyclic ? dfstBuilder.getSortedNodes() : null;
}
