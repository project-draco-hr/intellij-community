{
  if (!(initialType instanceof PsiClassType)) {
    return null;
  }
  final PsiType[] parameters=((PsiClassType)initialType).getParameters();
  if (parameters.length != 1) {
    return null;
  }
  final PsiElement methodCall=expression.getParent();
  if (!(methodCall instanceof PsiMethodCallExpression)) {
    return null;
  }
  final PsiExpression[] expressions=((PsiMethodCallExpression)methodCall).getArgumentList().getExpressions();
  if (expressions.length != 1) {
    return null;
  }
  final PsiExpression classTypeExpression=expressions[0];
  final PsiType targetType=classTypeExpression.getType();
  if (!(targetType instanceof PsiClassType)) {
    return null;
  }
  final PsiType[] targetParameters=((PsiClassType)targetType).getParameters();
  if (targetParameters.length != 1) {
    return null;
  }
  if (PsiTypesUtil.compareTypes(parameters[0],targetParameters[0],false)) {
    return new TypeConversionDescriptor("$q$.toArray($type$)",null){
      PsiType myType=parameters[0];
      @Override public PsiExpression replace(      PsiExpression expression) throws IncorrectOperationException {
        final UniqueNameGenerator nameGenerator=new UniqueNameGenerator();
        final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(expression.getProject());
        final String name=codeStyleManager.suggestUniqueVariableName(codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE,null,null,PsiType.INT).names[0],expression,false);
        final String chosenName=nameGenerator.generateUniqueName(name);
        setReplaceByString("$q$.toArray(" + chosenName + " -> "+ " new "+ myType.getCanonicalText(false)+ "["+ chosenName+ "])");
        return super.replace(expression);
      }
    }
;
  }
  return null;
}
