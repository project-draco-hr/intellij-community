{
  final int offset=myEditor.getCaretModel().getOffset();
  final PsiElement element=ObjectUtils.assertNotNull(myFile.findElementAt(offset)).getParent();
  assertTrue(element instanceof PsiLocalVariable);
  PsiMethod method=Util.getContainingMethod(element);
  final PsiMethod methodToSearchFor;
  if (searchForSuper) {
    PsiMethod[] deepestSuperMethods=method.findDeepestSuperMethods();
    methodToSearchFor=deepestSuperMethods.length > 0 ? deepestSuperMethods[0] : method;
  }
 else {
    methodToSearchFor=method;
  }
  assertNotNull(method);
  assertNotNull(methodToSearchFor);
  final PsiLocalVariable localVariable=(PsiLocalVariable)element;
  final PsiExpression parameterInitializer=localVariable.getInitializer();
  assertNotNull(parameterInitializer);
  TIntArrayList parametersToRemove=removeUnusedParameters ? Util.findParametersToRemove(method,parameterInitializer,null) : new TIntArrayList();
  new IntroduceParameterProcessor(getProject(),method,methodToSearchFor,parameterInitializer,null,localVariable,removeLocalVariable,localVariable.getName(),replaceAllOccurrences,IntroduceParameterRefactoring.REPLACE_FIELDS_WITH_GETTERS_INACCESSIBLE,declareFinal,false,null,parametersToRemove).run();
}
