{
  element.setAttribute(COVERAGE_ENABLED_ATTRIBUTE_NAME,String.valueOf(isCoverageEnabled()));
  element.setAttribute(COVERAGE_MERGE_ATTRIBUTE_NAME,String.valueOf(myIsMergeWithPreviousResults));
  if (myIsMergeWithPreviousResults && mySuiteToMergeWith != null) {
    element.setAttribute(COVERAGE_MERGE_SUITE_ATT_NAME,mySuiteToMergeWith);
  }
  final boolean trackPerTestCoverage=isTrackPerTestCoverage();
  if (!trackPerTestCoverage) {
    element.setAttribute(TRACK_PER_TEST_COVERAGE_ATTRIBUTE_NAME,String.valueOf(trackPerTestCoverage));
  }
  final boolean sampling=isSampling();
  if (sampling) {
    element.setAttribute(SAMPLING_COVERAGE_ATTRIBUTE_NAME,String.valueOf(sampling));
  }
  final boolean trackTestFolders=isTrackTestFolders();
  if (trackTestFolders) {
    element.setAttribute(TRACK_TEST_FOLDERS,String.valueOf(trackTestFolders));
  }
  final CoverageRunner coverageRunner=getCoverageRunner();
  final String runnerId=getRunnerId();
  if (coverageRunner != null) {
    element.setAttribute(COVERAGE_RUNNER,coverageRunner.getId());
  }
 else   if (runnerId != null) {
    element.setAttribute(COVERAGE_RUNNER,runnerId);
  }
  if (myCoveragePatterns != null) {
    for (    ClassFilter pattern : myCoveragePatterns) {
      @NonNls final Element patternElement=new Element(COVERAGE_PATTERN_ELEMENT_NAME);
      pattern.writeExternal(patternElement);
      element.addContent(patternElement);
    }
  }
}
