{
  final PsiElement parent=PsiTreeUtil.getParentOfType(element,PsiStatement.class,PsiExpressionList.class,PsiVariable.class,PsiLambdaExpression.class,PsiPolyadicExpression.class,PsiInstanceOfExpression.class);
  if (parent instanceof PsiVariable) {
    if (!(parent instanceof PsiLocalVariable)) {
      return false;
    }
 else {
      return checkDeep && !isUsedElsewhere((PsiLocalVariable)parent);
    }
  }
  if (!(parent instanceof PsiStatement)) {
    return false;
  }
  if (parent instanceof PsiReturnStatement || parent instanceof PsiThrowStatement || parent instanceof PsiForeachStatement) {
    return false;
  }
  if (parent instanceof PsiExpressionStatement) {
    final PsiExpressionStatement expressionStatement=(PsiExpressionStatement)parent;
    final PsiExpression expression1=expressionStatement.getExpression();
    if (expression1 instanceof PsiMethodCallExpression) {
      return !PsiType.VOID.equals(expression1.getType());
    }
 else     if (expression1 instanceof PsiAssignmentExpression) {
      final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)expression1;
      final PsiExpression rhs=assignmentExpression.getRExpression();
      if (!PsiTreeUtil.isAncestor(rhs,element,false)) {
        return false;
      }
      final PsiExpression lhs=ParenthesesUtils.stripParentheses(assignmentExpression.getLExpression());
      if (!(lhs instanceof PsiReferenceExpression)) {
        return false;
      }
      final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)lhs;
      final PsiElement target=referenceExpression.resolve();
      if (!(target instanceof PsiLocalVariable)) {
        return false;
      }
      return checkDeep && !isUsedElsewhere((PsiLocalVariable)target);
    }
  }
  return true;
}
