{
  if (baseClass == null || baseClass.isInterface())   return null;
  final Ref<Pair<PsiElement,PsiClass>> result=Ref.create();
  scope.accept(new PsiRecursiveElementWalkingVisitor(){
    @Override public void visitElement(    PsiElement element){
      if (element instanceof PsiClass || element instanceof PsiReferenceParameterList || element instanceof PsiTypeElement)       return;
      PsiClass targetClass=extractClass(element);
      if (targetClass != null && !(targetClass instanceof PsiAnonymousClass) && targetClass.isInheritor(baseClass,true)) {
        PsiElement problemElement=calcProblemElement(element);
        if (problemElement != null) {
          result.set(Pair.create(problemElement,targetClass));
        }
      }
      super.visitElement(element);
    }
  }
);
  return result.get();
}
