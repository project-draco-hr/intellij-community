{
  return new JavaElementVisitor(){
    @Override public void visitField(    PsiField field){
      checkSubClassReferences(field);
    }
    @Override public void visitClassInitializer(    PsiClassInitializer initializer){
      checkSubClassReferences(initializer);
    }
    private void checkSubClassReferences(    PsiMember scope){
      if (!scope.hasModifierProperty(PsiModifier.STATIC))       return;
      PsiClass containingClass=scope.getContainingClass();
      Pair<PsiElement,PsiClass> pair=findSubClassReference(scope,containingClass);
      if (pair != null) {
        holder.registerProblem(pair.first,"Referencing subclass " + pair.second.getName() + " from superclass "+ containingClass.getName()+ " initializer might lead to class loading deadlock");
      }
    }
  }
;
}
