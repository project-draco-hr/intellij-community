{
  Element state=new Element("state");
  XmlSerializer.serializeInto(myState,state,new SkipDefaultValuesSerializationFilters(){
    @Override public boolean accepts(    @NotNull Accessor accessor,    @NotNull Object bean){
      if (myState.compilerWasSpecified && "DEFAULT_COMPILER".equals(accessor.getName())) {
        return true;
      }
      return super.accepts(accessor,bean);
    }
  }
);
  if (!myAddNotNullAssertions) {
    addChild(state,JpsJavaCompilerConfigurationSerializer.ADD_NOTNULL_ASSERTIONS).setAttribute(JpsJavaCompilerConfigurationSerializer.ENABLED,String.valueOf(myAddNotNullAssertions));
  }
  if (myExcludesConfiguration.getExcludeEntryDescriptions().length > 0) {
    myExcludesConfiguration.getDelegate().writeExternal(addChild(state,JpsJavaCompilerConfigurationSerializer.EXCLUDE_FROM_COMPILE));
  }
  final Element newChild=addChild(state,JpsJavaCompilerConfigurationSerializer.RESOURCE_EXTENSIONS);
  for (  final String pattern : getRegexpPatterns()) {
    addChild(newChild,JpsJavaCompilerConfigurationSerializer.ENTRY).setAttribute(JpsJavaCompilerConfigurationSerializer.NAME,pattern);
  }
  if ((myWildcardPatternsInitialized || !myWildcardPatterns.isEmpty()) && (!Registry.is("saving.state.in.new.format.is.allowed",false) || !DEFAULT_WILDCARD_PATTERNS.equals(myWildcardPatterns))) {
    final Element wildcardPatterns=addChild(state,JpsJavaCompilerConfigurationSerializer.WILDCARD_RESOURCE_PATTERNS);
    for (    final String wildcardPattern : myWildcardPatterns) {
      addChild(wildcardPatterns,JpsJavaCompilerConfigurationSerializer.ENTRY).setAttribute(JpsJavaCompilerConfigurationSerializer.NAME,wildcardPattern);
    }
  }
  final Element annotationProcessingSettings=addChild(state,JpsJavaCompilerConfigurationSerializer.ANNOTATION_PROCESSING);
  final Element defaultProfileElem=addChild(annotationProcessingSettings,"profile").setAttribute("default","true");
  AnnotationProcessorProfileSerializer.writeExternal(myDefaultProcessorsProfile,defaultProfileElem);
  for (  ProcessorConfigProfile profile : myModuleProcessorProfiles) {
    final Element profileElem=addChild(annotationProcessingSettings,"profile").setAttribute("default","false");
    AnnotationProcessorProfileSerializer.writeExternal(profile,profileElem);
  }
  if (!StringUtil.isEmpty(myBytecodeTargetLevel) || !myModuleBytecodeTarget.isEmpty()) {
    final Element bytecodeTarget=addChild(state,JpsJavaCompilerConfigurationSerializer.BYTECODE_TARGET_LEVEL);
    if (!StringUtil.isEmpty(myBytecodeTargetLevel)) {
      bytecodeTarget.setAttribute(JpsJavaCompilerConfigurationSerializer.TARGET_ATTRIBUTE,myBytecodeTargetLevel);
    }
    if (!myModuleBytecodeTarget.isEmpty()) {
      final List<String> moduleNames=new ArrayList<String>(myModuleBytecodeTarget.keySet());
      Collections.sort(moduleNames,String.CASE_INSENSITIVE_ORDER);
      for (      String name : moduleNames) {
        final Element moduleElement=addChild(bytecodeTarget,JpsJavaCompilerConfigurationSerializer.MODULE);
        moduleElement.setAttribute(JpsJavaCompilerConfigurationSerializer.NAME,name);
        final String value=myModuleBytecodeTarget.get(name);
        moduleElement.setAttribute(JpsJavaCompilerConfigurationSerializer.TARGET_ATTRIBUTE,value != null ? value : "");
      }
    }
  }
  return state;
}
