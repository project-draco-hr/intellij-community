{
  GrNamedArgument[] namedArgs=listOrMap.getNamedArguments();
  if (namedArgs.length == 0) {
    PsiType lType=PsiImplUtil.inferExpectedTypeForDiamond(listOrMap);
    if (lType instanceof PsiClassType && InheritanceUtil.isInheritor(lType,CommonClassNames.JAVA_UTIL_MAP)) {
      GlobalSearchScope scope=listOrMap.getResolveScope();
      JavaPsiFacade facade=JavaPsiFacade.getInstance(listOrMap.getProject());
      PsiClass hashMap=facade.findClass(GroovyCommonClassNames.JAVA_UTIL_LINKED_HASH_MAP,scope);
      if (hashMap != null) {
        PsiSubstitutor mapSubstitutor=PsiSubstitutor.EMPTY.put(hashMap.getTypeParameters()[0],com.intellij.psi.util.PsiUtil.substituteTypeParameter(lType,CommonClassNames.JAVA_UTIL_MAP,0,false)).put(hashMap.getTypeParameters()[1],com.intellij.psi.util.PsiUtil.substituteTypeParameter(lType,CommonClassNames.JAVA_UTIL_MAP,1,false));
        return facade.getElementFactory().createType(hashMap,mapSubstitutor);
      }
    }
  }
  return GrMapType.createFromNamedArgs(listOrMap,namedArgs);
}
