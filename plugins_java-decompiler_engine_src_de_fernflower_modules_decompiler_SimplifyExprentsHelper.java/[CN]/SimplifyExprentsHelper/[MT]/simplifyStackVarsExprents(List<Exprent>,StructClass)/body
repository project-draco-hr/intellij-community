{
  boolean res=false;
  int index=0;
  while (index < list.size()) {
    Exprent current=list.get(index);
    Exprent ret=isSimpleConstructorInvocation(current);
    if (ret != null) {
      list.set(index,ret);
      res=true;
      continue;
    }
    ret=isLambda(current,cl);
    if (ret != null) {
      list.set(index,ret);
      res=true;
      continue;
    }
    if (isMonitorExit(current)) {
      list.remove(index);
      res=true;
      continue;
    }
    if (isTrivialStackAssignment(current)) {
      list.remove(index);
      res=true;
      continue;
    }
    if (index == list.size() - 1) {
      break;
    }
    Exprent next=list.get(index + 1);
    if (isConstructorInvocationRemote(list,index)) {
      list.remove(index);
      res=true;
      continue;
    }
    if (DecompilerContext.getOption(IFernflowerPreferences.REMOVE_GETCLASS_NEW)) {
      if (isQualifiedNewGetClass(current,next)) {
        list.remove(index);
        res=true;
        continue;
      }
    }
    int arrcount=isArrayInitializer(list,index);
    if (arrcount > 0) {
      for (int i=0; i < arrcount; i++) {
        list.remove(index + 1);
      }
      res=true;
      continue;
    }
    if (addArrayInitializer(current,next)) {
      list.remove(index + 1);
      res=true;
      continue;
    }
    Exprent func=isPPIorMMI(current);
    if (func != null) {
      list.set(index,func);
      res=true;
      continue;
    }
    if (isIPPorIMM(current,next)) {
      list.remove(index + 1);
      res=true;
      continue;
    }
    if (isStackAssignement(current,next)) {
      list.remove(index + 1);
      res=true;
      continue;
    }
    if (!firstInvocation && isStackAssignement2(current,next)) {
      list.remove(index + 1);
      res=true;
      continue;
    }
    index++;
  }
  return res;
}
