{
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  final PsiMethodCallExpression methodCallExpression=tb.getSingleMethodCall();
  if (methodCallExpression == null)   return null;
  restoreComments(loopStatement,body);
  if (!tb.hasOperations() && StreamApiMigrationInspection.isAddAllCall(tb) && loopStatement instanceof PsiForeachStatement) {
    PsiExpression iteratedValue=((PsiForeachStatement)loopStatement).getIteratedValue();
    if (iteratedValue == null)     return null;
    final PsiType iteratedValueType=iteratedValue.getType();
    final PsiExpression qualifierExpression=methodCallExpression.getMethodExpression().getQualifierExpression();
    final String qualifierText=qualifierExpression != null ? qualifierExpression.getText() : "";
    final String collectionText=iteratedValueType instanceof PsiArrayType ? "java.util.Arrays.asList(" + iteratedValue.getText() + ")" : getIteratedValueText(iteratedValue);
    final String callText=StringUtil.getQualifiedName(qualifierText,"addAll(" + collectionText + ");");
    return loopStatement.replace(elementFactory.createStatementFromText(callText,loopStatement));
  }
  PsiExpression itemToAdd=methodCallExpression.getArgumentList().getExpressions()[0];
  PsiType addedType=getAddedElementType(methodCallExpression);
  if (addedType == null)   addedType=itemToAdd.getType();
  StringBuilder builder=generateStream(new MapOp(tb.getLastOperation(),itemToAdd,tb.getVariable(),addedType));
  final PsiExpression qualifierExpression=methodCallExpression.getMethodExpression().getQualifierExpression();
  final PsiLocalVariable variable=StreamApiMigrationInspection.extractCollectionVariable(qualifierExpression);
  if (variable != null) {
    InitializerUsageStatus status=StreamApiMigrationInspection.getInitializerUsageStatus(variable,loopStatement);
    if (status != InitializerUsageStatus.UNKNOWN) {
      PsiExpression initializer=variable.getInitializer();
      LOG.assertTrue(initializer != null);
      PsiMethodCallExpression toArrayExpression=StreamApiMigrationInspection.extractToArrayExpression(loopStatement,methodCallExpression);
      if (toArrayExpression != null) {
        PsiType type=initializer.getType();
        if (type instanceof PsiClassType) {
          String replacement=StreamApiMigrationInspection.COLLECTION_TO_ARRAY.get(((PsiClassType)type).rawType().getCanonicalText());
          if (replacement != null) {
            builder.append(".").append(replacement);
            PsiExpression[] args=toArrayExpression.getArgumentList().getExpressions();
            if (args.length == 0) {
              builder.append("()");
            }
 else {
              if (args.length != 1 || !(args[0] instanceof PsiNewExpression))               return null;
              PsiNewExpression newArray=(PsiNewExpression)args[0];
              PsiType arrayType=newArray.getType();
              if (arrayType == null)               return null;
              String name=arrayType.getCanonicalText();
              builder.append('(').append(name).append("::new)");
            }
            PsiElement result=toArrayExpression.replace(elementFactory.createExpressionFromText(builder.toString(),toArrayExpression));
            removeLoop(loopStatement);
            if (status != InitializerUsageStatus.AT_WANTED_PLACE) {
              variable.delete();
            }
            return result;
          }
        }
      }
      PsiElement nextStatement=PsiTreeUtil.skipSiblingsForward(loopStatement,PsiComment.class,PsiWhiteSpace.class);
      String comparatorText=StreamApiMigrationInspection.tryExtractSortComparatorText(nextStatement,variable);
      if (comparatorText != null) {
        builder.append(".sorted(").append(comparatorText).append(")");
        nextStatement.delete();
      }
      String callText=builder.append(".collect(java.util.stream.Collectors.").append(createInitializerReplacementText(qualifierExpression.getType(),initializer)).append(")").toString();
      return replaceInitializer(loopStatement,variable,initializer,callText,status);
    }
  }
  final String qualifierText=qualifierExpression != null ? qualifierExpression.getText() + "." : "";
  JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(project);
  SuggestedNameInfo suggestedNameInfo=codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE,null,null,addedType,false);
  if (suggestedNameInfo.names.length == 0) {
    suggestedNameInfo=codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE,"item",null,itemToAdd.getType(),false);
  }
  String varName=codeStyleManager.suggestUniqueVariableName(suggestedNameInfo,methodCallExpression,false).names[0];
  PsiExpression forEachBody=elementFactory.createExpressionFromText(qualifierText + "add(" + varName+ ")",qualifierExpression);
  final String callText=builder.append(".forEach(").append(varName).append("->").append(forEachBody.getText()).append(");").toString();
  return loopStatement.replace(elementFactory.createStatementFromText(callText,loopStatement));
}
