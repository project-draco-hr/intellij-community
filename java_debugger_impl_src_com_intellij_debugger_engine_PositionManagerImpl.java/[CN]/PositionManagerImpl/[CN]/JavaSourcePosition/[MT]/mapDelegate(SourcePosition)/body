{
  return ApplicationManager.getApplication().runReadAction(new Computable<SourcePosition>(){
    @Override public SourcePosition compute(){
      PsiFile file=original.getFile();
      int line=original.getLine();
      if (LambdaMethodFilter.isLambdaName(myExpectedMethodName) && myLambdaOrdinal > -1) {
        Document document=PsiDocumentManager.getInstance(file.getProject()).getDocument(file);
        if (document == null || line >= document.getLineCount()) {
          return original;
        }
        PsiElement element=original.getElementAt();
        TextRange lineRange=new TextRange(document.getLineStartOffset(line),document.getLineEndOffset(line));
        do {
          PsiElement parent=element.getParent();
          if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) {
            break;
          }
          element=parent;
        }
 while (true);
        final List<PsiLambdaExpression> lambdas=new ArrayList<PsiLambdaExpression>(3);
        final PsiElementVisitor lambdaCollector=new JavaRecursiveElementVisitor(){
          @Override public void visitLambdaExpression(          PsiLambdaExpression expression){
            super.visitLambdaExpression(expression);
            lambdas.add(expression);
          }
        }
;
        element.accept(lambdaCollector);
        NavigatablePsiElement method=PsiTreeUtil.getParentOfType(element,PsiMethod.class,PsiLambdaExpression.class);
        if (method instanceof PsiLambdaExpression) {
          lambdas.add((PsiLambdaExpression)method);
        }
        for (PsiElement sibling=getNextElement(element); sibling != null; sibling=getNextElement(sibling)) {
          if (!lineRange.intersects(sibling.getTextRange())) {
            break;
          }
          sibling.accept(lambdaCollector);
        }
        if (myLambdaOrdinal < lambdas.size()) {
          PsiElement body=lambdas.get(myLambdaOrdinal).getBody();
          if (body instanceof PsiCodeBlock) {
            for (            PsiStatement statement : ((PsiCodeBlock)body).getStatements()) {
              if (lineRange.intersects(statement.getTextRange())) {
                body=statement;
                break;
              }
            }
          }
          return SourcePosition.createFromElement(body);
        }
      }
 else {
        for (        PsiElement elem : getLineElements(file,line)) {
          PsiElement remappedElement=remapElement(elem);
          if (remappedElement != null) {
            if (remappedElement.getTextOffset() <= original.getOffset())             break;
            return SourcePosition.createFromElement(remappedElement);
          }
        }
      }
      return original;
    }
  }
);
}
