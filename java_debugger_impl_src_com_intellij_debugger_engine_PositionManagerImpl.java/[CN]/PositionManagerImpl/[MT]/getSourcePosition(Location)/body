{
  DebuggerManagerThreadImpl.assertIsManagerThread();
  if (location == null) {
    return null;
  }
  PsiFile psiFile=getPsiFileByLocation(getDebugProcess().getProject(),location);
  if (psiFile == null) {
    return null;
  }
  LOG.assertTrue(myDebugProcess != null);
  int lineNumber;
  try {
    lineNumber=location.lineNumber() - 1;
  }
 catch (  InternalError e) {
    lineNumber=-1;
  }
  if (lineNumber > -1) {
    SourcePosition position=calcLineMappedSourcePosition(psiFile,lineNumber);
    if (position != null) {
      return position;
    }
  }
  final Method method=location.method();
  if (psiFile instanceof PsiCompiledElement || lineNumber < 0) {
    final String methodSignature=method.signature();
    if (methodSignature == null) {
      return SourcePosition.createFromLine(psiFile,-1);
    }
    final String methodName=method.name();
    if (methodName == null) {
      return SourcePosition.createFromLine(psiFile,-1);
    }
    if (location.declaringType() == null) {
      return SourcePosition.createFromLine(psiFile,-1);
    }
    final MethodFinder finder=new MethodFinder(location.declaringType().name(),methodName,methodSignature);
    psiFile.accept(finder);
    final PsiMethod compiledMethod=finder.getCompiledMethod();
    if (compiledMethod == null) {
      return SourcePosition.createFromLine(psiFile,-1);
    }
    SourcePosition sourcePosition=SourcePosition.createFromElement(compiledMethod);
    if (lineNumber >= 0) {
      sourcePosition=new ClsSourcePosition(sourcePosition,lineNumber);
    }
    return sourcePosition;
  }
  SourcePosition sourcePosition=SourcePosition.createFromLine(psiFile,lineNumber);
  int lambdaOrdinal=-1;
  if (LambdaMethodFilter.isLambdaName(method.name())) {
    Set<Method> lambdas=ContainerUtil.map2SetNotNull(locationsOfLine(location.declaringType(),sourcePosition),new Function<Location,Method>(){
      @Override public Method fun(      Location location){
        Method method=location.method();
        if (LambdaMethodFilter.isLambdaName(method.name())) {
          return method;
        }
        return null;
      }
    }
);
    if (lambdas.size() > 1) {
      ArrayList<Method> lambdasList=new ArrayList<Method>(lambdas);
      Collections.sort(lambdasList,DebuggerUtilsEx.LAMBDA_ORDINAL_COMPARATOR);
      lambdaOrdinal=lambdasList.indexOf(method);
    }
  }
  return new JavaSourcePosition(sourcePosition,location.declaringType(),method,lambdaOrdinal);
}
