{
  DebuggerManagerThreadImpl.assertIsManagerThread();
  if (location == null) {
    return null;
  }
  PsiFile psiFile=getPsiFileByLocation(getDebugProcess().getProject(),location);
  if (psiFile == null) {
    return null;
  }
  LOG.assertTrue(myDebugProcess != null);
  if (location == null) {
    return SourcePosition.createFromLine(psiFile,-1);
  }
  int lineNumber;
  try {
    lineNumber=location.lineNumber() - 1;
  }
 catch (  InternalError e) {
    lineNumber=-1;
  }
  if (lineNumber > -1) {
    SourcePosition position=calcLineMappedSourcePosition(psiFile,lineNumber);
    if (position != null) {
      return position;
    }
  }
  if (psiFile instanceof PsiCompiledElement || lineNumber < 0) {
    final String methodSignature=location.method().signature();
    if (methodSignature == null) {
      return SourcePosition.createFromLine(psiFile,-1);
    }
    final String methodName=location.method().name();
    if (methodName == null) {
      return SourcePosition.createFromLine(psiFile,-1);
    }
    if (location.declaringType() == null) {
      return SourcePosition.createFromLine(psiFile,-1);
    }
    final MethodFinder finder=new MethodFinder(location.declaringType().name(),methodName,methodSignature);
    psiFile.accept(finder);
    final PsiMethod compiledMethod=finder.getCompiledMethod();
    if (compiledMethod == null) {
      return SourcePosition.createFromLine(psiFile,-1);
    }
    SourcePosition sourcePosition=SourcePosition.createFromElement(compiledMethod);
    if (lineNumber >= 0) {
      sourcePosition=new ClsSourcePosition(sourcePosition,lineNumber);
    }
    return sourcePosition;
  }
  return SourcePosition.createFromLine(psiFile,lineNumber);
}
