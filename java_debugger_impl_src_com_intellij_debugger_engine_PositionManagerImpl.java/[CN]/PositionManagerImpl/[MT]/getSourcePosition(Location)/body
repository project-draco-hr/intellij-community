{
  DebuggerManagerThreadImpl.assertIsManagerThread();
  if (location == null) {
    return null;
  }
  Project project=getDebugProcess().getProject();
  PsiFile psiFile=getPsiFileByLocation(project,location);
  if (psiFile == null) {
    return null;
  }
  LOG.assertTrue(myDebugProcess != null);
  int lineNumber;
  try {
    lineNumber=location.lineNumber() - 1;
  }
 catch (  InternalError e) {
    lineNumber=-1;
  }
  String altFileUrl=DebuggerUtilsEx.getAlternativeSourceUrl(location.declaringType().name(),project);
  if (altFileUrl != null) {
    VirtualFile altFile=VirtualFileManager.getInstance().findFileByUrl(altFileUrl);
    if (altFile != null) {
      PsiFile altPsiFile=psiFile.getManager().findFile(altFile);
      if (altPsiFile != null) {
        psiFile=altPsiFile;
      }
    }
  }
  SourcePosition sourcePosition=null;
  if (lineNumber > -1) {
    sourcePosition=calcLineMappedSourcePosition(psiFile,lineNumber);
  }
  final Method method=location.method();
  if (sourcePosition == null && (psiFile instanceof PsiCompiledElement || lineNumber < 0)) {
    String methodSignature=method.signature();
    String methodName=method.name();
    if (methodSignature != null && methodName != null && location.declaringType() != null) {
      MethodFinder finder=new MethodFinder(location.declaringType().name(),methodName,methodSignature);
      psiFile.accept(finder);
      PsiMethod compiledMethod=finder.getCompiledMethod();
      if (compiledMethod != null) {
        sourcePosition=SourcePosition.createFromElement(compiledMethod);
        if (lineNumber >= 0) {
          sourcePosition=new ClsSourcePosition(sourcePosition,lineNumber);
        }
      }
    }
 else {
      return SourcePosition.createFromLine(psiFile,-1);
    }
  }
  if (sourcePosition == null) {
    sourcePosition=SourcePosition.createFromLine(psiFile,lineNumber);
  }
  int lambdaOrdinal=-1;
  if (LambdaMethodFilter.isLambdaName(method.name())) {
    Set<Method> lambdas=ContainerUtil.map2SetNotNull(locationsOfLine(location.declaringType(),sourcePosition),new Function<Location,Method>(){
      @Override public Method fun(      Location location){
        Method method=location.method();
        if (LambdaMethodFilter.isLambdaName(method.name())) {
          return method;
        }
        return null;
      }
    }
);
    if (lambdas.size() > 1) {
      ArrayList<Method> lambdasList=new ArrayList<>(lambdas);
      Collections.sort(lambdasList,DebuggerUtilsEx.LAMBDA_ORDINAL_COMPARATOR);
      lambdaOrdinal=lambdasList.indexOf(method);
    }
  }
  return new JavaSourcePosition(sourcePosition,location.declaringType(),method,lambdaOrdinal);
}
