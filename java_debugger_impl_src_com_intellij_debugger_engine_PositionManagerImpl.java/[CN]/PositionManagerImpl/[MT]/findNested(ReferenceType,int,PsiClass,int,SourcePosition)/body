{
  final VirtualMachineProxyImpl vmProxy=myDebugProcess.getVirtualMachineProxy();
  if (fromClass.isPrepared()) {
    try {
      if (currentDepth < requiredDepth) {
        final List<ReferenceType> nestedTypes=vmProxy.nestedTypes(fromClass);
        for (        ReferenceType nested : nestedTypes) {
          final ReferenceType found=findNested(nested,currentDepth + 1,classToFind,requiredDepth,position);
          if (found != null) {
            return found;
          }
        }
        return null;
      }
      int rangeBegin=Integer.MAX_VALUE;
      int rangeEnd=Integer.MIN_VALUE;
      for (      Location location : fromClass.allLineLocations()) {
        final int lnumber=location.lineNumber();
        if (lnumber <= 1) {
          continue;
        }
        final Method method=location.method();
        if (method == null || DebuggerUtils.isSynthetic(method) || method.isBridge()) {
          continue;
        }
        int locationLine=lnumber - 1;
        PsiFile psiFile=position.getFile().getOriginalFile();
        if (psiFile instanceof PsiCompiledFile) {
          locationLine=bytecodeToSourceLine(psiFile,locationLine);
          if (locationLine < 0)           continue;
        }
        rangeBegin=Math.min(rangeBegin,locationLine);
        rangeEnd=Math.max(rangeEnd,locationLine);
      }
      final int positionLine=position.getLine();
      if (positionLine >= rangeBegin && positionLine <= rangeEnd) {
        final int finalRangeBegin=rangeBegin;
        final int finalRangeEnd=rangeEnd;
        return ApplicationManager.getApplication().runReadAction(new NullableComputable<ReferenceType>(){
          public ReferenceType compute(){
            if (!classToFind.isValid()) {
              return null;
            }
            final int line=Math.min(finalRangeBegin + 1,finalRangeEnd);
            final SourcePosition candidatePosition=positionLine == line ? position : SourcePosition.createFromLine(position.getFile(),line);
            return classToFind.equals(JVMNameUtil.getClassAt(candidatePosition)) ? fromClass : null;
          }
        }
);
      }
    }
 catch (    AbsentInformationException ignored) {
    }
  }
  return null;
}
