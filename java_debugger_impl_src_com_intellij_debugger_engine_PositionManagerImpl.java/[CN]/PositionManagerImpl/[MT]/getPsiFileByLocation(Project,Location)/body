{
  if (location == null) {
    return null;
  }
  final ReferenceType refType=location.declaringType();
  if (refType == null) {
    return null;
  }
  final String originalQName=refType.name();
  PsiClass psiClass=null;
  Sdk alternativeJre=myDebugProcess.getSession().getAlternativeJre();
  if (alternativeJre != null) {
    try {
      psiClass=ContainerUtil.getFirstItem(StubIndex.getElements(JavaStubIndexKeys.CLASS_FQN,originalQName.hashCode(),project,AlternativeJreIndexHelper.getSearchScope(alternativeJre),PsiClass.class));
      if (psiClass instanceof ClsClassImpl) {
        PsiFile psiSource=findSourceFile((ClsClassImpl)psiClass,alternativeJre);
        if (psiSource != null) {
          return psiSource;
        }
      }
    }
 catch (    IndexNotReadyException ignored) {
    }
  }
  if (psiClass == null) {
    GlobalSearchScope searchScope=myDebugProcess.getSearchScope();
    psiClass=DebuggerUtils.findClass(originalQName,project,searchScope);
    if (psiClass == null) {
      int dollar=originalQName.indexOf('$');
      if (dollar > 0) {
        final String qName=originalQName.substring(0,dollar);
        psiClass=DebuggerUtils.findClass(qName,project,searchScope);
      }
    }
  }
  if (psiClass != null) {
    PsiElement element=psiClass.getNavigationElement();
    if (element instanceof PsiCompiledElement) {
      PsiElement fileElement=psiClass.getContainingFile().getNavigationElement();
      if (!(fileElement instanceof PsiCompiledElement)) {
        element=fileElement;
      }
    }
    return element.getContainingFile();
  }
 else {
    try {
      PsiFile[] files=FilenameIndex.getFilesByName(project,refType.sourceName(),GlobalSearchScope.allScope(project));
      for (      PsiFile file : files) {
        if (file instanceof PsiJavaFile) {
          for (          PsiClass cls : ((PsiJavaFile)file).getClasses()) {
            if (StringUtil.equals(originalQName,cls.getQualifiedName())) {
              return file;
            }
          }
        }
      }
    }
 catch (    AbsentInformationException ignore) {
    }
  }
  return null;
}
