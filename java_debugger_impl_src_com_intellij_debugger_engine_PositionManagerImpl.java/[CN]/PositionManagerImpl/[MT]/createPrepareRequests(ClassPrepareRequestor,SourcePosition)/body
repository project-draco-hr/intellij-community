{
  return ApplicationManager.getApplication().runReadAction(new Computable<List<ClassPrepareRequest>>(){
    @Override public List<ClassPrepareRequest> compute(){
      List<ClassPrepareRequest> res=new ArrayList<ClassPrepareRequest>();
      for (      PsiClass psiClass : getLineClasses(position.getFile(),position.getLine())) {
        ClassPrepareRequestor prepareRequestor=requestor;
        String classPattern=JVMNameUtil.getNonAnonymousClassName(psiClass);
        if (classPattern == null) {
          final PsiClass parent=JVMNameUtil.getTopLevelParentClass(psiClass);
          if (parent == null) {
            continue;
          }
          final String parentQName=JVMNameUtil.getNonAnonymousClassName(parent);
          if (parentQName == null) {
            continue;
          }
          classPattern=parentQName + "*";
          prepareRequestor=new ClassPrepareRequestor(){
            public void processClassPrepare(            DebugProcess debuggerProcess,            ReferenceType referenceType){
              final CompoundPositionManager positionManager=((DebugProcessImpl)debuggerProcess).getPositionManager();
              final List<ReferenceType> positionClasses=positionManager.getAllClasses(position);
              if (positionClasses.contains(referenceType)) {
                requestor.processClassPrepare(debuggerProcess,referenceType);
              }
            }
          }
;
        }
        res.add(myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor,classPattern));
      }
      return res;
    }
  }
);
}
