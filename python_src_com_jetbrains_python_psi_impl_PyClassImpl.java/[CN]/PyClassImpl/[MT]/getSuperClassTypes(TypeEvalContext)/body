{
  if (PyNames.FAKE_OLD_BASE.equals(getName())) {
    return Collections.emptyList();
  }
  final PyClassStub stub=getStub();
  final List<PyClassLikeType> result=new ArrayList<PyClassLikeType>();
  if (stub != null) {
    final PsiFile file=getContainingFile();
    if (file instanceof PyFile) {
      for (      QualifiedName name : stub.getSuperClasses()) {
        result.add(name != null ? classTypeFromQName(name,(PyFile)file,context) : null);
      }
    }
  }
 else {
    for (    PyExpression expression : getSuperClassExpressions()) {
      context.getType(expression);
      expression=unfoldClass(expression);
      if (expression instanceof PyKeywordArgument) {
        continue;
      }
      final PyType type=context.getType(expression);
      PyClassLikeType classLikeType=null;
      if (type instanceof PyClassLikeType) {
        classLikeType=(PyClassLikeType)type;
      }
 else {
        final PsiReference ref=expression.getReference();
        if (ref != null) {
          final PsiElement resolved=ref.resolve();
          if (resolved instanceof PyClass) {
            final PyType resolvedType=context.getType((PyClass)resolved);
            if (resolvedType instanceof PyClassLikeType) {
              classLikeType=(PyClassLikeType)resolvedType;
            }
          }
        }
      }
      result.add(classLikeType);
    }
  }
  final PyBuiltinCache builtinCache=PyBuiltinCache.getInstance(this);
  if (result.isEmpty() && isValid() && !builtinCache.isBuiltin(this)) {
    final String implicitSuperName=LanguageLevel.forElement(this).isPy3K() ? PyNames.OBJECT : PyNames.FAKE_OLD_BASE;
    final PyClass implicitSuper=builtinCache.getClass(implicitSuperName);
    if (implicitSuper != null) {
      final PyType type=context.getType(implicitSuper);
      if (type instanceof PyClassLikeType) {
        result.add((PyClassLikeType)type);
      }
    }
  }
  return result;
}
