{
  if (PyNames.FAKE_OLD_BASE.equals(getName())) {
    return Collections.emptyList();
  }
  final PyClassStub stub=getStub();
  final List<PyClassLikeType> result=new ArrayList<>();
  if (!context.maySwitchToAST(this)) {
    fillSuperClassesNoSwitchToAst(context,stub,result);
  }
 else {
    fillSuperClassesSwitchingToAst(context,result);
  }
  final PyBuiltinCache builtinCache=PyBuiltinCache.getInstance(this);
  PyPsiUtils.assertValid(this);
  if (result.isEmpty() && isValid() && !builtinCache.isBuiltin(this)) {
    final String implicitSuperName=LanguageLevel.forElement(this).isPy3K() ? PyNames.OBJECT : PyNames.FAKE_OLD_BASE;
    final PyClass implicitSuper=builtinCache.getClass(implicitSuperName);
    if (implicitSuper != null) {
      final PyType type=context.getType(implicitSuper);
      if (type instanceof PyClassLikeType) {
        result.add((PyClassLikeType)type);
      }
    }
  }
  return result;
}
