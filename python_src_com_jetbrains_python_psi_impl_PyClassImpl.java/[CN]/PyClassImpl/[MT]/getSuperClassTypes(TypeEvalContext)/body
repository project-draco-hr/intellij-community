{
  if (PyNames.FAKE_OLD_BASE.equals(getName())) {
    return Collections.emptyList();
  }
  final PyClassStub stub=getStub();
  final List<PyClassLikeType> result=new ArrayList<PyClassLikeType>();
  if (stub != null) {
    final PsiElement parent=stub.getParentStub().getPsi();
    if (parent instanceof PyFile) {
      final PyFile file=(PyFile)parent;
      for (      QualifiedName name : stub.getSuperClasses()) {
        result.add(name != null ? classTypeFromQName(name,file,context) : null);
      }
    }
  }
 else {
    for (    PyExpression expression : getSuperClassExpressions()) {
      expression=unfoldClass(expression);
      if (expression instanceof PyKeywordArgument) {
        continue;
      }
      final PyType type=context.getType(expression);
      result.add(type instanceof PyClassLikeType ? (PyClassLikeType)type : null);
    }
  }
  final PyBuiltinCache builtinCache=PyBuiltinCache.getInstance(this);
  if (result.isEmpty() && isValid() && !builtinCache.hasInBuiltins(this)) {
    final String implicitSuperName=LanguageLevel.forElement(this).isPy3K() ? PyNames.OBJECT : PyNames.FAKE_OLD_BASE;
    final PyClass implicitSuper=builtinCache.getClass(implicitSuperName);
    if (implicitSuper != null) {
      final PyType type=context.getType(implicitSuper);
      if (type instanceof PyClassLikeType) {
        result.add((PyClassLikeType)type);
      }
    }
  }
  return result;
}
