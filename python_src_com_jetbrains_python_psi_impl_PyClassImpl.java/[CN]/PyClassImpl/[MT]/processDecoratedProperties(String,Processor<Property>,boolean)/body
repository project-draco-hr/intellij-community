{
  Map<String,List<PyFunction>> grouped=new HashMap<String,List<PyFunction>>();
  for (  PyFunction method : getMethods(false)) {
    final String methodName=method.getName();
    if (name == null || name.equals(methodName)) {
      List<PyFunction> bucket=grouped.get(methodName);
      if (bucket == null) {
        bucket=new SmartList<PyFunction>();
        grouped.put(methodName,bucket);
      }
      bucket.add(method);
    }
  }
  for (  Map.Entry<String,List<PyFunction>> entry : grouped.entrySet()) {
    Maybe<Callable> getter=NONE;
    Maybe<Callable> setter=NONE;
    Maybe<Callable> deleter=NONE;
    String doc=null;
    final String decoratorName=entry.getKey();
    for (    PyFunction method : entry.getValue()) {
      final PyDecoratorList decoratorList=method.getDecoratorList();
      if (decoratorList != null) {
        for (        PyDecorator deco : decoratorList.getDecorators()) {
          final QualifiedName qname=deco.getQualifiedName();
          if (qname != null) {
            String decoName=qname.toString();
            for (            PyKnownDecoratorProvider provider : PyUtil.KnownDecoratorProviderHolder.KNOWN_DECORATOR_PROVIDERS) {
              final String knownName=provider.toKnownDecorator(decoName);
              if (knownName != null) {
                decoName=knownName;
              }
            }
            if (PyNames.PROPERTY.equals(decoName)) {
              getter=new Maybe<Callable>(method);
            }
 else             if (useAdvancedSyntax && qname.matches(decoratorName,PyNames.GETTER)) {
              getter=new Maybe<Callable>(method);
            }
 else             if (useAdvancedSyntax && qname.matches(decoratorName,PyNames.SETTER)) {
              setter=new Maybe<Callable>(method);
            }
 else             if (useAdvancedSyntax && qname.matches(decoratorName,PyNames.DELETER)) {
              deleter=new Maybe<Callable>(method);
            }
          }
        }
      }
      if (getter != NONE && setter != NONE && deleter != NONE)       break;
    }
    if (getter != NONE || setter != NONE || deleter != NONE) {
      final PropertyImpl prop=new PropertyImpl(decoratorName,getter,setter,deleter,doc,null);
      if (filter == null || filter.process(prop))       return prop;
    }
  }
  return null;
}
