{
  final PyFunctionStub stub=function.getStub();
  if (stub != null) {
    return Arrays.asList(stub.getChildrenByType(PyElementTypes.TARGET_EXPRESSION,PyTargetExpression.EMPTY_ARRAY));
  }
 else {
    final PyStatementList statementList=function.getStatementList();
    final List<PyTargetExpression> result=new ArrayList<PyTargetExpression>();
    if (statementList != null) {
      statementList.accept(new PyRecursiveElementVisitor(){
        @Override public void visitPyClass(        PyClass node){
        }
        public void visitPyAssignmentStatement(        final PyAssignmentStatement node){
          for (          PyExpression expression : node.getTargets()) {
            if (expression instanceof PyTargetExpression) {
              result.add((PyTargetExpression)expression);
            }
          }
        }
      }
);
    }
    return result;
  }
}
