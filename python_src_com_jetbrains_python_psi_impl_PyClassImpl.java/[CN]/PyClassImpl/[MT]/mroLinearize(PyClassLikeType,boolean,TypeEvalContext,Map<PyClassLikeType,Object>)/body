{
  final Object computed=cache.get(type);
  if (computed == EVALUATING) {
    throw new IllegalStateException("Circular class inheritance");
  }
  if (computed != null) {
    return (List<PyClassLikeType>)computed;
  }
  cache.put(type,EVALUATING);
  List<PyClassLikeType> result=null;
  try {
    final List<PyClassLikeType> bases=type.getSuperClassTypes(context);
    final List<List<PyClassLikeType>> lines=new ArrayList<List<PyClassLikeType>>();
    for (    PyClassLikeType base : bases) {
      if (base != null) {
        final List<PyClassLikeType> baseClassMRO=mroLinearize(base,true,context,cache);
        if (!baseClassMRO.isEmpty()) {
          lines.add(baseClassMRO);
        }
      }
    }
    if (!bases.isEmpty()) {
      lines.add(bases);
    }
    result=mroMerge(lines);
    if (addThisType) {
      result.add(0,type);
    }
  }
  finally {
    cache.put(type,result);
  }
  return result;
}
