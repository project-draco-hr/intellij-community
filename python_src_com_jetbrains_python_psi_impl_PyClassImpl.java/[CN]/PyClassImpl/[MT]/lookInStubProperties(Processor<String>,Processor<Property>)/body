{
  Maybe<PyFunction> getter=none;
  Maybe<PyFunction> setter=none;
  Maybe<PyFunction> deleter=none;
  String doc=null;
  final PyClassStub stub=getStub();
  if (stub != null) {
    for (    StubElement substub : stub.getChildrenStubs()) {
      if (substub.getStubType() == PyElementTypes.TARGET_EXPRESSION) {
        final PyTargetExpressionStub target_stub=(PyTargetExpressionStub)substub;
        PropertyStubStorage prop=target_stub.getPropertyPack();
        if (prop != null && (name_filter == null || name_filter.process(target_stub.getName()))) {
          getter=fromPacked(prop.getGetter());
          setter=fromPacked(prop.getSetter());
          deleter=fromPacked(prop.getDeleter());
          doc=prop.getDoc();
        }
      }
    }
    if (getter != none || setter != none || deleter != none) {
      final PropertyImpl prop=new PropertyImpl(getter,setter,deleter,doc,null);
      if (property_filter == null || property_filter.process(prop))       return prop;
    }
  }
  return null;
}
