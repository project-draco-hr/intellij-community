{
  PyPsiUtils.assertValid(this);
  if (context.maySwitchToAST(this)) {
    final PyExpression expression=getMetaClassExpression();
    if (expression != null) {
      final PyType type=context.getType(expression);
      if (type != null) {
        return type;
      }
    }
  }
 else {
    final PyClassStub stub=getStub();
    final QualifiedName name=stub != null ? stub.getMetaClass() : PyPsiUtils.asQualifiedName(getMetaClassExpression());
    final PsiFile file=getContainingFile();
    if (file instanceof PyFile) {
      final PyFile pyFile=(PyFile)file;
      if (name != null) {
        return classTypeFromQName(name,pyFile,context);
      }
    }
  }
  final LanguageLevel level=LanguageLevel.forElement(this);
  if (level.isOlderThan(LanguageLevel.PYTHON30)) {
    final PsiFile file=getContainingFile();
    if (file instanceof PyFile) {
      final PyFile pyFile=(PyFile)file;
      final PsiElement element=pyFile.getElementNamed(PyNames.DUNDER_METACLASS);
      if (element instanceof PyTypedElement) {
        return context.getType((PyTypedElement)element);
      }
    }
  }
  return null;
}
