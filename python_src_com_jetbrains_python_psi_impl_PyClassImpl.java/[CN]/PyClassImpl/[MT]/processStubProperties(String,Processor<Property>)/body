{
  final PyClassStub stub=getStub();
  if (stub != null) {
    for (    StubElement substub : stub.getChildrenStubs()) {
      if (substub.getStubType() == PyElementTypes.TARGET_EXPRESSION) {
        final PyTargetExpressionStub targetStub=(PyTargetExpressionStub)substub;
        PropertyStubStorage prop=targetStub.getCustomStub(PropertyStubStorage.class);
        if (prop != null && (name == null || name.equals(targetStub.getName()))) {
          Maybe<Callable> getter=fromPacked(prop.getGetter());
          Maybe<Callable> setter=fromPacked(prop.getSetter());
          Maybe<Callable> deleter=fromPacked(prop.getDeleter());
          String doc=prop.getDoc();
          if (getter != NONE || setter != NONE || deleter != NONE) {
            final PropertyImpl property=new PropertyImpl(targetStub.getName(),getter,setter,deleter,doc,targetStub.getPsi());
            if (propertyProcessor == null || propertyProcessor.process(property))             return property;
          }
        }
      }
    }
  }
  return null;
}
