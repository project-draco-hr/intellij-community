{
  final PyParameter[] params=method.getParameterList().getParameters();
  if (params.length == 0) {
    return;
  }
  final PyFunctionStub methodStub=method.getStub();
  if (methodStub != null) {
    final PyTargetExpression[] targets=methodStub.getChildrenByType(PyElementTypes.TARGET_EXPRESSION,PyTargetExpression.EMPTY_ARRAY);
    for (    PyTargetExpression target : targets) {
      if (!result.containsKey(target.getName())) {
        result.put(target.getName(),target);
      }
    }
  }
 else   if (anchor != null) {
    PyResolveUtil.scopeCrawlUp(new PsiScopeProcessor(){
      @Override public boolean execute(      @NotNull PsiElement element,      ResolveState state){
        if (element instanceof PyAssignmentStatement) {
          collectNewTargets(result,(PyAssignmentStatement)element);
        }
        return true;
      }
      @Nullable @Override public <T>T getHint(      @NotNull Key<T> hintKey){
        return null;
      }
      @Override public void handleEvent(      Event event,      @Nullable Object associated){
      }
    }
,anchor,null,method);
  }
 else {
    final PyStatementList statementList=method.getStatementList();
    if (statementList != null) {
      statementList.accept(new PyRecursiveElementVisitor(){
        public void visitPyAssignmentStatement(        final PyAssignmentStatement node){
          super.visitPyAssignmentStatement(node);
          collectNewTargets(result,node);
        }
      }
);
    }
  }
}
