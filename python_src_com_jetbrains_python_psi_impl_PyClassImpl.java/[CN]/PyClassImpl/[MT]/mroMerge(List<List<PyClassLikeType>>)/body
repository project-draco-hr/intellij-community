{
  List<PyClassLikeType> result=new LinkedList<PyClassLikeType>();
  while (true) {
    final List<List<PyClassLikeType>> nonBlankSequences=new ArrayList<List<PyClassLikeType>>(sequences.size());
    for (    List<PyClassLikeType> item : sequences) {
      if (item.size() > 0)       nonBlankSequences.add(item);
    }
    if (nonBlankSequences.isEmpty())     return result;
    boolean found=false;
    PyClassLikeType head=null;
    for (    List<PyClassLikeType> seq : nonBlankSequences) {
      head=seq.get(0);
      boolean headInTails=false;
      for (      List<PyClassLikeType> tailSeq : nonBlankSequences) {
        if (tailSeq.indexOf(head) > 0) {
          headInTails=true;
          break;
        }
      }
      if (!headInTails) {
        found=true;
        break;
      }
 else {
        head=null;
      }
    }
    if (!found) {
      throw new IllegalStateException("Inconsistent class hierarchy");
    }
    result.add(head);
    for (    List<PyClassLikeType> seq : nonBlankSequences) {
      if (Comparing.equal(seq.get(0),head)) {
        seq.remove(0);
      }
    }
  }
}
