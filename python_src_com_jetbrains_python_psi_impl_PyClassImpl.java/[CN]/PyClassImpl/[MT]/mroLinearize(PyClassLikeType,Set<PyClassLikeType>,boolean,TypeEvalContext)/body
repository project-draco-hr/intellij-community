{
  if (seen.contains(type)) {
    throw new MROException("Circular class inheritance");
  }
  final List<PyClassLikeType> bases=type.getSuperClassTypes(context);
  List<List<PyClassLikeType>> lines=new ArrayList<List<PyClassLikeType>>();
  for (  PyClassLikeType base : bases) {
    if (base != null) {
      final Set<PyClassLikeType> newSeen=new HashSet<PyClassLikeType>(seen);
      newSeen.add(type);
      List<PyClassLikeType> lin=mroLinearize(base,newSeen,true,context);
      if (!lin.isEmpty())       lines.add(lin);
    }
  }
  if (!bases.isEmpty()) {
    lines.add(bases);
  }
  List<PyClassLikeType> result=mroMerge(lines);
  if (addThisType) {
    result.add(0,type);
  }
  return result;
}
