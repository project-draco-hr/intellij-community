{
  final Ref<List<PyClassLikeType>> computed=cache.get(type);
  if (computed != null) {
    if (computed.isNull()) {
      throw new MROException("Circular class inheritance");
    }
    return computed.get();
  }
  cache.put(type,Ref.create());
  List<PyClassLikeType> result=null;
  try {
    final List<PyClassLikeType> bases=removeNotNullDuplicates(type.getSuperClassTypes(context));
    final List<List<PyClassLikeType>> lines=new ArrayList<>();
    for (    PyClassLikeType base : bases) {
      if (base != null) {
        final List<PyClassLikeType> baseClassMRO=mroLinearize(base,true,context,cache);
        if (!baseClassMRO.isEmpty()) {
          lines.add(new LinkedList<>(baseClassMRO));
        }
      }
    }
    if (!bases.isEmpty()) {
      lines.add(bases);
    }
    result=mroMerge(lines);
    if (addThisType) {
      result.add(0,type);
    }
    result=Collections.unmodifiableList(result);
  }
  finally {
    cache.put(type,Ref.create(result));
  }
  return result;
}
