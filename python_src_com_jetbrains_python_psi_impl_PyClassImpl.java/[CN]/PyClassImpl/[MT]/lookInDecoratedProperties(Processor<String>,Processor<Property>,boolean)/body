{
  Map<String,List<PyFunction>> grouped=new HashMap<String,List<PyFunction>>();
  for (  PyFunction method : getMethods()) {
    final String name=method.getName();
    if (name_filter == null || name_filter.process(name)) {
      List<PyFunction> bucket=grouped.get(name);
      if (bucket == null) {
        bucket=new SmartList<PyFunction>();
        grouped.put(name,bucket);
      }
      bucket.add(method);
    }
  }
  for (  Map.Entry<String,List<PyFunction>> entry : grouped.entrySet()) {
    Maybe<PyFunction> getter=none;
    Maybe<PyFunction> setter=none;
    Maybe<PyFunction> deleter=none;
    String doc=null;
    final String name=entry.getKey();
    for (    PyFunction method : entry.getValue()) {
      PyDecoratorList decolist=method.getDecoratorList();
      if (decolist != null) {
        for (        PyDecorator deco : decolist.getDecorators()) {
          PyQualifiedName deco_name=deco.getQualifiedName();
          if (deco_name != null) {
            if (deco_name.matches("property")) {
              getter=new Maybe<PyFunction>(method);
            }
 else             if (advanced && deco_name.matches(name,"setter")) {
              setter=new Maybe<PyFunction>(method);
            }
 else             if (advanced && deco_name.matches(name,"deleter")) {
              deleter=new Maybe<PyFunction>(method);
            }
          }
        }
      }
      if (getter != none && setter != none && deleter != none)       break;
    }
    if (getter != none || setter != none || deleter != none) {
      final PropertyImpl prop=new PropertyImpl(getter,setter,deleter,doc,null);
      if (property_filter == null || property_filter.process(prop))       return prop;
    }
  }
  return null;
}
