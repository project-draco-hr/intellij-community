{
  final List<PyClassLikeType> results=new ArrayList<PyClassLikeType>();
  final List<PyClass> toProcess=new ArrayList<PyClass>();
  final Set<PyClassLikeType> seen=new HashSet<PyClassLikeType>();
  final Set<PyClass> visited=new HashSet<PyClass>();
  toProcess.add(this);
  while (!toProcess.isEmpty()) {
    final PyClass cls=toProcess.remove(0);
    visited.add(cls);
    final List<PyClassLikeType> types=cls.getSuperClassTypes(context);
    for (    PyClassLikeType type : types) {
      if (type == null || !seen.contains(type)) {
        results.add(type);
        seen.add(type);
      }
      if (type instanceof PyClassType) {
        final PyClass superClass=((PyClassType)type).getPyClass();
        if (!visited.contains(superClass)) {
          toProcess.add(superClass);
        }
      }
    }
  }
  return results;
}
