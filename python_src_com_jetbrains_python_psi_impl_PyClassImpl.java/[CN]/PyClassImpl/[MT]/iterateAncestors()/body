{
  return new Iterable<PyClass>(){
    public Iterator<PyClass> iterator(){
      return new Iterator<PyClass>(){
        List<PyClass> pending=new LinkedList<PyClass>();
        Set<PyClass> seen=new HashSet<PyClass>();
        Iterator<PyClass> percolator=getSuperClassesList().iterator();
        PyClass prefetch=null;
        public boolean hasNext(){
          if (prefetch != null)           return true;
          try {
            prefetch=next();
            return true;
          }
 catch (          NoSuchElementException e) {
            return false;
          }
        }
        public PyClass next(){
          if (prefetch != null) {
            PyClass ret=prefetch;
            prefetch=null;
            return ret;
          }
          if (percolator.hasNext()) {
            PyClass it=percolator.next();
            if (seen.contains(it))             return next();
            pending.add(it);
            seen.add(it);
            return it;
          }
 else           if (pending.size() > 0) {
            PyClass it=pending.get(0);
            pending.remove(0);
            percolator=it.iterateAncestors().iterator();
            return next();
          }
 else           throw new NoSuchElementException();
        }
        public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
}
