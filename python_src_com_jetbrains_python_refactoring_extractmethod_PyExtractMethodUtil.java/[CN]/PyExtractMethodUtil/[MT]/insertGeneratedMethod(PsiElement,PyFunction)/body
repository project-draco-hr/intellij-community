{
  final Pair<PsiElement,TextRange> data=anchor.getUserData(PyReplaceExpressionUtil.SELECTION_BREAKS_AST_NODE);
  if (data != null) {
    anchor=data.first;
  }
  final PsiNamedElement parent=PsiTreeUtil.getParentOfType(anchor,PyFile.class,PyClass.class,PyFunction.class);
  PsiElement result;
  if (parent instanceof PyFile || parent instanceof PyClass) {
    PsiElement target=parent instanceof PyClass ? ((PyClass)parent).getStatementList() : parent;
    final PsiElement anchorStatement=PyPsiUtils.getParentRightBefore(anchor,target);
    result=target.addBefore(generatedMethod,anchorStatement);
  }
 else {
    result=parent.getParent().addBefore(generatedMethod,parent);
  }
  result.accept(new PsiRecursiveElementVisitor(){
    @Override public void visitElement(    PsiElement element){
      super.visitElement(element);
      CodeEditUtil.setNodeGenerated(element.getNode(),true);
    }
  }
);
  return (PyFunction)result;
}
