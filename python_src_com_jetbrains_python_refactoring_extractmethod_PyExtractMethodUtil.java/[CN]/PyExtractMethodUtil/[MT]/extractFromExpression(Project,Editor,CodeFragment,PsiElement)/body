{
  if (!fragment.getOutputVariables().isEmpty()) {
    CommonRefactoringUtil.showErrorHint(project,editor,"Cannot perform refactoring from expression with local variables modifications inside code fragment",RefactoringBundle.message("error.title"),"refactoring.extractMethod");
    return;
  }
  if (fragment.isReturnInstructionInside()) {
    CommonRefactoringUtil.showErrorHint(project,editor,"Cannot extract method with return instructions inside code fragment",RefactoringBundle.message("error.title"),"refactoring.extractMethod");
    return;
  }
  final Pair<String,AbstractVariableData[]> data=getNameAndVariableData(project,fragment,expression);
  if (data.first == null || data.second == null) {
    return;
  }
  final String methodName=data.first;
  final AbstractVariableData[] variableData=data.second;
  if (fragment.getOutputVariables().isEmpty()) {
    CommandProcessor.getInstance().executeCommand(project,new Runnable(){
      public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            PyFunction generatedMethod=generateMethodFromExpression(project,methodName,variableData,expression);
            generatedMethod=insertGeneratedMethod(expression,generatedMethod);
            final boolean isMethod=PyPsiUtils.isMethodContext(expression);
            processParameters(project,generatedMethod,variableData,isMethod);
            final StringBuilder builder=new StringBuilder();
            if (fragment.isReturnInstructionInside()) {
              builder.append("return ");
            }
            if (isMethod) {
              builder.append("self.");
            }
            builder.append(methodName);
            builder.append("(").append(createCallArgsString(variableData)).append(")");
            PsiElement callElement=PyElementGenerator.getInstance(project).createFromText(PyElement.class,builder.toString());
            callElement=PyPsiUtils.replaceExpression(project,expression,callElement);
            setSelectionAndCaret(editor,callElement);
          }
        }
);
      }
    }
,"Extract method",null);
  }
}
