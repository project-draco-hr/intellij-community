{
  if (!fragment.getOutputVariables().isEmpty() && fragment.isReturnInstructonInside()) {
    CommonRefactoringUtil.showErrorHint(project,editor,"Cannot extract method with non empty output variables and return instructions inside",RefactoringBundle.message("error.title"),"refactoring.extractMethod");
    return;
  }
  final Pair<String,AbstractVariableData[]> data=getNameAndVariableData(project,fragment,expression);
  if (data.first == null || data.second == null) {
    return;
  }
  final String methodName=data.first;
  final AbstractVariableData[] variableData=data.second;
  if (fragment.getOutputVariables().isEmpty()) {
    CommandProcessor.getInstance().executeCommand(project,new Runnable(){
      public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            final PyFunction generatedMethod=generateMethodFromExpression(project,methodName,variableData,expression);
            insertGeneratedMethod(expression,generatedMethod);
            processParameters(project,generatedMethod,variableData);
            final StringBuilder builder=new StringBuilder();
            if (fragment.isReturnInstructonInside()) {
              builder.append("return ");
            }
            builder.append(methodName);
            builder.append("(").append(createCallArgsString(variableData)).append(")");
            PsiElement callElement=PythonLanguage.getInstance().getElementGenerator().createFromText(project,PyElement.class,builder.toString());
            callElement=PyPsiUtils.replaceExpression(project,expression,callElement);
            setSelectionAndCaret(editor,callElement);
          }
        }
);
      }
    }
,"Extract method",null);
  }
}
