{
  final ExtractMethodValidator validator=new PyExtractMethodValidator(element,project);
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    String name=System.getProperty(NAME);
    if (name == null) {
      name="foo";
    }
    final String error=validator.check(name);
    if (error != null) {
      if (ApplicationManager.getApplication().isUnitTestMode()) {
        throw new CommonRefactoringUtil.RefactoringErrorHintException(error);
      }
      if (Messages.showOkCancelDialog(error + ". " + RefactoringBundle.message("do.you.wish.to.continue"),RefactoringBundle.message("warning.title"),Messages.getWarningIcon()) != Messages.OK) {
        throw new CommonRefactoringUtil.RefactoringErrorHintException(error);
      }
    }
    final List<AbstractVariableData> data=new ArrayList<AbstractVariableData>();
    for (    String in : fragment.getInputVariables()) {
      final AbstractVariableData d=new AbstractVariableData();
      d.name=in + "_new";
      d.originalName=in;
      d.passAsParameter=true;
      data.add(d);
    }
    return Pair.create(name,data.toArray(new AbstractVariableData[data.size()]));
  }
  final boolean isMethod=PyPsiUtils.isMethodContext(element);
  final ExtractMethodDecorator decorator=new ExtractMethodDecorator(){
    @NotNull public String createMethodPreview(    final String methodName,    @NotNull final AbstractVariableData[] variableDatas){
      final StringBuilder builder=new StringBuilder();
      if (isClassMethod) {
        builder.append("cls");
      }
 else       if (isMethod && !isStaticMethod) {
        builder.append("self");
      }
      for (      AbstractVariableData variableData : variableDatas) {
        if (variableData.passAsParameter) {
          if (builder.length() != 0) {
            builder.append(", ");
          }
          builder.append(variableData.name);
        }
      }
      builder.insert(0,"(");
      builder.insert(0,methodName);
      builder.insert(0,"def ");
      builder.append(")");
      return builder.toString();
    }
  }
;
  final AbstractExtractMethodDialog dialog=new AbstractExtractMethodDialog(project,"method_name",fragment,validator,decorator,PythonFileType.INSTANCE){
    @Override protected String getHelpId(){
      return "python.reference.extractMethod";
    }
  }
;
  dialog.show();
  if (!dialog.isOK()) {
    return Pair.empty();
  }
  return Pair.create(dialog.getMethodName(),dialog.getVariableData());
}
