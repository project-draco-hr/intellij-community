{
  final List<PsiElement> elementsRange=PyPsiUtils.collectElements(match.getStartElement(),match.getEndElement());
  final Map<String,String> changedParameters=match.getChangedParameters();
  if (callElement instanceof PyExpressionStatement) {
    final PyExpression expression=((PyExpressionStatement)callElement).getExpression();
    if (expression instanceof PyCallExpression) {
      final Set<String> keys=changedParameters.keySet();
      final PyArgumentList argumentList=((PyCallExpression)expression).getArgumentList();
      if (argumentList != null) {
        for (        PyExpression arg : argumentList.getArguments()) {
          final String argText=arg.getText();
          if (argText != null && keys.contains(argText)) {
            arg.replace(PyElementGenerator.getInstance(callElement.getProject()).createExpressionFromText(LanguageLevel.forElement(callElement),changedParameters.get(argText)));
          }
        }
      }
    }
  }
  return replaceElements(elementsRange,callElement);
}
