{
  myMarkedCallee=resolved_callee;
  Callable callable=resolved_callee.getCallable();
  PyParameterList paramlist=callable.getParameterList();
  PyParameter[] params=paramlist.getParameters();
  List<PyExpression> unmatched_args=new LinkedList<PyExpression>();
  Collections.addAll(unmatched_args,arguments);
  Map<String,PyExpression> param_slots=new HashMap<String,PyExpression>();
  PyNamedParameter kwd_slot=null;
  PyNamedParameter tuple_slot=null;
  PyStarArgument kwd_arg=null;
  PyStarArgument tuple_arg=null;
  final List<PyExpression> unmatched_subargs=new LinkedList<PyExpression>();
  for (  PyParameter a_param : params) {
    PyNamedParameter n_param=a_param.getAsNamed();
    if (n_param != null) {
      if (n_param.isPositionalContainer())       tuple_slot=n_param;
 else       if (n_param.isKeywordContainer())       kwd_slot=n_param;
 else       param_slots.put(a_param.getName(),null);
    }
  }
  for (  PyExpression arg : arguments) {
    if (arg instanceof PyStarArgument) {
      final PyStarArgument star_arg=(PyStarArgument)arg;
      if (star_arg.isKeyword()) {
        if (kwd_arg == null)         kwd_arg=star_arg;
 else {
          markArgument(arg,PyArgumentList.ArgFlag.IS_DUP_KWD);
          unmatched_args.remove(arg);
        }
      }
 else {
        if (tuple_arg == null) {
          tuple_arg=star_arg;
        }
 else {
          markArgument(arg,PyArgumentList.ArgFlag.IS_DUP_TUPLE);
          unmatched_args.remove(arg);
        }
      }
    }
  }
  int param_index=0;
  for (int i=0; i < resolved_callee.getImplicitOffset() && i < params.length; i+=1) {
    param_slots.remove(params[i].getName());
    param_index+=1;
  }
  boolean seen_tuple_arg=false;
  boolean seen_kwd_arg=false;
  boolean seenSingleStar=false;
  ListIterator<PyExpression> unmatched_arg_iter=unmatched_args.listIterator();
  while (unmatched_arg_iter.hasNext() && (param_index < params.length)) {
    PyParameter a_param=params[param_index];
    if (a_param instanceof PySingleStarParameter) {
      param_index++;
      seenSingleStar=true;
      continue;
    }
    final PyExpression arg=unmatched_arg_iter.next();
    PyNamedParameter n_param=a_param.getAsNamed();
    if (n_param != null) {
      if (arg instanceof PyKeywordArgument || arg instanceof PyStarArgument || n_param.isKeywordContainer()|| n_param.isPositionalContainer()) {
        seen_tuple_arg|=(arg == tuple_arg);
        seen_kwd_arg|=(arg == kwd_arg);
        unmatched_arg_iter.previous();
        break;
      }
      if (!seenSingleStar) {
        param_slots.put(n_param.getName(),arg);
        myPlainMappedParams.put(arg,n_param);
      }
 else {
        param_index++;
        continue;
      }
    }
 else {
      PyTupleParameter tupleParameter=a_param.getAsTuple();
      if (tupleParameter != null) {
        unmatched_arg_iter.previous();
        MyParamVisitor visitor=new MyParamVisitor(unmatched_arg_iter,this);
        visitor.enterTuple(a_param.getAsTuple());
        unmatched_subargs.addAll(visitor.getUnmatchedSubargs());
      }
    }
    unmatched_arg_iter.remove();
    param_index+=1;
  }
  if (!seen_kwd_arg) {
    if (!seen_tuple_arg) {
      if (tuple_slot != null) {
        while (unmatched_arg_iter.hasNext()) {
          PyExpression arg=unmatched_arg_iter.next();
          if (arg instanceof PyKeywordArgument) {
            unmatched_arg_iter.previous();
            break;
          }
          myPlainMappedParams.put(arg,tuple_slot);
          unmatched_arg_iter.remove();
        }
      }
    }
 else     if (tuple_slot != null) {
      for (int i=0; params[i] != tuple_slot; i+=1) {
        if (params[i] instanceof PyNamedParameter) {
          PyNamedParameter param=(PyNamedParameter)params[i];
          myPlainMappedParams.put(tuple_arg,param);
          param_slots.put(param.getName(),tuple_arg);
        }
      }
    }
    boolean seen_kwd=false;
    while (unmatched_arg_iter.hasNext()) {
      PyExpression arg=unmatched_arg_iter.next();
      if (arg instanceof PyKeywordArgument) {
        if (!seen_kwd_arg && (!seen_tuple_arg || language_level.isAtLeast(LanguageLevel.PYTHON30))) {
          final String argname=((PyKeywordArgument)arg).getKeyword();
          if (param_slots.containsKey(argname)) {
            if (param_slots.get(argname) == null) {
              param_slots.put(argname,arg);
              seen_kwd=true;
            }
 else {
              markArgument(arg,PyArgumentList.ArgFlag.IS_DUP);
            }
            unmatched_arg_iter.remove();
          }
        }
 else {
          markArgument(arg,PyArgumentList.ArgFlag.IS_UNMAPPED);
          unmatched_arg_iter.remove();
        }
      }
 else       if (seen_kwd && (arg != kwd_arg)) {
        markArgument(arg,PyArgumentList.ArgFlag.IS_POS_PAST_KWD);
        unmatched_arg_iter.remove();
      }
      seen_tuple_arg|=(arg == tuple_arg);
      seen_kwd_arg|=(arg == kwd_arg);
    }
    if (kwd_slot != null) {
      unmatched_arg_iter=unmatched_args.listIterator();
      while (unmatched_arg_iter.hasNext()) {
        PyExpression arg=unmatched_arg_iter.next();
        if (arg instanceof PyKeywordArgument) {
          myPlainMappedParams.put(arg,kwd_slot);
          unmatched_arg_iter.remove();
        }
      }
    }
  }
  if (seen_tuple_arg) {
    for (    PyParameter a_param : params) {
      PyNamedParameter n_param=a_param.getAsNamed();
      if (n_param != null) {
        final String param_name=n_param.getName();
        if ((!n_param.hasDefaultValue()) && param_slots.containsKey(param_name) && (param_slots.get(param_name) == null)) {
          param_slots.put(param_name,tuple_arg);
          unmatched_args.remove(tuple_arg);
        }
      }
    }
  }
  if (seen_kwd_arg) {
    for (    PyParameter a_param : params) {
      PyNamedParameter n_param=a_param.getAsNamed();
      if (n_param != null) {
        final String param_name=n_param.getName();
        if ((!n_param.hasDefaultValue()) && param_slots.containsKey(param_name) && (param_slots.get(param_name) == null)) {
          param_slots.put(param_name,kwd_arg);
          unmatched_args.remove(kwd_arg);
        }
      }
    }
  }
  Map<String,PyNamedParameter> unfilled_params=new HashMap<String,PyNamedParameter>();
  for (  PyParameter a_param : params) {
    PyNamedParameter n_param=a_param.getAsNamed();
    if (n_param != null) {
      final String param_name=n_param.getName();
      if ((!n_param.hasDefaultValue()) && param_slots.containsKey(param_name) && (param_slots.get(param_name) == null)) {
        if (tuple_arg != null) {
          param_slots.put(param_name,tuple_arg);
          unmatched_args.remove(tuple_arg);
        }
 else {
          unfilled_params.put(param_name,n_param);
        }
      }
    }
  }
  if (kwd_arg != null && kwd_slot != null) {
    myKwdMappedParams.add(kwd_slot);
    unmatched_args.remove(kwd_arg);
  }
  if (tuple_arg != null && tuple_slot != null) {
    myTupleMappedParams.add(tuple_slot);
    unmatched_args.remove(tuple_arg);
  }
  if (tuple_arg != null && myTupleMappedParams.isEmpty()) {
    for (    PyParameter a_param : params) {
      PyNamedParameter n_param=a_param.getAsNamed();
      if (n_param != null) {
        final String param_name=n_param.getName();
        if (param_slots.containsKey(param_name) && (param_slots.get(param_name) == null)) {
          param_slots.put(param_name,tuple_arg);
          unmatched_args.remove(tuple_arg);
        }
      }
    }
  }
  if (kwd_arg != null && myKwdMappedParams.isEmpty()) {
    for (    PyParameter a_param : params) {
      PyNamedParameter n_param=a_param.getAsNamed();
      if (n_param != null) {
        final String param_name=n_param.getName();
        if (param_slots.containsKey(param_name) && (param_slots.get(param_name) == null)) {
          param_slots.put(param_name,kwd_arg);
          unmatched_args.remove(kwd_arg);
        }
      }
    }
  }
  boolean tuple_arg_consumed_some=false;
  for (  PyExpression arg : param_slots.values()) {
    if (arg != null && arg == tuple_arg) {
      tuple_arg_consumed_some=true;
      break;
    }
  }
  for (  PyExpression arg : unmatched_args) {
    if (arg == kwd_arg && tuple_arg_consumed_some)     continue;
    markArgument(arg,PyArgumentList.ArgFlag.IS_UNMAPPED);
  }
  for (  final PyNamedParameter param : unfilled_params.values()) {
    myUnmappedParams.add(param);
  }
  for (  PyParameter a_param : params) {
    PyNamedParameter n_param=a_param.getAsNamed();
    if (n_param != null) {
      PyExpression arg=param_slots.get(n_param.getName());
      if (arg != null) {
        if (arg instanceof PyStarArgument) {
          PyStarArgument star_arg=(PyStarArgument)arg;
          if (star_arg.isKeyword())           myKwdMappedParams.add(n_param);
 else           myTupleMappedParams.add(n_param);
        }
 else         myPlainMappedParams.put(arg,n_param);
      }
    }
  }
  myKwdArg=kwd_arg;
  myTupleArg=tuple_arg;
  for (  PyExpression subarg : unmatched_subargs) {
    myArgFlags.put(subarg,EnumSet.of(PyArgumentList.ArgFlag.IS_UNMAPPED));
  }
}
