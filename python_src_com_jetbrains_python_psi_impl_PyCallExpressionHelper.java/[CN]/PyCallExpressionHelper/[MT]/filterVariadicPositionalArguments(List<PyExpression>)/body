{
  final List<PyExpression> variadicArguments=new ArrayList<PyExpression>();
  final List<PyExpression> positionalComponentsOfVariadicArguments=new ArrayList<PyExpression>();
  for (  PyExpression argument : arguments) {
    if (argument != null && isVariadicPositionalArgument(argument)) {
      final PsiElement expr=PyPsiUtils.flattenParens(PsiTreeUtil.getChildOfType(argument,PyExpression.class));
      if (expr instanceof PySequenceExpression) {
        final PySequenceExpression sequenceExpr=(PySequenceExpression)expr;
        positionalComponentsOfVariadicArguments.addAll(Arrays.asList(sequenceExpr.getElements()));
      }
 else {
        variadicArguments.add(argument);
      }
    }
  }
  return Pair.create(variadicArguments,positionalComponentsOfVariadicArguments);
}
