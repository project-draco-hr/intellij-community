{
  final PyDecorator decorator=PsiTreeUtil.getParentOfType(callReference,PyDecorator.class);
  if (decorator != null && PsiTreeUtil.isAncestor(decorator.getCallee(),callReference,false)) {
    return 1;
  }
  QualifiedResolveResult followed=callReference.followAssignmentsChain(resolveContext);
  final List<PyExpression> qualifiers=followed.getQualifiers();
  final PyExpression firstQualifier=qualifiers != null && !qualifiers.isEmpty() ? qualifiers.get(0) : null;
  boolean isByInstance=isQualifiedByInstance(function,qualifiers != null ? qualifiers : Collections.emptyList(),resolveContext.getTypeEvalContext());
  final boolean isConstructorCall=isConstructorName(function.getName()) && (!callReference.isQualified() || !isConstructorName(callReference.getName()));
  boolean isByClass=firstQualifier != null && isQualifiedByClass(function,firstQualifier,resolveContext.getTypeEvalContext());
  return getImplicitArgumentCount(function,function.getModifier(),isConstructorCall,isByInstance,isByClass);
}
