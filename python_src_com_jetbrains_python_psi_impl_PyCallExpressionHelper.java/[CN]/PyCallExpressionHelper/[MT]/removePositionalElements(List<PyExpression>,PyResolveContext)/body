{
  final List<PyExpression> results=new ArrayList<PyExpression>();
  for (  PyExpression argument : new ArrayList<PyExpression>(arguments)) {
    if (isPositionalArgument(argument)) {
      results.add(argument);
      arguments.remove(argument);
    }
 else     if (isVariadicPositionalArgument(argument)) {
      final PsiElement expr=PyPsiUtils.flattenParens(PsiTreeUtil.getChildOfType(argument,PyExpression.class));
      final PsiElement element;
      if (expr instanceof PyReferenceExpression) {
        element=((PyReferenceExpression)expr).followAssignmentsChain(resolveContext).getElement();
      }
 else {
        element=expr;
      }
      if (element instanceof PySequenceExpression) {
        final PySequenceExpression sequenceExpr=(PySequenceExpression)element;
        results.addAll(Arrays.asList(sequenceExpr.getElements()));
        arguments.remove(argument);
      }
    }
  }
  return results;
}
