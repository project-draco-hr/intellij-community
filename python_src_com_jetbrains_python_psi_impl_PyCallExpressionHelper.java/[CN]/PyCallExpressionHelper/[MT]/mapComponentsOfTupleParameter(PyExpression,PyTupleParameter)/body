{
  final List<PyParameter> unmappedParameters=new ArrayList<PyParameter>();
  final List<PyExpression> unmappedArguments=new ArrayList<PyExpression>();
  final Map<PyExpression,PyNamedParameter> mappedParameters=new LinkedHashMap<PyExpression,PyNamedParameter>();
  argument=PyPsiUtils.flattenParens(argument);
  if (argument instanceof PySequenceExpression) {
    final PySequenceExpression sequenceExpr=(PySequenceExpression)argument;
    final PyExpression[] argumentComponents=sequenceExpr.getElements();
    final PyParameter[] parameterComponents=parameter.getContents();
    for (int i=0; i < parameterComponents.length; i++) {
      final PyParameter param=parameterComponents[i];
      if (i < argumentComponents.length) {
        final PyExpression arg=argumentComponents[i];
        if (arg != null) {
          if (param instanceof PyNamedParameter) {
            mappedParameters.put(arg,(PyNamedParameter)param);
          }
 else           if (param instanceof PyTupleParameter) {
            final TupleMappingResults nestedResults=mapComponentsOfTupleParameter(arg,(PyTupleParameter)param);
            mappedParameters.putAll(nestedResults.getParameters());
            unmappedParameters.addAll(nestedResults.getUnmappedParameters());
            unmappedArguments.addAll(nestedResults.getUnmappedArguments());
          }
 else {
            unmappedArguments.add(arg);
          }
        }
 else {
          unmappedParameters.add(param);
        }
      }
 else {
        unmappedParameters.add(param);
      }
    }
    if (argumentComponents.length > parameterComponents.length) {
      for (int i=parameterComponents.length; i < argumentComponents.length; i++) {
        final PyExpression arg=argumentComponents[i];
        if (arg != null) {
          unmappedArguments.add(arg);
        }
      }
    }
  }
  return new TupleMappingResults(mappedParameters,unmappedParameters,unmappedArguments);
}
