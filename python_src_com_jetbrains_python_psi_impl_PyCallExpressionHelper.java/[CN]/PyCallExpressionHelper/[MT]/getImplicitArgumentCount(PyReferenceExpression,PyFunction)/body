{
  final PyDecorator decorator=PsiTreeUtil.getParentOfType(callReference,PyDecorator.class);
  if (decorator != null && PsiTreeUtil.isAncestor(decorator.getCallee(),callReference,false)) {
    return 1;
  }
  final PyResolveContext resolveContext=PyResolveContext.noImplicits();
  QualifiedResolveResult followed=callReference.followAssignmentsChain(resolveContext);
  boolean isByInstance=isQualifiedByInstance(functionBeingCalled,followed.getQualifiers(),resolveContext.getTypeEvalContext());
  boolean isByClass=isQualifiedByInstance(functionBeingCalled,followed.getQualifiers(),resolveContext.getTypeEvalContext());
  return getImplicitArgumentCount(functionBeingCalled,functionBeingCalled.getModifier(),false,isByInstance,isByClass);
}
