{
  PyFunction.Modifier wrappedModifier=null;
  boolean isConstructorCall=false;
  PyExpression callee=us.getCallee();
  if (isResolvedToMultipleTargets(callee,resolveContext)) {
    return null;
  }
  PsiElement resolved;
  QualifiedResolveResult resolveResult=null;
  if (callee instanceof PyReferenceExpression) {
    PyReferenceExpression ref=(PyReferenceExpression)callee;
    resolveResult=ref.followAssignmentsChain(resolveContext);
    resolved=resolveResult.getElement();
  }
 else {
    resolved=callee;
  }
  if (resolved instanceof PyClass) {
    resolved=((PyClass)resolved).findInitOrNew(true);
    isConstructorCall=true;
  }
 else   if (resolved instanceof PyCallExpression) {
    PyCallExpression redefiningCall=(PyCallExpression)resolved;
    Pair<String,PyFunction> wrapperInfo=interpretAsModifierWrappingCall(redefiningCall,us);
    if (wrapperInfo != null) {
      resolved=wrapperInfo.getSecond();
      String wrapper_name=wrapperInfo.getFirst();
      if (PyNames.CLASSMETHOD.equals(wrapper_name)) {
        wrappedModifier=PyFunction.Modifier.CLASSMETHOD;
      }
 else       if (PyNames.STATICMETHOD.equals(wrapper_name))       wrappedModifier=PyFunction.Modifier.STATICMETHOD;
    }
  }
  final List<PyExpression> qualifiers=resolveResult != null ? resolveResult.getQualifiers() : Collections.<PyExpression>emptyList();
  final TypeEvalContext context=resolveContext.getTypeEvalContext();
  if (resolved instanceof PyFunction) {
    final PyFunction function=(PyFunction)resolved;
    final Property property=function.getProperty();
    if (property != null && isQualifiedByInstance(function,qualifiers,context)) {
      final PyType type=context.getReturnType(function);
      if (type instanceof PyFunctionType) {
        resolved=((PyFunctionType)type).getCallable();
      }
 else {
        resolved=null;
      }
    }
  }
  if (resolved instanceof Callable) {
    PyFunction.Modifier modifier=resolved instanceof PyFunction ? ((PyFunction)resolved).getModifier() : null;
    if (modifier == null && wrappedModifier != null) {
      modifier=wrappedModifier;
    }
    boolean isByInstance=isConstructorCall || isQualifiedByInstance((Callable)resolved,qualifiers,context) || resolved instanceof PyBoundFunction;
    PyExpression lastQualifier=qualifiers != null && qualifiers.isEmpty() ? null : qualifiers.get(qualifiers.size() - 1);
    boolean isByClass=lastQualifier == null ? false : isQualifiedByClass((Callable)resolved,lastQualifier,context);
    final Callable callable=(Callable)resolved;
    implicitOffset+=getImplicitArgumentCount(callable,modifier,isConstructorCall,isByInstance,isByClass);
    implicitOffset=implicitOffset < 0 ? 0 : implicitOffset;
    return new PyCallExpression.PyMarkedCallee(callable,modifier,implicitOffset,resolveResult != null ? resolveResult.isImplicit() : false);
  }
  return null;
}
