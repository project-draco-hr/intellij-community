{
  PyExpression callee=us.getCallee();
  PyFunction.Flag wrapped_flag=null;
  if (callee instanceof PyReferenceExpression) {
    PyReferenceExpression ref=(PyReferenceExpression)callee;
    PsiElement resolved=PyUtil.followAssignmentsChain(ref);
    if (resolved instanceof PyClass)     resolved=((PyClass)resolved).findMethodByName(PyNames.INIT,false);
 else     if (resolved instanceof PyCallExpression) {
      PyCallExpression redefining_call=(PyCallExpression)resolved;
      Pair<String,PyFunction> wrapper_info=interpretAsStaticmethodOrClassmethodWrappingCall(redefining_call,us);
      if (wrapper_info != null) {
        resolved=wrapper_info.getSecond();
        String wrapper_name=wrapper_info.getFirst();
        if (PyNames.CLASSMETHOD.equals(wrapper_name))         wrapped_flag=PyFunction.Flag.CLASSMETHOD;
 else         if (PyNames.STATICMETHOD.equals(wrapper_name))         wrapped_flag=PyFunction.Flag.STATICMETHOD;
      }
    }
    if (resolved instanceof PyFunction) {
      EnumSet<PyFunction.Flag> flags=EnumSet.noneOf(PyFunction.Flag.class);
      int implicit_offset=0;
      boolean is_by_instance=isByInstance(us);
      if (is_by_instance)       implicit_offset+=1;
      if (wrapped_flag != null) {
        flags.add(wrapped_flag);
        flags.add(PyFunction.Flag.WRAPPED);
        if (wrapped_flag == PyFunction.Flag.STATICMETHOD && implicit_offset > 0)         implicit_offset-=1;
        if (wrapped_flag == PyFunction.Flag.CLASSMETHOD && !is_by_instance)         implicit_offset+=1;
      }
      PyFunction method=(PyFunction)resolved;
      if (PyNames.INIT.equals(method.getName()))       implicit_offset+=1;
      PyDecoratorList decolist=method.getDecoratorList();
      if (decolist != null) {
        PyDecorator[] decos=decolist.getDecorators();
        if (decos.length == 1) {
          PyDecorator deco=decos[0];
          String deconame=deco.getName();
          if (deco.isBuiltin()) {
            if (PyNames.STATICMETHOD.equals(deconame)) {
              flags.add(PyFunction.Flag.STATICMETHOD);
              if (implicit_offset > 0)               implicit_offset-=1;
            }
 else             if (PyNames.CLASSMETHOD.equals(deconame)) {
              flags.add(PyFunction.Flag.CLASSMETHOD);
              if (!is_by_instance)               implicit_offset+=1;
            }
          }
        }
      }
      return new PyCallExpression.PyMarkedFunction((PyFunction)resolved,flags,implicit_offset);
    }
  }
  return null;
}
