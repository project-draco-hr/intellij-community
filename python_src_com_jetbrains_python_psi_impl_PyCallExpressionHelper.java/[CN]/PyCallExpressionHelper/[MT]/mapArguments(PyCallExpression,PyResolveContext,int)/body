{
  final PyArgumentList argumentList=callExpression.getArgumentList();
  final PyCallExpression.PyMarkedCallee markedCallee=callExpression.resolveCallee(resolveContext,implicitOffset);
  if (markedCallee == null || argumentList == null) {
    return new PyCallExpression.PyArgumentsMapping(callExpression,null,Collections.<PyExpression,PyNamedParameter>emptyMap(),Collections.<PyParameter>emptyList(),Collections.<PyExpression>emptyList(),Collections.<PyNamedParameter>emptyList(),Collections.<PyNamedParameter>emptyList(),Collections.<PyExpression,PyTupleParameter>emptyMap());
  }
  final TypeEvalContext context=resolveContext.getTypeEvalContext();
  final List<PyParameter> parameters=PyUtil.getParameters(markedCallee.getCallable(),context);
  final List<PyParameter> explicitParameters=dropImplicitParameters(parameters,markedCallee.getImplicitOffset());
  final List<PyExpression> arguments=new ArrayList<PyExpression>(Arrays.asList(argumentList.getArguments()));
  final ArgumentMappingResults mappingResults=mapArguments(arguments,explicitParameters);
  return new PyCallExpression.PyArgumentsMapping(callExpression,markedCallee,mappingResults.getMappedParameters(),mappingResults.getUnmappedParameters(),mappingResults.getUnmappedArguments(),mappingResults.getParametersMappedToVariadicPositionalArguments(),mappingResults.getParametersMappedToVariadicKeywordArguments(),mappingResults.getMappedTupleParameters());
}
