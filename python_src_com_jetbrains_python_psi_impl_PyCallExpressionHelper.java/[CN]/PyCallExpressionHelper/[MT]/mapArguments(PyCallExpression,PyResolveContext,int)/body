{
  final PyArgumentList argumentList=callExpression.getArgumentList();
  final PyCallExpression.PyMarkedCallee markedCallee=callExpression.resolveCallee(resolveContext,implicitOffset);
  if (markedCallee == null || argumentList == null) {
    return new PyCallExpression.PyArgumentsMapping(callExpression,null,Collections.<PyExpression,PyNamedParameter>emptyMap(),Collections.<PyParameter>emptyList(),Collections.<PyExpression>emptyList(),Collections.<PyNamedParameter>emptyList(),Collections.<PyNamedParameter>emptyList(),Collections.<PyExpression,PyTupleParameter>emptyMap());
  }
  boolean seenSingleStar=false;
  boolean mappedVariadicArgumentsToParameters=false;
  final TypeEvalContext context=resolveContext.getTypeEvalContext();
  final Map<PyExpression,PyNamedParameter> mappedParameters=new LinkedHashMap<PyExpression,PyNamedParameter>();
  final List<PyParameter> unmappedParameters=new ArrayList<PyParameter>();
  final List<PyExpression> unmappedArguments=new ArrayList<PyExpression>();
  final List<PyNamedParameter> parametersMappedToVariadicKeywordArguments=new ArrayList<PyNamedParameter>();
  final List<PyNamedParameter> parametersMappedToVariadicPositionalArguments=new ArrayList<PyNamedParameter>();
  final Map<PyExpression,PyTupleParameter> tupleMappedParameters=new LinkedHashMap<PyExpression,PyTupleParameter>();
  final List<PyParameter> allParameters=PyUtil.getParameters(markedCallee.getCallable(),context);
  final List<PyParameter> parameters=dropImplicitParameters(allParameters,markedCallee.getImplicitOffset());
  final List<PyExpression> arguments=new ArrayList<PyExpression>(Arrays.asList(argumentList.getArguments()));
  final List<PyExpression> positionalArguments=filterPositionalElements(arguments);
  final List<PyKeywordArgument> keywordArguments=filterKeywordArguments(arguments);
  final Pair<List<PyExpression>,List<PyExpression>> variadicPositionalArgumentsAndTheirComponents=filterVariadicPositionalArguments(arguments);
  final List<PyExpression> variadicPositionalArguments=variadicPositionalArgumentsAndTheirComponents.getFirst();
  final Set<PyExpression> positionalComponentsOfVariadicArguments=new LinkedHashSet<PyExpression>(variadicPositionalArgumentsAndTheirComponents.getSecond());
  final List<PyExpression> variadicKeywordArguments=filterVariadicKeywordArguments(arguments);
  final List<PyExpression> allPositionalArguments=new ArrayList<PyExpression>();
  allPositionalArguments.addAll(positionalArguments);
  allPositionalArguments.addAll(positionalComponentsOfVariadicArguments);
  for (  PyParameter parameter : parameters) {
    if (parameter instanceof PyNamedParameter) {
      final PyNamedParameter namedParameter=(PyNamedParameter)parameter;
      final String parameterName=namedParameter.getName();
      if (namedParameter.isPositionalContainer()) {
        for (        PyExpression argument : allPositionalArguments) {
          mappedParameters.put(argument,namedParameter);
        }
        if (variadicPositionalArguments.size() == 1) {
          mappedParameters.put(variadicPositionalArguments.get(0),namedParameter);
        }
        allPositionalArguments.clear();
        variadicPositionalArguments.clear();
      }
 else       if (namedParameter.isKeywordContainer()) {
        for (        PyKeywordArgument argument : keywordArguments) {
          mappedParameters.put(argument,namedParameter);
        }
        if (variadicKeywordArguments.size() == 1) {
          mappedParameters.put(variadicKeywordArguments.get(0),namedParameter);
        }
        keywordArguments.clear();
        variadicKeywordArguments.clear();
      }
 else       if (seenSingleStar) {
        final PyExpression keywordArgument=removeKeywordArgument(keywordArguments,parameterName);
        if (keywordArgument != null) {
          mappedParameters.put(keywordArgument,namedParameter);
        }
 else         if (variadicKeywordArguments.isEmpty()) {
          if (!namedParameter.hasDefaultValue()) {
            unmappedParameters.add(namedParameter);
          }
        }
 else {
          parametersMappedToVariadicKeywordArguments.add(namedParameter);
        }
      }
 else {
        if (allPositionalArguments.isEmpty()) {
          final PyKeywordArgument keywordArgument=removeKeywordArgument(keywordArguments,parameterName);
          if (keywordArgument != null) {
            mappedParameters.put(keywordArgument,namedParameter);
          }
 else           if (variadicPositionalArguments.isEmpty() && variadicKeywordArguments.isEmpty() && !namedParameter.hasDefaultValue()) {
            unmappedParameters.add(namedParameter);
          }
 else {
            if (!variadicPositionalArguments.isEmpty()) {
              parametersMappedToVariadicPositionalArguments.add(namedParameter);
            }
            if (!variadicKeywordArguments.isEmpty()) {
              parametersMappedToVariadicKeywordArguments.add(namedParameter);
            }
            mappedVariadicArgumentsToParameters=true;
          }
        }
 else {
          final PyExpression positionalArgument=next(allPositionalArguments);
          if (positionalArgument != null) {
            mappedParameters.put(positionalArgument,namedParameter);
            if (positionalComponentsOfVariadicArguments.contains(positionalArgument)) {
              parametersMappedToVariadicPositionalArguments.add(namedParameter);
            }
          }
 else           if (!namedParameter.hasDefaultValue()) {
            unmappedParameters.add(namedParameter);
          }
        }
      }
    }
 else     if (parameter instanceof PyTupleParameter) {
      final PyExpression positionalArgument=next(allPositionalArguments);
      if (positionalArgument != null) {
        final PyTupleParameter tupleParameter=(PyTupleParameter)parameter;
        tupleMappedParameters.put(positionalArgument,tupleParameter);
        final TupleMappingResults tupleMappingResults=mapComponentsOfTupleParameter(positionalArgument,tupleParameter);
        mappedParameters.putAll(tupleMappingResults.getParameters());
        unmappedParameters.addAll(tupleMappingResults.getUnmappedParameters());
        unmappedArguments.addAll(tupleMappingResults.getUnmappedArguments());
      }
 else       if (variadicPositionalArguments.isEmpty()) {
        if (!parameter.hasDefaultValue()) {
          unmappedParameters.add(parameter);
        }
      }
 else {
        mappedVariadicArgumentsToParameters=true;
      }
    }
 else     if (parameter instanceof PySingleStarParameter) {
      seenSingleStar=true;
    }
 else     if (!parameter.hasDefaultValue()) {
      unmappedParameters.add(parameter);
    }
  }
  if (mappedVariadicArgumentsToParameters) {
    variadicPositionalArguments.clear();
    variadicKeywordArguments.clear();
  }
  unmappedArguments.addAll(allPositionalArguments);
  unmappedArguments.addAll(keywordArguments);
  unmappedArguments.addAll(variadicPositionalArguments);
  unmappedArguments.addAll(variadicKeywordArguments);
  return new PyCallExpression.PyArgumentsMapping(callExpression,markedCallee,mappedParameters,unmappedParameters,unmappedArguments,parametersMappedToVariadicPositionalArguments,parametersMappedToVariadicKeywordArguments,tupleMappedParameters);
}
