{
  final Project project=e.getData(CommonDataKeys.PROJECT);
  if (project == null)   return;
  FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.popup.file");
  final GotoFileModel gotoFileModel=new GotoFileModel(project);
  GotoActionCallback<FileType> callback=new GotoActionCallback<FileType>(){
    @Override protected ChooseByNameFilter<FileType> createFilter(    @NotNull ChooseByNamePopup popup){
      return new GotoFileFilter(popup,gotoFileModel,project);
    }
    @Override public void elementChosen(    final ChooseByNamePopup popup,    final Object element){
      if (element == null)       return;
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          Navigatable n=(Navigatable)element;
          if (element instanceof PsiFile) {
            VirtualFile file=((PsiFile)element).getVirtualFile();
            if (file == null)             return;
            OpenFileDescriptor descriptor=new OpenFileDescriptor(project,file,popup.getLinePosition(),popup.getColumnPosition());
            n=descriptor.setUseCurrentWindow(popup.isOpenInCurrentWindowRequested());
          }
          if (!n.canNavigate())           return;
          n.navigate(true);
        }
      }
,ModalityState.NON_MODAL);
    }
  }
;
  GotoFileItemProvider provider=new GotoFileItemProvider(project,getPsiContext(e),gotoFileModel);
  showNavigationPopup(e,gotoFileModel,callback,IdeBundle.message("go.to.file.toolwindow.title"),true,true,provider);
}
