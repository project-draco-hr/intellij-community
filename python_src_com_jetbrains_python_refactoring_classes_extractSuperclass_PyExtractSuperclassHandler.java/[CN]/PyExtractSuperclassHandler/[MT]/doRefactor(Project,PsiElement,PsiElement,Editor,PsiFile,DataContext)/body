{
  CommonRefactoringUtil.checkReadOnlyStatus(project,file);
  final PyClass clazz=PyUtil.getContainingClassOrSelf(element1);
  if (!inClass(clazz,project,editor,"refactoring.pull.up.error.cannot.perform.refactoring.not.inside.class"))   return;
  final PyMemberInfoStorage infoStorage=PyClassMembersRefactoringSupport.getSelectedMemberInfos(clazz,element1,element2);
  if (ApplicationManagerEx.getApplicationEx().isUnitTestMode())   return;
  final PyExtractSuperclassDialog dialog=new PyExtractSuperclassDialog(project,clazz,infoStorage);
  dialog.show();
  if (dialog.isOK()) {
    extractWithHelper(clazz,dialog.getSelectedMemberInfos(),dialog.getSuperBaseName(),dialog.getTargetFile());
  }
}
