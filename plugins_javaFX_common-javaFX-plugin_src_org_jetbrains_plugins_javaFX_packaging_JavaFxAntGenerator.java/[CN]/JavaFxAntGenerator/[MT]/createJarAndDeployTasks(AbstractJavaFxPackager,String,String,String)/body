{
  final String artifactFileNameWithoutExtension=FileUtil.getNameWithoutExtension(artifactFileName);
  final List<SimpleTag> topLevelTagsCollector=new ArrayList<SimpleTag>();
  final String preloaderJar=packager.getPreloaderJar();
  final String preloaderClass=packager.getPreloaderClass();
  String preloaderFiles=null;
  String allButPreloader=null;
  if (!StringUtil.isEmptyOrSpaces(preloaderJar) && !StringUtil.isEmptyOrSpaces(preloaderClass)) {
    preloaderFiles=artifactFileNameWithoutExtension + "_preloader_files";
    topLevelTagsCollector.add(new SimpleTag("fx:fileset",Pair.create("id",preloaderFiles),Pair.create("requiredFor","preloader"),Pair.create("dir",tempDirPath),Pair.create("includes",preloaderJar)));
    allButPreloader="all_but_preloader_" + artifactFileNameWithoutExtension;
    topLevelTagsCollector.add(new SimpleTag("fx:fileset",Pair.create("id",allButPreloader),Pair.create("dir",tempDirPath),Pair.create("excludes",preloaderJar),Pair.create("includes","**/*.jar")));
  }
  final String allButSelf="all_but_" + artifactFileNameWithoutExtension;
  final SimpleTag allButSelfAndPreloader=new SimpleTag("fx:fileset",Pair.create("id",allButSelf),Pair.create("dir",tempDirPath),Pair.create("includes","**/*.jar"));
  allButSelfAndPreloader.add(new SimpleTag("exclude",Pair.create("name",artifactFileName)));
  if (preloaderJar != null) {
    allButSelfAndPreloader.add(new SimpleTag("exclude",Pair.create("name",preloaderJar)));
  }
  topLevelTagsCollector.add(allButSelfAndPreloader);
  final String all="all_" + artifactFileNameWithoutExtension;
  final SimpleTag allIncluded=new SimpleTag("fx:fileset",Pair.create("id",all),Pair.create("dir",tempDirPath),Pair.create("includes","**/*.jar"));
  topLevelTagsCollector.add(allIncluded);
  final String appId=artifactFileNameWithoutExtension + "_id";
  final SimpleTag applicationTag=new SimpleTag("fx:application",Pair.create("id",appId),Pair.create("name",artifactName),Pair.create("mainClass",packager.getAppClass()));
  if (preloaderFiles != null) {
    applicationTag.addAttribute(Pair.create("preloaderClass",preloaderClass));
  }
  appendValuesFromPropertiesFile(applicationTag,packager.getHtmlParamFile(),"fx:htmlParam",false);
  appendValuesFromPropertiesFile(applicationTag,packager.getParamFile(),"fx:param",true);
  topLevelTagsCollector.add(applicationTag);
  if (packager.convertCss2Bin()) {
    final SimpleTag css2binTag=new SimpleTag("fx:csstobin",Pair.create("outdir",tempDirPath));
    css2binTag.add(new SimpleTag("fileset",Pair.create("dir",tempDirPath),Pair.create("includes","**/*.css")));
    topLevelTagsCollector.add(css2binTag);
  }
  final SimpleTag createJarTag=new SimpleTag("fx:jar",Pair.create("destfile",tempDirPath + File.separator + artifactFileName));
  createJarTag.add(new SimpleTag("fx:application",Pair.create("refid",appId)));
  final List<Pair> fileset2Jar=new ArrayList<Pair>();
  fileset2Jar.add(Pair.create("dir",tempDirPath));
  fileset2Jar.add(Pair.create("excludes","**/*.jar"));
  createJarTag.add(new SimpleTag("fileset",fileset2Jar.toArray(new Pair[fileset2Jar.size()])));
  createJarTag.add(createResourcesTag(preloaderFiles,false,allButPreloader,allButSelf,all));
  List<JavaFxManifestAttribute> manifestAttributes=packager.getCustomManifestAttributes();
  if (manifestAttributes != null) {
    final SimpleTag manifestTag=new SimpleTag("manifest");
    for (    JavaFxManifestAttribute pair : manifestAttributes) {
      manifestTag.add(new SimpleTag("attribute",Pair.create("name",pair.getName()),Pair.create("value",pair.getValue())));
    }
    createJarTag.add(manifestTag);
  }
  topLevelTagsCollector.add(createJarTag);
  final SimpleTag deployTag=new SimpleTag("fx:deploy",Pair.create("width",packager.getWidth()),Pair.create("height",packager.getHeight()),Pair.create("updatemode",packager.getUpdateMode()),Pair.create("outdir",tempDirPath + File.separator + "deploy"),Pair.create("outfile",artifactFileNameWithoutExtension));
  final JavaFxPackagerConstants.NativeBundles bundle=packager.getNativeBundle();
  if (bundle != JavaFxPackagerConstants.NativeBundles.none) {
    deployTag.addAttribute(Pair.create("nativeBundles",bundle.name()));
  }
  if (packager.isEnabledSigning()) {
    deployTag.add(new SimpleTag("fx:permissions",Pair.create("elevated","true")));
  }
  deployTag.add(new SimpleTag("fx:application",Pair.create("refid",appId)));
  final List<Pair> infoPairs=new ArrayList<Pair>();
  appendIfNotEmpty(infoPairs,"title",packager.getTitle());
  appendIfNotEmpty(infoPairs,"vendor",packager.getVendor());
  appendIfNotEmpty(infoPairs,"description",packager.getDescription());
  if (!infoPairs.isEmpty()) {
    deployTag.add(new SimpleTag("fx:info",infoPairs.toArray(new Pair[infoPairs.size()])));
  }
  deployTag.add(createResourcesTag(preloaderFiles,true,allButPreloader,allButSelf,all));
  topLevelTagsCollector.add(deployTag);
  return topLevelTagsCollector;
}
