{
  if (element instanceof PyImportedModule) {
    final PsiElement resolved=((PyImportedModule)element).resolve();
    if (resolved != null) {
      element=resolved;
    }
  }
  if (element instanceof PsiFileSystemItem) {
    return new PyModuleFindUsagesHandler((PsiFileSystemItem)element);
  }
  if (element instanceof PyFunction) {
    if (!forHighlightUsages) {
      TypeEvalContext context=TypeEvalContext.userInitiated(element.getProject(),null);
      final Collection<PsiElement> superMethods=PySuperMethodsSearch.search((PyFunction)element,true,context).findAll();
      if (superMethods.size() > 0) {
        final PsiElement next=superMethods.iterator().next();
        if (next instanceof PyFunction && !isInObject((PyFunction)next)) {
          int rc=Messages.showYesNoDialog(element.getProject(),"Method " + ((PyFunction)element).getName() + " overrides method of class "+ ((PyFunction)next).getContainingClass().getName()+ ".\nDo you want to find usages of the base method?","Find Usages",Messages.getQuestionIcon());
          if (rc == Messages.YES) {
            List<PsiElement> allMethods=new ArrayList<PsiElement>();
            allMethods.add(element);
            allMethods.addAll(superMethods);
            return new PyFunctionFindUsagesHandler(element,allMethods);
          }
 else {
            return new PyFunctionFindUsagesHandler(element);
          }
        }
      }
    }
    return new PyFunctionFindUsagesHandler(element);
  }
  if (element instanceof PyClass) {
    return new PyClassFindUsagesHandler((PyClass)element);
  }
  if (element instanceof PyTargetExpression) {
    return new PyTargetExpressionFindUsagesHandler(((PyTargetExpression)element));
  }
  return null;
}
