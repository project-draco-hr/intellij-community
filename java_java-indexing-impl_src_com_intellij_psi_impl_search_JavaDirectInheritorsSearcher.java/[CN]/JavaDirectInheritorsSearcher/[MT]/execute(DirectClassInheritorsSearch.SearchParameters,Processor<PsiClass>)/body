{
  final PsiClass aClass=p.getClassToProcess();
  final SearchScope useScope=ApplicationManager.getApplication().runReadAction(new Computable<SearchScope>(){
    @Override public SearchScope compute(){
      return aClass.getUseScope();
    }
  }
);
  final String qualifiedName=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
    @Override public String compute(){
      return aClass.getQualifiedName();
    }
  }
);
  final Project project=PsiUtilCore.getProjectInReadAction(aClass);
  if (CommonClassNames.JAVA_LANG_OBJECT.equals(qualifiedName)) {
    return AllClassesSearch.search(useScope,project).forEach(new Processor<PsiClass>(){
      @Override public boolean process(      final PsiClass psiClass){
        ProgressManager.checkCanceled();
        if (psiClass.isInterface()) {
          return consumer.process(psiClass);
        }
        final PsiClass superClass=psiClass.getSuperClass();
        if (superClass != null && CommonClassNames.JAVA_LANG_OBJECT.equals(ApplicationManager.getApplication().runReadAction(new Computable<String>(){
          public String compute(){
            return superClass.getQualifiedName();
          }
        }
))) {
          return consumer.process(psiClass);
        }
        return true;
      }
    }
);
  }
  final GlobalSearchScope scope=useScope instanceof GlobalSearchScope ? (GlobalSearchScope)useScope : new EverythingGlobalScope(project);
  final String searchKey=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
    @Override public String compute(){
      return aClass.getName();
    }
  }
);
  if (StringUtil.isEmpty(searchKey)) {
    return true;
  }
  Collection<PsiReferenceList> candidates=MethodUsagesSearcher.resolveInReadAction(project,new Computable<Collection<PsiReferenceList>>(){
    @Override public Collection<PsiReferenceList> compute(){
      return JavaSuperClassNameOccurenceIndex.getInstance().get(searchKey,project,scope);
    }
  }
);
  Map<String,List<PsiClass>> classes=new HashMap<String,List<PsiClass>>();
  for (  final PsiReferenceList referenceList : candidates) {
    ProgressManager.checkCanceled();
    final PsiClass candidate=(PsiClass)ApplicationManager.getApplication().runReadAction(new Computable<PsiElement>(){
      @Override public PsiElement compute(){
        return referenceList.getParent();
      }
    }
);
    if (!checkInheritance(p,aClass,candidate,project))     continue;
    String fqn=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
      @Override public String compute(){
        return candidate.getQualifiedName();
      }
    }
);
    List<PsiClass> list=classes.get(fqn);
    if (list == null) {
      list=new ArrayList<PsiClass>();
      classes.put(fqn,list);
    }
    list.add(candidate);
  }
  if (!classes.isEmpty()) {
    final VirtualFile jarFile=getJarFile(aClass);
    for (    List<PsiClass> sameNamedClasses : classes.values()) {
      ProgressManager.checkCanceled();
      if (!processSameNamedClasses(consumer,sameNamedClasses,jarFile))       return false;
    }
  }
  if (p.includeAnonymous()) {
    Collection<PsiAnonymousClass> anonymousCandidates=MethodUsagesSearcher.resolveInReadAction(project,new Computable<Collection<PsiAnonymousClass>>(){
      @Override public Collection<PsiAnonymousClass> compute(){
        return JavaAnonymousClassBaseRefOccurenceIndex.getInstance().get(searchKey,project,scope);
      }
    }
);
    for (    PsiAnonymousClass candidate : anonymousCandidates) {
      ProgressManager.checkCanceled();
      if (!checkInheritance(p,aClass,candidate,project))       continue;
      if (!consumer.process(candidate))       return false;
    }
    boolean isEnum=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
      @Override public Boolean compute(){
        return aClass.isEnum();
      }
    }
);
    if (isEnum) {
      PsiField[] fields=ApplicationManager.getApplication().runReadAction(new Computable<PsiField[]>(){
        @Override public PsiField[] compute(){
          return aClass.getFields();
        }
      }
);
      for (      final PsiField field : fields) {
        ProgressManager.checkCanceled();
        if (field instanceof PsiEnumConstant) {
          PsiEnumConstantInitializer initializingClass=ApplicationManager.getApplication().runReadAction(new Computable<PsiEnumConstantInitializer>(){
            @Override public PsiEnumConstantInitializer compute(){
              return ((PsiEnumConstant)field).getInitializingClass();
            }
          }
);
          if (initializingClass != null) {
            if (!consumer.process(initializingClass))             return false;
          }
        }
      }
    }
  }
  return true;
}
