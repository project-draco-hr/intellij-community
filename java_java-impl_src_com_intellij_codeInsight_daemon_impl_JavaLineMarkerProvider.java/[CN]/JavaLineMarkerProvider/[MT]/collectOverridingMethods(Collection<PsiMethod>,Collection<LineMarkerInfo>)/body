{
  if (!myOverriddenOption.isEnabled() && !myImplementedOption.isEnabled())   return;
  final Set<PsiMethod> overridden=new HashSet<PsiMethod>();
  Set<PsiClass> classes=new THashSet<PsiClass>();
  for (  PsiMethod method : methods) {
    ProgressManager.checkCanceled();
    final PsiClass parentClass=method.getContainingClass();
    if (!CommonClassNames.JAVA_LANG_OBJECT.equals(parentClass.getQualifiedName())) {
      classes.add(parentClass);
    }
  }
  for (  final PsiClass aClass : classes) {
    AllOverridingMethodsSearch.search(aClass).forEach(new Processor<Pair<PsiMethod,PsiMethod>>(){
      @Override public boolean process(      final Pair<PsiMethod,PsiMethod> pair){
        ProgressManager.checkCanceled();
        final PsiMethod superMethod=pair.getFirst();
        if (methods.remove(superMethod)) {
          overridden.add(superMethod);
        }
        return !methods.isEmpty();
      }
    }
);
  }
  if (!methods.isEmpty()) {
    for (    PsiClass aClass : classes) {
      final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(aClass);
      if (interfaceMethod != null) {
        if (FunctionalExpressionSearch.search(aClass).findFirst() != null) {
          overridden.add(interfaceMethod);
        }
      }
    }
  }
  for (  PsiMethod method : overridden) {
    ProgressManager.checkCanceled();
    boolean overrides=!method.hasModifierProperty(PsiModifier.ABSTRACT);
    if (overrides) {
      if (!myOverriddenOption.isEnabled())       return;
    }
 else {
      if (!myImplementedOption.isEnabled())       return;
    }
    PsiElement range=getMethodRange(method);
    final MarkerType type=MarkerType.OVERRIDDEN_METHOD;
    final Icon icon=overrides ? AllIcons.Gutter.OverridenMethod : AllIcons.Gutter.ImplementedMethod;
    LineMarkerInfo<PsiElement> info=new LineMarkerInfo<PsiElement>(range,range.getTextRange(),icon,Pass.UPDATE_OVERRIDEN_MARKERS,type.getTooltip(),type.getNavigationHandler(),GutterIconRenderer.Alignment.RIGHT);
    NavigateAction.setNavigateAction(info,overrides ? "Go to overriding methods" : "Go to implementation(s)",IdeActions.ACTION_GOTO_IMPLEMENTATION);
    result.add(info);
  }
}
