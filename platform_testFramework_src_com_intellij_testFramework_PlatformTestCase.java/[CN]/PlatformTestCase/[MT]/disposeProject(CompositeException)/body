{
  try {
    DocumentCommitThread.getInstance().clearQueue();
    if (SwingUtilities.isEventDispatchThread()) {
      UIUtil.dispatchAllInvocationEvents();
    }
  }
 catch (  Exception e) {
    result.add(e);
  }
  try {
    if (myProject != null) {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          Disposer.dispose(myProject);
          ProjectManagerEx projectManager=ProjectManagerEx.getInstanceEx();
          if (projectManager instanceof ProjectManagerImpl) {
            Collection<Project> projectsStillOpen=projectManager.closeTestProject(myProject);
            if (!projectsStillOpen.isEmpty()) {
              Project project=projectsStillOpen.iterator().next();
              String message="Test project is not disposed: " + project + ";\n created in: "+ getCreationPlace(project);
              try {
                projectManager.closeTestProject(project);
                Disposer.dispose(project);
              }
 catch (              Exception e) {
              }
              throw new AssertionError(message);
            }
          }
        }
      }
);
    }
  }
 catch (  Exception e) {
    result.add(e);
  }
 finally {
    if (myProject != null) {
      try {
        PsiDocumentManager documentManager=myProject.getComponent(PsiDocumentManager.class,null);
        if (documentManager != null) {
          EditorFactory.getInstance().getEventMulticaster().removeDocumentListener((DocumentListener)documentManager);
        }
      }
 catch (      Exception ignored) {
      }
      myProject=null;
    }
  }
}
