{
  return new FileReferenceSet(text,element,offset,this,true,myEndingSlashNotAllowed){
    @Override protected boolean isSoft(){
      return soft;
    }
    @Override public boolean isAbsolutePathReference(){
      return true;
    }
    @Override public boolean couldBeConvertedTo(    boolean relative){
      return !relative;
    }
    @Override public boolean absoluteUrlNeedsStartSlash(){
      final String s=getPathString();
      return s != null && !s.isEmpty() && s.charAt(0) == '/';
    }
    @Override @NotNull public Collection<PsiFileSystemItem> computeDefaultContexts(){
      if (forModules.length > 0) {
        Set<PsiFileSystemItem> rootsForModules=ContainerUtil.newLinkedHashSet();
        for (        Module forModule : forModules) {
          rootsForModules.addAll(getRoots(forModule,true));
        }
        return rootsForModules;
      }
      return getRoots(ModuleUtilCore.findModuleForPsiElement(getElement()),true);
    }
    @Override public FileReference createFileReference(    final TextRange range,    final int index,    final String text){
      return FilePathReferenceProvider.this.createFileReference(this,range,index,text);
    }
    @Override protected Condition<PsiFileSystemItem> getReferenceCompletionFilter(){
      return new Condition<PsiFileSystemItem>(){
        @Override public boolean value(        final PsiFileSystemItem element){
          return isPsiElementAccepted(element);
        }
      }
;
    }
  }
.getAllReferences();
}
