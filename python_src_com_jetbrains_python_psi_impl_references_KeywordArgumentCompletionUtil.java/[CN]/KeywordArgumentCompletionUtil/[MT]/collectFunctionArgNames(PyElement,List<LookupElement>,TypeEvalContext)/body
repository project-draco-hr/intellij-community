{
  PyCallExpression callExpr=PsiTreeUtil.getParentOfType(element,PyCallExpression.class);
  if (callExpr != null) {
    PyExpression callee=callExpr.getCallee();
    if (callee instanceof PyReferenceExpression && element.getParent() == callExpr.getArgumentList()) {
      PsiElement def=getElementByType(context,callee);
      if (def == null) {
        def=getElementByChain(context,(PyReferenceExpression)callee);
      }
      if (def instanceof PyCallable) {
        addKeywordArgumentVariants((PyCallable)def,callExpr,ret);
      }
 else       if (def instanceof PyClass) {
        PyFunction init=((PyClass)def).findMethodByName(PyNames.INIT,true,null);
        if (init != null) {
          addKeywordArgumentVariants(init,callExpr,ret);
        }
      }
      final PyType calleeType=context.getType(callee);
      final PyUnionType unionType=PyUtil.as(calleeType,PyUnionType.class);
      if (unionType != null) {
        fetchCallablesFromUnion(ret,callExpr,unionType,context);
      }
      final PyNamedTupleType namedTupleType=PyUtil.as(calleeType,PyNamedTupleType.class);
      if (namedTupleType != null) {
        for (        String name : namedTupleType.getElementNames()) {
          ret.add(PyUtil.createNamedParameterLookup(name,element.getProject()));
        }
      }
    }
  }
}
