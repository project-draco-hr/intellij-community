{
  PyCallExpression callExpr=PsiTreeUtil.getParentOfType(element,PyCallExpression.class);
  if (callExpr != null) {
    PyExpression callee=callExpr.getCallee();
    if (callee instanceof PyReferenceExpression && element.getParent() == callExpr.getArgumentList()) {
      PsiElement def=getElementByType(context,callee);
      if (def == null) {
        def=getElementByChain(context,(PyReferenceExpression)callee);
      }
      if (def instanceof PyCallable) {
        addKeywordArgumentVariants((PyCallable)def,callExpr,ret);
      }
 else       if (def instanceof PyClass) {
        PyFunction init=((PyClass)def).findMethodByName(PyNames.INIT,true,null);
        if (init != null) {
          addKeywordArgumentVariants(init,callExpr,ret);
        }
      }
      final PyUnionType unionType=PyUtil.as(context.getType(callee),PyUnionType.class);
      if (unionType != null) {
        fetchCallablesFromUnion(ret,callExpr,unionType,context);
      }
    }
  }
}
