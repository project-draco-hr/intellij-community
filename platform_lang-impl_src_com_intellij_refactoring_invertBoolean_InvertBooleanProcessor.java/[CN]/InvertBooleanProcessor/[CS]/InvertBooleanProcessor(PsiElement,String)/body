{
  super(namedElement.getProject());
  myElement=namedElement;
  myNewName=newName;
  final Project project=namedElement.getProject();
  final boolean canRename=namedElement instanceof PsiNamedElement && !Comparing.equal(((PsiNamedElement)namedElement).getName(),myNewName);
  myRenameProcessor=canRename ? new RenameProcessor(project,namedElement,newName,false,false){
    @NotNull @Override protected ConflictsDialog createConflictsDialog(    @NotNull MultiMap<PsiElement,String> conflicts,    @Nullable final UsageInfo[] usages){
      return new ConflictsDialog(myProject,conflicts,usages == null ? null : new Runnable(){
        @Override public void run(){
          InvertBooleanProcessor.this.execute(usages);
        }
      }
,false,true);
    }
    @Override protected void prepareSuccessful(){
      InvertBooleanProcessor.this.prepareSuccessful();
    }
  }
 : null;
  mySmartPointerManager=SmartPointerManager.getInstance(project);
  myDelegate=InvertBooleanDelegate.findInvertBooleanDelegate(myElement);
  LOG.assertTrue(myDelegate != null);
}
