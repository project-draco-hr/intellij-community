{
  final List<SmartPsiElementPointer> toInvert=new ArrayList<SmartPsiElementPointer>();
  final LinkedHashSet<PsiElement> elementsToInvert=new LinkedHashSet<PsiElement>();
  myDelegate.collectRefElements(myElement,myRenameProcessor,myNewName,elementsToInvert);
  for (  PsiElement element : elementsToInvert) {
    toInvert.add(mySmartPointerManager.createSmartPsiElementPointer(element));
  }
  final UsageInfo[] renameUsages=myRenameProcessor != null ? myRenameProcessor.findUsages() : UsageInfo.EMPTY_ARRAY;
  final SmartPsiElementPointer[] usagesToInvert=toInvert.toArray(new SmartPsiElementPointer[toInvert.size()]);
  Map<PsiElement,UsageInfo> expressionsToUsages=new HashMap<PsiElement,UsageInfo>();
  List<UsageInfo> result=new ArrayList<UsageInfo>();
  for (  UsageInfo renameUsage : renameUsages) {
    expressionsToUsages.put(renameUsage.getElement(),renameUsage);
    result.add(renameUsage);
  }
  for (  SmartPsiElementPointer pointer : usagesToInvert) {
    final PsiElement expression=pointer.getElement();
    if (!expressionsToUsages.containsKey(expression)) {
      final UsageInfo usageInfo=new UsageInfo(expression);
      expressionsToUsages.put(expression,usageInfo);
      result.add(usageInfo);
      myToInvert.put(usageInfo,pointer);
    }
 else {
      myToInvert.put(expressionsToUsages.get(expression),pointer);
    }
  }
  return result.toArray(new UsageInfo[result.size()]);
}
