{
  PsiClass aClass=method.getContainingClass();
  boolean hasNoBody=method.getBody() == null;
  boolean isInterface=aClass != null && aClass.isInterface();
  boolean isExtension=method.hasModifierProperty(PsiModifier.DEFAULT);
  boolean isStatic=method.hasModifierProperty(PsiModifier.STATIC);
  boolean isPrivate=method.hasModifierProperty(PsiModifier.PRIVATE);
  final List<IntentionAction> additionalFixes=new ArrayList<>();
  String description=null;
  if (hasNoBody) {
    if (isExtension) {
      description=JavaErrorMessages.message("extension.method.should.have.a.body");
      additionalFixes.add(QUICK_FIX_FACTORY.createAddMethodBodyFix(method));
    }
 else     if (isInterface && isStatic && languageLevel.isAtLeast(LanguageLevel.JDK_1_8)) {
      description="Static methods in interfaces should have a body";
    }
  }
 else   if (isInterface) {
    if (!isExtension && !isStatic && !isPrivate) {
      description=JavaErrorMessages.message("interface.methods.cannot.have.body");
      if (languageLevel.isAtLeast(LanguageLevel.JDK_1_8)) {
        additionalFixes.add(QUICK_FIX_FACTORY.createModifierListFix(method,PsiModifier.DEFAULT,true,false));
        additionalFixes.add(QUICK_FIX_FACTORY.createModifierListFix(method,PsiModifier.STATIC,true,false));
      }
    }
  }
 else   if (isExtension) {
    description=JavaErrorMessages.message("extension.method.in.class");
  }
 else   if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {
    description=JavaErrorMessages.message("abstract.methods.cannot.have.a.body");
  }
 else   if (method.hasModifierProperty(PsiModifier.NATIVE)) {
    description=JavaErrorMessages.message("native.methods.cannot.have.a.body");
  }
  if (description == null)   return null;
  TextRange textRange=HighlightNamesUtil.getMethodDeclarationTextRange(method);
  HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(textRange).descriptionAndTooltip(description).create();
  if (!hasNoBody) {
    QuickFixAction.registerQuickFixAction(info,QUICK_FIX_FACTORY.createDeleteMethodBodyFix(method));
  }
  if (method.hasModifierProperty(PsiModifier.ABSTRACT) && !isInterface) {
    QuickFixAction.registerQuickFixAction(info,QUICK_FIX_FACTORY.createModifierListFix(method,PsiModifier.ABSTRACT,false,false));
  }
  for (  IntentionAction intentionAction : additionalFixes) {
    QuickFixAction.registerQuickFixAction(info,intentionAction);
  }
  return info;
}
