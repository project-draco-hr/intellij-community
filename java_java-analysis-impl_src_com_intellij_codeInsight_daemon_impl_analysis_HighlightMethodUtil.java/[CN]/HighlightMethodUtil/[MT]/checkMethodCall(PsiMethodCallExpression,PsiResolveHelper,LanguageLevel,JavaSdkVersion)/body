{
  PsiExpressionList list=methodCall.getArgumentList();
  PsiReferenceExpression referenceToMethod=methodCall.getMethodExpression();
  JavaResolveResult[] results=referenceToMethod.multiResolve(true);
  JavaResolveResult resolveResult=results.length == 1 ? results[0] : JavaResolveResult.EMPTY;
  PsiElement resolved=resolveResult.getElement();
  boolean isDummy=isDummyConstructorCall(methodCall,resolveHelper,list,referenceToMethod);
  if (isDummy)   return null;
  HighlightInfo highlightInfo;
  final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
  if (resolved instanceof PsiMethod && resolveResult.isValidResult()) {
    TextRange fixRange=getFixRange(methodCall);
    highlightInfo=HighlightUtil.checkUnhandledExceptions(methodCall,fixRange);
    if (highlightInfo == null) {
      final String invalidCallMessage=LambdaUtil.getInvalidQualifier4StaticInterfaceMethodMessage((PsiMethod)resolved,methodCall.getMethodExpression(),resolveResult.getCurrentFileResolveScope(),languageLevel);
      if (invalidCallMessage != null) {
        highlightInfo=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).descriptionAndTooltip(invalidCallMessage).range(fixRange).create();
      }
 else {
        highlightInfo=GenericsHighlightUtil.checkInferredIntersections(substitutor,fixRange);
      }
    }
  }
 else {
    PsiMethod resolvedMethod=null;
    MethodCandidateInfo candidateInfo=null;
    if (resolveResult instanceof MethodCandidateInfo) {
      candidateInfo=(MethodCandidateInfo)resolveResult;
      resolvedMethod=candidateInfo.getElement();
    }
    if (!resolveResult.isAccessible() || !resolveResult.isStaticsScopeCorrect()) {
      highlightInfo=null;
    }
 else     if (candidateInfo != null && !candidateInfo.isApplicable()) {
      if (candidateInfo.isTypeArgumentsApplicable()) {
        String methodName=HighlightMessageUtil.getSymbolName(resolved,substitutor);
        PsiElement parent=resolved.getParent();
        String containerName=parent == null ? "" : HighlightMessageUtil.getSymbolName(parent,substitutor);
        String argTypes=buildArgTypesList(list);
        String description=JavaErrorMessages.message("wrong.method.arguments",methodName,containerName,argTypes);
        final Ref<PsiElement> elementToHighlight=new Ref<PsiElement>(list);
        String toolTip;
        if (parent instanceof PsiClass && !ApplicationManager.getApplication().isUnitTestMode()) {
          toolTip=buildOneLineMismatchDescription(list,candidateInfo,elementToHighlight);
          if (toolTip == null) {
            toolTip=createMismatchedArgumentsHtmlTooltip(candidateInfo,list);
          }
        }
 else {
          toolTip=description;
        }
        PsiElement element=elementToHighlight.get();
        int navigationShift=element instanceof PsiExpressionList ? +1 : 0;
        highlightInfo=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(element).description(description).escapedToolTip(toolTip).navigationShift(navigationShift).create();
        if (highlightInfo != null) {
          registerMethodCallIntentions(highlightInfo,methodCall,list,resolveHelper);
        }
      }
 else {
        PsiReferenceExpression methodExpression=methodCall.getMethodExpression();
        PsiReferenceParameterList typeArgumentList=methodCall.getTypeArgumentList();
        if (typeArgumentList.getTypeArguments().length == 0 && resolvedMethod.hasTypeParameters()) {
          highlightInfo=GenericsHighlightUtil.checkInferredTypeArguments(resolvedMethod,methodCall,substitutor);
        }
 else {
          highlightInfo=GenericsHighlightUtil.checkParameterizedReferenceTypeArguments(resolved,methodExpression,substitutor,javaSdkVersion);
        }
      }
    }
 else {
      String description=JavaErrorMessages.message("method.call.expected");
      highlightInfo=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(methodCall).descriptionAndTooltip(description).create();
      if (resolved instanceof PsiClass) {
        QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createInsertNewFix(methodCall,(PsiClass)resolved));
      }
 else {
        TextRange range=getFixRange(methodCall);
        QuickFixAction.registerQuickFixAction(highlightInfo,range,QUICK_FIX_FACTORY.createCreateMethodFromUsageFix(methodCall));
        QuickFixAction.registerQuickFixAction(highlightInfo,range,QUICK_FIX_FACTORY.createCreateAbstractMethodFromUsageFix(methodCall));
        QuickFixAction.registerQuickFixAction(highlightInfo,range,QUICK_FIX_FACTORY.createCreatePropertyFromUsageFix(methodCall));
      }
    }
  }
  if (highlightInfo == null) {
    highlightInfo=GenericsHighlightUtil.checkParameterizedReferenceTypeArguments(resolved,referenceToMethod,substitutor,javaSdkVersion);
  }
  return highlightInfo;
}
