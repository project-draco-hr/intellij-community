{
  if (superMethodSignatures.size() < 2)   return null;
  MethodSignatureBackedByPsiMethod returnTypeSubstitutable=superMethodSignatures.get(0);
  for (int i=1; i < superMethodSignatures.size(); i++) {
    PsiMethod currentMethod=returnTypeSubstitutable.getMethod();
    PsiType currentType=returnTypeSubstitutable.getSubstitutor().substitute(currentMethod.getReturnType());
    MethodSignatureBackedByPsiMethod otherSuperSignature=superMethodSignatures.get(i);
    PsiMethod otherSuperMethod=otherSuperSignature.getMethod();
    PsiType otherSuperReturnType=otherSuperSignature.getSubstitutor().substitute(otherSuperMethod.getReturnType());
    PsiSubstitutor unifyingSubstitutor=MethodSignatureUtil.getSuperMethodSignatureSubstitutor(returnTypeSubstitutable,otherSuperSignature);
    if (unifyingSubstitutor != null) {
      otherSuperReturnType=unifyingSubstitutor.substitute(otherSuperReturnType);
      currentType=unifyingSubstitutor.substitute(currentType);
    }
    if (otherSuperReturnType == null || currentType == null || otherSuperReturnType.equals(currentType))     continue;
    if (languageLevel.isAtLeast(LanguageLevel.JDK_1_5)) {
      if (!(otherSuperReturnType instanceof PsiPrimitiveType || currentType instanceof PsiPrimitiveType)) {
        if (otherSuperReturnType.isAssignableFrom(currentType))         continue;
        if (currentType.isAssignableFrom(otherSuperReturnType)) {
          returnTypeSubstitutable=otherSuperSignature;
          continue;
        }
      }
      if (currentMethod.getTypeParameters().length > 0 && JavaGenericsUtil.isRawToGeneric(currentType,otherSuperReturnType))       continue;
    }
    return createIncompatibleReturnTypeMessage(otherSuperMethod,currentMethod,currentType,otherSuperReturnType,JavaErrorMessages.message("unrelated.overriding.methods.return.types"),TextRange.EMPTY_RANGE);
  }
  return null;
}
