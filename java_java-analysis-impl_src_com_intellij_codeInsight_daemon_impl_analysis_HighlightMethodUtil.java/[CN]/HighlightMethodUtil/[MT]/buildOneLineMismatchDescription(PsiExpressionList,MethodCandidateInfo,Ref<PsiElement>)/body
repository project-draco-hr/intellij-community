{
  final PsiExpression[] expressions=list.getExpressions();
  final PsiMethod resolvedMethod=candidateInfo.getElement();
  final PsiSubstitutor substitutor=candidateInfo.getSubstitutor();
  final PsiParameter[] parameters=resolvedMethod.getParameterList().getParameters();
  if (expressions.length == parameters.length && parameters.length > 1) {
    int idx=-1;
    for (int i=0; i < expressions.length; i++) {
      PsiExpression expression=expressions[i];
      if (!TypeConversionUtil.areTypesAssignmentCompatible(substitutor.substitute(parameters[i].getType()),expression)) {
        if (idx != -1) {
          idx=-1;
          break;
        }
 else {
          idx=i;
        }
      }
    }
    if (idx > -1) {
      final PsiExpression wrongArg=expressions[idx];
      final PsiType argType=wrongArg.getType();
      if (argType != null) {
        elementToHighlight.set(wrongArg);
        final String message=JavaErrorMessages.message("incompatible.call.types",idx + 1,substitutor.substitute(parameters[idx].getType()).getCanonicalText(),argType.getCanonicalText());
        return XmlStringUtil.wrapInHtml("<body>" + message + " <a href=\"#assignment/"+ XmlStringUtil.escapeString(createMismatchedArgumentsHtmlTooltip(candidateInfo,list))+ "\""+ (UIUtil.isUnderDarcula() ? " color=\"7AB4C9\" " : "")+ ">"+ DaemonBundle.message("inspection.extended.description")+ "</a></body>");
      }
    }
  }
  return null;
}
