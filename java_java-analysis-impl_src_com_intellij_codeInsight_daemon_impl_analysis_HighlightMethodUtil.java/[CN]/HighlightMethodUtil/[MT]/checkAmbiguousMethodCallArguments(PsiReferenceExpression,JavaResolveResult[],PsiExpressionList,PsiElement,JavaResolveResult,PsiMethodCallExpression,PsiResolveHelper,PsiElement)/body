{
  MethodCandidateInfo methodCandidate1=null;
  MethodCandidateInfo methodCandidate2=null;
  for (  JavaResolveResult result : resolveResults) {
    if (!(result instanceof MethodCandidateInfo))     continue;
    MethodCandidateInfo candidate=(MethodCandidateInfo)result;
    if (candidate.isApplicable() && !candidate.getElement().isConstructor()) {
      if (methodCandidate1 == null) {
        methodCandidate1=candidate;
      }
 else {
        methodCandidate2=candidate;
        break;
      }
    }
  }
  MethodCandidateInfo[] candidates=toMethodCandidates(resolveResults);
  String description;
  String toolTip;
  HighlightInfoType highlightInfoType=HighlightInfoType.ERROR;
  if (methodCandidate2 != null) {
    PsiMethod element1=methodCandidate1.getElement();
    String m1=PsiFormatUtil.formatMethod(element1,methodCandidate1.getSubstitutor(false),PsiFormatUtilBase.SHOW_CONTAINING_CLASS | PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_PARAMETERS,PsiFormatUtilBase.SHOW_TYPE);
    PsiMethod element2=methodCandidate2.getElement();
    String m2=PsiFormatUtil.formatMethod(element2,methodCandidate2.getSubstitutor(false),PsiFormatUtilBase.SHOW_CONTAINING_CLASS | PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_PARAMETERS,PsiFormatUtilBase.SHOW_TYPE);
    VirtualFile virtualFile1=PsiUtilCore.getVirtualFile(element1);
    VirtualFile virtualFile2=PsiUtilCore.getVirtualFile(element2);
    if (!Comparing.equal(virtualFile1,virtualFile2)) {
      if (virtualFile1 != null)       m1+=" (In " + virtualFile1.getPresentableUrl() + ")";
      if (virtualFile2 != null)       m2+=" (In " + virtualFile2.getPresentableUrl() + ")";
    }
    description=JavaErrorMessages.message("ambiguous.method.call",m1,m2);
    toolTip=createAmbiguousMethodHtmlTooltip(new MethodCandidateInfo[]{methodCandidate1,methodCandidate2});
  }
 else {
    if (element != null && !resolveResult.isAccessible()) {
      return null;
    }
    if (element != null && !resolveResult.isStaticsScopeCorrect()) {
      return null;
    }
    String methodName=referenceToMethod.getReferenceName() + buildArgTypesList(list);
    description=JavaErrorMessages.message("cannot.resolve.method",methodName);
    if (candidates.length == 0) {
      return null;
    }
    toolTip=XmlStringUtil.escapeString(description);
  }
  HighlightInfo info=HighlightInfo.newHighlightInfo(highlightInfoType).range(elementToHighlight).description(description).escapedToolTip(toolTip).create();
  if (methodCandidate2 == null) {
    registerMethodCallIntentions(info,methodCall,list,resolveHelper);
  }
  if (!resolveResult.isAccessible() && resolveResult.isStaticsScopeCorrect() && methodCandidate2 != null) {
    HighlightUtil.registerAccessQuickFixAction((PsiMember)element,referenceToMethod,info,resolveResult.getCurrentFileResolveScope());
  }
  if (element != null && !resolveResult.isStaticsScopeCorrect()) {
    HighlightUtil.registerStaticProblemQuickFixAction(element,info,referenceToMethod);
  }
  TextRange fixRange=getFixRange(elementToHighlight);
  CastMethodArgumentFix.REGISTRAR.registerCastActions(candidates,methodCall,info,fixRange);
  WrapArrayToArraysAsListFix.REGISTAR.registerCastActions(candidates,methodCall,info,fixRange);
  WrapLongWithMathToIntExactFix.REGISTAR.registerCastActions(candidates,methodCall,info,fixRange);
  WrapObjectWithOptionalOfNullableFix.REGISTAR.registerCastActions(candidates,methodCall,info,fixRange);
  PermuteArgumentsFix.registerFix(info,methodCall,candidates,fixRange);
  WrapExpressionFix.registerWrapAction(candidates,list.getExpressions(),info);
  registerChangeParameterClassFix(methodCall,list,info);
  return info;
}
