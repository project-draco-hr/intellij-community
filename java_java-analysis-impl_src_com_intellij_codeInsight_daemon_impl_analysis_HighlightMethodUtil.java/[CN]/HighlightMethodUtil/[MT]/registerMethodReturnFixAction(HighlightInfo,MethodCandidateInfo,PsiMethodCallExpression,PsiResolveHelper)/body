{
  if (methodCall.getParent() instanceof PsiReturnStatement) {
    final PsiMethod containerMethod=PsiTreeUtil.getParentOfType(methodCall,PsiMethod.class,true,PsiLambdaExpression.class);
    if (containerMethod != null) {
      final PsiMethod method=candidate.getElement();
      final List<PsiType> list=ContainerUtil.map(method.getParameterList().getParameters(),new Function<PsiParameter,PsiType>(){
        @Override public PsiType fun(        PsiParameter parameter){
          return parameter.getType();
        }
      }
);
      PsiType[] leftTypes=list.toArray(new PsiType[list.size()]);
      final PsiSubstitutor substitutor=resolveHelper.inferTypeArguments(method.getTypeParameters(),leftTypes,methodCall.getArgumentList().getExpressionTypes(),PsiUtil.getLanguageLevel(methodCall));
      PsiType methodCallTypeByArgs=substitutor.substitute(methodCall.getType());
      methodCallTypeByArgs=JavaPsiFacade.getElementFactory(method.getProject()).createRawSubstitutor(method).substitute(methodCallTypeByArgs);
      QuickFixAction.registerQuickFixAction(highlightInfo,getFixRange(methodCall),QUICK_FIX_FACTORY.createMethodReturnFix(containerMethod,methodCallTypeByArgs,true));
    }
  }
}
