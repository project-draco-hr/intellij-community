{
  MethodCandidateInfo methodCandidate1=null;
  MethodCandidateInfo methodCandidate2=null;
  for (  JavaResolveResult result : resolveResults) {
    if (!(result instanceof MethodCandidateInfo))     continue;
    MethodCandidateInfo candidate=(MethodCandidateInfo)result;
    if (candidate.isApplicable() && !candidate.getElement().isConstructor()) {
      if (methodCandidate1 == null) {
        methodCandidate1=candidate;
      }
 else {
        methodCandidate2=candidate;
        break;
      }
    }
  }
  MethodCandidateInfo[] candidates=toMethodCandidates(resolveResults);
  HighlightInfoType highlightInfoType=HighlightInfoType.ERROR;
  if (methodCandidate2 != null) {
    return null;
  }
  String description;
  PsiElement elementToHighlight;
  if (element != null && !resolveResult.isAccessible()) {
    description=HighlightUtil.buildProblemWithAccessDescription(referenceToMethod,resolveResult);
    elementToHighlight=referenceToMethod.getReferenceNameElement();
  }
 else   if (element != null && !resolveResult.isStaticsScopeCorrect()) {
    final LanguageLevel languageLevel=PsiUtil.getLanguageLevel(referenceToMethod);
    final String staticInterfaceMethodMessage=element instanceof PsiMethod ? LambdaUtil.getInvalidQualifier4StaticInterfaceMethodMessage((PsiMethod)element,referenceToMethod,resolveResult.getCurrentFileResolveScope(),languageLevel) : null;
    description=staticInterfaceMethodMessage != null ? staticInterfaceMethodMessage : HighlightUtil.buildProblemWithStaticDescription(element);
    elementToHighlight=referenceToMethod.getReferenceNameElement();
  }
 else {
    String methodName=referenceToMethod.getReferenceName() + buildArgTypesList(list);
    description=JavaErrorMessages.message("cannot.resolve.method",methodName);
    if (candidates.length == 0) {
      elementToHighlight=referenceToMethod.getReferenceNameElement();
      highlightInfoType=HighlightInfoType.WRONG_REF;
    }
 else {
      return null;
    }
  }
  String toolTip=XmlStringUtil.escapeString(description);
  HighlightInfo info=HighlightInfo.newHighlightInfo(highlightInfoType).range(elementToHighlight).description(description).escapedToolTip(toolTip).create();
  registerMethodCallIntentions(info,methodCall,list,resolveHelper);
  if (element != null && !resolveResult.isStaticsScopeCorrect()) {
    HighlightUtil.registerStaticProblemQuickFixAction(element,info,referenceToMethod);
  }
  TextRange fixRange=getFixRange(elementToHighlight);
  CastMethodArgumentFix.REGISTRAR.registerCastActions(candidates,methodCall,info,fixRange);
  WrapArrayToArraysAsListFix.REGISTAR.registerCastActions(candidates,methodCall,info,fixRange);
  WrapLongWithMathToIntExactFix.REGISTAR.registerCastActions(candidates,methodCall,info,fixRange);
  PermuteArgumentsFix.registerFix(info,methodCall,candidates,fixRange);
  WrapExpressionFix.registerWrapAction(candidates,list.getExpressions(),info);
  registerChangeParameterClassFix(methodCall,list,info);
  return info;
}
