{
  if (myExpression != null) {
    return new PsiExpression[]{myExpression};
  }
  if (myOutputVariable != null) {
    final PsiElement scope=myOutputVariable instanceof PsiLocalVariable ? RefactoringUtil.getVariableScope((PsiLocalVariable)myOutputVariable) : PsiTreeUtil.findCommonParent(myElements);
    return CodeInsightUtil.findReferenceExpressions(scope,myOutputVariable);
  }
  final List<PsiStatement> filter=ContainerUtil.filter(myExitStatements,new Condition<PsiStatement>(){
    @Override public boolean value(    PsiStatement statement){
      return statement instanceof PsiReturnStatement && ((PsiReturnStatement)statement).getReturnValue() != null;
    }
  }
);
  final List<PsiExpression> map=ContainerUtil.map(filter,new Function<PsiStatement,PsiExpression>(){
    @Override public PsiExpression fun(    PsiStatement statement){
      return ((PsiReturnStatement)statement).getReturnValue();
    }
  }
);
  return map.toArray(new PsiExpression[map.size()]);
}
