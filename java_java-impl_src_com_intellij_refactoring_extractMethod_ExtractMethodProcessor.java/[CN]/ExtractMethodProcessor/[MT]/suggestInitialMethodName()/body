{
  if (StringUtil.isEmpty(myInitialMethodName)) {
    final Set<String> initialMethodNames=new LinkedHashSet<String>();
    final JavaCodeStyleManagerImpl codeStyleManager=(JavaCodeStyleManagerImpl)JavaCodeStyleManager.getInstance(myProject);
    if (myExpression != null || !(myReturnType instanceof PsiPrimitiveType)) {
      final String[] names=codeStyleManager.suggestVariableName(VariableKind.FIELD,null,myExpression,myReturnType).names;
      for (      String name : names) {
        initialMethodNames.add(codeStyleManager.variableNameToPropertyName(name,VariableKind.FIELD));
      }
    }
    if (myOutputVariable != null) {
      final VariableKind outKind=codeStyleManager.getVariableKind(myOutputVariable);
      final SuggestedNameInfo nameInfo=codeStyleManager.suggestVariableName(VariableKind.FIELD,codeStyleManager.variableNameToPropertyName(myOutputVariable.getName(),outKind),null,myOutputVariable.getType());
      for (      String name : nameInfo.names) {
        initialMethodNames.add(codeStyleManager.variableNameToPropertyName(name,VariableKind.FIELD));
      }
    }
    final String nameByComment=getNameByComment();
    final List<String> getters=new ArrayList<String>(ContainerUtil.map(initialMethodNames,new Function<String,String>(){
      @Override public String fun(      String propertyName){
        return GenerateMembersUtil.suggestGetterName(propertyName,myReturnType,myProject);
      }
    }
));
    ContainerUtil.addIfNotNull(nameByComment,getters);
    return ArrayUtil.toStringArray(getters);
  }
  return new String[]{myInitialMethodName};
}
