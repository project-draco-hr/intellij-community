{
  final VirtualFileFilter pythonFacetFilter=new VirtualFileFilter(){
    public boolean accept(    VirtualFile virtualFile){
      return virtualFile.getFileType() instanceof PythonFileType;
    }
  }
;
  final Condition<PsiFile> condition=new Condition<PsiFile>(){
    public boolean value(    PsiFile psiFile){
      final VirtualFile vFile=psiFile.getVirtualFile();
      if (vFile == null) {
        return false;
      }
      final Module module=ModuleUtil.findModuleForFile(vFile,psiFile.getProject());
      return !(module.getModuleType() instanceof PythonModuleType) && vFile.getFileType() instanceof PythonFileType;
    }
  }
;
  detectorRegistry.registerOnTheFlyDetector(PythonFileType.INSTANCE,pythonFacetFilter,condition,new FacetDetector<PsiFile,PythonFacetConfiguration>("python-detector-psi"){
    public PythonFacetConfiguration detectFacet(    PsiFile source,    Collection<PythonFacetConfiguration> existentFacetConfigurations){
      return existentFacetConfigurations.isEmpty() ? createDefaultConfiguration() : existentFacetConfigurations.iterator().next();
    }
  }
);
  detectorRegistry.registerDetectorForWizard(PythonFileType.INSTANCE,pythonFacetFilter,new FacetDetector<VirtualFile,PythonFacetConfiguration>("python-detector"){
    public PythonFacetConfiguration detectFacet(    VirtualFile source,    Collection<PythonFacetConfiguration> existentFacetConfigurations){
      return existentFacetConfigurations.isEmpty() ? createDefaultConfiguration() : existentFacetConfigurations.iterator().next();
    }
  }
);
}
