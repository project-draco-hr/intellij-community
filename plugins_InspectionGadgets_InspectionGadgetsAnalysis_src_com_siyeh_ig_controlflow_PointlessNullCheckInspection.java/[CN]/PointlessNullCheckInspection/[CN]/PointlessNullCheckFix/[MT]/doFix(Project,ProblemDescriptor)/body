{
  final PsiElement element=descriptor.getPsiElement();
  final PsiPolyadicExpression polyadicExpression=PsiTreeUtil.getParentOfType(element,PsiPolyadicExpression.class);
  if (polyadicExpression == null) {
    return;
  }
  final StringBuilder replacement=new StringBuilder();
  PsiElement anchor=polyadicExpression.getFirstChild();
  if (!(anchor instanceof PsiExpression)) {
    return;
  }
  PsiExpression expression=(PsiExpression)anchor;
  boolean hasText=false;
  while (expression != null) {
    if (PsiTreeUtil.isAncestor(expression,element,false)) {
      while (anchor != expression) {
        if (hasText && anchor instanceof PsiComment) {
          replacement.append(anchor.getText());
        }
        anchor=anchor.getNextSibling();
      }
      anchor=expression.getNextSibling();
    }
 else {
      while (anchor != expression) {
        if (hasText) {
          replacement.append(anchor.getText());
        }
        anchor=anchor.getNextSibling();
      }
      replacement.append(expression.getText());
      hasText=true;
      anchor=expression.getNextSibling();
    }
    expression=PsiTreeUtil.getNextSiblingOfType(anchor,PsiExpression.class);
  }
  PsiReplacementUtil.replaceExpression(polyadicExpression,replacement.toString());
}
