{
  super.visitPolyadicExpression(expression);
  final IElementType operationTokenType=expression.getOperationTokenType();
  if (operationTokenType.equals(JavaTokenType.ANDAND)) {
    final PsiExpression[] operands=expression.getOperands();
    for (int i=0; i < operands.length - 1; i++) {
      for (int j=i + 1; j < operands.length; j++) {
        if (checkAndedExpressions(operands,i,j)) {
          return;
        }
      }
    }
  }
 else   if (operationTokenType.equals(JavaTokenType.OROR)) {
    final PsiExpression[] operands=expression.getOperands();
    for (int i=0; i < operands.length - 1; i++) {
      for (int j=i + 1; j < operands.length; j++) {
        if (checkOrredExpressions(operands,i,j)) {
          return;
        }
      }
    }
  }
}
