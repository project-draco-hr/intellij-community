{
  final Attributes attributes=manifest.getMainAttributes();
  attributes.put(Attributes.Name.MANIFEST_VERSION,"1.0");
  final Ref<IOException> ex=new Ref<IOException>();
  final String classPathAttribute=StringUtil.join(pathList,new Function<String,String>(){
    @Override public String fun(    String path){
      final File classpathElement=new File(path);
      try {
        return (notEscape ? classpathElement.toURL() : classpathElement.toURI().toURL()).toString();
      }
 catch (      IOException e) {
        ex.set(e);
        return null;
      }
    }
  }
," ");
  final IOException thrownException=ex.get();
  if (thrownException != null) {
    throw thrownException;
  }
  attributes.put(Attributes.Name.CLASS_PATH,classPathAttribute);
  File jarFile=FileUtil.createTempFile("classpath",".jar",true);
  ZipOutputStream jarPlugin=null;
  try {
    BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(jarFile));
    jarPlugin=new JarOutputStream(out,manifest);
  }
  finally {
    if (jarPlugin != null)     jarPlugin.close();
  }
  return jarFile;
}
