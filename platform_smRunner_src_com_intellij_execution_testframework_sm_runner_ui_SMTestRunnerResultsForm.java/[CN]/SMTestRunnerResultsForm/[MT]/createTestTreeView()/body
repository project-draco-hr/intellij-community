{
  myTreeView=new SMTRunnerTestTreeView();
  myTreeView.setLargeModel(true);
  myTreeView.attachToModel(this);
  myTreeView.setTestResultsViewer(this);
  final SMTRunnerTreeStructure structure=new SMTRunnerTreeStructure(myProject,myTestsRootNode);
  myTreeBuilder=new SMTRunnerTreeBuilder(myTreeView,structure);
  myTreeBuilder.setTestsComparator(TestConsoleProperties.SORT_ALPHABETICALLY.value(myProperties));
  Disposer.register(this,myTreeBuilder);
  myAnimator=new TestsProgressAnimator(myTreeBuilder);
  TrackRunningTestUtil.installStopListeners(myTreeView,myProperties,new Pass<AbstractTestProxy>(){
    @Override public void pass(    AbstractTestProxy testProxy){
      if (testProxy == null)       return;
      final AbstractTestProxy selectedProxy=testProxy;
      while (!testProxy.isLeaf()) {
        final List<? extends AbstractTestProxy> children=testProxy.getChildren();
        if (!children.isEmpty()) {
          final AbstractTestProxy firstChild=children.get(0);
          if (firstChild != null) {
            testProxy=firstChild;
            continue;
          }
        }
        break;
      }
      myLastSelected=testProxy;
      if (ScrollToTestSourceAction.isScrollEnabled(SMTestRunnerResultsForm.this)) {
        final Navigatable descriptor=TestsUIUtil.getOpenFileDescriptor(selectedProxy,SMTestRunnerResultsForm.this);
        if (descriptor != null) {
          OpenSourceUtil.navigate(false,descriptor);
        }
      }
    }
  }
);
  return myTreeView;
}
