{
  myTreeView=new SMTRunnerTestTreeView();
  myTreeView.setLargeModel(true);
  myTreeView.attachToModel(this);
  myTreeView.setTestResultsViewer(this);
  addTestsTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      AbstractTestProxy selectedTest=getTreeView().getSelectedTest();
      if (selectedTest instanceof SMTestProxy) {
        myStatisticsPane.selectProxy(((SMTestProxy)selectedTest),this,false);
      }
    }
  }
);
  final SMTRunnerTreeStructure structure=new SMTRunnerTreeStructure(myProject,myTestsRootNode){
    @Override public Object[] getChildElements(    Object element){
      final Object[] children=super.getChildElements(element);
      if (element == myTestsRootNode && children.length > 0 && myProperties.hideTreeRootIfNotEmpty()) {
        myTreeView.setRootVisible(false);
      }
      return children;
    }
  }
;
  myTreeBuilder=new SMTRunnerTreeBuilder(myTreeView,structure);
  myTreeBuilder.setTestsComparator(TestConsoleProperties.SORT_ALPHABETICALLY.value(myProperties));
  Disposer.register(this,myTreeBuilder);
  myAnimator=new TestsProgressAnimator(myTreeBuilder);
  return myTreeView;
}
