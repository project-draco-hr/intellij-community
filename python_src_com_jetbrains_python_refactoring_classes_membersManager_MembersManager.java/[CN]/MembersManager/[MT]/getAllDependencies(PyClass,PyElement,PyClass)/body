{
  final PyMemberInfo<PyElement> memberInfo=findMember(classWhereMemberDeclared,member);
  final Collection<? extends PyElement> elementsToCheckDependency=memberInfo.getMembersManager().getElementsToStoreReferences(Collections.singleton(member));
  final MultiMap<PyClass,PyElement> dependencies=new MultiMap<PyClass,PyElement>();
  final Collection<PyElement> result=new HashSet<PyElement>();
  for (  final MembersManager<? extends PyElement> manager : MANAGERS) {
    for (    final PyElement elementToCheckDependency : elementsToCheckDependency) {
      dependencies.putAllValues(manager.getDependencies(elementToCheckDependency));
    }
  }
  if (destinationClass != null) {
    final Iterator<PyClass> classesIterator=dependencies.keySet().iterator();
    while (classesIterator.hasNext()) {
      final PyClass memberClass=classesIterator.next();
      if (memberClass.equals(destinationClass) || ArrayUtil.contains(memberClass,destinationClass.getSuperClasses(null))) {
        classesIterator.remove();
      }
    }
  }
  for (  final MembersManager<? extends PyElement> manager : MANAGERS) {
    result.addAll(manager.getDependencies(dependencies));
  }
  result.addAll(dependencies.values());
  return result;
}
