{
  this.g2=g2;
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  for (  final PrintElement printElement : printElements) {
    LitePrinter printer=null;
    if (printElement instanceof EdgePrintElement) {
      printer=new LitePrinter(){
        @Override public void print(        Color color){
          EdgePrintElement edgePrintElement=(EdgePrintElement)printElement;
          int from=edgePrintElement.getPositionInCurrentRow();
          int to=edgePrintElement.getPositionInOtherRow();
          if (edgePrintElement.getType() == EdgePrintElement.Type.DOWN) {
            paintDownLine(from,to,color,edgePrintElement.hasArrow());
          }
 else {
            paintUpLine(from,to,color,edgePrintElement.hasArrow());
          }
        }
      }
;
    }
    if (printElement instanceof NodePrintElement) {
      int position=printElement.getPositionInCurrentRow();
      if (printElement.isSelected()) {
        paintCircle(position,MARK_COLOR,true);
        paintCircle(position,getColor(printElement),false);
      }
 else {
        paintCircle(position,getColor(printElement),false);
      }
    }
    if (printer != null)     drawLogic(printElement.isSelected(),isUsual(printElement),getColor(printElement),printer);
  }
}
