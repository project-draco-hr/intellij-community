{
  int size=in.readUnsignedShort();
  int[] pass=new int[size];
  pool.add(null);
  for (int i=1; i < size; i++) {
    byte tag=(byte)in.readUnsignedByte();
switch (tag) {
case CodeConstants.CONSTANT_Utf8:
      pool.add(new PrimitiveConstant(CodeConstants.CONSTANT_Utf8,in.readUTF()));
    break;
case CodeConstants.CONSTANT_Integer:
  pool.add(new PrimitiveConstant(CodeConstants.CONSTANT_Integer,new Integer(in.readInt())));
break;
case CodeConstants.CONSTANT_Float:
pool.add(new PrimitiveConstant(CodeConstants.CONSTANT_Float,new Float(in.readFloat())));
break;
case CodeConstants.CONSTANT_Long:
pool.add(new PrimitiveConstant(CodeConstants.CONSTANT_Long,new Long(in.readLong())));
pool.add(null);
i++;
break;
case CodeConstants.CONSTANT_Double:
pool.add(new PrimitiveConstant(CodeConstants.CONSTANT_Double,new Double(in.readDouble())));
pool.add(null);
i++;
break;
case CodeConstants.CONSTANT_Class:
case CodeConstants.CONSTANT_String:
case CodeConstants.CONSTANT_MethodType:
pool.add(new PrimitiveConstant(tag,in.readUnsignedShort()));
pass[i]=1;
break;
case CodeConstants.CONSTANT_Fieldref:
case CodeConstants.CONSTANT_Methodref:
case CodeConstants.CONSTANT_InterfaceMethodref:
case CodeConstants.CONSTANT_NameAndType:
pool.add(new LinkConstant(tag,in.readUnsignedShort(),in.readUnsignedShort()));
if (tag == CodeConstants.CONSTANT_NameAndType) {
pass[i]=1;
}
 else {
pass[i]=2;
}
break;
case CodeConstants.CONSTANT_MethodHandle:
pool.add(new LinkConstant(tag,in.readUnsignedByte(),in.readUnsignedShort()));
pass[i]=3;
break;
case CodeConstants.CONSTANT_InvokeDynamic:
pool.add(new LinkConstant(tag,in.readUnsignedShort(),in.readUnsignedShort()));
pass[i]=2;
}
}
for (int pass_index=1; pass_index <= 3; pass_index++) {
for (int i=1; i < size; i++) {
if (pass[i] == pass_index) {
pool.get(i).resolveConstant(this);
}
}
}
interceptor=DecompilerContext.getPoolInterceptor();
}
