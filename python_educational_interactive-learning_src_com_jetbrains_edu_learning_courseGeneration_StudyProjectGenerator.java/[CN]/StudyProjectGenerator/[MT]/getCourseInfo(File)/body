{
  if (courseFile.isDirectory()) {
    File[] courseFiles=courseFile.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.equals(EduNames.COURSE_META_FILE);
      }
    }
);
    if (courseFiles.length != 1) {
      LOG.info("More than one or without course files");
      return null;
    }
    courseFile=courseFiles[0];
  }
  CourseInfo courseInfo=null;
  BufferedReader reader=null;
  try {
    if (courseFile.getName().equals(EduNames.COURSE_META_FILE)) {
      reader=new BufferedReader(new InputStreamReader(new FileInputStream(courseFile),"UTF-8"));
      JsonReader r=new JsonReader(reader);
      JsonParser parser=new JsonParser();
      JsonElement el=parser.parse(r);
      String courseName=el.getAsJsonObject().get(COURSE_NAME_ATTRIBUTE).getAsString();
      String courseDescription=el.getAsJsonObject().get(COURSE_DESCRIPTION).getAsString();
      JsonArray courseAuthors=el.getAsJsonObject().get(AUTHOR_ATTRIBUTE).getAsJsonArray();
      courseInfo=new CourseInfo();
      courseInfo.setName(courseName);
      courseInfo.setDescription(courseDescription);
      final ArrayList<CourseInfo.Author> authors=new ArrayList<CourseInfo.Author>();
      for (      JsonElement author : courseAuthors) {
        final JsonObject authorAsJsonObject=author.getAsJsonObject();
        authors.add(new CourseInfo.Author(authorAsJsonObject.get("first_name").getAsString(),authorAsJsonObject.get("last_name").getAsString()));
      }
      courseInfo.setAuthors(authors);
    }
  }
 catch (  Exception e) {
  }
 finally {
    StudyUtils.closeSilently(reader);
  }
  return courseInfo;
}
