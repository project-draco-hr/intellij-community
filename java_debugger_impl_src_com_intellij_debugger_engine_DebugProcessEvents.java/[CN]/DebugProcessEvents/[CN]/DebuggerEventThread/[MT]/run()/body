{
  try {
    EventQueue eventQueue=myVmProxy.eventQueue();
    while (!isStopped()) {
      try {
        final EventSet eventSet=eventQueue.remove();
        getManagerThread().invokeAndWait(new DebuggerCommandImpl(){
          @Override public Priority getPriority(){
            return Priority.HIGH;
          }
          @Override protected void action() throws Exception {
            int processed=0;
            for (            Event event : eventSet) {
              if (myReturnValueWatcher != null && myReturnValueWatcher.isEnabled()) {
                if (myReturnValueWatcher.processEvent(event)) {
                  processed++;
                  continue;
                }
              }
              if (event instanceof ThreadStartEvent) {
                processed++;
                ThreadReference thread=((ThreadStartEvent)event).thread();
                getVirtualMachineProxy().threadStarted(thread);
                myDebugProcessDispatcher.getMulticaster().threadStarted(DebugProcessEvents.this,thread);
              }
 else               if (event instanceof ThreadDeathEvent) {
                processed++;
                ThreadReference thread=((ThreadDeathEvent)event).thread();
                getVirtualMachineProxy().threadStopped(thread);
                myDebugProcessDispatcher.getMulticaster().threadStopped(DebugProcessEvents.this,thread);
              }
            }
            if (processed == eventSet.size()) {
              eventSet.resume();
              return;
            }
            LocatableEvent locatableEvent=getLocatableEvent(eventSet);
            if (eventSet.suspendPolicy() == EventRequest.SUSPEND_ALL) {
              for (              SuspendContextImpl context : getSuspendManager().getEventContexts()) {
                if (context.getSuspendPolicy() == EventRequest.SUSPEND_ALL) {
                  if (isResumeOnlyCurrentThread() && locatableEvent != null) {
                    getSuspendManager().resume(context);
                    continue;
                  }
                  if (!DebuggerSession.enableBreakpointsDuringEvaluation()) {
                    eventSet.resume();
                    return;
                  }
                }
              }
            }
            SuspendContextImpl suspendContext=null;
            if (isResumeOnlyCurrentThread() && locatableEvent != null) {
              for (              SuspendContextImpl context : getSuspendManager().getEventContexts()) {
                ThreadReferenceProxyImpl threadProxy=getVirtualMachineProxy().getThreadReferenceProxy(locatableEvent.thread());
                if (context.getSuspendPolicy() == EventRequest.SUSPEND_ALL && context.isExplicitlyResumed(threadProxy)) {
                  context.myResumedThreads.remove(threadProxy);
                  suspendContext=context;
                  suspendContext.myVotesToVote=eventSet.size();
                  break;
                }
              }
            }
            if (suspendContext == null) {
              suspendContext=getSuspendManager().pushSuspendContext(eventSet);
            }
            for (            Event event : eventSet) {
              try {
                if (event instanceof VMStartEvent) {
                  processVMStartEvent(suspendContext,(VMStartEvent)event);
                }
 else                 if (event instanceof VMDeathEvent || event instanceof VMDisconnectEvent) {
                  processVMDeathEvent(suspendContext,event);
                }
 else                 if (event instanceof ClassPrepareEvent) {
                  processClassPrepareEvent(suspendContext,(ClassPrepareEvent)event);
                }
 else                 if (event instanceof StepEvent) {
                  processStepEvent(suspendContext,(StepEvent)event);
                }
 else                 if (event instanceof LocatableEvent) {
                  processLocatableEvent(suspendContext,(LocatableEvent)event);
                }
 else                 if (event instanceof ClassUnloadEvent) {
                  processDefaultEvent(suspendContext);
                }
              }
 catch (              VMDisconnectedException e) {
                LOG.debug(e);
              }
catch (              InternalException e) {
                LOG.info(e);
              }
catch (              Throwable e) {
                LOG.error(e);
              }
            }
          }
        }
);
      }
 catch (      InternalException e) {
        LOG.debug(e);
      }
catch (      InterruptedException e) {
        throw e;
      }
catch (      VMDisconnectedException e) {
        throw e;
      }
catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      Throwable e) {
        LOG.debug(e);
      }
    }
  }
 catch (  InterruptedException e) {
    invokeVMDeathEvent();
  }
catch (  VMDisconnectedException e) {
    invokeVMDeathEvent();
  }
 finally {
    Thread.interrupted();
  }
}
