{
  try {
    EventQueue eventQueue=myVmProxy.eventQueue();
    while (!isStopped()) {
      try {
        final EventSet eventSet=eventQueue.remove();
        final boolean methodWatcherActive=myReturnValueWatcher != null && myReturnValueWatcher.isEnabled();
        int processed=0;
        for (EventIterator eventIterator=eventSet.eventIterator(); eventIterator.hasNext(); ) {
          final Event event=eventIterator.nextEvent();
          if (methodWatcherActive) {
            if (event instanceof MethodExitEvent) {
              if (myReturnValueWatcher.processMethodExitEvent((MethodExitEvent)event)) {
                processed++;
              }
              continue;
            }
          }
          if (event instanceof ThreadStartEvent) {
            processed++;
            final ThreadReference thread=((ThreadStartEvent)event).thread();
            getManagerThread().schedule(new DebuggerCommandImpl(){
              @Override protected void action() throws Exception {
                getVirtualMachineProxy().threadStarted(thread);
                myDebugProcessDispatcher.getMulticaster().threadStarted(DebugProcessEvents.this,thread);
              }
            }
);
          }
 else           if (event instanceof ThreadDeathEvent) {
            processed++;
            final ThreadReference thread=((ThreadDeathEvent)event).thread();
            getManagerThread().schedule(new DebuggerCommandImpl(){
              @Override protected void action() throws Exception {
                getVirtualMachineProxy().threadStopped(thread);
                myDebugProcessDispatcher.getMulticaster().threadStopped(DebugProcessEvents.this,thread);
              }
            }
);
          }
        }
        if (processed == eventSet.size()) {
          eventSet.resume();
          continue;
        }
        getManagerThread().invokeAndWait(new DebuggerCommandImpl(){
          @Override protected void action() throws Exception {
            if (eventSet.suspendPolicy() == EventRequest.SUSPEND_ALL) {
              for (              SuspendContextImpl context : getSuspendManager().getEventContexts()) {
                if (context.getSuspendPolicy() == EventRequest.SUSPEND_ALL) {
                  if (Registry.is("debugger.step.resumes.one.thread") && getStepEvent(eventSet) != null) {
                    getSuspendManager().resume(context);
                    continue;
                  }
                  if (!DebuggerSession.enableBreakpointsDuringEvaluation()) {
                    eventSet.resume();
                    return;
                  }
                }
              }
            }
            SuspendContextImpl suspendContext=null;
            StepEvent stepEvent=getStepEvent(eventSet);
            if (Registry.is("debugger.step.resumes.one.thread") && stepEvent != null) {
              for (              SuspendContextImpl context : getSuspendManager().getEventContexts()) {
                ThreadReferenceProxyImpl threadProxy=getVirtualMachineProxy().getThreadReferenceProxy(stepEvent.thread());
                if (context.getSuspendPolicy() == EventRequest.SUSPEND_ALL && context.isExplicitlyResumed(threadProxy)) {
                  context.myResumedThreads.remove(threadProxy);
                  suspendContext=context;
                  suspendContext.myVotesToVote=eventSet.size();
                  break;
                }
              }
            }
            if (suspendContext == null) {
              suspendContext=getSuspendManager().pushSuspendContext(eventSet);
            }
            for (EventIterator eventIterator=eventSet.eventIterator(); eventIterator.hasNext(); ) {
              final Event event=eventIterator.nextEvent();
              try {
                if (event instanceof VMStartEvent) {
                  processVMStartEvent(suspendContext,(VMStartEvent)event);
                }
 else                 if (event instanceof VMDeathEvent || event instanceof VMDisconnectEvent) {
                  processVMDeathEvent(suspendContext,event);
                }
 else                 if (event instanceof ClassPrepareEvent) {
                  processClassPrepareEvent(suspendContext,(ClassPrepareEvent)event);
                }
 else                 if (event instanceof StepEvent) {
                  processStepEvent(suspendContext,(StepEvent)event);
                }
 else                 if (event instanceof LocatableEvent) {
                  processLocatableEvent(suspendContext,(LocatableEvent)event);
                }
 else                 if (event instanceof ClassUnloadEvent) {
                  processDefaultEvent(suspendContext);
                }
              }
 catch (              VMDisconnectedException e) {
                LOG.debug(e);
              }
catch (              InternalException e) {
                LOG.info(e);
              }
catch (              Throwable e) {
                LOG.error(e);
              }
            }
          }
        }
);
      }
 catch (      InternalException e) {
        LOG.debug(e);
      }
catch (      InterruptedException e) {
        throw e;
      }
catch (      VMDisconnectedException e) {
        throw e;
      }
catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      Throwable e) {
        LOG.debug(e);
      }
    }
  }
 catch (  InterruptedException e) {
    invokeVMDeathEvent();
  }
catch (  VMDisconnectedException e) {
    invokeVMDeathEvent();
  }
 finally {
    Thread.interrupted();
  }
}
