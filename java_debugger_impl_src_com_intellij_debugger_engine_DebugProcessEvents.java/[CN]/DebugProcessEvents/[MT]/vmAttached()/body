{
  DebuggerManagerThreadImpl.assertIsManagerThread();
  LOG.assertTrue(!isAttached());
  if (myState.compareAndSet(STATE_INITIAL,STATE_ATTACHED)) {
    final VirtualMachineProxyImpl machineProxy=getVirtualMachineProxy();
    final EventRequestManager requestManager=machineProxy.eventRequestManager();
    if (machineProxy.canGetMethodReturnValues()) {
      myReturnValueWatcher=new MethodReturnValueWatcher(requestManager);
    }
    final ThreadStartRequest threadStartRequest=requestManager.createThreadStartRequest();
    threadStartRequest.setSuspendPolicy(EventRequest.SUSPEND_NONE);
    threadStartRequest.enable();
    final ThreadDeathRequest threadDeathRequest=requestManager.createThreadDeathRequest();
    threadDeathRequest.setSuspendPolicy(EventRequest.SUSPEND_NONE);
    threadDeathRequest.enable();
    myDebugProcessDispatcher.getMulticaster().processAttached(this);
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      @Override public void run(){
        XDebugSession session=getSession().getXDebugSession();
        if (session != null) {
          session.initBreakpoints();
        }
      }
    }
);
    final String addressDisplayName=DebuggerBundle.getAddressDisplayName(getConnection());
    final String transportName=DebuggerBundle.getTransportName(getConnection());
    showStatusText(DebuggerBundle.message("status.connected",addressDisplayName,transportName));
    if (LOG.isDebugEnabled()) {
      LOG.debug("leave: processVMStartEvent()");
    }
  }
}
