{
  TypeRef<?> result=null;
  for (  Type interfaceGeneric : typeClass.getGenericInterfaces()) {
    if (!(interfaceGeneric instanceof ParameterizedType)) {
      continue;
    }
    ParameterizedType parameterizedType=(ParameterizedType)interfaceGeneric;
    if (parameterizedType.getRawType() != JsonSubtype.class) {
      continue;
    }
    Type param=parameterizedType.getActualTypeArguments()[0];
    if (!(param instanceof Class)) {
      throw new JsonProtocolModelParseException("Unexpected type of superclass " + param);
    }
    Class<?> paramClass=(Class<?>)param;
    if (result != null) {
      throw new JsonProtocolModelParseException("Already has superclass " + result.typeClass.getName());
    }
    result=getTypeRef(paramClass);
    if (result == null) {
      throw new JsonProtocolModelParseException("Unknown base class " + paramClass.getName());
    }
  }
  return result;
}
