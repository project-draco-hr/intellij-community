{
  if (type instanceof Class) {
    Class<?> typeClass=(Class<?>)type;
    if (type == Long.TYPE) {
      return LONG_PARSER;
    }
 else     if (type == Integer.TYPE) {
      return INTEGER_PARSER;
    }
 else     if (type == Boolean.TYPE) {
      return BOOLEAN_PARSER;
    }
 else     if (type == Float.TYPE) {
      return FLOAT_PARSER;
    }
 else     if (type == Number.class || type == Double.TYPE) {
      return NUMBER_PARSER;
    }
 else     if (type == Void.TYPE) {
      return VOID_PARSER;
    }
 else     if (type == String.class) {
      if (method != null) {
        JsonField jsonField=method.getAnnotation(JsonField.class);
        if (jsonField != null && jsonField.allowAnyPrimitiveValue()) {
          return RAW_STRING_PARSER;
        }
      }
      return STRING_PARSER;
    }
 else     if (type == Object.class) {
      return RAW_STRING_OR_MAP_PARSER;
    }
 else     if (type == JsonReaderEx.class) {
      return JSON_PARSER;
    }
 else     if (type == Map.class) {
      return MAP_PARSER;
    }
 else     if (type == StringIntPair.class) {
      return STRING_INT_PAIR_PARSER;
    }
 else     if (typeClass.isArray()) {
      return new ArrayReader(getFieldTypeParser(typeClass.getComponentType(),false,null),false);
    }
 else     if (typeClass.isEnum()) {
      return EnumReader.create((Class<RetentionPolicy>)typeClass);
    }
    TypeRef<?> ref=getTypeRef(typeClass);
    if (ref != null) {
      JsonField jsonField=method == null ? null : method.getAnnotation(JsonField.class);
      return new ObjectValueReader<>(ref,isSubtyping,jsonField == null ? null : jsonField.primitiveValue());
    }
    throw new UnsupportedOperationException("Method return type " + type + " (simple class) not supported");
  }
 else   if (type instanceof ParameterizedType) {
    ParameterizedType parameterizedType=(ParameterizedType)type;
    boolean isList=parameterizedType.getRawType() == List.class;
    if (isList || parameterizedType.getRawType() == Map.class) {
      Type argumentType=parameterizedType.getActualTypeArguments()[isList ? 0 : 1];
      if (argumentType instanceof WildcardType) {
        WildcardType wildcard=(WildcardType)argumentType;
        if (wildcard.getLowerBounds().length == 0 && wildcard.getUpperBounds().length == 1) {
          argumentType=wildcard.getUpperBounds()[0];
        }
      }
      ValueReader componentParser=getFieldTypeParser(argumentType,false,method);
      return isList ? new ArrayReader(componentParser,true) : new MapReader(componentParser);
    }
 else {
      throw new UnsupportedOperationException("Method return type " + type + " (generic) not supported");
    }
  }
 else {
    throw new UnsupportedOperationException("Method return type " + type + " not supported");
  }
}
