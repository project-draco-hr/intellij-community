{
  if (!typeClass.isInterface()) {
    throw new JsonProtocolModelParseException("Json model type should be interface: " + typeClass.getName());
  }
  FieldProcessor<T> fields=new FieldProcessor<>(this,typeClass);
  fields.go();
  LinkedHashMap<Method,MethodHandler> methodHandlerMap=fields.getMethodHandlerMap();
  for (  Method method : methodHandlerMap.keySet()) {
    Class<?> returnType=method.getReturnType();
    if (returnType != typeClass) {
      createIfNotExists(returnType);
    }
  }
  return new TypeHandler<>(typeClass,getSuperclassRef(typeClass),fields.getVolatileFields(),methodHandlerMap,fields.getFieldLoaders(),fields.lazyRead);
}
