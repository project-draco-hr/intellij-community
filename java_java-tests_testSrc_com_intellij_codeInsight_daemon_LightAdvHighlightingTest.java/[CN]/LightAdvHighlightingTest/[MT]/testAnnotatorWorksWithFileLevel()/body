{
  Annotator annotator=new MyTopFileAnnotator();
  Language java=StdFileTypes.JAVA.getLanguage();
  LanguageAnnotators.INSTANCE.addExplicitExtension(java,annotator);
  try {
    List<Annotator> list=LanguageAnnotators.INSTANCE.allForLanguage(java);
    assertTrue(list.toString(),list.contains(annotator));
    configureByFile(BASE_PATH + "/" + getTestName(false)+ ".java");
    ((EditorEx)getEditor()).getScrollPane().getViewport().setSize(new Dimension(1000,1000));
    doHighlighting();
    List<HighlightInfo> fileLevel=((DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(ourProject)).getFileLevelHighlights(getProject(),getFile());
    HighlightInfo info=assertOneElement(fileLevel);
    assertEquals("top level",info.getDescription());
    type("\n\n");
    doHighlighting();
    fileLevel=((DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(ourProject)).getFileLevelHighlights(getProject(),getFile());
    info=assertOneElement(fileLevel);
    assertEquals("top level",info.getDescription());
    type("//xxx");
    List<HighlightInfo> warnings=doHighlighting(HighlightSeverity.WARNING);
    assertEmpty(warnings);
    fileLevel=((DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(ourProject)).getFileLevelHighlights(getProject(),getFile());
    assertEmpty(fileLevel);
  }
  finally {
    LanguageAnnotators.INSTANCE.removeExplicitExtension(java,annotator);
  }
  List<Annotator> list=LanguageAnnotators.INSTANCE.allForLanguage(java);
  assertFalse(list.toString(),list.contains(annotator));
}
