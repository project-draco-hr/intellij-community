{
  String indstr=InterpreterUtil.getIndentString(indent);
  boolean isInterface=cl.hasModifier(CodeConstants.ACC_INTERFACE);
  if (interceptor != null) {
    String oldname=interceptor.getOldName(cl.qualifiedName + " " + fd.getName()+ " "+ fd.getDescriptor());
    if (oldname != null) {
      String[] element=oldname.split(" ");
      writer.write(indstr);
      writer.write("// $FF: renamed from: " + element[1] + " "+ getDescriptorPrintOut(element[2],1));
      writer.write(DecompilerContext.getNewLineSeparator());
    }
  }
  boolean isDeprecated=fd.getAttributes().containsKey("Deprecated");
  if (isDeprecated) {
    writer.write(indstr);
    writer.write("/** @deprecated */");
    writer.write(DecompilerContext.getNewLineSeparator());
  }
  List<AnnotationExprent> lstAnn=getAllAnnotations(fd.getAttributes());
  for (  AnnotationExprent annexpr : lstAnn) {
    writer.write(annexpr.toJava(indent));
    writer.write(DecompilerContext.getNewLineSeparator());
  }
  boolean isSynthetic=fd.isSynthetic();
  boolean isEnum=fd.hasModifier(CodeConstants.ACC_ENUM) && DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_ENUM);
  if (isSynthetic) {
    writer.write(indstr);
    writer.write("// $FF: synthetic field");
    writer.write(DecompilerContext.getNewLineSeparator());
  }
  writer.write(indstr);
  if (!isEnum) {
    for (int i=0; i < modval_field.length; i++) {
      if (!isInterface || !mod_notinterface_fields.contains(modval_field[i])) {
        if (fd.hasModifier(modval_field[i])) {
          writer.write(modstr_field[i]);
        }
      }
    }
  }
  VarType fieldType=new VarType(fd.getDescriptor(),false);
  GenericFieldDescriptor descriptor=null;
  if (DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_GENERIC_SIGNATURES)) {
    StructGenericSignatureAttribute attr=(StructGenericSignatureAttribute)fd.getAttributes().getWithKey("Signature");
    if (attr != null) {
      descriptor=GenericMain.parseFieldSignature(attr.getSignature());
    }
  }
  if (!isEnum) {
    if (descriptor != null) {
      writer.write(GenericMain.getGenericCastTypeName(descriptor.type));
    }
 else {
      writer.write(ExprProcessor.getCastTypeName(fieldType));
    }
    writer.write(" ");
  }
  writer.write(fd.getName());
  Exprent initializer;
  if (fd.hasModifier(CodeConstants.ACC_STATIC)) {
    initializer=wrapper.getStaticFieldInitializers().getWithKey(InterpreterUtil.makeUniqueKey(fd.getName(),fd.getDescriptor()));
  }
 else {
    initializer=wrapper.getDynamicFieldInitializers().getWithKey(InterpreterUtil.makeUniqueKey(fd.getName(),fd.getDescriptor()));
  }
  if (initializer != null) {
    if (isEnum && initializer.type == Exprent.EXPRENT_NEW) {
      NewExprent nexpr=(NewExprent)initializer;
      nexpr.setEnumconst(true);
      writer.write(nexpr.toJava(indent));
    }
 else {
      writer.write(" = ");
      writer.write(initializer.toJava(indent));
    }
  }
 else   if (fd.hasModifier(CodeConstants.ACC_FINAL) && fd.hasModifier(CodeConstants.ACC_STATIC)) {
    StructConstantValueAttribute attr=(StructConstantValueAttribute)fd.getAttributes().getWithKey(StructGeneralAttribute.ATTRIBUTE_CONSTANT_VALUE);
    if (attr != null) {
      PrimitiveConstant cnst=cl.getPool().getPrimitiveConstant(attr.getIndex());
      writer.write(" = ");
      writer.write(new ConstExprent(fieldType,cnst.value).toJava(indent));
    }
  }
  if (!isEnum) {
    writer.write(";");
    writer.write(DecompilerContext.getNewLineSeparator());
  }
}
