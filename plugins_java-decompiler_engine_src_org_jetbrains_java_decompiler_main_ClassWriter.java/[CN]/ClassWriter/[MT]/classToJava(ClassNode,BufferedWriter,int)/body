{
  ClassWrapper wrapper=node.wrapper;
  StructClass cl=wrapper.getClassStruct();
  ClassNode nodeold=(ClassNode)DecompilerContext.getProperty(DecompilerContext.CURRENT_CLASS_NODE);
  DecompilerContext.setProperty(DecompilerContext.CURRENT_CLASS_NODE,node);
  invokeProcessors(node);
  DecompilerContext.getLogger().startWriteClass(cl.qualifiedName);
  writeClassDefinition(node,writer,indent);
  StringWriter strwriter=new StringWriter();
  BufferedWriter bufstrwriter=new BufferedWriter(strwriter);
  boolean firstmt=true;
  boolean mthidden=false;
  for (  StructMethod mt : cl.getMethods()) {
    boolean isSynthetic=mt.isSynthetic();
    boolean isBridge=mt.hasModifier(CodeConstants.ACC_BRIDGE);
    if ((!isSynthetic || !DecompilerContext.getOption(IFernflowerPreferences.REMOVE_SYNTHETIC)) && (!isBridge || !DecompilerContext.getOption(IFernflowerPreferences.REMOVE_BRIDGE)) && !wrapper.getHiddenMembers().contains(InterpreterUtil.makeUniqueKey(mt.getName(),mt.getDescriptor()))) {
      if (!mthidden && (!firstmt || node.type != ClassNode.CLASS_ANONYMOUS)) {
        bufstrwriter.write(DecompilerContext.getNewLineSeparator());
        firstmt=false;
      }
      mthidden=!methodToJava(node,mt,bufstrwriter,indent + 1);
    }
  }
  bufstrwriter.flush();
  StringWriter strwriter1=new StringWriter();
  BufferedWriter bufstrwriter1=new BufferedWriter(strwriter1);
  int fields_count=0;
  boolean enumfields=false;
  for (  StructField fd : cl.getFields()) {
    boolean hide=fd.isSynthetic() && DecompilerContext.getOption(IFernflowerPreferences.REMOVE_SYNTHETIC) || wrapper.getHiddenMembers().contains(InterpreterUtil.makeUniqueKey(fd.getName(),fd.getDescriptor()));
    if (!hide) {
      boolean isEnum=fd.hasModifier(CodeConstants.ACC_ENUM) && DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_ENUM);
      if (isEnum) {
        if (enumfields) {
          bufstrwriter1.write(",");
          bufstrwriter1.write(DecompilerContext.getNewLineSeparator());
        }
 else {
          enumfields=true;
        }
      }
 else {
        if (enumfields) {
          bufstrwriter1.write(";");
          bufstrwriter1.write(DecompilerContext.getNewLineSeparator());
          enumfields=false;
        }
      }
      fieldToJava(wrapper,cl,fd,bufstrwriter1,indent + 1);
      fields_count++;
    }
  }
  if (enumfields) {
    bufstrwriter1.write(";");
    bufstrwriter1.write(DecompilerContext.getNewLineSeparator());
  }
  bufstrwriter1.flush();
  if (fields_count > 0) {
    writer.write(DecompilerContext.getNewLineSeparator());
    writer.write(strwriter1.toString());
    writer.write(DecompilerContext.getNewLineSeparator());
  }
  writer.write(strwriter.toString());
  for (  ClassNode inner : node.nested) {
    if (inner.type == ClassNode.CLASS_MEMBER) {
      StructClass innerCl=inner.classStruct;
      boolean isSynthetic=(inner.access & CodeConstants.ACC_SYNTHETIC) != 0 || innerCl.isSynthetic();
      boolean hide=isSynthetic && DecompilerContext.getOption(IFernflowerPreferences.REMOVE_SYNTHETIC) || wrapper.getHiddenMembers().contains(innerCl.qualifiedName);
      if (!hide) {
        writer.write(DecompilerContext.getNewLineSeparator());
        classToJava(inner,writer,indent + 1);
      }
    }
  }
  writer.write(InterpreterUtil.getIndentString(indent));
  writer.write("}");
  if (node.type != ClassNode.CLASS_ANONYMOUS) {
    writer.write(DecompilerContext.getNewLineSeparator());
  }
  writer.flush();
  DecompilerContext.setProperty(DecompilerContext.CURRENT_CLASS_NODE,nodeold);
  DecompilerContext.getLogger().endWriteClass();
}
