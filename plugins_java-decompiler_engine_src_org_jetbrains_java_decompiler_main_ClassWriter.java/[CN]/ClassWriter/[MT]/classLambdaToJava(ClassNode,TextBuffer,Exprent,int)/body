{
  ClassNode classNode=node;
  while (classNode != null && classNode.type == ClassNode.CLASS_LAMBDA) {
    classNode=classNode.parent;
  }
  if (classNode == null) {
    return;
  }
  boolean lambdaToAnonymous=DecompilerContext.getOption(IFernflowerPreferences.LAMBDA_TO_ANONYMOUS_CLASS);
  ClassNode outerNode=(ClassNode)DecompilerContext.getProperty(DecompilerContext.CURRENT_CLASS_NODE);
  DecompilerContext.setProperty(DecompilerContext.CURRENT_CLASS_NODE,node);
  BytecodeMappingTracer tracer=new BytecodeMappingTracer();
  try {
    ClassWrapper wrapper=classNode.wrapper;
    StructClass cl=wrapper.getClassStruct();
    DecompilerContext.getLogger().startWriteClass(node.simpleName);
    if (node.lambda_information.is_method_reference) {
      if (!node.lambda_information.is_content_method_static && method_object != null) {
        buffer.append(method_object.toJava(indent,tracer));
      }
 else {
        buffer.append(ExprProcessor.getCastTypeName(new VarType(node.lambda_information.content_class_name,false)));
      }
      buffer.append("::");
      buffer.append(node.lambda_information.content_method_name);
    }
 else {
      StructMethod mt=cl.getMethod(node.lambda_information.content_method_key);
      MethodWrapper methodWrapper=wrapper.getMethodWrapper(mt.getName(),mt.getDescriptor());
      MethodDescriptor md_content=MethodDescriptor.parseDescriptor(node.lambda_information.content_method_descriptor);
      MethodDescriptor md_lambda=MethodDescriptor.parseDescriptor(node.lambda_information.method_descriptor);
      if (!lambdaToAnonymous) {
        buffer.append('(');
        boolean firstParameter=true;
        int index=node.lambda_information.is_content_method_static ? 0 : 1;
        int start_index=md_content.params.length - md_lambda.params.length;
        for (int i=0; i < md_content.params.length; i++) {
          if (i >= start_index) {
            if (!firstParameter) {
              buffer.append(", ");
            }
            String parameterName=methodWrapper.varproc.getVarName(new VarVersionPaar(index,0));
            buffer.append(parameterName == null ? "param" + index : parameterName);
            firstParameter=false;
          }
          index+=md_content.params[i].stack_size;
        }
        buffer.append(") ->");
      }
      buffer.append(" {");
      buffer.append(DecompilerContext.getNewLineSeparator());
      methodLambdaToJava(node,classNode,mt,buffer,indent + 1,!lambdaToAnonymous,tracer);
      buffer.appendIndent(indent).append("}");
    }
  }
  finally {
    DecompilerContext.setProperty(DecompilerContext.CURRENT_CLASS_NODE,outerNode);
  }
  DecompilerContext.getLogger().endWriteClass();
}
