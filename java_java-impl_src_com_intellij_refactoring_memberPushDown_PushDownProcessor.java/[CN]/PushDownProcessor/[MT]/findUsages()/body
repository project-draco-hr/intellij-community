{
  final PsiClass[] inheritors=ClassInheritorsSearch.search(myClass,false).toArray(PsiClass.EMPTY_ARRAY);
  final List<UsageInfo> usages=new ArrayList<UsageInfo>(inheritors.length);
  for (  PsiClass inheritor : inheritors) {
    usages.add(new UsageInfo(inheritor));
  }
  final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(myClass);
  if (interfaceMethod != null && isMoved(interfaceMethod)) {
    FunctionalExpressionSearch.search(myClass).forEach(new Processor<PsiFunctionalExpression>(){
      @Override public boolean process(      PsiFunctionalExpression expression){
        usages.add(new UsageInfo(expression));
        return true;
      }
    }
);
  }
  return usages.toArray(new UsageInfo[usages.size()]);
}
