{
  final UsageInfo[] usagesIn=refUsages.get();
  final PushDownConflicts pushDownConflicts=new PushDownConflicts(myClass,myMemberInfos);
  pushDownConflicts.checkSourceClassConflicts();
  if (usagesIn.length == 0) {
    Boolean answered=preprocessNoInheritorsFound(usagesIn,pushDownConflicts);
    if (answered != null) {
      return answered;
    }
  }
  Runnable runnable=new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        @Override public void run(){
          for (          UsageInfo usage : usagesIn) {
            pushDownConflicts.checkTargetClassConflicts(usage.getElement(),usagesIn.length > 1,usage.getElement());
          }
        }
      }
);
    }
  }
;
  if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(runnable,RefactoringBundle.message("detecting.possible.conflicts"),true,myProject)) {
    return false;
  }
  return showConflicts(pushDownConflicts.getConflicts(),usagesIn);
}
