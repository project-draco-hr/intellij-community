{
  final boolean callSpace=CodeStyleSettingsManager.getSettings(element.getProject()).SPACE_WITHIN_METHOD_CALL_PARENTHESES;
  final PsiExpression conversion;
  try {
    conversion=createExpression(getQualifierText(qualifier) + prefix + ".toArray("+ getSpace(callSpace)+ expressionString+ getSpace(callSpace)+ ")",element);
  }
 catch (  IncorrectOperationException e) {
    return;
  }
  String[] lookupStrings={prefix + ".toArray(" + getSpace(callSpace)+ expressionString+ getSpace(callSpace)+ ")",presentableString};
  result.consume(new ExpressionLookupItem(conversion,PlatformIcons.METHOD_ICON,prefix + ".toArray(" + presentableString+ ")",lookupStrings){
    @Override public void handleInsert(    InsertionContext context){
      FeatureUsageTracker.getInstance().triggerFeatureUsed(JavaCompletionFeatures.SECOND_SMART_COMPLETION_TOAR);
      context.commitDocument();
      JavaCodeStyleManager.getInstance(context.getProject()).shortenClassReferences(context.getFile(),context.getStartOffset(),context.getTailOffset());
    }
  }
);
}
