{
  DataContext dataContext=event.getDataContext();
  final Project project=CommonDataKeys.PROJECT.getData(dataContext);
  if (project == null) {
    return;
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final Editor editor=CommonDataKeys.EDITOR.getData(dataContext);
  final VirtualFile[] files=CommonDataKeys.VIRTUAL_FILE_ARRAY.getData(dataContext);
  PsiFile file=null;
  final PsiDirectory dir;
  boolean hasSelection=false;
  if (editor != null) {
    file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
    if (file == null)     return;
    dir=file.getContainingDirectory();
    hasSelection=editor.getSelectionModel().hasSelection();
  }
 else   if (areFiles(files)) {
    final ReadonlyStatusHandler.OperationStatus operationStatus=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(files);
    if (!operationStatus.hasReadonlyFiles()) {
      ReformatFilesOptions selectedFlags=getReformatFilesOptions(project,files);
      if (selectedFlags == null)       return;
      final boolean processOnlyChangedText=selectedFlags.getTextRangeType() == TextRangeType.VCS_CHANGED_TEXT;
      final boolean shouldOptimizeImports=selectedFlags.isOptimizeImports() && !DumbService.getInstance(project).isDumb();
      AbstractLayoutCodeProcessor processor=new ReformatCodeProcessor(project,convertToPsiFiles(files,project),null,processOnlyChangedText);
      if (shouldOptimizeImports) {
        processor=new OptimizeImportsProcessor(processor);
      }
      if (selectedFlags.isRearrangeCode()) {
        processor=new RearrangeCodeProcessor(processor);
      }
      processor.run();
    }
    return;
  }
 else {
    Project projectContext=PlatformDataKeys.PROJECT_CONTEXT.getData(dataContext);
    Module moduleContext=LangDataKeys.MODULE_CONTEXT.getData(dataContext);
    if (projectContext != null || moduleContext != null) {
      ReformatFilesOptions selectedFlags=getLayoutProjectOptions(project,moduleContext);
      if (selectedFlags != null) {
        reformatModule(project,moduleContext,selectedFlags);
      }
      return;
    }
    PsiElement element=CommonDataKeys.PSI_ELEMENT.getData(dataContext);
    if (element == null)     return;
    if (element instanceof PsiDirectoryContainer) {
      dir=((PsiDirectoryContainer)element).getDirectories()[0];
    }
 else     if (element instanceof PsiDirectory) {
      dir=(PsiDirectory)element;
    }
 else {
      file=element.getContainingFile();
      if (file == null)       return;
      dir=file.getContainingDirectory();
    }
  }
  final boolean optimizeImports=ReformatFilesDialog.isOptmizeImportsOptionOn();
  boolean processChangedTextOnly=PropertiesComponent.getInstance().getBoolean(LayoutCodeConstants.PROCESS_CHANGED_TEXT_KEY,false);
  final boolean rearrangeEntries=getLastSavedRearrangeCbState(project,file);
  if (file == null && dir != null) {
    DirectoryFormattingOptions options=getDirectoryFormattingOptions(project,dir);
    if (options != null) {
      reformatDirectory(project,dir,options);
    }
    return;
  }
  if (file == null || editor == null)   return;
  TextRange range=null;
  TextRangeType textRangeType;
  if (hasSelection) {
    processChangedTextOnly=false;
    textRangeType=TextRangeType.SELECTED_TEXT;
    SelectionModel model=editor.getSelectionModel();
    range=TextRange.create(model.getSelectionStart(),model.getSelectionEnd());
  }
 else   if (processChangedTextOnly) {
    textRangeType=TextRangeType.VCS_CHANGED_TEXT;
    if (isChangeNotTrackedForFile(project,file)) {
      textRangeType=TextRangeType.WHOLE_FILE;
      processChangedTextOnly=false;
    }
  }
 else {
    textRangeType=TextRangeType.WHOLE_FILE;
  }
  AbstractLayoutCodeProcessor processor;
  if (optimizeImports && range == null) {
    processor=new OptimizeImportsProcessor(project,file);
    processor=new ReformatCodeProcessor(processor,processChangedTextOnly);
  }
 else {
    processor=new ReformatCodeProcessor(project,file,range,processChangedTextOnly);
  }
  if (rearrangeEntries) {
    processor=new RearrangeCodeProcessor(processor);
  }
  final Document document=PsiDocumentManager.getInstance(project).getDocument(file);
  final CharSequence charSeqBefore=document != null ? document.getImmutableCharSequence() : null;
  final PsiFile finalFile=file;
  final TextRangeType finalTextRangeType=textRangeType;
  processor.setPostRunnable(new Runnable(){
    @Override public void run(){
      if (document != null) {
        int totalLinesProcessed=getProcessedLinesNumber(finalFile,charSeqBefore);
        String info=prepareMessage(totalLinesProcessed,optimizeImports,rearrangeEntries,finalTextRangeType);
        showHint(editor,info);
      }
    }
  }
);
  processor.run();
}
