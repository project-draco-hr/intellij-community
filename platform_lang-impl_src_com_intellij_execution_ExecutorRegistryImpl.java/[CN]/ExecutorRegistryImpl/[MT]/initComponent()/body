{
  ProjectManager.getInstance().addProjectManagerListener(new ProjectManagerAdapter(){
    @Override public void projectOpened(    final Project project){
      final MessageBusConnection connect=project.getMessageBus().connect(project);
      connect.subscribe(ExecutionManager.EXECUTION_TOPIC,new ExecutionListener(){
        @Override public void processStartScheduled(        @NotNull String executorId,        @NotNull ExecutionEnvironment environment){
          myInProgress.add(createExecutionId(executorId,environment));
        }
        @Override public void processNotStarted(        @NotNull String executorId,        @NotNull ExecutionEnvironment environment){
          myInProgress.remove(createExecutionId(executorId,environment));
        }
        @Override public void processStarted(        @NotNull String executorId,        @NotNull ExecutionEnvironment environment,        @NotNull ProcessHandler handler){
          myInProgress.remove(createExecutionId(executorId,environment));
        }
      }
);
    }
    @Override public void projectClosed(    final Project project){
synchronized (myInProgress) {
        for (Iterator<Trinity<Project,String,String>> it=myInProgress.iterator(); it.hasNext(); ) {
          final Trinity<Project,String,String> trinity=it.next();
          if (project.equals(trinity.first)) {
            it.remove();
          }
        }
      }
    }
  }
);
  final Executor[] executors=Extensions.getExtensions(Executor.EXECUTOR_EXTENSION_NAME);
  for (  Executor executor : executors) {
    initExecutor(executor);
  }
}
