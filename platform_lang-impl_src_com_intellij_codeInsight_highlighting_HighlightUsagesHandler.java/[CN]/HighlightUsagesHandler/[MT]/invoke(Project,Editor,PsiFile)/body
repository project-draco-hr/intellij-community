{
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  SelectionModel selectionModel=editor.getSelectionModel();
  if (file == null && !selectionModel.hasSelection()) {
    selectionModel.selectWordAtCaret(false);
  }
  if (file == null || selectionModel.hasSelection()) {
    doRangeHighlighting(editor,project);
    return;
  }
  final HighlightUsagesHandlerBase handler=createCustomHandler(editor,file);
  if (handler != null) {
    handler.highlightUsages();
    return;
  }
  UsageTarget[] usageTargets=UsageTargetUtil.findUsageTargets(editor,file);
  if (usageTargets == null) {
    PsiElement targetElement=getTargetElement(editor,file);
    if (targetElement != null) {
      if (!(targetElement instanceof NavigationItem)) {
        targetElement=targetElement.getNavigationElement();
      }
      if (targetElement instanceof NavigationItem) {
        usageTargets=new UsageTarget[]{new PsiElement2UsageTargetAdapter(targetElement)};
      }
    }
  }
  if (usageTargets == null) {
    PsiReference ref=TargetElementUtilBase.findReference(editor);
    if (ref instanceof PsiPolyVariantReference) {
      ResolveResult[] results=((PsiPolyVariantReference)ref).multiResolve(false);
      if (results.length > 0) {
        usageTargets=ContainerUtil.mapNotNull(results,new Function<ResolveResult,UsageTarget>(){
          @Override public UsageTarget fun(          ResolveResult result){
            PsiElement element=result.getElement();
            return element == null ? null : new PsiElement2UsageTargetAdapter(element);
          }
        }
,UsageTarget.EMPTY_ARRAY);
      }
    }
  }
  if (usageTargets == null) {
    if (file.findElementAt(editor.getCaretModel().getOffset()) instanceof PsiWhiteSpace)     return;
    selectionModel.selectWordAtCaret(false);
    String selection=selectionModel.getSelectedText();
    LOG.assertTrue(selection != null);
    for (int i=0; i < selection.length(); i++) {
      if (!Character.isJavaIdentifierPart(selection.charAt(i))) {
        selectionModel.removeSelection();
        return;
      }
    }
    doRangeHighlighting(editor,project);
    selectionModel.removeSelection();
    return;
  }
  boolean clearHighlights=isClearHighlights(editor);
  for (  UsageTarget target : usageTargets) {
    target.highlightUsages(file,editor,clearHighlights);
  }
}
