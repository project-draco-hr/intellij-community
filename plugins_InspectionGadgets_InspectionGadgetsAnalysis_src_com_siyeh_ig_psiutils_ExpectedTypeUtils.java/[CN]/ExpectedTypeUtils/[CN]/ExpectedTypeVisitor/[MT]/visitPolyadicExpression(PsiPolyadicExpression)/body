{
  final PsiExpression[] operands=polyadicExpression.getOperands();
  if (operands.length < 2) {
    expectedType=null;
    return;
  }
  for (  PsiExpression operand : operands) {
    if (operand == null || operand.getType() == null) {
      expectedType=null;
      return;
    }
  }
  final IElementType tokenType=polyadicExpression.getOperationTokenType();
  final PsiType type=polyadicExpression.getType();
  final PsiType wrappedExpressionType=wrappedExpression.getType();
  if (TypeUtils.isJavaLangString(type) || isArithmeticOperation(tokenType) || isBooleanOperation(tokenType)) {
    expectedType=type;
  }
 else   if (isShiftOperation(tokenType)) {
    expectedType=unaryNumericPromotion(wrappedExpressionType);
  }
 else   if (ComparisonUtils.isEqualityComparison(polyadicExpression)) {
    if (TypeConversionUtil.isPrimitiveAndNotNull(wrappedExpressionType)) {
      expectedType=wrappedExpressionType;
    }
 else     if (operands[0] == wrappedExpression) {
      if (TypeConversionUtil.isPrimitiveAndNotNull(operands[1].getType())) {
        expectedType=PsiPrimitiveType.getUnboxedType(wrappedExpressionType);
      }
 else {
        expectedType=TypeUtils.getObjectType(wrappedExpression);
      }
    }
 else     if (operands[1] == wrappedExpression) {
      if (TypeConversionUtil.isPrimitiveAndNotNull(operands[0].getType())) {
        expectedType=PsiPrimitiveType.getUnboxedType(wrappedExpressionType);
      }
 else {
        expectedType=TypeUtils.getObjectType(wrappedExpression);
      }
    }
 else {
      expectedType=PsiPrimitiveType.getUnboxedType(wrappedExpressionType);
    }
  }
 else   if (ComparisonUtils.isComparisonOperation(tokenType)) {
    if (operands.length != 2) {
      expectedType=null;
      return;
    }
 else     if (!TypeConversionUtil.isPrimitiveAndNotNull(wrappedExpressionType)) {
      if (PsiPrimitiveType.getUnboxedType(wrappedExpressionType) == null) {
        return;
      }
    }
    expectedType=TypeConversionUtil.binaryNumericPromotion(operands[0].getType(),operands[1].getType());
  }
 else {
    expectedType=null;
  }
}
