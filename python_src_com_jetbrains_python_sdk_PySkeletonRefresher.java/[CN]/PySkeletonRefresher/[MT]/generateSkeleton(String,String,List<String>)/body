{
  boolean ret=true;
  String binaryPath=mySdk.getHomePath();
  if (myExtraSyspath == null) {
    myExtraSyspath=getExtraSysPath(mySdk,mySkeletonsPath);
  }
  final String parent_dir=new File(binaryPath).getParent();
  List<String> commandLine=new ArrayList<String>();
  commandLine.add(binaryPath);
  commandLine.add(PythonHelpersLocator.getHelperPath(GENERATOR3));
  commandLine.add("-d");
  commandLine.add(getSkeletonsPath());
  if (assemblyRefs != null && !assemblyRefs.isEmpty()) {
    commandLine.add("-c");
    commandLine.add(StringUtil.join(assemblyRefs,";"));
  }
  if (ApplicationManagerEx.getApplicationEx().isInternal()) {
    commandLine.add("-x");
  }
  commandLine.add("-s");
  commandLine.add(myExtraSyspath);
  commandLine.add(modname);
  if (modfilename != null)   commandLine.add(modfilename);
  final ProcessOutput gen_result=PySdkUtil.getProcessOutput(parent_dir,ArrayUtil.toStringArray(commandLine),PythonSdkType.getVirtualEnvAdditionalEnv(binaryPath),MINUTE * 10);
  if (gen_result.getExitCode() != 0) {
    ret=false;
    StringBuilder sb=new StringBuilder("Skeleton for ");
    sb.append(modname).append(" failed on ").append(binaryPath).append(". stderr: --\n");
    for (    String err_line : gen_result.getStderrLines())     sb.append(err_line).append("\n");
    sb.append("--");
    if (ApplicationManagerEx.getApplicationEx().isInternal()) {
      LOG.warn(sb.toString());
    }
 else {
      LOG.info(sb.toString());
    }
  }
  return ret;
}
