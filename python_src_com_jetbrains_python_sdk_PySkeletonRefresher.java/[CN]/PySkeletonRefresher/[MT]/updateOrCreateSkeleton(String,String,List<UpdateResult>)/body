{
  final String modulePath=moduleName.replace('.','/');
  String skeletonPath=getSkeletonPath();
  File skeleton_file=new File(skeletonPath,modulePath + ".py");
  if (!skeleton_file.exists()) {
    skeleton_file=new File(new File(skeletonPath,modulePath),PyNames.INIT_DOT_PY);
  }
  File lib_file=new File(moduleLibName);
  Matcher matcher=getParseHeader(skeleton_file);
  boolean must_rebuild=true;
  if (matcher != null && matcher.matches()) {
    int file_version=SkeletonVersionChecker.fromVersionString(matcher.group(2));
    int required_version=myVersionChecker.getRequiredVersion(moduleName);
    must_rebuild=file_version < required_version;
  }
  final long lib_file_timestamp=lib_file.lastModified();
  if (!must_rebuild) {
    must_rebuild=(lib_file.exists() && skeleton_file.exists() && lib_file_timestamp > skeleton_file.lastModified());
  }
  if (myBlacklist != null) {
    Pair<Integer,Long> version_info=myBlacklist.get(moduleLibName);
    if (version_info != null) {
      int failed_generator_version=version_info.getFirst();
      long failed_timestamp=version_info.getSecond();
      must_rebuild&=failed_generator_version < myGeneratorVersion || failed_timestamp < lib_file_timestamp;
      if (!must_rebuild) {
        error_list.add(new UpdateResult(moduleName,moduleLibName,lib_file_timestamp,false));
      }
    }
  }
  if (must_rebuild) {
    indicateMinor(moduleName);
    if (myPregeneratedSkeletons != null && copyPregeneratedSkeleton(moduleName)) {
      return true;
    }
    LOG.info("Skeleton for " + moduleName);
    if (!generateSkeleton(moduleName,moduleLibName,null)) {
      error_list.add(new UpdateResult(moduleName,moduleLibName,lib_file_timestamp,true));
    }
  }
  return false;
}
