{
  final String homePath=sdk.getHomePath();
  final String parentDir=new File(homePath).getParent();
  final long startTime=System.currentTimeMillis();
  final String[] cmd=new String[]{homePath,PythonHelpersLocator.getHelperPath(GENERATOR3),"-v","-L","-s",extraSysPath};
  final ProcessOutput process=PySdkUtil.getProcessOutput(parentDir,cmd,PythonSdkType.getVirtualEnvAdditionalEnv(homePath),MINUTE * 4);
  LOG.info("Retrieving binary module list took " + (System.currentTimeMillis() - startTime) + " ms");
  if (process.getExitCode() != 0) {
    final StringBuilder sb=new StringBuilder("failed to run ").append(GENERATOR3).append(" for ").append(homePath);
    if (process.isTimeout()) {
      sb.append(": timed out.");
    }
 else {
      sb.append(", exit code ").append(process.getExitCode()).append(", stderr: \n-----\n");
      for (      String line : process.getStderrLines()) {
        sb.append(line).append("\n");
      }
      sb.append("-----");
    }
    throw new InvalidSdkException(sb.toString());
  }
  final List<String> lines=process.getStdoutLines();
  if (lines.size() < 1) {
    throw new InvalidSdkException("Empty output from " + GENERATOR3 + " for "+ homePath);
  }
  final Iterator<String> iter=lines.iterator();
  final int generatorVersion=fromVersionString(iter.next().trim());
  final Map<String,File> binaries=new HashMap<String,File>();
  while (iter.hasNext()) {
    final String line=iter.next();
    int cutpos=line.indexOf(' ');
    if (cutpos >= 0) {
      String moduleName=line.substring(0,cutpos);
      String path=line.substring(cutpos + 1);
      binaries.put(moduleName,new File(path));
    }
 else {
      LOG.error("Bad binaries line: '" + line + "', SDK "+ homePath);
    }
  }
  return new ListBinariesResult(generatorVersion,binaries);
}
