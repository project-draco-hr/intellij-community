{
  prepareLongHistory(VcsFileUtil.FILE_PATH_LIMIT * 2 / 40);
  List<VcsCommitMetadata> log=log();
  final List<String> hashes=ContainerUtil.newArrayList();
  myLogProvider.readAllHashes(myProjectRoot,new Consumer<TimedVcsCommit>(){
    @Override public void consume(    TimedVcsCommit timedVcsCommit){
      hashes.add(timedVcsCommit.getId().asString());
    }
  }
);
  List<? extends VcsFullCommitDetails> fullDetails=myLogProvider.readFullDetails(myProjectRoot,hashes);
  final Function<VcsShortCommitDetails,String> shortDetailsToString=getShortDetailsToString();
  Function<VcsCommitMetadata,String> metadataToString=new Function<VcsCommitMetadata,String>(){
    @Override public String fun(    VcsCommitMetadata details){
      return shortDetailsToString.fun(details) + "\n" + details.getFullMessage();
    }
  }
;
  assertOrderedEquals(ContainerUtil.map(fullDetails,metadataToString),ContainerUtil.map(log,metadataToString));
}
