{
  if (!CodeInsightUtilBase.prepareEditorForWrite(editor))   return;
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  if (!FileDocumentManager.getInstance().requestWriting(editor.getDocument(),project)) {
    return;
  }
  EmacsProcessingHandler emacsProcessingHandler=LanguageEmacsExtension.INSTANCE.forLanguage(file.getLanguage());
  if (emacsProcessingHandler != null) {
    EmacsProcessingHandler.Result result=emacsProcessingHandler.changeIndent(project,editor,file);
    if (result == EmacsProcessingHandler.Result.STOP) {
      return;
    }
  }
  final Document document=editor.getDocument();
  final int startOffset=editor.getCaretModel().getOffset();
  final int line=editor.offsetToLogicalPosition(startOffset).line;
  final int lineStart=document.getLineStartOffset(line);
  try {
    final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);
    final int newPos=codeStyleManager.adjustLineIndent(file,lineStart);
    if (editor.getCaretModel().getOffset() < newPos) {
      editor.getCaretModel().moveToOffset(newPos);
      editor.getSelectionModel().removeSelection();
      editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
