{
  TextOutput out=fileScope.getOutput();
  String valueImplClassName=fileScope.getTypeImplShortName(this);
  out.append("private static final class ").append(valueImplClassName);
  out.append(" implements ").append(typeClass.getCanonicalName()).openBlock();
  if (hasLazyFields || JsonObjectBased.class.isAssignableFrom(typeClass)) {
    out.append("private ").append(Util.JSON_READER_CLASS_NAME).space().append(Util.PENDING_INPUT_READER_NAME).semi().newLine();
  }
  ClassScope classScope=fileScope.newClassScope();
  for (  VolatileFieldBinding field : volatileFields) {
    field.writeFieldDeclaration(classScope,out);
    out.newLine();
  }
  for (  FieldLoader loader : fieldLoaders) {
    out.append("private").space();
    loader.valueReader.appendFinishedValueTypeName(out);
    out.space().append(FIELD_PREFIX).append(loader.name);
    if (loader.valueReader instanceof PrimitiveValueReader) {
      String defaultValue=((PrimitiveValueReader)loader.valueReader).defaultValue;
      if (defaultValue != null) {
        out.append(" = ").append(defaultValue);
      }
    }
    out.semi();
    out.newLine();
  }
  if (subtypeAspect != null) {
    subtypeAspect.writeSuperFieldJava(out);
  }
  writeConstructorMethod(valueImplClassName,classScope,out);
  out.newLine();
  if (subtypeAspect != null) {
    subtypeAspect.writeParseMethod(valueImplClassName,classScope,out);
  }
  for (  Map.Entry<Method,MethodHandler> entry : methodHandlerMap.entrySet()) {
    out.newLine();
    entry.getValue().writeMethodImplementationJava(classScope,entry.getKey(),out);
    out.newLine();
  }
  writeBaseMethods(out);
  if (subtypeAspect != null) {
    subtypeAspect.writeGetSuperMethodJava(out);
  }
  out.indentOut().append('}');
}
