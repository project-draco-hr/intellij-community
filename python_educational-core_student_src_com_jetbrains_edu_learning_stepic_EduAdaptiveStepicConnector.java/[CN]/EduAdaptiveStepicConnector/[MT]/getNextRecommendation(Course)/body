{
  try {
    final CloseableHttpClient client=getHttpClient();
    final URI uri=new URIBuilder(STEPIC_API_URL + RECOMMENDATIONS_URL).addParameter("course",String.valueOf(course.getId())).build();
    final HttpGet request=new HttpGet(uri);
    setHeaders(request,CONTENT_TYPE_APPL_JSON);
    final CloseableHttpResponse response=client.execute(request);
    final StatusLine statusLine=response.getStatusLine();
    final HttpEntity responseEntity=response.getEntity();
    final String responseString=responseEntity != null ? EntityUtils.toString(responseEntity) : "";
    if (statusLine.getStatusCode() == HttpStatus.SC_OK) {
      Gson gson=new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
      final StepicWrappers.RecommendationWrapper recomWrapper=gson.fromJson(responseString,StepicWrappers.RecommendationWrapper.class);
      if (recomWrapper.recommendations.length != 0) {
        final StepicWrappers.Recommendation recommendation=recomWrapper.recommendations[0];
        final String lessonId=recommendation.lesson;
        final StepicWrappers.LessonContainer lessonContainer=EduStepicConnector.getFromStepic(LESSON_URL + lessonId,StepicWrappers.LessonContainer.class);
        final Lesson realLesson=lessonContainer.lessons.get(0);
        course.getLessons().get(0).id=Integer.parseInt(lessonId);
        for (        int stepId : realLesson.steps) {
          final StepicWrappers.Step step=EduStepicConnector.getStep(stepId);
          if (step.name.equals("code")) {
            return getTaskFromStep(realLesson.getName(),stepId,step);
          }
        }
      }
    }
 else {
      throw new IOException("Stepic returned non 200 status code: " + responseString);
    }
  }
 catch (  IOException e) {
    LOG.warn(e.getMessage());
  }
catch (  URISyntaxException e) {
    LOG.warn(e.getMessage());
  }
  return null;
}
