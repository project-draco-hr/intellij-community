{
  final Project project=psiFile.getProject();
  final Document document=PsiDocumentManager.getInstance(project).getDocument(psiFile);
  if (document == null)   return;
  final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  DaemonCodeAnalyzerEx.processHighlights(document,project,null,range.getStartOffset(),range.getEndOffset(),new Processor<HighlightInfo>(){
    @Override public boolean process(    final HighlightInfo existing){
      if (existing.isBijective() && existing.getGroup() == Pass.UPDATE_ALL && range.equalsToRange(existing.getActualStartOffset(),existing.getActualEndOffset())) {
        if (infos != null) {
          for (          HighlightInfo created : infos) {
            if (existing.equalsByActualOffset(created))             return true;
          }
        }
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            RangeHighlighterEx highlighter=existing.highlighter;
            if (progress != null && !progress.isCanceled() && highlighter != null) {
              highlighter.dispose();
            }
          }
        }
);
      }
      return true;
    }
  }
);
}
