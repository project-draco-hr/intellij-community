{
  if (!ENABLED || !context.maySwitchToAST(expression)) {
    return null;
  }
  final Set<String> seenAttrs;
  seenAttrs=collectUsedAttributes(expression);
  final Set<PyClass> candidates=Sets.newHashSet();
  for (  String attribute : seenAttrs) {
    candidates.addAll(PyClassAttributesIndex.find(attribute,expression.getProject()));
  }
  final Set<PyClass> suitableClasses=Sets.newHashSet();
  for (  PyClass candidate : candidates) {
    if (PyUserSkeletonsUtil.isUnderUserSkeletonsDirectory(candidate.getContainingFile())) {
      continue;
    }
    final Set<String> availableAttrs=Sets.newHashSet(getAllDeclaredAttributeNames(candidate));
    for (    PyClass parent : candidate.getAncestorClasses(context)) {
      availableAttrs.addAll(getAllDeclaredAttributeNames(parent));
    }
    if (availableAttrs.containsAll(seenAttrs)) {
      suitableClasses.add(candidate);
    }
  }
  for (  PyClass candidate : Lists.newArrayList(suitableClasses)) {
    for (    PyClass ancestor : candidate.getAncestorClasses()) {
      if (suitableClasses.contains(ancestor)) {
        suitableClasses.remove(candidate);
      }
    }
  }
  final List<CandidateClass> finalists=prepareCandidates(candidates,expression);
  return PyUnionType.createWeakType(PyUnionType.union(ContainerUtil.map(finalists,new Function<CandidateClass,PyType>(){
    @Override public PyType fun(    CandidateClass cls){
      return new PyClassTypeImpl(cls.myClass,false);
    }
  }
)));
}
