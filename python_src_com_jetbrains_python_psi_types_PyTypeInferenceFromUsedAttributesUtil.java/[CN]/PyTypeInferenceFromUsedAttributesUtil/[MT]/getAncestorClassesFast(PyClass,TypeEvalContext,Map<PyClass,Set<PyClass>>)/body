{
  final Set<PyClass> ancestors=cache.get(pyClass);
  if (ancestors != null) {
    return ancestors;
  }
  cache.put(pyClass,Collections.<PyClass>emptySet());
  final Set<PyClass> result=Sets.newHashSet();
  try {
    for (    final PyClassLikeType baseType : pyClass.getSuperClassTypes(context)) {
      if (!(baseType instanceof PyClassType)) {
        continue;
      }
      final PyClass baseClass=((PyClassType)baseType).getPyClass();
      result.add(baseClass);
      result.addAll(getAncestorClassesFast(baseClass,context,cache));
    }
  }
  finally {
    result.remove(pyClass);
    cache.put(pyClass,Collections.unmodifiableSet(result));
  }
  return result;
}
