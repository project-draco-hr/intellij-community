{
  int step=0;
  PyElement currentElement=expression;
  final List<T> result=new ArrayList<T>();
  while (step < MAX_STEP) {
    PyElement newElement=null;
    if (currentElement instanceof PyReferenceExpression) {
      newElement=PyUtil.as(((PyReferenceExpression)currentElement).getReference().resolve(),PyElement.class);
    }
 else     if (currentElement instanceof PyTargetExpression) {
      newElement=((PyTargetExpression)currentElement).findAssignedValue();
    }
 else     if (currentElement instanceof PyBinaryExpression) {
      final PyBinaryExpression newExpression=(PyBinaryExpression)currentElement;
      final PyElementType operator=newExpression.getOperator();
      if (PyTokenTypes.PLUS.equals(operator)) {
        final PyExpression leftExpression=newExpression.getLeftExpression();
        final PyExpression rightExpression=newExpression.getRightExpression();
        if (leftExpression != null) {
          result.addAll(evaluateRaw(leftExpression,aClass));
        }
        if (rightExpression != null) {
          result.addAll(evaluateRaw(rightExpression,aClass));
        }
      }
    }
    if (newElement == null) {
      break;
    }
    currentElement=newElement;
    step++;
  }
  final T elementToAdd=PyUtil.as(currentElement,aClass);
  if (elementToAdd != null) {
    result.add(elementToAdd);
  }
  return result;
}
