{
  final Set<String> existingNames=new HashSet<String>();
  final Template template=TestIntegrationUtils.createTestMethodTemplate(TestIntegrationUtils.MethodKind.TEST,myDescriptor,myTestClass,null,true,existingNames);
  final String prefix=JavaPsiFacade.getElementFactory(myTestClass.getProject()).createMethodFromText(template.getTemplateText(),myTestClass).getName();
  existingNames.addAll(ContainerUtil.map(myTestClass.getMethods(),new Function<PsiMethod,String>(){
    @Override public String fun(    PsiMethod method){
      return StringUtil.decapitalize(StringUtil.trimStart(method.getName(),prefix));
    }
  }
));
  for (  MemberInfo memberInfo : info) {
    final PsiMember member=memberInfo.getMember();
    memberInfo.setChecked(!(member instanceof PsiMethod && existingNames.contains(member.getName())));
  }
}
