{
  final Project project=myTarget.getProject();
  final PsiElement parent=myTarget.getParent().getParent();
  final LocalInspectionsPass pass=new LocalInspectionsPass(myFile,myFile.getViewProvider().getDocument(),parent.getTextRange().getStartOffset(),parent.getTextRange().getEndOffset(),LocalInspectionsPass.EMPTY_PRIORITY_RANGE,false,HighlightInfoProcessor.getEmpty());
  final InspectionProfile inspectionProfile=InspectionProjectProfileManager.getInstance(project).getInspectionProfile();
  for (  PsiLiteralExpression target : targets) {
    final Object value=target.getValue();
    if (!(value instanceof String)) {
      continue;
    }
    List<InspectionToolWrapper> tools=((InspectionProfileImpl)inspectionProfile).findToolsById((String)value,target);
    if (tools == null) {
      continue;
    }
    final List<LocalInspectionToolWrapper> toolsCopy=new ArrayList<LocalInspectionToolWrapper>(tools.size());
    for (    InspectionToolWrapper tool : tools) {
      if (tool instanceof LocalInspectionToolWrapper) {
        toolsCopy.add((LocalInspectionToolWrapper)tool.createCopy());
      }
    }
    if (toolsCopy.isEmpty()) {
      continue;
    }
    final InspectionManagerEx managerEx=(InspectionManagerEx)InspectionManager.getInstance(project);
    final GlobalInspectionContextImpl context=managerEx.createNewGlobalContext(false);
    for (    InspectionToolWrapper toolWrapper : toolsCopy) {
      toolWrapper.initialize(context);
    }
    ((RefManagerImpl)context.getRefManager()).inspectionReadActionStarted();
    ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
    Runnable inspect=new Runnable(){
      @Override public void run(){
        pass.doInspectInBatch(context,managerEx,toolsCopy);
      }
    }
;
    if (indicator == null) {
      ProgressManager.getInstance().executeProcessUnderProgress(inspect,new ProgressIndicatorBase());
    }
 else {
      inspect.run();
    }
    for (    HighlightInfo info : pass.getInfos()) {
      final PsiElement element=CollectHighlightsUtil.findCommonParent(myFile,info.startOffset,info.endOffset);
      if (element != null) {
        addOccurrence(element);
      }
    }
  }
}
