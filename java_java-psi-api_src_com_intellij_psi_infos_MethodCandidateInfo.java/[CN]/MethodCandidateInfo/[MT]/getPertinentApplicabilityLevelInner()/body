{
  if (myArgumentList == null || !PsiUtil.isLanguageLevel8OrHigher(myArgumentList)) {
    return getApplicabilityLevel();
  }
  @ApplicabilityLevelConstant int level;
  PsiSubstitutor substitutor=getSubstitutor(false);
  Map<PsiElement,CurrentCandidateProperties> map=CURRENT_CANDIDATE.get();
  if (map == null) {
    map=ContainerUtil.createConcurrentWeakMap();
    CURRENT_CANDIDATE.set(map);
  }
  final PsiMethod method=getElement();
  final CurrentCandidateProperties properties=new CurrentCandidateProperties(method,substitutor,isVarargs(),true);
  final CurrentCandidateProperties alreadyThere=map.put(getMarkerList(),properties);
  try {
    PsiType[] argumentTypes=getArgumentTypes();
    if (argumentTypes == null) {
      return ApplicabilityLevel.NOT_APPLICABLE;
    }
    level=PsiUtil.getApplicabilityLevel(method,substitutor,argumentTypes,myLanguageLevel);
    if (!isVarargs() && level < ApplicabilityLevel.FIXED_ARITY) {
      return ApplicabilityLevel.NOT_APPLICABLE;
    }
  }
  finally {
    if (alreadyThere == null) {
      map.remove(getMarkerList());
    }
 else {
      map.put(getMarkerList(),alreadyThere);
    }
  }
  if (level > ApplicabilityLevel.NOT_APPLICABLE && !isTypeArgumentsApplicable(false)) {
    level=ApplicabilityLevel.NOT_APPLICABLE;
  }
  return level;
}
