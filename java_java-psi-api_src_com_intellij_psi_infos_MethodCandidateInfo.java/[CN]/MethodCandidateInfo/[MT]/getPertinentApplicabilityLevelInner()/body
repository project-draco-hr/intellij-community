{
  if (myArgumentList == null || !PsiUtil.isLanguageLevel8OrHigher(myArgumentList)) {
    return getApplicabilityLevel();
  }
  final PsiMethod method=getElement();
  if (isToInferApplicability()) {
    if (!isOverloadCheck()) {
      getSubstitutor(false);
    }
    if (myInferenceError != null || isPotentiallyCompatible() != ThreeState.YES) {
      return ApplicabilityLevel.NOT_APPLICABLE;
    }
    return isVarargs() ? ApplicabilityLevel.VARARGS : ApplicabilityLevel.FIXED_ARITY;
  }
  final PsiSubstitutor substitutor=getSubstitutor(false);
  @ApplicabilityLevelConstant int level=computeForOverloadedCandidate(new Computable<Integer>(){
    @Override public Integer compute(){
      PsiType[] argumentTypes=getArgumentTypes();
      if (argumentTypes == null) {
        return ApplicabilityLevel.NOT_APPLICABLE;
      }
      int level=PsiUtil.getApplicabilityLevel(method,substitutor,argumentTypes,myLanguageLevel);
      if (!isVarargs() && level < ApplicabilityLevel.FIXED_ARITY) {
        return ApplicabilityLevel.NOT_APPLICABLE;
      }
      return level;
    }
  }
,substitutor,isVarargs(),true);
  if (level > ApplicabilityLevel.NOT_APPLICABLE && !isTypeArgumentsApplicable(new Computable<PsiSubstitutor>(){
    @Override public PsiSubstitutor compute(){
      return substitutor;
    }
  }
)) {
    level=ApplicabilityLevel.NOT_APPLICABLE;
  }
  return level;
}
