{
  return computeForOverloadedCandidate(new Computable<PsiSubstitutor>(){
    @Override public PsiSubstitutor compute(){
      final PsiMethod method=MethodCandidateInfo.this.getElement();
      PsiTypeParameter[] typeParameters=method.getTypeParameters();
      if (MethodCandidateInfo.this.isRawSubstitution()) {
        return JavaPsiFacade.getInstance(method.getProject()).getElementFactory().createRawSubstitutor(mySubstitutor,typeParameters);
      }
      final PsiElement parent=MethodCandidateInfo.this.getParent();
      if (parent == null)       return PsiSubstitutor.EMPTY;
      Project project=method.getProject();
      JavaPsiFacade javaPsiFacade=JavaPsiFacade.getInstance(project);
      return javaPsiFacade.getResolveHelper().inferTypeArguments(typeParameters,method.getParameterList().getParameters(),arguments,mySubstitutor,parent,policy,myLanguageLevel);
    }
  }
,super.getSubstitutor(),policy.isVarargsIgnored() || isVarargs(),!includeReturnConstraint);
}
