{
  Map<PsiElement,CurrentCandidateProperties> map=CURRENT_CANDIDATE.get();
  if (map == null) {
    map=ContainerUtil.createConcurrentWeakMap();
    CURRENT_CANDIDATE.set(map);
  }
  final PsiMethod method=getElement();
  final PsiElement argumentList=getMarkerList();
  final CurrentCandidateProperties alreadyThere=map.put(argumentList,new CurrentCandidateProperties(this,super.getSubstitutor(),policy.isVarargsIgnored() || isVarargs(),!includeReturnConstraint));
  try {
    PsiTypeParameter[] typeParameters=method.getTypeParameters();
    if (!method.hasModifierProperty(PsiModifier.STATIC)) {
      final PsiClass containingClass=method.getContainingClass();
      if (containingClass != null && PsiUtil.isRawSubstitutor(containingClass,mySubstitutor)) {
        Project project=containingClass.getProject();
        JavaPsiFacade javaPsiFacade=JavaPsiFacade.getInstance(project);
        return javaPsiFacade.getElementFactory().createRawSubstitutor(mySubstitutor,typeParameters);
      }
    }
    final PsiElement parent=getParent();
    if (parent == null)     return PsiSubstitutor.EMPTY;
    Project project=method.getProject();
    JavaPsiFacade javaPsiFacade=JavaPsiFacade.getInstance(project);
    return javaPsiFacade.getResolveHelper().inferTypeArguments(typeParameters,method.getParameterList().getParameters(),arguments,mySubstitutor,parent,policy,myLanguageLevel);
  }
  finally {
    if (alreadyThere == null) {
      map.remove(argumentList);
    }
 else {
      map.put(argumentList,alreadyThere);
    }
  }
}
