{
  ScopedClassHierarchy hierarchy=getHierarchy(derivedClass,scope);
  Map<PsiClass,PsiClassType.ClassResolveResult> map=hierarchy.mySupersWithSubstitutors;
  if (map == null) {
    map=ContainerUtil.newTroveMap(CLASS_HASHING_STRATEGY);
    hierarchy.visitType(JavaPsiFacade.getElementFactory(derivedClass.getProject()).createType(derivedClass,PsiSubstitutor.EMPTY),map);
    hierarchy.mySupersWithSubstitutors=map;
  }
  PsiClassType.ClassResolveResult resolveResult=map.get(superClass);
  if (resolveResult == null)   return null;
  PsiClass cachedClass=assertNotNull(resolveResult.getElement());
  PsiSubstitutor cachedSubstitutor=resolveResult.getSubstitutor();
  return cachedClass == superClass ? cachedSubstitutor : mirrorSubstitutor(superClass,cachedClass,cachedSubstitutor);
}
