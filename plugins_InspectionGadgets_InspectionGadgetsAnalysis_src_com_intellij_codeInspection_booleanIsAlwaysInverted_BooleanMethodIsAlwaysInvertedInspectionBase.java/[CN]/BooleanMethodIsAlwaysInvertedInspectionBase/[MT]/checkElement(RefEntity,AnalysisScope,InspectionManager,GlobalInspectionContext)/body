{
  if (refEntity instanceof RefMethod) {
    RefMethod refMethod=(RefMethod)refEntity;
    if (!refMethod.isReferenced())     return null;
    if (hasNonInvertedCalls(refMethod))     return null;
    if (!refMethod.getSuperMethods().isEmpty())     return null;
    final PsiMethod psiMethod=(PsiMethod)refMethod.getElement();
    final PsiIdentifier psiIdentifier=psiMethod.getNameIdentifier();
    if (psiIdentifier != null) {
      final Collection<RefElement> inReferences=refMethod.getInReferences();
      if (inReferences.size() == 1) {
        final RefElement refElement=inReferences.iterator().next();
        final PsiElement usagesContainer=refElement.getElement();
        if (usagesContainer == null)         return null;
        if (ReferencesSearch.search(psiMethod,new LocalSearchScope(usagesContainer)).forEach(new Processor<PsiReference>(){
          private final Set<PsiReference> myFoundRefs=new HashSet<>();
          @Override public boolean process(          PsiReference reference){
            myFoundRefs.add(reference);
            return myFoundRefs.size() < 2;
          }
        }
))         return null;
      }
      return new ProblemDescriptor[]{manager.createProblemDescriptor(psiIdentifier,InspectionsBundle.message("boolean.method.is.always.inverted.problem.descriptor"),(LocalQuickFix)getQuickFix(null),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false)};
    }
  }
  return null;
}
