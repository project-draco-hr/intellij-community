{
  final PsiMethodCallExpression call=(PsiMethodCallExpression)element;
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  @NonNls final String fromMethodName=methodExpression.getReferenceName();
  @NonNls final String toMethodName;
  if ("assertTrue".equals(fromMethodName)) {
    toMethodName="assertFalse";
  }
 else {
    toMethodName="assertTrue";
  }
  @NonNls final StringBuilder newCall=new StringBuilder();
  final PsiElement qualifier=methodExpression.getQualifier();
  if (qualifier == null) {
    final PsiClass containingClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
    if (!InheritanceUtil.isInheritor(containingClass,"junit.framework.Assert") && !ImportUtils.addStaticImport("org.junit.Assert",toMethodName,element)) {
      newCall.append("org.junit.Assert.");
    }
  }
 else {
    newCall.append(qualifier.getText()).append('.');
  }
  newCall.append(toMethodName).append('(');
  final PsiExpressionList argumentList=call.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length == 1) {
    newCall.append(BoolUtils.getNegatedExpressionText(arguments[0]));
  }
 else {
    newCall.append(arguments[0].getText()).append(',');
    newCall.append(BoolUtils.getNegatedExpressionText(arguments[1]));
  }
  newCall.append(')');
  PsiReplacementUtil.replaceExpressionAndShorten(call,newCall.toString());
}
