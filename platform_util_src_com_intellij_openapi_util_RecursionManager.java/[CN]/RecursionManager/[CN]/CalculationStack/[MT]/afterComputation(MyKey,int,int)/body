{
  exits++;
  if (sizeAfter != progressMap.size()) {
    LOG.error("Map size changed: " + progressMap.size() + " "+ sizeAfter+ " "+ realKey.userObject);
  }
  if (depth != progressMap.size()) {
    LOG.error("Inconsistent depth after computation; depth=" + depth + "; map="+ progressMap);
  }
  Integer value=progressMap.remove(realKey);
  depth--;
  toMemoize.remove(realKey);
  key2ReentrancyDuringItsCalculation.remove(realKey);
  if (depth == 0) {
    intermediateCache.clear();
    if (!key2ReentrancyDuringItsCalculation.isEmpty()) {
      LOG.error("non-empty key2ReentrancyDuringItsCalculation: " + new HashMap<MyKey,MyKey>(key2ReentrancyDuringItsCalculation));
    }
    if (!toMemoize.isEmpty()) {
      LOG.error("non-empty toMemoize: " + new HashSet<MyKey>(toMemoize));
    }
  }
  if (sizeBefore != progressMap.size()) {
    LOG.error("Map size doesn't decrease: " + progressMap.size() + " "+ sizeBefore+ " "+ realKey.userObject);
  }
  reentrancyCount=value;
  checkZero();
}
