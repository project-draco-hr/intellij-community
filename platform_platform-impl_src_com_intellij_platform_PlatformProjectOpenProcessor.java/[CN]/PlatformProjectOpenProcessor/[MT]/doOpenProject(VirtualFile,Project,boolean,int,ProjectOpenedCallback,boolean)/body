{
  VirtualFile baseDir=virtualFile;
  boolean dummyProject=false;
  String dummyProjectName=null;
  if (!baseDir.isDirectory()) {
    baseDir=virtualFile.getParent();
    while (baseDir != null) {
      if (new File(FileUtil.toSystemDependentName(baseDir.getPath()),Project.DIRECTORY_STORE_FOLDER).exists()) {
        break;
      }
      baseDir=baseDir.getParent();
    }
    if (baseDir == null) {
      if (Registry.is("ide.open.file.in.temp.project.dir")) {
        try {
          dummyProjectName=virtualFile.getName();
          File directory=FileUtil.createTempDirectory(dummyProjectName,null,true);
          baseDir=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(directory);
          dummyProject=true;
        }
 catch (        IOException ex) {
          LOG.error(ex);
        }
      }
      if (baseDir == null)       baseDir=virtualFile.getParent();
    }
  }
  final File projectDir=new File(FileUtil.toSystemDependentName(baseDir.getPath()),Project.DIRECTORY_STORE_FOLDER);
  Project[] openProjects=ProjectManager.getInstance().getOpenProjects();
  if (!forceOpenInNewFrame && openProjects.length > 0) {
    if (projectToClose == null) {
      projectToClose=openProjects[openProjects.length - 1];
    }
    if (ProjectAttachProcessor.canAttachToProject()) {
      final OpenOrAttachDialog dialog=new OpenOrAttachDialog(projectToClose,isReopen,isReopen ? "Reopen Project" : "Open Project");
      dialog.show();
      if (dialog.getExitCode() != DialogWrapper.OK_EXIT_CODE) {
        return null;
      }
      if (dialog.isReplace()) {
        if (!ProjectUtil.closeAndDispose(projectToClose))         return null;
      }
 else       if (dialog.isAttach()) {
        if (attachToProject(projectToClose,projectDir,callback))         return null;
      }
    }
 else {
      int exitCode=ProjectUtil.confirmOpenNewProject(false);
      if (exitCode == GeneralSettings.OPEN_PROJECT_SAME_WINDOW) {
        if (!ProjectUtil.closeAndDispose(projectToClose))         return null;
      }
 else       if (exitCode != GeneralSettings.OPEN_PROJECT_NEW_WINDOW) {
        return null;
      }
    }
  }
  boolean runConfigurators=true, newProject=false;
  ProjectManagerEx projectManager=ProjectManagerEx.getInstanceEx();
  Project project=null;
  if (projectDir.exists()) {
    try {
      for (      ProjectOpenProcessor processor : ProjectOpenProcessor.EXTENSION_POINT_NAME.getExtensions()) {
        processor.refreshProjectFiles(projectDir);
      }
      project=projectManager.convertAndLoadProject(baseDir.getPath());
      runConfigurators=project != null && ModuleManager.getInstance(project).getModules().length > 0;
    }
 catch (    Exception e) {
      LOG.error(e);
    }
  }
 else {
    projectDir.mkdirs();
    String projectName=dummyProject ? dummyProjectName : projectDir.getParentFile().getName();
    project=projectManager.newProject(projectName,projectDir.getParent(),true,dummyProject);
    newProject=true;
  }
  if (project == null) {
    WelcomeFrame.showIfNoProjectOpened();
    return null;
  }
  ProjectBaseDirectory.getInstance(project).setBaseDir(baseDir);
  Module module=runConfigurators ? runDirectoryProjectConfigurators(baseDir,project) : ModuleManager.getInstance(project).getModules()[0];
  if (runConfigurators && dummyProject) {
    ModuleRootModificationUtil.updateModel(module,new Consumer<ModifiableRootModel>(){
      @Override public void consume(      ModifiableRootModel model){
        ContentEntry[] entries=model.getContentEntries();
        if (entries.length == 1)         model.removeContentEntry(entries[0]);
        model.addContentEntry(virtualFile);
      }
    }
);
  }
  if (newProject) {
    project.save();
  }
  openFileFromCommandLine(project,virtualFile,line);
  if (!projectManager.openProject(project)) {
    WelcomeFrame.showIfNoProjectOpened();
    final Project finalProject=project;
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      @Override public void run(){
        Disposer.dispose(finalProject);
      }
    }
);
    return project;
  }
  if (callback != null) {
    callback.projectOpened(project,module);
  }
  return project;
}
