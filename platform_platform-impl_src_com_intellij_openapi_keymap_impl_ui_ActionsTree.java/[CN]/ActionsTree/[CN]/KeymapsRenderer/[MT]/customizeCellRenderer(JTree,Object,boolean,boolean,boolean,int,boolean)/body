{
  myRow=row;
  myHaveLink=false;
  myLink.getTreeCellRendererComponent(tree,value,selected,expanded,leaf,row,hasFocus);
  final boolean showIcons=UISettings.getInstance().SHOW_ICONS_IN_MENUS;
  Keymap originalKeymap=myKeymap != null ? myKeymap.getParent() : null;
  Icon icon=null;
  String text;
  String actionId=null;
  boolean bound=false;
  setToolTipText(null);
  if (value instanceof DefaultMutableTreeNode) {
    DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
    Object userObject=node.getUserObject();
    boolean changed;
    if (userObject instanceof Group) {
      Group group=(Group)userObject;
      actionId=group.getId();
      text=group.getName();
      changed=originalKeymap != null && isGroupChanged(group,originalKeymap,myKeymap);
      icon=group.getIcon();
      if (icon == null) {
        icon=CLOSE_ICON;
      }
    }
 else     if (userObject instanceof String) {
      actionId=(String)userObject;
      bound=myShowBoundActions && ((KeymapImpl)myKeymap).isActionBound(actionId);
      AnAction action=ActionManager.getInstance().getAction(actionId);
      if (action != null) {
        text=action.getTemplatePresentation().getText();
        if (text == null || text.length() == 0) {
          text=actionId;
        }
        Icon actionIcon=action.getTemplatePresentation().getIcon();
        if (actionIcon != null) {
          icon=actionIcon;
        }
        setToolTipText(action.getTemplatePresentation().getDescription());
      }
 else {
        text=actionId;
      }
      changed=originalKeymap != null && isActionChanged(actionId,originalKeymap,myKeymap);
    }
 else     if (userObject instanceof QuickList) {
      QuickList list=(QuickList)userObject;
      icon=AllIcons.Actions.QuickList;
      text=list.getName();
      changed=originalKeymap != null && isActionChanged(list.getActionId(),originalKeymap,myKeymap);
    }
 else     if (userObject instanceof Separator) {
      changed=false;
      text="-------------";
    }
 else     if (userObject instanceof Hyperlink) {
      getIpad().right=0;
      myLink.getIpad().left=0;
      myHaveLink=true;
      Hyperlink link=(Hyperlink)userObject;
      changed=false;
      text="";
      append(link.getLinkText(),link.getTextAttributes(),link);
      icon=link.getIcon();
      setIcon(getEvenIcon(link.getIcon()));
      Rectangle treeVisibleRect=tree.getVisibleRect();
      TreePath path=tree.getPathForRow(row);
      int rowX=path != null ? getRowX((BasicTreeUI)tree.getUI(),row,path.getPathCount() - 1) : 0;
      setupLinkDimensions(treeVisibleRect,rowX);
    }
 else {
      throw new IllegalArgumentException("unknown userObject: " + userObject);
    }
    if (showIcons) {
      setIcon(getEvenIcon(icon));
    }
    Color foreground;
    if (selected) {
      foreground=UIUtil.getTreeForeground(true,hasFocus);
    }
 else {
      if (changed) {
        foreground=PlatformColors.BLUE;
      }
 else {
        foreground=UIUtil.getTreeForeground();
      }
      if (bound) {
        foreground=JBColor.MAGENTA;
      }
    }
    if (!myHaveLink) {
      Color background=selected ? UIUtil.getTreeSelectionBackground() : UIUtil.getTreeTextBackground();
      SearchUtil.appendFragments(myFilter,text,SimpleTextAttributes.STYLE_PLAIN,foreground,background,this);
      if (actionId != null && myPaintInternalInfo) {
        String pluginName=myPluginNames.get(actionId);
        if (pluginName != null) {
          Group parentGroup=(Group)((DefaultMutableTreeNode)node.getParent()).getUserObject();
          if (pluginName.equals(parentGroup.getName()))           pluginName=null;
        }
        append("   ");
        append(pluginName != null ? actionId + " (" + pluginName+ ")" : actionId,SimpleTextAttributes.GRAYED_SMALL_ATTRIBUTES);
      }
    }
  }
  putClientProperty(ExpandableItemsHandler.RENDERER_DISABLED,myHaveLink);
}
