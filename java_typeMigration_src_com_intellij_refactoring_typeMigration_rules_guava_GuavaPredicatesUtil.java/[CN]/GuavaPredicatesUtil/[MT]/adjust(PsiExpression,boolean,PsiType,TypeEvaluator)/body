{
  if (expression instanceof PsiMethodReferenceExpression) {
    final PsiExpression qualifier=((PsiMethodReferenceExpression)expression).getQualifierExpression();
    final PsiType evaluatedType=evaluator.evaluateType(qualifier);
    final PsiClass evaluateClass;
    if (evaluatedType != null && (evaluateClass=PsiTypesUtil.getPsiClass(evaluatedType)) != null && GuavaPredicateConversionRule.JAVA_PREDICATE.equals(evaluateClass.getQualifiedName())) {
      return adjust((PsiExpression)expression.replace(qualifier),insertTypeCase,targetType,evaluator);
    }
  }
  if (expression instanceof PsiFunctionalExpression) {
    if (insertTypeCase) {
      return "((" + targetType.getCanonicalText() + ")"+ expression.getText()+ ")";
    }
  }
 else   if (expression instanceof PsiMethodCallExpression || expression instanceof PsiReferenceExpression) {
    if (isUnconverted(evaluator.evaluateType(expression))) {
      expression=(PsiExpression)expression.replace(JavaPsiFacade.getElementFactory(expression.getProject()).createExpressionFromText(expression.getText() + "::apply",expression));
      return adjust(expression,insertTypeCase,targetType,evaluator);
    }
  }
  return expression.getText();
}
