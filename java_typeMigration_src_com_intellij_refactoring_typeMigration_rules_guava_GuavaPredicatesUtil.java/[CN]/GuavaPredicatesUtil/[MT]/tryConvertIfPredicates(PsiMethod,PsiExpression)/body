{
  final String name=method.getName();
  if (name.equals("alwaysTrue") || name.equals("alwaysFalse")) {
    return new TypeConversionDescriptorWithLocalVariable(name,"$x$ -> " + name.contains("True") + "");
  }
 else   if (name.equals("isNull") || name.equals("notNull")) {
    final String operation=name.equals("isNull") ? "==" : "!=";
    return new TypeConversionDescriptorWithLocalVariable(name,"$x$ -> $x$" + operation + " null");
  }
 else   if (name.equals("equalTo")) {
    return new TypeConversionDescriptorWithLocalVariable("equalTo","$x$ -> java.util.Objects.equals($x$, $v$)");
  }
  if (!isConvertablePredicatesMethod(method,(PsiMethodCallExpression)context))   return null;
  if (PREDICATES_AND_OR.contains(name) && canMigrateAndOrOr((PsiMethodCallExpression)context)) {
    return new AndOrOrConversionDescriptor(GuavaConversionUtil.addTypeParameters(GuavaLambda.PREDICATE.getJavaAnalogueClassQName(),context.getType(),context));
  }
 else   if (PREDICATES_NOT.equals(name)) {
    return new NotConversionDescriptor(GuavaConversionUtil.addTypeParameters(GuavaLambda.PREDICATE.getJavaAnalogueClassQName(),context.getType(),context));
  }
  return null;
}
