{
  if (!(myDeploymentSource instanceof ModuleDeploymentSource)) {
    return;
  }
  ModuleDeploymentSource moduleSource=(ModuleDeploymentSource)myDeploymentSource;
  Module module=moduleSource.getModule();
  if (module == null) {
    return;
  }
  File contentRootFile=myDeploymentSource.getFile();
  if (contentRootFile == null) {
    return;
  }
  final Project project=module.getProject();
  if (myGitRepositoryManager == null) {
    myGitRepositoryManager=GitUtil.getRepositoryManager(project);
  }
  if (myGit == null) {
    myGit=ServiceManager.getService(Git.class);
    if (myGit == null) {
      return;
    }
  }
  VirtualFile contentRoot=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(contentRootFile);
  if (contentRoot == null) {
    return;
  }
  GitRepository repository=myGitRepositoryManager.getRepositoryForRoot(contentRoot);
  if (repository == null) {
    return;
  }
  String expectedName=settings.getDeploymentSourceName(myDeploymentSource);
  boolean unexpectedNameFound=false;
  for (  GitRemote remote : repository.getRemotes()) {
    for (    String url : remote.getUrls()) {
      Matcher matcher=gitUrlPattern.matcher(url);
      if (matcher.matches()) {
        String matchedName=matcher.group(1);
        if (matchedName.equals(expectedName)) {
          return;
        }
 else {
          unexpectedNameFound=true;
          break;
        }
      }
    }
  }
  if (!unexpectedNameFound) {
    return;
  }
  RuntimeConfigurationWarning warning=new RuntimeConfigurationWarning("Cloud Git URL found in repository, but it doesn't match the run configuration");
  warning.setQuickFix(new Runnable(){
    @Override public void run(){
      CloudGitApplication application=new CloudConnectionTask<CloudGitApplication,SC,T,SR>(project,"Searching for application",myServer){
        @Override protected CloudGitApplication run(        SR serverRuntime) throws ServerRuntimeException {
          CloudGitDeploymentRuntime deploymentRuntime=(CloudGitDeploymentRuntime)serverRuntime.createDeploymentRuntime(myDeploymentSource,settings,project);
          return deploymentRuntime.findApplication4Repository();
        }
      }
.performSync();
      if (application == null) {
        Messages.showErrorDialog(mySettingsEditor.getComponent(),"No application matching repository URL(s) found in account");
      }
 else {
        T fixedSettings=mySettingsEditor.getFactory().create();
        fixedSettings.setDefaultDeploymentName(false);
        fixedSettings.setDeploymentName(application.getName());
        mySettingsEditor.resetFrom(fixedSettings);
      }
    }
  }
);
  throw warning;
}
