{
  String linkedExternalProjectPath=null;
  for (  ExternalSystemManager<?,?,?,?,?> manager : getAllManagers()) {
    ProjectSystemId externalSystemId=manager.getSystemId();
    AbstractExternalSystemSettings systemSettings=getSettings(ideProject,externalSystemId);
    Collection projectsSettings=systemSettings.getLinkedProjectsSettings();
    int linkedProjectsNumber=projectsSettings.size();
    if (linkedProjectsNumber > 1) {
      return false;
    }
 else     if (linkedProjectsNumber == 1) {
      if (linkedExternalProjectPath == null) {
        linkedExternalProjectPath=((ExternalProjectSettings)projectsSettings.iterator().next()).getExternalProjectPath();
      }
 else {
        return false;
      }
    }
  }
  ProjectData projectData=externalProject.getData();
  if (linkedExternalProjectPath != null && !linkedExternalProjectPath.equals(projectData.getLinkedExternalProjectPath())) {
    return false;
  }
  Set<String> externalModulePaths=ContainerUtilRt.newHashSet();
  for (  DataNode<ModuleData> moduleNode : findAll(externalProject,ProjectKeys.MODULE)) {
    if (!moduleNode.isIgnored()) {
      externalModulePaths.add(moduleNode.getData().getLinkedExternalProjectPath());
    }
  }
  externalModulePaths.remove(linkedExternalProjectPath);
  PlatformFacade platformFacade=ServiceManager.getService(PlatformFacade.class);
  for (  Module module : platformFacade.getModules(ideProject)) {
    String path=getExternalProjectPath(module);
    if (!StringUtil.isEmpty(path) && !externalModulePaths.remove(path)) {
      return false;
    }
  }
  return externalModulePaths.isEmpty();
}
