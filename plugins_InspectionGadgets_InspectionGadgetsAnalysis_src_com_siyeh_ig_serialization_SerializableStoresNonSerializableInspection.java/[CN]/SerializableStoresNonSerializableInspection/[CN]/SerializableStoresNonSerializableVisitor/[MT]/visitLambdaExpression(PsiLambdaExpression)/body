{
  super.visitLambdaExpression(lambda);
  final PsiType type=lambda.getFunctionalInterfaceType();
  if (!(type instanceof PsiClassType)) {
    return;
  }
  final PsiClassType classType=(PsiClassType)type;
  final PsiClass aClass=classType.resolve();
  if (!SerializationUtils.isSerializable(aClass)) {
    return;
  }
  final LocalVariableReferenceFinder visitor=new LocalVariableReferenceFinder(lambda);
  lambda.accept(visitor);
}
