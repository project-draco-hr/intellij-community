{
  FilteredRequestorImpl requestor=new FilteredRequestorImpl(myProject);
  requestor.readTo(parentNode,this);
  try {
    setEnabled(Boolean.valueOf(JDOMExternalizerUtil.readField(parentNode,"ENABLED")));
  }
 catch (  Exception ignored) {
  }
  try {
    setLogEnabled(Boolean.valueOf(JDOMExternalizerUtil.readField(parentNode,"LOG_ENABLED")));
  }
 catch (  Exception ignored) {
  }
  try {
    String logMessage=JDOMExternalizerUtil.readField(parentNode,LOG_MESSAGE_OPTION_NAME);
    if (logMessage != null && !logMessage.isEmpty()) {
      TextWithImportsImpl text=new TextWithImportsImpl(CodeFragmentKind.EXPRESSION,logMessage);
      XDebuggerHistoryManager.getInstance(myProject).addRecentExpression(DefaultLogExpressionComboBoxPanel.HISTORY_KEY,text.getText());
      if (Boolean.valueOf(JDOMExternalizerUtil.readField(parentNode,"LOG_EXPRESSION_ENABLED"))) {
        setLogMessage(text);
      }
    }
  }
 catch (  Exception ignored) {
  }
  try {
    setRemoveAfterHit(Boolean.valueOf(JDOMExternalizerUtil.readField(parentNode,"REMOVE_AFTER_HIT")));
  }
 catch (  Exception ignored) {
  }
}
