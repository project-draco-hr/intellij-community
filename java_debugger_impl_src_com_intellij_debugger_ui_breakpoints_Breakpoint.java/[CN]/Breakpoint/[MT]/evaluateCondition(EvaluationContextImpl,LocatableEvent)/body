{
  final DebugProcessImpl debugProcess=context.getDebugProcess();
  if (isCountFilterEnabled()) {
    debugProcess.getVirtualMachineProxy().suspend();
    debugProcess.getRequestsManager().deleteRequest(this);
    ((Breakpoint)this).createRequest(debugProcess);
    debugProcess.getVirtualMachineProxy().resume();
  }
  if (isInstanceFiltersEnabled()) {
    Value value=context.getThisObject();
    if (value != null) {
      ObjectReference reference=(ObjectReference)value;
      if (!hasObjectID(reference.uniqueID())) {
        return false;
      }
    }
  }
  if (isClassFiltersEnabled() && !typeMatchesClassFilters(calculateEventClass(context,event),getClassFilters(),getClassExclusionFilters())) {
    return false;
  }
  if (!isConditionEnabled() || getCondition().getText().isEmpty()) {
    return true;
  }
  StackFrameProxyImpl frame=context.getFrameProxy();
  if (frame != null) {
    Location location=frame.location();
    if (location != null) {
      ThreeState result=debugProcess.getPositionManager().evaluateCondition(context,frame,location,getCondition().getText());
      if (result != ThreeState.UNSURE) {
        return result == ThreeState.YES;
      }
    }
  }
  try {
    Project project=context.getProject();
    SourcePosition contextSourcePosition=ContextUtil.getSourcePosition(context);
    ExpressionEvaluator evaluator=DebuggerInvocationUtil.commitAndRunReadAction(project,new EvaluatingComputable<ExpressionEvaluator>(){
      @Override public ExpressionEvaluator compute() throws EvaluateException {
        PsiElement contextPsiElement=ContextUtil.getContextElement(contextSourcePosition);
        if (contextPsiElement == null) {
          contextPsiElement=getEvaluationElement();
        }
        return EvaluatorBuilderImpl.build(getCondition(),contextPsiElement,contextSourcePosition,project);
      }
    }
);
    return DebuggerUtilsEx.evaluateBoolean(evaluator,context);
  }
 catch (  EvaluateException ex) {
    if (ex.getCause() instanceof VMDisconnectedException) {
      return false;
    }
    throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("error.failed.evaluating.breakpoint.condition",getCondition(),ex.getMessage()));
  }
}
