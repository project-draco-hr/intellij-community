{
  registrar.registerReferenceProvider(TYPE_COMMENT_PATTERN,new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext context){
      final PsiComment comment=(PsiComment)element;
      final String wholeText=comment.getText();
      final String typeText=PyTypingTypeProvider.getTypeCommentValue(wholeText);
      if (typeText != null) {
        final int prefixLength=wholeText.length() - typeText.length();
        final List<PsiReference> references=parseTypeReferences(element,typeText,prefixLength);
        return ArrayUtil.toObjectArray(references,PsiReference.class);
      }
      return PsiReference.EMPTY_ARRAY;
    }
  }
);
}
