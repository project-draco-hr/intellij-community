{
  final List<PsiReference> result=new ArrayList<PsiReference>();
  final PyTypeParser.ParseResult parseResult=PyTypeParser.parsePep484FunctionTypeComment(anchor,typeText);
  final Map<TextRange,? extends PyType> types=parseResult.getTypes();
  final Map<? extends PyType,TextRange> fullRanges=parseResult.getFullRanges();
  for (  Map.Entry<TextRange,? extends PyType> pair : types.entrySet()) {
    final PyType t=pair.getValue();
    final TextRange range=pair.getKey().shiftRight(offsetInComment);
    final TextRange fullRange=fullRanges.containsKey(t) ? fullRanges.get(t).shiftRight(offsetInComment) : range;
    final PyImportElement importElement=parseResult.getImports().get(t);
    result.add(new DocStringTypeReference(anchor,range,fullRange,t,importElement));
  }
  return result;
}
