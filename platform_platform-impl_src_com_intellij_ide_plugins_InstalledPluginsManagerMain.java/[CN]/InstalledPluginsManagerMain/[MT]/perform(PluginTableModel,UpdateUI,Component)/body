{
  final ActionCallback callback=new ActionCallback();
  final FileChooserDescriptor descriptor=new FileChooserDescriptor(false,false,true,true,false,false){
    @Override public boolean isFileSelectable(    VirtualFile file){
      final String extension=file.getExtension();
      return Comparing.strEqual(extension,"jar") || Comparing.strEqual(extension,"zip");
    }
  }
;
  descriptor.setTitle("Choose Plugin File");
  descriptor.setDescription("JAR and ZIP archives are accepted");
  FileChooser.chooseFile(descriptor,null,parent,null,new Consumer<VirtualFile>(){
    @Override public void consume(    @NotNull VirtualFile virtualFile){
      final File file=VfsUtilCore.virtualToIoFile(virtualFile);
      try {
        final IdeaPluginDescriptorImpl pluginDescriptor=PluginDownloader.loadDescriptionFromJar(file);
        if (pluginDescriptor == null) {
          MessagesEx.showErrorDialog(parent,"Fail to load plugin descriptor from file " + file.getName(),CommonBundle.getErrorTitle());
          return;
        }
        if (PluginManagerCore.isIncompatible(pluginDescriptor)) {
          MessagesEx.showErrorDialog(parent,"Plugin " + pluginDescriptor.getName() + " is incompatible with current installation",CommonBundle.getErrorTitle());
          return;
        }
        final IdeaPluginDescriptor alreadyInstalledPlugin=PluginManager.getPlugin(pluginDescriptor.getPluginId());
        if (alreadyInstalledPlugin != null) {
          final File oldFile=alreadyInstalledPlugin.getPath();
          if (oldFile != null) {
            StartupActionScriptManager.addActionCommand(new StartupActionScriptManager.DeleteCommand(oldFile));
          }
        }
        if (((InstalledPluginsTableModel)model).appendOrUpdateDescriptor(pluginDescriptor)) {
          PluginDownloader.install(file,file.getName(),false);
          checkInstalledPluginDependencies(model,pluginDescriptor,parent);
          if (ui != null) {
            ui.update(file,pluginDescriptor);
          }
          callback.setDone();
        }
 else {
          MessagesEx.showInfoMessage(parent,"Plugin " + pluginDescriptor.getName() + " was already installed",CommonBundle.getWarningTitle());
        }
      }
 catch (      IOException ex) {
        MessagesEx.showErrorDialog(parent,ex.getMessage(),CommonBundle.getErrorTitle());
      }
    }
  }
);
  return callback;
}
