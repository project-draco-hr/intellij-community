{
  super.visitAnonymousClass(aClass);
  final PsiClassInitializer[] initializers=aClass.getInitializers();
  if (initializers.length != 1) {
    return;
  }
  final PsiClassInitializer initializer=initializers[0];
  if (initializer.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  final PsiField[] fields=aClass.getFields();
  if (fields.length != 0) {
    return;
  }
  final PsiMethod[] methods=aClass.getMethods();
  if (methods.length != 0) {
    return;
  }
  final PsiClass[] innerClasses=aClass.getInnerClasses();
  if (innerClasses.length != 0) {
    return;
  }
  final PsiJavaCodeReferenceElement reference=aClass.getBaseClassReference();
  if (reference.resolve() == null) {
    return;
  }
  registerClassError(aClass,aClass);
}
