{
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    public void run(){
      if (delay > 0) {
        try {
          Thread.sleep(delay);
        }
 catch (        InterruptedException ignore) {
        }
      }
      if (!TestRunnerService.getInstance(project).getProjectConfiguration().isEmpty())       return;
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          String testRunner="";
          final Module[] modules=ModuleManager.getInstance(project).getModules();
          for (          Module module : modules) {
            if (!testRunner.isEmpty())             break;
            final PyFile setupPy=PyPackageUtil.findSetupPy(module);
            if (setupPy == null)             continue;
            final PyCallExpression setupCall=PyPackageUtil.findSetupCall(setupPy);
            if (setupCall == null)             continue;
            for (            PyExpression arg : setupCall.getArguments()) {
              if (arg instanceof PyKeywordArgument) {
                final PyKeywordArgument kwarg=(PyKeywordArgument)arg;
                if ("test_loader".equals(kwarg.getKeyword()) || "test_suite".equals(kwarg.getKeyword())) {
                  final PyExpression value=kwarg.getValueExpression();
                  if (value instanceof PyStringLiteralExpression) {
                    final String stringValue=((PyStringLiteralExpression)value).getStringValue();
                    if (stringValue.contains(PyNames.NOSE_TEST)) {
                      testRunner=PythonTestConfigurationsModel.PYTHONS_NOSETEST_NAME;
                      break;
                    }
                    if (stringValue.contains(PyNames.PY_TEST)) {
                      testRunner=PythonTestConfigurationsModel.PY_TEST_NAME;
                      break;
                    }
                    if (stringValue.contains(PyNames.AT_TEST)) {
                      testRunner=PythonTestConfigurationsModel.PYTHONS_ATTEST_NAME;
                      break;
                    }
                  }
                }
              }
            }
          }
          final Collection<VirtualFile> filenames=FilenameIndex.getAllFilesByExt(project,PythonFileType.INSTANCE.getDefaultExtension(),GlobalSearchScope.projectScope(project));
          for (          VirtualFile file : filenames) {
            if (file.getName().startsWith("test")) {
              if (testRunner.isEmpty())               testRunner=checkImports(file,project);
            }
 else {
              checkDocstring(file,project);
            }
          }
          if (testRunner.isEmpty()) {
            for (            Module module : ModuleManager.getInstance(project).getModules()) {
              final Sdk sdk=PythonSdkType.findPythonSdk(module);
              if (sdk != null && sdk.getSdkType() instanceof PythonSdkType && testRunner.isEmpty()) {
                String sdkHome=sdk.getHomePath();
                if (VFSTestFrameworkListener.isTestFrameworkInstalled(sdkHome,VFSTestFrameworkListener.NOSETESTSEARCHER))                 testRunner=PythonTestConfigurationsModel.PYTHONS_NOSETEST_NAME;
 else                 if (VFSTestFrameworkListener.isTestFrameworkInstalled(sdkHome,VFSTestFrameworkListener.PYTESTSEARCHER))                 testRunner=PythonTestConfigurationsModel.PY_TEST_NAME;
 else                 if (VFSTestFrameworkListener.isTestFrameworkInstalled(sdkHome,VFSTestFrameworkListener.ATTESTSEARCHER))                 testRunner=PythonTestConfigurationsModel.PYTHONS_ATTEST_NAME;
              }
            }
          }
          if (testRunner.isEmpty())           testRunner=PythonTestConfigurationsModel.PYTHONS_UNITTEST_NAME;
          TestRunnerService.getInstance(project).setProjectConfiguration(testRunner);
          if (PyDocumentationSettings.getInstance(project).getFormat().isEmpty())           PyDocumentationSettings.getInstance(project).setFormat(DocStringFormat.PLAIN);
        }
      }
,ModalityState.any(),project.getDisposed());
    }
  }
);
}
