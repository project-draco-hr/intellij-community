{
  final PyDocumentationSettings documentationSettings=PyDocumentationSettings.getInstance(project);
  if (!documentationSettings.getFormat().isEmpty())   return;
  final PsiFile psiFile=PsiManager.getInstance(project).findFile(file);
  if (psiFile instanceof PyFile) {
    if (documentationSettings.isEpydocFormat(psiFile))     documentationSettings.setFormat(DocStringFormat.EPYTEXT);
 else     if (documentationSettings.isReSTFormat(psiFile))     documentationSettings.setFormat(DocStringFormat.REST);
 else {
      final String fileText=psiFile.getText();
      if (!fileText.contains(":param ") && !fileText.contains(":type ") && !fileText.contains(":rtype ")&& !fileText.contains("@param ")&& !fileText.contains("@type ")&& !fileText.contains("@rtype "))       return;
      final PyDocStringOwner[] childrens=PsiTreeUtil.getChildrenOfType(psiFile,PyDocStringOwner.class);
      if (childrens != null) {
        for (        PyDocStringOwner owner : childrens) {
          final PyStringLiteralExpression docStringExpression=owner.getDocStringExpression();
          if (docStringExpression != null) {
            String text=docStringExpression.getStringValue();
            if (text.contains(":param ") || text.contains(":rtype") || text.contains(":type")) {
              documentationSettings.setFormat(DocStringFormat.REST);
              return;
            }
 else             if (text.contains("@param ") || text.contains("@rtype") || text.contains("@type")) {
              documentationSettings.setFormat(DocStringFormat.EPYTEXT);
              return;
            }
          }
        }
      }
    }
  }
}
