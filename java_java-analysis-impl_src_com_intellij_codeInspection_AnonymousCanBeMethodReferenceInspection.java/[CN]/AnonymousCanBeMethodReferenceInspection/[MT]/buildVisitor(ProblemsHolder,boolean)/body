{
  return new JavaElementVisitor(){
    @Override public void visitAnonymousClass(    PsiAnonymousClass aClass){
      super.visitAnonymousClass(aClass);
      if (PsiUtil.getLanguageLevel(aClass).isAtLeast(LanguageLevel.JDK_1_8)) {
        final PsiClassType baseClassType=aClass.getBaseClassType();
        if (LambdaUtil.isFunctionalType(baseClassType)) {
          final PsiMethod[] methods=aClass.getMethods();
          if (methods.length == 1 && aClass.getFields().length == 0) {
            final PsiCodeBlock body=methods[0].getBody();
            final PsiCallExpression callExpression=LambdaCanBeMethodReferenceInspection.canBeMethodReferenceProblem(body,methods[0].getParameterList().getParameters(),baseClassType);
            if (callExpression != null && callExpression.resolveMethod() != methods[0]) {
              final PsiElement parent=aClass.getParent();
              if (parent instanceof PsiNewExpression) {
                final PsiJavaCodeReferenceElement classReference=((PsiNewExpression)parent).getClassOrAnonymousClassReference();
                if (classReference != null) {
                  final PsiElement lBrace=aClass.getLBrace();
                  LOG.assertTrue(lBrace != null);
                  final TextRange rangeInElement=new TextRange(0,aClass.getStartOffsetInParent() + lBrace.getStartOffsetInParent());
                  holder.registerProblem(parent,"Anonymous #ref #loc can be replaced with method reference",ProblemHighlightType.LIKE_UNUSED_SYMBOL,rangeInElement,new ReplaceWithMethodRefFix());
                }
              }
            }
          }
        }
      }
    }
  }
;
}
