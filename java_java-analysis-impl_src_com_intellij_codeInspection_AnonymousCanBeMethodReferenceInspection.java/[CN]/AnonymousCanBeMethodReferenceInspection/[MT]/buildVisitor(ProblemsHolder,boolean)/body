{
  return new JavaElementVisitor(){
    @Override public void visitAnonymousClass(    PsiAnonymousClass aClass){
      super.visitAnonymousClass(aClass);
      if (AnonymousCanBeLambdaInspection.canBeConvertedToLambda(aClass,true,reportNotAnnotatedInterfaces)) {
        final PsiMethod method=aClass.getMethods()[0];
        final PsiCodeBlock body=method.getBody();
        final PsiCallExpression callExpression=LambdaCanBeMethodReferenceInspection.canBeMethodReferenceProblem(body,method.getParameterList().getParameters(),aClass.getBaseClassType(),aClass.getParent());
        if (callExpression != null) {
          final PsiMethod resolveMethod=callExpression.resolveMethod();
          if (resolveMethod != method && !AnonymousCanBeLambdaInspection.functionalInterfaceMethodReferenced(resolveMethod,aClass,callExpression)) {
            final PsiElement parent=aClass.getParent();
            if (parent instanceof PsiNewExpression) {
              final PsiJavaCodeReferenceElement classReference=((PsiNewExpression)parent).getClassOrAnonymousClassReference();
              if (classReference != null) {
                final PsiElement lBrace=aClass.getLBrace();
                LOG.assertTrue(lBrace != null);
                final TextRange rangeInElement=new TextRange(0,aClass.getStartOffsetInParent() + lBrace.getStartOffsetInParent());
                holder.registerProblem(parent,"Anonymous #ref #loc can be replaced with method reference",ProblemHighlightType.LIKE_UNUSED_SYMBOL,rangeInElement,new ReplaceWithMethodRefFix());
              }
            }
          }
        }
      }
    }
  }
;
}
