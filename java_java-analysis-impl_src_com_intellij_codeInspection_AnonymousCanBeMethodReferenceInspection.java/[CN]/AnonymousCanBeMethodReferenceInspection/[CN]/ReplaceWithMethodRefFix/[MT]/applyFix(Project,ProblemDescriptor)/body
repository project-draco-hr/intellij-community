{
  final PsiElement element=descriptor.getPsiElement();
  if (element instanceof PsiNewExpression) {
    if (!FileModificationService.getInstance().preparePsiElementForWrite(element))     return;
    final PsiAnonymousClass anonymousClass=((PsiNewExpression)element).getAnonymousClass();
    if (anonymousClass == null)     return;
    final PsiMethod[] methods=anonymousClass.getMethods();
    if (methods.length != 1)     return;
    final PsiParameter[] parameters=methods[0].getParameterList().getParameters();
    final PsiCallExpression callExpression=LambdaCanBeMethodReferenceInspection.canBeMethodReferenceProblem(methods[0].getBody(),parameters,anonymousClass.getBaseClassType(),anonymousClass.getParent());
    if (callExpression == null)     return;
    final String methodRefText=LambdaCanBeMethodReferenceInspection.createMethodReferenceText(callExpression,anonymousClass.getBaseClassType(),parameters);
    if (methodRefText != null) {
      final String canonicalText=anonymousClass.getBaseClassType().getCanonicalText();
      final PsiExpression psiExpression=JavaPsiFacade.getElementFactory(project).createExpressionFromText("(" + canonicalText + ")"+ methodRefText,anonymousClass);
      PsiElement castExpr=anonymousClass.getParent().replace(psiExpression);
      if (RedundantCastUtil.isCastRedundant((PsiTypeCastExpression)castExpr)) {
        final PsiExpression operand=((PsiTypeCastExpression)castExpr).getOperand();
        LOG.assertTrue(operand != null);
        castExpr=castExpr.replace(operand);
      }
      JavaCodeStyleManager.getInstance(project).shortenClassReferences(castExpr);
    }
  }
}
