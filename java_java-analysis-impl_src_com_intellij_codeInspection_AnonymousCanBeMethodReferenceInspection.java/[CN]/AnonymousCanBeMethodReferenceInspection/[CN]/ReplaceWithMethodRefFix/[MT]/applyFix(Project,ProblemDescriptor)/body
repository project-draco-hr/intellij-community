{
  final PsiElement element=descriptor.getPsiElement();
  if (element instanceof PsiNewExpression) {
    if (!FileModificationService.getInstance().preparePsiElementForWrite(element))     return;
    final PsiAnonymousClass anonymousClass=((PsiNewExpression)element).getAnonymousClass();
    if (anonymousClass == null)     return;
    final PsiMethod[] methods=anonymousClass.getMethods();
    if (methods.length != 1)     return;
    final PsiParameter[] parameters=methods[0].getParameterList().getParameters();
    final String methodRefText=LambdaCanBeMethodReferenceInspection.convertToMethodReference(methods[0].getBody(),parameters,anonymousClass.getBaseClassType(),anonymousClass.getParent());
    replaceWithMethodReference(project,methodRefText,anonymousClass.getBaseClassType(),anonymousClass.getParent());
  }
}
