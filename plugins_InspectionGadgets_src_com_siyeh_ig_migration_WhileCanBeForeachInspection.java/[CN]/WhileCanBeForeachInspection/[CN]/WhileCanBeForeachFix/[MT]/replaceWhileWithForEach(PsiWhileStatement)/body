{
  final PsiStatement body=whileStatement.getBody();
  if (body == null) {
    return;
  }
  final PsiStatement initialization=getPreviousStatement(whileStatement);
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  if (declaration == null) {
    return;
  }
  final PsiElement declaredElement=declaration.getDeclaredElements()[0];
  if (!(declaredElement instanceof PsiLocalVariable)) {
    return;
  }
  final PsiLocalVariable iterator=(PsiLocalVariable)declaredElement;
  final PsiMethodCallExpression initializer=(PsiMethodCallExpression)iterator.getInitializer();
  if (initializer == null) {
    return;
  }
  final PsiReferenceExpression methodExpression=initializer.getMethodExpression();
  final PsiExpression collection=methodExpression.getQualifierExpression();
  final PsiType collectionType;
  if (collection == null) {
    final PsiClass aClass=PsiTreeUtil.getParentOfType(whileStatement,PsiClass.class);
    if (aClass == null) {
      return;
    }
    final PsiElementFactory factory=JavaPsiFacade.getElementFactory(whileStatement.getProject());
    collectionType=factory.createType(aClass);
  }
 else {
    collectionType=collection.getType();
  }
  if (collectionType == null) {
    return;
  }
  final PsiType contentType=getContentType(collectionType,CommonClassNames.JAVA_LANG_ITERABLE);
  if (contentType == null) {
    return;
  }
  final PsiType iteratorType=iterator.getType();
  final PsiType iteratorContentType=getContentType(iteratorType,"java.util.Iterator");
  if (iteratorContentType == null) {
    return;
  }
  final Project project=whileStatement.getProject();
  final PsiStatement firstStatement=ForCanBeForeachInspection.getFirstStatement(body);
  final boolean isDeclaration=ForCanBeForeachInspection.isIteratorNextDeclaration(firstStatement,iterator,contentType);
  final PsiStatement statementToSkip;
  @NonNls final String contentVariableName;
  if (isDeclaration) {
    final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)firstStatement;
    final PsiElement[] declaredElements=declarationStatement.getDeclaredElements();
    final PsiLocalVariable localVariable=(PsiLocalVariable)declaredElements[0];
    contentVariableName=localVariable.getName();
    statementToSkip=declarationStatement;
  }
 else {
    if (collection instanceof PsiReferenceExpression) {
      final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)collection;
      final String collectionName=referenceElement.getReferenceName();
      contentVariableName=ForCanBeForeachInspection.createNewVariableName(whileStatement,iteratorContentType,collectionName);
    }
 else {
      contentVariableName=ForCanBeForeachInspection.createNewVariableName(whileStatement,iteratorContentType,null);
    }
    statementToSkip=null;
  }
  @NonNls final StringBuilder out=new StringBuilder();
  out.append("for(");
  if (CodeStyleSettingsManager.getSettings(project).GENERATE_FINAL_PARAMETERS) {
    out.append("final ");
  }
  out.append(iteratorContentType.getCanonicalText()).append(' ').append(contentVariableName).append(": ");
  if (!TypeConversionUtil.isAssignable(iteratorContentType,contentType)) {
    out.append("(java.lang.Iterable<").append(iteratorContentType.getCanonicalText()).append(">)");
  }
  if (collection == null) {
    out.append("this");
  }
 else {
    out.append(collection.getText());
  }
  out.append(')');
  ForCanBeForeachInspection.replaceIteratorNext(body,contentVariableName,iterator,contentType,statementToSkip,out);
  final Query<PsiReference> query=ReferencesSearch.search(iterator,iterator.getUseScope());
  boolean deleteIterator=true;
  for (  PsiReference usage : query) {
    final PsiElement element=usage.getElement();
    if (PsiTreeUtil.isAncestor(whileStatement,element,true)) {
      continue;
    }
    final PsiAssignmentExpression assignment=PsiTreeUtil.getParentOfType(element,PsiAssignmentExpression.class);
    if (assignment == null) {
      deleteIterator=false;
      break;
    }
    final PsiExpression expression=assignment.getRExpression();
    initializer.delete();
    iterator.setInitializer(expression);
    final PsiElement statement=assignment.getParent();
    final PsiElement lastChild=statement.getLastChild();
    if (lastChild instanceof PsiComment) {
      iterator.add(lastChild);
    }
    statement.replace(iterator);
    break;
  }
  if (deleteIterator) {
    iterator.delete();
  }
  final String result=out.toString();
  PsiReplacementUtil.replaceStatementAndShortenClassNames(whileStatement,result);
}
