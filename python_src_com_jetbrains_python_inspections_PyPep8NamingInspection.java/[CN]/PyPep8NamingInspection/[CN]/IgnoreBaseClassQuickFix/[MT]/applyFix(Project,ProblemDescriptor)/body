{
  final JBList list=new JBList(myBaseClassNames);
  final Runnable updateBlackList=new Runnable(){
    @Override public void run(){
      final InspectionProfile profile=InspectionProjectProfileManager.getInstance(project).getInspectionProfile();
      profile.modifyProfile(new Consumer<ModifiableModel>(){
        @Override public void consume(        ModifiableModel model){
          final PyPep8NamingInspection inspection=(PyPep8NamingInspection)model.getUnwrappedTool(PyPep8NamingInspection.class.getSimpleName(),descriptor.getPsiElement());
          addIfNotNull(inspection.ignoredBaseClasses,(String)list.getSelectedValue());
        }
      }
);
    }
  }
;
  DataManager.getInstance().getDataContextFromFocus().doWhenDone(new Consumer<DataContext>(){
    @Override public void consume(    DataContext dataContext){
      new PopupChooserBuilder(list).setTitle("Ignore base class").setItemChoosenCallback(updateBlackList).setFilteringEnabled(new Function<Object,String>(){
        @Override public String fun(        Object o){
          return (String)o;
        }
      }
).createPopup().showInBestPositionFor(dataContext);
    }
  }
);
}
