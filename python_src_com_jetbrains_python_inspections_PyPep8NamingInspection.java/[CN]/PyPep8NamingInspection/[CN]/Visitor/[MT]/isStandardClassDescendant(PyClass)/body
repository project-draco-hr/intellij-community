{
  if (PyTestUtil.isPyTestClass(cls)) {
    return true;
  }
  return ContainerUtil.exists(cls.getAncestorClasses(myTypeEvalContext),new Condition<PyClass>(){
    @Override public boolean value(    PyClass ancestor){
      final PsiFile ancestorsModule=ancestor.getContainingFile();
      final Sdk sdk=PyBuiltinCache.findSdkForFile(ancestorsModule);
      return PythonSdkType.isStdLib(ancestorsModule.getVirtualFile(),sdk) && !PyBuiltinCache.getInstance(cls).isBuiltin(ancestor);
    }
  }
);
}
