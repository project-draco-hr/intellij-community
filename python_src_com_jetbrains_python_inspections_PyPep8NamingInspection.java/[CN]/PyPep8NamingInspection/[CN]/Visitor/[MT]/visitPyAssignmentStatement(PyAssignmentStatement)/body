{
  final PyFunction function=PsiTreeUtil.getParentOfType(node,PyFunction.class,true,PyClass.class);
  if (function == null)   return;
  final Scope scope=ControlFlowCache.getScope(function);
  for (  Pair<PyExpression,PyExpression> pair : node.getTargetsToValuesMapping()) {
    final String name=pair.getFirst().getName();
    if (name == null || scope.isGlobal(name))     continue;
    if (pair.getFirst() instanceof PyTargetExpression) {
      final PyExpression qualifier=((PyTargetExpression)pair.getFirst()).getQualifier();
      if (qualifier != null) {
        return;
      }
    }
    final PyCallExpression assignedValue=PyUtil.as(pair.getSecond(),PyCallExpression.class);
    if (assignedValue != null && assignedValue.getCallee() != null && PyNames.NAMEDTUPLE.equals(assignedValue.getCallee().getName())) {
      return;
    }
    final String errorCode="N806";
    if (!LOWERCASE_REGEX.matcher(name).matches() && !name.startsWith("_") && !ignoredErrors.contains(errorCode)) {
      registerAndAddRenameAndIgnoreErrorQuickFixes(pair.getFirst(),errorCode);
    }
  }
}
