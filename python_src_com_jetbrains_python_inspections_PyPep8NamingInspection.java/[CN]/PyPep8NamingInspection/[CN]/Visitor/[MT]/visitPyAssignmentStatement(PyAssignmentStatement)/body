{
  final PyFunction function=PsiTreeUtil.getParentOfType(node,PyFunction.class,true,PyClass.class);
  if (function == null)   return;
  final Collection<PyGlobalStatement> globalStatements=PsiTreeUtil.findChildrenOfType(function,PyGlobalStatement.class);
  final Set<String> globals=new HashSet<String>();
  for (  PyGlobalStatement statement : globalStatements) {
    final PyTargetExpression[] statementGlobals=statement.getGlobals();
    for (    PyTargetExpression global : statementGlobals) {
      globals.add(global.getName());
    }
  }
  for (  PyExpression expression : node.getTargets()) {
    final String name=expression.getName();
    if (name == null || globals.contains(name))     continue;
    if (expression instanceof PyTargetExpression) {
      final PyExpression qualifier=((PyTargetExpression)expression).getQualifier();
      if (qualifier != null) {
        final PyType type=myTypeEvalContext.getType(qualifier);
        if (type instanceof PyModuleType)         return;
      }
    }
    if (!LOWERCASE_REGEX.matcher(name).matches() && !name.startsWith("_")) {
      registerProblem(expression,"Variable in function should be lowercase",new PyRenameElementQuickFix());
    }
  }
}
