{
  final PyFunction function=PsiTreeUtil.getParentOfType(node,PyFunction.class,true,PyClass.class);
  if (function == null)   return;
  for (  PyExpression expression : node.getTargets()) {
    final String name=expression.getName();
    if (name == null)     continue;
    if (expression instanceof PyTargetExpression) {
      final PyExpression qualifier=((PyTargetExpression)expression).getQualifier();
      if (qualifier != null) {
        final PyType type=TypeEvalContext.codeAnalysis(node.getContainingFile()).getType(qualifier);
        if (type instanceof PyModuleType)         return;
      }
    }
    if (!LOWERCASE_REGEX.matcher(name).matches() && !name.startsWith("_")) {
      registerProblem(expression,"Variable in function should be lowercase",new PyRenameElementQuickFix());
    }
  }
}
