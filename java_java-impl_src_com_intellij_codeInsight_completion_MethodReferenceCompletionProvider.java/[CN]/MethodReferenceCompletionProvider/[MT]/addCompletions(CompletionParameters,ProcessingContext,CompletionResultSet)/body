{
  if (!PsiUtil.isLanguageLevel8OrHigher(parameters.getOriginalFile()))   return;
  final ExpectedTypeInfo[] expectedTypes=JavaSmartCompletionContributor.getExpectedTypes(parameters);
  for (  ExpectedTypeInfo expectedType : expectedTypes) {
    final PsiType defaultType=expectedType.getDefaultType();
    if (LambdaUtil.isFunctionalType(defaultType)) {
      final PsiType functionalType=FunctionalInterfaceParameterizationUtil.getGroundTargetType(defaultType);
      final PsiType returnType=LambdaUtil.getFunctionalInterfaceReturnType(functionalType);
      if (returnType != null) {
        final PsiMethodReferenceExpression ref=(PsiMethodReferenceExpression)parameters.getPosition().getParent();
        final ExpectedTypeInfoImpl typeInfo=new ExpectedTypeInfoImpl(returnType,ExpectedTypeInfo.TYPE_OR_SUBTYPE,returnType,TailType.UNKNOWN,null,ExpectedTypeInfoImpl.NULL);
        final Map<PsiMethodReferenceExpression,PsiType> map=PsiMethodReferenceUtil.getFunctionalTypeMap();
        Consumer<LookupElement> noTypeCheck=new Consumer<LookupElement>(){
          @Override public void consume(          final LookupElement lookupElement){
            final PsiElement element=lookupElement.getPsiElement();
            if (element instanceof PsiMethod) {
              final PsiMethodReferenceExpression referenceExpression=(PsiMethodReferenceExpression)ref.copy();
              final PsiElement referenceNameElement=referenceExpression.getReferenceNameElement();
              LOG.assertTrue(referenceNameElement != null,referenceExpression);
              referenceNameElement.replace(JavaPsiFacade.getElementFactory(element.getProject()).createIdentifier(((PsiMethod)element).getName()));
              final PsiType added=map.put(referenceExpression,functionalType);
              try {
                final PsiElement resolve=referenceExpression.resolve();
                if (resolve == element && PsiMethodReferenceUtil.checkMethodReferenceContext(referenceExpression,resolve,functionalType) == null) {
                  result.addElement(lookupElement);
                }
              }
  finally {
                if (added == null) {
                  map.remove(referenceExpression);
                }
              }
            }
          }
        }
;
        final Runnable runnable=ReferenceExpressionCompletionContributor.fillCompletionVariants(new JavaSmartCompletionParameters(parameters,typeInfo),noTypeCheck);
        if (runnable != null) {
          runnable.run();
        }
      }
    }
  }
}
