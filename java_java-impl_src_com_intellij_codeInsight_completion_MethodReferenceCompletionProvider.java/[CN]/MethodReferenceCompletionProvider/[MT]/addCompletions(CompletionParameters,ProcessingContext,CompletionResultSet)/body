{
  if (!PsiUtil.isLanguageLevel8OrHigher(parameters.getOriginalFile()))   return;
  final ExpectedTypeInfo[] expectedTypes=JavaSmartCompletionContributor.getExpectedTypes(parameters);
  for (  ExpectedTypeInfo expectedType : expectedTypes) {
    final PsiType defaultType=expectedType.getDefaultType();
    if (LambdaHighlightingUtil.checkInterfaceFunctional(defaultType) == null) {
      final PsiType returnType=LambdaUtil.getFunctionalInterfaceReturnType(defaultType);
      if (returnType != null) {
        final ExpectedTypeInfoImpl typeInfo=new ExpectedTypeInfoImpl(returnType,ExpectedTypeInfo.TYPE_OR_SUBTYPE,returnType,TailType.UNKNOWN,null,ExpectedTypeInfoImpl.NULL);
        Consumer<LookupElement> noTypeCheck=new Consumer<LookupElement>(){
          @Override public void consume(          final LookupElement lookupElement){
            result.addElement(lookupElement);
          }
        }
;
        final Runnable runnable=ReferenceExpressionCompletionContributor.fillCompletionVariants(new JavaSmartCompletionParameters(parameters,typeInfo),noTypeCheck);
        if (runnable != null) {
          runnable.run();
        }
      }
    }
  }
}
