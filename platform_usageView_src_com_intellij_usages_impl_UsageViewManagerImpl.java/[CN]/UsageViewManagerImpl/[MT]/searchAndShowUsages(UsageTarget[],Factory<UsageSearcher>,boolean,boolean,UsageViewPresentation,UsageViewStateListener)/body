{
  final AtomicReference<UsageViewImpl> usageView=new AtomicReference<UsageViewImpl>();
  final FindUsagesProcessPresentation processPresentation=new FindUsagesProcessPresentation();
  processPresentation.setShowNotFoundMessage(showNotFoundMessage);
  processPresentation.setShowPanelIfOnlyOneUsage(showPanelIfOnlyOneUsage);
  Task.Backgroundable task=new Task.Backgroundable(myProject,getProgressTitle(presentation),true,new SearchInBackgroundOption()){
    @Override public void run(    @NotNull final ProgressIndicator indicator){
      new SearchForUsagesRunnable(UsageViewManagerImpl.this.myProject,usageView,presentation,searchFor,searcherFactory,processPresentation,listener).run();
    }
    @Override public DumbModeAction getDumbModeAction(){
      return DumbModeAction.CANCEL;
    }
    @Override @Nullable public NotificationInfo getNotificationInfo(){
      String notification=usageView.get() != null ? usageView.get().getUsagesCount() + " Usage(s) Found" : "No Usages Found";
      return new NotificationInfo("Find Usages","Find Usages Finished",notification);
    }
  }
;
  ProgressManager.getInstance().runProcessWithProgressAsynchronously(task,new FindUsagesIndicator());
  return usageView.get();
}
