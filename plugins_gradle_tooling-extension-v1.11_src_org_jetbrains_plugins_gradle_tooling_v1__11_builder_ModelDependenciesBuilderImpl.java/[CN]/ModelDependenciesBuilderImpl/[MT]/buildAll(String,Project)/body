{
  final List<IdeaDependency> dependencies=new ArrayList<IdeaDependency>();
  final Map<DependencyVersionId,Scopes> scopesMap=new LinkedHashMap<DependencyVersionId,Scopes>();
  final IdeDependenciesExtractor dependenciesExtractor=new IdeDependenciesExtractor();
  boolean offline=false;
  boolean downloadJavadoc=false;
  boolean downloadSources=true;
  final IdeaPlugin ideaPlugin=project.getPlugins().getPlugin(IdeaPlugin.class);
  Map<String,Map<String,Collection<Configuration>>> userScopes=Collections.emptyMap();
  if (ideaPlugin != null) {
    IdeaModel ideaModel=ideaPlugin.getModel();
    if (ideaModel != null && ideaModel.getModule() != null) {
      offline=ideaModel.getModule().isOffline();
      downloadJavadoc=ideaModel.getModule().isDownloadJavadoc();
      downloadSources=ideaModel.getModule().isDownloadSources();
      userScopes=ideaModel.getModule().getScopes();
    }
  }
  for (  final Configuration configuration : project.getConfigurations()) {
    Collection<Configuration> plusConfigurations=new ArrayList<Configuration>();
    plusConfigurations.add(configuration);
    final Collection<IdeProjectDependency> ideProjectDependencies=dependenciesExtractor.extractProjectDependencies(project,plusConfigurations,new ArrayList<Configuration>());
    for (    IdeProjectDependency ideProjectDependency : ideProjectDependencies) {
      merge(scopesMap,ideProjectDependency,userScopes);
    }
    if (!offline) {
      final Collection<IdeRepoFileDependency> ideRepoFileDependencies=dependenciesExtractor.extractRepoFileDependencies(project.getConfigurations(),plusConfigurations,new ArrayList<Configuration>(),downloadSources,downloadJavadoc);
      for (      IdeRepoFileDependency repoFileDependency : ideRepoFileDependencies) {
        merge(scopesMap,repoFileDependency,userScopes);
      }
    }
    final Collection<IdeLocalFileDependency> ideLocalFileDependencies=dependenciesExtractor.extractLocalFileDependencies(plusConfigurations,new ArrayList<Configuration>());
    for (    IdeLocalFileDependency fileDependency : ideLocalFileDependencies) {
      merge(scopesMap,fileDependency,userScopes);
    }
  }
  for (  Map.Entry<DependencyVersionId,Scopes> entry : scopesMap.entrySet()) {
    DependencyVersionId versionId=entry.getKey();
    for (    GradleDependencyScope scope : entry.getValue().getScopes()) {
      if (versionId.getIdeDependency() instanceof IdeRepoFileDependency) {
        IdeRepoFileDependency repoFileDependency=(IdeRepoFileDependency)versionId.getIdeDependency();
        IdeaSingleEntryLibraryDependencyImpl libraryDependency=new IdeaSingleEntryLibraryDependencyImpl(new IdeaDependencyScopeImpl(scope),versionId.getName(),versionId.getGroup(),versionId.getVersion(),versionId.getClassifier());
        libraryDependency.setFile(repoFileDependency.getFile());
        libraryDependency.setSource(repoFileDependency.getSourceFile());
        libraryDependency.setJavadoc(repoFileDependency.getJavadocFile());
        dependencies.add(libraryDependency);
      }
 else       if (versionId.getIdeDependency() instanceof IdeProjectDependency) {
        IdeProjectDependency projectDependency=(IdeProjectDependency)versionId.getIdeDependency();
        String ideaModuleName=findDeDuplicatedModuleName(projectDependency.getProject());
        if (ideaModuleName == null) {
          ideaModuleName=versionId.getName();
        }
        IdeaModuleDependencyImpl moduleDependency=new IdeaModuleDependencyImpl(new IdeaDependencyScopeImpl(scope),ideaModuleName,versionId.getGroup(),versionId.getVersion(),versionId.getClassifier());
        moduleDependency.setIdeaModule(new StubIdeaModule(ideaModuleName));
        dependencies.add(moduleDependency);
      }
 else       if (versionId.getIdeDependency() instanceof IdeLocalFileDependency) {
        IdeLocalFileDependency fileDependency=(IdeLocalFileDependency)versionId.getIdeDependency();
        IdeaSingleEntryLibraryDependencyImpl libraryDependency=new IdeaSingleEntryLibraryDependencyImpl(new IdeaDependencyScopeImpl(scope),versionId.getName(),versionId.getGroup(),versionId.getVersion(),versionId.getClassifier());
        libraryDependency.setFile(fileDependency.getFile());
        attachGradleSdkSources(libraryDependency,fileDependency);
        dependencies.add(libraryDependency);
      }
    }
  }
  return new ProjectDependenciesModelImpl(project.getPath(),dependencies);
}
