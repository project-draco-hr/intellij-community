{
  try {
    if (createTempFile) {
      createTempFiles();
    }
    final Map<Module,List<String>> perModule=forkPerModule() ? new TreeMap<Module,List<String>>(new Comparator<Module>(){
      @Override public int compare(      Module o1,      Module o2){
        return StringUtil.compare(o1.getName(),o2.getName(),true);
      }
    }
) : null;
    final PrintWriter writer=new PrintWriter(myTempFile,CharsetToolkit.UTF8);
    try {
      writer.println(packageName);
      final JUnitConfiguration.Data data=myConfiguration.getPersistentData();
      final String category=data.TEST_OBJECT == JUnitConfiguration.TEST_CATEGORY ? data.getCategory() : "";
      writer.println(category);
      final List<String> testNames=new ArrayList<String>();
      for (      final T element : elements) {
        final String name=nameFunction.fun(element);
        if (name == null) {
          LOG.error("invalid element " + element);
          return;
        }
        if (perModule != null && element instanceof PsiElement) {
          final Module module=ModuleUtilCore.findModuleForPsiElement((PsiElement)element);
          if (module != null) {
            List<String> list=perModule.get(module);
            if (list == null) {
              list=new ArrayList<String>();
              perModule.put(module,list);
            }
            list.add(name);
          }
        }
 else {
          testNames.add(name);
        }
      }
      if (perModule != null) {
        for (        List<String> perModuleClasses : perModule.values()) {
          Collections.sort(perModuleClasses);
          testNames.addAll(perModuleClasses);
        }
      }
 else {
        Collections.sort(testNames);
      }
      for (      String testName : testNames) {
        writer.println(testName);
      }
    }
  finally {
      writer.close();
    }
    if (perModule != null && perModule.size() > 1) {
      final PrintWriter wWriter=new PrintWriter(myWorkingDirsFile,CharsetToolkit.UTF8);
      try {
        wWriter.println(packageName);
        for (        Module module : perModule.keySet()) {
          final String moduleDir=PathMacroUtil.getModuleDir(module.getModuleFilePath());
          wWriter.println(moduleDir);
          final JavaParameters parameters=new JavaParameters();
          JavaParametersUtil.configureModule(module,parameters,JavaParameters.JDK_AND_CLASSES_AND_TESTS,myConfiguration.isAlternativeJrePathEnabled() ? myConfiguration.getAlternativeJrePath() : null);
          configureAdditionalClasspath(parameters);
          wWriter.println(parameters.getClassPath().getPathsString());
          final List<String> classNames=perModule.get(module);
          wWriter.println(classNames.size());
          for (          String className : classNames) {
            wWriter.println(className);
          }
        }
      }
  finally {
        wWriter.close();
      }
    }
  }
 catch (  IOException e) {
    LOG.error(e);
  }
}
