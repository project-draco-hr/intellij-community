{
  try {
    if (createTempFile) {
      myTempFile=FileUtil.createTempFile("idea_junit",".tmp");
      myTempFile.deleteOnExit();
      myJavaParameters.getProgramParametersList().add("@" + myTempFile.getAbsolutePath());
    }
    final Map<String,List<String>> perModule=forkPerModule() ? new HashMap<String,List<String>>() : null;
    final PrintWriter writer=new PrintWriter(myTempFile,"UTF-8");
    try {
      writer.println(packageName);
      final List<String> testNames=new ArrayList<String>();
      for (      final T element : elements) {
        final String name=nameFunction.fun(element);
        if (name == null) {
          LOG.error("invalid element " + element);
          return;
        }
        testNames.add(name);
        if (perModule != null && element instanceof PsiElement) {
          final Module module=ModuleUtilCore.findModuleForPsiElement((PsiElement)element);
          if (module != null) {
            final String moduleDir=PathMacroUtil.getModuleDir(module.getModuleFilePath());
            List<String> list=perModule.get(moduleDir);
            if (list == null) {
              list=new ArrayList<String>();
              perModule.put(moduleDir,list);
            }
            list.add(name);
          }
        }
      }
      Collections.sort(testNames);
      for (      String testName : testNames) {
        writer.println(testName);
      }
    }
  finally {
      writer.close();
    }
    if (perModule != null && perModule.size() > 1) {
      final PrintWriter wWriter=new PrintWriter(myWorkingDirsFile,"UTF-8");
      try {
        wWriter.println(packageName);
        for (        String workingDir : perModule.keySet()) {
          wWriter.println(workingDir);
          final List<String> classNames=perModule.get(workingDir);
          wWriter.println(classNames.size());
          Collections.sort(classNames);
          for (          String className : classNames) {
            wWriter.println(className);
          }
        }
      }
  finally {
        wWriter.close();
      }
    }
  }
 catch (  IOException e) {
    LOG.error(e);
  }
}
