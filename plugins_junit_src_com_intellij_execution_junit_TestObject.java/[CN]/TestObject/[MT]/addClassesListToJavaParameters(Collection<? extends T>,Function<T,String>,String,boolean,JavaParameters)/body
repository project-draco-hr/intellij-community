{
  try {
    if (createTempFile) {
      createTempFiles(javaParameters);
    }
    final Map<Module,List<String>> perModule=forkPerModule() ? new TreeMap<Module,List<String>>(new Comparator<Module>(){
      @Override public int compare(      Module o1,      Module o2){
        return StringUtil.compare(o1.getName(),o2.getName(),true);
      }
    }
) : null;
    final List<String> testNames=new ArrayList<String>();
    for (    final T element : elements) {
      final String name=nameFunction.fun(element);
      if (name == null) {
        continue;
      }
      final PsiElement psiElement=retrievePsiElement(element);
      if (perModule != null && psiElement != null) {
        final Module module=ModuleUtilCore.findModuleForPsiElement(psiElement);
        if (module != null) {
          List<String> list=perModule.get(module);
          if (list == null) {
            list=new ArrayList<String>();
            perModule.put(module,list);
          }
          list.add(name);
        }
      }
 else {
        testNames.add(name);
      }
    }
    final JUnitConfiguration.Data data=getConfiguration().getPersistentData();
    if (perModule != null) {
      for (      List<String> perModuleClasses : perModule.values()) {
        Collections.sort(perModuleClasses);
        testNames.addAll(perModuleClasses);
      }
    }
 else     if (JUnitConfiguration.TEST_PACKAGE.equals(data.TEST_OBJECT)) {
      Collections.sort(testNames);
    }
    final String category=JUnitConfiguration.TEST_CATEGORY.equals(data.TEST_OBJECT) ? data.getCategory() : "";
    JUnitStarter.printClassesList(testNames,packageName,category,myTempFile);
    writeClassesPerModule(packageName,javaParameters,perModule);
  }
 catch (  IOException e) {
    LOG.error(e);
  }
}
