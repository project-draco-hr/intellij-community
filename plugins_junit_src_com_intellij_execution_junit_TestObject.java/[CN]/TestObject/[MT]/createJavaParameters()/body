{
  JavaParameters javaParameters=super.createJavaParameters();
  javaParameters.setMainClass(JUnitConfiguration.JUNIT_START_CLASS);
  javaParameters.getProgramParametersList().add(JUnitStarter.IDE_VERSION + JUnitStarter.VERSION);
  final StringBuilder buf=new StringBuilder();
  collectListeners(javaParameters,buf,IDEAJUnitListener.EP_NAME,"\n");
  if (buf.length() > 0) {
    try {
      myListenersFile=FileUtil.createTempFile("junit_listeners_","");
      myListenersFile.deleteOnExit();
      javaParameters.getProgramParametersList().add("@@" + myListenersFile.getPath());
      FileUtil.writeToFile(myListenersFile,buf.toString().getBytes(CharsetToolkit.UTF8_CHARSET));
    }
 catch (    IOException e) {
      LOG.error(e);
    }
  }
  final Project project=getConfiguration().getProject();
  if (JUnitUtil.isJUnit5(GlobalSearchScope.allScope(project),project)) {
    javaParameters.getProgramParametersList().add(JUnitStarter.JUNIT5_PARAMETER);
    javaParameters.getClassPath().add(PathUtil.getJarPathForClass(JUnit5IdeaTestRunner.class));
    final PathsList classPath=javaParameters.getClassPath();
    final List<String> paths=classPath.getPathList();
    final String pathForClass=PathUtil.getJarPathForClass(TestExecutionListener.class);
    final File libDirectory=new File(pathForClass).getParentFile();
    final File[] libJars=libDirectory.listFiles();
    if (libJars != null) {
      for (      File jarFile : libJars) {
        final String filePath=jarFile.getAbsolutePath();
        if (!paths.contains(filePath)) {
          classPath.add(filePath);
        }
      }
    }
  }
  return javaParameters;
}
