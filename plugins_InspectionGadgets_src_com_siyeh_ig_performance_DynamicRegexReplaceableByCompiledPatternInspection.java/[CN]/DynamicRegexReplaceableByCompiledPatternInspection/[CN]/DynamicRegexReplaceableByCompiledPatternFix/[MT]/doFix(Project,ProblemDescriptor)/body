{
  final PsiElement element=descriptor.getPsiElement();
  final PsiClass aClass=ClassUtils.getContainingStaticClass(element);
  if (aClass == null) {
    return;
  }
  final PsiElement parent=element.getParent();
  if (!(parent instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiReferenceExpression methodExpression=(PsiReferenceExpression)parent;
  final PsiElement grandParent=methodExpression.getParent();
  if (!(grandParent instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
  final PsiExpressionList list=methodCallExpression.getArgumentList();
  final PsiExpression[] expressions=list.getExpressions();
  @NonNls final StringBuilder fieldText=new StringBuilder("private static final java.util.regex.Pattern PATTERN = java.util.regex.Pattern.compile(");
  final int expressionsLength=expressions.length;
  if (expressionsLength > 0) {
    fieldText.append(expressions[0].getText());
  }
  @NonNls final String methodName=methodExpression.getReferenceName();
  if ("replace".equals(methodName)) {
    fieldText.append(", java.util.regex.Pattern.LITERAL");
  }
  fieldText.append(");");
  final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
  final PsiField newField=factory.createFieldFromText(fieldText.toString(),element);
  final PsiElement field=aClass.add(newField);
  @NonNls final StringBuilder expressionText=new StringBuilder("PATTERN.");
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  @NonNls final String qualifierText=(qualifier == null) ? "this" : qualifier.getText();
  if ("split".equals(methodName)) {
    expressionText.append(methodName);
    expressionText.append('(');
    expressionText.append(qualifierText);
    for (int i=1; i < expressionsLength; i++) {
      expressionText.append(',').append(expressions[i].getText());
    }
    expressionText.append(')');
  }
 else {
    expressionText.append("matcher(").append(qualifierText).append(").");
    if ("replace".equals(methodName)) {
      expressionText.append("replaceAll");
    }
 else {
      expressionText.append(methodName);
    }
    expressionText.append('(');
    if (expressionsLength > 1) {
      expressionText.append(expressions[1].getText());
      for (int i=2; i < expressionsLength; i++) {
        expressionText.append(',').append(expressions[i].getText());
      }
    }
    expressionText.append(')');
  }
  final PsiExpression newExpression=factory.createExpressionFromText(expressionText.toString(),element);
  PsiMethodCallExpression newMethodCallExpression=(PsiMethodCallExpression)methodCallExpression.replace(newExpression);
  newMethodCallExpression=CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(newMethodCallExpression);
  final PsiReferenceExpression reference=getReference(newMethodCallExpression);
  HighlightUtils.showRenameTemplate(aClass,(PsiNameIdentifierOwner)field,reference);
}
