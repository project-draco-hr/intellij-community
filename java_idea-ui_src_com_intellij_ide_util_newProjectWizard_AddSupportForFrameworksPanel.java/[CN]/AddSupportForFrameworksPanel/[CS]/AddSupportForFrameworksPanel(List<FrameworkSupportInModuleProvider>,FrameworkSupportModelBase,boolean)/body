{
  myModel=model;
  myLibrariesContainer=model.getLibrariesContainer();
  final Splitter splitter=new Splitter(vertical,0.30f,0.1f,0.7f);
  myFrameworksTree=new FrameworksTree(){
    @Override protected void onNodeStateChanged(    CheckedTreeNode node){
      if (!(node instanceof FrameworkSupportNode))       return;
      final FrameworkSupportNode frameworkSupportNode=(FrameworkSupportNode)node;
      if (frameworkSupportNode == getSelectedNode()) {
        updateOptionsPanel();
      }
      final FrameworkSupportInModuleConfigurable configurable=frameworkSupportNode.getConfigurable();
      configurable.onFrameworkSelectionChanged(node.isChecked());
      myModel.onFrameworkSelectionChanged(frameworkSupportNode);
      onFrameworkStateChanged();
    }
  }
;
  setProviders(providers);
  myFrameworksTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      onSelectionChanged();
    }
  }
);
  splitter.setFirstComponent(ScrollPaneFactory.createScrollPane(myFrameworksTree));
  myOptionsPanel=new JPanel(new CardLayout());
  myOptionsPanel.add(EMPTY_CARD,new JPanel());
  splitter.setSecondComponent(myOptionsPanel);
  myFrameworksPanel.add(splitter,BorderLayout.CENTER);
  myFrameworksTree.setSelectionRow(0);
}
