{
  myModel=model;
  myLibrariesContainer=model.getLibrariesContainer();
  myLabel.setVisible(!vertical);
  Splitter splitter=vertical ? new Splitter(true,0.6f) : new Splitter(false,0.3f,0.1f,0.7f);
  myFrameworksTree=new FrameworksTree(model){
    @Override protected void onNodeStateChanged(    CheckedTreeNode node){
      if (!(node instanceof FrameworkSupportNode))       return;
      final FrameworkSupportNode frameworkSupportNode=(FrameworkSupportNode)node;
      if (frameworkSupportNode == getSelectedNode()) {
        updateOptionsPanel();
      }
      final FrameworkSupportInModuleConfigurable configurable=frameworkSupportNode.getConfigurable();
      configurable.onFrameworkSelectionChanged(node.isChecked());
      myModel.onFrameworkSelectionChanged(frameworkSupportNode);
      onFrameworkStateChanged();
    }
  }
;
  model.addFrameworkVersionListener(new FrameworkVersionListener(){
    @Override public void versionChanged(    FrameworkVersion version){
      ((DefaultTreeModel)myFrameworksTree.getModel()).nodeChanged(getSelectedNode());
    }
  }
,this);
  setProviders(providers);
  myFrameworksTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      onSelectionChanged();
    }
  }
);
  JPanel treePanel=new JPanel(new BorderLayout());
  treePanel.add(ScrollPaneFactory.createScrollPane(myFrameworksTree),BorderLayout.CENTER);
  treePanel.add(myAssociatedFrameworksPanel,BorderLayout.NORTH);
  splitter.setFirstComponent(treePanel);
  myOptionsPanel=new JPanel(new CardLayout());
  myOptionsPanel.add(EMPTY_CARD,new JPanel());
  splitter.setSecondComponent(myOptionsPanel);
  myFrameworksPanel.add(splitter,BorderLayout.CENTER);
}
