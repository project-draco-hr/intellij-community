{
  PyType qualifierType=qualifier.getType();
  ProcessingContext ctx=new ProcessingContext();
  final Set<String> names_already=new HashSet<String>();
  ctx.put(PyType.CTX_NAMES,names_already);
  if (qualifierType != null) {
    Collection<Object> variants=new ArrayList<Object>();
    if (qualifier instanceof PyQualifiedExpression) {
      Collection<PyExpression> attrs=collectAssignedAttributes((PyQualifiedExpression)qualifier);
      variants.addAll(attrs);
      for (      PyExpression ex : attrs) {
        if (ex instanceof PyReferenceExpression) {
          PyReferenceExpression refex=(PyReferenceExpression)ex;
          names_already.add(refex.getReferencedName());
        }
 else         if (ex instanceof PyTargetExpression) {
          PyTargetExpression targetExpr=(PyTargetExpression)ex;
          names_already.add(targetExpr.getName());
        }
      }
      Collections.addAll(variants,qualifierType.getCompletionVariants(myElement,ctx));
      return variants.toArray();
    }
 else {
      return qualifierType.getCompletionVariants(myElement,ctx);
    }
  }
  return NO_VARIANTS;
}
