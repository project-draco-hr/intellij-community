{
  if (element instanceof PsiNamedElement) {
    final String elementName=((PsiNamedElement)element).getName();
    if (Comparing.equal(myElement.getReferencedName(),elementName) || PyNames.INIT.equals(elementName)) {
      if (element instanceof PyParameter || element instanceof PyTargetExpression) {
        PyFunction functionContainingUs=PsiTreeUtil.getParentOfType(getElement(),PyFunction.class);
        PyFunction functionContainingThem=PsiTreeUtil.getParentOfType(element,PyFunction.class);
        if (functionContainingUs != null && functionContainingUs == functionContainingThem) {
          return true;
        }
      }
      final PsiElement resolveResult=resolve();
      if (resolveResult == element) {
        return true;
      }
      final PyGlobalStatement ourGlobal=PyGlobalStatementNavigator.getByArgument(resolveResult);
      final PyGlobalStatement theirGlobal=PyGlobalStatementNavigator.getByArgument(element);
      if (ourGlobal != null || theirGlobal != null) {
        PsiElement ourContainer=PsiTreeUtil.getParentOfType(getElement(),PsiNamedElement.class);
        PsiElement theirContainer=PsiTreeUtil.getParentOfType(element,PsiNamedElement.class);
        if (ourGlobal != null && ourContainer != null && PsiTreeUtil.isAncestor(theirContainer,ourContainer,false)) {
          return true;
        }
        if (theirGlobal != null && theirContainer != null && PsiTreeUtil.isAncestor(ourContainer,theirContainer,false)) {
          return true;
        }
      }
      return false;
    }
  }
  return false;
}
