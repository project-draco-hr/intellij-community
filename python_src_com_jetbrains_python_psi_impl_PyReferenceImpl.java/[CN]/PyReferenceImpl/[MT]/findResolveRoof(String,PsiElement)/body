{
  if (PyUtil.isClassPrivateName(referencedName)) {
    PsiElement one=myElement;
    do {
      one=PyUtil.getConcealingParent(one);
    }
 while (one instanceof PyFunction);
    if (one instanceof PyClass) {
      PyArgumentList superClassExpressionList=((PyClass)one).getSuperClassExpressionList();
      if (superClassExpressionList == null || !PsiTreeUtil.isAncestor(superClassExpressionList,myElement,false)) {
        return one;
      }
    }
  }
  if (myElement instanceof PyTargetExpression) {
    final ScopeOwner scopeOwner=PsiTreeUtil.getParentOfType(myElement,ScopeOwner.class);
    if (scopeOwner != null && !ControlFlowCache.getScope(scopeOwner).isGlobal(myElement.getName())) {
      return scopeOwner;
    }
  }
  return realContext.getContainingFile();
}
