{
  ResultList ret=new ResultList();
  final String referencedName=myElement.getReferencedName();
  if (referencedName == null)   return ret;
  ResolveProcessor processor=new ResolveProcessor(referencedName);
  final PsiElement realContext=PyPsiUtils.getRealContext(myElement);
  PsiElement roof=findResolveRoof(referencedName,realContext);
  PsiElement uexpr=PyResolveUtil.treeCrawlUp(processor,false,realContext,roof);
  if ((uexpr != null)) {
    if ((uexpr instanceof PyClass)) {
      PyClass cls=(PyClass)uexpr;
      if (isSuperClassExpression(cls)) {
        ret.clear();
        return ret;
      }
    }
    for (    NameDefiner hit : processor.getDefiners()) {
      ret.poke(hit,getRate(hit));
    }
  }
 else   if (!processor.getDefiners().isEmpty()) {
    ret.add(new ImportedResolveResult(null,RatedResolveResult.RATE_LOW - 1,processor.getDefiners()));
  }
  if (uexpr == null) {
    PyType otype=PyBuiltinCache.getInstance(realContext).getObjectType();
    if (otype != null) {
      final List<? extends PsiElement> members=otype.resolveMember(myElement.getName(),AccessDirection.READ);
      if (members != null) {
        int rate=RatedResolveResult.RATE_NORMAL;
        for (        PsiElement member : members) {
          ret.poke(member,rate);
          rate=RatedResolveResult.RATE_LOW;
        }
      }
    }
  }
  if (uexpr == null) {
    PyFile bfile=PyBuiltinCache.getInstance(realContext).getBuiltinsFile();
    if (bfile != null) {
      uexpr=bfile.getElementNamed(referencedName);
    }
  }
  if (uexpr == null && !(myElement instanceof PyTargetExpression)) {
    final PsiElement outerContextElement=PyResolveUtil.scanOuterContext(new ResolveProcessor(referencedName),realContext);
    uexpr=PyUtil.turnDirIntoInit(outerContextElement);
  }
  if (uexpr != null) {
    ret.add(new ImportedResolveResult(uexpr,getRate(uexpr),processor.getDefiners()));
  }
  return ret;
}
