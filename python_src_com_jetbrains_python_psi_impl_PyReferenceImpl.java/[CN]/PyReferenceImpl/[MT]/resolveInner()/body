{
  ResultList ret=new ResultList();
  final String referencedName=myElement.getReferencedName();
  if (referencedName == null)   return ret;
  ResolveProcessor processor=new ResolveProcessor(referencedName);
  final PsiElement realContext=PyPsiUtils.getRealContext(myElement);
  PsiElement roof=null;
  if (PyUtil.isClassPrivateName(referencedName)) {
    PsiElement one=myElement;
    do {
      one=PyUtil.getConcealingParent(one);
    }
 while (one instanceof PyFunction);
    if (one instanceof PyClass)     roof=one;
  }
  if (roof == null)   roof=realContext.getContainingFile();
  PsiElement uexpr=PyResolveUtil.treeCrawlUp(processor,false,realContext,roof);
  if (uexpr != null) {
    if ((uexpr instanceof PyTargetExpression || uexpr instanceof PyNamedParameter) && myElement != null) {
      final ScopeOwner scopeOwner=PsiTreeUtil.getParentOfType(myElement,ScopeOwner.class);
      if (scopeOwner != null && scopeOwner == PsiTreeUtil.getParentOfType(uexpr,ScopeOwner.class)) {
        PyAugAssignmentStatement augAssignment=PsiTreeUtil.getParentOfType(myElement,PyAugAssignmentStatement.class);
        try {
          final PyElement[] defs=PyDefUseUtil.getLatestDefs(scopeOwner,(PyElement)uexpr,augAssignment != null ? augAssignment : myElement);
          for (          PyElement e : defs) {
            ret.add(new RatedResolveResult(RatedResolveResult.RATE_NORMAL + 1,e));
          }
        }
 catch (        PyDefUseUtil.InstructionNotFoundException e) {
        }
      }
    }
  }
  if ((uexpr != null)) {
    if ((uexpr instanceof PyClass)) {
      PyClass cls=(PyClass)uexpr;
      if (isSuperClassExpression(cls)) {
        ret.clear();
        return ret;
      }
    }
    for (    NameDefiner hit : processor.getDefiners()) {
      ret.poke(hit,getRate(hit));
    }
  }
  if (uexpr == null) {
    PyType otype=PyBuiltinCache.getInstance(realContext).getObjectType();
    if (otype != null)     uexpr=otype.resolveMember(myElement.getName());
  }
  if (uexpr == null) {
    PyFile bfile=PyBuiltinCache.getInstance(realContext).getBuiltinsFile();
    if (bfile != null) {
      uexpr=bfile.getElementNamed(referencedName);
    }
  }
  if (uexpr == null) {
    uexpr=PyResolveUtil.scanOuterContext(new ResolveProcessor(referencedName),realContext);
  }
  uexpr=PyUtil.turnDirIntoInit(uexpr);
  if (uexpr != null) {
    ret.add(new ImportedResolveResult(uexpr,getRate(uexpr),processor.getDefiners()));
  }
  return ret;
}
