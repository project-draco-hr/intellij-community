{
  ResultList ret=new ResultList();
  final String referencedName=myElement.getReferencedName();
  if (referencedName == null)   return ret;
  ResolveProcessor processor=new ResolveProcessor(referencedName);
  final PsiElement realContext=PyPsiUtils.getRealContext(myElement);
  PsiElement roof=null;
  if (PyUtil.isClassPrivateName(referencedName)) {
    PsiElement one=myElement;
    do {
      one=PyUtil.getConcealingParent(one);
    }
 while (one instanceof PyFunction);
    if (one instanceof PyClass)     roof=one;
  }
  if (roof == null)   roof=realContext.getContainingFile();
  PsiElement uexpr=PyResolveUtil.treeCrawlUp(processor,false,realContext,roof);
  if ((uexpr != null)) {
    if ((uexpr instanceof PyClass)) {
      PyClass cls=(PyClass)uexpr;
      if (isSuperClassExpression(cls)) {
        ret.clear();
        return ret;
      }
    }
    for (    NameDefiner hit : processor.getDefiners()) {
      ret.poke(hit,getRate(hit));
    }
  }
  if (uexpr == null) {
    PyType otype=PyBuiltinCache.getInstance(realContext).getObjectType();
    if (otype != null)     uexpr=otype.resolveMember(myElement.getName(),PyType.Context.READ).valueOrNull();
  }
  if (uexpr == null) {
    PyFile bfile=PyBuiltinCache.getInstance(realContext).getBuiltinsFile();
    if (bfile != null) {
      uexpr=bfile.getElementNamed(referencedName);
    }
  }
  if (uexpr == null) {
    uexpr=PyUtil.turnDirIntoInit(PyResolveUtil.scanOuterContext(new ResolveProcessor(referencedName),realContext));
  }
  if (uexpr != null) {
    ret.add(new ImportedResolveResult(uexpr,getRate(uexpr),processor.getDefiners()));
  }
  if (uexpr == null) {
    PyDecorator deco=PsiTreeUtil.getParentOfType(myElement,PyDecorator.class);
    if (deco != null) {
      PyClass cls=PsiTreeUtil.getParentOfType(deco,PyClass.class);
      if (cls != null) {
        Property prop=cls.findProperty(referencedName);
        if (prop != null && prop.getGetter().isDefined())         ret.poke(prop.getGetter().value(),RatedResolveResult.RATE_NORMAL);
      }
    }
  }
  return ret;
}
