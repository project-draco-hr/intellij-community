{
  final CCProjectService service=CCProjectService.getInstance(project);
  final Course course=new Course();
  course.setName(name);
  course.setAuthors(authors);
  course.setDescription(description);
  course.setLanguage("Python");
  service.setCourse(course);
  final PsiDirectory projectDir=PsiManager.getInstance(project).findDirectory(baseDir);
  if (projectDir == null)   return;
  new WriteCommandAction.Simple(project){
    @Override protected void run() throws Throwable {
      final FileTemplate template=FileTemplateManager.getInstance(project).getInternalTemplate("test_helper");
      try {
        FileTemplateUtil.createFromTemplate(template,"test_helper.py",null,projectDir);
      }
 catch (      Exception ignored) {
      }
      DirectoryUtil.createSubdirectories("hints",projectDir,"\\/");
      final PsiDirectory lessonDir=CCCreateLesson.createLessonDir(project,1,null,null);
      CCCreateTask.createTask(null,project,lessonDir,false);
    }
  }
.execute();
}
