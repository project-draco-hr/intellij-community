{
  return new JavaElementVisitor(){
    @Override public void visitForeachStatement(    PsiForeachStatement statement){
      super.visitForeachStatement(statement);
      if (PsiUtil.getLanguageLevel(statement).isAtLeast(LanguageLevel.JDK_1_8)) {
        final PsiExpression iteratedValue=statement.getIteratedValue();
        final PsiStatement body=statement.getBody();
        if (iteratedValue != null && body != null) {
          final PsiType iteratedValueType=iteratedValue.getType();
          final PsiClass iteratorClass=PsiUtil.resolveClassInType(iteratedValueType);
          final PsiClass collectionClass=JavaPsiFacade.getInstance(body.getProject()).findClass(CommonClassNames.JAVA_UTIL_COLLECTION,statement.getResolveScope());
          if (collectionClass != null && InheritanceUtil.isInheritorOrSelf(iteratorClass,collectionClass,true)) {
            try {
              final ControlFlow controlFlow=ControlFlowFactory.getInstance(holder.getProject()).getControlFlow(body,LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance());
              int startOffset=controlFlow.getStartOffset(body);
              int endOffset=controlFlow.getEndOffset(body);
              final Collection<PsiStatement> exitPoints=ControlFlowUtil.findExitPointsAndStatements(controlFlow,startOffset,endOffset,new IntArrayList(),PsiContinueStatement.class,PsiBreakStatement.class,PsiReturnStatement.class,PsiThrowStatement.class);
              if (exitPoints.isEmpty()) {
                final List<PsiVariable> usedVariables=ControlFlowUtil.getUsedVariables(controlFlow,startOffset,endOffset);
                for (                PsiVariable variable : usedVariables) {
                  if (!HighlightControlFlowUtil.isEffectivelyFinal(variable,body,null)) {
                    return;
                  }
                }
                if (ExceptionUtil.getThrownCheckedExceptions(new PsiElement[]{body}).isEmpty()) {
                  if (!isRawSubstitution(iteratedValueType,collectionClass) && isCollectCall(body,statement.getIterationParameter())) {
                    boolean addAll=isAddAllCall(statement,body);
                    holder.registerProblem(iteratedValue,"Can be replaced with " + (addAll ? "addAll call" : "collect call"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,addAll ? new ReplaceWithAddAllFix() : new ReplaceWithCollectFix());
                  }
 else                   if (REPLACE_TRIVIAL_FOREACH || !isTrivial(body,statement.getIterationParameter())) {
                    final List<LocalQuickFix> fixes=new ArrayList<>();
                    fixes.add(new ReplaceWithForeachCallFix("forEach"));
                    if (extractIfStatement(body) != null) {
                      fixes.add(new ReplaceWithForeachCallFix("forEachOrdered"));
                    }
                    holder.registerProblem(iteratedValue,"Can be replaced with foreach call",ProblemHighlightType.GENERIC_ERROR_OR_WARNING,fixes.toArray(new LocalQuickFix[fixes.size()]));
                  }
                }
              }
            }
 catch (            AnalysisCanceledException ignored) {
            }
          }
        }
      }
    }
    private boolean isRawSubstitution(    PsiType iteratedValueType,    PsiClass collectionClass){
      return iteratedValueType instanceof PsiClassType && PsiUtil.isRawSubstitutor(collectionClass,TypeConversionUtil.getSuperClassSubstitutor(collectionClass,(PsiClassType)iteratedValueType));
    }
  }
;
}
