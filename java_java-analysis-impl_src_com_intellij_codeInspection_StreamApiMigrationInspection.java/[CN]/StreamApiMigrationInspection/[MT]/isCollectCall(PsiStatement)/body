{
  final PsiIfStatement ifStatement=extractIfStatement(body);
  final PsiMethodCallExpression methodCallExpression=extractAddCall(body);
  if (methodCallExpression != null) {
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
    PsiClass qualifierClass=null;
    if (qualifierExpression instanceof PsiReferenceExpression) {
      qualifierClass=PsiUtil.resolveClassInType(qualifierExpression.getType());
    }
 else     if (qualifierExpression == null) {
      final PsiClass enclosingClass=PsiTreeUtil.getParentOfType(body,PsiClass.class);
      if (PsiUtil.getEnclosingStaticElement(body,enclosingClass) == null) {
        qualifierClass=enclosingClass;
      }
    }
    if (qualifierClass != null && InheritanceUtil.isInheritor(qualifierClass,false,CommonClassNames.JAVA_UTIL_COLLECTION)) {
      if (ifStatement != null) {
        final PsiExpression condition=ifStatement.getCondition();
        if (condition != null && isConditionDependsOnUpdatedCollections(condition,qualifierExpression))         return false;
      }
      final PsiElement resolve=methodExpression.resolve();
      if (resolve instanceof PsiMethod && "add".equals(((PsiMethod)resolve).getName()) && ((PsiMethod)resolve).getParameterList().getParametersCount() == 1) {
        final PsiExpression[] args=methodCallExpression.getArgumentList().getExpressions();
        if (args.length == 1) {
          if (args[0] instanceof PsiCallExpression) {
            final PsiMethod method=((PsiCallExpression)args[0]).resolveMethod();
            return method != null && !method.hasTypeParameters();
          }
          return true;
        }
      }
    }
  }
  return false;
}
