{
  String result="";
  final Project project=variable.getProject();
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
  final PsiClass functionClass=psiFacade.findClass(samQualifiedName,GlobalSearchScope.allScope(project));
  for (int i=0; i < samParamTypes.length; i++) {
    if (samParamTypes[i] instanceof PsiPrimitiveType) {
      samParamTypes[i]=((PsiPrimitiveType)samParamTypes[i]).getBoxedType(expression);
    }
  }
  final PsiClassType functionalInterfaceType=functionClass != null ? psiFacade.getElementFactory().createType(functionClass,samParamTypes) : null;
  final PsiVariable[] parameters={variable};
  String methodReferenceText=LambdaCanBeMethodReferenceInspection.convertToMethodReference(expression,parameters,functionalInterfaceType,null);
  if (methodReferenceText != null) {
    LOG.assertTrue(functionalInterfaceType != null);
    result+="(" + functionalInterfaceType.getCanonicalText() + ")"+ methodReferenceText;
  }
 else {
    result+=variable.getName() + " -> " + expression.getText();
  }
  return result;
}
