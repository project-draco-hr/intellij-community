{
  final PsiElement collection=qualifierExpression != null ? ((PsiReferenceExpression)qualifierExpression).resolve() : null;
  final boolean[] dependsOnCollection={false};
  condition.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      if (collection != null && collection == expression.resolve()) {
        dependsOnCollection[0]=true;
      }
    }
    @Override public void visitMethodCallExpression(    PsiMethodCallExpression expression){
      super.visitMethodCallExpression(expression);
      final PsiExpression callQualifier=expression.getMethodExpression().getQualifierExpression();
      if (collection == callQualifier) {
        dependsOnCollection[0]=true;
      }
      if (collection == null && (callQualifier instanceof PsiThisExpression && ((PsiThisExpression)callQualifier).getQualifier() == null || callQualifier instanceof PsiSuperExpression && ((PsiSuperExpression)callQualifier).getQualifier() == null)) {
        dependsOnCollection[0]=true;
      }
    }
    @Override public void visitThisExpression(    PsiThisExpression expression){
      super.visitThisExpression(expression);
      if (collection == null && expression.getQualifier() == null && expression.getParent() instanceof PsiExpressionList) {
        dependsOnCollection[0]=true;
      }
    }
    @Override public void visitClass(    PsiClass aClass){
    }
  }
);
  return dependsOnCollection[0];
}
