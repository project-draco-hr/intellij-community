{
  final PsiForeachStatement foreachStatement=PsiTreeUtil.getParentOfType(descriptor.getPsiElement(),PsiForeachStatement.class);
  if (foreachStatement != null) {
    if (!FileModificationService.getInstance().preparePsiElementForWrite(foreachStatement))     return;
    PsiStatement body=foreachStatement.getBody();
    final PsiExpression iteratedValue=foreachStatement.getIteratedValue();
    if (body != null && iteratedValue != null) {
      restoreComments(foreachStatement,body);
      final PsiParameter parameter=foreachStatement.getIterationParameter();
      final PsiIfStatement ifStmt=extractIfStatement(body);
      StringBuilder buffer=new StringBuilder(getIteratedValueText(iteratedValue));
      if (ifStmt != null) {
        final PsiStatement thenBranch=ifStmt.getThenBranch();
        LOG.assertTrue(thenBranch != null);
        buffer.append(".stream()");
        buffer.append(createFiltersChainText(body,parameter,ifStmt));
        body=thenBranch;
      }
      buffer.append(".forEach(");
      final String functionalExpressionText=createForEachFunctionalExpressionText(project,body,parameter);
      final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
      PsiExpressionStatement callStatement=(PsiExpressionStatement)elementFactory.createStatementFromText(buffer.toString() + functionalExpressionText + ");",foreachStatement);
      callStatement=(PsiExpressionStatement)foreachStatement.replace(callStatement);
      final PsiExpressionList argumentList=((PsiCallExpression)callStatement.getExpression()).getArgumentList();
      LOG.assertTrue(argumentList != null,callStatement.getText());
      final PsiExpression[] expressions=argumentList.getExpressions();
      LOG.assertTrue(expressions.length == 1);
      if (expressions[0] instanceof PsiFunctionalExpression && ((PsiFunctionalExpression)expressions[0]).getFunctionalInterfaceType() == null) {
        callStatement=(PsiExpressionStatement)callStatement.replace(elementFactory.createStatementFromText(buffer.toString() + "(" + parameter.getText()+ ") -> "+ wrapInBlock(body)+ ");",callStatement));
      }
      CodeStyleManager.getInstance(project).reformat(callStatement);
    }
  }
}
