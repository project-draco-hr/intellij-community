{
  final PsiCallExpression callExpression=LambdaCanBeMethodReferenceInspection.extractMethodCallFromBlock(block);
  if (callExpression != null) {
    final PsiClassType functionalType=createDefaultConsumerType(project,variable);
    String methodReferenceText=null;
    if (variable instanceof PsiParameter) {
      final PsiParameter[] parameters={(PsiParameter)variable};
      methodReferenceText=LambdaCanBeMethodReferenceInspection.convertToMethodReference(block,parameters,functionalType,null);
    }
    if (methodReferenceText != null) {
      return methodReferenceText;
    }
  }
  return variable.getName() + " -> " + wrapInBlock(block);
}
