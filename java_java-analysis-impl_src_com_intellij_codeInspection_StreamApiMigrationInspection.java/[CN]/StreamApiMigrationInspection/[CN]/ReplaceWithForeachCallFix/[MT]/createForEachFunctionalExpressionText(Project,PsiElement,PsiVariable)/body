{
  final PsiExpression methodRefCandidate=LambdaCanBeMethodReferenceInspection.extractMethodReferenceCandidateExpression(block);
  if (methodRefCandidate != null) {
    final PsiClassType functionalType=createDefaultConsumerType(project,variable);
    final PsiVariable[] parameters={variable};
    String methodReferenceText=LambdaCanBeMethodReferenceInspection.convertToMethodReference(block,parameters,functionalType,null);
    if (methodReferenceText != null) {
      return methodReferenceText;
    }
  }
  return variable.getName() + " -> " + wrapInBlock(block);
}
