{
  restoreComments(foreachStatement,body);
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  StringBuilder buffer=generateStream(iteratedValue,intermediateOps);
  PsiElement block=tb.convertToElement(elementFactory);
  buffer.append(".").append(myForEachMethodName).append("(");
  final String functionalExpressionText=tb.getVariable().getName() + " -> " + wrapInBlock(block);
  PsiExpressionStatement callStatement=(PsiExpressionStatement)elementFactory.createStatementFromText(buffer.toString() + functionalExpressionText + ");",foreachStatement);
  callStatement=(PsiExpressionStatement)foreachStatement.replace(callStatement);
  final PsiExpressionList argumentList=((PsiCallExpression)callStatement.getExpression()).getArgumentList();
  LOG.assertTrue(argumentList != null,callStatement.getText());
  final PsiExpression[] expressions=argumentList.getExpressions();
  LOG.assertTrue(expressions.length == 1);
  if (expressions[0] instanceof PsiFunctionalExpression && ((PsiFunctionalExpression)expressions[0]).getFunctionalInterfaceType() == null) {
    callStatement=(PsiExpressionStatement)callStatement.replace(elementFactory.createStatementFromText(buffer.toString() + "(" + tb.getVariable().getText()+ ") -> "+ wrapInBlock(block)+ ");",callStatement));
  }
  simplifyAndFormat(project,callStatement);
}
