{
  final PsiCallExpression callExpression=LambdaCanBeMethodReferenceInspection.extractMethodCallFromBlock(body);
  if (callExpression != null) {
    final PsiClassType functionalType=createDefaultConsumerType(project,parameter);
    final PsiParameter[] parameters={parameter};
    final PsiElement bodyBlock=body instanceof PsiBlockStatement ? ((PsiBlockStatement)body).getCodeBlock() : body;
    final PsiCallExpression toConvertCall=LambdaCanBeMethodReferenceInspection.canBeMethodReferenceProblem(bodyBlock,parameters,functionalType);
    final String methodReferenceText=LambdaCanBeMethodReferenceInspection.createMethodReferenceText(toConvertCall,functionalType,parameters);
    if (methodReferenceText != null) {
      return methodReferenceText;
    }
  }
  return parameter.getName() + " -> " + wrapInBlock(body);
}
