{
  PsiAssignmentExpression assignment=tb.getSingleExpression(PsiAssignmentExpression.class);
  if (assignment == null)   return;
  PsiExpression operand=extractAccumulator(assignment);
  if (!(operand instanceof PsiReferenceExpression))   return;
  PsiElement element=((PsiReferenceExpression)operand).resolve();
  if (!(element instanceof PsiLocalVariable))   return;
  PsiLocalVariable var=(PsiLocalVariable)element;
  PsiExpression addend=extractAddend(assignment);
  if (addend == null)   return;
  PsiType type=var.getType();
  if (!(type instanceof PsiPrimitiveType))   return;
  PsiPrimitiveType primitiveType=(PsiPrimitiveType)type;
  if (primitiveType.equalsToText("float"))   return;
  String typeName;
  if (primitiveType.equalsToText("double")) {
    typeName="Double";
  }
 else   if (primitiveType.equalsToText("long")) {
    typeName="Long";
  }
 else {
    typeName="Int";
  }
  intermediateOps.add(".mapTo" + typeName + "("+ compoundLambdaOrMethodReference(tb.getVariable(),addend,"java.util.function.To" + typeName + "Function",new PsiType[]{tb.getVariable().getType()})+ ")");
  final StringBuilder builder=generateStream(iteratedValue,intermediateOps);
  builder.append(".sum()");
  replaceWithNumericAddition(project,foreachStatement,var,builder,typeName.toLowerCase(Locale.ENGLISH));
}
