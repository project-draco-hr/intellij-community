{
  String iteration="";
  if (!isIdentityMapping(parameter,expression)) {
    iteration+=".map(";
    final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
    final PsiClass functionClass=psiFacade.findClass("java.util.function.Function",GlobalSearchScope.allScope(project));
    final PsiType[] paramTypes={parameter.getType(),expression.getType()};
    for (int i=0; i < paramTypes.length; i++) {
      if (paramTypes[i] instanceof PsiPrimitiveType) {
        paramTypes[i]=((PsiPrimitiveType)paramTypes[i]).getBoxedType(expression);
      }
    }
    final PsiClassType functionalInterfaceType=functionClass != null ? psiFacade.getElementFactory().createType(functionClass,paramTypes) : null;
    final PsiCallExpression toConvertCall=LambdaCanBeMethodReferenceInspection.canBeMethodReferenceProblem(expression,new PsiParameter[]{parameter},functionalInterfaceType);
    final String methodReferenceText=LambdaCanBeMethodReferenceInspection.createMethodReferenceText(toConvertCall,functionalInterfaceType,new PsiParameter[]{parameter});
    if (methodReferenceText != null) {
      LOG.assertTrue(functionalInterfaceType != null);
      iteration+="(" + functionalInterfaceType.getCanonicalText() + ")"+ methodReferenceText;
    }
 else {
      iteration+=parameter.getName() + " -> " + expression.getText();
    }
    iteration+=")";
  }
  return iteration;
}
