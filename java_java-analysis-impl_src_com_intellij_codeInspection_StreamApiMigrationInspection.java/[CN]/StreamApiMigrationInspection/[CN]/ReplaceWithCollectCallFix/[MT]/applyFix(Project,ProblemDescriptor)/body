{
  final PsiForeachStatement foreachStatement=PsiTreeUtil.getParentOfType(descriptor.getPsiElement(),PsiForeachStatement.class);
  if (foreachStatement != null) {
    PsiStatement body=foreachStatement.getBody();
    final PsiExpression iteratedValue=foreachStatement.getIteratedValue();
    if (body != null && iteratedValue != null) {
      final PsiParameter parameter=foreachStatement.getIterationParameter();
      final PsiIfStatement ifStatement=extractIfStatement(body);
      final PsiMethodCallExpression methodCallExpression=extractAddCall(body);
      String iteration=iteratedValue.getText() + ".stream()";
      if (ifStatement != null) {
        final PsiExpression condition=ifStatement.getCondition();
        if (condition != null) {
          iteration+=".filter(" + parameter.getName() + " -> "+ condition.getText()+ ")";
        }
      }
      iteration+=".map(" + parameter.getName() + " -> "+ methodCallExpression.getArgumentList().getExpressions()[0].getText()+ ").collect(java.util.stream.Collectors.";
      String variableName=null;
      PsiExpression initializer=null;
      final PsiExpression qualifierExpression=methodCallExpression.getMethodExpression().getQualifierExpression();
      if (qualifierExpression instanceof PsiReferenceExpression) {
        final PsiElement resolve=((PsiReferenceExpression)qualifierExpression).resolve();
        if (resolve instanceof PsiVariable) {
          if (resolve instanceof PsiLocalVariable && foreachStatement.equals(PsiTreeUtil.skipSiblingsForward(resolve.getParent(),PsiWhiteSpace.class))) {
            initializer=((PsiVariable)resolve).getInitializer();
          }
          variableName=((PsiVariable)resolve).getName() + ".";
        }
      }
 else       if (qualifierExpression == null) {
        variableName="";
      }
      if (initializer != null) {
        final PsiType initializerType=initializer.getType();
        final PsiClassType rawType=initializerType instanceof PsiClassType ? ((PsiClassType)initializerType).rawType() : null;
        if (rawType != null && rawType.equalsToText(CommonClassNames.JAVA_UTIL_ARRAY_LIST)) {
          iteration+="toList()";
        }
 else         if (rawType != null && rawType.equalsToText(CommonClassNames.JAVA_UTIL_HASH_SET)) {
          iteration+="toSet()";
        }
 else {
          iteration+="toCollection(() -> " + initializer.getText() + ")";
        }
        iteration+=")";
        initializer.replace(JavaPsiFacade.getElementFactory(project).createExpressionFromText(iteration,foreachStatement));
        foreachStatement.delete();
      }
 else       if (variableName != null) {
        iteration+="toList())";
        foreachStatement.replace(JavaPsiFacade.getElementFactory(project).createStatementFromText(variableName + "addAll(" + iteration+ ");",foreachStatement));
      }
    }
  }
}
