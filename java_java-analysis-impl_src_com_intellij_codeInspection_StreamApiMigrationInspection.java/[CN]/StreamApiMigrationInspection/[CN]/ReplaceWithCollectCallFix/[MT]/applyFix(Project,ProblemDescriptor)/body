{
  final PsiForeachStatement foreachStatement=PsiTreeUtil.getParentOfType(descriptor.getPsiElement(),PsiForeachStatement.class);
  if (foreachStatement != null) {
    PsiStatement body=foreachStatement.getBody();
    final PsiExpression iteratedValue=foreachStatement.getIteratedValue();
    if (body != null && iteratedValue != null) {
      final PsiParameter parameter=foreachStatement.getIterationParameter();
      String iteration=getIteratedValueText(iteratedValue) + ".stream()";
      final PsiIfStatement ifStatement=extractIfStatement(body);
      final PsiMethodCallExpression methodCallExpression=extractAddCall(body,ifStatement);
      iteration+=composeFilters(body,parameter,ifStatement);
      final PsiExpression mapperCall=methodCallExpression.getArgumentList().getExpressions()[0];
      if (!isIdentityMapping(parameter,mapperCall)) {
        iteration+=".map(";
        final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
        final PsiClass functionClass=psiFacade.findClass("java.util.function.Function",GlobalSearchScope.allScope(project));
        final PsiClassType functionalInterfaceType=functionClass != null ? psiFacade.getElementFactory().createType(functionClass,parameter.getType(),mapperCall.getType()) : null;
        final PsiCallExpression toConvertCall=LambdaCanBeMethodReferenceInspection.canBeMethodReferenceProblem(mapperCall,new PsiParameter[]{parameter},functionalInterfaceType);
        final String methodReferenceText=LambdaCanBeMethodReferenceInspection.createMethodReferenceText(toConvertCall,functionalInterfaceType,new PsiParameter[]{parameter});
        if (methodReferenceText != null) {
          iteration+=methodReferenceText;
        }
 else {
          iteration+=parameter.getName() + " -> " + mapperCall.getText();
        }
        iteration+=")";
      }
      iteration+=".collect(java.util.stream.Collectors.";
      String variableName=null;
      PsiExpression primitiveInitializer=null;
      final PsiExpression qualifierExpression=methodCallExpression.getMethodExpression().getQualifierExpression();
      if (qualifierExpression instanceof PsiReferenceExpression) {
        final PsiElement resolve=((PsiReferenceExpression)qualifierExpression).resolve();
        if (resolve instanceof PsiVariable) {
          if (resolve instanceof PsiLocalVariable && foreachStatement.equals(PsiTreeUtil.skipSiblingsForward(resolve.getParent(),PsiWhiteSpace.class))) {
            final PsiExpression initializer=((PsiVariable)resolve).getInitializer();
            if (initializer instanceof PsiNewExpression) {
              final PsiExpressionList argumentList=((PsiNewExpression)initializer).getArgumentList();
              if (argumentList != null && argumentList.getExpressions().length == 0) {
                primitiveInitializer=initializer;
              }
            }
          }
          variableName=qualifierExpression.getText() + ".";
        }
      }
 else       if (qualifierExpression == null) {
        variableName="";
      }
      if (variableName != null) {
        final PsiElement parent=foreachStatement.getParent();
        for (        PsiElement comment : PsiTreeUtil.findChildrenOfType(body,PsiComment.class)) {
          parent.addBefore(comment,foreachStatement);
        }
      }
      PsiElement result=null;
      if (primitiveInitializer != null) {
        final PsiType initializerType=primitiveInitializer.getType();
        final PsiClassType rawType=initializerType instanceof PsiClassType ? ((PsiClassType)initializerType).rawType() : null;
        if (rawType != null && rawType.equalsToText(CommonClassNames.JAVA_UTIL_ARRAY_LIST)) {
          iteration+="toList()";
        }
 else         if (rawType != null && rawType.equalsToText(CommonClassNames.JAVA_UTIL_HASH_SET)) {
          iteration+="toSet()";
        }
 else {
          iteration+="toCollection(() -> " + primitiveInitializer.getText() + ")";
        }
        iteration+=")";
        result=primitiveInitializer.replace(JavaPsiFacade.getElementFactory(project).createExpressionFromText(iteration,foreachStatement));
        foreachStatement.delete();
      }
 else       if (variableName != null) {
        iteration+="toList())";
        result=foreachStatement.replace(JavaPsiFacade.getElementFactory(project).createStatementFromText(variableName + "addAll(" + iteration+ ");",foreachStatement));
      }
      if (result != null) {
        JavaCodeStyleManager.getInstance(project).shortenClassReferences(result);
      }
    }
  }
}
