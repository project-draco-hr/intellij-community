{
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
  final PsiType iteratedValueType=iteratedValue.getType();
  final PsiMethodCallExpression methodCallExpression=tb.getSingleMethodCall();
  if (methodCallExpression == null)   return;
  restoreComments(foreachStatement,body);
  if (intermediateOps.isEmpty() && isAddAllCall(tb)) {
    final PsiExpression qualifierExpression=methodCallExpression.getMethodExpression().getQualifierExpression();
    final String qualifierText=qualifierExpression != null ? qualifierExpression.getText() : "";
    final String collectionText=iteratedValueType instanceof PsiArrayType ? "java.util.Arrays.asList(" + iteratedValue.getText() + ")" : getIteratedValueText(iteratedValue);
    final String callText=StringUtil.getQualifiedName(qualifierText,"addAll(" + collectionText + ");");
    PsiElement result=foreachStatement.replace(elementFactory.createStatementFromText(callText,foreachStatement));
    simplifyAndFormat(project,result);
    return;
  }
  intermediateOps.add(createMapperFunctionalExpressionText(tb.getVariable(),methodCallExpression.getArgumentList().getExpressions()[0]));
  final StringBuilder builder=generateStream(iteratedValue,intermediateOps);
  builder.append(".collect(java.util.stream.Collectors.");
  final PsiExpression qualifierExpression=methodCallExpression.getMethodExpression().getQualifierExpression();
  if (qualifierExpression instanceof PsiReferenceExpression) {
    final PsiElement resolve=((PsiReferenceExpression)qualifierExpression).resolve();
    if (resolve instanceof PsiLocalVariable) {
      PsiLocalVariable var=(PsiLocalVariable)resolve;
      if (isDeclarationJustBefore(var,foreachStatement)) {
        final PsiExpression initializer=var.getInitializer();
        if (initializer instanceof PsiNewExpression) {
          final PsiExpressionList argumentList=((PsiNewExpression)initializer).getArgumentList();
          if (argumentList != null && argumentList.getExpressions().length == 0) {
            final String callText=builder.toString() + createInitializerReplacementText(var.getType(),initializer) + ")";
            PsiElement result=initializer.replace(elementFactory.createExpressionFromText(callText,null));
            simplifyAndFormat(project,result);
            foreachStatement.delete();
            return;
          }
        }
      }
    }
  }
  final String qualifierText=qualifierExpression != null ? qualifierExpression.getText() : "";
  final String callText=StringUtil.getQualifiedName(qualifierText,"addAll(" + builder.toString() + "toList()));");
  PsiElement result=foreachStatement.replace(elementFactory.createStatementFromText(callText,foreachStatement));
  simplifyAndFormat(project,result);
}
