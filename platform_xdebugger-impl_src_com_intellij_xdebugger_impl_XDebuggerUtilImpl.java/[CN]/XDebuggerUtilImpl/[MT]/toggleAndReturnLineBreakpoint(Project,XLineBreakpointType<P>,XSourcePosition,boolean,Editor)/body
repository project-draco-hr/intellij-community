{
  return new WriteAction<AsyncResult<XLineBreakpoint>>(){
    @Override protected void run(    @NotNull Result<AsyncResult<XLineBreakpoint>> result) throws Throwable {
      final VirtualFile file=position.getFile();
      final int line=position.getLine();
      final XBreakpointManager breakpointManager=XDebuggerManager.getInstance(project).getBreakpointManager();
      XLineBreakpoint<P> breakpoint=breakpointManager.findBreakpointAtLine(type,file,line);
      if (breakpoint != null) {
        breakpointManager.removeBreakpoint(breakpoint);
      }
 else {
        if (type instanceof XLineBreakpointVariantsProvider) {
          final XLineBreakpointVariantsProvider<XLineBreakpointVariant> provider=(XLineBreakpointVariantsProvider<XLineBreakpointVariant>)type;
          List<XLineBreakpointVariant> variants=provider.computeLineBreakpointVariants(project,position);
          if (!variants.isEmpty() && editor != null) {
            RelativePoint relativePoint=DebuggerUIUtil.calcPopupLocation(editor,line);
            if (variants.size() > 1 && relativePoint != null) {
              final AsyncResult<XLineBreakpoint> res=new AsyncResult<XLineBreakpoint>();
class MySelectionListener implements ListSelectionListener {
                RangeHighlighter myHighlighter=null;
                @Override public void valueChanged(                ListSelectionEvent e){
                  if (!e.getValueIsAdjusting()) {
                    clearHighlighter();
                    Object value=((JList)e.getSource()).getSelectedValue();
                    if (value instanceof XLineBreakpointVariant) {
                      TextRange range=((XLineBreakpointVariant)value).getHighlightRange();
                      TextRange lineRange=DocumentUtil.getLineTextRange(editor.getDocument(),line);
                      if (range != null) {
                        range=range.intersection(lineRange);
                      }
 else {
                        range=lineRange;
                      }
                      if (range != null && !range.isEmpty()) {
                        EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
                        TextAttributes attributes=scheme.getAttributes(DebuggerColors.BREAKPOINT_ATTRIBUTES);
                        myHighlighter=editor.getMarkupModel().addRangeHighlighter(range.getStartOffset(),range.getEndOffset(),DebuggerColors.BREAKPOINT_HIGHLIGHTER_LAYER,attributes,HighlighterTargetArea.EXACT_RANGE);
                      }
                    }
                  }
                }
                private void clearHighlighter(){
                  if (myHighlighter != null) {
                    myHighlighter.dispose();
                  }
                }
              }
              final MySelectionListener selectionListener=new MySelectionListener();
              ListPopup popup=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<XLineBreakpointVariant>("Create breakpoint for",variants){
                @NotNull @Override public String getTextFor(                XLineBreakpointVariant value){
                  return value.getText();
                }
                @Override public Icon getIconFor(                XLineBreakpointVariant value){
                  return value.getIcon();
                }
                @Override public void canceled(){
                  selectionListener.clearHighlighter();
                }
                @Override public PopupStep onChosen(                final XLineBreakpointVariant selectedValue,                boolean finalChoice){
                  selectionListener.clearHighlighter();
                  ApplicationManager.getApplication().runWriteAction(new Runnable(){
                    @Override public void run(){
                      P properties=(P)selectedValue.createProperties();
                      res.setDone(breakpointManager.addLineBreakpoint(type,file.getUrl(),line,properties,temporary));
                    }
                  }
);
                  return FINAL_CHOICE;
                }
              }
);
              popup.addListSelectionListener(selectionListener);
              popup.show(relativePoint);
              result.setResult(res);
              return;
            }
 else {
              P properties=(P)variants.get(0).createProperties();
              result.setResult(AsyncResult.done((XLineBreakpoint)breakpointManager.addLineBreakpoint(type,file.getUrl(),line,properties,temporary)));
              return;
            }
          }
        }
        P properties=type.createBreakpointProperties(file,line);
        result.setResult(AsyncResult.done((XLineBreakpoint)breakpointManager.addLineBreakpoint(type,file.getUrl(),line,properties,temporary)));
        return;
      }
      result.setResult(AsyncResult.<XLineBreakpoint>rejected());
    }
  }
.execute().getResultObject();
}
