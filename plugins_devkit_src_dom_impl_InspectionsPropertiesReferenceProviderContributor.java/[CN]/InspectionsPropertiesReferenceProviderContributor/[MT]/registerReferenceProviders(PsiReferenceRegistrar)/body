{
  ElementPattern pattern=createPattern("key","groupKey");
  registrar.registerReferenceProvider(pattern,new InspectionsKeyPropertiesReferenceProvider(false),PsiReferenceRegistrar.DEFAULT_PRIORITY);
  ElementPattern bundlePattern=createPattern("bundle","groupBundle");
  registrar.registerReferenceProvider(bundlePattern,new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext context){
      ResourceBundleReference reference=new ResourceBundleReference(element,false){
        @NotNull @Override public Object[] getVariants(){
          PropertiesReferenceManager referenceManager=PropertiesReferenceManager.getInstance(myElement.getProject());
          final List<LookupElement> variants=new ArrayList<LookupElement>();
          referenceManager.processPropertiesFiles(GlobalSearchScope.projectScope(myElement.getProject()),new PropertiesFileProcessor(){
            public boolean process(            String baseName,            PropertiesFile propertiesFile){
              variants.add(LookupElementBuilder.create(propertiesFile,baseName).withIcon(propertiesFile.getContainingFile().getIcon(Iconable.ICON_FLAG_READ_STATUS)));
              return true;
            }
          }
,this);
          return variants.toArray(new LookupElement[variants.size()]);
        }
      }
;
      return new PsiReference[]{reference};
    }
  }
,PsiReferenceRegistrar.DEFAULT_PRIORITY);
}
