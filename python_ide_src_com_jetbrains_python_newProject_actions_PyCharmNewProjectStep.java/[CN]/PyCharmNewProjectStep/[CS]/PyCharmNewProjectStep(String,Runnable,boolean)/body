{
  super(name,true);
  final NullableConsumer<AbstractProjectSettingsStep> callback=new GenerateProjectCallback(runnable);
  final ProjectSpecificAction action=new ProjectSpecificAction(callback,new PythonBaseProjectGenerator(),isWelcomeScreen);
  add(action);
  final DirectoryProjectGenerator[] generators=Extensions.getExtensions(DirectoryProjectGenerator.EP_NAME);
  if (generators.length == 0) {
    action.setPopup(false);
  }
  Arrays.sort(generators,new Comparator<DirectoryProjectGenerator>(){
    @Override public int compare(    DirectoryProjectGenerator o1,    DirectoryProjectGenerator o2){
      if (o1 instanceof PyFrameworkProjectGenerator && !(o2 instanceof PyFrameworkProjectGenerator))       return -1;
      if (!(o1 instanceof PyFrameworkProjectGenerator) && o2 instanceof PyFrameworkProjectGenerator)       return 1;
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  List<DirectoryProjectGenerator> pluginSpecificGenerators=Lists.newArrayList();
  for (  DirectoryProjectGenerator generator : generators) {
    if (generator instanceof PythonProjectGenerator)     add(new ProjectSpecificAction(callback,generator,isWelcomeScreen));
 else     pluginSpecificGenerators.add(generator);
  }
  if (!pluginSpecificGenerators.isEmpty()) {
    add(new PluginSpecificProjectsStep(callback,pluginSpecificGenerators,isWelcomeScreen));
  }
}
