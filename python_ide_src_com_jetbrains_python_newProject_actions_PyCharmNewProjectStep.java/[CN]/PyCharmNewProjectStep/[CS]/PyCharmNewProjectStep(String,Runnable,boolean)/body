{
  super(name,true);
  final NullableConsumer<ProjectSettingsStepBase> callback=new GenerateProjectCallback(runnable);
  final PythonBaseProjectGenerator baseGenerator=new PythonBaseProjectGenerator();
  final ProjectSpecificAction action=new ProjectSpecificAction(baseGenerator,new ProjectSpecificSettingsStep(baseGenerator,callback));
  if (isWelcomeScreen) {
    addAll(action.getChildren(null));
  }
 else {
    add(action);
  }
  final DirectoryProjectGenerator[] generators=Extensions.getExtensions(DirectoryProjectGenerator.EP_NAME);
  if (generators.length == 0) {
    action.setPopup(false);
  }
  Arrays.sort(generators,new Comparator<DirectoryProjectGenerator>(){
    @Override public int compare(    DirectoryProjectGenerator o1,    DirectoryProjectGenerator o2){
      if (o1 instanceof PyFrameworkProjectGenerator && !(o2 instanceof PyFrameworkProjectGenerator))       return -1;
      if (!(o1 instanceof PyFrameworkProjectGenerator) && o2 instanceof PyFrameworkProjectGenerator)       return 1;
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  List<DirectoryProjectGenerator> pluginSpecificGenerators=Lists.newArrayList();
  for (  DirectoryProjectGenerator generator : generators) {
    if (generator instanceof PythonProjectGenerator) {
      ProjectSpecificAction group=new ProjectSpecificAction(generator,new ProjectSpecificSettingsStep(generator,callback));
      if (isWelcomeScreen) {
        addAll(group.getChildren(null));
      }
 else {
        add(group);
      }
    }
 else     pluginSpecificGenerators.add(generator);
  }
  if (!pluginSpecificGenerators.isEmpty()) {
    PluginSpecificProjectsStep step=new PluginSpecificProjectsStep(callback,pluginSpecificGenerators,isWelcomeScreen);
    if (isWelcomeScreen) {
      addAll(step.getChildren(null));
    }
 else {
      add(step);
    }
  }
}
