{
  super("Select Project Type",true);
  final NullableConsumer<AbstractProjectSettingsStep> callback=new NullableConsumer<AbstractProjectSettingsStep>(){
    @Override public void consume(    @Nullable AbstractProjectSettingsStep settingsStep){
      if (runnable != null)       runnable.run();
      if (settingsStep == null)       return;
      Sdk sdk=settingsStep.getSdk();
      final Project project=ProjectManager.getInstance().getDefaultProject();
      final ProjectSdksModel model=PyConfigurableInterpreterList.getInstance(project).getModel();
      if (sdk instanceof PyDetectedSdk) {
        final String name=sdk.getName();
        VirtualFile sdkHome=ApplicationManager.getApplication().runWriteAction(new Computable<VirtualFile>(){
          @Override public VirtualFile compute(){
            return LocalFileSystem.getInstance().refreshAndFindFileByPath(name);
          }
        }
);
        PySdkService.getInstance().solidifySdk(sdk);
        sdk=SdkConfigurationUtil.setupSdk(ProjectJdkTable.getInstance().getAllJdks(),sdkHome,PythonSdkType.getInstance(),true,null,null);
        model.addSdk(sdk);
        settingsStep.setSdk(sdk);
        try {
          model.apply();
        }
 catch (        ConfigurationException exception) {
          LOG.error("Error adding detected python interpreter " + exception.getMessage());
        }
      }
      Project newProject=generateProject(project,settingsStep);
      if (newProject != null) {
        SdkConfigurationUtil.setDirectoryProjectSdk(newProject,sdk);
        final List<Sdk> sdks=PythonSdkType.getAllSdks();
        for (        Sdk s : sdks) {
          final SdkAdditionalData additionalData=s.getSdkAdditionalData();
          if (additionalData instanceof PythonSdkAdditionalData) {
            ((PythonSdkAdditionalData)additionalData).reassociateWithCreatedProject(newProject);
          }
        }
      }
    }
    @Nullable private Project generateProject(    @NotNull final Project project,    @NotNull final AbstractProjectSettingsStep settings){
      final DirectoryProjectGenerator generator=settings.getProjectGenerator();
      final File location=new File(settings.getProjectLocation());
      if (!location.exists() && !location.mkdirs()) {
        Messages.showErrorDialog(project,"Cannot create directory '" + location + "'","Create Project");
        return null;
      }
      final VirtualFile baseDir=ApplicationManager.getApplication().runWriteAction(new Computable<VirtualFile>(){
        public VirtualFile compute(){
          return LocalFileSystem.getInstance().refreshAndFindFileByIoFile(location);
        }
      }
);
      LOG.assertTrue(baseDir != null,"Couldn't find '" + location + "' in VFS");
      baseDir.refresh(false,true);
      if (baseDir.getChildren().length > 0) {
        int rc=Messages.showYesNoDialog(project,"The directory '" + location + "' is not empty. Would you like to create a project from existing sources instead?","Create New Project",Messages.getQuestionIcon());
        if (rc == Messages.YES) {
          return PlatformProjectOpenProcessor.getInstance().doOpenProject(baseDir,null,false);
        }
      }
      String generatorName=generator == null ? "empty" : ConvertUsagesUtil.ensureProperKey(generator.getName());
      UsageTrigger.trigger("NewDirectoryProjectAction." + generatorName);
      GeneralSettings.getInstance().setLastProjectCreationLocation(location.getParent());
      return PlatformProjectOpenProcessor.doOpenProject(baseDir,null,false,-1,new ProjectOpenedCallback(){
        @Override public void projectOpened(        Project project,        Module module){
          if (generator != null) {
            Object projectSettings=null;
            if (generator instanceof PythonProjectGenerator)             projectSettings=((PythonProjectGenerator)generator).getProjectSettings();
 else             if (generator instanceof WebProjectTemplate) {
              projectSettings=((WebProjectTemplate)generator).getPeer().getSettings();
            }
            if (projectSettings instanceof PyNewProjectSettings) {
              ((PyNewProjectSettings)projectSettings).setSdk(settings.getSdk());
              ((PyNewProjectSettings)projectSettings).setInstallFramework(settings.installFramework());
            }
            generator.generateProject(project,baseDir,projectSettings,module);
          }
        }
      }
,false);
    }
  }
;
  final ProjectSpecificAction action=new ProjectSpecificAction(callback,new PythonBaseProjectGenerator());
  add(action);
  final DirectoryProjectGenerator[] generators=Extensions.getExtensions(DirectoryProjectGenerator.EP_NAME);
  if (generators.length == 0) {
    action.setPopup(false);
  }
  Arrays.sort(generators,new Comparator<DirectoryProjectGenerator>(){
    @Override public int compare(    DirectoryProjectGenerator o1,    DirectoryProjectGenerator o2){
      if (o1 instanceof PyFrameworkProjectGenerator && !(o2 instanceof PyFrameworkProjectGenerator))       return -1;
      if (!(o1 instanceof PyFrameworkProjectGenerator) && o2 instanceof PyFrameworkProjectGenerator)       return 1;
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  List<DirectoryProjectGenerator> pluginSpecificGenerators=Lists.newArrayList();
  for (  DirectoryProjectGenerator generator : generators) {
    if (generator instanceof PythonProjectGenerator)     add(new ProjectSpecificAction(callback,generator));
 else     pluginSpecificGenerators.add(generator);
  }
  if (!pluginSpecificGenerators.isEmpty()) {
    add(new PluginSpecificProjectsStep(callback,pluginSpecificGenerators));
  }
}
