{
  return CachedValuesManager.getCachedValue(block,new CachedValueProvider<Set<String>>(){
    @Nullable @Override public Result<Set<String>> compute(){
      final Set<String> result=ContainerUtil.newHashSet();
      block.acceptChildren(new GroovyRecursiveElementVisitor(){
        @Override public void visitOpenBlock(        GrOpenBlock openBlock){
          result.addAll(getUsedVarsInsideBlock(openBlock));
        }
        @Override public void visitClosure(        GrClosableBlock closure){
          result.addAll(getUsedVarsInsideBlock(closure));
        }
        @Override public void visitReferenceExpression(        GrReferenceExpression referenceExpression){
          if (referenceExpression.getQualifier() == null && referenceExpression.getReferenceName() != null) {
            result.add(referenceExpression.getReferenceName());
          }
        }
      }
);
      return Result.create(result,block);
    }
  }
);
}
