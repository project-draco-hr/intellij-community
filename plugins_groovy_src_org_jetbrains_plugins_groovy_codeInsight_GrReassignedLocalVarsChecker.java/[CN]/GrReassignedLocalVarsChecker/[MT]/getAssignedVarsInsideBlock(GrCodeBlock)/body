{
  CachedValue<Set<String>> data=block.getUserData(ASSIGNED_VARS);
  if (data == null) {
    data=CachedValuesManager.getManager(block.getProject()).createCachedValue(new CachedValueProvider<Set<String>>(){
      @Nullable @Override public Result<Set<String>> compute(){
        final Set<String> result=ContainerUtil.newHashSet();
        block.acceptChildren(new GroovyRecursiveElementVisitor(){
          @Override public void visitAssignmentExpression(          GrAssignmentExpression expression){
            super.visitAssignmentExpression(expression);
            GrExpression lValue=expression.getLValue();
            if (lValue instanceof GrReferenceExpression && !((GrReferenceExpression)lValue).isQualified()) {
              result.add(((GrReferenceExpression)lValue).getReferenceName());
            }
          }
          @Override public void visitOpenBlock(          GrOpenBlock openBlock){
            result.addAll(getAssignedVarsInsideBlock(openBlock));
          }
          @Override public void visitClosure(          GrClosableBlock closure){
            result.addAll(getAssignedVarsInsideBlock(closure));
          }
        }
);
        return Result.create(result,block);
      }
    }
,false);
    block.putUserData(ASSIGNED_VARS,data);
  }
  return data.getValue();
}
