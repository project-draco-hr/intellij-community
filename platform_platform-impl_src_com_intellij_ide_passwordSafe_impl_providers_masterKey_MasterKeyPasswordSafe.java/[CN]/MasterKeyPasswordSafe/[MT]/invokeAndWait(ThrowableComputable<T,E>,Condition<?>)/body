{
  if (ApplicationManager.getApplication().isDispatchThread()) {
    return computable.compute();
  }
  final AsyncFutureResult<T> future=AsyncFutureFactory.getInstance().createAsyncFutureResult();
  final ExpirableRunnable runnable=new ExpirableRunnable(){
    @Override public boolean isExpired(){
      boolean b=expired.value(null);
      if (b)       future.setException(new ProcessCanceledException());
      return b;
    }
    @Override public void run(){
      try {
        future.set(computable.compute());
      }
 catch (      Throwable e) {
        future.setException(e);
      }
    }
  }
;
  ProgressIndicator indicator=ProgressIndicatorProvider.getGlobalProgressIndicator();
synchronized (ourEDTLock) {
    if (indicator != null && indicator.isModal()) {
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          if (!runnable.isExpired()) {
            runnable.run();
          }
        }
      }
);
    }
 else {
      IdeFocusManager.getGlobalInstance().doWhenFocusSettlesDown(runnable);
    }
    try {
      return future.get();
    }
 catch (    InterruptedException e) {
      throw new ProcessCanceledException(e);
    }
catch (    ExecutionException e) {
      throw (E)e.getCause();
    }
  }
}
