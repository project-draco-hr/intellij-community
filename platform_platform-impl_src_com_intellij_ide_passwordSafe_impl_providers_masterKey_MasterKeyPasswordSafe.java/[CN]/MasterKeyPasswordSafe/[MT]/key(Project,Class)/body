{
  Object key=myKey.get().get();
  if (key instanceof byte[])   return (byte[])key;
  if (key instanceof PasswordSafeException && ((PasswordSafeException)key).justHappened())   throw (PasswordSafeException)key;
  if (isPasswordEncrypted()) {
    try {
      setMasterPassword(decryptPassword(myDatabase.getPasswordInfo()));
      key=myKey.get().get();
      if (key instanceof byte[])       return (byte[])key;
    }
 catch (    PasswordSafeException e) {
    }
  }
  if (ApplicationManager.getApplication().isHeadlessEnvironment()) {
    throw new MasterPasswordUnavailableException("The provider is not available in headless environment");
  }
  key=invokeAndWait(new ThrowableComputable<Object,PasswordSafeException>(){
    @Override public Object compute() throws PasswordSafeException {
      Object key=myKey.get().get();
      if (key instanceof byte[] || key instanceof PasswordSafeException && ((PasswordSafeException)key).justHappened()) {
        return key;
      }
      try {
        if (myDatabase.isEmpty()) {
          if (!MasterPasswordDialog.resetMasterPasswordDialog(project,MasterKeyPasswordSafe.this,requestor).showAndGet()) {
            throw new MasterPasswordUnavailableException("Master password is required to store passwords in the database.");
          }
        }
 else {
          MasterPasswordDialog.askPassword(project,MasterKeyPasswordSafe.this,requestor);
        }
      }
 catch (      PasswordSafeException e) {
        myKey.get().set(e);
        throw e;
      }
      return myKey.get().get();
    }
  }
,project == null ? Condition.FALSE : project.getDisposed());
  if (key instanceof byte[])   return (byte[])key;
  if (key instanceof PasswordSafeException)   throw (PasswordSafeException)key;
  throw new AssertionError();
}
