{
  final String expectedReturnQName=expectedReturnClass.getQualifiedName();
  LOG.assertTrue(expectedReturnQName != null);
  final PsiElementFactory factory=JavaPsiFacade.getElementFactory(newExpression.getProject());
  PsiAnonymousClass anonymousClass=PsiTreeUtil.findChildOfType(newExpression,PsiAnonymousClass.class);
  LOG.assertTrue(anonymousClass != null);
  PsiJavaCodeReferenceElement referenceElement=PsiTreeUtil.findChildOfType(anonymousClass,PsiJavaCodeReferenceElement.class);
  LOG.assertTrue(referenceElement != null);
  final PsiReferenceParameterList parameterList=PsiTreeUtil.findChildOfType(referenceElement,PsiReferenceParameterList.class);
  final PsiJavaCodeReferenceElement newCodeReferenceElement=factory.createReferenceFromText(expectedReturnClass.getQualifiedName() + (parameterList == null ? "" : parameterList.getText()),null);
  referenceElement.replace(newCodeReferenceElement);
  final List<PsiMethod> methods=ContainerUtil.filter(anonymousClass.getMethods(),new Condition<PsiMethod>(){
    @Override public boolean value(    PsiMethod method){
      return !"equals".equals(method.getName());
    }
  }
);
  LOG.assertTrue(methods.size() == 1,methods);
  final PsiMethod method=methods.get(0);
  method.setName(expectedReturnClass.getMethods()[0].getName());
  final PsiTypeElement element=containingMethod.getReturnTypeElement();
  if (element != null) {
    final PsiReferenceParameterList genericParameter=PsiTreeUtil.findChildOfType(element,PsiReferenceParameterList.class);
    element.replace(factory.createTypeElementFromText(expectedReturnQName + (genericParameter == null ? "" : genericParameter.getText()),null));
  }
}
