{
  if (type instanceof PsiClassType) {
    PsiClass targetClass=((PsiClassType)type).resolve();
    if (targetClass != null) {
      if (targetClass instanceof PsiAnonymousClass) {
        targetClass=((PsiAnonymousClass)targetClass).getBaseClassType().resolve();
        if (targetClass == null) {
          return false;
        }
      }
 else {
        if (!LambdaUtil.isFunctionalClass(targetClass)) {
          return false;
        }
        return isSuitableLambdaRole(LambdaUtil.getFunctionalInterfaceReturnType(type),baseMethodReturnType,methodSubstitutor,context);
      }
      if (!LambdaUtil.isFunctionalClass(targetClass)) {
        return false;
      }
      PsiMethod method=LambdaUtil.getFunctionalInterfaceMethod(targetClass);
      final PsiMethod[] methods=((PsiClassType)type).resolve().findMethodsByName(method.getName(),false);
      if (methods.length != 1) {
        return false;
      }
      method=methods[0];
      if (method == null) {
        return false;
      }
      final PsiType psiType;
      if (type instanceof PsiClassReferenceType) {
        final PsiJavaCodeReferenceElement reference=((PsiClassReferenceType)type).getReference();
        final PsiClass resolvedClass=((PsiClassReferenceType)type).resolve();
        final PsiTypeParameter[] typeParameters=resolvedClass.getTypeParameters();
        final PsiType[] substitutedTypeParameters=reference.getTypeParameters();
        LOG.assertTrue(typeParameters.length == substitutedTypeParameters.length);
        final Map<PsiTypeParameter,PsiType> substitutionMap=new HashMap<PsiTypeParameter,PsiType>();
        for (int i=0; i < typeParameters.length; i++) {
          PsiTypeParameter parameter=typeParameters[i];
          PsiType t=substitutedTypeParameters[i];
          substitutionMap.put(parameter,t);
        }
        PsiSubstitutor substitutor=PsiSubstitutorImpl.createSubstitutor(substitutionMap);
        psiType=substitutor.substitute(method.getReturnType());
      }
 else {
        psiType=method.getReturnType();
      }
      return isSuitableLambdaRole(psiType,baseMethodReturnType,methodSubstitutor,context);
    }
    return false;
  }
 else {
    return false;
  }
}
