{
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  final PsiType[] parameterTypes=ContainerUtil.map2Array(Arrays.asList(parameters),new PsiType[parameters.length],new Function<PsiParameter,PsiType>(){
    @Override public PsiType fun(    PsiParameter parameter){
      return parameter.getType();
    }
  }
);
  final PsiType returnType=method.getReturnType();
  if (returnType instanceof PsiClassType) {
    final PsiClass resolvedReturnTypeClass=((PsiClassType)returnType).resolve();
    if (!InheritanceUtil.isInheritor(resolvedReturnTypeClass,CommonClassNames.JAVA_LANG_ITERABLE)) {
      return null;
    }
  }
 else   if (!(returnType instanceof PsiArrayType)) {
    return null;
  }
  return validate(parameterTypes,returnType,null,method);
}
