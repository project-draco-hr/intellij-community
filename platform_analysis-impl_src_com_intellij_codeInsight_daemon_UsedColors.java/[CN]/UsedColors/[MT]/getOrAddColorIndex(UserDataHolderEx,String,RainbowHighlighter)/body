{
  int colorsCount=rainbowHighlighter.getColorsCount();
  Object data=context.getUserData(USED_COLOR);
  int colorIndex;
  while (true) {
    Object newColors;
    if (data == null) {
      colorIndex=RainbowHighlighter.hashColor(name,colorsCount);
      newColors=new UsedColor(name,colorIndex);
    }
 else     if (data instanceof UsedColor) {
      UsedColor usedColor=(UsedColor)data;
      if (usedColor.name.equals(name)) {
        colorIndex=usedColor.index;
        newColors=null;
      }
 else {
        int hashedIndex=RainbowHighlighter.hashColor(name,colorsCount);
        if (hashedIndex == usedColor.index)         hashedIndex=(hashedIndex + 1) % colorsCount;
        colorIndex=hashedIndex;
        UsedColor newColor=new UsedColor(name,colorIndex);
        newColors=new UsedColor[]{usedColor,newColor};
      }
    }
 else {
      colorIndex=-1;
      int hashedIndex=RainbowHighlighter.hashColor(name,colorsCount);
      int[] index2usage=new int[colorsCount];
      UsedColor[] usedColors=(UsedColor[])data;
      for (      UsedColor usedColor : usedColors) {
        int index=usedColor.index;
        index2usage[index]++;
        if (usedColor.name.equals(name)) {
          colorIndex=index;
          break;
        }
      }
      if (colorIndex == -1) {
        colorIndex=RainbowHighlighter.getColorIndex(index2usage,hashedIndex,colorsCount);
        UsedColor newColor=new UsedColor(name,colorIndex);
        newColors=ArrayUtil.append(usedColors,newColor);
      }
 else {
        newColors=null;
      }
    }
    if (newColors == null || context.replace(USED_COLOR,data,newColors)) {
      break;
    }
  }
  return colorIndex;
}
