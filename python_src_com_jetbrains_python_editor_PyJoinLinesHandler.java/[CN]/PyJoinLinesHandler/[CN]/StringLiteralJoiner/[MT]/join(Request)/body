{
  if (req.leftElem != req.rightElem) {
    final PsiElement parent=req.rightElem.getParent();
    if ((req.leftElem.getParent() == parent && parent instanceof PyStringLiteralExpression) || (req.leftExpr instanceof PyStringLiteralExpression && req.rightExpr instanceof PyStringLiteralExpression)) {
      final CharSequence text=req.document.getCharsSequence();
      final StringNodeInfo leftNodeInfo=new StringNodeInfo(req.leftElem);
      final StringNodeInfo rightNodeInfo=new StringNodeInfo(req.rightElem);
      if (leftNodeInfo.isTerminated() && rightNodeInfo.isTerminated()) {
        final int rightNodeContentOffset=rightNodeInfo.getContentRange().getStartOffset();
        if (leftNodeInfo.equals(rightNodeInfo)) {
          return new Result("",0,leftNodeInfo.getQuote().length(),rightNodeContentOffset);
        }
        if (haveSamePrefixes(leftNodeInfo,rightNodeInfo) && !leftNodeInfo.isTripleQuoted() && !rightNodeInfo.isTripleQuoted()) {
          if (!rightNodeInfo.getContent().contains(leftNodeInfo.getQuote())) {
            final int quotePos=rightNodeInfo.getAbsoluteContentRange().getEndOffset();
            req.document.replaceString(quotePos,quotePos + 1,leftNodeInfo.getQuote());
            return new Result("",0,1,rightNodeContentOffset);
          }
 else           if (!leftNodeInfo.getContent().contains(rightNodeInfo.getQuote())) {
            final int quotePos=leftNodeInfo.getAbsoluteContentRange().getStartOffset() - 1;
            req.document.replaceString(quotePos,quotePos + 1,rightNodeInfo.getQuote());
            return new Result("",0,1,rightNodeContentOffset);
          }
        }
      }
    }
  }
  return null;
}
