{
  if (req.leftElem() != req.rightElem()) {
    final PsiElement parent=req.rightElem().getParent();
    if ((req.leftElem().getParent() == parent && parent instanceof PyStringLiteralExpression) || (req.leftExpr() instanceof PyStringLiteralExpression && req.rightExpr() instanceof PyStringLiteralExpression)) {
      CharSequence text=req.document().getCharsSequence();
      StrMod left_mod=new StrMod(text,req.leftElem().getTextRange());
      StrMod right_mod=new StrMod(text,req.rightElem().getTextRange());
      if (left_mod.isOk() && right_mod.isOk()) {
        final String lquo=left_mod.quote();
        if (left_mod.equals(right_mod)) {
          return new Result("",0,lquo.length(),right_mod.getStartPadding());
        }
 else         if (left_mod.compatibleTo(right_mod) && lquo.length() == 1 && right_mod.quote().length() == 1) {
          if (!containsChar(text,right_mod.getInnerRange(),left_mod.quote().charAt(0))) {
            int quote_pos=right_mod.getInnerRange().getEndOffset();
            req.document().replaceString(quote_pos,quote_pos + 1,left_mod.quote());
            return new Result("",0,left_mod.quote().length(),right_mod.getStartPadding());
          }
 else           if (!containsChar(text,left_mod.getInnerRange(),right_mod.quote().charAt(0))) {
            int quote_pos=left_mod.getInnerRange().getStartOffset() - 1;
            req.document().replaceString(quote_pos,quote_pos + 1,right_mod.quote());
            return new Result("",0,left_mod.quote().length(),right_mod.getStartPadding());
          }
        }
      }
    }
  }
  return null;
}
