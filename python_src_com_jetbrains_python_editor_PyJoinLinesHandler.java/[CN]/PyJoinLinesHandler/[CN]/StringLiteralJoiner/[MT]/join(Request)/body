{
  if (req.leftElem != req.rightElem) {
    final PsiElement parent=req.rightElem.getParent();
    if ((req.leftElem.getParent() == parent && parent instanceof PyStringLiteralExpression) || (req.leftExpr instanceof PyStringLiteralExpression && req.rightExpr instanceof PyStringLiteralExpression)) {
      final StringNodeInfo leftNodeInfo=new StringNodeInfo(req.leftElem);
      final StringNodeInfo rightNodeInfo=new StringNodeInfo(req.rightElem);
      if (leftNodeInfo.isTerminated() && rightNodeInfo.isTerminated()) {
        int quotesMaxLength=Math.max(leftNodeInfo.getQuote().length(),rightNodeInfo.getQuote().length());
        int stringToJoinMaxLength=getStringToJoinMaxLength(req,quotesMaxLength);
        final String replacement=findReplacement(rightNodeInfo.getContent(),stringToJoinMaxLength);
        if (leftNodeInfo.equals(rightNodeInfo)) {
          return getResultAndSplitStringIfTooLong(req,leftNodeInfo,rightNodeInfo,replacement,leftNodeInfo.getQuote());
        }
        return processStringsWithDifferentQuotes(req,leftNodeInfo,rightNodeInfo,replacement);
      }
    }
  }
  return null;
}
