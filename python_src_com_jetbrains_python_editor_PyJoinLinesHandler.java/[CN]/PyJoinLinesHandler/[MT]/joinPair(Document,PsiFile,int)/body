{
  final int[] NONE=new int[]{0,0};
  int[] ret=new int[2];
  PsiElement elt=file.findElementAt(start);
  final PyStringLiteralExpression string_parent=PsiTreeUtil.getParentOfType(elt,PyStringLiteralExpression.class);
  if (string_parent != null) {
    final List<ASTNode> string_nodes=string_parent.getStringNodes();
    for (    ASTNode node : string_nodes) {
      final TextRange range=node.getTextRange();
      if (range.contains(start) && range.getLength() > 2) {
        final CharSequence text=document.getCharsSequence();
        int first=range.getStartOffset();
        int last=range.getEndOffset();
        boolean is_raw=false;
        if ("Uu".indexOf(text.charAt(first)) > -1 || "Bb".indexOf(text.charAt(first)) > -1)         first+=1;
        if ("Rr".indexOf(text.charAt(first)) > -1) {
          is_raw=true;
          first+=1;
        }
        if (last - first >= 6) {
          final char first_char=text.charAt(first);
          if (first_char == text.charAt(first + 1)) {
            final int our_line_number=document.getLineNumber(first);
            int eol=document.getLineEndOffset(our_line_number);
            if (document.getLineCount() == our_line_number + 1)             return NONE;
            if (text.charAt(eol - 1) == '\\' && is_raw) {
            }
 else {
            }
          }
        }
      }
    }
  }
  return ret;
}
