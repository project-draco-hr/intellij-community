{
  myOptions=options;
  myOptionsList.setCellRenderer(new MyCellRenderer());
  myOptionsList.setModel(myOptionsModel);
  ListSelectionModel selectionModel=myOptionsList.getSelectionModel();
  selectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  selectionModel.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      MyDescription description=getSelectedDescription();
      if (description == null) {
        myBackgroundColorPanel.setEnabled(false);
        myIgnoredColorPanel.setEnabled(false);
        myStripeMarkColorPanel.setEnabled(false);
        myInheritIgnoredCheckBox.setEnabled(false);
      }
 else {
        myBackgroundColorPanel.setEnabled(true);
        myIgnoredColorPanel.setEnabled(true && !description.isInheritIgnoredColor());
        myStripeMarkColorPanel.setEnabled(true);
        myInheritIgnoredCheckBox.setEnabled(true);
        myBackgroundColorPanel.setSelectedColor(description.getBackgroundColor());
        myIgnoredColorPanel.setSelectedColor(description.getIgnoredColor());
        myStripeMarkColorPanel.setSelectedColor(description.getStripeMarkColor());
        myInheritIgnoredCheckBox.setSelected(description.isInheritIgnoredColor());
      }
      myDispatcher.getMulticaster().selectedOptionChanged(description);
    }
  }
);
  myBackgroundColorPanel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      MyDescription selectedDescription=getSelectedDescription();
      if (selectedDescription == null)       return;
      if (!checkModifiableScheme()) {
        myBackgroundColorPanel.setSelectedColor(selectedDescription.getBackgroundColor());
      }
 else {
        selectedDescription.setBackgroundColor(myBackgroundColorPanel.getSelectedColor());
        myDispatcher.getMulticaster().settingsChanged();
      }
    }
  }
);
  myIgnoredColorPanel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      MyDescription selectedDescription=getSelectedDescription();
      if (selectedDescription == null)       return;
      if (!checkModifiableScheme()) {
        myIgnoredColorPanel.setSelectedColor(selectedDescription.getIgnoredColor());
      }
 else {
        selectedDescription.setIgnoredColor(myIgnoredColorPanel.getSelectedColor());
        myDispatcher.getMulticaster().settingsChanged();
      }
    }
  }
);
  myStripeMarkColorPanel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      MyDescription selectedDescription=getSelectedDescription();
      if (selectedDescription == null)       return;
      if (!checkModifiableScheme()) {
        myStripeMarkColorPanel.setSelectedColor(selectedDescription.getStripeMarkColor());
      }
 else {
        selectedDescription.setStripeMarkColor(myStripeMarkColorPanel.getSelectedColor());
        myDispatcher.getMulticaster().settingsChanged();
      }
    }
  }
);
  myInheritIgnoredCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      MyDescription selectedDescription=getSelectedDescription();
      if (selectedDescription == null)       return;
      if (!checkModifiableScheme()) {
        myInheritIgnoredCheckBox.setSelected(selectedDescription.isInheritIgnoredColor());
      }
 else {
        selectedDescription.setInheritIgnoredColor(myInheritIgnoredCheckBox.isSelected());
        myIgnoredColorPanel.setEnabled(!myInheritIgnoredCheckBox.isSelected());
        myIgnoredColorPanel.setSelectedColor(selectedDescription.myIgnoredColor);
        myDispatcher.getMulticaster().settingsChanged();
      }
    }
  }
);
}
