{
  final List<PsiReference> result=new ArrayList<PsiReference>();
  final PyTypeParser.ParseResult parseResult=PyTypeParser.parse(anchor,s.toString());
  final Map<TextRange,PyType> types=parseResult.getTypes();
  if (types.isEmpty()) {
    result.add(new DocStringTypeReference(anchor,s.getTextRange().shiftRight(offset),s.getTextRange().shiftRight(offset),null));
  }
  offset=s.getTextRange().getStartOffset() + offset;
  final Map<PyType,TextRange> fullRanges=parseResult.getFullRanges();
  for (  Map.Entry<TextRange,PyType> pair : types.entrySet()) {
    final PyType t=pair.getValue();
    final TextRange range=pair.getKey().shiftRight(offset);
    final TextRange fullRange=fullRanges.containsKey(t) ? fullRanges.get(t).shiftRight(offset) : range;
    result.add(new DocStringTypeReference(anchor,range,fullRange,t));
  }
  return result;
}
