{
  final PyDocStringOwner docStringOwner=PsiTreeUtil.getParentOfType(element,PyDocStringOwner.class);
  if (docStringOwner != null && element == docStringOwner.getDocStringExpression()) {
    final List<PsiReference> result=new ArrayList<PsiReference>();
    String docString=element.getText();
    int pos=0;
    while (pos < docString.length()) {
      final TextRange tagRange=findNextTag(docString,pos,ALL_PARAM_TAGS);
      if (tagRange == null) {
        break;
      }
      pos=CharMatcher.anyOf(" \t*").negate().indexIn(docString,tagRange.getEndOffset());
      CharMatcher identifierMatcher=new CharMatcher(){
        @Override public boolean matches(        char c){
          return Character.isLetterOrDigit(c) || c == '_';
        }
      }
.negate();
      final String tagName=docString.substring(tagRange.getStartOffset(),tagRange.getEndOffset());
      boolean isRType=isReturnType(tagName);
      if (tagName.startsWith(":") && !isRType) {
        int ws=CharMatcher.anyOf(" \t*").indexIn(docString,pos + 1);
        if (ws != -1) {
          int next=CharMatcher.anyOf(" \t*").negate().indexIn(docString,ws);
          if (next != -1 && !docString.substring(pos,next).contains(":")) {
            int endPos=identifierMatcher.indexIn(docString,pos);
            result.addAll(parseTypeReferences(element,docString.substring(pos,endPos),pos));
            pos=next;
          }
        }
      }
      int endPos=identifierMatcher.indexIn(docString,pos);
      if (endPos < 0) {
        endPos=docString.length();
      }
      if (!isRType)       result.add(new DocStringParameterReference(element,new TextRange(pos,endPos)));
      if (tagName.equals(":type") || tagName.equals("@type") || isRType) {
        pos=CharMatcher.anyOf(" \t*").negate().indexIn(docString,endPos + 1);
        endPos=CharMatcher.anyOf("\n\r").indexIn(docString,pos + 1);
        if (endPos == -1) {
          endPos=pos;
        }
        result.addAll(parseTypeReferences(element,docString.substring(pos,endPos),pos));
      }
      pos=endPos;
    }
    return result.toArray(new PsiReference[result.size()]);
  }
  return PsiReference.EMPTY_ARRAY;
}
