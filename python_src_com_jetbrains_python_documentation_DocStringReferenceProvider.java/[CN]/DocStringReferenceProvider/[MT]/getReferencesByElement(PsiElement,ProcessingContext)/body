{
  final PyDocStringOwner docStringOwner=PsiTreeUtil.getParentOfType(element,PyDocStringOwner.class);
  if (docStringOwner != null && element == docStringOwner.getDocStringExpression()) {
    final PyStringLiteralExpression expr=(PyStringLiteralExpression)element;
    final List<TextRange> ranges=expr.getStringValueTextRanges();
    final String exprText=expr.getText();
    final TextRange textRange=PyStringLiteralExpressionImpl.getNodeTextRange(exprText);
    final String text=textRange.substring(exprText);
    if (!ranges.isEmpty()) {
      final List<PsiReference> result=new ArrayList<PsiReference>();
      final int offset=ranges.get(0).getStartOffset();
      StructuredDocString docString=StructuredDocStringBase.parse(text);
      if (docString != null) {
        result.addAll(referencesFromNames(element,offset,docString,docString.getTagArguments(StructuredDocStringBase.PARAM_TAGS),StructuredDocStringBase.PARAMETER));
        result.addAll(referencesFromNames(element,offset,docString,docString.getTagArguments(StructuredDocStringBase.PARAM_TYPE_TAGS),StructuredDocStringBase.PARAMETER_TYPE));
        result.addAll(referencesFromNames(element,offset,docString,docString.getKeywordArgumentSubstrings(),StructuredDocStringBase.KEYWORD));
        result.addAll(referencesFromNames(element,offset,docString,docString.getTagArguments(StructuredDocStringBase.VARIABLE_TAGS),StructuredDocStringBase.VARIABLE));
        result.addAll(returnTypes(element,docString,offset));
      }
      return result.toArray(new PsiReference[result.size()]);
    }
  }
  return PsiReference.EMPTY_ARRAY;
}
