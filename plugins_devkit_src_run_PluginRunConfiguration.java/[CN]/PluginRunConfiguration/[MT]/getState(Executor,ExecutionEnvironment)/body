{
  final Module module=getModule();
  if (module == null) {
    throw new ExecutionException(DevKitBundle.message("run.configuration.no.module.specified"));
  }
  final ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
  final Sdk jdk=rootManager.getSdk();
  if (jdk == null) {
    throw CantRunException.noJdkForModule(module);
  }
  final Sdk ideaJdk=IdeaJdk.findIdeaJdk(jdk);
  if (ideaJdk == null) {
    throw new ExecutionException(DevKitBundle.message("sdk.type.incorrect.common"));
  }
  String sandboxHome=((Sandbox)ideaJdk.getSdkAdditionalData()).getSandboxHome();
  if (sandboxHome == null) {
    throw new ExecutionException(DevKitBundle.message("sandbox.no.configured"));
  }
  try {
    sandboxHome=new File(sandboxHome).getCanonicalPath();
  }
 catch (  IOException e) {
    throw new ExecutionException(DevKitBundle.message("sandbox.no.configured"));
  }
  final String canonicalSandbox=sandboxHome;
  IdeaLicenseHelper.copyIDEALicense(sandboxHome);
  final JavaCommandLineState state=new JavaCommandLineState(env){
    @Override protected JavaParameters createJavaParameters() throws ExecutionException {
      final JavaParameters params=new JavaParameters();
      ParametersList vm=params.getVMParametersList();
      fillParameterList(vm,VM_PARAMETERS);
      fillParameterList(params.getProgramParametersList(),PROGRAM_PARAMETERS);
      Sdk usedIdeaJdk=ideaJdk;
      String alternativeIdePath=getAlternativeJrePath();
      if (isAlternativeJreEnabled() && !StringUtil.isEmptyOrSpaces(alternativeIdePath)) {
        final Sdk configuredJdk=ProjectJdkTable.getInstance().findJdk(alternativeIdePath);
        if (configuredJdk != null) {
          usedIdeaJdk=configuredJdk;
        }
 else {
          try {
            usedIdeaJdk=(Sdk)usedIdeaJdk.clone();
          }
 catch (          CloneNotSupportedException e) {
            throw new ExecutionException(e.getMessage());
          }
          final SdkModificator sdkToSetUp=usedIdeaJdk.getSdkModificator();
          sdkToSetUp.setHomePath(alternativeIdePath);
          sdkToSetUp.commitChanges();
        }
      }
      String ideaJdkHome=usedIdeaJdk.getHomePath();
      boolean fromIdeaProject=IdeaJdk.isFromIDEAProject(ideaJdkHome);
      String bootPath=!fromIdeaProject ? "/lib/boot.jar" : IdeaJdk.OUT_CLASSES + "/boot";
      vm.add("-Xbootclasspath/a:" + ideaJdkHome + toSystemDependentName(bootPath));
      vm.defineProperty("idea.config.path",canonicalSandbox + File.separator + "config");
      vm.defineProperty("idea.system.path",canonicalSandbox + File.separator + "system");
      vm.defineProperty("idea.plugins.path",canonicalSandbox + File.separator + "plugins");
      vm.defineProperty("idea.classpath.index.enabled","false");
      if (!vm.hasProperty(JetBrainsProtocolHandler.REQUIRED_PLUGINS_KEY) && PluginModuleType.isOfType(module)) {
        final String id=DescriptorUtil.getPluginId(module);
        if (id != null) {
          vm.defineProperty(JetBrainsProtocolHandler.REQUIRED_PLUGINS_KEY,id);
        }
      }
      if (SystemInfo.isMac) {
        vm.defineProperty("idea.smooth.progress","false");
        vm.defineProperty("apple.laf.useScreenMenuBar","true");
      }
      if (SystemInfo.isXWindow) {
        if (VM_PARAMETERS == null || !VM_PARAMETERS.contains("-Dsun.awt.disablegrab")) {
          vm.defineProperty("sun.awt.disablegrab","true");
        }
      }
      if (!vm.hasProperty(PlatformUtils.PLATFORM_PREFIX_KEY)) {
        String buildNumber=IdeaJdk.getBuildNumber(ideaJdkHome);
        if (buildNumber != null) {
          String prefix=IntelliJPlatformProduct.fromBuildNumber(buildNumber).getPlatformPrefix();
          if (prefix != null) {
            vm.defineProperty(PlatformUtils.PLATFORM_PREFIX_KEY,prefix);
          }
        }
      }
      params.setWorkingDirectory(ideaJdkHome + File.separator + "bin"+ File.separator);
      params.setJdk(usedIdeaJdk);
      if (fromIdeaProject) {
        for (        String url : usedIdeaJdk.getRootProvider().getUrls(OrderRootType.CLASSES)) {
          String s=StringUtil.trimEnd(VfsUtilCore.urlToPath(url),JarFileSystem.JAR_SEPARATOR);
          if (s.endsWith("plugin-system"))           continue;
          if (new File(toSystemDependentName(s + "/META-INF/plugin.xml")).exists())           continue;
          params.getClassPath().add(toSystemDependentName(s));
        }
      }
 else {
        for (        String path : Arrays.asList("log4j.jar","jdom.jar","trove4j.jar","openapi.jar","util.jar","extensions.jar","bootstrap.jar","idea_rt.jar","idea.jar")) {
          params.getClassPath().add(ideaJdkHome + toSystemDependentName("/lib/" + path));
        }
      }
      params.getClassPath().addFirst(((JavaSdkType)usedIdeaJdk.getSdkType()).getToolsPath(usedIdeaJdk));
      params.setMainClass("com.intellij.idea.Main");
      return params;
    }
  }
;
  return state;
}
