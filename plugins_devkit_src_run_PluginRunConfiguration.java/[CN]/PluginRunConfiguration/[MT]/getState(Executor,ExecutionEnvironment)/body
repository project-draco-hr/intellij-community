{
  final Module module=getModule();
  if (module == null) {
    throw new ExecutionException(DevKitBundle.message("run.configuration.no.module.specified"));
  }
  final ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
  final Sdk jdk=rootManager.getSdk();
  if (jdk == null) {
    throw CantRunException.noJdkForModule(module);
  }
  final Sdk ideaJdk=IdeaJdk.findIdeaJdk(jdk);
  if (ideaJdk == null) {
    throw new ExecutionException(DevKitBundle.message("sdk.type.incorrect.common"));
  }
  String sandboxHome=((Sandbox)ideaJdk.getSdkAdditionalData()).getSandboxHome();
  if (sandboxHome == null) {
    throw new ExecutionException(DevKitBundle.message("sandbox.no.configured"));
  }
  try {
    sandboxHome=new File(sandboxHome).getCanonicalPath();
  }
 catch (  IOException e) {
    throw new ExecutionException(DevKitBundle.message("sandbox.no.configured"));
  }
  final String canonicalSandbox=sandboxHome;
  IdeaLicenseHelper.copyIDEALicense(sandboxHome);
  final JavaCommandLineState state=new JavaCommandLineState(env){
    @Override protected JavaParameters createJavaParameters() throws ExecutionException {
      final JavaParameters params=new JavaParameters();
      ParametersList vm=params.getVMParametersList();
      fillParameterList(vm,VM_PARAMETERS);
      fillParameterList(params.getProgramParametersList(),PROGRAM_PARAMETERS);
      Sdk usedIdeaJdk=ideaJdk;
      String alternativeIdePath=getAlternativeJrePath();
      if (isAlternativeJreEnabled() && !StringUtil.isEmptyOrSpaces(alternativeIdePath)) {
        final Sdk configuredJdk=ProjectJdkTable.getInstance().findJdk(alternativeIdePath);
        if (configuredJdk != null) {
          usedIdeaJdk=configuredJdk;
        }
 else {
          try {
            usedIdeaJdk=(Sdk)usedIdeaJdk.clone();
          }
 catch (          CloneNotSupportedException e) {
            throw new ExecutionException(e.getMessage());
          }
          final SdkModificator sdkToSetUp=usedIdeaJdk.getSdkModificator();
          sdkToSetUp.setHomePath(alternativeIdePath);
          sdkToSetUp.commitChanges();
        }
      }
      @NonNls String libPath=usedIdeaJdk.getHomePath() + File.separator + "lib";
      vm.add("-Xbootclasspath/a:" + libPath + File.separator+ "boot.jar");
      vm.defineProperty("idea.config.path",canonicalSandbox + File.separator + "config");
      vm.defineProperty("idea.system.path",canonicalSandbox + File.separator + "system");
      vm.defineProperty("idea.plugins.path",canonicalSandbox + File.separator + "plugins");
      vm.defineProperty("idea.classpath.index.enabled","false");
      if (!vm.hasProperty(JetBrainsProtocolHandler.REQUIRED_PLUGINS_KEY) && PluginModuleType.isOfType(module)) {
        final String id=DescriptorUtil.getPluginId(module);
        if (id != null) {
          vm.defineProperty(JetBrainsProtocolHandler.REQUIRED_PLUGINS_KEY,id);
        }
      }
      if (SystemInfo.isMac) {
        vm.defineProperty("idea.smooth.progress","false");
        vm.defineProperty("apple.laf.useScreenMenuBar","true");
      }
      if (SystemInfo.isXWindow) {
        if (VM_PARAMETERS == null || !VM_PARAMETERS.contains("-Dsun.awt.disablegrab")) {
          vm.defineProperty("sun.awt.disablegrab","true");
        }
      }
      if (!vm.hasProperty(PlatformUtils.PLATFORM_PREFIX_KEY)) {
        String buildNumber=IdeaJdk.getBuildNumber(usedIdeaJdk.getHomePath());
        if (buildNumber != null) {
          String prefix=IntelliJPlatformProduct.fromBuildNumber(buildNumber).getPlatformPrefix();
          if (prefix != null) {
            vm.defineProperty(PlatformUtils.PLATFORM_PREFIX_KEY,prefix);
          }
        }
      }
      params.setWorkingDirectory(usedIdeaJdk.getHomePath() + File.separator + "bin"+ File.separator);
      params.setJdk(usedIdeaJdk);
      params.getClassPath().addFirst(libPath + File.separator + "log4j.jar");
      params.getClassPath().addFirst(libPath + File.separator + "jdom.jar");
      params.getClassPath().addFirst(libPath + File.separator + "trove4j.jar");
      params.getClassPath().addFirst(libPath + File.separator + "openapi.jar");
      params.getClassPath().addFirst(libPath + File.separator + "util.jar");
      params.getClassPath().addFirst(libPath + File.separator + "extensions.jar");
      params.getClassPath().addFirst(libPath + File.separator + "bootstrap.jar");
      params.getClassPath().addFirst(libPath + File.separator + "idea.jar");
      params.getClassPath().addFirst(libPath + File.separator + "idea_rt.jar");
      params.getClassPath().addFirst(((JavaSdkType)usedIdeaJdk.getSdkType()).getToolsPath(usedIdeaJdk));
      params.setMainClass("com.intellij.idea.Main");
      return params;
    }
  }
;
  return state;
}
