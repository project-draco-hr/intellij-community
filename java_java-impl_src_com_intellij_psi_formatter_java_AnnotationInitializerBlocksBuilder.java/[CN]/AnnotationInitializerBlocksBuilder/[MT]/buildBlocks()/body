{
  final Wrap wrap=Wrap.createWrap(getWrapType(myJavaSettings.ANNOTATION_PARAMETER_WRAP),false);
  final Alignment alignment=myJavaSettings.ALIGN_MULTILINE_ANNOTATION_PARAMETERS ? Alignment.createAlignment() : null;
  ChildrenBlocksBuilder.Config config=new ChildrenBlocksBuilder.Config().setDefaultIndent(Indent.getContinuationWithoutFirstIndent()).setIndent(JavaTokenType.RPARENTH,Indent.getNoneIndent()).setIndent(JavaTokenType.LPARENTH,Indent.getNoneIndent()).setDefaultWrap(wrap).setNoWrap(JavaTokenType.COMMA).setNoWrap(JavaTokenType.RPARENTH).setNoWrap(JavaTokenType.LPARENTH).setDefaultAlignment(alignment).setNoAlignment(JavaTokenType.COMMA).setNoAlignment(JavaTokenType.LPARENTH).setNoAlignmentIf(JavaTokenType.RPARENTH,new Condition<ASTNode>(){
    @Override public boolean value(    ASTNode node){
      PsiElement prev=PsiTreeUtil.skipSiblingsBackward(node.getPsi(),PsiWhiteSpace.class);
      if (prev == null)       return false;
      return prev instanceof PsiNameValuePair && !PsiTreeUtil.hasErrorElements(prev);
    }
  }
);
  return config.createBuilder().buildNodeChildBlocks(myNode,myFactory);
}
