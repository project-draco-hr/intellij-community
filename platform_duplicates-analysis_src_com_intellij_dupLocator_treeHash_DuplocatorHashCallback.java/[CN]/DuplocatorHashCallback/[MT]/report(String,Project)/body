{
  int[] hashCodes=myDuplicates.keys();
  FileWriter fileWriter=null;
  try {
    fileWriter=new FileWriter(path + File.separator + "fragments.xml");
    PrettyPrintWriter writer=new PrettyPrintWriter(fileWriter);
    writer.startNode("root");
    for (    int hash : hashCodes) {
      List<List<PsiFragment>> dupList=myDuplicates.get(hash);
      writer.startNode("hash");
      writer.addAttribute("val",String.valueOf(hash));
      for (      final List<PsiFragment> psiFragments : dupList) {
        writeFragments(psiFragments,writer,project,false);
      }
      writer.endNode();
    }
    writer.endNode();
    writer.flush();
  }
  finally {
    if (fileWriter != null) {
      fileWriter.close();
    }
  }
  fileWriter=null;
  try {
    fileWriter=new FileWriter(path + File.separator + "duplicates.xml");
    PrettyPrintWriter writer=new PrettyPrintWriter(fileWriter);
    writer.startNode("root");
    final DupInfo info=getInfo();
    final int patterns=info.getPatterns();
    for (int i=0; i < patterns; i++) {
      writer.startNode("duplicate");
      writer.addAttribute("cost",String.valueOf(info.getPatternCost(i)));
      writer.addAttribute("hash",String.valueOf(info.getHash(i)));
      writeFragments(Arrays.asList(info.getFragmentOccurences(i)),writer,project,true);
      writer.endNode();
    }
    writer.endNode();
    writer.flush();
  }
  finally {
    if (fileWriter != null) {
      fileWriter.close();
    }
  }
}
