{
  final String objectName=Generator.capitalizeFirstChar(getMemberName());
  addMember(new TextOutConsumer(){
    @Override public void append(    TextOutput out){
      out.newLine().doc(description);
      if (propertyList == null) {
        out.append("@org.jetbrains.jsonProtocol.JsonType(allowsOtherProperties=true)").newLine();
        out.append("public interface ").append(objectName).append(" extends org.jetbrains.jsonProtocol.JsonObjectBased").openBlock();
      }
 else {
        out.append("@org.jetbrains.jsonProtocol.JsonType").newLine();
        out.append("public interface ").append(objectName).openBlock();
        for (        ObjectProperty property : propertyList) {
          out.doc(property.description());
          String methodName=Generator.generateMethodNameSubstitute(getName(property),out);
          MemberScope memberScope=new InputMemberScope(getName(property));
          TypeDescriptor propertyTypeData=memberScope.resolveType(property);
          propertyTypeData.writeAnnotations(out);
          out.append(propertyTypeData.getType().getShortText(getClassContextNamespace()) + ' ' + methodName+ "();").newLine();
        }
      }
      out.closeBlock();
    }
  }
);
  return new StandaloneType(new NamePath(objectName,getClassContextNamespace()),"writeMessage");
}
