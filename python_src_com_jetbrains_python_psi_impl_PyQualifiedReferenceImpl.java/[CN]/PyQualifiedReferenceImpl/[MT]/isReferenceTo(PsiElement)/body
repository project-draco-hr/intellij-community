{
  if (isLocalScope(element)) {
    return false;
  }
  PsiElement resolveResult=resolve();
  if (resolveResult instanceof PyImportedModule) {
    resolveResult=resolveResult.getNavigationElement();
  }
  if (element instanceof PsiDirectory && resolveResult instanceof PyFile && PyNames.INIT_DOT_PY.equals(((PyFile)resolveResult).getName())&& ((PyFile)resolveResult).getContainingDirectory() == element) {
    return true;
  }
  if (resolveResult == element) {
    return true;
  }
  final String referencedName=myElement.getReferencedName();
  if (element instanceof PyFunction && Comparing.equal(referencedName,((PyFunction)element).getName()) && ((PyFunction)element).getContainingClass() != null && !PyNames.INIT.equals(referencedName)) {
    final PyExpression qualifier=myElement.getQualifier();
    if (qualifier != null) {
      final TypeEvalContext context=TypeEvalContext.fast();
      PyType qualifierType=qualifier.getType(context);
      if (qualifierType == null || qualifierType instanceof PyTypeReference) {
        return true;
      }
    }
  }
  if (resolveResult instanceof PyTargetExpression && isInstanceOrClassAttribute((PyTargetExpression)resolveResult) && element instanceof PyTargetExpression&& isInstanceOrClassAttribute((PyTargetExpression)element)) {
    PyClass aClass=PsiTreeUtil.getParentOfType(resolveResult,PyClass.class);
    PyClass bClass=PsiTreeUtil.getParentOfType(element,PyClass.class);
    if (isSubclass(aClass,bClass) || (isSubclass(bClass,aClass))) {
      return true;
    }
  }
  return false;
}
