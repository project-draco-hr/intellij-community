{
  ResolveResultList ret=new ResolveResultList();
  final String referencedName=myElement.getReferencedName();
  if (referencedName == null)   return ret;
  final PyExpression qualifier=myElement.getQualifier();
  if (qualifier == null) {
    return ret;
  }
  PyType qualifierType=myContext.getTypeEvalContext().getType(qualifier);
  if (PyUtil.isClassPrivateName(referencedName) && qualifierType instanceof PyClassType) {
    if (isOtherClassQualifying(qualifier,(PyClassType)qualifierType))     return Collections.emptyList();
  }
  if (qualifierType != null && !(qualifierType instanceof PyTypeReference)) {
    AccessDirection ctx=AccessDirection.of(myElement);
    final List<? extends RatedResolveResult> membersOfQualifier=qualifierType.resolveMember(referencedName,qualifier,ctx,myContext);
    if (membersOfQualifier == null) {
      return ret;
    }
    ret.addAll(membersOfQualifier);
    if (qualifier instanceof PyQualifiedExpression && ret.isEmpty()) {
      if (addAssignedAttributes(ret,referencedName,(PyQualifiedExpression)qualifier))       return ret;
    }
  }
 else   if (myContext.allowImplicits() && canQualifyAnImplicitName(qualifier,qualifierType)) {
    addImplicitResolveResults(referencedName,ret);
  }
  if ("__doc__".equals(referencedName)) {
    addDocReference(ret,qualifier,qualifierType);
  }
  return ret;
}
