{
  final Project project=myElement.getProject();
  final GlobalSearchScope scope=PyClassNameIndex.projectWithLibrariesScope(project);
  final Collection functions=PyFunctionNameIndex.find(referencedName,project,scope);
  for (  Object function : functions) {
    if (!(function instanceof PyFunction)) {
      FileBasedIndex.getInstance().scheduleRebuild(StubUpdatingIndex.INDEX_ID,new Throwable("found non-function object " + function + " in function list"));
      break;
    }
    PyFunction pyFunction=(PyFunction)function;
    if (pyFunction.getContainingClass() != null) {
      ret.add(new ImplicitResolveResult(pyFunction,getImplicitResultRate(pyFunction)));
    }
  }
  final Collection attributes=PyInstanceAttributeIndex.find(referencedName,project,scope);
  for (  Object attribute : attributes) {
    if (!(attribute instanceof PyTargetExpression)) {
      FileBasedIndex.getInstance().scheduleRebuild(StubUpdatingIndex.INDEX_ID,new Throwable("found non-target expression object " + attribute + " in target expression list"));
      break;
    }
    ret.add(new ImplicitResolveResult((PyTargetExpression)attribute,getImplicitResultRate((PyTargetExpression)attribute)));
  }
}
