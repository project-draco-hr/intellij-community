{
  Collection<Object> variants=new ArrayList<Object>();
  PyIfStatement ifStatement=PsiTreeUtil.getParentOfType(myElement,PyIfStatement.class);
  while (ifStatement != null) {
    PyExpression condition=ifStatement.getIfPart().getCondition();
    if (condition instanceof PyCallExpression && ((PyCallExpression)condition).isCalleeText(PyNames.HAS_ATTR)) {
      PyCallExpression call=(PyCallExpression)condition;
      if (call.getArguments().length > 1 && call.getArguments()[0].getText().equals(qualifier.getText())) {
        PyStringLiteralExpression string=call.getArgument(1,PyStringLiteralExpression.class);
        if (string != null && StringUtil.isJavaIdentifier(string.getStringValue()))         variants.add(string.getStringValue());
      }
    }
    ifStatement=PsiTreeUtil.getParentOfType(ifStatement,PyIfStatement.class);
  }
  return variants.toArray();
}
