{
  final String packageName=getPackageName();
  final PackageWrapper targetPackage=new PackageWrapper(PsiManager.getInstance(myProject),packageName);
  final VirtualFile selectedRoot=new ReadAction<VirtualFile>(){
    protected void run(    @NotNull Result<VirtualFile> result) throws Throwable {
      final HashSet<VirtualFile> testFolders=new HashSet<VirtualFile>();
      CreateTestAction.checkForTestRoots(myTargetModule,testFolders);
      List<VirtualFile> roots;
      if (testFolders.isEmpty()) {
        roots=ModuleRootManager.getInstance(myTargetModule).getSourceRoots(JavaModuleSourceRootTypes.SOURCES);
        if (roots.isEmpty())         return;
      }
 else {
        roots=new ArrayList<VirtualFile>(testFolders);
      }
      if (roots.size() == 1) {
        result.setResult(roots.get(0));
      }
 else {
        PsiDirectory defaultDir=chooseDefaultDirectory(packageName);
        result.setResult(MoveClassesOrPackagesUtil.chooseSourceRoot(targetPackage,roots,defaultDir));
      }
    }
  }
.execute().getResultObject();
  if (selectedRoot == null)   return null;
  return new WriteCommandAction<PsiDirectory>(myProject,CodeInsightBundle.message("create.directory.command")){
    protected void run(    @NotNull Result<PsiDirectory> result) throws Throwable {
      result.setResult(RefactoringUtil.createPackageDirectoryInSourceRoot(targetPackage,selectedRoot));
    }
  }
.execute().getResultObject();
}
