{
  final String packageName=getPackageName();
  final PackageWrapper targetPackage=new PackageWrapper(PsiManager.getInstance(myProject),packageName);
  final VirtualFile selectedRoot=new ReadAction<VirtualFile>(){
    protected void run(    @NotNull Result<VirtualFile> result) throws Throwable {
      final List<VirtualFile> testFolders=CreateTestAction.computeTestRoots(myTargetModule);
      List<VirtualFile> roots;
      if (testFolders.isEmpty()) {
        roots=new ArrayList<>();
        List<String> urls=CreateTestAction.computeSuitableTestRootUrls(myTargetModule);
        for (        String url : urls) {
          ContainerUtil.addIfNotNull(roots,VfsUtil.createDirectories(VfsUtilCore.urlToPath(url)));
        }
        if (roots.isEmpty()) {
          JavaProjectRootsUtil.collectSuitableDestinationSourceRoots(myTargetModule,roots);
        }
        if (roots.isEmpty())         return;
      }
 else {
        roots=new ArrayList<>(testFolders);
      }
      if (roots.size() == 1) {
        result.setResult(roots.get(0));
      }
 else {
        PsiDirectory defaultDir=chooseDefaultDirectory(targetPackage.getDirectories(),roots);
        result.setResult(MoveClassesOrPackagesUtil.chooseSourceRoot(targetPackage,roots,defaultDir));
      }
    }
  }
.execute().getResultObject();
  if (selectedRoot == null)   return null;
  return new WriteCommandAction<PsiDirectory>(myProject,CodeInsightBundle.message("create.directory.command")){
    protected void run(    @NotNull Result<PsiDirectory> result) throws Throwable {
      result.setResult(RefactoringUtil.createPackageDirectoryInSourceRoot(targetPackage,selectedRoot));
    }
  }
.execute().getResultObject();
}
