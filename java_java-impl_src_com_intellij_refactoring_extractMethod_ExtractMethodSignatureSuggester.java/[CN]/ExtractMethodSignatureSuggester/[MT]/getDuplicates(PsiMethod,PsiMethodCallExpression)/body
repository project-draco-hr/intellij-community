{
  final List<Match> duplicates=findDuplicatesSignature(method);
  if (duplicates != null && !duplicates.isEmpty()) {
    if (ApplicationManager.getApplication().isUnitTestMode() || Messages.showYesNoDialog(myProject,"No exact duplicates found.\nWould you like to apply suggested changes to replace " + duplicates.size() + " duplicates?","Extract Parameters to Replace Duplicates",Messages.getQuestionIcon()) == Messages.YES) {
      WriteCommandAction.runWriteCommandAction(myProject,new Runnable(){
        @Override public void run(){
          myMethodCall=(PsiMethodCallExpression)methodCall.replace(myMethodCall);
          myExtractedMethod=(PsiMethod)method.replace(myExtractedMethod);
        }
      }
);
      final DuplicatesFinder finder=MethodDuplicatesHandler.createDuplicatesFinder(myExtractedMethod);
      if (finder != null) {
        final List<VariableData> datas=finder.getParameters().getInputVariables();
        myVariableData=datas.toArray(new VariableData[datas.size()]);
        return finder.findDuplicates(myExtractedMethod.getContainingClass());
      }
    }
  }
  return null;
}
