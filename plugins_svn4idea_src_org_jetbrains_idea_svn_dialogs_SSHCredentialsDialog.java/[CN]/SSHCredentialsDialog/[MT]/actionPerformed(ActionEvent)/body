{
  if (e.getSource() == myPasswordButton || e.getSource() == myKeyButton || e.getSource() == mySshAgentButton) {
    updateFields();
    checkKeyFile();
    updateOKButton();
  }
 else {
    final String[] path={myKeyFileText.getText()};
    VirtualFile file;
    if (path[0] != null && path[0].trim().length() > 0) {
      path[0]="file://" + path[0].replace(File.separatorChar,'/');
      file=VirtualFileManager.getInstance().findFileByUrl(path[0]);
    }
 else {
      path[0]="file://" + SystemProperties.getUserHome() + "/.ssh/identity";
      path[0]=path[0].replace(File.separatorChar,'/');
      file=VirtualFileManager.getInstance().findFileByUrl(path[0]);
      if (file == null || !file.exists()) {
        path[0]="file://" + SystemProperties.getUserHome() + "/.ssh";
        file=VirtualFileManager.getInstance().findFileByUrl(path[0]);
      }
    }
    FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFileNoJarsDescriptor().withTitle(SvnBundle.message("dialog.title.openssh.v2.private.key")).withDescription(SvnBundle.message("dialog.description.openssh.v2.private.key")).withShowFileSystemRoots(true).withHideIgnored(false).withShowHiddenFiles(true);
    FileChooser.chooseFiles(descriptor,myProject,file,new Consumer<List<VirtualFile>>(){
      @Override public void consume(      List<VirtualFile> files){
        if (files.size() == 1) {
          path[0]=FileUtil.toSystemDependentName(files.get(0).getPath());
          myKeyFileText.setText(path[0]);
        }
        checkKeyFile();
        updateOKButton();
      }
    }
);
  }
}
