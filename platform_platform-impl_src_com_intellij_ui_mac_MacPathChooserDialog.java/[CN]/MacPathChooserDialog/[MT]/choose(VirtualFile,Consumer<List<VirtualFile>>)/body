{
  if (toSelect != null && toSelect.getParent() != null) {
    String directoryName;
    String fileName=null;
    if (toSelect.isDirectory()) {
      directoryName=toSelect.getCanonicalPath();
    }
 else {
      directoryName=toSelect.getParent().getCanonicalPath();
      fileName=toSelect.getPath();
    }
    myFileDialog.setDirectory(directoryName);
    myFileDialog.setFile(fileName);
  }
  myFileDialog.setMultipleMode(myFileChooserDescriptor.isChooseMultiple());
  final CommandProcessorEx commandProcessor=ApplicationManager.getApplication() != null ? (CommandProcessorEx)CommandProcessor.getInstance() : null;
  final boolean appStarted=commandProcessor != null;
  if (appStarted) {
    commandProcessor.enterModal();
    LaterInvocator.enterModal(myFileDialog);
  }
  Component parent=myParent.get();
  try {
    myFileDialog.setVisible(true);
  }
  finally {
    if (appStarted) {
      commandProcessor.leaveModal();
      LaterInvocator.leaveModal(myFileDialog);
      if (parent != null)       parent.requestFocus();
    }
  }
  File[] files=myFileDialog.getFiles();
  List<VirtualFile> virtualFileList=getChosenFiles(Stream.of(files));
  virtualFiles=virtualFileList.toArray(VirtualFile.EMPTY_ARRAY);
  if (!virtualFileList.isEmpty()) {
    try {
      if (virtualFileList.size() == 1) {
        myFileChooserDescriptor.isFileSelectable(virtualFileList.get(0));
      }
      myFileChooserDescriptor.validateSelectedFiles(virtualFiles);
    }
 catch (    Exception e) {
      if (parent == null) {
        Messages.showErrorDialog(myProject,e.getMessage(),myTitle);
      }
 else {
        Messages.showErrorDialog(parent,e.getMessage(),myTitle);
      }
      return;
    }
    if (!ArrayUtil.isEmpty(files)) {
      callback.consume(virtualFileList);
    }
 else     if (callback instanceof FileChooser.FileChooserConsumer) {
      ((FileChooser.FileChooserConsumer)callback).cancelled();
    }
  }
}
