{
  runPythonTest(new PyPackagingTestTask(){
    @Override public void runTestOn(    String sdkHome) throws Exception {
      final Sdk sdk=createTempSdk(sdkHome,SdkCreationType.EMPTY_SDK);
      try {
        final LanguageLevel languageLevel=PythonSdkType.getLanguageLevelForSdk(sdk);
        if (languageLevel.isOlderThan(LanguageLevel.PYTHON26)) {
          return;
        }
        final File tempDir=FileUtil.createTempDirectory(getTestName(false),null);
        final File venvDir=new File(tempDir,"venv");
        final String venvSdkHome=PyPackageManager.getInstance(sdk).createVirtualEnv(venvDir.toString(),false);
        final Sdk venvSdk=createTempSdk(venvSdkHome,SdkCreationType.EMPTY_SDK);
        assertNotNull(venvSdk);
        assertTrue(PythonSdkType.isVirtualEnv(venvSdk));
        assertInstanceOf(PythonSdkFlavor.getPlatformIndependentFlavor(venvSdk.getHomePath()),VirtualEnvSdkFlavor.class);
        final List<PyPackage> packages=PyPackageManager.getInstance(venvSdk).getPackages(false);
        final PyPackage setuptools=findPackage("setuptools",packages);
        assertNotNull(setuptools);
        assertEquals("setuptools",setuptools.getName());
        assertEquals(PyPackageManager.SETUPTOOLS,setuptools.getVersion());
        final PyPackage pip=findPackage("pip",packages);
        assertNotNull(pip);
        assertEquals("pip",pip.getName());
        assertEquals(PyPackageManager.PIP,pip.getVersion());
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
catch (      PyExternalProcessException e) {
        throw new RuntimeException(String.format("Error for interpreter '%s': %s",sdk.getHomePath(),e.getMessage()),e);
      }
    }
  }
);
}
