{
  super(project);
  setTitle("Map External Resource");
  myUri.setText(uri);
  myUri.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      validateInput();
    }
  }
);
  myExplorer=new FileSystemTreeImpl(project,new FileChooserDescriptor(true,false,false,false,true,false));
  Disposer.register(getDisposable(),myExplorer);
  myExplorer.addListener(new FileSystemTree.Listener(){
    @Override public void selectionChanged(    List<VirtualFile> selection){
      validateInput();
    }
  }
,myExplorer);
  MouseAdapter mouseAdapter=new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() > 1 && isOKActionEnabled()) {
        doOKAction();
      }
    }
  }
;
  myExplorer.getTree().addMouseListener(mouseAdapter);
  myExplorerPanel.add(ScrollPaneFactory.createScrollPane(myExplorer.getTree()),BorderLayout.CENTER);
  AnAction actionGroup=ActionManager.getInstance().getAction("FileChooserToolbar");
  ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,(ActionGroup)actionGroup,true);
  toolbar.setTargetComponent(myExplorerPanel);
  myExplorerPanel.add(toolbar.getComponent(),BorderLayout.NORTH);
  if (project != null) {
    setupSchemasTab(uri,project,file,location,mouseAdapter);
  }
 else {
    myTabs.removeTabAt(0);
  }
  init();
}
