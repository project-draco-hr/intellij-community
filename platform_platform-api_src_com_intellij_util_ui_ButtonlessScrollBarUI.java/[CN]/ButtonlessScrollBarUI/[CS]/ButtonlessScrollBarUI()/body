{
  myAdjustmentListener=new AdjustmentListener(){
    Point oldViewportPosition=null;
    Dimension oldViewportDimension=null;
    @Override public void adjustmentValueChanged(    AdjustmentEvent e){
      JScrollPane scrollpane=(JScrollPane)SwingUtilities.getAncestorOfClass(JScrollPane.class,scrollbar);
      JViewport viewport=scrollpane == null ? null : scrollpane.getViewport();
      if (viewport == null) {
        oldViewportPosition=null;
        return;
      }
      boolean vertical=isVertical();
      Point position=viewport.getViewPosition();
      Dimension dimension=scrollpane.getSize();
      boolean scrolled=false;
      if (oldViewportPosition != null) {
        int scrollH=position.x - oldViewportPosition.x;
        int scrollV=position.y - oldViewportPosition.y;
        scrolled=vertical && scrollH == 0 && scrollV != 0 || !vertical && scrollV == 0 && scrollH != 0;
      }
      oldViewportPosition=position;
      boolean resized=false;
      if (oldViewportDimension != null) {
        int resizedH=dimension.width - oldViewportDimension.width;
        int resizedV=dimension.height - oldViewportDimension.height;
        resized=vertical && resizedV != 0 || !vertical && resizedH != 0;
      }
      oldViewportDimension=dimension;
      if (scrolled) {
        JScrollBar other=vertical ? scrollpane.getHorizontalScrollBar() : scrollpane.getVerticalScrollBar();
        ScrollBarUI otherUI=other == null ? null : other.getUI();
        if (otherUI instanceof ButtonlessScrollBarUI) {
          ((ButtonlessScrollBarUI)otherUI).startMacScrollbarFadeout(true);
        }
        restart();
      }
 else       if (resized) {
        startMacScrollbarFadeout();
      }
    }
  }
;
  myMouseMotionListener=new MouseMotionAdapter(){
    @Override public void mouseMoved(    MouseEvent e){
      boolean inside=isOverThumb(e.getPoint());
      if (inside != myMouseIsOverThumb) {
        myMouseIsOverThumb=inside;
        startRegularThumbAnimator();
      }
    }
  }
;
  myMouseListener=new MouseAdapter(){
    @Override public void mouseEntered(    MouseEvent e){
      if (myMacScrollbarFadeLevel == 0) {
        myMouseOverScrollbar=true;
        startMacScrollbarExpandAnimator();
        startMacScrollbarFadeout();
      }
    }
    @Override public void mouseExited(    MouseEvent e){
      if (myMouseIsOverThumb) {
        myMouseIsOverThumb=false;
        startRegularThumbAnimator();
      }
      if (myMouseOverScrollbar) {
        myMouseOverScrollbar=false;
        startMacScrollbarExpandAnimator();
        startMacScrollbarFadeout();
      }
    }
  }
;
  myHierarchyListener=new HierarchyListener(){
    @Override public void hierarchyChanged(    HierarchyEvent e){
      if (e.getChanged() == scrollbar) {
        if ((HierarchyEvent.DISPLAYABILITY_CHANGED & e.getChangeFlags()) != 0) {
          updateGlobalListeners(false);
        }
      }
      if (e.getChanged() == scrollbar.getParent()) {
        if ((HierarchyEvent.SHOWING_CHANGED & e.getChangeFlags()) != 0) {
          restart();
        }
      }
    }
  }
;
  myAWTMouseListener=new AWTEventListener(){
    public void eventDispatched(    AWTEvent event){
      if (event.getID() == MouseEvent.MOUSE_MOVED) {
        Container scrollpane=SwingUtilities.getAncestorOfClass(JScrollPane.class,scrollbar);
        if (scrollpane != null) {
          Point loc=((MouseEvent)event).getLocationOnScreen();
          SwingUtilities.convertPointFromScreen(loc,scrollpane);
          if (scrollpane.contains(loc) && !myMacScrollbarHidden && myMacScrollbarFadeLevel == 0) {
            startMacScrollbarFadeout();
          }
        }
      }
    }
  }
;
  myWeakListener=new WeakLestener(myAWTMouseListener);
  myNSScrollerListener=new NSScrollerHelper.ScrollbarStyleListener(){
    @Override public void styleChanged(){
      updateMacScrollbarStyle();
    }
  }
;
}
