{
  myAdjustmentListener=new AdjustmentListener(){
    @Override public void adjustmentValueChanged(    AdjustmentEvent e){
      resetRegularThumbAnimator();
      resetMacScrollbarFadeout();
    }
  }
;
  myMouseMotionListener=new MouseMotionAdapter(){
    @Override public void mouseMoved(    MouseEvent e){
      boolean inside=isOverThumb(e.getPoint());
      if (inside != myMouseIsOverThumb) {
        myMouseIsOverThumb=inside;
        resetRegularThumbAnimator();
      }
    }
  }
;
  myMouseListener=new MouseAdapter(){
    @Override public void mouseEntered(    MouseEvent e){
      if (myMacScrollbarFadeLevel == 0) {
        myMouseOverScrollbar=true;
        resetMacScrollbarExpandAnimator();
        resetMacScrollbarFadeout();
      }
    }
    @Override public void mouseExited(    MouseEvent e){
      if (myMouseIsOverThumb) {
        myMouseIsOverThumb=false;
        resetRegularThumbAnimator();
      }
      if (myMouseOverScrollbar) {
        myMouseOverScrollbar=false;
        resetMacScrollbarExpandAnimator();
        resetMacScrollbarFadeout();
      }
    }
  }
;
  myHierarchyListener=new HierarchyListener(){
    @Override public void hierarchyChanged(    HierarchyEvent e){
      if (e.getChanged() == scrollbar) {
        if ((HierarchyEvent.DISPLAYABILITY_CHANGED & e.getChangeFlags()) != 0) {
          updateGlobalListeners(false);
        }
        if ((HierarchyEvent.SHOWING_CHANGED & e.getChangeFlags()) != 0) {
          resetRegularThumbAnimator();
          resetMacScrollbarFadeout();
        }
      }
    }
  }
;
  myAWTMouseListener=new AWTEventListener(){
    public void eventDispatched(    AWTEvent event){
      if (event.getID() == MouseEvent.MOUSE_MOVED) {
        Container scrollpane=SwingUtilities.getAncestorOfClass(JScrollPane.class,scrollbar);
        if (scrollpane != null) {
          Point loc=((MouseEvent)event).getLocationOnScreen();
          SwingUtilities.convertPointFromScreen(loc,scrollpane);
          if (scrollpane.contains(loc) && !myMacScrollbarHidden && myMacScrollbarFadeLevel == 0) {
            resetMacScrollbarFadeout();
          }
        }
      }
    }
  }
;
  myNSScrollerListener=new NSScrollerHelper.ScrollbarStyleListener(){
    @Override public void styleChanged(    @NotNull NSScrollerHelper.Style newStyle){
      updateMacScrollbarStyle();
    }
  }
;
}
