{
  PyClass klass=PsiTreeUtil.getParentOfType(node,PyClass.class);
  if (klass != null && !klass.isNewStyleClass(null)) {
    final List<PyClassLikeType> types=klass.getSuperClassTypes(myTypeEvalContext);
    for (    PyClassLikeType type : types) {
      if (type == null)       return;
      final String qName=type.getClassQName();
      if (qName != null && qName.contains("PyQt"))       return;
      if (!(type instanceof PyClassType))       return;
    }
    List<LocalQuickFix> quickFixes=Lists.<LocalQuickFix>newArrayList(new PyConvertToNewStyleQuickFix());
    if (!types.isEmpty()) {
      quickFixes.add(new PyChangeBaseClassQuickFix());
    }
    if (PyUtil.isSuperCall(node)) {
      final PyExpression callee=node.getCallee();
      if (callee != null) {
        registerProblem(callee,"Old-style class contains call for super method",ProblemHighlightType.GENERIC_ERROR_OR_WARNING,null,quickFixes.toArray(quickFixes.toArray(new LocalQuickFix[quickFixes.size()])));
      }
    }
  }
}
