{
  final RangeHighlighter highlighter=markupModel.addLineHighlighter(lineNumberInCurrent,HighlighterLayer.SELECTION - 1,null);
  final CoverageLineMarkerRenderer markerRenderer=CoverageLineMarkerRenderer.getRenderer(line,classData,executableLines,coverageByTestApplicable,coverageSuite,new Function<Integer,Integer>(){
    public Integer fun(    final Integer newLine){
      final TIntIntHashMap oldLineMapping=getNewToOldLineMapping(date);
      return oldLineMapping != null ? oldLineMapping.get(newLine.intValue()) : 0;
    }
  }
,new Function<Integer,Integer>(){
    public Integer fun(    final Integer newLine){
      final TIntIntHashMap newLineMapping=getOldToNewLineMapping(date);
      return newLineMapping != null ? newLineMapping.get(newLine.intValue()) : 0;
    }
  }
);
  highlighter.setLineMarkerRenderer(markerRenderer);
  final LineData lineData=classData != null ? classData.getLineData(line + 1) : null;
  if (lineData != null && lineData.getStatus() == LineCoverage.NONE) {
    highlighter.setErrorStripeMarkColor(markerRenderer.getErrorStripeColor(myEditor));
    highlighter.setThinErrorStripeMark(true);
    highlighter.setGreedyToLeft(true);
    highlighter.setGreedyToRight(true);
  }
  return highlighter;
}
