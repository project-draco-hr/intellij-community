{
  super(project);
  colorsManager.addEditorColorsListener(new EditorColorsListener(){
    @Override public void globalSchemeChange(    EditorColorsScheme scheme){
      colorsChanged();
    }
  }
,project);
  myBus=bus;
  EditorEventMulticaster multicaster=editorFactory.getEventMulticaster();
  multicaster.addDocumentListener(new MyDocumentListener(),myProject);
  multicaster.addEditorMouseListener(new MyEditorMouseListener(),myProject);
  documentManager.addListener(new PsiDocumentManager.Listener(){
    @Override public void documentCreated(    @NotNull final Document document,    PsiFile psiFile){
      final VirtualFile file=FileDocumentManager.getInstance().getFile(document);
      if (file == null)       return;
      for (      final Bookmark bookmark : myBookmarks) {
        if (Comparing.equal(bookmark.getFile(),file)) {
          UIUtil.invokeLaterIfNeeded(new Runnable(){
            @Override public void run(){
              if (myProject.isDisposed())               return;
              bookmark.createHighlighter((MarkupModelEx)DocumentMarkupModel.forDocument(document,myProject,true));
            }
          }
);
        }
      }
    }
    @Override public void fileCreated(    @NotNull PsiFile file,    @NotNull Document document){
    }
  }
);
  mySortedState=UISettings.getInstance().SORT_BOOKMARKS;
  UISettings.getInstance().addUISettingsListener(new UISettingsListener(){
    @Override public void uiSettingsChanged(    UISettings source){
      if (mySortedState != UISettings.getInstance().SORT_BOOKMARKS) {
        mySortedState=UISettings.getInstance().SORT_BOOKMARKS;
        EventQueue.invokeLater(new Runnable(){
          @Override public void run(){
            myBus.syncPublisher(BookmarksListener.TOPIC).bookmarksOrderChanged();
          }
        }
);
      }
    }
  }
,project);
}
