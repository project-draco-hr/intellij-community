{
  List<Bookmark> bookmarksToRemove=null;
  for (  Bookmark bookmark : myBookmarks) {
    if (!bookmark.isValid() || isDuplicate(bookmark,bookmarksToRemove)) {
      if (bookmarksToRemove == null) {
        bookmarksToRemove=new ArrayList<Bookmark>();
      }
      bookmarksToRemove.add(bookmark);
    }
  }
  if (bookmarksToRemove != null) {
    for (    Bookmark bookmark : bookmarksToRemove) {
      if (bookmark.getDocument() == e.getDocument()) {
        moveToDeleted(bookmark);
      }
 else {
        removeBookmark(bookmark);
      }
    }
  }
  myBeforeChangeData.remove(e.getDocument());
  for (Iterator<Map.Entry<Trinity<VirtualFile,Integer,String>,Bookmark>> iterator=myDeletedDocumentBookmarks.entrySet().iterator(); iterator.hasNext(); ) {
    Map.Entry<Trinity<VirtualFile,Integer,String>,Bookmark> entry=iterator.next();
    if (!entry.getKey().first.isValid()) {
      iterator.remove();
      continue;
    }
    Bookmark bookmark=entry.getValue();
    Document document=bookmark.getDocument();
    if (document == null || !bookmark.getFile().equals(entry.getKey().first)) {
      continue;
    }
    Integer line=entry.getKey().second;
    if (document.getLineCount() <= line) {
      continue;
    }
    int start=document.getLineStartOffset(line);
    int end=document.getLineEndOffset(line);
    String lineContent=document.getText(new TextRange(start,end));
    if (entry.getKey().third.equals(lineContent) && findEditorBookmark(document,line) == null) {
      Bookmark restored=addTextBookmark(bookmark.getFile(),line,bookmark.getDescription());
      if (bookmark.getMnemonic() != 0) {
        setMnemonic(restored,bookmark.getMnemonic());
      }
      iterator.remove();
    }
  }
}
