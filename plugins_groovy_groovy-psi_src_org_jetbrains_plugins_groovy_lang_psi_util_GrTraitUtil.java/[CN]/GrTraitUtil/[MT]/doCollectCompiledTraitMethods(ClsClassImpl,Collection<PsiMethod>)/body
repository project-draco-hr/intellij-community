{
  for (  PsiMethod method : trait.getMethods()) {
    if (AnnotationUtil.isAnnotated(method,IMPLEMENTED_FQN,false)) {
      result.add(method);
    }
  }
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(trait.getProject());
  final String helperFQN=trait.getQualifiedName();
  final PsiClass traitHelper=psiFacade.findClass(helperFQN + "$Trait$Helper",trait.getResolveScope());
  if (traitHelper == null)   return;
  final PsiType classType=TypesUtil.createJavaLangClassType(psiFacade.getElementFactory().createType(trait),trait.getProject(),trait.getResolveScope());
  for (  PsiMethod method : traitHelper.getMethods()) {
    if (!method.hasModifierProperty(PsiModifier.STATIC))     continue;
    final PsiParameter[] parameters=method.getParameterList().getParameters();
    if (parameters.length <= 0)     continue;
    final PsiParameter self=parameters[0];
    if (self.getType().equals(classType)) {
      result.add(createTraitMethodFromCompiledHelperMethod(method,trait));
    }
  }
}
