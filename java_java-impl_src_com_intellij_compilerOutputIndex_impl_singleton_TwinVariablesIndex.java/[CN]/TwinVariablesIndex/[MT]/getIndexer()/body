{
  return new DataIndexer<String,List<Integer>,ClassReader>(){
    @NotNull @Override public Map<String,List<Integer>> map(    final ClassReader inputData){
      final Map<String,List<Integer>> map=new HashMap<String,List<Integer>>();
      inputData.accept(new ClassVisitor(Opcodes.ASM4){
        @Nullable @Override public MethodVisitor visitMethod(        final int access,        final String name,        final String desc,        final String signature,        final String[] exceptions){
          if (CompilerOutputIndexUtil.isSetterOrConstructorMethodName(name)) {
            return null;
          }
          final Multiset<String> myTypesOccurrences=HashMultiset.create();
          final String[] paramsTypes=AsmUtil.getParamsTypes(desc);
          Collections.addAll(myTypesOccurrences,paramsTypes);
          return new MethodVisitor(Opcodes.ASM4){
            private final Set<String> myLocalVarNames=new HashSet<String>();
            @SuppressWarnings("unchecked") @Override public void visitEnd(){
              for (              final Multiset.Entry<String> e : myTypesOccurrences.entrySet()) {
                final String key=e.getElement();
                if (!ChainCompletionStringUtil.isPrimitiveOrArrayOfPrimitives(key)) {
                  List<Integer> values=map.get(key);
                  if (values == null) {
                    values=new ArrayList<Integer>();
                    map.put(key,values);
                  }
                  values.add(e.getCount());
                }
              }
            }
            private final Set<String> myUsedReadFieldsIndex=new HashSet<String>();
            @Override public void visitFieldInsn(            final int opcode,            final String owner,            final String name,            final String desc){
              final String fieldTypeQName=AsmUtil.getReturnType(desc);
              if ((opcode == Opcodes.GETSTATIC || opcode == Opcodes.GETFIELD)) {
                if (myUsedReadFieldsIndex.add(owner + name)) {
                  myTypesOccurrences.add(fieldTypeQName);
                }
              }
            }
            @Override public void visitLocalVariable(            final String name,            final String desc,            final String signature,            final Label start,            final Label end,            final int index){
              if (index > paramsTypes.length && myLocalVarNames.add(name)) {
                final String type=AsmUtil.getReturnType(desc);
                myTypesOccurrences.add(type);
              }
            }
          }
;
        }
      }
,Opcodes.ASM4);
      return map;
    }
  }
;
}
