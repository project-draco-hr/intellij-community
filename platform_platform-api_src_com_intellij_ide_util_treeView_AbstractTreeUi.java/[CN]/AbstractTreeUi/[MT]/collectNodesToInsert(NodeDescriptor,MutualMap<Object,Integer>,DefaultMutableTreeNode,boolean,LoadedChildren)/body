{
  final AsyncResult<List<TreeNode>> result=new AsyncResult<List<TreeNode>>();
  final List<TreeNode> nodesToInsert=new ArrayList<TreeNode>();
  Collection<Object> allElements=elementToIndexMap.getKeys();
  final ActionCallback processingDone=new ActionCallback(allElements.size());
  for (  final Object child : allElements) {
    Integer index=elementToIndexMap.getValue(child);
    boolean needToUpdate=false;
    NodeDescriptor loadedDesc=loadedChildren.getDescriptor(child);
    final NodeDescriptor childDescr;
    if (loadedDesc == null) {
      childDescr=getTreeStructure().createDescriptor(child,descriptor);
      needToUpdate=true;
    }
 else {
      childDescr=loadedDesc;
    }
    if (index == null) {
      index=Integer.MAX_VALUE;
      needToUpdate=true;
    }
    childDescr.setIndex(index.intValue());
    final ActionCallback update=new ActionCallback();
    if (needToUpdate) {
      update(childDescr,false).doWhenDone(new Consumer<Boolean>(){
        @Override public void consume(        Boolean changes){
          loadedChildren.putDescriptor(child,childDescr,changes);
          update.setDone();
        }
      }
);
    }
 else {
      update.setDone();
    }
    update.doWhenDone(new TreeRunnable("AbstractTreeUi.collectNodesToInsert: on done update"){
      @Override public void perform(){
        Object element=getElementFromDescriptor(childDescr);
        if (element != null) {
          DefaultMutableTreeNode node=getNodeForElement(element,false);
          if (node == null || node.getParent() != parent) {
            final DefaultMutableTreeNode childNode=createChildNode(childDescr);
            if (addLoadingNode || getBuilder().isAlwaysShowPlus(childDescr)) {
              insertLoadingNode(childNode,true);
            }
 else {
              addToUnbuilt(childNode);
            }
            nodesToInsert.add(childNode);
            createMapping(element,childNode);
          }
        }
        processingDone.setDone();
      }
    }
);
  }
  processingDone.doWhenDone(new TreeRunnable("AbstractTreeUi.collectNodesToInsert: on done processing"){
    @Override public void perform(){
      result.setDone(nodesToInsert);
    }
  }
);
  return result;
}
