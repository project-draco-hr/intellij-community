{
  Promise<Boolean> promise;
  if (now || isPassthroughMode()) {
    promise=Promise.resolve(update(nodeDescriptor));
  }
 else {
    final AsyncPromise<Boolean> result=new AsyncPromise<Boolean>();
    promise=result;
    Object element=getElementFromDescriptor(nodeDescriptor);
    boolean bgLoading=getTreeStructure().isToBuildChildrenInBackground(element);
    boolean edt=isEdt();
    if (bgLoading) {
      if (edt) {
        final AtomicBoolean changes=new AtomicBoolean();
        queueToBackground(new TreeRunnable("AbstractTreeUi.update: build"){
          @Override public void perform(){
            changes.set(update(nodeDescriptor));
          }
        }
,new TreeRunnable("AbstractTreeUi.update: post"){
          @Override public void perform(){
            result.setResult(changes.get());
          }
        }
);
      }
 else {
        result.setResult(update(nodeDescriptor));
      }
    }
 else {
      if (edt || !myWasEverShown) {
        result.setResult(update(nodeDescriptor));
      }
 else {
        invokeLaterIfNeeded(false,new TreeRunnable("AbstractTreeUi.update: later"){
          @Override public void perform(){
            execute(new TreeRunnable("AbstractTreeUi.update: later execute"){
              @Override public void perform(){
                result.setResult(update(nodeDescriptor));
              }
            }
);
          }
        }
);
      }
    }
  }
  promise.done(new Consumer<Boolean>(){
    @Override public void consume(    final Boolean changes){
      if (!changes) {
        return;
      }
      invokeLaterIfNeeded(false,new TreeRunnable("AbstractTreeUi.update: on done result"){
        @Override public void perform(){
          Object element=nodeDescriptor.getElement();
          DefaultMutableTreeNode node=getNodeForElement(element,false);
          if (node != null) {
            TreePath path=getPathFor(node);
            if (myTree.isVisible(path)) {
              updateNodeImageAndPosition(node,false,true);
            }
          }
        }
      }
);
    }
  }
);
  return promise;
}
