{
  boolean toRevalidate=isValid(element) && !myRevalidatedObjects.contains(element) && getNodeForElement(element,false) == null && isInStructure(element);
  if (!toRevalidate) {
    runDone(onDone);
    return;
  }
  myRevalidatedObjects.add(element);
  AsyncResult<Object> revalidated=getBuilder().revalidateElement(element);
  revalidated.doWhenDone(new Consumer<Object>(){
    @Override public void consume(    final Object o){
      invokeLaterIfNeeded(false,new TreeRunnable("AbstractTreeUi.checkPathAndMaybeRevalidate: on done revalidateElement"){
        @Override public void perform(){
          _expand(o,onDone,parentsOnly,checkIfInStructure,canSmartExpand);
        }
      }
);
    }
  }
).doWhenRejected(new TreeRunnable("AbstractTreeUi.checkPathAndMaybeRevalidate: on rejected revalidateElement"){
    @Override public void perform(){
      runDone(onDone);
    }
  }
);
}
