{
  final Set<Object> selection=getSelectedElements();
  if (selection.contains(element)) {
    final TreePath[] paths=getTree().getSelectionPaths();
    for (    TreePath each : paths) {
      if (element.equals(getElementFor(each.getLastPathComponent()))) {
        return getTree().getRowForPath(each);
      }
    }
    return -1;
  }
  Object anchor=TreeAnchorizer.getService().createAnchor(element);
  Object o=myElementToNodeMap.get(anchor);
  TreeAnchorizer.getService().freeAnchor(element);
  if (o instanceof List) {
    final TreePath[] paths=getTree().getSelectionPaths();
    if (paths != null && paths.length > 0) {
      Set<DefaultMutableTreeNode> selectedNodes=new HashSet<DefaultMutableTreeNode>();
      for (      TreePath eachPAth : paths) {
        if (eachPAth.getLastPathComponent() instanceof DefaultMutableTreeNode) {
          selectedNodes.add((DefaultMutableTreeNode)eachPAth.getLastPathComponent());
        }
      }
      for (      DefaultMutableTreeNode eachNode : (List<DefaultMutableTreeNode>)o) {
        while (eachNode != null) {
          if (selectedNodes.contains(eachNode)) {
            return getTree().getRowForPath(getPathFor(eachNode));
          }
          eachNode=(DefaultMutableTreeNode)eachNode.getParent();
        }
      }
    }
  }
  return -1;
}
