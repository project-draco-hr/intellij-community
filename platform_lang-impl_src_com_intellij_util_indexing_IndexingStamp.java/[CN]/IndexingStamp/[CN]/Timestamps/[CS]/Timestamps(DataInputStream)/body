{
  if (stream != null) {
    try {
      int[] outdatedIndices=null;
      long dominatingIndexStamp=DataInputOutputUtil.readTIME(stream);
      long diff=dominatingIndexStamp - DataInputOutputUtil.timeBase;
      if (diff > 0 && diff < ID.MAX_NUMBER_OF_INDICES) {
        int numberOfOutdatedIndices=(int)diff;
        outdatedIndices=new int[numberOfOutdatedIndices];
        while (numberOfOutdatedIndices > 0) {
          outdatedIndices[--numberOfOutdatedIndices]=DataInputOutputUtil.readINT(stream);
        }
        dominatingIndexStamp=DataInputOutputUtil.readTIME(stream);
      }
      while (stream.available() > 0) {
        ID<?,?> id=ID.findById(DataInputOutputUtil.readINT(stream));
        if (id != null && !(id instanceof StubIndexKey)) {
          long stamp=getIndexCreationStamp(id);
          if (stamp == 0)           continue;
          if (myIndexStamps == null)           myIndexStamps=new TObjectLongHashMap<>(5,0.98f);
          if (stamp <= dominatingIndexStamp)           myIndexStamps.put(id,stamp);
        }
      }
      if (outdatedIndices != null) {
        for (        int outdatedIndexId : outdatedIndices) {
          ID<?,?> id=ID.findById(outdatedIndexId);
          if (id != null && !(id instanceof StubIndexKey)) {
            if (getIndexCreationStamp(id) == 0)             continue;
            long stamp=INDEX_DATA_OUTDATED_STAMP;
            if (myIndexStamps == null)             myIndexStamps=new TObjectLongHashMap<>(5,0.98f);
            if (stamp <= dominatingIndexStamp)             myIndexStamps.put(id,stamp);
          }
        }
      }
    }
  finally {
      stream.close();
    }
  }
}
