{
  if (!(fileEditor instanceof TextEditor))   return null;
  final Project project=((TextEditor)fileEditor).getEditor().getProject();
  final CodeStyleSettings settings=CodeStyleSettingsManager.getInstance(project).getCurrentSettings();
  if (!Utils.isEnabled(settings) || PropertiesComponent.getInstance(project).getBoolean(EDITOR_CONFIG_ACCEPTED,false))   return null;
  final List<EditorConfig.OutPair> pairs=SettingsProviderComponent.getInstance().getOutPairs(project,Utils.getFilePath(project,file));
  if (!pairs.isEmpty()) {
    final EditorNotificationPanel panel=new EditorNotificationPanel(){
      @Override public Color getBackground(){
        return LightColors.GREEN;
      }
    }
.text("EditorConfig is overriding Code Style settings for this file").icon(EditorconfigIcons.Editorconfig);
    panel.createActionLabel("Disable EditorConfig support",new Runnable(){
      @Override public void run(){
        settings.getCustomSettings(EditorConfigSettings.class).ENABLED=false;
        EditorNotifications.getInstance(project).updateAllNotifications();
      }
    }
);
    panel.createActionLabel("Dismiss",new Runnable(){
      @Override public void run(){
        PropertiesComponent.getInstance(project).setValue(EDITOR_CONFIG_ACCEPTED,"true");
        EditorNotifications.getInstance(project).updateAllNotifications();
      }
    }
);
    return panel;
  }
  return null;
}
