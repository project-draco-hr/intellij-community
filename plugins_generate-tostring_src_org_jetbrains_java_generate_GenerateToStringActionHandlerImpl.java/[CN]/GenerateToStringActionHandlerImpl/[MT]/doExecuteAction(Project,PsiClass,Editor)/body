{
  logger.debug("+++ doExecuteAction - START +++");
  if (logger.isDebugEnabled()) {
    logger.debug("Current project " + project.getName());
  }
  final PsiElementClassMember[] dialogMembers=buildMembersToShow(clazz);
  final MemberChooserHeaderPanel header=new MemberChooserHeaderPanel(clazz);
  logger.debug("Displaying member chooser dialog");
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      if (project.isDisposed())       return;
      final MemberChooser<PsiElementClassMember> chooser=new MemberChooser<PsiElementClassMember>(dialogMembers,true,true,project,PsiUtil.isLanguageLevel5OrHigher(clazz),header){
        @Nullable @Override protected String getHelpId(){
          return "editing.altInsert.tostring";
        }
      }
;
      chooser.setTitle("Generate toString()");
      chooser.setCopyJavadocVisible(false);
      chooser.selectElements(dialogMembers);
      header.setChooser(chooser);
      chooser.show();
      if (DialogWrapper.OK_EXIT_CODE == chooser.getExitCode()) {
        Collection<PsiMember> selectedMembers=GenerationUtil.convertClassMembersToPsiMembers(chooser.getSelectedElements());
        final TemplateResource template=header.getSelectedTemplate();
        TemplatesManager.getInstance().setDefaultTemplate(template);
        if (template.isValidTemplate()) {
          GenerateWorker.executeGenerateActionLater(clazz,editor,selectedMembers,template,chooser.isInsertOverrideAnnotation());
        }
 else {
          HintManager.getInstance().showErrorHint(editor,"toString() template '" + template.getFileName() + "' is invalid");
        }
      }
    }
  }
);
  logger.debug("+++ doExecuteAction - END +++");
}
