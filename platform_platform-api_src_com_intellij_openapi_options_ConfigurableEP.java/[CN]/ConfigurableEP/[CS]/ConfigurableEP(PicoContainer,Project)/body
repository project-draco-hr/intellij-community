{
  myProject=project;
  myPicoContainer=picoContainer;
  myProducer=new AtomicNotNullLazyValue<ObjectProducer>(){
    @NotNull @Override protected ObjectProducer compute(){
      try {
        if (providerClass != null) {
          return new ProviderProducer((ConfigurableProvider)instantiate(providerClass,myPicoContainer));
        }
        if (instanceClass != null) {
          return new ClassProducer(myPicoContainer,findClass(instanceClass));
        }
        if (implementationClass != null) {
          return new ClassProducer(myPicoContainer,findClass(implementationClass));
        }
        throw new RuntimeException("configurable class name is not set");
      }
 catch (      AssertionError error) {
        LOG.error(error);
      }
catch (      LinkageError error) {
        LOG.error(error);
      }
catch (      Exception exception) {
        LOG.error(exception);
      }
      return new ObjectProducer();
    }
  }
;
}
