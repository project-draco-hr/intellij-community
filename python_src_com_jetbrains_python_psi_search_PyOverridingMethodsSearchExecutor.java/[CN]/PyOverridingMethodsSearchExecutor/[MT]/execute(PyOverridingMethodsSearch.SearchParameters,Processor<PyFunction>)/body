{
  final PyFunction baseMethod=queryParameters.getFunction();
  PyClass containingClass=baseMethod.getContainingClass();
  return PyClassInheritorsSearch.search(containingClass,queryParameters.isCheckDeep()).forEach(new Processor<PyClass>(){
    public boolean process(    final PyClass pyClass){
      final AccessToken accessToken=ApplicationManager.getApplication().acquireReadActionLock();
      PyFunction overridingMethod;
      try {
        overridingMethod=pyClass.findMethodByName(baseMethod.getName(),false);
      }
  finally {
        accessToken.finish();
      }
      if (overridingMethod != null) {
        return consumer.process(overridingMethod);
      }
      return true;
    }
  }
);
}
