{
  final PyFunction baseMethod=queryParameters.getFunction();
  final PyClass containingClass=ApplicationManager.getApplication().runReadAction(new Computable<PyClass>(){
    @Override public PyClass compute(){
      return baseMethod.getContainingClass();
    }
  }
);
  return PyClassInheritorsSearch.search(containingClass,queryParameters.isCheckDeep()).forEach(new Processor<PyClass>(){
    public boolean process(    final PyClass pyClass){
      final AccessToken accessToken=ApplicationManager.getApplication().acquireReadActionLock();
      PyFunction overridingMethod;
      try {
        overridingMethod=pyClass.findMethodByName(baseMethod.getName(),false,null);
        if (overridingMethod != null) {
          final Property baseProperty=baseMethod.getProperty();
          final Property overridingProperty=overridingMethod.getProperty();
          if (baseProperty != null && overridingProperty != null) {
            final AccessDirection direction=PyUtil.getPropertyAccessDirection(baseMethod);
            final PyCallable callable=overridingProperty.getByDirection(direction).valueOrNull();
            overridingMethod=(callable instanceof PyFunction) ? (PyFunction)callable : null;
          }
        }
      }
  finally {
        accessToken.finish();
      }
      if (overridingMethod != null) {
        return consumer.process(overridingMethod);
      }
      return true;
    }
  }
);
}
