{
  final PyFile file=getTestFile();
  final Project project=file.getProject();
  try {
    PythonLanguageLevelPusher.setForcedLanguageLevel(project,LanguageLevel.PYTHON26);
    final List<PyClass> classes=file.getTopLevelClasses();
    assertEquals(3,classes.size());
    PyClass pyClass=classes.get(0);
    assertEquals("FooClass",pyClass.getName());
    assertEquals("StubStructure.FooClass",pyClass.getQualifiedName());
    final List<PyTargetExpression> attrs=pyClass.getClassAttributes();
    assertEquals(2,attrs.size());
    assertEquals("staticField",attrs.get(0).getName());
    assertTrue(attrs.get(0).getAssignedQName().matches("deco"));
    final PyFunction[] methods=pyClass.getMethods();
    assertEquals(2,methods.length);
    assertEquals("__init__",methods[0].getName());
    assertEquals("fooFunction",methods[1].getName());
    final PyParameter[] parameters=methods[1].getParameterList().getParameters();
    assertFalse(parameters[0].hasDefaultValue());
    assertTrue(parameters[1].hasDefaultValue());
    PyFunction decorated=methods[1];
    PyDecoratorList decos=decorated.getDecoratorList();
    assertNotNull(decos);
    assertNotParsed(file);
    PyDecorator[] da=decos.getDecorators();
    assertNotNull(da);
    assertEquals(1,da.length);
    assertNotParsed(file);
    PyDecorator deco=da[0];
    assertNotNull(deco);
    assertEquals("deco",deco.getName());
    assertNotParsed(file);
    final List<PyTargetExpression> instanceAttrs=pyClass.getInstanceAttributes();
    assertEquals(1,instanceAttrs.size());
    assertEquals("instanceField",instanceAttrs.get(0).getName());
    final List<PyFunction> functions=file.getTopLevelFunctions();
    assertEquals(2,functions.size());
    PyFunction func=functions.get(0);
    assertEquals("deco",func.getName());
    func=functions.get(1);
    assertEquals("topLevelFunction",func.getName());
    final List<PyTargetExpression> exprs=file.getTopLevelAttributes();
    assertEquals(2,exprs.size());
    assertEquals("top1",exprs.get(0).getName());
    assertEquals("top2",exprs.get(1).getName());
    pyClass=classes.get(1);
    assertEquals("BarClass",pyClass.getName());
    Property prop=pyClass.findProperty("value");
    Maybe<PyFunction> maybe_function=prop.getGetter();
    assertTrue(maybe_function.isDefined());
    assertEquals(pyClass.getMethods()[0],maybe_function.value());
    Property setvalueProp=pyClass.findProperty("setvalue");
    Maybe<PyFunction> setter=setvalueProp.getSetter();
    assertTrue(setter.isDefined());
    assertEquals("__set",setter.value().getName());
    pyClass=classes.get(2);
    assertEquals("BazClass",pyClass.getName());
    prop=pyClass.findProperty("x");
    maybe_function=prop.getGetter();
    assertTrue(maybe_function.isDefined());
    assertEquals(pyClass.getMethods()[0],maybe_function.value());
    maybe_function=prop.getSetter();
    assertTrue(maybe_function.isDefined());
    assertEquals(pyClass.getMethods()[1],maybe_function.value());
    assertNotParsed(file);
  }
  finally {
    PythonLanguageLevelPusher.setForcedLanguageLevel(project,LanguageLevel.getDefault());
  }
}
