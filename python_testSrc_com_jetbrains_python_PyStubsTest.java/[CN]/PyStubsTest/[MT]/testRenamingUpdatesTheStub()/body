{
  final PyFile file=getTestFile("LoadingTreeRetainsKnownPsiElement.py");
  final List<PyClass> classes=file.getTopLevelClasses();
  assertEquals(1,classes.size());
  final PyClass pyClass=classes.get(0);
  assertEquals("SomeClass",pyClass.getName());
  final PyFileImpl fileImpl=(PyFileImpl)file;
  assertNull(fileImpl.getTreeElement());
  final PsiElement[] children=file.getChildren();
  assertNotNull(fileImpl.getTreeElement());
  assertEquals(1,children.length);
  assertSame(pyClass,children[0]);
  new WriteCommandAction(myProject,fileImpl){
    protected void run(    final Result result) throws Throwable {
      pyClass.setName("RenamedClass");
      assertEquals("RenamedClass",pyClass.getName());
    }
  }
.execute();
  StubElement fileStub=fileImpl.getStub();
  assertNull("There should be no stub if file holds tree element",fileStub);
  FileBasedIndex.getInstance().ensureUpToDate(StubUpdatingIndex.INDEX_ID,getProject());
  fileImpl.unloadContent();
  assertNull(fileImpl.getTreeElement());
  fileStub=fileImpl.getStub();
  assertNotNull("After tree element have been unloaded we must be able to create updated stub",fileStub);
  final PyClassStub newclassstub=(PyClassStub)fileStub.getChildrenStubs().get(0);
  assertEquals("RenamedClass",newclassstub.getName());
}
