{
  assertEquals(expected.getHash(),actual.getHash());
  assertEquals(expected.getCommitterName(),actual.getCommitterName());
  assertEquals(expected.getCommitterEmail(),actual.getCommitterEmail());
  assertEquals(expected.getCommitTime(),actual.getDate());
  assertEquals(expected.getAuthorName(),actual.getAuthorName());
  assertEquals(expected.getAuthorEmail(),actual.getAuthorEmail());
  assertEquals(expected.getAuthorTime().getTime(),actual.getAuthorTimeStamp());
  String expectedAuthorAndCommitter=GitUtil.adjustAuthorName(String.format("%s <%s>",expected.getAuthorName(),expected.getAuthorEmail()),String.format("%s <%s>",expected.getCommitterName(),expected.getCommitterEmail()));
  assertEquals(expectedAuthorAndCommitter,actual.getAuthorAndCommitter());
  assertEquals(expected.getSubject(),actual.getSubject());
  assertEquals(expected.getBody(),actual.getBody());
  assertEquals(expected.rawBody(),actual.getRawBody());
  assertSameElements(actual.getParentsHashes(),expected.getParents());
  if (option == GitTestLogRecord.NameStatusOption.NAME) {
    assertPaths(actual.getFilePaths(myRoot),expected.paths());
  }
 else   if (option == GitTestLogRecord.NameStatusOption.STATUS) {
    assertPaths(actual.getFilePaths(myRoot),expected.paths());
    assertChanges(actual.parseChanges(myProject,myRoot),expected.changes());
  }
}
