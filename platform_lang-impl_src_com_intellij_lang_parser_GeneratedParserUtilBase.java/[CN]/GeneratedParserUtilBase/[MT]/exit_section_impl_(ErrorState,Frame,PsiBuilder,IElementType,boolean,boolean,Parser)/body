{
  int initialPos=builder.rawTokenIndex();
  boolean willFail=!result && !pinned;
  replace_variants_with_name_(state,frame,builder,result,pinned);
  int lastErrorPos=getLastVariantPos(state,initialPos);
  if (!state.suppressErrors && eatMore != null) {
    state.suppressErrors=true;
    final boolean eatMoreFlagOnce=!builder.eof() && eatMore.parse(builder,frame.level + 1);
    boolean eatMoreFlag=eatMoreFlagOnce || !result && frame.position == initialPos && lastErrorPos > frame.position;
    PsiBuilderImpl.ProductionMarker latestDoneMarker=(pinned || result) && (state.altMode || elementType != null) && eatMoreFlagOnce ? (PsiBuilderImpl.ProductionMarker)builder.getLatestDoneMarker() : null;
    PsiBuilder.Marker extensionMarker=null;
    IElementType extensionTokenType=null;
    if (latestDoneMarker != null && frame.position >= latestDoneMarker.getStartIndex() && frame.position <= latestDoneMarker.getEndIndex()) {
      extensionMarker=((PsiBuilder.Marker)latestDoneMarker).precede();
      extensionTokenType=latestDoneMarker.getTokenType();
      ((PsiBuilder.Marker)latestDoneMarker).drop();
    }
    int parenCount=0;
    while ((eatMoreFlag || parenCount > 0) && builder.rawTokenIndex() < lastErrorPos) {
      IElementType tokenType=builder.getTokenType();
      if (state.braces != null) {
        if (tokenType == state.braces[0].getLeftBraceType())         parenCount++;
 else         if (tokenType == state.braces[0].getRightBraceType())         parenCount--;
      }
      if (!(builder.rawTokenIndex() < lastErrorPos))       break;
      builder.advanceLexer();
      eatMoreFlag=eatMore.parse(builder,frame.level + 1);
    }
    boolean errorReported=frame.errorReportedAt == initialPos || !result && frame.errorReportedAt >= frame.position;
    if (errorReported) {
      if (eatMoreFlag) {
        builder.advanceLexer();
        parseAsTree(state,builder,frame.level + 1,DUMMY_BLOCK,true,TOKEN_ADVANCER,eatMore);
      }
    }
 else     if (eatMoreFlag) {
      errorReported=reportError(builder,state,frame,null,true,true);
      parseAsTree(state,builder,frame.level + 1,DUMMY_BLOCK,true,TOKEN_ADVANCER,eatMore);
    }
 else     if (eatMoreFlagOnce || (!result && frame.position != builder.rawTokenIndex()) || frame.errorReportedAt > initialPos) {
      errorReported=reportError(builder,state,frame,null,true,false);
    }
 else     if (!result && pinned && frame.errorReportedAt < 0) {
      errorReported=reportError(builder,state,frame,elementType,false,false);
    }
    if (extensionMarker != null) {
      extensionMarker.done(extensionTokenType);
    }
    state.suppressErrors=false;
    if (errorReported || result) {
      state.clearVariants(true,0);
      state.clearVariants(false,0);
      state.lastExpectedVariantPos=-1;
    }
  }
 else   if (!result && pinned && frame.errorReportedAt < 0) {
    if (lastErrorPos == initialPos) {
      reportError(builder,state,frame,elementType,false,false);
    }
 else     if (lastErrorPos > initialPos) {
      frame.errorReportedAt=lastErrorPos;
    }
  }
  Frame prevFrame=willFail && eatMore == null ? null : state.currentFrame;
  if (prevFrame != null && prevFrame.errorReportedAt < frame.errorReportedAt) {
    prevFrame.errorReportedAt=frame.errorReportedAt;
  }
}
