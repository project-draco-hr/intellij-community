{
  final AssertHint assertHint=AssertHint.createAssertEqualsHint(callExpression,checkTestNG());
  if (assertHint == null)   return;
  final PsiExpressionList argumentList=callExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  final int argIndex=assertHint.getArgIndex();
  final PsiExpression firstTestArgument=arguments[argIndex];
  final PsiExpression secondTestArgument=arguments[argIndex + 1];
  final String literalValue;
  final String compareValue;
  if (isSimpleLiteral(firstTestArgument,secondTestArgument)) {
    literalValue=firstTestArgument.getText();
    compareValue=secondTestArgument.getText();
  }
 else {
    literalValue=secondTestArgument.getText();
    compareValue=firstTestArgument.getText();
  }
  final String uppercaseLiteralValue=Character.toUpperCase(literalValue.charAt(0)) + literalValue.substring(1);
  @NonNls final StringBuilder newExpression=new StringBuilder();
  @NonNls final String methodName="assert" + uppercaseLiteralValue;
  compoundMethodCall(callExpression,methodName,assertHint.getMessage(),argIndex,compareValue,newExpression);
  PsiReplacementUtil.replaceExpressionAndShorten(callExpression,newExpression.toString());
}
