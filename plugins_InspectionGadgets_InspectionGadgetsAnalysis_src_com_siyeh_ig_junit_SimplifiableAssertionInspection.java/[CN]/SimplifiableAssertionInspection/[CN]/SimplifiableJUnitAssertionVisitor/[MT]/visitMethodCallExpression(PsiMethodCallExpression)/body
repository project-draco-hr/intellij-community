{
  super.visitMethodCallExpression(expression);
  if (isAssertEqualsThatCouldBeAssertLiteral(expression)) {
    registerMethodCallError(expression,getReplacementMethodName(expression));
  }
 else {
    final boolean assertTrue=isAssertTrue(expression);
    final boolean assertFalse=isAssertFalse(expression);
    if (!assertTrue && !assertFalse) {
      return;
    }
    final AssertHint assertTrueFalseHint=AssertHint.createAssertTrueFalseHint(expression);
    if (assertTrueFalseHint == null) {
      return;
    }
    final PsiExpression position=assertTrueFalseHint.getPosition(expression.getArgumentList().getExpressions());
    if (isNullComparison(position)) {
      registerMethodCallError(expression,hasEqEqExpressionArgument(position) ? "assertNull()" : "assertNotNull()");
    }
 else     if (isIdentityComparison(position)) {
      registerMethodCallError(expression,hasEqEqExpressionArgument(position) ? "assertSame()" : "assertNotSame()");
    }
 else     if (assertTrue && isEqualityComparison(position)) {
      registerMethodCallError(expression,"assertEquals()");
    }
 else     if (isAssertThatCouldBeFail(position,!assertTrue)) {
      registerMethodCallError(expression,"fail()");
    }
  }
}
