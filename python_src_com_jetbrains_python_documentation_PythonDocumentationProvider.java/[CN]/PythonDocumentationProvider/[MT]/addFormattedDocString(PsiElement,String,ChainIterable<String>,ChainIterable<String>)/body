{
  Project project=element.getProject();
  PyDocumentationSettings documentationSettings=PyDocumentationSettings.getInstance(project);
  List<String> result=new ArrayList<String>();
  if (documentationSettings.isEpydocFormat()) {
    final EpydocString epydocString=new EpydocString(docstring);
    Module module=ModuleUtil.findModuleForPsiElement(element);
    String formatted=null;
    if (module != null) {
      formatted=EpydocRunner.formatDocstring(module,docstring);
    }
    if (formatted == null) {
      formatted=epydocString.getDescription();
    }
    result.add(formatted);
    result.add(formatStructuredDocString(epydocString));
    unformattedOutput.add(result);
    return;
  }
 else   if (documentationSettings.isReSTFormat()) {
    Module module=ModuleUtil.findModuleForPsiElement(element);
    String formatted=null;
    if (module != null) {
      formatted=ReSTRunner.formatDocstring(module,docstring);
    }
    if (formatted == null) {
      formatted=new SphinxDocString(docstring).getDescription();
    }
    result.add(formatted);
    unformattedOutput.add(result);
    return;
  }
  String[] lines=LineTokenizer.tokenize(docstring,false);
  Pattern spaces_pat=Pattern.compile("^\\s+");
  boolean is_first=true;
  int cut_width=Integer.MAX_VALUE;
  int firstIndentedLine=0;
  for (  String frag : lines) {
    if (frag.length() == 0)     continue;
    int pad_width=0;
    final Matcher matcher=spaces_pat.matcher(frag);
    if (matcher.find()) {
      pad_width=matcher.end();
    }
    if (is_first) {
      is_first=false;
      if (pad_width == 0) {
        firstIndentedLine=1;
        continue;
      }
    }
    if (pad_width < cut_width)     cut_width=pad_width;
  }
  if (cut_width > 0 && cut_width < Integer.MAX_VALUE) {
    for (int i=firstIndentedLine; i < lines.length; i+=1) {
      if (lines[i].length() > 0)       lines[i]=lines[i].substring(cut_width);
    }
  }
  is_first=true;
  int tabSize=CodeStyleSettingsManager.getSettings(project).getTabSize(PythonFileType.INSTANCE);
  for (  String line : lines) {
    if (is_first && spaces_pat.matcher(line).matches())     continue;
    if (is_first)     is_first=false;
 else     result.add(BR);
    int leadingTabs=0;
    while (leadingTabs < line.length() && line.charAt(leadingTabs) == '\t') {
      leadingTabs++;
    }
    if (leadingTabs > 0) {
      line=StringUtil.repeatSymbol(' ',tabSize * leadingTabs) + line.substring(leadingTabs);
    }
    result.add(combUp(line));
  }
  formattedOutput.add(result);
}
