{
  final String evaluated=visited.get(type);
  if (evaluated != null) {
    return evaluated;
  }
  String result=null;
  final String typeName=type != null ? type.getName() : null;
  if (type instanceof PyTypeReference) {
    final PyType resolved=((PyTypeReference)type).resolve(null,context);
    if (resolved != null) {
      result=getTypeName(resolved,context,visited,true);
    }
  }
 else   if (type instanceof PyCollectionType) {
    final String name=type.getName();
    final PyType elementType=((PyCollectionType)type).getElementType(context);
    if (elementType != null) {
      result=String.format("%s of %s",name,getTypeName(elementType,context,visited,true));
    }
  }
 else   if (type instanceof PyUnionType && allowUnions) {
    if (type instanceof PyDynamicallyEvaluatedType) {
      result=getTypeName(((PyDynamicallyEvaluatedType)type).exclude(null,context),context);
    }
 else {
      result=String.format("one of (%s)",StringUtil.join(((PyUnionType)type).getMembers(),new Function<PyType,String>(){
        @Override public String fun(        PyType t){
          return getTypeName(t,context,visited,false);
        }
      }
,", "));
    }
  }
  if (result == null) {
    result=typeName != null ? typeName : UNKNOWN;
  }
  visited.put(type,result);
  return result;
}
