{
  final List<PsiMethodWithOverridingPercentMember> result=new ArrayList<PsiMethodWithOverridingPercentMember>(candidateInfos.size());
  final Map<String,Collection<PsiClass>> classShortNames2Inheritors=new HashMap<String,Collection<PsiClass>>();
  for (  final CandidateInfo candidateInfo : candidateInfos) {
    final PsiMethod method=(PsiMethod)candidateInfo.getElement();
    if (!method.hasModifierProperty(PsiModifier.FINAL) && !method.isConstructor() && !method.isDeprecated()&& !EXCLUDED_JAVA_LANG_OBJECT_METHOD_NAMES.contains(method.getName())) {
      final PsiClass containingClass=method.getContainingClass();
      if (containingClass == null) {
        continue;
      }
      final String classShortName=containingClass.getName();
      Collection<PsiClass> allInheritors=classShortNames2Inheritors.get(classShortName);
      if (allInheritors == null) {
        allInheritors=ClassInheritorsSearch.search(containingClass).findAll();
        classShortNames2Inheritors.put(classShortName,allInheritors);
      }
      final int allInheritorsCount=allInheritors.size() - 1;
      if (allInheritorsCount > 0) {
        final int percent=searchForOverridingCount(method,allInheritors) * 100 / allInheritorsCount;
        if (percent > 1) {
          result.add(new PsiMethodWithOverridingPercentMember(candidateInfo,percent));
        }
      }
    }
  }
  return result.toArray(new PsiMethodWithOverridingPercentMember[result.size()]);
}
