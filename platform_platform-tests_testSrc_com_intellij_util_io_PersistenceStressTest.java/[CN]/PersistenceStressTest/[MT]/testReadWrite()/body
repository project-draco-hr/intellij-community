{
  List<Future<Boolean>> futures=new ArrayList<Future<Boolean>>();
  for (  PersistentHashMap<String,Record> map : myMaps) {
    Future<Boolean> submit=submit(map);
    futures.add(submit);
  }
  myThreadPool.submit(new Runnable(){
    @Override public void run(){
      try {
        while (ContainerUtil.find(futures,CONDITION) != null) {
          Thread.sleep(100);
          for (          PersistentHashMap<String,Record> map : myMaps) {
            map.dropMemoryCaches();
          }
        }
      }
 catch (      InterruptedException ignore) {
      }
    }
  }
);
  ArrayList<VirtualFile> files=new ArrayList<>();
  for (int i=0; i < 100; i++) {
    File file=FileUtil.createTempFile("",".txt");
    VirtualFile virtualFile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file);
    assertNotNull(virtualFile);
    VfsUtil.saveText(virtualFile,"foo bar");
    files.add(virtualFile);
  }
  FileBasedIndexImpl index=(FileBasedIndexImpl)FileBasedIndex.getInstance();
  while (ContainerUtil.find(futures,CONDITION) != null) {
    Thread.sleep(100);
    CacheUpdateRunner.processFiles(new EmptyProgressIndicator(),true,files,getProject(),new Consumer<FileContent>(){
      @Override public void consume(      FileContent content){
        index.indexFileContent(getProject(),content);
      }
    }
);
  }
  for (  Future<Boolean> future : futures) {
    assertTrue(future.get());
  }
}
