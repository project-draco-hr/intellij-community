{
  super.setUp();
  Random random=new Random();
  for (int i=0; i < 100; i++) {
    byte[] bytes=new byte[1000];
    random.nextBytes(bytes);
    String key=new String(bytes,CharsetToolkit.UTF8_CHARSET);
    myKeys.add(key);
  }
  File tempDirectory=FileUtil.createTempDirectory("map","");
  for (int i=0; i < 10; i++) {
    PersistentHashMap<String,Record> map=createMap(FileUtil.createTempFile(tempDirectory,"persistent","map" + i));
    myMaps.add(map);
  }
  PagedFileStorage.StorageLockContext storageLockContext=new PagedFileStorage.StorageLockContext(false);
  myEnumerator=new PersistentStringEnumerator(FileUtil.createTempFile(tempDirectory,"persistent","enum"),storageLockContext);
  myThreadPool=Executors.newFixedThreadPool(myMaps.size() + 2);
}
