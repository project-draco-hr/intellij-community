{
  final List<PsiClassType> array=ContainerUtil.newArrayList();
  final PsiElementVisitor visitor=new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitEnumConstant(    PsiEnumConstant enumConstant){
      final PsiMethod method=enumConstant.resolveMethod();
      if (method != null) {
        addExceptions(array,getUnhandledExceptions(method,enumConstant,null,PsiSubstitutor.EMPTY));
      }
      visitElement(enumConstant);
    }
    @Override public void visitCallExpression(    @NotNull PsiCallExpression expression){
      addExceptions(array,getUnhandledExceptions(expression,null));
      visitElement(expression);
    }
    @Override public void visitThrowStatement(    @NotNull PsiThrowStatement statement){
      addExceptions(array,getUnhandledExceptions(statement,null));
      visitElement(statement);
    }
    @Override public void visitLambdaExpression(    PsiLambdaExpression expression){
      if (ArrayUtil.find(elements,expression) >= 0) {
        visitElement(expression);
      }
    }
    @Override public void visitMethodReferenceExpression(    @NotNull PsiMethodReferenceExpression expression){
      if (ArrayUtil.find(elements,expression) >= 0) {
        addExceptions(array,getUnhandledExceptions(expression,null));
        visitElement(expression);
      }
    }
    @Override public void visitResourceVariable(    @NotNull PsiResourceVariable resource){
      addExceptions(array,getUnhandledCloserExceptions(resource,null));
      visitElement(resource);
    }
    @Override public void visitResourceExpression(    @NotNull PsiResourceExpression resource){
      addExceptions(array,getUnhandledCloserExceptions(resource,null));
      visitElement(resource);
    }
    @Override public void visitClass(    PsiClass aClass){
    }
  }
;
  for (  PsiElement element : elements) {
    element.accept(visitor);
  }
  return array;
}
