{
  final JavaResolveResult result=methodCall.resolveMethodGenerics();
  final PsiMethod method=(PsiMethod)result.getElement();
  if (!includeSelfCalls && method == PsiTreeUtil.getParentOfType(methodCall,PsiMethod.class)) {
    return Collections.emptyList();
  }
  final PsiSubstitutor substitutor=result.getSubstitutor();
  if (method != null && !isArrayClone(method,methodCall) && methodCall instanceof PsiMethodCallExpression) {
    final PsiClassType[] thrownExceptions=method.getThrowsList().getReferencedTypes();
    if (thrownExceptions.length > 0) {
      final MethodResolverProcessor processor=new MethodResolverProcessor((PsiMethodCallExpression)methodCall);
      try {
        PsiScopesUtil.setupAndRunProcessor(processor,methodCall,false);
        final List<CandidateInfo> results=processor.getResults();
        if (results.size() > 1) {
          final List<PsiClassType> ex=collectSubstituted(substitutor,thrownExceptions);
          for (          CandidateInfo info : results) {
            final PsiElement element=info.getElement();
            if (element instanceof PsiMethod && MethodSignatureUtil.areSignaturesEqual(method,(PsiMethod)element)) {
              ex.retainAll(collectSubstituted(info.getSubstitutor(),((PsiMethod)element).getThrowsList().getReferencedTypes()));
            }
          }
          return getUnhandledExceptions(methodCall,topElement,PsiSubstitutor.EMPTY,ex.toArray(new PsiClassType[ex.size()]));
        }
      }
 catch (      MethodProcessorSetupFailedException ignore) {
        return Collections.emptyList();
      }
    }
  }
  return getUnhandledExceptions(method,methodCall,topElement,substitutor);
}
