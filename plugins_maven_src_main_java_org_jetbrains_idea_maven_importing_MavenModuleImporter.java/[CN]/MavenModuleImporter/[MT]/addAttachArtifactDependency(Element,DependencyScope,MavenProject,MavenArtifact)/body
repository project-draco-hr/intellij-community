{
  Library.ModifiableModel libraryModel=null;
  for (  Element artifactsElement : buildHelperCfg.getChildren("artifacts")) {
    for (    Element artifactElement : artifactsElement.getChildren("artifact")) {
      String typeString=artifactElement.getChildTextTrim("type");
      if (typeString != null && !typeString.equals("jar"))       continue;
      OrderRootType rootType=OrderRootType.CLASSES;
      String classifier=artifactElement.getChildTextTrim("classifier");
      if ("sources".equals(classifier)) {
        rootType=OrderRootType.SOURCES;
      }
 else       if ("javadoc".equals(classifier)) {
        rootType=JavadocOrderRootType.getInstance();
      }
      String filePath=artifactElement.getChildTextTrim("file");
      if (StringUtil.isEmpty(filePath))       continue;
      VirtualFile file=VfsUtil.findRelativeFile(filePath,mavenProject.getDirectoryFile());
      if (file == null)       continue;
      file=JarFileSystem.getInstance().getJarRootForLocalFile(file);
      if (file == null)       continue;
      if (libraryModel == null) {
        String libraryName=getAttachedJarsLibName(artifact);
        Library library=myModifiableModelsProvider.getLibraryByName(libraryName);
        if (library == null) {
          library=myModifiableModelsProvider.createLibrary(libraryName);
        }
        libraryModel=myModifiableModelsProvider.getLibraryModel(library);
        LibraryOrderEntry entry=myRootModelAdapter.getRootModel().addLibraryEntry(library);
        entry.setScope(scope);
      }
      libraryModel.addRoot(file,rootType);
    }
  }
}
