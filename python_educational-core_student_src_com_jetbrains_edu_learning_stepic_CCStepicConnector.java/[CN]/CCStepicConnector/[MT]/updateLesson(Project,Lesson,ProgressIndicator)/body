{
  final HttpPut request=new HttpPut(EduStepicNames.STEPIC_API_URL + EduStepicNames.LESSONS + String.valueOf(lesson.getId()));
  String requestBody=new Gson().toJson(new StepicWrappers.LessonWrapper(lesson));
  request.setEntity(new StringEntity(requestBody,ContentType.APPLICATION_JSON));
  try {
    final CloseableHttpClient client=EduStepicAuthorizedClient.getHttpClient(project);
    final CloseableHttpResponse response=client.execute(request);
    final HttpEntity responseEntity=response.getEntity();
    final String responseString=responseEntity != null ? EntityUtils.toString(responseEntity) : "";
    final StatusLine line=response.getStatusLine();
    EntityUtils.consume(responseEntity);
    if (line.getStatusCode() != HttpStatus.SC_OK) {
      LOG.error("Failed to push " + responseString);
      return -1;
    }
    final Lesson postedLesson=new Gson().fromJson(responseString,Course.class).getLessons().get(0);
    for (    Integer step : postedLesson.steps) {
      deleteTask(step,project);
    }
    for (    Task task : lesson.getTaskList()) {
      indicator.checkCanceled();
      postTask(project,task,lesson.getId());
    }
    return lesson.getId();
  }
 catch (  IOException e) {
    LOG.error(e.getMessage());
  }
  return -1;
}
