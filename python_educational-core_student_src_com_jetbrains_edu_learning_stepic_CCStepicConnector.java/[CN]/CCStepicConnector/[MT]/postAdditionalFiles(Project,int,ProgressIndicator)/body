{
  final VirtualFile baseDir=project.getBaseDir();
  final List<VirtualFile> files=VfsUtil.getChildren(baseDir,new VirtualFileFilter(){
    @Override public boolean accept(    VirtualFile file){
      final String name=file.getName();
      return !name.contains(EduNames.LESSON) && !name.equals(EduNames.COURSE_META_FILE) && !name.equals(EduNames.HINTS)&& !"pyc".equals(file.getExtension())&& !file.isDirectory()&& !name.equals(EduNames.TEST_HELPER)&& !name.startsWith(".");
    }
  }
);
  if (!files.isEmpty()) {
    final int sectionId=postModule(project,id,2,EduNames.PYCHARM_ADDITIONAL);
    final Lesson lesson=new Lesson();
    lesson.setName(EduNames.PYCHARM_ADDITIONAL);
    final Task task=new Task();
    task.setLesson(lesson);
    task.setName(EduNames.PYCHARM_ADDITIONAL);
    task.setIndex(1);
    task.setText(EduNames.PYCHARM_ADDITIONAL);
    for (    VirtualFile file : files) {
      try {
        if (file != null) {
          if (EduUtils.isImage(file.getName())) {
            task.addTestsTexts(file.getName(),Base64.encodeBase64URLSafeString(FileUtil.loadBytes(file.getInputStream())));
          }
 else {
            task.addTestsTexts(file.getName(),FileUtil.loadTextAndClose(file.getInputStream()));
          }
        }
      }
 catch (      IOException e) {
        LOG.error("Can't find file " + file.getPath());
      }
    }
    lesson.addTask(task);
    lesson.setIndex(1);
    final int lessonId=postLesson(project,lesson,indicator);
    postUnit(project,lessonId,1,sectionId);
  }
}
