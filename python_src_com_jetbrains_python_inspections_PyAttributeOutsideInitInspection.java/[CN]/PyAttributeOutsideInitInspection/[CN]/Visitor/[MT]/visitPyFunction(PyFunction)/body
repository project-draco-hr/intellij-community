{
  final PyClass containingClass=node.getContainingClass();
  if (containingClass == null)   return;
  Map<String,PyTargetExpression> attributesInInit=new HashMap<String,PyTargetExpression>();
  final PyFunction initOrNew=containingClass.findInitOrNew(true);
  if (initOrNew != null)   PyClassImpl.collectInstanceAttributes(initOrNew,attributesInInit);
  Map<String,PyTargetExpression> attributes=new HashMap<String,PyTargetExpression>();
  PyClassImpl.collectInstanceAttributes(node,attributes);
  for (  Map.Entry<String,PyTargetExpression> attribute : attributes.entrySet()) {
    if (!attributesInInit.containsKey(attribute.getKey())) {
      registerProblem(attribute.getValue(),PyBundle.message("INSP.attribute.$0.outside.init",attribute.getKey()),new PyMoveAttributeToInitQuickFix());
    }
  }
}
