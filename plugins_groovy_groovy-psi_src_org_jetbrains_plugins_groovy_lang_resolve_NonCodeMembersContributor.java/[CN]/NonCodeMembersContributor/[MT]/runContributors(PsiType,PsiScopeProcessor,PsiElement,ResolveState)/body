{
  MyDelegatingScopeProcessor delegatingProcessor=new MyDelegatingScopeProcessor(processor);
  ensureInit();
  final PsiClass aClass=PsiTypesUtil.getPsiClass(qualifierType);
  if (TransformationUtilKt.isUnderTransformation(aClass))   return true;
  if (aClass != null) {
    for (    String superClassName : ClassUtil.getSuperClassesWithCache(aClass).keySet()) {
      for (      NonCodeMembersContributor enhancer : ourClassSpecifiedContributors.get(superClassName)) {
        ProgressManager.checkCanceled();
        enhancer.processDynamicElements(qualifierType,aClass,delegatingProcessor,place,state);
        if (!delegatingProcessor.wantMore) {
          return false;
        }
      }
    }
  }
  for (  NonCodeMembersContributor contributor : ourAllTypeContributors) {
    ProgressManager.checkCanceled();
    contributor.processDynamicElements(qualifierType,aClass,delegatingProcessor,place,state);
    if (!delegatingProcessor.wantMore) {
      return false;
    }
  }
  return GroovyDslFileIndex.processExecutors(qualifierType,place,processor,state);
}
