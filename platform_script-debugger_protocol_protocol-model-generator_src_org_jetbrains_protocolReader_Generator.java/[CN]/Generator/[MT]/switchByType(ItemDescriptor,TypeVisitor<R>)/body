{
  String refName=typedObject instanceof ItemDescriptor.Referenceable ? ((ItemDescriptor.Referenceable)typedObject).ref() : null;
  if (refName != null) {
    return visitor.visitRef(refName);
  }
  String typeName=typedObject.type();
switch (typeName) {
case BOOLEAN_TYPE:
    return visitor.visitBoolean();
case STRING_TYPE:
  if (typedObject.getEnum() != null) {
    return visitor.visitEnum(typedObject.getEnum());
  }
return visitor.visitString();
case INTEGER_TYPE:
case "int":
return visitor.visitInteger();
case NUMBER_TYPE:
return visitor.visitNumber();
case ARRAY_TYPE:
return visitor.visitArray(typedObject.items());
case OBJECT_TYPE:
if (!(typedObject instanceof ItemDescriptor.Type)) {
return visitor.visitObject(null);
}
List<ObjectProperty> properties=((ItemDescriptor.Type)typedObject).properties();
if (properties == null || properties.isEmpty()) {
return visitor.visitMap();
}
 else {
return visitor.visitObject(properties);
}
case ANY_TYPE:
return visitor.visitUnknown();
case UNKNOWN_TYPE:
return visitor.visitUnknown();
}
throw new RuntimeException("Unrecognized type " + typeName);
}
