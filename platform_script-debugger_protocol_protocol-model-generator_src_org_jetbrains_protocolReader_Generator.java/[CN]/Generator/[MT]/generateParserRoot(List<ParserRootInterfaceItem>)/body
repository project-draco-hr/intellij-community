{
  FileUpdater fileUpdater=startJavaFile(getNaming().inputPackage,READER_INTERFACE_NAME + ".java");
  Collections.sort(parserRootInterfaceItems);
  TextOutput out=fileUpdater.out;
  out.append("public abstract class ").append(READER_INTERFACE_NAME).space().append("implements org.jetbrains.jsonProtocol.ResponseResultReader").openBlock();
  for (  ParserRootInterfaceItem item : parserRootInterfaceItems) {
    item.writeCode(out);
  }
  out.newLine().newLine().append("@Override").newLine().append("public Object readResult(String methodName, org.jetbrains.io.JsonReaderEx reader)");
  out.openBlock();
  boolean isNotFirst=false;
  for (  ParserRootInterfaceItem item : parserRootInterfaceItems) {
    if (isNotFirst) {
      out.append("else ");
    }
 else {
      isNotFirst=true;
    }
    out.append("if (methodName.equals(\"");
    if (!item.domain.isEmpty()) {
      out.append(item.domain).append('.');
    }
    out.append(item.name).append('"').append(")) return ");
    item.appendReadMethodName(out);
    out.append("(reader)").semi().newLine();
  }
  out.append("else throw new IllegalArgumentException(methodName)").semi();
  out.closeBlock();
  out.closeBlock();
  fileUpdater.update();
}
