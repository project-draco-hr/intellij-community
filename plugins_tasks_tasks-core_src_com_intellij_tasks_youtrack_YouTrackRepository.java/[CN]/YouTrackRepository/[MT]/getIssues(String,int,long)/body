{
  String query=getDefaultSearch();
  if (StringUtil.isNotEmpty(request)) {
    query+=" " + request;
  }
  String requestUrl="/rest/project/issues/?filter=" + encodeUrl(query) + "&max="+ max+ "&updatedAfter"+ since;
  HttpMethod method=doREST(requestUrl,false);
  InputStream stream=method.getResponseBodyAsStream();
  String s=StreamUtil.readText(stream,CharsetToolkit.UTF8_CHARSET);
  for (int i=0; i < s.length(); i++) {
    if (!XMLChar.isValid(s.charAt(i))) {
      s=s.replace(s.charAt(i),' ');
    }
  }
  Element element;
  try {
    element=new SAXBuilder(false).build(new StringReader(s)).getRootElement();
  }
 catch (  JDOMException e) {
    LOG.error("Can't parse YouTrack response for " + requestUrl,e);
    throw e;
  }
  if ("error".equals(element.getName())) {
    throw new Exception("Error from YouTrack for " + requestUrl + ": '"+ element.getText()+ "'");
  }
  List<Element> children=element.getChildren("issue");
  final List<Task> tasks=ContainerUtil.mapNotNull(children,new NullableFunction<Element,Task>(){
    public Task fun(    Element o){
      return createIssue(o);
    }
  }
);
  return tasks.toArray(new Task[tasks.size()]);
}
