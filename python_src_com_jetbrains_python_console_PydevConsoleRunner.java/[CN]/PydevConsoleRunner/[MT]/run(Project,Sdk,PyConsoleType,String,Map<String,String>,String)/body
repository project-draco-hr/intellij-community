{
  final int[] ports;
  try {
    ports=NetUtils.findAvailableSocketPorts(2);
  }
 catch (  IOException e) {
    ExecutionHelper.showErrors(project,Arrays.<Exception>asList(e),consoleType.getTitle(),null);
    return null;
  }
  final ArrayList<String> args=new ArrayList<String>();
  args.add(sdk.getHomePath());
  final String versionString=sdk.getVersionString();
  if (versionString == null || !versionString.toLowerCase().contains("jython")) {
    args.add("-u");
  }
  args.add(FileUtil.toSystemDependentName(PythonHelpersLocator.getHelperPath("pydev/console/pydevconsole.py")));
  for (  int port : ports) {
    args.add(String.valueOf(port));
  }
  final CommandLineArgumentsProvider provider=new CommandLineArgumentsProvider(){
    public String[] getArguments(){
      return ArrayUtil.toStringArray(args);
    }
    public boolean passParentEnvs(){
      return false;
    }
    public Map<String,String> getAdditionalEnvs(){
      return environmentVariables;
    }
  }
;
  final PydevConsoleRunner consoleRunner=new PydevConsoleRunner(project,sdk,consoleType,provider,projectRoot,ports);
  ProgressManager.getInstance().run(new Task.Backgroundable(null,"Connecting to console",false){
    public void run(    @NotNull final ProgressIndicator indicator){
      indicator.setText("Connecting to console...");
      try {
        consoleRunner.initAndRun(statements2execute);
      }
 catch (      ExecutionException e) {
        ExecutionHelper.showErrors(project,Arrays.<Exception>asList(e),consoleType.getTitle(),null);
      }
    }
  }
);
  return consoleRunner;
}
