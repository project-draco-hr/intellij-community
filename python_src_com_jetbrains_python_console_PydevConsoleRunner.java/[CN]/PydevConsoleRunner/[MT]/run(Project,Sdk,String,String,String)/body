{
  final int[] ports;
  try {
    ports=NetUtils.findAvailableSocketPorts(2);
  }
 catch (  IOException e) {
    ExecutionHelper.showErrors(project,Arrays.<Exception>asList(e),consoleTitle,null);
    return;
  }
  final ArrayList<String> args=new ArrayList<String>(Arrays.asList(sdk.getHomePath(),"-u",PythonHelpersLocator.getHelperPath("pydev/console/pydevconsole.py")));
  args.add(getLocalHostString());
  for (  int port : ports) {
    args.add(String.valueOf(port));
  }
  final CommandLineArgumentsProvider provider=new CommandLineArgumentsProvider(){
    public String[] getArguments(){
      return args.toArray(new String[args.size()]);
    }
    public boolean passParentEnvs(){
      return false;
    }
    public Map<String,String> getAdditionalEnvs(){
      return Collections.emptyMap();
    }
  }
;
  final PydevConsoleRunner consoleRunner=new PydevConsoleRunner(project,consoleTitle,provider,projectRoot,ports);
  try {
    consoleRunner.initAndRun(statements2execute);
  }
 catch (  ExecutionException e) {
    ExecutionHelper.showErrors(project,Arrays.<Exception>asList(e),consoleTitle,null);
  }
}
