{
  PsiManager manager=initializer.getManager();
  PsiClass thisClass=RefactoringChangeUtil.getThisClass(initializer);
  PsiClass refParent=RefactoringChangeUtil.getThisClass(ref);
  final PsiElement parent=ref.getParent();
  final PsiType varType=variable.getType();
  initializer=RefactoringUtil.convertInitializerToNormalExpression(initializer,varType);
  if (initializer instanceof PsiPolyadicExpression) {
    final IElementType operationTokenType=((PsiPolyadicExpression)initializer).getOperationTokenType();
    if ((operationTokenType == JavaTokenType.PLUS || operationTokenType == JavaTokenType.MINUS) && parent instanceof PsiPolyadicExpression && ((PsiPolyadicExpression)parent).getOperationTokenType() == JavaTokenType.PLUS) {
      final PsiType type=((PsiPolyadicExpression)parent).getType();
      if (type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
        final PsiElementFactory factory=JavaPsiFacade.getElementFactory(initializer.getProject());
        initializer=factory.createExpressionFromText("(" + initializer.getText() + ")",initializer);
      }
    }
  }
  solveVariableNameConflicts(initializer,ref,initializer);
  ChangeContextUtil.encodeContextInfo(initializer,false);
  PsiExpression expr=(PsiExpression)replaceDiamondWithInferredTypesIfNeeded(initializer,ref);
  PsiThisExpression thisAccessExpr=createThisExpression(manager,thisClass,refParent);
  expr=(PsiExpression)ChangeContextUtil.decodeContextInfo(expr,thisClass,thisAccessExpr);
  PsiType exprType=RefactoringUtil.getTypeByExpression(expr);
  if (exprType != null && !exprType.equals(varType)) {
    boolean matchedTypes=false;
    final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
    if (expr instanceof PsiCallExpression && ((PsiCallExpression)expr).getTypeArguments().length == 0) {
      final JavaResolveResult resolveResult=((PsiCallExpression)initializer).resolveMethodGenerics();
      final PsiElement resolved=resolveResult.getElement();
      if (resolved instanceof PsiMethod) {
        final PsiTypeParameter[] typeParameters=((PsiMethod)resolved).getTypeParameters();
        if (typeParameters.length > 0) {
          final PsiCallExpression copy=(PsiCallExpression)expr.copy();
          for (          final PsiTypeParameter typeParameter : typeParameters) {
            final PsiType substituted=resolveResult.getSubstitutor().substitute(typeParameter);
            if (substituted == null)             break;
            copy.getTypeArgumentList().add(elementFactory.createTypeElement(substituted));
          }
          if (varType.equals(copy.getType())) {
            ((PsiCallExpression)expr).getTypeArgumentList().replace(copy.getTypeArgumentList());
            if (expr instanceof PsiMethodCallExpression) {
              final PsiReferenceExpression methodExpression=((PsiMethodCallExpression)expr).getMethodExpression();
              final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
              if (qualifierExpression == null) {
                final PsiMethod method=(PsiMethod)resolved;
                final PsiClass containingClass=method.getContainingClass();
                LOG.assertTrue(containingClass != null);
                if (method.getModifierList().hasModifierProperty(PsiModifier.STATIC)) {
                  methodExpression.setQualifierExpression(elementFactory.createReferenceExpression(containingClass));
                }
 else {
                  methodExpression.setQualifierExpression(createThisExpression(manager,thisClass,refParent));
                }
              }
            }
            matchedTypes=true;
          }
        }
      }
    }
    boolean insertCastWhenUnchecked=!(exprType instanceof PsiClassType && ((PsiClassType)exprType).isRaw() && parent instanceof PsiExpressionList);
    if (!matchedTypes && (expr instanceof PsiFunctionalExpression || !PsiPolyExpressionUtil.isPolyExpression(expr) && insertCastWhenUnchecked)) {
      expr=surroundWithCast(variable,expr);
    }
  }
  ChangeContextUtil.clearContextInfo(initializer);
  return expr;
}
