{
  if (initializer instanceof PsiNewExpression) {
    final PsiDiamondType diamondType=PsiDiamondTypeUtil.getDiamondType((PsiNewExpression)initializer);
    if (diamondType != null) {
      final PsiDiamondType.DiamondInferenceResult inferenceResult=diamondType.resolveInferredTypes();
      if (inferenceResult.getErrorMessage() == null) {
        final PsiElement copy=ref.copy();
        final PsiElement parent=ref.replace(initializer);
        final PsiDiamondType.DiamondInferenceResult result=PsiDiamondTypeImpl.resolveInferredTypes((PsiNewExpression)initializer,parent);
        ref=parent.replace(copy);
        if (!result.equals(inferenceResult)) {
          final String inferredTypeText=StringUtil.join(inferenceResult.getTypes(),new Function<PsiType,String>(){
            @Override public String fun(            PsiType psiType){
              return psiType.getCanonicalText();
            }
          }
,", ");
          final PsiExpressionList argumentList=((PsiNewExpression)initializer).getArgumentList();
          if (argumentList != null) {
            final PsiJavaCodeReferenceElement classReference=((PsiNewExpression)initializer).getClassOrAnonymousClassReference();
            LOG.assertTrue(classReference != null);
            final PsiExpression expression=JavaPsiFacade.getElementFactory(initializer.getProject()).createExpressionFromText("new " + classReference.getReferenceName() + "<"+ inferredTypeText+ ">"+ argumentList.getText(),initializer);
            return ref.replace(expression);
          }
        }
      }
    }
  }
  return ref != initializer ? ref.replace(initializer) : initializer;
}
