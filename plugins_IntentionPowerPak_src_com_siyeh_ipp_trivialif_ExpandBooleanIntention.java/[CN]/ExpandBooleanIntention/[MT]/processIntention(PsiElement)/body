{
  if (!(element instanceof PsiStatement)) {
    return;
  }
  final PsiStatement statement=(PsiStatement)element;
  if (ExpandBooleanPredicate.isBooleanAssignment(statement)) {
    final PsiExpressionStatement assignmentStatement=(PsiExpressionStatement)statement;
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)assignmentStatement.getExpression();
    final PsiExpression rhs=assignmentExpression.getRExpression();
    if (rhs == null) {
      return;
    }
    final PsiExpression lhs=assignmentExpression.getLExpression();
    if (ErrorUtil.containsDeepError(lhs) || ErrorUtil.containsDeepError(rhs)) {
      return;
    }
    final String rhsText=rhs.getText();
    final String lhsText=lhs.getText();
    final PsiJavaToken sign=assignmentExpression.getOperationSign();
    final String signText=sign.getText();
    final String conditionText;
    if (signText.length() == 2) {
      conditionText=lhsText + signText.charAt(0) + rhsText;
    }
 else {
      conditionText=rhsText;
    }
    @NonNls final String newStatementText="if(" + conditionText + ") "+ lhsText+ " = true; else "+ lhsText+ " = false;";
    PsiReplacementUtil.replaceStatement(statement,newStatementText);
  }
 else   if (ExpandBooleanPredicate.isBooleanReturn(statement)) {
    final PsiReturnStatement returnStatement=(PsiReturnStatement)statement;
    final PsiExpression returnValue=returnStatement.getReturnValue();
    if (returnValue == null) {
      return;
    }
    if (ErrorUtil.containsDeepError(returnValue)) {
      return;
    }
    final String valueText=returnValue.getText();
    @NonNls final String newStatementText="if(" + valueText + ") return true; else return false;";
    PsiReplacementUtil.replaceStatement(statement,newStatementText);
  }
 else   if (ExpandBooleanPredicate.isBooleanDeclaration(statement)) {
    final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)statement;
    final PsiElement declaredElement=declarationStatement.getDeclaredElements()[0];
    if (!(declaredElement instanceof PsiLocalVariable)) {
      return;
    }
    final PsiLocalVariable variable=(PsiLocalVariable)declaredElement;
    final PsiExpression initializer=variable.getInitializer();
    if (initializer == null) {
      return;
    }
    final String name=variable.getName();
    @NonNls final String newStatementText="if(" + initializer.getText() + ") "+ name+ "=true; else "+ name+ "=false;";
    final Project project=statement.getProject();
    final PsiStatement newStatement=JavaPsiFacade.getElementFactory(project).createStatementFromText(newStatementText,statement);
    final PsiElement newElement=declarationStatement.getParent().addAfter(newStatement,declarationStatement);
    CodeStyleManager.getInstance(project).reformat(newElement);
    initializer.delete();
  }
}
