{
  if (conversion instanceof TypeConversionDescriptor) {
    final TypeConversionDescriptor descriptor=(TypeConversionDescriptor)conversion;
    if (descriptor.getStringToReplace() == null) {
      conversion=descriptor.getReplaceByString();
    }
 else {
      if (descriptor.getExpression() != null)       expression=descriptor.getExpression();
      final ReplaceOptions options=new ReplaceOptions();
      options.setMatchOptions(new MatchOptions());
      final Replacer replacer=new Replacer(project,null);
      try {
        conversion=replacer.testReplace(expression.getText(),descriptor.getStringToReplace(),descriptor.getReplaceByString(),options);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
        return;
      }
    }
  }
  if (conversion instanceof String) {
    String replacement=(String)conversion;
    if (Comparing.strEqual("$",replacement))     return;
    try {
      expression.replace(JavaPsiFacade.getInstance(project).getElementFactory().createExpressionFromText(replacement,expression));
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
  }
 else   if (expression instanceof PsiReferenceExpression) {
    final PsiElement resolved=((PsiReferenceExpression)expression).resolve();
    final PsiMember replacer=((PsiMember)conversion);
    final String method=((PsiMember)resolved).getName();
    final String ref=expression.getText();
    final String newref=ref.substring(0,ref.lastIndexOf(method)) + replacer.getName();
    if (conversion instanceof PsiMethod) {
      if (resolved instanceof PsiMethod) {
        try {
          expression.replace(JavaPsiFacade.getInstance(project).getElementFactory().createExpressionFromText(newref,expression));
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
 else {
        try {
          expression.replace(JavaPsiFacade.getInstance(project).getElementFactory().createExpressionFromText(newref + "()",expression));
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
    }
 else     if (conversion instanceof PsiField) {
      if (resolved instanceof PsiField) {
        try {
          expression.replace(JavaPsiFacade.getInstance(project).getElementFactory().createExpressionFromText(newref,expression));
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
 else {
        final PsiElement parent=Util.getEssentialParent(expression);
        if (parent instanceof PsiMethodCallExpression) {
          try {
            parent.replace(JavaPsiFacade.getInstance(project).getElementFactory().createExpressionFromText(newref,expression));
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
      }
    }
  }
}
