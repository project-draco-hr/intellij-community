{
  final IntObjectHashMap map=new IntObjectHashMap();
  final TIntObjectHashMap<Object> checkMap=new TIntObjectHashMap<Object>();
  final TIntObjectHashMap<Object> dupesMap=new TIntObjectHashMap<Object>();
  Random random=new Random();
  for (int i=0; i < 1000000; ++i) {
    int key=random.nextInt();
    String value=String.valueOf(random.nextInt());
    if (!checkMap.contains(key)) {
      map.put(key,value);
      checkMap.put(key,value);
      assertEquals(map.size(),checkMap.size());
      assertEquals(value,map.get(key));
    }
 else {
      dupesMap.put(key,value);
    }
  }
  dupesMap.put(0,"random string");
  dupesMap.forEachEntry(new TIntObjectProcedure<Object>(){
    @Override public boolean execute(    int key,    Object value){
      checkMap.put(key,value);
      map.put(key,value);
      assertEquals(map.size(),checkMap.size());
      assertEquals(value,map.get(key));
      return true;
    }
  }
);
  String value="random string2";
  checkMap.put(0,value);
  map.put(0,value);
  checkMap.forEachEntry(new TIntObjectProcedure<Object>(){
    @Override public boolean execute(    int key,    Object value){
      assertEquals(value,map.get(key));
      return true;
    }
  }
);
  assertEquals(map.size(),checkMap.size());
}
