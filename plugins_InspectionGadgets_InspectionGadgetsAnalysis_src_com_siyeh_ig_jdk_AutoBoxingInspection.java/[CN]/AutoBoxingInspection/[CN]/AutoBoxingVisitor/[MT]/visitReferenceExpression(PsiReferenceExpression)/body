{
  super.visitReferenceExpression(expression);
  if (expression instanceof PsiMethodReferenceExpression) {
    final PsiMethodReferenceExpression methodReferenceExpression=(PsiMethodReferenceExpression)expression;
    if (methodReferenceExpression.isConstructor()) {
      return;
    }
    final PsiElement referenceNameElement=methodReferenceExpression.getReferenceNameElement();
    if (referenceNameElement == null) {
      return;
    }
    final PsiElement target=methodReferenceExpression.resolve();
    if (!(target instanceof PsiMethod)) {
      return;
    }
    final PsiMethod method=(PsiMethod)target;
    final PsiType returnType=method.getReturnType();
    if (returnType == null || returnType.equals(PsiType.VOID) || !TypeConversionUtil.isPrimitiveAndNotNull(returnType)) {
      return;
    }
    final PsiPrimitiveType primitiveType=(PsiPrimitiveType)returnType;
    final PsiClassType boxedType=primitiveType.getBoxedType(expression);
    if (boxedType == null) {
      return;
    }
    final PsiType functionalInterfaceReturnType=LambdaUtil.getFunctionalInterfaceReturnType(methodReferenceExpression);
    if (functionalInterfaceReturnType == null || ClassUtils.isPrimitive(functionalInterfaceReturnType) || !functionalInterfaceReturnType.isAssignableFrom(boxedType)) {
      return;
    }
    registerError(referenceNameElement);
  }
 else {
    checkExpression(expression);
  }
}
