{
  ProcessInfo[] infos=ProcessListLinux.parseOutput(false,"   PID S USER    COMMAND\n\n" + "     1 S user    " + myDir + "/dir/file\n"+ "     2 S user    "+ myDir+ "/dir/dir/file\n"+ "     3 S user    "+ myDir+ "/dir/dir/file param param\n"+ "     4 S user    "+ myDir+ "/dir/dir/file with\n"+ "     5 S user    "+ myDir+ "/dir/dir/file with spaces\n"+ "     6 S user    "+ myDir+ "/dir/dir/file with spaces param param\n"+ "     7 S user    "+ myDir+ "/dir/dir/file with spaces/foo\n"+ "     8 S user    "+ myDir+ "/dir/dir/file/\n"+ "     9 S user    "+ myDir+ "/dir/dir/file with spaces/\n"+ "    10 S user    "+ myDir+ "/dir/dir\n"+ "    11 S user    "+ myDir+ "/dir/dir/file/unknown\n"+ "    12 S user    "+ myDir+ "/dir/dir/unknown\n"+ "    13 S user    "+ myDir+ "/dir/dir/file_unknown\n");
  assertOrderedEquals(infos,new ProcessInfo(1,myDir + "/dir/file","","user","S"),new ProcessInfo(2,myDir + "/dir/dir/file","","user","S"),new ProcessInfo(3,myDir + "/dir/dir/file","param param","user","S"),new ProcessInfo(4,myDir + "/dir/dir/file","with","user","S"),new ProcessInfo(5,myDir + "/dir/dir/file with spaces","","user","S"),new ProcessInfo(6,myDir + "/dir/dir/file with spaces","param param","user","S"),new ProcessInfo(7,myDir + "/dir/dir/file","with spaces/foo","user","S"),new ProcessInfo(8,myDir + "/dir/dir/file/","","user","S"),new ProcessInfo(9,myDir + "/dir/dir/file with spaces/","","user","S"),new ProcessInfo(10,myDir + "/dir/dir","","user","S"));
}
