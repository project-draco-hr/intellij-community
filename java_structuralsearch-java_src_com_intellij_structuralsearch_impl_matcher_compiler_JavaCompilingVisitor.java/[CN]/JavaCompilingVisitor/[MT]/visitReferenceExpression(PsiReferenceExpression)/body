{
  visitElement(reference);
  boolean typedVarProcessed=false;
  final PsiElement referenceParent=reference.getParent();
  if ((myCompilingVisitor.getContext().getPattern().isRealTypedVar(reference)) && reference.getQualifierExpression() == null && !(referenceParent instanceof PsiExpressionStatement)) {
    MatchingHandler handler=myCompilingVisitor.getContext().getPattern().getHandler(reference);
    GlobalCompilingVisitor.setFilter(handler,ExpressionFilter.getInstance());
    typedVarProcessed=true;
  }
  if (!(referenceParent instanceof PsiMethodCallExpression)) {
    handleReference(reference);
  }
  MatchingHandler handler=myCompilingVisitor.getContext().getPattern().getHandler(reference);
  final String referencedName=reference.getReferenceName();
  if (!typedVarProcessed && !(handler instanceof SubstitutionHandler)) {
    final PsiElement resolve=reference.resolve();
    PsiElement referenceQualifier=reference.getQualifier();
    if (resolve instanceof PsiClass || (resolve == null && ((referencedName != null && Character.isUpperCase(referencedName.charAt(0))) || referenceQualifier == null))) {
      boolean hasNoNestedSubstitutionHandlers=false;
      PsiExpression qualifier;
      PsiReferenceExpression currentReference=reference;
      while ((qualifier=currentReference.getQualifierExpression()) != null) {
        if (!(qualifier instanceof PsiReferenceExpression) || myCompilingVisitor.getContext().getPattern().getHandler(qualifier) instanceof SubstitutionHandler) {
          hasNoNestedSubstitutionHandlers=true;
          break;
        }
        currentReference=(PsiReferenceExpression)qualifier;
      }
      if (!hasNoNestedSubstitutionHandlers && PsiTreeUtil.getChildOfType(reference,PsiAnnotation.class) == null) {
        createAndSetSubstitutionHandlerFromReference(reference,resolve != null ? ((PsiClass)resolve).getQualifiedName() : reference.getText(),referenceParent instanceof PsiReferenceExpression);
      }
    }
 else     if (referenceQualifier != null && reference.getParent() instanceof PsiExpressionStatement) {
    }
  }
}
