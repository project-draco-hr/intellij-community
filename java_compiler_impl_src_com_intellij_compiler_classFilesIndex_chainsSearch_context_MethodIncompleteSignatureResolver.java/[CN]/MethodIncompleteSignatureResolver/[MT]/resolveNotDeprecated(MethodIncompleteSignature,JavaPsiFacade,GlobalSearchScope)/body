{
  if (MethodIncompleteSignature.CONSTRUCTOR_METHOD_NAME.equals(signature.getName())) {
    return PsiMethod.EMPTY_ARRAY;
  }
  final PsiClass aClass=javaPsiFacade.findClass(signature.getOwner(),scope);
  if (aClass == null) {
    return PsiMethod.EMPTY_ARRAY;
  }
  final PsiMethod[] methods=aClass.findMethodsByName(signature.getName(),true);
  final List<PsiMethod> filtered=new ArrayList<PsiMethod>(methods.length);
  for (  final PsiMethod method : methods) {
    if (method.hasModifierProperty(PsiModifier.STATIC) == signature.isStatic()) {
      final PsiType returnType=method.getReturnType();
      if (returnType != null) {
        if (returnType instanceof PsiClassType) {
          final PsiClass resolved=((PsiClassType)returnType).resolve();
          if (resolved == null) {
            continue;
          }
          final String qualifiedName=resolved.getQualifiedName();
          if (qualifiedName == null) {
            continue;
          }
          if (qualifiedName.equals(signature.getReturnType())) {
            filtered.add(method);
          }
        }
 else         if (returnType.equalsToText(signature.getReturnType())) {
          filtered.add(method);
        }
      }
    }
  }
  if (filtered.size() > 1) {
    Collections.sort(filtered,new Comparator<PsiMethod>(){
      @Override public int compare(      final PsiMethod o1,      final PsiMethod o2){
        return o1.getParameterList().getParametersCount() - o2.getParameterList().getParametersCount();
      }
    }
);
  }
  return filtered.toArray(new PsiMethod[filtered.size()]);
}
