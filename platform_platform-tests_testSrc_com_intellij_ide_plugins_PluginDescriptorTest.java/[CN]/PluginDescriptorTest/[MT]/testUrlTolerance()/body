{
class SingleUrlEnumeration implements Enumeration<URL> {
    private final URL myUrl;
    private boolean hasMoreElements=true;
    public SingleUrlEnumeration(    URL url){
      myUrl=url;
    }
    @Override public boolean hasMoreElements(){
      return hasMoreElements;
    }
    @Override public URL nextElement(){
      if (!hasMoreElements)       throw new NoSuchElementException();
      hasMoreElements=false;
      return myUrl;
    }
  }
class TestLoader extends UrlClassLoader {
    private final URL myUrl;
    public TestLoader(    String prefix,    String suffix) throws MalformedURLException {
      super(build());
      myUrl=new URL(prefix + new File(getTestDataPath()).toURI().toURL().toString() + suffix+ "META-INF/plugin.xml");
    }
    @Override public URL getResource(    String name){
      return null;
    }
    @Override public Enumeration<URL> getResources(    String name) throws IOException {
      return new SingleUrlEnumeration(myUrl);
    }
  }
  ClassLoader loader1=new TestLoader("","/spaces%20spaces/");
  assertEquals(1,PluginManagerCore.testLoadDescriptorsFromClassPath(loader1).size());
  ClassLoader loader2=new TestLoader("","/spaces spaces/");
  assertEquals(1,PluginManagerCore.testLoadDescriptorsFromClassPath(loader2).size());
  ClassLoader loader3=new TestLoader("jar:","/jar%20spaces.jar!/");
  assertEquals(1,PluginManagerCore.testLoadDescriptorsFromClassPath(loader3).size());
  ClassLoader loader4=new TestLoader("jar:","/jar spaces.jar!/");
  assertEquals(1,PluginManagerCore.testLoadDescriptorsFromClassPath(loader4).size());
}
