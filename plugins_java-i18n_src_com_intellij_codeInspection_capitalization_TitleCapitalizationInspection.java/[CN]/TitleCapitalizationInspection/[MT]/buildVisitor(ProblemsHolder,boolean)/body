{
  return new JavaElementVisitor(){
    @Override public void visitMethod(    PsiMethod method){
      PsiType type=method.getReturnType();
      if (!InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_LANG_STRING))       return;
      Collection<PsiReturnStatement> statements=PsiTreeUtil.findChildrenOfType(method,PsiReturnStatement.class);
      for (      PsiReturnStatement returnStatement : statements) {
        PsiExpression expression=returnStatement.getReturnValue();
        String value=getTitleValue(expression,new HashSet<>());
        if (value == null)         continue;
        Nls.Capitalization capitalization=getCapitalizationFromAnno(method);
        checkCapitalization(expression,holder,capitalization);
      }
    }
    @Override public void visitCallExpression(    PsiCallExpression expression){
      PsiMethod psiMethod=expression.resolveMethod();
      if (psiMethod != null) {
        PsiExpressionList argumentList=expression.getArgumentList();
        if (argumentList != null) {
          PsiExpression[] args=argumentList.getExpressions();
          PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
          for (int i=0; i < Math.min(parameters.length,args.length); i++) {
            PsiParameter parameter=parameters[i];
            Nls.Capitalization capitalization=getCapitalizationFromAnno(parameter);
            checkCapitalization(args[i],holder,capitalization);
          }
        }
      }
    }
  }
;
}
