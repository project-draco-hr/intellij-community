{
  final Project project=CommonDataKeys.PROJECT.getData(e.getDataContext());
  final DebuggerContextImpl debuggerContext=getDebuggerContext(e.getDataContext());
  final DebuggerTreeNodeImpl node=getSelectedNode(e.getDataContext());
  final Presentation presentation=e.getPresentation();
  if (debuggerContext != null && debuggerContext.getDebugProcess() != null) {
    presentation.setEnabled(true);
    debuggerContext.getDebugProcess().getManagerThread().schedule(new DebuggerContextCommandImpl(debuggerContext){
      public void threadAction(){
        final SourcePosition position=getSourcePosition(node,debuggerContext);
        if (position == null) {
          DebuggerInvocationUtil.swingInvokeLater(project,new Runnable(){
            public void run(){
              presentation.setEnabled(false);
            }
          }
);
        }
      }
    }
);
  }
 else {
    presentation.setEnabled(false);
  }
  e.getPresentation().setText(ActionManager.getInstance().getAction(IdeActions.ACTION_EDIT_SOURCE).getTemplatePresentation().getText());
}
