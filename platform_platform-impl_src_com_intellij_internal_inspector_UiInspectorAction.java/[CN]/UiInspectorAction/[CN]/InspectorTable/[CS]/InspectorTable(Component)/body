{
  setLayout(new BorderLayout());
  myModel=new InspectorTableModel(component);
  StripeTable table=new StripeTable(myModel);
  new TableSpeedSearch(table);
  TableColumnModel columnModel=table.getColumnModel();
  TableColumn propertyColumn=columnModel.getColumn(0);
  propertyColumn.setMinWidth(JBUI.scale(200));
  propertyColumn.setMaxWidth(JBUI.scale(200));
  propertyColumn.setResizable(false);
  TableColumn valueColumn=columnModel.getColumn(1);
  valueColumn.setMinWidth(JBUI.scale(200));
  valueColumn.setResizable(false);
  valueColumn.setCellRenderer(new ValueCellRenderer());
  valueColumn.setCellEditor(new DefaultCellEditor(new JBTextField()){
    @Override public Component getTableCellEditorComponent(    JTable table,    Object value,    boolean isSelected,    int row,    int column){
      Component comp=table.getCellRenderer(row,column).getTableCellRendererComponent(table,value,false,false,row,column);
      if (comp instanceof JLabel) {
        value=((JLabel)comp).getText();
      }
      Component result=super.getTableCellEditorComponent(table,value,isSelected,row,column);
      ((JComponent)result).setBorder(BorderFactory.createLineBorder(JBColor.GRAY,1));
      return result;
    }
    @Override public Object getCellEditorValue(){
      return super.getCellEditorValue();
    }
  }
);
  table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  add(new JBScrollPane(table),BorderLayout.CENTER);
  myDimensionComponent=new DimensionsComponent(component);
  add(myDimensionComponent,BorderLayout.SOUTH);
}
