{
  String name=bean.propertyName.trim();
  try {
    try {
      Method getter;
      try {
        getter=myComponent.getClass().getMethod("get" + StringUtil.capitalize(name));
      }
 catch (      Exception e) {
        getter=myComponent.getClass().getMethod("is" + StringUtil.capitalize(name));
      }
      final Method finalGetter=getter;
      final Method setter=myComponent.getClass().getMethod("set" + StringUtil.capitalize(name),getter.getReturnType());
      setter.setAccessible(true);
      return new Function<Object,Object>(){
        @Override public Object fun(        Object o){
          try {
            setter.invoke(myComponent,fromObject(o,finalGetter.getReturnType()));
            return finalGetter.invoke(myComponent);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
;
    }
 catch (    Exception e) {
      final Field field=ReflectionUtil.findField(myComponent.getClass(),null,name);
      if (Modifier.isFinal(field.getModifiers()) || Modifier.isStatic(field.getModifiers())) {
        return null;
      }
      return new Function<Object,Object>(){
        @Override public Object fun(        Object o){
          try {
            field.set(myComponent,fromObject(o,field.getType()));
            return field.get(myComponent);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
;
    }
  }
 catch (  Exception ignored) {
  }
  return null;
}
