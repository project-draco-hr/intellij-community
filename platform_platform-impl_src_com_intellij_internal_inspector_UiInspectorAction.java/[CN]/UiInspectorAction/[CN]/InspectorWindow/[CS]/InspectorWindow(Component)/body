{
  super(findWindow(component));
  Window window=findWindow(component);
  setModal(window instanceof JDialog && ((JDialog)window).isModal());
  myComponent=component;
  getRootPane().setBorder(JBUI.Borders.empty(5));
  setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
  setLayout(new BorderLayout());
  setTitle(component.getClass().getName());
  DefaultActionGroup actions=new DefaultActionGroup();
  actions.addAction(new IconWithTextAction("Highlight"){
    @Override public void actionPerformed(    AnActionEvent e){
      setHighlightingEnabled(myHighlightComponent == null);
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(myComponent != null && myComponent.isVisible());
    }
  }
);
  actions.addSeparator();
  actions.add(new IconWithTextAction("Refresh"){
    @Override public void actionPerformed(    AnActionEvent e){
      getCurrentTable().refresh();
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(myComponent != null && myComponent.isVisible());
    }
  }
);
  ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.CONTEXT_TOOLBAR,actions,true);
  add(toolbar.getComponent(),BorderLayout.NORTH);
  myWrapperPanel=new JPanel(new BorderLayout());
  myInspectorTable=new InspectorTable(component);
  myHierarchyTree=new HierarchyTree(component){
    @Override public void onComponentChanged(    Component c){
      boolean wasHighlighted=myHighlightComponent != null;
      setHighlightingEnabled(false);
      switchInfo(c);
      setHighlightingEnabled(wasHighlighted);
    }
  }
;
  myWrapperPanel.add(myInspectorTable,BorderLayout.CENTER);
  JSplitPane splitPane=new JSplitPane();
  splitPane.setDividerLocation(0.5);
  splitPane.setRightComponent(myWrapperPanel);
  JScrollPane pane=new JBScrollPane(myHierarchyTree);
  splitPane.setLeftComponent(pane);
  add(splitPane,BorderLayout.CENTER);
  myHierarchyTree.expandPath();
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      close();
    }
  }
);
  getRootPane().getActionMap().put("CLOSE",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      close();
    }
  }
);
  setHighlightingEnabled(true);
  getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),"CLOSE");
}
