{
  Color foreground=selected ? UIUtil.getTreeSelectionForeground() : UIUtil.getTreeForeground();
  Color background=selected ? UIUtil.getTreeSelectionBackground() : null;
  if (value instanceof HierarchyTree.ComponentNode) {
    HierarchyTree.ComponentNode componentNode=(HierarchyTree.ComponentNode)value;
    Component component=componentNode.getOwnComponent();
    Class<?> clazz0=component.getClass();
    Class<?> clazz=clazz0.isAnonymousClass() ? clazz0.getSuperclass() : clazz0;
    String name=component.getName();
    if (!selected) {
      if (!component.isVisible()) {
        foreground=JBColor.GRAY;
      }
 else       if (component.getWidth() == 0 || component.getHeight() == 0) {
        foreground=new Color(128,10,0);
      }
 else       if (component.getPreferredSize() != null && (component.getSize().width < component.getPreferredSize().width || component.getSize().height < component.getPreferredSize().height)) {
        foreground=PlatformColors.BLUE;
      }
      if (componentNode.getToSelect() == componentNode.getOwnComponent()) {
        background=new Color(31,128,8,58);
      }
    }
    append(clazz.getSimpleName());
    if (StringUtil.isNotEmpty(name)) {
      append(" \"" + name + "\"");
    }
    append(": " + RectangleRenderer.toString(component.getBounds()),SimpleTextAttributes.GRAYED_ATTRIBUTES);
    if (component.isOpaque()) {
      append(", opaque",SimpleTextAttributes.GRAYED_ATTRIBUTES);
    }
    if (component.isDoubleBuffered()) {
      append(", double-buffered",SimpleTextAttributes.GRAYED_ATTRIBUTES);
    }
    setIcon(new TwoColorsIcon(11,component.getForeground(),component.getBackground()));
  }
  setForeground(foreground);
  setBackground(background);
  SpeedSearchUtil.applySpeedSearchHighlighting(tree,this,false,selected);
}
