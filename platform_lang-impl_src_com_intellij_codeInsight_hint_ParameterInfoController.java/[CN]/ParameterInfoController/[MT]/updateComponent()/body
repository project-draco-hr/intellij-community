{
  if (!myHint.isVisible()) {
    Disposer.dispose(this);
    return;
  }
  final PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(myEditor.getDocument());
  CharSequence chars=myEditor.getDocument().getCharsSequence();
  boolean noDelimiter=myHandler instanceof ParameterInfoHandlerWithTabActionSupport && ((ParameterInfoHandlerWithTabActionSupport)myHandler).getActualParameterDelimiterType() == TokenType.WHITE_SPACE;
  int caretOffset=myEditor.getCaretModel().getOffset();
  final int offset=noDelimiter ? caretOffset : CharArrayUtil.shiftBackward(chars,caretOffset - 1," \t") + 1;
  final UpdateParameterInfoContext context=new MyUpdateParameterInfoContext(offset,file);
  final Object elementForUpdating=myHandler.findElementForUpdatingParameterInfo(context);
  if (elementForUpdating != null) {
    myHandler.updateParameterInfo(elementForUpdating,context);
    if (!myDisposed && myHint.isVisible() && !myEditor.isDisposed()&& myEditor.getComponent().getRootPane() != null) {
      myComponent.update();
      IdeTooltip tooltip=myHint.getCurrentIdeTooltip();
      short position=tooltip != null ? toShort(tooltip.getPreferredPosition()) : HintManager.UNDER;
      Pair<Point,Short> pos=myProvider.getBestPointPosition(myHint,elementForUpdating instanceof PsiElement ? (PsiElement)elementForUpdating : null,caretOffset,true,position);
      HintManagerImpl.adjustEditorHintPosition(myHint,myEditor,pos.getFirst(),pos.getSecond());
    }
  }
 else {
    context.removeHint();
  }
}
