{
  final TreePath[] paths=getTree().getSelectionPaths();
  if (paths == null || paths.length == 0)   return 0;
  Set<DefaultMutableTreeNode> result=new HashSet<>();
  MultiMap<DefaultMutableTreeNode,DefaultMutableTreeNode> rootDependencies=new MultiMap<>();
  for (  TreePath path : paths) {
    final DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();
    final Collection<DefaultMutableTreeNode> visitedChildren=rootDependencies.get(node);
    for (    DefaultMutableTreeNode child : visitedChildren) {
      result.remove(child);
    }
    boolean needToAdd=true;
    for (int i=0; i < path.getPathCount() - 1; i++) {
      final DefaultMutableTreeNode parent=(DefaultMutableTreeNode)path.getPathComponent(i);
      rootDependencies.putValue(parent,node);
      if (result.contains(parent)) {
        needToAdd=false;
        break;
      }
    }
    if (needToAdd) {
      result.add(node);
    }
  }
  int count=0;
  for (  DefaultMutableTreeNode node : result) {
    Object userObject=node.getUserObject();
    if (userObject instanceof InspectionTreeNode) {
      count+=((InspectionTreeNode)userObject).getProblemCount();
    }
  }
  return count;
}
