{
  int prevIndex=0;
  int nextIndex=nextSeparatorIndex(line,0);
  final String hashStr=line.substring(0,nextIndex);
  prevIndex=nextIndex;
  nextIndex=nextSeparatorIndex(line,prevIndex + 1);
  final String authorName=line.substring(prevIndex + 2,nextIndex);
  prevIndex=nextIndex;
  nextIndex=nextSeparatorIndex(line,prevIndex + 1);
  String timestampStr=line.substring(prevIndex + 2,nextIndex);
  final long timestamp;
  try {
    if (timestampStr.isEmpty()) {
      timestamp=0;
    }
 else {
      timestamp=Long.parseLong(timestampStr);
    }
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException("bad timestamp format: " + timestampStr + " in this Str: "+ line);
  }
  final String commitMessage=line.substring(nextIndex + 2);
  return new VcsCommit(){
    @NotNull @Override public String getFullMessage(){
      return commitMessage;
    }
    @NotNull @Override public Hash getHash(){
      return Hash.build(hashStr);
    }
    @NotNull @Override public String getAuthorName(){
      return authorName;
    }
    @Override public long getAuthorTime(){
      return timestamp;
    }
    @NotNull @Override public List<Hash> getParents(){
      throw new UnsupportedOperationException();
    }
    @NotNull public Collection<Change> getChanges(){
      throw new UnsupportedOperationException();
    }
  }
;
}
