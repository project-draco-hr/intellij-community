{
  if (element instanceof PsiClass) {
    PsiClass aClass=(PsiClass)element;
    List<PsiClass> allSupers=new ArrayList<>(Arrays.asList(aClass.getSupers()));
    for (Iterator<PsiClass> iterator=allSupers.iterator(); iterator.hasNext(); ) {
      PsiClass superClass=iterator.next();
      if (CommonClassNames.JAVA_LANG_OBJECT.equals(superClass.getQualifiedName()))       iterator.remove();
    }
    return allSupers.toArray(new PsiClass[allSupers.size()]);
  }
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    if (method.isConstructor()) {
      PsiMethod constructorInSuper=PsiSuperMethodUtil.findConstructorInSuper(method);
      if (constructorInSuper != null) {
        return new PsiMethod[]{constructorInSuper};
      }
    }
 else {
      PsiMethod[] superMethods=method.findSuperMethods(false);
      if (superMethods.length == 0) {
        PsiMethod superMethod=getSiblingInheritedViaSubClass(method);
        if (superMethod != null) {
          superMethods=new PsiMethod[]{superMethod};
        }
      }
      return superMethods;
    }
  }
  return PsiElement.EMPTY_ARRAY;
}
