{
  PropertiesComponent.getInstance().setValue(UPDATE_EXISTING_COPYRIGHTS,String.valueOf(myUpdateExistingCopyrightsCb.isSelected()),"true");
  final Map<PsiFile,Runnable> preparations=new LinkedHashMap<PsiFile,Runnable>();
  Task.Backgroundable task=new Task.Backgroundable(project,"Prepare Copyright...",true){
    @Override public void run(    @NotNull final ProgressIndicator indicator){
      scope.accept(new PsiElementVisitor(){
        @Override public void visitFile(        final PsiFile file){
          if (indicator.isCanceled()) {
            return;
          }
          final Module module=ModuleUtilCore.findModuleForPsiElement(file);
          final UpdateCopyrightProcessor processor=new UpdateCopyrightProcessor(project,module,file);
          final Runnable runnable=processor.preprocessFile(file,myUpdateExistingCopyrightsCb.isSelected());
          if (runnable != EmptyRunnable.getInstance()) {
            preparations.put(file,runnable);
          }
        }
      }
);
    }
    @Override public void onSuccess(){
      if (!preparations.isEmpty()) {
        if (!FileModificationService.getInstance().preparePsiElementsForWrite(preparations.keySet()))         return;
        final SequentialModalProgressTask progressTask=new SequentialModalProgressTask(project,UpdateCopyrightProcessor.TITLE,true);
        progressTask.setMinIterationTime(200);
        progressTask.setTask(new UpdateCopyrightSequentialTask(preparations,progressTask));
        CommandProcessor.getInstance().executeCommand(project,new Runnable(){
          @Override public void run(){
            CommandProcessor.getInstance().markCurrentCommandAsGlobal(project);
            ProgressManager.getInstance().run(progressTask);
          }
        }
,getTemplatePresentation().getText(),null);
      }
    }
  }
;
  ProgressManager.getInstance().run(task);
}
