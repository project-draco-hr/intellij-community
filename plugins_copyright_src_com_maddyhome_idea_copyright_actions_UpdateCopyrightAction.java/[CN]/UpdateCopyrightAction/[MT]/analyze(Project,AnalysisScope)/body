{
  PropertiesComponent.getInstance().setValue(UPDATE_EXISTING_COPYRIGHTS,String.valueOf(myUpdateExistingCopyrightsCb.isSelected()));
  if (scope.checkScopeWritable(project))   return;
  final List<Runnable> preparations=new ArrayList<Runnable>();
  Task.Backgroundable task=new Task.Backgroundable(project,"Prepare Copyright...",true){
    @Override public void run(    @NotNull final ProgressIndicator indicator){
      scope.accept(new PsiElementVisitor(){
        @Override public void visitFile(        final PsiFile file){
          if (indicator.isCanceled()) {
            return;
          }
          preparations.add(new UpdateCopyrightProcessor(project,ModuleUtilCore.findModuleForPsiElement(file),file).preprocessFile(file,myUpdateExistingCopyrightsCb.isSelected()));
        }
      }
);
    }
    @Override public void onSuccess(){
      if (!preparations.isEmpty()) {
        final SequentialModalProgressTask progressTask=new SequentialModalProgressTask(project,UpdateCopyrightProcessor.TITLE,true);
        progressTask.setMinIterationTime(200);
        progressTask.setTask(new UpdateCopyrightSequentialTask(preparations,progressTask));
        CommandProcessor.getInstance().executeCommand(project,new Runnable(){
          @Override public void run(){
            CommandProcessor.getInstance().markCurrentCommandAsGlobal(project);
            ApplicationManager.getApplication().runWriteAction(new Runnable(){
              @Override public void run(){
                ProgressManager.getInstance().run(progressTask);
              }
            }
);
          }
        }
,getTemplatePresentation().getText(),null);
      }
    }
  }
;
  ProgressManager.getInstance().run(task);
}
