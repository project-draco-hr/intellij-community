{
  super(false);
  setTitle("Settings Repository");
  setResizable(false);
  messageLabel.setText(message);
  messageLabel.setBorder(new EmptyBorder(0,0,10,0));
  if (onlyPassword) {
    tokenLabel.setVisible(false);
    tokenField.setVisible(false);
    passwordField.getDocument().addDocumentListener(new DocumentAdapter(){
      @Override protected void textChanged(      DocumentEvent e){
        setOKActionEnabled(e.getDocument().getLength() != 0);
      }
    }
);
    initialFocusedComponent=passwordField;
    setOKActionEnabled(false);
  }
 else {
    tokenField.setText(token);
    passwordField.setText(password);
    initialFocusedComponent=StringUtil.isEmpty(token) ? tokenField : passwordField;
  }
  if (note == null) {
    noteComponent.setVisible(false);
  }
 else {
    Matcher matcher=HREF_PATTERN.matcher(note);
    int prev=0;
    if (matcher.find()) {
      do {
        if (matcher.start() != prev) {
          noteComponent.append(note.substring(prev,matcher.start()),SMALL_TEXT_ATTRIBUTES);
        }
        noteComponent.append(matcher.group(2),LINK_TEXT_ATTRIBUTES,new SimpleColoredComponent.BrowserLauncherTag(matcher.group(1)));
        prev=matcher.end();
      }
 while (matcher.find());
      LinkMouseListenerBase.installSingleTagOn(noteComponent);
    }
    if (prev < note.length()) {
      noteComponent.append(note.substring(prev),SMALL_TEXT_ATTRIBUTES);
    }
  }
  init();
}
