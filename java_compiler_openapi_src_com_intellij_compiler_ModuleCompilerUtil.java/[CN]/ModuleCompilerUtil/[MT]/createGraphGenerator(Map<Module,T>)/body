{
  return GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<T>(){
    public Collection<T> getNodes(){
      return models.values();
    }
    public Iterator<T> getIn(    final ModuleRootModel model){
      final List<T> dependencies=new ArrayList<T>();
      model.orderEntries().compileOnly().forEachModule(new Processor<Module>(){
        @Override public boolean process(        Module module){
          T depModel=models.get(module);
          if (depModel != null) {
            dependencies.add(depModel);
          }
          return true;
        }
      }
);
      return dependencies.iterator();
    }
  }
));
}
