{
  final List<Set<Module>> productionCycles=new ArrayList<Set<Module>>();
  for (  Chunk<ModuleSourceSet> cycle : sourceSetCycles) {
    ModuleSourceSet.Type type=getCommonType(cycle);
    if (type == ModuleSourceSet.Type.PRODUCTION) {
      productionCycles.add(ModuleSourceSet.getModules(cycle.getNodes()));
    }
  }
  return ContainerUtil.filter(sourceSetCycles,new Condition<Chunk<ModuleSourceSet>>(){
    @Override public boolean value(    Chunk<ModuleSourceSet> chunk){
      if (getCommonType(chunk) != ModuleSourceSet.Type.TEST)       return true;
      for (      Set<Module> productionCycle : productionCycles) {
        if (productionCycle.containsAll(ModuleSourceSet.getModules(chunk.getNodes())))         return false;
      }
      return true;
    }
  }
);
}
