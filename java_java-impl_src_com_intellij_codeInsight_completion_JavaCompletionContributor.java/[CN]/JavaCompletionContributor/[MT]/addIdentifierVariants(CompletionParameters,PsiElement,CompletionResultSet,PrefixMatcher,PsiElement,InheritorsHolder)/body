{
  if (TypeArgumentCompletionProvider.IN_TYPE_ARGS.accepts(position)) {
    new TypeArgumentCompletionProvider(false,inheritors).addCompletions(parameters,new ProcessingContext(),result);
  }
  result.addAllElements(FunctionalExpressionCompletionProvider.getLambdaVariants(parameters,true));
  if (JavaSmartCompletionContributor.AFTER_NEW.accepts(position)) {
    new JavaInheritorsGetter(ConstructorInsertHandler.BASIC_INSTANCE).generateVariants(parameters,matcher,inheritors);
  }
  if (MethodReturnTypeProvider.IN_METHOD_RETURN_TYPE.accepts(position)) {
    MethodReturnTypeProvider.addProbableReturnTypes(parameters,new Consumer<LookupElement>(){
      @Override public void consume(      LookupElement element){
        registerClassFromTypeElement(element,inheritors);
        result.addElement(element);
      }
    }
);
  }
  if (SmartCastProvider.shouldSuggestCast(parameters)) {
    SmartCastProvider.addCastVariants(parameters,new Consumer<LookupElement>(){
      @Override public void consume(      LookupElement element){
        registerClassFromTypeElement(element,inheritors);
        result.addElement(PrioritizedLookupElement.withPriority(element,1));
      }
    }
);
  }
  if (parent instanceof PsiReferenceExpression) {
    final List<ExpectedTypeInfo> expected=Arrays.asList(ExpectedTypesProvider.getExpectedTypes((PsiExpression)parent,true));
    CollectConversion.addCollectConversion((PsiReferenceExpression)parent,expected,JavaSmartCompletionContributor.decorateWithoutTypeCheck(result,expected));
  }
  if (IMPORT_REFERENCE.accepts(position)) {
    result.addElement(LookupElementBuilder.create("*"));
  }
  addKeywords(parameters,result);
  addExpressionVariants(parameters,position,result);
}
