{
  PsiNameValuePair pair=PsiTreeUtil.getParentOfType(insertedElement,PsiNameValuePair.class);
  PsiAnnotationParameterList parameterList=(PsiAnnotationParameterList)assertNotNull(pair).getParent();
  PsiAnnotation anno=(PsiAnnotation)parameterList.getParent();
  boolean showClasses=psiElement().afterLeaf("(").accepts(insertedElement);
  PsiClass annoClass=null;
  final PsiJavaCodeReferenceElement referenceElement=anno.getNameReferenceElement();
  if (referenceElement != null) {
    final PsiElement element=referenceElement.resolve();
    if (element instanceof PsiClass) {
      annoClass=(PsiClass)element;
      if (annoClass.findMethodsByName("value",false).length == 0) {
        showClasses=false;
      }
    }
  }
  if (showClasses && insertedElement.getParent() instanceof PsiReferenceExpression) {
    final Set<LookupElement> set=JavaCompletionUtil.processJavaReference(insertedElement,(PsiJavaReference)insertedElement.getParent(),new ElementExtractorFilter(createAnnotationFilter(insertedElement)),JavaCompletionProcessor.Options.DEFAULT_OPTIONS,result.getPrefixMatcher(),parameters);
    for (    final LookupElement element : set) {
      result.addElement(element);
    }
    addAllClasses(parameters,result,new InheritorsHolder(result));
  }
  if (annoClass != null) {
    final PsiNameValuePair[] existingPairs=parameterList.getAttributes();
    methods:     for (    PsiMethod method : annoClass.getMethods()) {
      if (!(method instanceof PsiAnnotationMethod))       continue;
      final String attrName=method.getName();
      for (      PsiNameValuePair existingAttr : existingPairs) {
        if (PsiTreeUtil.isAncestor(existingAttr,insertedElement,false))         break;
        if (Comparing.equal(existingAttr.getName(),attrName) || PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME.equals(attrName) && existingAttr.getName() == null)         continue methods;
      }
      LookupElementBuilder element=LookupElementBuilder.createWithIcon(method).withInsertHandler(new InsertHandler<LookupElement>(){
        @Override public void handleInsert(        InsertionContext context,        LookupElement item){
          final Editor editor=context.getEditor();
          TailType.EQ.processTail(editor,editor.getCaretModel().getOffset());
          context.setAddCompletionChar(false);
          context.commitDocument();
          PsiAnnotationParameterList paramList=PsiTreeUtil.findElementOfClassAtOffset(context.getFile(),context.getStartOffset(),PsiAnnotationParameterList.class,false);
          if (paramList != null && paramList.getAttributes().length > 0 && paramList.getAttributes()[0].getName() == null) {
            int valueOffset=paramList.getAttributes()[0].getTextRange().getStartOffset();
            context.getDocument().insertString(valueOffset,PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME);
            TailType.EQ.processTail(editor,valueOffset + PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME.length());
          }
        }
      }
);
      PsiAnnotationMemberValue defaultValue=((PsiAnnotationMethod)method).getDefaultValue();
      if (defaultValue != null) {
        element=element.withTailText(" default " + defaultValue.getText(),true);
      }
      result.addElement(element);
    }
  }
}
