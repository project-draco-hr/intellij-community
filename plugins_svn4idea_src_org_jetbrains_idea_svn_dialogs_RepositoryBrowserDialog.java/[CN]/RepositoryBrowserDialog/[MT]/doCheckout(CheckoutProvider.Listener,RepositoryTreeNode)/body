{
  if (selectedNode == null) {
    return;
  }
  SVNURL url=selectedNode.getURL();
  String relativePath="";
  final DirectoryEntry entry=selectedNode.getSVNDirEntry();
  if (entry != null) {
    if (entry.getRepositoryRoot() != null) {
      if (!entry.getRepositoryRoot().equals(url)) {
        relativePath=SVNPathUtil.getRelativePath(entry.getRepositoryRoot().toString(),url.toDecodedString());
      }
    }
 else {
      relativePath=entry.getRelativePath();
    }
  }
 else {
    relativePath=url.getPath();
  }
  File dir=selectFile(SvnBundle.message("svn.checkout.destination.directory.title"),SvnBundle.message("svn.checkout.destination.directory.description"));
  if (dir == null) {
    return;
  }
  Project p=myProject;
  CheckoutOptionsDialog dialog=new CheckoutOptionsDialog(p,url,dir,SvnUtil.getVirtualFile(dir.getAbsolutePath()),relativePath);
  dialog.show();
  dir=dialog.getTarget();
  if (dialog.isOK() && dir != null) {
    final SVNRevision revision;
    try {
      revision=dialog.getRevision();
    }
 catch (    ConfigurationException e) {
      Messages.showErrorDialog(SvnBundle.message("message.text.cannot.checkout",e.getMessage()),SvnBundle.message("message.title.check.out"));
      return;
    }
    SvnCheckoutProvider.doCheckout(myProject,dir,url.toString(),revision,dialog.getDepth(),dialog.isIgnoreExternals(),listener);
  }
}
