{
  final String title="Could not " + StringUtil.capitalize(operationName);
  final String description=createUntrackedFilesOverwrittenDescription(operationName,false);
  final Collection<String> absolutePaths=GitUtil.toAbsolute(root,relativePaths);
  final List<VirtualFile> untrackedFiles=ContainerUtil.mapNotNull(absolutePaths,new Function<String,VirtualFile>(){
    @Override public VirtualFile fun(    String absolutePath){
      return GitUtil.findRefreshFileOrLog(absolutePath);
    }
  }
);
  return UIUtil.invokeAndWaitIfNeeded(new Computable<Boolean>(){
    @Override public Boolean compute(){
      JComponent filesBrowser;
      if (untrackedFiles.isEmpty()) {
        filesBrowser=new GitSimplePathsBrowser(project,absolutePaths);
      }
 else {
        filesBrowser=new SelectFilesDialog.VirtualFileList(project,untrackedFiles,false,false);
      }
      DialogWrapper dialog=new UntrackedFilesRollBackDialog(project,filesBrowser,StringUtil.stripHtml(description,true),rollbackProposal);
      dialog.setTitle(title);
      DialogManager.show(dialog);
      return dialog.isOK();
    }
  }
);
}
