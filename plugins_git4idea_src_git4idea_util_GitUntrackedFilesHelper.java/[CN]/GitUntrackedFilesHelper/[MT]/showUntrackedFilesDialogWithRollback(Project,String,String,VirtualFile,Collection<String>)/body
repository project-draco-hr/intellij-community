{
  final Collection<String> absolutePaths=GitUtil.toAbsolute(root,relativePaths);
  final List<VirtualFile> untrackedFiles=ContainerUtil.mapNotNull(absolutePaths,new Function<String,VirtualFile>(){
    @Override public VirtualFile fun(    String absolutePath){
      return GitUtil.findRefreshFileOrLog(absolutePath);
    }
  }
);
  final Ref<Boolean> rollback=Ref.create();
  ApplicationManager.getApplication().invokeAndWait(new Runnable(){
    @Override public void run(){
      JComponent filesBrowser;
      if (untrackedFiles.isEmpty()) {
        filesBrowser=new GitSimplePathsBrowser(project,absolutePaths);
      }
 else {
        filesBrowser=new SelectFilesDialog.VirtualFileList(project,untrackedFiles,false,false);
      }
      String title="Could not " + StringUtil.capitalize(operationName);
      String description=StringUtil.stripHtml(createUntrackedFilesOverwrittenDescription(operationName,false),true);
      DialogWrapper dialog=new UntrackedFilesRollBackDialog(project,filesBrowser,description,rollbackProposal);
      dialog.setTitle(title);
      DialogManager.show(dialog);
      rollback.set(dialog.isOK());
    }
  }
,ModalityState.defaultModalityState());
  return rollback.get();
}
