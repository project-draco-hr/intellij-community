{
  final String notificationTitle=StringUtil.capitalize(operation) + " failed";
  final String notificationDesc=description == null ? createUntrackedFilesOverwrittenDescription(operation,true) : description;
  final Collection<String> absolutePaths=GitUtil.toAbsolute(root,relativePaths);
  final List<VirtualFile> untrackedFiles=ContainerUtil.mapNotNull(absolutePaths,new Function<String,VirtualFile>(){
    @Override public VirtualFile fun(    String absolutePath){
      return GitUtil.findRefreshFileOrLog(absolutePath);
    }
  }
);
  VcsNotifier.getInstance(project).notifyError(notificationTitle,notificationDesc,new NotificationListener(){
    @Override public void hyperlinkUpdate(    @NotNull Notification notification,    @NotNull HyperlinkEvent event){
      if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        final String dialogDesc=createUntrackedFilesOverwrittenDescription(operation,false);
        String title="Untracked Files Preventing " + StringUtil.capitalize(operation);
        if (untrackedFiles.isEmpty()) {
          GitUtil.showPathsInDialog(project,absolutePaths,title,dialogDesc);
        }
 else {
          DialogWrapper dialog;
          dialog=new UntrackedFilesDialog(project,untrackedFiles,dialogDesc);
          dialog.setTitle(title);
          dialog.show();
        }
      }
    }
  }
);
}
