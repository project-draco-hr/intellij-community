{
  final String name=type.id();
  final NamePath typedefJavaName=nameScheme.getFullName(domain.domain(),name);
  final List<TextOutput> deferredWriters=new ArrayList<>();
  final BoxableType actualJavaType=target.resolve(new StandaloneTypeBinding.Target.ResolveContext(){
    @Override public BoxableType generateNestedObject(    String shortName,    String description,    List<ProtocolMetaModel.ObjectProperty> properties){
      NamePath classNamePath=new NamePath(shortName,typedefJavaName);
      if (direction == null) {
        throw new RuntimeException("Unsupported");
      }
switch (direction) {
case INPUT:
        throw new RuntimeException("TODO");
case OUTPUT:
      TextOutput out=new TextOutput(new StringBuilder());
    generateOutputClass(out,classNamePath,description,null,null,properties);
  deferredWriters.add(out);
break;
default :
throw new RuntimeException();
}
return new StandaloneType(new NamePath(shortName,typedefJavaName),"writeMessage");
}
}
);
return new StandaloneTypeBinding(){
@Override public BoxableType getJavaType(){
return actualJavaType;
}
@Override public void generate(){
}
@Override public TypeData.Direction getDirection(){
return direction;
}
}
;
}
