{
  final String name=type.id();
  final NamePath fullTypeName=generator.getNaming().inputValue.getFullName(domain.domain(),name);
  generator.jsonProtocolParserClassNames.add(fullTypeName.getFullText());
  return new StandaloneTypeBinding(){
    @Override public BoxableType getJavaType(){
      return new StandaloneType(fullTypeName,"writeMessage");
    }
    @Override public void generate() throws IOException {
      NamePath className=generator.getNaming().inputValue.getFullName(domain.domain(),name);
      FileUpdater fileUpdater=generator.startJavaFile(generator.getNaming().inputValue,domain,name);
      TextOutput out=fileUpdater.out;
      if (type.description() != null) {
        out.doc(type.description());
      }
      out.append("@org.jetbrains.jsonProtocol.JsonType").newLine();
      out.append("public interface ").append(className.getLastComponent()).openBlock();
      InputClassScope classScope=new InputClassScope(DomainGenerator.this,className);
      classScope.generateStandaloneTypeBody(out,properties);
      classScope.writeAdditionalMembers(out);
      out.closeBlock();
      fileUpdater.update();
    }
    @Override public TypeData.Direction getDirection(){
      return TypeData.Direction.INPUT;
    }
  }
;
}
