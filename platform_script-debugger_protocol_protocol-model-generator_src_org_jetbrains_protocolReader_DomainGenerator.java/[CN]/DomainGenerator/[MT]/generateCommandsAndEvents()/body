{
  FileUpdater requestsFileUpdater=generator.startJavaFile(generator.naming.params.getPackageNameVirtual(domain.domain()),"Requests.java");
  TextOutput out=requestsFileUpdater.out;
  out.append("import org.jetbrains.annotations.NotNull;").newLine();
  out.append("import org.jetbrains.jsonProtocol.Request;").newLine();
  out.newLine().append("public final class ").append("Requests");
  out.openBlock();
  boolean isFirst=true;
  for (  ProtocolMetaModel.Command command : domain.commands()) {
    boolean hasResponse=command.returns() != null;
    boolean onlyMandatoryParams=true;
    List<ProtocolMetaModel.Parameter> params=command.parameters();
    boolean hasParams=params != null && !params.isEmpty();
    if (hasParams) {
      for (      ProtocolMetaModel.Parameter parameter : params) {
        if (parameter.optional()) {
          onlyMandatoryParams=false;
        }
      }
    }
    String returnType=hasResponse ? generator.naming.commandResult.getShortName(command.name()) : "Void";
    if (onlyMandatoryParams) {
      if (isFirst) {
        isFirst=false;
      }
 else {
        out.newLine().newLine();
      }
      out.append("@NotNull").newLine().append("public static Request<");
      out.append(returnType);
      out.append(">").space().append(fixMethodName(command.name())).append("(");
      OutputClassScope classScope=new OutputClassScope(this,generator.naming.params.getFullName(domain.domain(),command.name()));
      BoxableType[] parameterTypes=hasParams ? new BoxableType[params.size()] : null;
      if (hasParams) {
        classScope.writeMethodParameters(out,params,parameterTypes);
      }
      out.append(')').openBlock();
      if (hasParams) {
        out.append("V8SimpleRequest<").append(returnType).append(">").append(" r =");
      }
 else {
        out.append("return");
      }
      out.append(" new V8SimpleRequest<").append(returnType).append(">(\"");
      if (!domain.domain().isEmpty()) {
        out.append(domain.domain()).append('.');
      }
      out.append(command.name()).append("\")").semi();
      if (hasParams) {
        classScope.writeWriteCalls(out,params,parameterTypes,"r");
        out.newLine().append("return r").semi();
      }
      out.closeBlock();
    }
 else {
      generateRequest(command,returnType);
    }
    if (hasResponse) {
      FileUpdater fileUpdater=generator.startJavaFile(generator.naming.commandResult,domain,command.name());
      generateJsonProtocolInterface(fileUpdater.out,generator.naming.commandResult.getShortName(command.name()),command.description(),command.returns(),null);
      fileUpdater.update();
      generator.jsonProtocolParserClassNames.add(generator.naming.commandResult.getFullName(domain.domain(),command.name()).getFullText());
      generator.parserRootInterfaceItems.add(new ParserRootInterfaceItem(domain.domain(),command.name(),generator.naming.commandResult));
    }
  }
  out.closeBlock();
  requestsFileUpdater.update();
  if (domain.events() != null) {
    for (    ProtocolMetaModel.Event event : domain.events()) {
      generateEvenData(event);
      generator.jsonProtocolParserClassNames.add(generator.naming.eventData.getFullName(domain.domain(),event.name()).getFullText());
      generator.parserRootInterfaceItems.add(new ParserRootInterfaceItem(domain.domain(),event.name(),generator.naming.eventData));
    }
  }
}
