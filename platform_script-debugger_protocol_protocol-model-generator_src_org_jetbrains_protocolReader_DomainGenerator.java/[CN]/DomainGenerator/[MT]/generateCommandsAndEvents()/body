{
  for (  ProtocolMetaModel.Command command : domain.commands()) {
    boolean hasResponse=command.returns() != null;
    generateCommandParams(command,hasResponse);
    if (hasResponse) {
      String className=generator.getNaming().commandResult.getShortName(command.name());
      FileUpdater fileUpdater=generator.startJavaFile(generator.getNaming().commandResult,domain,command.name());
      generateJsonProtocolInterface(fileUpdater.out,className,command.description(),command.returns(),null);
      fileUpdater.update();
      String dataFullName=generator.getNaming().commandResult.getFullName(domain.domain(),command.name()).getFullText();
      generator.jsonProtocolParserClassNames.add(dataFullName);
      generator.parserRootInterfaceItems.add(new ParserRootInterfaceItem(domain.domain(),command.name(),generator.getNaming().commandResult));
    }
  }
  if (domain.events() != null) {
    for (    ProtocolMetaModel.Event event : domain.events()) {
      generateEvenData(event);
      generator.jsonProtocolParserClassNames.add(generator.getNaming().eventData.getFullName(domain.domain(),event.name()).getFullText());
      generator.parserRootInterfaceItems.add(new ParserRootInterfaceItem(domain.domain(),event.name(),generator.getNaming().eventData));
    }
  }
}
