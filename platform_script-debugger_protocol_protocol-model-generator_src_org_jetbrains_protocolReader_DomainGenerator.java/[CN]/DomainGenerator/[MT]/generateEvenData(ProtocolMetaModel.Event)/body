{
  String className=generator.getNaming().eventData.getShortName(event.name());
  FileUpdater fileUpdater=generator.startJavaFile(generator.getNaming().eventData,domain,event.name());
  final String domainName=domain.domain();
  final CharSequence fullName=generator.getNaming().eventData.getFullName(domainName,event.name()).getFullText();
  generateJsonProtocolInterface(fileUpdater.out,className,event.description(),event.parameters(),new TextOutConsumer(){
    @Override public void append(    TextOutput out){
      out.newLine().append("org.jetbrains.wip.protocol.WipEventType<").append(fullName).append("> TYPE").newLine();
      out.append("\t= new org.jetbrains.wip.protocol.WipEventType<").append(fullName).append(">");
      out.append("(\"").append(domainName).append('.').append(event.name()).append("\", ").append(fullName).append(".class)").openBlock();
{
        out.append("@Override").newLine().append("public ").append(fullName).append(" read(");
        out.append(generator.getNaming().inputPackage).append('.').append(Generator.READER_INTERFACE_NAME + " protocolReader, ").append(Util.JSON_READER_PARAMETER_DEF).append(")").openBlock();
        out.append("return protocolReader.").append(generator.getNaming().eventData.getParseMethodName(domainName,event.name())).append("(reader);").closeBlock();
      }
      out.closeBlock();
      out.semi();
    }
  }
);
  fileUpdater.update();
}
