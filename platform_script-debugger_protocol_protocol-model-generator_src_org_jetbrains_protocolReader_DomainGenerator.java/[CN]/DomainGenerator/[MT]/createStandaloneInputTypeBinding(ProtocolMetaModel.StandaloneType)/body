{
  return Generator.switchByType(type,new CreateStandaloneTypeBindingVisitorBase(this,type){
    @Override public StandaloneTypeBinding visitObject(    List<ProtocolMetaModel.ObjectProperty> properties){
      return createStandaloneObjectInputTypeBinding(getType(),properties);
    }
    @Override public StandaloneTypeBinding visitEnum(    List<String> enumConstants){
      return createStandaloneEnumInputTypeBinding(getType(),enumConstants,TypeData.Direction.INPUT);
    }
    @Override public StandaloneTypeBinding visitArray(    ProtocolMetaModel.ArrayItemType items){
      ResolveAndGenerateScope resolveAndGenerateScope=new ResolveAndGenerateScope(){
        @Override public String getDomainName(){
          return domain.domain();
        }
        @Override public TypeData.Direction getTypeDirection(){
          return TypeData.Direction.INPUT;
        }
        @Override public <T extends ItemDescriptor>QualifiedTypeData resolveType(        T typedObject){
          throw new UnsupportedOperationException();
        }
        @Override public BoxableType generateNestedObject(        String description,        List<ProtocolMetaModel.ObjectProperty> properties){
          throw new UnsupportedOperationException();
        }
      }
;
      QualifiedTypeData itemTypeData=generator.resolveType(items,resolveAndGenerateScope);
      BoxableType itemBoxableType=itemTypeData.getType();
      final BoxableType arrayType=new ListType(itemBoxableType);
      StandaloneTypeBinding.Target target=new StandaloneTypeBinding.Target(){
        @Override public BoxableType resolve(        ResolveContext context){
          return arrayType;
        }
      }
;
      return createTypedefTypeBinding(getType(),target,generator.getNaming().inputTypedef,TypeData.Direction.INPUT);
    }
  }
);
}
