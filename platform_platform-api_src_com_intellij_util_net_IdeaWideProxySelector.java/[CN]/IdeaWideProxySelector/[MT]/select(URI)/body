{
  LOG.debug("IDEA-wide proxy selector asked for " + uri.toString());
  String scheme=uri.getScheme();
  if (!("http".equals(scheme) || "https".equals(scheme))) {
    LOG.debug("No proxy: not http/https scheme: " + scheme);
    return CommonProxy.NO_PROXY_LIST;
  }
  if (myHttpConfigurable.USE_HTTP_PROXY) {
    if (isProxyException(uri)) {
      LOG.debug("No proxy: URI '",uri,"' matches proxy exceptions [",myHttpConfigurable.PROXY_EXCEPTIONS,"]");
      return CommonProxy.NO_PROXY_LIST;
    }
    if (myHttpConfigurable.PROXY_PORT < 0 || myHttpConfigurable.PROXY_PORT > 65535) {
      LOG.debug("No proxy: invalid port: " + myHttpConfigurable.PROXY_PORT);
      return CommonProxy.NO_PROXY_LIST;
    }
    Proxy.Type type=myHttpConfigurable.PROXY_TYPE_IS_SOCKS ? Proxy.Type.SOCKS : Proxy.Type.HTTP;
    Proxy proxy=new Proxy(type,new InetSocketAddress(myHttpConfigurable.PROXY_HOST,myHttpConfigurable.PROXY_PORT));
    LOG.debug("Defined proxy: ",proxy);
    myHttpConfigurable.LAST_ERROR=null;
    return Collections.singletonList(proxy);
  }
  if (myHttpConfigurable.USE_PROXY_PAC) {
    String pacUrlForUse=myHttpConfigurable.USE_PAC_URL && !StringUtil.isEmpty(myHttpConfigurable.PAC_URL) ? myHttpConfigurable.PAC_URL : null;
    Pair<ProxySelector,String> pair=myPacProxySelector.get();
    if (pair != null && !Comparing.equal(pair.second,pacUrlForUse)) {
      pair=null;
    }
    if (pair == null) {
      ProxySelector newProxySelector;
      if (pacUrlForUse != null) {
        newProxySelector=new PacProxySelector(new UrlPacScriptSource(pacUrlForUse));
      }
 else {
        ProxySearch proxySearch=ProxySearch.getDefaultProxySearch();
        proxySearch.setPacCacheSettings(32,10 * 60 * 1000);
        newProxySelector=proxySearch.getProxySelector();
      }
      pair=Pair.create(newProxySelector,pacUrlForUse);
      myPacProxySelector.lazySet(pair);
    }
    ProxySelector pacProxySelector=pair.first;
    if (pacProxySelector != null) {
      List<Proxy> select=pacProxySelector.select(uri);
      LOG.debug("Autodetected proxies: ",select);
      return select;
    }
 else {
      LOG.debug("No proxies detected");
    }
  }
  return CommonProxy.NO_PROXY_LIST;
}
