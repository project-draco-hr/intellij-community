{
  ClassNode root=mapRootClasses.get(cl.qualifiedName);
  if (root.type != ClassNode.CLASS_ROOT) {
    return;
  }
  try {
    DecompilerContext.setImpcollector(new ImportCollector(root));
    DecompilerContext.setCountercontainer(new CounterContainer());
    addClassnameToImport(root,DecompilerContext.getImpcollector());
    initWrappers(root);
    NestedClassProcessor nestedproc=new NestedClassProcessor();
    nestedproc.processClass(root,root);
    NestedMemberAccess nstmember=new NestedMemberAccess();
    nstmember.propagateMemberAccess(root);
    ClassWriter clwriter=new ClassWriter();
    StringWriter strwriter=new StringWriter();
    clwriter.classToJava(root,new BufferedWriter(strwriter),0);
    if (DecompilerContext.getOption(IFernflowerPreferences.OUTPUT_COPYRIGHT_COMMENT)) {
      outwriter.write("// Decompiled by:       Fernflower " + Fernflower.version);
      outwriter.newLine();
      outwriter.write("// Date:                " + new SimpleDateFormat("dd.MM.yyyy HH:mm:ss").format(new Date()));
      outwriter.newLine();
      outwriter.write("// Copyright:           2008-2010, Stiver");
      outwriter.newLine();
      outwriter.write("// Home page:           http://www.reversed-java.com");
      outwriter.newLine();
      outwriter.newLine();
    }
    int index=cl.qualifiedName.lastIndexOf("/");
    if (index >= 0) {
      String strpackage=cl.qualifiedName.substring(0,index).replaceAll("/",".");
      outwriter.write("package " + strpackage + ";");
      outwriter.newLine();
      outwriter.newLine();
    }
    DecompilerContext.setProperty(DecompilerContext.CURRENT_CLASSNODE,root);
    DecompilerContext.getImpcollector().writeImports(outwriter);
    outwriter.newLine();
    outwriter.write(strwriter.toString());
    outwriter.flush();
  }
  finally {
    destroyWrappers(root);
  }
}
