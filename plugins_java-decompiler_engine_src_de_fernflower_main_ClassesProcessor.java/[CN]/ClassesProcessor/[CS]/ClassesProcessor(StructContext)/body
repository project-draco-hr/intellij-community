{
  HashMap<String,Object[]> mapInnerClasses=new HashMap<String,Object[]>();
  HashMap<String,HashSet<String>> mapNestedClassReferences=new HashMap<String,HashSet<String>>();
  HashMap<String,HashSet<String>> mapEnclosingClassReferences=new HashMap<String,HashSet<String>>();
  HashMap<String,String> mapNewSimpleNames=new HashMap<String,String>();
  boolean bDecompileInner=DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_INNER);
  for (  StructClass cl : context.getClasses().values()) {
    if (cl.isOwn() && !mapRootClasses.containsKey(cl.qualifiedName)) {
      if (bDecompileInner) {
        StructInnerClassesAttribute inner=(StructInnerClassesAttribute)cl.getAttributes().getWithKey("InnerClasses");
        if (inner != null) {
          for (int i=0; i < inner.getClassentries().size(); i++) {
            int[] entry=inner.getClassentries().get(i);
            String[] strentry=inner.getStringentries().get(i);
            Object[] arr=new Object[4];
            String innername=strentry[0];
            arr[2]=entry[1] == 0 ? (entry[2] == 0 ? ClassNode.CLASS_ANONYMOUS : ClassNode.CLASS_LOCAL) : ClassNode.CLASS_MEMBER;
            String simpleName=strentry[2];
            String savedName=mapNewSimpleNames.get(innername);
            if (savedName != null) {
              simpleName=savedName;
            }
 else             if (simpleName != null && DecompilerContext.getOption(IFernflowerPreferences.RENAME_ENTITIES)) {
              IIdentifierRenamer renamer=DecompilerContext.getPoolInterceptor().getHelper();
              if (renamer.toBeRenamed(IIdentifierRenamer.ELEMENT_CLASS,simpleName,null,null)) {
                simpleName=renamer.getNextClassname(innername,simpleName);
                mapNewSimpleNames.put(innername,simpleName);
              }
            }
            arr[1]=simpleName;
            arr[3]=entry[3];
            String enclClassName=null;
            if (entry[1] != 0) {
              enclClassName=strentry[1];
            }
 else {
              enclClassName=cl.qualifiedName;
            }
            if (!innername.equals(enclClassName)) {
              StructClass enclosing_class=context.getClasses().get(enclClassName);
              if (enclosing_class != null && enclosing_class.isOwn()) {
                Object[] arrold=mapInnerClasses.get(innername);
                if (arrold == null) {
                  mapInnerClasses.put(innername,arr);
                }
 else {
                  if (!InterpreterUtil.equalObjectArrays(arrold,arr)) {
                    DecompilerContext.getLogger().writeMessage("Inconsistent inner class entries for " + innername + "!",IFernflowerLogger.WARNING);
                  }
                }
                HashSet<String> set=mapNestedClassReferences.get(enclClassName);
                if (set == null) {
                  mapNestedClassReferences.put(enclClassName,set=new HashSet<String>());
                }
                set.add(innername);
                set=mapEnclosingClassReferences.get(innername);
                if (set == null) {
                  mapEnclosingClassReferences.put(innername,set=new HashSet<String>());
                }
                set.add(enclClassName);
              }
            }
          }
        }
      }
      ClassNode node=new ClassNode(ClassNode.CLASS_ROOT,cl);
      node.access=cl.access_flags;
      mapRootClasses.put(cl.qualifiedName,node);
    }
  }
  if (bDecompileInner) {
    for (    Entry<String,ClassNode> ent : mapRootClasses.entrySet()) {
      if (!mapInnerClasses.containsKey(ent.getKey())) {
        HashSet<String> setVisited=new HashSet<String>();
        LinkedList<String> stack=new LinkedList<String>();
        stack.add(ent.getKey());
        setVisited.add(ent.getKey());
        while (!stack.isEmpty()) {
          String superClass=stack.removeFirst();
          ClassNode supernode=mapRootClasses.get(superClass);
          HashSet<String> setNestedClasses=mapNestedClassReferences.get(superClass);
          if (setNestedClasses != null) {
            for (            String nestedClass : setNestedClasses) {
              if (setVisited.contains(nestedClass)) {
                continue;
              }
              setVisited.add(nestedClass);
              ClassNode nestednode=mapRootClasses.get(nestedClass);
              if (nestednode == null) {
                DecompilerContext.getLogger().writeMessage("Nested class " + nestedClass + " missing!",IFernflowerLogger.WARNING);
                continue;
              }
              Object[] arr=mapInnerClasses.get(nestedClass);
              if ((Integer)arr[2] == ClassNode.CLASS_MEMBER) {
              }
              nestednode.type=(Integer)arr[2];
              nestednode.simpleName=(String)arr[1];
              nestednode.access=(Integer)arr[3];
              if (nestednode.type == ClassNode.CLASS_ANONYMOUS) {
                StructClass cl=nestednode.classStruct;
                nestednode.access&=~CodeConstants.ACC_STATIC;
                int[] interfaces=cl.getInterfaces();
                if (interfaces.length > 0) {
                  if (interfaces.length > 1) {
                    throw new RuntimeException("Inconsistent anonymous class definition: " + cl.qualifiedName);
                  }
                  nestednode.anonimousClassType=new VarType(cl.getInterface(0),true);
                }
 else {
                  nestednode.anonimousClassType=new VarType(cl.superClass.getString(),true);
                }
              }
 else               if (nestednode.type == ClassNode.CLASS_LOCAL) {
                nestednode.access&=(CodeConstants.ACC_ABSTRACT | CodeConstants.ACC_FINAL);
              }
              supernode.nested.add(nestednode);
              nestednode.parent=supernode;
              nestednode.enclosingClasses.addAll(mapEnclosingClassReferences.get(nestedClass));
              stack.add(nestedClass);
            }
          }
        }
      }
    }
  }
}
