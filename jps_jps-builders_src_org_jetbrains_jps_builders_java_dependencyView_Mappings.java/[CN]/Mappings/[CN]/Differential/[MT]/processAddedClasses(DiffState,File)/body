{
  final Collection<ClassRepr> addedClasses=state.myClassDiff.added();
  if (addedClasses.isEmpty()) {
    return;
  }
  debug("Processing added classes:");
  if (!myEasyMode && myFilter != null) {
    for (    ClassRepr c : addedClasses) {
      if (!c.isLocal() && !c.isAnonymous() && isEmpty(c.getOuterClassName())) {
        final Collection<File> currentSources=myClassToSourceFile.get(c.name);
        final File currentlyMappedTo=currentSources != null && currentSources.size() == 1 ? currentSources.iterator().next() : null;
        if (currentlyMappedTo != null && !FileUtil.filesEqual(currentlyMappedTo,srcFile) && currentlyMappedTo.exists() && myFilter.belongsToCurrentTargetChunk(currentlyMappedTo)) {
          debug("Scheduling for recompilation duplicated sources: ",currentlyMappedTo.getPath() + "; " + srcFile.getPath());
          myAffectedFiles.add(currentlyMappedTo);
          myAffectedFiles.add(srcFile);
          return;
        }
      }
    }
  }
  for (  final ClassRepr c : addedClasses) {
    debug("Class name: ",c.name);
    myDelta.addAddedClass(c);
    for (    final int sup : c.getSupers()) {
      myDelta.registerAddedSuperClass(c.name,sup);
    }
    if (!myEasyMode && !c.isAnonymous() && !c.isLocal()) {
      final TIntHashSet toAffect=new TIntHashSet();
      toAffect.add(c.name);
      final TIntHashSet classes=myShortClassNameIndex.get(myContext.get(c.getShortName()));
      if (classes != null) {
        toAffect.addAll(classes.toArray());
      }
      toAffect.forEach(new TIntProcedure(){
        public boolean execute(        int qName){
          final TIntHashSet depClasses=myClassToClassDependency.get(qName);
          if (depClasses != null) {
            affectCorrespondingSourceFiles(depClasses);
          }
          return true;
        }
      }
);
    }
  }
  debug("End of added classes processing.");
}
