{
  final Collection<ClassRepr> addedClasses=state.myClassDiff.added();
  if (addedClasses.isEmpty()) {
    return;
  }
  debug("Processing added classes:");
  if (!myEasyMode && myFilter != null) {
    for (    ClassRepr c : addedClasses) {
      if (!c.isLocal() && !c.isAnonymous() && isEmpty(c.getOuterClassName())) {
        final Set<File> candidates=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
        final Collection<File> currentlyMapped=myClassToSourceFile.get(c.name);
        if (currentlyMapped != null) {
          candidates.addAll(currentlyMapped);
        }
        candidates.removeAll(myCompiledFiles);
        final Collection<File> newSources=myDelta.myClassToSourceFile.get(c.name);
        if (newSources != null) {
          candidates.removeAll(newSources);
        }
        final Set<File> nonExistentOrOutOfScope=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
        for (        final File candidate : candidates) {
          if (!candidate.exists() || !myFilter.belongsToCurrentTargetChunk(candidate)) {
            nonExistentOrOutOfScope.add(candidate);
          }
        }
        candidates.removeAll(nonExistentOrOutOfScope);
        if (!candidates.isEmpty()) {
          candidates.clear();
          if (currentlyMapped != null) {
            candidates.addAll(currentlyMapped);
          }
          if (newSources != null) {
            candidates.addAll(newSources);
          }
          candidates.removeAll(nonExistentOrOutOfScope);
          if (myDebugS.isDebugEnabled()) {
            final StringBuilder msg=new StringBuilder();
            msg.append("Possibly duplicated classes; Scheduling for recompilation sources: ");
            for (            File file : candidates) {
              msg.append(file.getPath()).append("; ");
            }
            debug(msg.toString());
          }
          myAffectedFiles.addAll(candidates);
          return;
        }
      }
    }
  }
  for (  final ClassRepr c : addedClasses) {
    debug("Class name: ",c.name);
    myDelta.addAddedClass(c);
    for (    final int sup : c.getSupers()) {
      myDelta.registerAddedSuperClass(c.name,sup);
    }
    if (!myEasyMode && !c.isAnonymous() && !c.isLocal()) {
      final TIntHashSet toAffect=new TIntHashSet();
      toAffect.add(c.name);
      final TIntHashSet classes=myShortClassNameIndex.get(myContext.get(c.getShortName()));
      if (classes != null) {
        toAffect.addAll(classes.toArray());
      }
      toAffect.forEach(new TIntProcedure(){
        public boolean execute(        int qName){
          final TIntHashSet depClasses=myClassToClassDependency.get(qName);
          if (depClasses != null) {
            affectCorrespondingSourceFiles(depClasses);
          }
          return true;
        }
      }
);
    }
  }
  debug("End of added classes processing.");
}
