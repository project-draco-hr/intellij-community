{
  debug("Affecting subclasses of class: ",className);
  final Collection<File> allSources=myClassToSourceFile.get(className);
  if (allSources == null || allSources.isEmpty()) {
    debug("No source file detected for class ",className);
    debug("End of affectSubclasses");
    return;
  }
  for (  File fName : allSources) {
    debug("Source file name: ",fName);
    if (!alreadyCompiledFiles.contains(fName)) {
      affectedFiles.add(fName);
    }
  }
  if (usages) {
    debug("Class usages affection requested");
    final ClassRepr classRepr=reprByName(className);
    if (classRepr != null) {
      debug("Added class usage for ",classRepr.name);
      affectedUsages.add(classRepr.createUsage());
    }
  }
  final TIntHashSet depClasses=myClassToClassDependency.get(className);
  if (depClasses != null) {
    addAll(dependants,depClasses);
  }
  final TIntHashSet directSubclasses=myClassToSubclasses.get(className);
  if (directSubclasses != null) {
    if (visitedClasses == null) {
      visitedClasses=new TIntHashSet();
      visitedClasses.add(className);
    }
    final TIntHashSet _visitedClasses=visitedClasses;
    directSubclasses.forEach(new TIntProcedure(){
      @Override public boolean execute(      int subClass){
        if (_visitedClasses.add(subClass)) {
          affectSubclasses(subClass,affectedFiles,affectedUsages,dependants,usages,alreadyCompiledFiles,_visitedClasses);
        }
        return true;
      }
    }
);
  }
}
