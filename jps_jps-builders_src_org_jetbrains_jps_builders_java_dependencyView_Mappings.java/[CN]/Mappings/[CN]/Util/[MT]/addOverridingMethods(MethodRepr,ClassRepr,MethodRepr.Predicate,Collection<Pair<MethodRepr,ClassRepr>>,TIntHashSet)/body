{
  if (m.name == myInitName) {
    return;
  }
  final TIntHashSet subClasses=myClassToSubclasses.get(fromClass.name);
  if (subClasses == null) {
    return;
  }
  if (visitedClasses == null) {
    visitedClasses=new TIntHashSet();
  }
  if (!visitedClasses.add(fromClass.name)) {
    return;
  }
  final TIntHashSet _visitedClasses=visitedClasses;
  subClasses.forEach(new TIntProcedure(){
    @Override public boolean execute(    int subClassName){
      final ClassRepr r=reprByName(subClassName);
      if (r != null) {
        boolean cont=true;
        final Collection<MethodRepr> methods=r.findMethods(predicate);
        for (        MethodRepr mm : methods) {
          if (isVisibleIn(fromClass,m,r)) {
            container.add(Pair.create(mm,r));
            cont=false;
          }
        }
        if (cont) {
          addOverridingMethods(m,r,predicate,container,_visitedClasses);
        }
      }
      return true;
    }
  }
);
}
