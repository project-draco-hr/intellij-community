{
  final int className=cr.name;
  final Collection<File> currentlyMapped=myClassToSourceFile.get(className);
  if (currentlyMapped == null || currentlyMapped.isEmpty()) {
    return;
  }
  if (currentlyMapped.size() == 1) {
    if (!FileUtil.filesEqual(sourceFile,currentlyMapped.iterator().next())) {
      return;
    }
  }
 else {
    for (    File file : currentlyMapped) {
      if (!FileUtil.filesEqual(sourceFile,file) && file.exists()) {
        return;
      }
    }
  }
  for (  final int superSomething : cr.getSupers()) {
    delta.registerRemovedSuperClass(className,superSomething);
  }
  cleanupBackDependency(className,usages,dependenciesTrashBin);
  myClassToClassDependency.remove(className);
  myClassToSubclasses.remove(className);
  myClassToSourceFile.remove(className);
  if (!cr.isLocal() && !cr.isAnonymous()) {
    myShortClassNameIndex.removeFrom(myContext.get(cr.getShortName()),className);
  }
}
