{
  ProjectData projectData=rootProjectNode.getData();
  final String rootProjectPath=projectData.getLinkedExternalProjectPath();
  Map<String,Collection<TaskData>> tasksByModule=ContainerUtilRt.newHashMap();
  Set<Pair<String,String>> rootProjectTaskCandidates=ContainerUtilRt.newHashSet();
  final DomainObjectSet<? extends IdeaModule> modules=project.getModules();
  for (  IdeaModule module : modules) {
    String moduleConfigPath=GradleUtil.getConfigPath(module.getGradleProject(),rootProjectPath);
    for (    GradleTask task : module.getGradleProject().getTasks()) {
      String name=task.getName();
      if (name == null || name.trim().isEmpty()) {
        continue;
      }
      String s=name.toLowerCase();
      if (s.contains("idea")) {
        continue;
      }
      TaskData taskData=new TaskData(GradleConstants.SYSTEM_ID,name,moduleConfigPath,task.getDescription());
      Collection<TaskData> tasks=tasksByModule.get(module.getName());
      if (tasks == null) {
        tasksByModule.put(module.getName(),tasks=ContainerUtilRt.newArrayList());
      }
      tasks.add(taskData);
      rootProjectTaskCandidates.add(Pair.create(name,task.getDescription()));
    }
  }
  for (  Pair<String,String> p : rootProjectTaskCandidates) {
    rootProjectNode.createChild(ProjectKeys.TASK,new TaskData(GradleConstants.SYSTEM_ID,p.first,rootProjectPath,p.second));
  }
  Collection<DataNode<ModuleData>> moduleNodes=ExternalSystemApiUtil.findAll(rootProjectNode,ProjectKeys.MODULE);
  for (  DataNode<ModuleData> moduleNode : moduleNodes) {
    ModuleData moduleData=moduleNode.getData();
    if (rootProjectPath.equals(moduleData.getLinkedExternalProjectPath())) {
      if (!projectData.getName().equals(moduleData.getName())) {
        moduleData.setName(projectData.getName());
      }
      continue;
    }
    Collection<TaskData> tasks=tasksByModule.get(moduleData.getName());
    if (tasks != null && !tasks.isEmpty()) {
      for (      TaskData task : tasks) {
        moduleNode.createChild(ProjectKeys.TASK,task);
      }
    }
  }
}
