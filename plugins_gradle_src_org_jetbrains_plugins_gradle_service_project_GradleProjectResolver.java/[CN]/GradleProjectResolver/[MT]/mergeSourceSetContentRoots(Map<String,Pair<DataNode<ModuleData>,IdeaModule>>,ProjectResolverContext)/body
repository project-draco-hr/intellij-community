{
class Counter {
    int count;
    void increment(){
      count++;
    }
  }
  final Factory<Counter> counterFactory=new Factory<Counter>(){
    @Override public Counter create(){
      return new Counter();
    }
  }
;
  final Map<String,Counter> weightMap=ContainerUtil.newHashMap();
  for (  final Pair<DataNode<ModuleData>,IdeaModule> pair : moduleMap.values()) {
    final DataNode<ModuleData> moduleNode=pair.first;
    for (    DataNode<ContentRootData> contentRootNode : ExternalSystemApiUtil.findAll(moduleNode,ProjectKeys.CONTENT_ROOT)) {
      File file=new File(contentRootNode.getData().getRootPath());
      while (file != null) {
        ContainerUtil.getOrCreate(weightMap,file.getPath(),counterFactory).increment();
        file=file.getParentFile();
      }
    }
    for (    DataNode<GradleSourceSetData> sourceSetNode : ExternalSystemApiUtil.findAll(moduleNode,GradleSourceSetData.KEY)) {
      final Set<String> set=ContainerUtil.newHashSet();
      for (      DataNode<ContentRootData> contentRootNode : ExternalSystemApiUtil.findAll(sourceSetNode,ProjectKeys.CONTENT_ROOT)) {
        File file=new File(contentRootNode.getData().getRootPath());
        while (file != null) {
          set.add(file.getPath());
          file=file.getParentFile();
        }
      }
      for (      String path : set) {
        ContainerUtil.getOrCreate(weightMap,path,counterFactory).increment();
      }
    }
  }
  for (  final Pair<DataNode<ModuleData>,IdeaModule> pair : moduleMap.values()) {
    final DataNode<ModuleData> moduleNode=pair.first;
    final ExternalProject externalProject=resolverCtx.getExtraProject(pair.second,ExternalProject.class);
    if (externalProject == null)     continue;
    final File buildDir=externalProject.getBuildDir();
    for (    DataNode<GradleSourceSetData> sourceSetNode : ExternalSystemApiUtil.findAll(moduleNode,GradleSourceSetData.KEY)) {
      final MultiMap<String,ContentRootData> sourceSetRoots=MultiMap.create();
      for (      DataNode<ContentRootData> contentRootNode : ExternalSystemApiUtil.findAll(sourceSetNode,ProjectKeys.CONTENT_ROOT)) {
        File root=new File(contentRootNode.getData().getRootPath());
        if (FileUtil.isAncestor(buildDir,root,true))         continue;
        while (weightMap.containsKey(root.getParent()) && weightMap.get(root.getParent()).count <= 1) {
          root=root.getParentFile();
        }
        final Collection<ContentRootData> mergedContentRoots=sourceSetRoots.get(root.getPath());
        final ContentRootData mergedContentRoot;
        if (mergedContentRoots.isEmpty()) {
          mergedContentRoot=new ContentRootData(GradleConstants.SYSTEM_ID,root.getAbsolutePath());
          sourceSetRoots.putValue(mergedContentRoot.getRootPath(),mergedContentRoot);
        }
 else {
          mergedContentRoot=mergedContentRoots.iterator().next();
        }
        for (        ExternalSystemSourceType sourceType : ExternalSystemSourceType.values()) {
          for (          ContentRootData.SourceRoot sourceRoot : contentRootNode.getData().getPaths(sourceType)) {
            mergedContentRoot.storePath(sourceType,sourceRoot.getPath(),sourceRoot.getPackagePrefix());
          }
        }
        final String rootPath=mergedContentRoot.getRootPath();
        for (        String path : sourceSetRoots.keySet()) {
          if (FileUtil.isAncestor(rootPath,path,true)) {
            Collection<ContentRootData> values=sourceSetRoots.remove(path);
            if (values != null) {
              sourceSetRoots.putValues(rootPath,values);
            }
            break;
          }
 else           if (FileUtil.isAncestor(path,rootPath,true)) {
            Collection<ContentRootData> values=sourceSetRoots.remove(rootPath);
            if (values != null) {
              sourceSetRoots.putValues(path,values);
            }
            break;
          }
        }
        contentRootNode.clear(true);
      }
      for (      Map.Entry<String,Collection<ContentRootData>> entry : sourceSetRoots.entrySet()) {
        final String rootPath=entry.getKey();
        final ContentRootData ideContentRoot=new ContentRootData(GradleConstants.SYSTEM_ID,rootPath);
        for (        ContentRootData rootData : entry.getValue()) {
          for (          ExternalSystemSourceType sourceType : ExternalSystemSourceType.values()) {
            Collection<ContentRootData.SourceRoot> roots=rootData.getPaths(sourceType);
            for (            ContentRootData.SourceRoot sourceRoot : roots) {
              ideContentRoot.storePath(sourceType,sourceRoot.getPath(),sourceRoot.getPackagePrefix());
            }
          }
        }
        sourceSetNode.createChild(ProjectKeys.CONTENT_ROOT,ideContentRoot);
      }
    }
  }
}
