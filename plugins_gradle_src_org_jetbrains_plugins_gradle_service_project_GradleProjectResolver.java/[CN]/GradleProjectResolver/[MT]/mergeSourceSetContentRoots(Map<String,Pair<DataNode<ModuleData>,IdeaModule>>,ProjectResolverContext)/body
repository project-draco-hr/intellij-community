{
  final Factory<Counter> counterFactory=new Factory<Counter>(){
    @Override public Counter create(){
      return new Counter();
    }
  }
;
  final Map<String,Counter> weightMap=ContainerUtil.newHashMap();
  for (  final Pair<DataNode<ModuleData>,IdeaModule> pair : moduleMap.values()) {
    final DataNode<ModuleData> moduleNode=pair.first;
    for (    DataNode<ContentRootData> contentRootNode : ExternalSystemApiUtil.findAll(moduleNode,ProjectKeys.CONTENT_ROOT)) {
      File file=new File(contentRootNode.getData().getRootPath());
      while (file != null) {
        ContainerUtil.getOrCreate(weightMap,file.getPath(),counterFactory).increment();
        file=file.getParentFile();
      }
    }
    for (    DataNode<GradleSourceSetData> sourceSetNode : ExternalSystemApiUtil.findAll(moduleNode,GradleSourceSetData.KEY)) {
      final Set<String> set=ContainerUtil.newHashSet();
      for (      DataNode<ContentRootData> contentRootNode : ExternalSystemApiUtil.findAll(sourceSetNode,ProjectKeys.CONTENT_ROOT)) {
        File file=new File(contentRootNode.getData().getRootPath());
        while (file != null) {
          set.add(file.getPath());
          file=file.getParentFile();
        }
      }
      for (      String path : set) {
        ContainerUtil.getOrCreate(weightMap,path,counterFactory).increment();
      }
    }
  }
  for (  final Pair<DataNode<ModuleData>,IdeaModule> pair : moduleMap.values()) {
    final DataNode<ModuleData> moduleNode=pair.first;
    final ExternalProject externalProject=resolverCtx.getExtraProject(pair.second,ExternalProject.class);
    if (externalProject == null)     continue;
    if (resolverCtx.isResolveModulePerSourceSet()) {
      for (      DataNode<GradleSourceSetData> sourceSetNode : ExternalSystemApiUtil.findAll(moduleNode,GradleSourceSetData.KEY)) {
        mergeModuleContentRoots(weightMap,externalProject,sourceSetNode);
      }
    }
 else {
      mergeModuleContentRoots(weightMap,externalProject,moduleNode);
    }
  }
}
