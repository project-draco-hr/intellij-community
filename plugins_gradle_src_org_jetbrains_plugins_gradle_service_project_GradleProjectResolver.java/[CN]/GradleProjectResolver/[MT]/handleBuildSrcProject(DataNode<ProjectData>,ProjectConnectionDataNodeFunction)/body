{
  if (projectConnectionDataNodeFunction.myIsPreviewMode || !new File(projectConnectionDataNodeFunction.myProjectPath).isDirectory()) {
    return;
  }
  final DataNode<ModuleData> buildSrcModuleDataNode=ExternalSystemApiUtil.find(resultProjectDataNode,ProjectKeys.MODULE,new BooleanFunction<DataNode<ModuleData>>(){
    @Override public boolean fun(    DataNode<ModuleData> node){
      return projectConnectionDataNodeFunction.myProjectPath.equals(node.getData().getLinkedExternalProjectPath());
    }
  }
);
  if (buildSrcModuleDataNode != null)   return;
  final DataNode<ProjectData> buildSrcProjectDataDataNode=myHelper.execute(projectConnectionDataNodeFunction.myProjectPath,projectConnectionDataNodeFunction.mySettings,projectConnectionDataNodeFunction);
  if (buildSrcProjectDataDataNode != null) {
    final DataNode<ModuleData> moduleDataNode=ExternalSystemApiUtil.find(buildSrcProjectDataDataNode,ProjectKeys.MODULE,new BooleanFunction<DataNode<ModuleData>>(){
      @Override public boolean fun(      DataNode<ModuleData> node){
        return projectConnectionDataNodeFunction.myProjectPath.equals(node.getData().getLinkedExternalProjectPath());
      }
    }
);
    if (moduleDataNode != null) {
      for (      DataNode<LibraryData> libraryDataNode : ExternalSystemApiUtil.findAll(buildSrcProjectDataDataNode,ProjectKeys.LIBRARY)) {
        resultProjectDataNode.createChild(libraryDataNode.getKey(),libraryDataNode.getData());
      }
      final DataNode<ModuleData> newModuleDataNode=resultProjectDataNode.createChild(ProjectKeys.MODULE,moduleDataNode.getData());
      for (      DataNode node : moduleDataNode.getChildren()) {
        if (!ProjectKeys.MODULE.equals(node.getKey()) && !ProjectKeys.MODULE_DEPENDENCY.equals(node.getKey()))         newModuleDataNode.createChild(node.getKey(),node.getData());
      }
    }
  }
}
