{
  if (settings != null) {
    List<Pair<String,Class<?>>> extensionClasses=settings.getResolverExtensions();
    if (myCachedExtensions == null || !myCachedExtensions.first.equals(extensionClasses)) {
      List<Pair<String,Class<?>>> pairs=ContainerUtilRt.newArrayList(extensionClasses);
      List<GradleProjectResolverExtension> extensions=ContainerUtilRt.newArrayList();
      for (      Pair<String,Class<?>> p : pairs) {
        try {
          final GradleProjectResolverExtension extension;
          if (p.second != null) {
            extension=ExternalSystemApiUtil.reloadIfNecessary((Class<GradleProjectResolverExtension>)p.second);
          }
 else           if (p.first != null) {
            extension=(GradleProjectResolverExtension)Class.forName(p.first).newInstance();
          }
 else {
            continue;
          }
          extensions.add(extension);
        }
 catch (        Throwable e) {
          throw new IllegalArgumentException(String.format("Can't instantiate project resolve extension for class '%s'",p.first),e);
        }
      }
      myCachedExtensions=Pair.create(pairs,extensions);
    }
    for (    GradleProjectResolverExtension extension : myCachedExtensions.second) {
      DataNode<ProjectData> result=extension.resolveProjectInfo(id,projectPath,downloadLibraries,settings,listener);
      if (result != null) {
        return result;
      }
    }
  }
  return myHelper.execute(projectPath,settings,new Function<ProjectConnection,DataNode<ProjectData>>(){
    @Override public DataNode<ProjectData> fun(    ProjectConnection connection){
      return doResolveProjectInfo(id,projectPath,settings,connection,listener,downloadLibraries);
    }
  }
);
}
