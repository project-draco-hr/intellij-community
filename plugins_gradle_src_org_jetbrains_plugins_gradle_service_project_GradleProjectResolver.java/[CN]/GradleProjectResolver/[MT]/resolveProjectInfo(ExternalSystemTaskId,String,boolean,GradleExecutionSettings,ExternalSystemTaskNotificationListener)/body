{
  final GradleProjectResolverExtension projectResolverChain;
  if (settings != null) {
    myHelper.ensureInstalledWrapper(id,projectPath,settings,listener);
    List<ClassHolder<? extends GradleProjectResolverExtension>> extensionClasses=settings.getResolverExtensions();
    Deque<GradleProjectResolverExtension> extensions=new ArrayDeque<GradleProjectResolverExtension>();
    for (    ClassHolder<? extends GradleProjectResolverExtension> holder : extensionClasses) {
      final GradleProjectResolverExtension extension;
      try {
        extension=holder.getTargetClass().newInstance();
      }
 catch (      Throwable e) {
        throw new IllegalArgumentException(String.format("Can't instantiate project resolve extension for class '%s'",holder.getTargetClassName()),e);
      }
      final GradleProjectResolverExtension previous=extensions.peekLast();
      if (previous != null) {
        previous.setNext(extension);
      }
      extensions.add(extension);
    }
    projectResolverChain=extensions.peekFirst();
  }
 else {
    projectResolverChain=new BaseGradleProjectResolverExtension();
  }
  final DataNode<ProjectData> resultProjectDataNode=myHelper.execute(projectPath,settings,new ProjectConnectionDataNodeFunction(id,projectPath,settings,listener,isPreviewMode,projectResolverChain,false));
  final String buildSrcProjectPath=projectPath + "/buildSrc";
  handleBuildSrcProject(resultProjectDataNode,new ProjectConnectionDataNodeFunction(id,buildSrcProjectPath,settings,listener,isPreviewMode,projectResolverChain,true));
  return resultProjectDataNode;
}
