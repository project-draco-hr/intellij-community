{
  if (isPreviewMode) {
    String projectName=new File(projectPath).getName();
    ProjectData projectData=new ProjectData(GradleConstants.SYSTEM_ID,projectName,projectPath,projectPath);
    DataNode<ProjectData> projectDataNode=new DataNode<>(ProjectKeys.PROJECT,projectData,null);
    final String ideProjectPath=settings == null ? null : settings.getIdeProjectPath();
    final String mainModuleFileDirectoryPath=ideProjectPath == null ? projectPath : ideProjectPath + "/.idea/modules/";
    projectDataNode.createChild(ProjectKeys.MODULE,new ModuleData(projectName,GradleConstants.SYSTEM_ID,StdModuleTypes.JAVA.getId(),projectName,mainModuleFileDirectoryPath,projectPath)).createChild(ProjectKeys.CONTENT_ROOT,new ContentRootData(GradleConstants.SYSTEM_ID,projectPath));
    return projectDataNode;
  }
  if (settings != null) {
    myHelper.ensureInstalledWrapper(id,projectPath,settings,listener);
  }
  final GradleProjectResolverExtension projectResolverChain=createProjectResolverChain(settings);
  DefaultProjectResolverContext resolverContext=new DefaultProjectResolverContext(id,projectPath,settings,listener,false);
  final DataNode<ProjectData> resultProjectDataNode=myHelper.execute(projectPath,settings,new ProjectConnectionDataNodeFunction(resolverContext,projectResolverChain,false));
  final String buildSrcProjectPath=projectPath + "/buildSrc";
  DefaultProjectResolverContext buildSrcResolverCtx=new DefaultProjectResolverContext(id,buildSrcProjectPath,settings,listener,false);
  resolverContext.copyUserDataTo(buildSrcResolverCtx);
  handleBuildSrcProject(resultProjectDataNode,new ProjectConnectionDataNodeFunction(buildSrcResolverCtx,projectResolverChain,true));
  return resultProjectDataNode;
}
