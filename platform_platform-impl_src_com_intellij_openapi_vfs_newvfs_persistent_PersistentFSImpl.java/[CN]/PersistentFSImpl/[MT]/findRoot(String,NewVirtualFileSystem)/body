{
  if (path.isEmpty()) {
    LOG.error("Invalid root, fs=" + fs);
    return null;
  }
  String rootUrl=normalizeRootUrl(path,fs);
  VirtualFileSystemEntry root=myRoots.get(rootUrl);
  if (root != null)   return root;
  String rootName, rootPath;
  if (fs instanceof ArchiveFileSystem) {
    ArchiveFileSystem afs=(ArchiveFileSystem)fs;
    VirtualFile localFile=afs.findLocalByRootPath(path);
    if (localFile == null)     return null;
    rootName=localFile.getName();
    rootPath=afs.getRootPathByLocal(localFile);
  }
 else {
    rootName=rootPath=path;
  }
  FileAttributes attributes=fs.getAttributes(new StubVirtualFile(){
    @NotNull @Override public String getPath(){
      return rootPath;
    }
    @Nullable @Override public VirtualFile getParent(){
      return null;
    }
  }
);
  if (attributes == null || !attributes.isDirectory()) {
    return null;
  }
  int rootId=FSRecords.findRootRecord(rootUrl);
  VfsData.Segment segment=VfsData.getSegment(rootId,true);
  VfsData.DirectoryData directoryData=new VfsData.DirectoryData();
  VirtualFileSystemEntry newRoot=new FsRoot(rootId,segment,directoryData,fs,rootName,StringUtil.trimEnd(rootPath,'/'));
  boolean mark;
synchronized (myRoots) {
    root=myRoots.get(rootUrl);
    if (root != null)     return root;
    try {
      VfsData.initFile(rootId,segment,-1,directoryData);
    }
 catch (    VfsData.FileAlreadyCreatedException e) {
      for (      Map.Entry<String,VirtualFileSystemEntry> entry : myRoots.entrySet()) {
        final VirtualFileSystemEntry existingRoot=entry.getValue();
        if (Math.abs(existingRoot.getId()) == rootId) {
          throw new RuntimeException("Duplicate FS roots: " + rootUrl + " and "+ entry.getKey()+ ", id="+ rootId+ ", valid="+ existingRoot.isValid(),e);
        }
      }
      throw new RuntimeException("No root duplication, roots=" + Arrays.toString(FSRecords.listAll(1)),e);
    }
    incStructuralModificationCount();
    mark=writeAttributesToRecord(rootId,0,newRoot,fs,attributes);
    myRoots.put(rootUrl,newRoot);
    myRootsById.put(rootId,newRoot);
    myIdToDirCache.put(rootId,newRoot);
  }
  if (!mark && attributes.lastModified != FSRecords.getTimestamp(rootId)) {
    newRoot.markDirtyRecursively();
  }
  LOG.assertTrue(rootId == newRoot.getId(),"root=" + newRoot + " expected="+ rootId+ " actual="+ newRoot.getId());
  return newRoot;
}
