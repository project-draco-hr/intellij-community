{
  if (basePath.isEmpty()) {
    LOG.error("Invalid root, fs=" + fs);
    return null;
  }
  String rootUrl=normalizeRootUrl(basePath,fs);
  VirtualFileSystemEntry root;
  myRootsLock.readLock().lock();
  try {
    root=myRoots.get(rootUrl);
    if (root != null)     return root;
  }
  finally {
    myRootsLock.readLock().unlock();
  }
  myRootsLock.writeLock().lock();
  try {
    root=myRoots.get(rootUrl);
    if (root != null)     return root;
    int rootId=FSRecords.findRootRecord(rootUrl);
    if (fs instanceof JarFileSystem) {
      String parentPath=basePath.substring(0,basePath.indexOf(JarFileSystem.JAR_SEPARATOR));
      VirtualFile parentLocalFile=LocalFileSystem.getInstance().findFileByPath(parentPath);
      if (parentLocalFile == null)       return null;
      root=myRoots.get(rootUrl);
      if (root != null)       return root;
      root=new JarRoot(fs,rootId,parentLocalFile);
    }
 else {
      root=new FsRoot(fs,rootId,basePath);
    }
    FileAttributes attributes=fs.getAttributes(root);
    if (attributes == null || !attributes.isDirectory()) {
      return null;
    }
    boolean newRoot=writeAttributesToRecord(rootId,0,root,fs,attributes);
    if (!newRoot && attributes.lastModified != FSRecords.getTimestamp(rootId)) {
      root.markDirtyRecursively();
    }
    myRoots.put(rootUrl,root);
    myRootsById.put(rootId,root);
    LOG.assertTrue(rootId == root.getId(),"root=" + root + " expected="+ rootId+ " actual="+ root.getId());
    return root;
  }
  finally {
    myRootsLock.writeLock().unlock();
  }
}
