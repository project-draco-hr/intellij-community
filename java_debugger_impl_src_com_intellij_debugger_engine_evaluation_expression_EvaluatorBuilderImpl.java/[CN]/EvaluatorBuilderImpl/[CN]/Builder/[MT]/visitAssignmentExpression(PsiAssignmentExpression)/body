{
  final PsiExpression rExpression=expression.getRExpression();
  if (rExpression == null) {
    throwEvaluateException(DebuggerBundle.message("evaluation.error.invalid.expression",expression.getText()));
    return;
  }
  rExpression.accept(this);
  Evaluator rEvaluator=myResult;
  final PsiExpression lExpression=expression.getLExpression();
  final PsiType lType=lExpression.getType();
  if (lType == null) {
    throwEvaluateException(DebuggerBundle.message("evaluation.error.unknown.expression.type",lExpression.getText()));
  }
  IElementType assignmentType=expression.getOperationTokenType();
  PsiType rType=rExpression.getType();
  if (!TypeConversionUtil.areTypesAssignmentCompatible(lType,rExpression) && rType != null) {
    throwEvaluateException(DebuggerBundle.message("evaluation.error.incompatible.types",expression.getOperationSign().getText()));
  }
  lExpression.accept(this);
  Evaluator lEvaluator=myResult;
  rEvaluator=handleAssignmentBoxingAndPrimitiveTypeConversions(lType,rType,rEvaluator);
  if (assignmentType != JavaTokenType.EQ) {
    IElementType opType=TypeConversionUtil.convertEQtoOperation(assignmentType);
    final PsiType typeForBinOp=TypeConversionUtil.calcTypeForBinaryExpression(lType,rType,opType,true);
    if (typeForBinOp == null || rType == null) {
      throwEvaluateException(DebuggerBundle.message("evaluation.error.unknown.expression.type",expression.getText()));
    }
    rEvaluator=createBinaryEvaluator(lEvaluator,lType,rEvaluator,rType,opType,typeForBinOp);
  }
  myResult=new AssignmentEvaluator(lEvaluator,rEvaluator);
}
