{
  PsiExpression operandExpr=expression.getOperand();
  if (operandExpr == null) {
    throwExpressionInvalid(expression);
  }
  operandExpr.accept(this);
  Evaluator operandEvaluator=myResult;
  PsiTypeElement castTypeElem=expression.getCastType();
  if (castTypeElem == null) {
    throwExpressionInvalid(expression);
  }
  PsiType castType=castTypeElem.getType();
  PsiType operandType=operandExpr.getType();
  if (operandType != null && !TypeConversionUtil.areTypesConvertible(operandType,castType) && PsiUtil.resolveClassInType(operandType) != null) {
    throw new EvaluateRuntimeException(new EvaluateException(JavaErrorMessages.message("inconvertible.type.cast",JavaHighlightUtil.formatType(operandType),JavaHighlightUtil.formatType(castType))));
  }
  boolean shouldPerformBoxingConversion=operandType != null && TypeConversionUtil.boxingConversionApplicable(castType,operandType);
  final boolean castingToPrimitive=castType instanceof PsiPrimitiveType;
  if (shouldPerformBoxingConversion && castingToPrimitive) {
    operandEvaluator=new UnBoxingEvaluator(operandEvaluator);
  }
  final boolean performCastToWrapperClass=shouldPerformBoxingConversion && !castingToPrimitive;
  if (!(PsiUtil.resolveClassInClassTypeOnly(castType) instanceof PsiTypeParameter)) {
    String castTypeName=castType.getCanonicalText();
    if (performCastToWrapperClass) {
      final PsiPrimitiveType unboxedType=PsiPrimitiveType.getUnboxedType(castType);
      if (unboxedType != null) {
        castTypeName=unboxedType.getCanonicalText();
      }
    }
    myResult=new TypeCastEvaluator(operandEvaluator,castTypeName,castingToPrimitive);
  }
  if (performCastToWrapperClass) {
    myResult=new BoxingEvaluator(myResult);
  }
}
