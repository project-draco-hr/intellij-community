{
  if (LOG.isDebugEnabled()) {
    LOG.debug("visitReferenceExpression " + expression);
  }
  PsiExpression qualifier=expression.getQualifierExpression();
  JavaResolveResult resolveResult=expression.advancedResolve(true);
  PsiElement element=resolveResult.getElement();
  if (element instanceof PsiLocalVariable || element instanceof PsiParameter) {
    final Value labeledValue=element.getUserData(CodeFragmentFactoryContextWrapper.LABEL_VARIABLE_VALUE_KEY);
    if (labeledValue != null) {
      myResult=new IdentityEvaluator(labeledValue);
      return;
    }
    final PsiFile containingFile=element.getContainingFile();
    if (containingFile instanceof PsiCodeFragment && myCurrentFragmentEvaluator != null && myVisitedFragments.contains(containingFile)) {
      myResult=new SyntheticVariableEvaluator(myCurrentFragmentEvaluator,((PsiVariable)element).getName());
      return;
    }
    final PsiVariable psiVar=(PsiVariable)element;
    final String localName=psiVar.getName();
    PsiClass variableClass=getContainingClass(psiVar);
    if (getContextPsiClass() == null || getContextPsiClass().equals(variableClass)) {
      PsiElement method=DebuggerUtilsEx.getContainingMethod(expression);
      boolean canScanFrames=method instanceof PsiLambdaExpression || ContextUtil.isJspImplicit(element);
      myResult=new LocalVariableEvaluator(localName,canScanFrames);
      return;
    }
    int iterationCount=0;
    PsiClass aClass=getOuterClass(getContextPsiClass());
    while (aClass != null && !aClass.equals(variableClass)) {
      iterationCount++;
      aClass=getOuterClass(aClass);
    }
    if (aClass != null) {
      PsiExpression initializer=psiVar.getInitializer();
      if (initializer != null) {
        Object value=JavaPsiFacade.getInstance(psiVar.getProject()).getConstantEvaluationHelper().computeConstantExpression(initializer);
        if (value != null) {
          PsiType type=resolveResult.getSubstitutor().substitute(psiVar.getType());
          myResult=new LiteralEvaluator(value,type.getCanonicalText());
          return;
        }
      }
      Evaluator objectEvaluator=new ThisEvaluator(iterationCount);
      final PsiClass classAt=myPosition != null ? JVMNameUtil.getClassAt(myPosition) : null;
      FieldEvaluator.TargetClassFilter filter=FieldEvaluator.createClassFilter(classAt != null ? classAt : getContextPsiClass());
      myResult=createFallbackEvaluator(new FieldEvaluator(objectEvaluator,filter,"val$" + localName),new LocalVariableEvaluator(localName,true));
      return;
    }
    throwEvaluateException(DebuggerBundle.message("evaluation.error.local.variable.missing.from.class.closure",localName));
  }
 else   if (element instanceof PsiField) {
    final PsiField psiField=(PsiField)element;
    final PsiClass fieldClass=psiField.getContainingClass();
    if (fieldClass == null) {
      throwEvaluateException(DebuggerBundle.message("evaluation.error.cannot.resolve.field.class",psiField.getName()));
      return;
    }
    Evaluator objectEvaluator;
    if (psiField.hasModifierProperty(PsiModifier.STATIC)) {
      JVMName className=JVMNameUtil.getContextClassJVMQualifiedName(SourcePosition.createFromElement(psiField));
      if (className == null) {
        className=JVMNameUtil.getJVMQualifiedName(fieldClass);
      }
      objectEvaluator=new TypeEvaluator(className);
    }
 else     if (qualifier != null) {
      qualifier.accept(this);
      objectEvaluator=myResult;
    }
 else     if (fieldClass.equals(getContextPsiClass()) || (getContextPsiClass() != null && getContextPsiClass().isInheritor(fieldClass,true))) {
      objectEvaluator=new ThisEvaluator();
    }
 else {
      int iterationCount=0;
      PsiClass aClass=getContextPsiClass();
      while (aClass != null && !(aClass.equals(fieldClass) || aClass.isInheritor(fieldClass,true))) {
        iterationCount++;
        aClass=getOuterClass(aClass);
      }
      if (aClass == null) {
        throwEvaluateException(DebuggerBundle.message("evaluation.error.cannot.sources.for.field.class",psiField.getName()));
      }
      objectEvaluator=new ThisEvaluator(iterationCount);
    }
    myResult=new FieldEvaluator(objectEvaluator,FieldEvaluator.createClassFilter(fieldClass),psiField.getName());
  }
 else {
    PsiElement nameElement=expression.getReferenceNameElement();
    String name;
    if (nameElement instanceof PsiIdentifier) {
      name=nameElement.getText();
    }
 else {
      final String elementDisplayString=nameElement != null ? nameElement.getText() : "(null)";
      throwEvaluateException(DebuggerBundle.message("evaluation.error.identifier.expected",elementDisplayString));
      return;
    }
    if (qualifier != null) {
      final PsiElement qualifierTarget=qualifier instanceof PsiReferenceExpression ? ((PsiReferenceExpression)qualifier).resolve() : null;
      if (qualifierTarget instanceof PsiClass) {
        PsiClass psiClass=(PsiClass)qualifierTarget;
        final JVMName typeName=JVMNameUtil.getJVMQualifiedName(psiClass);
        myResult=new FieldEvaluator(new TypeEvaluator(typeName),FieldEvaluator.createClassFilter(psiClass),name);
      }
 else {
        qualifier.accept(this);
        if (myResult == null) {
          throwEvaluateException(DebuggerBundle.message("evaluation.error.cannot.evaluate.qualifier",qualifier.getText()));
        }
        myResult=new FieldEvaluator(myResult,FieldEvaluator.createClassFilter(qualifier.getType()),name);
      }
    }
 else {
      myResult=new LocalVariableEvaluator(name,false);
    }
  }
}
