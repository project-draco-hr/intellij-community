{
  PsiType expressionPsiType=expression.getType();
  if (expressionPsiType instanceof PsiArrayType) {
    Evaluator dimensionEvaluator=null;
    PsiExpression[] dimensions=expression.getArrayDimensions();
    if (dimensions.length == 1) {
      PsiExpression dimensionExpression=dimensions[0];
      dimensionExpression.accept(this);
      if (myResult != null) {
        dimensionEvaluator=handleUnaryNumericPromotion(dimensionExpression.getType(),myResult);
      }
 else {
        throwEvaluateException(DebuggerBundle.message("evaluation.error.invalid.array.dimension.expression",dimensionExpression.getText()));
      }
    }
 else     if (dimensions.length > 1) {
      throwEvaluateException(DebuggerBundle.message("evaluation.error.multi.dimensional.arrays.creation.not.supported"));
    }
    Evaluator initializerEvaluator=null;
    PsiArrayInitializerExpression arrayInitializer=expression.getArrayInitializer();
    if (arrayInitializer != null) {
      if (dimensionEvaluator != null) {
        throwExpressionInvalid(expression);
      }
      arrayInitializer.accept(this);
      if (myResult != null) {
        initializerEvaluator=handleUnaryNumericPromotion(arrayInitializer.getType(),myResult);
      }
 else {
        throwExpressionInvalid(arrayInitializer);
      }
    }
    if (dimensionEvaluator == null && initializerEvaluator == null) {
      throwExpressionInvalid(expression);
    }
    myResult=new NewArrayInstanceEvaluator(new TypeEvaluator(JVMNameUtil.getJVMQualifiedName(expressionPsiType)),dimensionEvaluator,initializerEvaluator);
  }
 else   if (expressionPsiType instanceof PsiClassType) {
    PsiClass aClass=((PsiClassType)expressionPsiType).resolve();
    if (aClass instanceof PsiAnonymousClass) {
      throw new EvaluateRuntimeException(new UnsupportedExpressionException(DebuggerBundle.message("evaluation.error.anonymous.class.evaluation.not.supported")));
    }
    PsiExpressionList argumentList=expression.getArgumentList();
    if (argumentList == null) {
      throwExpressionInvalid(expression);
    }
    final PsiExpression[] argExpressions=argumentList.getExpressions();
    final JavaResolveResult constructorResolveResult=expression.resolveMethodGenerics();
    final PsiMethod constructor=(PsiMethod)constructorResolveResult.getElement();
    if (constructor == null && argExpressions.length > 0) {
      throw new EvaluateRuntimeException(new EvaluateException(DebuggerBundle.message("evaluation.error.cannot.resolve.constructor",expression.getText()),null));
    }
    Evaluator[] argumentEvaluators=new Evaluator[argExpressions.length];
    for (int idx=0; idx < argExpressions.length; idx++) {
      PsiExpression argExpression=argExpressions[idx];
      argExpression.accept(this);
      if (myResult != null) {
        argumentEvaluators[idx]=new DisableGC(myResult);
      }
 else {
        throwExpressionInvalid(argExpression);
      }
    }
    if (constructor != null) {
      processBoxingConversions(constructor.getParameterList().getParameters(),argExpressions,constructorResolveResult.getSubstitutor(),argumentEvaluators);
    }
    if (aClass != null && aClass.getContainingClass() != null && !aClass.hasModifierProperty(PsiModifier.STATIC)) {
      argumentEvaluators=addThisEvaluator(argumentEvaluators,aClass.getContainingClass());
    }
    JVMName signature=JVMNameUtil.getJVMConstructorSignature(constructor,aClass);
    myResult=new NewClassInstanceEvaluator(new TypeEvaluator(JVMNameUtil.getJVMQualifiedName(expressionPsiType)),signature,argumentEvaluators);
  }
 else {
    if (expressionPsiType != null) {
      throwEvaluateException("Unsupported expression type: " + expressionPsiType.getPresentableText());
    }
 else {
      throwEvaluateException("Unknown type for expression: " + expression.getText());
    }
  }
}
