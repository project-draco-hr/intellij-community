{
  super(new MavenGenerateProvider<MavenDomDependency>(MavenDomBundle.message("generate.dependency"),MavenDomDependency.class){
    @Nullable @Override protected MavenDomDependency doGenerate(    @NotNull final MavenDomProjectModel mavenModel,    final Editor editor){
      Project project=mavenModel.getManager().getProject();
      final List<MavenId> ids=MavenArtifactSearchDialog.searchForArtifact(project);
      if (ids.isEmpty())       return null;
      PsiDocumentManager.getInstance(project).commitAllDocuments();
      XmlFile psiFile=DomUtil.getFile(mavenModel);
      return new WriteCommandAction<MavenDomDependency>(psiFile.getProject(),"Generate Dependency",psiFile){
        @Override protected void run(        Result<MavenDomDependency> result) throws Throwable {
          MavenDomDependencies deps;
          MavenDomDependencyManagement dependencyManagement=mavenModel.getDependencyManagement();
          XmlElement managetDependencyXml=dependencyManagement.getXmlElement();
          if (managetDependencyXml != null && managetDependencyXml.getTextRange().contains(editor.getCaretModel().getOffset())) {
            deps=dependencyManagement.getDependencies();
          }
 else {
            deps=mavenModel.getDependencies();
          }
          for (          MavenId each : ids) {
            result.setResult(MavenDomUtil.createDomDependency(deps,editor,each));
          }
        }
      }
.execute().getResultObject();
    }
  }
,AllIcons.Nodes.PpLib);
}
