{
  VarType leftType=left.getExprType();
  VarType rightType=right.getExprType();
  boolean fieldInClassInit=false, hiddenField=false;
  if (left.type == Exprent.EXPRENT_FIELD) {
    FieldExprent field=(FieldExprent)left;
    ClassNode node=((ClassNode)DecompilerContext.getProperty(DecompilerContext.CURRENT_CLASS_NODE));
    if (node != null) {
      StructField fd=node.classStruct.getField(field.getName(),field.getDescriptor().descriptorString);
      if (fd != null) {
        if (field.isStatic() && fd.hasModifier(CodeConstants.ACC_FINAL)) {
          fieldInClassInit=true;
        }
        if (node.wrapper.getHiddenMembers().contains(InterpreterUtil.makeUniqueKey(fd.getName(),fd.getDescriptor()))) {
          hiddenField=true;
        }
      }
    }
  }
  if (hiddenField) {
    return new TextBuffer();
  }
  TextBuffer buffer=new TextBuffer();
  if (fieldInClassInit) {
    buffer.append(((FieldExprent)left).getName());
  }
 else {
    buffer.append(left.toJava(indent,tracer));
  }
  TextBuffer res=right.toJava(indent,tracer);
  if (condtype == CONDITION_NONE && !leftType.isSuperset(rightType) && (rightType.equals(VarType.VARTYPE_OBJECT) || leftType.type != CodeConstants.TYPE_OBJECT)) {
    if (right.getPrecedence() >= FunctionExprent.getPrecedence(FunctionExprent.FUNCTION_CAST)) {
      res.enclose("(",")");
    }
    res.prepend("(" + ExprProcessor.getCastTypeName(leftType) + ")");
  }
  buffer.append(condtype == CONDITION_NONE ? " = " : funceq[condtype]).append(res);
  tracer.addMapping(bytecode);
  return buffer;
}
