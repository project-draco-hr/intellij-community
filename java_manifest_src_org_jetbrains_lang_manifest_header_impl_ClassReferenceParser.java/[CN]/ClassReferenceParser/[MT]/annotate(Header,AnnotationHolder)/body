{
  HeaderValue value=header.getHeaderValue();
  if (!(value instanceof HeaderValuePart))   return false;
  HeaderValuePart valuePart=(HeaderValuePart)value;
  String className=valuePart.getUnwrappedText();
  if (StringUtil.isEmptyOrSpaces(className)) {
    holder.createErrorAnnotation(valuePart.getHighlightingRange(),ManifestBundle.message("header.reference.invalid"));
    return true;
  }
  Project project=header.getProject();
  Module module=ModuleUtilCore.findModuleForPsiElement(header);
  GlobalSearchScope scope=module != null ? module.getModuleWithDependenciesAndLibrariesScope(false) : ProjectScope.getAllScope(project);
  PsiClass aClass=JavaPsiFacade.getInstance(project).findClass(className,scope);
  if (aClass == null) {
    String message=JavaErrorMessages.message("error.cannot.resolve.class",className);
    Annotation anno=holder.createErrorAnnotation(valuePart.getHighlightingRange(),message);
    anno.setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
    return true;
  }
  return checkClass(valuePart,aClass,holder);
}
