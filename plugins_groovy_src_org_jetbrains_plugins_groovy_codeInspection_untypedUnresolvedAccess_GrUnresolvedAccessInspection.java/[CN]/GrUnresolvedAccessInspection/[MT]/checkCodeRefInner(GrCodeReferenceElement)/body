{
  if (PsiTreeUtil.getParentOfType(refElement,GroovyDocPsiElement.class) != null)   return null;
  PsiElement nameElement=refElement.getReferenceNameElement();
  if (nameElement == null)   return null;
  if (isResolvedStaticImport(refElement))   return null;
  GroovyResolveResult resolveResult=refElement.advancedResolve();
  final PsiElement resolved=resolveResult.getElement();
  if (!(refElement.getParent() instanceof GrPackageDefinition) && resolved == null) {
    String message=GroovyBundle.message("cannot.resolve",refElement.getReferenceName());
    HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(nameElement).descriptionAndTooltip(message).create();
    HighlightDisplayKey displayKey=HighlightDisplayKey.find(SHORT_NAME);
    registerCreateClassByTypeFix(refElement,info,displayKey);
    registerAddImportFixes(refElement,info,displayKey);
    UnresolvedReferenceQuickFixProvider.registerReferenceFixes(refElement,new QuickFixActionRegistrarAdapter(info,displayKey));
    OrderEntryFix.registerFixes(new QuickFixActionRegistrarAdapter(info,displayKey),refElement);
    return info;
  }
  if (refElement.getParent() instanceof GrNewExpression) {
    boolean inStaticContext=isInStaticContext(refElement);
    if (!inStaticContext && GroovySuppressableInspectionTool.isElementToolSuppressedIn(refElement,SHORT_NAME))     return null;
    if (!inStaticContext) {
      GrUnresolvedAccessInspection inspection=getInstance(refElement.getContainingFile(),refElement.getProject());
      if (inspection == null)       return null;
      if (!inspection.myHighlightInnerClasses)       return null;
    }
    GrNewExpression newExpression=(GrNewExpression)refElement.getParent();
    if (resolved instanceof PsiClass) {
      PsiClass clazz=(PsiClass)resolved;
      if (newExpression.getQualifier() == null) {
        final PsiClass outerClass=clazz.getContainingClass();
        if (com.intellij.psi.util.PsiUtil.isInnerClass(clazz) && outerClass != null && !PsiUtil.hasEnclosingInstanceInScope(outerClass,newExpression,true)) {
          String qname=clazz.getQualifiedName();
          LOG.assertTrue(qname != null,clazz.getText());
          return createAnnotationForRef(refElement,inStaticContext,GroovyBundle.message("cannot.reference.non.static",qname));
        }
      }
    }
  }
  return null;
}
