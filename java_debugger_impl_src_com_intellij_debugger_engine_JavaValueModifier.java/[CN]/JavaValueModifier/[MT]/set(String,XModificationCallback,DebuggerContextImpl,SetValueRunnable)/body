{
  final ProgressWindowWithNotification progressWindow=new ProgressWindowWithNotification(true,debuggerContext.getProject());
  final EvaluationContextImpl evaluationContext=myJavaValue.getEvaluationContext();
  SuspendContextCommandImpl askSetAction=new DebuggerContextCommandImpl(debuggerContext){
    public Priority getPriority(){
      return Priority.HIGH;
    }
    public void threadAction(){
      ExpressionEvaluator evaluator;
      try {
        final Project project=evaluationContext.getProject();
        evaluator=DebuggerInvocationUtil.commitAndRunReadAction(project,new EvaluatingComputable<ExpressionEvaluator>(){
          public ExpressionEvaluator compute() throws EvaluateException {
            return EvaluatorBuilderImpl.build(new TextWithImportsImpl(CodeFragmentKind.EXPRESSION,expression),ContextUtil.getContextElement(evaluationContext),ContextUtil.getSourcePosition(evaluationContext),project);
          }
        }
);
        setValue(expression,evaluator,evaluationContext,new SetValueRunnable(){
          public void setValue(          EvaluationContextImpl evaluationContext,          Value newValue) throws ClassNotLoadedException, InvalidTypeException, EvaluateException, IncompatibleThreadStateException {
            if (!progressWindow.isCanceled()) {
              setValueRunnable.setValue(evaluationContext,newValue);
            }
          }
          public ReferenceType loadClass(          EvaluationContextImpl evaluationContext,          String className) throws InvocationException, ClassNotLoadedException, EvaluateException, IncompatibleThreadStateException, InvalidTypeException {
            return setValueRunnable.loadClass(evaluationContext,className);
          }
        }
);
        callback.valueModified();
      }
 catch (      EvaluateException e) {
        callback.errorOccurred(e.getMessage());
      }
    }
  }
;
  progressWindow.setTitle(DebuggerBundle.message("title.evaluating"));
  evaluationContext.getDebugProcess().getManagerThread().startProgress(askSetAction,progressWindow);
}
