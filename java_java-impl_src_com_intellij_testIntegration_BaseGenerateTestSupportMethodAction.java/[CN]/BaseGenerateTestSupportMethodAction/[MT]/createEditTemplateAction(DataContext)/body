{
  final Project project=CommonDataKeys.PROJECT.getData(dataContext);
  final Editor editor=CommonDataKeys.EDITOR.getData(dataContext);
  final PsiFile file=LangDataKeys.PSI_FILE.getData(dataContext);
  final PsiClass targetClass=editor == null || file == null ? null : getTargetClass(editor,file);
  if (targetClass != null) {
    final List<TestFramework> frameworks=TestIntegrationUtils.findSuitableFrameworks(targetClass);
    final TestIntegrationUtils.MethodKind methodKind=((MyHandler)getHandler()).myMethodKind;
    if (!frameworks.isEmpty()) {
      return new AnAction("Edit Template"){
        @Override public void actionPerformed(        AnActionEvent e){
          chooseAndPerform(editor,frameworks,new Consumer<TestFramework>(){
            @Override public void consume(            TestFramework framework){
              final FileTemplateDescriptor descriptor=methodKind.getFileTemplateDescriptor(framework);
              if (descriptor != null) {
                final String fileName=descriptor.getFileName();
                AllFileTemplatesConfigurable.editCodeTemplate(FileUtil.getNameWithoutExtension(fileName),project);
              }
 else {
                HintManager.getInstance().showErrorHint(editor,"No template found for " + framework.getName() + ":"+ BaseGenerateTestSupportMethodAction.this.getTemplatePresentation().getText());
              }
            }
          }
);
        }
      }
;
    }
  }
  return null;
}
