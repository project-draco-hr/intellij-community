{
  if (myNonInitializedFields.contains(element)) {
    return true;
  }
  if (element instanceof PsiPackage && !isQualifiedContext()) {
    if (myScope instanceof PsiClass) {
      return true;
    }
    if (((PsiPackage)element).getQualifiedName().contains(".") && PsiTreeUtil.getParentOfType(myElement,PsiImportStatementBase.class) != null) {
      return true;
    }
  }
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    if (PsiTypesUtil.isGetClass(method) && PsiUtil.isLanguageLevel5OrHigher(myElement)) {
      PsiType patchedType=PsiTypesUtil.createJavaLangClassType(myElement,myQualifierType,false);
      if (patchedType != null) {
        element=new LightMethodBuilder(element.getManager(),method.getName()).addModifier(PsiModifier.PUBLIC).setMethodReturnType(patchedType).setContainingClass(method.getContainingClass());
      }
    }
  }
  if (satisfies(element,state) && isAccessible(element)) {
    CompletionElement element1=new CompletionElement(element,state.get(PsiSubstitutor.KEY));
    if (myResultNames.add(element1.getUniqueId())) {
      StaticProblem sp=myElement.getParent() instanceof PsiMethodReferenceExpression ? StaticProblem.none : getStaticProblem(element);
      if (sp != StaticProblem.instanceAfterStatic) {
        (sp == StaticProblem.staticAfterInstance ? myFilteredResults : myResults).add(element1);
      }
    }
  }
 else   if (element instanceof PsiLocalVariable || element instanceof PsiParameter) {
    myResultNames.add(CompletionElement.getVariableUniqueId((PsiVariable)element));
  }
  return true;
}
