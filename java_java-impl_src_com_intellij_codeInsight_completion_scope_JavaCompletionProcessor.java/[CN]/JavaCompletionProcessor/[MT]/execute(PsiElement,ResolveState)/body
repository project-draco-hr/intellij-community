{
  if (myNonInitializedFields.contains(element)) {
    return true;
  }
  if (element instanceof PsiPackage && !isQualifiedContext()) {
    if (myScope instanceof PsiClass) {
      return true;
    }
    if (((PsiPackage)element).getQualifiedName().contains(".") && PsiTreeUtil.getParentOfType(myElement,PsiImportStatementBase.class) != null) {
      return true;
    }
  }
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    if (PsiTypesUtil.isGetClass(method) && PsiUtil.isLanguageLevel5OrHigher(myElement)) {
      PsiType patchedType=PsiTypesUtil.createJavaLangClassType(myElement,myQualifierType,false);
      if (patchedType != null) {
        element=new LightMethodBuilder(element.getManager(),method.getName()).addModifier(PsiModifier.PUBLIC).setMethodReturnType(patchedType).setContainingClass(method.getContainingClass());
      }
    }
  }
  if (element instanceof PsiVariable) {
    String name=((PsiVariable)element).getName();
    if (myShadowedNames.contains(name))     return true;
    if (element instanceof PsiLocalVariable || element instanceof PsiParameter) {
      myShadowedNames.add(name);
    }
  }
  if (!satisfies(element,state) || !isAccessible(element))   return true;
  StaticProblem sp=myElement.getParent() instanceof PsiMethodReferenceExpression ? StaticProblem.none : getStaticProblem(element);
  if (sp == StaticProblem.instanceAfterStatic)   return true;
  CompletionElement completion=new CompletionElement(element,state.get(PsiSubstitutor.KEY));
  CompletionElement prev=myResults.get(completion);
  if (prev == null || completion.isMoreSpecificThan(prev)) {
    myResults.put(completion,completion);
    if (sp == StaticProblem.staticAfterInstance) {
      mySecondRateResults.add(completion);
    }
  }
  return true;
}
