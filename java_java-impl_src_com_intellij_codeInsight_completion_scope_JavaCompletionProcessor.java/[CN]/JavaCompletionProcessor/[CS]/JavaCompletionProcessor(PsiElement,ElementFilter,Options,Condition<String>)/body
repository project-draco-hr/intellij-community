{
  myOptions=options;
  myElement=element;
  myMatcher=nameCondition;
  myFilter=filter;
  PsiElement scope=element;
  myInJavaDoc=JavaResolveUtil.isInJavaDoc(myElement);
  if (myInJavaDoc)   myMembersFlag=true;
  while (scope != null && !(scope instanceof PsiFile) && !(scope instanceof PsiClass)) {
    scope=scope.getContext();
  }
  myScope=scope;
  PsiElement elementParent=element.getContext();
  if (elementParent instanceof PsiReferenceExpression) {
    PsiExpression qualifier=((PsiReferenceExpression)elementParent).getQualifierExpression();
    if (qualifier instanceof PsiSuperExpression) {
      final PsiJavaCodeReferenceElement qSuper=((PsiSuperExpression)qualifier).getQualifier();
      if (qSuper == null) {
        myQualifierClass=JavaResolveUtil.getContextClass(myElement);
      }
 else {
        final PsiElement target=qSuper.resolve();
        myQualifierClass=target instanceof PsiClass ? (PsiClass)target : null;
      }
    }
 else     if (qualifier != null) {
      myQualified=true;
      setQualifierType(qualifier.getType());
      if (myQualifierType == null && qualifier instanceof PsiJavaCodeReferenceElement) {
        final PsiElement target=((PsiJavaCodeReferenceElement)qualifier).resolve();
        if (target instanceof PsiClass) {
          myQualifierClass=(PsiClass)target;
        }
      }
    }
 else {
      myQualifierClass=JavaResolveUtil.getContextClass(myElement);
    }
  }
  if (myQualifierClass != null && myQualifierType == null) {
    myQualifierType=JavaPsiFacade.getElementFactory(element.getProject()).createType(myQualifierClass);
  }
  if (myOptions.checkInitialized) {
    myNonInitializedFields.addAll(getNonInitializedFields(element));
  }
  myAllowStaticWithInstanceQualifier=!options.filterStaticAfterInstance || SuppressManager.getInstance().isSuppressedFor(element,AccessStaticViaInstanceBase.ACCESS_STATIC_VIA_INSTANCE);
}
