{
  ChooseByNamePopup oldPopup=project == null ? null : project.getUserData(ChooseByNamePopup.CHOOSE_BY_NAME_POPUP_IN_PROJECT_KEY);
  if (oldPopup != null) {
    oldPopup.close(false);
  }
  final Disposable disposable=Disposer.newDisposable();
  final ChooseByNamePopup popup=new ChooseByNamePopup(project,model,new GotoActionItemProvider(model),oldPopup,initialText,false,initialIndex){
    @Override protected void filterInEDT(    Set<Object> elements){
      for (Iterator<Object> iterator=elements.iterator(); iterator.hasNext(); ) {
        Object o=iterator.next();
        if (o instanceof GotoActionModel.MatchedValue) {
          Comparable value=((GotoActionModel.MatchedValue)o).value;
          if (value instanceof GotoActionModel.ActionWrapper) {
            GotoActionModel.ActionWrapper wrapper=(GotoActionModel.ActionWrapper)value;
            if (!wrapper.getPresentation().isEnabled() || !wrapper.getPresentation().isVisible())             iterator.remove();
          }
        }
      }
    }
    @Override protected void initUI(    Callback callback,    ModalityState modalityState,    boolean allowMultipleSelection){
      super.initUI(callback,modalityState,allowMultipleSelection);
      myList.addListSelectionListener(new ListSelectionListener(){
        @Override public void valueChanged(        ListSelectionEvent e){
          Object value=myList.getSelectedValue();
          String text=getText(value);
          if (text != null && myDropdownPopup != null) {
            myDropdownPopup.setAdText(text,SwingConstants.LEFT);
          }
          String description=getValueDescription(value);
          ActionMenu.showDescriptionInStatusBar(true,myList,description);
        }
        @Nullable private String getText(        @Nullable Object o){
          if (o instanceof GotoActionModel.MatchedValue) {
            GotoActionModel.MatchedValue mv=(GotoActionModel.MatchedValue)o;
            if (mv.value instanceof BooleanOptionDescription || mv.value instanceof GotoActionModel.ActionWrapper && ((GotoActionModel.ActionWrapper)mv.value).getAction() instanceof ToggleAction) {
              return "Press " + KeymapUtil.getKeystrokeText(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0)) + " to toggle option";
            }
          }
          return getAdText();
        }
      }
);
      myList.addMouseMotionListener(new MouseMotionAdapter(){
        @Override public void mouseMoved(        MouseEvent e){
          int index=myList.locationToIndex(e.getPoint());
          if (index == -1)           return;
          Object value=myList.getModel().getElementAt(index);
          String description=getValueDescription(value);
          ActionMenu.showDescriptionInStatusBar(true,myList,description);
        }
      }
);
    }
    @Nullable private String getValueDescription(    @Nullable Object value){
      if (value instanceof GotoActionModel.MatchedValue) {
        GotoActionModel.MatchedValue mv=(GotoActionModel.MatchedValue)value;
        if (mv.value instanceof GotoActionModel.ActionWrapper) {
          AnAction action=((GotoActionModel.ActionWrapper)mv.value).getAction();
          return action.getTemplatePresentation().getDescription();
        }
      }
      return null;
    }
    @NotNull @Override protected Set<Object> filter(    @NotNull Set<Object> elements){
      return super.filter(model.sortItems(elements));
    }
    @Override protected boolean closeForbidden(    boolean ok){
      if (!ok)       return false;
      Object element=getChosenElement();
      return element instanceof GotoActionModel.MatchedValue && processOptionInplace(((GotoActionModel.MatchedValue)element).value,this,component,e) || super.closeForbidden(true);
    }
    @Override public void setDisposed(    boolean disposedFlag){
      super.setDisposed(disposedFlag);
      Disposer.dispose(disposable);
      ActionMenu.showDescriptionInStatusBar(true,myList,null);
      for (      ListSelectionListener listener : myList.getListSelectionListeners()) {
        myList.removeListSelectionListener(listener);
      }
      UIUtil.dispose(myList);
    }
  }
;
  ApplicationManager.getApplication().getMessageBus().connect(disposable).subscribe(ProgressWindow.TOPIC,new ProgressWindow.Listener(){
    @Override public void progressWindowCreated(    ProgressWindow pw){
      Disposer.register(pw,new Disposable(){
        @Override public void dispose(){
          if (!popup.checkDisposed()) {
            popup.repaintList();
          }
        }
      }
);
    }
  }
);
  if (project != null) {
    project.putUserData(ChooseByNamePopup.CHOOSE_BY_NAME_POPUP_IN_PROJECT_KEY,popup);
  }
  popup.addMouseClickListener(new MouseAdapter(){
    @Override public void mouseClicked(    @NotNull MouseEvent me){
      Object element=popup.getSelectionByPoint(me.getPoint());
      if (element instanceof GotoActionModel.MatchedValue) {
        if (processOptionInplace(((GotoActionModel.MatchedValue)element).value,popup,component,e)) {
          me.consume();
        }
      }
    }
  }
);
  CustomShortcutSet shortcutSet=new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_SHOW_INTENTION_ACTIONS));
  new DumbAwareAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      Object o=popup.getChosenElement();
      if (o instanceof GotoActionModel.MatchedValue) {
        Comparable value=((GotoActionModel.MatchedValue)o).value;
        if (value instanceof GotoActionModel.ActionWrapper) {
          GotoActionModel.ActionWrapper aw=(GotoActionModel.ActionWrapper)value;
          boolean available=aw.isAvailable();
          if (available) {
            AnAction action=aw.getAction();
            String id=ActionManager.getInstance().getId(action);
            KeymapManagerImpl km=((KeymapManagerImpl)KeymapManager.getInstance());
            Keymap k=km.getActiveKeymap();
            if (!k.canModify())             return;
            KeymapPanel.addKeyboardShortcut(id,ActionShortcutRestrictions.getInstance().getForActionId(id),k,component);
            popup.repaintListImmediate();
          }
        }
      }
    }
  }
.registerCustomShortcutSet(shortcutSet,popup.getTextField(),disposable);
  return popup;
}
