{
  final List<String> errorList=new SmartList<String>();
  final String homePath=mySdk.getHomePath();
  final String skeletonsPath=getSkeletonsPath();
  final File skeletonsDir=new File(skeletonsPath);
  if (!skeletonsDir.exists()) {
    skeletonsDir.mkdirs();
  }
  final String readablePath=FileUtil.getLocationRelativeToUserHome(homePath);
  mySkeletonsGenerator.prepare();
  myBlacklist=loadBlacklist();
  indicate(PyBundle.message("sdk.gen.querying.$0",readablePath));
  final String extraSysPath=calculateExtraSysPath(mySdk,getSkeletonsPath());
  final PySkeletonGenerator.ListBinariesResult binaries=mySkeletonsGenerator.listBinaries(mySdk,extraSysPath);
  myGeneratorVersion=binaries.generatorVersion;
  myPregeneratedSkeletons=findPregeneratedSkeletons();
  indicate(PyBundle.message("sdk.gen.reading.versions.file"));
  if (cachedChecker != null) {
    myVersionChecker=cachedChecker.withDefaultVersionIfUnknown(myGeneratorVersion);
  }
 else {
    myVersionChecker=new SkeletonVersionChecker(myGeneratorVersion);
  }
  final String builtinsFileName=PythonSdkType.getBuiltinsFileName(mySdk);
  final File builtinsFile=new File(skeletonsPath,builtinsFileName);
  final SkeletonHeader oldHeader=readSkeletonHeader(builtinsFile);
  final boolean oldOrNonExisting=oldHeader == null || oldHeader.getVersion() == 0;
  if (myPregeneratedSkeletons != null && oldOrNonExisting) {
    unpackPreGeneratedSkeletons();
  }
  if (oldOrNonExisting) {
    copyBaseSdkSkeletonsToVirtualEnv(skeletonsPath,binaries);
  }
  final boolean builtinsUpdated=updateSkeletonsForBuiltins(readablePath,builtinsFile);
  if (!binaries.modules.isEmpty()) {
    indicate(PyBundle.message("sdk.gen.updating.$0",readablePath));
    final List<UpdateResult> updateErrors=updateOrCreateSkeletons(binaries.modules);
    if (updateErrors.size() > 0) {
      indicateMinor(BLACKLIST_FILE_NAME);
      for (      UpdateResult error : updateErrors) {
        if (error.isFresh())         errorList.add(error.getName());
        myBlacklist.put(error.getPath(),new Pair<Integer,Long>(myGeneratorVersion,error.getTimestamp()));
      }
      storeBlacklist(skeletonsDir,myBlacklist);
    }
 else {
      removeBlacklist(skeletonsDir);
    }
  }
  indicate(PyBundle.message("sdk.gen.reloading"));
  mySkeletonsGenerator.refreshGeneratedSkeletons();
  if (!oldOrNonExisting) {
    indicate(PyBundle.message("sdk.gen.cleaning.$0",readablePath));
    cleanUpSkeletons(skeletonsDir);
  }
  if (PySdkUtil.isRemote(mySdk)) {
    try {
      PyPackageManager.getInstance(mySdk).getPackages(false);
    }
 catch (    ExecutionException e) {
    }
  }
  if ((builtinsUpdated || PySdkUtil.isRemote(mySdk)) && myProject != null) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        DaemonCodeAnalyzer.getInstance(myProject).restart();
      }
    }
,myProject.getDisposed());
  }
  return errorList;
}
