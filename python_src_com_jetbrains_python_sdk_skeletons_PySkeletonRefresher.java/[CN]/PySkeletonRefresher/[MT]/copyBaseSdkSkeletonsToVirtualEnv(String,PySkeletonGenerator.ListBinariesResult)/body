{
  final Sdk base=PythonSdkType.getInstance().getVirtualEnvBaseSdk(mySdk);
  if (base != null) {
    indicate("Copying base SDK skeletons for virtualenv...");
    final String baseSkeletonsPath=PythonSdkType.getSkeletonsPath(PathManager.getSystemPath(),base.getHomePath());
    final PySkeletonGenerator.ListBinariesResult baseBinaries=mySkeletonsGenerator.listBinaries(base,calculateExtraSysPath(base,baseSkeletonsPath));
    for (    Map.Entry<String,PyBinaryItem> entry : binaries.modules.entrySet()) {
      final String module=entry.getKey();
      final PyBinaryItem binary=entry.getValue();
      final PyBinaryItem baseBinary=baseBinaries.modules.get(module);
      final File fromFile=getSkeleton(module,baseSkeletonsPath);
      if (baseBinaries.modules.containsKey(module) && fromFile.exists() && binary.length() == baseBinary.length()) {
        final File toFile=fromFile.isDirectory() ? getPackageSkeleton(module,skeletonsPath) : getModuleSkeleton(module,skeletonsPath);
        try {
          FileUtil.copy(fromFile,toFile);
        }
 catch (        IOException e) {
          LOG.info("Error copying base virtualenv SDK skeleton for " + module,e);
        }
      }
    }
  }
}
