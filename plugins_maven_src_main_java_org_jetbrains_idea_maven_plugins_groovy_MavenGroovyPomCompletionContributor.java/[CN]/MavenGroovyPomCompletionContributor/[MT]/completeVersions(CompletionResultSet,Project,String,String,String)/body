{
  if (StringUtil.isEmptyOrSpaces(artifactId))   return;
  CompletionResultSet newResultSet=completionResultSet.withRelevanceSorter(CompletionService.getCompletionService().emptySorter().weigh(new LookupElementWeigher("mavenVersionWeigher"){
    @Nullable @Override public Comparable weigh(    @NotNull LookupElement element){
      return new NegatingComparable(new MavenVersionComparable(StringUtil.trimStart(element.getLookupString(),prefix)));
    }
  }
));
  MavenProjectIndicesManager indicesManager=MavenProjectIndicesManager.getInstance(project);
  Set<String> versions;
  if (StringUtil.isEmptyOrSpaces(groupId)) {
    versions=Collections.emptySet();
  }
 else {
    versions=indicesManager.getVersions(groupId,artifactId);
  }
  for (  String version : versions) {
    newResultSet.addElement(LookupElementBuilder.create(prefix + version));
  }
  newResultSet.addElement(LookupElementBuilder.create(prefix + RepositoryUtils.ReleaseVersionId));
  newResultSet.addElement(LookupElementBuilder.create(prefix + RepositoryUtils.LatestVersionId));
}
