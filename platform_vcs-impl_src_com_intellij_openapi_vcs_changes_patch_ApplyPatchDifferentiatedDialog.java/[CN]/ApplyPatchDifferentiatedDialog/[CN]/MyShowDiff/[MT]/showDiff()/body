{
  if (ChangeListManager.getInstance(myProject).isFreezedWithNotification(null))   return;
  if (myPatches.isEmpty() || (!myContainBasedChanges))   return;
  final List<AbstractFilePatchInProgress.PatchChange> changes=getAllChanges();
  Collections.sort(changes,myMyChangeComparator);
  List<AbstractFilePatchInProgress.PatchChange> selectedChanges=myChangesTreeList.getSelectedChanges();
  int selectedIdx=0;
  final ArrayList<DiffRequestPresentable> diffRequestPresentableList=new ArrayList<DiffRequestPresentable>(changes.size());
  if (selectedChanges.isEmpty()) {
    selectedChanges=changes;
  }
  if (!selectedChanges.isEmpty()) {
    final AbstractFilePatchInProgress.PatchChange c=selectedChanges.get(0);
    for (    AbstractFilePatchInProgress.PatchChange change : changes) {
      final AbstractFilePatchInProgress patchInProgress=change.getPatchInProgress();
      if (!patchInProgress.baseExistsOrAdded())       continue;
      DiffRequestPresentable diffRequestPresentable=patchInProgress.getDiffRequestPresentable(myProject,myReader);
      if (diffRequestPresentable != null) {
        diffRequestPresentableList.add(diffRequestPresentable);
      }
      if (change.equals(c)) {
        selectedIdx=diffRequestPresentableList.size() - 1;
      }
    }
  }
  if (diffRequestPresentableList.isEmpty())   return;
  ShowDiffAction.showDiffImpl(myProject,diffRequestPresentableList,selectedIdx,new ShowDiffUIContext(false));
}
