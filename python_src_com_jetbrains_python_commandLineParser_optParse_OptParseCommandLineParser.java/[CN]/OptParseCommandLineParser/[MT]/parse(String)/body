{
  final Deque<WordWithPosition> parts=new ArrayDeque<WordWithPosition>(WordWithPosition.splitText(commandLineText));
  if (parts.isEmpty()) {
    throw new MalformedCommandLineException("No command provided");
  }
  final WordWithPosition command=parts.pop();
  final List<CommandLinePart> optionsAndArguments=new ArrayList<CommandLinePart>();
  for (  final WordWithPosition part : parts) {
    final Pair<String,String> optionTextAndName=findOptionTextAndName(part.getText());
    if (optionTextAndName != null) {
      final String optionText=optionTextAndName.first;
      final String optionName=optionTextAndName.second;
      final WordWithPosition option=new WordWithPosition(optionText,part.getFrom(),part.getFrom() + optionText.length());
      final WordWithPosition optionArgument;
      if (optionText.length() == part.getText().length()) {
        optionArgument=null;
      }
 else {
        final String argumentText=part.getText().substring(optionText.length());
        optionArgument=new WordWithPosition(argumentText,option.getTo(),part.getTo());
      }
      optionsAndArguments.add(new CommandLineOption(option,optionName,optionArgument));
      if (optionArgument != null) {
        optionsAndArguments.add(new CommandLineArgument(optionArgument));
      }
    }
 else {
      optionsAndArguments.add(new CommandLineArgument(part));
    }
  }
  return new CommandLine(command,optionsAndArguments);
}
