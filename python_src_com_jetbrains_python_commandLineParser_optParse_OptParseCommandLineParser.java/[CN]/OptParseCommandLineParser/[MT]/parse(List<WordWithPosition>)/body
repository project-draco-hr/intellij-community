{
  final Deque<WordWithPosition> parts=new ArrayDeque<WordWithPosition>(commandLineParts);
  if (parts.isEmpty()) {
    throw new MalformedCommandLineException("No command provided");
  }
  final WordWithPosition command=parts.pop();
  final List<Option> options;
  if (myCommandOptions.containsKey(command.getText())) {
    options=myCommandOptions.get(command.getText());
  }
 else {
    options=Collections.emptyList();
  }
  final List<Pair<CommandLinePartType,WordWithPosition>> resultParts=new ArrayList<Pair<CommandLinePartType,WordWithPosition>>();
  if (isOption(command)) {
    throw new MalformedCommandLineException("Command can't start with option prefix");
  }
  int optionArgumentsLeft=0;
  for (  final WordWithPosition part : parts) {
    if (optionArgumentsLeft > 0) {
      optionArgumentsLeft--;
      resultParts.add(Pair.create(CommandLinePartType.OPTION_ARGUMENT,part));
      continue;
    }
    if (isOption(part)) {
      final Pair<Option,String> optionAndValue=findOptionAndValue(options,part.getText());
      if (optionAndValue != null) {
        final Option option=optionAndValue.first;
        final Pair<Integer,OptionArgumentInfo> argumentAndQuantity=option.getArgumentAndQuantity();
        if (argumentAndQuantity != null) {
          optionArgumentsLeft=argumentAndQuantity.first;
        }
        final String optionArgumentValue=optionAndValue.second;
        if (optionArgumentValue != null) {
          optionArgumentsLeft--;
          final String optionArgumentText=part.getText().substring(0,part.getText().length() - optionArgumentValue.length());
          final WordWithPosition optionPart=new WordWithPosition(optionArgumentText,part.getFrom(),part.getFrom() + optionArgumentText.length());
          final WordWithPosition valuePart=new WordWithPosition(optionArgumentValue,optionPart.getTo(),part.getTo());
          resultParts.add(Pair.create(CommandLinePartType.OPTION,optionPart));
          resultParts.add(Pair.create(CommandLinePartType.OPTION_ARGUMENT,valuePart));
        }
 else {
          resultParts.add(Pair.create(CommandLinePartType.OPTION,part));
        }
      }
 else {
        resultParts.add(Pair.create(CommandLinePartType.UNKNOWN,part));
      }
    }
 else {
      resultParts.add(Pair.create(CommandLinePartType.ARGUMENT,part));
    }
  }
  return new CommandLineParseResult(command,resultParts);
}
