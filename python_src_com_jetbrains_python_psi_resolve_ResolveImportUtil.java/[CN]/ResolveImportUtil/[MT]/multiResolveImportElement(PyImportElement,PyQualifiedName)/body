{
  if (qName == null)   return Collections.emptyList();
  final String first_component=qName.getComponents().get(0);
  final PsiFile file=import_element.getContainingFile().getOriginalFile();
  final PyStatement importStatement=import_element.getContainingImportStatement();
  boolean absolute_import_enabled=isAbsoluteImportEnabledFor(import_element);
  PyQualifiedName moduleQName=null;
  if (importStatement instanceof PyFromImportStatement) {
    PyFromImportStatement from_import_statement=(PyFromImportStatement)importStatement;
    moduleQName=from_import_statement.getImportSourceQName();
    final int relative_level=from_import_statement.getRelativeLevel();
    Sdk sdk=ModuleUtil.findModuleForPsiElement(import_element) != null ? null : PyBuiltinCache.findSdkForNonModuleFile(file);
    if (relative_level > 0 && moduleQName == null) {
      final PsiElement element=resolveChild(stepBackFrom(file,relative_level),first_component,file,null,sdk,false,true);
      return element != null ? Collections.singletonList(element) : Collections.<PsiElement>emptyList();
    }
    if (moduleQName != null) {
      final List<PsiElement> candidates=resolveModule(moduleQName,file,absolute_import_enabled,relative_level);
      List<PsiElement> resultList=new ArrayList<PsiElement>();
      for (      PsiElement candidate : candidates) {
        PsiElement result=resolveChild(PyUtil.turnDirIntoInit(candidate),first_component,file,null,sdk,false,true);
        if (result != null) {
          resultList.add(result);
        }
      }
      if (!resultList.isEmpty()) {
        return resultList;
      }
    }
  }
 else   if (importStatement instanceof PyImportStatement) {
    final List<PsiElement> result=resolveModule(qName,file,absolute_import_enabled,0);
    if (result.size() > 0) {
      return result;
    }
  }
  final PsiElement result=resolveForeignImport(import_element,qName,moduleQName);
  return result != null ? Collections.singletonList(result) : Collections.<PsiElement>emptyList();
}
