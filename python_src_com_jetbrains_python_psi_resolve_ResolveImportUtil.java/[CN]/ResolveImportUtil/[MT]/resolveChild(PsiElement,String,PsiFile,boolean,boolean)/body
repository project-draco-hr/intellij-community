{
  PsiDirectory dir=null;
  PsiElement resultElement=null;
  PsiElement possibleResult=null;
  final PyResolveContext resolveContext=PyResolveContext.defaultContext();
  if (parent instanceof PyFileImpl) {
    if (PyNames.INIT_DOT_PY.equals(((PyFile)parent).getName())) {
      dir=((PyFile)parent).getContainingDirectory();
      possibleResult=resolveInDirectory(referencedName,containingFile,dir,fileOnly,checkForPackage);
    }
    final PyModuleType moduleType=new PyModuleType((PyFile)parent);
    final List<? extends RatedResolveResult> results=moduleType.resolveMember(referencedName,null,AccessDirection.READ,resolveContext);
    final PsiElement moduleMember=results != null && !results.isEmpty() ? results.get(0).getElement() : null;
    if (!fileOnly || PyUtil.instanceOf(moduleMember,PsiFile.class,PsiDirectory.class)) {
      resultElement=moduleMember;
    }
    if (resultElement != null && !PyUtil.instanceOf(resultElement,PsiFile.class,PsiDirectory.class) && PsiTreeUtil.getStubOrPsiParentOfType(resultElement,PyExceptPart.class) == null) {
      return resultElement;
    }
    if (possibleResult != null)     return possibleResult;
  }
 else   if (parent instanceof PsiDirectory) {
    dir=(PsiDirectory)parent;
  }
 else   if (parent != null) {
    PyType refType=PyReferenceExpressionImpl.getReferenceTypeFromProviders(parent,resolveContext.getTypeEvalContext(),null);
    if (refType != null) {
      final List<? extends RatedResolveResult> result=refType.resolveMember(referencedName,null,AccessDirection.READ,resolveContext);
      if (result != null && !result.isEmpty()) {
        return result.get(0).getElement();
      }
    }
  }
  if (dir != null) {
    final PsiElement result=resolveInDirectory(referencedName,containingFile,dir,fileOnly,checkForPackage);
    if (result != null) {
      return result;
    }
    if (parent instanceof PsiFile) {
      final PsiElement element=new QualifiedNameResolverImpl(referencedName).fromElement(parent).withoutRoots().firstResult();
      if (element != null) {
        return element;
      }
    }
  }
  return resultElement;
}
