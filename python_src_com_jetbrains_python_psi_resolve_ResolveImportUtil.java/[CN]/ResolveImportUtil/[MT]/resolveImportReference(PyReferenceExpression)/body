{
  if (importRef == null)   return Collections.emptyList();
  if (!importRef.isValid())   return Collections.emptyList();
  final String referencedName=importRef.getReferencedName();
  if (referencedName == null)   return Collections.emptyList();
  final PsiFile file=importRef.getContainingFile();
  if (file == null || !file.isValid())   return Collections.emptyList();
  final PyElement parent=PsiTreeUtil.getParentOfType(importRef,PyImportElement.class,PyFromImportStatement.class);
  final PyQualifiedName qname=importRef.asQualifiedName();
  if (parent instanceof PyImportElement) {
    PyImportElement import_element=(PyImportElement)parent;
    return multiResolveImportElement(import_element,qname);
  }
 else   if (parent instanceof PyFromImportStatement) {
    PyFromImportStatement from_import_statement=(PyFromImportStatement)parent;
    final List<PsiElement> results=resolveFromImportStatementSource(from_import_statement,qname);
    if (results.isEmpty() && qname != null && qname.getComponentCount() > 0) {
      final PyQualifiedName importedQName=PyQualifiedName.fromComponents(qname.getLastComponent());
      final PyQualifiedName containingQName=qname.removeLastComponent();
      final PsiElement result=resolveForeignImport(parent,importedQName,containingQName);
      return result != null ? Collections.singletonList(result) : Collections.<PsiElement>emptyList();
    }
    return results;
  }
  return Collections.emptyList();
}
