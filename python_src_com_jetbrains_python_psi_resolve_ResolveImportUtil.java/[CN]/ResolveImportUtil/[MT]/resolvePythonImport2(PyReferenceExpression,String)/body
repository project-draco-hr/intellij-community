{
  if (!importRef.isValid())   return null;
  final String the_name=referencedName != null ? referencedName : importRef.getName();
  Set<String> being_imported=ourBeingImported.get();
  PsiFile containing_file=importRef.getContainingFile();
  PsiElement last_resolved;
  List<PyReferenceExpression> ref_path=PyResolveUtil.unwindQualifiers(importRef);
  if (ref_path == null)   return null;
  StringBuffer pathbuf=new StringBuffer();
  for (  PyQualifiedExpression pathelt : ref_path)   pathbuf.append(pathelt.getName()).append(".");
  if (referencedName != null)   pathbuf.append(referencedName);
  final String import_fqname=pathbuf.toString();
  if (being_imported.contains(import_fqname))   return null;
  try {
    being_imported.add(import_fqname);
    Iterator<PyReferenceExpression> it=ref_path.iterator();
    if (ref_path.size() > 1) {
      if (it.hasNext()) {
        last_resolved=it.next().getReference().resolve();
      }
 else {
        return null;
      }
      while (it.hasNext()) {
        final String name=it.next().getName();
        if (name == null) {
          return null;
        }
        last_resolved=resolveChild(last_resolved,name,containing_file,true);
        if (last_resolved == null)         return null;
      }
      if (referencedName != null) {
        return resolveChild(last_resolved,referencedName,containing_file,false);
      }
 else {
        return last_resolved;
      }
    }
    if (referencedName != null) {
      return resolveChild(importRef.getReference().resolve(),referencedName,containing_file,false);
    }
    PsiElement root_elt=resolveInRoots(importRef,the_name);
    if (root_elt != null)     return root_elt;
  }
  finally {
    being_imported.remove(import_fqname);
  }
  return null;
}
