{
  myDetailsEnabled=detailsEnabled;
  myPaintBorder=paintBorder;
  myComponent=new JPanel(new BorderLayout()){
    @Override protected void paintComponent(    final Graphics g){
      if (NullableComponent.Check.isNull(myContent) || !myDetailsEnabled)       return;
      GraphicsConfig c=null;
      Insets insets=null;
      final int leftX;
      final int rightX;
      final int rightY;
      if (!Registry.is("ide.new.settings.dialog")) {
        c=new GraphicsConfig(g);
        c.setAntialiasing(true);
        insets=getInsets();
        if (insets == null) {
          insets=new Insets(0,0,0,0);
        }
        g.setColor(UIUtil.getFocusedFillColor());
        final Rectangle banner=myBanner.getBounds();
        final GeneralPath header=new GeneralPath();
        leftX=insets.left;
        final int leftY=insets.top;
        rightX=insets.left + getWidth() - 1 - insets.right;
        rightY=banner.y + banner.height;
        header.moveTo(leftX,rightY);
        int arc=8;
        header.lineTo(leftX,leftY + arc);
        header.quadTo(leftX,leftY,leftX + arc,leftY);
        header.lineTo(rightX - arc,leftY);
        header.quadTo(rightX,leftY,rightX,leftY + arc);
        header.lineTo(rightX,rightY);
        header.closePath();
        c.getG().fill(header);
        g.setColor(UIUtil.getFocusedBoundsColor());
        c.getG().draw(header);
        if (myPaintBorder) {
          final int down=getHeight() - insets.top - insets.bottom- 1;
          g.drawLine(leftX,rightY,leftX,down);
          g.drawLine(rightX,rightY,rightX,down);
          g.drawLine(leftX,down,rightX,down);
        }
        c.restore();
      }
    }
  }
;
  myComponent.setOpaque(false);
  myContentGutter.setOpaque(false);
  myContentGutter.setBorder(null);
  myBanner=new NonOpaquePanel(new BorderLayout());
  myBannerLabel=new Banner();
  if (myDetailsEnabled) {
    myBanner.add(myBannerLabel,BorderLayout.CENTER);
  }
  myEmptyContentLabel=new JLabel("",SwingConstants.CENTER);
  revalidateDetailsMode();
}
