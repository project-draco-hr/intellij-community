{
  super(new BorderLayout());
  myInitialRoots=roots;
  myLabeler=labeler;
  myProject=project;
  myRootsTree=new MyTree(new DefaultTreeModel(new DefaultMutableTreeNode()));
  final TypeMigrationTreeBuilder builder=new TypeMigrationTreeBuilder(myRootsTree,project);
  final List<MigrationRootNode> rootNodes=new ArrayList<MigrationRootNode>(roots.length);
  for (  PsiElement root : roots) {
    rootNodes.add(new MigrationRootNode(project,myLabeler,root,previewUsages));
  }
  builder.setRoots(rootNodes);
  initTree(myRootsTree);
  myRootsTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    final TreeSelectionEvent e){
      selectionChanged();
    }
  }
);
  final Splitter treeSplitter=new Splitter();
  Disposer.register(this,new Disposable(){
    public void dispose(){
      treeSplitter.dispose();
    }
  }
);
  treeSplitter.setFirstComponent(ScrollPaneFactory.createScrollPane(myRootsTree));
  myUsagesPanel=new MigrationUsagesPanel(myProject);
  treeSplitter.setSecondComponent(myUsagesPanel);
  Disposer.register(this,myUsagesPanel);
  add(createToolbar(),BorderLayout.SOUTH);
  final Splitter conflictsSplitter=new Splitter(true,.8f);
  Disposer.register(this,new Disposable(){
    public void dispose(){
      conflictsSplitter.dispose();
    }
  }
);
  conflictsSplitter.setFirstComponent(treeSplitter);
  myConflictsPanel=new MigrationConflictsPanel(myProject);
  conflictsSplitter.setSecondComponent(myConflictsPanel);
  add(conflictsSplitter,BorderLayout.CENTER);
  Disposer.register(this,myConflictsPanel);
  builder.addSubtreeToUpdate((DefaultMutableTreeNode)myRootsTree.getModel().getRoot(),new Runnable(){
    public void run(){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
        }
      }
);
    }
  }
);
  Disposer.register(this,builder);
}
