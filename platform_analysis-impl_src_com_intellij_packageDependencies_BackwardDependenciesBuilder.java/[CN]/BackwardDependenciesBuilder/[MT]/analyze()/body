{
  AnalysisScope scope=myForwardScope;
  final DependenciesBuilder builder=new ForwardDependenciesBuilder(getProject(),scope,getScopeOfInterest());
  builder.setTotalFileCount(myTotalFileCount);
  builder.analyze();
  subtractScope(builder,getScope());
  final PsiManager psiManager=PsiManager.getInstance(getProject());
  psiManager.startBatchFilesProcessingMode();
  try {
    final int fileCount=getScope().getFileCount();
    final boolean includeTestSource=getScope().isIncludeTestSource();
    final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(getProject()).getFileIndex();
    getScope().accept(new Processor<VirtualFile>(){
      @Override public boolean process(      final VirtualFile virtualFile){
        if (!includeTestSource && fileIndex.isInTestSourceContent(virtualFile)) {
          return true;
        }
        ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
        if (indicator != null) {
          if (indicator.isCanceled()) {
            throw new ProcessCanceledException();
          }
          indicator.setText(AnalysisScopeBundle.message("package.dependencies.progress.text"));
          indicator.setText2(getRelativeToProjectPath(virtualFile));
          if (fileCount > 0) {
            indicator.setFraction(((double)++myFileCount) / myTotalFileCount);
          }
        }
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            final PsiFile file=psiManager.findFile(virtualFile);
            if (file != null) {
              final Map<PsiFile,Set<PsiFile>> dependencies=builder.getDependencies();
              for (              final PsiFile psiFile : dependencies.keySet()) {
                if (dependencies.get(psiFile).contains(file)) {
                  Set<PsiFile> fileDeps=getDependencies().get(file);
                  if (fileDeps == null) {
                    fileDeps=new HashSet<PsiFile>();
                    getDependencies().put(file,fileDeps);
                  }
                  fileDeps.add(psiFile);
                }
              }
              psiManager.dropResolveCaches();
            }
          }
        }
);
        return true;
      }
    }
);
  }
  finally {
    psiManager.finishBatchFilesProcessingMode();
  }
}
