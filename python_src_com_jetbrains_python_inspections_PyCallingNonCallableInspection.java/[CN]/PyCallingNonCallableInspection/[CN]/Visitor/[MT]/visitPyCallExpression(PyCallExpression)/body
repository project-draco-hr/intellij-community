{
  super.visitPyCallExpression(node);
  PyExpression callee=node.getCallee();
  if (callee != null) {
    PyType calleeType=myTypeEvalContext.getType(callee);
    if (calleeType instanceof PyClassType) {
      PyClassType classType=(PyClassType)calleeType;
      if (isMethodType(node,classType)) {
        return;
      }
      if (!classType.isDefinition()) {
        final List<? extends RatedResolveResult> calls=classType.resolveMember("__call__",null,AccessDirection.READ,PyResolveContext.defaultContext().withTypeEvalContext(myTypeEvalContext));
        if (calls == null || calls.size() == 0) {
          PyClass pyClass=classType.getPyClass();
          if (pyClass != null) {
            registerProblem(node,String.format("'%s' object is not callable",pyClass.getName()));
          }
        }
      }
    }
    if (calleeType instanceof PyModuleType) {
      registerProblem(node,String.format("'%s' module is not callable",callee.getName()));
    }
  }
}
