{
  super.visitPyCallExpression(node);
  final PyExpression callee=node.getCallee();
  if (callee != null && !PyNames.CLASS.equals(callee.getName())) {
    final PsiReference ref=callee.getReference();
    if (ref != null && ref.resolve() instanceof PyClass) {
      return;
    }
    PyType calleeType=myTypeEvalContext.getType(callee);
    if (calleeType instanceof PyClassType) {
      PyClassType classType=(PyClassType)calleeType;
      PyClass cls=classType.getPyClass();
      if (isMethodType(node,classType)) {
        return;
      }
      if (cls != null && !cls.isSubclass(PyNames.CALLABLE)) {
        registerProblem(node,String.format("'%s' object is not callable",cls.getName()));
      }
    }
 else     if (calleeType != null) {
      registerProblem(node,String.format("'%s' is not callable",callee.getName()));
    }
  }
}
