{
  super.visitPyCallExpression(node);
  PyExpression callee=node.getCallee();
  if (callee != null) {
    PyType calleeType=callee.getType(TypeEvalContext.fast());
    if (calleeType != null && calleeType instanceof PyClassType) {
      PyClassType classType=(PyClassType)calleeType;
      if (isMethodType(node,classType)) {
        return;
      }
      if (!classType.isDefinition() && !classType.resolveMember("__call__",PyType.Context.READ).isDefined()) {
        PyClass pyClass=classType.getPyClass();
        if (pyClass != null) {
          classType.resolveMember("__call__",PyType.Context.READ);
          registerProblem(node,"'" + pyClass.getName() + "' object is not callable");
        }
      }
    }
  }
}
