{
switch (insn.getOpcode()) {
case Opcodes.LNEG:
case Opcodes.DNEG:
case Opcodes.I2L:
case Opcodes.I2D:
case Opcodes.L2D:
case Opcodes.F2L:
case Opcodes.F2D:
case Opcodes.D2L:
    return DataValue.UnknownDataValue2;
case Opcodes.GETFIELD:
  FieldInsnNode fieldInsn=((FieldInsnNode)insn);
if (value == DataValue.ThisDataValue && HardCodedPurity.ownedFields.contains(new Couple<String>(fieldInsn.owner,fieldInsn.name))) {
  return DataValue.OwnedDataValue;
}
 else {
  return ASMUtils.getSizeFast(fieldInsn.desc) == 1 ? DataValue.UnknownDataValue1 : DataValue.UnknownDataValue2;
}
case Opcodes.CHECKCAST:
return value;
case Opcodes.PUTSTATIC:
int insnIndex=methodNode.instructions.indexOf(insn);
effects[insnIndex]=EffectQuantum.TopEffectQuantum;
return DataValue.UnknownDataValue1;
case Opcodes.NEWARRAY:
case Opcodes.ANEWARRAY:
return DataValue.LocalDataValue;
default :
return DataValue.UnknownDataValue1;
}
}
