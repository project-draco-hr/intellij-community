{
  Key key=new Key(method,Direction.Pure,stable);
  Set<EffectQuantum> hardCodedSolution=HardCodedPurity.getHardCodedSolution(key);
  if (hardCodedSolution != null) {
    return new Equation(key,new Effects(hardCodedSolution));
  }
  if ((methodNode.access & UN_ANALYZABLE_FLAG) != 0) {
    return new Equation(key,new Effects(topEffect));
  }
  DataInterpreter dataInterpreter=new DataInterpreter(methodNode);
  try {
    new Analyzer<DataValue>(dataInterpreter).analyze("this",methodNode);
  }
 catch (  AnalyzerException e) {
    return new Equation(key,new Effects(topEffect));
  }
  EffectQuantum[] quanta=dataInterpreter.effects;
  Set<EffectQuantum> effects=new HashSet<EffectQuantum>();
  for (  EffectQuantum effectQuantum : quanta) {
    if (effectQuantum != null) {
      if (effectQuantum == EffectQuantum.TopEffectQuantum) {
        return new Equation(key,new Effects(topEffect));
      }
      effects.add(effectQuantum);
    }
  }
  return new Equation(key,new Effects(effects));
}
