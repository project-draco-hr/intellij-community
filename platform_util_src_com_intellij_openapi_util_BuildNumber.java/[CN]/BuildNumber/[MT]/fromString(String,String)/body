{
  if (StringUtil.isEmptyOrSpaces(version))   return null;
  if (BUILD_NUMBER.equals(version) || SNAPSHOT.equals(version)) {
    final String productCode=name != null ? name : "";
    return new BuildNumber(productCode,Holder.CURRENT_VERSION.myComponents);
  }
  String code=version;
  int productSeparator=code.indexOf('-');
  final String productCode;
  if (productSeparator > 0) {
    productCode=code.substring(0,productSeparator);
    code=code.substring(productSeparator + 1);
  }
 else {
    productCode="";
  }
  int baselineVersionSeparator=code.indexOf('.');
  int baselineVersion;
  int buildNumber;
  if (baselineVersionSeparator > 0) {
    String baselineVersionString=code.substring(0,baselineVersionSeparator);
    if (baselineVersionString.trim().isEmpty())     return null;
    List<String> stringComponents=StringUtil.split(code,".");
    TIntArrayList intComponentsList=new TIntArrayList();
    for (    String stringComponent : stringComponents) {
      int comp=parseBuildNumber(version,stringComponent,name);
      intComponentsList.add(comp);
      if (comp == SNAPSHOT_VALUE)       break;
    }
    int[] intComponents=intComponentsList.toNativeArray();
    return new BuildNumber(productCode,intComponents);
  }
 else {
    buildNumber=parseBuildNumber(version,code,name);
    if (buildNumber <= 2000) {
      return new BuildNumber(productCode,buildNumber,0);
    }
    baselineVersion=getBaseLineForHistoricBuilds(buildNumber);
    return new BuildNumber(productCode,baselineVersion,buildNumber);
  }
}
