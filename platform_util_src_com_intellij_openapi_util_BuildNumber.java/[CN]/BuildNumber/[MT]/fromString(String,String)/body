{
  if (version == null)   return null;
  if (BUILD_NUMBER.equals(version) || SNAPSHOT.equals(version)) {
    final String productCode=name != null ? name : "";
    return new BuildNumber(productCode,Holder.CURRENT_VERSION.getFormat(),Holder.CURRENT_VERSION.myComponents);
  }
  String code=version;
  int productSeparator=code.indexOf('-');
  final String productCode;
  if (productSeparator > 0) {
    productCode=code.substring(0,productSeparator);
    code=code.substring(productSeparator + 1);
  }
 else {
    productCode="";
  }
  int baselineVersionSeparator=code.indexOf('.');
  int baselineVersion;
  int buildNumber;
  if (baselineVersionSeparator > 0) {
    String baselineVersionString=code.substring(0,baselineVersionSeparator);
    if (baselineVersionString.trim().isEmpty())     return null;
    try {
      baselineVersion=Integer.parseInt(baselineVersionString);
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException("Invalid version number: " + version + "; plugin name: "+ name);
    }
    if (baselineVersion >= 2016) {
      List<String> stringComponents=StringUtil.split(code,".");
      int[] intComponents=new int[stringComponents.size()];
      for (int i=0; i < stringComponents.size(); i++) {
        intComponents[i]=parseBuildNumber(version,stringComponents.get(i),name);
      }
      return new BuildNumber(productCode,Format.YEAR_BASED,intComponents);
    }
 else {
      code=code.substring(baselineVersionSeparator + 1);
      int minorBuildSeparator=code.indexOf('.');
      Integer attemptInfo=null;
      if (minorBuildSeparator > 0) {
        attemptInfo=parseBuildNumber(version,code.substring(minorBuildSeparator + 1),name);
        code=code.substring(0,minorBuildSeparator);
      }
      buildNumber=parseBuildNumber(version,code,name);
      if (attemptInfo != null) {
        return new BuildNumber(productCode,Format.BRANCH_BASED,baselineVersion,buildNumber,attemptInfo);
      }
 else {
        return new BuildNumber(productCode,Format.BRANCH_BASED,baselineVersion,buildNumber);
      }
    }
  }
 else {
    buildNumber=parseBuildNumber(version,code,name);
    if (buildNumber <= 2000) {
      return new BuildNumber(productCode,Format.BRANCH_BASED,buildNumber,0);
    }
    if (buildNumber >= 2016 && buildNumber <= 2999) {
      return new BuildNumber(productCode,Format.YEAR_BASED,buildNumber,0);
    }
    baselineVersion=getBaseLineForHistoricBuilds(buildNumber);
    return new BuildNumber(productCode,Format.HISTORIC,baselineVersion,buildNumber);
  }
}
