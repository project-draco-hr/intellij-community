{
  if (element instanceof PsiVariable) {
    PsiVariable var=(PsiVariable)element;
    final PsiType returnType=var.getType();
    if (!PsiType.BOOLEAN.equals(returnType)) {
      CommonRefactoringUtil.showErrorHint(project,editor,RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("invert.boolean.wrong.type")),InvertBooleanHandler.REFACTORING_NAME,InvertBooleanHandler.INVERT_BOOLEAN_HELP_ID);
      return null;
    }
    if (var instanceof PsiParameter) {
      final PsiElement declarationScope=((PsiParameter)var).getDeclarationScope();
      if (declarationScope instanceof PsiMethod) {
        final PsiMethod method=(PsiMethod)declarationScope;
        final PsiMethod superMethod=SuperMethodWarningUtil.checkSuperMethod(method,RefactoringBundle.message("to.refactor"));
        if (superMethod == null) {
          return null;
        }
        var=superMethod.getParameterList().getParameters()[method.getParameterList().getParameterIndex((PsiParameter)var)];
      }
 else       if (declarationScope instanceof PsiForeachStatement) {
        CommonRefactoringUtil.showErrorHint(project,editor,RefactoringBundle.message("invert.boolean.foreach"),InvertBooleanHandler.REFACTORING_NAME,InvertBooleanHandler.INVERT_BOOLEAN_HELP_ID);
        return null;
      }
    }
    return var;
  }
 else   if (element instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)element;
    final PsiType returnType=method.getReturnType();
    if (!PsiType.BOOLEAN.equals(returnType)) {
      CommonRefactoringUtil.showErrorHint(project,editor,RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("invert.boolean.wrong.type")),InvertBooleanHandler.REFACTORING_NAME,InvertBooleanHandler.INVERT_BOOLEAN_HELP_ID);
      return null;
    }
    return SuperMethodWarningUtil.checkSuperMethod(method,RefactoringBundle.message("to.refactor"));
  }
  return null;
}
