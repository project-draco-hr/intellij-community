{
  final StringBuilder syntaxInfo=new StringBuilder();
  Editor editor=myFixture.getEditor();
  TextWithMarkupProcessor processor=new TextWithMarkupProcessor();
  processor.addBuilder(new TextWithMarkupBuilder(){
    @Override public void init(    Color defaultForeground,    Color defaultBackground,    String defaultFontFamily,    int fontSize){
      assertEquals(JBColor.BLACK,defaultForeground);
      assertEquals(JBColor.WHITE,defaultBackground);
      assertEquals(getFontSize(),fontSize);
    }
    @Override public boolean isOverflowed(){
      return false;
    }
    @Override public void setFontFamily(    String fontFamily){
    }
    @Override public void setFontStyle(    int fontStyle){
      syntaxInfo.append("fontStyle=").append(fontStyle).append(',');
    }
    @Override public void setForeground(    Color foreground){
      syntaxInfo.append("foreground=").append(foreground).append(',');
    }
    @Override public void setBackground(    Color background){
      syntaxInfo.append("background=").append(background).append(',');
    }
    @Override public void addTextFragment(    CharSequence charSequence,    int startOffset,    int endOffset){
      syntaxInfo.append("text=").append(charSequence.subSequence(startOffset,endOffset)).append('\n');
    }
    @Override public void complete(){
    }
  }
);
  SelectionModel selectionModel=editor.getSelectionModel();
  processor.collectTransferableData(myFixture.getFile(),editor,selectionModel.getBlockSelectionStarts(),selectionModel.getBlockSelectionEnds());
  return syntaxInfo.toString();
}
