{
  EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
  editor.setColorsScheme(scheme);
  editor.setBorder(BorderFactory.createLineBorder(JBColor.border(),1));
  EditorSettings settings=editor.getSettings();
  settings.setLineNumbersShown(false);
  settings.setWhitespacesShown(false);
  settings.setLineMarkerAreaShown(false);
  settings.setIndentGuidesShown(false);
  settings.setFoldingOutlineShown(false);
  settings.setAdditionalColumnsCount(0);
  settings.setAdditionalLinesCount(0);
  settings.setRightMarginShown(true);
  settings.setRightMargin(60);
  settings.setVirtualSpace(false);
  editor.setHighlighter(new LexerEditorHighlighter(new PropertiesValueHighlighter(),scheme));
  editor.setVerticalScrollbarVisible(true);
  editor.setContextMenuGroupId(null);
  editor.addEditorMouseListener(new EditorPopupHandler(){
    @Override public void invokePopup(    EditorMouseEvent event){
      if (!event.isConsumed() && event.getArea() == EditorMouseEventArea.EDITING_AREA) {
        DefaultActionGroup group=new DefaultActionGroup();
        group.add(CustomActionsSchema.getInstance().getCorrectedAction(IdeActions.GROUP_CUT_COPY_PASTE));
        group.add(CustomActionsSchema.getInstance().getCorrectedAction(IdeActions.ACTION_EDIT_SOURCE));
        group.addSeparator();
        group.add(new AnAction("Propagate Value Across of Resource Bundle"){
          @Override public void actionPerformed(          AnActionEvent e){
            final String valueToPropagate=editor.getDocument().getText();
            final String currentSelectedProperty=getSelectedPropertyName();
            if (currentSelectedProperty == null) {
              return;
            }
            ApplicationManager.getApplication().runWriteAction(new Runnable(){
              @Override public void run(){
                WriteCommandAction.runWriteCommandAction(myProject,new Runnable(){
                  @Override public void run(){
                    try {
                      for (                      Map.Entry<PropertiesFile,EditorEx> entry : myEditors.entrySet()) {
                        final Editor translationEditor=entry.getValue();
                        if (translationEditor != editor) {
                          final PropertiesFile propertiesFile=entry.getKey();
                          myPropertiesInsertDeleteManager.insertOrUpdateTranslation(currentSelectedProperty,valueToPropagate,propertiesFile);
                          translationEditor.getDocument().setText(valueToPropagate);
                        }
                      }
                    }
 catch (                    final IncorrectOperationException e) {
                      LOG.error(e);
                    }
                  }
                }
);
              }
            }
);
          }
        }
);
        EditorPopupHandler handler=EditorActionUtil.createEditorPopupHandler(group);
        handler.invokePopup(event);
        event.consume();
      }
    }
  }
);
}
