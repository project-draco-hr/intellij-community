{
  myValuesPanel.removeAll();
  myValuesPanel.setLayout(new CardLayout());
  if (!myProject.isOpen())   return;
  JPanel valuesPanelComponent=new MyJPanel(new GridBagLayout());
  myValuesPanel.add(new JBScrollPane(valuesPanelComponent){
    @Override public void updateUI(){
      super.updateUI();
      getViewport().setBackground(UIUtil.getPanelBackground());
    }
  }
,VALUES);
  myValuesPanel.add(myNoPropertySelectedPanel,NO_PROPERTY_SELECTED);
  final List<PropertiesFile> propertiesFiles=myResourceBundle.getPropertiesFiles();
  final IgnoredPropertiesFilesSuffixesManager suffixesManager=IgnoredPropertiesFilesSuffixesManager.getInstance(myResourceBundle.getProject());
  if (!suffixesManager.getIgnoredSuffixes().isEmpty()) {
    final List<PropertiesFile> initialOrder=new ArrayList<PropertiesFile>(propertiesFiles);
    final PropertiesFile defaultPropertiesFile=myResourceBundle.getDefaultPropertiesFile();
    Collections.sort(propertiesFiles,new Comparator<PropertiesFile>(){
      @Override public int compare(      PropertiesFile p1,      PropertiesFile p2){
        if (p1.equals(defaultPropertiesFile)) {
          return -1;
        }
        if (p2.equals(defaultPropertiesFile)) {
          return 1;
        }
        final boolean isIgnored1=suffixesManager.getIgnoredSuffixes().contains(PropertiesUtil.getSuffix(p1));
        final boolean isIgnored2=suffixesManager.getIgnoredSuffixes().contains(PropertiesUtil.getSuffix(p2));
        if (isIgnored1 != isIgnored2) {
          if (isIgnored1) {
            return 1;
          }
 else {
            return -1;
          }
        }
        return initialOrder.indexOf(p1) - initialOrder.indexOf(p2);
      }
    }
);
  }
  GridBagConstraints gc=new GridBagConstraints(0,0,0,0,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(5,5,5,5),0,0);
  releaseAllEditors();
  myTitledPanels.clear();
  int y=0;
  Editor previousEditor=null;
  Editor firstEditor=null;
  for (  final PropertiesFile propertiesFile : propertiesFiles) {
    final Editor editor=createEditor();
    final Editor oldEditor=myEditors.put(propertiesFile,editor);
    if (firstEditor == null) {
      firstEditor=editor;
    }
    if (previousEditor != null) {
      editor.putUserData(ChooseSubsequentPropertyValueEditorAction.PREV_EDITOR_KEY,previousEditor);
      previousEditor.putUserData(ChooseSubsequentPropertyValueEditorAction.NEXT_EDITOR_KEY,editor);
    }
    previousEditor=editor;
    if (oldEditor != null) {
      EditorFactory.getInstance().releaseEditor(oldEditor);
    }
    ((EditorEx)editor).addFocusListener(new FocusChangeListener(){
      @Override public void focusGained(      final Editor editor){
        mySelectedEditor=editor;
        final EditorEx editorEx=(EditorEx)editor;
        editorEx.setViewer(ReadonlyStatusHandler.getInstance(myProject).ensureFilesWritable(propertiesFile.getVirtualFile()).hasReadonlyFiles());
      }
      @Override public void focusLost(      final Editor eventEditor){
        if (propertiesFile.getContainingFile().isValid()) {
          writeEditorPropertyValue(null,editor,propertiesFile);
        }
      }
    }
);
    gc.gridx=0;
    gc.gridy=y++;
    gc.gridheight=1;
    gc.gridwidth=GridBagConstraints.REMAINDER;
    gc.weightx=1;
    gc.weighty=1;
    gc.anchor=GridBagConstraints.CENTER;
    String title=propertiesFile.getName();
    title+=PropertiesUtil.getPresentableLocale(propertiesFile.getLocale());
    JComponent comp=new JPanel(new BorderLayout()){
      @Override public Dimension getPreferredSize(){
        Insets insets=getBorder().getBorderInsets(this);
        return new Dimension(100,editor.getLineHeight() * 4 + insets.top + insets.bottom);
      }
    }
;
    comp.add(editor.getComponent(),BorderLayout.CENTER);
    comp.setBorder(IdeBorderFactory.createTitledBorder(title,true));
    myTitledPanels.put(propertiesFile,(JPanel)comp);
    valuesPanelComponent.add(comp,gc);
  }
  if (previousEditor != null) {
    previousEditor.putUserData(ChooseSubsequentPropertyValueEditorAction.NEXT_EDITOR_KEY,firstEditor);
    firstEditor.putUserData(ChooseSubsequentPropertyValueEditorAction.PREV_EDITOR_KEY,previousEditor);
  }
  gc.gridx=0;
  gc.gridy=y;
  gc.gridheight=GridBagConstraints.REMAINDER;
  gc.gridwidth=GridBagConstraints.REMAINDER;
  gc.weightx=10;
  gc.weighty=1;
  valuesPanelComponent.add(new JPanel(),gc);
  selectionChanged();
  myValuesPanel.repaint();
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      updateEditorsFromProperties(true);
    }
  }
);
}
