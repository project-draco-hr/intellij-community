{
  myProject=resourceBundle.getProject();
  final JPanel splitPanel=new JPanel();
  myValuesPanel=new JPanel();
  myStructureViewPanel=new JPanel();
  JBSplitter splitter=new JBSplitter(false);
  splitter.setFirstComponent(myStructureViewPanel);
  splitter.setSecondComponent(myValuesPanel);
  splitter.setShowDividerControls(true);
  splitter.setHonorComponentsMinimumSize(true);
  splitter.setAndLoadSplitterProportionKey(getClass() + ".splitter");
  splitPanel.setLayout(new BorderLayout());
  splitPanel.add(splitter,BorderLayout.CENTER);
  myResourceBundle=resourceBundle;
  myPropertiesInsertDeleteManager=new ResourceBundlePropertiesUpdateManager(resourceBundle);
  myPropertiesAnchorizer=new PropertiesAnchorizer(myResourceBundle.getProject());
  myStructureViewComponent=new ResourceBundleStructureViewComponent(myResourceBundle,this,myPropertiesAnchorizer);
  myStructureViewPanel.setLayout(new BorderLayout());
  myStructureViewPanel.add(myStructureViewComponent,BorderLayout.CENTER);
  myStructureViewComponent.getTree().getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    private IProperty selectedProperty;
    private PropertiesFile selectedPropertiesFile;
    @Override public void valueChanged(    TreeSelectionEvent e){
      if (getSelectedElementIfOnlyOne() instanceof ResourceBundleFileStructureViewElement) {
        ((CardLayout)myValuesPanel.getLayout()).show(myValuesPanel,NO_PROPERTY_SELECTED);
        selectedPropertiesFile=null;
        selectedProperty=null;
        return;
      }
      if (Comparing.equal(e.getNewLeadSelectionPath(),e.getOldLeadSelectionPath()) || getSelectedProperty() == null)       return;
      if (!arePropertiesEquivalent(selectedProperty,getSelectedProperty()) || !Comparing.equal(selectedPropertiesFile,getSelectedPropertiesFile())) {
        if (selectedProperty != null && e.getOldLeadSelectionPath() != null) {
          for (          Map.Entry<PropertiesFile,EditorEx> entry : myEditors.entrySet()) {
            if (entry.getValue() == mySelectedEditor) {
              writeEditorPropertyValue(selectedProperty.getName(),mySelectedEditor,entry.getKey());
              break;
            }
          }
        }
        selectedProperty=getSelectedProperty();
        selectedPropertiesFile=getSelectedPropertiesFile();
        selectionChanged();
      }
    }
    private boolean arePropertiesEquivalent(    @Nullable IProperty oldSelected,    @Nullable IProperty newSelected){
      if (oldSelected == newSelected) {
        return true;
      }
      if (oldSelected == null || newSelected == null) {
        return false;
      }
      final PsiElement oldPsiElement=oldSelected.getPsiElement();
      if (!oldPsiElement.isValid()) {
        return false;
      }
      return oldPsiElement.isEquivalentTo(newSelected.getPsiElement());
    }
  }
);
  installPropertiesChangeListeners();
  myEditors=new THashMap<PropertiesFile,EditorEx>();
  myTitledPanels=new THashMap<PropertiesFile,JPanel>();
  recreateEditorsPanel();
  TreeElement[] children=myStructureViewComponent.getTreeModel().getRoot().getChildren();
  if (children.length != 0) {
    TreeElement child=children[0];
    String propName=((ResourceBundlePropertyStructureViewElement)child).getProperty().getUnescapedKey();
    setState(new ResourceBundleEditorState(propName));
  }
  myDataProviderPanel=new DataProviderPanel(splitPanel);
  myProject.getMessageBus().connect(myProject).subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER,new FileEditorManagerAdapter(){
    @Override public void selectionChanged(    @NotNull FileEditorManagerEvent event){
      onSelectionChanged(event);
    }
  }
);
}
