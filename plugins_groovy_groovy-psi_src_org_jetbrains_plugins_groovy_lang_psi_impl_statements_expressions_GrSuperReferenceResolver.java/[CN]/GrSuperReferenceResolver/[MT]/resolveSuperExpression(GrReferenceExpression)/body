{
  GrExpression qualifier=ref.getQualifier();
  if (qualifier == null) {
    final PsiElement parent=ref.getParent();
    if (parent instanceof GrConstructorInvocation) {
      return ((GrConstructorInvocation)parent).multiResolve(false);
    }
    PsiClass aClass=PsiUtil.getContextClass(ref);
    if (aClass != null) {
      return getSuperClass(aClass);
    }
  }
 else   if (qualifier instanceof GrReferenceExpression) {
    GroovyResolveResult result=((GrReferenceExpression)qualifier).advancedResolve();
    PsiElement resolved=result.getElement();
    if (resolved instanceof PsiClass) {
      PsiClass aClass=(PsiClass)resolved;
      GrTypeDefinition scopeClass=PsiTreeUtil.getParentOfType(ref,GrTypeDefinition.class,true);
      if (scopeClass != null && GrTraitUtil.isTrait(aClass) && aClass.isInheritor(scopeClass,false)) {
        PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(aClass,scopeClass,PsiSubstitutor.EMPTY);
        return new GroovyResolveResultImpl[]{new GroovyResolveResultImpl(aClass,null,null,superClassSubstitutor,true,true)};
      }
      if (PsiUtil.hasEnclosingInstanceInScope(aClass,ref,false)) {
        return getSuperClass(aClass);
      }
    }
  }
  return null;
}
