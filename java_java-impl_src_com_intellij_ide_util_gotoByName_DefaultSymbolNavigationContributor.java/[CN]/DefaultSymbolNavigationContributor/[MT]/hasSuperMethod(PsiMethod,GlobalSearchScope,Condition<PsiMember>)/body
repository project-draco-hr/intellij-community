{
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null)   return false;
  return !InheritanceUtil.processSupers(containingClass,false,new Processor<PsiClass>(){
    @Override public boolean process(    PsiClass superClass){
      if (PsiSearchScopeUtil.isInScope(scope,superClass)) {
        for (        PsiMethod candidate : superClass.findMethodsByName(method.getName(),false)) {
          if (qualifiedMatcher.value(candidate) && PsiSuperMethodImplUtil.isSuperMethodSmart(method,candidate)) {
            return false;
          }
        }
      }
      return true;
    }
  }
);
}
