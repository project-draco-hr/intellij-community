{
  setSearchPattern(element.getAttribute(TEXT_ATTRIBUTE_NAME).getValue());
  Attribute attr=element.getAttribute(RECURSIVE_ATTRIBUTE_NAME);
  if (attr != null) {
    try {
      recursiveSearch=attr.getBooleanValue();
    }
 catch (    DataConversionException ex) {
    }
  }
  attr=element.getAttribute(DISTINCT_ATTRIBUTE_NAME);
  if (attr != null) {
    try {
      distinct=attr.getBooleanValue();
    }
 catch (    DataConversionException ex) {
    }
  }
  attr=element.getAttribute(CASESENSITIVE_ATTRIBUTE_NAME);
  if (attr != null) {
    try {
      caseSensitiveMatch=attr.getBooleanValue();
    }
 catch (    DataConversionException ex) {
    }
  }
  attr=element.getAttribute(MAXMATCHES_ATTRIBUTE_NAME);
  if (attr != null) {
    try {
      maxMatches=attr.getIntValue();
    }
 catch (    DataConversionException ex) {
    }
  }
  attr=element.getAttribute(FILE_TYPE_ATTR_NAME);
  if (attr != null) {
    String value=attr.getValue();
    if (value.equalsIgnoreCase(XML)) {
      myFileType=StdFileTypes.XML;
    }
 else {
      myFileType=StdFileTypes.JAVA;
    }
  }
  List elements=element.getChildren(CONSTRAINT_ATTR_NAME);
  if (elements != null && elements.size() > 0) {
    for (Iterator i=elements.iterator(); i.hasNext(); ) {
      final MatchVariableConstraint constraint=new MatchVariableConstraint();
      constraint.readExternal((Element)i.next());
      addVariableConstraint(constraint);
    }
  }
}
