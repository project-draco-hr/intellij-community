{
  final PsiExpressionList argumentList=getArgumentList();
  return new MethodCandidateInfo(method,substitutor,!accessible,staticProblem,argumentList,myCurrentFileContext,null,getTypeArguments(),getLanguageLevel()){
    private PsiType[] myExpressionTypes;
    @Override public PsiType[] getArgumentTypes(){
      if (myExpressionTypes == null && argumentList != null) {
        final PsiType[] expressionTypes=getExpressionTypes(argumentList);
        if (MethodCandidateInfo.isOverloadCheck()) {
          return expressionTypes;
        }
        myExpressionTypes=expressionTypes;
      }
      return myExpressionTypes;
    }
    @Override public boolean isVarargs(){
      return varargs;
    }
  }
;
}
