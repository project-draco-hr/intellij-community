{
  return JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<ConfigurationType>(showTitle ? ExecutionBundle.message("add.new.run.configuration.acrtion.name") : null,typesToShow){
    @Override @NotNull public String getTextFor(    final ConfigurationType type){
      return type != null ? type.getDisplayName() : defaultText;
    }
    @Override public boolean isSpeedSearchEnabled(){
      return true;
    }
    @Override public boolean canBeHidden(    ConfigurationType value){
      return true;
    }
    @Override public Icon getIconFor(    final ConfigurationType type){
      return type != null ? type.getIcon() : EmptyIcon.ICON_16;
    }
    @Override public PopupStep onChosen(    final ConfigurationType type,    final boolean finalChoice){
      if (hasSubstep(type)) {
        return getSupStep(type);
      }
      if (type == null) {
        return doFinalStep(finalStep);
      }
      final ConfigurationFactory[] factories=type.getConfigurationFactories();
      if (factories.length > 0) {
        creator.consume(factories[0]);
      }
      return FINAL_CHOICE;
    }
    @Override public int getDefaultOptionIndex(){
      return selectedConfigurationType != null ? typesToShow.indexOf(selectedConfigurationType) : super.getDefaultOptionIndex();
    }
    private ListPopupStep getSupStep(    final ConfigurationType type){
      final ConfigurationFactory[] factories=type.getConfigurationFactories();
      Arrays.sort(factories,new Comparator<ConfigurationFactory>(){
        @Override public int compare(        final ConfigurationFactory factory1,        final ConfigurationFactory factory2){
          return factory1.getName().compareToIgnoreCase(factory2.getName());
        }
      }
);
      return new BaseListPopupStep<ConfigurationFactory>(ExecutionBundle.message("add.new.run.configuration.action.name",type.getDisplayName()),factories){
        @Override @NotNull public String getTextFor(        final ConfigurationFactory value){
          return value.getName();
        }
        @Override public Icon getIconFor(        final ConfigurationFactory factory){
          return factory.getIcon();
        }
        @Override public PopupStep onChosen(        final ConfigurationFactory factory,        final boolean finalChoice){
          creator.consume(factory);
          return FINAL_CHOICE;
        }
      }
;
    }
    @Override public boolean hasSubstep(    final ConfigurationType type){
      return type != null && type.getConfigurationFactories().length > 1;
    }
  }
);
}
