{
  super((Project)null,false);
  final JdkBundleList pathsList=findJdkPaths();
  myComboBox=new ComboBox();
  final DefaultComboBoxModel<JdkBundle> model=new DefaultComboBoxModel<JdkBundle>();
  for (  JdkBundle jdkBundlePath : pathsList.toArrayList()) {
    model.addElement(jdkBundlePath);
  }
  model.addElement(null);
  model.addListDataListener(new ListDataListener(){
    @Override public void intervalAdded(    ListDataEvent e){
    }
    @Override public void intervalRemoved(    ListDataEvent e){
    }
    @Override public void contentsChanged(    ListDataEvent e){
      if (myComboBox.getSelectedItem() == null) {
        FileChooserDescriptor descriptor=new FileChooserDescriptor(false,true,false,false,false,false){
          @Override public boolean isFileSelectable(          final VirtualFile file){
            if (!super.isFileSelectable(file))             return false;
            JdkBundle bundle=JdkBundle.createBundle(new File(file.getPath()),false,false);
            if (bundle == null)             return false;
            Version version=bundle.getVersion();
            return version != null && !version.lessThan(JDK8_VERSION.major,JDK8_VERSION.minor,JDK8_VERSION.bugfix);
          }
        }
;
        FileChooser.chooseFiles(descriptor,null,null,new Consumer<List<VirtualFile>>(){
          @Override public void consume(          final List<VirtualFile> files){
            if (files.size() > 0) {
              final File jdkFile=new File(files.get(0).getPath());
              JdkBundle selectedJdk=pathsList.getBundle(jdkFile.getPath());
              if (selectedJdk == null) {
                selectedJdk=JdkBundle.createBundle(jdkFile,false,false);
                if (selectedJdk != null) {
                  pathsList.addBundle(selectedJdk,true);
                  if (model.getSize() > 0) {
                    model.insertElementAt(selectedJdk,model.getSize() - 1);
                  }
 else {
                    model.addElement(selectedJdk);
                  }
                }
 else {
                  LOG.error("Cannot create bundle for path: " + jdkFile.getPath());
                  return;
                }
              }
              myComboBox.setSelectedItem(selectedJdk);
            }
          }
        }
);
      }
      if (myComboBox.getSelectedItem() == null) {
        myComboBox.setSelectedItem(model.getElementAt(0));
      }
      setOKActionEnabled(myComboBox.getSelectedItem() != null && !((JdkBundle)myComboBox.getSelectedItem()).isBoot());
    }
  }
);
  myComboBox.setModel(model);
  myComboBox.setRenderer(new ListCellRendererWrapper(){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value != null) {
        JdkBundle jdkBundleDescriptor=((JdkBundle)value);
        if (jdkBundleDescriptor.isBoot()) {
          setForeground(JBColor.DARK_GRAY);
        }
        setText(jdkBundleDescriptor.getVisualRepresentation());
      }
 else {
        setText("...");
      }
    }
  }
);
  setTitle("Switch IDE Boot JDK");
  setOKActionEnabled(false);
  init();
}
