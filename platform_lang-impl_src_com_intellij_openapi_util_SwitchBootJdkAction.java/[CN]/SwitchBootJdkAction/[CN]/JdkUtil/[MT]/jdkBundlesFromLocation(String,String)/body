{
  ArrayList<JdkBundleDescriptor> localJdkPathsList=new ArrayList<JdkBundleDescriptor>();
  File standardJdkLocationOnMacFile=new File(jdkLocationOnMacOsX);
  if (!standardJdkLocationOnMacFile.exists()) {
    LOG.debug("Location does not exists: " + jdkLocationOnMacOsX);
    return localJdkPathsList;
  }
  File[] filesInStandardJdkLocation=standardJdkLocationOnMacFile.listFiles();
  if (filesInStandardJdkLocation == null) {
    LOG.debug("Some IO  exception happened.");
    return localJdkPathsList;
  }
  int latestUpdateNumber=0;
  JdkBundleDescriptor latestBundle=null;
  Pattern p=Pattern.compile(filter);
  for (  File possibleJdkBundle : filesInStandardJdkLocation) {
    Matcher m=p.matcher(possibleJdkBundle.getName());
    while (m.find()) {
      try {
        if (m.groupCount() > 0) {
          int updateNumber=Integer.parseInt(m.group(1));
          if (latestUpdateNumber < updateNumber) {
            latestBundle=new JdkBundleDescriptor(possibleJdkBundle,possibleJdkBundle.getName());
          }
        }
 else {
          latestBundle=new JdkBundleDescriptor(possibleJdkBundle,possibleJdkBundle.getName());
        }
      }
 catch (      NumberFormatException nfe) {
        LOG.debug("Fail parsing update number");
      }
    }
  }
  if (latestBundle != null) {
    localJdkPathsList.add(latestBundle);
  }
  return localJdkPathsList;
}
