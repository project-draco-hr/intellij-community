{
  final List<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
  place.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitCallExpression(    PsiCallExpression expression){
      super.visitCallExpression(expression);
      checkCall(expression);
    }
    @Override public void visitEnumConstant(    PsiEnumConstant enumConstant){
      super.visitEnumConstant(enumConstant);
      checkCall(enumConstant);
    }
    @Override public void visitClass(    PsiClass aClass){
    }
    private void checkCall(    PsiCall expression){
      final JavaResolveResult resolveResult=expression.resolveMethodGenerics();
      PsiElement element=resolveResult.getElement();
      final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
      if (!(element instanceof PsiMethod)) {
        return;
      }
      PsiMethod method=(PsiMethod)element;
      if (!method.isVarArgs() || AnnotationUtil.isAnnotated(method,Collections.singletonList("java.lang.invoke.MethodHandle.PolymorphicSignature"))) {
        return;
      }
      PsiParameter[] parameters=method.getParameterList().getParameters();
      PsiExpressionList argumentList=expression.getArgumentList();
      if (argumentList == null) {
        return;
      }
      PsiExpression[] args=argumentList.getExpressions();
      if (parameters.length != args.length) {
        return;
      }
      PsiExpression lastArg=args[args.length - 1];
      PsiParameter lastParameter=parameters[args.length - 1];
      PsiType lastParamType=lastParameter.getType();
      LOG.assertTrue(lastParamType instanceof PsiEllipsisType);
      if (!(lastArg instanceof PsiNewExpression)) {
        return;
      }
      final PsiType substitutedLastParamType=substitutor.substitute(((PsiEllipsisType)lastParamType).toArrayType());
      final PsiType lastArgType=lastArg.getType();
      if (lastArgType == null || !lastArgType.equals(substitutedLastParamType) && !lastArgType.equals(TypeConversionUtil.erasure(substitutedLastParamType))) {
        return;
      }
      PsiExpression[] initializers=getInitializers((PsiNewExpression)lastArg);
      if (initializers == null) {
        return;
      }
      if (!isSafeToFlatten(expression,method,initializers)) {
        return;
      }
      String message=InspectionsBundle.message("inspection.redundant.array.creation.for.varargs.call.descriptor");
      ProblemDescriptor descriptor=manager.createProblemDescriptor(lastArg,message,myQuickFixAction,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly);
      problems.add(descriptor);
    }
    private boolean isSafeToFlatten(    @NotNull PsiCall callExpression,    @NotNull PsiMethod oldRefMethod,    @NotNull PsiExpression[] arrayElements){
      if (arrayElements.length == 1) {
        PsiType type=arrayElements[0].getType();
        if (PsiType.NULL.equals(type) || type instanceof PsiArrayType)         return false;
      }
      PsiCall copy=(PsiCall)callExpression.copy();
      PsiExpressionList copyArgumentList=copy.getArgumentList();
      LOG.assertTrue(copyArgumentList != null);
      PsiExpression[] args=copyArgumentList.getExpressions();
      try {
        args[args.length - 1].delete();
        if (arrayElements.length > 0) {
          copyArgumentList.addRange(arrayElements[0],arrayElements[arrayElements.length - 1]);
        }
        final Project project=callExpression.getProject();
        final JavaResolveResult resolveResult;
        if (callExpression instanceof PsiEnumConstant) {
          final PsiEnumConstant enumConstant=(PsiEnumConstant)callExpression;
          final PsiClass containingClass=enumConstant.getContainingClass();
          final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
          final PsiClassType classType=facade.getElementFactory().createType(containingClass);
          resolveResult=facade.getResolveHelper().resolveConstructor(classType,copyArgumentList,enumConstant);
          return resolveResult.isValidResult() && resolveResult.getElement() == oldRefMethod;
        }
 else {
          resolveResult=copy.resolveMethodGenerics();
          if (!resolveResult.isValidResult() || resolveResult.getElement() != oldRefMethod) {
            return false;
          }
          final ExpectedTypeInfo[] expectedTypes=ExpectedTypesProvider.getExpectedTypes((PsiCallExpression)callExpression,false);
          final PsiType expressionType=((PsiCallExpression)copy).getType();
          for (          ExpectedTypeInfo expectedType : expectedTypes) {
            if (!expectedType.getType().isAssignableFrom(expressionType)) {
              return false;
            }
          }
          return true;
        }
      }
 catch (      IncorrectOperationException e) {
        return false;
      }
    }
  }
);
  if (problems.isEmpty())   return null;
  return problems.toArray(new ProblemDescriptor[problems.size()]);
}
