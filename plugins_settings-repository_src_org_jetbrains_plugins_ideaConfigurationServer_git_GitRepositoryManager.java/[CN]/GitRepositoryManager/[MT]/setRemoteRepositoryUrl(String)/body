{
  StoredConfig config=git.getRepository().getConfig();
  if (StringUtil.isEmptyOrSpaces(url)) {
    config.unset(ConfigConstants.CONFIG_REMOTE_SECTION,Constants.DEFAULT_REMOTE_NAME,ConfigConstants.CONFIG_KEY_URL);
    LOG.debug("Unset remote");
    config.save();
  }
 else {
    config.setString(ConfigConstants.CONFIG_REMOTE_SECTION,Constants.DEFAULT_REMOTE_NAME,ConfigConstants.CONFIG_KEY_URL,url);
    LOG.debug("Set remote " + url);
    config.save();
    ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      @Override public void run(){
        ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
        try {
          new CommitTask(GitRepositoryManager.this,indicator).run();
          if (git.getRepository().getRef(Constants.HEAD) == null) {
            createCommitCommand().setMessage("Initial commit (jgit workaround)").call();
          }
          git.branchCreate().setForce(true).setUpstreamMode(CreateBranchCommand.SetupUpstreamMode.SET_UPSTREAM).setName(Constants.MASTER).call();
        }
 catch (        Exception e) {
          LOG.error(e);
        }
      }
    }
,IcsBundle.message("task.set.upstream.title"),true,null);
  }
}
