{
  if (!(file instanceof PsiJavaFile))   return false;
  if (myWrongElement == null || !myWrongElement.isValid())   return false;
  PsiElement targetElement=null;
  PsiMethod targetMethod=null;
  final PsiLambdaExpression lambdaExpression=PsiTreeUtil.getParentOfType(myWrongElement,PsiLambdaExpression.class);
  if (lambdaExpression != null) {
    targetMethod=LambdaUtil.getFunctionalInterfaceMethod(lambdaExpression);
    targetElement=lambdaExpression.getBody();
  }
  if (targetElement == null && targetMethod == null) {
    targetMethod=PsiTreeUtil.getParentOfType(myWrongElement,PsiMethod.class);
    targetElement=targetMethod;
  }
  if (targetElement == null || targetMethod == null || !targetMethod.getThrowsList().isPhysical())   return false;
  List<PsiClassType> unhandled=getUnhandledExceptions(myWrongElement,targetElement,targetMethod);
  if (unhandled == null || unhandled.isEmpty())   return false;
  setText(QuickFixBundle.message("add.exception.to.throws.text",unhandled.size()));
  return true;
}
