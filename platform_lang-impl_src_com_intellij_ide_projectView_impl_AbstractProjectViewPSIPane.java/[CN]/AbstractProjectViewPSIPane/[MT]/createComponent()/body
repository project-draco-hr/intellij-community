{
  if (myComponent != null)   return myComponent;
  DefaultMutableTreeNode rootNode=new DefaultMutableTreeNode(null);
  DefaultTreeModel treeModel=new DefaultTreeModel(rootNode);
  myTree=createTree(treeModel);
  enableDnD();
  myComponent=ScrollPaneFactory.createScrollPane(myTree);
  if (Registry.is("error.stripe.enabled")) {
    ExtraErrorStripePainter painter=new ExtraErrorStripePainter(true);
    Disposer.register(this,new TreeUpdater<ExtraErrorStripePainter>(painter,myComponent,myTree){
      @Override protected void update(      ExtraErrorStripePainter painter,      int index,      Object object){
        if (object instanceof DefaultMutableTreeNode) {
          DefaultMutableTreeNode node=(DefaultMutableTreeNode)object;
          object=node.getUserObject();
        }
        painter.setExtraStripe(index,getExtraStripe(object));
        if (object instanceof PsiDirectoryNode && !myTree.isCollapsed(index)) {
          object=null;
        }
        super.update(painter,index,object);
      }
      @Override protected ErrorStripe getErrorStripe(      Object object){
        if (object instanceof PresentableNodeDescriptor) {
          PresentableNodeDescriptor node=(PresentableNodeDescriptor)object;
          PresentationData presentation=node.getPresentation();
          TextAttributesKey key=presentation.getTextAttributesKey();
          if (key != null) {
            TextAttributes attributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(key);
            if (attributes != null)             return ErrorStripe.create(attributes.getEffectColor(),1);
          }
        }
        return null;
      }
      private ErrorStripe getExtraStripe(      Object object){
        if (object instanceof NodeDescriptor) {
          NodeDescriptor node=(NodeDescriptor)object;
          return ErrorStripe.create(node.getColor(),0);
        }
        return null;
      }
    }
);
  }
  myTreeStructure=createStructure();
  setTreeBuilder(createBuilder(treeModel));
  installComparator();
  initTree();
  return myComponent;
}
