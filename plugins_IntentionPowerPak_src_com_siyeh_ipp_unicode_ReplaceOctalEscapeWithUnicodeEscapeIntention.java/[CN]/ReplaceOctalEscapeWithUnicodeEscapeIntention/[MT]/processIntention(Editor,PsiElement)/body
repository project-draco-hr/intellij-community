{
  final SelectionModel selectionModel=editor.getSelectionModel();
  if (selectionModel.hasSelection()) {
    final Document document=editor.getDocument();
    final int start=selectionModel.getSelectionStart();
    final int end=selectionModel.getSelectionEnd();
    final String text=document.getText(new TextRange(start,end));
    final int textLength=end - start;
    final StringBuilder replacement=new StringBuilder(textLength);
    int anchor=0;
    while (true) {
      final int index=indexOfOctalEscape(text,anchor + 1);
      if (index < 0) {
        break;
      }
      replacement.append(text.substring(anchor,index));
      anchor=appendUnicodeEscape(text,index,replacement);
    }
    replacement.append(text.substring(anchor,textLength));
    document.replaceString(start,end,replacement);
  }
 else   if ((element instanceof PsiLiteralExpression)) {
    final PsiLiteralExpression literalExpression=(PsiLiteralExpression)element;
    final String text=literalExpression.getText();
    final CaretModel model=editor.getCaretModel();
    final int offset=model.getOffset() - literalExpression.getTextOffset();
    final StringBuilder newLiteralText=new StringBuilder();
    final int index1=indexOfOctalEscape(text,offset);
    final int index2=indexOfOctalEscape(text,offset + 1);
    final int escapeStart=index2 == offset ? index2 : index1;
    newLiteralText.append(text.substring(0,escapeStart));
    final int escapeEnd=appendUnicodeEscape(text,escapeStart,newLiteralText);
    newLiteralText.append(text.substring(escapeEnd,text.length()));
    replaceExpression(newLiteralText.toString(),literalExpression);
  }
}
