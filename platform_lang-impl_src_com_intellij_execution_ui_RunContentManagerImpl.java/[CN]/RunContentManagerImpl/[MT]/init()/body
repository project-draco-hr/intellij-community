{
  for (  Executor executor : ExecutorRegistry.getInstance().getRegisteredExecutors()) {
    registerToolwindow(executor);
  }
  if (ToolWindowManager.getInstance(myProject) == null)   return;
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      if (myProject.isDisposed()) {
        return;
      }
      ((ToolWindowManagerEx)ToolWindowManager.getInstance(myProject)).addToolWindowManagerListener(new ToolWindowManagerAdapter(){
        @Override public void stateChanged(){
          if (myProject.isDisposed()) {
            return;
          }
          ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(myProject);
          Set<String> currentWindows=new THashSet<String>();
          ContainerUtil.addAll(currentWindows,toolWindowManager.getToolWindowIds());
          myToolwindowIdZBuffer.retainAll(currentWindows);
          final String activeToolWindowId=toolWindowManager.getActiveToolWindowId();
          if (activeToolWindowId != null) {
            if (myToolwindowIdZBuffer.remove(activeToolWindowId)) {
              myToolwindowIdZBuffer.addFirst(activeToolWindowId);
            }
          }
        }
      }
);
    }
  }
);
}
