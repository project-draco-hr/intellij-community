{
  PyExceptPart[] exceptParts=node.getExceptParts();
  if (exceptParts.length > 1) {
    Set<PyClass> exceptClasses=new HashSet<PyClass>();
    for (    PyExceptPart exceptPart : exceptParts) {
      PyExpression exceptClass=exceptPart.getExceptClass();
      if (exceptClass instanceof PyReferenceExpression) {
        PsiElement element=((PyReferenceExpression)exceptClass).followAssignmentsChain(resolveWithoutImplicits()).getElement();
        if (element instanceof PyClass) {
          PyClass pyClass=(PyClass)element;
          if (exceptClasses.contains(pyClass)) {
            registerProblem(exceptClass,PyBundle.message("INSP.class.$0.already.caught",pyClass.getName()));
          }
 else {
            for (            PyClass superClass : pyClass.getSuperClasses()) {
              if (exceptClasses.contains(superClass)) {
                registerProblem(exceptClass,PyBundle.message("INSP.class.$0.superclass.$1.already.caught",superClass.getName(),pyClass.getName()));
              }
            }
          }
          exceptClasses.add(pyClass);
        }
      }
    }
  }
}
