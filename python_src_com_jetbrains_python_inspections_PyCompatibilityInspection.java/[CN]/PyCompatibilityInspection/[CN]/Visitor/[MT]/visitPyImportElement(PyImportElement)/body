{
  myUsedImports.add(importElement.getVisibleName());
  PyIfStatement ifParent=PsiTreeUtil.getParentOfType(importElement,PyIfStatement.class);
  if (ifParent != null)   return;
  int len=0;
  String moduleName="";
  StringBuilder message=new StringBuilder("Python version ");
  PyTryExceptStatement tryExceptStatement=PsiTreeUtil.getParentOfType(importElement,PyTryExceptStatement.class);
  if (tryExceptStatement != null) {
    PyExceptPart[] parts=tryExceptStatement.getExceptParts();
    for (    PyExceptPart part : parts) {
      final PyExpression exceptClass=part.getExceptClass();
      if (exceptClass != null && exceptClass.getText().equals("ImportError")) {
        return;
      }
    }
  }
  final PyFromImportStatement fromImportStatement=PsiTreeUtil.getParentOfType(importElement,PyFromImportStatement.class);
  if (fromImportStatement != null) {
    for (int i=0; i != myVersionsToProcess.size(); ++i) {
      LanguageLevel languageLevel=myVersionsToProcess.get(i);
      final QualifiedName qName=importElement.getImportedQName();
      final QualifiedName sourceQName=fromImportStatement.getImportSourceQName();
      if (qName != null && sourceQName != null && qName.matches("unicode_literals") && sourceQName.matches("__future__") && languageLevel.isOlderThan(LanguageLevel.PYTHON26)) {
        len=appendLanguageLevel(message,len,languageLevel);
      }
    }
    commonRegisterProblem(message," not have unicode_literals in __future__ module",len,importElement,null);
    return;
  }
  for (int i=0; i != myVersionsToProcess.size(); ++i) {
    LanguageLevel languageLevel=myVersionsToProcess.get(i);
    final QualifiedName qName=importElement.getImportedQName();
    if (qName != null && !qName.matches("builtins") && !qName.matches("__builtin__")) {
      moduleName=qName.toString();
      if (UnsupportedFeaturesUtil.MODULES.get(languageLevel).contains(moduleName)) {
        len=appendLanguageLevel(message,len,languageLevel);
      }
    }
  }
  commonRegisterProblem(message," not have module " + moduleName,len,importElement,null);
}
