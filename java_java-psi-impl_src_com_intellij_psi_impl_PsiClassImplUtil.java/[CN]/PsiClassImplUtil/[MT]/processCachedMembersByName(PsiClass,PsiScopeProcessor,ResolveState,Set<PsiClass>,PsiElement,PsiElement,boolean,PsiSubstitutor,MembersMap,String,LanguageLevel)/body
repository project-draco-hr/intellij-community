{
  Function<PsiMember,PsiSubstitutor> finalSubstitutor=new Function<PsiMember,PsiSubstitutor>(){
    final ScopedClassHierarchy hierarchy=ScopedClassHierarchy.getHierarchy(aClass,place.getResolveScope());
    final PsiElementFactory factory=JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory();
    @Override public PsiSubstitutor fun(    PsiMember member){
      PsiClass containingClass=ObjectUtils.assertNotNull(member.getContainingClass());
      PsiSubstitutor superSubstitutor=hierarchy.getSuperMembersSubstitutor(containingClass,languageLevel);
      PsiSubstitutor finalSubstitutor=obtainFinalSubstitutor(containingClass,superSubstitutor == null ? PsiSubstitutor.EMPTY : superSubstitutor,aClass,substitutor,factory,languageLevel);
      return member instanceof PsiMethod ? checkRaw(isRaw,factory,(PsiMethod)member,finalSubstitutor) : finalSubstitutor;
    }
  }
;
  final ElementClassHint classHint=processor.getHint(ElementClassHint.KEY);
  if (classHint == null || classHint.shouldProcess(ElementClassHint.DeclarationKind.FIELD)) {
    final PsiField fieldByName=aClass.findFieldByName(name,false);
    if (fieldByName != null) {
      processor.handleEvent(PsiScopeProcessor.Event.SET_DECLARATION_HOLDER,aClass);
      if (!processor.execute(fieldByName,state))       return false;
    }
 else {
      final Map<String,PsiMember[]> allFieldsMap=value.get(MemberType.FIELD);
      final PsiMember[] list=allFieldsMap.get(name);
      if (list != null) {
        boolean resolved=false;
        for (        final PsiMember candidateField : list) {
          PsiClass containingClass=candidateField.getContainingClass();
          if (containingClass == null) {
            LOG.error("No class for field " + candidateField.getName() + " of "+ candidateField.getClass());
            continue;
          }
          processor.handleEvent(PsiScopeProcessor.Event.SET_DECLARATION_HOLDER,containingClass);
          if (!processor.execute(candidateField,state.put(PsiSubstitutor.KEY,finalSubstitutor.fun(candidateField)))) {
            resolved=true;
          }
        }
        if (resolved)         return false;
      }
    }
  }
  if (classHint == null || classHint.shouldProcess(ElementClassHint.DeclarationKind.CLASS)) {
    if (last != null && last.getContext() == aClass) {
      if (last instanceof PsiClass) {
        if (!processor.execute(last,state))         return false;
      }
      final PsiTypeParameterList list=aClass.getTypeParameterList();
      if (list != null && !list.processDeclarations(processor,state,last,place))       return false;
    }
    if (!(last instanceof PsiReferenceList)) {
      final PsiClass classByName=aClass.findInnerClassByName(name,false);
      if (classByName != null) {
        processor.handleEvent(PsiScopeProcessor.Event.SET_DECLARATION_HOLDER,aClass);
        if (!processor.execute(classByName,state))         return false;
      }
 else {
        Map<String,PsiMember[]> allClassesMap=value.get(MemberType.CLASS);
        PsiMember[] list=allClassesMap.get(name);
        if (list != null) {
          boolean resolved=false;
          for (          final PsiMember inner : list) {
            PsiClass containingClass=inner.getContainingClass();
            if (containingClass != null) {
              processor.handleEvent(PsiScopeProcessor.Event.SET_DECLARATION_HOLDER,containingClass);
              if (!processor.execute(inner,state.put(PsiSubstitutor.KEY,finalSubstitutor.fun(inner)))) {
                resolved=true;
              }
            }
          }
          if (resolved)           return false;
        }
      }
    }
  }
  if (classHint == null || classHint.shouldProcess(ElementClassHint.DeclarationKind.METHOD)) {
    if (processor instanceof MethodResolverProcessor) {
      final MethodResolverProcessor methodResolverProcessor=(MethodResolverProcessor)processor;
      if (methodResolverProcessor.isConstructor()) {
        final PsiMethod[] constructors=aClass.getConstructors();
        methodResolverProcessor.handleEvent(PsiScopeProcessor.Event.SET_DECLARATION_HOLDER,aClass);
        for (        PsiMethod constructor : constructors) {
          if (!methodResolverProcessor.execute(constructor,state))           return false;
        }
        return true;
      }
    }
    Map<String,PsiMember[]> allMethodsMap=value.get(MemberType.METHOD);
    PsiMember[] list=allMethodsMap.get(name);
    if (list != null) {
      boolean resolved=false;
      for (      final PsiMember candidate : list) {
        ProgressIndicatorProvider.checkCanceled();
        PsiMethod candidateMethod=(PsiMethod)candidate;
        if (processor instanceof MethodResolverProcessor) {
          if (candidateMethod.isConstructor() != ((MethodResolverProcessor)processor).isConstructor())           continue;
        }
        final PsiClass containingClass=candidateMethod.getContainingClass();
        if (containingClass == null || visited != null && visited.contains(containingClass)) {
          continue;
        }
        processor.handleEvent(PsiScopeProcessor.Event.SET_DECLARATION_HOLDER,containingClass);
        if (!processor.execute(candidateMethod,state.put(PsiSubstitutor.KEY,finalSubstitutor.fun(candidateMethod)))) {
          resolved=true;
        }
      }
      if (resolved)       return false;
      if (visited != null) {
        for (        PsiMember aList : list) {
          visited.add(aList.getContainingClass());
        }
      }
    }
  }
  return true;
}
