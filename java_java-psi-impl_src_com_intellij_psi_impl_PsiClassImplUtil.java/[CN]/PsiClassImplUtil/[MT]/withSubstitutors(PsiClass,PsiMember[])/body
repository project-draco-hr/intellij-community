{
  final ScopedClassHierarchy hierarchy=ScopedClassHierarchy.getHierarchy(psiClass,psiClass.getResolveScope());
  final LanguageLevel level=PsiUtil.getLanguageLevel(psiClass);
  return ContainerUtil.map(members,new Function<PsiMember,Pair<T,PsiSubstitutor>>(){
    @Override public Pair<T,PsiSubstitutor> fun(    PsiMember member){
      PsiClass containingClass=member.getContainingClass();
      PsiSubstitutor substitutor=containingClass == null ? null : hierarchy.getSuperMembersSubstitutor(containingClass,level);
      return Pair.create((T)member,substitutor == null ? PsiSubstitutor.EMPTY : substitutor);
    }
  }
);
}
