{
  final PsiMethod[] methodsByName=aClass.findMethodsByName(patternMethod.getName(),checkBases);
  if (methodsByName.length == 0)   return Collections.emptyList();
  final List<PsiMethod> methods=new SmartList<PsiMethod>();
  final MethodSignature patternSignature=patternMethod.getSignature(PsiSubstitutor.EMPTY);
  for (  final PsiMethod method : methodsByName) {
    final PsiClass superClass=method.getContainingClass();
    final PsiSubstitutor substitutor=checkBases && !aClass.equals(superClass) && superClass != null ? TypeConversionUtil.getSuperClassSubstitutor(superClass,aClass,PsiSubstitutor.EMPTY) : PsiSubstitutor.EMPTY;
    final MethodSignature signature=method.getSignature(substitutor);
    if (signature.equals(patternSignature)) {
      methods.add(method);
      if (stopOnFirst) {
        break;
      }
    }
  }
  return methods;
}
