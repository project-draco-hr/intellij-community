{
  final Map<String,List<Pair<PsiMember,PsiSubstitutor>>> map=new THashMap<String,List<Pair<PsiMember,PsiSubstitutor>>>();
  final List<Pair<PsiMember,PsiSubstitutor>> allMembers=new ArrayList<Pair<PsiMember,PsiSubstitutor>>();
  map.put(ALL,allMembers);
  ElementClassFilter filter=key == MemberType.CLASS ? ElementClassFilter.CLASS : key == MemberType.METHOD ? ElementClassFilter.METHOD : ElementClassFilter.FIELD;
  final ElementClassHint classHint=new ElementClassHint(){
    @Override public boolean shouldProcess(    DeclarationKind kind){
      return key == MemberType.CLASS && kind == DeclarationKind.CLASS || key == MemberType.FIELD && (kind == DeclarationKind.FIELD || kind == DeclarationKind.ENUM_CONST) || key == MemberType.METHOD && kind == DeclarationKind.METHOD;
    }
  }
;
  FilterScopeProcessor<MethodCandidateInfo> processor=new FilterScopeProcessor<MethodCandidateInfo>(filter){
    @Override protected void add(    @NotNull PsiElement element,    @NotNull PsiSubstitutor substitutor){
      if (key == MemberType.CLASS && element instanceof PsiClass || key == MemberType.METHOD && element instanceof PsiMethod || key == MemberType.FIELD && element instanceof PsiField) {
        Pair<PsiMember,PsiSubstitutor> info=Pair.create((PsiMember)element,substitutor);
        allMembers.add(info);
        String currentName=((PsiMember)element).getName();
        List<Pair<PsiMember,PsiSubstitutor>> listByName=map.get(currentName);
        if (listByName == null) {
          listByName=new ArrayList<Pair<PsiMember,PsiSubstitutor>>(1);
          map.put(currentName,listByName);
        }
        listByName.add(info);
      }
    }
    @Override public <K>K getHint(    @NotNull Key<K> hintKey){
      return ElementClassHint.KEY == hintKey ? (K)classHint : super.getHint(hintKey);
    }
  }
;
  processDeclarationsInClassNotCached(myPsiClass,processor,ResolveState.initial(),null,null,myPsiClass,false,PsiUtil.getLanguageLevel(myPsiClass),myResolveScope);
  Map<String,Pair<PsiMember,PsiSubstitutor>[]> result=ContainerUtil.newTroveMap();
  for (  String name : map.keySet()) {
    result.put(name,map.get(name).toArray(new Pair[0]));
  }
  return result;
}
