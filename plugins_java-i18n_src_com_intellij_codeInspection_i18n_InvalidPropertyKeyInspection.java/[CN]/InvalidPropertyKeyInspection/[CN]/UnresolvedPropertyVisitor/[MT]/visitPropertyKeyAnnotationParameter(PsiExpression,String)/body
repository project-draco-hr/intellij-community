{
  if (!(expression.getParent() instanceof PsiExpressionList))   return;
  Ref<String> resourceBundleName=new Ref<String>();
  if (!JavaI18nUtil.isValidPropertyReference(myManager.getProject(),expression,key,resourceBundleName)) {
    String bundleName=resourceBundleName.get();
    if (bundleName != null) {
      appendPropertyKeyNotFoundProblem(bundleName,key,expression,myManager,myProblems,onTheFly);
    }
  }
 else   if (expression.getParent() instanceof PsiNameValuePair) {
    PsiNameValuePair nvp=(PsiNameValuePair)expression.getParent();
    if (Comparing.equal(nvp.getName(),AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER)) {
      PropertiesReferenceManager manager=PropertiesReferenceManager.getInstance(expression.getProject());
      Module module=ModuleUtilCore.findModuleForPsiElement(expression);
      if (module != null) {
        List<PropertiesFile> propFiles=manager.findPropertiesFiles(module,key);
        if (propFiles.isEmpty()) {
          final String description=CodeInsightBundle.message("inspection.invalid.resource.bundle.reference",key);
          final ProblemDescriptor problem=myManager.createProblemDescriptor(expression,description,(LocalQuickFix)null,ProblemHighlightType.LIKE_UNKNOWN_SYMBOL,onTheFly);
          myProblems.add(problem);
        }
      }
    }
  }
 else   if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) {
    final Map<String,Object> annotationParams=new HashMap<String,Object>();
    annotationParams.put(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER,null);
    if (!JavaI18nUtil.mustBePropertyKey(expression,annotationParams))     return;
    final SortedSet<Integer> paramsCount=JavaI18nUtil.getPropertyValueParamsCount(expression,resourceBundleName.get());
    if (paramsCount.isEmpty() || (paramsCount.size() != 1 && resourceBundleName.get() == null)) {
      return;
    }
    final int maxParamCount=paramsCount.last();
    final PsiExpressionList expressions=(PsiExpressionList)expression.getParent();
    final PsiMethodCallExpression methodCall=(PsiMethodCallExpression)expressions.getParent();
    final PsiMethod method=methodCall.resolveMethod();
    final PsiExpression[] args=expressions.getExpressions();
    for (int i=0; i < args.length; i++) {
      if (args[i] == expression) {
        if (i + maxParamCount >= args.length && method != null && method.getParameterList().getParametersCount() == i + 2 && method.getParameterList().getParameters()[i + 1].isVarArgs() && !hasArrayTypeAt(i + 1,methodCall)) {
          myProblems.add(myManager.createProblemDescriptor(methodCall,CodeInsightBundle.message("property.has.more.parameters.than.passed",key,maxParamCount,args.length - i - 1),onTheFly,LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR));
        }
        break;
      }
    }
  }
}
