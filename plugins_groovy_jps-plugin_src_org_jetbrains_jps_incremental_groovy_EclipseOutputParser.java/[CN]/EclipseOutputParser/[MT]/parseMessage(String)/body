{
  int dotIndex=msgText.indexOf('.');
  BuildMessage.Kind kind;
  boolean isNormal=false;
  if (dotIndex > 0) {
    if (msgText.substring(dotIndex,dotIndex + ". WARNING".length()).equals(". WARNING")) {
      kind=BuildMessage.Kind.WARNING;
      isNormal=true;
      dotIndex+=". WARNING in ".length();
    }
 else     if (msgText.substring(dotIndex,dotIndex + ". ERROR".length()).equals(". ERROR")) {
      kind=BuildMessage.Kind.ERROR;
      isNormal=true;
      dotIndex+=". ERROR in ".length();
    }
 else {
      kind=BuildMessage.Kind.INFO;
    }
  }
 else {
    kind=BuildMessage.Kind.INFO;
  }
  int firstNewline=msgText.indexOf('\n');
  String firstLine=firstNewline > 0 ? msgText.substring(0,firstNewline) : msgText;
  String rest=firstNewline > 0 ? msgText.substring(firstNewline + 1).trim() : "";
  if (isNormal) {
    try {
      int parenIndex=firstLine.indexOf(" (");
      String file=firstLine.substring(dotIndex,parenIndex);
      int line=Integer.parseInt(firstLine.substring(parenIndex + " (at line ".length(),firstLine.indexOf(')')));
      int lastLineIndex=rest.lastIndexOf("\n");
      return new CompilerMessage(myBuilderName,kind,rest.substring(lastLineIndex + 1),file,-1,-1,-1,line,-1);
    }
 catch (    RuntimeException ignore) {
    }
  }
  if (msgText.trim().matches("(\\d)+ problem(s)? \\((\\d)+ (error|warning)(s)?\\)")) {
    return null;
  }
  return new CompilerMessage(myBuilderName,kind,msgText);
}
