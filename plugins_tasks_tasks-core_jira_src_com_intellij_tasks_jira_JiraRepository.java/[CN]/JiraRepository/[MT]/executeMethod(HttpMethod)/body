{
  LOG.debug("URI: " + method.getURI());
  HttpClient client=getHttpClient();
  final boolean isJiraOnDemand=StringUtil.notNullize(myJiraVersion).contains("OD");
  if (isJiraOnDemand) {
    LOG.info("Connecting to JIRA on-Demand. Cookie authentication is enabled unless 'tasks.jira.basic.auth.only' VM flag is used.");
  }
  if (BASIC_AUTH_ONLY || !isJiraOnDemand) {
    setUseHttpAuthentication(true);
  }
 else {
    boolean enableBasicAuthentication=!(isRestApiSupported() && containsCookie(client,AUTH_COOKIE_NAME));
    if (enableBasicAuthentication != isUseHttpAuthentication()) {
      LOG.info("Basic authentication for subsequent requests was " + (enableBasicAuthentication ? "enabled" : "disabled"));
    }
    setUseHttpAuthentication(enableBasicAuthentication);
  }
  int statusCode=client.executeMethod(method);
  LOG.debug("Status code: " + statusCode);
  final InputStream stream=method.getResponseBodyAsStream();
  String entityContent=stream == null ? "" : StreamUtil.readText(stream,CharsetToolkit.UTF8);
  if (statusCode >= 200 && statusCode < 300) {
    return entityContent;
  }
  clearCookies();
  if (method.getResponseHeader("Content-Type") != null) {
    Header header=method.getResponseHeader("Content-Type");
    if (header.getValue().startsWith("application/json")) {
      JsonObject object=GSON.fromJson(entityContent,JsonObject.class);
      if (object.has("errorMessages")) {
        String reason=StringUtil.join(object.getAsJsonArray("errorMessages")," ");
        LOG.warn(reason);
        throw new Exception(TaskBundle.message("failure.server.message",reason));
      }
    }
  }
  if (method.getResponseHeader("X-Authentication-Denied-Reason") != null) {
    Header header=method.getResponseHeader("X-Authentication-Denied-Reason");
    if (header.getValue().startsWith("CAPTCHA_CHALLENGE")) {
      throw new Exception(TaskBundle.message("jira.failure.captcha"));
    }
  }
  if (statusCode == HttpStatus.SC_UNAUTHORIZED) {
    throw new Exception(TaskBundle.message("failure.login"));
  }
  String statusText=HttpStatus.getStatusText(method.getStatusCode());
  throw new Exception(TaskBundle.message("failure.http.error",statusCode,statusText));
}
