{
  if (doClone && elements.length != 1) {
    throw new IllegalArgumentException("invalid number of elements to clone:" + elements.length);
  }
  if (newName != null && elements.length != 1) {
    throw new IllegalArgumentException("no new name should be set; number of elements is: " + elements.length);
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(targetDirectory.getProject(),Collections.singleton(targetDirectory),false)) {
    return;
  }
  String title=RefactoringBundle.message(doClone ? "copy,handler.clone.files.directories" : "copy.handler.copy.files.directories");
  new WriteCommandAction(targetDirectory.getProject(),title){
    @Override protected void run(    @NotNull Result result){
      try {
        PsiFile firstFile=null;
        final int[] choice=elements.length > 1 || elements[0] instanceof PsiDirectory ? new int[]{-1} : null;
        for (        PsiElement element : elements) {
          PsiFile f=copyToDirectory((PsiFileSystemItem)element,newName,targetDirectory,choice);
          if (firstFile == null) {
            firstFile=f;
          }
        }
        if (firstFile != null && openInEditor) {
          CopyHandler.updateSelectionInActiveProjectView(firstFile,getProject(),doClone);
          if (!(firstFile instanceof PsiBinaryFile)) {
            EditorHelper.openInEditor(firstFile);
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              @Override public void run(){
                ToolWindowManager.getInstance(getProject()).activateEditorComponent();
              }
            }
);
          }
        }
      }
 catch (      final IncorrectOperationException ex) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            Messages.showErrorDialog(getProject(),ex.getMessage(),RefactoringBundle.message("error.title"));
          }
        }
);
      }
catch (      final IOException ex) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            Messages.showErrorDialog(getProject(),ex.getMessage(),RefactoringBundle.message("error.title"));
          }
        }
);
      }
    }
  }
.execute();
}
