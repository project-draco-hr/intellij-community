{
  final Project project=e.getData(CommonDataKeys.PROJECT);
  if (project == null) {
    return;
  }
  final CCProjectService service=CCProjectService.getInstance(project);
  final Course course=service.getCourse();
  if (course == null)   return;
  CreateCourseArchiveDialog dlg=new CreateCourseArchiveDialog(project,this);
  dlg.show();
  if (dlg.getExitCode() != DialogWrapper.OK_EXIT_CODE) {
    return;
  }
  final VirtualFile baseDir=project.getBaseDir();
  final Map<String,Lesson> lessons=course.getLessonsMap();
  Map<VirtualFile,TaskFile> taskFiles=new HashMap<VirtualFile,TaskFile>();
  for (  Map.Entry<String,Lesson> lesson : lessons.entrySet()) {
    final VirtualFile lessonDir=baseDir.findChild(lesson.getKey());
    if (lessonDir == null)     continue;
    for (    Map.Entry<String,Task> task : lesson.getValue().myTasksMap.entrySet()) {
      final VirtualFile taskDir=lessonDir.findChild(task.getKey());
      if (taskDir == null)       continue;
      for (      Map.Entry<String,TaskFile> entry : task.getValue().task_files.entrySet()) {
        final VirtualFile file=taskDir.findChild(entry.getKey());
        if (file == null)         continue;
        final Document document=FileDocumentManager.getInstance().getDocument(file);
        if (document == null)         continue;
        final TaskFile taskFile=entry.getValue();
        document.addDocumentListener(new InsertionListener(taskFile));
        taskFiles.put(file,taskFile);
        taskFile.setTrackChanges(false);
        Collections.sort(taskFile.getTaskWindows());
        for (int i=taskFile.getTaskWindows().size() - 1; i >= 0; i--) {
          final TaskWindow taskWindow=taskFile.getTaskWindows().get(i);
          final String taskText=taskWindow.getTaskText();
          final int lineStartOffset=document.getLineStartOffset(taskWindow.line);
          final int offset=lineStartOffset + taskWindow.start;
          CommandProcessor.getInstance().executeCommand(project,new Runnable(){
            @Override public void run(){
              ApplicationManager.getApplication().runWriteAction(new Runnable(){
                @Override public void run(){
                  document.replaceString(offset,offset + taskWindow.getReplacementLength(),taskText);
                  FileDocumentManager.getInstance().saveDocument(document);
                }
              }
);
            }
          }
,"x","qwe");
        }
      }
    }
  }
  generateJson(project);
  try {
    File zipFile=new File(myLocationDir,myZipName + ".zip");
    ZipOutputStream zos=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)));
    for (    Map.Entry<String,Lesson> entry : lessons.entrySet()) {
      final VirtualFile lessonDir=baseDir.findChild(entry.getKey());
      if (lessonDir == null)       continue;
      ZipUtil.addFileOrDirRecursively(zos,null,new File(lessonDir.getPath()),lessonDir.getName(),null,null);
    }
    ZipUtil.addFileOrDirRecursively(zos,null,new File(baseDir.getPath(),"hints"),"hints",null,null);
    ZipUtil.addFileOrDirRecursively(zos,null,new File(baseDir.getPath(),"course.json"),"course.json",null,null);
    ZipUtil.addFileOrDirRecursively(zos,null,new File(baseDir.getPath(),"test_helper.py"),"test_helper.py",null,null);
    zos.close();
    Messages.showInfoMessage("Course archive was saved to " + zipFile.getPath(),"Course Archive Was Created Successfully");
  }
 catch (  IOException e1) {
    LOG.error(e1);
  }
  for (  Map.Entry<VirtualFile,TaskFile> entry : taskFiles.entrySet()) {
    TaskFile value=entry.getValue();
    final Document document=FileDocumentManager.getInstance().getDocument(entry.getKey());
    if (document == null) {
      continue;
    }
    for (    final TaskWindow taskWindow : value.getTaskWindows()) {
      final int lineStartOffset=document.getLineStartOffset(taskWindow.line);
      final int offset=lineStartOffset + taskWindow.start;
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        @Override public void run(){
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            @Override public void run(){
              document.replaceString(offset,offset + taskWindow.length,taskWindow.getPossibleAnswer());
              FileDocumentManager.getInstance().saveDocument(document);
            }
          }
);
        }
      }
,"x","qwe");
    }
    value.setTrackChanges(true);
  }
  VirtualFileManager.getInstance().refreshWithoutFileWatcher(true);
  ProjectView.getInstance(project).refresh();
}
