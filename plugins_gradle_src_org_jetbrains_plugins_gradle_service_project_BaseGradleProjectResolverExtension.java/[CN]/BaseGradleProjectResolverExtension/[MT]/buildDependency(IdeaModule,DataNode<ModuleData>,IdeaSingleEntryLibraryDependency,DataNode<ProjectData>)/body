{
  File binaryPath=dependency.getFile();
  if (binaryPath == null) {
    throw new IllegalStateException(String.format("Can't parse external library dependency '%s'. Reason: it doesn't specify path to the binaries",dependency));
  }
  String libraryName;
  final GradleModuleVersion moduleVersion=dependency.getGradleModuleVersion();
  final LibraryLevel level;
  boolean unresolved=binaryPath.getPath().startsWith(UNRESOLVED_DEPENDENCY_PREFIX);
  if (moduleVersion == null) {
    level=LibraryLevel.MODULE;
    if (binaryPath.isFile()) {
      libraryName=FileUtil.getNameWithoutExtension(binaryPath);
    }
 else {
      libraryName=FileUtil.sanitizeFileName(binaryPath.getPath());
    }
    if (unresolved) {
      libraryName=binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length());
      int i=libraryName.indexOf(' ');
      if (i >= 0) {
        i=CharArrayUtil.shiftForward(libraryName,i + 1," ");
      }
      if (i >= 0 && i < libraryName.length()) {
        int dependencyNameIndex=i;
        i=libraryName.indexOf(' ',dependencyNameIndex);
        if (i > 0) {
          libraryName=String.format("%s-%s",libraryName.substring(dependencyNameIndex,i),libraryName.substring(i + 1));
        }
      }
    }
  }
 else {
    level=LibraryLevel.PROJECT;
    libraryName=String.format("%s:%s:%s",moduleVersion.getGroup(),moduleVersion.getName(),moduleVersion.getVersion());
    if (binaryPath.isFile()) {
      String libraryFileName=FileUtil.getNameWithoutExtension(binaryPath);
      final String mavenLibraryFileName=String.format("%s-%s",moduleVersion.getName(),moduleVersion.getVersion());
      if (!mavenLibraryFileName.equals(libraryFileName)) {
        Pattern pattern=Pattern.compile(moduleVersion.getName() + "-" + moduleVersion.getVersion()+ "-(.*)");
        Matcher matcher=pattern.matcher(libraryFileName);
        if (matcher.matches()) {
          final String classifier=matcher.group(1);
          libraryName+=(":" + classifier);
        }
 else {
          final String artifactId=StringUtil.trimEnd(StringUtil.trimEnd(libraryFileName,moduleVersion.getVersion()),"-");
          libraryName=String.format("%s:%s:%s",moduleVersion.getGroup(),artifactId,moduleVersion.getVersion());
        }
      }
    }
  }
  final LibraryData library=new LibraryData(GradleConstants.SYSTEM_ID,libraryName,unresolved);
  if (!unresolved) {
    library.addPath(LibraryPathType.BINARY,binaryPath.getAbsolutePath());
  }
  File sourcePath=dependency.getSource();
  if (!unresolved && sourcePath != null) {
    library.addPath(LibraryPathType.SOURCE,sourcePath.getAbsolutePath());
  }
  if (!unresolved && sourcePath == null) {
    attachGradleSdkSources(gradleModule,libraryName,binaryPath,library);
  }
  File javadocPath=dependency.getJavadoc();
  if (!unresolved && javadocPath != null) {
    library.addPath(LibraryPathType.DOC,javadocPath.getAbsolutePath());
  }
  if (level == LibraryLevel.PROJECT) {
    DataNode<LibraryData> libraryData=ExternalSystemApiUtil.find(ideProject,ProjectKeys.LIBRARY,new BooleanFunction<DataNode<LibraryData>>(){
      @Override public boolean fun(      DataNode<LibraryData> node){
        return library.equals(node.getData());
      }
    }
);
    if (libraryData == null) {
      ideProject.createChild(ProjectKeys.LIBRARY,library);
    }
  }
  return new LibraryDependencyData(ownerModule.getData(),library,level);
}
