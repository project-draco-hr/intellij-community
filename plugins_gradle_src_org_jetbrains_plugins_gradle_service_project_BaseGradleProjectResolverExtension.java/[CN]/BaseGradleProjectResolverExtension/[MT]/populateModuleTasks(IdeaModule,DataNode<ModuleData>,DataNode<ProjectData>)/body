{
  final Collection<TaskData> tasks=ContainerUtil.newArrayList();
  final String moduleConfigPath=ideModule.getData().getLinkedExternalProjectPath();
  ExternalProject externalProject=resolverCtx.getExtraProject(gradleModule,ExternalProject.class);
  if (externalProject != null) {
    for (    ExternalTask task : externalProject.getTasks().values()) {
      String taskName=task.getName();
      if (taskName.trim().isEmpty() || isIdeaTask(taskName)) {
        continue;
      }
      TaskData taskData=new TaskData(GradleConstants.SYSTEM_ID,taskName,moduleConfigPath,task.getDescription());
      taskData.setGroup(task.getGroup());
      ideModule.createChild(ProjectKeys.TASK,taskData);
      taskData.setInherited(StringUtil.equals(task.getName(),task.getQName()));
      tasks.add(taskData);
    }
    return tasks;
  }
  for (  GradleTask task : gradleModule.getGradleProject().getTasks()) {
    String taskName=task.getName();
    if (taskName == null || taskName.trim().isEmpty() || isIdeaTask(taskName)) {
      continue;
    }
    TaskData taskData=new TaskData(GradleConstants.SYSTEM_ID,taskName,moduleConfigPath,task.getDescription());
    ideModule.createChild(ProjectKeys.TASK,taskData);
    tasks.add(taskData);
  }
  return tasks;
}
