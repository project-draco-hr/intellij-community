{
  final String moduleName=gradleModule.getName();
  if (moduleName == null) {
    throw new IllegalStateException("Module with undefined name detected: " + gradleModule);
  }
  final String moduleConfigPath=getModuleConfigPath(gradleModule,projectData.getLinkedExternalProjectPath());
  if (ExternalSystemDebugEnvironment.DEBUG_ORPHAN_MODULES_PROCESSING) {
    LOG.info(String.format("Creating module data ('%s') with the external config path: '%s'",gradleModule.getGradleProject().getPath(),moduleConfigPath));
  }
  String gradlePath=gradleModule.getGradleProject().getPath();
  String moduleId=StringUtil.isEmpty(gradlePath) || ":".equals(gradlePath) ? moduleName : gradlePath;
  ModuleData moduleData=new ModuleData(moduleId,GradleConstants.SYSTEM_ID,StdModuleTypes.JAVA.getId(),moduleName,moduleConfigPath,moduleConfigPath);
  final ModuleExtendedModel moduleExtendedModel=resolverCtx.getExtraProject(gradleModule,ModuleExtendedModel.class);
  if (moduleExtendedModel != null) {
    moduleData.setGroup(moduleExtendedModel.getGroup());
    moduleData.setVersion(moduleExtendedModel.getVersion());
    moduleData.setArtifacts(moduleExtendedModel.getArtifacts());
  }
  return moduleData;
}
