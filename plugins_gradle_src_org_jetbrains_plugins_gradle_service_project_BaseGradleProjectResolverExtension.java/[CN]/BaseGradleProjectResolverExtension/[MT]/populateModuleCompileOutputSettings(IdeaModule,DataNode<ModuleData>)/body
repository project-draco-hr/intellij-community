{
  ExternalProject externalProject=resolverCtx.getExtraProject(gradleModule,ExternalProject.class);
  if (resolverCtx.isResolveModulePerSourceSet() && externalProject != null) {
    processSourceSets(externalProject,ideModule,new SourceSetsProcessor(){
      @Override public void process(      @NotNull DataNode<? extends ModuleData> dataNode,      @NotNull ExternalSourceSet sourceSet){
        for (        Map.Entry<IExternalSystemSourceType,ExternalSourceDirectorySet> directorySetEntry : sourceSet.getSources().entrySet()) {
          ExternalSystemSourceType sourceType=ExternalSystemSourceType.from(directorySetEntry.getKey());
          ExternalSourceDirectorySet sourceDirectorySet=directorySetEntry.getValue();
          final ModuleData moduleData=dataNode.getData();
          moduleData.setCompileOutputPath(sourceType,sourceDirectorySet.getOutputDir().getAbsolutePath());
          moduleData.setInheritProjectCompileOutputPath(sourceDirectorySet.isCompilerOutputPathInherited());
        }
      }
    }
);
    return;
  }
  IdeaCompilerOutput moduleCompilerOutput=gradleModule.getCompilerOutput();
  File buildDir=null;
  try {
    buildDir=gradleModule.getGradleProject().getBuildDirectory();
  }
 catch (  UnsupportedMethodException ignore) {
  }
  Map<ExternalSystemSourceType,File> compileOutputPaths=ContainerUtil.newHashMap();
  boolean inheritOutputDirs=moduleCompilerOutput != null && moduleCompilerOutput.getInheritOutputDirs();
  ModuleData moduleData=ideModule.getData();
  if (moduleCompilerOutput != null) {
    File classesOutputDir=selectCompileOutputDir(moduleCompilerOutput.getOutputDir(),externalProject,"classes/main");
    compileOutputPaths.put(ExternalSystemSourceType.SOURCE,classesOutputDir);
    File resourcesOutputDir=selectCompileOutputDir(moduleCompilerOutput.getOutputDir(),externalProject,"resources/main");
    compileOutputPaths.put(ExternalSystemSourceType.RESOURCE,resourcesOutputDir);
    File testClassesOuputDir=selectCompileOutputDir(moduleCompilerOutput.getTestOutputDir(),externalProject,"classes/test");
    compileOutputPaths.put(ExternalSystemSourceType.TEST,testClassesOuputDir);
    File testResourcesOutputDir=selectCompileOutputDir(moduleCompilerOutput.getTestOutputDir(),externalProject,"resources/test");
    compileOutputPaths.put(ExternalSystemSourceType.TEST_RESOURCE,testResourcesOutputDir);
  }
  for (  Map.Entry<ExternalSystemSourceType,File> sourceTypeFileEntry : compileOutputPaths.entrySet()) {
    final File outputPath=ObjectUtils.chooseNotNull(sourceTypeFileEntry.getValue(),buildDir);
    if (outputPath != null) {
      moduleData.setCompileOutputPath(sourceTypeFileEntry.getKey(),outputPath.getAbsolutePath());
    }
  }
  moduleData.setInheritProjectCompileOutputPath(inheritOutputDirs);
}
