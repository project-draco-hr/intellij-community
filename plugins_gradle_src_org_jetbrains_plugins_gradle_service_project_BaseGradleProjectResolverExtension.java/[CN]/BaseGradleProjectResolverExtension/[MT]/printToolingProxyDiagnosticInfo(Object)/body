{
  if (!LOG.isDebugEnabled() || obj == null)   return;
  LOG.debug(String.format("obj: %s",obj));
  final Class<?> aClass=obj.getClass();
  LOG.debug(String.format("obj class: %s",aClass));
  LOG.debug(String.format("classloader: %s",aClass.getClassLoader()));
  for (  Method m : aClass.getDeclaredMethods()) {
    LOG.debug(String.format("obj m: %s",m));
  }
  if (obj instanceof Proxy) {
    try {
      final Field hField=ReflectionUtil.findField(obj.getClass(),null,"h");
      hField.setAccessible(true);
      final Object h=hField.get(obj);
      final Field delegateField=ReflectionUtil.findField(h.getClass(),null,"delegate");
      delegateField.setAccessible(true);
      final Object delegate=delegateField.get(h);
      LOG.debug(String.format("delegate: %s",delegate));
      LOG.debug(String.format("delegate class: %s",delegate.getClass()));
      LOG.debug(String.format("delegate classloader: %s",delegate.getClass().getClassLoader()));
      for (      Method m : delegate.getClass().getDeclaredMethods()) {
        LOG.debug(String.format("delegate m: %s",m));
      }
    }
 catch (    NoSuchFieldException e) {
      LOG.debug(e);
    }
catch (    IllegalAccessException e) {
      LOG.debug(e);
    }
  }
}
