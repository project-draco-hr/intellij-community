{
  DependencyScope dependencyScope=getDependencyScope(dependency.getScope());
  if (dependency instanceof ExternalProjectDependency) {
    String moduleId=getModuleId((ExternalProjectDependency)dependency);
    Pair<DataNode<GradleSourceSetData>,ExternalSourceSet> projectPair=sourceSetMap.get(moduleId);
    ModuleDependencyData moduleDependencyData=new ModuleDependencyData(ownerModule.getData().getOwnerModule(),projectPair.first.getData());
    moduleDependencyData.setScope(dependencyScope);
    if ("test".equals(projectPair.second.getName())) {
      moduleDependencyData.setProductionOnTestDependency(true);
    }
    moduleDependencyData.setOrder(dependency.getClasspathOrder());
    moduleDependencyData.setExported(dependency.getExported());
    DataNode<ModuleDependencyData> ideModuleDependencyNode=ownerModule.createChild(ProjectKeys.MODULE_DEPENDENCY,moduleDependencyData);
    for (    ExternalDependency externalDependency : dependency.getDependencies()) {
      buildTransitiveDependency(sourceSetMap,ideModuleDependencyNode,externalDependency,ideProject);
    }
  }
  if (dependency instanceof ExternalLibraryDependency) {
    final LibraryLevel level=LibraryLevel.PROJECT;
    String libraryName=dependency.getId().getPresentableName();
    final LibraryData library=new LibraryData(GradleConstants.SYSTEM_ID,libraryName);
    LibraryDependencyData libraryDependencyData=new LibraryDependencyData(ownerModule.getData().getOwnerModule(),library,level);
    libraryDependencyData.setScope(dependencyScope);
    libraryDependencyData.setOrder(dependency.getClasspathOrder());
    libraryDependencyData.setExported(dependency.getExported());
    library.addPath(LibraryPathType.BINARY,((ExternalLibraryDependency)dependency).getFile().getAbsolutePath());
    File sourcePath=((ExternalLibraryDependency)dependency).getSource();
    if (sourcePath != null) {
      library.addPath(LibraryPathType.SOURCE,sourcePath.getAbsolutePath());
    }
    DataNode<LibraryDependencyData> libraryDependencyDataNode=ownerModule.createChild(ProjectKeys.LIBRARY_DEPENDENCY,libraryDependencyData);
    linkProjectLibrary(ideProject,library);
    for (    ExternalDependency externalDependency : dependency.getDependencies()) {
      buildTransitiveDependency(sourceSetMap,libraryDependencyDataNode,externalDependency,ideProject);
    }
  }
}
