{
  final PsiElement refElement=p.getElementToSearch();
  if (!refElement.isValid() || !(refElement instanceof PsiVariable))   return;
  final String name=((PsiVariable)refElement).getName();
  if (StringUtil.isEmptyOrSpaces(name))   return;
  SearchScope scope=p.getEffectiveSearchScope();
  if (!(scope instanceof LocalSearchScope)) {
    final PsiFile file=refElement.getContainingFile();
    if (file == null)     return;
    scope=new LocalSearchScope(new PsiElement[]{file},null,!PsiSearchHelperImpl.shouldProcessInjectedPsi(p.getScopeDeterminedByUser()));
  }
  PsiElement[] elements=((LocalSearchScope)scope).getScope();
  if (elements.length == 0)   return;
  PsiSearchHelper.SERVICE.getInstance(p.getProject()).processElementsWithWord(new TextOccurenceProcessor(){
    @Override public boolean execute(    @NotNull PsiElement element,    int offsetInElement){
      for (PsiElement child=element.findElementAt(offsetInElement); child != null; child=child.getParent()) {
        if (!name.equals(child.getText())) {
          break;
        }
        if (child instanceof PsiJavaCodeReferenceElement) {
          final PsiJavaCodeReferenceElement ref=(PsiJavaCodeReferenceElement)child;
          if (!ref.isQualified() && !(ref.getParent() instanceof PsiMethodCallExpression) && ref.resolve() == null && ref.advancedResolve(true).getElement() == refElement) {
            consumer.process(ref);
          }
        }
      }
      return true;
    }
  }
,scope,name,UsageSearchContext.ANY,true);
}
