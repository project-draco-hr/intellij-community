{
  FileContent result=null;
  while (result == null) {
    if (ourAllowParallelFileReading) {
      result=myLoadedContentsQueue.poll();
      if (result == null) {
        VirtualFile virtualFileToLoad=myFilesToLoadQueue.poll();
        if (virtualFileToLoad != null) {
          FileContent content=new FileContent(virtualFileToLoad);
          if (isValidFile(virtualFileToLoad)) {
            try {
              content.getBytes();
            }
 catch (            Throwable t) {
              if (t instanceof IOException || t instanceof InvalidVirtualFileAccessException) {
                LOG.info(t);
              }
 else {
                LOG.error(t);
              }
              content.setEmptyContent();
            }
          }
 else {
            content.setEmptyContent();
          }
          return content;
        }
        while (!myContentLoadingThreadTerminated) {
          try {
            result=myLoadedContentsQueue.poll(300,TimeUnit.MILLISECONDS);
            if (result != null)             break;
          }
 catch (          InterruptedException ex) {
            throw new RuntimeException(ex);
          }
        }
      }
    }
 else {
      try {
        result=myLoadedContentsQueue.poll(300,TimeUnit.MILLISECONDS);
      }
 catch (      InterruptedException ex) {
        throw new RuntimeException(ex);
      }
    }
    if (result == null && myContentLoadingThreadTerminated) {
      return null;
    }
  }
  final VirtualFile file=result.getVirtualFile();
  if (file == null) {
    try {
      myLoadedContentsQueue.put(result);
    }
 catch (    InterruptedException ignore) {
    }
    return null;
  }
synchronized (myProceedWithLoadingLock) {
    myLoadedBytesInQueue-=result.getLength();
    if (myLoadedBytesInQueue < MAX_SIZE_OF_BYTES_IN_QUEUE)     myProceedWithLoadingLock.notifyAll();
  }
  return result;
}
