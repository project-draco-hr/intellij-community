{
  int numberOfFiles=files.size();
  if (numberOfFiles == 0)   return;
  myContentsToLoad.set(numberOfFiles);
  final BlockingQueue<VirtualFile> filesQueue=new ArrayBlockingQueue<VirtualFile>(numberOfFiles,false,files);
  for (int i=0; i < ourTasksNumber; ++i) {
    Runnable task=new Runnable(){
      @Override public void run(){
        VirtualFile file=filesQueue.poll();
        if (file == null)         return;
        try {
          indicator.checkCanceled();
          myLoadedContents.offer(loadContent(file,indicator));
          ourExecutor.submit(this);
        }
 catch (        ProcessCanceledException e) {
        }
catch (        InterruptedException e) {
          LOG.error(e);
        }
 finally {
          myContentsToLoad.addAndGet(-1);
        }
      }
    }
;
    ourExecutor.submit(task);
  }
}
