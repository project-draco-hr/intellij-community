{
  return new JavaElementVisitor(){
    @Override public void visitMethodReferenceExpression(    PsiMethodReferenceExpression expression){
      final PsiExpression qualifierExpression=expression.getQualifierExpression();
      final PsiElement referenceNameElement=expression.getReferenceNameElement();
      if (qualifierExpression != null && referenceNameElement != null) {
        final PsiType qualifierType=qualifierExpression.getType();
        if (qualifierType != null) {
          final PsiType functionalInterfaceType=expression.getFunctionalInterfaceType();
          final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType);
          if (interfaceMethod != null) {
            final PsiElement resolve=expression.resolve();
            if (resolve instanceof PsiMethod && (interfaceMethod == resolve || MethodSignatureUtil.isSuperMethod(interfaceMethod,(PsiMethod)resolve)) && TypeConversionUtil.isAssignable(functionalInterfaceType,qualifierType)) {
              holder.registerProblem(referenceNameElement,"Method reference can be replaced with qualifier",new ReplaceMethodRefWithQualifierFix());
            }
          }
        }
      }
    }
  }
;
}
