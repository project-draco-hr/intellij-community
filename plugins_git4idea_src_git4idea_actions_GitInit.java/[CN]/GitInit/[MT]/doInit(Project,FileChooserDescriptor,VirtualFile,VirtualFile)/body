{
  FileChooser.chooseFile(fcd,project,baseDir,new Consumer<VirtualFile>(){
    @Override public void consume(    final VirtualFile root){
      if (GitUtil.isUnderGit(root) && Messages.showYesNoDialog(project,GitBundle.message("init.warning.already.under.git",StringUtil.escapeXml(root.getPresentableUrl())),GitBundle.getString("init.warning.title"),Messages.getWarningIcon()) != Messages.YES) {
        return;
      }
      GitCommandResult result=ServiceManager.getService(Git.class).init(project,root);
      if (!result.success()) {
        GitVcs vcs=GitVcs.getInstance(project);
        if (vcs != null && vcs.getExecutableValidator().checkExecutableAndNotifyIfNeeded()) {
          GitUIUtil.notify(GitVcs.IMPORTANT_ERROR_NOTIFICATION,project,"Git init failed",result.getErrorOutputAsHtmlString(),NotificationType.ERROR,null);
        }
        return;
      }
      if (project.isDefault()) {
        return;
      }
      final String path=root.equals(finalBaseDir) ? "" : root.getPath();
      GitVcs.runInBackground(new Task.Backgroundable(project,GitBundle.getString("common.refreshing")){
        @Override public void run(        @NotNull ProgressIndicator indicator){
          refreshAndConfigureVcsMappings(project,root,path);
        }
      }
);
    }
  }
);
}
