{
  final TodoItem[] todoItems=PsiTodoSearchHelper.SERVICE.getInstance(file.getProject()).findTodoItems(file);
  final List<ProblemDescriptor> result=new ArrayList<>();
  final THashSet<PsiComment> comments=new THashSet<>();
  for (  TodoItem todoItem : todoItems) {
    final PsiComment comment=PsiTreeUtil.getParentOfType(file.findElementAt(todoItem.getTextRange().getStartOffset()),PsiComment.class,false);
    if (comment != null && comments.add(comment)) {
      result.add(manager.createProblemDescriptor(comment,InspectionsBundle.message("todo.comment.problem.descriptor"),isOnTheFly,null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
    }
  }
  return result.toArray(new ProblemDescriptor[result.size()]);
}
