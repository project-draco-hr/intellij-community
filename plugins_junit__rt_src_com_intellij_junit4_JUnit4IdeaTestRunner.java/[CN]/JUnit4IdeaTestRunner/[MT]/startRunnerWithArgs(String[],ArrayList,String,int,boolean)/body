{
  final Request request=JUnit4TestRunnerUtil.buildRequest(args,name,sendTree);
  if (request == null)   return -1;
  final Runner testRunner=request.getRunner();
  Description description=null;
  try {
    description=getDescription(request,testRunner);
    if (description == null) {
      return -1;
    }
    if (myTestsListener instanceof JUnit4TestListener) {
      if (sendTree) {
        ((JUnit4TestListener)myTestsListener).sendTree(description);
      }
      sendTree=false;
    }
 else {
      TreeSender.sendTree(this,description,sendTree);
    }
  }
 catch (  Exception e) {
    System.err.println("Internal Error occured.");
    e.printStackTrace(System.err);
  }
  try {
    final Description runnerDescription=description;
    final JUnitCore runner=new JUnitCore();
    runner.addListener(myTestsListener);
    for (Iterator iterator=listeners.iterator(); iterator.hasNext(); ) {
      final IDEAJUnitListener junitListener=(IDEAJUnitListener)Class.forName((String)iterator.next()).newInstance();
      runner.addListener(new RunListener(){
        private boolean mySuccess;
        public void testStarted(        Description description) throws Exception {
          mySuccess=true;
          junitListener.testStarted(JUnit4ReflectionUtil.getClassName(description),JUnit4ReflectionUtil.getMethodName(description));
        }
        public void testFailure(        Failure failure) throws Exception {
          mySuccess=ComparisonFailureData.isAssertionError(failure.getException().getClass());
        }
        public void testAssumptionFailure(        Failure failure){
          mySuccess=false;
        }
        public void testIgnored(        Description description) throws Exception {
          mySuccess=false;
        }
        public void testFinished(        Description description) throws Exception {
          final String className=JUnit4ReflectionUtil.getClassName(description);
          final String methodName=JUnit4ReflectionUtil.getMethodName(description);
          if (junitListener instanceof IDEAJUnitListenerEx) {
            ((IDEAJUnitListenerEx)junitListener).testFinished(className,methodName,mySuccess);
          }
 else {
            junitListener.testFinished(className,methodName);
          }
        }
        public void testRunStarted(        Description description) throws Exception {
          if (junitListener instanceof IDEAJUnitListenerEx) {
            ((IDEAJUnitListenerEx)junitListener).testRunStarted(description.getDisplayName());
          }
        }
        public void testRunFinished(        Result result) throws Exception {
          if (junitListener instanceof IDEAJUnitListenerEx) {
            ((IDEAJUnitListenerEx)junitListener).testRunFinished(runnerDescription.getDisplayName());
          }
        }
      }
);
    }
    long startTime=System.currentTimeMillis();
    Result result;
    if (count == 1) {
      result=runner.run(testRunner);
    }
 else {
      if (count > 0) {
        boolean success=true;
        int i=0;
        while (i++ < count) {
          result=runner.run(testRunner);
          success&=result.wasSuccessful();
        }
        long endTime=System.currentTimeMillis();
        long runTime=endTime - startTime;
        if (sendTree)         new TimeSender(myRegistry).printHeader(runTime);
        return success ? 0 : -1;
      }
 else {
        boolean success=true;
        while (true) {
          result=runner.run(testRunner);
          success&=result.wasSuccessful();
          if (count == -2 && !success) {
            long endTime=System.currentTimeMillis();
            long runTime=endTime - startTime;
            if (sendTree)             new TimeSender(myRegistry).printHeader(runTime);
            return -1;
          }
        }
      }
    }
    long endTime=System.currentTimeMillis();
    long runTime=endTime - startTime;
    if (sendTree)     new TimeSender(myRegistry).printHeader(runTime);
    if (!result.wasSuccessful()) {
      return -1;
    }
    return 0;
  }
 catch (  Exception e) {
    e.printStackTrace(System.err);
    return -2;
  }
}
