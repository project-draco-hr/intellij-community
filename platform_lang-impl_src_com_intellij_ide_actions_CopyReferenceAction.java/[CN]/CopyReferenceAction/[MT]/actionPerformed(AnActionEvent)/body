{
  DataContext dataContext=e.getDataContext();
  Editor editor=CommonDataKeys.EDITOR.getData(dataContext);
  Project project=CommonDataKeys.PROJECT.getData(dataContext);
  List<PsiElement> elements=getElementsToCopy(editor,dataContext);
  if (!doCopy(elements,project,editor) && editor != null && project != null) {
    Document document=editor.getDocument();
    PsiFile file=PsiDocumentManager.getInstance(project).getCachedPsiFile(document);
    if (file != null) {
      String toCopy=getFileFqn(file) + ":" + (editor.getCaretModel().getLogicalPosition().line + 1);
      CopyPasteManager.getInstance().setContents(new StringSelection(toCopy));
      setStatusBarText(project,toCopy + " has been copied");
    }
    return;
  }
  HighlightManager highlightManager=HighlightManager.getInstance(project);
  EditorColorsManager manager=EditorColorsManager.getInstance();
  TextAttributes attributes=manager.getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES);
  if (elements.size() == 1 && editor != null && project != null) {
    PsiElement nameIdentifier=IdentifierUtil.getNameIdentifier(elements.get(0));
    if (nameIdentifier != null) {
      highlightManager.addOccurrenceHighlights(editor,new PsiElement[]{nameIdentifier},attributes,true,null);
    }
 else {
      PsiReference reference=TargetElementUtilBase.findReference(editor,editor.getCaretModel().getOffset());
      if (reference != null) {
        highlightManager.addOccurrenceHighlights(editor,new PsiReference[]{reference},attributes,true,null);
      }
 else       if (elements != PsiDocumentManager.getInstance(project).getCachedPsiFile(editor.getDocument())) {
        highlightManager.addOccurrenceHighlights(editor,new PsiElement[]{elements.get(0)},attributes,true,null);
      }
    }
  }
}
