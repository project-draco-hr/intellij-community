{
  final String name=getTestName(true);
  final Map<String,PsiElement> map=configureByFile("/refactoring/inlinelocal/" + name + ".before.py");
  try {
    PsiElement element=map.values().iterator().next().getParent();
    PyReferenceExpression ref=null;
    while (element instanceof PyReferenceExpression) {
      ref=(PyReferenceExpression)element;
      PsiElement newElement=((PyReferenceExpression)element).getReference().resolve();
      if (element == newElement) {
        break;
      }
      element=newElement;
    }
    PyInlineLocalHandler.invoke(myFixture.getProject(),myFixture.getEditor(),(PyTargetExpression)element,ref);
    if (expectedError != null)     fail("expected error: '" + expectedError + "', got none");
  }
 catch (  Exception e) {
    if (!Comparing.equal(e.getMessage(),expectedError)) {
      e.printStackTrace();
    }
    assertEquals(expectedError,e.getMessage());
    return;
  }
  myFixture.checkResultByFile("/refactoring/inlinelocal/" + name + ".after.py");
}
