{
  CompilerOptionsFilter[] managers=CompilerOptionsFilter.EP_NAME.getExtensions();
  boolean showExternalBuildSetting=true;
  for (  CompilerOptionsFilter manager : managers) {
    showExternalBuildSetting=manager.isAvailable(Setting.EXTERNAL_BUILD,project);
    if (!showExternalBuildSetting) {
      myDisabledSettings.add(Setting.EXTERNAL_BUILD);
      break;
    }
  }
  for (  Setting setting : Setting.values()) {
    if (!showExternalBuildSetting && EXTERNAL_BUILD_SETTINGS.contains(setting)) {
      myDisabledSettings.add(setting);
    }
 else {
      for (      CompilerOptionsFilter manager : managers) {
        if (!manager.isAvailable(setting,project)) {
          myDisabledSettings.add(setting);
          break;
        }
      }
    }
  }
  Map<Setting,Collection<JComponent>> controls=ContainerUtilRt.newHashMap();
  controls.put(Setting.RESOURCE_PATTERNS,ContainerUtilRt.<JComponent>newArrayList(myResourcePatternsLabel,myResourcePatternsField,myPatternLegendLabel));
  controls.put(Setting.CLEAR_OUTPUT_DIR_ON_REBUILD,Collections.<JComponent>singleton(myCbClearOutputDirectory));
  controls.put(Setting.ADD_NOT_NULL_ASSERTIONS,Collections.<JComponent>singleton(myCbAssertNotNull));
  controls.put(Setting.AUTO_SHOW_FIRST_ERROR_IN_EDITOR,Collections.<JComponent>singleton(myCbAutoShowFirstError));
  controls.put(Setting.DISPLAY_NOTIFICATION_POPUP,Collections.<JComponent>singleton(myCbDisplayNotificationPopup));
  controls.put(Setting.AUTO_MAKE,ContainerUtilRt.<JComponent>newArrayList(myCbEnableAutomake,myEnableAutomakeLegendLabel));
  controls.put(Setting.PARALLEL_COMPILATION,ContainerUtilRt.<JComponent>newArrayList(myCbParallelCompilation,myParallelCompilationLegendLabel));
  controls.put(Setting.REBUILD_MODULE_ON_DEPENDENCY_CHANGE,ContainerUtilRt.<JComponent>newArrayList(myCbRebuildOnDependencyChange));
  controls.put(Setting.HEAP_SIZE,ContainerUtilRt.<JComponent>newArrayList(myHeapSizeLabel,myHeapSizeField));
  controls.put(Setting.COMPILER_VM_OPTIONS,ContainerUtilRt.<JComponent>newArrayList(myVMOptionsLabel,myVMOptionsField,mySharedVMOptionsLabel,mySharedVMOptionsField));
  for (  Setting setting : myDisabledSettings) {
    Collection<JComponent> components=controls.get(setting);
    if (components != null) {
      for (      JComponent component : components) {
        component.setVisible(false);
      }
    }
  }
}
