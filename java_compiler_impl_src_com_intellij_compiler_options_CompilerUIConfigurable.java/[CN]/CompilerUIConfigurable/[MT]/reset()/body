{
  final CompilerConfigurationImpl configuration=(CompilerConfigurationImpl)CompilerConfiguration.getInstance(myProject);
  final CompilerWorkspaceConfiguration workspaceConfiguration=CompilerWorkspaceConfiguration.getInstance(myProject);
  myCbAutoShowFirstError.setSelected(workspaceConfiguration.AUTO_SHOW_ERRORS_IN_EDITOR);
  myCbClearOutputDirectory.setSelected(workspaceConfiguration.CLEAR_OUTPUT_DIRECTORY);
  myCbAssertNotNull.setSelected(configuration.isAddNotNullAssertions());
  myCbEnableAutomake.setSelected(workspaceConfiguration.MAKE_PROJECT_ON_SAVE);
  myCbParallelCompilation.setSelected(workspaceConfiguration.PARALLEL_COMPILATION);
  myCbRebuildOnDependencyChange.setSelected(workspaceConfiguration.REBUILD_ON_DEPENDENCY_CHANGE);
  myHeapSizeField.setText(String.valueOf(workspaceConfiguration.COMPILER_PROCESS_HEAP_SIZE));
  final String options=workspaceConfiguration.COMPILER_PROCESS_ADDITIONAL_VM_OPTIONS;
  myVMOptionsField.setText(options == null ? "" : options.trim());
  configuration.convertPatterns();
  myResourcePatternsField.setText(patternsToString(configuration.getResourceFilePatterns()));
  myEnableAutomakeLegendLabel.setText("(only works while not running / debugging" + (PowerSaveMode.isEnabled() ? ", disabled in Power Save mode" : "") + ")");
}
