{
  final CompilerConfigurationImpl configuration=(CompilerConfigurationImpl)CompilerConfiguration.getInstance(myProject);
  final CompilerWorkspaceConfiguration workspaceConfiguration=CompilerWorkspaceConfiguration.getInstance(myProject);
  myCbAutoShowFirstError.setSelected(workspaceConfiguration.AUTO_SHOW_ERRORS_IN_EDITOR);
  myCbDisplayNotificationPopup.setSelected(workspaceConfiguration.DISPLAY_NOTIFICATION_POPUP);
  myCbClearOutputDirectory.setSelected(workspaceConfiguration.CLEAR_OUTPUT_DIRECTORY);
  myCbAssertNotNull.setSelected(configuration.isAddNotNullAssertions());
  myCbEnableAutomake.setSelected(workspaceConfiguration.MAKE_PROJECT_ON_SAVE);
  myCbParallelCompilation.setSelected(workspaceConfiguration.PARALLEL_COMPILATION);
  myCbRebuildOnDependencyChange.setSelected(workspaceConfiguration.REBUILD_ON_DEPENDENCY_CHANGE);
  final int javacPreferred=JavacConfiguration.getOptions(myProject,JavacConfiguration.class).MAXIMUM_HEAP_SIZE;
  myHeapSizeField.setText(String.valueOf(workspaceConfiguration.getProcessHeapSize(javacPreferred)));
  final String options=workspaceConfiguration.COMPILER_PROCESS_ADDITIONAL_VM_OPTIONS;
  myVMOptionsField.setText(options == null ? "" : options.trim());
  configuration.convertPatterns();
  myResourcePatternsField.setText(patternsToString(configuration.getResourceFilePatterns()));
  if (PowerSaveMode.isEnabled()) {
    myEnableAutomakeLegendLabel.setText("(disabled in Power Save mode)");
    myEnableAutomakeLegendLabel.setFont(myEnableAutomakeLegendLabel.getFont().deriveFont(Font.BOLD));
  }
 else {
    myEnableAutomakeLegendLabel.setText("(only works while not running / debugging)");
    myEnableAutomakeLegendLabel.setFont(myEnableAutomakeLegendLabel.getFont().deriveFont(Font.PLAIN));
  }
}
