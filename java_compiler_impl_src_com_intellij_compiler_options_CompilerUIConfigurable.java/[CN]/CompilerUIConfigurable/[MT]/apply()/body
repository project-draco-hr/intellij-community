{
  CompilerConfigurationImpl configuration=(CompilerConfigurationImpl)CompilerConfiguration.getInstance(myProject);
  final CompilerWorkspaceConfiguration workspaceConfiguration=CompilerWorkspaceConfiguration.getInstance(myProject);
  if (!myDisabledSettings.contains(Setting.AUTO_SHOW_FIRST_ERROR_IN_EDITOR)) {
    workspaceConfiguration.AUTO_SHOW_ERRORS_IN_EDITOR=myCbAutoShowFirstError.isSelected();
  }
  if (!myDisabledSettings.contains(Setting.DISPLAY_NOTIFICATION_POPUP)) {
    workspaceConfiguration.DISPLAY_NOTIFICATION_POPUP=myCbDisplayNotificationPopup.isSelected();
  }
  if (!myDisabledSettings.contains(Setting.CLEAR_OUTPUT_DIR_ON_REBUILD)) {
    workspaceConfiguration.CLEAR_OUTPUT_DIRECTORY=myCbClearOutputDirectory.isSelected();
  }
  if (!myDisabledSettings.contains(Setting.EXTERNAL_BUILD)) {
    if (!myDisabledSettings.contains(Setting.AUTO_MAKE)) {
      workspaceConfiguration.MAKE_PROJECT_ON_SAVE=myCbEnableAutomake.isSelected();
    }
    if (!myDisabledSettings.contains(Setting.PARALLEL_COMPILATION)) {
      workspaceConfiguration.PARALLEL_COMPILATION=myCbParallelCompilation.isSelected();
    }
    if (!myDisabledSettings.contains(Setting.REBUILD_MODULE_ON_DEPENDENCY_CHANGE)) {
      workspaceConfiguration.REBUILD_ON_DEPENDENCY_CHANGE=myCbRebuildOnDependencyChange.isSelected();
    }
    if (!myDisabledSettings.contains(Setting.HEAP_SIZE)) {
      try {
        configuration.setBuildProcessHeapSize(Integer.parseInt(myHeapSizeField.getText().trim()));
      }
 catch (      NumberFormatException ignored) {
        LOG.info(ignored);
      }
    }
    if (!myDisabledSettings.contains(Setting.COMPILER_VM_OPTIONS)) {
      workspaceConfiguration.COMPILER_PROCESS_ADDITIONAL_VM_OPTIONS=myVMOptionsField.getText().trim();
      configuration.setBuildProcessVMOptions(mySharedVMOptionsField.getText().trim());
    }
  }
  if (!myDisabledSettings.contains(Setting.ADD_NOT_NULL_ASSERTIONS)) {
    configuration.setAddNotNullAssertions(myCbAssertNotNull.isSelected());
  }
  if (!myDisabledSettings.contains(Setting.RESOURCE_PATTERNS)) {
    configuration.removeResourceFilePatterns();
    String extensionString=myResourcePatternsField.getText().trim();
    applyResourcePatterns(extensionString,(CompilerConfigurationImpl)CompilerConfiguration.getInstance(myProject));
  }
  BuildManager.getInstance().clearState(myProject);
}
