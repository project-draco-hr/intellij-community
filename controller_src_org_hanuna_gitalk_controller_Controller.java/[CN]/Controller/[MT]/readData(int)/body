{
  progressModel.setMessage(START_MESSAGE);
  progressModel.setState(ProgressModel.State.UNREFINED_PROGRESS);
  final MyTimer gitThink=new MyTimer("git think");
  final MyTimer commitReadTimer=new MyTimer("commits read");
  CommitReader commitReader=new CommitReader(new AbstractProcessOutputReader.ProgressUpdater(){
    @Override public void updateFinishedCount(    int count){
      if (count == 0) {
        gitThink.print();
        commitReadTimer.clear();
      }
      if (count % 100 == 0) {
        progressModel.setMessage("read " + count + " commits");
      }
    }
  }
);
  List<Commit> commits;
  if (monthCount == 0) {
    commits=commitReader.readAllCommits();
  }
 else {
    commits=commitReader.readLastCommits(monthCount);
  }
  commitReadTimer.print();
  RefReader refReader=new RefReader();
  List<Ref> allRefs=refReader.readAllRefs();
  RefsModel refsModel=RefsModel.existedCommitRefs(allRefs,commits);
  progressModel.setMessage("graph build");
  DataPack dataPack=new DataPack(refsModel,commits,new CacheCommitDataGetter());
  progressModel.setState(ProgressModel.State.HIDE);
  return dataPack;
}
