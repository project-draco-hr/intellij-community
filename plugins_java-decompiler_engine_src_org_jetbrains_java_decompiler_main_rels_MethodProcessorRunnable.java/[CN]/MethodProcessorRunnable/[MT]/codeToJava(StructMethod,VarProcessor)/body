{
  StructClass cl=mt.getClassStruct();
  boolean isInitializer=CodeConstants.CLINIT_NAME.equals(mt.getName());
  mt.expandData();
  InstructionSequence seq=mt.getInstructionSequence();
  ControlFlowGraph graph=new ControlFlowGraph(seq);
  DeadCodeHelper.removeDeadBlocks(graph);
  graph.inlineJsr(mt);
  DeadCodeHelper.connectDummyExitBlock(graph);
  DeadCodeHelper.removeGotos(graph);
  ExceptionDeobfuscator.removeCircularRanges(graph);
  ExceptionDeobfuscator.restorePopRanges(graph);
  if (DecompilerContext.getOption(IFernflowerPreferences.REMOVE_EMPTY_RANGES)) {
    ExceptionDeobfuscator.removeEmptyRanges(graph);
  }
  if (DecompilerContext.getOption(IFernflowerPreferences.NO_EXCEPTIONS_RETURN)) {
    DeadCodeHelper.incorporateValueReturns(graph);
  }
  ExceptionDeobfuscator.insertEmptyExceptionHandlerBlocks(graph);
  DeadCodeHelper.mergeBasicBlocks(graph);
  DecompilerContext.getCounterContainer().setCounter(CounterContainer.VAR_COUNTER,mt.getLocalVariables());
  if (ExceptionDeobfuscator.hasObfuscatedExceptions(graph)) {
    DecompilerContext.getLogger().writeMessage("Heavily obfuscated exception ranges found!",IFernflowerLogger.Severity.WARN);
  }
  RootStatement root=DomHelper.parseGraph(graph);
  FinallyProcessor fProc=new FinallyProcessor(varProc);
  while (fProc.iterateGraph(mt,root,graph)) {
    root=DomHelper.parseGraph(graph);
  }
  DomHelper.removeSynchronizedHandler(root);
  SequenceHelper.condenseSequences(root);
  ClearStructHelper.clearStatements(root);
  ExprProcessor proc=new ExprProcessor();
  proc.processStatement(root,cl);
  while (true) {
    StackVarsProcessor stackProc=new StackVarsProcessor();
    stackProc.simplifyStackVars(root,mt,cl);
    varProc.setVarVersions(root);
    if (!new PPandMMHelper().findPPandMM(root)) {
      break;
    }
  }
  while (true) {
    LabelHelper.cleanUpEdges(root);
    while (true) {
      MergeHelper.enhanceLoops(root);
      if (LoopExtractHelper.extractLoops(root)) {
        continue;
      }
      if (!IfHelper.mergeAllIfs(root)) {
        break;
      }
    }
    if (DecompilerContext.getOption(IFernflowerPreferences.IDEA_NOT_NULL_ANNOTATION)) {
      if (IdeaNotNullHelper.removeHardcodedChecks(root,mt)) {
        SequenceHelper.condenseSequences(root);
        StackVarsProcessor stackProc=new StackVarsProcessor();
        stackProc.simplifyStackVars(root,mt,cl);
        varProc.setVarVersions(root);
      }
    }
    LabelHelper.identifyLabels(root);
    if (InlineSingleBlockHelper.inlineSingleBlocks(root)) {
      continue;
    }
    if (isInitializer || !ExitHelper.condenseExits(root)) {
      break;
    }
  }
  ExitHelper.removeRedundantReturns(root);
  SecondaryFunctionsHelper.identifySecondaryFunctions(root);
  varProc.setVarDefinitions(root);
  LabelHelper.replaceContinueWithBreak(root);
  mt.releaseResources();
  return root;
}
