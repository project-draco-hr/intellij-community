{
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  MarkupModel markupModel=editor.getMarkupModel();
  for (  RangeHighlighter highlighter : markupModel.getAllHighlighters()) {
    if (highlighter.getUserData(IN_PREVIEW_USAGE_FLAG) != null) {
      highlighter.dispose();
    }
  }
  for (int i=infos.size() - 1; i >= 0; i--) {
    UsageInfo info=infos.get(i);
    PsiElement psiElement=info.getElement();
    if (psiElement == null || !psiElement.isValid())     continue;
    int offsetInFile=psiElement.getTextOffset();
    EditorColorsManager colorManager=EditorColorsManager.getInstance();
    TextAttributes attributes=colorManager.getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES);
    TextRange elementRange=psiElement.getTextRange();
    TextRange infoRange=info.getRangeInElement();
    TextRange textRange=infoRange == null || infoRange.getStartOffset() > elementRange.getLength() || infoRange.getEndOffset() > elementRange.getLength() ? null : elementRange.cutOut(infoRange);
    if (textRange == null || !highlightOnlyNameElements)     textRange=elementRange;
    if (highlightOnlyNameElements && psiElement instanceof PsiNamedElement && !(psiElement instanceof PsiFile)) {
      PsiFile psiFile=psiElement.getContainingFile();
      PsiElement nameElement=psiFile.findElementAt(offsetInFile);
      if (nameElement != null) {
        textRange=nameElement.getTextRange();
      }
    }
    textRange=InjectedLanguageManager.getInstance(project).injectedToHost(psiElement,textRange);
    RangeHighlighter highlighter=markupModel.addRangeHighlighter(textRange.getStartOffset(),textRange.getEndOffset(),highlightLayer,attributes,HighlighterTargetArea.EXACT_RANGE);
    highlighter.putUserData(IN_PREVIEW_USAGE_FLAG,Boolean.TRUE);
    editor.getCaretModel().moveToOffset(textRange.getEndOffset());
  }
  editor.getScrollingModel().scrollToCaret(ScrollType.CENTER);
}
