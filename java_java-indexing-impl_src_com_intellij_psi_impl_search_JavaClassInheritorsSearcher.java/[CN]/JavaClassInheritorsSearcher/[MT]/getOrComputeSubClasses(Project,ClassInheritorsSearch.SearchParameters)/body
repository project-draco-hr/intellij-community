{
  List<PsiClass> computed=null;
  PsiClass baseClass=parameters.getClassToProcess();
  while (true) {
    Collection<PsiClass> cached=null;
    List<Pair<ClassInheritorsSearch.SearchParameters,Collection<PsiClass>>> cachedPairs=HighlightingCaches.getInstance(project).ALL_SUB_CLASSES.get(baseClass);
    if (cachedPairs != null) {
      for (      Pair<ClassInheritorsSearch.SearchParameters,Collection<PsiClass>> pair : cachedPairs) {
        ClassInheritorsSearch.SearchParameters cachedParams=pair.getFirst();
        if (cachedParams.equals(parameters)) {
          cached=pair.getSecond();
          break;
        }
      }
    }
    if (cached != null) {
      return cached;
    }
    if (computed == null) {
      computed=new ArrayList<>();
      boolean success=getAllSubClasses(project,parameters,new CommonProcessors.CollectProcessor<>(computed));
      assert success;
    }
    if (cachedPairs != null) {
      cachedPairs.add(Pair.create(parameters,computed));
      break;
    }
    List<Pair<ClassInheritorsSearch.SearchParameters,Collection<PsiClass>>> newCachedPairs=ContainerUtil.createConcurrentList(Collections.singletonList(Pair.create(parameters,computed)));
    if (HighlightingCaches.getInstance(project).ALL_SUB_CLASSES.putIfAbsent(baseClass,newCachedPairs) == null) {
      break;
    }
  }
  return computed;
}
