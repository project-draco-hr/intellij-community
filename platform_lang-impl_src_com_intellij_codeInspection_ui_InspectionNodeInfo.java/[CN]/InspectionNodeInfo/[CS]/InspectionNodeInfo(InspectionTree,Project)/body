{
  setLayout(new GridBagLayout());
  setBorder(IdeBorderFactory.createEmptyBorder(11,0,0,0));
  final InspectionToolWrapper toolWrapper=tree.getSelectedToolWrapper(false);
  LOG.assertTrue(toolWrapper != null);
  InspectionProfileImpl currentProfile=InspectionProjectProfileManager.getInstance(project).getCurrentProfile();
  final ToolsImpl tools=currentProfile.getTools(toolWrapper.getShortName(),project);
  boolean enabled=tools.isEnabled();
  JPanel titlePanel=new JPanel();
  titlePanel.setLayout(new BoxLayout(titlePanel,BoxLayout.LINE_AXIS));
  JBLabelDecorator label=JBLabelDecorator.createJBLabelDecorator().setBold(true);
  label.setText(toolWrapper.getDisplayName() + " inspection");
  titlePanel.add(label);
  titlePanel.add(Box.createHorizontalStrut(JBUI.scale(16)));
  if (!enabled) {
    JBLabel enabledLabel=new JBLabel();
    enabledLabel.setForeground(JBColor.GRAY);
    enabledLabel.setText("Disabled");
    titlePanel.add(enabledLabel);
  }
  add(titlePanel,new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new JBInsets(0,12,5,16),0,0));
  JEditorPane description=new JEditorPane();
  description.setContentType(UIUtil.HTML_MIME);
  description.setEditable(false);
  description.setOpaque(false);
  description.setBackground(UIUtil.getLabelBackground());
  description.addHyperlinkListener(BrowserHyperlinkListener.INSTANCE);
  final String toolDescription=toolWrapper.loadDescription();
  SingleInspectionProfilePanel.readHTML(description,SingleInspectionProfilePanel.toHTML(description,toolDescription == null ? "" : toolDescription,false));
  JScrollPane pane=ScrollPaneFactory.createScrollPane(description,true);
  int maxWidth=getFontMetrics(UIUtil.getLabelFont()).charWidth('f') * 110 - pane.getMinimumSize().width;
  pane.setMaximumSize(new Dimension(maxWidth,Integer.MAX_VALUE));
  pane.setAlignmentX(0);
  add(StatelessCardLayout.wrap(pane),new GridBagConstraints(0,1,1,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new JBInsets(0,10,0,0),0,0));
  JButton enableButton=new JButton((enabled ? "Disable" : "Enable") + " inspection");
  new ClickListener(){
    @Override public boolean onClick(    @NotNull MouseEvent event,    int clickCount){
      InspectionsConfigTreeTable.setToolEnabled(!enabled,currentProfile,toolWrapper.getShortName(),project);
      tree.getContext().getView().profileChanged();
      return true;
    }
  }
.installOn(enableButton);
  JButton runInspectionOnButton=new JButton(InspectionsBundle.message("run.inspection.on.file.intention.text"));
  new ClickListener(){
    @Override public boolean onClick(    @NotNull MouseEvent event,    int clickCount){
      RunInspectionAction.runInspection(project,toolWrapper.getShortName(),null,null,null);
      return true;
    }
  }
.installOn(runInspectionOnButton);
  JPanel buttons=new JPanel();
  buttons.setLayout(new BoxLayout(buttons,BoxLayout.LINE_AXIS));
  buttons.add(enableButton);
  buttons.add(Box.createHorizontalStrut(JBUI.scale(3)));
  buttons.add(runInspectionOnButton);
  add(buttons,new GridBagConstraints(0,2,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new JBInsets(15,9,9,0),0,0));
}
