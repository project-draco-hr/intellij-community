{
  if (!FileModificationService.getInstance().preparePsiElementForWrite(cls)) {
    return null;
  }
  String paramList=ancestorInit != null ? ancestorInit.getParameterList().getText() : "(self)";
  String functionText="def " + PyNames.INIT + paramList+ ":\n";
  if (ancestorInit == null)   functionText+="    pass";
 else {
    final PyClass ancestorClass=ancestorInit.getContainingClass();
    if (ancestorClass != null && ancestorClass != PyBuiltinCache.getInstance(ancestorInit).getClass("object") && !FAKE_OLD_BASE.equals(ancestorClass.getName())) {
      StringBuilder sb=new StringBuilder();
      PyParameter[] params=ancestorInit.getParameterList().getParameters();
      boolean seen=false;
      if (cls.isNewStyleClass()) {
        sb.append("super(");
        if (!LanguageLevel.forElement(cls).isPy3K()) {
          sb.append(cls.getName());
          String self_name=params[0].getName();
          sb.append(", ").append(self_name);
        }
        sb.append(").").append(PyNames.INIT).append("(");
      }
 else {
        sb.append(ancestorClass.getName());
        sb.append(".__init__(self");
        seen=true;
      }
      for (int i=1; i < params.length; i+=1) {
        if (seen)         sb.append(", ");
 else         seen=true;
        sb.append(params[i].getText());
      }
      sb.append(")");
      functionText+="    " + sb.toString();
    }
 else {
      functionText+="    pass";
    }
  }
  return PyElementGenerator.getInstance(project).createFromText(LanguageLevel.getDefault(),PyFunction.class,functionText,new int[]{0});
}
