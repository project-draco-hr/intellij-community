{
  if (cls != null && itemName != null) {
    PyFunction init=cls.findMethodByName(PyNames.INIT,false,null);
    if (init != null) {
      return appendToMethod(init,callback);
    }
 else {
      for (      PyClass ancestor : cls.getAncestorClasses(null)) {
        init=ancestor.findMethodByName(PyNames.INIT,false,null);
        if (init != null)         break;
      }
      PyFunction newInit=createInitMethod(project,cls,init);
      if (newInit == null) {
        return null;
      }
      appendToMethod(newInit,callback);
      PsiElement addAnchor=null;
      PyFunction[] meths=cls.getMethods();
      if (meths.length > 0)       addAnchor=meths[0].getPrevSibling();
      PyStatementList clsContent=cls.getStatementList();
      newInit=(PyFunction)clsContent.addAfter(newInit,addAnchor);
      PyUtil.showBalloon(project,PyBundle.message("QFIX.added.constructor.$0.for.field.$1",cls.getName(),itemName),MessageType.INFO);
      final PyStatementList statementList=newInit.getStatementList();
      final PyStatement[] statements=statementList.getStatements();
      return statements.length != 0 ? statements[0] : null;
    }
  }
  return null;
}
