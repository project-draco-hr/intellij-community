{
  if (settings != null) {
    myHelper.ensureInstalledWrapper(id,projectPath,settings,listener);
  }
  for (  GradleTaskManagerExtension gradleTaskManagerExtension : GradleTaskManagerExtension.EP_NAME.getExtensions()) {
    if (gradleTaskManagerExtension.executeTasks(id,taskNames,projectPath,settings,vmOptions,debuggerSetup,listener))     return;
  }
  Function<ProjectConnection,Void> f=new Function<ProjectConnection,Void>(){
    @Override public Void fun(    ProjectConnection connection){
      BuildLauncher launcher=myHelper.getBuildLauncher(id,connection,settings,listener,vmOptions);
      if (!StringUtil.isEmpty(debuggerSetup)) {
        try {
          final File tempFile=FileUtil.createTempFile("init",".gradle");
          tempFile.deleteOnExit();
          final String[] lines={"gradle.taskGraph.beforeTask { Task task ->","    if (task instanceof JavaForkOptions) {","        task.jvmArgs '" + debuggerSetup.trim() + '\'',"}}"};
          FileUtil.writeToFile(tempFile,StringUtil.join(lines,SystemProperties.getLineSeparator()));
          launcher.withArguments("--init-script",tempFile.getAbsolutePath());
        }
 catch (        IOException e) {
          throw new ExternalSystemException(e);
        }
      }
      launcher.forTasks(ArrayUtil.toStringArray(taskNames));
      launcher.run();
      return null;
    }
  }
;
  myHelper.execute(projectPath,settings,f);
}
