{
  if (ExternalSystemApiUtil.isInProcessMode(GradleConstants.SYSTEM_ID)) {
    for (    GradleTaskManagerExtension gradleTaskManagerExtension : GradleTaskManagerExtension.EP_NAME.getExtensions()) {
      if (gradleTaskManagerExtension.executeTasks(id,taskNames,projectPath,settings,vmOptions,scriptParameters,debuggerSetup,listener)) {
        return;
      }
    }
  }
  if (!scriptParameters.contains("--tests") && taskNames.contains("test")) {
    ContainerUtil.addAll(scriptParameters,"--tests","*");
  }
  Function<ProjectConnection,Void> f=new Function<ProjectConnection,Void>(){
    @Override public Void fun(    ProjectConnection connection){
      final List<String> initScripts=ContainerUtil.newArrayList();
      final GradleProjectResolverExtension projectResolverChain=GradleProjectResolver.createProjectResolverChain(settings);
      for (GradleProjectResolverExtension resolverExtension=projectResolverChain; resolverExtension != null; resolverExtension=resolverExtension.getNext()) {
        final String resolverClassName=resolverExtension.getClass().getName();
        resolverExtension.enhanceTaskProcessing(taskNames,debuggerSetup,new Consumer<String>(){
          @Override public void consume(          String script){
            if (StringUtil.isNotEmpty(script)) {
              ContainerUtil.addAllNotNull(initScripts,"//-- Generated by " + resolverClassName,script,"//");
            }
          }
        }
);
      }
      if (!initScripts.isEmpty()) {
        try {
          final File tempFile=FileUtil.createTempFile("init",".gradle");
          tempFile.deleteOnExit();
          FileUtil.writeToFile(tempFile,StringUtil.join(initScripts,SystemProperties.getLineSeparator()));
          ContainerUtil.addAll(scriptParameters,GradleConstants.INIT_SCRIPT_CMD_OPTION,tempFile.getAbsolutePath());
        }
 catch (        IOException e) {
          throw new ExternalSystemException(e);
        }
      }
      BuildLauncher launcher=myHelper.getBuildLauncher(id,connection,settings,listener,vmOptions,scriptParameters);
      launcher.forTasks(ArrayUtil.toStringArray(taskNames));
      final CancellationTokenSource cancellationTokenSource=GradleConnector.newCancellationTokenSource();
      launcher.withCancellationToken(cancellationTokenSource.token());
      myCancellationMap.put(id,cancellationTokenSource);
      try {
        launcher.run();
      }
  finally {
        myCancellationMap.remove(id);
      }
      return null;
    }
  }
;
  myHelper.execute(projectPath,settings,f);
}
