{
  if (ExternalSystemApiUtil.isInProcessMode(GradleConstants.SYSTEM_ID)) {
    for (    GradleTaskManagerExtension gradleTaskManagerExtension : GradleTaskManagerExtension.EP_NAME.getExtensions()) {
      if (gradleTaskManagerExtension.executeTasks(id,taskNames,projectPath,settings,vmOptions,scriptParameters,debuggerSetup,listener)) {
        return;
      }
    }
  }
  if (!scriptParameters.contains("--tests") && taskNames.contains("test")) {
    ContainerUtil.addAll(scriptParameters,"--tests","*");
  }
  Function<ProjectConnection,Void> f=new Function<ProjectConnection,Void>(){
    @Override public Void fun(    ProjectConnection connection){
      if (!StringUtil.isEmpty(debuggerSetup)) {
        try {
          final File tempFile=FileUtil.createTempFile("init",".gradle");
          tempFile.deleteOnExit();
          final String[] lines={"gradle.taskGraph.beforeTask { Task task ->","    if (task instanceof JavaForkOptions) {","        task.jvmArgs '" + debuggerSetup.trim() + '\'',"}}"};
          FileUtil.writeToFile(tempFile,StringUtil.join(lines,SystemProperties.getLineSeparator()));
          ContainerUtil.addAll(scriptParameters,GradleConstants.INIT_SCRIPT_CMD_OPTION,tempFile.getAbsolutePath());
        }
 catch (        IOException e) {
          throw new ExternalSystemException(e);
        }
      }
      BuildLauncher launcher=myHelper.getBuildLauncher(id,connection,settings,listener,vmOptions,scriptParameters);
      launcher.forTasks(ArrayUtil.toStringArray(taskNames));
      launcher.run();
      return null;
    }
  }
;
  myHelper.execute(projectPath,settings,f);
}
