{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (methodName == null || !s_assertMethods.contains(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  final boolean messageOnFirstPosition=AssertHint.isMessageOnFirstPosition(containingClass);
  final boolean messageOnLastPosition=AssertHint.isMessageOnLastPosition(containingClass);
  if (!messageOnFirstPosition && !messageOnLastPosition) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final int parameterCount=parameterList.getParametersCount();
  if (parameterCount < 2 && methodName.startsWith("assert")) {
    registerMethodCallError(expression);
    return;
  }
  if (parameterCount < 1) {
    registerMethodCallError(expression);
    return;
  }
  final PsiType stringType=TypeUtils.getStringType(expression);
  final PsiParameter[] parameters=parameterList.getParameters();
  final PsiType parameterType1=parameters[messageOnFirstPosition ? 0 : parameters.length - 1].getType();
  if (!parameterType1.equals(stringType)) {
    registerMethodCallError(expression);
    return;
  }
  if (parameters.length != 2) {
    return;
  }
  final PsiType parameterType2=parameters[messageOnFirstPosition ? parameterCount - 1 : 0].getType();
  if (!parameterType2.equals(stringType)) {
    return;
  }
  registerMethodCallError(expression);
}
