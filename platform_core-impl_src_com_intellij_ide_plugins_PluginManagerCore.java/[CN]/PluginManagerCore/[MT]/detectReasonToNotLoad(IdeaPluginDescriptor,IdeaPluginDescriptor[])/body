{
  final String idString=descriptor.getPluginId().getIdString();
  if (CORE_PLUGIN_ID.equals(idString)) {
    return null;
  }
  final String pluginId=System.getProperty("idea.load.plugins.id");
  if (pluginId == null) {
    if (descriptor instanceof IdeaPluginDescriptorImpl && !descriptor.isEnabled())     return "Plugin is not enabled";
    if (!shouldLoadPlugins())     return "Plugins should not be loaded";
  }
  final List<String> pluginIds=pluginId == null ? null : StringUtil.split(pluginId,",");
  final boolean checkModuleDependencies=!ourModulesToContainingPlugins.isEmpty() && !ourModulesToContainingPlugins.containsKey("com.intellij.modules.all");
  if (checkModuleDependencies && !hasModuleDependencies(descriptor)) {
    return "Plugin does not include any module dependency tags in its plugin.xml therefore is assumed legacy and can be loaded only in IntelliJ IDEA";
  }
  String reasonToNotLoad;
  final String loadPluginCategory=System.getProperty("idea.load.plugins.category");
  if (loadPluginCategory != null) {
    reasonToNotLoad=loadPluginCategory.equals(descriptor.getCategory()) ? null : "Plugin category doesn't match 'idea.load.plugins.category' value";
  }
 else {
    if (pluginIds != null) {
      reasonToNotLoad=pluginIds.contains(idString) ? null : "'idea.load.plugins.id' doesn't contain this plugin id";
      if (reasonToNotLoad != null) {
        Map<PluginId,IdeaPluginDescriptor> map=new THashMap<PluginId,IdeaPluginDescriptor>();
        for (        IdeaPluginDescriptor pluginDescriptor : loaded) {
          map.put(pluginDescriptor.getPluginId(),pluginDescriptor);
        }
        addModulesAsDependents(map);
        for (        String id : pluginIds) {
          final IdeaPluginDescriptor descriptorFromProperty=map.get(PluginId.getId(id));
          if (descriptorFromProperty != null && isDependent(descriptorFromProperty,descriptor.getPluginId(),map,checkModuleDependencies)) {
            reasonToNotLoad=null;
            break;
          }
        }
      }
    }
 else {
      reasonToNotLoad=getDisabledPlugins().contains(idString) ? "Plugin is disabled" : null;
    }
    if (reasonToNotLoad == null && descriptor instanceof IdeaPluginDescriptorImpl) {
      if (isIncompatible(descriptor))       return "Plugin since-build or until-build don't match this product's build number";
    }
  }
  return reasonToNotLoad;
}
