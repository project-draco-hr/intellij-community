{
  IdeaPluginDescriptorImpl descriptor=null;
  final boolean directory=file.isDirectory();
  if (directory) {
    descriptor=loadDescriptorFromDir(file,fileName);
    if (descriptor == null) {
      File libDir=new File(file,"lib");
      if (!libDir.isDirectory()) {
        return null;
      }
      final File[] files=libDir.listFiles();
      if (files == null || files.length == 0) {
        return null;
      }
      Arrays.sort(files,new Comparator<File>(){
        @Override public int compare(        @NotNull File o1,        @NotNull File o2){
          if (o2.getName().startsWith(file.getName()))           return Integer.MAX_VALUE;
          if (o1.getName().startsWith(file.getName()))           return -Integer.MAX_VALUE;
          if (o2.getName().startsWith("resources"))           return -Integer.MAX_VALUE;
          if (o1.getName().startsWith("resources"))           return Integer.MAX_VALUE;
          return 0;
        }
      }
);
      PluginXmlPathResolver pathResolver=new PluginXmlPathResolver(files);
      for (      final File f : files) {
        if (FileUtil.isJarOrZip(f)) {
          descriptor=loadDescriptorFromJar(f,fileName,pathResolver);
          if (descriptor != null) {
            descriptor.setPath(file);
            break;
          }
        }
 else         if (f.isDirectory()) {
          IdeaPluginDescriptorImpl descriptor1=loadDescriptorFromDir(f,fileName);
          if (descriptor1 != null) {
            if (descriptor != null) {
              getLogger().info("Cannot load " + file + " because two or more plugin.xml's detected");
              return null;
            }
            descriptor=descriptor1;
            descriptor.setPath(file);
          }
        }
      }
    }
  }
 else   if (StringUtil.endsWithIgnoreCase(file.getName(),".jar") && file.exists()) {
    descriptor=loadDescriptorFromJar(file,fileName,JDOMXIncluder.DEFAULT_PATH_RESOLVER);
  }
  if (descriptor != null) {
    resolveOptionalDescriptors(fileName,descriptor,new Function<String,IdeaPluginDescriptorImpl>(){
      @Override public IdeaPluginDescriptorImpl fun(      String optionalDescriptorName){
        IdeaPluginDescriptorImpl optionalDescriptor=loadDescriptor(file,optionalDescriptorName);
        if (optionalDescriptor == null && directory) {
          URL resource=PluginManagerCore.class.getClassLoader().getResource(META_INF + '/' + optionalDescriptorName);
          if (resource != null) {
            optionalDescriptor=loadDescriptorFromResource(resource);
          }
        }
        return optionalDescriptor;
      }
    }
);
  }
  return descriptor;
}
