{
  final Graph<PluginId> graph=createPluginIdGraph(idToDescriptorMap);
  final DFSTBuilder<PluginId> builder=new DFSTBuilder<PluginId>(graph);
  if (!builder.isAcyclic()) {
    builder.getSCCs().forEach(new TIntProcedure(){
      int myTNumber=0;
      @Override public boolean execute(      int size){
        if (size > 1) {
          for (int j=0; j < size; j++) {
            idToDescriptorMap.get(builder.getNodeByTNumber(myTNumber + j)).setEnabled(false);
          }
        }
        myTNumber+=size;
        return true;
      }
    }
);
  }
  final Comparator<PluginId> idComparator=builder.comparator();
  return new Comparator<IdeaPluginDescriptor>(){
    @Override public int compare(    @NotNull IdeaPluginDescriptor o1,    @NotNull IdeaPluginDescriptor o2){
      final PluginId pluginId1=o1.getPluginId();
      final PluginId pluginId2=o2.getPluginId();
      if (pluginId1.getIdString().equals(CORE_PLUGIN_ID))       return -1;
      if (pluginId2.getIdString().equals(CORE_PLUGIN_ID))       return 1;
      return idComparator.compare(pluginId1,pluginId2);
    }
  }
;
}
