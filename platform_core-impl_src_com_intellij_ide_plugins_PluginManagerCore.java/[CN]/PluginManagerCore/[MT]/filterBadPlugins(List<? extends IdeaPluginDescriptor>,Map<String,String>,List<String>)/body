{
  final Map<PluginId,IdeaPluginDescriptor> idToDescriptorMap=new THashMap<PluginId,IdeaPluginDescriptor>();
  boolean pluginsWithoutIdFound=false;
  for (Iterator<? extends IdeaPluginDescriptor> it=result.iterator(); it.hasNext(); ) {
    final IdeaPluginDescriptor descriptor=it.next();
    final PluginId id=descriptor.getPluginId();
    if (id == null) {
      pluginsWithoutIdFound=true;
    }
 else     if (idToDescriptorMap.containsKey(id)) {
      errors.add(IdeBundle.message("message.duplicate.plugin.id") + id);
      it.remove();
    }
 else     if (descriptor.isEnabled()) {
      idToDescriptorMap.put(id,descriptor);
    }
  }
  addModulesAsDependents(idToDescriptorMap);
  final List<String> disabledPluginIds=new SmartList<String>();
  final LinkedHashSet<String> faultyDescriptors=new LinkedHashSet<String>();
  for (final Iterator<? extends IdeaPluginDescriptor> it=result.iterator(); it.hasNext(); ) {
    final IdeaPluginDescriptor pluginDescriptor=it.next();
    checkDependants(pluginDescriptor,new Function<PluginId,IdeaPluginDescriptor>(){
      @Override public IdeaPluginDescriptor fun(      final PluginId pluginId){
        return idToDescriptorMap.get(pluginId);
      }
    }
,new Condition<PluginId>(){
      @Override public boolean value(      final PluginId pluginId){
        if (!idToDescriptorMap.containsKey(pluginId)) {
          pluginDescriptor.setEnabled(false);
          if (!pluginId.getIdString().startsWith(MODULE_DEPENDENCY_PREFIX)) {
            faultyDescriptors.add(pluginId.getIdString());
            disabledPluginIds.add(pluginDescriptor.getPluginId().getIdString());
            final String name=pluginDescriptor.getName();
            final IdeaPluginDescriptor descriptor=idToDescriptorMap.get(pluginId);
            String pluginName;
            if (descriptor == null) {
              pluginName=pluginId.getIdString();
              if (disabledPluginNames.containsKey(pluginName)) {
                pluginName=disabledPluginNames.get(pluginName);
              }
            }
 else {
              pluginName=descriptor.getName();
            }
            boolean disabled=getDisabledPlugins().contains(pluginId.getIdString());
            errors.add(IdeBundle.message(disabled ? "error.required.plugin.disabled" : "error.required.plugin.not.installed",name,pluginName));
          }
          it.remove();
          return false;
        }
        return true;
      }
    }
);
  }
  if (!disabledPluginIds.isEmpty()) {
    myPlugins2Disable=disabledPluginIds;
    myPlugins2Enable=faultyDescriptors;
    String error="<br><a href=\"" + DISABLE + "\">Disable ";
    if (disabledPluginIds.size() == 1) {
      final PluginId pluginId2Disable=PluginId.getId(disabledPluginIds.iterator().next());
      error+=idToDescriptorMap.containsKey(pluginId2Disable) ? idToDescriptorMap.get(pluginId2Disable).getName() : pluginId2Disable.getIdString();
    }
 else {
      error+="not loaded plugins";
    }
    errors.add(error + "</a>");
    boolean possibleToEnable=true;
    for (    String descriptor : faultyDescriptors) {
      if (disabledPluginNames.get(descriptor) == null) {
        possibleToEnable=false;
        break;
      }
    }
    if (possibleToEnable) {
      errors.add("<a href=\"" + ENABLE + "\">Enable "+ (faultyDescriptors.size() == 1 ? disabledPluginNames.get(faultyDescriptors.iterator().next()) : " all necessary plugins")+ "</a>");
    }
    errors.add("<a href=\"" + EDIT + "\">Open plugin manager</a>");
  }
  if (pluginsWithoutIdFound) {
    errors.add(IdeBundle.message("error.plugins.without.id.found"));
  }
}
