{
  final String idString=descriptor.getPluginId().getIdString();
  if (CORE_PLUGIN_ID.equals(idString)) {
    return true;
  }
  final String pluginId=System.getProperty("idea.load.plugins.id");
  if (pluginId == null) {
    if (descriptor instanceof IdeaPluginDescriptorImpl && !descriptor.isEnabled())     return false;
    if (!shouldLoadPlugins())     return false;
  }
  final List<String> pluginIds=pluginId == null ? null : StringUtil.split(pluginId,",");
  final boolean checkModuleDependencies=!ourModulesToContainingPlugins.isEmpty() && !ourModulesToContainingPlugins.containsKey("com.intellij.modules.all");
  if (checkModuleDependencies && !hasModuleDependencies(descriptor)) {
    return false;
  }
  boolean shouldLoad;
  final String loadPluginCategory=System.getProperty("idea.load.plugins.category");
  if (loadPluginCategory != null) {
    shouldLoad=loadPluginCategory.equals(descriptor.getCategory());
  }
 else {
    if (pluginIds != null) {
      shouldLoad=pluginIds.contains(idString);
      if (!shouldLoad) {
        Map<PluginId,IdeaPluginDescriptor> map=new THashMap<PluginId,IdeaPluginDescriptor>();
        for (        IdeaPluginDescriptor pluginDescriptor : loaded) {
          map.put(pluginDescriptor.getPluginId(),pluginDescriptor);
        }
        addModulesAsDependents(map);
        for (        String id : pluginIds) {
          final IdeaPluginDescriptor descriptorFromProperty=map.get(PluginId.getId(id));
          if (descriptorFromProperty != null && isDependent(descriptorFromProperty,descriptor.getPluginId(),map,checkModuleDependencies)) {
            shouldLoad=true;
            break;
          }
        }
      }
    }
 else {
      shouldLoad=!getDisabledPlugins().contains(idString);
    }
    if (shouldLoad && descriptor instanceof IdeaPluginDescriptorImpl) {
      if (isIncompatible(descriptor))       return false;
    }
  }
  return shouldLoad;
}
