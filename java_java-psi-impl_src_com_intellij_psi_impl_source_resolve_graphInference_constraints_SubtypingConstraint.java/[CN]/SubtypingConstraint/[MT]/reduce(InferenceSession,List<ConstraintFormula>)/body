{
  if (myT instanceof PsiWildcardType) {
    final PsiType tBound=((PsiWildcardType)myT).getBound();
    if (tBound == null) {
      return true;
    }
    if (myS instanceof PsiCapturedWildcardType) {
      myS=((PsiCapturedWildcardType)myS).getWildcard();
    }
    if (((PsiWildcardType)myT).isExtends()) {
      if (tBound.equalsToText(CommonClassNames.JAVA_LANG_OBJECT)) {
        return true;
      }
      if (myS instanceof PsiWildcardType) {
        final PsiType sBound=((PsiWildcardType)myS).getBound();
        if (sBound == null) {
          return true;
        }
        if (((PsiWildcardType)myS).isExtends()) {
          constraints.add(new StrictSubtypingConstraint(tBound,sBound));
          return true;
        }
      }
 else {
        constraints.add(new StrictSubtypingConstraint(tBound,myS));
        return true;
      }
      return false;
    }
 else {
      if (myS instanceof PsiWildcardType) {
        final PsiType sBound=((PsiWildcardType)myS).getBound();
        if (sBound != null && ((PsiWildcardType)myS).isSuper()) {
          constraints.add(new StrictSubtypingConstraint(sBound,tBound));
          return true;
        }
      }
 else {
        constraints.add(new StrictSubtypingConstraint(myS,tBound));
        return true;
      }
    }
    return false;
  }
 else {
    InferenceVariable inferenceVariable=session.getInferenceVariable(myT);
    if (myS instanceof PsiWildcardType) {
      return inferenceVariable != null;
    }
 else {
      final InferenceVariable inferenceVariableS=session.getInferenceVariable(myS);
      if (inferenceVariableS != null) {
        inferenceVariableS.addBound(myT,InferenceBound.EQ);
        return true;
      }
      if (inferenceVariable != null) {
        inferenceVariable.addBound(myS,InferenceBound.EQ);
        return true;
      }
      constraints.add(new StrictSubtypingConstraint(myT,myS));
      return true;
    }
  }
}
