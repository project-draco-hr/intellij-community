{
  if (ignore())   return;
  createProjectSubFile("src/resources/a.txt","a");
  VirtualFile configDir=createProjectSubDir("src/config");
  createProjectSubFile("src/config/b.txt","b");
  createProjectSubFile("src/config/JavaClass.java","class JavaClass {}");
  createProjectSubFile("src/config/xxx.xxx","xxx");
  final VirtualFile excludedDir=createProjectSubDir("src/excluded");
  createProjectSubFile("src/excluded/c.txt","c");
  importProject("<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>");
  Module module=ModuleManager.getInstance(myProject).findModuleByName("project");
  PsiTestUtil.addSourceRoot(module,configDir);
  PsiTestUtil.addSourceRoot(module,excludedDir);
  new WriteCommandAction.Simple(myProject){
    @Override protected void run() throws Throwable {
      CompilerConfiguration.getInstance(myProject).getExcludedEntriesConfiguration().addExcludeEntryDescription(new ExcludeEntryDescription(excludedDir,true,false,getTestRootDisposable()));
      setModulesOutput(myProjectRoot.createChildDirectory(this,"output"),"project","m1","m2");
    }
  }
.execute().throwException();
  compileModules("project");
  assertCopied("output/a.txt");
  assertCopied("output/b.txt");
  assertNotCopied("output/JavaClass.java");
  assertNotCopied("output/xxx.xxx");
  assertNotCopied("output/c.txt");
}
