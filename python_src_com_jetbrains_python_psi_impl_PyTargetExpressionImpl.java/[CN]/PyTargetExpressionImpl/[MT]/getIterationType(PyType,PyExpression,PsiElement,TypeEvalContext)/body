{
  PyType result=null;
  if (iterableType instanceof PyCollectionType) {
    result=((PyCollectionType)iterableType).getElementType(context);
    if (iterableType instanceof PyClassType) {
      final PyClass cls=((PyClassType)iterableType).getPyClass();
      if (result instanceof PyTupleType && PyABCUtil.isSubclass(cls,PyNames.MAPPING)) {
        final PyTupleType mappingType=(PyTupleType)result;
        if (mappingType.getElementCount() == 2) {
          result=mappingType.getElementType(0);
        }
      }
    }
  }
 else   if (iterableType instanceof PyTupleType) {
    final PyTupleType tupleType=(PyTupleType)iterableType;
    final List<PyType> memberTypes=new ArrayList<PyType>();
    for (int i=0; i < tupleType.getElementCount(); i++) {
      memberTypes.add(tupleType.getElementType(i));
    }
    return PyUnionType.union(memberTypes);
  }
 else   if (iterableType instanceof PyUnionType) {
    final Collection<PyType> members=((PyUnionType)iterableType).getMembers();
    final List<PyType> iterationTypes=new ArrayList<PyType>();
    for (    PyType member : members) {
      iterationTypes.add(getIterationType(member,source,anchor,context));
    }
    return PyUnionType.union(iterationTypes);
  }
 else   if (iterableType != null && PyABCUtil.isSubtype(iterableType,PyNames.ITERATOR,context)) {
    final PyFunction iterateMethod=findMethodByName(iterableType,PyNames.ITER,context);
    PyType iterateMethodType=null;
    if (iterateMethod != null) {
      iterateMethodType=getContextSensitiveType(iterateMethod,context,source);
    }
    if (iterateMethodType instanceof PyCollectionType) {
      final PyCollectionType collectionType=(PyCollectionType)iterateMethodType;
      result=collectionType.getElementType(context);
    }
    if (result == null) {
      final String nextMethodName=LanguageLevel.forElement(anchor).isAtLeast(LanguageLevel.PYTHON30) ? PyNames.DUNDER_NEXT : PyNames.NEXT;
      final PyFunction next=findMethodByName(iterableType,nextMethodName,context);
      if (next != null) {
        result=getContextSensitiveType(next,context,source);
      }
    }
    if (result == null) {
      final PyFunction getItem=findMethodByName(iterableType,PyNames.GETITEM,context);
      if (getItem != null) {
        result=getContextSensitiveType(getItem,context,source);
      }
    }
  }
  return result;
}
