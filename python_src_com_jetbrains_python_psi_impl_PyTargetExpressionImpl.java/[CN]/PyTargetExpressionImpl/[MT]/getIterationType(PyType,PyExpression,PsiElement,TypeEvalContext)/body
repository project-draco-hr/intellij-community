{
  if (iterableType instanceof PyTupleType) {
    final PyTupleType tupleType=(PyTupleType)iterableType;
    final List<PyType> memberTypes=new ArrayList<>();
    for (int i=0; i < (tupleType.isHomogeneous() ? 1 : tupleType.getElementCount()); i++) {
      memberTypes.add(tupleType.getElementType(i));
    }
    return PyUnionType.union(memberTypes);
  }
 else   if (iterableType instanceof PyUnionType) {
    final Collection<PyType> members=((PyUnionType)iterableType).getMembers();
    final List<PyType> iterationTypes=new ArrayList<>();
    for (    PyType member : members) {
      iterationTypes.add(getIterationType(member,source,anchor,context));
    }
    return PyUnionType.union(iterationTypes);
  }
 else   if (iterableType != null && PyABCUtil.isSubtype(iterableType,PyNames.ITERABLE,context)) {
    final PyFunction iterateMethod=findMethodByName(iterableType,PyNames.ITER,context);
    if (iterateMethod != null) {
      final PyType iterateReturnType=getContextSensitiveType(iterateMethod,context,source);
      final PyType type=getCollectionElementType(iterateReturnType,context);
      if (!isTrivialType(type)) {
        return type;
      }
    }
    final String nextMethodName=LanguageLevel.forElement(anchor).isAtLeast(LanguageLevel.PYTHON30) ? PyNames.DUNDER_NEXT : PyNames.NEXT;
    final PyFunction next=findMethodByName(iterableType,nextMethodName,context);
    if (next != null) {
      final PyType type=getContextSensitiveType(next,context,source);
      if (!isTrivialType(type)) {
        return type;
      }
    }
    final PyFunction getItem=findMethodByName(iterableType,PyNames.GETITEM,context);
    if (getItem != null) {
      final PyType type=getContextSensitiveType(getItem,context,source);
      if (!isTrivialType(type)) {
        return type;
      }
    }
  }
 else   if (iterableType != null && PyABCUtil.isSubtype(iterableType,PyNames.ASYNC_ITERABLE,context)) {
    final PyFunction iterateMethod=findMethodByName(iterableType,PyNames.AITER,context);
    if (iterateMethod != null) {
      final PyType iterateReturnType=getContextSensitiveType(iterateMethod,context,source);
      final PyType type=getCollectionElementType(iterateReturnType,context);
      if (!isTrivialType(type)) {
        return type;
      }
    }
  }
  return null;
}
