{
  PyForPart forPart=PsiTreeUtil.getParentOfType(this,PyForPart.class);
  if (forPart == null) {
    return null;
  }
  final PyExpression target=forPart.getTarget();
  final PyExpression source=forPart.getSource();
  if (source == null) {
    return null;
  }
  if (this == target) {
    final PyType sourceType=source.getType(context);
    if (sourceType instanceof PyCollectionType) {
      return ((PyCollectionType)sourceType).getElementType(context);
    }
    if (sourceType instanceof PyClassType) {
      final PyClass pyClass=((PyClassType)sourceType).getPyClass();
      if (pyClass == null) {
        return null;
      }
      for (      PyTypeProvider provider : Extensions.getExtensions(PyTypeProvider.EP_NAME)) {
        final PyType iterType=provider.getIterationType(pyClass);
        if (iterType != null) {
          return iterType;
        }
      }
    }
  }
  return null;
}
