{
  PyExpression target=null;
  PyExpression source=null;
  final PyForPart forPart=PsiTreeUtil.getParentOfType(this,PyForPart.class);
  if (forPart != null) {
    final PyExpression expr=forPart.getTarget();
    if (PsiTreeUtil.isAncestor(expr,this,false)) {
      target=expr;
      source=forPart.getSource();
    }
  }
  final PyComprehensionElement comprh=PsiTreeUtil.getParentOfType(this,PyComprehensionElement.class);
  if (comprh != null) {
    for (    ComprhForComponent c : comprh.getForComponents()) {
      final PyExpression expr=c.getIteratorVariable();
      if (PsiTreeUtil.isAncestor(expr,this,false)) {
        target=expr;
        source=c.getIteratedList();
      }
    }
  }
  if (source != null && target != null) {
    PyType type=null;
    final PyType sourceType=source.getType(context);
    if (sourceType instanceof PyCollectionType) {
      type=((PyCollectionType)sourceType).getElementType(context);
      if (sourceType instanceof PyClassType) {
        final PyClass cls=((PyClassType)sourceType).getPyClass();
        if (cls != null && type instanceof PyTupleType && PyABCUtil.isSubclass(cls,PyNames.MAPPING)) {
          final PyTupleType mappingType=(PyTupleType)type;
          if (mappingType.getElementCount() == 2) {
            return mappingType.getElementType(0);
          }
        }
      }
    }
 else     if (sourceType instanceof PyClassType) {
      final PyClass pyClass=((PyClassType)sourceType).getPyClass();
      if (pyClass != null) {
        for (        PyTypeProvider provider : Extensions.getExtensions(PyTypeProvider.EP_NAME)) {
          final PyType iterType=provider.getIterationType(pyClass);
          if (iterType != null) {
            type=iterType;
            break;
          }
        }
        if (PyABCUtil.isSubclass(pyClass,PyNames.ITERATOR)) {
          final PyFunction iter=pyClass.findMethodByName(PyNames.ITER,true);
          PyType iterMethodType=null;
          if (iter != null) {
            iterMethodType=getContextSensitiveType(iter,context,source);
          }
          if (iterMethodType instanceof PyCollectionType) {
            final PyCollectionType collectionType=(PyCollectionType)iterMethodType;
            type=collectionType.getElementType(context);
          }
          if (type == null) {
            PyFunction next=pyClass.findMethodByName(PyNames.NEXT,true);
            if (next == null) {
              next=pyClass.findMethodByName(PyNames.DUNDER_NEXT,true);
            }
            if (next != null) {
              type=getContextSensitiveType(next,context,source);
            }
          }
        }
      }
    }
    final PsiElement parent=getParent();
    if (type instanceof PyTupleType && parent instanceof PyTupleExpression) {
      return getTypeFromTupleAssignment((PyTupleExpression)parent,(PyTupleType)type);
    }
    if (target == this && type != null) {
      return type;
    }
  }
  return null;
}
