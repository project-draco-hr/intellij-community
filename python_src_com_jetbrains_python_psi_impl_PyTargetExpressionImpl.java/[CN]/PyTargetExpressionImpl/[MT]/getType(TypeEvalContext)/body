{
  if (!TypeEvalStack.mayEvaluate(this)) {
    return null;
  }
  try {
    if (PyNames.ALL.equals(getName())) {
      return null;
    }
    if (!context.maySwitchToAST(this)) {
      return null;
    }
    PyType type=getTypeFromDocString(this);
    if (type != null) {
      return type;
    }
    type=getTypeFromComment(this);
    if (type != null) {
      return type;
    }
    final PsiElement parent=getParent();
    if (parent instanceof PyAssignmentStatement) {
      final PyAssignmentStatement assignmentStatement=(PyAssignmentStatement)parent;
      final PyExpression assignedValue=assignmentStatement.getAssignedValue();
      if (assignedValue != null) {
        if (assignedValue instanceof PyReferenceExpressionImpl) {
          final PyReferenceExpressionImpl refex=(PyReferenceExpressionImpl)assignedValue;
          PyType maybe_type=PyUtil.getSpecialAttributeType(refex,context);
          if (maybe_type != null)           return maybe_type;
          final PyResolveContext resolveContext=PyResolveContext.noImplicits().withTypeEvalContext(context);
          final ResolveResult[] resolveResult=refex.getReference(resolveContext).multiResolve(false);
          if (resolveResult.length == 1) {
            PsiElement target=resolveResult[0].getElement();
            if (target == this || target == null) {
              return null;
            }
            final PyType typeFromTarget=PyReferenceExpressionImpl.getTypeFromTarget(target,context,refex);
            if (target instanceof PyTargetExpression && typeFromTarget instanceof PyNoneType) {
              return null;
            }
            Ref<PyType> typeOfProperty=refex.getTypeOfProperty(context);
            if (typeOfProperty != null) {
              return typeOfProperty.get();
            }
            return typeFromTarget;
          }
        }
        return context.getType(assignedValue);
      }
    }
    if (parent instanceof PyTupleExpression) {
      final PyAssignmentStatement assignment=PsiTreeUtil.getParentOfType(parent,PyAssignmentStatement.class);
      if (assignment != null) {
        final PyExpression value=assignment.getAssignedValue();
        if (value != null) {
          final PyType assignedType=value.getType(context);
          if (assignedType instanceof PyTupleType) {
            final PyType t=getTypeFromTupleAssignment((PyTupleExpression)parent,(PyTupleType)assignedType);
            if (t != null) {
              return t;
            }
          }
        }
      }
    }
    if (parent instanceof PyWithItem) {
      final PyWithItem item=(PyWithItem)parent;
      final PyExpression expression=item.getExpression();
      if (expression != null) {
        final PyType exprType=expression.getType(context);
        if (exprType instanceof PyClassType) {
          final PyClass cls=((PyClassType)exprType).getPyClass();
          if (cls != null) {
            final PyFunction enter=cls.findMethodByName(PyNames.ENTER,true);
            if (enter != null) {
              return enter.getReturnType(context,null);
            }
          }
        }
      }
      return null;
    }
    PyType iterType=getTypeFromIteration(context);
    if (iterType != null) {
      return iterType;
    }
    PyType excType=getTypeFromExcept();
    if (excType != null) {
      return excType;
    }
    return null;
  }
  finally {
    TypeEvalStack.evaluated(this);
  }
}
