{
  if (!TypeEvalStack.mayEvaluate(this)) {
    return null;
  }
  try {
    if (PyNames.ALL.equals(getName())) {
      return null;
    }
    if (getParent() instanceof PyAssignmentStatement) {
      final PyAssignmentStatement assignmentStatement=(PyAssignmentStatement)getParent();
      final PyExpression assignedValue=assignmentStatement.getAssignedValue();
      if (assignedValue != null) {
        if (assignedValue instanceof PyReferenceExpression) {
          final PyReferenceExpression refex=(PyReferenceExpression)assignedValue;
          PyType maybe_type=PyUtil.getSpecialAttributeType(refex);
          if (maybe_type != null)           return maybe_type;
          final ResolveResult[] resolveResult=refex.getReference(PyResolveContext.noImplicits()).multiResolve(false);
          if (resolveResult.length == 1) {
            PsiElement target=resolveResult[0].getElement();
            if (target == this || target == null) {
              return null;
            }
            final PyType typeFromTarget=PyReferenceExpressionImpl.getTypeFromTarget(target,context,null);
            if (target instanceof PyTargetExpression && typeFromTarget instanceof PyNoneType) {
              return null;
            }
            return typeFromTarget;
          }
        }
        return context.getType(assignedValue);
      }
    }
    if (getParent() instanceof PyTupleExpression) {
      return getTypeFromTupleAssignment(context);
    }
    return null;
  }
  finally {
    TypeEvalStack.evaluated(this);
  }
}
