{
  if (!TypeEvalStack.mayEvaluate(this)) {
    return null;
  }
  try {
    if (PyNames.ALL.equals(getName())) {
      return null;
    }
    final PyType pyType=PyReferenceExpressionImpl.getReferenceTypeFromProviders(this,context,null);
    if (pyType != null) {
      return pyType;
    }
    PyType type=getTypeFromDocString();
    if (type != null) {
      return type;
    }
    if (!context.maySwitchToAST(this)) {
      final PsiElement value=resolveAssignedValue(PyResolveContext.noImplicits().withTypeEvalContext(context));
      if (value instanceof PyTypedElement) {
        type=context.getType((PyTypedElement)value);
        if (type instanceof PyNoneType) {
          return null;
        }
        return type;
      }
      return null;
    }
    type=getTypeFromComment(this);
    if (type != null) {
      return type;
    }
    final PsiElement parent=getParent();
    if (parent instanceof PyAssignmentStatement) {
      final PyAssignmentStatement assignmentStatement=(PyAssignmentStatement)parent;
      PyExpression assignedValue=assignmentStatement.getAssignedValue();
      if (assignedValue instanceof PyParenthesizedExpression) {
        assignedValue=((PyParenthesizedExpression)assignedValue).getContainedExpression();
      }
      if (assignedValue != null) {
        if (assignedValue instanceof PyYieldExpression) {
          PyYieldExpression assignedYield=(PyYieldExpression)assignedValue;
          return assignedYield.isDelegating() ? context.getType(assignedValue) : null;
        }
        return context.getType(assignedValue);
      }
    }
    if (parent instanceof PyTupleExpression) {
      PsiElement nextParent=parent.getParent();
      while (nextParent instanceof PyParenthesizedExpression || nextParent instanceof PyTupleExpression) {
        nextParent=nextParent.getParent();
      }
      if (nextParent instanceof PyAssignmentStatement) {
        final PyAssignmentStatement assignment=(PyAssignmentStatement)nextParent;
        final PyExpression value=assignment.getAssignedValue();
        final PyExpression lhs=assignment.getLeftHandSideExpression();
        final PyTupleExpression targetTuple=PsiTreeUtil.findChildOfType(lhs,PyTupleExpression.class,false);
        if (value != null && targetTuple != null) {
          final PyType assignedType=PyTypeChecker.toNonWeakType(context.getType(value),context);
          if (assignedType instanceof PyTupleType) {
            final PyType t=PyTypeChecker.getTargetTypeFromTupleAssignment(this,targetTuple,(PyTupleType)assignedType);
            if (t != null) {
              return t;
            }
          }
        }
      }
    }
    if (parent instanceof PyWithItem) {
      return getWithItemVariableType(context,(PyWithItem)parent);
    }
    PyType iterType=getTypeFromIteration(context);
    if (iterType != null) {
      return iterType;
    }
    PyType excType=getTypeFromExcept();
    if (excType != null) {
      return excType;
    }
    return null;
  }
  finally {
    TypeEvalStack.evaluated(this);
  }
}
