{
  if (!TypeEvalStack.mayEvaluate(this)) {
    return null;
  }
  try {
    if (PyNames.ALL.equals(getName())) {
      return null;
    }
    final PyType pyType=PyReferenceExpressionImpl.getReferenceTypeFromProviders(this,context,anchor);
    if (pyType != null) {
      return pyType;
    }
    PyType type=getTypeFromDocString();
    if (type != null) {
      return type;
    }
    if (!context.maySwitchToAST(this)) {
      final PsiElement value=getStub() != null ? findAssignedValueByStub(context) : findAssignedValue();
      if (value instanceof PyTypedElement) {
        type=context.getType((PyTypedElement)value);
        if (type instanceof PyNoneType) {
          return null;
        }
        if (type instanceof PyFunctionType) {
          return type;
        }
        return PyUnionType.createWeakType(type);
      }
      return null;
    }
    type=getTypeFromComment(this);
    if (type != null) {
      return type;
    }
    final PsiElement parent=getParent();
    if (parent instanceof PyAssignmentStatement) {
      final PyAssignmentStatement assignmentStatement=(PyAssignmentStatement)parent;
      PyExpression assignedValue=assignmentStatement.getAssignedValue();
      if (assignedValue instanceof PyParenthesizedExpression) {
        assignedValue=((PyParenthesizedExpression)assignedValue).getContainedExpression();
      }
      if (assignedValue != null) {
        if (assignedValue instanceof PyReferenceExpressionImpl) {
          final PyReferenceExpressionImpl refex=(PyReferenceExpressionImpl)assignedValue;
          PyType maybe_type=PyUtil.getSpecialAttributeType(refex,context);
          if (maybe_type != null)           return maybe_type;
          final PyResolveContext resolveContext=PyResolveContext.noImplicits().withTypeEvalContext(context);
          final ResolveResult[] resolveResult=refex.getReference(resolveContext).multiResolve(false);
          if (resolveResult.length == 1) {
            PsiElement target=resolveResult[0].getElement();
            if (target == this || target == null) {
              return null;
            }
            final PyType typeFromTarget=PyReferenceExpressionImpl.getTypeFromTarget(target,context,refex);
            if (target instanceof PyTargetExpression && typeFromTarget instanceof PyNoneType) {
              return null;
            }
            Ref<PyType> typeOfProperty=refex.getTypeOfProperty(context);
            if (typeOfProperty != null) {
              return typeOfProperty.get();
            }
            final PyType cfgType=refex.getQualifiedReferenceTypeByControlFlow(context);
            if (cfgType != null) {
              return cfgType;
            }
            return typeFromTarget;
          }
        }
        if (assignedValue instanceof PyYieldExpression) {
          return null;
        }
        return context.getType(assignedValue);
      }
    }
    if (parent instanceof PyTupleExpression) {
      PsiElement nextParent=parent.getParent();
      while (nextParent instanceof PyParenthesizedExpression) {
        nextParent=nextParent.getParent();
      }
      if (nextParent instanceof PyAssignmentStatement) {
        final PyAssignmentStatement assignment=(PyAssignmentStatement)nextParent;
        final PyExpression value=assignment.getAssignedValue();
        if (value != null) {
          final PyType assignedType=PyTypeChecker.toNonWeakType(context.getType(value),context);
          if (assignedType instanceof PyTupleType) {
            final PyType t=getTypeFromTupleAssignment((PyTupleExpression)parent,(PyTupleType)assignedType);
            if (t != null) {
              return t;
            }
          }
        }
      }
    }
    if (parent instanceof PyWithItem) {
      return getWithItemVariableType(context,(PyWithItem)parent);
    }
    PyType iterType=getTypeFromIteration(context);
    if (iterType != null) {
      return iterType;
    }
    PyType excType=getTypeFromExcept();
    if (excType != null) {
      return excType;
    }
    return null;
  }
  finally {
    TypeEvalStack.evaluated(this);
  }
}
