{
  final OrderRootType javaDocRootType=JavadocOrderRootType.getInstance();
  if (javaDocRootType == null) {
    return null;
  }
class LibraryProcessor implements Processor<Library> {
    PathInfo result;
    Module module;
    @Override public boolean process(    Library library){
      for (      VirtualFile root : library.getFiles(javaDocRootType)) {
        if (VfsUtilCore.isAncestor(root,file,false)) {
          result=new PathInfo(file,root,getModuleNameQualifier(project,module),true);
          return false;
        }
      }
      return true;
    }
  }
  LibraryProcessor processor=new LibraryProcessor();
  AccessToken token=ReadAction.start();
  try {
    ModuleManager moduleManager=ModuleManager.getInstance(project);
    for (    Module module : moduleManager.getModules()) {
      if (module.isDisposed()) {
        continue;
      }
      processor.module=module;
      ModuleRootManager.getInstance(module).orderEntries().forEachLibrary(processor);
      if (processor.result != null) {
        return processor.result;
      }
    }
    processor.module=null;
    for (    Library library : LibraryTablesRegistrar.getInstance().getLibraryTable(project).getLibraries()) {
      if (!processor.process(library)) {
        return processor.result;
      }
    }
  }
  finally {
    token.finish();
  }
  return null;
}
