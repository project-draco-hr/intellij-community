{
  PairFunction<String,VirtualFile,VirtualFile> resolver;
  if (PlatformUtils.isIntelliJ()) {
    int index=path.indexOf('/');
    if (index > 0 && !path.regionMatches(!SystemInfo.isFileSystemCaseSensitive,0,project.getName(),0,index)) {
      String moduleName=path.substring(0,index);
      AccessToken token=ReadAction.start();
      Module module;
      try {
        module=ModuleManager.getInstance(project).findModuleByName(moduleName);
      }
  finally {
        token.finish();
      }
      if (module != null && !module.isDisposed()) {
        path=path.substring(index + 1);
        resolver=WebServerPathToFileManager.getInstance(project).getResolver(path);
        ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
        PathInfo result=findByRelativePath(path,moduleRootManager.getSourceRoots(),resolver,moduleName);
        if (result == null) {
          result=findByRelativePath(path,moduleRootManager.getContentRoots(),resolver,moduleName);
          if (result == null) {
            result=findInModuleLibraries(path,module,resolver);
          }
        }
        if (result != null) {
          return result;
        }
      }
    }
  }
  Module[] modules;
  AccessToken token=ReadAction.start();
  try {
    modules=ModuleManager.getInstance(project).getModules();
  }
  finally {
    token.finish();
  }
  resolver=WebServerPathToFileManager.getInstance(project).getResolver(path);
  PathInfo result=findByRelativePath(project,path,modules,true,resolver);
  if (result == null) {
    result=findByRelativePath(project,path,modules,false,resolver);
    if (result == null) {
      return findInLibraries(project,modules,path,resolver);
    }
  }
  return result;
}
