{
  myEvaluator.evaluate(myExpression,new XEvaluationCallbackBase(){
    @Override public void evaluated(    @NotNull final XValue result){
      result.computePresentation(new XValueNodePresentationConfigurator.ConfigurableXValueNodeImpl(){
        @Override public void applyPresentation(        @Nullable Icon icon,        @Nullable String type,        @Nullable String value,        @NotNull XValuePresenter valuePresenter,        boolean hasChildren,        boolean expand){
          if (isHintHidden())           return;
          SimpleColoredText text=new SimpleColoredText();
          text.append(myExpression,XDebuggerUIConstants.VALUE_NAME_ATTRIBUTES);
          XValueNodeImpl.buildText(type,value,valuePresenter,text,false);
          if (!hasChildren) {
            showHint(HintUtil.createInformationLabel(text));
          }
 else           if (getType() == ValueHintType.MOUSE_CLICK_HINT) {
            showTree(result,myExpression);
          }
 else {
            JComponent component=createExpandableHintComponent(text,new Runnable(){
              @Override public void run(){
                showTree(result,myExpression);
              }
            }
);
            showHint(component);
          }
        }
        @Override public void setFullValueEvaluator(        @NotNull XFullValueEvaluator fullValueEvaluator){
        }
        @Override public boolean isObsolete(){
          return false;
        }
      }
,XValuePlace.TOOLTIP);
    }
    @Override public void errorOccurred(    @NotNull final String errorMessage){
      LOG.debug("Cannot evaluate '" + myExpression + "':"+ errorMessage);
    }
  }
,myExpressionPosition);
}
