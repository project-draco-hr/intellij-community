{
  myEvaluator.evaluate(myExpression,new XEvaluationCallbackBase(){
    @Override public void evaluated(    @NotNull final XValue result){
      result.computePresentation(new XValueNodePresentationConfigurator.ConfigurableXValueNodeImpl(){
        private XFullValueEvaluator myFullValueEvaluator;
        private boolean myShown=false;
        @Override public void applyPresentation(        @Nullable Icon icon,        @NotNull XValuePresentation valuePresenter,        boolean hasChildren){
          if (isHintHidden()) {
            return;
          }
          SimpleColoredText text=new SimpleColoredText();
          text.append(myValueName,XDebuggerUIConstants.VALUE_NAME_ATTRIBUTES);
          XValueNodeImpl.buildText(valuePresenter,text);
          if (!hasChildren) {
            SimpleColoredComponent component=HintUtil.createInformationComponent();
            text.appendToComponent(component);
            if (myFullValueEvaluator != null) {
              component.append(myFullValueEvaluator.getLinkText(),XDebuggerTreeNodeHyperlink.TEXT_ATTRIBUTES,new Consumer<MouseEvent>(){
                @Override public void consume(                MouseEvent event){
                  DebuggerUIUtil.showValuePopup(myFullValueEvaluator,event,getProject(),getEditor());
                }
              }
);
              LinkMouseListenerBase.installSingleTagOn(component);
            }
            showHint(component);
          }
 else           if (getType() == ValueHintType.MOUSE_CLICK_HINT && !myShown) {
            showTree(result);
          }
 else {
            if (getType() == ValueHintType.MOUSE_OVER_HINT) {
              text.insert(0,"(" + KeymapUtil.getFirstKeyboardShortcutText("ShowErrorDescription") + ") ",SimpleTextAttributes.GRAYED_ATTRIBUTES);
            }
            JComponent component=createExpandableHintComponent(text,new Runnable(){
              @Override public void run(){
                showTree(result);
              }
            }
);
            showHint(component);
          }
          myShown=true;
        }
        @Override public void setFullValueEvaluator(        @NotNull XFullValueEvaluator fullValueEvaluator){
          myFullValueEvaluator=fullValueEvaluator;
        }
        @Override public boolean isObsolete(){
          return isHintHidden();
        }
      }
,XValuePlace.TOOLTIP);
    }
    @Override public void errorOccurred(    @NotNull final String errorMessage){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          int start=0, end=0;
          if (getCurrentRange() != null) {
            start=getCurrentRange().getStartOffset();
            end=getCurrentRange().getEndOffset();
          }
          HintManager.getInstance().showErrorHint(getEditor(),errorMessage,start,end,HintManager.ABOVE,HintManager.HIDE_BY_ESCAPE | HintManager.HIDE_BY_TEXT_CHANGE,0);
        }
      }
);
      LOG.debug("Cannot evaluate '" + myExpression + "':"+ errorMessage);
    }
  }
,myExpressionPosition);
}
