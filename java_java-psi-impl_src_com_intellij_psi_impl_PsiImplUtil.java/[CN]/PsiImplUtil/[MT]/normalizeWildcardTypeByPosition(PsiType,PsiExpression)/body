{
  PsiUtilCore.ensureValid(expression);
  PsiUtil.ensureValidType(type);
  PsiExpression topLevel=expression;
  while (topLevel.getParent() instanceof PsiArrayAccessExpression && ((PsiArrayAccessExpression)topLevel.getParent()).getArrayExpression() == topLevel) {
    topLevel=(PsiExpression)topLevel.getParent();
  }
  if (topLevel instanceof PsiArrayAccessExpression && !PsiUtil.isAccessedForWriting(topLevel)) {
    return PsiUtil.captureToplevelWildcards(type,expression);
  }
  final PsiType normalized=doNormalizeWildcardByPosition(type,expression,topLevel);
  LOG.assertTrue(normalized.isValid(),type);
  if (normalized instanceof PsiClassType && !PsiUtil.isAccessedForWriting(topLevel)) {
    return PsiUtil.captureToplevelWildcards(normalized,expression);
  }
  return normalized;
}
