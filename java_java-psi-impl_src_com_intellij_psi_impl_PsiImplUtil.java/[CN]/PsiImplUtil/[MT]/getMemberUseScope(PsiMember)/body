{
  PsiFile file=member.getContainingFile();
  PsiElement topElement=file == null ? member : file;
  Project project=topElement.getProject();
  final GlobalSearchScope maximalUseScope=ResolveScopeManager.getInstance(project).getUseScope(topElement);
  if (isInServerPage(file))   return maximalUseScope;
  PsiClass aClass=member.getContainingClass();
  if (aClass instanceof PsiAnonymousClass) {
    PsiElement methodCallExpr=PsiUtil.isLanguageLevel8OrHigher(aClass) ? PsiTreeUtil.getTopmostParentOfType(aClass,PsiStatement.class) : PsiTreeUtil.getParentOfType(aClass,PsiMethodCallExpression.class);
    return new LocalSearchScope(methodCallExpr != null ? methodCallExpr : aClass);
  }
  PsiModifierList modifierList=member.getModifierList();
  int accessLevel=modifierList == null ? PsiUtil.ACCESS_LEVEL_PUBLIC : PsiUtil.getAccessLevel(modifierList);
  if (accessLevel == PsiUtil.ACCESS_LEVEL_PUBLIC || accessLevel == PsiUtil.ACCESS_LEVEL_PROTECTED) {
    return maximalUseScope;
  }
  if (accessLevel == PsiUtil.ACCESS_LEVEL_PRIVATE) {
    PsiClass topClass=PsiUtil.getTopLevelClass(member);
    return topClass != null ? new LocalSearchScope(topClass) : file == null ? maximalUseScope : new LocalSearchScope(file);
  }
  if (file instanceof PsiJavaFile) {
    PsiPackage aPackage=JavaPsiFacade.getInstance(project).findPackage(((PsiJavaFile)file).getPackageName());
    if (aPackage != null) {
      SearchScope scope=PackageScope.packageScope(aPackage,false);
      return scope.intersectWith(maximalUseScope);
    }
  }
  return maximalUseScope;
}
