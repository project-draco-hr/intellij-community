{
  PsiType resultType;
  final PsiManager psiManager=psiFile.getManager();
  if (typeName.indexOf('<') != -1 || typeName.indexOf('[') != -1 || typeName.indexOf('.') == -1) {
    try {
      return JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory().createTypeFromText(typeName,context);
    }
 catch (    Exception ignored) {
    }
  }
  PsiClass aClass=JavaPsiFacade.getInstance(psiManager.getProject()).findClass(typeName,context.getResolveScope());
  if (aClass == null) {
    final LightClassReference ref=new LightClassReference(psiManager,PsiNameHelper.getShortClassName(typeName),typeName,PsiSubstitutor.EMPTY,psiFile);
    resultType=new PsiClassReferenceType(ref,null);
  }
 else {
    PsiElementFactory factory=JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory();
    PsiSubstitutor substitutor=factory.createRawSubstitutor(aClass);
    resultType=factory.createType(aClass,substitutor);
  }
  return resultType;
}
