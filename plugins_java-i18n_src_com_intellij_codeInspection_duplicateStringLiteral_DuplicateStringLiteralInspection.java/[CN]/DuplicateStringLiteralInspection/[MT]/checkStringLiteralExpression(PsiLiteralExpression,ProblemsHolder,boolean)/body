{
  Object value=originalExpression.getValue();
  if (!(value instanceof String))   return;
  if (!shouldCheck(originalExpression))   return;
  final String stringToFind=(String)value;
  if (stringToFind.length() == 0)   return;
  final GlobalSearchScope scope=GlobalSearchScope.projectScope(originalExpression.getProject());
  final PsiSearchHelper searchHelper=PsiSearchHelper.SERVICE.getInstance(holder.getFile().getProject());
  final List<String> words=StringUtil.getWordsIn(stringToFind);
  if (words.isEmpty())   return;
  Collections.sort(words,new Comparator<String>(){
    @Override public int compare(    final String o1,    final String o2){
      return o2.length() - o1.length();
    }
  }
);
  final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  Set<PsiFile> resultFiles=null;
  for (  String word : words) {
    if (word.length() < MIN_STRING_LENGTH) {
      continue;
    }
    progress.checkCanceled();
    final Set<PsiFile> files=new THashSet<PsiFile>();
    Processor<PsiFile> processor=Processors.cancelableCollectProcessor(files);
    searchHelper.processAllFilesWithWordInLiterals(word,scope,processor);
    if (resultFiles == null) {
      resultFiles=files;
    }
 else {
      resultFiles.retainAll(files);
    }
    if (resultFiles.isEmpty())     return;
  }
  if (resultFiles == null || resultFiles.isEmpty())   return;
  final List<PsiExpression> foundExpr=new ArrayList<PsiExpression>();
  for (  final PsiFile file : resultFiles) {
    progress.checkCanceled();
    FileViewProvider viewProvider=file.getViewProvider();
    if (viewProvider.getPsi(JavaLanguage.INSTANCE) == null)     continue;
    CharSequence text=viewProvider.getContents();
    StringSearcher searcher=new StringSearcher(stringToFind,true,true);
    LowLevelSearchUtil.processTextOccurrences(text,0,text.length(),searcher,progress,new TIntProcedure(){
      @Override public boolean execute(      int offset){
        PsiElement element=file.findElementAt(offset);
        if (element == null || !(element.getParent() instanceof PsiLiteralExpression))         return true;
        PsiLiteralExpression expression=(PsiLiteralExpression)element.getParent();
        if (expression != originalExpression && Comparing.equal(stringToFind,expression.getValue()) && shouldCheck(expression)) {
          foundExpr.add(expression);
        }
        return true;
      }
    }
);
  }
  if (foundExpr.isEmpty())   return;
  Set<PsiClass> classes=new THashSet<PsiClass>();
  for (  PsiElement aClass : foundExpr) {
    progress.checkCanceled();
    do {
      aClass=PsiTreeUtil.getParentOfType(aClass,PsiClass.class);
    }
 while (aClass != null && ((PsiClass)aClass).getQualifiedName() == null);
    if (aClass != null) {
      classes.add((PsiClass)aClass);
    }
  }
  if (classes.isEmpty())   return;
  List<PsiClass> tenClassesMost=Arrays.asList(classes.toArray(new PsiClass[classes.size()]));
  if (tenClassesMost.size() > 10) {
    tenClassesMost=tenClassesMost.subList(0,10);
  }
  String classList;
  if (isOnTheFly) {
    classList=StringUtil.join(tenClassesMost,new Function<PsiClass,String>(){
      @Override public String fun(      final PsiClass aClass){
        final boolean thisFile=aClass.getContainingFile() == originalExpression.getContainingFile();
        return "&nbsp;&nbsp;&nbsp;'<b>" + aClass.getQualifiedName() + "</b>'"+ (thisFile ? " " + InspectionsBundle.message("inspection.duplicates.message.in.this.file") : "");
      }
    }
,", " + BR);
  }
 else {
    classList=StringUtil.join(tenClassesMost,new Function<PsiClass,String>(){
      @Override public String fun(      final PsiClass aClass){
        return "'" + aClass.getQualifiedName() + "'";
      }
    }
,", ");
  }
  if (classes.size() > tenClassesMost.size()) {
    classList+=BR + InspectionsBundle.message("inspection.duplicates.message.more",classes.size() - 10);
  }
  String msg=InspectionsBundle.message("inspection.duplicates.message",classList);
  Collection<LocalQuickFix> fixes=new SmartList<LocalQuickFix>();
  if (isOnTheFly) {
    final LocalQuickFix introduceConstFix=createIntroduceConstFix(foundExpr,originalExpression);
    fixes.add(introduceConstFix);
  }
  createReplaceFixes(foundExpr,originalExpression,fixes);
  LocalQuickFix[] array=fixes.toArray(new LocalQuickFix[fixes.size()]);
  holder.registerProblem(originalExpression,msg,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,array);
}
