{
  TextBuffer buf=new TextBuffer();
  buf.append(ExprProcessor.listToJava(varDefinitions,indent,tracer));
  buf.append(first.toJava(indent,tracer));
  if (isLabeled()) {
    buf.appendIndent(indent).append("label").append(this.id.toString()).append(":").appendLineSeparator();
    tracer.incrementCurrentSourceLine();
  }
  buf.appendIndent(indent).append(headexprent.get(0).toJava(indent,tracer)).append(" {").appendLineSeparator();
  tracer.incrementCurrentSourceLine();
  VarType switch_type=headexprent.get(0).getExprType();
  for (int i=0; i < caseStatements.size(); i++) {
    Statement stat=caseStatements.get(i);
    List<StatEdge> edges=caseEdges.get(i);
    List<ConstExprent> values=caseValues.get(i);
    for (int j=0; j < edges.size(); j++) {
      if (edges.get(j) == default_edge) {
        buf.appendIndent(indent).append("default:").appendLineSeparator();
        tracer.incrementCurrentSourceLine();
      }
 else {
        ConstExprent value=(ConstExprent)values.get(j).copy();
        value.setConsttype(switch_type);
        buf.appendIndent(indent).append("case ").append(value.toJava(indent,tracer)).append(":").appendLineSeparator();
        tracer.incrementCurrentSourceLine();
      }
    }
    buf.append(ExprProcessor.jmpWrapper(stat,indent + 1,false,tracer));
  }
  buf.appendIndent(indent).append("}").appendLineSeparator();
  tracer.incrementCurrentSourceLine();
  return buf;
}
