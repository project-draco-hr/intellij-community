{
  String indstr=InterpreterUtil.getIndentString(indent);
  String new_line_separator=DecompilerContext.getNewLineSeparator();
  StringBuilder buf=new StringBuilder();
  buf.append(ExprProcessor.listToJava(varDefinitions,indent));
  buf.append(first.toJava(indent));
  if (isLabeled()) {
    buf.append(indstr).append("label").append(this.id).append(":").append(new_line_separator);
  }
  buf.append(indstr).append(headexprent.get(0).toJava(indent)).append(" {").append(new_line_separator);
  VarType switch_type=headexprent.get(0).getExprType();
  for (int i=0; i < caseStatements.size(); i++) {
    Statement stat=caseStatements.get(i);
    List<StatEdge> edges=caseEdges.get(i);
    List<ConstExprent> values=caseValues.get(i);
    for (int j=0; j < edges.size(); j++) {
      if (edges.get(j) == default_edge) {
        buf.append(indstr).append("default:").append(new_line_separator);
      }
 else {
        ConstExprent value=(ConstExprent)values.get(j).copy();
        value.setConsttype(switch_type);
        buf.append(indstr).append("case ").append(value.toJava(indent)).append(":").append(new_line_separator);
      }
    }
    buf.append(ExprProcessor.jmpWrapper(stat,indent + 1,false));
  }
  buf.append(indstr).append("}").append(new_line_separator);
  return buf.toString();
}
