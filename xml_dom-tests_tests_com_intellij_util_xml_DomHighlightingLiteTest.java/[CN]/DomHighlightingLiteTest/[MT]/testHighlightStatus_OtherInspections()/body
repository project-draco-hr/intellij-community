{
  myElement.setFileDescription(new DomFileDescription<>(DomElement.class,"a"));
  final MyDomElementsInspection inspection=new MyDomElementsInspection(){
    @Override public ProblemDescriptor[] checkFile(    @NotNull final PsiFile file,    @NotNull final InspectionManager manager,    final boolean isOnTheFly){
      myAnnotationsManager.appendProblems(myElement,createHolder(),this.getClass());
      return ProblemDescriptor.EMPTY_ARRAY;
    }
    @Override public void checkFileElement(    final DomFileElement fileElement,    final DomElementAnnotationHolder holder){
    }
  }
;
  registerInspectionKey(inspection);
  myInspectionProfile.setInspectionTools(new LocalInspectionToolWrapper(inspection));
  myAnnotationsManager.appendProblems(myElement,createHolder(),MockAnnotatingDomInspection.class);
  assertEquals(DomHighlightStatus.ANNOTATORS_FINISHED,myAnnotationsManager.getHighlightStatus(myElement));
  myAnnotationsManager.appendProblems(myElement,createHolder(),inspection.getClass());
  assertEquals(DomHighlightStatus.INSPECTIONS_FINISHED,myAnnotationsManager.getHighlightStatus(myElement));
}
