{
  register(myPasswordChoice,SvnConfiguration.SshConnectionType.PASSWORD);
  register(myPrivateKeyChoice,SvnConfiguration.SshConnectionType.PRIVATE_KEY);
  register(mySubversionConfigChoice,SvnConfiguration.SshConnectionType.SUBVERSION_CONFIG);
  ItemListener connectionTypeChangedListener=new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        enableOptions(e.getSource());
      }
    }
  }
;
  myPasswordChoice.addItemListener(connectionTypeChangedListener);
  myPrivateKeyChoice.addItemListener(connectionTypeChangedListener);
  mySubversionConfigChoice.addItemListener(connectionTypeChangedListener);
  enableOptions(mySubversionConfigChoice);
  registerBrowseDialog(myExecutablePathField,SvnBundle.message("ssh.settings.browse.executable.dialog.title"));
  registerBrowseDialog(myPrivateKeyPathField,SvnBundle.message("ssh.settings.browse.private.key.dialog.title"));
  mySshTunnelField.getEmptyText().setText(SshTunnelRuntimeModule.DEFAULT_SSH_TUNNEL_VALUE);
  mySshTunnelField.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      updateSshTunnelDependentValues(mySshTunnelField.getText());
    }
  }
);
  myUpdateTunnelButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      String tunnel=mySshTunnelField.getText();
      mySvnConfiguration.setSshTunnelSetting(StringUtil.nullize(tunnel));
      setSshTunnelSetting(mySvnConfiguration.getSshTunnelSetting());
    }
  }
);
}
