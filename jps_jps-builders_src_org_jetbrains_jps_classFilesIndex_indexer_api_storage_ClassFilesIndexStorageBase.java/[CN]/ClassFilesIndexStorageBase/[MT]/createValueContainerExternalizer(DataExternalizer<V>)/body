{
  return new DataExternalizer<CompiledDataValueContainer<V>>(){
    @Override public void save(    @NotNull final DataOutput out,    final CompiledDataValueContainer<V> value) throws IOException {
      final TIntObjectHashMap<V> underlying=value.myUnderlying;
      out.writeInt(underlying.size());
      final IOException[] ioException={null};
      underlying.forEachEntry(new TIntObjectProcedure<V>(){
        @Override public boolean execute(        final int k,        final V v){
          try {
            EnumeratorIntegerDescriptor.INSTANCE.save(out,k);
            valueExternalizer.save(out,v);
            return true;
          }
 catch (          final IOException e) {
            ioException[0]=e;
            return false;
          }
        }
      }
);
      if (ioException[0] != null) {
        throw ioException[0];
      }
    }
    @Override public CompiledDataValueContainer<V> read(    @NotNull final DataInput in) throws IOException {
      final TIntObjectHashMap<V> map=new TIntObjectHashMap<V>();
      final int size=in.readInt();
      for (int i=0; i < size; i++) {
        map.put(EnumeratorIntegerDescriptor.INSTANCE.read(in),valueExternalizer.read(in));
      }
      return new CompiledDataValueContainer<V>(map);
    }
  }
;
}
