{
  myMap=new PersistentHashMap<K,CompiledDataValueContainer<V>>(myIndexFile,myKeyDescriptor,createValueContainerExternalizer(myValueExternalizer),INITIAL_INDEX_SIZE);
  myCache=new SLRUCache<K,CompiledDataValueContainer<V>>(CACHE_QUEUES_SIZE,CACHE_QUEUES_SIZE){
    @NotNull @Override public CompiledDataValueContainer<V> createValue(    final K key){
      try {
        final CompiledDataValueContainer<V> valueContainer=myMap.get(key);
        if (valueContainer != null) {
          return valueContainer;
        }
      }
 catch (      final IOException e) {
        throw new RuntimeException(e);
      }
      return new CompiledDataValueContainer<V>();
    }
    @Override protected void onDropFromCache(    final K key,    final CompiledDataValueContainer<V> value){
      try {
        myMap.put(key,value);
      }
 catch (      final IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}
