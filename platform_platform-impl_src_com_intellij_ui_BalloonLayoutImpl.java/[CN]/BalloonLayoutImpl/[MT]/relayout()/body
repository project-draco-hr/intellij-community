{
  final Dimension size=myLayeredPane.getSize();
  JBInsets.removeFrom(size,myInsets);
  final Rectangle layoutRec=new Rectangle(new Point(myInsets.left,myInsets.top),size);
  List<ArrayList<Balloon>> columns=createColumns(layoutRec);
  while (columns.size() > 1) {
    remove(myBalloons.get(0),true);
    columns=createColumns(layoutRec);
  }
  List<Integer> columnWidths=computeWidths(columns);
  ToolWindowsPane pane=UIUtil.findComponentOfType(myParent,ToolWindowsPane.class);
  JComponent component=pane != null ? pane : myParent;
  int paneOnScreen=component.isShowing() ? component.getLocationOnScreen().y : 0;
  int layerOnScreen=myLayeredPane.isShowing() ? myLayeredPane.getLocationOnScreen().y : 0;
  int toolbarsOffset=paneOnScreen - layerOnScreen;
  JComponent layeredPane=pane != null ? pane.getMyLayeredPane() : null;
  int eachColumnX=(layeredPane == null ? myLayeredPane.getWidth() : layeredPane.getX() + layeredPane.getWidth()) - 4;
  for (int i=0; i < columns.size(); i++) {
    final ArrayList<Balloon> eachColumn=columns.get(i);
    final Integer eachWidth=columnWidths.get(i);
    int eachY=toolbarsOffset;
    int columnSize=eachColumn.size();
    if (columnSize > 0) {
      BalloonImpl balloon=(BalloonImpl)eachColumn.get(0);
      if (balloon.hasShadow()) {
        eachY-=balloon.getShadowBorderInsets().top;
      }
 else {
        eachY+=4;
      }
    }
    eachColumnX-=eachWidth.intValue();
    for (int j=0; j < columnSize; j++) {
      BalloonImpl eachBalloon=(BalloonImpl)eachColumn.get(j);
      Rectangle eachRec=new Rectangle(getSize(eachBalloon));
      Insets shadow=new Insets(0,0,0,0);
      boolean hasShadow=eachBalloon.hasShadow();
      if (hasShadow) {
        shadow=eachBalloon.getShadowBorderInsets();
        eachRec.width+=shadow.left + shadow.right;
        eachRec.height+=shadow.top + shadow.bottom;
      }
      eachRec.setLocation(eachColumnX + eachWidth.intValue() - eachRec.width + shadow.left,eachY);
      eachBalloon.setBounds(eachRec);
      eachY+=eachRec.height;
      if (myLayoutData.isEmpty()) {
        eachY+=2;
      }
 else       if (j + 1 < columnSize) {
        BalloonImpl next=(BalloonImpl)eachColumn.get(j + 1);
        boolean hasNextShadow=next.hasShadow();
        if (hasShadow && !hasNextShadow) {
          eachY-=shadow.top;
        }
 else         if (!hasShadow && hasNextShadow) {
          eachY-=2 * next.getShadowBorderInsets().top;
        }
 else         if (hasShadow) {
          eachY-=shadow.bottom + next.getShadowBorderInsets().top;
        }
        eachY+=10;
      }
    }
  }
}
