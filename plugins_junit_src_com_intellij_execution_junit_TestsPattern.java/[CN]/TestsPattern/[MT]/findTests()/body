{
  final JUnitConfiguration.Data data=myConfiguration.getPersistentData();
  final Project project=myConfiguration.getProject();
  final Set<String> classNames=new LinkedHashSet<String>();
  for (  String className : data.getPatterns()) {
    final PsiClass psiClass=getTestClass(project,className);
    if (psiClass != null && JUnitUtil.isTestClass(psiClass)) {
      classNames.add(className);
    }
  }
  if (classNames.size() == data.getPatterns().size()) {
    final SearchForTestsTask task=new SearchForTestsTask(project,myServerSocket){
      @Override protected void search() throws CantRunException {
        final Function<String,String> nameFunction=StringUtil.isEmpty(data.METHOD_NAME) ? FunctionUtil.<String>id() : new Function<String,String>(){
          @Override public String fun(          String className){
            return className;
          }
        }
;
        addClassesListToJavaParameters(classNames,nameFunction,"",false);
      }
      @Override protected void onFound(){
      }
    }
;
    mySearchForTestsIndicator=new BackgroundableProcessIndicator(task);
    ProgressManager.getInstance().runProcessWithProgressAsynchronously(task,mySearchForTestsIndicator);
    return task;
  }
  return super.findTests();
}
