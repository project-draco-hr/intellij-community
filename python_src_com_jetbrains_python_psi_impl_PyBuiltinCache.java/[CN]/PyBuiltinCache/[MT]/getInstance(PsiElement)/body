{
  if (reference != null) {
    final Module module=ModuleUtil.findModuleForPsiElement(reference);
    final Project project=reference.getProject();
    ComponentManager instance_key=module != null ? module : project;
    PyBuiltinCache instance=ourInstanceCache.get(instance_key);
    if (instance != null) {
      return instance;
    }
    Sdk sdk=null;
    if (module != null) {
      sdk=PythonSdkType.findPythonSdk(module);
    }
 else {
      final PsiFile psifile=reference.getContainingFile();
      if (psifile != null) {
        final VirtualFile vfile=psifile.getVirtualFile();
        if (vfile != null) {
          sdk=ProjectRootManager.getInstance(project).getProjectJdk();
        }
      }
    }
    if (sdk != null) {
      SdkType sdk_type=sdk.getSdkType();
      if (sdk_type instanceof PythonSdkType) {
        final String[] urls=sdk.getRootProvider().getUrls(PythonSdkType.BUILTIN_ROOT_TYPE);
        for (        String url : urls) {
          if (url.contains(PythonSdkType.SKELETON_DIR_NAME)) {
            final String builtins_url=url + "/" + ((PythonSdkType)sdk.getSdkType()).getBuiltinsFileName(sdk);
            File builtins=new File(VfsUtil.urlToPath(builtins_url));
            if (builtins.isFile() && builtins.canRead()) {
              VirtualFile builtins_vfile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(builtins);
              if (builtins_vfile != null) {
                PsiFile builtins_psifile=PsiManager.getInstance(project).findFile(builtins_vfile);
                if (builtins_psifile instanceof PyFile) {
                  instance=new PyBuiltinCache((PyFile)builtins_psifile);
                  ourInstanceCache.put(instance_key,instance);
                  if (!ourListenedProjects.contains(project)) {
                    final MessageBusConnection connection=project.getMessageBus().connect();
                    connection.subscribe(ProjectTopics.PROJECT_ROOTS,RESETTER);
                    ourListenedProjects.add(project);
                  }
                  return instance;
                }
              }
            }
          }
        }
      }
    }
  }
  return DUD_INSTANCE;
}
