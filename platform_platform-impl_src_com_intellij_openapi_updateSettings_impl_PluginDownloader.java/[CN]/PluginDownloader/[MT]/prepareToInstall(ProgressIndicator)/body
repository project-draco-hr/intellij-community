{
  if (myFile != null) {
    return true;
  }
  IdeaPluginDescriptor descriptor=null;
  if (!Boolean.getBoolean(StartupActionScriptManager.STARTUP_WIZARD_MODE) && PluginManager.isPluginInstalled(PluginId.getId(myPluginId))) {
    descriptor=PluginManager.getPlugin(PluginId.getId(myPluginId));
    LOG.assertTrue(descriptor != null);
    if (myPluginVersion != null && compareVersionsSkipBroken(descriptor,myPluginVersion) <= 0) {
      LOG.info("Plugin " + myPluginId + ": current version (max) "+ myPluginVersion);
      return false;
    }
    myOldFile=descriptor.getPath();
  }
  String errorMessage=IdeBundle.message("unknown.error");
  try {
    myFile=downloadPlugin(indicator);
  }
 catch (  IOException ex) {
    myFile=null;
    LOG.warn(ex);
    errorMessage=ex.getMessage();
  }
  if (myFile == null) {
    if (ApplicationManager.getApplication() != null) {
      final String text=IdeBundle.message("error.plugin.was.not.installed",getPluginName(),errorMessage);
      final String title=IdeBundle.message("title.failed.to.download");
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          Messages.showErrorDialog(text,title);
        }
      }
);
    }
    return false;
  }
  IdeaPluginDescriptorImpl actualDescriptor=loadDescriptionFromJar(myFile);
  if (actualDescriptor != null) {
    if (InstalledPluginsState.getInstance().wasUpdated(actualDescriptor.getPluginId())) {
      return false;
    }
    myPluginVersion=actualDescriptor.getVersion();
    if (descriptor != null && compareVersionsSkipBroken(descriptor,myPluginVersion) <= 0) {
      LOG.info("Plugin " + myPluginId + ": current version (max) "+ myPluginVersion);
      return false;
    }
    setDescriptor(actualDescriptor);
    if (PluginManagerCore.isIncompatible(actualDescriptor,myBuildNumber)) {
      LOG.info("Plugin " + myPluginId + " is incompatible with current installation "+ "(since:"+ actualDescriptor.getSinceBuild()+ " until:"+ actualDescriptor.getUntilBuild()+ ")");
      return false;
    }
  }
  return true;
}
