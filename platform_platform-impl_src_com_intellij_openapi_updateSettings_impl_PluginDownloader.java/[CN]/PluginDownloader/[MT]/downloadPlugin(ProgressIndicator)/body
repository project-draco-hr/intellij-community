{
  File pluginsTemp=new File(PathManager.getPluginTempPath());
  if (!pluginsTemp.exists() && !pluginsTemp.mkdirs()) {
    throw new IOException(IdeBundle.message("error.cannot.create.temp.dir",pluginsTemp));
  }
  final File file=FileUtil.createTempFile(pluginsTemp,"plugin_","_download",true,false);
  indicator.checkCanceled();
  indicator.setText2(IdeBundle.message("progress.downloading.plugin",getPluginName()));
  return HttpRequests.request(myPluginUrl).gzip(false).forceHttps(myForceHttps).connect(new HttpRequests.RequestProcessor<File>(){
    @Override public File process(    @NotNull HttpRequests.Request request) throws IOException {
      indicator.checkCanceled();
      URLConnection connection=request.getConnection();
      OutputStream fileOut=new FileOutputStream(file);
      try {
        NetUtils.copyStreamContent(indicator,request.getInputStream(),fileOut,connection.getContentLength());
      }
  finally {
        fileOut.close();
      }
      if (myFileName == null) {
        myFileName=guessFileName(connection,file);
      }
      File newFile=new File(file.getParentFile(),myFileName);
      FileUtil.rename(file,newFile);
      return newFile;
    }
  }
);
}
