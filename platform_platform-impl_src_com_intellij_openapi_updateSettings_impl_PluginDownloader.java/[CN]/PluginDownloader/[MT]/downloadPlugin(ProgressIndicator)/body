{
  File pluginsTemp=new File(PathManager.getPluginTempPath());
  if (!pluginsTemp.exists() && !pluginsTemp.mkdirs()) {
    throw new IOException(IdeBundle.message("error.cannot.create.temp.dir",pluginsTemp));
  }
  final File file=FileUtil.createTempFile(pluginsTemp,"plugin_","_download",true,false);
  progressIndicator.checkCanceled();
  progressIndicator.setText(IdeBundle.message("progress.downloading.plugin",getPluginName()));
  return HttpRequests.request(myPluginUrl).supportGzip(false).effectiveUrlConsumer(new Consumer<String>(){
    @Override public void consume(    String url){
      myPluginUrl=url;
    }
  }
).get(new ThrowableConvertor<URLConnection,File,IOException>(){
    @Override public File convert(    URLConnection connection) throws IOException {
      progressIndicator.checkCanceled();
      InputStream input=HttpRequests.getInputStream(connection);
      try {
        OutputStream fileOut=new FileOutputStream(file);
        try {
          NetUtils.copyStreamContent(progressIndicator,input,fileOut,connection.getContentLength());
        }
  finally {
          fileOut.close();
        }
      }
  finally {
        input.close();
      }
      if (myFileName == null) {
        myFileName=guessFileName(connection,file);
      }
      File newFile=new File(file.getParentFile(),myFileName);
      FileUtil.rename(file,newFile);
      return newFile;
    }
  }
);
}
