{
  if (expression instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)expression;
    final PsiElement parent=expression.getParent();
    final boolean parentheses;
    if (parent instanceof PsiPolyadicExpression) {
      final PsiPolyadicExpression parentPolyadicExpression=(PsiPolyadicExpression)parent;
      final IElementType parentOperationSign=parentPolyadicExpression.getOperationTokenType();
      final IElementType tokenType=polyadicExpression.getOperationTokenType();
      parentheses=!tokenType.equals(parentOperationSign);
    }
 else {
      parentheses=parent instanceof PsiConditionalExpression || parent instanceof PsiInstanceOfExpression;
    }
    appendText(polyadicExpression,parentheses,out);
  }
 else   if (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    final PsiElement parent=expression.getParent();
    for (    PsiElement child : parenthesizedExpression.getChildren()) {
      if (child instanceof PsiJavaToken) {
        final PsiJavaToken token=(PsiJavaToken)child;
        final IElementType tokenType=token.getTokenType();
        if ((tokenType != JavaTokenType.LPARENTH && tokenType != JavaTokenType.RPARENTH) || !(parent instanceof PsiParenthesizedExpression)) {
          out.append(child.getText());
        }
      }
 else       if (child instanceof PsiExpression) {
        final PsiExpression unwrappedExpression=(PsiExpression)child;
        createReplacementText(unwrappedExpression,out);
      }
 else {
        out.append(child.getText());
      }
    }
  }
 else   if (expression instanceof PsiInstanceOfExpression || expression instanceof PsiConditionalExpression) {
    final PsiElement parent=expression.getParent();
    final boolean parentheses=mightBeConfusingExpression(parent);
    appendText(expression,parentheses,out);
  }
 else   if (expression instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)expression;
    final PsiElement parent=expression.getParent();
    final boolean parentheses=(mightBeConfusingExpression(parent) || parent instanceof PsiVariable) && !isSimpleAssignment(assignmentExpression,parent);
    appendText(assignmentExpression,parentheses,out);
  }
 else   if (expression != null) {
    out.append(expression.getText());
  }
  return out;
}
