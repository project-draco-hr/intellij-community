{
  boolean marked=false;
  final BuildTarget<?> target=rd.getTarget();
  final FilesDelta delta=getDelta(target);
  final long targetBuildStartStamp=context.getCompilationStartStamp(target);
  delta.lockData();
  try {
    final Set<File> files=delta.clearRecompile(rd);
    if (files != null) {
      CompileScope scope=context.getScope();
      for (      File file : files) {
        if (scope.isAffected(target,file)) {
          final long currentFileStamp=FileSystemUtil.lastModified(file);
          if (!rd.isGenerated() && (currentFileStamp > targetBuildStartStamp || getEventRegistrationStamp(file) > targetBuildStartStamp)) {
            if (Utils.IS_TEST_MODE) {
              LOG.info("Timestamp after compilation started; marking dirty again: " + file.getPath());
            }
            delta.markRecompile(rd,file);
          }
 else {
            marked=true;
            stamps.saveStamp(file,target,currentFileStamp);
          }
        }
 else {
          if (Utils.IS_TEST_MODE) {
            LOG.info("Not affected by compile scope; marking dirty again: " + file.getPath());
          }
          delta.markRecompile(rd,file);
        }
      }
    }
    return marked;
  }
  finally {
    delta.unlockData();
  }
}
