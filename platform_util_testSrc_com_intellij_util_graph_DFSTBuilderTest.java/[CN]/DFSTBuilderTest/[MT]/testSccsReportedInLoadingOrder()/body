{
  final TestNode main=new TestNode("main");
  final TestNode dep=new TestNode("dep");
  final TestNode d=new TestNode("d");
  final TestNode d2=new TestNode("d2");
  final TestNode resMain=new TestNode("resMain");
  final TestNode resDep=new TestNode("resDep");
  final TestNode[] allNodes={main,dep,d,d2,resMain,resDep};
  final Map<TestNode,TestNode[]> mapIn=new HashMap<>();
  mapIn.put(main,new TestNode[]{d,resMain});
  mapIn.put(dep,new TestNode[]{main,resDep});
  mapIn.put(d,new TestNode[]{d2});
  mapIn.put(d2,new TestNode[]{dep,d});
  GraphGenerator<TestNode> graph=graphByNodes(allNodes,mapIn);
  final DFSTBuilder<TestNode> dfstBuilder=new DFSTBuilder<>(graph);
  assertTrue(!dfstBuilder.isAcyclic());
  Comparator<TestNode> comparator=dfstBuilder.comparator();
  assertTrue(comparator.compare(resMain,main) < 0);
  assertTrue(comparator.compare(resMain,d) < 0);
  assertTrue(comparator.compare(resMain,d2) < 0);
  assertTrue(comparator.compare(resDep,dep) < 0);
  assertTrue(comparator.compare(resMain,resDep) > 0);
}
