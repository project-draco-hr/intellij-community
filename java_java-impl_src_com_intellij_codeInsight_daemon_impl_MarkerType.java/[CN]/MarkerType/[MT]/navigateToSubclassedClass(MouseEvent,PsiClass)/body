{
  if (DumbService.isDumb(aClass.getProject())) {
    DumbService.getInstance(aClass.getProject()).showDumbModeNotification("Navigation to overriding methods is not possible during index update");
    return;
  }
  final PsiElementProcessor.CollectElementsWithLimit<PsiClass> collectProcessor=new PsiElementProcessor.CollectElementsWithLimit<PsiClass>(2,new THashSet<PsiClass>());
  final PsiElementProcessor.CollectElementsWithLimit<PsiFunctionalExpression> collectExprProcessor=new PsiElementProcessor.CollectElementsWithLimit<PsiFunctionalExpression>(2,new THashSet<PsiFunctionalExpression>());
  if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      ClassInheritorsSearch.search(aClass,true).forEach(new PsiElementProcessorAdapter<PsiClass>(collectProcessor));
      if (collectProcessor.getCollection().isEmpty()) {
        FunctionalExpressionSearch.search(aClass).forEach(new PsiElementProcessorAdapter<PsiFunctionalExpression>(collectExprProcessor));
      }
    }
  }
,SEARCHING_FOR_OVERRIDDEN_METHODS,true,aClass.getProject(),(JComponent)e.getComponent())) {
    return;
  }
  NavigatablePsiElement[] inheritors=ArrayUtil.mergeArrays(collectProcessor.toArray(PsiClass.EMPTY_ARRAY),collectExprProcessor.toArray(PsiFunctionalExpression.EMPTY_ARRAY));
  if (inheritors.length == 0)   return;
  final PsiClassOrFunctionalExpressionListCellRenderer renderer=new PsiClassOrFunctionalExpressionListCellRenderer();
  final SubclassUpdater subclassUpdater=new SubclassUpdater(aClass,renderer);
  Arrays.sort(inheritors,renderer.getComparator());
  PsiElementListNavigator.openTargets(e,inheritors,subclassUpdater.getCaption(inheritors.length),CodeInsightBundle.message("goto.implementation.findUsages.title",aClass.getName()),renderer,subclassUpdater);
}
