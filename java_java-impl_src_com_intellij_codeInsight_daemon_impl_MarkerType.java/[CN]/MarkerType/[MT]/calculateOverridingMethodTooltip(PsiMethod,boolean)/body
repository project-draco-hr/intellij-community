{
  PsiMethod[] superMethods=composeSuperMethods(method,acceptSelf);
  if (superMethods.length == 0)   return null;
  PsiMethod superMethod=superMethods[0];
  boolean isAbstract=method.hasModifierProperty(PsiModifier.ABSTRACT);
  boolean isSuperAbstract=superMethod.hasModifierProperty(PsiModifier.ABSTRACT);
  final boolean sameSignature=superMethod.getSignature(PsiSubstitutor.EMPTY).equals(method.getSignature(PsiSubstitutor.EMPTY));
  @NonNls final String key;
  if (isSuperAbstract && !isAbstract) {
    key=sameSignature ? "method.implements" : "method.implements.in";
  }
 else {
    key=sameSignature ? "method.overrides" : "method.overrides.in";
  }
  return composeText(superMethods,"",DaemonBundle.message(key),IdeActions.ACTION_GOTO_SUPER);
}
