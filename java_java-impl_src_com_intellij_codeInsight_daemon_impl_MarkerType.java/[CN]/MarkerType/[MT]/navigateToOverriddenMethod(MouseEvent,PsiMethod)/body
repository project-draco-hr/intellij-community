{
  if (DumbService.isDumb(method.getProject())) {
    DumbService.getInstance(method.getProject()).showDumbModeNotification("Navigation to overriding classes is not possible during index update");
    return;
  }
  final PsiElementProcessor.CollectElementsWithLimit<PsiMethod> collectProcessor=new PsiElementProcessor.CollectElementsWithLimit<PsiMethod>(2,new THashSet<PsiMethod>());
  final PsiElementProcessor.CollectElementsWithLimit<PsiFunctionalExpression> collectExprProcessor=new PsiElementProcessor.CollectElementsWithLimit<PsiFunctionalExpression>(2,new THashSet<PsiFunctionalExpression>());
  final boolean isAbstract=method.hasModifierProperty(PsiModifier.ABSTRACT);
  if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      OverridingMethodsSearch.search(method,true).forEach(new PsiElementProcessorAdapter<PsiMethod>(collectProcessor));
      if (isAbstract && collectProcessor.getCollection().size() < 2) {
        final PsiClass aClass=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>(){
          @Override public PsiClass compute(){
            return method.getContainingClass();
          }
        }
);
        if (aClass != null) {
          FunctionalExpressionSearch.search(aClass).forEach(new PsiElementProcessorAdapter<PsiFunctionalExpression>(collectExprProcessor));
        }
      }
    }
  }
,SEARCHING_FOR_OVERRIDING_METHODS,true,method.getProject(),(JComponent)e.getComponent())) {
    return;
  }
  final PsiMethod[] methodOverriders=collectProcessor.toArray(PsiMethod.EMPTY_ARRAY);
  final List<NavigatablePsiElement> overridings=new ArrayList<NavigatablePsiElement>();
  overridings.addAll(collectProcessor.getCollection());
  overridings.addAll(collectExprProcessor.getCollection());
  if (overridings.isEmpty())   return;
  boolean showMethodNames=!PsiUtil.allMethodsHaveSameSignature(methodOverriders);
  MethodOrFunctionalExpressionCellRenderer renderer=new MethodOrFunctionalExpressionCellRenderer(showMethodNames);
  Collections.sort(overridings,renderer.getComparator());
  final OverridingMethodsUpdater methodsUpdater=new OverridingMethodsUpdater(method,renderer);
  PsiElementListNavigator.openTargets(e,overridings.toArray(new NavigatablePsiElement[overridings.size()]),methodsUpdater.getCaption(overridings.size()),"Overriding methods of " + method.getName(),renderer,methodsUpdater);
}
