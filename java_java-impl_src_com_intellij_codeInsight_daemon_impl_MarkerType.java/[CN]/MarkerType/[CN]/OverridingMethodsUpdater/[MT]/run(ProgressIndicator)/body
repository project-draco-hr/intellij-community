{
  super.run(indicator);
  OverridingMethodsSearch.search(myMethod).forEach(new CommonProcessors.CollectProcessor<PsiMethod>(){
    @Override public boolean process(    PsiMethod psiMethod){
      if (!updateComponent(psiMethod,myRenderer.getComparator())) {
        indicator.cancel();
      }
      indicator.checkCanceled();
      return super.process(psiMethod);
    }
  }
);
  final PsiClass psiClass=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>(){
    @Override public PsiClass compute(){
      return myMethod.getContainingClass();
    }
  }
);
  FunctionalExpressionSearch.search(psiClass).forEach(new CommonProcessors.CollectProcessor<PsiFunctionalExpression>(){
    @Override public boolean process(    final PsiFunctionalExpression expr){
      if (!updateComponent(expr,myRenderer.getComparator())) {
        indicator.cancel();
      }
      indicator.checkCanceled();
      return super.process(expr);
    }
  }
);
}
