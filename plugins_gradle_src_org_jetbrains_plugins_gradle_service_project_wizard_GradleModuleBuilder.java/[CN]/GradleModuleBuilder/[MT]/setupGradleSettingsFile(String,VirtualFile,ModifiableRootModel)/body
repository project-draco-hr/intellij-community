{
  final VirtualFile file=getOrCreateExternalProjectConfigFile(rootProjectPath,GradleConstants.SETTINGS_FILE_NAME);
  if (file == null)   return null;
  final String moduleName=myProjectId == null ? model.getModule().getName() : myProjectId.getArtifactId();
  if (myWizardContext.isCreatingNewProject() || myParentProject == null) {
    final String moduleDirName=VfsUtilCore.getRelativePath(modelContentRootDir,file.getParent(),'/');
    Map<String,String> attributes=ContainerUtil.newHashMap();
    final String projectName=model.getProject().getName();
    attributes.put(TEMPLATE_ATTRIBUTE_PROJECT_NAME,projectName);
    attributes.put(TEMPLATE_ATTRIBUTE_MODULE_PATH,moduleDirName);
    attributes.put(TEMPLATE_ATTRIBUTE_MODULE_NAME,moduleName);
    saveFile(file,TEMPLATE_GRADLE_SETTINGS,attributes);
  }
 else {
    char separatorChar=file.getParent() == null || !VfsUtilCore.isAncestor(file.getParent(),modelContentRootDir,true) ? '/' : ':';
    String modulePath=VfsUtil.getPath(file,modelContentRootDir,separatorChar);
    Map<String,String> attributes=ContainerUtil.newHashMap();
    attributes.put(TEMPLATE_ATTRIBUTE_MODULE_NAME,moduleName);
    final String flatStructureModulePath=modulePath != null && StringUtil.startsWith(modulePath,"../") ? StringUtil.trimStart(modulePath,"../") : null;
    if (StringUtil.equals(flatStructureModulePath,modelContentRootDir.getName())) {
      attributes.put(TEMPLATE_ATTRIBUTE_MODULE_FLAT_DIR,"true");
      attributes.put(TEMPLATE_ATTRIBUTE_MODULE_PATH,flatStructureModulePath);
    }
 else {
      attributes.put(TEMPLATE_ATTRIBUTE_MODULE_PATH,modulePath);
    }
    appendToFile(file,TEMPLATE_GRADLE_SETTINGS_MERGE,attributes);
  }
  return file;
}
