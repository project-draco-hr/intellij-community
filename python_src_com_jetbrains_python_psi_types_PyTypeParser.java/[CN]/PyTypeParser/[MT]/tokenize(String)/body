{
  final List<Token<PyElementType>> tokens=new ArrayList<Token<PyElementType>>();
  final PyTypeLexer lexer=new PyTypeLexer(new StringReader(s));
  lexer.reset(s,0,s.length(),lexer.yystate());
  try {
    PyElementType type;
    while ((type=lexer.advance()) != null) {
      if (type == PyTypeTokenTypes.SPACE || type == PyTypeTokenTypes.MARKUP) {
        continue;
      }
      final TextRange range=TextRange.create(lexer.getTokenStart(),lexer.getTokenEnd());
      final Token<PyElementType> token=new Token<PyElementType>(type,lexer.yytext(),range);
      tokens.add(token);
    }
  }
 catch (  IOException e) {
    return Collections.emptyList();
  }
catch (  Error e) {
    return Collections.emptyList();
  }
  return tokens;
}
