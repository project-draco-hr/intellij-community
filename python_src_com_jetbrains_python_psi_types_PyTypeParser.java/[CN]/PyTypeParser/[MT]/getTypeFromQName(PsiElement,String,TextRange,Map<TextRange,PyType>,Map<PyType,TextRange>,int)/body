{
  final PsiFile anchorFile=anchor.getContainingFile();
  if (CharMatcher.JAVA_LETTER_OR_DIGIT.or(CharMatcher.is('.')).or(CharMatcher.is('_')).matchesAllOf(qName)) {
    final List<TextRange> ranges=splitRanges(qName,".");
    final TextRange classRange=!ranges.isEmpty() ? ranges.remove(ranges.size() - 1) : new TextRange(0,qName.length());
    PyType moduleType=null;
    if (!ranges.isEmpty()) {
      final TextRange first=ranges.get(0);
      for (      TextRange range : ranges) {
        final PyQualifiedName moduleName=PyQualifiedName.fromDottedString(first.union(range).substring(qName));
        if (anchorFile instanceof PyFile) {
          moduleType=new PyImportedModuleType(new PyImportedModule(null,(PyFile)anchorFile,moduleName));
          types.put(range.shiftRight(offset),moduleType);
        }
      }
    }
    final String shortName=classRange.substring(qName);
    if (moduleType != null) {
      final PyResolveContext context=PyResolveContext.defaultContext();
      final List<? extends RatedResolveResult> results=moduleType.resolveMember(shortName,null,AccessDirection.READ,context);
      if (results != null && !results.isEmpty()) {
        final RatedResolveResult result=results.get(0);
        final PsiElement resolved=result.getElement();
        if (resolved instanceof PyTypedElement) {
          PyType t=((PyTypedElement)resolved).getType(context.getTypeEvalContext());
          if (t instanceof PyClassType) {
            t=((PyClassType)t).toInstance();
          }
          types.put(classRange.shiftRight(offset),t);
          fullRanges.put(t,whole);
          return t;
        }
      }
    }
    final Collection<PyClass> classes=PyClassNameIndex.find(shortName,anchor.getProject(),true);
    for (    PyClass aClass : classes) {
      if (qName.equals(aClass.getQualifiedName())) {
        final PyType t=new PyClassType(aClass,false);
        types.put(classRange.shiftRight(offset),t);
        fullRanges.put(t,whole);
        return t;
      }
    }
    for (    PyClass aClass : classes) {
      final String name=aClass.getQualifiedName();
      if (name != null && name.startsWith("_")) {
        final PyType t=new PyClassType(aClass,false);
        types.put(classRange.shiftRight(offset),t);
        fullRanges.put(t,whole);
        return t;
      }
    }
  }
  return null;
}
