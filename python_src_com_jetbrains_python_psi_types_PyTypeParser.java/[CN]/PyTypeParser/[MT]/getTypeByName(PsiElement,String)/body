{
  if (type == null) {
    return null;
  }
  type=type.trim();
  if (type.endsWith(".")) {
    type=type.substring(0,type.length() - 1);
  }
  if (type.equals("None")) {
    return PyNoneType.INSTANCE;
  }
  if (type.startsWith("(") && type.endsWith(")")) {
    return parseTupleType(anchor,type.substring(1,type.length() - 1));
  }
  if (type.contains(" or ")) {
    return parseUnionType(anchor,type);
  }
  final PyBuiltinCache builtinCache=PyBuiltinCache.getInstance(anchor);
  if (type.equals("unknown")) {
    return null;
  }
  if (type.equals("string")) {
    return builtinCache.getStringType(LanguageLevel.forElement(anchor));
  }
  if (type.equals("str")) {
    return builtinCache.getStrType();
  }
  if (type.equals("bytes")) {
    return builtinCache.getBytesType(LanguageLevel.forElement(anchor));
  }
  if (type.equals("boolean")) {
    return builtinCache.getBoolType();
  }
  if (type.equals("file object")) {
    return builtinCache.getObjectType("file");
  }
  if (type.equals("dictionary")) {
    return builtinCache.getObjectType("dict");
  }
  if (type.startsWith("dict from")) {
    return parseDictType(anchor,type.substring(9).trim());
  }
  if (type.equals("integer")) {
    return builtinCache.getIntType();
  }
  final Matcher m=PARAMETRIZED_CLASS.matcher(type);
  if (m.matches()) {
    final PyType objType=parseObjectType(anchor,m.group(1),builtinCache);
    final PyType elementType=getTypeByName(anchor,m.group(2));
    if (objType != null) {
      if (objType instanceof PyClassType && elementType != null) {
        return new PyCollectionTypeImpl(((PyClassType)objType).getPyClass(),false,elementType);
      }
      return objType;
    }
  }
  return parseObjectType(anchor,type,builtinCache);
}
