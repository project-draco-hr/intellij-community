{
  final PyClassType classType=builtinCache.getObjectType(type);
  if (classType != null) {
    return classType;
  }
  final PsiFile anchorFile=anchor.getContainingFile();
  if (anchorFile instanceof PyFile) {
    final PyClass aClass=((PyFile)anchorFile).findTopLevelClass(type);
    if (aClass != null) {
      return new PyClassType(aClass,false);
    }
  }
  if (StringUtil.isJavaIdentifier(type)) {
    final Collection<PyClass> classes=PyClassNameIndex.find(type,anchor.getProject(),true);
    if (classes.size() == 1) {
      return new PyClassType(classes.iterator().next(),false);
    }
  }
  if (CharMatcher.JAVA_LETTER_OR_DIGIT.or(CharMatcher.is('.')).or(CharMatcher.is('_')).matchesAllOf(type)) {
    final int pos=type.lastIndexOf('.');
    final String shortName=pos > 0 ? type.substring(pos + 1) : type;
    final Collection<PyClass> classes=PyClassNameIndex.find(shortName,anchor.getProject(),true);
    for (    PyClass aClass : classes) {
      if (type.equals(aClass.getQualifiedName())) {
        return new PyClassType(aClass,false);
      }
    }
    for (    PyClass aClass : classes) {
      if (aClass.getQualifiedName().startsWith("_")) {
        return new PyClassType(aClass,false);
      }
    }
  }
  return null;
}
