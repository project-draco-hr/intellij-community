{
  final TextRange whole=new TextRange(offset,offset + type.length());
  final PyClassType classType=builtinCache.getObjectType(type);
  if (classType != null) {
    types.put(whole,classType);
    return classType;
  }
  final PsiFile anchorFile=anchor.getContainingFile();
  if (anchorFile instanceof PyFile) {
    final PyClass aClass=((PyFile)anchorFile).findTopLevelClass(type);
    if (aClass != null) {
      final PyType t=new PyClassTypeImpl(aClass,false);
      types.put(whole,t);
      return t;
    }
    final List<PyFromImportStatement> fromImports=((PyFile)anchorFile).getFromImports();
    for (    PyFromImportStatement fromImportStatement : fromImports) {
      final PyImportElement[] elements=fromImportStatement.getImportElements();
      for (      PyImportElement element : elements) {
        final String visibleName=element.getVisibleName();
        if (type.equals(visibleName)) {
          final PyQualifiedName importSourceQName=fromImportStatement.getImportSourceQName();
          if (importSourceQName != null) {
            String qName=importSourceQName.toString() + "." + visibleName;
            final PyType pyType=getTypeFromQName(anchor,qName,whole,types,fullRanges,offset);
            if (pyType != null)             return pyType;
          }
        }
      }
    }
  }
  if (StringUtil.isJavaIdentifier(type)) {
    final Collection<PyClass> classes=PyClassNameIndex.find(type,anchor.getProject(),true);
    if (classes.size() == 1) {
      final PyType t=new PyClassTypeImpl(classes.iterator().next(),false);
      types.put(whole,t);
      return t;
    }
  }
  return getTypeFromQName(anchor,type,whole,types,fullRanges,offset);
}
