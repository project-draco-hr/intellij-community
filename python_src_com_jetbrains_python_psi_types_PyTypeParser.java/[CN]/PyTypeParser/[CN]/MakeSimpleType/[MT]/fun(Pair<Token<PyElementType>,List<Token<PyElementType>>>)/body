{
  final Token<PyElementType> first=value.getFirst();
  final List<Token<PyElementType>> rest=value.getSecond();
  final TextRange firstRange=first.getRange();
  final String firstText=first.getText().toString();
  if (rest.isEmpty()) {
    final PyBuiltinCache builtinCache=PyBuiltinCache.getInstance(myAnchor);
    if ("unknown".equals(firstText)) {
      return EMPTY_RESULT;
    }
 else     if (PyNames.NONE.equals(firstText)) {
      return new ParseResult(PyNoneType.INSTANCE,firstRange);
    }
 else     if ("integer".equals(firstText) || ("long".equals(firstText) && LanguageLevel.forElement(myAnchor).isPy3K())) {
      final PyClassType type=builtinCache.getIntType();
      return type != null ? new ParseResult(type,firstRange) : EMPTY_RESULT;
    }
 else     if ("string".equals(firstText)) {
      final PyType type=builtinCache.getStringType(LanguageLevel.forElement(myAnchor));
      return type != null ? new ParseResult(type,firstRange) : EMPTY_RESULT;
    }
 else     if ("bytes".equals(firstText)) {
      final PyClassType type=builtinCache.getBytesType(LanguageLevel.forElement(myAnchor));
      return type != null ? new ParseResult(type,firstRange) : EMPTY_RESULT;
    }
 else     if ("unicode".equals(firstText)) {
      final PyClassType type=builtinCache.getUnicodeType(LanguageLevel.forElement(myAnchor));
      return type != null ? new ParseResult(type,firstRange) : EMPTY_RESULT;
    }
 else     if ("boolean".equals(firstText)) {
      final PyClassType type=builtinCache.getBoolType();
      return type != null ? new ParseResult(type,firstRange) : EMPTY_RESULT;
    }
 else     if ("dictionary".equals(firstText)) {
      final PyClassType type=builtinCache.getDictType();
      return type != null ? new ParseResult(type,firstRange) : EMPTY_RESULT;
    }
    final PyType builtinType=builtinCache.getObjectType(firstText);
    if (builtinType != null) {
      return new ParseResult(builtinType,firstRange);
    }
  }
  final PsiFile file=myAnchor.getContainingFile();
  if (file instanceof PyFile) {
    final PyFile pyFile=(PyFile)file;
    PsiElement resolved=pyFile.getElementNamed(firstText);
    if (resolved == null) {
      resolved=new QualifiedNameResolverImpl(firstText).fromElement(myAnchor).firstResult();
    }
    if (resolved instanceof PyTypedElement) {
      final Map<TextRange,PyType> types=new HashMap<TextRange,PyType>();
      final Map<PyType,TextRange> fullRanges=new HashMap<PyType,TextRange>();
      final Map<PyType,PyImportElement> imports=new HashMap<PyType,PyImportElement>();
      final TypeEvalContext context=TypeEvalContext.codeInsightFallback();
      PyType type=context.getType((PyTypedElement)resolved);
      if (type != null) {
        if (type instanceof PyClassLikeType) {
          type=((PyClassLikeType)type).toInstance();
        }
        types.put(firstRange,type);
        fullRanges.put(type,firstRange);
        for (        PyFromImportStatement fromImportStatement : pyFile.getFromImports()) {
          for (          PyImportElement importElement : fromImportStatement.getImportElements()) {
            if (firstText.equals(importElement.getVisibleName())) {
              imports.put(type,importElement);
            }
          }
        }
        final PyResolveContext resolveContext=PyResolveContext.defaultContext().withTypeEvalContext(context);
        final PyExpression expression=myAnchor instanceof PyExpression ? (PyExpression)myAnchor : null;
        for (        Token<PyElementType> token : rest) {
          final List<? extends RatedResolveResult> results=type.resolveMember(token.getText().toString(),expression,AccessDirection.READ,resolveContext);
          if (results != null && !results.isEmpty()) {
            resolved=results.get(0).getElement();
            if (resolved instanceof PyTypedElement) {
              type=context.getType((PyTypedElement)resolved);
            }
          }
          if (type == null) {
            break;
          }
          types.put(token.getRange(),type);
          fullRanges.put(type,TextRange.create(firstRange.getStartOffset(),token.getRange().getEndOffset()));
        }
        if (type != null) {
          return new ParseResult(type,types,fullRanges,imports);
        }
      }
    }
  }
  if (rest.isEmpty()) {
    final Collection<PyClass> classes=PyClassNameIndex.find(firstText,myAnchor.getProject(),true);
    if (classes.size() == 1) {
      final PyClassTypeImpl type=new PyClassTypeImpl(classes.iterator().next(),false);
      type.assertValid("PyClassNameIndex.find().iterator().next()");
      return new ParseResult(type,firstRange);
    }
  }
  return EMPTY_RESULT;
}
