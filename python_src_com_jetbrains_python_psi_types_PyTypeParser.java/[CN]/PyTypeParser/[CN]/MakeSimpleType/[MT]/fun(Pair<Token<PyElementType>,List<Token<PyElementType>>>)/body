{
  final Token<PyElementType> first=value.getFirst();
  final List<Token<PyElementType>> rest=value.getSecond();
  final TextRange firstRange=first.getRange();
  final boolean unqualified=rest.isEmpty();
  if (unqualified) {
    final ParseResult result=parseBuiltinType(first);
    if (result != null) {
      return result;
    }
  }
  final PsiFile file=myAnchor.getContainingFile();
  final List<Token<PyElementType>> tokens=new ArrayList<Token<PyElementType>>();
  tokens.add(first);
  tokens.addAll(rest);
  if (file instanceof PyFile) {
    final PyFile pyFile=(PyFile)file;
    final TypeEvalContext context=TypeEvalContext.codeInsightFallback(file.getProject());
    final Map<TextRange,PyType> types=new HashMap<TextRange,PyType>();
    final Map<PyType,TextRange> fullRanges=new HashMap<PyType,TextRange>();
    final Map<PyType,PyImportElement> imports=new HashMap<PyType,PyImportElement>();
    PyType type=resolveQualifierType(tokens,pyFile,context,types,fullRanges,imports);
    PsiElement resolved=type != null ? getElement(type) : null;
    if (type != null) {
      final PyResolveContext resolveContext=PyResolveContext.defaultContext().withTypeEvalContext(context);
      final PyExpression expression=myAnchor instanceof PyExpression ? (PyExpression)myAnchor : null;
      for (      Token<PyElementType> token : tokens) {
        final PyType qualifierType=type;
        type=null;
        final List<? extends RatedResolveResult> results=qualifierType.resolveMember(token.getText().toString(),expression,AccessDirection.READ,resolveContext);
        if (results != null && !results.isEmpty()) {
          resolved=results.get(0).getElement();
          if (resolved instanceof PyTypedElement) {
            type=context.getType((PyTypedElement)resolved);
            if (type != null && !allowResolveToType(type)) {
              type=null;
              break;
            }
            if (type instanceof PyClassLikeType) {
              type=((PyClassLikeType)type).toInstance();
            }
          }
        }
        if (type == null) {
          break;
        }
        types.put(token.getRange(),type);
        fullRanges.put(type,TextRange.create(firstRange.getStartOffset(),token.getRange().getEndOffset()));
      }
      if (type != null) {
        return new ParseResult(resolved,type,types,fullRanges,imports);
      }
    }
  }
  return EMPTY_RESULT;
}
