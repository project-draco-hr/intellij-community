{
  final DumbAwareAction rename=new DumbAwareAction("Rename"){
    @Override public void update(    AnActionEvent e){
      final int selected=getSingleSelectedIndex();
      final TemplateGroup templateGroup=getGroup(selected);
      boolean enabled=templateGroup != null;
      e.getPresentation().setEnabled(enabled);
      e.getPresentation().setVisible(enabled);
      super.update(e);
    }
    @Override public void actionPerformed(    AnActionEvent e){
      renameGroup();
    }
  }
;
  rename.registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_RENAME).getShortcutSet(),myTree);
  final DefaultActionGroup move=new DefaultActionGroup("Move",true){
    @Override public void update(    AnActionEvent e){
      final Map<TemplateImpl,DefaultMutableTreeNode> templates=getSelectedTemplates();
      boolean enabled=!templates.isEmpty();
      e.getPresentation().setEnabled(enabled);
      e.getPresentation().setVisible(enabled);
      if (enabled) {
        Set<String> oldGroups=getAllGroups(templates);
        removeAll();
        SchemesManager<TemplateGroup,TemplateGroup> schemesManager=TemplateSettings.getInstance().getSchemesManager();
        for (        TemplateGroup group : getTemplateGroups()) {
          final String newGroupName=group.getName();
          if (!oldGroups.contains(newGroupName) && !schemesManager.isShared(group)) {
            add(new DumbAwareAction(newGroupName){
              @Override public void actionPerformed(              AnActionEvent e){
                moveTemplates(templates,newGroupName);
              }
            }
);
          }
        }
        addSeparator();
        add(new DumbAwareAction("New group..."){
          @Override public void actionPerformed(          AnActionEvent e){
            String newName=Messages.showInputDialog(myTree,"Enter the new group name:","Move to a New Group",null,"",new TemplateGroupInputValidator(null));
            if (newName != null) {
              moveTemplates(templates,newName);
            }
          }
        }
);
      }
    }
  }
;
  final DumbAwareAction changeContext=new DumbAwareAction("Change context..."){
    @Override public void update(    AnActionEvent e){
      boolean enabled=!getSelectedTemplates().isEmpty();
      e.getPresentation().setEnabled(enabled);
      super.update(e);
    }
    @Override public void actionPerformed(    AnActionEvent e){
      Map<TemplateImpl,DefaultMutableTreeNode> templates=getSelectedTemplates();
      TemplateContext context=new TemplateContext();
      JPanel contextPanel=LiveTemplateSettingsEditor.createPopupContextPanel(EmptyRunnable.INSTANCE,context);
      DialogBuilder builder=new DialogBuilder(TemplateListPanel.this);
      builder.setCenterPanel(contextPanel);
      builder.setTitle("Change Context Type For Selected Templates");
      int result=builder.show();
      if (result == DialogWrapper.OK_EXIT_CODE) {
        for (        TemplateImpl template : templates.keySet()) {
          myTemplateContext.put(getKey(template),context);
        }
      }
      updateTemplateDetails(false,true);
      myTree.repaint();
    }
  }
;
  final DumbAwareAction revert=new DumbAwareAction("Restore defaults","Restore default setting for the selected templates",null){
    @Override public void update(    AnActionEvent e){
      boolean enabled=false;
      Map<TemplateImpl,DefaultMutableTreeNode> templates=getSelectedTemplates();
      for (      TemplateImpl template : templates.keySet()) {
        TemplateImpl defaultTemplate=TemplateSettings.getInstance().getDefaultTemplate(template);
        if (defaultTemplate != null && templatesDiffer(template,defaultTemplate)) {
          enabled=true;
        }
      }
      e.getPresentation().setEnabled(enabled);
      e.getPresentation().setVisible(enabled);
      super.update(e);
    }
    @Override public void actionPerformed(    AnActionEvent e){
      Map<TemplateImpl,DefaultMutableTreeNode> templates=getSelectedTemplates();
      for (      TemplateImpl template : templates.keySet()) {
        TemplateImpl defaultTemplate=TemplateSettings.getInstance().getDefaultTemplate(template);
        if (defaultTemplate != null) {
          myTemplateOptions.put(getKey(template),defaultTemplate.createOptions());
          myTemplateContext.put(getKey(template),defaultTemplate.createContext());
          template.resetFrom(defaultTemplate);
        }
      }
      updateTemplateDetails(false,true);
      myTree.repaint();
    }
  }
;
  myTree.addMouseListener(new PopupHandler(){
    @Override public void invokePopup(    Component comp,    int x,    int y){
      final DefaultActionGroup group=new DefaultActionGroup();
      group.add(rename);
      group.add(move);
      group.add(changeContext);
      group.add(revert);
      ActionManager.getInstance().createActionPopupMenu(ActionPlaces.UNKNOWN,group).getComponent().show(comp,x,y);
    }
  }
);
}
