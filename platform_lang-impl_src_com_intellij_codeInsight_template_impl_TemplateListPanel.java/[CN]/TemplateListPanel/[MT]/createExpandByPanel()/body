{
  JPanel panel=new JPanel(new GridBagLayout());
  GridBagConstraints gbConstraints=new GridBagConstraints();
  gbConstraints.weighty=0;
  gbConstraints.weightx=0;
  gbConstraints.gridy=0;
  panel.add(new JLabel(CodeInsightBundle.message("templates.dialog.shortcut.chooser.label")),gbConstraints);
  gbConstraints.gridx=1;
  gbConstraints.insets=new Insets(0,4,0,0);
  myExpandByCombo=new ComboBox();
  panel.add(myExpandByCombo,gbConstraints);
  myOpenKeymapLabel=new HyperlinkLabel("Change");
  gbConstraints.gridx=2;
  panel.add(myOpenKeymapLabel,gbConstraints);
  gbConstraints.gridx=3;
  gbConstraints.weightx=1;
  panel.add(new JPanel(),gbConstraints);
  panel.setBorder(new EmptyBorder(0,0,10,0));
  myExpandByCombo.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      myOpenKeymapLabel.setVisible(myExpandByCombo.getSelectedItem() == CUSTOM);
    }
  }
);
  for (  String s : ContainerUtil.ar(SPACE,TAB,ENTER,CUSTOM)) {
    myExpandByCombo.addItem(s);
  }
  myExpandByCombo.setRenderer(new ListCellRendererWrapper(){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value == CUSTOM) {
        Shortcut[] shortcuts=getCurrentCustomShortcuts();
        String shortcutText=shortcuts.length == 0 ? "" : KeymapUtil.getShortcutsText(shortcuts);
        setText(StringUtil.isEmpty(shortcutText) ? "Custom..." : "Custom (" + shortcutText + ")");
      }
    }
    private Shortcut[] getCurrentCustomShortcuts(){
      Settings allSettings=Settings.KEY.getData(DataManager.getInstance().getDataContext(myOpenKeymapLabel));
      KeymapPanel keymapPanel=allSettings == null ? null : allSettings.find(KeymapPanel.class);
      Shortcut[] shortcuts=keymapPanel == null ? null : keymapPanel.getCurrentShortcuts(IdeActions.ACTION_EXPAND_LIVE_TEMPLATE_CUSTOM);
      if (shortcuts == null) {
        Shortcut shortcut=ActionManager.getInstance().getKeyboardShortcut(IdeActions.ACTION_EXPAND_LIVE_TEMPLATE_CUSTOM);
        shortcuts=shortcut == null ? Shortcut.EMPTY_ARRAY : new Shortcut[]{shortcut};
      }
      return shortcuts;
    }
  }
);
  addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    final PropertyChangeEvent evt){
      if (isConfigurableOpenEvent(evt)) {
        resizeComboToFitCustomShortcut();
      }
    }
    private boolean isConfigurableOpenEvent(    PropertyChangeEvent evt){
      return evt.getPropertyName().equals("ancestor") && evt.getNewValue() != null && evt.getOldValue() == null;
    }
  }
);
  myOpenKeymapLabel.addHyperlinkListener(new HyperlinkAdapter(){
    @Override protected void hyperlinkActivated(    HyperlinkEvent e){
      Settings allSettings=Settings.KEY.getData(DataManager.getInstance().getDataContext(myOpenKeymapLabel));
      final KeymapPanel keymapPanel=allSettings == null ? new KeymapPanel() : allSettings.find(KeymapPanel.class);
      if (keymapPanel == null)       return;
      Runnable selectAction=new Runnable(){
        public void run(){
          keymapPanel.selectAction(IdeActions.ACTION_EXPAND_LIVE_TEMPLATE_CUSTOM);
        }
      }
;
      if (allSettings != null) {
        allSettings.select(keymapPanel).doWhenDone(selectAction);
      }
 else {
        ShowSettingsUtil.getInstance().editConfigurable(myOpenKeymapLabel,keymapPanel,selectAction);
        resizeComboToFitCustomShortcut();
      }
    }
  }
);
  return panel;
}
