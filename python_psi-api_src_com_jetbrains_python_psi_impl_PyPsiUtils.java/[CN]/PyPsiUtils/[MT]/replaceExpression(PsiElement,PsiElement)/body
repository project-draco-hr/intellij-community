{
  final Pair<PsiElement,TextRange> data=oldExpression.getUserData(SELECTION_BREAKS_AST_NODE);
  if (data != null) {
    final PsiElement element=data.first;
    final TextRange textRange=data.second;
    final String parentText=element.getText();
    final String prefix=parentText.substring(0,textRange.getStartOffset());
    final String suffix=parentText.substring(textRange.getEndOffset(),element.getTextLength());
    final PyElementGenerator generator=PyElementGenerator.getInstance(oldExpression.getProject());
    final LanguageLevel languageLevel=LanguageLevel.forElement(oldExpression);
    if (element instanceof PyStringLiteralExpression) {
      final Pair<String,String> quotes=PythonStringUtil.getQuotes(parentText);
      final PsiElement parent=element.getParent();
      final boolean parensNeeded=parent instanceof PyExpression && !(parent instanceof PyParenthesizedExpression);
      if (quotes != null) {
        final String leftQuote=quotes.getFirst();
        final String rightQuote=quotes.getSecond();
        final StringBuilder builder=new StringBuilder();
        if (parensNeeded) {
          builder.append("(");
        }
        if (!leftQuote.endsWith(prefix)) {
          builder.append(prefix + rightQuote + " + ");
        }
        final int pos=builder.toString().length();
        builder.append(newExpression.getText());
        if (!rightQuote.startsWith(suffix)) {
          builder.append(" + " + leftQuote + suffix);
        }
        if (parensNeeded) {
          builder.append(")");
        }
        final PsiElement expression=generator.createExpressionFromText(languageLevel,builder.toString());
        final PsiElement newElement=element.replace(expression);
        return newElement.findElementAt(pos);
      }
    }
    final PsiElement expression=generator.createFromText(languageLevel,element.getClass(),prefix + newExpression.getText() + suffix);
    return element.replace(expression);
  }
 else {
    return oldExpression.replace(newExpression);
  }
}
