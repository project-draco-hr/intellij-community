{
  PsiSubstitutor substitutor=state.get(PsiSubstitutor.KEY);
  if (substitutor == null)   substitutor=PsiSubstitutor.EMPTY;
  final PsiElement resolveContext=state.get(RESOLVE_CONTEXT);
  if (mySubstitutorComputer != null) {
    substitutor=mySubstitutorComputer.obtainSubstitutor(substitutor,method,resolveContext);
  }
  boolean isAccessible=isAccessible(method);
  final SpreadState spreadState=state.get(SpreadState.SPREAD_STATE);
  boolean isStaticsOK=isStaticsOK(method,resolveContext,false);
  final GroovyMethodResult candidate=new GroovyMethodResult(method,resolveContext,spreadState,substitutor,isAccessible,isStaticsOK);
  if (isAccessible && isStaticsOK) {
    addCandidate(candidate);
    return method instanceof GrGdkMethod;
  }
 else {
    addInapplicableCandidate(candidate);
    return true;
  }
}
