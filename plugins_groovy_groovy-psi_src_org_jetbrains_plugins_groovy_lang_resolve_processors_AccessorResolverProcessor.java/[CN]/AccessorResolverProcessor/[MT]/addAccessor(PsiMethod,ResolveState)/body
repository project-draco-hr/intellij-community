{
  final PsiSubstitutor substitutor=getSubstitutor(state);
  final PsiElement resolveContext=state.get(RESOLVE_CONTEXT);
  final NotNullCachedComputableWrapper<PsiSubstitutor> substitutorComputer=new NotNullCachedComputableWrapper<PsiSubstitutor>(new NotNullComputable<PsiSubstitutor>(){
    @NotNull @Override public PsiSubstitutor compute(){
      return mySubstitutorComputer.obtainSubstitutor(substitutor,method,resolveContext);
    }
  }
);
  boolean isAccessible=isAccessible(method);
  final SpreadState spreadState=state.get(SpreadState.SPREAD_STATE);
  boolean isStaticsOK=isStaticsOK(method,resolveContext,false);
  final GroovyMethodResult candidate=new GroovyMethodResult(method,resolveContext,spreadState,substitutor,substitutorComputer,isAccessible,isStaticsOK);
  if (isAccessible && isStaticsOK) {
    addCandidate(candidate);
    return method instanceof GrGdkMethod;
  }
 else {
    addInapplicableCandidate(candidate);
    return true;
  }
}
