{
  return new ResettableIterator<T>(){
    private QueueEntry<T> cursor=TOMB;
    private long count;
    @Override public boolean hasNext(){
      return cursor.next != TOMB;
    }
    @Override public T next(){
      cursor=cursor.next;
      count++;
      return cursor.t;
    }
    @Override public void remove(){
      if (cursor == TOMB)       throw new NoSuchElementException();
      HashSetQueue.this.remove(cursor.t);
    }
    @Override public Object markPosition(){
      return new IteratorPosition<T>(cursor,count);
    }
    @Override public boolean resetPosition(    Object p){
      @SuppressWarnings("unchecked") IteratorPosition<T> requested=(IteratorPosition<T>)p;
      if (requested.count <= count) {
        cursor=requested.cursor;
        count=requested.count;
        return true;
      }
      return false;
    }
  }
;
}
