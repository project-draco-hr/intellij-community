{
  final PsiLambdaExpression lambdaExpression=PsiTreeUtil.getParentOfType(expression,PsiLambdaExpression.class);
  boolean isLambdaReturnStmt=lambdaExpression != null && LambdaUtil.getReturnExpressions(lambdaExpression).contains(expression);
  if (isLambdaReturnStmt) {
    final boolean[] dependsOnParams=new boolean[]{false};
    expression.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitElement(      PsiElement element){
        if (dependsOnParams[0])         return;
        super.visitElement(element);
      }
      @Override public void visitReferenceExpression(      PsiReferenceExpression expression){
        if (dependsOnParams[0])         return;
        super.visitReferenceExpression(expression);
        final PsiElement resolve=expression.resolve();
        if (resolve instanceof PsiParameter && ((PsiParameter)resolve).getDeclarationScope() == lambdaExpression) {
          dependsOnParams[0]=true;
        }
      }
    }
);
    isLambdaReturnStmt=dependsOnParams[0];
  }
  return isLambdaReturnStmt;
}
