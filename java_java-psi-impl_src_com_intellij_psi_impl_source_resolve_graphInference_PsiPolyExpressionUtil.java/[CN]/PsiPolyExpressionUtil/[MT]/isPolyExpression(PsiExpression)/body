{
  if (expression instanceof PsiLambdaExpression || expression instanceof PsiMethodReferenceExpression) {
    return true;
  }
 else   if (expression instanceof PsiParenthesizedExpression) {
    return isPolyExpression(((PsiParenthesizedExpression)expression).getExpression());
  }
 else   if (expression instanceof PsiNewExpression) {
    final PsiJavaCodeReferenceElement classReference=((PsiNewExpression)expression).getClassReference();
    if (classReference != null) {
      final PsiReferenceParameterList parameterList=classReference.getParameterList();
      if (parameterList != null) {
        final PsiTypeElement[] typeElements=parameterList.getTypeParameterElements();
        if (typeElements.length == 1 && typeElements[0].getType() instanceof PsiDiamondType) {
          return isAssignmentOrInvocationContext(expression.getParent());
        }
      }
    }
  }
 else   if (expression instanceof PsiMethodCallExpression) {
    if (isAssignmentOrInvocationContext(expression.getParent()) && ((PsiMethodCallExpression)expression).getTypeArguments().length == 0) {
      final PsiMethod method=((PsiMethodCallExpression)expression).resolveMethod();
      if (method != null) {
        final Set<PsiTypeParameter> typeParameters=new HashSet<PsiTypeParameter>(Arrays.asList(method.getTypeParameters()));
        if (typeParameters.size() > 0) {
          final PsiType returnType=method.getReturnType();
          if (returnType != null) {
            return mentionsTypeParameters(returnType,typeParameters);
          }
        }
      }
    }
  }
 else   if (expression instanceof PsiConditionalExpression) {
    final ConditionalKind conditionalKind=isBooleanOrNumeric(expression);
    if (conditionalKind == null) {
      return isAssignmentOrInvocationContext(expression.getParent());
    }
  }
  return false;
}
