{
  Set<Thread> underIndicator;
  boolean alreadyUnder;
  boolean isStandard;
synchronized (threadsUnderIndicator) {
    underIndicator=threadsUnderIndicator.get(indicator);
    if (underIndicator == null) {
      underIndicator=new SmartHashSet<Thread>();
      threadsUnderIndicator.put(indicator,underIndicator);
    }
    alreadyUnder=!underIndicator.add(currentThread);
    isStandard=indicator instanceof StandardProgressIndicator;
    if (!isStandard) {
      nonStandardIndicators.add(indicator);
      if (myCheckCancelledFuture == null) {
        myCheckCancelledFuture=startBackgroundIndicatorPing();
      }
    }
    if (indicator.isCanceled()) {
      threadsUnderCanceledIndicator.add(currentThread);
    }
 else {
      threadsUnderCanceledIndicator.remove(currentThread);
    }
    thereIsProcessUnderCanceledIndicator=!threadsUnderCanceledIndicator.isEmpty();
  }
  try {
    if (indicator instanceof WrappedProgressIndicator) {
      ProgressIndicator wrappee=((WrappedProgressIndicator)indicator).getOriginalProgressIndicator();
      if (wrappee == indicator)       throw new IllegalArgumentException(indicator + " wraps itself");
      registerIndicatorAndRun(wrappee,currentThread,oldIndicator,process);
    }
 else {
      process.run();
    }
  }
  finally {
synchronized (threadsUnderIndicator) {
      boolean removed=alreadyUnder || underIndicator.remove(currentThread);
      if (removed && underIndicator.isEmpty()) {
        threadsUnderIndicator.remove(indicator);
      }
      if (!isStandard) {
        nonStandardIndicators.remove(indicator);
        if (nonStandardIndicators.isEmpty()) {
          myCheckCancelledFuture.cancel(true);
          myCheckCancelledFuture=null;
        }
      }
      if (oldIndicator != null && oldIndicator.isCanceled()) {
        threadsUnderCanceledIndicator.add(currentThread);
      }
 else {
        threadsUnderCanceledIndicator.remove(currentThread);
      }
      thereIsProcessUnderCanceledIndicator=!threadsUnderCanceledIndicator.isEmpty();
    }
  }
}
