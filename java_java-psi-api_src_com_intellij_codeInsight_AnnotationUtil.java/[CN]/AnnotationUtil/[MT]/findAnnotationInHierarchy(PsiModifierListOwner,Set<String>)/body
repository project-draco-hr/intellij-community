{
  PsiAnnotation directAnnotation=findAnnotation(listOwner,annotationNames);
  if (directAnnotation != null)   return directAnnotation;
  ConcurrentFactoryMap<Set<String>,PsiAnnotation> map=CachedValuesManager.getCachedValue(listOwner,new CachedValueProvider<ConcurrentFactoryMap<Set<String>,PsiAnnotation>>(){
    @Nullable @Override public Result<ConcurrentFactoryMap<Set<String>,PsiAnnotation>> compute(){
      ConcurrentFactoryMap<Set<String>,PsiAnnotation> value=new ConcurrentFactoryMap<Set<String>,PsiAnnotation>(){
        @Nullable @Override protected PsiAnnotation create(        Set<String> annotationNames){
          if (listOwner instanceof PsiMethod) {
            PsiMethod method=(PsiMethod)listOwner;
            PsiClass aClass=method.getContainingClass();
            if (aClass == null)             return null;
            HierarchicalMethodSignature methodSignature=method.getHierarchicalMethodSignature();
            return findAnnotationInHierarchy(methodSignature,annotationNames,method,null,JavaPsiFacade.getInstance(method.getProject()).getResolveHelper());
          }
          if (listOwner instanceof PsiClass) {
            return findAnnotationInHierarchy((PsiClass)listOwner,annotationNames,null);
          }
          if (listOwner instanceof PsiParameter) {
            PsiParameter parameter=(PsiParameter)listOwner;
            return doFindAnnotationInHierarchy(parameter,annotationNames,null);
          }
          return null;
        }
      }
;
      return Result.create(value,PsiModificationTracker.MODIFICATION_COUNT);
    }
  }
);
  return map.get(annotationNames);
}
