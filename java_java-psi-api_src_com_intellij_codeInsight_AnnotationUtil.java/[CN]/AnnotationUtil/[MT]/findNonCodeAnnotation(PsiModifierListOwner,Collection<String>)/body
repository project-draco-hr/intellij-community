{
  ConcurrentFactoryMap<Collection<String>,PsiAnnotation> map=CachedValuesManager.getCachedValue(listOwner,new CachedValueProvider<ConcurrentFactoryMap<Collection<String>,PsiAnnotation>>(){
    @Nullable @Override public Result<ConcurrentFactoryMap<Collection<String>,PsiAnnotation>> compute(){
      ConcurrentFactoryMap<Collection<String>,PsiAnnotation> value=new ConcurrentFactoryMap<Collection<String>,PsiAnnotation>(){
        @Nullable @Override protected PsiAnnotation create(        Collection<String> annotationNames){
          final Project project=listOwner.getProject();
          final ExternalAnnotationsManager annotationsManager=ExternalAnnotationsManager.getInstance(project);
          for (          String annotationName : annotationNames) {
            final PsiAnnotation annotation=annotationsManager.findExternalAnnotation(listOwner,annotationName);
            if (annotation != null) {
              return annotation;
            }
          }
          final InferredAnnotationsManager inferredAnnotationsManager=InferredAnnotationsManager.getInstance(project);
          for (          String annotationName : annotationNames) {
            final PsiAnnotation annotation=inferredAnnotationsManager.findInferredAnnotation(listOwner,annotationName);
            if (annotation != null) {
              return annotation;
            }
          }
          return null;
        }
      }
;
      return Result.create(value,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);
    }
  }
);
  return map.get(annotationNames);
}
