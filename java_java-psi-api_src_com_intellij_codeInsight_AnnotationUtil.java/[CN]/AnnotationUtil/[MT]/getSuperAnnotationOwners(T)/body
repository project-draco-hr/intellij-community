{
  return CachedValuesManager.getCachedValue(element,new CachedValueProvider<List<T>>(){
    @Nullable @Override public Result<List<T>> compute(){
      LinkedHashSet<PsiModifierListOwner> result=ContainerUtil.newLinkedHashSet();
      if (element instanceof PsiMethod) {
        collectSuperMethods(result,((PsiMethod)element).getHierarchicalMethodSignature(),element,JavaPsiFacade.getInstance(element.getProject()).getResolveHelper());
      }
 else       if (element instanceof PsiClass) {
        InheritanceUtil.processSupers((PsiClass)element,false,new CommonProcessors.CollectProcessor<PsiClass>((Set)result));
      }
 else       if (element instanceof PsiParameter) {
        collectSuperParameters(result,(PsiParameter)element);
      }
      List<T> list=new ArrayList<T>();
      list.addAll((Collection<? extends T>)result);
      List<Object> dependencies=ContainerUtil.<Object>newArrayList(result);
      dependencies.add(PsiModificationTracker.MODIFICATION_COUNT);
      return Result.create(list,dependencies);
    }
  }
);
}
