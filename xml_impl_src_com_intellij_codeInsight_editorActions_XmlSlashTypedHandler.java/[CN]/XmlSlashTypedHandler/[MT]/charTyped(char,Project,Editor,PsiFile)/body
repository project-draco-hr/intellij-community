{
  if ((editedFile.getLanguage() instanceof XMLLanguage || editedFile.getViewProvider().getBaseLanguage() instanceof XMLLanguage) && c == '/') {
    PsiDocumentManager.getInstance(project).commitAllDocuments();
    PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
    if (file == null)     return Result.CONTINUE;
    FileViewProvider provider=file.getViewProvider();
    final int offset=editor.getCaretModel().getOffset();
    PsiElement element=provider.findElementAt(offset - 1,XMLLanguage.class);
    if (element == null)     return Result.CONTINUE;
    if (!(element.getLanguage() instanceof XMLLanguage))     return Result.CONTINUE;
    ASTNode prevLeaf=element.getNode();
    if (prevLeaf == null)     return Result.CONTINUE;
    final String prevLeafText=prevLeaf.getText();
    if ("</".equals(prevLeafText) && prevLeaf.getElementType() == XML_END_TAG_START) {
      XmlTag tag=PsiTreeUtil.getParentOfType(element,XmlTag.class);
      if (tag != null && StringUtil.isNotEmpty(tag.getName()) && TreeUtil.findSibling(prevLeaf,XmlTokenType.XML_NAME) == null) {
        if (provider instanceof MultiplePsiFilesPerDocumentFileViewProvider) {
          PsiElement element1=SingleRootFileViewProvider.findElementAt(file,offset - 1);
          XmlTag tag1=PsiTreeUtil.getParentOfType(element1,XmlTag.class);
          if (tag1 != null && tag1 != tag && tag1.getTextOffset() > tag.getTextOffset() && element1.getText().startsWith("</")) {
            tag=tag1;
          }
        }
        EditorModificationUtil.typeInStringAtCaretHonorMultipleCarets(editor,tag.getName() + ">",false);
        return Result.STOP;
      }
    }
    if (!"/".equals(prevLeafText.trim()))     return Result.CONTINUE;
    while ((prevLeaf=TreeUtil.prevLeaf(prevLeaf)) != null && prevLeaf.getElementType() == XmlTokenType.XML_WHITE_SPACE)     ;
    if (prevLeaf instanceof OuterLanguageElement) {
      element=file.getViewProvider().findElementAt(offset - 1,file.getLanguage());
      prevLeaf=element != null ? element.getNode() : null;
      while ((prevLeaf=TreeUtil.prevLeaf(prevLeaf)) != null && prevLeaf.getElementType() == XmlTokenType.XML_WHITE_SPACE)       ;
    }
    if (prevLeaf == null)     return Result.CONTINUE;
    XmlTag tag=PsiTreeUtil.getParentOfType(prevLeaf.getPsi(),XmlTag.class);
    if (tag == null) {
      PsiElement element2=provider.findElementAt(prevLeaf.getStartOffset(),XMLLanguage.class);
      tag=PsiTreeUtil.getParentOfType(element2,XmlTag.class);
      if (tag == null)       return Result.CONTINUE;
    }
    final XmlToken startToken=XmlUtil.getTokenOfType(tag,XmlTokenType.XML_START_TAG_START);
    if (startToken == null || !startToken.getText().equals("<"))     return Result.CONTINUE;
    if (XmlUtil.getTokenOfType(tag,XmlTokenType.XML_TAG_END) != null)     return Result.CONTINUE;
    if (XmlUtil.getTokenOfType(tag,XmlTokenType.XML_EMPTY_ELEMENT_END) != null)     return Result.CONTINUE;
    if (PsiTreeUtil.getParentOfType(element,XmlAttributeValue.class) != null)     return Result.CONTINUE;
    EditorModificationUtil.typeInStringAtCaretHonorMultipleCarets(editor,">",false);
    return Result.STOP;
  }
  return Result.CONTINUE;
}
