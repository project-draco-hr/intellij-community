{
  expression=ParenthesesUtils.stripParentheses(expression);
  if (!(expression instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final String name=methodExpression.getReferenceName();
  if (!"holdsLock".equals(name)) {
    return false;
  }
  final PsiMethod method=methodCallExpression.resolveMethod();
  if (method == null) {
    return false;
  }
  final PsiClass aClass=method.getContainingClass();
  return com.intellij.psi.util.InheritanceUtil.isInheritor(aClass,"java.lang.Thread");
}
