{
  super.visitIfStatement(ifStatement);
  final PsiStatement elseBranch=unwrap(ifStatement.getElseBranch());
  final PsiStatement thenBranch=unwrap(ifStatement.getThenBranch());
  if (thenBranch == null) {
    return;
  }
  final Project project=ifStatement.getProject();
  final InputVariables inputVariables=new InputVariables(Collections.emptyList(),project,new LocalSearchScope(thenBranch),false);
  final DuplicatesFinder finder=new DuplicatesFinder(new PsiElement[]{thenBranch},inputVariables,null,Collections.emptyList());
  if (elseBranch instanceof PsiIfStatement) {
    final PsiIfStatement statement=(PsiIfStatement)elseBranch;
    final PsiStatement branch=unwrap(statement.getThenBranch());
    if (branch == null) {
      return;
    }
    final Match match=finder.isDuplicate(branch,true);
    if (match != null) {
      final ReturnValue matchReturnValue=match.getReturnValue();
      if (matchReturnValue instanceof ConditionalReturnStatementValue && !matchReturnValue.isEquivalent(buildReturnValue(thenBranch))) {
        return;
      }
 else       if (matchReturnValue instanceof ExpressionReturnValue) {
        return;
      }
      registerStatementError(ifStatement,statement);
      return;
    }
  }
  if (elseBranch == null) {
    checkIfStatementWithoutElseBranch(ifStatement);
  }
 else {
    final Match match=finder.isDuplicate(elseBranch,true);
    if (match != null) {
      final ReturnValue matchReturnValue=match.getReturnValue();
      if (matchReturnValue instanceof ConditionalReturnStatementValue && !matchReturnValue.isEquivalent(buildReturnValue(thenBranch))) {
        return;
      }
 else       if (matchReturnValue instanceof ExpressionReturnValue) {
        return;
      }
      registerStatementError(ifStatement);
    }
  }
}
