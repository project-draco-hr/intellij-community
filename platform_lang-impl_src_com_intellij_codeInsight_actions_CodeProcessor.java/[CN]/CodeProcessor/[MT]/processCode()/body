{
  AbstractLayoutCodeProcessor processor;
  if (myShouldOptimizeImports) {
    processor=new OptimizeImportsProcessor(myProject,myFile);
    new ReformatCodeProcessor(processor,myProcessChangesTextOnly);
  }
 else {
    SelectionModel model=myEditor.getSelectionModel();
    TextRange range=myProcessSelectedText && model.hasSelection() ? new TextRange(model.getSelectionStart(),model.getSelectionEnd()) : null;
    processor=new ReformatCodeProcessor(myProject,myFile,range,false);
  }
  if (myShouldRearrangeCode) {
    if (myProcessSelectedText) {
      processor=new RearrangeCodeProcessor(processor,myEditor.getSelectionModel());
    }
 else {
      processor=new RearrangeCodeProcessor(processor);
    }
  }
  if (myShouldNotify) {
    final Document document=PsiDocumentManager.getInstance(myProject).getDocument(myFile);
    final CharSequence textBeforeChange=document != null ? document.getImmutableCharSequence() : null;
    processor.setPostRunnable(new Runnable(){
      @Override public void run(){
        if (document != null) {
          String info=prepareMessage(document,textBeforeChange);
          showHint(myEditor,info);
        }
      }
    }
);
  }
  processor.run();
}
