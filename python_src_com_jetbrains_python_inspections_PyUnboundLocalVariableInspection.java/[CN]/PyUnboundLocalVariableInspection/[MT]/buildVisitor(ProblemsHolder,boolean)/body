{
  return new PyInspectionVisitor(holder){
    @Override public void visitPyReferenceExpression(    final PyReferenceExpression node){
      if (PyCallExpressionNavigator.getPyCallExpressionByCallee(node) != null) {
        return;
      }
      if (PyGlobalStatementNavigator.getPyGlobalStatementByArgument(node) != null) {
        return;
      }
      final PyExpression qualifier=node.getQualifier();
      if (qualifier != null) {
        qualifier.accept(this);
        return;
      }
      if (PyImportStatementNavigator.getImportStatementByElement(node) != null) {
        return;
      }
      final ScopeOwner owner=PsiTreeUtil.getParentOfType(node,ScopeOwner.class);
      if (owner == null) {
        return;
      }
      final String name=node.getReferencedName();
      final Scope scope=owner.getScope();
      if (scope.isGlobal(name) || (!scope.containsDeclaration(name))) {
        return;
      }
      final ScopeVariable variable=scope.getDeclaredVariable(node,name);
      if (variable == null) {
        boolean resolves2LocalVariable=false;
        boolean resolve2Scope=true;
        for (        ResolveResult result : node.multiResolve(true)) {
          final PsiElement element=result.getElement();
          if (element == null) {
            continue;
          }
          if ("__builtin__.py".equals(element.getContainingFile().getName())) {
            continue;
          }
          if (PyAssignmentStatementNavigator.getStatementByTarget(element) != null) {
            resolves2LocalVariable=true;
            resolve2Scope=PsiTreeUtil.isAncestor(owner,element,false);
            break;
          }
        }
        if (resolves2LocalVariable) {
          if (owner instanceof PyClass || owner instanceof PyFunction) {
            registerProblem(node,PyBundle.message("INSP.unbound.local.variable",node.getName()),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,null,new AddGlobalQuickFix());
          }
 else {
            if (resolve2Scope) {
              registerProblem(node,PyBundle.message("INSP.unbound.name.not.defined",node.getName()));
            }
          }
        }
      }
    }
  }
;
}
