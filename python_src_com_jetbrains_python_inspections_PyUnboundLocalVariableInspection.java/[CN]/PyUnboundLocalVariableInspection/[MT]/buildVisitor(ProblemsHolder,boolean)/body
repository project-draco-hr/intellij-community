{
  return new PyInspectionVisitor(holder){
    @Override public void visitPyReferenceExpression(    final PyReferenceExpression node){
      if (node.getContainingFile() instanceof PyExpressionCodeFragment || PydevConsoleRunner.isInPydevConsole(node)) {
        return;
      }
      if (PyGlobalStatementNavigator.getByArgument(node) != null) {
        return;
      }
      final PyExpression qualifier=node.getQualifier();
      if (qualifier != null) {
        qualifier.accept(this);
        return;
      }
      if (PyImportStatementNavigator.getImportStatementByElement(node) != null) {
        return;
      }
      final ScopeOwner owner=PsiTreeUtil.getParentOfType(node,ScopeOwner.class);
      if (owner == null) {
        return;
      }
      final String name=node.getReferencedName();
      if (name == null) {
        return;
      }
      final Scope scope=ControlFlowCache.getScope(owner);
      if (scope.isGlobal(name) || (!scope.containsDeclaration(name))) {
        return;
      }
      final ScopeVariable variable=scope.getDeclaredVariable(node,name);
      if (variable == null) {
        boolean resolves2LocalVariable=false;
        boolean resolve2Scope=true;
        for (        ResolveResult result : node.getReference().multiResolve(true)) {
          final PsiElement element=result.getElement();
          if (element == null) {
            continue;
          }
          final PsiFile containingFile=element.getContainingFile();
          if (containingFile != null) {
            final String fileName=containingFile.getName();
            if (PyBuiltinCache.BUILTIN_FILE.equals(fileName) || PyBuiltinCache.BUILTIN_FILE_3K.equals(fileName)) {
              continue;
            }
          }
          if (PyAssignmentStatementNavigator.getStatementByTarget(element) != null || PyForStatementNavigator.getPyForStatementByIterable(element) != null || PyExceptPartNavigator.getPyExceptPartByTarget(element) != null || PyListCompExpressionNavigator.getPyListCompExpressionByVariable(element) != null) {
            resolves2LocalVariable=true;
            resolve2Scope=PsiTreeUtil.isAncestor(owner,element,false);
            break;
          }
        }
        if (!resolves2LocalVariable) {
          return;
        }
        final Ref<Boolean> readAccessSeen=new Ref<Boolean>(false);
        final Instruction[] instructions=ControlFlowCache.getControlFlow(owner).getInstructions();
        final int number=ControlFlowUtil.findInstructionNumberByElement(instructions,node);
        if (number != -1) {
          ControlFlowUtil.iteratePrev(number,instructions,new Function<Instruction,ControlFlowUtil.Operation>(){
            public ControlFlowUtil.Operation fun(            final Instruction inst){
              if (inst.num() == number) {
                return ControlFlowUtil.Operation.NEXT;
              }
              if (inst instanceof ReadWriteInstruction) {
                final ReadWriteInstruction rwInst=(ReadWriteInstruction)inst;
                if (name.equals(rwInst.getName())) {
                  if (scope.getDeclaredVariable(inst.getElement(),name) != null) {
                    return ControlFlowUtil.Operation.BREAK;
                  }
                  if (rwInst.getAccess().isWriteAccess()) {
                    return ControlFlowUtil.Operation.CONTINUE;
                  }
 else {
                    readAccessSeen.set(true);
                    return ControlFlowUtil.Operation.BREAK;
                  }
                }
              }
              return ControlFlowUtil.Operation.NEXT;
            }
          }
);
        }
        if (readAccessSeen.get()) {
          return;
        }
        if (resolve2Scope) {
          if (owner instanceof PyFile) {
            registerProblem(node,PyBundle.message("INSP.unbound.name.not.defined",node.getName()));
          }
 else {
            registerProblem(node,PyBundle.message("INSP.unbound.local.variable",node.getName()),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,null,new AddGlobalQuickFix(),new AddNoinspectionQuickFix("PyUnboundLocalVariable",PsiTreeUtil.getParentOfType(node,PyStatement.class)));
          }
        }
 else         if (owner instanceof PyFunction && PsiTreeUtil.getParentOfType(owner,PyClass.class,PyFile.class) instanceof PyFile) {
          registerProblem(node,PyBundle.message("INSP.unbound.local.variable",node.getName()),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,null,new AddGlobalQuickFix(),new AddNoinspectionQuickFix("PyUnboundLocalVariable",PsiTreeUtil.getParentOfType(node,PyStatement.class)));
        }
      }
    }
  }
;
}
