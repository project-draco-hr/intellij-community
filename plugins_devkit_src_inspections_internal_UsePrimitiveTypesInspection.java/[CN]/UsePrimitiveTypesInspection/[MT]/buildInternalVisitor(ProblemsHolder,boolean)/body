{
  return new JavaElementVisitor(){
    @Override public void visitBinaryExpression(    PsiBinaryExpression expression){
      super.visitBinaryExpression(expression);
      final IElementType tokenType=expression.getOperationTokenType();
      if (tokenType.equals(JavaTokenType.EQEQ) || tokenType.equals(JavaTokenType.NE)) {
        final PsiExpression lOperand=expression.getLOperand();
        final PsiExpression rOperand=expression.getROperand();
        if (rOperand != null && (isPrimitiveTypeRef(lOperand) || isPrimitiveTypeRef(rOperand))) {
          final String name;
          if (JavaTokenType.NE.equals(tokenType)) {
            name=IntentionPowerPackBundle.message("replace.equality.with.not.equals.intention.name");
          }
 else {
            name=IntentionPowerPackBundle.message("replace.equality.with.equals.intention.name");
          }
          holder.registerProblem(expression.getOperationSign(),"Primitive types should be compared with .equals",new ReplaceEqualityWithEqualsFix(name));
        }
      }
    }
  }
;
}
