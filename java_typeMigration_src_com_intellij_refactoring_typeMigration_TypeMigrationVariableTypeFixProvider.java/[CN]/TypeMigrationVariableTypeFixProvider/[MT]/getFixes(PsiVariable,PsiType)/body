{
  return new IntentionAction[]{new VariableTypeFix(variable,toReturn){
    @NotNull @Override public String getText(){
      return "Migrate \'" + myName + "\' type to \'"+ getReturnType().getCanonicalText()+ "\'";
    }
    @Override public void invoke(    @NotNull Project project,    @NotNull PsiFile file,    @Nullable("is null when called from inspection") Editor editor,    @NotNull PsiElement startElement,    @NotNull PsiElement endElement){
      final PsiVariable myVariable=(PsiVariable)startElement;
      if (!FileModificationService.getInstance().prepareFileForWrite(myVariable.getContainingFile()))       return;
      try {
        myVariable.normalizeDeclaration();
        final TypeMigrationRules rules=new TypeMigrationRules(TypeMigrationLabeler.getElementType(myVariable));
        rules.setMigrationRootType(getReturnType());
        rules.setBoundScope(GlobalSearchScope.projectScope(project));
        TypeMigrationProcessor.runHighlightingTypeMigration(project,editor,rules,myVariable);
        JavaCodeStyleManager.getInstance(project).shortenClassReferences(myVariable);
        UndoUtil.markPsiFileForUndo(file);
      }
 catch (      IncorrectOperationException e) {
        LOG1.error(e);
      }
    }
    @Override public boolean startInWriteAction(){
      return true;
    }
  }
};
}
