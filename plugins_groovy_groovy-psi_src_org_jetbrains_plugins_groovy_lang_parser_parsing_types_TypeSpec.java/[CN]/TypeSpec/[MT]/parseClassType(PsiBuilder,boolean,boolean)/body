{
  PsiBuilder.Marker arrMarker=builder.mark();
  PsiBuilder.Marker typeElementMarker=builder.mark();
  final ReferenceElement.ReferenceElementResult result=ReferenceElement.parseReferenceElement(builder,isUpper,expressionPossible);
  if (result == ReferenceElement.ReferenceElementResult.FAIL) {
    typeElementMarker.drop();
    arrMarker.rollbackTo();
    return ReferenceElement.ReferenceElementResult.FAIL;
  }
  typeElementMarker.done(GroovyElementTypes.CLASS_TYPE_ELEMENT);
  if (ParserUtils.lookAhead(builder,GroovyTokenTypes.mLBRACK,GroovyTokenTypes.mRBRACK)) {
    declarationBracketsParse(builder,arrMarker);
    return ReferenceElement.ReferenceElementResult.REF_WITH_TYPE_PARAMS;
  }
 else {
    arrMarker.drop();
    return result;
  }
}
