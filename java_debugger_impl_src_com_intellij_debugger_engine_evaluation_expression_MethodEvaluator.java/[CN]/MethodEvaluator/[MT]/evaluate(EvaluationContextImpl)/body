{
  if (!context.getDebugProcess().isAttached())   return null;
  DebugProcessImpl debugProcess=context.getDebugProcess();
  final boolean requiresSuperObject=myObjectEvaluator instanceof SuperEvaluator || (myObjectEvaluator instanceof DisableGC && ((DisableGC)myObjectEvaluator).getDelegate() instanceof SuperEvaluator);
  final Object object=myObjectEvaluator.evaluate(context);
  if (LOG.isDebugEnabled()) {
    LOG.debug("MethodEvaluator: object = " + object);
  }
  if (object == null) {
    throw EvaluateExceptionUtil.createEvaluateException(new NullPointerException());
  }
  if (!(object instanceof ObjectReference || object instanceof ClassType)) {
    throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.evaluating.method",myMethodName));
  }
  List args=new ArrayList(myArgumentEvaluators.length);
  for (  Evaluator evaluator : myArgumentEvaluators) {
    args.add(evaluator.evaluate(context));
  }
  try {
    ReferenceType referenceType=null;
    if (object instanceof ObjectReference) {
      referenceType=((ObjectReference)object).referenceType();
    }
 else     if (object instanceof ClassType) {
      final ClassType qualifierType=(ClassType)object;
      referenceType=debugProcess.findClass(context,qualifierType.name(),context.getClassLoader());
    }
 else {
      final String className=myClassName != null ? myClassName.getName(debugProcess) : null;
      if (className != null) {
        referenceType=debugProcess.findClass(context,className,context.getClassLoader());
      }
    }
    if (referenceType == null) {
      throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.cannot.evaluate.qualifier",myMethodName)));
    }
    final String signature=myMethodSignature != null ? myMethodSignature.getName(debugProcess) : null;
    final String methodName=DebuggerUtilsEx.methodName(referenceType.name(),myMethodName,signature);
    if (object instanceof ClassType) {
      if (referenceType instanceof ClassType) {
        Method jdiMethod;
        if (myMethodSignature != null) {
          jdiMethod=((ClassType)referenceType).concreteMethodByName(myMethodName,myMethodSignature.getName(debugProcess));
        }
 else {
          List list=referenceType.methodsByName(myMethodName);
          jdiMethod=(Method)(list.size() > 0 ? list.get(0) : null);
        }
        if (jdiMethod != null && jdiMethod.isStatic()) {
          return debugProcess.invokeMethod(context,(ClassType)referenceType,jdiMethod,args);
        }
      }
      throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.no.static.method",methodName));
    }
    final ObjectReference objRef=(ObjectReference)object;
    ReferenceType _refType=referenceType;
    if (requiresSuperObject && (referenceType instanceof ClassType)) {
      _refType=((ClassType)referenceType).superclass();
    }
    Method jdiMethod=DebuggerUtils.findMethod(_refType,myMethodName,signature);
    if (signature == null) {
      if (jdiMethod == null || jdiMethod.argumentTypeNames().size() != args.size()) {
        for (        Method method : _refType.methodsByName(myMethodName)) {
          if (method.argumentTypeNames().size() == args.size()) {
            jdiMethod=method;
            break;
          }
        }
      }
    }
 else     if (myMustBeVararg && jdiMethod != null && !jdiMethod.isVarArgs() && jdiMethod.isBridge()) {
      int retTypePos=signature.lastIndexOf(")");
      if (retTypePos >= 0) {
        String signatureNoRetType=signature.substring(0,retTypePos + 1);
        for (        Method method : _refType.visibleMethods()) {
          if (method.name().equals(myMethodName) && method.signature().startsWith(signatureNoRetType) && !method.isBridge()&& !method.isAbstract()) {
            jdiMethod=method;
            break;
          }
        }
      }
    }
    if (jdiMethod == null) {
      throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.no.instance.method",methodName));
    }
    if (requiresSuperObject) {
      return debugProcess.invokeInstanceMethod(context,objRef,jdiMethod,args,ObjectReference.INVOKE_NONVIRTUAL);
    }
    if (myCheckDefaultInterfaceMethod && jdiMethod.declaringType() instanceof InterfaceType) {
      try {
        return invokeDefaultMethod(debugProcess,context,objRef,myMethodName);
      }
 catch (      EvaluateException e) {
        LOG.info(e);
      }
    }
    return debugProcess.invokeMethod(context,objRef,jdiMethod,args);
  }
 catch (  Exception e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(e);
    }
    throw EvaluateExceptionUtil.createEvaluateException(e);
  }
}
