{
  PyAssignmentStatement assignmentStatement=PsiTreeUtil.getParentOfType(elementAt,PyAssignmentStatement.class);
  if (assignmentStatement != null) {
    final PyExpression assignedValue=assignmentStatement.getAssignedValue();
    if (assignedValue != null) {
      PyType type=assignedValue.getType(TypeEvalContext.slow());
      if (type == null || type instanceof PyReturnTypeReference) {
        final PyCallExpression callExpression=PsiTreeUtil.getParentOfType(assignedValue,PyCallExpression.class,false);
        if (callExpression != null) {
          final PyExpression callee=callExpression.getCallee();
          if (callee != null) {
            final PsiReference reference=callee.getReference();
            final PyFunction pyFunction=(PyFunction)callExpression.resolveCalleeFunction(PyResolveContext.defaultContext());
            if (reference instanceof PsiPolyVariantReference && pyFunction != null && ((PsiPolyVariantReference)reference).multiResolve(false).length == 1) {
              myText=PyBundle.message("INTN.specify.return.type");
              return true;
            }
          }
        }
      }
    }
  }
 else {
    PyFunction parentFunction=PsiTreeUtil.getParentOfType(elementAt,PyFunction.class);
    if (parentFunction != null) {
      final ASTNode nameNode=parentFunction.getNameNode();
      if (nameNode != null && nameNode.getPsi() == elementAt) {
        myText=PyBundle.message("INTN.specify.return.type");
        return true;
      }
    }
  }
  return false;
}
