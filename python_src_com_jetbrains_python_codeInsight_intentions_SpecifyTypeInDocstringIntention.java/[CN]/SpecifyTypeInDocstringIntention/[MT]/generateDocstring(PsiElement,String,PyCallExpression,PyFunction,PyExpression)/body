{
  PsiReference reference=null;
  PyDocstringGenerator docstringGenerator=new PyDocstringGenerator(pyFunction);
  String name="";
  if (problemElement != null) {
    name=problemElement.getName();
    reference=problemElement.getReference();
    if (problemElement instanceof PyQualifiedExpression) {
      final PyExpression qualifier=((PyQualifiedExpression)problemElement).getQualifier();
      if (qualifier != null) {
        reference=qualifier.getReference();
        name=qualifier.getText();
      }
    }
    pyFunction=PsiTreeUtil.getParentOfType(problemElement,PyFunction.class);
  }
  if (pyFunction == null || name == null)   return;
  PySignature signature=PySignatureCacheManager.getInstance(project).findSignature(function);
  if (signature != null) {
    docstringGenerator.withParamTypedByQualifiedName(kind,name,signature.getArgTypeQualifiedName(name),function);
  }
 else {
    docstringGenerator.withParam(kind,name);
  }
  final ASTNode nameNode=pyFunction.getNameNode();
  if ((problemElement instanceof PyParameter || reference != null && reference.resolve() instanceof PyParameter) || (nameNode != null && elementAt == nameNode.getPsi()) || callExpression != null) {
    docstringGenerator.build();
  }
  docstringGenerator.startTemplate();
}
