{
  myText=PyBundle.message("INTN.specify.type");
  PsiElement elementAt=PyUtil.findNonWhitespaceAtOffset(file,editor.getCaretModel().getOffset());
  if (elementAt == null)   return false;
  PyCallExpression callExpression=PsiTreeUtil.getParentOfType(elementAt,PyCallExpression.class);
  if (callExpression != null && callExpression.resolveCalleeFunction(PyResolveContext.defaultContext()) != null) {
    PyAssignmentStatement assignmentStatement=PsiTreeUtil.getParentOfType(elementAt,PyAssignmentStatement.class);
    if (assignmentStatement != null) {
      final PyExpression assignedValue=assignmentStatement.getAssignedValue();
      if (assignedValue != null) {
        PyType type=assignedValue.getType(TypeEvalContext.slow());
        if (type == null || type instanceof PyReturnTypeReference) {
          myText=PyBundle.message("INTN.specify.return.type");
          return true;
        }
      }
    }
  }
 else {
    PyFunction parentFunction=PsiTreeUtil.getParentOfType(elementAt,PyFunction.class);
    if (parentFunction != null) {
      final ASTNode nameNode=parentFunction.getNameNode();
      if (nameNode != null && nameNode.getPsi() == elementAt) {
        myText=PyBundle.message("INTN.specify.return.type");
        return true;
      }
    }
  }
  PyExpression problemElement=PyUtil.findProblemElement(editor,file,PyNamedParameter.class,PyQualifiedExpression.class);
  if (problemElement == null)   return false;
  if (problemElement instanceof PyQualifiedExpression) {
    final PyExpression qualifier=((PyQualifiedExpression)problemElement).getQualifier();
    if (qualifier != null && !qualifier.getText().equals(PyNames.CANONICAL_SELF)) {
      problemElement=qualifier;
    }
  }
  if (problemElement.getParent() instanceof PyCallExpression || PsiTreeUtil.getParentOfType(problemElement,PyLambdaExpression.class) != null) {
    return false;
  }
  final PyType type=problemElement.getType(TypeEvalContext.slow());
  if (type == null || type instanceof PyReturnTypeReference || type instanceof PyDynamicallyEvaluatedType) {
    PyFunction pyFunction=PsiTreeUtil.getParentOfType(problemElement,PyFunction.class);
    PsiReference reference=problemElement.getReference();
    if (problemElement instanceof PyQualifiedExpression) {
      final PyExpression qualifier=((PyQualifiedExpression)problemElement).getQualifier();
      if (qualifier != null && !qualifier.getText().equals(PyNames.CANONICAL_SELF))       reference=qualifier.getReference();
    }
    if (pyFunction != null && (problemElement instanceof PyParameter || reference != null && reference.resolve() instanceof PyParameter)) {
      final String docstring=pyFunction.getDocStringValue();
      if (docstring != null) {
        String name=problemElement.getName();
        if (problemElement instanceof PyQualifiedExpression) {
          final PyExpression qualifier=((PyQualifiedExpression)problemElement).getQualifier();
          if (qualifier != null)           name=qualifier.getText();
        }
        if (docstring.contains("type " + name + ":"))         return false;
      }
      return true;
    }
  }
  return false;
}
