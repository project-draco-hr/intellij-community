{
  PsiElement elementAt=file.findElementAt(editor.getCaretModel().getOffset() - 1);
  if (elementAt != null && !(elementAt.getNode().getElementType() == PyTokenTypes.IDENTIFIER)) {
    elementAt=file.findElementAt(editor.getCaretModel().getOffset());
  }
  String kind="type";
  PyCallExpression callExpression=PyUtil.findProblemElement(editor,file,PyCallExpression.class);
  PyFunction function=PsiTreeUtil.getParentOfType(elementAt,PyFunction.class);
  PyExpression problemElement=PyUtil.findProblemElement(editor,file,PyNamedParameter.class,PyQualifiedExpression.class);
  if (callExpression != null) {
    PyAssignmentStatement assignmentStatement=PsiTreeUtil.getParentOfType(elementAt,PyAssignmentStatement.class);
    if (assignmentStatement != null) {
      PyType pyType=assignmentStatement.getAssignedValue().getType(TypeEvalContext.slow());
      if (pyType == null || pyType instanceof PyReturnTypeReference) {
        function=(PyFunction)callExpression.resolveCalleeFunction(PyResolveContext.defaultContext());
        problemElement=null;
        kind="rtype";
      }
    }
  }
  if (function != null) {
    final ASTNode nameNode=function.getNameNode();
    if (nameNode != null && nameNode.getPsi() == elementAt) {
      kind="rtype";
    }
  }
  PsiReference reference=null;
  PyDocstringGenerator docstringGenerator=new PyDocstringGenerator(function);
  String name="";
  if (problemElement != null) {
    name=problemElement.getName();
    reference=problemElement.getReference();
    if (problemElement instanceof PyQualifiedExpression) {
      final PyExpression qualifier=((PyQualifiedExpression)problemElement).getQualifier();
      if (qualifier != null) {
        reference=qualifier.getReference();
        name=qualifier.getText();
      }
    }
    function=PsiTreeUtil.getParentOfType(problemElement,PyFunction.class);
  }
  PySignature signature=PySignatureCacheManager.getInstance(project).findSignature(function);
  if (signature != null) {
    docstringGenerator.withParamTypedByQualifiedName(kind,name,signature.getArgTypeQualifiedName(name),function);
  }
 else {
    docstringGenerator.withParam(kind,name);
  }
  final ASTNode nameNode=function.getNameNode();
  if ((function != null && (problemElement instanceof PyParameter || reference != null && reference.resolve() instanceof PyParameter)) || elementAt == nameNode.getPsi() || callExpression != null) {
    docstringGenerator.build();
  }
  docstringGenerator.startTemplate();
}
