{
  PsiElement elementAt=PyUtil.findNonWhitespaceAtOffset(file,editor.getCaretModel().getOffset());
  String kind="type";
  PyCallExpression callExpression=PsiTreeUtil.getParentOfType(elementAt,PyCallExpression.class);
  PyFunction pyFunction=PsiTreeUtil.getParentOfType(elementAt,PyFunction.class);
  PyExpression problemElement=PsiTreeUtil.getParentOfType(elementAt,PyNamedParameter.class,PyQualifiedExpression.class);
  if (callExpression != null) {
    PyAssignmentStatement assignmentStatement=PsiTreeUtil.getParentOfType(elementAt,PyAssignmentStatement.class);
    if (assignmentStatement != null) {
      final PyExpression assignedValue=assignmentStatement.getAssignedValue();
      if (assignedValue != null) {
        PyType pyType=assignedValue.getType(TypeEvalContext.slow());
        if (pyType == null || pyType instanceof PyReturnTypeReference) {
          pyFunction=(PyFunction)callExpression.resolveCalleeFunction(PyResolveContext.defaultContext());
          problemElement=null;
          kind="rtype";
        }
      }
    }
  }
  if (pyFunction != null) {
    final ASTNode nameNode=pyFunction.getNameNode();
    if (nameNode != null && nameNode.getPsi() == elementAt) {
      kind="rtype";
    }
  }
  generateDocstring(elementAt,kind,callExpression,pyFunction,problemElement);
}
