{
  PsiElement elementAt=PyUtil.findNonWhitespaceAtOffset(file,editor.getCaretModel().getOffset());
  String kind="type";
  PyFunction pyFunction=PsiTreeUtil.getParentOfType(elementAt,PyFunction.class);
  PyExpression problemElement=PsiTreeUtil.getParentOfType(elementAt,PyNamedParameter.class,PyQualifiedExpression.class);
  PyAssignmentStatement assignmentStatement=PsiTreeUtil.getParentOfType(elementAt,PyAssignmentStatement.class);
  PyCallExpression callExpression=null;
  if (assignmentStatement != null) {
    final PyExpression assignedValue=assignmentStatement.getAssignedValue();
    if (assignedValue != null) {
      callExpression=PsiTreeUtil.getParentOfType(assignedValue,PyCallExpression.class,false);
      if (callExpression != null) {
        PyType pyType=assignedValue.getType(TypeEvalContext.slow());
        if (pyType == null || pyType instanceof PyReturnTypeReference) {
          pyFunction=(PyFunction)callExpression.resolveCalleeFunction(PyResolveContext.defaultContext());
          if (pyFunction != null) {
            problemElement=null;
            kind="rtype";
          }
        }
      }
    }
  }
  if (pyFunction != null) {
    final ASTNode nameNode=pyFunction.getNameNode();
    if (nameNode != null && nameNode.getPsi() == elementAt) {
      kind="rtype";
    }
  }
  generateDocstring(kind,pyFunction,problemElement);
}
