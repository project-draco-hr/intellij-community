{
  final List<Trinity<Language,IStubFileElementType,PsiFile>> roots=new SmartList<Trinity<Language,IStubFileElementType,PsiFile>>();
  final PsiFile stubBindingRoot=viewProvider.getStubBindingRoot();
  for (  Language language : viewProvider.getLanguages()) {
    final PsiFile file=viewProvider.getPsi(language);
    if (file instanceof PsiFileImpl) {
      final IElementType contentType=((PsiFileImpl)file).getContentElementType();
      if (contentType instanceof IStubFileElementType) {
        roots.add(Trinity.create(language,(IStubFileElementType)contentType,file));
      }
    }
  }
  ContainerUtil.sort(roots,new Comparator<Trinity<Language,IStubFileElementType,PsiFile>>(){
    @Override public int compare(    Trinity<Language,IStubFileElementType,PsiFile> o1,    Trinity<Language,IStubFileElementType,PsiFile> o2){
      if (o1.third == stubBindingRoot)       return o2.third == stubBindingRoot ? 0 : -1;
 else       if (o2.third == stubBindingRoot)       return 1;
 else       return StringUtil.compare(o1.first.getID(),o2.first.getID(),false);
    }
  }
);
  return ContainerUtil.map(roots,new Function<Trinity<Language,IStubFileElementType,PsiFile>,Pair<IStubFileElementType,PsiFile>>(){
    @Override public Pair<IStubFileElementType,PsiFile> fun(    Trinity<Language,IStubFileElementType,PsiFile> trinity){
      return Pair.create(trinity.second,trinity.third);
    }
  }
);
}
