{
  Element option=element.getChild("option");
  if (option != null && "SKIP_IMPORT_STATEMENTS".equals(option.getAttributeValue("name"))) {
    mySkipImportStatementsWasSpecified=!myProject.isDefault();
    mySkipImportStatements=Boolean.parseBoolean(option.getAttributeValue("value"));
  }
  super.loadState(element);
  final NamedScope[] scopes=getEditableScopes();
  Arrays.sort(scopes,new Comparator<NamedScope>(){
    @Override public int compare(    NamedScope s1,    NamedScope s2){
      final String name1=s1.getName();
      final String name2=s2.getName();
      if (Comparing.equal(name1,name2)) {
        return 0;
      }
      final List<String> order=myNamedScopeManager.myOrderState.myOrder;
      final int i1=order.indexOf(name1);
      final int i2=order.indexOf(name2);
      return i1 > i2 ? 1 : -1;
    }
  }
);
  super.setScopes(scopes);
  myUnnamedScopes.clear();
  final List unnamedScopes=element.getChildren(UNNAMED_SCOPE);
  final PackageSetFactory packageSetFactory=PackageSetFactory.getInstance();
  for (  Object unnamedScope : unnamedScopes) {
    try {
      final String packageSet=((Element)unnamedScope).getAttributeValue(VALUE);
      myUnnamedScopes.put(packageSet,packageSetFactory.compile(packageSet));
    }
 catch (    ParsingException ignored) {
    }
  }
  readRules(element);
}
