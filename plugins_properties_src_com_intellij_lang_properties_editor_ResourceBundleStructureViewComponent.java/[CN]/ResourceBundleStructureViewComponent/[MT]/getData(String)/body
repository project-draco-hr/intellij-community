{
  if (CommonDataKeys.VIRTUAL_FILE.is(dataId)) {
    return new ResourceBundleAsVirtualFile(myResourceBundle);
  }
 else   if (PlatformDataKeys.FILE_EDITOR.is(dataId)) {
    return getFileEditor();
  }
 else   if (ResourceBundle.ARRAY_DATA_KEY.is(dataId)) {
    return new ResourceBundle[]{myResourceBundle};
  }
 else   if (IProperty.ARRAY_KEY.is(dataId)) {
    final Collection<ResourceBundleEditorViewElement> selectedElements=((ResourceBundleEditor)getFileEditor()).getSelectedElements();
    if (selectedElements.isEmpty()) {
      return null;
    }
 else     if (selectedElements.size() == 1) {
      return ContainerUtil.getFirstItem(selectedElements).getProperties();
    }
 else {
      return ContainerUtil.toArray(ContainerUtil.flatten(ContainerUtil.mapNotNull(selectedElements,new NullableFunction<ResourceBundleEditorViewElement,List<IProperty>>(){
        @Nullable @Override public List<IProperty> fun(        ResourceBundleEditorViewElement element){
          final IProperty[] properties=element.getProperties();
          return properties == null ? null : ContainerUtil.newArrayList(properties);
        }
      }
)),new ArrayFactory<IProperty>(){
        @NotNull @Override public IProperty[] create(        int count){
          return new IProperty[count];
        }
      }
);
    }
  }
 else   if (LangDataKeys.PSI_ELEMENT_ARRAY.is(dataId)) {
    final List<PsiElement> elements=new ArrayList<PsiElement>();
    Collections.addAll(elements,getSelectedPsiFiles());
    final IProperty[] properties=(IProperty[])getData(IProperty.ARRAY_KEY.getName());
    if (properties != null) {
      for (      IProperty property : properties) {
        final PsiElement element=property.getPsiElement();
        if (element.isValid()) {
          elements.add(element);
        }
      }
    }
    return elements.toArray(new PsiElement[elements.size()]);
  }
 else   if (PlatformDataKeys.DELETE_ELEMENT_PROVIDER.is(dataId)) {
    if (getSelectedPsiFiles().length != 0) {
      return new ResourceBundleDeleteProvider();
    }
    final IProperty[] properties=IProperty.ARRAY_KEY.getData(this);
    if (properties != null && properties.length != 0) {
      return new PropertiesDeleteProvider(((ResourceBundleEditor)getFileEditor()).getPropertiesInsertDeleteManager(),properties);
    }
  }
 else   if (UsageView.USAGE_TARGETS_KEY.is(dataId)) {
    final PsiElement[] chosenElements=(PsiElement[])getData(LangDataKeys.PSI_ELEMENT_ARRAY.getName());
    if (chosenElements != null) {
      final UsageTarget[] usageTargets=new UsageTarget[chosenElements.length];
      for (int i=0; i < chosenElements.length; i++) {
        usageTargets[i]=new PsiElement2UsageTargetAdapter(chosenElements[i]);
      }
      return usageTargets;
    }
  }
 else   if (PlatformDataKeys.COPY_PROVIDER.is(dataId)) {
    return new CopyProvider(){
      @Override public void performCopy(      @NotNull final DataContext dataContext){
        final PsiElement[] selectedPsiElements=(PsiElement[])getData(LangDataKeys.PSI_ELEMENT_ARRAY.getName());
        if (selectedPsiElements != null) {
          final List<String> names=new ArrayList<String>(selectedPsiElements.length);
          for (          final PsiElement element : selectedPsiElements) {
            if (element instanceof PsiNamedElement) {
              names.add(((PsiNamedElement)element).getName());
            }
          }
          CopyPasteManager.getInstance().setContents(new StringSelection(StringUtil.join(names,"\n")));
        }
      }
      @Override public boolean isCopyEnabled(      @NotNull final DataContext dataContext){
        return true;
      }
      @Override public boolean isCopyVisible(      @NotNull final DataContext dataContext){
        return true;
      }
    }
;
  }
  return super.getData(dataId);
}
