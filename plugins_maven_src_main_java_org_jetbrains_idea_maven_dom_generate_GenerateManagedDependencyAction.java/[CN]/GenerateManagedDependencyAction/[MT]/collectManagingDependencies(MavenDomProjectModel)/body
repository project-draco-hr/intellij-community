{
  final Map<DependencyConflictId,MavenDomDependency> dependencies=new HashMap<DependencyConflictId,MavenDomDependency>();
  final Set<DependencyConflictId> existingDependencies=new HashSet<DependencyConflictId>();
  for (  MavenDomDependency dependency : model.getDependencies().getDependencies()) {
    DependencyConflictId id=DependencyConflictId.create(dependency);
    if (id != null) {
      existingDependencies.add(id);
    }
  }
  Processor<MavenDomDependency> collectProcessor=new Processor<MavenDomDependency>(){
    public boolean process(    MavenDomDependency dependency){
      if (!model.equals(dependency.getParentOfType(MavenDomProjectModel.class,true))) {
        DependencyConflictId id=DependencyConflictId.create(dependency);
        if (id != null && !existingDependencies.contains(id) && !dependencies.containsKey(id)) {
          dependencies.put(id,dependency);
        }
      }
      return false;
    }
  }
;
  MavenDomProjectProcessorUtils.processDependenciesInDependencyManagement(model,collectProcessor,model.getManager().getProject());
  return dependencies.values();
}
