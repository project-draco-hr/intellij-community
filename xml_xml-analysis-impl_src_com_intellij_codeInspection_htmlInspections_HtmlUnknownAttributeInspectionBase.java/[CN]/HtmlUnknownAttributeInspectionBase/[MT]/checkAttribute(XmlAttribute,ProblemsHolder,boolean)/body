{
  final XmlTag tag=attribute.getParent();
  if (tag instanceof HtmlTag) {
    XmlElementDescriptor elementDescriptor=tag.getDescriptor();
    if (elementDescriptor == null || elementDescriptor instanceof AnyXmlElementDescriptor) {
      return;
    }
    XmlAttributeDescriptor attributeDescriptor=elementDescriptor.getAttributeDescriptor(attribute);
    if (attributeDescriptor == null && !attribute.isNamespaceDeclaration()) {
      final String name=attribute.getName();
      if (!XmlUtil.attributeFromTemplateFramework(name,tag) && (!isCustomValuesEnabled() || !isCustomValue(name))) {
        boolean maySwitchToHtml5=HtmlUtil.isCustomHtml5Attribute(name) && !HtmlUtil.hasNonHtml5Doctype(tag);
        LocalQuickFix[] quickfixes=new LocalQuickFix[maySwitchToHtml5 ? 3 : 2];
        quickfixes[0]=new AddCustomHtmlElementIntentionAction(ATTRIBUTE_KEY,name,XmlBundle.message("add.custom.html.attribute",name));
        quickfixes[1]=new RemoveAttributeIntentionAction(name);
        if (maySwitchToHtml5) {
          quickfixes[2]=new SwitchToHtml5WithHighPriorityAction();
        }
        registerProblemOnAttributeName(attribute,XmlErrorMessages.message("attribute.is.not.allowed.here",attribute.getName()),holder,quickfixes);
      }
    }
  }
}
