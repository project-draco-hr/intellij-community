{
  final String subClassName=subClass.getName();
  if (PyNames.CALLABLE.equals(superClassName)) {
    return hasMethod(subClass,PyNames.CALL);
  }
  if (PyNames.HASHABLE.equals(superClassName)) {
    return hasMethod(subClass,PyNames.HASH);
  }
  final boolean isIterable=hasMethod(subClass,PyNames.ITER);
  if (PyNames.ITERABLE.equals(superClassName)) {
    return isIterable || isStringClass(subClassName);
  }
  if (PyNames.ITERATOR.equals(superClassName)) {
    return (isIterable && hasMethod(subClass,PyNames.NEXT)) || isStringClass(subClassName);
  }
  final boolean isSized=hasMethod(subClass,PyNames.LEN);
  if (PyNames.SIZED.equals(superClassName)) {
    return isSized;
  }
  final boolean isContainer=hasMethod(subClass,PyNames.CONTAINS);
  if (PyNames.CONTAINER.equals(superClassName)) {
    return isContainer;
  }
  final boolean hasGetItem=hasMethod(subClass,PyNames.GETITEM);
  if (PyNames.SEQUENCE.equals(superClassName)) {
    return isSized && isIterable && isContainer&& hasGetItem;
  }
  if (PyNames.MAPPING.equals(superClassName)) {
    return isSized && isIterable && isContainer&& hasGetItem&& hasMethod(subClass,PyNames.KEYS);
  }
  return false;
}
