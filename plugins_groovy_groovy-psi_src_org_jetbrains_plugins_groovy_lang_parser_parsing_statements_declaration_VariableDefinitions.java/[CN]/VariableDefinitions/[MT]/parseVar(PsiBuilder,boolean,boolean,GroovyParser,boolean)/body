{
  PsiBuilder.Marker varAssMarker=builder.mark();
  final IElementType declarator=parseDeclarator(builder,LParenth);
  if (declarator != GroovyElementTypes.WRONGWAY) {
    final boolean wasAssignment=parseAssignment(builder,parser);
    if (declarator == GroovyElementTypes.TUPLE_DECLARATION) {
      varAssMarker.drop();
      if (!wasAssignment) {
        builder.error(GroovyBundle.message("assignment.expected"));
        return GroovyElementTypes.WRONGWAY;
      }
    }
 else     if (isInClass) {
      varAssMarker.done(GroovyElementTypes.FIELD);
    }
 else {
      varAssMarker.done(GroovyElementTypes.VARIABLE);
    }
    if (declarator != GroovyElementTypes.TUPLE_DECLARATION) {
      while (ParserUtils.getToken(builder,GroovyTokenTypes.mCOMMA)) {
        ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
        if (GroovyElementTypes.WRONGWAY.equals(parseVariableOrField(builder,isInClass,parser)) && declarator == GroovyTokenTypes.mIDENT) {
          return GroovyElementTypes.VARIABLE_DEFINITION_ERROR;
        }
      }
    }
    if (isInClass && declarator == GroovyElementTypes.TUPLE_DECLARATION) {
      builder.error(GroovyBundle.message("tuple.cant.be.placed.in.class"));
    }
    return GroovyElementTypes.VARIABLE_DEFINITION;
  }
 else {
    varAssMarker.drop();
    builder.error(GroovyBundle.message("identifier.expected"));
    return GroovyElementTypes.WRONGWAY;
  }
}
