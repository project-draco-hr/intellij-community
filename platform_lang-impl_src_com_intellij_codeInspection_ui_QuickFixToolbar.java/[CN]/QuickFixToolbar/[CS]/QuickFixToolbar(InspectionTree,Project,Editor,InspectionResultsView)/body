{
  myEditor=editor;
  myView=view;
  CommonProblemDescriptor[] descriptors=tree.getSelectedDescriptors();
  int problemCount=descriptors.length;
  final boolean multipleDescriptors=problemCount > 1;
  setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
  if (view.isUpdating()) {
    myWaitingIcon=new AsyncProcessIcon("Inspection preview panel updating...");
    myWaitingIcon.addContainerListener(new ContainerAdapter(){
      @Override public void componentRemoved(      ContainerEvent e){
        Disposer.dispose(myWaitingIcon);
      }
    }
);
    myLabel=getLabel(null,null,problemCount);
    add(myLabel);
    add(myWaitingIcon);
  }
 else {
    QuickFixAction[] fixes=view.getProvider().getQuickFixes(view.getTree().getSelectedToolWrapper(),view.getTree());
    final boolean hasFixes=fixes != null && fixes.length != 0;
    setBorder(IdeBorderFactory.createEmptyBorder(7 + (hasFixes ? 0 : 5),hasFixes ? 12 : 9,hasFixes ? 0 : 6,0));
    fillPanel(tree,project,editor,fixes,hasFixes,descriptors,problemCount,multipleDescriptors);
  }
}
