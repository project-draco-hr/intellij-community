{
  final Ref<byte[]> content=new Ref<byte[]>();
  final StringBuilder remoteTitleBuilder=new StringBuilder();
  final Ref<Boolean> success=new Ref<Boolean>();
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      try {
        final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
        if (indicator != null) {
          indicator.setIndeterminate(true);
        }
        final SvnVcs vcs=SvnVcs.getInstance(myProject);
        SVNURL svnurl=getURLInBranch(vcs,baseUrl);
        if (svnurl == null) {
          reportNotFound(baseUrl);
          return;
        }
        remoteTitleBuilder.append(svnurl.toString());
        content.set(SvnUtil.getFileContents(vcs,SvnTarget.fromURL(svnurl),SVNRevision.HEAD,SVNRevision.UNDEFINED));
        success.set(true);
      }
 catch (      SVNException ex) {
        reportException(new SvnBindException(ex),baseUrl);
      }
catch (      SvnBindException ex) {
        reportException(ex,baseUrl);
      }
catch (      VcsException ex) {
        reportGeneralException(ex,baseUrl);
      }
    }
  }
,SvnBundle.message("compare.with.branch.progress.loading.content"),true,myProject);
  if (success.isNull()) {
    return;
  }
  SimpleDiffRequest req=new SimpleDiffRequest(myProject,SvnBundle.message("compare.with.branch.diff.title"));
  req.setContents(new SimpleContent(CharsetToolkit.bytesToString(content.get(),myVirtualFile.getCharset())),new FileContent(myProject,myVirtualFile));
  req.setContentTitles(remoteTitleBuilder.toString(),myVirtualFile.getPresentableUrl());
  DiffManager.getInstance().getDiffTool().show(req);
}
