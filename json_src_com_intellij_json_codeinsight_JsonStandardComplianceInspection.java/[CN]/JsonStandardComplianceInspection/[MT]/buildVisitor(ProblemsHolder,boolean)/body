{
  return new JsonElementVisitor(){
    @Override public void visitComment(    PsiComment comment){
      if (myWarnAboutComments) {
        if (JsonStandardComplianceProvider.shouldWarnAboutComment(comment)) {
          holder.registerProblem(comment,JsonBundle.message("msg.compliance.problem.comments"),ProblemHighlightType.WEAK_WARNING);
        }
      }
    }
    @Override public void visitStringLiteral(    @NotNull JsonStringLiteral stringLiteral){
      if (JsonPsiUtil.getElementTextWithoutHostEscaping(stringLiteral).startsWith("'")) {
        holder.registerProblem(stringLiteral,JsonBundle.message("msg.compliance.problem.single.quoted.strings"),new AddDoubleQuotesFix());
      }
      super.visitStringLiteral(stringLiteral);
    }
    @Override public void visitLiteral(    @NotNull JsonLiteral literal){
      if (JsonPsiUtil.isPropertyKey(literal) && !JsonPsiUtil.getElementTextWithoutHostEscaping(literal).startsWith("\"")) {
        holder.registerProblem(literal,JsonBundle.message("msg.compliance.problem.illegal.property.key"),new AddDoubleQuotesFix());
      }
      super.visitLiteral(literal);
    }
    @Override public void visitReferenceExpression(    @NotNull JsonReferenceExpression reference){
      holder.registerProblem(reference,JsonBundle.message("msg.compliance.problem.identifier"),new AddDoubleQuotesFix());
      super.visitReferenceExpression(reference);
    }
    @Override public void visitArray(    @NotNull JsonArray array){
      final PsiElement trailingComma=findTrailingComma(array,JsonElementTypes.R_BRACKET);
      if (trailingComma != null) {
        holder.registerProblem(trailingComma,JsonBundle.message("msg.compliance.problem.trailing.comma"));
      }
      super.visitArray(array);
    }
    @Override public void visitObject(    @NotNull JsonObject object){
      final PsiElement trailingComma=findTrailingComma(object,JsonElementTypes.R_CURLY);
      if (trailingComma != null) {
        holder.registerProblem(trailingComma,JsonBundle.message("msg.compliance.problem.trailing.comma"));
      }
      super.visitObject(object);
    }
    @Override public void visitValue(    @NotNull JsonValue value){
      if (value.getContainingFile() instanceof JsonFile) {
        final JsonFile jsonFile=(JsonFile)value.getContainingFile();
        if (myWarnAboutMultipleTopLevelValues && value.getParent() == jsonFile && value != jsonFile.getTopLevelValue()) {
          holder.registerProblem(value,JsonBundle.message("msg.compliance.problem.multiple.top.level.values"));
        }
      }
    }
  }
;
}
