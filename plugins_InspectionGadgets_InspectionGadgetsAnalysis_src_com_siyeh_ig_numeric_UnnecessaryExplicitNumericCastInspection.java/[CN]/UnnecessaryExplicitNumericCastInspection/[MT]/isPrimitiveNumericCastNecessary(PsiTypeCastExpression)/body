{
  final PsiType castType=expression.getType();
  if (castType == null) {
    return true;
  }
  final PsiExpression operand=expression.getOperand();
  if (operand == null) {
    return true;
  }
  final PsiType operandType=operand.getType();
  if (operandType == null) {
    return true;
  }
  PsiElement parent=expression.getParent();
  while (parent instanceof PsiParenthesizedExpression) {
    parent=parent.getParent();
  }
  if (parent instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)parent;
    final IElementType tokenType=polyadicExpression.getOperationTokenType();
    if (binaryPromotionOperators.contains(tokenType)) {
      if (TypeUtils.isNarrowingConversion(operandType,castType)) {
        return true;
      }
      if (PsiType.INT.equals(castType)) {
        if (PsiType.CHAR.equals(operandType) && TypeUtils.getStringType(polyadicExpression).equals(polyadicExpression.getType())) {
          return true;
        }
        return PsiType.LONG.equals(operandType) || PsiType.FLOAT.equals(operandType) || PsiType.DOUBLE.equals(operandType);
      }
      if (PsiType.LONG.equals(castType) || PsiType.FLOAT.equals(castType) || PsiType.DOUBLE.equals(castType)) {
        final PsiExpression[] operands=polyadicExpression.getOperands();
        for (        PsiExpression operand1 : operands) {
          if (PsiTreeUtil.isAncestor(operand1,expression,false)) {
            continue;
          }
          final PsiType type=operand1.getType();
          if (castType.equals(type)) {
            return false;
          }
        }
      }
    }
 else     if (JavaTokenType.GTGT.equals(tokenType) || JavaTokenType.GTGTGT.equals(tokenType) || JavaTokenType.LTLT.equals(tokenType)) {
      final PsiExpression firstOperand=polyadicExpression.getOperands()[0];
      if (!PsiTreeUtil.isAncestor(firstOperand,expression,false)) {
        return false;
      }
      return PsiType.LONG.equals(castType) || !isLegalWideningConversion(operand,PsiType.INT);
    }
    return true;
  }
 else   if (parent instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)parent;
    final PsiType lhsType=assignmentExpression.getType();
    return !castType.equals(lhsType) || !isLegalAssignmentConversion(operand,lhsType);
  }
 else   if (parent instanceof PsiVariable) {
    final PsiVariable variable=(PsiVariable)parent;
    final PsiType lhsType=variable.getType();
    return !castType.equals(lhsType) || !isLegalAssignmentConversion(operand,lhsType);
  }
 else   if (parent instanceof PsiExpressionList) {
    final PsiExpressionList expressionList=(PsiExpressionList)parent;
    final PsiElement grandParent=expressionList.getParent();
    if (!(grandParent instanceof PsiCallExpression)) {
      return true;
    }
    final PsiCallExpression callExpression=(PsiCallExpression)grandParent;
    final PsiMethod targetMethod=callExpression.resolveMethod();
    if (targetMethod == null || targetMethod != MethodCallUtils.findMethodWithReplacedArgument(callExpression,expression,operand)) {
      return true;
    }
  }
  final PsiType expectedType=ExpectedTypeUtils.findExpectedType(expression,false);
  return !castType.equals(expectedType) || !isLegalWideningConversion(operand,castType);
}
