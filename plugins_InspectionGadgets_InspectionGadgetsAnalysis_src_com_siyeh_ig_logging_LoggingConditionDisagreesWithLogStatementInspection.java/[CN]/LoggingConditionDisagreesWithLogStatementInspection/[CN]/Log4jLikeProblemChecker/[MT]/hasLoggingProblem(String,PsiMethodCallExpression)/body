{
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if ("isDebugEnabled".equals(methodName)) {
    return !"debug".equals(priority);
  }
 else   if ("isInfoEnabled".equals(methodName)) {
    return !"info".equals(priority);
  }
 else   if ("isTraceEnabled".equals(methodName)) {
    return !"trace".equals(priority);
  }
 else   if ("isWarnEnabled".equals(methodName)) {
    return !"warn".equals(priority);
  }
 else   if ("isErrorEnabled".equals(methodName)) {
    return !"error".equals(priority);
  }
 else   if ("isFatalEnabled".equals(methodName)) {
    return !"fatal".equals(priority);
  }
 else   if ("isEnabled".equals(methodName)) {
    final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
    final PsiExpression[] arguments=argumentList.getExpressions();
    final PsiExpression argument=arguments[0];
    if (!(argument instanceof PsiReferenceExpression)) {
      return false;
    }
    if (!InheritanceUtil.isInheritor(argument.getType(),"org.apache.logging.log4j.Level")) {
      return false;
    }
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)argument;
    final PsiElement target=referenceExpression.resolve();
    if (!(target instanceof PsiField)) {
      return false;
    }
    final PsiField field=(PsiField)target;
    final String fieldName=field.getName();
    return fieldName != null && !fieldName.toLowerCase().equals(priority);
  }
 else   if ("isEnabledFor".equals(methodName)) {
    final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
    final PsiExpression[] arguments=argumentList.getExpressions();
    for (    PsiExpression argument : arguments) {
      if (!(argument instanceof PsiReferenceExpression)) {
        continue;
      }
      final PsiReferenceExpression argumentReference=(PsiReferenceExpression)argument;
      final PsiType type=argument.getType();
      if (!(type instanceof PsiClassType)) {
        continue;
      }
      final PsiClassType classType=(PsiClassType)type;
      final PsiClass aClass=classType.resolve();
      if (!InheritanceUtil.isInheritor(aClass,"org.apache.log4j.Priority")) {
        continue;
      }
      final PsiElement argumentTarget=argumentReference.resolve();
      if (!(argumentTarget instanceof PsiField)) {
        continue;
      }
      final PsiField field=(PsiField)argumentTarget;
      final String fieldName=field.getName();
      return fieldName != null && !fieldName.toLowerCase().equals(priority);
    }
  }
  return false;
}
