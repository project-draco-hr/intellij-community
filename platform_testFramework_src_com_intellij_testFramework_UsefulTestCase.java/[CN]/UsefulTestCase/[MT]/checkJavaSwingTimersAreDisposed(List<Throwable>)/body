{
  try {
    Class<?> TimerQueueClass=Class.forName("javax.swing.TimerQueue");
    Method sharedInstance=ReflectionUtil.getMethod(TimerQueueClass,"sharedInstance");
    Object timerQueue=sharedInstance.invoke(null);
    DelayQueue delayQueue=ReflectionUtil.getField(TimerQueueClass,timerQueue,DelayQueue.class,"queue");
    Delayed timer=delayQueue.peek();
    if (timer != null) {
      long delay=timer.getDelay(TimeUnit.MILLISECONDS);
      String text="(delayed for " + delay + "ms)";
      Method getTimer=ReflectionUtil.getDeclaredMethod(timer.getClass(),"getTimer");
      Timer swingTimer=(Timer)getTimer.invoke(timer);
      text="Timer (listeners: " + Arrays.asList(swingTimer.getActionListeners()) + ") "+ text;
      exceptions.add(new AssertionFailedError("Not disposed java.swing.Timer: " + text + "; queue:"+ timerQueue));
    }
  }
 catch (  Throwable e) {
    exceptions.add(e);
  }
}
