{
  Field firstTimerF;
  Object timerQueue;
  Object timer;
  try {
    Class<?> TimerQueueC=Class.forName("javax.swing.TimerQueue");
    Method sharedInstance=TimerQueueC.getDeclaredMethod("sharedInstance");
    sharedInstance.setAccessible(true);
    firstTimerF=ReflectionUtil.getDeclaredField(TimerQueueC,"firstTimer");
    timerQueue=sharedInstance.invoke(null);
    if (firstTimerF == null) {
      DelayQueue delayQueue=ReflectionUtil.getField(TimerQueueC,timerQueue,DelayQueue.class,"queue");
      timer=delayQueue.peek();
    }
 else {
      firstTimerF.setAccessible(true);
      timer=firstTimerF.get(timerQueue);
    }
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
  if (timer != null) {
    if (firstTimerF != null) {
      ReflectionUtil.resetField(timerQueue,firstTimerF);
    }
    fail("Not disposed Timer: " + timer.toString() + "; queue:"+ timerQueue);
  }
}
