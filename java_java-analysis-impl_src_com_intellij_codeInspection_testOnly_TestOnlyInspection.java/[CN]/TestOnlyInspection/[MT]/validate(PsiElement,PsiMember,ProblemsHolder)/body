{
  if (member == null || !isAnnotatedAsTestOnly(member))   return;
  if (isInsideTestOnlyMethod(reference))   return;
  if (isInsideTestOnlyField(reference))   return;
  if (isInsideTestClass(reference))   return;
  if (isUnderTestSources(reference))   return;
  PsiAnnotation anno=findVisibleForTestingAnnotation(member);
  if (anno != null) {
    String modifier=getAccessModifierWithoutTesting(anno);
    if (modifier == null) {
      modifier=member.hasModifierProperty(PsiModifier.PUBLIC) ? PsiModifier.PROTECTED : member.hasModifierProperty(PsiModifier.PROTECTED) ? PsiModifier.PACKAGE_LOCAL : PsiModifier.PRIVATE;
    }
    LightModifierList modList=new LightModifierList(member.getManager(),JavaLanguage.INSTANCE,modifier);
    if (JavaResolveUtil.isAccessible(member,member.getContainingClass(),modList,reference,null,null)) {
      return;
    }
  }
  reportProblem(reference,member,h);
}
