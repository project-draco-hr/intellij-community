{
  final PsiElement leaf=file.findElementAt(editor.getCaretModel().getOffset());
  final PsiModifierListOwner owner=ExternalAnnotationsLineMarkerProvider.getAnnotationOwner(leaf);
  if (owner != null && !(owner instanceof PsiCompiledElement) && owner.getLanguage().isKindOf(JavaLanguage.INSTANCE) && ModuleUtilCore.findModuleForPsiElement(file) != null && PsiUtil.getLanguageLevel(file).isAtLeast(LanguageLevel.JDK_1_5)) {
    final PsiAnnotation[] annotations=InferredAnnotationsManager.getInstance(project).findInferredAnnotations(owner);
    if (annotations.length > 0) {
      final String annos=StringUtil.join(annotations,new Function<PsiAnnotation,String>(){
        @Override public String fun(        PsiAnnotation annotation){
          final PsiJavaCodeReferenceElement nameRef=correctAnnotation(annotation).getNameReferenceElement();
          final String name=nameRef != null ? nameRef.getReferenceName() : annotation.getQualifiedName();
          return "@" + name + annotation.getParameterList().getText();
        }
      }
," ");
      setText("Insert '" + annos + "'");
      return true;
    }
  }
  return false;
}
