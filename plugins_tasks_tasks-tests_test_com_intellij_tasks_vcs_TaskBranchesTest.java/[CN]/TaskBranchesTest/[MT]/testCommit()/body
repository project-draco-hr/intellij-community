{
  GitRepository repository=initRepository("foo");
  LocalTask defaultTask=myTaskManager.getActiveTask();
  LocalTaskImpl foo=myTaskManager.createLocalTask("foo");
  final LocalTask localTask=myTaskManager.activateTask(foo,false);
  myTaskManager.createBranch(localTask,defaultTask,myTaskManager.suggestBranchName(localTask));
  VirtualFile root=repository.getRoot();
  File file=new File(root.getPath(),"foo.txt");
  assertTrue(file.createNewFile());
  final VirtualFile virtualFile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file);
  GitFileUtils.addFiles(getProject(),root,virtualFile);
  myDirtyScopeManager.fileDirty(virtualFile);
  myChangeListManager.ensureUpToDate(false);
  Change change=myChangeListManager.getChange(virtualFile);
  assertNotNull(change);
  ProjectLevelVcsManager.getInstance(getProject()).getAllActiveVcss()[0].getCheckinEnvironment().commit(Collections.singletonList(change),"foo");
  myTaskManager.mergeBranch(localTask);
  repository.update();
  assertEquals("master",repository.getCurrentBranch().getName());
  assertEquals(1,repository.getBranches().getLocalBranches().size());
}
