{
  myTaskManager=(TaskManagerImpl)TaskManager.getManager(project);
  myPreviousTask=myTaskManager.getActiveTask();
  ActionListener listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateFields(false);
    }
  }
;
  myCreateChangelist.addActionListener(listener);
  myCreateBranch.addActionListener(listener);
  myCreateChangelist.setSelected(myTaskManager.getState().createChangelist);
  VcsTaskHandler[] handlers=VcsTaskHandler.getAllHandlers(project);
  if (handlers.length == 0) {
    myCreateBranch.setSelected(false);
    myCreateBranch.setVisible(false);
    myBranchName.setVisible(false);
    myFromLabel.setVisible(false);
    myBranchFrom.setVisible(false);
  }
 else {
    for (    VcsTaskHandler handler : handlers) {
      VcsTaskHandler.TaskInfo[] tasks=handler.getAllExistingTasks();
      if (tasks.length > 0) {
        myVcsTaskHandler=handler;
        Arrays.sort(tasks);
        myBranchFrom.setModel(new DefaultComboBoxModel(tasks));
        myBranchFrom.setEnabled(true);
        final String startFrom=PropertiesComponent.getInstance(project).getValue(START_FROM_BRANCH);
        VcsTaskHandler.TaskInfo info=null;
        if (startFrom != null) {
          info=ContainerUtil.find(tasks,new Condition<VcsTaskHandler.TaskInfo>(){
            @Override public boolean value(            VcsTaskHandler.TaskInfo taskInfo){
              return startFrom.equals(taskInfo.getName());
            }
          }
);
        }
        if (info == null) {
          VcsTaskHandler.TaskInfo[] current=handler.getCurrentTasks();
          info=current.length > 0 ? current[0] : tasks[0];
        }
        myBranchFrom.setSelectedItem(info);
        myBranchFrom.addActionListener(new ActionListener(){
          @Override public void actionPerformed(          ActionEvent e){
            VcsTaskHandler.TaskInfo item=(VcsTaskHandler.TaskInfo)myBranchFrom.getSelectedItem();
            if (item != null) {
              PropertiesComponent.getInstance(project).setValue(START_FROM_BRANCH,item.getName());
            }
          }
        }
);
        break;
      }
    }
    myCreateBranch.setSelected(myTaskManager.getState().createBranch && myBranchFrom.getItemCount() > 0);
    myBranchFrom.setRenderer(new ColoredListCellRenderer<VcsTaskHandler.TaskInfo>(){
      @Override protected void customizeCellRenderer(      JList list,      VcsTaskHandler.TaskInfo value,      int index,      boolean selected,      boolean hasFocus){
        if (value != null) {
          append(value.getName());
        }
      }
    }
);
  }
  myBranchName.setText(myVcsTaskHandler != null ? myVcsTaskHandler.cleanUpBranchName(myTaskManager.constructDefaultBranchName(task)) : myTaskManager.suggestBranchName(task));
  myChangelistName.setText(myTaskManager.getChangelistName(task));
  updateFields(true);
}
