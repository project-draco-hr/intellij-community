{
  if (applicablePrefixes.length == 0) {
    return Collections.emptyList();
  }
  List<PsiElement> elements=doCompile(project,options,pattern,new ConstantPrefixProvider(applicablePrefixes[0]),context);
  if (elements.size() == 0) {
    return elements;
  }
  final PsiFile file=elements.get(0).getContainingFile();
  if (file == null) {
    return elements;
  }
  final PsiElement last=elements.get(elements.size() - 1);
  if (elements.size() == 0 || !containsErrorElementBeforeOffset(file,last.getTextRange().getEndOffset() - 1)) {
    return elements;
  }
  final Pattern[] patterns=new Pattern[applicablePrefixes.length];
  for (int i=0; i < applicablePrefixes.length; i++) {
    String s=StructuralSearchUtil.shieldSpecialChars(applicablePrefixes[i]);
    patterns[i]=Pattern.compile(s + "\\w+\\b");
  }
  final int varCount=findAllTypedVarOffsets(file,patterns).length;
  final String[] prefixSequence=new String[varCount];
  for (int i=0; i < varCount; i++) {
    prefixSequence[i]=applicablePrefixes[0];
  }
  elements=compileByPrefixes(project,options,pattern,context,applicablePrefixes,patterns,prefixSequence,0);
  return elements != null ? elements : doCompile(project,options,pattern,new ConstantPrefixProvider(applicablePrefixes[0]),context);
}
