{
  if (applicablePrefixes.length == 0) {
    return Collections.emptyList();
  }
  LinkedList<PsiElement> elements=doCompile(project,options,pattern,new ConstantPrefixProvider(applicablePrefixes[0]),context);
  if (elements.size() == 0) {
    return elements;
  }
  final PsiFile file=elements.getFirst().getContainingFile();
  if (file == null) {
    return elements;
  }
  final PsiElement last=elements.getLast();
  final Pattern[] patterns=new Pattern[applicablePrefixes.length];
  for (int i=0; i < applicablePrefixes.length; i++) {
    String s=StructuralSearchUtil.shieldSpecialChars(applicablePrefixes[i]);
    patterns[i]=Pattern.compile(s + "\\w+\\b");
  }
  final int[] varEndOffsets=findAllTypedVarOffsets(file,patterns);
  final int patternEndOffset=last.getTextRange().getEndOffset();
  if (elements.size() == 0 || checkErrorElements(file,patternEndOffset,patternEndOffset,varEndOffsets,true) != Boolean.TRUE) {
    return elements;
  }
  final int varCount=varEndOffsets.length;
  final String[] prefixSequence=new String[varCount];
  for (int i=0; i < varCount; i++) {
    prefixSequence[i]=applicablePrefixes[0];
  }
  final List<PsiElement> finalElements=compileByPrefixes(project,options,pattern,context,applicablePrefixes,patterns,prefixSequence,0);
  return finalElements != null ? finalElements : doCompile(project,options,pattern,new ConstantPrefixProvider(applicablePrefixes[0]),context);
}
