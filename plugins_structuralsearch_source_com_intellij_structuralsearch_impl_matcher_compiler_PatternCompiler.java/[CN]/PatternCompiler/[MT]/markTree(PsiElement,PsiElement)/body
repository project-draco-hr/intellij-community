{
  if (areEquivalent(baseRoot,alternativeRoot)) {
    final List<PsiElement> baseChildren=new ArrayList<PsiElement>();
    final List<PsiElement> altChildren=new ArrayList<PsiElement>();
    for (PsiElement child=baseRoot.getFirstChild(); child != null; child=child.getNextSibling()) {
      baseChildren.add(child);
    }
    for (PsiElement child=alternativeRoot.getFirstChild(); child != null; child=child.getNextSibling()) {
      altChildren.add(child);
    }
    if (altChildren.size() == baseChildren.size()) {
      for (int i=0, n=baseChildren.size(); i < n; i++) {
        final PsiElement baseChild=baseChildren.get(i);
        final PsiElement altChild=altChildren.get(i);
        markTree(baseChild,altChild);
      }
      return;
    }
  }
  List<PsiElement> alternativePatternRoots=baseRoot.getUserData(ALTERNATIVE_PATTERN_ROOTS);
  if (alternativePatternRoots == null) {
    alternativePatternRoots=new ArrayList<PsiElement>();
    baseRoot.putUserData(ALTERNATIVE_PATTERN_ROOTS,alternativePatternRoots);
  }
  alternativePatternRoots.add(alternativeRoot);
}
