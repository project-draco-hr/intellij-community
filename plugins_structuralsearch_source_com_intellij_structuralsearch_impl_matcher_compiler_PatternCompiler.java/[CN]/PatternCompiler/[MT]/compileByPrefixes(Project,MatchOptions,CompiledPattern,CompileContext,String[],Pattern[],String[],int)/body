{
  if (index >= prefixSequence.length) {
    final LinkedList<PsiElement> elements=doCompile(project,options,pattern,new ArrayPrefixProvider(prefixSequence),context);
    if (elements.size() == 0) {
      return elements;
    }
    final PsiElement parent=elements.getFirst().getParent();
    final PsiElement last=elements.getLast();
    final int[] varEndOffsets=findAllTypedVarOffsets(parent.getContainingFile(),substitutionPatterns);
    final int patternEndOffset=last.getTextRange().getEndOffset();
    return checkErrorElements(parent,patternEndOffset,patternEndOffset,varEndOffsets,false) != Boolean.TRUE ? elements : null;
  }
  String[] alternativeVariant=null;
  for (  String applicablePrefix : applicablePrefixes) {
    prefixSequence[index]=applicablePrefix;
    LinkedList<PsiElement> elements=doCompile(project,options,pattern,new ArrayPrefixProvider(prefixSequence),context);
    if (elements.size() == 0) {
      return elements;
    }
    final PsiFile file=elements.getFirst().getContainingFile();
    if (file == null) {
      return elements;
    }
    final int[] varEndOffsets=findAllTypedVarOffsets(file,substitutionPatterns);
    final int offset=varEndOffsets[index];
    final int patternEndOffset=elements.getLast().getTextRange().getEndOffset();
    final Boolean result=checkErrorElements(file,offset,patternEndOffset,varEndOffsets,false);
    if (result == Boolean.TRUE) {
      continue;
    }
    if (result == Boolean.FALSE || (result == null && alternativeVariant == null)) {
      final List<PsiElement> finalElements=compileByPrefixes(project,options,pattern,context,applicablePrefixes,substitutionPatterns,prefixSequence,index + 1);
      if (finalElements != null) {
        if (result == Boolean.FALSE) {
          return finalElements;
        }
        alternativeVariant=new String[prefixSequence.length];
        System.arraycopy(prefixSequence,0,alternativeVariant,0,prefixSequence.length);
      }
    }
  }
  return alternativeVariant != null ? compileByPrefixes(project,options,pattern,context,applicablePrefixes,substitutionPatterns,alternativeVariant,index + 1) : null;
}
