{
  if (index >= prefixSequence.length) {
    final List<PsiElement> elements=doCompile(project,options,pattern,new ArrayPrefixProvider(prefixSequence),context);
    if (elements.size() == 0) {
      return elements;
    }
    final PsiElement parent=elements.get(0);
    final PsiElement last=elements.get(elements.size() - 1);
    return !containsErrorElementBeforeOffset(parent,last.getTextRange().getEndOffset() - 1) ? elements : null;
  }
  for (  String applicablePrefix : applicablePrefixes) {
    prefixSequence[index]=applicablePrefix;
    List<PsiElement> elements=doCompile(project,options,pattern,new ArrayPrefixProvider(prefixSequence),context);
    if (elements.size() == 0) {
      return elements;
    }
    final PsiFile file=elements.get(0).getContainingFile();
    if (file == null) {
      return elements;
    }
    final int[] endOffsets=findAllTypedVarOffsets(file,substitutionPatterns);
    final int offset=endOffsets[index];
    if (containsErrorElementBeforeOffset(file,offset)) {
      continue;
    }
    elements=compileByPrefixes(project,options,pattern,context,applicablePrefixes,substitutionPatterns,prefixSequence,index + 1);
    if (elements != null) {
      return elements;
    }
  }
  return null;
}
