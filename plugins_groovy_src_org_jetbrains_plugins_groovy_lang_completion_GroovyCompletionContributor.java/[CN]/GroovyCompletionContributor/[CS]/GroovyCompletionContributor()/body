{
  GrMethodOverrideCompletionProvider.register(this);
  GrThisSuperCompletionProvider.register(this);
  MapArgumentCompletionProvider.register(this);
  GroovyConfigSlurperCompletionProvider.register(this);
  MapKeysCompletionProvider.register(this);
  GroovyDocCompletionProvider.register(this);
  GrStatementStartCompletionProvider.register(this);
  GrMainCompletionProvider.register(this);
  GrAnnotationAttributeCompletionProvider.register(this);
  extend(CompletionType.BASIC,PlatformPatterns.psiElement().withParent(GrLiteral.class),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull final CompletionResultSet result){
      final Set<String> usedWords=new THashSet<>();
      for (      CompletionResult element : result.runRemainingContributors(parameters,true)) {
        usedWords.add(element.getLookupElement().getLookupString());
      }
      PsiReference reference=parameters.getPosition().getContainingFile().findReferenceAt(parameters.getOffset());
      if (reference == null || reference.isSoft()) {
        WordCompletionContributor.addWordCompletionVariants(result,parameters,usedWords);
      }
    }
  }
);
}
