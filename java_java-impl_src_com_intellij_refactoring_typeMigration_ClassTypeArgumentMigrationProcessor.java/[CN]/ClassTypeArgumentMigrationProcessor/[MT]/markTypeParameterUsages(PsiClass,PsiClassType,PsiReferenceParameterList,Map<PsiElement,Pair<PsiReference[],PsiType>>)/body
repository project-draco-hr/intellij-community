{
  final PsiSubstitutor[] fullHierarchySubstitutor={migrationType.resolveGenerics().getSubstitutor()};
  RefactoringHierarchyUtil.processSuperTypes(migrationType,new RefactoringHierarchyUtil.SuperTypeVisitor(){
    @Override public void visitType(    PsiType aType){
      fullHierarchySubstitutor[0]=fullHierarchySubstitutor[0].putAll(((PsiClassType)aType).resolveGenerics().getSubstitutor());
    }
    @Override public void visitClass(    PsiClass aClass){
    }
  }
);
  final PsiClass resolvedClass=(PsiClass)referenceParameterList.getParent().getParent();
  LOG.assertTrue(resolvedClass != null);
  final Set<PsiClass> superClasses=new HashSet<PsiClass>();
  InheritanceUtil.getSuperClasses(resolvedClass,superClasses,true);
  for (  PsiClass superSuperClass : superClasses) {
    final TypeParameterSearcher parameterSearcher=new TypeParameterSearcher(superSuperClass.getTypeParameters());
    superSuperClass.accept(new JavaRecursiveElementVisitor(){
      @Override public void visitMethod(      final PsiMethod method){
        super.visitMethod(method);
        processMemberType(method,parameterSearcher,psiClass,fullHierarchySubstitutor[0],roots);
        for (        PsiParameter parameter : method.getParameterList().getParameters()) {
          processMemberType(parameter,parameterSearcher,psiClass,fullHierarchySubstitutor[0],roots);
        }
      }
      @Override public void visitField(      final PsiField field){
        super.visitField(field);
        processMemberType(field,parameterSearcher,psiClass,fullHierarchySubstitutor[0],roots);
      }
    }
);
  }
}
