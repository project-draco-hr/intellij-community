{
  return new CommandLineState(null){
    private SimpleJavaParameters createJavaParameters(){
      final SimpleJavaParameters params=new SimpleJavaParameters();
      params.setJdk(getJdk());
      params.setWorkingDirectory(PathManager.getBinPath());
      final List<String> classPath=new ArrayList<String>();
      classPath.addAll(PathManager.getUtilClassPath());
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(Query.class),classPath);
      params.getClassPath().add(PathManager.getResourceRoot(getClass(),"/messages/CommonBundle.properties"));
      params.getClassPath().addAll(classPath);
      params.getClassPath().addAllFiles(collectClassPathAndLibsFolder());
      params.setMainClass(MAIN_CLASS);
      Map<String,String> defs=new THashMap<String,String>();
      defs.putAll(MavenUtil.getPropertiesFromMavenOpts());
      for (      Map.Entry<Object,Object> each : System.getProperties().entrySet()) {
        Object key=each.getKey();
        Object value=each.getValue();
        if (key instanceof String && value instanceof String && ((String)key).startsWith("javax.net.ssl")) {
          defs.put((String)key,(String)value);
        }
      }
      if (SystemInfo.isMac) {
        String arch=System.getProperty("sun.arch.data.model");
        if (arch != null) {
          params.getVMParametersList().addParametersString("-d" + arch);
        }
      }
      defs.put("java.awt.headless","true");
      for (      Map.Entry<String,String> each : defs.entrySet()) {
        params.getVMParametersList().defineProperty(each.getKey(),each.getValue());
      }
      params.getVMParametersList().addProperty("idea.version=",MavenUtil.getIdeaVersionToPassToMavenProcess());
      boolean xmxSet=false;
      if (myState.vmOptions != null) {
        ParametersList mavenOptsList=new ParametersList();
        mavenOptsList.addParametersString(myState.vmOptions);
        for (        String param : mavenOptsList.getParameters()) {
          if (param.startsWith("-Xmx")) {
            xmxSet=true;
          }
          params.getVMParametersList().add(param);
        }
      }
      String embedderXmx=System.getProperty("idea.maven.embedder.xmx");
      if (embedderXmx != null) {
        params.getVMParametersList().add("-Xmx" + embedderXmx);
      }
 else {
        if (!xmxSet) {
          params.getVMParametersList().add("-Xmx512m");
        }
      }
      String mavenEmbedderDebugPort=System.getProperty("idea.maven.embedder.debug.port");
      if (mavenEmbedderDebugPort != null) {
        params.getVMParametersList().addParametersString("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=" + mavenEmbedderDebugPort);
      }
      String mavenEmbedderParameters=System.getProperty("idea.maven.embedder.parameters");
      if (mavenEmbedderParameters != null) {
        params.getProgramParametersList().addParametersString(mavenEmbedderParameters);
      }
      return params;
    }
    @NotNull @Override public ExecutionResult execute(    @NotNull Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      ProcessHandler processHandler=startProcess();
      return new DefaultExecutionResult(null,processHandler,AnAction.EMPTY_ARRAY);
    }
    @Override @NotNull protected OSProcessHandler startProcess() throws ExecutionException {
      SimpleJavaParameters params=createJavaParameters();
      Sdk sdk=params.getJdk();
      GeneralCommandLine commandLine=JdkUtil.setupJVMCommandLine(((JavaSdkType)sdk.getSdkType()).getVMExecutablePath(sdk),params,false);
      OSProcessHandler processHandler=new OSProcessHandler(commandLine.createProcess(),commandLine.getCommandLineString(),commandLine.getCharset());
      processHandler.setShouldDestroyProcessRecursively(false);
      return processHandler;
    }
  }
;
}
