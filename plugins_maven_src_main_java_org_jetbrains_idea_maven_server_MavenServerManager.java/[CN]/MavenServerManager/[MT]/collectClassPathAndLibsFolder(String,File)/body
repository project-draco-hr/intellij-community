{
  final File pluginFileOrDir=new File(PathUtil.getJarPathForClass(MavenServerManager.class));
  final List<File> classpath=new ArrayList<>();
  final String root=pluginFileOrDir.getParent();
  if (pluginFileOrDir.isDirectory()) {
    classpath.add(new File(root,"maven-server-api"));
    File parentFile=getMavenPluginParentFile();
    if (StringUtil.compareVersionNumbers(mavenVersion,"3") < 0) {
      classpath.add(new File(root,"maven2-server-impl"));
      addDir(classpath,new File(parentFile,"maven2-server-impl/lib"));
      if (StringUtil.compareVersionNumbers(mavenVersion,"2.1.0") < 0) {
        mavenHome=BundledMavenPathHolder.myBundledMaven2Home;
      }
    }
 else {
      classpath.add(new File(root,"maven3-server-common"));
      addDir(classpath,new File(parentFile,"maven3-server-common/lib"));
      if (StringUtil.compareVersionNumbers(mavenVersion,"3.1") < 0) {
        classpath.add(new File(root,"maven30-server-impl"));
      }
 else {
        classpath.add(new File(root,"maven3-server-impl"));
      }
    }
  }
 else {
    classpath.add(new File(root,"maven-server-api.jar"));
    if (StringUtil.compareVersionNumbers(mavenVersion,"3") < 0) {
      classpath.add(new File(root,"maven2-server-impl.jar"));
      addDir(classpath,new File(root,"maven2-server-lib"));
    }
 else {
      classpath.add(new File(root,"maven3-server-common.jar"));
      addDir(classpath,new File(root,"maven3-server-lib"));
      if (StringUtil.compareVersionNumbers(mavenVersion,"3.1") < 0) {
        classpath.add(new File(root,"maven30-server-impl.jar"));
      }
 else {
        classpath.add(new File(root,"maven3-server-impl.jar"));
      }
    }
  }
  addMavenLibs(classpath,mavenHome);
  return classpath;
}
