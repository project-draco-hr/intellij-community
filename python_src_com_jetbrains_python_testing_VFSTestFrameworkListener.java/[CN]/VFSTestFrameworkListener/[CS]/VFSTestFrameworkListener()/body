{
  final Application application=ApplicationManager.getApplication();
  final MessageBus messageBus=application.getMessageBus();
  messageBus.connect().subscribe(VirtualFileManager.VFS_CHANGES,new BulkFileListener.Adapter(){
    @Override public void after(    @NotNull List<? extends VFileEvent> events){
      for (      VFileEvent event : events) {
        if (!(event.getFileSystem() instanceof LocalFileSystem) || event instanceof VFileContentChangeEvent)         continue;
        final String path=event.getPath();
        final boolean containsNose=path.contains(PyNames.NOSE_TEST);
        final boolean containsPy=path.contains("py-1") || path.contains(PyNames.PY_TEST);
        final boolean containsAt=path.contains(PyNames.AT_TEST);
        if (!containsAt && !containsNose && !containsPy)         continue;
        for (        Sdk sdk : PythonSdkType.getAllSdks()) {
          if (PySdkUtil.isRemote(sdk)) {
            continue;
          }
          for (          VirtualFile virtualFile : sdk.getRootProvider().getFiles(OrderRootType.CLASSES)) {
            final String root=virtualFile.getCanonicalPath();
            if (root != null && path.contains(root)) {
              if (containsNose) {
                scheduleTestFrameworkCheck(sdk,PyNames.NOSE_TEST);
                return;
              }
 else               if (containsPy) {
                scheduleTestFrameworkCheck(sdk,PyNames.PY_TEST);
                return;
              }
 else {
                scheduleTestFrameworkCheck(sdk,PyNames.AT_TEST);
                return;
              }
            }
          }
        }
      }
    }
  }
);
  myQueue=new MergingUpdateQueue("TestFrameworkChecker",5000,true,null,application,null,Alarm.ThreadToUse.POOLED_THREAD);
}
