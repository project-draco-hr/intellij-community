{
  ApplicationInfoEx appInfo=ApplicationInfoImpl.getShadowInstance();
  String url=appInfo.getPluginsListUrl() + "?build=" + (buildnumber != null ? buildnumber.asString() : appInfo.getApiVersion());
  if (indicator != null) {
    indicator.setText2(IdeBundle.message("progress.connecting.to.plugin.manager",appInfo.getPluginManagerUrl()));
  }
  File pluginListFile=new File(PathManager.getPluginsPath(),PLUGIN_LIST_FILE);
  if (pluginListFile.length() > 0) {
    try {
      url=url + "&crc32=" + Files.hash(pluginListFile,Hashing.crc32()).toString();
    }
 catch (    NoSuchMethodError e) {
      String guavaPath=PathUtil.getJarPathForClass(Hashing.class);
      throw new RuntimeException(guavaPath,e);
    }
  }
  HttpURLConnection connection=(HttpURLConnection)openConnection(url,true).first;
  if (indicator != null) {
    indicator.setText2(IdeBundle.message("progress.waiting.for.reply.from.plugin.manager",appInfo.getPluginManagerUrl()));
  }
  connection.connect();
  try {
    if (indicator != null) {
      indicator.checkCanceled();
    }
    if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {
      return loadPluginList(pluginListFile);
    }
    if (indicator != null) {
      indicator.setText2(IdeBundle.message("progress.downloading.list.of.plugins"));
    }
    return readPluginsStream(connection,indicator,PLUGIN_LIST_FILE);
  }
  finally {
    connection.disconnect();
  }
}
