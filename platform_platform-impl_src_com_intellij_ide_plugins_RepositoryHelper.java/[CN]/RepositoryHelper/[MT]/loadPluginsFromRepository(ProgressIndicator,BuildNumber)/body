{
  final ApplicationInfoEx appInfo=ApplicationInfoImpl.getShadowInstance();
  String url=appInfo.getPluginsListUrl() + "?build=" + (buildnumber != null ? buildnumber.asString() : appInfo.getApiVersion());
  if (indicator != null) {
    indicator.setText2(IdeBundle.message("progress.connecting.to.plugin.manager",appInfo.getPluginManagerUrl()));
  }
  final File pluginListFile=new File(PathManager.getPluginsPath(),PLUGIN_LIST_FILE);
  if (pluginListFile.length() > 0) {
    try {
      url=url + "&crc32=" + Files.hash(pluginListFile,Hashing.crc32()).toString();
    }
 catch (    NoSuchMethodError e) {
      String guavaPath=PathUtil.getJarPathForClass(Hashing.class);
      throw new RuntimeException(guavaPath,e);
    }
  }
  return HttpRequests.request(url).get(new ThrowableConvertor<URLConnection,List<IdeaPluginDescriptor>,Exception>(){
    @Override public List<IdeaPluginDescriptor> convert(    URLConnection connection) throws Exception {
      if (indicator != null) {
        indicator.checkCanceled();
        indicator.setText2(IdeBundle.message("progress.waiting.for.reply.from.plugin.manager",appInfo.getPluginManagerUrl()));
      }
      if (connection instanceof HttpURLConnection && ((HttpURLConnection)connection).getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {
        return loadPluginList(pluginListFile);
      }
      if (indicator != null) {
        indicator.checkCanceled();
        indicator.setText2(IdeBundle.message("progress.downloading.list.of.plugins"));
      }
      return readPluginsStream(connection,indicator,PLUGIN_LIST_FILE);
    }
  }
);
}
