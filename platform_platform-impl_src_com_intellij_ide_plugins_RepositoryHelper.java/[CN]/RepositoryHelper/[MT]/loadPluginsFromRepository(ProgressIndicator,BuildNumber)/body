{
  final ApplicationInfoEx appInfo=ApplicationInfoImpl.getShadowInstance();
  String url=appInfo.getPluginsListUrl() + "?build=" + (buildnumber != null ? buildnumber.asString() : appInfo.getApiVersion());
  if (indicator != null) {
    indicator.setText2(IdeBundle.message("progress.connecting.to.plugin.manager",appInfo.getPluginManagerUrl()));
  }
  final File pluginListFile=new File(PathManager.getPluginsPath(),PLUGIN_LIST_FILE);
  if (pluginListFile.length() > 0) {
    try {
      url+="&crc32=" + Files.hash(pluginListFile,Hashing.crc32()).toString();
    }
 catch (    NoSuchMethodError e) {
      String guavaPath=PathUtil.getJarPathForClass(Hashing.class);
      throw new RuntimeException(guavaPath,e);
    }
  }
  if (indicator != null) {
    indicator.setText2(IdeBundle.message("progress.waiting.for.reply.from.plugin.manager",appInfo.getPluginManagerUrl()));
  }
  return HttpRequests.request(url).connect(new HttpRequests.RequestProcessor<List<IdeaPluginDescriptor>>(){
    @Override public List<IdeaPluginDescriptor> process(    @NotNull HttpRequests.Request request) throws IOException {
      if (indicator != null) {
        indicator.checkCanceled();
      }
      URLConnection connection=request.getConnection();
      if (connection instanceof HttpURLConnection && ((HttpURLConnection)connection).getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {
        return loadPluginList(pluginListFile);
      }
      if (indicator != null) {
        indicator.checkCanceled();
        indicator.setText2(IdeBundle.message("progress.downloading.list.of.plugins"));
      }
synchronized (RepositoryHelper.class) {
        File localFile=createLocalPluginsDescriptions(PLUGIN_LIST_FILE);
        OutputStream output=new FileOutputStream(localFile);
        try {
          NetUtils.copyStreamContent(indicator,request.getInputStream(),output,connection.getContentLength());
          return loadPluginList(localFile);
        }
  finally {
          output.close();
        }
      }
    }
  }
);
}
