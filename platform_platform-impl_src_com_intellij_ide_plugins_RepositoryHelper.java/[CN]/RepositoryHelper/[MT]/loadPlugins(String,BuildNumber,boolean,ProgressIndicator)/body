{
  final URIBuilder uriBuilder;
  final File pluginListFile;
  try {
    if (repositoryUrl == null) {
      uriBuilder=new URIBuilder(ApplicationInfoImpl.getShadowInstance().getPluginsListUrl());
      pluginListFile=new File(PathManager.getPluginsPath(),PLUGIN_LIST_FILE);
      if (pluginListFile.length() > 0) {
        uriBuilder.addParameter("crc32",Files.hash(pluginListFile,Hashing.crc32()).toString());
      }
    }
 else {
      uriBuilder=new URIBuilder(repositoryUrl);
      pluginListFile=null;
    }
  }
 catch (  URISyntaxException e) {
    throw new IOException(e);
  }
  if (!URLUtil.FILE_PROTOCOL.equals(uriBuilder.getScheme())) {
    uriBuilder.addParameter("build",(buildnumber != null ? buildnumber.asString() : ApplicationInfoImpl.getShadowInstance().getApiVersion()));
  }
  if (indicator != null) {
    indicator.setText2(IdeBundle.message("progress.connecting.to.plugin.manager",uriBuilder.getHost()));
  }
  HttpRequests.RequestBuilder request=HttpRequests.request(uriBuilder.toString()).forceHttps(forceHttps);
  return process(repositoryUrl,request.connect(new HttpRequests.RequestProcessor<List<IdeaPluginDescriptor>>(){
    @Override public List<IdeaPluginDescriptor> process(    @NotNull HttpRequests.Request request) throws IOException {
      if (indicator != null) {
        indicator.checkCanceled();
      }
      URLConnection connection=request.getConnection();
      if (pluginListFile != null && pluginListFile.length() > 0 && connection instanceof HttpURLConnection && ((HttpURLConnection)connection).getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {
        return loadPluginList(pluginListFile);
      }
      if (indicator != null) {
        indicator.checkCanceled();
        indicator.setText2(IdeBundle.message("progress.downloading.list.of.plugins",uriBuilder.getHost()));
      }
      if (pluginListFile != null) {
synchronized (RepositoryHelper.class) {
          FileUtil.ensureExists(pluginListFile.getParentFile());
          request.saveToFile(pluginListFile,indicator);
          return loadPluginList(pluginListFile);
        }
      }
 else {
        return parsePluginList(request.getInputStream());
      }
    }
  }
));
}
