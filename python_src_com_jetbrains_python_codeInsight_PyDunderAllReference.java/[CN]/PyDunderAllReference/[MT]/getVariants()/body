{
  final List<LookupElement> result=new ArrayList<LookupElement>();
  PyFile containingFile=(PyFile)getElement().getContainingFile().getOriginalFile();
  final List<String> dunderAll=containingFile.getDunderAll();
  final Set<String> seenNames=new HashSet<String>();
  if (dunderAll != null) {
    seenNames.addAll(dunderAll);
  }
  containingFile.processDeclarations(new PsiScopeProcessor(){
    @Override public boolean execute(    @NotNull PsiElement element,    ResolveState state){
      if (element instanceof PsiNamedElement && !(element instanceof LightNamedElement)) {
        final String name=((PsiNamedElement)element).getName();
        if (name != null && PyUtil.getInitialUnderscores(name) == 0 && !seenNames.contains(name)) {
          seenNames.add(name);
          result.add(LookupElementBuilder.create((PsiNamedElement)element).withIcon(element.getIcon(0)));
        }
      }
 else       if (element instanceof PyImportElement) {
        final String visibleName=((PyImportElement)element).getVisibleName();
        if (visibleName != null && !seenNames.contains(visibleName)) {
          seenNames.add(visibleName);
          result.add(LookupElementBuilder.create(element,visibleName));
        }
      }
      return true;
    }
    @Override public <T>T getHint(    @NotNull Key<T> hintKey){
      return null;
    }
    @Override public void handleEvent(    Event event,    @Nullable Object associated){
    }
  }
,ResolveState.initial(),null,containingFile);
  return ArrayUtil.toObjectArray(result);
}
