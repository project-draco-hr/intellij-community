{
  if (rhs instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression binaryExpression=(PsiPolyadicExpression)rhs;
    final int precedence1=getPrecedenceForOperator(binaryExpression.getOperationTokenType());
    final IElementType signTokenType=sign.getTokenType();
    final IElementType newOperatorToken=tokenMap.get(signTokenType);
    final int precedence2=getPrecedenceForOperator(newOperatorToken);
    return precedence1 >= precedence2 || !isCommutativeOperator(newOperatorToken);
  }
 else {
    return rhs instanceof PsiConditionalExpression;
  }
}
