{
class RequestImpl implements Request {
    private URLConnection myConnection;
    private InputStream myInputStream;
    @NotNull @Override public URLConnection getConnection() throws IOException {
      if (myConnection == null) {
        myConnection=openConnection(builder);
      }
      return myConnection;
    }
    @NotNull @Override public InputStream getInputStream() throws IOException {
      if (myInputStream == null) {
        myInputStream=getConnection().getInputStream();
        if (builder.myGzip && "gzip".equalsIgnoreCase(getConnection().getContentEncoding())) {
          myInputStream=new GZIPInputStream(myInputStream);
        }
      }
      return myInputStream;
    }
    @Override public boolean isSuccessful() throws IOException {
      URLConnection connection=getConnection();
      return !(connection instanceof HttpURLConnection) || ((HttpURLConnection)connection).getResponseCode() == 200;
    }
    private void cleanup() throws IOException {
      if (myInputStream != null) {
        myInputStream.close();
      }
      if (myConnection instanceof HttpURLConnection) {
        ((HttpURLConnection)myConnection).disconnect();
      }
    }
    @NotNull public byte[] getBytes(    @Nullable ProgressIndicator indicator) throws IOException {
      int contentLength=getConnection().getContentLength();
      BufferExposingByteArrayOutputStream out=new BufferExposingByteArrayOutputStream(contentLength > 0 ? contentLength : 32 * 1024);
      NetUtils.copyStreamContent(indicator,getInputStream(),out,contentLength);
      return ArrayUtil.realloc(out.getInternalBuffer(),out.size());
    }
    @NotNull public File saveToFile(    @NotNull File file,    @Nullable ProgressIndicator indicator) throws IOException {
      OutputStream out=null;
      boolean deleteFile=true;
      try {
        if (indicator != null) {
          indicator.checkCanceled();
        }
        FileUtilRt.createParentDirs(file);
        out=new FileOutputStream(file);
        NetUtils.copyStreamContent(indicator,getInputStream(),out,getConnection().getContentLength());
        deleteFile=false;
      }
 catch (      IOException e) {
        URLConnection connection=getConnection();
        String errorMessage="Cannot download '" + builder.myUrl + ", headers: "+ connection.getHeaderFields();
        if (connection instanceof HttpURLConnection) {
          HttpURLConnection httpConnection=(HttpURLConnection)connection;
          errorMessage+="', response code: " + httpConnection.getResponseCode() + ", response message: "+ httpConnection.getResponseMessage();
        }
        throw new IOException(errorMessage,e);
      }
 finally {
        try {
          if (out != null) {
            out.close();
          }
        }
  finally {
          if (deleteFile) {
            FileUtilRt.delete(file);
          }
        }
      }
      return file;
    }
  }
  RequestImpl request=new RequestImpl();
  try {
    return processor.process(request);
  }
  finally {
    request.cleanup();
  }
}
