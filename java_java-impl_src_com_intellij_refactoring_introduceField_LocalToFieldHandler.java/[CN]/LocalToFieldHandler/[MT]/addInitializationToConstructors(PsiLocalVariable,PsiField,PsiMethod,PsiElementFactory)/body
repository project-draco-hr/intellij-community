{
  PsiClass aClass=field.getContainingClass();
  PsiMethod[] constructors=aClass.getConstructors();
  PsiStatement assignment=createAssignment(local,field.getName(),factory);
  boolean added=false;
  for (  PsiMethod constructor : constructors) {
    if (constructor == enclosingConstructor)     continue;
    PsiCodeBlock body=constructor.getBody();
    if (body == null)     continue;
    PsiStatement[] statements=body.getStatements();
    if (statements.length > 0) {
      PsiStatement first=statements[0];
      if (first instanceof PsiExpressionStatement) {
        PsiExpression expression=((PsiExpressionStatement)first).getExpression();
        if (expression instanceof PsiMethodCallExpression) {
          @NonNls String text=((PsiMethodCallExpression)expression).getMethodExpression().getText();
          if ("this".equals(text)) {
            continue;
          }
          if ("super".equals(text) && enclosingConstructor == null && PsiTreeUtil.isAncestor(constructor,local,false)) {
            final PsiStatement statement=(PsiStatement)body.addAfter(assignment,first);
            appendComments(local,statement);
            local.delete();
            return statement;
          }
        }
      }
      if (enclosingConstructor == null && PsiTreeUtil.isAncestor(constructor,local,false)) {
        final PsiStatement statement=(PsiStatement)body.addBefore(assignment,first);
        appendComments(local,statement);
        local.delete();
        return statement;
      }
    }
    assignment=(PsiStatement)body.add(assignment);
    added=true;
  }
  if (!added && enclosingConstructor == null) {
    if (aClass instanceof PsiAnonymousClass) {
      final PsiClassInitializer classInitializer=(PsiClassInitializer)aClass.addAfter(factory.createClassInitializer(),field);
      assignment=(PsiStatement)classInitializer.getBody().add(assignment);
    }
 else {
      PsiMethod constructor=(PsiMethod)aClass.add(factory.createConstructor());
      assignment=(PsiStatement)constructor.getBody().add(assignment);
    }
  }
  if (enclosingConstructor == null) {
    appendComments(assignment,local);
    local.delete();
  }
  return assignment;
}
