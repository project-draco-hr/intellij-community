{
  try {
    ChangeContextUtil.encodeContextInfo(myDestinationClass,true);
    final boolean rebindNeeded2=!myVariableName.equals(myFieldName) || myRebindNeeded;
    final PsiReference[] refs;
    if (rebindNeeded2) {
      refs=ReferencesSearch.search(myLocal,GlobalSearchScope.projectScope(myProject),false).toArray(new PsiReference[0]);
    }
 else {
      refs=null;
    }
    final PsiMethod enclosingConstructor=BaseExpressionToFieldHandler.getEnclosingConstructor(myDestinationClass,myLocal);
    myField=mySettings.isIntroduceEnumConstant() ? EnumConstantsUtil.createEnumConstant(myDestinationClass,myLocal,myFieldName) : createField(myLocal,mySettings.getForcedType(),myFieldName,myInitializerPlace == IN_FIELD_DECLARATION);
    myField=(PsiField)myDestinationClass.add(myField);
    BaseExpressionToFieldHandler.setModifiers(myField,mySettings);
    if (!mySettings.isIntroduceEnumConstant()) {
      VisibilityUtil.fixVisibility(myOccurences,myField,mySettings.getFieldVisibility());
    }
    myLocal.normalizeDeclaration();
    PsiElement declarationStatement=myLocal.getParent();
    final BaseExpressionToFieldHandler.InitializationPlace finalInitializerPlace;
    if (myLocal.getInitializer() == null) {
      finalInitializerPlace=IN_FIELD_DECLARATION;
    }
 else {
      finalInitializerPlace=myInitializerPlace;
    }
    final PsiElementFactory factory=JavaPsiFacade.getInstance(myProject).getElementFactory();
switch (finalInitializerPlace) {
case IN_FIELD_DECLARATION:
      appendComments(declarationStatement);
    declarationStatement.delete();
  break;
case IN_CURRENT_METHOD:
PsiExpressionStatement statement=createAssignment(myLocal,myFieldName,factory);
if (declarationStatement instanceof PsiDeclarationStatement) {
appendComments(declarationStatement);
declarationStatement.replace(statement);
}
 else {
myLocal.replace(statement.getExpression());
}
break;
case IN_CONSTRUCTOR:
addInitializationToConstructors(myLocal,myField,enclosingConstructor,factory);
break;
case IN_SETUP_METHOD:
addInitializationToSetUp(myLocal,myField,factory);
}
if (enclosingConstructor != null && myInitializerPlace == IN_CONSTRUCTOR) {
PsiStatement statement=createAssignment(myLocal,myFieldName,factory);
declarationStatement.replace(statement);
}
if (rebindNeeded2) {
for (final PsiReference reference : refs) {
if (reference != null) {
RefactoringUtil.replaceOccurenceWithFieldRef((PsiExpression)reference,myField,myDestinationClass);
}
}
ChangeContextUtil.decodeContextInfo(myDestinationClass,myDestinationClass,null);
}
}
 catch (IncorrectOperationException e) {
LOG.error(e);
}
}
