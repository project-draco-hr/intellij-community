{
  return new PyInspectionVisitor(holder){
    @Override public void visitPyFile(    final PyFile node){
      processScope(node);
    }
    @Override public void visitPyClass(    final PyClass node){
      processScope(node);
    }
    @Override public void visitPyFunction(    final PyFunction node){
      processScope(node);
    }
    private void processScope(    final ScopeOwner owner){
      boolean parametersCanBeUnused=false;
      if (owner instanceof PyFunction) {
        parametersCanBeUnused=PySuperMethodsSearch.search(((PyFunction)owner)).findFirst() != null;
      }
      final HashMap<String,List<PsiElement>> unusedMap=new HashMap<String,List<PsiElement>>();
      final ControlFlow flow=owner.getControlFlow();
      final Instruction[] instructions=flow.getInstructions();
      for (int i=0; i < instructions.length; i++) {
        final Instruction instruction=instructions[i];
        if (instruction instanceof ReadWriteInstruction) {
          final String name=((ReadWriteInstruction)instruction).getName();
          if (name == null) {
            continue;
          }
          final PsiElement element=instruction.getElement();
          final ReadWriteInstruction.ACCESS access=((ReadWriteInstruction)instruction).getAccess();
          if (access.isWriteAccess() && (parametersCanBeUnused || !(element != null && element.getParent() instanceof PyNamedParameter))) {
            addToUnused(unusedMap,name,element);
          }
        }
      }
      for (int i=0; i < instructions.length; i++) {
        final Instruction instruction=instructions[i];
        if (instruction instanceof ReadWriteInstruction) {
          final String name=((ReadWriteInstruction)instruction).getName();
          if (name == null) {
            continue;
          }
          final PsiElement element=instruction.getElement();
          final ReadWriteInstruction.ACCESS access=((ReadWriteInstruction)instruction).getAccess();
          if (access.isReadAccess()) {
            int number=i;
            if (access == ReadWriteInstruction.ACCESS.READWRITE) {
              final PyAugAssignmentStatement augAssignmentStatement=PyAugAssignmentStatementNavigator.getStatementByTarget(element);
              number=ControlFlowUtil.findInstructionNumberByElement(instructions,augAssignmentStatement);
            }
            PyControlFlowUtil.iterateWriteAccessFor(name,number,instructions,new Function<ReadWriteInstruction,PyControlFlowUtil.Operation>(){
              public PyControlFlowUtil.Operation fun(              final ReadWriteInstruction rwInstr){
                final PsiElement instrElement=rwInstr.getElement();
                removeFromUnused(unusedMap,name,instrElement);
                return PyControlFlowUtil.Operation.CONTINUE;
              }
            }
);
          }
        }
      }
      for (      List<PsiElement> list : unusedMap.values()) {
        for (        PsiElement element : list) {
          final String name=element.getText();
          if (PyPsiUtils.isMethodContext(element) && "self".equals(name)) {
            continue;
          }
          if (element instanceof PyNamedParameter) {
            registerWarning(element,PyBundle.message("INSP.unused.locals.parameter.isnot.used",name));
          }
 else {
            registerWarning(element,PyBundle.message("INSP.unused.locals.local.variable.isnot.used",name));
          }
        }
      }
    }
    private void registerWarning(    final PsiElement element,    final String msg){
      registerProblem(element,msg,ProblemHighlightType.LIKE_UNUSED_SYMBOL,null);
    }
    private void removeFromUnused(    final HashMap<String,List<PsiElement>> unusedMap,    final String name,    final PsiElement element){
      final List<PsiElement> list=unusedMap.get(name);
      if (list == null) {
        return;
      }
      list.remove(element);
    }
    private void addToUnused(    final HashMap<String,List<PsiElement>> unusedMap,    final String name,    final PsiElement element){
      List<PsiElement> list=unusedMap.get(name);
      if (list == null) {
        list=new ArrayList<PsiElement>();
        unusedMap.put(name,list);
      }
      list.add(element);
    }
  }
;
}
