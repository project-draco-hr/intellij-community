{
  final PsiElement parent=expr.getParent();
  if (!(parent instanceof PyExpressionStatement)) {
    return false;
  }
  final PsiElement prevElement=PyPsiUtils.getPrevNonCommentSibling(parent,true);
  if (prevElement instanceof PyAssignmentStatement) {
    if (expr.getText().contains("type:"))     return true;
    final PyAssignmentStatement assignmentStatement=(PyAssignmentStatement)prevElement;
    final ScopeOwner scope=PsiTreeUtil.getParentOfType(prevElement,ScopeOwner.class);
    if (scope instanceof PyClass || scope instanceof PyFile) {
      return true;
    }
    if (scope instanceof PyFunction) {
      for (      PyExpression target : assignmentStatement.getTargets()) {
        if (PyUtil.isInstanceAttribute(target)) {
          return true;
        }
      }
    }
  }
  return false;
}
