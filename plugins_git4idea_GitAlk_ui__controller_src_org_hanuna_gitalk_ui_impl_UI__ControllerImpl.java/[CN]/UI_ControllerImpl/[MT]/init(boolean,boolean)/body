{
  final Consumer<ProgressIndicator> doInit=new Consumer<ProgressIndicator>(){
    @Override public void consume(    final ProgressIndicator indicator){
      events.setState(ControllerListener.State.PROGRESS);
      dataLoader=new DataLoaderImpl(UI_ControllerImpl.this.myProject);
      Executor<String> statusUpdater=new Executor<String>(){
        @Override public void execute(        String key){
          events.setUpdateProgressMessage(key);
          indicator.setText(key);
        }
      }
;
      try {
        if (readAllLog) {
          dataLoader.readAllLog(statusUpdater);
        }
 else {
          dataLoader.readNextPart(statusUpdater);
        }
        dataInit();
        events.setState(ControllerListener.State.USUAL);
      }
 catch (      IOException e) {
        events.setState(ControllerListener.State.ERROR);
        events.setErrorMessage(e.getMessage());
      }
catch (      GitException e) {
        events.setState(ControllerListener.State.ERROR);
        events.setErrorMessage(e.getMessage());
      }
    }
  }
;
  if (inBackground) {
    UIUtil.invokeAndWaitIfNeeded(new Runnable(){
      @Override public void run(){
        myDataLoaderQueue.run(new Task.Backgroundable(myProject,"Loading...",false){
          public void run(          @NotNull final ProgressIndicator indicator){
            doInit.consume(indicator);
          }
        }
);
      }
    }
);
  }
 else {
    doInit.consume(new EmptyProgressIndicator());
  }
}
