{
  if (resultRef == null) {
    DataPackUtils du=getDataPackUtils();
    if (position == InsertPosition.BELOW) {
      insertAfter=base.getRowIndex() + 1;
      base=getParent(base);
    }
 else {
      insertAfter=base.getRowIndex();
    }
    Node lowestInserted=nodesToInsert.get(nodesToInsert.size() - 1);
    if (du.isAncestorOf(base,lowestInserted)) {
      this.branchBase=base;
    }
 else {
      this.branchBase=getParent(lowestInserted);
    }
    Set<Node> nodesToRemove=new HashSet<Node>(nodesToInsert);
    List<Node> branch=du.getCommitsInBranchAboveBase(this.branchBase,du.getNodeByHash(subjectRef.getCommitHash()));
    List<Node> result=new ArrayList<Node>();
    for (    Node node : branch) {
      if (node == base) {
        result.addAll(nodesToInsert);
      }
      if (!nodesToRemove.contains(node)) {
        result.add(node);
      }
    }
    this.fakeBranch=createFakeCommits(this.branchBase,result);
    setResultRef(subjectRef);
  }
}
