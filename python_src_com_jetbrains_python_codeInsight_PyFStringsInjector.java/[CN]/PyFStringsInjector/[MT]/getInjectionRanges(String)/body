{
  final List<TextRange> result=new ArrayList<>();
  final String nodePrefix=nodeText.substring(0,PyStringLiteralExpressionImpl.getPrefixLength(nodeText));
  final boolean isFormattedString=nodePrefix.toLowerCase(Locale.US).contains("f");
  if (isFormattedString) {
    int bracesBalance=0;
    boolean insideChunk=false;
    String nestedLiteralQuotes=null;
    int chunkStart=0;
    final TextRange nodeContentRange=PyStringLiteralExpressionImpl.getNodeTextRange(nodeText);
    int offset=nodeContentRange.getStartOffset();
    while (offset < nodeContentRange.getEndOffset()) {
      final char c1=nodeText.charAt(offset);
      final char c2=offset + 1 < nodeContentRange.getEndOffset() ? nodeText.charAt(offset + 1) : '\0';
      final char c3=offset + 2 < nodeContentRange.getEndOffset() ? nodeText.charAt(offset + 2) : '\0';
      if (!insideChunk) {
        if ((c1 == '{' && c2 == '{') || (c1 == '}' && c2 == '}')) {
          offset+=2;
          continue;
        }
 else         if (c1 == '{') {
          chunkStart=offset + 1;
          insideChunk=true;
        }
      }
 else       if (nestedLiteralQuotes != null) {
        if (c1 == '\'' || c1 == '"') {
          final String expected;
          if (c2 == c1 && c3 == c1) {
            expected=StringUtil.repeatSymbol(c1,3);
          }
 else {
            expected=String.valueOf(c1);
          }
          if (nestedLiteralQuotes.equals(expected)) {
            nestedLiteralQuotes=null;
            offset+=expected.length();
            continue;
          }
        }
 else         if (c1 == '\\') {
          offset+=2;
          continue;
        }
      }
 else       if (c1 == '\'' || c1 == '"') {
        if (c2 == c1 && c3 == c1) {
          nestedLiteralQuotes=StringUtil.repeatSymbol(c1,3);
          offset+=3;
          continue;
        }
        nestedLiteralQuotes=String.valueOf(c1);
      }
 else       if (c1 == '{' || c1 == '[' || c1 == '(') {
        bracesBalance++;
      }
 else       if (bracesBalance > 0 && (c1 == '}' || c1 == ']' || c1 == ')')) {
        bracesBalance--;
      }
 else       if (bracesBalance == 0 && (c1 == '}' || (c1 == '!' && c2 != '=') || c1 == ':')) {
        insideChunk=false;
        if (offset > chunkStart) {
          result.add(TextRange.create(chunkStart,offset));
        }
      }
      offset++;
    }
    if (insideChunk) {
      result.add(TextRange.create(chunkStart,nodeContentRange.getEndOffset()));
    }
  }
  return Collections.unmodifiableList(result);
}
