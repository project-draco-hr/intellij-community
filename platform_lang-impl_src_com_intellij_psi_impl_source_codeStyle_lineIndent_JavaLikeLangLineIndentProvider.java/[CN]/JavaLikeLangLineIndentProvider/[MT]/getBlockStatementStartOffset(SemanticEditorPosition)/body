{
  Language currLanguage=position.getLanguage();
  position.before().beforeOptional(BlockOpeningBrace);
  if (position.isAt(Whitespace)) {
    if (position.isAtMultiline())     return position.after().getStartOffset();
    position.before();
  }
  if (position.isAt(RightParenthesis)) {
    position.beforeParentheses(LeftParenthesis,RightParenthesis);
  }
  while (!position.isAtEnd()) {
    if (currLanguage == Language.ANY || currLanguage == null)     currLanguage=position.getLanguage();
    if (position.isAt(Semicolon) || position.isAt(BlockOpeningBrace) || position.isAt(BlockClosingBrace)|| !((position.getLanguage() != Language.ANY) && position.isAtLanguage(currLanguage))) {
      SemanticEditorPosition statementStart=getPosition(position.getEditor(),position.getStartOffset());
      if (statementStart.after().isAt(Whitespace) && statementStart.isAtMultiline()) {
        if (!statementStart.after().isAtEnd()) {
          return statementStart.getStartOffset();
        }
      }
    }
    position.before();
  }
  return -1;
}
