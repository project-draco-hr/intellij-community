{
  Language currLanguage=position.getLanguage();
  position.before().beforeOptional(BlockOpeningBrace);
  if (position.isAt(Whitespace)) {
    if (position.isAtMultiline())     return position.after().getStartOffset();
    position.before();
  }
  if (position.isAt(RightParenthesis)) {
    position.beforeParentheses(LeftParenthesis,RightParenthesis);
  }
  while (!position.isAtEnd()) {
    if (currLanguage == Language.ANY || currLanguage == null)     currLanguage=position.getLanguage();
    if (position.isAtAnyOf(Semicolon,BlockOpeningBrace,BlockClosingBrace,BlockComment,DocBlockEnd,LineComment,LeftParenthesis) || (position.getLanguage() != Language.ANY) && !position.isAtLanguage(currLanguage)) {
      SemanticEditorPosition statementStart=getPosition(position.getEditor(),position.getStartOffset());
      if (!statementStart.after().afterOptional(Whitespace).isAtEnd()) {
        return statementStart.getStartOffset();
      }
    }
    position.before();
  }
  return -1;
}
