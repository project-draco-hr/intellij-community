{
  Language currLanguage=position.getLanguage();
  while (!position.isAtEnd()) {
    if (currLanguage == Language.ANY || currLanguage == null)     currLanguage=position.getLanguage();
    if (position.isAt(Colon)) {
      SemanticEditorPosition afterColon=getPosition(position.getEditor(),position.getStartOffset()).after().afterOptional(Whitespace);
      if (position.isAfterOnSameLine(SwitchCase,SwitchDefault)) {
        return afterColon.getStartOffset();
      }
    }
 else     if (position.isAt(RightParenthesis)) {
      position.beforeParentheses(LeftParenthesis,RightParenthesis);
    }
 else     if (position.isAt(BlockClosingBrace)) {
      position.beforeParentheses(BlockOpeningBrace,BlockClosingBrace);
    }
 else     if (position.isAtAnyOf(Semicolon,BlockOpeningBrace,BlockComment,DocBlockEnd,LeftParenthesis,LanguageStartDelimiter) || (position.getLanguage() != Language.ANY) && !position.isAtLanguage(currLanguage)) {
      SemanticEditorPosition statementStart=getPosition(position.getEditor(),position.getStartOffset());
      statementStart.after().afterOptionalMix(Whitespace,LineComment);
      if (!statementStart.isAtEnd()) {
        return statementStart.getStartOffset();
      }
    }
    position.before();
  }
  return 0;
}
