{
  final int size=myVertexes.size();
  int bestOccurrences=0;
  MethodsChain bestTargetMethodChain=null;
  final List<WeightAware<MethodIncompleteSignature>> initedVertexes=new ArrayList<WeightAware<MethodIncompleteSignature>>(size);
  final LinkedHashMap<MethodIncompleteSignature,MethodsChain> initedChains=new LinkedHashMap<MethodIncompleteSignature,MethodsChain>(size);
  final Iterator<Map.Entry<MethodIncompleteSignature,MethodsChain>> chainsIterator=myChains.entrySet().iterator();
  for (  final WeightAware<MethodIncompleteSignature> vertex : myVertexes) {
    final Map.Entry<MethodIncompleteSignature,MethodsChain> chainEntry=chainsIterator.next();
    final MethodIncompleteSignature method=vertex.getUnderlying();
    if (!excludedEdgeNames.contains(method.getName())) {
      initedVertexes.add(vertex);
      final MethodsChain methodsChain=chainEntry.getValue();
      initedChains.put(chainEntry.getKey(),methodsChain);
      if (contextQNames.contains(method.getOwner())) {
        final Integer occurrences=myOccurrencesMap.get(method);
        if (occurrences > bestOccurrences) {
          final PsiMethod oneOfFirst=methodsChain.getOneOfFirst();
          if (oneOfFirst != null && oneOfFirst.hasModifierProperty(PsiModifier.STATIC)) {
            bestTargetMethodChain=methodsChain;
            bestOccurrences=occurrences;
            continue;
          }
          final PsiClass firstQualifierClass=methodsChain.getFirstQualifierClass();
          if (firstQualifierClass != null && (searchService.isSingleton(firstQualifierClass,contextMethodName) || contextQNames.contains(firstQualifierClass.getQualifiedName()))) {
            bestTargetMethodChain=methodsChain;
            bestOccurrences=occurrences;
          }
        }
      }
    }
  }
  return new InitResult(initedVertexes,initedChains,bestTargetMethodChain);
}
