{
  final Project project=event.getRequiredData(CommonDataKeys.PROJECT);
  final VcsRevisionNumber revision=getRevisionNumber(event);
  if (revision == null) {
    return;
  }
  boolean logReady=findLog(project) != null;
  final ToolWindow window=ToolWindowManager.getInstance(project).getToolWindow(ChangesViewContentManager.TOOLWINDOW_ID);
  ContentManager cm=window.getContentManager();
  Content[] contents=cm.getContents();
  for (  Content content : contents) {
    if (VcsLogContentProvider.TAB_NAME.equals(content.getDisplayName())) {
      cm.setSelectedContent(content);
      break;
    }
  }
  final VcsLog log=findLog(project);
  if (log == null) {
    showLogNotReadyMessage(project);
    return;
  }
  Runnable selectAndOpenLog=new Runnable(){
    @Override public void run(){
      Runnable selectCommit=new Runnable(){
        @Override public void run(){
          jumpToRevisionUnderProgress(project,log,revision);
        }
      }
;
      if (!window.isVisible()) {
        window.activate(selectCommit,true);
      }
 else {
        selectCommit.run();
      }
    }
  }
;
  if (logReady) {
    selectAndOpenLog.run();
    return;
  }
  VcsLogManager logManager=VcsLogManager.getInstance(project);
  if (logManager == null) {
    showLogNotReadyMessage(project);
    return;
  }
  VcsLogUiImpl logUi=logManager.getMainLogUi();
  if (logUi == null) {
    showLogNotReadyMessage(project);
    return;
  }
  logUi.invokeOnChange(selectAndOpenLog);
}
