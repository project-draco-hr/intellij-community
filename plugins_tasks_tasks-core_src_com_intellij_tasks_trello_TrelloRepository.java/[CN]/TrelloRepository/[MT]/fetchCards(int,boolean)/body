{
  boolean fromList=false;
  String baseUrl;
  if (myCurrentList != null && myCurrentList != UNSPECIFIED_LIST) {
    baseUrl=getRestApiUrl("lists",myCurrentList.getId(),"cards");
    fromList=true;
  }
 else   if (myCurrentBoard != null && myCurrentBoard != UNSPECIFIED_BOARD) {
    baseUrl=getRestApiUrl("boards",myCurrentBoard.getId(),"cards");
  }
 else   if (myCurrentUser != null) {
    baseUrl=getRestApiUrl("members","me","cards");
  }
 else {
    throw new IllegalStateException("Not configured");
  }
  final URIBuilder fetchCardUrl=new URIBuilder(baseUrl).addParameter("fields",TrelloCard.REQUIRED_FIELDS).addParameter("limit",String.valueOf(limit));
  if (withClosed || fromList) {
    fetchCardUrl.addParameter("filter","all");
  }
 else {
    fetchCardUrl.addParameter("filter","visible");
  }
  List<TrelloCard> cards=makeRequestAndDeserializeJsonResponse(fetchCardUrl.build(),TrelloUtil.LIST_OF_CARDS_TYPE);
  LOG.debug("Total " + cards.size() + " cards downloaded");
  if (!myIncludeAllCards) {
    cards=ContainerUtil.filter(cards,new Condition<TrelloCard>(){
      @Override public boolean value(      TrelloCard card){
        return card.getIdMembers().contains(myCurrentUser.getId());
      }
    }
);
    LOG.debug("Total " + cards.size() + " cards after filtering");
  }
  if (!cards.isEmpty()) {
    if (fromList) {
      baseUrl=getRestApiUrl("boards",cards.get(0).getIdBoard(),"cards");
    }
    final URIBuilder visibleCardsUrl=new URIBuilder(baseUrl).addParameter("filter","visible").addParameter("fields","none");
    final List<TrelloCard> visibleCards=makeRequestAndDeserializeJsonResponse(visibleCardsUrl.build(),TrelloUtil.LIST_OF_CARDS_TYPE);
    LOG.debug("Total " + visibleCards.size() + " visible cards");
    final Set<String> visibleCardsIDs=ContainerUtil.map2Set(visibleCards,new Function<TrelloCard,String>(){
      @Override public String fun(      TrelloCard card){
        return card.getId();
      }
    }
);
    for (    TrelloCard card : cards) {
      card.setVisible(visibleCardsIDs.contains(card.getId()));
    }
  }
  return cards;
}
