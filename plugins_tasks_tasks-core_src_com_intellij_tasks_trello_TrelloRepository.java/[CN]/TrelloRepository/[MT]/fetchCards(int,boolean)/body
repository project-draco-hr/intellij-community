{
  boolean fromList=false;
  String baseUrl;
  if (myCurrentList != null) {
    baseUrl=TRELLO_API_BASE_URL + "/lists/" + myCurrentList.getId()+ "/cards";
    fromList=true;
  }
 else   if (myCurrentBoard != null) {
    baseUrl=TRELLO_API_BASE_URL + "/boards/" + myCurrentBoard.getId()+ "/cards";
  }
 else   if (myCurrentUser != null) {
    baseUrl=TRELLO_API_BASE_URL + "/members/me/cards";
  }
 else {
    throw new IllegalStateException("Not configured");
  }
  String fetchCardsUrl=baseUrl + "?fields=" + encodeUrl(TrelloCard.REQUIRED_FIELDS)+ "&limit"+ limit;
  fetchCardsUrl+=withClosed || fromList ? "&filter=all" : "&filter=visible";
  List<TrelloCard> cards=makeRequestAndDeserializeJsonResponse(fetchCardsUrl,TrelloUtil.LIST_OF_CARDS_TYPE);
  LOG.debug("Total " + cards.size() + " cards downloaded");
  if (!myIncludeAllCards) {
    cards=ContainerUtil.filter(cards,new Condition<TrelloCard>(){
      @Override public boolean value(      TrelloCard card){
        return card.getIdMembers().contains(myCurrentUser.getId());
      }
    }
);
    LOG.debug("Total " + cards.size() + " cards after filtering");
  }
  if (!cards.isEmpty()) {
    if (fromList) {
      baseUrl=TRELLO_API_BASE_URL + "/boards/" + cards.get(0).getIdBoard()+ "/cards";
    }
    String visibleCardsUrl=baseUrl + "?filter=visible&fields=none";
    List<TrelloCard> visibleCards=makeRequestAndDeserializeJsonResponse(visibleCardsUrl,TrelloUtil.LIST_OF_CARDS_TYPE);
    LOG.debug("Total " + visibleCards.size() + " visible cards");
    Set<String> visibleCardsIDs=ContainerUtil.map2Set(visibleCards,new Function<TrelloCard,String>(){
      @Override public String fun(      TrelloCard card){
        return card.getId();
      }
    }
);
    for (    TrelloCard card : cards) {
      card.setVisible(visibleCardsIDs.contains(card.getId()));
    }
  }
  return cards;
}
