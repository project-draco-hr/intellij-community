{
  final PsiElement position=parameters.getPosition();
  final PsiType[] leftTypes=InstanceOfLeftPartTypeGetter.getLeftTypes(position);
  final Set<PsiClassType> expectedClassTypes=new LinkedHashSet<PsiClassType>();
  final Set<PsiClass> parameterizedTypes=new THashSet<PsiClass>();
  for (  final PsiType type : leftTypes) {
    if (type instanceof PsiClassType) {
      final PsiClassType classType=(PsiClassType)type;
      if (!classType.isRaw()) {
        ContainerUtil.addIfNotNull(classType.resolve(),parameterizedTypes);
      }
      expectedClassTypes.add(classType.rawType());
    }
  }
  JavaInheritorsGetter.processInheritors(parameters,expectedClassTypes,result.getPrefixMatcher(),new Consumer<PsiType>(){
    @Override public void consume(    PsiType type){
      final PsiClass psiClass=PsiUtil.resolveClassInType(type);
      if (psiClass == null || psiClass instanceof PsiTypeParameter)       return;
      if (expectedClassTypes.contains(type))       return;
      result.addElement(createInstanceofLookupElement(psiClass,parameterizedTypes));
    }
  }
);
}
