{
  VirtualFile vFile=file.getVirtualFile();
  if (vFile == null || vFile.getFileType() != PythonFileType.INSTANCE) {
    return null;
  }
  Sdk sdk=PythonSdkType.findLocalCPython(ModuleUtilCore.findModuleForPsiElement(file));
  if (sdk == null) {
    if (!myReportedMissingInterpreter) {
      myReportedMissingInterpreter=true;
      reportMissingInterpreter();
    }
    return null;
  }
  final String homePath=sdk.getHomePath();
  if (homePath == null) {
    if (!myReportedMissingInterpreter) {
      myReportedMissingInterpreter=true;
      LOG.info("Could not find home path for interpreter " + homePath);
    }
    return null;
  }
  final InspectionProfile profile=InspectionProjectProfileManager.getInstance(file.getProject()).getCurrentProfile();
  final HighlightDisplayKey key=HighlightDisplayKey.find(PyPep8Inspection.INSPECTION_SHORT_NAME);
  if (!profile.isToolEnabled(key,file)) {
    return null;
  }
  if (file instanceof PyFileImpl && !((PyFileImpl)file).isAcceptedFor(PyPep8Inspection.class)) {
    return null;
  }
  final PyPep8Inspection inspection=(PyPep8Inspection)profile.getUnwrappedTool(PyPep8Inspection.KEY.toString(),file);
  final CodeStyleSettings currentSettings=CodeStyleSettingsManager.getInstance(file.getProject()).getCurrentSettings();
  final List<String> ignoredErrors=Lists.newArrayList(inspection.ignoredErrors);
  if (!currentSettings.getCustomSettings(PyCodeStyleSettings.class).SPACE_AFTER_NUMBER_SIGN) {
    ignoredErrors.add("E262");
    ignoredErrors.add("E265");
  }
  if (!currentSettings.getCustomSettings(PyCodeStyleSettings.class).SPACE_BEFORE_NUMBER_SIGN) {
    ignoredErrors.add("E261");
  }
  final int margin=currentSettings.getRightMargin(file.getLanguage());
  return new State(homePath,file.getText(),profile.getErrorLevel(key,file),ignoredErrors,margin);
}
