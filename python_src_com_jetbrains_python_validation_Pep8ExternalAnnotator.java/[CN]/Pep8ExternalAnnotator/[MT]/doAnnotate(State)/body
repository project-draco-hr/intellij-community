{
  if (collectedInfo == null)   return null;
  ArrayList<String> options=Lists.newArrayList();
  if (!collectedInfo.ignoredErrors.isEmpty()) {
    options.add("--ignore=" + DEFAULT_IGNORED_ERRORS + ","+ StringUtil.join(collectedInfo.ignoredErrors,","));
  }
  options.add("--max-line-length=" + collectedInfo.margin);
  options.add("-");
  GeneralCommandLine cmd=PythonHelper.PYCODESTYLE.newCommandLine(collectedInfo.interpreterPath,options);
  ProcessOutput output=PySdkUtil.getProcessOutput(cmd,new File(collectedInfo.interpreterPath).getParent(),ImmutableMap.of("PYTHONBUFFERED","1"),10000,collectedInfo.fileText.getBytes(),false);
  Results results=new Results(collectedInfo.level);
  if (output.isTimeout()) {
    LOG.info("Timeout running pycodestyle.py");
  }
 else   if (output.getStderrLines().isEmpty()) {
    for (    String line : output.getStdoutLines()) {
      final Problem problem=parseProblem(line);
      if (problem != null) {
        results.problems.add(problem);
      }
    }
  }
 else   if (((ApplicationInfoImpl)ApplicationInfo.getInstance()).isEAP()) {
    LOG.info("Error running pycodestyle.py: " + output.getStderr());
  }
  return results;
}
