{
  ResolveResult[] results=super.multiResolve(incompleteCode);
  if (results.length == 0) {
    final InjectedLanguageManager languageManager=InjectedLanguageManager.getInstance(myElement.getProject());
    final PsiLanguageInjectionHost host=languageManager.getInjectionHost(myElement);
    final String referencedName=myElement.getReferencedName();
    if (referencedName == null)     return ResolveResult.EMPTY_ARRAY;
    if (host != null) {
      final List<Pair<PsiElement,TextRange>> files=languageManager.getInjectedPsiFiles(host);
      if (files != null) {
        for (        Pair<PsiElement,TextRange> pair : files) {
          final PyResolveProcessor processor=new PyResolveProcessor(referencedName);
          PyResolveUtil.scopeCrawlUp(processor,(ScopeOwner)pair.getFirst(),referencedName,pair.getFirst());
          final List<RatedResolveResult> resultList=getResultsFromProcessor(referencedName,processor,pair.getFirst(),pair.getFirst());
          if (resultList.size() > 0) {
            List<RatedResolveResult> ret=RatedResolveResult.sorted(resultList);
            return ret.toArray(new RatedResolveResult[ret.size()]);
          }
        }
      }
      final PyResolveProcessor processor=new PyResolveProcessor(referencedName);
      final ScopeOwner scopeOwner=getHostScopeOwner();
      if (scopeOwner != null) {
        final PsiFile topLevel=scopeOwner.getContainingFile();
        PyResolveUtil.scopeCrawlUp(processor,scopeOwner,referencedName,topLevel);
        final PsiElement referenceAnchor=getScopeControlFlowAnchor(host);
        final List<RatedResolveResult> resultList=getResultsFromProcessor(referencedName,processor,referenceAnchor,topLevel);
        if (resultList.size() > 0) {
          final List<RatedResolveResult> ret=RatedResolveResult.sorted(resultList);
          return ret.toArray(new RatedResolveResult[ret.size()]);
        }
      }
    }
  }
  return results;
}
