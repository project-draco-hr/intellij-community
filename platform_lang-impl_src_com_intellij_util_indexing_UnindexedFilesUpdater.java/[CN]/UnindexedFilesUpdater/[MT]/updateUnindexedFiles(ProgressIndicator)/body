{
  long started=System.currentTimeMillis();
  PushedFilePropertiesUpdaterImpl.ourConcurrentlyFlag.set(Boolean.TRUE);
  try {
    PushedFilePropertiesUpdater.getInstance(myProject).pushAllPropertiesNow();
  }
  finally {
    PushedFilePropertiesUpdaterImpl.ourConcurrentlyFlag.set(null);
  }
  LOG.info("Pushed properties in " + (System.currentTimeMillis() - started) + " ms");
  indicator.setIndeterminate(true);
  indicator.setText(IdeBundle.message("progress.indexing.scanning"));
  CollectingContentIterator finder=myIndex.createContentIterator(indicator);
  long l=System.currentTimeMillis();
  FileBasedIndexImpl.ourConcurrentlyFlag.set(Boolean.TRUE);
  try {
    myIndex.iterateIndexableFiles(finder,myProject,indicator);
  }
  finally {
    FileBasedIndexImpl.ourConcurrentlyFlag.set(null);
  }
  myIndex.filesUpdateEnumerationFinished();
  LOG.info("Indexable files iterated in " + (System.currentTimeMillis() - l) + " ms");
  List<VirtualFile> files=finder.getFiles();
  if (myOnStartup && !ApplicationManager.getApplication().isUnitTestMode()) {
    ((StartupManagerImpl)StartupManager.getInstance(myProject)).scheduleInitialVfsRefresh();
  }
  if (files.isEmpty()) {
    return;
  }
  started=System.currentTimeMillis();
  LOG.info("Unindexed files update started: " + files.size() + " files to update");
  indicator.setIndeterminate(false);
  indicator.setText(IdeBundle.message("progress.indexing.updating"));
  indexFiles(indicator,files);
  LOG.info("Unindexed files update done in " + (System.currentTimeMillis() - started) + " ms");
}
