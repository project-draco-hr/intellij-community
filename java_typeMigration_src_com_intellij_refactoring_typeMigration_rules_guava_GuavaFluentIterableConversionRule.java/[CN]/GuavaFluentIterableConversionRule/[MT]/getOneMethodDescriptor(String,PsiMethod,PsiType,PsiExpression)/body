{
  TypeConversionDescriptor descriptorBase=null;
  boolean needSpecifyType=true;
  if (methodName.equals("from")) {
    descriptorBase=new TypeConversionDescriptor("FluentIterable.from($it$)","$it$.stream()"){
      @Override public PsiExpression replace(      PsiExpression expression){
        PseudoLambdaReplaceTemplate.replaceTypeParameters(((PsiMethodCallExpression)expression).getArgumentList().getExpressions()[0]);
        return super.replace(expression);
      }
    }
;
  }
 else   if (methodName.equals("filter")) {
    descriptorBase=FluentIterableConversionUtil.getFilterDescriptor(method);
  }
 else   if (methodName.equals("transformAndConcat")) {
    descriptorBase=new FluentIterableConversionUtil.TransformAndConcatConversionRule();
  }
 else {
    final TypeConversionDescriptorFactory base=DESCRIPTORS_MAP.get(methodName);
    if (base != null) {
      final TypeConversionDescriptor descriptor=base.create();
      needSpecifyType=base.isChainedMethod();
      descriptorBase=descriptor;
    }
  }
  if (descriptorBase != null) {
    if (needSpecifyType && to != null) {
      descriptorBase.withConversionType(to);
    }
    return descriptorBase;
  }
  return null;
}
