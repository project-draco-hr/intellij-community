{
  Document document=editor.getDocument();
  CharSequence text=document.getCharsSequence();
  int caretOffset=caretOffsetRef.get().intValue();
  if (!CodeInsightSettings.getInstance().SMART_INDENT_ON_ENTER) {
    return Result.Continue;
  }
  int prevCharOffset=CharArrayUtil.shiftBackward(text,caretOffset - 1," \t");
  int nextCharOffset=CharArrayUtil.shiftForward(text,caretOffset," \t");
  if (!isValidOffset(prevCharOffset,text) || !isValidOffset(nextCharOffset,text) || !isBracePair(text.charAt(prevCharOffset),text.charAt(nextCharOffset))|| file.findElementAt(prevCharOffset) == file.findElementAt(nextCharOffset)) {
    return Result.Continue;
  }
  final int line=document.getLineNumber(caretOffset);
  final int start=document.getLineStartOffset(line);
  final CodeDocumentationUtil.CommentContext commentContext=CodeDocumentationUtil.tryParseCommentContext(file,text,caretOffset,start);
  String indentInsideJavadoc=commentContext.docAsterisk ? CodeDocumentationUtil.getIndentInsideJavadoc(document,caretOffset) : null;
  originalHandler.execute(editor,editor.getCaretModel().getCurrentCaret(),dataContext);
  Project project=editor.getProject();
  if (indentInsideJavadoc != null && project != null && CodeStyleSettingsManager.getSettings(project).JD_LEADING_ASTERISKS_ARE_ENABLED) {
    document.insertString(editor.getCaretModel().getOffset(),"*" + indentInsideJavadoc);
  }
  PsiDocumentManager.getInstance(file.getProject()).commitDocument(document);
  try {
    CodeStyleManager.getInstance(file.getProject()).adjustLineIndent(file,editor.getCaretModel().getOffset());
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return indentInsideJavadoc == null ? Result.Continue : Result.DefaultForceIndent;
}
