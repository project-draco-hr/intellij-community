{
  ProgressManager.getInstance().run(new Task.Backgroundable(project,"Generating coverage report ..."){
    @Override public void run(    @NotNull final ProgressIndicator indicator){
      try {
        final HTMLReportBuilder builder=ReportBuilderFactory.createHTMLReportBuilder();
        builder.setReportDir(new File(outputDir));
        builder.generateReport(new IDEACoverageData(coverageDataFileName,new SourceCodeProvider(){
          public String getSourceCode(          @NotNull final String classname) throws IOException {
            return ApplicationManager.getApplication().runReadAction(new Computable<String>(){
              public String compute(){
                final PsiClass psiClass=ClassUtil.findPsiClassByJVMName(PsiManager.getInstance(project),classname);
                return psiClass != null ? psiClass.getContainingFile().getText() : "";
              }
            }
);
          }
        }
));
      }
 catch (      IOException e) {
        LOG.error(e);
      }
    }
    @Override public void onSuccess(){
      if (openInBrowser)       BrowserUtil.launchBrowser(VfsUtil.pathToUrl(outputDir + "/index.html"));
    }
  }
);
}
