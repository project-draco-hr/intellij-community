{
  getTemplatePresentation().setDescription(GradleBundle.message("gradle.codeInsight.action.apply_plugin.description"));
  getTemplatePresentation().setText(GradleBundle.message("gradle.codeInsight.action.apply_plugin.text"));
  getTemplatePresentation().setIcon(GradleIcons.GradlePlugin);
  final List<String> plugins=StringUtil.split("java,groovy,idea,eclipse,scala,antlr,application,ear,jetty,maven,osgi,war,announce," + "build-announcements,checkstyle,codenarc,eclipse-wtp,findbugs,jdepend,pmd,project-report,signing,sonar",",");
  myPlugins=new KeyValue[plugins.size()];
  ContainerUtil.map2Array(plugins,myPlugins,new Function<String,KeyValue>(){
    @Override public KeyValue fun(    String o){
      return createPluginKey(o);
    }
  }
);
  Arrays.sort(myPlugins,new Comparator<KeyValue>(){
    @Override public int compare(    KeyValue o1,    KeyValue o2){
      return String.valueOf(o1.getKey()).compareTo(String.valueOf(o2.getKey()));
    }
  }
);
}
