{
  final String jpsClasspath=args[0];
  final String mainClassName=args[1];
  final String[] jpsArgs=new String[args.length - 2];
  System.arraycopy(args,2,jpsArgs,0,jpsArgs.length);
  final StringTokenizer tokenizer=new StringTokenizer(jpsClasspath,File.pathSeparator,false);
  final List<URL> urls=new ArrayList<URL>();
  while (tokenizer.hasMoreTokens()) {
    final String path=tokenizer.nextToken();
    urls.add(new File(path).toURI().toURL());
  }
  final URLClassLoader jpsLoader=new URLClassLoader(urls.toArray(new URL[urls.size()]),Launcher.class.getClassLoader());
  if (Boolean.parseBoolean(System.getProperty("io.netty.random.id"))) {
    final String id=UUID.randomUUID().toString();
    System.setProperty("io.netty.machineId",id.substring(id.length() - 8));
    System.setProperty("io.netty.processId",Integer.toString(new Random().nextInt(65535)));
  }
  final Class<?> mainClass=jpsLoader.loadClass(mainClassName);
  final Method mainMethod=mainClass.getMethod("main",String[].class);
  Thread.currentThread().setContextClassLoader(jpsLoader);
  mainMethod.invoke(null,new Object[]{jpsArgs});
}
