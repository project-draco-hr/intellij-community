{
  final CommonProblemDescriptor descriptor=myDescriptors[myCount++];
  ProgressIndicator indicator=myTask.getIndicator();
  if (indicator != null) {
    indicator.setFraction((double)myCount / myDescriptors.length);
    String presentableText="usages";
    if (descriptor instanceof ProblemDescriptor) {
      final PsiElement psiElement=((ProblemDescriptor)descriptor).getPsiElement();
      if (psiElement != null) {
        presentableText=SymbolPresentationUtil.getSymbolPresentableText(psiElement);
      }
    }
    indicator.setText("Processing " + presentableText);
  }
  final boolean[] runInReadAction={false};
  final QuickFix[] fixes=descriptor.getFixes();
  if (fixes != null) {
    for (    QuickFix fix : fixes) {
      if (!fix.startInWriteAction()) {
        runInReadAction[0]=true;
      }
 else {
        runInReadAction[0]=false;
        break;
      }
    }
  }
  DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_MODAL,new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          myDocumentManager.commitAllDocuments();
          if (!runInReadAction[0]) {
            applyFix(myProject,descriptor);
          }
        }
      }
);
      if (runInReadAction[0]) {
        applyFix(myProject,descriptor);
      }
    }
  }
);
  return isDone();
}
