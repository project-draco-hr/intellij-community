{
  super(project,false);
  myProject=project;
  myTask=task;
  setTitle("Open Task");
  myTaskNameLabel.setText(TaskUtil.getTrimmedSummary(task));
  myTaskNameLabel.setIcon(task.getIcon());
  TaskManagerImpl taskManager=(TaskManagerImpl)TaskManager.getManager(myProject);
  ControlBinder binder=new ControlBinder(taskManager.getState());
  binder.bindAnnotations(this);
  binder.reset();
  if (!TaskStateCombo.stateUpdatesSupportedFor(task)) {
    myUpdateState.setVisible(false);
    myTaskStateCombo.setVisible(false);
  }
  final boolean stateUpdatesEnabled=PropertiesComponent.getInstance(project).getBoolean(UPDATE_STATE_ENABLED,true);
  myUpdateState.setSelected(stateUpdatesEnabled);
  myUpdateState.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final boolean selected=myUpdateState.isSelected();
      PropertiesComponent.getInstance(project).setValue(UPDATE_STATE_ENABLED,String.valueOf(selected));
      updateFields();
      if (selected) {
        myTaskStateCombo.scheduleUpdateOnce();
      }
    }
  }
);
  TaskManagerImpl.Config state=taskManager.getState();
  myClearContext.setSelected(state.clearContext);
  updateFields();
  if (myUpdateState.isSelected()) {
    myTaskStateCombo.scheduleUpdateOnce();
  }
  myAdditionalPanel.setLayout(new BoxLayout(myAdditionalPanel,BoxLayout.Y_AXIS));
  myPanels=TaskDialogPanelProvider.getOpenTaskPanels(project,task);
  for (  TaskDialogPanel panel : myPanels) {
    myAdditionalPanel.add(panel.getPanel());
  }
  init();
}
