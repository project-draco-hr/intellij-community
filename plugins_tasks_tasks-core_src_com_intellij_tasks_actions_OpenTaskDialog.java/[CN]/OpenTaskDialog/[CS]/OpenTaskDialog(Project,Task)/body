{
  super(project,false);
  myProject=project;
  myTask=task;
  TaskManagerImpl taskManager=(TaskManagerImpl)TaskManager.getManager(myProject);
  setTitle("Open Task");
  myTaskNameLabel.setText(TaskUtil.getTrimmedSummary(task));
  myTaskNameLabel.setIcon(task.getIcon());
  TaskManagerImpl manager=(TaskManagerImpl)TaskManager.getManager(project);
  ControlBinder binder=new ControlBinder(manager.getState());
  binder.bindAnnotations(this);
  binder.reset();
  myStateComboLabel.setLabelFor(myStateCombo);
  myStateComboHint.setIcon(PlatformIcons.UP_DOWN_ARROWS);
  final JComboBox comboBox=myStateCombo.getComboBox();
  comboBox.setPreferredSize(new Dimension(300,UIUtil.fixComboBoxHeight(comboBox.getPreferredSize().height)));
  final ListCellRenderer defaultRenderer=comboBox.getRenderer();
  comboBox.setRenderer(new ListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      if (value == null) {
        return new JBLabel("-- no states available --");
      }
      return defaultRenderer.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
    }
  }
);
  final TaskRepository repository=myTask.getRepository();
  if (myTask.isIssue() && repository != null && repository.isSupported(TaskRepository.STATE_UPDATING)) {
    new ComboBoxUpdater<CustomStateTrinityAdapter>(myProject,"Fetching available task states...",comboBox){
      @NotNull @Override protected List<CustomStateTrinityAdapter> fetch(      @NotNull ProgressIndicator indicator) throws Exception {
        return ContainerUtil.map(repository.getAvailableTaskStates(myTask),new Function<CustomTaskState,CustomStateTrinityAdapter>(){
          @Override public CustomStateTrinityAdapter fun(          CustomTaskState state){
            return new CustomStateTrinityAdapter(state);
          }
        }
);
      }
      @Nullable @Override public CustomStateTrinityAdapter getSelectedItem(){
        final CustomTaskState state=repository.getPreferredOpenTaskState();
        return state != null ? new CustomStateTrinityAdapter(state) : null;
      }
      @Nullable @Override public CustomStateTrinityAdapter getExtraItem(){
        return new CustomStateTrinityAdapter(DO_NOT_UPDATE_STATE);
      }
    }
.queue();
  }
 else {
    myStateComboLabel.setVisible(false);
    myStateComboHint.setVisible(false);
    myStateCombo.setVisible(false);
  }
  TaskManagerImpl.Config state=taskManager.getState();
  myClearContext.setSelected(state.clearContext);
  AbstractVcs vcs=manager.getActiveVcs();
  if (vcs == null) {
    myVcsPanel.setVisible(false);
  }
 else {
    ActionListener listener=new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        updateFields(false);
      }
    }
;
    myCreateChangelist.addActionListener(listener);
    myCreateBranch.addActionListener(listener);
    myCreateChangelist.setSelected(manager.getState().createChangelist);
    VcsTaskHandler[] handlers=VcsTaskHandler.getAllHandlers(project);
    if (handlers.length == 0) {
      myCreateBranch.setSelected(false);
      myCreateBranch.setVisible(false);
      myBranchName.setVisible(false);
      myFromLabel.setVisible(false);
      myBranchFrom.setVisible(false);
    }
 else {
      for (      VcsTaskHandler handler : handlers) {
        VcsTaskHandler.TaskInfo[] tasks=handler.getCurrentTasks();
        if (tasks.length > 0) {
          myVcsTaskHandler=handler;
          myBranchFrom.setModel(new DefaultComboBoxModel(tasks));
          myBranchFrom.setEnabled(true);
          final String startFrom=PropertiesComponent.getInstance(project).getValue(START_FROM_BRANCH);
          VcsTaskHandler.TaskInfo info=null;
          if (startFrom != null) {
            info=ContainerUtil.find(tasks,new Condition<VcsTaskHandler.TaskInfo>(){
              @Override public boolean value(              VcsTaskHandler.TaskInfo taskInfo){
                return startFrom.equals(taskInfo.getName());
              }
            }
);
          }
          if (info == null) {
            info=tasks[0];
          }
          myBranchFrom.setSelectedItem(info);
          myBranchFrom.addActionListener(new ActionListener(){
            @Override public void actionPerformed(            ActionEvent e){
              VcsTaskHandler.TaskInfo item=(VcsTaskHandler.TaskInfo)myBranchFrom.getSelectedItem();
              if (item != null) {
                PropertiesComponent.getInstance(project).setValue(START_FROM_BRANCH,item.getName());
              }
            }
          }
);
          break;
        }
      }
      myCreateBranch.setSelected(manager.getState().createBranch && myBranchFrom.getItemCount() > 0);
      myBranchFrom.setRenderer(new ColoredListCellRenderer<VcsTaskHandler.TaskInfo>(){
        @Override protected void customizeCellRenderer(        JList list,        VcsTaskHandler.TaskInfo value,        int index,        boolean selected,        boolean hasFocus){
          if (value != null) {
            append(value.getName());
          }
        }
      }
);
    }
    myBranchName.setText(taskManager.suggestBranchName(task));
    myChangelistName.setText(taskManager.getChangelistName(task));
    updateFields(true);
  }
  final JComponent contentPanel=getContentPanel();
  contentPanel.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      super.keyPressed(e);
    }
  }
);
  myStateCombo.registerUpDownHint(getPreferredFocusedComponent());
  init();
}
