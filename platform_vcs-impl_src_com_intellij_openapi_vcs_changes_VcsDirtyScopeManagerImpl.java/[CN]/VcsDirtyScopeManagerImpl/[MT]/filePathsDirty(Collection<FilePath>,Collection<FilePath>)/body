{
  try {
    final MultiMap<AbstractVcs,FilePath> filesConverted=groupByVcs(filesDirty);
    final MultiMap<AbstractVcs,FilePath> dirsConverted=groupByVcs(dirsRecursivelyDirty);
    if (filesConverted.isEmpty() && dirsConverted.isEmpty())     return;
    if (LOG.isDebugEnabled()) {
      LOG.debug("paths dirty: " + filesConverted + "; "+ dirsConverted+ "; "+ ReflectionUtil.findCallerClass(3));
    }
    boolean hasSomethingDirty;
synchronized (LOCK) {
      if (myDisposed)       return;
      markDirty(myDirtBuilder,filesConverted,false);
      markDirty(myDirtBuilder,dirsConverted,true);
      hasSomethingDirty=!myDirtBuilder.isEmpty();
    }
    if (hasSomethingDirty) {
      myChangeListManager.scheduleUpdate();
    }
  }
 catch (  ProcessCanceledException ignore) {
  }
}
