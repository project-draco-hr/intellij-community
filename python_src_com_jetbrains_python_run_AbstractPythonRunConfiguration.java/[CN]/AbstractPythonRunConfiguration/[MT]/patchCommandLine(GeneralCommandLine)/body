{
  final String sdk_home=getSdkHome();
  Sdk sdk=PythonSdkType.findPythonSdk(getModule());
  if (sdk != null && sdk_home != null) {
    SdkType sdk_type=sdk.getSdkType();
    String path_value;
    if (sdk_type instanceof PythonSdkType) {
      File virtualenv_root=PythonSdkType.getVirtualEnvRoot(sdk_home);
      if (virtualenv_root != null) {
        String virtualenv_bin=new File(virtualenv_root,"bin").getPath();
        if (isPassParentEnvs()) {
          path_value=System.getenv("PATH");
          if (path_value != null)           path_value=virtualenv_bin + File.pathSeparator + path_value;
 else           path_value=virtualenv_bin;
        }
 else         path_value=virtualenv_bin;
        Map<String,String> new_env=cloneEnv(commandLine.getEnvParams());
        String existing_path=new_env.get("PATH");
        if (existing_path == null || existing_path.indexOf(virtualenv_bin) < 0) {
          new_env.put("PATH",path_value);
          commandLine.setEnvParams(new_env);
        }
      }
    }
    Module module=getModule();
    if (module != null) {
      BuildoutFacet facet=BuildoutFacet.getInstance(module);
      if (facet != null) {
        List<String> paths=facet.getAdditionalPythonPath();
        if (paths != null) {
          Map<String,String> new_env=cloneEnv(commandLine.getEnvParams());
          final String PYTHONPATH="PYTHONPATH";
          String old_path=new_env.get(PYTHONPATH);
          path_value=PyUtil.joinWith(File.pathSeparator,paths);
          if (old_path != null)           path_value=path_value + File.pathSeparator + old_path;
          new_env.put(PYTHONPATH,path_value);
          commandLine.setEnvParams(new_env);
        }
      }
    }
  }
}
