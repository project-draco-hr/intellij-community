{
  final GitLineHandler rebaseHandler=createHandler(root);
  rebaseHandler.setStdoutSuppressed(false);
  rebaseHandler.addParameters(parameters);
  if (lineListener != null) {
    rebaseHandler.addLineListener(lineListener);
  }
  final GitRebaseProblemDetector rebaseConflictDetector=new GitRebaseProblemDetector();
  rebaseHandler.addLineListener(rebaseConflictDetector);
  GitUntrackedFilesOverwrittenByOperationDetector untrackedFilesDetector=new GitUntrackedFilesOverwrittenByOperationDetector(root);
  GitLocalChangesWouldBeOverwrittenDetector localChangesDetector=new GitLocalChangesWouldBeOverwrittenDetector(root,CHECKOUT);
  rebaseHandler.addLineListener(untrackedFilesDetector);
  rebaseHandler.addLineListener(localChangesDetector);
  rebaseHandler.addLineListener(GitStandardProgressAnalyzer.createListener(myProgressIndicator));
  AccessToken token=DvcsUtil.workingTreeChangeStarted(myProject);
  try {
    String oldText=myProgressIndicator.getText();
    myProgressIndicator.setText("Rebasing...");
    GitCommandResult result=myGit.runCommand(rebaseHandler);
    myProgressIndicator.setText(oldText);
    return result.success() ? GitUpdateResult.SUCCESS : handleRebaseFailure(rebaseHandler,root,rebaseConflictDetector,untrackedFilesDetector,localChangesDetector);
  }
 catch (  ProcessCanceledException pce) {
    if (onCancel != null) {
      onCancel.run();
    }
    return GitUpdateResult.CANCEL;
  }
 finally {
    DvcsUtil.workingTreeChangeFinished(myProject,token);
  }
}
