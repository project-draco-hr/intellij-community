{
  try {
    if (NotNullVerifyingInstrumenter.processClassFile((FailSafeClassReader)reader,writer)) {
      return new BinaryContent(writer.toByteArray());
    }
  }
 catch (  Throwable e) {
    LOG.error(e);
    final Collection<File> sourceFiles=compiledClass.getSourceFiles();
    String msg="Cannot instrument " + ContainerUtil.map(sourceFiles,new Function<File,String>(){
      @Override public String fun(      File file){
        return file.getName();
      }
    }
) + ": "+ e.getMessage();
    context.processMessage(new CompilerMessage(getPresentableName(),msg,compiledClass.getSourceFilesPaths(),BuildMessage.Kind.ERROR));
  }
  return null;
}
