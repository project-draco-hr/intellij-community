{
  final AtomicBoolean insideReadAction=new AtomicBoolean();
  final ProgressIndicatorBase indicator=new ProgressIndicatorBase();
  ProgressIndicatorUtils.scheduleWithWriteActionPriority(indicator,new ReadTask(){
    @Override public void computeInReadAction(    @NotNull ProgressIndicator indicator){
      insideReadAction.set(true);
      while (true) {
        ProgressManager.checkCanceled();
      }
    }
    @Override public void onCanceled(    @NotNull ProgressIndicator indicator){
    }
  }
);
  UIUtil.dispatchAllInvocationEvents();
  while (!insideReadAction.get()) {
    ;
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      assertTrue(indicator.isCanceled());
    }
  }
);
  assertTrue(indicator.isCanceled());
}
