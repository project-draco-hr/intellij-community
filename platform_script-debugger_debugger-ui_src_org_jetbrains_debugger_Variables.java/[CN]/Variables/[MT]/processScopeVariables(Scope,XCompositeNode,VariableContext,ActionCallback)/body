{
  final boolean isLast=compoundActionCallback == null;
  AsyncResult<?> result=ObsolescentAsyncResults.consume(scope.getVariables(),node,new PairConsumer<List<Variable>,XCompositeNode>(){
    @Override public void consume(    List<Variable> variables,    XCompositeNode node){
      final MemberFilter memberFilter=context.createMemberFilter();
      Collection<Variable> additionalVariables=memberFilter.getAdditionalVariables();
      List<Variable> properties=new ArrayList<Variable>(variables.size() + additionalVariables.size());
      List<Variable> functions=new SmartList<Variable>();
      for (      Variable variable : variables) {
        if (memberFilter.isMemberVisible(variable,false)) {
          Value value=variable.getValue();
          if (value != null && value.getType() == ValueType.FUNCTION && value.getValueString() != null && !UNNAMED_FUNCTION_PATTERN.matcher(value.getValueString()).lookingAt()) {
            functions.add(variable);
          }
 else {
            properties.add(variable);
          }
        }
      }
      ContainerUtil.sort(properties,memberFilter.hasNameMappings() ? new Comparator<Variable>(){
        @Override public int compare(        @NotNull Variable o1,        @NotNull Variable o2){
          return naturalCompare(memberFilter.getName(o1),memberFilter.getName(o2));
        }
      }
 : NATURAL_NAME_COMPARATOR);
      sort(functions);
      addAditionalVariables(variables,additionalVariables,properties,memberFilter);
      if (!properties.isEmpty()) {
        node.addChildren(createVariablesList(properties,context,memberFilter),functions.isEmpty() && isLast);
      }
      if (!functions.isEmpty()) {
        node.addChildren(XValueChildrenList.bottomGroup(new VariablesGroup("Functions",functions,context)),isLast);
      }
 else       if (isLast && properties.isEmpty()) {
        node.addChildren(XValueChildrenList.EMPTY,true);
      }
      if (!isLast) {
        compoundActionCallback.setDone();
      }
    }
  }
);
  if (!isLast) {
    result.notifyWhenRejected(compoundActionCallback);
  }
}
