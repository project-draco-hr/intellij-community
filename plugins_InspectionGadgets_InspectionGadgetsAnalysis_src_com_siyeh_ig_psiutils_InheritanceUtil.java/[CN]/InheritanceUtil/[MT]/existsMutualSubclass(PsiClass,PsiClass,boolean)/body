{
  if (class1 instanceof PsiTypeParameter) {
    final PsiClass[] superClasses=class1.getSupers();
    for (    PsiClass superClass : superClasses) {
      if (!existsMutualSubclass(superClass,class2,avoidExpensiveProcessing)) {
        return false;
      }
    }
    return true;
  }
  if (class2 instanceof PsiTypeParameter) {
    return existsMutualSubclass(class2,class1,avoidExpensiveProcessing);
  }
  final String className=class1.getQualifiedName();
  if (CommonClassNames.JAVA_LANG_OBJECT.equals(className)) {
    return true;
  }
  final String class2Name=class2.getQualifiedName();
  if (CommonClassNames.JAVA_LANG_OBJECT.equals(class2Name)) {
    return true;
  }
  if (class1.isInheritor(class2,true) || class2.isInheritor(class1,true)) {
    return true;
  }
  final SearchScope scope=GlobalSearchScope.allScope(class1.getProject());
  final Query<PsiClass> search=ClassInheritorsSearch.search(class1,scope,true,true);
  final boolean[] result=new boolean[1];
  search.forEach(new Processor<PsiClass>(){
    int count=0;
    @Override public boolean process(    PsiClass inheritor){
      count++;
      if (inheritor.equals(class2) || inheritor.isInheritor(class2,true) || (avoidExpensiveProcessing && count > 20)) {
        result[0]=true;
        return false;
      }
      return true;
    }
  }
);
  return result[0];
}
