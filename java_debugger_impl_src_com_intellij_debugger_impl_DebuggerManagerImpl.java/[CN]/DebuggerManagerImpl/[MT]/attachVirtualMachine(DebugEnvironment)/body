{
  ApplicationManager.getApplication().assertIsDispatchThread();
  final DebugProcessEvents debugProcess=new DebugProcessEvents(myProject);
  debugProcess.addDebugProcessListener(new DebugProcessAdapter(){
    @Override public void processAttached(    final DebugProcess process){
      process.removeDebugProcessListener(this);
      for (      Function<DebugProcess,PositionManager> factory : myCustomPositionManagerFactories) {
        final PositionManager positionManager=factory.fun(process);
        if (positionManager != null) {
          process.appendPositionManager(positionManager);
        }
      }
      for (      PositionManagerFactory factory : Extensions.getExtensions(PositionManagerFactory.EP_NAME,myProject)) {
        final PositionManager manager=factory.createPositionManager(debugProcess);
        if (manager != null) {
          process.appendPositionManager(manager);
        }
      }
    }
    @Override public void processDetached(    final DebugProcess process,    final boolean closedByUser){
      debugProcess.removeDebugProcessListener(this);
    }
    @Override public void attachException(    final RunProfileState state,    final ExecutionException exception,    final RemoteConnection remoteConnection){
      debugProcess.removeDebugProcessListener(this);
    }
  }
);
  DebuggerSession session=new DebuggerSession(environment.getSessionName(),debugProcess);
  ExecutionResult executionResult;
  try {
    executionResult=session.attach(environment);
  }
 catch (  ExecutionException e) {
    session.dispose();
    throw e;
  }
  if (executionResult == null) {
    return null;
  }
  session.getContextManager().addListener(mySessionListener);
  getContextManager().setState(DebuggerContextUtil.createDebuggerContext(session,session.getContextManager().getContext().getSuspendContext()),session.getState(),DebuggerSession.Event.CONTEXT,null);
  final ProcessHandler processHandler=executionResult.getProcessHandler();
synchronized (mySessions) {
    mySessions.put(processHandler,session);
  }
  if (!(processHandler instanceof RemoteDebugProcessHandler)) {
    processHandler.addProcessListener(new ProcessAdapter(){
      @Override public void processWillTerminate(      ProcessEvent event,      boolean willBeDestroyed){
        final DebugProcessImpl debugProcess=getDebugProcess(event.getProcessHandler());
        if (debugProcess != null) {
          debugProcess.stop(willBeDestroyed && !(event.getProcessHandler() instanceof KillableColoredProcessHandler));
          if (!DebuggerManagerThreadImpl.isManagerThread()) {
            if (SwingUtilities.isEventDispatchThread()) {
              ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
                @Override public void run(){
                  ProgressManager.getInstance().getProgressIndicator().setIndeterminate(true);
                  debugProcess.waitFor(10000);
                }
              }
,"Waiting For Debugger Response",false,debugProcess.getProject());
            }
 else {
              debugProcess.waitFor(10000);
            }
          }
        }
      }
    }
);
  }
  myDispatcher.getMulticaster().sessionCreated(session);
  return session;
}
