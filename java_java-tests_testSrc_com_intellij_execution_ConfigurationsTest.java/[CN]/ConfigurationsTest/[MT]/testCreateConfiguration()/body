{
  Module module1=getModule1();
  PsiClass psiClass=findTestA(module1);
  JUnitConfiguration configuration=createConfiguration(psiClass);
  assertEquals(Collections.singleton(module1),ContainerUtilRt.newHashSet(configuration.getModules()));
  checkClassName(psiClass.getQualifiedName(),configuration);
  assertEquals(psiClass.getName(),configuration.getName());
  checkTestObject(JUnitConfiguration.TEST_CLASS,configuration);
  Module module2=getModule2();
  Assertion.compareUnordered(new Module[]{module1,module2},configuration.getValidModules());
  PsiClass innerTest=findClass(module1,INNER_TEST_NAME);
  configuration=createJUnitConfiguration(innerTest,TestClassConfigurationProducer.class,new MapDataContext());
  checkClassName(RT_INNER_TEST_NAME,configuration);
  checkCanRun(configuration);
  PsiMethod[] testMethod=innerTest.findMethodsByName("test",false);
  assertEquals(1,testMethod.length);
  configuration=createConfiguration(testMethod[0]);
  checkClassName(RT_INNER_TEST_NAME,configuration);
  checkMethodName("test",configuration);
  checkTestObject(JUnitConfiguration.TEST_METHOD,configuration);
  checkCanRun(configuration);
  PsiMethod mainMethod=innerTest.findMethodsByName("main",false)[0];
  ApplicationConfiguration appConfiguration=createConfiguration(mainMethod);
  assertEquals(RT_INNER_TEST_NAME,appConfiguration.MAIN_CLASS_NAME);
  checkCanRun(configuration);
}
