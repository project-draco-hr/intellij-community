{
  final String text="Hello!";
  final AsyncResult<String> result=new AsyncResult<String>();
  Bootstrap bootstrap=NettyUtil.oioClientBootstrap().handler(new ChannelInitializer(){
    @Override protected void initChannel(    Channel channel) throws Exception {
      channel.pipeline().addLast(new Decoder(){
        @Override protected void messageReceived(        ChannelHandlerContext context,        ByteBuf message) throws Exception {
          int requiredLength=4 + text.length();
          ByteBuf buffer=getBufferIfSufficient(message,requiredLength,context);
          if (buffer == null) {
            message.release();
          }
 else {
            String response=buffer.toString(buffer.readerIndex(),requiredLength,CharsetUtil.UTF_8);
            buffer.skipBytes(requiredLength);
            buffer.release();
            result.setDone(response);
          }
        }
      }
,ChannelExceptionHandler.getInstance());
    }
  }
);
  int port=BuiltInServerManager.getInstance().waitForStart().getPort();
  Channel channel=bootstrap.connect(NetUtils.getLoopbackAddress(),port).syncUninterruptibly().channel();
  ByteBuf buffer=channel.alloc().buffer();
  buffer.writeByte('C');
  buffer.writeByte('H');
  buffer.writeLong(MyBinaryRequestHandler.ID.getMostSignificantBits());
  buffer.writeLong(MyBinaryRequestHandler.ID.getLeastSignificantBits());
  ByteBuf message=Unpooled.copiedBuffer(text,CharsetUtil.UTF_8);
  buffer.writeShort(message.readableBytes());
  channel.write(buffer);
  channel.writeAndFlush(message).syncUninterruptibly();
  try {
    result.doWhenRejected(new Consumer<String>(){
      @Override public void consume(      String error){
        fail(error);
      }
    }
);
    assertEquals("got-" + text,result.getResultSync(5000));
  }
  finally {
    channel.close();
  }
}
