{
  if (isNonStaticInnerClass(element) && !JavaMoveClassesOrPackagesHandler.isReferenceInAnonymousClass(reference)) {
    PsiClass aClass=(PsiClass)element;
    FeatureUsageTracker.getInstance().triggerFeatureUsed("refactoring.move.moveInner");
    final PsiClass containingClass=aClass.getContainingClass();
    if (containingClass instanceof JspClass) {
      CommonRefactoringUtil.showErrorHint(project,editor,RefactoringBundle.message("move.nonstatic.class.from.jsp.not.supported"),RefactoringBundle.message("move.title"),null);
      return true;
    }
    MoveInnerImpl.doMove(project,new PsiElement[]{aClass},null,LangDataKeys.TARGET_PSI_ELEMENT.getData(dataContext));
    return true;
  }
  return false;
}
