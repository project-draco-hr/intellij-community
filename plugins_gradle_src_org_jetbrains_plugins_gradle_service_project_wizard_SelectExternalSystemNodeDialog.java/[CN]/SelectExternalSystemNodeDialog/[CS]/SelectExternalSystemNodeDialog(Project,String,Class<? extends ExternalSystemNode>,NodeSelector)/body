{
  super(project,false);
  mySelector=selector;
  setTitle(title);
  myTree=new SimpleTree();
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  final ExternalProjectsView projectsView=ExternalProjectsManager.getInstance(project).getExternalProjectsView(GradleConstants.SYSTEM_ID);
  if (projectsView != null) {
    final ExternalProjectsStructure treeStructure=new ExternalProjectsStructure(project,myTree){
      @Override protected Class<? extends ExternalSystemNode>[] getVisibleNodesClasses(){
        return new Class[]{nodeClass};
      }
    }
;
    treeStructure.init(new ExternalProjectsViewAdapter(projectsView){
      @Nullable @Override public ExternalProjectsStructure getStructure(){
        return treeStructure;
      }
      @Override public void updateUpTo(      ExternalSystemNode node){
        treeStructure.updateUpTo(node);
      }
    }
);
    final Collection<ExternalProjectInfo> projectsData=ProjectDataManager.getInstance().getExternalProjectsData(project,GradleConstants.SYSTEM_ID);
    final List<DataNode<ProjectData>> dataNodes=ContainerUtil.mapNotNull(projectsData,new Function<ExternalProjectInfo,DataNode<ProjectData>>(){
      @Override public DataNode<ProjectData> fun(      ExternalProjectInfo info){
        return info.getExternalProjectStructure();
      }
    }
);
    treeStructure.updateProjects(dataNodes);
    final SimpleNode[] selection=new SimpleNode[]{null};
    treeStructure.accept(new SimpleNodeVisitor(){
      public boolean accept(      SimpleNode each){
        if (!mySelector.shouldSelect(each))         return false;
        selection[0]=each;
        return true;
      }
    }
);
    if (selection[0] != null) {
      treeStructure.select(selection[0]);
    }
  }
  init();
}
