{
  final PsiElement[] elements=processor.getElements();
  final PsiElement commonParent=PsiTreeUtil.findCommonParent(elements);
  final RangeMarker marker=editor.getDocument().createRangeMarker(elements[0].getTextOffset(),elements[elements.length - 1].getTextRange().getEndOffset());
  final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(selectedType);
  final PsiClass wrapperClass=resolveResult.getElement();
  LOG.assertTrue(wrapperClass != null);
  final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
  final Ref<String> methodCallText=new Ref<String>();
  final Ref<String> methodText=new Ref<String>();
  WriteCommandAction.runWriteCommandAction(project,new Runnable(){
    @Override public void run(){
      final PsiMethod method=LambdaUtil.getFunctionalInterfaceMethod(wrapperClass);
      LOG.assertTrue(method != null);
      final String interfaceMethodName=method.getName();
      processor.setMethodName(interfaceMethodName);
      processor.doExtract();
      final PsiMethod extractedMethod=processor.getExtractedMethod();
      final PsiParameter[] parameters=extractedMethod.getParameterList().getParameters();
      final PsiParameter[] interfaceParameters=method.getParameterList().getParameters();
      final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
      for (int i=0; i < interfaceParameters.length; i++) {
        final PsiTypeElement typeAfterInterface=factory.createTypeElement(substitutor.substitute(interfaceParameters[i].getType()));
        final PsiTypeElement typeElement=parameters[i].getTypeElement();
        if (typeElement != null) {
          typeElement.replace(typeAfterInterface);
        }
      }
      methodText.set(extractedMethod.getText());
      final PsiMethodCallExpression methodCall=processor.getMethodCall();
      methodCallText.set(methodCall.getText());
      methodCall.delete();
      extractedMethod.delete();
    }
  }
);
  PsiExpression expression=factory.createExpressionFromText("new " + selectedType.getCanonicalText() + "() {"+ methodText.get()+ "}",methodToIntroduceParameter);
  expression=(PsiExpression)JavaCodeStyleManager.getInstance(project).shortenClassReferences(expression);
  expression.putUserData(ElementToWorkOn.PARENT,commonParent);
  expression.putUserData(ElementToWorkOn.SUFFIX,"." + methodCallText.get() + ";");
  expression.putUserData(ElementToWorkOn.TEXT_RANGE,marker);
  new Introducer(project,expression,null,editor).introduceParameter(methodToIntroduceParameter,methodToSearchFor);
}
