{
  DocumentListener listener=new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      dialog.clearErrors();
    }
  }
;
  myLoginTextField.getDocument().addDocumentListener(listener);
  myPasswordField.getDocument().addDocumentListener(listener);
  mySignupTextField.setText("<html>Do not have an account at github.com? <a href=\"https://github.com\">Sign up</a>.</html>");
  mySignupTextField.setMargin(new Insets(5,0,0,0));
  mySignupTextField.addHyperlinkListener(new HyperlinkAdapter(){
    @Override protected void hyperlinkActivated(    final HyperlinkEvent e){
      BrowserUtil.browse(e.getURL());
    }
  }
);
  mySignupTextField.setBackground(UIUtil.TRANSPARENT_COLOR);
  mySignupTextField.setCursor(new Cursor(Cursor.HAND_CURSOR));
  myAuthTypeComboBox.addItem(AUTH_PASSWORD);
  myAuthTypeComboBox.addItem(AUTH_TOKEN);
  myAuthTypeComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        String item=e.getItem().toString();
        if (AUTH_PASSWORD.equals(item)) {
          myPasswordLabel.setText("Password:");
          mySavePasswordCheckBox.setText("Save password");
          myLoginLabel.setVisible(true);
          myLoginTextField.setVisible(true);
        }
 else         if (AUTH_TOKEN.equals(item)) {
          myPasswordLabel.setText("Token:");
          mySavePasswordCheckBox.setText("Save token");
          myLoginLabel.setVisible(false);
          myLoginTextField.setVisible(false);
        }
        if (dialog.isShowing()) {
          dialog.pack();
        }
      }
    }
  }
);
  List<Component> order=new ArrayList<Component>();
  order.add(myHostTextField);
  order.add(myAuthTypeComboBox);
  order.add(myLoginTextField);
  order.add(myPasswordField);
  order.add(mySavePasswordCheckBox);
  myPane.setFocusTraversalPolicyProvider(true);
  myPane.setFocusTraversalPolicy(new MyFocusTraversalPolicy(order));
}
