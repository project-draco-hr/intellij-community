{
  final XDebuggerEditorsProvider editorsProvider=session.getDebugProcess().getEditorsProvider();
  final XStackFrame stackFrame=session.getCurrentStackFrame();
  final XDebuggerEvaluator evaluator=session.getDebugProcess().getEvaluator();
  if (evaluator == null) {
    return;
  }
  Editor editor=CommonDataKeys.EDITOR.getData(dataContext);
  EvaluationMode mode=EvaluationMode.EXPRESSION;
  String selectedText=editor != null ? editor.getSelectionModel().getSelectedText() : null;
  if (selectedText != null) {
    selectedText=evaluator.formatTextForEvaluation(selectedText);
    mode=evaluator.getEvaluationMode(selectedText,editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd(),CommonDataKeys.PSI_FILE.getData(dataContext));
  }
  String text=selectedText;
  if (text == null && editor != null) {
    text=getExpressionText(evaluator,CommonDataKeys.PROJECT.getData(dataContext),editor);
  }
  if (text == null) {
    XValue value=XDebuggerTreeActionBase.getSelectedValue(dataContext);
    if (value != null) {
      final EvaluationMode evalMode=mode;
      value.calculateEvaluationExpression().done(new Consumer<String>(){
        @Override public void consume(        final String text){
          AppUIUtil.invokeOnEdt(new Runnable(){
            @Override public void run(){
              showDialog(session,dataContext,editorsProvider,stackFrame,evaluator,evalMode,text);
            }
          }
);
        }
      }
);
      return;
    }
  }
  showDialog(session,dataContext,editorsProvider,stackFrame,evaluator,mode,text);
}
