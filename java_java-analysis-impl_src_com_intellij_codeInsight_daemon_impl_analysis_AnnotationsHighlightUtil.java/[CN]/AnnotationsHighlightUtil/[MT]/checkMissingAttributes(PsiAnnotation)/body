{
  PsiJavaCodeReferenceElement nameRef=annotation.getNameReferenceElement();
  if (nameRef == null)   return null;
  PsiClass aClass=(PsiClass)nameRef.resolve();
  if (aClass != null && aClass.isAnnotationType()) {
    Set<String> names=new HashSet<>();
    PsiNameValuePair[] attributes=annotation.getParameterList().getAttributes();
    for (    PsiNameValuePair attribute : attributes) {
      final String name=attribute.getName();
      if (name != null) {
        names.add(name);
      }
 else {
        names.add(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME);
      }
    }
    PsiMethod[] annotationMethods=aClass.getMethods();
    List<String> missed=new ArrayList<>();
    for (    PsiMethod method : annotationMethods) {
      if (PsiUtil.isAnnotationMethod(method)) {
        PsiAnnotationMethod annotationMethod=(PsiAnnotationMethod)method;
        if (annotationMethod.getDefaultValue() == null) {
          if (!names.contains(annotationMethod.getName())) {
            missed.add(annotationMethod.getName());
          }
        }
      }
    }
    if (!missed.isEmpty()) {
      StringBuffer buff=new StringBuffer("'" + missed.get(0) + "'");
      for (int i=1; i < missed.size(); i++) {
        buff.append(", ");
        buff.append("'").append(missed.get(i)).append("'");
      }
      String description=JavaErrorMessages.message("annotation.missing.attribute",buff);
      HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(nameRef).descriptionAndTooltip(description).create();
      IntentionAction fix=QuickFixFactory.getInstance().createAddMissingRequiredAnnotationParametersFix(annotation,annotationMethods,missed);
      QuickFixAction.registerQuickFixAction(info,fix);
      return info;
    }
  }
  return null;
}
