{
  PsiAnnotationOwner owner=annotationToCheck.getOwner();
  if (owner == null)   return null;
  PsiJavaCodeReferenceElement element=annotationToCheck.getNameReferenceElement();
  if (element == null)   return null;
  PsiElement resolved=element.resolve();
  if (!(resolved instanceof PsiClass))   return null;
  PsiClass annotationType=(PsiClass)resolved;
  PsiClass contained=contained(annotationType);
  String containedElementFQN=contained == null ? null : contained.getQualifiedName();
  if (containedElementFQN != null) {
    String containerName=annotationType.getQualifiedName();
    if (isAnnotationRepeatedTwice(owner,containedElementFQN)) {
      String description=JavaErrorMessages.message("annotation.container.wrong.place",containerName);
      return annotationError(annotationToCheck,description);
    }
  }
 else   if (isAnnotationRepeatedTwice(owner,annotationType.getQualifiedName())) {
    if (!languageLevel.isAtLeast(LanguageLevel.JDK_1_8)) {
      String description=JavaErrorMessages.message("annotation.duplicate.annotation");
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(element).descriptionAndTooltip(description).create();
    }
    PsiAnnotation metaAnno=PsiImplUtil.findAnnotation(annotationType.getModifierList(),CommonClassNames.JAVA_LANG_ANNOTATION_REPEATABLE);
    if (metaAnno == null) {
      String explanation=JavaErrorMessages.message("annotation.non.repeatable",annotationType.getQualifiedName());
      String description=JavaErrorMessages.message("annotation.duplicate.explained",explanation);
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(element).descriptionAndTooltip(description).create();
    }
    String explanation=doCheckRepeatableAnnotation(metaAnno);
    if (explanation != null) {
      String description=JavaErrorMessages.message("annotation.duplicate.explained",explanation);
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(element).descriptionAndTooltip(description).create();
    }
    PsiClass container=getRepeatableContainer(metaAnno);
    if (container != null) {
      PsiAnnotation.TargetType[] targets=AnnotationTargetUtil.getTargetsForLocation(owner);
      PsiAnnotation.TargetType applicable=AnnotationTargetUtil.findAnnotationTarget(container,targets);
      if (applicable == null) {
        String target=JavaErrorMessages.message("annotation.target." + targets[0]);
        String message=JavaErrorMessages.message("annotation.container.not.applicable",container.getName(),target);
        return annotationError(annotationToCheck,message);
      }
    }
  }
  return null;
}
