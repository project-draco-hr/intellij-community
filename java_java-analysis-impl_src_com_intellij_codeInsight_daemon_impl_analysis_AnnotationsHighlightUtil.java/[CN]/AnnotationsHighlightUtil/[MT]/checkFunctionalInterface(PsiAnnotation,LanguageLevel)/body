{
  if (languageLevel.isAtLeast(LanguageLevel.JDK_1_8) && Comparing.strEqual(annotation.getQualifiedName(),CommonClassNames.JAVA_LANG_FUNCTIONAL_INTERFACE)) {
    final PsiAnnotationOwner owner=annotation.getOwner();
    if (owner instanceof PsiModifierList) {
      final PsiElement parent=((PsiModifierList)owner).getParent();
      if (parent instanceof PsiClass) {
        final String errorMessage=LambdaHighlightingUtil.checkInterfaceFunctional((PsiClass)parent,((PsiClass)parent).getName() + " is not a functional interface");
        if (errorMessage != null) {
          return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(annotation).descriptionAndTooltip(errorMessage).create();
        }
      }
    }
  }
  return null;
}
