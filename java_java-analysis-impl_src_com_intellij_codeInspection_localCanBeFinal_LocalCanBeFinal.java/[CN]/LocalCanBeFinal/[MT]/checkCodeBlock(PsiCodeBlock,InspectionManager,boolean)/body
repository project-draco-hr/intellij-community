{
  if (body == null)   return null;
  final ControlFlow flow;
  try {
    ControlFlowPolicy policy=new ControlFlowPolicy(){
      @Override public PsiVariable getUsedVariable(      PsiReferenceExpression refExpr){
        if (refExpr.isQualified())         return null;
        PsiElement refElement=refExpr.resolve();
        if (refElement instanceof PsiLocalVariable || refElement instanceof PsiParameter) {
          if (!isVariableDeclaredInMethod((PsiVariable)refElement))           return null;
          return (PsiVariable)refElement;
        }
        return null;
      }
      @Override public boolean isParameterAccepted(      PsiParameter psiParameter){
        return isVariableDeclaredInMethod(psiParameter);
      }
      @Override public boolean isLocalVariableAccepted(      PsiLocalVariable psiVariable){
        return isVariableDeclaredInMethod(psiVariable);
      }
      private boolean isVariableDeclaredInMethod(      PsiVariable psiVariable){
        return PsiTreeUtil.getParentOfType(psiVariable,PsiClass.class) == PsiTreeUtil.getParentOfType(body,PsiClass.class);
      }
    }
;
    flow=ControlFlowFactory.getInstance(body.getProject()).getControlFlow(body,policy,false);
  }
 catch (  AnalysisCanceledException e) {
    return null;
  }
  int start=flow.getStartOffset(body);
  int end=flow.getEndOffset(body);
  final Collection<PsiVariable> writtenVariables=ControlFlowUtil.getWrittenVariables(flow,start,end,false);
  final List<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
  final HashSet<PsiVariable> result=new HashSet<PsiVariable>();
  body.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitCodeBlock(    PsiCodeBlock block){
      if (block.getParent() instanceof PsiLambdaExpression && block != body) {
        final List<ProblemDescriptor> descriptors=checkCodeBlock(block,manager,onTheFly);
        if (descriptors != null) {
          problems.addAll(descriptors);
        }
        return;
      }
      super.visitCodeBlock(block);
      PsiElement anchor=block;
      if (block.getParent() instanceof PsiSwitchStatement) {
        anchor=block.getParent();
      }
      int from=flow.getStartOffset(anchor);
      int end=flow.getEndOffset(anchor);
      List<PsiVariable> ssa=ControlFlowUtil.getSSAVariables(flow,from,end,true);
      HashSet<PsiElement> declared=getDeclaredVariables(block);
      for (      PsiVariable psiVariable : ssa) {
        if (declared.contains(psiVariable)) {
          result.add(psiVariable);
        }
      }
    }
    @Override public void visitCatchSection(    PsiCatchSection section){
      super.visitCatchSection(section);
      final PsiParameter parameter=section.getParameter();
      if (PsiTreeUtil.getParentOfType(parameter,PsiClass.class) != PsiTreeUtil.getParentOfType(body,PsiClass.class)) {
        return;
      }
      final PsiCodeBlock catchBlock=section.getCatchBlock();
      if (catchBlock == null)       return;
      final int from=flow.getStartOffset(catchBlock);
      final int end=flow.getEndOffset(catchBlock);
      if (!ControlFlowUtil.getWrittenVariables(flow,from,end,false).contains(parameter)) {
        writtenVariables.remove(parameter);
        result.add(parameter);
      }
    }
    @Override public void visitForeachStatement(    PsiForeachStatement statement){
      super.visitForeachStatement(statement);
      final PsiParameter param=statement.getIterationParameter();
      if (PsiTreeUtil.getParentOfType(param,PsiClass.class) != PsiTreeUtil.getParentOfType(body,PsiClass.class)) {
        return;
      }
      final PsiStatement body=statement.getBody();
      if (body == null)       return;
      int from=flow.getStartOffset(body);
      int end=flow.getEndOffset(body);
      if (!ControlFlowUtil.getWrittenVariables(flow,from,end,false).contains(param)) {
        writtenVariables.remove(param);
        result.add(param);
      }
    }
    private HashSet<PsiElement> getDeclaredVariables(    PsiCodeBlock block){
      final HashSet<PsiElement> result=new HashSet<PsiElement>();
      PsiElement[] children=block.getChildren();
      for (      PsiElement child : children) {
        child.accept(new JavaElementVisitor(){
          @Override public void visitReferenceExpression(          PsiReferenceExpression expression){
            visitReferenceElement(expression);
          }
          @Override public void visitDeclarationStatement(          PsiDeclarationStatement statement){
            PsiElement[] declaredElements=statement.getDeclaredElements();
            for (            PsiElement declaredElement : declaredElements) {
              if (declaredElement instanceof PsiVariable)               result.add(declaredElement);
            }
          }
          @Override public void visitForStatement(          PsiForStatement statement){
            super.visitForStatement(statement);
            final PsiStatement initialization=statement.getInitialization();
            if (!(initialization instanceof PsiDeclarationStatement)) {
              return;
            }
            final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)initialization;
            final PsiElement[] declaredElements=declarationStatement.getDeclaredElements();
            for (            final PsiElement declaredElement : declaredElements) {
              if (declaredElement instanceof PsiVariable) {
                result.add(declaredElement);
              }
            }
          }
        }
);
      }
      return result;
    }
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
    }
  }
);
  if (body.getParent() instanceof PsiMethod && isReportParameters()) {
    final PsiMethod method=(PsiMethod)body.getParent();
    Collections.addAll(result,method.getParameterList().getParameters());
  }
  for (Iterator<PsiVariable> iterator=result.iterator(); iterator.hasNext(); ) {
    final PsiVariable variable=iterator.next();
    if (shouldBeIgnored(variable)) {
      iterator.remove();
    }
  }
  for (  PsiVariable writtenVariable : writtenVariables) {
    if (writtenVariable instanceof PsiParameter) {
      result.remove(writtenVariable);
    }
  }
  if (result.isEmpty())   return null;
  for (  PsiVariable variable : result) {
    final PsiIdentifier nameIdentifier=variable.getNameIdentifier();
    PsiElement problemElement=nameIdentifier != null ? nameIdentifier : variable;
    if (variable instanceof PsiParameter && !(((PsiParameter)variable).getDeclarationScope() instanceof PsiForeachStatement)) {
      problems.add(manager.createProblemDescriptor(problemElement,InspectionsBundle.message("inspection.can.be.local.parameter.problem.descriptor"),myQuickFix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,onTheFly));
    }
 else {
      problems.add(manager.createProblemDescriptor(problemElement,InspectionsBundle.message("inspection.can.be.local.variable.problem.descriptor"),myQuickFix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,onTheFly));
    }
  }
  return problems;
}
