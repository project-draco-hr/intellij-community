{
  final PyType metaClass=pyClass.getMetaClassType(myTypeEvalContext);
  if (metaClass instanceof PyClassLikeType && PyNames.ABC_META_CLASS.equals(metaClass.getName())) {
    return true;
  }
  if (metaClass == null) {
    final PyExpression metaClassExpr=as(pyClass.getMetaClassExpression(),PyReferenceExpression.class);
    if (metaClassExpr != null && PyNames.ABC_META_CLASS.equals(metaClassExpr.getName())) {
      return true;
    }
  }
  for (  PyFunction method : pyClass.getMethods()) {
    if (PyUtil.isDecoratedAsAbstract(method)) {
      return true;
    }
  }
  return false;
}
