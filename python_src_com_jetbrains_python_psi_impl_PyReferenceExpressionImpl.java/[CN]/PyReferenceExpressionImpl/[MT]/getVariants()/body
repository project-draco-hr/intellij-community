{
  final PyExpression qualifier=getQualifier();
  if (qualifier != null) {
    PyType qualifierType=qualifier.getType();
    if (qualifierType != null) {
      return qualifierType.getCompletionVariants(this);
    }
    return new Object[0];
  }
  if (PsiTreeUtil.getParentOfType(this,PyImportElement.class,PyFromImportStatement.class) != null) {
    return ResolveImportUtil.suggestImportVariants(this);
  }
  final PyResolveUtil.VariantsProcessor processor=new PyResolveUtil.VariantsProcessor();
  PyResolveUtil.treeCrawlUp(processor,this);
  PyResolveUtil.CollectProcessor<PyStarImportElement> collect_proc;
  collect_proc=new PyResolveUtil.CollectProcessor<PyStarImportElement>(PyStarImportElement.class);
  PyResolveUtil.treeCrawlUp(collect_proc,this);
  List<PyStarImportElement> stars=collect_proc.getResult();
  for (  PyStarImportElement star_elt : stars) {
    final PyFromImportStatement from_import_stmt=(PyFromImportStatement)star_elt.getParent();
    if (from_import_stmt != null) {
      final PyReferenceExpression import_src=from_import_stmt.getImportSource();
      if (import_src != null) {
        processor.setNotice(" | " + import_src.getName());
        PyResolveUtil.treeCrawlUp(processor,import_src.resolve());
      }
    }
  }
  processor.setNotice(" | __builtin__");
  PyResolveUtil.treeCrawlUp(processor,PyBuiltinCache.getInstance(getProject()).getBuiltinsFile(),true);
  return processor.getResult();
}
