{
  if (qualifierType instanceof PyClassType) {
    final PyClassType classType=(PyClassType)qualifierType;
    PyClass pyClass=classType.getPyClass();
    if (pyClass != null) {
      Property property=pyClass.findProperty(name);
      if (property != null) {
        if (classType.isDefinition()) {
          return Ref.<PyType>create(PyBuiltinCache.getInstance(pyClass).getObjectType(PyNames.PROPERTY));
        }
        final Maybe<PyFunction> accessor=property.getByDirection(AccessDirection.of(this));
        final PyFunction function=accessor.valueOrNull();
        final PyType type=(function != null) ? function.getReturnType(context,this) : null;
        return Ref.create(type);
      }
    }
  }
 else   if (qualifierType instanceof PyUnionType) {
    final PyUnionType unionType=(PyUnionType)qualifierType;
    for (    PyType type : unionType.getMembers()) {
      final Ref<PyType> result=getTypeOfProperty(type,name,context);
      if (result != null) {
        return result;
      }
    }
  }
  return null;
}
