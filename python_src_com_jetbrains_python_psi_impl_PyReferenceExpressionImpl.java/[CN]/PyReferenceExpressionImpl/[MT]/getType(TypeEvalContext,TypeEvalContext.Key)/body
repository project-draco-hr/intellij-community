{
  if (!TypeEvalStack.mayEvaluate(this)) {
    return null;
  }
  try {
    final PyExpression qualifier=getQualifier();
    if (qualifier == null) {
      String name=getReferencedName();
      if (PyNames.NONE.equals(name)) {
        return PyNoneType.INSTANCE;
      }
    }
    PyType type=getTypeFromProviders(context);
    if (type != null) {
      return type;
    }
    if (qualifier != null) {
      PyType maybe_type=PyUtil.getSpecialAttributeType(this,context);
      if (maybe_type != null)       return maybe_type;
      Ref<PyType> typeOfProperty=getTypeOfProperty(context);
      if (typeOfProperty != null) {
        return typeOfProperty.get();
      }
    }
    ResolveResult[] targets=getReference(PyResolveContext.noImplicits().withTypeEvalContext(context)).multiResolve(false);
    if (targets.length == 0) {
      return getQualifiedReferenceTypeByControlFlow(context);
    }
    for (    ResolveResult resolveResult : targets) {
      PsiElement target=resolveResult.getElement();
      if (target == this || target == null) {
        continue;
      }
      if (!target.isValid()) {
        LOG.error("Reference " + this + " resolved to invalid element "+ target+ " (text="+ target.getText()+ ")");
        continue;
      }
      type=getTypeFromTarget(target,context,this);
      if (type != null) {
        return type;
      }
    }
    return null;
  }
  finally {
    TypeEvalStack.evaluated(this);
  }
}
