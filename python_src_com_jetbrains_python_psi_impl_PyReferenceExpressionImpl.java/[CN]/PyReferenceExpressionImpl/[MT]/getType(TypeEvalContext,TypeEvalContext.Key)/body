{
  if (!TypeEvalStack.mayEvaluate(this)) {
    return null;
  }
  try {
    final boolean qualified=isQualified();
    if (!qualified) {
      String name=getReferencedName();
      if (PyNames.NONE.equals(name)) {
        return PyNoneType.INSTANCE;
      }
    }
    final PyType providedType=getTypeFromProviders(context);
    if (providedType != null) {
      return providedType;
    }
    if (qualified) {
      if (!context.maySwitchToAST(this)) {
        return null;
      }
      PyType maybe_type=PyUtil.getSpecialAttributeType(this,context);
      if (maybe_type != null)       return maybe_type;
      Ref<PyType> typeOfProperty=getTypeOfProperty(context);
      if (typeOfProperty != null) {
        return typeOfProperty.get();
      }
      final PyType typeByControlFlow=getQualifiedReferenceTypeByControlFlow(context);
      if (typeByControlFlow != null) {
        return typeByControlFlow;
      }
    }
    final PsiPolyVariantReference reference=getReference(PyResolveContext.noImplicits().withTypeEvalContext(context));
    final List<PsiElement> targets=PyUtil.multiResolveTopPriority(reference);
    final List<PyType> members=new ArrayList<PyType>();
    for (    PsiElement target : targets) {
      if (target == this || target == null) {
        continue;
      }
      if (!target.isValid()) {
        LOG.error("Reference " + this + " resolved to invalid element "+ target+ " (text="+ target.getText()+ ")");
        continue;
      }
      members.add(getTypeFromTarget(target,context,this));
    }
    final PyType type=PyUnionType.union(members);
    if (qualified && type instanceof PyNoneType) {
      return null;
    }
    return type;
  }
  finally {
    TypeEvalStack.evaluated(this);
  }
}
