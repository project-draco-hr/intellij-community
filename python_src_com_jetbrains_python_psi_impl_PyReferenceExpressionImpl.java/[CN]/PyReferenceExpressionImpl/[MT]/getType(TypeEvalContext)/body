{
  if (!TypeEvalStack.mayEvaluate(this)) {
    return null;
  }
  try {
    final PyExpression qualifier=getQualifier();
    PyType type;
    if (qualifier == null) {
      String name=getReferencedName();
      if (PyNames.NONE.equals(name)) {
        return PyNoneType.INSTANCE;
      }
    }
 else {
      PyType maybe_type=PyUtil.getSpecialAttributeType(this);
      if (maybe_type != null)       return maybe_type;
      final String name=getName();
      if (name != null) {
        PyType qualifier_type=qualifier.getType(TypeEvalContext.fast());
        if (qualifier_type instanceof PyClassType) {
          Property property=((PyClassType)qualifier_type).getPyClass().findProperty(name);
          if (property != null) {
            final Maybe<PyFunction> accessor=property.getByDirection(AccessDirection.of(this));
            if (!accessor.isDefined()) {
              return null;
            }
            PsiElement resolved=this.getReference().resolve();
            if (resolved instanceof Callable) {
              type=((Callable)resolved).getReturnType();
              if (type != null)               return type;
            }
          }
        }
      }
    }
    type=getTypeFromProviders(context);
    if (type != null) {
      return type;
    }
    ResolveResult[] targets=getReference(PyResolveContext.noImplicits()).multiResolve(false);
    if (targets.length == 0)     return null;
    for (    ResolveResult resolveResult : targets) {
      PsiElement target=resolveResult.getElement();
      if (target == this || target == null) {
        continue;
      }
      type=getTypeFromTarget(target,context,this);
      if (type != null) {
        return type;
      }
    }
    return null;
  }
  finally {
    TypeEvalStack.evaluated(this);
  }
}
