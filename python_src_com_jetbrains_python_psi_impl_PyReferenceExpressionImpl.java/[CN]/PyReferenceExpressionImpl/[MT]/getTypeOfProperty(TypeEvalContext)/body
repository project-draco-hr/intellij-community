{
  PyExpression qualifier=getQualifier();
  final String name=getName();
  if (name != null && qualifier != null) {
    PyType qualifierType=context.getType(qualifier);
    if (qualifierType instanceof PyClassType) {
      final PyClassType classType=(PyClassType)qualifierType;
      PyClass pyClass=classType.getPyClass();
      if (pyClass != null) {
        Property property=pyClass.findProperty(name);
        if (property != null) {
          if (classType.isDefinition()) {
            return Ref.<PyType>create(PyBuiltinCache.getInstance(pyClass).getObjectType(PyNames.PROPERTY));
          }
          final Maybe<PyFunction> accessor=property.getByDirection(AccessDirection.of(this));
          final PyFunction function=accessor.value();
          final PyType type=(function != null) ? function.getReturnType(context,this) : null;
          return Ref.create(type);
        }
      }
    }
  }
  return null;
}
