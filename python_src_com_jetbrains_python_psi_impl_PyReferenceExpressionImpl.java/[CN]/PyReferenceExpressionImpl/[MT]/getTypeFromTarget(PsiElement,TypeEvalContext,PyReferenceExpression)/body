{
  final PyType pyType=getReferenceTypeFromProviders(target,context,anchor);
  if (pyType != null) {
    return pyType;
  }
  if (target instanceof PyTargetExpression) {
    final String name=((PyTargetExpression)target).getName();
    if (PyNames.NONE.equals(name)) {
      return PyNoneType.INSTANCE;
    }
    if (PyNames.TRUE.equals(name) || PyNames.FALSE.equals(name)) {
      return PyBuiltinCache.getInstance(target).getBoolType();
    }
  }
  if (target instanceof PyFile) {
    return new PyModuleType((PyFile)target);
  }
  if (target instanceof PyImportedModule) {
    return new PyImportedModuleType((PyImportedModule)target);
  }
  if ((target instanceof PyTargetExpression || target instanceof PyNamedParameter) && anchor != null && context.allowDataFlow(anchor)) {
    final ScopeOwner scopeOwner=PsiTreeUtil.getParentOfType(anchor,ScopeOwner.class);
    if (scopeOwner != null && scopeOwner == PsiTreeUtil.getParentOfType(target,ScopeOwner.class)) {
      PyAugAssignmentStatement augAssignment=PsiTreeUtil.getParentOfType(anchor,PyAugAssignmentStatement.class);
      try {
        final List<ReadWriteInstruction> defs=PyDefUseUtil.getLatestDefs(scopeOwner,(PyElement)target,augAssignment != null ? augAssignment : anchor);
        if (!defs.isEmpty()) {
          PyType type=defs.get(0).getType(context);
          for (int i=1; i < defs.size(); i++) {
            type=PyUnionType.union(type,defs.get(i).getType(context));
          }
          return type;
        }
      }
 catch (      PyDefUseUtil.InstructionNotFoundException e) {
      }
    }
  }
  if (target instanceof PyClass) {
    return new PyClassType((PyClass)target,true);
  }
  if (target instanceof PyTypedElement) {
    return context.getType((PyTypedElement)target);
  }
  if (target instanceof PsiDirectory) {
    PsiFile file=((PsiDirectory)target).findFile(PyNames.INIT_DOT_PY);
    if (file != null)     return getTypeFromTarget(file,context,anchor);
  }
  return null;
}
