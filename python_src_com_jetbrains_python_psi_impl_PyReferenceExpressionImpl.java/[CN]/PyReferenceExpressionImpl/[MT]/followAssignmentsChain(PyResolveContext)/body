{
  PyReferenceExpression seeker=this;
  QualifiedResolveResult ret=null;
  List<PyExpression> qualifiers=new ArrayList<PyExpression>();
  PyExpression qualifier=seeker.getQualifier();
  if (qualifier != null) {
    qualifiers.add(qualifier);
  }
  Set<PyExpression> visited=new HashSet<PyExpression>();
  visited.add(this);
  SEARCH:   while (ret == null) {
    ResolveResult[] targets=seeker.getReference(resolveContext).multiResolve(false);
    for (    ResolveResult target : targets) {
      PsiElement elt=target.getElement();
      if (elt instanceof PyTargetExpression) {
        if (!resolveContext.getTypeEvalContext().maySwitchToAST((PyTargetExpression)elt)) {
          break;
        }
        PyExpression assigned_from=((PyTargetExpression)elt).findAssignedValue();
        if (assigned_from instanceof PyReferenceExpression) {
          if (visited.contains(assigned_from)) {
            break;
          }
          visited.add(assigned_from);
          seeker=(PyReferenceExpression)assigned_from;
          if (seeker.getQualifier() != null) {
            qualifiers.add(seeker.getQualifier());
          }
          continue SEARCH;
        }
 else         if (assigned_from != null)         ret=new QualifiedResolveResultImpl(assigned_from,qualifiers,false);
      }
 else       if (ret == null && elt instanceof PyElement && target.isValidResult()) {
        ret=new QualifiedResolveResultImpl(target.getElement(),qualifiers,target instanceof ImplicitResolveResult);
      }
    }
    break;
  }
  if (ret == null)   ret=EMPTY_RESULT;
  return ret;
}
