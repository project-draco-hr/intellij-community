{
  final String referencedName=getReferencedName();
  if (referencedName == null)   return null;
  if (PsiTreeUtil.getParentOfType(this,PyImportElement.class,PyFromImportStatement.class) != null) {
    PsiElement target=ResolveImportUtil.resolveImportReference(this);
    if (target instanceof PsiDirectory) {
      final PsiDirectory dir=(PsiDirectory)target;
      final PsiFile file=dir.findFile(ResolveImportUtil.INIT_PY);
      if (file != null) {
        target=file;
        file.putCopyableUserData(PyFile.KEY_IS_DIRECTORY,Boolean.TRUE);
      }
 else       return null;
    }
    return target;
  }
  final PyExpression qualifier=getQualifier();
  if (qualifier != null) {
    PyType qualifierType=qualifier.getType();
    if (qualifierType != null) {
      return qualifierType.resolveMember(referencedName);
    }
    return null;
  }
  PsiElement ret=PyResolveUtil.treeCrawlUp(new PyResolveUtil.ResolveProcessor(referencedName),this);
  if ((ret != null) && (ret instanceof PyClass)) {
    PyClass cls=(PyClass)ret;
    for (    PyExpression base_expr : cls.getSuperClassExpressions()) {
      if (base_expr == this)       return null;
    }
  }
  if (ret == null) {
    PyType otype=PyBuiltinCache.getInstance(this.getProject()).getObjectType();
    ret=otype.resolveMember(getName());
  }
  if (ret == null) {
    PyFile bfile=PyBuiltinCache.getInstance(this.getProject()).getBuiltinsFile();
    ret=PyResolveUtil.treeCrawlUp(new PyResolveUtil.ResolveProcessor(referencedName),bfile,true);
  }
  if (ret == null) {
    PsiElement our_cap=PyResolveUtil.getConcealingParent(this);
    PyResolveUtil.ResolveProcessor proc=new PyResolveUtil.ResolveProcessor(referencedName);
    if (our_cap != null) {
      PsiElement cap=our_cap;
      while (true) {
        cap=PyResolveUtil.getConcealingParent(cap);
        if (cap == null)         cap=this.getContainingFile();
        ret=PyResolveUtil.treeCrawlUp(proc,cap,true);
        if ((ret != null) && !PsiTreeUtil.isAncestor(our_cap,ret,true)) {
          break;
        }
        if (cap instanceof PsiFile)         break;
      }
    }
  }
  return ret;
}
