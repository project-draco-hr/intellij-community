{
  if (isOverload(function,context)) {
    final List<PyType> matchedReturnTypes=new ArrayList<>();
    final List<PyType> allReturnTypes=new ArrayList<>();
    final List<PyFunction> overloads=getOverloads(function,context);
    for (    PyFunction overload : overloads) {
      final Map<PyExpression,PyNamedParameter> mapping=mapArguments(callSite,overload,context);
      final PyExpression receiver=PyTypeChecker.getReceiver(callSite,overload);
      final Map<PyGenericType,PyType> substitutions=PyTypeChecker.unifyGenericCall(receiver,mapping,context);
      final PyType returnType=context.getReturnType(overload);
      if (!PyTypeChecker.hasGenerics(returnType,context)) {
        allReturnTypes.add(returnType);
      }
      final PyType unifiedType=substitutions != null ? PyTypeChecker.substitute(returnType,substitutions,context) : null;
      if (unifiedType != null) {
        matchedReturnTypes.add(unifiedType);
      }
    }
    return PyUnionType.union(matchedReturnTypes.isEmpty() ? allReturnTypes : matchedReturnTypes);
  }
  return null;
}
