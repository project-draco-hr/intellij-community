{
  if (LOG.isDebugEnabled()) {
    LOG.debug("load update xml (UPDATE_URL='" + updateUrl + "' )");
  }
  if (StringUtil.isEmpty(updateUrl)) {
    LOG.debug("update url is empty: updates will not be checked");
    return null;
  }
  final Ref<Exception> error=new Ref<Exception>();
  Future<UpdatesInfo> future=ApplicationManager.getApplication().executeOnPooledThread(new Callable<UpdatesInfo>(){
    @Nullable @Override public UpdatesInfo call() throws Exception {
      try {
        String url=updateUrl.startsWith("file:") ? updateUrl : updateUrl + '?' + UpdateChecker.prepareUpdateCheckArgs();
        InputStream inputStream=HttpConfigurable.getInstance().openConnection(url).getInputStream();
        try {
          return new UpdatesInfo(JDOMUtil.loadDocument(inputStream).getRootElement());
        }
 catch (        JDOMException e) {
          LOG.info(e);
        }
 finally {
          inputStream.close();
        }
      }
 catch (      Exception e) {
        LOG.debug(e);
        error.set(e);
      }
      return null;
    }
  }
);
  UpdatesInfo result=null;
  try {
    result=future.get(5,TimeUnit.SECONDS);
  }
 catch (  TimeoutException ignored) {
  }
catch (  InterruptedException e) {
    LOG.debug(e);
    error.set(e);
  }
catch (  ExecutionException e) {
    LOG.debug(e);
    error.set(e);
  }
  if (!future.isDone()) {
    future.cancel(true);
    if (error.isNull()) {
      throw new ConnectionException(IdeBundle.message("updates.timeout.error"));
    }
  }
  if (!error.isNull()) {
    throw new ConnectionException(error.get());
  }
  return result;
}
