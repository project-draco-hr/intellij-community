{
  final PyTryExceptStatement tryStatement=(PyTryExceptStatement)tryPart.getParent();
  final PyExceptPart[] exceptParts=tryStatement.getExceptParts();
  if (exceptParts.length == 0) {
    return false;
  }
  for (  final PyExceptPart exceptPart : exceptParts) {
    final Ref<Boolean> assignedOnThisFlow=new Ref<Boolean>(false);
    ControlFlowUtil.process(instructions,inst.num(),new Processor<Instruction>(){
      @Override public boolean process(      final Instruction instruction){
        if (assignedOnThisFlow.get() == Boolean.TRUE) {
          return false;
        }
        final PsiElement instElement=instruction.getElement();
        if (instElement == null || !PsiTreeUtil.isAncestor(tryStatement,instElement,false)) {
          return false;
        }
        if (((ReadWriteInstruction)inst).getAccess().isWriteAccess() && name.equals(((ReadWriteInstruction)inst).getName()) && PsiTreeUtil.isAncestor(exceptPart,instElement,false)) {
          assignedOnThisFlow.set(true);
          return false;
        }
        return true;
      }
    }
);
    if (assignedOnThisFlow.get() != Boolean.TRUE) {
      return false;
    }
  }
  return true;
}
