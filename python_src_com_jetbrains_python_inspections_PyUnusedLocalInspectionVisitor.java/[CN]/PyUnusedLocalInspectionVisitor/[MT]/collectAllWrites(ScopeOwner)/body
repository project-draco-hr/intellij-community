{
  final Instruction[] instructions=ControlFlowCache.getControlFlow(owner).getInstructions();
  for (  Instruction instruction : instructions) {
    final PsiElement element=instruction.getElement();
    if (element instanceof PyFunction && owner instanceof PyFunction) {
      if (PyKnownDecoratorUtil.hasUnknownDecorator((PyFunction)element,myTypeEvalContext)) {
        continue;
      }
      if (!myUsedElements.contains(element)) {
        myUnusedElements.add(element);
      }
    }
 else     if (instruction instanceof ReadWriteInstruction) {
      final ReadWriteInstruction readWriteInstruction=(ReadWriteInstruction)instruction;
      final ReadWriteInstruction.ACCESS access=readWriteInstruction.getAccess();
      if (!access.isWriteAccess()) {
        continue;
      }
      final String name=readWriteInstruction.getName();
      final Scope scope=ControlFlowCache.getScope(owner);
      if (name == null || "_".equals(name) || scope.isGlobal(name) || scope.isNonlocal(name)) {
        continue;
      }
      if (element == null || !PsiTreeUtil.isAncestor(owner,element,false)) {
        continue;
      }
      if (PyImportStatementNavigator.getImportStatementByElement(element) != null) {
        continue;
      }
      if (PyAugAssignmentStatementNavigator.getStatementByTarget(element) != null) {
        continue;
      }
      if (parameterInMethodWithFixedSignature(owner,element)) {
        continue;
      }
      if (!myUsedElements.contains(element)) {
        myUnusedElements.add(element);
      }
    }
  }
}
