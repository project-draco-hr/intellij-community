{
  if (owner.getContainingFile() instanceof PyExpressionCodeFragment || PydevConsoleRunner.isInPydevConsole(owner)) {
    return;
  }
  if (callsLocals(owner))   return;
  final Scope scope=owner.getScope();
  final ControlFlow flow=owner.getControlFlow();
  final Instruction[] instructions=flow.getInstructions();
  for (int i=0; i < instructions.length; i++) {
    final Instruction instruction=instructions[i];
    final PsiElement element=instruction.getElement();
    if (element instanceof PyFunction && owner instanceof PyFunction) {
      if (!myUsedElements.contains(element)) {
        myUnusedElements.add(element);
      }
    }
 else     if (instruction instanceof ReadWriteInstruction) {
      final String name=((ReadWriteInstruction)instruction).getName();
      if (name == null || "_".equals(name) || scope.isGlobal(name)) {
        continue;
      }
      if (element == null || !PsiTreeUtil.isAncestor(node,element,false)) {
        continue;
      }
      if (PyImportStatementNavigator.getImportStatementByElement(element) != null) {
        continue;
      }
      if (element instanceof PyQualifiedExpression && ((PyQualifiedExpression)element).getQualifier() != null) {
        continue;
      }
      if (element instanceof PyTargetExpression && element.getChildren().length != 0) {
        continue;
      }
      final ReadWriteInstruction.ACCESS access=((ReadWriteInstruction)instruction).getAccess();
      if (access.isWriteAccess()) {
        if (!myUsedElements.contains(element)) {
          myUnusedElements.add(element);
        }
      }
    }
  }
  for (int i=0; i < instructions.length; i++) {
    final Instruction instruction=instructions[i];
    if (instruction instanceof ReadWriteInstruction) {
      final String name=((ReadWriteInstruction)instruction).getName();
      if (name == null) {
        continue;
      }
      final PsiElement element=instruction.getElement();
      if (element == null || !PsiTreeUtil.isAncestor(node,element,false)) {
        continue;
      }
      final ReadWriteInstruction.ACCESS access=((ReadWriteInstruction)instruction).getAccess();
      if (access.isReadAccess()) {
        int number=i;
        if (access == ReadWriteInstruction.ACCESS.READWRITE) {
          final PyAugAssignmentStatement augAssignmentStatement=PyAugAssignmentStatementNavigator.getStatementByTarget(element);
          number=ControlFlowUtil.findInstructionNumberByElement(instructions,augAssignmentStatement);
        }
        if (element instanceof PyReferenceExpression) {
          for (          ResolveResult result : ((PyReferenceExpression)element).getReference().multiResolve(false)) {
            final PsiElement resolveElement=result.getElement();
            if (resolveElement != null && !PsiTreeUtil.isAncestor(owner,resolveElement,false)) {
              myUsedElements.add(element);
              myUsedElements.add(resolveElement);
              myUnusedElements.remove(element);
              myUnusedElements.remove(resolveElement);
            }
          }
        }
        ControlFlowUtil.iteratePrev(number,instructions,new Function<Instruction,ControlFlowUtil.Operation>(){
          public ControlFlowUtil.Operation fun(          final Instruction inst){
            final PsiElement element=inst.getElement();
            if (element instanceof PyFunction) {
              if (name.equals(((PyFunction)element).getName())) {
                myUsedElements.add(element);
                myUnusedElements.remove(element);
                return ControlFlowUtil.Operation.CONTINUE;
              }
            }
 else             if (inst instanceof ReadWriteInstruction) {
              final ReadWriteInstruction rwInstruction=(ReadWriteInstruction)inst;
              if (!name.equals(rwInstruction.getName()) || !rwInstruction.getAccess().isWriteAccess()) {
                return ControlFlowUtil.Operation.NEXT;
              }
              if (element == null || !PsiTreeUtil.isAncestor(node,element,false)) {
                return ControlFlowUtil.Operation.CONTINUE;
              }
              if (element instanceof PyTargetExpression && element.getChildren().length != 0) {
                return ControlFlowUtil.Operation.NEXT;
              }
              myUsedElements.add(element);
              myUnusedElements.remove(element);
              final PyTryPart tryPart=PsiTreeUtil.getParentOfType(element,PyTryPart.class);
              if (tryPart != null && ((PyTryExceptStatement)tryPart.getParent()).getExceptParts().length == 0) {
                return ControlFlowUtil.Operation.NEXT;
              }
              return ControlFlowUtil.Operation.CONTINUE;
            }
            return ControlFlowUtil.Operation.NEXT;
          }
        }
);
      }
    }
  }
}
