{
  final Editor editor=dataContext != null ? PlatformDataKeys.EDITOR.getData(dataContext) : null;
  if (aClass == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("is.not.supported.in.the.current.context",REFACTORING_NAME));
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.MEMBERS_PULL_UP);
    return;
  }
  ArrayList<PsiClass> bases=RefactoringHierarchyUtil.createBasesList(aClass,false,true);
  if (bases.isEmpty()) {
    final GrTypeDefinition containingClass=DefaultGroovyMethods.asType(aClass.getContainingClass(),GrTypeDefinition.class);
    if (containingClass != null) {
      invokeImpl(project,dataContext,containingClass,aClass);
      return;
    }
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("class.does.not.have.base.classes.interfaces.in.current.project",aClass.getQualifiedName()));
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.MEMBERS_PULL_UP);
    return;
  }
  mySubclass=aClass;
  GrMemberInfoStorage memberInfoStorage=new GrMemberInfoStorage((GrTypeDefinition)mySubclass,new MemberInfoBase.Filter<GrMember>(){
    public boolean includeMember(    GrMember element){
      return true;
    }
  }
);
  List<GrMemberInfo> members=memberInfoStorage.getClassMemberInfos(mySubclass);
  PsiManager manager=mySubclass.getManager();
  for (  GrMemberInfo member : members) {
    if (manager.areElementsEquivalent(member.getMember(),aMember)) {
      member.setChecked(true);
      break;
    }
  }
  final GrPullUpDialog dialog=new GrPullUpDialog(project,aClass,bases,memberInfoStorage,this);
  dialog.show();
}
