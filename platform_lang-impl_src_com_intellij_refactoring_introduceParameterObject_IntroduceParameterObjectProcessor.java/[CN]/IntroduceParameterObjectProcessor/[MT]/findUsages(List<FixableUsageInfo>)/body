{
  if (myClassDescriptor.isUseExistingClass()) {
    myClassDescriptor.initExistingClass(myMethod);
  }
  List<PsiNamedElement> methodHierarchy=new ArrayList<>();
  methodHierarchy.add(myMethod);
  for (  UsageInfo info : ChangeSignatureProcessorBase.findUsages(myChangeInfo)) {
    if (info instanceof OverriderMethodUsageInfo) {
      methodHierarchy.add(((OverriderMethodUsageInfo)info).getOverridingMethod());
    }
    usages.add(new ChangeSignatureUsageWrapper(info));
  }
  for (  PsiElement element : methodHierarchy) {
    final IntroduceParameterObjectDelegate delegate=IntroduceParameterObjectDelegate.findDelegate(element);
    if (delegate != null) {
      for (int i=0; i < myParameterInfos.length; i++) {
        P parameterInfo=myParameterInfos[i];
        final IntroduceParameterObjectDelegate.Accessor accessor=delegate.collectInternalUsages(usages,(PsiNamedElement)element,myMethod,myClassDescriptor,parameterInfo.getOldIndex(),myMergedParameterInfo.getName());
        if (myAccessors[i] == null || accessor == IntroduceParameterObjectDelegate.Accessor.Setter) {
          myAccessors[i]=accessor;
        }
      }
    }
  }
  myDelegate.collectAccessibilityUsages(usages,myMethod,myClassDescriptor,myAccessors);
}
