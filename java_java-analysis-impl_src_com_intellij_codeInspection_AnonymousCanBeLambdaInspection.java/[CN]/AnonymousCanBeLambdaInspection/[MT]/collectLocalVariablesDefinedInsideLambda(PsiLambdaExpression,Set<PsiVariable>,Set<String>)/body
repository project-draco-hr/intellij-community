{
  PsiElement block=PsiUtil.getTopLevelEnclosingCodeBlock(lambdaExpression,null);
  if (block == null) {
    block=lambdaExpression;
  }
  block.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitVariable(    PsiVariable variable){
      super.visitVariable(variable);
      if (!(variable instanceof PsiField)) {
        variables.add(variable);
      }
    }
  }
);
  final PsiResolveHelper helper=PsiResolveHelper.SERVICE.getInstance(lambdaExpression.getProject());
  for (Iterator<PsiVariable> iterator=variables.iterator(); iterator.hasNext(); ) {
    PsiVariable local=iterator.next();
    final String localName=local.getName();
    if (localName == null || helper.resolveReferencedVariable(localName,lambdaExpression) == null || !PsiTreeUtil.isAncestor(lambdaExpression,local,false)) {
      iterator.remove();
      namesOfVariablesInTheBlock.add(localName);
    }
  }
}
