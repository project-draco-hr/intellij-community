{
  final PsiExpression expression=(PsiExpression)aClass.getParent();
  final PsiType psiType=PsiTypesUtil.getExpectedTypeByParent(expression);
  if (psiType != null) {
    return psiType;
  }
  PsiExpression topExpr=expression;
  while (topExpr.getParent() instanceof PsiParenthesizedExpression) {
    topExpr=(PsiExpression)topExpr.getParent();
  }
  final PsiElement parent=topExpr.getParent();
  if (parent instanceof PsiExpressionList) {
    PsiExpressionList expressionList=(PsiExpressionList)parent;
    final PsiElement callExpr=expressionList.getParent();
    if (callExpr instanceof PsiCallExpression) {
      final JavaResolveResult result=((PsiCallExpression)callExpr).resolveMethodGenerics();
      if (result instanceof MethodCandidateInfo) {
        final PsiMethod method=((MethodCandidateInfo)result).getElement();
        PsiExpression[] expressions=expressionList.getExpressions();
        int i=ArrayUtilRt.find(expressions,topExpr);
        if (i < 0)         return null;
        expressions[i]=null;
        final PsiParameter[] parameters=method.getParameterList().getParameters();
        final PsiSubstitutor substitutor=PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(method.getTypeParameters(),parameters,expressions,((MethodCandidateInfo)result).getSiteSubstitutor(),callExpr.getParent(),DefaultParameterTypeInferencePolicy.INSTANCE);
        PsiType paramType;
        if (i < parameters.length) {
          paramType=parameters[i].getType();
        }
 else         if (parameters.length > 0) {
          paramType=parameters[parameters.length - 1].getType();
          if (!(paramType instanceof PsiEllipsisType)) {
            return null;
          }
          paramType=((PsiEllipsisType)paramType).getComponentType();
        }
 else {
          return null;
        }
        return substitutor.substitute(paramType);
      }
    }
  }
  return null;
}
