{
  final PsiExpression expression=(PsiExpression)aClass.getParent();
  final PsiType psiType=PsiTypesUtil.getExpectedTypeByParent(expression);
  if (psiType != null) {
    return psiType;
  }
  PsiExpression topExpr=expression;
  while (topExpr.getParent() instanceof PsiParenthesizedExpression) {
    topExpr=(PsiExpression)topExpr.getParent();
  }
  final PsiCall call=LambdaUtil.treeWalkUp(topExpr);
  if (call != null && call.resolveMethod() != null) {
    final int offsetInTopCall=aClass.getTextRange().getStartOffset() - call.getTextRange().getStartOffset();
    final PsiCall copyCall=(PsiCall)call.copy();
    final PsiAnonymousClass classArg=PsiTreeUtil.getParentOfType(copyCall.findElementAt(offsetInTopCall),PsiAnonymousClass.class);
    if (classArg != null) {
      PsiExpression lambda=JavaPsiFacade.getElementFactory(aClass.getProject()).createExpressionFromText(ReplaceWithLambdaFix.composeLambdaText(method),expression);
      lambda=(PsiExpression)classArg.getParent().replace(lambda);
      ((PsiLambdaExpression)lambda).getBody().replace(method.getBody());
      final PsiType interfaceType;
      if (copyCall.resolveMethod() == null) {
        interfaceType=null;
      }
 else {
        interfaceType=((PsiLambdaExpression)lambda).getFunctionalInterfaceType();
      }
      return interfaceType;
    }
  }
  return PsiType.NULL;
}
