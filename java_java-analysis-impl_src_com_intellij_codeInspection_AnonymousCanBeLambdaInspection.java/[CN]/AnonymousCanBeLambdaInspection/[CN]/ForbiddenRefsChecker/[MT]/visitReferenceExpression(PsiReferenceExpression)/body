{
  if (myBodyContainsForbiddenRefs)   return;
  super.visitReferenceExpression(expression);
  if (!(expression.getParent() instanceof PsiMethodCallExpression)) {
    final PsiMember member=PsiTreeUtil.getParentOfType(myAnonymClass,PsiMember.class);
    if (member instanceof PsiField || member instanceof PsiClassInitializer) {
      final PsiElement resolved=expression.resolve();
      if (resolved instanceof PsiField && ((PsiField)resolved).getContainingClass() == member.getContainingClass() && expression.getQualifierExpression() == null) {
        final PsiExpression initializer=((PsiField)resolved).getInitializer();
        if (initializer == null || resolved == member || initializer.getTextOffset() > myAnonymClass.getTextOffset() && !((PsiField)resolved).hasModifierProperty(PsiModifier.STATIC)) {
          myBodyContainsForbiddenRefs=true;
          return;
        }
      }
    }
 else {
      final PsiMethod method=PsiTreeUtil.getParentOfType(myAnonymClass,PsiMethod.class);
      if (method != null && method.isConstructor()) {
        final PsiElement resolved=expression.resolve();
        if (resolved instanceof PsiField && ((PsiField)resolved).hasModifierProperty(PsiModifier.FINAL) && ((PsiField)resolved).getInitializer() == null && ((PsiField)resolved).getContainingClass() == method.getContainingClass()) {
          try {
            final PsiCodeBlock constructorBody=method.getBody();
            if (constructorBody != null) {
              final ControlFlow flow=HighlightControlFlowUtil.getControlFlowNoConstantEvaluate(constructorBody);
              final int startOffset=flow.getStartOffset(myAnonymClass);
              final Collection<PsiVariable> writtenVariables=ControlFlowUtil.getWrittenVariables(flow,0,startOffset,false);
              if (!writtenVariables.contains(resolved)) {
                myBodyContainsForbiddenRefs=true;
                return;
              }
            }
          }
 catch (          AnalysisCanceledException e) {
            myBodyContainsForbiddenRefs=true;
            return;
          }
        }
      }
    }
  }
  if (myInferredType != null) {
    final PsiElement resolved=expression.resolve();
    if (resolved instanceof PsiParameter && ((PsiParameter)resolved).getDeclarationScope() == myMethod) {
      if (!(myInferredType instanceof PsiClassType)) {
        myBodyContainsForbiddenRefs=true;
        return;
      }
      final int parameterIndex=myMethod.getParameterList().getParameterIndex((PsiParameter)resolved);
      for (      PsiMethod superMethod : myMethod.findDeepestSuperMethods()) {
        final PsiType paramType=superMethod.getParameterList().getParameters()[parameterIndex].getType();
        final PsiClass superClass=superMethod.getContainingClass();
        if (superClass != null) {
          final PsiClassType.ClassResolveResult classResolveResult=((PsiClassType)myInferredType).resolveGenerics();
          final PsiClass classCandidate=classResolveResult.getElement();
          if (classCandidate == null) {
            myBodyContainsForbiddenRefs=true;
            return;
          }
          final PsiSubstitutor inferredSubstitutor=TypeConversionUtil.getClassSubstitutor(superClass,classCandidate,classResolveResult.getSubstitutor());
          final PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(superClass,myAnonymClass.getBaseClassType());
          if (inferredSubstitutor != null && !Comparing.equal(inferredSubstitutor.substitute(paramType),substitutor.substitute(paramType))) {
            myBodyContainsForbiddenRefs=true;
            return;
          }
        }
      }
    }
  }
}
