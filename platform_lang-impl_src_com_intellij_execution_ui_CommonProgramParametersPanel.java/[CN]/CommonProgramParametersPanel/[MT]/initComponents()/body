{
  myProgramParametersComponent=LabeledComponent.create(new RawCommandLineEditor(),ExecutionBundle.message("run.configuration.program.parameters"));
  FileChooserDescriptor fileChooserDescriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  fileChooserDescriptor.setTitle(ExecutionBundle.message("select.working.directory.message"));
  myWorkingDirectoryField=new TextFieldWithBrowseButton();
  myWorkingDirectoryField.addBrowseFolderListener(new MacroAwareTextBrowseFolderListener(fileChooserDescriptor,getProject()){
    @Override public void actionPerformed(    ActionEvent e){
      myFileChooserDescriptor.putUserData(LangDataKeys.MODULE_CONTEXT,myModuleContext);
      setProject(getProject());
      super.actionPerformed(e);
    }
  }
);
  final JPanel panel=new JPanel(new BorderLayout());
  panel.add(myWorkingDirectoryField,BorderLayout.CENTER);
  final FixedSizeButton button=new FixedSizeButton(myWorkingDirectoryField);
  button.setIcon(AllIcons.RunConfigurations.Variables);
  button.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final List<String> macros=new SmartList<String>(PathMacros.getInstance().getUserMacroNames());
      if (myModuleContext != null) {
        macros.add(PathMacroUtil.MODULE_DIR_MACRO_NAME);
      }
      final JList list=new JBList(ArrayUtil.toStringArray(macros));
      JBPopupFactory.getInstance().createListPopupBuilder(list).setItemChoosenCallback(new Runnable(){
        @Override public void run(){
          final Object value=list.getSelectedValue();
          if (value instanceof String) {
            setWorkingDirectory("$" + value + "$");
          }
        }
      }
).setMovable(false).setResizable(false).createPopup().showUnderneathOf(button);
    }
  }
);
  panel.add(button,BorderLayout.EAST);
  myWorkingDirectoryComponent=LabeledComponent.create(panel,ExecutionBundle.message("run.configuration.working.directory.label"));
  myEnvVariablesComponent=new EnvironmentVariablesComponent();
  myEnvVariablesComponent.setLabelLocation(BorderLayout.WEST);
  myProgramParametersComponent.setLabelLocation(BorderLayout.WEST);
  myWorkingDirectoryComponent.setLabelLocation(BorderLayout.WEST);
  addComponents();
  setPreferredSize(new Dimension(10,10));
  setAnchor(myEnvVariablesComponent.getLabel());
}
