{
  TIntObjectHashMap<TIntArrayList> addedOrChangedClassData=classData;
  TIntObjectHashMap<TIntArrayList> removedClassData=previousClassData;
  if (previousClassData != null && !previousClassData.isEmpty()) {
    removedClassData=new TIntObjectHashMap<TIntArrayList>();
    addedOrChangedClassData=new TIntObjectHashMap<TIntArrayList>();
    if (classData != null) {
      for (      int classQName : classData.keys()) {
        TIntArrayList currentMethods=classData.get(classQName);
        TIntArrayList previousMethods=previousClassData.get(classQName);
        if (previousMethods == null) {
          addedOrChangedClassData.put(classQName,currentMethods);
          continue;
        }
        final int[] previousMethodIds=previousMethods.toNativeArray();
        TIntHashSet previousMethodsSet=new TIntHashSet(previousMethodIds);
        final int[] currentMethodIds=currentMethods.toNativeArray();
        TIntHashSet currentMethodsSet=new TIntHashSet(currentMethodIds);
        currentMethodsSet.removeAll(previousMethodIds);
        previousMethodsSet.removeAll(currentMethodIds);
        if (!currentMethodsSet.isEmpty()) {
          addedOrChangedClassData.put(classQName,new TIntArrayList(currentMethodsSet.toArray()));
        }
        if (!previousMethodsSet.isEmpty()) {
          removedClassData.put(classQName,new TIntArrayList(previousMethodsSet.toArray()));
        }
      }
    }
    if (classData != null) {
      for (      int classQName : previousClassData.keys()) {
        if (classData.containsKey(classQName))         continue;
        TIntArrayList previousMethods=previousClassData.get(classQName);
        removedClassData.put(classQName,previousMethods);
      }
    }
  }
  myAddedOrChangedClassData=addedOrChangedClassData;
  myRemovedClassData=removedClassData;
}
