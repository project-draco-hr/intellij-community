{
  ValueDiff valueDiff=new ValueDiff(classData,previousClassData);
  if (valueDiff.hasRemovedDelta()) {
    for (    int classQName : valueDiff.myRemovedClassData.keys()) {
      for (      int methodName : valueDiff.myRemovedClassData.get(classQName).toNativeArray()) {
        holder.myMethodQNameToTestNames.appendData(createKey(classQName,methodName),new PersistentHashMap.ValueDataAppender(){
          @Override public void append(          DataOutput dataOutput) throws IOException {
            DataInputOutputUtil.writeINT(dataOutput,REMOVED_MARKER);
            DataInputOutputUtil.writeINT(dataOutput,testNameId);
          }
        }
);
      }
    }
  }
  if (valueDiff.hasAddedDelta()) {
    for (    int classQName : valueDiff.myAddedOrChangedClassData.keys()) {
      for (      int methodName : valueDiff.myAddedOrChangedClassData.get(classQName).toNativeArray()) {
        holder.myMethodQNameToTestNames.appendData(createKey(classQName,methodName),new PersistentHashMap.ValueDataAppender(){
          @Override public void append(          DataOutput dataOutput) throws IOException {
            DataInputOutputUtil.writeINT(dataOutput,testNameId);
          }
        }
);
      }
    }
  }
  if ((valueDiff.hasAddedDelta() || valueDiff.hasRemovedDelta())) {
    if (classData != null) {
      holder.myTestNameToUsedClassesAndMethodMap.put(testNameId,classData);
    }
 else {
      holder.myTestNameToUsedClassesAndMethodMap.remove(testNameId);
    }
  }
}
