{
synchronized (ourLock) {
    Holder holder=getHolder();
    if (holder.myDisposed)     return;
    try {
      final int testNameId=holder.myTestNameEnumerator.enumerate(testName);
      TIntObjectHashMap<TIntArrayList> classData=loadClassAndMethodsMap(file,holder);
      TIntObjectHashMap<TIntArrayList> previousClassData=holder.myTestNameToUsedClassesAndMethodMap.get(testNameId);
      ValueDiff valueDiff=new ValueDiff(classData,previousClassData);
      if (valueDiff.hasRemovedDelta()) {
        for (        int classQName : valueDiff.myRemovedClassData.keys()) {
          for (          int methodName : valueDiff.myRemovedClassData.get(classQName).toNativeArray()) {
            holder.myMethodQNameToTestNames.appendData(createKey(classQName,methodName),new PersistentHashMap.ValueDataAppender(){
              @Override public void append(              DataOutput dataOutput) throws IOException {
                DataInputOutputUtil.writeINT(dataOutput,REMOVED_MARKER);
                DataInputOutputUtil.writeINT(dataOutput,testNameId);
              }
            }
);
          }
        }
      }
      if (valueDiff.hasAddedDelta()) {
        for (        int classQName : valueDiff.myAddedOrChangedClassData.keys()) {
          for (          int methodName : valueDiff.myAddedOrChangedClassData.get(classQName).toNativeArray()) {
            holder.myMethodQNameToTestNames.appendData(createKey(classQName,methodName),new PersistentHashMap.ValueDataAppender(){
              @Override public void append(              DataOutput dataOutput) throws IOException {
                DataInputOutputUtil.writeINT(dataOutput,testNameId);
              }
            }
);
          }
        }
      }
      if (valueDiff.hasAddedDelta() || valueDiff.hasRemovedDelta()) {
        holder.myTestNameToUsedClassesAndMethodMap.put(testNameId,classData);
      }
    }
 catch (    Throwable throwable) {
      thingsWentWrongLetsReinitialize(holder,throwable);
    }
  }
}
