{
  final StringBuilder stringBuilder=new StringBuilder("print(");
  final PyFile file=(PyFile)expression.getContainingFile();
  final PyExpression[] target=PsiTreeUtil.getChildrenOfType(expression,PyExpression.class);
  if (target != null) {
    stringBuilder.append(StringUtil.join(target,new Function<PyExpression,String>(){
      @Override public String fun(      PyExpression o){
        return o.getText();
      }
    }
,", "));
  }
  stringBuilder.append(")");
  expression.replace(elementGenerator.createFromText(LanguageLevel.forElement(expression),PyExpression.class,stringBuilder.toString()));
  final PyFromImportStatement statement=elementGenerator.createFromText(LanguageLevel.forElement(expression),PyFromImportStatement.class,"from __future__ import print_function");
  file.addBefore(statement,file.getStatements().get(0));
}
