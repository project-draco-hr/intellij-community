{
  StringBuilder sb=new StringBuilder();
  final PsiClass psiClass=PsiTreeUtil.getParentOfType(psiMethod,PsiClass.class,false);
  if (psiClass == null) {
    return null;
  }
  PsiClass outerClass=psiClass.getContainingClass();
  boolean isInnerClassConstructor=psiMethod.isConstructor() && (outerClass != null) && !psiClass.hasModifierProperty(PsiModifier.STATIC);
  PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
  PsiType returnType=psiMethod.getReturnType();
  sb.append(returnType == null ? "<init>" : psiMethod.getName());
  sb.append('(');
  String desc;
  if (isInnerClassConstructor) {
    desc=descriptor(outerClass,0,true);
    if (desc == null) {
      return null;
    }
    sb.append(desc);
  }
  for (  PsiParameter parameter : parameters) {
    desc=descriptor(parameter.getType());
    if (desc == null) {
      return null;
    }
    sb.append(desc);
  }
  sb.append(')');
  if (returnType == null) {
    sb.append('V');
  }
 else {
    desc=descriptor(returnType);
    if (desc == null) {
      return null;
    }
 else {
      sb.append(desc);
    }
  }
  return sb.toString();
}
