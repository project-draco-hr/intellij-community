{
  int dimensions=0;
  psiType=TypeConversionUtil.erasure(psiType);
  if (psiType instanceof PsiArrayType) {
    PsiArrayType arrayType=(PsiArrayType)psiType;
    psiType=arrayType.getDeepComponentType();
    dimensions=arrayType.getArrayDimensions();
  }
  if (psiType instanceof PsiClassType) {
    PsiClass psiClass=((PsiClassType)psiType).resolve();
    if (psiClass != null) {
      return descriptor(psiClass,dimensions,true);
    }
 else {
      LOG.debug("resolve was null for " + ((PsiClassType)psiType).getClassName());
      return null;
    }
  }
 else   if (psiType instanceof PsiPrimitiveType) {
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < dimensions; i++) {
      sb.append('[');
    }
    if (PsiType.VOID.equals(psiType)) {
      sb.append('V');
    }
 else     if (PsiType.BOOLEAN.equals(psiType)) {
      sb.append('Z');
    }
 else     if (PsiType.CHAR.equals(psiType)) {
      sb.append('C');
    }
 else     if (PsiType.BYTE.equals(psiType)) {
      sb.append('B');
    }
 else     if (PsiType.SHORT.equals(psiType)) {
      sb.append('S');
    }
 else     if (PsiType.INT.equals(psiType)) {
      sb.append('I');
    }
 else     if (PsiType.FLOAT.equals(psiType)) {
      sb.append('F');
    }
 else     if (PsiType.LONG.equals(psiType)) {
      sb.append('J');
    }
 else     if (PsiType.DOUBLE.equals(psiType)) {
      sb.append('D');
    }
    return sb.toString();
  }
  return null;
}
