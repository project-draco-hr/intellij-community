{
  final TIntObjectHashMap<AnnotationData> outs=new TIntObjectHashMap<AnnotationData>();
  final TIntObjectHashMap<AnnotationData> params=new TIntObjectHashMap<AnnotationData>();
  final TIntObjectHashMap<AnnotationData> contracts=new TIntObjectHashMap<AnnotationData>();
  TIntObjectHashMap<StringBuilder> contractBuilders=new TIntObjectHashMap<StringBuilder>();
  TIntObjectIterator<Value> solutionsIterator=internalIdSolutions.iterator();
  for (int i=internalIdSolutions.size(); i-- > 0; ) {
    solutionsIterator.advance();
    int key=Math.abs(solutionsIterator.key());
    Value value=solutionsIterator.value();
    if (value == Value.Top || value == Value.Bot) {
      continue;
    }
    int[] compoundKey=null;
    try {
      compoundKey=myCompoundKeyEnumerator.valueOf(key);
    }
 catch (    IOException e) {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
    if (compoundKey != null) {
      Direction direction=extractDirection(compoundKey);
      if (direction instanceof In && value == Value.NotNull) {
        params.put(key,new AnnotationData("org.jetbrains.annotations.NotNull",""));
      }
 else       if (direction instanceof Out && value == Value.NotNull) {
        outs.put(key,new AnnotationData("org.jetbrains.annotations.NotNull",""));
      }
 else       if (direction instanceof InOut) {
        compoundKey[0]=0;
        compoundKey[1]=0;
        compoundKey[2]=0;
        try {
          int baseKey=myCompoundKeyEnumerator.enumerate(compoundKey);
          StringBuilder sb=contractBuilders.get(baseKey);
          if (sb == null) {
            sb=new StringBuilder("\"");
            contractBuilders.put(baseKey,sb);
          }
 else {
            sb.append(';');
          }
          int arity=compoundKey[8];
          contractElement(sb,arity,(InOut)direction,value);
        }
 catch (        IOException e) {
        }
      }
    }
  }
  TIntObjectIterator<StringBuilder> buildersIterator=contractBuilders.iterator();
  for (int i=contractBuilders.size(); i-- > 0; ) {
    buildersIterator.advance();
    int key=buildersIterator.key();
    StringBuilder value=buildersIterator.value();
    if (!outs.contains(key)) {
      contracts.put(key,new AnnotationData("org.jetbrains.annotations.Contract",value.append('"').toString()));
    }
  }
  return new Annotations(outs,params,contracts);
}
