{
  final PsiClass psiClass=PsiTreeUtil.getParentOfType(psiMethod,PsiClass.class,false);
  if (psiClass == null) {
    LOG.info("PsiClass was null for " + psiMethod.getName());
    return null;
  }
  PsiClass outerClass=psiClass.getContainingClass();
  boolean isInnerClassConstructor=psiMethod.isConstructor() && (outerClass != null) && !psiClass.hasModifierProperty(PsiModifier.STATIC);
  PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
  final int shift=isInnerClassConstructor ? 1 : 0;
  final int arity=parameters.length + shift;
  int[] compoundKey=new int[9 + arity * 2];
  compoundKey[0]=direction.directionId();
  compoundKey[1]=direction.paramId();
  compoundKey[2]=direction.valueId();
  if (!writeClass(compoundKey,3,psiClass,0)) {
    return null;
  }
  PsiType returnType=psiMethod.getReturnType();
  if (returnType == null) {
    if (!writeType(compoundKey,5,PsiType.VOID)) {
      return null;
    }
    compoundKey[7]=myNamesEnumerator.enumerate("<init>");
  }
 else {
    if (!writeType(compoundKey,5,returnType)) {
      return null;
    }
    compoundKey[7]=myNamesEnumerator.enumerate(psiMethod.getName());
  }
  compoundKey[8]=arity;
  if (isInnerClassConstructor) {
    writeClass(compoundKey,9,outerClass,0);
  }
  for (int i=0; i < parameters.length; i++) {
    PsiParameter parameter=parameters[i];
    if (!writeType(compoundKey,9 + (2 * (i + shift)),parameter.getType())) {
      return null;
    }
  }
  return compoundKey;
}
