{
  List<String> clauses=new ArrayList<String>();
  TLongObjectIterator<Value> solutionsIterator=internalIdSolutions.iterator();
  TLongHashSet notNulls=annotations.notNulls;
  TLongObjectHashMap<String> contracts=annotations.contracts;
  for (int i=internalIdSolutions.size(); i-- > 0; ) {
    solutionsIterator.advance();
    long key=Math.abs(solutionsIterator.key());
    Value value=solutionsIterator.value();
    if (value == Value.Top || value == Value.Bot) {
      continue;
    }
    Direction direction=extractDirection((int)(key % SHIFT));
    if (value == Value.NotNull && direction instanceof Out && key == methodKey) {
      notNulls.add(key);
    }
 else     if (direction instanceof InOut) {
      long baseKey=key - (key % SHIFT);
      if (baseKey == methodKey) {
        clauses.add(contractElement(arity,(InOut)direction,value));
      }
    }
  }
  if (!notNulls.contains(methodKey) && !clauses.isEmpty()) {
    Collections.sort(clauses);
    StringBuilder sb=new StringBuilder("\"");
    StringUtil.join(clauses,";",sb);
    sb.append('"');
    contracts.put(methodKey,sb.toString().intern());
  }
}
