{
  int dimensions=0;
  psiType=TypeConversionUtil.erasure(psiType);
  if (psiType instanceof PsiArrayType) {
    PsiArrayType arrayType=(PsiArrayType)psiType;
    psiType=arrayType.getDeepComponentType();
    dimensions=arrayType.getArrayDimensions();
  }
  if (psiType instanceof PsiClassType) {
    PsiClass psiClass=((PsiClassType)psiType).resolve();
    if (psiClass != null) {
      return mkPsiClassKey(psiClass,dimensions);
    }
 else {
      LOG.debug("resolve was null for " + ((PsiClassType)psiType).getClassName());
      return -1;
    }
  }
 else   if (psiType instanceof PsiPrimitiveType) {
    String packageName="";
    String className=psiType.getPresentableText();
    int[] classKey=new int[2];
    classKey[0]=myNamesEnumerator.enumerate(packageName);
    if (dimensions == 0) {
      classKey[1]=myNamesEnumerator.enumerate(className);
    }
 else {
      StringBuilder sb=new StringBuilder(className);
      for (int j=0; j < dimensions; j++) {
        sb.append("[]");
      }
      classKey[1]=myNamesEnumerator.enumerate(sb.toString());
    }
    return myCompoundKeyEnumerator.enumerate(classKey);
  }
  return -1;
}
