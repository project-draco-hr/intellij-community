{
  List<String> contractClauses=new ArrayList<>(arity * 2);
  Set<HKey> notNulls=methodAnnotations.notNulls;
  Set<HKey> pures=methodAnnotations.pures;
  Map<HKey,String> contracts=methodAnnotations.contractsValues;
  for (  Map.Entry<HKey,Value> entry : solution.entrySet()) {
    Value value=entry.getValue();
    if (value == Value.Top || value == Value.Bot) {
      continue;
    }
    HKey key=entry.getKey().mkStable();
    Direction direction=extractDirection(key.dirKey);
    HKey baseKey=key.mkBase();
    if (!methodKey.equals(baseKey)) {
      continue;
    }
    if (value == Value.NotNull && direction == Out) {
      notNulls.add(methodKey);
    }
 else     if (value == Value.Pure && direction == Pure) {
      pures.add(methodKey);
    }
 else     if (direction instanceof InOut) {
      contractClauses.add(contractElement(arity,(InOut)direction,value));
    }
  }
  if (!notNulls.contains(methodKey) && !contractClauses.isEmpty()) {
    Collections.sort(contractClauses);
    StringBuilder sb=new StringBuilder("\"");
    StringUtil.join(contractClauses,";",sb);
    sb.append('"');
    contracts.put(methodKey,sb.toString().intern());
  }
}
