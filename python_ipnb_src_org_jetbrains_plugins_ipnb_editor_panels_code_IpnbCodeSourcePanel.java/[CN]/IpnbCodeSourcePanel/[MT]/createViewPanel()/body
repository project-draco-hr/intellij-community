{
  final JPanel panel=new JPanel(new BorderLayout());
  panel.setBackground(UIUtil.isUnderDarcula() ? IpnbEditorUtil.getBackground() : Gray._247);
  if (mySource.startsWith("%")) {
    myEditor=IpnbEditorUtil.createPlainCodeEditor(myProject,mySource);
  }
 else {
    myEditor=IpnbEditorUtil.createPythonCodeEditor(myProject,this);
  }
  final JComponent component=myEditor.getComponent();
  final JComponent contentComponent=myEditor.getContentComponent();
  contentComponent.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      final int keyCode=e.getKeyCode();
      final int height=myEditor.getLineHeight() * Math.max(myEditor.getDocument().getLineCount(),1);
      component.setPreferredSize(new Dimension(IpnbEditorUtil.PANEL_WIDTH,height));
      final Container parent=myParent.getParent();
      if (parent instanceof IpnbFilePanel) {
        IpnbFilePanel ipnbFilePanel=(IpnbFilePanel)parent;
        ipnbFilePanel.revalidate();
        ipnbFilePanel.repaint();
        if (keyCode == KeyEvent.VK_ESCAPE) {
          getIpnbCodePanel().setEditing(false);
          UIUtil.requestFocus(getIpnbCodePanel().getFileEditor().getIpnbFilePanel());
        }
 else         if (keyCode == KeyEvent.VK_ENTER && InputEvent.CTRL_DOWN_MASK == e.getModifiersEx()) {
          final IpnbRunCellAction action=(IpnbRunCellAction)ActionManager.getInstance().getAction("IpnbRunCellAction");
          action.runCell(ipnbFilePanel,false);
        }
      }
    }
  }
);
  contentComponent.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (InputEvent.CTRL_DOWN_MASK == e.getModifiersEx())       return;
      final Container ipnbFilePanel=myParent.getParent();
      if (ipnbFilePanel instanceof IpnbFilePanel) {
        ((IpnbFilePanel)ipnbFilePanel).setSelectedCell(myParent);
        myParent.switchToEditing();
      }
      UIUtil.requestFocus(contentComponent);
    }
  }
);
  panel.add(component);
  component.addHierarchyBoundsListener(new HierarchyBoundsAdapter(){
    @Override public void ancestorResized(    HierarchyEvent e){
      if (e.getChanged() instanceof IpnbFilePanel) {
        myParent.setPreferredSize(new Dimension(e.getChanged().getWidth() - 200,myParent.getPreferredSize().height));
      }
    }
  }
);
  component.setPreferredSize(new Dimension(IpnbEditorUtil.PANEL_WIDTH,component.getPreferredSize().height));
  component.setMinimumSize(new Dimension(100,component.getPreferredSize().height));
  return panel;
}
