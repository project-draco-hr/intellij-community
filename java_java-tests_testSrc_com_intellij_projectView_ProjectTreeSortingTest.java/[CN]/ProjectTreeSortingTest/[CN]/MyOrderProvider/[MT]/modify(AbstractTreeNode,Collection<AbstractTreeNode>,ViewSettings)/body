{
  ArrayList<AbstractTreeNode> result=new ArrayList<>();
  for (  final AbstractTreeNode child : children) {
    ProjectViewNode treeNode=(ProjectViewNode)child;
    final Object o=treeNode.getValue();
    if (o instanceof PsiFileSystemItem) {
      final Integer order=myOrder.get(((PsiFileSystemItem)o).getVirtualFile().getName());
      treeNode=new ProjectViewNode<PsiFileSystemItem>(myProject,(PsiFileSystemItem)o,settings){
        @Override @NotNull public Collection<AbstractTreeNode> getChildren(){
          return child.getChildren();
        }
        @Override public String toTestString(        Queryable.PrintInfo printInfo){
          return child.toTestString(printInfo);
        }
        @Override public int getWeight(){
          return ((ProjectViewNode)child).getWeight();
        }
        @Nullable @Override public Comparable getSortKey(){
          return ((ProjectViewNode)child).getSortKey();
        }
        @Nullable @Override public Comparable getManualOrderKey(){
          return order == null ? null : order;
        }
        @Nullable @Override public String getQualifiedNameSortKey(){
          return ((ProjectViewNode)child).getQualifiedNameSortKey();
        }
        @Nullable @Override public Comparable getTypeSortKey(){
          return ((ProjectViewNode)child).getTypeSortKey();
        }
        @Override public int getTypeSortWeight(        boolean sortByType){
          return ((ProjectViewNode)child).getTypeSortWeight(sortByType);
        }
        @Override public String getTestPresentation(){
          return child.getTestPresentation();
        }
        @Override public boolean contains(        @NotNull VirtualFile file){
          return ((ProjectViewNode)child).contains(file);
        }
        @Override public void update(        PresentationData presentation){
        }
        @Override public String toString(){
          return ((PsiFileSystemItem)o).getName();
        }
      }
;
    }
    result.add(treeNode);
  }
  return result;
}
