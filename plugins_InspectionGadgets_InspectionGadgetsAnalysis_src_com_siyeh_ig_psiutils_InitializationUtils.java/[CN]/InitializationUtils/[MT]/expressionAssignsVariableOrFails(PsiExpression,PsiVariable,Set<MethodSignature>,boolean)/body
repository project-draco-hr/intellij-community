{
  if (expression == null) {
    return false;
  }
  if (expression instanceof PsiThisExpression || expression instanceof PsiLiteralExpression || expression instanceof PsiSuperExpression|| expression instanceof PsiClassObjectAccessExpression|| expression instanceof PsiReferenceExpression) {
    return false;
  }
 else   if (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    return expressionAssignsVariableOrFails(parenthesizedExpression.getExpression(),variable,checkedMethods,strict);
  }
 else   if (expression instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
    return methodCallAssignsVariableOrFails(methodCallExpression,variable,checkedMethods,strict);
  }
 else   if (expression instanceof PsiNewExpression) {
    final PsiNewExpression newExpression=(PsiNewExpression)expression;
    return newExpressionAssignsVariableOrFails(newExpression,variable,checkedMethods,strict);
  }
 else   if (expression instanceof PsiArrayInitializerExpression) {
    final PsiArrayInitializerExpression array=(PsiArrayInitializerExpression)expression;
    for (    final PsiExpression initializer : array.getInitializers()) {
      if (expressionAssignsVariableOrFails(initializer,variable,checkedMethods,strict)) {
        return true;
      }
    }
    return false;
  }
 else   if (expression instanceof PsiTypeCastExpression) {
    final PsiTypeCastExpression typeCast=(PsiTypeCastExpression)expression;
    return expressionAssignsVariableOrFails(typeCast.getOperand(),variable,checkedMethods,strict);
  }
 else   if (expression instanceof PsiArrayAccessExpression) {
    final PsiArrayAccessExpression accessExpression=(PsiArrayAccessExpression)expression;
    return expressionAssignsVariableOrFails(accessExpression.getArrayExpression(),variable,checkedMethods,strict) || expressionAssignsVariableOrFails(accessExpression.getIndexExpression(),variable,checkedMethods,strict);
  }
 else   if (expression instanceof PsiPrefixExpression) {
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)expression;
    return expressionAssignsVariableOrFails(prefixExpression.getOperand(),variable,checkedMethods,strict);
  }
 else   if (expression instanceof PsiPostfixExpression) {
    final PsiPostfixExpression postfixExpression=(PsiPostfixExpression)expression;
    return expressionAssignsVariableOrFails(postfixExpression.getOperand(),variable,checkedMethods,strict);
  }
 else   if (expression instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)expression;
    for (    PsiExpression operand : polyadicExpression.getOperands()) {
      if (expressionAssignsVariableOrFails(operand,variable,checkedMethods,strict)) {
        return true;
      }
    }
    return false;
  }
 else   if (expression instanceof PsiConditionalExpression) {
    final PsiConditionalExpression conditional=(PsiConditionalExpression)expression;
    if (expressionAssignsVariableOrFails(conditional.getCondition(),variable,checkedMethods,strict)) {
      return true;
    }
    return expressionAssignsVariableOrFails(conditional.getThenExpression(),variable,checkedMethods,strict) && expressionAssignsVariableOrFails(conditional.getElseExpression(),variable,checkedMethods,strict);
  }
 else   if (expression instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression assignment=(PsiAssignmentExpression)expression;
    final PsiExpression lhs=assignment.getLExpression();
    if (expressionAssignsVariableOrFails(lhs,variable,checkedMethods,strict)) {
      return true;
    }
    if (expressionAssignsVariableOrFails(assignment.getRExpression(),variable,checkedMethods,strict)) {
      return true;
    }
    if (lhs instanceof PsiReferenceExpression) {
      final PsiElement element=((PsiReference)lhs).resolve();
      if (variable.equals(element)) {
        return true;
      }
    }
    return false;
  }
 else   if (expression instanceof PsiInstanceOfExpression) {
    final PsiInstanceOfExpression instanceOfExpression=(PsiInstanceOfExpression)expression;
    return expressionAssignsVariableOrFails(instanceOfExpression.getOperand(),variable,checkedMethods,strict);
  }
 else {
    return false;
  }
}
