{
  final String fullPath=PathManagerEx.getTestDataPath() + "/psi/resolve/Thinlet.java";
  final VirtualFile vFile=LocalFileSystem.getInstance().findFileByPath(fullPath.replace(File.separatorChar,'/'));
  final List<PsiReference> references=new ArrayList<PsiReference>();
  assertNotNull("file " + fullPath + " not found",vFile);
  System.gc();
  String fileText=StringUtil.convertLineSeparators(VfsUtil.loadText(vFile));
  myFile=createFile(vFile.getName(),fileText);
  myFile.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      references.add(expression);
      visitElement(expression);
    }
  }
);
  System.out.println();
  System.out.println("Found " + references.size() + " references");
  long time=System.currentTimeMillis();
  resolveAllReferences(references);
  System.out.println("Not cached resolve: " + (System.currentTimeMillis() - time) / (double)1000 + "s");
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      ResolveCache.getInstance(myProject).clearCache(true);
    }
  }
);
  time=System.currentTimeMillis();
  resolveAllReferences(references);
  System.out.println("Not cached resolve with cached repository: " + (System.currentTimeMillis() - time) / (double)1000 + "s");
  time=System.currentTimeMillis();
  resolveAllReferences(references);
  System.out.println("Cached resolve: " + (System.currentTimeMillis() - time) / (double)1000 + "s");
}
