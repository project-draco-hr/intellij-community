{
  if (expression == null) {
    return false;
  }
  if (expression instanceof PyCallExpression || expression instanceof PyYieldExpression) {
    return true;
  }
  if (expression instanceof PyStringLiteralExpression) {
    final PyDocStringOwner docStringOwner=PsiTreeUtil.getParentOfType(expression,PyDocStringOwner.class);
    if (docStringOwner != null) {
      if (docStringOwner.getDocStringExpression() == expression) {
        return true;
      }
    }
  }
 else   if (expression instanceof PyListCompExpression) {
    if (hasEffect(((PyListCompExpression)expression).getResultExpression())) {
      return true;
    }
  }
 else   if (expression instanceof PyBinaryExpression) {
    PyBinaryExpression binary=(PyBinaryExpression)expression;
    final PyElementType operator=binary.getOperator();
    String method=operator == null ? null : operator.getSpecialMethodName();
    if (method != null) {
      PyType type=myTypeEvalContext.getType(binary.getLeftExpression());
      if (type != null && !type.isBuiltin() && type.resolveMember(method,AccessDirection.READ,PyResolveContext.defaultContext()) != null) {
        return true;
      }
      final PyExpression rhs=binary.getRightExpression();
      if (rhs != null) {
        type=myTypeEvalContext.getType(rhs);
        if (type != null) {
          String rmethod="__r" + method.substring(2);
          if (!type.isBuiltin() && type.resolveMember(rmethod,AccessDirection.READ,PyResolveContext.defaultContext()) != null) {
            return true;
          }
        }
      }
    }
  }
 else   if (expression instanceof PyConditionalExpression) {
    PyConditionalExpression conditionalExpression=(PyConditionalExpression)expression;
    return hasEffect(conditionalExpression.getTruePart()) || hasEffect(conditionalExpression.getFalsePart());
  }
 else   if (expression instanceof PyParenthesizedExpression) {
    PyParenthesizedExpression parenthesizedExpression=(PyParenthesizedExpression)expression;
    return hasEffect(parenthesizedExpression.getContainedExpression());
  }
  return false;
}
