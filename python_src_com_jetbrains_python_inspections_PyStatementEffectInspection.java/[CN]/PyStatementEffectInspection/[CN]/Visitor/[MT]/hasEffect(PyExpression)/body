{
  if (expression == null) {
    return false;
  }
  if (expression instanceof PyCallExpression || expression instanceof PyYieldExpression) {
    return true;
  }
 else   if (expression instanceof PyListCompExpression) {
    if (hasEffect(((PyListCompExpression)expression).getResultExpression())) {
      return true;
    }
  }
 else   if (expression instanceof PyBinaryExpression) {
    PyBinaryExpression binary=(PyBinaryExpression)expression;
    final PyExpression leftExpression=binary.getLeftExpression();
    final PyExpression rightExpression=binary.getRightExpression();
    if (hasEffect(leftExpression) || hasEffect(rightExpression))     return true;
    final PyElementType operator=binary.getOperator();
    String method=operator == null ? null : operator.getSpecialMethodName();
    if (method != null) {
      PyType type=myTypeEvalContext.getType(leftExpression);
      if (type != null && !type.isBuiltin() && type.resolveMember(method,null,AccessDirection.READ,getResolveContext()) != null) {
        return true;
      }
      if (rightExpression != null) {
        type=myTypeEvalContext.getType(rightExpression);
        if (type != null) {
          String rmethod="__r" + method.substring(2);
          if (!type.isBuiltin() && type.resolveMember(rmethod,null,AccessDirection.READ,getResolveContext()) != null) {
            return true;
          }
        }
      }
    }
  }
 else   if (expression instanceof PyConditionalExpression) {
    PyConditionalExpression conditionalExpression=(PyConditionalExpression)expression;
    return hasEffect(conditionalExpression.getTruePart()) || hasEffect(conditionalExpression.getFalsePart());
  }
 else   if (expression instanceof PyParenthesizedExpression) {
    PyParenthesizedExpression parenthesizedExpression=(PyParenthesizedExpression)expression;
    return hasEffect(parenthesizedExpression.getContainedExpression());
  }
 else   if (expression instanceof PyReferenceExpression) {
    PyReferenceExpression referenceExpression=(PyReferenceExpression)expression;
    ResolveResult[] results=referenceExpression.getReference(getResolveContext()).multiResolve(true);
    for (    ResolveResult res : results) {
      if (res.getElement() instanceof PyFunction) {
        registerProblem(expression,"Statement seems to have no effect and can be replaced with function call to have effect",new StatementEffectFunctionCallQuickFix());
        return true;
      }
    }
  }
 else   if (expression instanceof PyTupleExpression) {
    PyExpression[] elements=((PyTupleExpression)expression).getElements();
    for (    PyExpression element : elements) {
      if (hasEffect(element)) {
        return true;
      }
    }
  }
 else   if (expression instanceof PyPrefixExpression) {
    final PyPrefixExpression prefixExpr=(PyPrefixExpression)expression;
    return prefixExpr.getOperator() == PyTokenTypes.AWAIT_KEYWORD;
  }
  return false;
}
