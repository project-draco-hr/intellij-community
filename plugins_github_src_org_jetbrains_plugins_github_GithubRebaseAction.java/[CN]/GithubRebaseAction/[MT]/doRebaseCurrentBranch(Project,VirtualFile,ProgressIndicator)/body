{
  final GitRepositoryManager repositoryManager=GitUtil.getRepositoryManager(project);
  Git git=ServiceManager.getService(Git.class);
  final GitRebaser rebaser=new GitRebaser(project,git,indicator);
  final GitLineHandler handler=new GitLineHandler(project,root,GitCommand.REBASE);
  handler.setStdoutSuppressed(false);
  handler.addParameters("upstream/master");
  final GitRebaseProblemDetector rebaseConflictDetector=new GitRebaseProblemDetector();
  handler.addLineListener(rebaseConflictDetector);
  final GitUntrackedFilesOverwrittenByOperationDetector untrackedFilesDetector=new GitUntrackedFilesOverwrittenByOperationDetector(root);
  final GitLocalChangesWouldBeOverwrittenDetector localChangesDetector=new GitLocalChangesWouldBeOverwrittenDetector(root,CHECKOUT);
  handler.addLineListener(untrackedFilesDetector);
  handler.addLineListener(localChangesDetector);
  handler.addLineListener(GitStandardProgressAnalyzer.createListener(indicator));
  String oldText=indicator.getText();
  indicator.setText("Rebasing from upstream/master...");
  GitCommandResult rebaseResult=git.runCommand(handler);
  indicator.setText(oldText);
  repositoryManager.updateRepository(root);
  if (rebaseResult.success()) {
    root.refresh(false,true);
    GithubNotifications.showInfo(project,"Success","Successfully rebased GitHub fork");
  }
 else {
    GitUpdateResult result=rebaser.handleRebaseFailure(handler,root,rebaseConflictDetector,untrackedFilesDetector,localChangesDetector);
    if (result == GitUpdateResult.NOTHING_TO_UPDATE || result == GitUpdateResult.SUCCESS || result == GitUpdateResult.SUCCESS_WITH_RESOLVED_CONFLICTS) {
      GithubNotifications.showInfo(project,"Success","Successfully rebased GitHub fork");
    }
  }
}
