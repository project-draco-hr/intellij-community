{
  final String remoteUrl=GithubUtil.findGithubRemoteUrl(gitRepository);
  if (remoteUrl == null) {
    GithubNotifications.showError(project,CANNOT_PERFORM_GITHUB_REBASE,"Can't find github remote");
    return null;
  }
  final GithubFullPath userAndRepo=GithubUrlUtil.getUserAndRepositoryFromRemoteUrl(remoteUrl);
  if (userAndRepo == null) {
    GithubNotifications.showError(project,CANNOT_PERFORM_GITHUB_REBASE,"Can't process remote: " + remoteUrl);
    return null;
  }
  try {
    return GithubUtil.runWithValidAuth(project,indicator,new ThrowableConvertor<GithubAuthData,GithubRepoDetailed,IOException>(){
      @Override @NotNull public GithubRepoDetailed convert(      GithubAuthData authData) throws IOException {
        return GithubApiUtil.getDetailedRepoInfo(authData,userAndRepo.getUser(),userAndRepo.getRepository());
      }
    }
);
  }
 catch (  GithubOperationCanceledException e) {
    return null;
  }
catch (  IOException e) {
    GithubNotifications.showError(project,"Can't load repository info",e);
    return null;
  }
}
