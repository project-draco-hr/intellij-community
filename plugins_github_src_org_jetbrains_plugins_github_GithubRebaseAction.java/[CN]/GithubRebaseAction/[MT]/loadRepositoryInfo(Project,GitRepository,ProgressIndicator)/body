{
  final String remoteUrl=GithubUtil.findGithubRemoteUrl(gitRepository);
  if (remoteUrl == null) {
    GithubNotifications.showError(project,CANNOT_PERFORM_GITHUB_REBASE,"Can't find github remote");
    return null;
  }
  final GithubFullPath userAndRepo=GithubUrlUtil.getUserAndRepositoryFromRemoteUrl(remoteUrl);
  if (userAndRepo == null) {
    GithubNotifications.showError(project,CANNOT_PERFORM_GITHUB_REBASE,"Can't process remote: " + remoteUrl);
    return null;
  }
  GithubRepoDetailed repositoryInfo;
  try {
    repositoryInfo=GithubUtil.runWithValidAuth(project,indicator,new ThrowableConvertor<GithubAuthData,GithubRepoDetailed,IOException>(){
      @Override @Nullable public GithubRepoDetailed convert(      GithubAuthData authData) throws IOException {
        return GithubApiUtil.getDetailedRepoInfo(authData,userAndRepo.getUser(),userAndRepo.getRepository());
      }
    }
);
  }
 catch (  IOException e) {
    GithubNotifications.showError(project,CANNOT_PERFORM_GITHUB_REBASE,"Can't load repository info: " + e.getMessage());
    return null;
  }
  if (repositoryInfo == null) {
    GithubNotifications.showError(project,CANNOT_PERFORM_GITHUB_REBASE,"Can't load repository info");
    return null;
  }
  return repositoryInfo;
}
