{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  final VirtualFile root=project.getBaseDir();
  GitRepositoryManager manager=GitUtil.getRepositoryManager(project);
  if (manager == null) {
    LOG.info("No GitRepositoryManager instance available. Action cancelled.");
    return;
  }
  final GitRepository gitRepository=manager.getRepositoryForFile(project.getBaseDir());
  final GitRemote remote=GithubUtil.findGitHubRemoteBranch(gitRepository);
  final String pushUrl=GithubUtil.getGithubUrl(remote);
  final String login=GithubSettings.getInstance().getLogin();
  final int index=pushUrl.lastIndexOf(login);
  if (index == -1) {
    Messages.showErrorDialog(project,"Github remote repository doesn't seem to be your own repository: " + pushUrl,CANNOT_PERFORM_GITHUB_REBASE);
    return;
  }
  String repoName=pushUrl.substring(index + login.length() + 1);
  if (repoName.endsWith(".git")) {
    repoName=repoName.substring(0,repoName.length() - 4);
  }
  final AtomicReference<String> remoteForForkParentRepo=new AtomicReference<String>();
  final AtomicReference<String> parentRepoUrlRef=new AtomicReference<String>();
  final String finalRepoName=repoName;
  ProgressManager.getInstance().run(new Task.Modal(project,"Access to GitHub",true){
    public void run(    @NotNull ProgressIndicator indicator){
      try {
        final AtomicReference<RepositoryInfo> repositoryInfoRef=new AtomicReference<RepositoryInfo>();
        GithubUtil.runAndGetValidAuth(project,indicator,new ThrowableConsumer<GithubAuthData,IOException>(){
          @Override public void consume(          GithubAuthData authData) throws IOException {
            repositoryInfoRef.set(GithubUtil.getDetailedRepoInfo(authData,login,finalRepoName));
          }
        }
);
        if (repositoryInfoRef.get() == null) {
          Messages.showErrorDialog(project,"Github repository doesn't seem to be your own repository: " + pushUrl,CANNOT_PERFORM_GITHUB_REBASE);
          return;
        }
        if (!repositoryInfoRef.get().isFork()) {
          Messages.showErrorDialog(project,"Github repository '" + finalRepoName + "' is not a forked one",CANNOT_PERFORM_GITHUB_REBASE);
          return;
        }
        final String parent=repositoryInfoRef.get().getParentName();
        LOG.assertTrue(parent != null,"Parent repository not found!");
        final String parentDotGit=parent + ".git";
        final String parentRepoUrl=GithubApiUtil.getGitHost() + "/" + parentDotGit;
        parentRepoUrlRef.set(parentRepoUrl);
        out:         for (        GitRemote gitRemote : gitRepository.getRemotes()) {
          for (          String url : gitRemote.getUrls()) {
            if (isParentUrl(url,parentDotGit)) {
              remoteForForkParentRepo.set(gitRemote.getName());
              break out;
            }
          }
        }
      }
 catch (      IOException e) {
        LOG.info(e);
        GithubUtil.notifyError(project,"Couldn't get information about the repository",GithubUtil.getErrorTextFromException(e));
      }
    }
  }
);
  final String parentRepoUrl=parentRepoUrlRef.get();
  if (remoteForForkParentRepo.get() == null) {
    final int result=Messages.showYesNoDialog(project,"It is necessary to have '" + parentRepoUrl + "' as a configured remote. Add remote?","Github Rebase",Messages.getQuestionIcon());
    if (result != Messages.OK) {
      return;
    }
  }
  BasicAction.saveAll();
  new Task.Backgroundable(project,"Adding GitHub parent as a remote host"){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      if (remoteForForkParentRepo.get() == null) {
        try {
          LOG.info("Adding GitHub parent as a remote host");
          indicator.setText("Adding GitHub parent as a remote host");
          final GitSimpleHandler addRemoteHandler=new GitSimpleHandler(project,root,GitCommand.REMOTE);
          addRemoteHandler.setSilent(true);
          remoteForForkParentRepo.set("upstream");
          addRemoteHandler.addParameters("add",remoteForForkParentRepo.get(),parentRepoUrl);
          addRemoteHandler.run();
          if (addRemoteHandler.getExitCode() != 0) {
            showErrorMessage(project,"Failed to add GitHub remote: '" + parentRepoUrl + "'",indicator);
          }
          gitRepository.update();
        }
 catch (        VcsException e1) {
          final String message="Error happened during git operation: " + e1.getMessage();
          showErrorMessage(project,message,indicator);
        }
      }
      if (!fetchParentOrNotifyError(project,gitRepository,remoteForForkParentRepo.get(),indicator)) {
        return;
      }
      final GithubRebase action=(GithubRebase)ActionManager.getInstance().getAction("Github.Rebase.Internal");
      action.setRebaseOrigin(remoteForForkParentRepo.get());
      final AnActionEvent actionEvent=new AnActionEvent(e.getInputEvent(),e.getDataContext(),e.getPlace(),e.getPresentation(),e.getActionManager(),e.getModifiers());
      ApplicationManager.getApplication().invokeAndWait(new Runnable(){
        @Override public void run(){
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            @Override public void run(){
              action.actionPerformed(actionEvent);
            }
          }
);
        }
      }
,indicator.getModalityState());
    }
  }
.queue();
}
