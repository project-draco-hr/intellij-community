{
  try {
    final EvaluationContextImpl thisEvaluationContext=getEvaluationContext(evaluationContext);
    ExpressionEvaluator evaluator;
    final ExtractLightMethodObjectHandler.ExtractedData data=getUserData(CompilingEvaluator.COMPILING_EVALUATOR_DATA);
    try {
      evaluator=DebuggerInvocationUtil.commitAndRunReadAction(myProject,new EvaluatingComputable<ExpressionEvaluator>(){
        public ExpressionEvaluator compute() throws EvaluateException {
          final PsiElement psiContext=PositionUtil.getContextElement(evaluationContext);
          return DebuggerUtilsEx.findAppropriateCodeFragmentFactory(getEvaluationText(),psiContext).getEvaluatorBuilder().build(getEvaluationCode(thisEvaluationContext),ContextUtil.getSourcePosition(thisEvaluationContext));
        }
      }
);
    }
 catch (    AnonymousClassException ex) {
      if (Registry.is("debugger.compiling.evaluator") && data != null) {
        evaluator=DebuggerInvocationUtil.commitAndRunReadAction(myProject,new EvaluatingComputable<ExpressionEvaluator>(){
          public ExpressionEvaluator compute() throws EvaluateException {
            final PsiElement psiContext=PositionUtil.getContextElement(evaluationContext);
            return new CompilingEvaluator(getEvaluationText(),getEvaluationCode(thisEvaluationContext),psiContext,data,EvaluationDescriptor.this);
          }
        }
);
      }
 else {
        throw ex;
      }
    }
    if (!thisEvaluationContext.getDebugProcess().isAttached()) {
      throw EvaluateExceptionUtil.PROCESS_EXITED;
    }
    StackFrameProxyImpl frameProxy=thisEvaluationContext.getFrameProxy();
    if (frameProxy == null) {
      throw EvaluateExceptionUtil.NULL_STACK_FRAME;
    }
    final Value value=evaluator.evaluate(thisEvaluationContext);
    if (value instanceof ObjectReference) {
      ObjectReference objRef=(ObjectReference)value;
      if (VirtualMachineProxyImpl.isCollected(objRef)) {
        throw EvaluateExceptionUtil.OBJECT_WAS_COLLECTED;
      }
      thisEvaluationContext.getSuspendContext().keep(objRef);
    }
    myModifier=evaluator.getModifier();
    setLvalue(myModifier != null);
    return value;
  }
 catch (  final EvaluateException ex) {
    throw new EvaluateException(ex.getLocalizedMessage(),ex);
  }
catch (  ObjectCollectedException ex) {
    throw EvaluateExceptionUtil.OBJECT_WAS_COLLECTED;
  }
}
