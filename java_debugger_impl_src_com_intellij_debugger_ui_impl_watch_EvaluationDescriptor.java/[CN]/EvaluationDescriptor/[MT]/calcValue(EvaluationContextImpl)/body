{
  try {
    final EvaluationContextImpl thisEvaluationContext=getEvaluationContext(evaluationContext);
    ExpressionEvaluator evaluator=null;
    try {
      evaluator=DebuggerInvocationUtil.commitAndRunReadAction(myProject,new EvaluatingComputable<ExpressionEvaluator>(){
        public ExpressionEvaluator compute() throws EvaluateException {
          final PsiElement psiContext=PositionUtil.getContextElement(evaluationContext);
          return DebuggerUtilsEx.findAppropriateCodeFragmentFactory(getEvaluationText(),psiContext).getEvaluatorBuilder().build(getEvaluationCode(thisEvaluationContext),ContextUtil.getSourcePosition(thisEvaluationContext));
        }
      }
);
    }
 catch (    UnsupportedExpressionException ex) {
      if (Registry.is("debugger.compiling.evaluator")) {
        evaluator=DebuggerInvocationUtil.commitAndRunReadAction(myProject,new EvaluatingComputable<ExpressionEvaluator>(){
          public ExpressionEvaluator compute() throws EvaluateException {
            final PsiElement psiContext=PositionUtil.getContextElement(evaluationContext);
            if (psiContext == null) {
              return null;
            }
            PsiFile psiFile=psiContext.getContainingFile();
            PsiCodeFragment fragment=createCodeFragment(psiContext);
            try {
              ExtractLightMethodObjectHandler.ExtractedData data=ExtractLightMethodObjectHandler.extractLightMethodObject(myProject,psiFile,fragment,CompilingEvaluator.getGeneratedClassName());
              if (data != null) {
                return new CompilingEvaluatorImpl(psiContext,data);
              }
            }
 catch (            PrepareFailedException e) {
              LOG.info(e);
            }
            return null;
          }
        }
);
      }
      if (evaluator == null) {
        throw ex;
      }
    }
    if (!thisEvaluationContext.getDebugProcess().isAttached()) {
      throw EvaluateExceptionUtil.PROCESS_EXITED;
    }
    StackFrameProxyImpl frameProxy=thisEvaluationContext.getFrameProxy();
    if (frameProxy == null) {
      throw EvaluateExceptionUtil.NULL_STACK_FRAME;
    }
    Value value=evaluator.evaluate(thisEvaluationContext);
    DebuggerUtilsEx.keep(value,thisEvaluationContext);
    myModifier=evaluator.getModifier();
    setLvalue(myModifier != null);
    return value;
  }
 catch (  final EvaluateException ex) {
    throw new EvaluateException(ex.getLocalizedMessage(),ex);
  }
catch (  ObjectCollectedException ex) {
    throw EvaluateExceptionUtil.OBJECT_WAS_COLLECTED;
  }
}
