{
  if (first.type == Exprent.EXPRENT_ASSIGNMENT) {
    AssignmentExprent as=(AssignmentExprent)first;
    if (as.getRight().type == Exprent.EXPRENT_NEW && as.getLeft().type == Exprent.EXPRENT_VAR) {
      NewExprent newex=(NewExprent)as.getRight();
      if (!newex.getLstArrayElements().isEmpty()) {
        VarExprent arrvar=(VarExprent)as.getLeft();
        if (second.type == Exprent.EXPRENT_ASSIGNMENT) {
          AssignmentExprent aas=(AssignmentExprent)second;
          if (aas.getLeft().type == Exprent.EXPRENT_ARRAY) {
            ArrayExprent arrex=(ArrayExprent)aas.getLeft();
            if (arrex.getArray().type == Exprent.EXPRENT_VAR && arrvar.equals(arrex.getArray()) && arrex.getIndex().type == Exprent.EXPRENT_CONST) {
              int constvalue=((ConstExprent)arrex.getIndex()).getIntValue();
              if (constvalue < newex.getLstArrayElements().size()) {
                Exprent init=newex.getLstArrayElements().get(constvalue);
                if (init.type == Exprent.EXPRENT_CONST) {
                  ConstExprent cinit=(ConstExprent)init;
                  VarType arrtype=newex.getNewType().decreaseArrayDim();
                  ConstExprent defaultval=ExprProcessor.getDefaultArrayValue(arrtype);
                  if (cinit.equals(defaultval)) {
                    Exprent tempexpr=aas.getRight();
                    if (!tempexpr.containsExprent(arrvar)) {
                      newex.getLstArrayElements().set(constvalue,tempexpr);
                      if (tempexpr.type == Exprent.EXPRENT_NEW) {
                        NewExprent tempnewex=(NewExprent)tempexpr;
                        int dims=newex.getNewType().arrayDim;
                        if (dims > 1 && !tempnewex.getLstArrayElements().isEmpty()) {
                          tempnewex.setDirectArrayInit(true);
                        }
                      }
                      return true;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return false;
}
