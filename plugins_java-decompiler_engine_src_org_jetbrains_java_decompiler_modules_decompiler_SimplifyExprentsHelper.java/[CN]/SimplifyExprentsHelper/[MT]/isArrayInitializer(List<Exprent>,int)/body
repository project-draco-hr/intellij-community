{
  Exprent current=list.get(index);
  if (current.type == Exprent.EXPRENT_ASSIGNMENT) {
    AssignmentExprent as=(AssignmentExprent)current;
    if (as.getRight().type == Exprent.EXPRENT_NEW && as.getLeft().type == Exprent.EXPRENT_VAR) {
      NewExprent newex=(NewExprent)as.getRight();
      if (newex.getExprType().arrayDim > 0 && newex.getLstDims().size() == 1 && newex.getLstArrayElements().isEmpty() && newex.getLstDims().get(0).type == Exprent.EXPRENT_CONST) {
        int size=((Integer)((ConstExprent)newex.getLstDims().get(0)).getValue()).intValue();
        if (size == 0) {
          return 0;
        }
        VarExprent arrvar=(VarExprent)as.getLeft();
        HashMap<Integer,Exprent> mapInit=new HashMap<Integer,Exprent>();
        int i=1;
        while (index + i < list.size() && i <= size) {
          boolean found=false;
          Exprent expr=list.get(index + i);
          if (expr.type == Exprent.EXPRENT_ASSIGNMENT) {
            AssignmentExprent aas=(AssignmentExprent)expr;
            if (aas.getLeft().type == Exprent.EXPRENT_ARRAY) {
              ArrayExprent arrex=(ArrayExprent)aas.getLeft();
              if (arrex.getArray().type == Exprent.EXPRENT_VAR && arrvar.equals(arrex.getArray()) && arrex.getIndex().type == Exprent.EXPRENT_CONST) {
                int constvalue=((ConstExprent)arrex.getIndex()).getIntValue();
                if (constvalue < size && !mapInit.containsKey(constvalue)) {
                  if (!aas.getRight().containsExprent(arrvar)) {
                    mapInit.put(constvalue,aas.getRight());
                    found=true;
                  }
                }
              }
            }
          }
          if (!found) {
            break;
          }
          i++;
        }
        double fraction=((double)mapInit.size()) / size;
        if ((arrvar.isStack() && fraction > 0) || (size <= 7 && fraction >= 0.3) || (size > 7 && fraction >= 0.7)) {
          List<Exprent> lstRet=new ArrayList<Exprent>();
          VarType arrtype=newex.getNewType().decreaseArrayDim();
          ConstExprent defaultval=ExprProcessor.getDefaultArrayValue(arrtype);
          for (int j=0; j < size; j++) {
            lstRet.add(defaultval.copy());
          }
          int dims=newex.getNewType().arrayDim;
          for (          Entry<Integer,Exprent> ent : mapInit.entrySet()) {
            Exprent tempexpr=ent.getValue();
            lstRet.set(ent.getKey(),tempexpr);
            if (tempexpr.type == Exprent.EXPRENT_NEW) {
              NewExprent tempnewex=(NewExprent)tempexpr;
              if (dims > 1 && !tempnewex.getLstArrayElements().isEmpty()) {
                tempnewex.setDirectArrayInit(true);
              }
            }
          }
          newex.setLstArrayElements(lstRet);
          return mapInit.size();
        }
      }
    }
  }
  return 0;
}
