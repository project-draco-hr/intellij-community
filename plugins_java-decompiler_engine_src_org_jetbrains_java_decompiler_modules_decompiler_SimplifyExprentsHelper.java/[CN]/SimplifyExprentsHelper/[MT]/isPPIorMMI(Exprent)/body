{
  if (first.type == Exprent.EXPRENT_ASSIGNMENT) {
    AssignmentExprent as=(AssignmentExprent)first;
    if (as.getRight().type == Exprent.EXPRENT_FUNCTION) {
      FunctionExprent func=(FunctionExprent)as.getRight();
      if (func.getFuncType() == FunctionExprent.FUNCTION_ADD || func.getFuncType() == FunctionExprent.FUNCTION_SUB) {
        Exprent econd=func.getLstOperands().get(0);
        Exprent econst=func.getLstOperands().get(1);
        if (econst.type != Exprent.EXPRENT_CONST && econd.type == Exprent.EXPRENT_CONST && func.getFuncType() == FunctionExprent.FUNCTION_ADD) {
          econd=econst;
          econst=func.getLstOperands().get(0);
        }
        if (econst.type == Exprent.EXPRENT_CONST && ((ConstExprent)econst).hasValueOne()) {
          Exprent left=as.getLeft();
          if (left.type != Exprent.EXPRENT_VAR && left.equals(econd)) {
            FunctionExprent ret=new FunctionExprent(func.getFuncType() == FunctionExprent.FUNCTION_ADD ? FunctionExprent.FUNCTION_PPI : FunctionExprent.FUNCTION_MMI,Arrays.asList(econd),func.bytecode);
            ret.setImplicitType(VarType.VARTYPE_INT);
            return ret;
          }
        }
      }
    }
  }
  return null;
}
