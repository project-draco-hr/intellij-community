{
  try {
    final PsiElement problemElement=descriptor.getPsiElement();
    final PyClassType type=getClassType(problemElement);
    if (type == null)     return;
    final PyClass cls=type.getPyClass();
    boolean callByClass=type.isDefinition();
    PyStatementList clsStmtList=cls.getStatementList();
    sure(FileModificationService.getInstance().preparePsiElementForWrite(clsStmtList));
    PyFunctionBuilder builder=new PyFunctionBuilder(myIdentifier,cls);
    PsiElement pe=problemElement.getParent();
    String decoratorName=null;
    PyExpression[] args=new PyExpression[0];
    if (pe instanceof PyCallExpression) {
      PyArgumentList arglist=((PyCallExpression)pe).getArgumentList();
      if (arglist == null)       return;
      args=arglist.getArguments();
    }
    boolean madeInstance=false;
    if (callByClass) {
      if (args.length > 0) {
        PyType firstArgType=TypeEvalContext.userInitiated(cls.getProject(),cls.getContainingFile()).getType(args[0]);
        if (firstArgType instanceof PyClassType && ((PyClassType)firstArgType).getPyClass().isSubclass(cls,null)) {
          builder.parameter("self");
          madeInstance=true;
        }
      }
      if (!madeInstance) {
        builder.parameter("cls");
        decoratorName=PyNames.CLASSMETHOD;
      }
    }
 else {
      builder.parameter("self");
    }
    boolean skipFirst=callByClass && madeInstance;
    for (    PyExpression arg : args) {
      if (skipFirst) {
        skipFirst=false;
        continue;
      }
      if (arg instanceof PyKeywordArgument) {
        builder.parameter(((PyKeywordArgument)arg).getKeyword());
      }
 else       if (arg instanceof PyReferenceExpression) {
        PyReferenceExpression refex=(PyReferenceExpression)arg;
        builder.parameter(refex.getReferencedName());
      }
 else {
        builder.parameter("param");
      }
    }
    PyFunction method=builder.buildFunction(project,LanguageLevel.getDefault());
    if (decoratorName != null) {
      PyElementGenerator generator=PyElementGenerator.getInstance(project);
      PyDecoratorList decoratorList=generator.createFromText(LanguageLevel.getDefault(),PyDecoratorList.class,"@" + decoratorName + "\ndef foo(): pass",new int[]{0,0});
      method.addBefore(decoratorList,method.getFirstChild());
    }
    method=(PyFunction)PyUtil.addElementToStatementList(method,clsStmtList,PyNames.INIT.equals(method.getName()));
    if (myReplaceUsage) {
      showTemplateBuilder(method);
    }
  }
 catch (  IncorrectOperationException ignored) {
    PyUtil.showBalloon(project,PyBundle.message("QFIX.failed.to.add.method"),MessageType.ERROR);
  }
}
