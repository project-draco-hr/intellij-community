{
  final VirtualFile antFile=buildFile.getVirtualFile();
  if (!LOG.assertTrue(antFile != null)) {
    return null;
  }
  MessageView ijMessageView=MessageView.SERVICE.getInstance(project);
  Content[] contents=ijMessageView.getContentManager().getContents();
  for (  Content content : contents) {
    if (content.isPinned()) {
      continue;
    }
    AntBuildMessageView buildMessageView=content.getUserData(KEY);
    if (buildMessageView == null) {
      continue;
    }
    if (!antFile.equals(buildMessageView.getBuildFile().getVirtualFile())) {
      continue;
    }
    if (buildMessageView.isStopped()) {
      ijMessageView.getContentManager().removeContent(content,true);
      continue;
    }
    int result=Messages.showYesNoCancelDialog(AntBundle.message("ant.is.active.terminate.confirmation.text"),AntBundle.message("starting.ant.build.dialog.title"),Messages.getQuestionIcon());
switch (result) {
case Messages.YES:
      buildMessageView.stopProcess();
    ijMessageView.getContentManager().removeContent(content,true);
  continue;
case Messages.NO:
continue;
default :
return null;
}
}
final AntBuildMessageView messageView=new AntBuildMessageView(project,buildFile,targets,additionalProperties);
String contentName=buildFile.getPresentableName();
contentName=BUILD_CONTENT_NAME + " (" + contentName+ ")";
final Content content=ContentFactory.SERVICE.getInstance().createContent(messageView.getComponent(),contentName,true);
content.putUserData(KEY,messageView);
ijMessageView.getContentManager().addContent(content);
ijMessageView.getContentManager().setSelectedContent(content);
content.setDisposer(new Disposable(){
@Override public void dispose(){
Disposer.dispose(messageView.myAlarm);
}
}
);
new CloseListener(content,ijMessageView.getContentManager(),project);
if (!buildFile.isRunInBackground()) {
final ToolWindow tw=ToolWindowManager.getInstance(project).getToolWindow(ToolWindowId.MESSAGES_WINDOW);
if (tw != null) {
tw.activate(null,false);
}
}
return messageView;
}
