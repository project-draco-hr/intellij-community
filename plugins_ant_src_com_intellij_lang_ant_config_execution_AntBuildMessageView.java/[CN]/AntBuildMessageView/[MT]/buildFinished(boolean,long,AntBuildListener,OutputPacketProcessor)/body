{
  final boolean aborted=isProgressAborted || myIsAborted;
  dispatcher.processOutput(new Printable(){
    @Override public void printOn(    Printer printer){
      if (!myProject.isDisposed()) {
        final String message=getFinishStatusText(aborted,buildTimeInMilliseconds);
        addCommand(new FinishBuildCommand(message));
        final StatusBar statusBar=WindowManager.getInstance().getStatusBar(myProject);
        if (statusBar != null) {
          statusBar.setInfo(message);
        }
        final AntBuildFileBase buildFile=myBuildFile;
        final boolean isBackground=buildFile != null && buildFile.isRunInBackground();
        final boolean shouldActivate=!isBackground || getErrorCount() > 0;
        UIUtil.invokeLaterIfNeeded(new Runnable(){
          public void run(){
            final Runnable finishRunnable=new Runnable(){
              public void run(){
                final int errorCount=getErrorCount();
                try {
                  final AntBuildFileBase buildFile=myBuildFile;
                  if (buildFile != null) {
                    if (errorCount == 0 && buildFile.isViewClosedWhenNoErrors()) {
                      close();
                    }
 else                     if (errorCount > 0) {
                      myTreeView.scrollToFirstError();
                    }
 else {
                      myTreeView.scrollToStatus();
                    }
                  }
 else {
                    myTreeView.scrollToLastMessage();
                  }
                }
  finally {
                  VirtualFileManager.getInstance().asyncRefresh(new Runnable(){
                    public void run(){
                      antBuildListener.buildFinished(aborted ? AntBuildListener.ABORTED : AntBuildListener.FINISHED_SUCCESSFULLY,errorCount);
                    }
                  }
);
                }
              }
            }
;
            if (shouldActivate) {
              final ToolWindow toolWindow=!myProject.isDisposed() ? ToolWindowManager.getInstance(myProject).getToolWindow(ToolWindowId.MESSAGES_WINDOW) : null;
              if (toolWindow != null) {
                toolWindow.activate(finishRunnable,false);
              }
 else {
                finishRunnable.run();
              }
            }
 else {
              finishRunnable.run();
            }
          }
        }
);
      }
    }
  }
);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (!myIsOutputPaused) {
        new OutputFlusher().doFlush();
      }
    }
  }
);
}
