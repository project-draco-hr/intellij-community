{
  final SmartPsiElementPointer<PsiDeclarationStatement> pointer=editor.getUserData(DECLARATION_KEY);
  final PsiDeclarationStatement declaration=pointer != null ? pointer.getElement() : null;
  final PsiType type=getVariableType(declaration);
  if (type != null) {
    VariablesProcessor proc=findVariablesOfType(declaration,type);
    if (proc.size() > 0) {
      List<PsiVariable> vars=new ArrayList<>();
      for (int i=0; i < proc.size(); i++) {
        final PsiVariable variable=proc.getResult(i);
        PsiElement outerCodeBlock=PsiUtil.getVariableCodeBlock(variable,null);
        if (outerCodeBlock == null)         continue;
        if (ReferencesSearch.search(variable,new LocalSearchScope(outerCodeBlock)).forEach(new Processor<PsiReference>(){
          @Override public boolean process(          PsiReference reference){
            final PsiElement element=reference.getElement();
            if (element != null) {
              return HighlightControlFlowUtil.getInnerClassVariableReferencedFrom(variable,element) == null;
            }
            return true;
          }
        }
)) {
          vars.add(variable);
        }
      }
      if (vars.isEmpty()) {
        return true;
      }
      if (vars.size() == 1) {
        replaceWithAssignment(declaration,proc.getResult(0),editor);
        return true;
      }
      final DefaultListModel<PsiVariable> model=new DefaultListModel<>();
      for (      PsiVariable var : vars) {
        model.addElement(var);
      }
      final JBList list=new JBList(model);
      list.setCellRenderer(new ListCellRendererWrapper<PsiVariable>(){
        @Override public void customize(        JList list,        PsiVariable value,        int index,        boolean selected,        boolean hasFocus){
          if (value != null) {
            setText(value.getName());
            setIcon(value.getIcon(0));
          }
        }
      }
);
      final VisualPosition visualPosition=editor.getCaretModel().getVisualPosition();
      final Point point=editor.visualPositionToXY(new VisualPosition(visualPosition.line + 1,visualPosition.column));
      JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Choose variable to reassign").setRequestFocus(true).setItemChoosenCallback(new Runnable(){
        public void run(){
          replaceWithAssignment(declaration,(PsiVariable)list.getSelectedValue(),editor);
        }
      }
).createPopup().show(new RelativePoint(editor.getContentComponent(),point));
    }
    return true;
  }
  return false;
}
