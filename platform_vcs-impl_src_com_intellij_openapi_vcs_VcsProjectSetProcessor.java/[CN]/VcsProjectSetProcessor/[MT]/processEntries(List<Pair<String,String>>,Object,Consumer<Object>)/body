{
  final VirtualFile directory;
  if (param instanceof VirtualFile) {
    directory=(VirtualFile)param;
  }
 else {
    FileChooserDescriptor descriptor=new FileChooserDescriptor(false,true,false,false,false,false);
    descriptor.setTitle("Select Destination Folder");
    descriptor.setDescription("");
    VirtualFile[] files=FileChooser.chooseFiles(descriptor,null,null);
    if (files.length == 0)     return;
    directory=files[0];
  }
  for (  Pair<String,String> pair : entries) {
    if ("url".equals(pair.getFirst())) {
      try {
        String url=pair.getSecond();
        String[] split=splitUrl(url);
        String protocol=new URI(url).getScheme();
        VcsCheckoutProcessor processor=VcsCheckoutProcessor.getProcessor(protocol);
        if (processor == null) {
          LOG.error("Checkout processor not found for " + protocol);
        }
 else {
          processor.checkout(split[0],split[1],directory,new CheckoutProvider.Listener(){
            @Override public void directoryCheckedOut(            File directory,            VcsKey vcs){
            }
            @Override public void checkoutCompleted(){
              onFinish.consume(directory);
            }
          }
);
        }
      }
 catch (      URISyntaxException e) {
        LOG.error(e);
      }
    }
  }
}
