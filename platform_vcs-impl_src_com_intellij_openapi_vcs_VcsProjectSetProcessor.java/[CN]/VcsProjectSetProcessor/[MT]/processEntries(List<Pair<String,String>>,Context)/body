{
  final VirtualFile directory;
  if (context.directory != null) {
    directory=context.directory;
  }
 else {
    FileChooserDescriptor descriptor=new FileChooserDescriptor(false,true,false,false,false,false);
    descriptor.setTitle("Select Destination Folder");
    descriptor.setDescription("");
    VirtualFile[] files=FileChooser.chooseFiles(descriptor,null,null);
    if (files.length == 0)     return false;
    directory=files[0];
  }
  for (  Pair<String,String> pair : entries) {
    String vcs=pair.getFirst();
    VcsCheckoutProcessor processor=VcsCheckoutProcessor.getProcessor(vcs);
    if (processor == null) {
      LOG.error("Checkout processor not found for " + vcs);
      continue;
    }
    String url=pair.getSecond();
    String[] split=splitUrl(url);
synchronized (myLock) {
      final AtomicBoolean done=new AtomicBoolean();
      try {
        processor.checkout(split[0],split[1],directory,new CheckoutProvider.Listener(){
          @Override public void directoryCheckedOut(          File directory,          VcsKey vcs){
          }
          @Override public void checkoutCompleted(){
            done.set(true);
            myLock.notifyAll();
          }
        }
);
        if (!done.get()) {
          myLock.wait();
        }
      }
 catch (      InterruptedException e) {
        return false;
      }
    }
  }
  return true;
}
