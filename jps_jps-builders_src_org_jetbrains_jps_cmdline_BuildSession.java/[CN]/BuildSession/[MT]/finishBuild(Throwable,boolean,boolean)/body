{
  CmdlineRemoteProto.Message lastMessage=null;
  try {
    if (error instanceof CannotLoadJpsModelException) {
      String text="Failed to load project configuration: " + StringUtil.decapitalize(error.getMessage());
      String path=((CannotLoadJpsModelException)error).getFile().getAbsolutePath();
      lastMessage=CmdlineProtoUtil.toMessage(mySessionId,CmdlineProtoUtil.createCompileMessage(BuildMessage.Kind.ERROR,text,path,-1,-1,-1,-1,-1,-1.0f));
    }
 else     if (error != null) {
      Throwable cause=error.getCause();
      if (cause == null) {
        cause=error;
      }
      final ByteArrayOutputStream out=new ByteArrayOutputStream();
      final PrintStream stream=new PrintStream(out);
      try {
        cause.printStackTrace(stream);
      }
  finally {
        stream.close();
      }
      final StringBuilder messageText=new StringBuilder();
      messageText.append("Internal error: (").append(cause.getClass().getName()).append(") ").append(cause.getMessage());
      final String trace=out.toString();
      if (!trace.isEmpty()) {
        messageText.append("\n").append(trace);
      }
      lastMessage=CmdlineProtoUtil.toMessage(mySessionId,CmdlineProtoUtil.createFailure(messageText.toString(),cause));
    }
 else {
      CmdlineRemoteProto.Message.BuilderMessage.BuildEvent.Status status=CmdlineRemoteProto.Message.BuilderMessage.BuildEvent.Status.SUCCESS;
      if (myCanceled) {
        status=CmdlineRemoteProto.Message.BuilderMessage.BuildEvent.Status.CANCELED;
      }
 else       if (hadBuildErrors) {
        status=CmdlineRemoteProto.Message.BuilderMessage.BuildEvent.Status.ERRORS;
      }
 else       if (!doneSomething) {
        status=CmdlineRemoteProto.Message.BuilderMessage.BuildEvent.Status.UP_TO_DATE;
      }
      lastMessage=CmdlineProtoUtil.toMessage(mySessionId,CmdlineProtoUtil.createBuildCompletedEvent("build completed",status));
    }
  }
 catch (  Throwable e) {
    lastMessage=CmdlineProtoUtil.toMessage(mySessionId,CmdlineProtoUtil.createFailure(e.getMessage(),e));
  }
 finally {
    try {
      myChannel.writeAndFlush(lastMessage).await();
    }
 catch (    InterruptedException e) {
      LOG.info(e);
    }
  }
}
