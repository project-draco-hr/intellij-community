{
  super.visitClass(aClass);
  if (aClass.isEnum() || aClass.hasModifierProperty(PsiModifier.FINAL)) {
    return;
  }
  final PsiMethod[] constructors=aClass.getConstructors();
  if (constructors.length == 0) {
    return;
  }
  for (  PsiMethod constructor : constructors) {
    if (!constructor.hasModifierProperty(PsiModifier.PRIVATE)) {
      return;
    }
  }
  final PsiClass[] innerClasses=aClass.getInnerClasses();
  for (  PsiClass innerClass : innerClasses) {
    if (isExtendedByInnerClass(innerClass,aClass,new HashSet<PsiClass>())) {
      return;
    }
  }
  registerClassError(aClass,aClass);
}
