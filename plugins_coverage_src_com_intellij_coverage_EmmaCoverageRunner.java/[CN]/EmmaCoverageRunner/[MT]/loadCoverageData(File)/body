{
  ProjectData projectInfo=new ProjectData();
  try {
    final IMergeable[] data=DataFactory.load(sessionDataFile);
    IMetaData metaData=(IMetaData)data[DataFactory.TYPE_METADATA];
    ICoverageData coverageData=(ICoverageData)data[DataFactory.TYPE_COVERAGEDATA];
    if (metaData == null || coverageData == null)     return projectInfo;
    final Iterator iterator=metaData.iterator();
    while (iterator.hasNext()) {
      ClassDescriptor descriptor=(ClassDescriptor)iterator.next();
      final ICoverageData.DataHolder coverage=coverageData.getCoverage(descriptor);
      if (coverage != null) {
        final String classVMName=descriptor.getClassVMName();
        final ClassData classInfo=projectInfo.getOrCreateClassData(classVMName.replace('/','.'));
        final MethodDescriptor[] methodDescriptors=descriptor.getMethods();
        if (methodDescriptors.length > coverage.m_coverage.length) {
          LOG.info("broken data for " + classVMName + " - descriptors: "+ methodDescriptors.length+ "; gathered coverage: "+ coverage.m_coverage.length);
          continue;
        }
        for (int i=0; i < methodDescriptors.length; i++) {
          MethodDescriptor methodDescriptor=methodDescriptors[i];
          final boolean[] methodCoverage=coverage.m_coverage[i];
          final IntObjectMap lineMap=methodDescriptor.getLineMap();
          if (lineMap == null)           continue;
          int[] lines=lineMap.keys();
          for (          int line : lines) {
            final LineData lineInfo=classInfo.getOrCreateLine(line,methodDescriptor.getName() + methodDescriptor.getName());
            lineInfo.setStatus(calcStatus(methodCoverage,lineMap,lineInfo));
          }
        }
      }
    }
  }
 catch (  IOException e) {
    return projectInfo;
  }
  return projectInfo;
}
