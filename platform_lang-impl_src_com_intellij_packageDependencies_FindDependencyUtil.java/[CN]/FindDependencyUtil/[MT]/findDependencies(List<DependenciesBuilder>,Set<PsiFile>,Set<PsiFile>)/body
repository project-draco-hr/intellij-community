{
  final List<UsageInfo> usages=new ArrayList<>();
  ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  int totalCount=searchIn.size();
  int count=0;
  nextFile:   for (  final PsiFile psiFile : searchIn) {
    count=updateIndicator(indicator,totalCount,count,psiFile);
    if (!psiFile.isValid())     continue;
    final Set<PsiFile> precomputedDeps;
    if (builders != null) {
      final Set<PsiFile> depsByFile=new HashSet<>();
      for (      DependenciesBuilder builder : builders) {
        final Set<PsiFile> deps=builder.getDependencies().get(psiFile);
        if (deps != null) {
          depsByFile.addAll(deps);
        }
      }
      precomputedDeps=new HashSet<>(depsByFile);
      precomputedDeps.retainAll(searchFor);
      if (precomputedDeps.isEmpty())       continue nextFile;
    }
 else {
      precomputedDeps=Collections.unmodifiableSet(searchFor);
    }
    analyzeFileDependencies(psiFile,precomputedDeps,usages);
  }
  return usages.toArray(new UsageInfo[usages.size()]);
}
