{
  mySchemeManager=schemeManagerFactory.create(TEMPLATES_DIR_PATH,new BaseSchemeProcessor<TemplateGroup,TemplateGroup>(){
    @Nullable @Override public TemplateGroup readScheme(    @NotNull Element element,    boolean duringLoad){
      return readTemplateFile(element,element.getAttributeValue("group"),false,false,getClass().getClassLoader());
    }
    @NotNull @Override public SchemeState getState(    @NotNull TemplateGroup template){
      for (      TemplateImpl t : template.getElements()) {
        if (differsFromDefault(t)) {
          return SchemeState.POSSIBLY_CHANGED;
        }
      }
      return SchemeState.NON_PERSISTENT;
    }
    @NotNull @Override public Element writeScheme(    @NotNull TemplateGroup template){
      Element templateSetElement=new Element(TEMPLATE_SET);
      templateSetElement.setAttribute(GROUP,template.getName());
      for (      TemplateImpl t : template.getElements()) {
        if (differsFromDefault(t)) {
          templateSetElement.addContent(serializeTemplate(t));
        }
      }
      return templateSetElement;
    }
    @Override public void initScheme(    @NotNull final TemplateGroup scheme){
      for (      TemplateImpl template : scheme.getElements()) {
        addTemplateImpl(template);
      }
    }
    @Override public void onSchemeAdded(    @NotNull final TemplateGroup scheme){
      for (      TemplateImpl template : scheme.getElements()) {
        addTemplateImpl(template);
      }
    }
    @Override public void onSchemeDeleted(    @NotNull final TemplateGroup scheme){
      for (      TemplateImpl template : scheme.getElements()) {
        removeTemplate(template);
      }
    }
  }
);
  for (  TemplateGroup group : mySchemeManager.loadSchemes()) {
    for (    TemplateImpl template : group.getElements()) {
      addTemplateImpl(template);
    }
  }
  loadDefaultLiveTemplates();
}
