{
  final String lastBaseNameCalculationFileName=file.getUserData(LAST_CALCULATION_FILE_NAME);
  final String name=file.getName();
  if (name.equals(lastBaseNameCalculationFileName)) {
    final String baseName=file.getUserData(BASE_NAME);
    LOG.assertTrue(baseName != null);
    return baseName;
  }
  final String calculatedBaseName;
  if (!StringUtil.containsChar(name,'_')) {
    calculatedBaseName=FileUtil.getNameWithoutExtension(name);
  }
 else {
    final Matcher matcher=LOCALE_PATTERN.matcher(name);
    final String baseNameWithExtension;
    int matchIndex=0;
    while (matcher.find(matchIndex)) {
      final MatchResult matchResult=matcher.toMatchResult();
      final String[] split=matchResult.group(1).split("_");
      if (split.length > 1) {
        final String langCode=split[1];
        if (!LOCALES_LANGUAGE_CODES.getValue().contains(langCode)) {
          matchIndex=matchResult.start(1) + 1;
          continue;
        }
        baseNameWithExtension=name.substring(0,matchResult.start(1)) + name.substring(matchResult.end(1));
        return FileUtil.getNameWithoutExtension(baseNameWithExtension);
      }
    }
    baseNameWithExtension=name;
    calculatedBaseName=FileUtil.getNameWithoutExtension(baseNameWithExtension);
  }
  file.putUserData(LAST_CALCULATION_FILE_NAME,name);
  file.putUserData(BASE_NAME,calculatedBaseName);
  return calculatedBaseName;
}
