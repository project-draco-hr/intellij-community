{
  extend(CompletionType.BASIC,psiElement().withLanguage(PythonLanguage.getInstance()).and(DICT_KEY),new CompletionProvider<CompletionParameters>(){
    protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      PsiElement original=parameters.getOriginalPosition();
      PsiElement operand=PsiTreeUtil.getParentOfType(original,PySubscriptionExpression.class).getOperand();
      if (operand != null) {
        PsiReference reference=operand.getReference();
        if (reference != null) {
          PsiElement resolvedElement=reference.resolve();
          if (resolvedElement instanceof PyTargetExpression) {
            PyDictLiteralExpression dict=PsiTreeUtil.getNextSiblingOfType(resolvedElement,PyDictLiteralExpression.class);
            if (dict != null) {
              addDictLiteralKeys(dict,result);
              PsiFile file=parameters.getOriginalFile();
              addAdditionalKeys(file,operand,result);
            }
          }
        }
      }
    }
    private void addAdditionalKeys(    PsiFile file,    PsiElement operand,    CompletionResultSet result){
      PySubscriptionExpression[] subscriptionExpressions=PyUtil.getAllChildrenOfType(file,PySubscriptionExpression.class);
      for (      PySubscriptionExpression expr : subscriptionExpressions) {
        if (expr.getOperand().getText().equals(operand.getText())) {
          PsiElement parent=expr.getParent();
          if (parent instanceof PyAssignmentStatement) {
            if (expr.equals(((PyAssignmentStatement)parent).getLeftHandSideExpression())) {
              PyExpression key=expr.getIndexExpression();
              if (key != null) {
                LookupElementBuilder item;
                item=LookupElementBuilder.create(key.getText()).setTypeText("dict key").setIcon(Icons.PARAMETER_ICON);
                result.addElement(item);
              }
            }
          }
        }
      }
    }
    private void addDictLiteralKeys(    PyDictLiteralExpression dict,    CompletionResultSet result){
      PyKeyValueExpression[] keyValues=dict.getElements();
      for (      PyKeyValueExpression expression : keyValues) {
        LookupElementBuilder item;
        item=LookupElementBuilder.create(expression.getKey().getText()).setTypeText("dict key").setIcon(Icons.PARAMETER_ICON);
        result.addElement(item);
      }
    }
  }
);
}
