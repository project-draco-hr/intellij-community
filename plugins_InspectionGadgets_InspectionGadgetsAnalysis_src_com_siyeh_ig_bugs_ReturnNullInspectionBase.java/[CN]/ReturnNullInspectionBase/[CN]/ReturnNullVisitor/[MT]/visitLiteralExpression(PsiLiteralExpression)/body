{
  super.visitLiteralExpression(value);
  final String text=value.getText();
  if (!PsiKeyword.NULL.equals(text)) {
    return;
  }
  PsiElement parent=value.getParent();
  while (parent instanceof PsiParenthesizedExpression || parent instanceof PsiConditionalExpression || parent instanceof PsiTypeCastExpression) {
    parent=parent.getParent();
  }
  if (!(parent instanceof PsiReturnStatement)) {
    return;
  }
  final PsiElement element=PsiTreeUtil.getParentOfType(value,PsiMethod.class,PsiLambdaExpression.class);
  final PsiMethod method;
  final PsiType returnType;
  if (element instanceof PsiMethod) {
    method=(PsiMethod)element;
    returnType=method.getReturnType();
  }
 else   if (element instanceof PsiLambdaExpression) {
    final PsiType functionalInterfaceType=((PsiLambdaExpression)element).getFunctionalInterfaceType();
    method=LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType);
    returnType=LambdaUtil.getFunctionalInterfaceReturnType(functionalInterfaceType);
  }
 else {
    return;
  }
  if (method == null || returnType == null) {
    return;
  }
  final PsiClass aClass=PsiUtil.resolveClassInClassTypeOnly(returnType);
  if (aClass != null && "java.util.Optional".equals(aClass.getQualifiedName())) {
    registerError(value,value);
    return;
  }
  if (m_ignorePrivateMethods && method.hasModifierProperty(PsiModifier.PRIVATE)) {
    return;
  }
  final NullableNotNullManager nullableNotNullManager=NullableNotNullManager.getInstance(method.getProject());
  if (nullableNotNullManager.isNullable(method,false)) {
    return;
  }
  if (CollectionUtils.isCollectionClassOrInterface(returnType)) {
    if (m_reportCollectionMethods) {
      registerError(value,value);
    }
  }
 else   if (returnType.getArrayDimensions() > 0) {
    if (m_reportArrayMethods) {
      registerError(value,value);
    }
  }
 else {
    if (m_reportObjectMethods) {
      registerError(value,value);
    }
  }
}
