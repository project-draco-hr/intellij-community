{
  final PsiElement elt=(PsiElement)infos[0];
  if (!AnnotationUtil.isAnnotatingApplicable(elt)) {
    return null;
  }
  final PsiElement element=PsiTreeUtil.getParentOfType(elt,PsiMethod.class,PsiLambdaExpression.class);
  if (element instanceof PsiLambdaExpression) {
    return null;
  }
  if (element instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)element;
    final PsiClass aClass=PsiUtil.resolveClassInClassTypeOnly(method.getReturnType());
    if (aClass != null && CommonClassNames.JAVA_UTIL_OPTIONAL.equals(aClass.getQualifiedName())) {
      return new ReplaceWithEmptyOptionalFix();
    }
  }
  final NullableNotNullManager manager=NullableNotNullManager.getInstance(elt.getProject());
  return new DelegatingFix(new AnnotateMethodFix(manager.getDefaultNullable(),ArrayUtil.toStringArray(manager.getNotNulls())){
    @Override public int shouldAnnotateBaseMethod(    PsiMethod method,    PsiMethod superMethod,    Project project){
      return ReturnNullInspectionBase.this.shouldAnnotateBaseMethod(method,superMethod);
    }
  }
);
}
