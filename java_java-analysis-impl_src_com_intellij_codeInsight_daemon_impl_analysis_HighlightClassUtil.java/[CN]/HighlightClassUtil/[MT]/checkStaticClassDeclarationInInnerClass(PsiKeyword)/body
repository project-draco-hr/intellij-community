{
  if (new PsiMatcherImpl(keyword).parent(PsiMatchers.hasClass(PsiClass.class)).dot(JavaMatchers.hasModifier(PsiModifier.STATIC,true)).parent(PsiMatchers.hasClass(PsiClass.class)).dot(JavaMatchers.hasModifier(PsiModifier.STATIC,false)).parent(PsiMatchers.hasClass(PsiClass.class,PsiDeclarationStatement.class,PsiNewExpression.class,PsiEnumConstant.class)).getElement() == null) {
    return null;
  }
  PsiClass aClass=(PsiClass)keyword.getParent();
  if (PsiUtilCore.hasErrorElementChild(aClass) || aClass.getQualifiedName() == null && !aClass.isInterface())   return null;
  PsiElement context=null;
  PsiModifierList modifierList=aClass.getModifierList();
  PsiElement[] children=modifierList.getChildren();
  for (  PsiElement element : children) {
    if (Comparing.equal(element.getText(),PsiModifier.STATIC)) {
      context=element;
      break;
    }
  }
  TextRange range=context == null ? null : context.getTextRange();
  if (range == null) {
    range=HighlightNamesUtil.getClassDeclarationTextRange(aClass);
  }
  String message=JavaErrorMessages.message("static.declaration.in.inner.class");
  HighlightInfo errorResult=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range).descriptionAndTooltip(message).create();
  if (context != keyword) {
    QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createModifierListFix(aClass,PsiModifier.STATIC,false,false));
  }
  QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createModifierListFix(aClass.getContainingClass(),PsiModifier.STATIC,true,false));
  return errorResult;
}
