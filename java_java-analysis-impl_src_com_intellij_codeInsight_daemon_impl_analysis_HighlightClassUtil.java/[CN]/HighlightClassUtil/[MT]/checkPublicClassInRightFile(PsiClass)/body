{
  PsiFile containingFile=aClass.getContainingFile();
  if (aClass.getParent() != containingFile || !aClass.hasModifierProperty(PsiModifier.PUBLIC) || !(containingFile instanceof PsiJavaFile))   return null;
  PsiJavaFile file=(PsiJavaFile)containingFile;
  VirtualFile virtualFile=file.getVirtualFile();
  if (virtualFile == null || aClass.getName().equals(virtualFile.getNameWithoutExtension())) {
    return null;
  }
  String message=JavaErrorMessages.message("public.class.should.be.named.after.file",aClass.getName());
  TextRange range=HighlightNamesUtil.getClassDeclarationTextRange(aClass);
  HighlightInfo errorResult=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(aClass,range.getStartOffset(),range.getEndOffset()).descriptionAndTooltip(message).create();
  PsiModifierList psiModifierList=aClass.getModifierList();
  QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createModifierListFix(psiModifierList,PsiModifier.PUBLIC,false,false));
  PsiClass[] classes=file.getClasses();
  if (classes.length > 1) {
    QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createMoveClassToSeparateFileFix(aClass));
  }
  for (  PsiClass otherClass : classes) {
    if (!otherClass.getManager().areElementsEquivalent(otherClass,aClass) && otherClass.hasModifierProperty(PsiModifier.PUBLIC) && otherClass.getName().equals(virtualFile.getNameWithoutExtension())) {
      return errorResult;
    }
  }
  QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createRenameFileFix(aClass.getName() + JavaFileType.DOT_DEFAULT_EXTENSION));
  QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createRenameElementFix(aClass));
  return errorResult;
}
