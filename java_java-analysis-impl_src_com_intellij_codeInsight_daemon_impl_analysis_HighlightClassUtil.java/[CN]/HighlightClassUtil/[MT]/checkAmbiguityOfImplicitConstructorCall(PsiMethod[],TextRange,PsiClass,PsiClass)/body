{
  PsiElement resolved=JavaResolveUtil.resolveImaginarySuperCallInThisPlace(subClass,subClass.getProject(),superClass);
  if (resolved != null) {
    return null;
  }
  List<PsiMethod> varargConstructors=new ArrayList<>();
  for (  PsiMethod constructor : constructors) {
    final PsiParameter[] parameters=constructor.getParameterList().getParameters();
    if (parameters.length == 1 && parameters[0].isVarArgs()) {
      varargConstructors.add(constructor);
      if (varargConstructors.size() == 2)       break;
    }
  }
  if (varargConstructors.size() > 1) {
    final String m1=PsiFormatUtil.formatMethod(varargConstructors.get(0),PsiSubstitutor.EMPTY,PsiFormatUtilBase.SHOW_CONTAINING_CLASS | PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_PARAMETERS,PsiFormatUtilBase.SHOW_TYPE);
    final String m2=PsiFormatUtil.formatMethod(varargConstructors.get(1),PsiSubstitutor.EMPTY,PsiFormatUtilBase.SHOW_CONTAINING_CLASS | PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_PARAMETERS,PsiFormatUtilBase.SHOW_TYPE);
    return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range).descriptionAndTooltip(JavaErrorMessages.message("ambiguous.method.call",m1,m2)).create();
  }
  return null;
}
