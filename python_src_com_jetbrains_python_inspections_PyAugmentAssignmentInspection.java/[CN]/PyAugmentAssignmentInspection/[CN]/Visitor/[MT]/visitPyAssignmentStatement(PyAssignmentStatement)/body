{
  if (node.getAssignedValue() instanceof PyBinaryExpression) {
    final PyExpression target=node.getLeftHandSideExpression();
    final PyBinaryExpression expression=(PyBinaryExpression)node.getAssignedValue();
    if (expression == null)     return;
    PyExpression leftExpression=expression.getLeftExpression();
    PyExpression rightExpression=expression.getRightExpression();
    if (rightExpression instanceof PyParenthesizedExpression)     rightExpression=((PyParenthesizedExpression)rightExpression).getContainedExpression();
    if (rightExpression == null || target == null)     return;
    boolean changedParts=false;
    final String targetText=target.getText();
    final String rightText=rightExpression.getText();
    if (rightText.equals(targetText)) {
      final PyExpression tmp=rightExpression;
      rightExpression=leftExpression;
      leftExpression=tmp;
      changedParts=true;
    }
    final PyElementType op=expression.getOperator();
    final TokenSet operations=TokenSet.create(PyTokenTypes.PLUS,PyTokenTypes.MINUS,PyTokenTypes.MULT,PyTokenTypes.FLOORDIV,PyTokenTypes.DIV,PyTokenTypes.PERC,PyTokenTypes.AND,PyTokenTypes.OR,PyTokenTypes.XOR,PyTokenTypes.LTLT,PyTokenTypes.GTGT,PyTokenTypes.EXP);
    final TokenSet commutativeOperations=TokenSet.create(PyTokenTypes.PLUS,PyTokenTypes.MULT);
    if ((operations.contains(op) && !changedParts) || (changedParts && commutativeOperations.contains(op))) {
      if ((leftExpression instanceof PyReferenceExpression || leftExpression instanceof PySubscriptionExpression)) {
        if (leftExpression.getText().equals(targetText)) {
          if (rightExpression instanceof PyNumericLiteralExpression) {
            final AugmentedAssignmentQuickFix quickFix=new AugmentedAssignmentQuickFix();
            registerProblem(node,"Assignment can be replaced with augmented assignment",quickFix);
          }
 else {
            final PyType type=myTypeEvalContext.getType(rightExpression);
            if (type != null) {
              final PyBuiltinCache cache=PyBuiltinCache.getInstance(rightExpression);
              if (PyTypeChecker.match(cache.getComplexType(),type,myTypeEvalContext) || (PyTypeChecker.match(cache.getStringType(LanguageLevel.forElement(rightExpression)),type,myTypeEvalContext) && !changedParts)) {
                registerProblem(node,"Assignment can be replaced with augmented assignment",new AugmentedAssignmentQuickFix());
              }
            }
          }
        }
      }
    }
  }
}
