{
  final WrapImpl wrap=(WrapImpl)rootBlock.getWrap();
  if (wrap != null) {
    wrap.registerParent(currentWrapParent);
    currentWrapParent=wrap;
  }
  TextRange textRange=rootBlock.getTextRange();
  final int blockStartOffset=textRange.getStartOffset();
  if (parent != null) {
    checkRanges(parent,textRange);
  }
  myCurrentWhiteSpace.append(blockStartOffset,myModel,myOptions);
  if (myCollectAlignmentsInsideFormattingRange && rootBlock.getAlignment() != null && isAffectedByFormatting(rootBlock) && !myInsideFormatRestrictingTag) {
    myAlignmentsInsideRangeToModify.add(rootBlock.getAlignment());
  }
  if (rootBlock.getAlignment() != null) {
    myBlocksToAlign.putValue(rootBlock.getAlignment(),rootBlock);
  }
  ReadOnlyBlockInformationProvider previousProvider=myReadOnlyBlockInformationProvider;
  try {
    if (rootBlock instanceof ReadOnlyBlockInformationProvider) {
      myReadOnlyBlockInformationProvider=(ReadOnlyBlockInformationProvider)rootBlock;
    }
    if (isInsideFormattingRanges(rootBlock,rootBlockIsRightBlock) || myCollectAlignmentsInsideFormattingRange && isInsideExtendedAffectedRange(rootBlock)) {
      final List<Block> subBlocks=rootBlock.getSubBlocks();
      if (subBlocks.isEmpty() || myReadOnlyBlockInformationProvider != null && myReadOnlyBlockInformationProvider.isReadOnly(rootBlock)) {
        final AbstractBlockWrapper wrapper=processSimpleBlock(rootBlock,parent,false,index,parentBlock);
        if (!subBlocks.isEmpty()) {
          wrapper.setIndent((IndentImpl)subBlocks.get(0).getIndent());
        }
        return wrapper;
      }
      return buildCompositeBlock(rootBlock,parent,index,currentWrapParent,rootBlockIsRightBlock);
    }
 else {
      return processSimpleBlock(rootBlock,parent,true,index,parentBlock);
    }
  }
  finally {
    myReadOnlyBlockInformationProvider=previousProvider;
  }
}
