{
  VirtualFile jar=getJarByPsiFile(psiFile);
  if (jar == null)   return Collections.emptyList();
  final String jarName=jar.getNameWithoutExtension();
  int index=jarName.lastIndexOf('-');
  if (index == -1)   return Collections.emptyList();
  final String version=jarName.substring(index + 1);
  final String artifactId=jarName.substring(0,index);
  if (!ARTIFACT_IDENTIFIER.matcher(version).matches() || !ARTIFACT_IDENTIFIER.matcher(artifactId).matches()) {
    return Collections.emptyList();
  }
  final Set<Library> libraries=new HashSet<Library>();
  for (  LibraryOrderEntry orderEntry : orderEntries) {
    ContainerUtil.addIfNotNull(libraries,orderEntry.getLibrary());
  }
  if (libraries.isEmpty())   return Collections.emptyList();
  final String sourceFileName=jarName + "-sources.jar";
  for (  Library library : libraries) {
    for (    VirtualFile file : library.getFiles(OrderRootType.SOURCES)) {
      if (file.getPath().contains(sourceFileName)) {
        if (isRootInExistingFile(file)) {
          return Collections.emptyList();
        }
      }
    }
  }
  final File libSourceDir=getLibrarySourceDir();
  final File sourceFile=new File(libSourceDir,sourceFileName);
  if (sourceFile.exists()) {
    return Collections.<AttachSourcesAction>singleton(new LightAttachSourcesAction(){
      @Override public String getName(){
        return "Attach downloaded source";
      }
      @Override public String getBusyText(){
        return getName();
      }
      @Override public ActionCallback perform(      List<LibraryOrderEntry> orderEntriesContainingFile){
        attachSourceJar(sourceFile,libraries);
        return new ActionCallback.Done();
      }
    }
);
  }
  return Collections.<AttachSourcesAction>singleton(new LightAttachSourcesAction(){
    @Override public String getName(){
      return "Download...";
    }
    @Override public String getBusyText(){
      return "Searching...";
    }
    @Override public ActionCallback perform(    List<LibraryOrderEntry> orderEntriesContainingFile){
      final Task task=new Task.Modal(psiFile.getProject(),"Searching source...",true){
        @Override public void run(        @NotNull final ProgressIndicator indicator){
          String artifactUrl=null;
          SourceSearcher[] searchers={new MavenCentralSourceSearcher(),new SonatypeSourceSearcher()};
          for (          SourceSearcher searcher : searchers) {
            try {
              artifactUrl=searcher.findSourceJar(indicator,artifactId,version);
            }
 catch (            SourceSearchException e) {
              LOG.warn(e);
              showMessage("Downloading failed",e.getMessage(),NotificationType.ERROR);
              continue;
            }
            if (artifactUrl != null)             break;
          }
          if (artifactUrl == null) {
            showMessage("Sources not found","Sources for '" + jarName + ".jar' not found",NotificationType.WARNING);
            return;
          }
          if (!(libSourceDir.isDirectory() || libSourceDir.mkdirs())) {
            showMessage("Downloading failed","Failed to create directory to store sources: " + libSourceDir,NotificationType.ERROR);
            return;
          }
          try {
            File tmpDownload=HttpRequests.request(artifactUrl).connect(new HttpRequests.RequestProcessor<File>(){
              @Override public File process(              @NotNull HttpRequests.Request request) throws IOException {
                File tmpDownload=FileUtil.createTempFile(libSourceDir,"download.",".tmp",false,false);
                OutputStream out=new BufferedOutputStream(new FileOutputStream(tmpDownload));
                try {
                  NetUtils.copyStreamContent(indicator,request.getInputStream(),out,request.getConnection().getContentLength());
                }
  finally {
                  out.close();
                }
                return tmpDownload;
              }
            }
);
            if (!sourceFile.exists() && !tmpDownload.renameTo(sourceFile)) {
              LOG.warn("Failed to rename file " + tmpDownload + " to "+ sourceFileName);
            }
          }
 catch (          IOException e) {
            LOG.warn(e);
            showMessage("Downloading failed","Connection problem. See log for more details.",NotificationType.ERROR);
          }
        }
        @Override public void onSuccess(){
          attachSourceJar(sourceFile,libraries);
        }
        private void showMessage(        String title,        String message,        NotificationType notificationType){
          new Notification("Source searcher",title,message,notificationType).notify(getProject());
        }
      }
;
      task.queue();
      return new ActionCallback.Done();
    }
  }
);
}
