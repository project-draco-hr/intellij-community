{
  myProject=project;
  final SvnVcs vcs=SvnVcs.getInstance(project);
  myChunks=new LinkedList<List<Fragment>>();
  final VcsException[] exception=new VcsException[1];
  final Ref<SVNInfo> infoRef=new Ref<SVNInfo>();
  Runnable process=new Runnable(){
    @Override public void run(){
      try {
        infoRef.set(vcs.getInfo(location.toSvnUrl(),SVNRevision.HEAD));
      }
 catch (      VcsException e) {
        exception[0]=e;
      }
catch (      SVNException e) {
        exception[0]=new VcsException(e);
      }
    }
  }
;
  underProgress(exception,process);
  SVNInfo info=infoRef.get();
  if (info == null || info.getRevision() == null || info.getRepositoryRootURL() == null) {
    throw new VcsException("Could not get head info for " + location);
  }
  final Iterator<ChangesBunch> visualIterator=project.isDefault() ? null : CommittedChangesCache.getInstance(project).getBackBunchedIterator(vcs,vcsRoot,location,CHUNK_SIZE);
  final Iterator<ChangesBunch> internalIterator=project.isDefault() ? null : LoadedRevisionsCache.getInstance(project).iterator(location.getURL());
  myInternallyCached=(internalIterator == null) ? null : new InternallyCachedProvider(internalIterator,myProject);
  myVisuallyCached=(visualIterator == null) ? null : new VisuallyCachedProvider(visualIterator,myProject,location);
  myChunkFactory=new BunchFactory(myInternallyCached,myVisuallyCached,new LiveProvider(vcs,location,info.getRevision().getNumber(),new SvnLogUtil(myProject,vcs,location,info.getRepositoryRootURL())));
  myCurrentIdx=-1;
  underProgress(exception,new Runnable(){
    @Override public void run(){
      try {
        goBack();
      }
 catch (      VcsException e) {
        exception[0]=e;
      }
    }
  }
);
}
