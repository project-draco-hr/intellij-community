{
  final SelectionModel selectionModel=editor.getSelectionModel();
  Document document=editor.getDocument();
  if (selectionModel.hasSelection()) {
    final int start=selectionModel.getSelectionStart();
    final int end=selectionModel.getSelectionEnd();
    final TextRange range=new TextRange(start,end);
    final ArrayList<PsiElement> semicolons=new ArrayList<>();
    file.accept(new PsiRecursiveElementVisitor(){
      @Override public void visitElement(      PsiElement element){
        if (!range.intersects(element.getTextRange()))         return;
        final IElementType elementType=element.getNode().getElementType();
        if (elementType == GroovyTokenTypes.mSEMI) {
          semicolons.add(element);
        }
 else {
          super.visitElement(element);
        }
      }
    }
);
    boolean removed=false;
    for (    PsiElement semicolon : semicolons) {
      removed=checkAndRemove(project,semicolon,document) || removed;
    }
    if (!removed) {
      CommonRefactoringUtil.showErrorHint(project,editor,GroovyIntentionsBundle.message("no.unnecessary.semicolons.found"),GroovyIntentionsBundle.message("remove.unnecessary.semicolons.name"),null);
    }
  }
 else {
    int offset=editor.getCaretModel().getOffset();
    if (offset >= document.getTextLength())     offset=document.getTextLength() - 1;
    final PsiElement element=file.findElementAt(offset);
    if (element == null)     return;
    if (checkAndRemove(project,element,document))     return;
    if (checkAndRemove(project,PsiTreeUtil.nextLeaf(element),document))     return;
    if (checkAndRemove(project,PsiTreeUtil.prevLeaf(element),document))     return;
    CommonRefactoringUtil.showErrorHint(project,editor,GroovyIntentionsBundle.message("no.unnecessary.semicolons.found"),GroovyIntentionsBundle.message("remove.unnecessary.semicolons.name"),null);
  }
}
