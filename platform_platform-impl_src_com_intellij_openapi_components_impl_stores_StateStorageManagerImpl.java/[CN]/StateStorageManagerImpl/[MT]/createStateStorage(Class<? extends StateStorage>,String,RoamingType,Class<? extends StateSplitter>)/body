{
  if (!storageClass.equals(StateStorage.class)) {
    String key=UUID.randomUUID().toString();
    ((MutablePicoContainer)myPicoContainer).registerComponentImplementation(key,storageClass);
    return (StateStorage)myPicoContainer.getComponentInstance(key);
  }
  final String filePath=expandMacros(fileSpec);
  File file=new File(filePath).getAbsoluteFile();
  if (!stateSplitter.equals(StateSplitter.class) && !stateSplitter.equals(StateSplitterEx.class)) {
    StateSplitter splitter=ReflectionUtil.newInstance(stateSplitter);
    return new DirectoryBasedStorage(myPathMacroSubstitutor,file,splitter,this,createStorageTopicListener());
  }
  if (!ApplicationManager.getApplication().isHeadlessEnvironment() && PathUtilRt.getFileName(filePath).lastIndexOf('.') < 0) {
    throw new IllegalArgumentException("Extension is missing for storage file: " + filePath);
  }
  if (roamingType == RoamingType.PER_USER && fileSpec.equals(StoragePathMacros.WORKSPACE_FILE)) {
    roamingType=RoamingType.DISABLED;
  }
  beforeFileBasedStorageCreate();
  return new FileBasedStorage(file,fileSpec,roamingType,getMacroSubstitutor(fileSpec),myRootTagName,StateStorageManagerImpl.this,createStorageTopicListener(),myStreamProvider){
    @Override @NotNull protected StorageData createStorageData(){
      return StateStorageManagerImpl.this.createStorageData(myFileSpec,getFilePath());
    }
    @Override protected boolean isUseXmlProlog(){
      return StateStorageManagerImpl.this.isUseXmlProlog();
    }
  }
;
}
