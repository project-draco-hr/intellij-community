{
  super(contentManager,provider.getHelpId() != null ? provider.getHelpId() : "reference.versionControl.toolwindow.history",!isStaticEmbedded);
  myProject=vcs.getProject();
  myIsStaticAndEmbedded=false;
  myVcs=vcs;
  myProvider=provider;
  myRefresherI=refresherI;
  myHistorySession=session;
  myFilePath=filePath;
  myStartingRevision=startingRevision;
  DiffFromHistoryHandler customDiffHandler=provider.getHistoryDiffHandler();
  myDiffHandler=customDiffHandler == null ? new StandardDiffFromHistoryHandler() : customDiffHandler;
  final DualViewColumnInfo[] columns=createColumnList(myVcs.getProject(),provider,session);
  myComments=new MyCommentsPane();
  myRevisionsOrder=new HashMap<>();
  refreshRevisionsOrder();
  myUpdateAlarm=new Alarm(Alarm.ThreadToUse.POOLED_THREAD,myProject);
  final HistoryAsTreeProvider treeHistoryProvider=myHistorySession.getHistoryAsTreeProvider();
  @NonNls String storageKey="FileHistory." + provider.getClass().getName();
  if (treeHistoryProvider != null) {
    myDualView=new DualView(new TreeNodeOnVcsRevision(null,treeHistoryProvider.createTreeOn(myHistorySession.getRevisionList())),columns,storageKey,myVcs.getProject());
  }
 else {
    myDualView=new DualView(new TreeNodeOnVcsRevision(null,wrapWithTreeElements(myHistorySession.getRevisionList())),columns,storageKey,myVcs.getProject());
    myDualView.switchToTheFlatMode();
  }
  new TableSpeedSearch(myDualView.getFlatView()).setComparator(new SpeedSearchComparator(false));
  final TableLinkMouseListener listener=new TableLinkMouseListener();
  listener.installOn(myDualView.getFlatView());
  listener.installOn(myDualView.getTreeView());
  setEmptyText(CommonBundle.getLoadingTreeNodeText());
  myPopupActions=createPopupActions();
  createDualView();
  if (isStaticEmbedded) {
    setIsStaticAndEmbedded(true);
  }
  myHistoryPanelRefresh=new AsynchConsumer<VcsHistorySession>(){
    public void finished(){
      if (treeHistoryProvider != null) {
        final TreeTableView treeView=myDualView.getTreeView();
        final int lastRow=treeView.getRowCount() - 1;
        if (lastRow >= 0) {
          treeView.scrollRectToVisible(treeView.getCellRect(lastRow,0,true));
        }
      }
      myInRefresh=false;
      myTargetSelection=null;
      mySplitter.revalidate();
      mySplitter.repaint();
    }
    public void consume(    VcsHistorySession vcsHistorySession){
      FileHistoryPanelImpl.this.refresh(vcsHistorySession);
    }
  }
;
  myUpdateAlarm.addRequest(new Runnable(){
    public void run(){
      if (myVcs.getProject().isDisposed()) {
        return;
      }
      boolean refresh=ApplicationManager.getApplication().isActive() && !myInRefresh && myHistorySession.shouldBeRefreshed();
      myUpdateAlarm.cancelAllRequests();
      if (myUpdateAlarm.isDisposed())       return;
      myUpdateAlarm.addRequest(this,20000);
      if (refresh) {
        refreshImpl(true);
      }
    }
  }
,20000);
  init();
  chooseView();
}
