{
  List<String> filterParameters=ContainerUtil.newArrayList();
  List<VcsLogBranchFilter> branchFilters=ContainerUtil.findAll(filters,VcsLogBranchFilter.class);
  if (!branchFilters.isEmpty()) {
    String branchFilter=joinFilters(branchFilters,new Function<VcsLogBranchFilter,String>(){
      @Override public String fun(      VcsLogBranchFilter filter){
        return filter.getBranchName();
      }
    }
);
    filterParameters.add(prepareParameter("branches",branchFilter));
  }
 else {
    filterParameters.add("--all");
  }
  List<VcsLogUserFilter> userFilters=ContainerUtil.findAll(filters,VcsLogUserFilter.class);
  if (!userFilters.isEmpty()) {
    String authorFilter=joinFilters(userFilters,new Function<VcsLogUserFilter,String>(){
      @Override public String fun(      VcsLogUserFilter filter){
        return filter.getUserName(root);
      }
    }
);
    filterParameters.add(prepareParameter("author",authorFilter));
  }
  List<VcsLogTextFilter> textFilters=ContainerUtil.findAll(filters,VcsLogTextFilter.class);
  if (textFilters.size() > 1) {
    LOG.warn("Expected only one text filter: " + textFilters);
  }
 else   if (!textFilters.isEmpty()) {
    String textFilter=textFilters.iterator().next().getText();
    filterParameters.add(prepareParameter("grep",textFilter));
  }
  filterParameters.add("--regexp-ignore-case");
  return GitHistoryUtils.getAllDetails(myProject,root,filterParameters);
}
