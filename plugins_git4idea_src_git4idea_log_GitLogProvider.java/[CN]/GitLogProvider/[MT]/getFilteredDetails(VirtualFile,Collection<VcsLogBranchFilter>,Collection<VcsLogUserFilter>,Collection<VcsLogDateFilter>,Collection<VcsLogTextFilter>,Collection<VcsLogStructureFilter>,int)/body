{
  if (!isRepositoryReady(root)) {
    return Collections.emptyList();
  }
  List<String> filterParameters=ContainerUtil.newArrayList();
  if (!branchFilters.isEmpty()) {
    if (branchFilters.size() > 1) {
      LOG.warn("More than one branch filter was passed. Using only the first one.");
    }
    VcsLogBranchFilter branchFilter=branchFilters.iterator().next();
    filterParameters.add(branchFilter.getBranchName());
  }
 else {
    filterParameters.addAll(GitHistoryUtils.LOG_ALL);
  }
  if (!userFilters.isEmpty()) {
    String authorFilter=joinFilters(userFilters,new Function<VcsLogUserFilter,String>(){
      @Override public String fun(      VcsLogUserFilter filter){
        return filter.getUserName(root);
      }
    }
);
    filterParameters.add(prepareParameter("author",authorFilter));
  }
  if (!dateFilters.isEmpty()) {
    VcsLogDateFilter filter=dateFilters.iterator().next();
    if (filter.getAfter() != null) {
      filterParameters.add("--after=" + filter.getAfter().toString());
    }
    if (filter.getBefore() != null) {
      filterParameters.add("--before=" + filter.getBefore().toString());
    }
  }
  if (textFilters.size() > 1) {
    LOG.warn("Expected only one text filter: " + textFilters);
  }
 else   if (!textFilters.isEmpty()) {
    String textFilter=textFilters.iterator().next().getText();
    filterParameters.add(prepareParameter("grep",textFilter));
  }
  filterParameters.add("--regexp-ignore-case");
  if (maxCount > 0) {
    filterParameters.add("--max-count=" + maxCount);
  }
  filterParameters.add("--date-order");
  if (!structureFilters.isEmpty()) {
    filterParameters.add("--");
    for (    VcsLogStructureFilter filter : structureFilters) {
      for (      VirtualFile file : filter.getFiles(root)) {
        filterParameters.add(file.getPath());
      }
    }
  }
  return GitHistoryUtils.getAllDetails(myProject,root,filterParameters);
}
