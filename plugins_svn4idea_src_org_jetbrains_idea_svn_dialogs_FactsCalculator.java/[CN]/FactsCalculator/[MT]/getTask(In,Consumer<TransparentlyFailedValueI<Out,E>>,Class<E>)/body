{
  TransparentlyFailedValueI<Out,E> value=new ThreadSafeTransparentlyFailedValue<>();
  final TaskDescriptor pooled=new TaskDescriptor(myTaskTitle,Where.POOLED){
    @Override public void run(    ContinuationContext context){
      try {
        final Out calculatedValue=myLive.convert(in);
        if (calculatedValue != null) {
          myCache.setValue(calculatedValue,in);
        }
        value.set(calculatedValue);
      }
 catch (      Exception e) {
        setException(value,e,clazzE);
      }
      context.next(new TaskDescriptor("final part",Where.AWT){
        @Override public void run(        ContinuationContext context){
          resultConsumer.consume(value);
        }
      }
);
    }
  }
;
  return new TaskDescriptor("short part",Where.AWT){
    @Override public void run(    ContinuationContext context){
      try {
        value.set(myCache.getValue(in));
      }
 catch (      Exception e) {
        setException(value,e,clazzE);
      }
      if (value.haveSomething()) {
        resultConsumer.consume(value);
        return;
      }
      context.next(pooled);
    }
  }
;
}
