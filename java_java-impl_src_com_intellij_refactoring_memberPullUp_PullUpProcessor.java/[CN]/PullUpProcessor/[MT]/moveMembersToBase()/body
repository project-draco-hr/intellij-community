{
  myMovedMembers=ContainerUtil.newHashSet();
  myMembersAfterMove=ContainerUtil.newHashSet();
  for (  MemberInfo info : myMembersToMove) {
    myMovedMembers.add(info.getMember());
  }
  final PsiSubstitutor substitutor=upDownSuperClassSubstitutor();
  for (  MemberInfo info : myMembersToMove) {
    PullUpHelper<MemberInfo> processor=getProcessor(info);
    if (!(info.getMember() instanceof PsiClass) || info.getOverrides() == null) {
      processor.setCorrectVisibility(info);
      processor.encodeContextInfo(info);
    }
    processor.move(info,substitutor);
  }
  for (  PsiMember member : myMembersAfterMove) {
    getProcessor(member).postProcessMember(member);
    final JavaRefactoringListenerManager listenerManager=JavaRefactoringListenerManager.getInstance(myProject);
    ((JavaRefactoringListenerManagerImpl)listenerManager).fireMemberMoved(mySourceClass,member);
  }
}
