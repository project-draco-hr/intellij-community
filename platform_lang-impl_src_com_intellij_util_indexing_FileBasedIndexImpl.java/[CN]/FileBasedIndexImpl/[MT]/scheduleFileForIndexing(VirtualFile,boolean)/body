{
  boolean fileIsDirectory=file.isDirectory();
  if (!contentChange) {
    FileContent fileContent=null;
    int inputId=-1;
    for (    ID<?,?> indexId : fileIsDirectory ? myIndicesForDirectories : myNotRequiringContentIndices) {
      if (getInputFilter(indexId).acceptInput(file)) {
        try {
          if (fileContent == null) {
            fileContent=new FileContentImpl(file);
            inputId=Math.abs(getFileId(file));
          }
          updateSingleIndex(indexId,inputId,fileContent);
        }
 catch (        StorageException e) {
          LOG.info(e);
          requestRebuild(indexId);
        }
      }
    }
  }
  if (!fileIsDirectory) {
    if (isTooLarge(file)) {
      myChangedFilesCollector.removeScheduledFileFromUpdate(file);
    }
 else {
      myFileTypeManager.freezeFileTypeTemporarilyIn(file,new Runnable(){
        @Override public void run(){
          final List<ID<?,?>> candidates=getAffectedIndexCandidates(file);
          int fileId=getIdMaskingNonIdBasedFile(file);
          boolean scheduleForUpdate=false;
          boolean resetStamp=false;
          for (int i=0, size=candidates.size(); i < size; ++i) {
            final ID<?,?> indexId=candidates.get(i);
            if (needsFileContentLoading(indexId) && getInputFilter(indexId).acceptInput(file)) {
              if (IndexingStamp.isFileIndexedStateCurrent(fileId,indexId)) {
                IndexingStamp.setFileIndexedStateOutdated(fileId,indexId);
                resetStamp=true;
              }
              scheduleForUpdate=true;
            }
          }
          if (scheduleForUpdate) {
            if (resetStamp)             IndexingStamp.flushCache(file);
            myChangedFilesCollector.scheduleForUpdate(file);
          }
          if (!myUpToDateIndicesForUnsavedOrTransactedDocuments.isEmpty()) {
            clearUpToDateStateForPsiIndicesOfUnsavedDocuments(file);
          }
        }
      }
);
    }
  }
}
