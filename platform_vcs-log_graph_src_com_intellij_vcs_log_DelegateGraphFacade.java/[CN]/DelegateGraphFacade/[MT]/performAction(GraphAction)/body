{
  ActionController<Integer> actionController=myVisibleGraph.getActionController();
  if (action instanceof ClickGraphAction) {
    ClickGraphAction clickGraphAction=(ClickGraphAction)action;
    Point relativePoint=clickGraphAction.getRelativePoint();
    PrintElement printElement=null;
    if (relativePoint != null) {
      Collection<PrintElement> printElements=myVisibleGraph.getRowInfo(clickGraphAction.getRow()).getPrintElements();
      printElement=myGraphCellPainter.mouseOver(printElements,relativePoint.x,relativePoint.y);
    }
    return convert(actionController.performMouseAction(new GraphMouseActionImpl(printElement,GraphMouseAction.Type.CLICK)));
  }
  if (action instanceof MouseOverAction) {
    MouseOverAction mouseOverAction=(MouseOverAction)action;
    Point relativePoint=mouseOverAction.getRelativePoint();
    Collection<PrintElement> printElements=myVisibleGraph.getRowInfo(mouseOverAction.getRow()).getPrintElements();
    PrintElement printElement=myGraphCellPainter.mouseOver(printElements,relativePoint.x,relativePoint.y);
    return convert(actionController.performMouseAction(new GraphMouseActionImpl(printElement,GraphMouseAction.Type.OVER)));
  }
  if (action instanceof LongEdgesAction) {
    boolean shouldShowLongEdges=((LongEdgesAction)action).shouldShowLongEdges();
    actionController.setLongEdgesHidden(!shouldShowLongEdges);
  }
  if (action instanceof LinearBranchesExpansionAction) {
    boolean shouldExpand=((LinearBranchesExpansionAction)action).shouldExpand();
    actionController.setLinearBranchesExpansion(!shouldExpand);
    return new GraphAnswer(){
      @Nullable @Override public GraphChange getGraphChange(){
        return new GraphChange(){
        }
;
      }
      @Nullable @Override public GraphActionRequest getActionRequest(){
        return new JumpToRowActionRequest(0);
      }
    }
;
  }
  return null;
}
