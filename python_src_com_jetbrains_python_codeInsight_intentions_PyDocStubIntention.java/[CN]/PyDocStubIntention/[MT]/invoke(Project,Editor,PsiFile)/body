{
  PyFunction function=PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PyFunction.class);
  PyElementGenerator elementGenerator=PyElementGenerator.getInstance(project);
  PythonDocumentationProvider documentationProvider=new PythonDocumentationProvider();
  PyStatementList list=function.getStatementList();
  PsiWhiteSpace whitespace=PsiTreeUtil.getPrevSiblingOfType(list,PsiWhiteSpace.class);
  String ws="\n";
  if (whitespace != null) {
    String[] spaces=whitespace.getText().split("\n");
    if (spaces.length > 1)     ws=ws + whitespace.getText().split("\n")[1];
  }
  String docContent=ws + documentationProvider.generateDocumentationContentStub(function,ws,true);
  PyExpressionStatement string=elementGenerator.createFromText(LanguageLevel.forElement(function),PyExpressionStatement.class,"\"\"\"" + docContent + "\"\"\"");
  if (list.getStatements().length != 0)   list.addBefore(string,list.getStatements()[0]);
  int offset=function.getDocStringExpression().getTextOffset();
  editor.getCaretModel().moveToOffset(offset);
  editor.getCaretModel().moveCaretRelatively(0,1,false,false,false);
}
