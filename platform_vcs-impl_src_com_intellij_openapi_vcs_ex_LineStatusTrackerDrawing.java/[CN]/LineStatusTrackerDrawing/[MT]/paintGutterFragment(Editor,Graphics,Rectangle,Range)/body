{
  final EditorGutterComponentEx gutter=((EditorEx)editor).getGutterComponentEx();
  Color stripeColor=getDiffGutterColor(range);
  if (range.getInnerRanges() == null) {
    g.setColor(stripeColor);
    final int endX=gutter.getWhitespaceSeparatorOffset();
    final int x=r.x + r.width - 5;
    final int width=endX - x;
    if (r.height > 0) {
      g.fillRect(x,r.y,width,r.height);
      g.setColor(gutter.getOutlineColor(false));
      UIUtil.drawLine(g,x,r.y,x + width,r.y);
      UIUtil.drawLine(g,x,r.y,x,r.y + r.height - 1);
      UIUtil.drawLine(g,x,r.y + r.height - 1,x + width,r.y + r.height - 1);
    }
 else {
      final int[] xPoints=new int[]{x,x,x + width - 1};
      final int[] yPoints=new int[]{r.y - 4,r.y + 4,r.y};
      g.fillPolygon(xPoints,yPoints,3);
      g.setColor(gutter.getOutlineColor(false));
      g.drawPolygon(xPoints,yPoints,3);
    }
  }
 else {
    final int x=gutter.getLineMarkerAreaOffset() + gutter.getIconsAreaWidth();
    final int endX=gutter.getWhitespaceSeparatorOffset();
    final int width=endX - x;
    if (range.getType() == Range.DELETED) {
      final int y=lineToY(editor,range.getLine1());
      final int[] xPoints=new int[]{x,x,endX - 1};
      final int[] yPoints=new int[]{y - 4,y + 4,y};
      g.setColor(stripeColor);
      g.fillPolygon(xPoints,yPoints,3);
      g.setColor(gutter.getOutlineColor(false));
      g.drawPolygon(xPoints,yPoints,3);
    }
 else {
      int y=lineToY(editor,range.getLine1());
      int endY=lineToY(editor,range.getLine2());
      List<Range.InnerRange> innerRanges=range.getInnerRanges();
      for (int i=0; i < innerRanges.size(); i++) {
        Range.InnerRange innerRange=innerRanges.get(i);
        if (innerRange.getType() == Range.DELETED)         continue;
        int start=lineToY(editor,innerRange.getLine1());
        int end=lineToY(editor,innerRange.getLine2());
        g.setColor(getDiffColor(innerRange));
        g.fillRect(x,start,width,end - start);
      }
      for (int i=0; i < innerRanges.size(); i++) {
        Range.InnerRange innerRange=innerRanges.get(i);
        if (innerRange.getType() != Range.DELETED)         continue;
        int start;
        int end;
        if (i == 0) {
          start=lineToY(editor,innerRange.getLine1());
          end=lineToY(editor,innerRange.getLine2()) + 5;
        }
 else         if (i == innerRanges.size() - 1) {
          start=lineToY(editor,innerRange.getLine1()) - 5;
          end=lineToY(editor,innerRange.getLine2());
        }
 else {
          start=lineToY(editor,innerRange.getLine1()) - 3;
          end=lineToY(editor,innerRange.getLine2()) + 3;
        }
        g.setColor(getDiffColor(innerRange));
        g.fillRect(x,start,width,end - start);
      }
      g.setColor(gutter.getOutlineColor(false));
      UIUtil.drawLine(g,x,y,endX - 1,y);
      UIUtil.drawLine(g,x,y,x,endY - 1);
      UIUtil.drawLine(g,x,endY - 1,endX - 1,endY - 1);
    }
  }
}
