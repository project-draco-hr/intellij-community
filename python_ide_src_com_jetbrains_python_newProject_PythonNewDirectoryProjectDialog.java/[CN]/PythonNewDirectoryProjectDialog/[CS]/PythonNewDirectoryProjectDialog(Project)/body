{
  super(project);
  myProject=project;
  final List<Sdk> sdks=PythonSdkType.getAllSdks();
  final List<PythonSdkFlavor> flavors=PythonSdkFlavor.getApplicableFlavors();
  for (  PythonSdkFlavor flavor : flavors) {
    final Collection<String> strings=flavor.suggestHomePaths();
    for (    String string : strings) {
      sdks.add(new PyDetectedSdk(string));
    }
  }
  VirtualEnvProjectFilter.removeAllAssociated(sdks);
  Collections.sort(sdks,PreferredSdkComparator.INSTANCE);
  final Sdk preferred=sdks.isEmpty() ? null : sdks.iterator().next();
  mySdkCombo=new PythonSdkChooserCombo(project,sdks,new Condition<Sdk>(){
    @Override public boolean value(    Sdk sdk){
      return sdk == preferred;
    }
  }
);
  final JLabel label=new JBLabel("Interpreter:",SwingConstants.LEFT){
    @Override public Dimension getMinimumSize(){
      return new JLabel("Project name:").getPreferredSize();
    }
    @Override public Dimension getPreferredSize(){
      return getMinimumSize();
    }
  }
;
  label.setLabelFor(mySdkCombo);
  final JPanel placeholder=getPlaceHolder();
  final GridBagConstraints constraints=new GridBagConstraints();
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.anchor=GridBagConstraints.WEST;
  constraints.insets=new Insets(0,0,0,10);
  placeholder.add(label,constraints);
  constraints.gridx=1;
  constraints.gridy=0;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.weightx=1.0;
  constraints.insets=new Insets(0,0,0,0);
  placeholder.add(mySdkCombo,constraints);
  final ActionListener listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      checkValid();
    }
  }
;
  myFrameworkCheckbox=new JBCheckBox("Install <framework>");
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.gridwidth=2;
  constraints.weightx=0.0;
  placeholder.add(myFrameworkCheckbox,constraints);
  myFrameworkCheckbox.setVisible(false);
  myFrameworkCheckbox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myInstallFrameworkChanged=true;
      checkValid();
    }
  }
);
  mySdkCombo.addActionListener(listener);
  mySdkCombo.getComboBox().addActionListener(listener);
  myProjectTypeComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      selectCompatiblePython();
      checkValid();
    }
  }
);
  mySdkCombo.getComboBox().addPropertyChangeListener(new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent event){
      checkValid();
    }
  }
);
  final Dimension checkBoxSize=myFrameworkCheckbox.getPreferredSize();
  myRootPane.setPreferredSize(new Dimension(myRootPane.getPreferredSize().width,myRootPane.getPreferredSize().height + checkBoxSize.height));
  checkValid();
}
