{
  if (myTargetContainer instanceof PsiDirectory) {
    final PsiDirectory psiDirectory=(PsiDirectory)myTargetContainer;
    PsiPackage oldPackage=getTargetPackage();
    String name=oldPackage == null ? "" : oldPackage.getQualifiedName();
    final String targetName=myPackageNameField.getText();
    if (!Comparing.equal(name,targetName)) {
      final ProjectRootManager projectRootManager=ProjectRootManager.getInstance(myProject);
      final List<VirtualFile> contentSourceRoots=JavaProjectRootsUtil.getSuitableDestinationSourceRoots(myProject);
      final PackageWrapper newPackage=new PackageWrapper(PsiManager.getInstance(myProject),targetName);
      final VirtualFile targetSourceRoot;
      if (contentSourceRoots.size() > 1) {
        PsiPackage targetPackage=JavaPsiFacade.getInstance(myProject).findPackage(targetName);
        PsiDirectory initialDir=null;
        if (targetPackage != null) {
          final PsiDirectory[] directories=targetPackage.getDirectories();
          final VirtualFile root=projectRootManager.getFileIndex().getSourceRootForFile(psiDirectory.getVirtualFile());
          for (          PsiDirectory dir : directories) {
            if (Comparing.equal(projectRootManager.getFileIndex().getSourceRootForFile(dir.getVirtualFile()),root)) {
              initialDir=dir;
              break;
            }
          }
        }
        final VirtualFile sourceRoot=MoveClassesOrPackagesUtil.chooseSourceRoot(newPackage,contentSourceRoots,initialDir);
        if (sourceRoot == null)         return null;
        targetSourceRoot=sourceRoot;
      }
 else {
        targetSourceRoot=contentSourceRoots.get(0);
      }
      PsiDirectory dir=RefactoringUtil.findPackageDirectoryInSourceRoot(newPackage,targetSourceRoot);
      if (dir == null) {
        dir=ApplicationManager.getApplication().runWriteAction(new NullableComputable<PsiDirectory>(){
          public PsiDirectory compute(){
            try {
              return RefactoringUtil.createPackageDirectoryInSourceRoot(newPackage,targetSourceRoot);
            }
 catch (            IncorrectOperationException e) {
              return null;
            }
          }
        }
);
      }
      return dir;
    }
  }
  return myTargetContainer;
}
