{
  int opCode=insn.getOpcode();
  int shift=opCode == INVOKESTATIC ? 0 : 1;
  int origin=insnIndex(insn);
switch (opCode) {
case INVOKESPECIAL:
case INVOKEINTERFACE:
case INVOKEVIRTUAL:
    BasicValue receiver=values.get(0);
  if (receiver instanceof NthParamValue) {
    dereferencedParams[((NthParamValue)receiver).n]=true;
  }
if (receiver instanceof Trackable) {
  dereferencedValues[((Trackable)receiver).getOriginInsnIndex()]=true;
}
default :
}
switch (opCode) {
case INVOKESTATIC:
case INVOKESPECIAL:
case INVOKEVIRTUAL:
case INVOKEINTERFACE:
boolean stable=opCode == INVOKESTATIC || opCode == INVOKESPECIAL;
MethodInsnNode mNode=(MethodInsnNode)insn;
Method method=new Method(mNode.owner,mNode.name,mNode.desc);
Type retType=Type.getReturnType(mNode.desc);
for (int i=shift; i < values.size(); i++) {
if (values.get(i) instanceof NthParamValue) {
int n=((NthParamValue)values.get(i)).n;
if (opCode == INVOKEINTERFACE) {
notNullableParams[n]=true;
}
 else {
Set<ParamKey> npKeys=parameterFlow[n];
if (npKeys == null) {
npKeys=new HashSet<ParamKey>();
parameterFlow[n]=npKeys;
}
npKeys.add(new ParamKey(method,i - shift,stable));
}
}
}
if (shift == 1) {
values.remove(0);
}
return new TrackableCallValue(origin,retType,method,stable,values);
case MULTIANEWARRAY:
return new NotNullValue(super.naryOperation(insn,values).getType());
default :
}
return track(origin,super.naryOperation(insn,values));
}
