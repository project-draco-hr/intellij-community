{
  final Key key=new Key(method,new In(i,In.NULLABLE),stable);
  final Result<Key,Value> result;
  if (interpreter.dereferenced[i] || interpreter.notNullable[i] || returnValue instanceof NParamValue && ((NParamValue)returnValue).n == i) {
    result=new Final<Key,Value>(Value.Top);
  }
 else {
    Set<ParamKey> calls=interpreter.callDerefs[i];
    if (calls == null || calls.isEmpty()) {
      result=new Final<Key,Value>(Value.Null);
    }
 else {
      Set<Product<Key,Value>> sum=new HashSet<Product<Key,Value>>();
      for (      ParamKey pk : calls) {
        sum.add(new Product<Key,Value>(Value.Top,Collections.singleton(new Key(pk.method,new In(pk.i,In.NULLABLE),pk.stable))));
      }
      result=new Pending<Key,Value>(sum);
    }
  }
  return new Equation<Key,Value>(key,result);
}
