{
  final Key key=new Key(method,new InOut(i,inValue),stable);
  final Result result;
  HashSet<Key> keys=new HashSet<>();
  for (int argI=0; argI < conditionValue.args.size(); argI++) {
    BasicValue arg=conditionValue.args.get(argI);
    if (arg instanceof NthParamValue) {
      NthParamValue npv=(NthParamValue)arg;
      if (npv.n == i) {
        keys.add(new Key(conditionValue.method,new InOut(argI,inValue),conditionValue.stableCall,true));
      }
    }
  }
  if (keys.isEmpty()) {
    result=new Final(Value.Top);
  }
 else {
    result=new Pending(new SingletonSet<>(new Product(Value.Top,keys)));
  }
  return new Equation(key,result);
}
