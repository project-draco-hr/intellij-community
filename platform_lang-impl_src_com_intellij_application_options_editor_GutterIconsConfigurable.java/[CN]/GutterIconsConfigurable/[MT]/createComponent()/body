{
  ExtensionPoint<LineMarkerProvider> point=Extensions.getRootArea().getExtensionPoint(LineMarkerProviders.EP_NAME);
  LanguageExtensionPoint<LineMarkerProvider>[] extensions=(LanguageExtensionPoint<LineMarkerProvider>[])point.getExtensions();
  List<LineMarkerProviderDescriptor> descriptors=ContainerUtil.mapNotNull(extensions,new NullableFunction<LanguageExtensionPoint<LineMarkerProvider>,LineMarkerProviderDescriptor>(){
    @Nullable @Override public LineMarkerProviderDescriptor fun(    LanguageExtensionPoint<LineMarkerProvider> point){
      LineMarkerProvider instance=point.getInstance();
      return instance instanceof LineMarkerProviderDescriptor ? (LineMarkerProviderDescriptor)instance : null;
    }
  }
);
  myDescriptors=new ArrayList<LineMarkerProviderDescriptor>(new THashSet<LineMarkerProviderDescriptor>(descriptors,new TObjectHashingStrategy<LineMarkerProviderDescriptor>(){
    @Override public int computeHashCode(    LineMarkerProviderDescriptor object){
      return object.getClass().hashCode();
    }
    @Override public boolean equals(    LineMarkerProviderDescriptor o1,    LineMarkerProviderDescriptor o2){
      return o1.getClass().equals(o2.getClass());
    }
  }
));
  myList.setItems(myDescriptors,new Function<LineMarkerProviderDescriptor,String>(){
    @Override public String fun(    LineMarkerProviderDescriptor descriptor){
      return descriptor.getName();
    }
  }
);
  return myPanel;
}
