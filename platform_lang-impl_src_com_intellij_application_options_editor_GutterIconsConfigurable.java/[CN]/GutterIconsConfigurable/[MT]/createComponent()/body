{
  ExtensionPoint<LineMarkerProvider> point=Extensions.getRootArea().getExtensionPoint(LineMarkerProviders.EP_NAME);
  @SuppressWarnings("unchecked") LanguageExtensionPoint<LineMarkerProvider>[] extensions=(LanguageExtensionPoint<LineMarkerProvider>[])point.getExtensions();
  NullableFunction<LanguageExtensionPoint<LineMarkerProvider>,PluginDescriptor> function=new NullableFunction<LanguageExtensionPoint<LineMarkerProvider>,PluginDescriptor>(){
    @Nullable @Override public PluginDescriptor fun(    LanguageExtensionPoint<LineMarkerProvider> point){
      LineMarkerProvider instance=point.getInstance();
      return instance instanceof LineMarkerProviderDescriptor && ((LineMarkerProviderDescriptor)instance).getName() != null ? point.getPluginDescriptor() : null;
    }
  }
;
  MultiMap<PluginDescriptor,LanguageExtensionPoint<LineMarkerProvider>> map=ContainerUtil.groupBy(Arrays.asList(extensions),function);
  myDescriptors=new ArrayList<GutterIconDescriptor>();
  for (  final PluginDescriptor descriptor : map.keySet()) {
    Collection<LanguageExtensionPoint<LineMarkerProvider>> points=map.get(descriptor);
    final AtomicBoolean first=new AtomicBoolean(true);
    for (    LanguageExtensionPoint<LineMarkerProvider> extensionPoint : points) {
      GutterIconDescriptor instance=(GutterIconDescriptor)extensionPoint.getInstance();
      if (instance.getOptions().length > 0) {
        for (        GutterIconDescriptor option : instance.getOptions()) {
          if (first.getAndSet(false)) {
            myFirstDescriptors.put(instance,descriptor);
          }
          myDescriptors.add(option);
        }
      }
 else {
        if (first.getAndSet(false)) {
          myFirstDescriptors.put(instance,descriptor);
        }
        myDescriptors.add(instance);
      }
    }
  }
  List<GutterIconDescriptor> options=new ArrayList<GutterIconDescriptor>();
  for (Iterator<GutterIconDescriptor> iterator=myDescriptors.iterator(); iterator.hasNext(); ) {
    GutterIconDescriptor descriptor=iterator.next();
    if (descriptor.getOptions().length > 0) {
      options.addAll(Arrays.asList(descriptor.getOptions()));
      iterator.remove();
    }
  }
  myDescriptors.addAll(options);
  myList.setItems(myDescriptors,new Function<GutterIconDescriptor,String>(){
    @Override public String fun(    GutterIconDescriptor descriptor){
      return descriptor.getName();
    }
  }
);
  return myPanel;
}
