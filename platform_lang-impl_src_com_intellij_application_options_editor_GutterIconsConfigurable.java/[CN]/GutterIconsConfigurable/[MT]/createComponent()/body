{
  ExtensionPoint<LineMarkerProvider> point=Extensions.getRootArea().getExtensionPoint(LineMarkerProviders.EP_NAME);
  LanguageExtensionPoint<LineMarkerProvider>[] extensions=(LanguageExtensionPoint<LineMarkerProvider>[])point.getExtensions();
  List<LineMarkerProviderDescriptor> descriptors=ContainerUtil.mapNotNull(extensions,new NullableFunction<LanguageExtensionPoint<LineMarkerProvider>,LineMarkerProviderDescriptor>(){
    @Nullable @Override public LineMarkerProviderDescriptor fun(    LanguageExtensionPoint<LineMarkerProvider> point){
      LineMarkerProvider instance=point.getInstance();
      if (instance instanceof LineMarkerProviderDescriptor) {
        LineMarkerProviderDescriptor descriptor=(LineMarkerProviderDescriptor)instance;
        return descriptor.getName() == null ? null : descriptor;
      }
      return null;
    }
  }
);
  myDescriptors=new ArrayList<GutterIconDescriptor>(new THashSet<LineMarkerProviderDescriptor>(descriptors,new TObjectHashingStrategy<LineMarkerProviderDescriptor>(){
    @Override public int computeHashCode(    LineMarkerProviderDescriptor object){
      return object.getClass().hashCode();
    }
    @Override public boolean equals(    LineMarkerProviderDescriptor o1,    LineMarkerProviderDescriptor o2){
      return o1.getClass().equals(o2.getClass());
    }
  }
));
  List<GutterIconDescriptor> options=new ArrayList<GutterIconDescriptor>();
  for (Iterator<GutterIconDescriptor> iterator=myDescriptors.iterator(); iterator.hasNext(); ) {
    GutterIconDescriptor descriptor=iterator.next();
    if (descriptor.getOptions().length > 0) {
      options.addAll(Arrays.asList(descriptor.getOptions()));
      iterator.remove();
    }
  }
  myDescriptors.addAll(options);
  myList.setItems(myDescriptors,new Function<GutterIconDescriptor,String>(){
    @Override public String fun(    GutterIconDescriptor descriptor){
      return descriptor.getName();
    }
  }
);
  return myPanel;
}
