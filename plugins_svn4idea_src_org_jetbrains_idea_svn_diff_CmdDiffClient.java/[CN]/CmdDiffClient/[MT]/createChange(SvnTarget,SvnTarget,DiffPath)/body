{
  SvnTarget subTarget1=SvnUtil.append(target1,diffPath.path,true);
  String relativePath=target1.isFile() ? FileUtil.getRelativePath(target1.getFile(),subTarget1.getFile()) : SvnUtil.getRelativeUrl(SvnUtil.toDecodedString(target1),SvnUtil.toDecodedString(subTarget1));
  if (relativePath == null) {
    throw new SvnBindException("Could not get relative path for " + target1 + " and "+ subTarget1);
  }
  SvnTarget subTarget2=SvnUtil.append(target2,FileUtil.toSystemIndependentName(relativePath));
  FilePath target1Path=target1.isFile() ? VcsUtil.getFilePath(subTarget1.getFile(),diffPath.isDirectory()) : VcsUtil.getFilePathOnNonLocal(SvnUtil.toDecodedString(subTarget1),diffPath.isDirectory());
  FilePath target2Path=VcsUtil.getFilePathOnNonLocal(SvnUtil.toDecodedString(subTarget2),diffPath.isDirectory());
  FileStatus status=SvnStatusConvertor.convertStatus(SvnStatusHandler.getStatus(diffPath.itemStatus),SvnStatusHandler.getStatus(diffPath.propertiesStatus));
  ContentRevision beforeRevision=status == FileStatus.ADDED ? null : target1.isFile() ? createRemoteRevision(target2Path,target1Path,status) : createRemoteRevision(target1Path,target2Path,status);
  ContentRevision afterRevision=status == FileStatus.DELETED ? null : target1.isFile() ? createLocalRevision(target1Path) : createRemoteRevision(target2Path,target1Path,status);
  return createChange(status,beforeRevision,afterRevision);
}
