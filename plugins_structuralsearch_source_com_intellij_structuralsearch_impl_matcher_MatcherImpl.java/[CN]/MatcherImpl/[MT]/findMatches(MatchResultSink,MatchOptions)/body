{
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  matchContext.clear();
  matchContext.setSink(new MatchConstraintsSink(sink,_options.getMaxMatchesCount(),_options.isDistinct(),_options.isCaseSensitiveMatch()));
  matchContext.setOptions(_options);
  matchContext.setMatcher(visitor);
  CompiledPattern compiledPattern=null;
synchronized (getClass()) {
    if (_options == lastOptions) {
      compiledPattern=lastPattern;
    }
    lastOptions=null;
    lastPattern=null;
  }
  if (compiledPattern == null) {
    compiledPattern=PatternCompiler.compilePattern(project,_options);
  }
  if (compiledPattern != null) {
    matchContext.setPattern(compiledPattern);
    matchContext.getSink().setMatchingProcess(scheduler);
    scheduler.init();
    progress=matchContext.getSink().getProgressIndicator();
    visitor.setMatchContext(matchContext);
    if (isTesting) {
      final PsiElement[] elements=((LocalSearchScope)_options.getScope()).getScope();
      for (int i=0; i < elements.length; i++) {
        match(elements[i]);
      }
      matchContext.getSink().matchingFinished();
      return;
    }
    SearchScope searchScope=compiledPattern.getScope();
    if (searchScope == null)     searchScope=_options.getScope();
    if (searchScope instanceof GlobalSearchScope) {
      final GlobalSearchScope scope=(GlobalSearchScope)searchScope;
      ContentIterator ci=new ContentIterator(){
        public boolean processFile(        VirtualFile fileOrDir){
          if (!scope.contains(fileOrDir))           return true;
          if (!fileOrDir.isDirectory()) {
            final PsiFile file=PsiManager.getInstance(project).findFile(fileOrDir);
            if (file instanceof PsiJavaFile) {
              ++totalFilesToScan;
              scheduler.addOneTask(new MatchOneFile(file));
            }
          }
          return true;
        }
      }
;
      ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(project).getFileIndex();
      projectFileIndex.iterateContent(ci);
    }
 else {
      final PsiElement[] elementsToScan=((LocalSearchScope)searchScope).getScope();
      totalFilesToScan=elementsToScan.length;
      for (int i=0; i < elementsToScan.length; ++i) {
        scheduler.addOneTask(new MatchOneFile(elementsToScan[i]));
      }
    }
    if (scheduler.getTaskQueueEndAction() == null) {
      scheduler.setTaskQueueEndAction(new Runnable(){
        public void run(){
          matchContext.getSink().matchingFinished();
        }
      }
);
    }
    scheduler.executeNext();
  }
}
