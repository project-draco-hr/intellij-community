{
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  CompiledPattern compiledPattern=prepareMatching(sink,options);
  if (compiledPattern == null) {
    return;
  }
  matchContext.getSink().setMatchingProcess(scheduler);
  scheduler.init();
  progress=matchContext.getSink().getProgressIndicator();
  if (TokenBasedSearcher.canProcess(compiledPattern)) {
    TokenBasedSearcher searcher=new TokenBasedSearcher(this);
    searcher.search(compiledPattern);
    if (isTesting) {
      matchContext.getSink().matchingFinished();
      return;
    }
  }
 else {
    if (isTesting) {
      final PsiElement[] elements=((LocalSearchScope)options.getScope()).getScope();
      if (elements.length > 0 && matchContext.getPattern().getStrategy().continueMatching(elements[0].getParent())) {
        visitor.matchContext(new FilteringNodeIterator(new ArrayBackedNodeIterator(elements)));
      }
 else {
        for (        PsiElement element : elements) {
          match(element);
        }
      }
      matchContext.getSink().matchingFinished();
      return;
    }
    if (!findMatches(options,compiledPattern)) {
      return;
    }
  }
  if (scheduler.getTaskQueueEndAction() == null) {
    scheduler.setTaskQueueEndAction(new Runnable(){
      public void run(){
        matchContext.getSink().matchingFinished();
      }
    }
);
  }
  scheduler.executeNext();
}
