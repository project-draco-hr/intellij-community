{
  CompiledPattern compiledPattern=prepareMatching(sink,options);
  if (compiledPattern == null) {
    return;
  }
  matchContext.getSink().setMatchingProcess(scheduler);
  scheduler.init();
  progress=matchContext.getSink().getProgressIndicator();
  if (isTesting) {
    final PsiElement[] elements=((LocalSearchScope)options.getScope()).getScope();
    if (elements.length > 0 && matchContext.getPattern().getStrategy().continueMatching(elements[0].getParent())) {
      visitor.matchContext(new FilteringNodeIterator(new ArrayBackedNodeIterator(elements)));
    }
 else {
      for (      PsiElement element : elements) {
        match(element);
      }
    }
    matchContext.getSink().matchingFinished();
    return;
  }
  final Language ourPatternLanguage=((LanguageFileType)options.getFileType()).getLanguage();
  SearchScope searchScope=compiledPattern.getScope();
  boolean ourOptimizedScope=searchScope != null;
  if (!ourOptimizedScope)   searchScope=options.getScope();
  if (searchScope instanceof GlobalSearchScope) {
    final GlobalSearchScope scope=(GlobalSearchScope)searchScope;
    final ContentIterator ci=new ContentIterator(){
      public boolean processFile(      VirtualFile fileOrDir){
        if (!fileOrDir.isDirectory()) {
          final PsiFile file=PsiManager.getInstance(project).findFile(fileOrDir);
          if ((options.getFileType() == StdFileTypes.JAVA && file instanceof PsiJavaFile) || (options.getFileType() != StdFileTypes.JAVA && file instanceof XmlFile)) {
            final FileViewProvider viewProvider=file.getViewProvider();
            for (            Language lang : viewProvider.getPrimaryLanguages()) {
              if (lang != ourPatternLanguage)               continue;
              ++totalFilesToScan;
              scheduler.addOneTask(new MatchOneFile(viewProvider.getPsi(lang)));
            }
          }
        }
        return true;
      }
    }
;
    final ProjectRootManager instance=ProjectRootManager.getInstance(project);
    final ProjectFileIndex projectFileIndex=instance.getFileIndex();
    final VirtualFile[] rootFiles=ApplicationManager.getApplication().runReadAction(new Computable<VirtualFile[]>(){
      public VirtualFile[] compute(){
        final VirtualFile[] contentRoots=instance.getContentRoots();
        List<VirtualFile> result=new ArrayList<VirtualFile>(contentRoots.length);
        result.addAll(Arrays.asList(contentRoots));
        if (scope.isSearchInLibraries()) {
          for (          VirtualFile file : instance.getRootFiles(ProjectRootType.SOURCE)) {
            if (projectFileIndex.isInLibrarySource(file)) {
              result.add(file);
            }
          }
        }
        return result.toArray(VirtualFile.EMPTY_ARRAY);
      }
    }
);
    HashSet<VirtualFile> visited=new HashSet<VirtualFile>(rootFiles.length);
    final VirtualFileFilter filter=new VirtualFileFilter(){
      public boolean accept(      VirtualFile file){
        return (file.isDirectory() && !FileTypeManager.getInstance().isFileIgnored(file.getName())) || scope.contains(file);
      }
    }
;
    for (    final VirtualFile rootFile : rootFiles) {
      if (visited.contains(rootFile))       continue;
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          FileIndexImplUtil.iterateRecursively(rootFile,filter,ci);
        }
      }
);
      visited.add(rootFile);
    }
  }
 else {
    final PsiElement[] elementsToScan=((LocalSearchScope)searchScope).getScope();
    if (elementsToScan == null)     return;
    totalFilesToScan=elementsToScan.length;
    for (int i=0; i < elementsToScan.length; ++i) {
      final PsiElement psiElement=elementsToScan[i];
      if (psiElement == null)       continue;
      final Language language=psiElement.getLanguage();
      if (language != JspxFileViewProvider.JAVA_HOLDER_METHOD_TREE_LANGUAGE && language == ourPatternLanguage) {
        scheduler.addOneTask(new MatchOneFile(psiElement));
      }
      if (ourOptimizedScope)       elementsToScan[i]=null;
    }
  }
  if (scheduler.getTaskQueueEndAction() == null) {
    scheduler.setTaskQueueEndAction(new Runnable(){
      public void run(){
        matchContext.getSink().matchingFinished();
      }
    }
);
  }
  scheduler.executeNext();
}
