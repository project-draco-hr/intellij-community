{
  final PsiJavaCodeReferenceElement importReference=myImportStatement.getImportReference();
  if (importReference == null) {
    return Collections.emptyList();
  }
  final PsiJavaFile javaFile=PsiTreeUtil.getParentOfType(importReference,PsiJavaFile.class);
  if (javaFile == null) {
    return Collections.emptyList();
  }
  final JavaResolveResult[] resolveResults=importReference.multiResolve(false);
  if (resolveResults.length == 0) {
    return Collections.emptyList();
  }
  final PsiElement[] importedElements=new PsiElement[resolveResults.length];
  for (int i=0; i < resolveResults.length; i++) {
    final JavaResolveResult resolveResult=resolveResults[i];
    importedElements[i]=resolveResult.getElement();
  }
  final ReferenceCollector collector=new ReferenceCollector(importedElements,myImportStatement.isOnDemand(),myImportStatic);
  javaFile.accept(collector);
  myClassReferenceListMap=collector.getClassReferenceListMap();
  if (myClassReferenceListMap.isEmpty()) {
    return Collections.emptyList();
  }
  return new ArrayList<>(myClassReferenceListMap.keySet());
}
