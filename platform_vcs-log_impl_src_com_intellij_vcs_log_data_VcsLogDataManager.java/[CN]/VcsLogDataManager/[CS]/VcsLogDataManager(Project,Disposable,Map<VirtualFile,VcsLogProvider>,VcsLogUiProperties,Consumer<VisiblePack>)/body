{
  Disposer.register(parentDisposable,this);
  myProject=project;
  myLogProviders=logProviders;
  myDataLoaderQueue=new BackgroundTaskQueue(project,"Loading history...");
  myUserRegistry=(VcsUserRegistryImpl)ServiceManager.getService(project,VcsUserRegistry.class);
  try {
    myHashMap=new VcsLogHashMapImpl(myProject,logProviders);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  myMiniDetailsGetter=new MiniDetailsGetter(myHashMap,logProviders,myTopCommitsDetailsCache,this);
  myDetailsGetter=new CommitDetailsGetter(myHashMap,logProviders,this);
  myContainingBranchesGetter=new ContainingBranchesGetter(this,this);
  myFilterer=new VcsLogFiltererImpl(myProject,myLogProviders,myHashMap,myTopCommitsDetailsCache,myDetailsGetter,PermanentGraph.SortType.values()[uiProperties.getBekSortType()],visiblePackConsumer);
  myDataPackUpdateHandler=new Consumer<DataPack>(){
    @Override public void consume(    DataPack dataPack){
      myFilterer.onRefresh(dataPack);
    }
  }
;
  myRefresher=new VcsLogRefresherImpl(myProject,myHashMap,myLogProviders,myUserRegistry,myTopCommitsDetailsCache,myDataPackUpdateHandler,new Consumer<Exception>(){
    @Override public void consume(    Exception e){
      if (!(e instanceof ProcessCanceledException)) {
        LOG.error(e);
      }
    }
  }
,RECENT_COMMITS_COUNT);
}
