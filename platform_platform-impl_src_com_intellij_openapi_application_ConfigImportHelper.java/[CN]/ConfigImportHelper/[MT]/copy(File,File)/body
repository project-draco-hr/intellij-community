{
  src=src.getCanonicalFile();
  dest=dest.getCanonicalFile();
  if (!src.isDirectory()) {
    throw new IOException(ApplicationBundle.message("config.import.invalid.directory.error",src.getAbsolutePath()));
  }
  if (!dest.isDirectory()) {
    throw new IOException(ApplicationBundle.message("config.import.invalid.directory.error",dest.getAbsolutePath()));
  }
  if (FileUtil.filesEqual(src,dest)) {
    return;
  }
  FileUtil.ensureExists(dest);
  File[] childFiles=src.listFiles(new FilenameFilter(){
    @Override public boolean accept(    @NotNull File dir,    @NotNull String name){
      return !StringUtil.startsWithChar(name,'.') && !name.equals(PLUGINS_PATH) && !name.equals(PLUGINS_PATH);
    }
  }
);
  if (childFiles == null || childFiles.length == 0) {
    return;
  }
  for (  File from : childFiles) {
    File to=new File(dest,from.getName());
    if (from.isDirectory()) {
      FileUtil.copyDir(from,to,false);
    }
 else {
      FileUtil.copy(from,to);
    }
  }
  File plugins=new File(src,PLUGINS_PATH);
  if (plugins.exists()) {
    List<IdeaPluginDescriptorImpl> descriptors=new SmartList<IdeaPluginDescriptorImpl>();
    PluginManagerCore.loadDescriptors(plugins,descriptors,null,0);
    List<String> oldPlugins=new SmartList<String>();
    for (    IdeaPluginDescriptorImpl descriptor : descriptors) {
      if (descriptor.isEnabled() && !descriptor.isBundled()) {
        oldPlugins.add(descriptor.getPluginId().getIdString());
      }
    }
    if (!oldPlugins.isEmpty()) {
      PluginManagerCore.savePluginsList(oldPlugins,false,new File(dest,PluginManager.INSTALLED_TXT));
    }
  }
}
