{
  if (element instanceof PyFile) {
    final VirtualFile file=((PyFile)element).getVirtualFile();
    if (file != null) {
      if (myName.equals(file.getNameWithoutExtension())) {
        return setResult(element,null);
      }
 else       if (PyNames.INIT_DOT_PY.equals(file.getName())) {
        VirtualFile dir=file.getParent();
        if ((dir != null) && myName.equals(dir.getName())) {
          return setResult(element,null);
        }
      }
    }
  }
 else   if (element instanceof PsiNamedElement) {
    if (myName.equals(((PsiNamedElement)element).getName())) {
      return setResult(element,null);
    }
  }
 else   if (element instanceof PyReferenceExpression) {
    PyReferenceExpression expr=(PyReferenceExpression)element;
    String referencedName=expr.getReferencedName();
    if (referencedName != null && referencedName.equals(myName)) {
      return setResult(element,null);
    }
  }
 else   if (element instanceof NameDefiner) {
    final NameDefiner definer=(NameDefiner)element;
    PsiElement by_name=definer.getElementNamed(myName);
    if (by_name != null) {
      if (by_name instanceof PyImportedModule && myResult instanceof PyImportedModule && ((PyImportedModule)by_name).isAncestorOf((PyImportedModule)myResult)) {
        return false;
      }
      setResult(by_name,definer);
      if (!PsiTreeUtil.isAncestor(element,by_name,true)) {
        addNameDefiner(definer);
      }
      if (!(myResult instanceof PyImportedModule) && PsiTreeUtil.getParentOfType(element,PyExceptPart.class) == null) {
        return false;
      }
    }
 else     if (element instanceof PyImportElement) {
      final PyImportElement importElement=(PyImportElement)element;
      final PyQualifiedName qName=importElement.getImportedQName();
      if (qName != null && qName.getComponentCount() > 1 && myName.equals(qName.getLastComponent()) && PyNames.INIT_DOT_PY.equals(importElement.getContainingFile().getName())) {
        final PsiElement packageElement=ResolveImportUtil.resolveImportElement(importElement,qName.removeLastComponent());
        if (PyUtil.turnDirIntoInit(packageElement) == importElement.getContainingFile()) {
          myResult=PyUtil.turnDirIntoInit(ResolveImportUtil.resolveImportElement(importElement));
          addNameDefiner(importElement);
        }
      }
      String definedName=importElement.getAsName();
      if (definedName == null) {
        if (qName != null && qName.getComponentCount() == 1) {
          definedName=qName.getComponents().get(0);
        }
      }
      if (myName.equals(definedName)) {
        addNameDefiner(importElement);
      }
    }
  }
 else   if (element instanceof PyFromImportStatement && PyNames.INIT_DOT_PY.equals(element.getContainingFile().getName())) {
    final PyFromImportStatement fromImportStatement=(PyFromImportStatement)element;
    final PyQualifiedName qName=fromImportStatement.getImportSourceQName();
    if (qName != null && qName.endsWith(myName)) {
      final PsiElement source=PyUtil.turnInitIntoDir(ResolveImportUtil.resolveFromImportStatementSource(fromImportStatement));
      if (source != null && source.getParent() == element.getContainingFile().getContainingDirectory()) {
        myResult=source;
        addNameDefiner(fromImportStatement);
      }
    }
  }
  return true;
}
