{
  return new Computable<Collection<Module>>(){
    @Override public Collection<Module> compute(){
      List<Module> orphanIdeModules=ContainerUtil.newSmartList();
      for (      Module module : platformFacade.getModules(project)) {
        if (!ExternalSystemApiUtil.isExternalSystemAwareModule(projectData.getOwner(),module))         continue;
        final String rootProjectPath=ExternalSystemApiUtil.getExternalRootProjectPath(module);
        if (projectData.getLinkedExternalProjectPath().equals(rootProjectPath)) {
          final String projectPath=ExternalSystemApiUtil.getExternalProjectPath(module);
          final String projectId=ExternalSystemApiUtil.getExternalProjectId(module);
          final DataNode<ModuleData> found=ContainerUtil.find(toImport,new Condition<DataNode<ModuleData>>(){
            @Override public boolean value(            DataNode<ModuleData> node){
              final ModuleData moduleData=node.getData();
              return moduleData.getId().equals(projectId) && moduleData.getLinkedExternalProjectPath().equals(projectPath);
            }
          }
);
          if (found == null) {
            orphanIdeModules.add(module);
          }
        }
      }
      return orphanIdeModules;
    }
  }
;
}
