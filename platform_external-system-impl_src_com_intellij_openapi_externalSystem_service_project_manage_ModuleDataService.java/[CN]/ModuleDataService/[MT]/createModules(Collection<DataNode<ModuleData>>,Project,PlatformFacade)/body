{
  Application application=ApplicationManager.getApplication();
  final Map<DataNode<ModuleData>,Module> moduleMappings=ContainerUtilRt.newHashMap();
  application.runWriteAction(new Runnable(){
    @Override public void run(){
      for (      DataNode<ModuleData> module : toCreate) {
        importModule(module);
      }
    }
    private void importModule(    @NotNull DataNode<ModuleData> module){
      ModuleData data=module.getData();
      final Module created=platformFacade.newModule(project,data.getModuleFilePath(),data.getModuleTypeId());
      final ModifiableRootModel moduleRootModel=platformFacade.getModuleModifiableModel(created);
      moduleRootModel.inheritSdk();
      setModuleOptions(created,module);
      RootPolicy<Object> visitor=new RootPolicy<Object>(){
        @Override public Object visitLibraryOrderEntry(        LibraryOrderEntry libraryOrderEntry,        Object value){
          moduleRootModel.removeOrderEntry(libraryOrderEntry);
          return value;
        }
        @Override public Object visitModuleOrderEntry(        ModuleOrderEntry moduleOrderEntry,        Object value){
          moduleRootModel.removeOrderEntry(moduleOrderEntry);
          return value;
        }
      }
;
      try {
        for (        OrderEntry orderEntry : moduleRootModel.getOrderEntries()) {
          orderEntry.accept(visitor,null);
        }
      }
  finally {
        moduleRootModel.commit();
      }
      moduleMappings.put(module,created);
    }
  }
);
}
