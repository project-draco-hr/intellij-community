{
  final Collection<Module> toRemove=toRemoveComputable.compute();
  final List<Module> modules=new SmartList<Module>(toRemove);
  for (  DataNode<ModuleData> moduleDataNode : toIgnore) {
    final Module module=platformFacade.findIdeModule(moduleDataNode.getData(),project);
    ContainerUtil.addIfNotNull(modules,module);
  }
  if (modules.isEmpty()) {
    return;
  }
  ContainerUtil.removeDuplicates(modules);
  ExternalSystemApiUtil.executeProjectChangeAction(synchronous,new DisposeAwareProjectChange(project){
    @Override public void execute(){
      for (      Module module : modules) {
        if (module.isDisposed())         continue;
        unlinkModuleFromExternalSystem(module);
      }
    }
  }
);
  ruleOrphanModules(modules,project,projectData.getOwner(),new Consumer<List<Module>>(){
    @Override public void consume(    final List<Module> modules){
      ExternalSystemApiUtil.executeProjectChangeAction(synchronous,new DisposeAwareProjectChange(project){
        @Override public void execute(){
          for (          Module module : modules) {
            if (module.isDisposed())             continue;
            ModuleManager moduleManager=ModuleManager.getInstance(module.getProject());
            String path=module.getModuleFilePath();
            moduleManager.disposeModule(module);
            File file=new File(path);
            if (file.isFile()) {
              boolean success=file.delete();
              if (!success) {
                LOG.warn("Can't remove module file at '" + path + "'");
              }
            }
          }
        }
      }
);
    }
  }
);
}
